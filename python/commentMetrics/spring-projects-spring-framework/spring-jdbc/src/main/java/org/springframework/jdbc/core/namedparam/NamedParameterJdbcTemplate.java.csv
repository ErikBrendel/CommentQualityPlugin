# id;timestamp;commentText;codeText;commentWords;codeWords
NamedParameterJdbcTemplate -> public NamedParameterJdbcTemplate(JdbcOperations classicJdbcTemplate);1328020251;Create a new NamedParameterJdbcTemplate for the given classic_Spring {@link org.springframework.jdbc.core.JdbcTemplate}._@param classicJdbcTemplate the classic Spring JdbcTemplate to wrap;public NamedParameterJdbcTemplate(JdbcOperations classicJdbcTemplate) {_		Assert.notNull(classicJdbcTemplate, "JdbcTemplate must not be null")__		this.classicJdbcTemplate = classicJdbcTemplate__	};create,a,new,named,parameter,jdbc,template,for,the,given,classic,spring,link,org,springframework,jdbc,core,jdbc,template,param,classic,jdbc,template,the,classic,spring,jdbc,template,to,wrap;public,named,parameter,jdbc,template,jdbc,operations,classic,jdbc,template,assert,not,null,classic,jdbc,template,jdbc,template,must,not,be,null,this,classic,jdbc,template,classic,jdbc,template
NamedParameterJdbcTemplate -> public NamedParameterJdbcTemplate(JdbcOperations classicJdbcTemplate);1356735495;Create a new NamedParameterJdbcTemplate for the given classic_Spring {@link org.springframework.jdbc.core.JdbcTemplate}._@param classicJdbcTemplate the classic Spring JdbcTemplate to wrap;public NamedParameterJdbcTemplate(JdbcOperations classicJdbcTemplate) {_		Assert.notNull(classicJdbcTemplate, "JdbcTemplate must not be null")__		this.classicJdbcTemplate = classicJdbcTemplate__	};create,a,new,named,parameter,jdbc,template,for,the,given,classic,spring,link,org,springframework,jdbc,core,jdbc,template,param,classic,jdbc,template,the,classic,spring,jdbc,template,to,wrap;public,named,parameter,jdbc,template,jdbc,operations,classic,jdbc,template,assert,not,null,classic,jdbc,template,jdbc,template,must,not,be,null,this,classic,jdbc,template,classic,jdbc,template
NamedParameterJdbcTemplate -> public NamedParameterJdbcTemplate(JdbcOperations classicJdbcTemplate);1357119239;Create a new NamedParameterJdbcTemplate for the given classic_Spring {@link org.springframework.jdbc.core.JdbcTemplate}._@param classicJdbcTemplate the classic Spring JdbcTemplate to wrap;public NamedParameterJdbcTemplate(JdbcOperations classicJdbcTemplate) {_		Assert.notNull(classicJdbcTemplate, "JdbcTemplate must not be null")__		this.classicJdbcTemplate = classicJdbcTemplate__	};create,a,new,named,parameter,jdbc,template,for,the,given,classic,spring,link,org,springframework,jdbc,core,jdbc,template,param,classic,jdbc,template,the,classic,spring,jdbc,template,to,wrap;public,named,parameter,jdbc,template,jdbc,operations,classic,jdbc,template,assert,not,null,classic,jdbc,template,jdbc,template,must,not,be,null,this,classic,jdbc,template,classic,jdbc,template
NamedParameterJdbcTemplate -> public NamedParameterJdbcTemplate(JdbcOperations classicJdbcTemplate);1362408075;Create a new NamedParameterJdbcTemplate for the given classic_Spring {@link org.springframework.jdbc.core.JdbcTemplate}._@param classicJdbcTemplate the classic Spring JdbcTemplate to wrap;public NamedParameterJdbcTemplate(JdbcOperations classicJdbcTemplate) {_		Assert.notNull(classicJdbcTemplate, "JdbcTemplate must not be null")__		this.classicJdbcTemplate = classicJdbcTemplate__	};create,a,new,named,parameter,jdbc,template,for,the,given,classic,spring,link,org,springframework,jdbc,core,jdbc,template,param,classic,jdbc,template,the,classic,spring,jdbc,template,to,wrap;public,named,parameter,jdbc,template,jdbc,operations,classic,jdbc,template,assert,not,null,classic,jdbc,template,jdbc,template,must,not,be,null,this,classic,jdbc,template,classic,jdbc,template
NamedParameterJdbcTemplate -> public NamedParameterJdbcTemplate(JdbcOperations classicJdbcTemplate);1368482696;Create a new NamedParameterJdbcTemplate for the given classic_Spring {@link org.springframework.jdbc.core.JdbcTemplate}._@param classicJdbcTemplate the classic Spring JdbcTemplate to wrap;public NamedParameterJdbcTemplate(JdbcOperations classicJdbcTemplate) {_		Assert.notNull(classicJdbcTemplate, "JdbcTemplate must not be null")__		this.classicJdbcTemplate = classicJdbcTemplate__	};create,a,new,named,parameter,jdbc,template,for,the,given,classic,spring,link,org,springframework,jdbc,core,jdbc,template,param,classic,jdbc,template,the,classic,spring,jdbc,template,to,wrap;public,named,parameter,jdbc,template,jdbc,operations,classic,jdbc,template,assert,not,null,classic,jdbc,template,jdbc,template,must,not,be,null,this,classic,jdbc,template,classic,jdbc,template
NamedParameterJdbcTemplate -> public NamedParameterJdbcTemplate(JdbcOperations classicJdbcTemplate);1393610431;Create a new NamedParameterJdbcTemplate for the given classic_Spring {@link org.springframework.jdbc.core.JdbcTemplate}._@param classicJdbcTemplate the classic Spring JdbcTemplate to wrap;public NamedParameterJdbcTemplate(JdbcOperations classicJdbcTemplate) {_		Assert.notNull(classicJdbcTemplate, "JdbcTemplate must not be null")__		this.classicJdbcTemplate = classicJdbcTemplate__	};create,a,new,named,parameter,jdbc,template,for,the,given,classic,spring,link,org,springframework,jdbc,core,jdbc,template,param,classic,jdbc,template,the,classic,spring,jdbc,template,to,wrap;public,named,parameter,jdbc,template,jdbc,operations,classic,jdbc,template,assert,not,null,classic,jdbc,template,jdbc,template,must,not,be,null,this,classic,jdbc,template,classic,jdbc,template
NamedParameterJdbcTemplate -> public NamedParameterJdbcTemplate(JdbcOperations classicJdbcTemplate);1410305334;Create a new NamedParameterJdbcTemplate for the given classic_Spring {@link org.springframework.jdbc.core.JdbcTemplate}._@param classicJdbcTemplate the classic Spring JdbcTemplate to wrap;public NamedParameterJdbcTemplate(JdbcOperations classicJdbcTemplate) {_		Assert.notNull(classicJdbcTemplate, "JdbcTemplate must not be null")__		this.classicJdbcTemplate = classicJdbcTemplate__	};create,a,new,named,parameter,jdbc,template,for,the,given,classic,spring,link,org,springframework,jdbc,core,jdbc,template,param,classic,jdbc,template,the,classic,spring,jdbc,template,to,wrap;public,named,parameter,jdbc,template,jdbc,operations,classic,jdbc,template,assert,not,null,classic,jdbc,template,jdbc,template,must,not,be,null,this,classic,jdbc,template,classic,jdbc,template
NamedParameterJdbcTemplate -> public NamedParameterJdbcTemplate(JdbcOperations classicJdbcTemplate);1419966315;Create a new NamedParameterJdbcTemplate for the given classic_Spring {@link org.springframework.jdbc.core.JdbcTemplate}._@param classicJdbcTemplate the classic Spring JdbcTemplate to wrap;public NamedParameterJdbcTemplate(JdbcOperations classicJdbcTemplate) {_		Assert.notNull(classicJdbcTemplate, "JdbcTemplate must not be null")__		this.classicJdbcTemplate = classicJdbcTemplate__	};create,a,new,named,parameter,jdbc,template,for,the,given,classic,spring,link,org,springframework,jdbc,core,jdbc,template,param,classic,jdbc,template,the,classic,spring,jdbc,template,to,wrap;public,named,parameter,jdbc,template,jdbc,operations,classic,jdbc,template,assert,not,null,classic,jdbc,template,jdbc,template,must,not,be,null,this,classic,jdbc,template,classic,jdbc,template
NamedParameterJdbcTemplate -> public NamedParameterJdbcTemplate(JdbcOperations classicJdbcTemplate);1467730834;Create a new NamedParameterJdbcTemplate for the given classic_Spring {@link org.springframework.jdbc.core.JdbcTemplate}._@param classicJdbcTemplate the classic Spring JdbcTemplate to wrap;public NamedParameterJdbcTemplate(JdbcOperations classicJdbcTemplate) {_		Assert.notNull(classicJdbcTemplate, "JdbcTemplate must not be null")__		this.classicJdbcTemplate = classicJdbcTemplate__	};create,a,new,named,parameter,jdbc,template,for,the,given,classic,spring,link,org,springframework,jdbc,core,jdbc,template,param,classic,jdbc,template,the,classic,spring,jdbc,template,to,wrap;public,named,parameter,jdbc,template,jdbc,operations,classic,jdbc,template,assert,not,null,classic,jdbc,template,jdbc,template,must,not,be,null,this,classic,jdbc,template,classic,jdbc,template
NamedParameterJdbcTemplate -> public NamedParameterJdbcTemplate(JdbcOperations classicJdbcTemplate);1496259743;Create a new NamedParameterJdbcTemplate for the given classic_Spring {@link org.springframework.jdbc.core.JdbcTemplate}._@param classicJdbcTemplate the classic Spring JdbcTemplate to wrap;public NamedParameterJdbcTemplate(JdbcOperations classicJdbcTemplate) {_		Assert.notNull(classicJdbcTemplate, "JdbcTemplate must not be null")__		this.classicJdbcTemplate = classicJdbcTemplate__	};create,a,new,named,parameter,jdbc,template,for,the,given,classic,spring,link,org,springframework,jdbc,core,jdbc,template,param,classic,jdbc,template,the,classic,spring,jdbc,template,to,wrap;public,named,parameter,jdbc,template,jdbc,operations,classic,jdbc,template,assert,not,null,classic,jdbc,template,jdbc,template,must,not,be,null,this,classic,jdbc,template,classic,jdbc,template
NamedParameterJdbcTemplate -> public NamedParameterJdbcTemplate(JdbcOperations classicJdbcTemplate);1496837955;Create a new NamedParameterJdbcTemplate for the given classic_Spring {@link org.springframework.jdbc.core.JdbcTemplate}._@param classicJdbcTemplate the classic Spring JdbcTemplate to wrap;public NamedParameterJdbcTemplate(JdbcOperations classicJdbcTemplate) {_		Assert.notNull(classicJdbcTemplate, "JdbcTemplate must not be null")__		this.classicJdbcTemplate = classicJdbcTemplate__	};create,a,new,named,parameter,jdbc,template,for,the,given,classic,spring,link,org,springframework,jdbc,core,jdbc,template,param,classic,jdbc,template,the,classic,spring,jdbc,template,to,wrap;public,named,parameter,jdbc,template,jdbc,operations,classic,jdbc,template,assert,not,null,classic,jdbc,template,jdbc,template,must,not,be,null,this,classic,jdbc,template,classic,jdbc,template
NamedParameterJdbcTemplate -> public NamedParameterJdbcTemplate(JdbcOperations classicJdbcTemplate);1502974979;Create a new NamedParameterJdbcTemplate for the given classic_Spring {@link org.springframework.jdbc.core.JdbcTemplate}._@param classicJdbcTemplate the classic Spring JdbcTemplate to wrap;public NamedParameterJdbcTemplate(JdbcOperations classicJdbcTemplate) {_		Assert.notNull(classicJdbcTemplate, "JdbcTemplate must not be null")__		this.classicJdbcTemplate = classicJdbcTemplate__	};create,a,new,named,parameter,jdbc,template,for,the,given,classic,spring,link,org,springframework,jdbc,core,jdbc,template,param,classic,jdbc,template,the,classic,spring,jdbc,template,to,wrap;public,named,parameter,jdbc,template,jdbc,operations,classic,jdbc,template,assert,not,null,classic,jdbc,template,jdbc,template,must,not,be,null,this,classic,jdbc,template,classic,jdbc,template
NamedParameterJdbcTemplate -> public NamedParameterJdbcTemplate(JdbcOperations classicJdbcTemplate);1503008146;Create a new NamedParameterJdbcTemplate for the given classic_Spring {@link org.springframework.jdbc.core.JdbcTemplate}._@param classicJdbcTemplate the classic Spring JdbcTemplate to wrap;public NamedParameterJdbcTemplate(JdbcOperations classicJdbcTemplate) {_		Assert.notNull(classicJdbcTemplate, "JdbcTemplate must not be null")__		this.classicJdbcTemplate = classicJdbcTemplate__	};create,a,new,named,parameter,jdbc,template,for,the,given,classic,spring,link,org,springframework,jdbc,core,jdbc,template,param,classic,jdbc,template,the,classic,spring,jdbc,template,to,wrap;public,named,parameter,jdbc,template,jdbc,operations,classic,jdbc,template,assert,not,null,classic,jdbc,template,jdbc,template,must,not,be,null,this,classic,jdbc,template,classic,jdbc,template
NamedParameterJdbcTemplate -> public NamedParameterJdbcTemplate(JdbcOperations classicJdbcTemplate);1509754029;Create a new NamedParameterJdbcTemplate for the given classic_Spring {@link org.springframework.jdbc.core.JdbcTemplate}._@param classicJdbcTemplate the classic Spring JdbcTemplate to wrap;public NamedParameterJdbcTemplate(JdbcOperations classicJdbcTemplate) {_		Assert.notNull(classicJdbcTemplate, "JdbcTemplate must not be null")__		this.classicJdbcTemplate = classicJdbcTemplate__	};create,a,new,named,parameter,jdbc,template,for,the,given,classic,spring,link,org,springframework,jdbc,core,jdbc,template,param,classic,jdbc,template,the,classic,spring,jdbc,template,to,wrap;public,named,parameter,jdbc,template,jdbc,operations,classic,jdbc,template,assert,not,null,classic,jdbc,template,jdbc,template,must,not,be,null,this,classic,jdbc,template,classic,jdbc,template
NamedParameterJdbcTemplate -> public NamedParameterJdbcTemplate(JdbcOperations classicJdbcTemplate);1511122644;Create a new NamedParameterJdbcTemplate for the given classic_Spring {@link org.springframework.jdbc.core.JdbcTemplate}._@param classicJdbcTemplate the classic Spring JdbcTemplate to wrap;public NamedParameterJdbcTemplate(JdbcOperations classicJdbcTemplate) {_		Assert.notNull(classicJdbcTemplate, "JdbcTemplate must not be null")__		this.classicJdbcTemplate = classicJdbcTemplate__	};create,a,new,named,parameter,jdbc,template,for,the,given,classic,spring,link,org,springframework,jdbc,core,jdbc,template,param,classic,jdbc,template,the,classic,spring,jdbc,template,to,wrap;public,named,parameter,jdbc,template,jdbc,operations,classic,jdbc,template,assert,not,null,classic,jdbc,template,jdbc,template,must,not,be,null,this,classic,jdbc,template,classic,jdbc,template
NamedParameterJdbcTemplate -> public NamedParameterJdbcTemplate(JdbcOperations classicJdbcTemplate);1511712999;Create a new NamedParameterJdbcTemplate for the given classic_Spring {@link org.springframework.jdbc.core.JdbcTemplate}._@param classicJdbcTemplate the classic Spring JdbcTemplate to wrap;public NamedParameterJdbcTemplate(JdbcOperations classicJdbcTemplate) {_		Assert.notNull(classicJdbcTemplate, "JdbcTemplate must not be null")__		this.classicJdbcTemplate = classicJdbcTemplate__	};create,a,new,named,parameter,jdbc,template,for,the,given,classic,spring,link,org,springframework,jdbc,core,jdbc,template,param,classic,jdbc,template,the,classic,spring,jdbc,template,to,wrap;public,named,parameter,jdbc,template,jdbc,operations,classic,jdbc,template,assert,not,null,classic,jdbc,template,jdbc,template,must,not,be,null,this,classic,jdbc,template,classic,jdbc,template
NamedParameterJdbcTemplate -> public NamedParameterJdbcTemplate(JdbcOperations classicJdbcTemplate);1511966301;Create a new NamedParameterJdbcTemplate for the given classic_Spring {@link org.springframework.jdbc.core.JdbcTemplate}._@param classicJdbcTemplate the classic Spring JdbcTemplate to wrap;public NamedParameterJdbcTemplate(JdbcOperations classicJdbcTemplate) {_		Assert.notNull(classicJdbcTemplate, "JdbcTemplate must not be null")__		this.classicJdbcTemplate = classicJdbcTemplate__	};create,a,new,named,parameter,jdbc,template,for,the,given,classic,spring,link,org,springframework,jdbc,core,jdbc,template,param,classic,jdbc,template,the,classic,spring,jdbc,template,to,wrap;public,named,parameter,jdbc,template,jdbc,operations,classic,jdbc,template,assert,not,null,classic,jdbc,template,jdbc,template,must,not,be,null,this,classic,jdbc,template,classic,jdbc,template
NamedParameterJdbcTemplate -> public NamedParameterJdbcTemplate(JdbcOperations classicJdbcTemplate);1519579380;Create a new NamedParameterJdbcTemplate for the given classic_Spring {@link org.springframework.jdbc.core.JdbcTemplate}._@param classicJdbcTemplate the classic Spring JdbcTemplate to wrap;public NamedParameterJdbcTemplate(JdbcOperations classicJdbcTemplate) {_		Assert.notNull(classicJdbcTemplate, "JdbcTemplate must not be null")__		this.classicJdbcTemplate = classicJdbcTemplate__	};create,a,new,named,parameter,jdbc,template,for,the,given,classic,spring,link,org,springframework,jdbc,core,jdbc,template,param,classic,jdbc,template,the,classic,spring,jdbc,template,to,wrap;public,named,parameter,jdbc,template,jdbc,operations,classic,jdbc,template,assert,not,null,classic,jdbc,template,jdbc,template,must,not,be,null,this,classic,jdbc,template,classic,jdbc,template
NamedParameterJdbcTemplate -> public NamedParameterJdbcTemplate(JdbcOperations classicJdbcTemplate);1530174524;Create a new NamedParameterJdbcTemplate for the given classic_Spring {@link org.springframework.jdbc.core.JdbcTemplate}._@param classicJdbcTemplate the classic Spring JdbcTemplate to wrap;public NamedParameterJdbcTemplate(JdbcOperations classicJdbcTemplate) {_		Assert.notNull(classicJdbcTemplate, "JdbcTemplate must not be null")__		this.classicJdbcTemplate = classicJdbcTemplate__	};create,a,new,named,parameter,jdbc,template,for,the,given,classic,spring,link,org,springframework,jdbc,core,jdbc,template,param,classic,jdbc,template,the,classic,spring,jdbc,template,to,wrap;public,named,parameter,jdbc,template,jdbc,operations,classic,jdbc,template,assert,not,null,classic,jdbc,template,jdbc,template,must,not,be,null,this,classic,jdbc,template,classic,jdbc,template
NamedParameterJdbcTemplate -> public NamedParameterJdbcTemplate(JdbcOperations classicJdbcTemplate);1542747953;Create a new NamedParameterJdbcTemplate for the given classic_Spring {@link org.springframework.jdbc.core.JdbcTemplate}._@param classicJdbcTemplate the classic Spring JdbcTemplate to wrap;public NamedParameterJdbcTemplate(JdbcOperations classicJdbcTemplate) {_		Assert.notNull(classicJdbcTemplate, "JdbcTemplate must not be null")__		this.classicJdbcTemplate = classicJdbcTemplate__	};create,a,new,named,parameter,jdbc,template,for,the,given,classic,spring,link,org,springframework,jdbc,core,jdbc,template,param,classic,jdbc,template,the,classic,spring,jdbc,template,to,wrap;public,named,parameter,jdbc,template,jdbc,operations,classic,jdbc,template,assert,not,null,classic,jdbc,template,jdbc,template,must,not,be,null,this,classic,jdbc,template,classic,jdbc,template
NamedParameterJdbcTemplate -> protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource, 			@Nullable Consumer<PreparedStatementCreatorFactory> customizer);1519579380;Build a {@link PreparedStatementCreator} based on the given SQL and named parameters._<p>Note: Used for the {@code update} variant with generated key handling, and also_delegated from {@link #getPreparedStatementCreator(String, SqlParameterSource)}._@param sql the SQL statement to execute_@param paramSource container of arguments to bind_@param customizer callback for setting further properties on the_{@link PreparedStatementCreatorFactory} in use), applied before the_actual {@code newPreparedStatementCreator} call_@return the corresponding {@link PreparedStatementCreator}_@since 5.0.5_@see #getParsedSql(String)_@see PreparedStatementCreatorFactory#PreparedStatementCreatorFactory(String, List)_@see PreparedStatementCreatorFactory#newPreparedStatementCreator(Object[]);protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource,_			@Nullable Consumer<PreparedStatementCreatorFactory> customizer) {__		ParsedSql parsedSql = getParsedSql(sql)__		String sqlToUse = NamedParameterUtils.substituteNamedParameters(parsedSql, paramSource)__		List<SqlParameter> declaredParameters = NamedParameterUtils.buildSqlParameterList(parsedSql, paramSource)__		PreparedStatementCreatorFactory pscf = new PreparedStatementCreatorFactory(sqlToUse, declaredParameters)__		if (customizer != null) {_			customizer.accept(pscf)__		}_		Object[] params = NamedParameterUtils.buildValueArray(parsedSql, paramSource, null)__		return pscf.newPreparedStatementCreator(params)__	};build,a,link,prepared,statement,creator,based,on,the,given,sql,and,named,parameters,p,note,used,for,the,code,update,variant,with,generated,key,handling,and,also,delegated,from,link,get,prepared,statement,creator,string,sql,parameter,source,param,sql,the,sql,statement,to,execute,param,param,source,container,of,arguments,to,bind,param,customizer,callback,for,setting,further,properties,on,the,link,prepared,statement,creator,factory,in,use,applied,before,the,actual,code,new,prepared,statement,creator,call,return,the,corresponding,link,prepared,statement,creator,since,5,0,5,see,get,parsed,sql,string,see,prepared,statement,creator,factory,prepared,statement,creator,factory,string,list,see,prepared,statement,creator,factory,new,prepared,statement,creator,object;protected,prepared,statement,creator,get,prepared,statement,creator,string,sql,sql,parameter,source,param,source,nullable,consumer,prepared,statement,creator,factory,customizer,parsed,sql,parsed,sql,get,parsed,sql,sql,string,sql,to,use,named,parameter,utils,substitute,named,parameters,parsed,sql,param,source,list,sql,parameter,declared,parameters,named,parameter,utils,build,sql,parameter,list,parsed,sql,param,source,prepared,statement,creator,factory,pscf,new,prepared,statement,creator,factory,sql,to,use,declared,parameters,if,customizer,null,customizer,accept,pscf,object,params,named,parameter,utils,build,value,array,parsed,sql,param,source,null,return,pscf,new,prepared,statement,creator,params
NamedParameterJdbcTemplate -> protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource, 			@Nullable Consumer<PreparedStatementCreatorFactory> customizer);1530174524;Build a {@link PreparedStatementCreator} based on the given SQL and named parameters._<p>Note: Used for the {@code update} variant with generated key handling, and also_delegated from {@link #getPreparedStatementCreator(String, SqlParameterSource)}._@param sql the SQL statement to execute_@param paramSource container of arguments to bind_@param customizer callback for setting further properties on the_{@link PreparedStatementCreatorFactory} in use), applied before the_actual {@code newPreparedStatementCreator} call_@return the corresponding {@link PreparedStatementCreator}_@since 5.0.5_@see #getParsedSql(String)_@see PreparedStatementCreatorFactory#PreparedStatementCreatorFactory(String, List)_@see PreparedStatementCreatorFactory#newPreparedStatementCreator(Object[]);protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource,_			@Nullable Consumer<PreparedStatementCreatorFactory> customizer) {__		ParsedSql parsedSql = getParsedSql(sql)__		String sqlToUse = NamedParameterUtils.substituteNamedParameters(parsedSql, paramSource)__		List<SqlParameter> declaredParameters = NamedParameterUtils.buildSqlParameterList(parsedSql, paramSource)__		PreparedStatementCreatorFactory pscf = new PreparedStatementCreatorFactory(sqlToUse, declaredParameters)__		if (customizer != null) {_			customizer.accept(pscf)__		}_		Object[] params = NamedParameterUtils.buildValueArray(parsedSql, paramSource, null)__		return pscf.newPreparedStatementCreator(params)__	};build,a,link,prepared,statement,creator,based,on,the,given,sql,and,named,parameters,p,note,used,for,the,code,update,variant,with,generated,key,handling,and,also,delegated,from,link,get,prepared,statement,creator,string,sql,parameter,source,param,sql,the,sql,statement,to,execute,param,param,source,container,of,arguments,to,bind,param,customizer,callback,for,setting,further,properties,on,the,link,prepared,statement,creator,factory,in,use,applied,before,the,actual,code,new,prepared,statement,creator,call,return,the,corresponding,link,prepared,statement,creator,since,5,0,5,see,get,parsed,sql,string,see,prepared,statement,creator,factory,prepared,statement,creator,factory,string,list,see,prepared,statement,creator,factory,new,prepared,statement,creator,object;protected,prepared,statement,creator,get,prepared,statement,creator,string,sql,sql,parameter,source,param,source,nullable,consumer,prepared,statement,creator,factory,customizer,parsed,sql,parsed,sql,get,parsed,sql,sql,string,sql,to,use,named,parameter,utils,substitute,named,parameters,parsed,sql,param,source,list,sql,parameter,declared,parameters,named,parameter,utils,build,sql,parameter,list,parsed,sql,param,source,prepared,statement,creator,factory,pscf,new,prepared,statement,creator,factory,sql,to,use,declared,parameters,if,customizer,null,customizer,accept,pscf,object,params,named,parameter,utils,build,value,array,parsed,sql,param,source,null,return,pscf,new,prepared,statement,creator,params
NamedParameterJdbcTemplate -> protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource, 			@Nullable Consumer<PreparedStatementCreatorFactory> customizer);1542747953;Build a {@link PreparedStatementCreator} based on the given SQL and named parameters._<p>Note: Used for the {@code update} variant with generated key handling, and also_delegated from {@link #getPreparedStatementCreator(String, SqlParameterSource)}._@param sql the SQL statement to execute_@param paramSource container of arguments to bind_@param customizer callback for setting further properties on the_{@link PreparedStatementCreatorFactory} in use), applied before the_actual {@code newPreparedStatementCreator} call_@return the corresponding {@link PreparedStatementCreator}_@since 5.0.5_@see #getParsedSql(String)_@see PreparedStatementCreatorFactory#PreparedStatementCreatorFactory(String, List)_@see PreparedStatementCreatorFactory#newPreparedStatementCreator(Object[]);protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource,_			@Nullable Consumer<PreparedStatementCreatorFactory> customizer) {__		ParsedSql parsedSql = getParsedSql(sql)__		PreparedStatementCreatorFactory pscf = getPreparedStatementCreatorFactory(parsedSql, paramSource)__		if (customizer != null) {_			customizer.accept(pscf)__		}_		Object[] params = NamedParameterUtils.buildValueArray(parsedSql, paramSource, null)__		return pscf.newPreparedStatementCreator(params)__	};build,a,link,prepared,statement,creator,based,on,the,given,sql,and,named,parameters,p,note,used,for,the,code,update,variant,with,generated,key,handling,and,also,delegated,from,link,get,prepared,statement,creator,string,sql,parameter,source,param,sql,the,sql,statement,to,execute,param,param,source,container,of,arguments,to,bind,param,customizer,callback,for,setting,further,properties,on,the,link,prepared,statement,creator,factory,in,use,applied,before,the,actual,code,new,prepared,statement,creator,call,return,the,corresponding,link,prepared,statement,creator,since,5,0,5,see,get,parsed,sql,string,see,prepared,statement,creator,factory,prepared,statement,creator,factory,string,list,see,prepared,statement,creator,factory,new,prepared,statement,creator,object;protected,prepared,statement,creator,get,prepared,statement,creator,string,sql,sql,parameter,source,param,source,nullable,consumer,prepared,statement,creator,factory,customizer,parsed,sql,parsed,sql,get,parsed,sql,sql,prepared,statement,creator,factory,pscf,get,prepared,statement,creator,factory,parsed,sql,param,source,if,customizer,null,customizer,accept,pscf,object,params,named,parameter,utils,build,value,array,parsed,sql,param,source,null,return,pscf,new,prepared,statement,creator,params
NamedParameterJdbcTemplate -> public int getCacheLimit();1328020251;Return the maximum number of entries for this template's SQL cache.;public int getCacheLimit() {_		return this.cacheLimit__	};return,the,maximum,number,of,entries,for,this,template,s,sql,cache;public,int,get,cache,limit,return,this,cache,limit
NamedParameterJdbcTemplate -> public int getCacheLimit();1356735495;Return the maximum number of entries for this template's SQL cache.;public int getCacheLimit() {_		return this.cacheLimit__	};return,the,maximum,number,of,entries,for,this,template,s,sql,cache;public,int,get,cache,limit,return,this,cache,limit
NamedParameterJdbcTemplate -> public int getCacheLimit();1357119239;Return the maximum number of entries for this template's SQL cache.;public int getCacheLimit() {_		return this.cacheLimit__	};return,the,maximum,number,of,entries,for,this,template,s,sql,cache;public,int,get,cache,limit,return,this,cache,limit
NamedParameterJdbcTemplate -> public int getCacheLimit();1362408075;Return the maximum number of entries for this template's SQL cache.;public int getCacheLimit() {_		return this.cacheLimit__	};return,the,maximum,number,of,entries,for,this,template,s,sql,cache;public,int,get,cache,limit,return,this,cache,limit
NamedParameterJdbcTemplate -> public int getCacheLimit();1368482696;Return the maximum number of entries for this template's SQL cache.;public int getCacheLimit() {_		return this.cacheLimit__	};return,the,maximum,number,of,entries,for,this,template,s,sql,cache;public,int,get,cache,limit,return,this,cache,limit
NamedParameterJdbcTemplate -> public int getCacheLimit();1393610431;Return the maximum number of entries for this template's SQL cache.;public int getCacheLimit() {_		return this.cacheLimit__	};return,the,maximum,number,of,entries,for,this,template,s,sql,cache;public,int,get,cache,limit,return,this,cache,limit
NamedParameterJdbcTemplate -> public int getCacheLimit();1410305334;Return the maximum number of entries for this template's SQL cache.;public int getCacheLimit() {_		return this.cacheLimit__	};return,the,maximum,number,of,entries,for,this,template,s,sql,cache;public,int,get,cache,limit,return,this,cache,limit
NamedParameterJdbcTemplate -> public int getCacheLimit();1419966315;Return the maximum number of entries for this template's SQL cache.;public int getCacheLimit() {_		return this.cacheLimit__	};return,the,maximum,number,of,entries,for,this,template,s,sql,cache;public,int,get,cache,limit,return,this,cache,limit
NamedParameterJdbcTemplate -> public int getCacheLimit();1467730834;Return the maximum number of entries for this template's SQL cache.;public int getCacheLimit() {_		return this.cacheLimit__	};return,the,maximum,number,of,entries,for,this,template,s,sql,cache;public,int,get,cache,limit,return,this,cache,limit
NamedParameterJdbcTemplate -> public int getCacheLimit();1496259743;Return the maximum number of entries for this template's SQL cache.;public int getCacheLimit() {_		return this.cacheLimit__	};return,the,maximum,number,of,entries,for,this,template,s,sql,cache;public,int,get,cache,limit,return,this,cache,limit
NamedParameterJdbcTemplate -> public int getCacheLimit();1496837955;Return the maximum number of entries for this template's SQL cache.;public int getCacheLimit() {_		return this.cacheLimit__	};return,the,maximum,number,of,entries,for,this,template,s,sql,cache;public,int,get,cache,limit,return,this,cache,limit
NamedParameterJdbcTemplate -> public int getCacheLimit();1502974979;Return the maximum number of entries for this template's SQL cache.;public int getCacheLimit() {_		return this.cacheLimit__	};return,the,maximum,number,of,entries,for,this,template,s,sql,cache;public,int,get,cache,limit,return,this,cache,limit
NamedParameterJdbcTemplate -> public int getCacheLimit();1503008146;Return the maximum number of entries for this template's SQL cache.;public int getCacheLimit() {_		return this.cacheLimit__	};return,the,maximum,number,of,entries,for,this,template,s,sql,cache;public,int,get,cache,limit,return,this,cache,limit
NamedParameterJdbcTemplate -> public int getCacheLimit();1509754029;Return the maximum number of entries for this template's SQL cache.;public int getCacheLimit() {_		return this.cacheLimit__	};return,the,maximum,number,of,entries,for,this,template,s,sql,cache;public,int,get,cache,limit,return,this,cache,limit
NamedParameterJdbcTemplate -> public int getCacheLimit();1511122644;Return the maximum number of entries for this template's SQL cache.;public int getCacheLimit() {_		return this.cacheLimit__	};return,the,maximum,number,of,entries,for,this,template,s,sql,cache;public,int,get,cache,limit,return,this,cache,limit
NamedParameterJdbcTemplate -> public int getCacheLimit();1511712999;Return the maximum number of entries for this template's SQL cache.;public int getCacheLimit() {_		return this.cacheLimit__	};return,the,maximum,number,of,entries,for,this,template,s,sql,cache;public,int,get,cache,limit,return,this,cache,limit
NamedParameterJdbcTemplate -> public int getCacheLimit();1511966301;Return the maximum number of entries for this template's SQL cache.;public int getCacheLimit() {_		return this.cacheLimit__	};return,the,maximum,number,of,entries,for,this,template,s,sql,cache;public,int,get,cache,limit,return,this,cache,limit
NamedParameterJdbcTemplate -> public int getCacheLimit();1519579380;Return the maximum number of entries for this template's SQL cache.;public int getCacheLimit() {_		return this.cacheLimit__	};return,the,maximum,number,of,entries,for,this,template,s,sql,cache;public,int,get,cache,limit,return,this,cache,limit
NamedParameterJdbcTemplate -> public int getCacheLimit();1530174524;Return the maximum number of entries for this template's SQL cache.;public int getCacheLimit() {_		return this.cacheLimit__	};return,the,maximum,number,of,entries,for,this,template,s,sql,cache;public,int,get,cache,limit,return,this,cache,limit
NamedParameterJdbcTemplate -> public int getCacheLimit();1542747953;Return the maximum number of entries for this template's SQL cache.;public int getCacheLimit() {_		return this.cacheLimit__	};return,the,maximum,number,of,entries,for,this,template,s,sql,cache;public,int,get,cache,limit,return,this,cache,limit
NamedParameterJdbcTemplate -> public JdbcOperations getJdbcOperations();1328020251;Expose the classic Spring JdbcTemplate to allow invocation of_less commonly used methods.;public JdbcOperations getJdbcOperations() {_		return this.classicJdbcTemplate__	};expose,the,classic,spring,jdbc,template,to,allow,invocation,of,less,commonly,used,methods;public,jdbc,operations,get,jdbc,operations,return,this,classic,jdbc,template
NamedParameterJdbcTemplate -> public JdbcOperations getJdbcOperations();1357119239;Expose the classic Spring JdbcTemplate to allow invocation of_less commonly used methods.;public JdbcOperations getJdbcOperations() {_		return this.classicJdbcTemplate__	};expose,the,classic,spring,jdbc,template,to,allow,invocation,of,less,commonly,used,methods;public,jdbc,operations,get,jdbc,operations,return,this,classic,jdbc,template
NamedParameterJdbcTemplate -> public JdbcOperations getJdbcOperations();1362408075;Expose the classic Spring JdbcTemplate to allow invocation of_less commonly used methods.;public JdbcOperations getJdbcOperations() {_		return this.classicJdbcTemplate__	};expose,the,classic,spring,jdbc,template,to,allow,invocation,of,less,commonly,used,methods;public,jdbc,operations,get,jdbc,operations,return,this,classic,jdbc,template
NamedParameterJdbcTemplate -> public JdbcTemplate getJdbcTemplate();1511966301;Expose the classic Spring {@link JdbcTemplate} itself, if available,_in particular for passing it on to other {@code JdbcTemplate} consumers._<p>If sufficient for the purposes at hand, {@link #getJdbcOperations()}_is recommended over this variant._@since 5.0.3;public JdbcTemplate getJdbcTemplate() {_		Assert.state(this.classicJdbcTemplate instanceof JdbcTemplate, "No JdbcTemplate available")__		return (JdbcTemplate) this.classicJdbcTemplate__	};expose,the,classic,spring,link,jdbc,template,itself,if,available,in,particular,for,passing,it,on,to,other,code,jdbc,template,consumers,p,if,sufficient,for,the,purposes,at,hand,link,get,jdbc,operations,is,recommended,over,this,variant,since,5,0,3;public,jdbc,template,get,jdbc,template,assert,state,this,classic,jdbc,template,instanceof,jdbc,template,no,jdbc,template,available,return,jdbc,template,this,classic,jdbc,template
NamedParameterJdbcTemplate -> public JdbcTemplate getJdbcTemplate();1519579380;Expose the classic Spring {@link JdbcTemplate} itself, if available,_in particular for passing it on to other {@code JdbcTemplate} consumers._<p>If sufficient for the purposes at hand, {@link #getJdbcOperations()}_is recommended over this variant._@since 5.0.3;public JdbcTemplate getJdbcTemplate() {_		Assert.state(this.classicJdbcTemplate instanceof JdbcTemplate, "No JdbcTemplate available")__		return (JdbcTemplate) this.classicJdbcTemplate__	};expose,the,classic,spring,link,jdbc,template,itself,if,available,in,particular,for,passing,it,on,to,other,code,jdbc,template,consumers,p,if,sufficient,for,the,purposes,at,hand,link,get,jdbc,operations,is,recommended,over,this,variant,since,5,0,3;public,jdbc,template,get,jdbc,template,assert,state,this,classic,jdbc,template,instanceof,jdbc,template,no,jdbc,template,available,return,jdbc,template,this,classic,jdbc,template
NamedParameterJdbcTemplate -> public JdbcTemplate getJdbcTemplate();1530174524;Expose the classic Spring {@link JdbcTemplate} itself, if available,_in particular for passing it on to other {@code JdbcTemplate} consumers._<p>If sufficient for the purposes at hand, {@link #getJdbcOperations()}_is recommended over this variant._@since 5.0.3;public JdbcTemplate getJdbcTemplate() {_		Assert.state(this.classicJdbcTemplate instanceof JdbcTemplate, "No JdbcTemplate available")__		return (JdbcTemplate) this.classicJdbcTemplate__	};expose,the,classic,spring,link,jdbc,template,itself,if,available,in,particular,for,passing,it,on,to,other,code,jdbc,template,consumers,p,if,sufficient,for,the,purposes,at,hand,link,get,jdbc,operations,is,recommended,over,this,variant,since,5,0,3;public,jdbc,template,get,jdbc,template,assert,state,this,classic,jdbc,template,instanceof,jdbc,template,no,jdbc,template,available,return,jdbc,template,this,classic,jdbc,template
NamedParameterJdbcTemplate -> public JdbcTemplate getJdbcTemplate();1542747953;Expose the classic Spring {@link JdbcTemplate} itself, if available,_in particular for passing it on to other {@code JdbcTemplate} consumers._<p>If sufficient for the purposes at hand, {@link #getJdbcOperations()}_is recommended over this variant._@since 5.0.3;public JdbcTemplate getJdbcTemplate() {_		Assert.state(this.classicJdbcTemplate instanceof JdbcTemplate, "No JdbcTemplate available")__		return (JdbcTemplate) this.classicJdbcTemplate__	};expose,the,classic,spring,link,jdbc,template,itself,if,available,in,particular,for,passing,it,on,to,other,code,jdbc,template,consumers,p,if,sufficient,for,the,purposes,at,hand,link,get,jdbc,operations,is,recommended,over,this,variant,since,5,0,3;public,jdbc,template,get,jdbc,template,assert,state,this,classic,jdbc,template,instanceof,jdbc,template,no,jdbc,template,available,return,jdbc,template,this,classic,jdbc,template
NamedParameterJdbcTemplate -> protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource);1328020251;Build a PreparedStatementCreator based on the given SQL and named parameters._<p>Note: Not used for the <code>update</code> variant with generated key handling._@param sql SQL to execute_@param paramSource container of arguments to bind_@return the corresponding PreparedStatementCreator;protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource) {_		ParsedSql parsedSql = getParsedSql(sql)__		String sqlToUse = NamedParameterUtils.substituteNamedParameters(parsedSql, paramSource)__		Object[] params = NamedParameterUtils.buildValueArray(parsedSql, paramSource, null)__		List<SqlParameter> declaredParameters = NamedParameterUtils.buildSqlParameterList(parsedSql, paramSource)__		PreparedStatementCreatorFactory pscf = new PreparedStatementCreatorFactory(sqlToUse, declaredParameters)__		return pscf.newPreparedStatementCreator(params)__	};build,a,prepared,statement,creator,based,on,the,given,sql,and,named,parameters,p,note,not,used,for,the,code,update,code,variant,with,generated,key,handling,param,sql,sql,to,execute,param,param,source,container,of,arguments,to,bind,return,the,corresponding,prepared,statement,creator;protected,prepared,statement,creator,get,prepared,statement,creator,string,sql,sql,parameter,source,param,source,parsed,sql,parsed,sql,get,parsed,sql,sql,string,sql,to,use,named,parameter,utils,substitute,named,parameters,parsed,sql,param,source,object,params,named,parameter,utils,build,value,array,parsed,sql,param,source,null,list,sql,parameter,declared,parameters,named,parameter,utils,build,sql,parameter,list,parsed,sql,param,source,prepared,statement,creator,factory,pscf,new,prepared,statement,creator,factory,sql,to,use,declared,parameters,return,pscf,new,prepared,statement,creator,params
NamedParameterJdbcTemplate -> protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource);1356735495;Build a PreparedStatementCreator based on the given SQL and named parameters._<p>Note: Not used for the {@code update} variant with generated key handling._@param sql SQL to execute_@param paramSource container of arguments to bind_@return the corresponding PreparedStatementCreator;protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource) {_		ParsedSql parsedSql = getParsedSql(sql)__		String sqlToUse = NamedParameterUtils.substituteNamedParameters(parsedSql, paramSource)__		Object[] params = NamedParameterUtils.buildValueArray(parsedSql, paramSource, null)__		List<SqlParameter> declaredParameters = NamedParameterUtils.buildSqlParameterList(parsedSql, paramSource)__		PreparedStatementCreatorFactory pscf = new PreparedStatementCreatorFactory(sqlToUse, declaredParameters)__		return pscf.newPreparedStatementCreator(params)__	};build,a,prepared,statement,creator,based,on,the,given,sql,and,named,parameters,p,note,not,used,for,the,code,update,variant,with,generated,key,handling,param,sql,sql,to,execute,param,param,source,container,of,arguments,to,bind,return,the,corresponding,prepared,statement,creator;protected,prepared,statement,creator,get,prepared,statement,creator,string,sql,sql,parameter,source,param,source,parsed,sql,parsed,sql,get,parsed,sql,sql,string,sql,to,use,named,parameter,utils,substitute,named,parameters,parsed,sql,param,source,object,params,named,parameter,utils,build,value,array,parsed,sql,param,source,null,list,sql,parameter,declared,parameters,named,parameter,utils,build,sql,parameter,list,parsed,sql,param,source,prepared,statement,creator,factory,pscf,new,prepared,statement,creator,factory,sql,to,use,declared,parameters,return,pscf,new,prepared,statement,creator,params
NamedParameterJdbcTemplate -> protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource);1357119239;Build a PreparedStatementCreator based on the given SQL and named parameters._<p>Note: Not used for the {@code update} variant with generated key handling._@param sql SQL to execute_@param paramSource container of arguments to bind_@return the corresponding PreparedStatementCreator;protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource) {_		ParsedSql parsedSql = getParsedSql(sql)__		String sqlToUse = NamedParameterUtils.substituteNamedParameters(parsedSql, paramSource)__		Object[] params = NamedParameterUtils.buildValueArray(parsedSql, paramSource, null)__		List<SqlParameter> declaredParameters = NamedParameterUtils.buildSqlParameterList(parsedSql, paramSource)__		PreparedStatementCreatorFactory pscf = new PreparedStatementCreatorFactory(sqlToUse, declaredParameters)__		return pscf.newPreparedStatementCreator(params)__	};build,a,prepared,statement,creator,based,on,the,given,sql,and,named,parameters,p,note,not,used,for,the,code,update,variant,with,generated,key,handling,param,sql,sql,to,execute,param,param,source,container,of,arguments,to,bind,return,the,corresponding,prepared,statement,creator;protected,prepared,statement,creator,get,prepared,statement,creator,string,sql,sql,parameter,source,param,source,parsed,sql,parsed,sql,get,parsed,sql,sql,string,sql,to,use,named,parameter,utils,substitute,named,parameters,parsed,sql,param,source,object,params,named,parameter,utils,build,value,array,parsed,sql,param,source,null,list,sql,parameter,declared,parameters,named,parameter,utils,build,sql,parameter,list,parsed,sql,param,source,prepared,statement,creator,factory,pscf,new,prepared,statement,creator,factory,sql,to,use,declared,parameters,return,pscf,new,prepared,statement,creator,params
NamedParameterJdbcTemplate -> protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource);1362408075;Build a PreparedStatementCreator based on the given SQL and named parameters._<p>Note: Not used for the {@code update} variant with generated key handling._@param sql SQL to execute_@param paramSource container of arguments to bind_@return the corresponding PreparedStatementCreator;protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource) {_		ParsedSql parsedSql = getParsedSql(sql)__		String sqlToUse = NamedParameterUtils.substituteNamedParameters(parsedSql, paramSource)__		Object[] params = NamedParameterUtils.buildValueArray(parsedSql, paramSource, null)__		List<SqlParameter> declaredParameters = NamedParameterUtils.buildSqlParameterList(parsedSql, paramSource)__		PreparedStatementCreatorFactory pscf = new PreparedStatementCreatorFactory(sqlToUse, declaredParameters)__		return pscf.newPreparedStatementCreator(params)__	};build,a,prepared,statement,creator,based,on,the,given,sql,and,named,parameters,p,note,not,used,for,the,code,update,variant,with,generated,key,handling,param,sql,sql,to,execute,param,param,source,container,of,arguments,to,bind,return,the,corresponding,prepared,statement,creator;protected,prepared,statement,creator,get,prepared,statement,creator,string,sql,sql,parameter,source,param,source,parsed,sql,parsed,sql,get,parsed,sql,sql,string,sql,to,use,named,parameter,utils,substitute,named,parameters,parsed,sql,param,source,object,params,named,parameter,utils,build,value,array,parsed,sql,param,source,null,list,sql,parameter,declared,parameters,named,parameter,utils,build,sql,parameter,list,parsed,sql,param,source,prepared,statement,creator,factory,pscf,new,prepared,statement,creator,factory,sql,to,use,declared,parameters,return,pscf,new,prepared,statement,creator,params
NamedParameterJdbcTemplate -> protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource);1368482696;Build a PreparedStatementCreator based on the given SQL and named parameters._<p>Note: Not used for the {@code update} variant with generated key handling._@param sql SQL to execute_@param paramSource container of arguments to bind_@return the corresponding PreparedStatementCreator;protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource) {_		ParsedSql parsedSql = getParsedSql(sql)__		String sqlToUse = NamedParameterUtils.substituteNamedParameters(parsedSql, paramSource)__		Object[] params = NamedParameterUtils.buildValueArray(parsedSql, paramSource, null)__		List<SqlParameter> declaredParameters = NamedParameterUtils.buildSqlParameterList(parsedSql, paramSource)__		PreparedStatementCreatorFactory pscf = new PreparedStatementCreatorFactory(sqlToUse, declaredParameters)__		return pscf.newPreparedStatementCreator(params)__	};build,a,prepared,statement,creator,based,on,the,given,sql,and,named,parameters,p,note,not,used,for,the,code,update,variant,with,generated,key,handling,param,sql,sql,to,execute,param,param,source,container,of,arguments,to,bind,return,the,corresponding,prepared,statement,creator;protected,prepared,statement,creator,get,prepared,statement,creator,string,sql,sql,parameter,source,param,source,parsed,sql,parsed,sql,get,parsed,sql,sql,string,sql,to,use,named,parameter,utils,substitute,named,parameters,parsed,sql,param,source,object,params,named,parameter,utils,build,value,array,parsed,sql,param,source,null,list,sql,parameter,declared,parameters,named,parameter,utils,build,sql,parameter,list,parsed,sql,param,source,prepared,statement,creator,factory,pscf,new,prepared,statement,creator,factory,sql,to,use,declared,parameters,return,pscf,new,prepared,statement,creator,params
NamedParameterJdbcTemplate -> protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource);1393610431;Build a PreparedStatementCreator based on the given SQL and named parameters._<p>Note: Not used for the {@code update} variant with generated key handling._@param sql SQL to execute_@param paramSource container of arguments to bind_@return the corresponding PreparedStatementCreator;protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource) {_		ParsedSql parsedSql = getParsedSql(sql)__		String sqlToUse = NamedParameterUtils.substituteNamedParameters(parsedSql, paramSource)__		Object[] params = NamedParameterUtils.buildValueArray(parsedSql, paramSource, null)__		List<SqlParameter> declaredParameters = NamedParameterUtils.buildSqlParameterList(parsedSql, paramSource)__		PreparedStatementCreatorFactory pscf = new PreparedStatementCreatorFactory(sqlToUse, declaredParameters)__		return pscf.newPreparedStatementCreator(params)__	};build,a,prepared,statement,creator,based,on,the,given,sql,and,named,parameters,p,note,not,used,for,the,code,update,variant,with,generated,key,handling,param,sql,sql,to,execute,param,param,source,container,of,arguments,to,bind,return,the,corresponding,prepared,statement,creator;protected,prepared,statement,creator,get,prepared,statement,creator,string,sql,sql,parameter,source,param,source,parsed,sql,parsed,sql,get,parsed,sql,sql,string,sql,to,use,named,parameter,utils,substitute,named,parameters,parsed,sql,param,source,object,params,named,parameter,utils,build,value,array,parsed,sql,param,source,null,list,sql,parameter,declared,parameters,named,parameter,utils,build,sql,parameter,list,parsed,sql,param,source,prepared,statement,creator,factory,pscf,new,prepared,statement,creator,factory,sql,to,use,declared,parameters,return,pscf,new,prepared,statement,creator,params
NamedParameterJdbcTemplate -> protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource);1410305334;Build a PreparedStatementCreator based on the given SQL and named parameters._<p>Note: Not used for the {@code update} variant with generated key handling._@param sql SQL to execute_@param paramSource container of arguments to bind_@return the corresponding PreparedStatementCreator;protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource) {_		ParsedSql parsedSql = getParsedSql(sql)__		String sqlToUse = NamedParameterUtils.substituteNamedParameters(parsedSql, paramSource)__		Object[] params = NamedParameterUtils.buildValueArray(parsedSql, paramSource, null)__		List<SqlParameter> declaredParameters = NamedParameterUtils.buildSqlParameterList(parsedSql, paramSource)__		PreparedStatementCreatorFactory pscf = new PreparedStatementCreatorFactory(sqlToUse, declaredParameters)__		return pscf.newPreparedStatementCreator(params)__	};build,a,prepared,statement,creator,based,on,the,given,sql,and,named,parameters,p,note,not,used,for,the,code,update,variant,with,generated,key,handling,param,sql,sql,to,execute,param,param,source,container,of,arguments,to,bind,return,the,corresponding,prepared,statement,creator;protected,prepared,statement,creator,get,prepared,statement,creator,string,sql,sql,parameter,source,param,source,parsed,sql,parsed,sql,get,parsed,sql,sql,string,sql,to,use,named,parameter,utils,substitute,named,parameters,parsed,sql,param,source,object,params,named,parameter,utils,build,value,array,parsed,sql,param,source,null,list,sql,parameter,declared,parameters,named,parameter,utils,build,sql,parameter,list,parsed,sql,param,source,prepared,statement,creator,factory,pscf,new,prepared,statement,creator,factory,sql,to,use,declared,parameters,return,pscf,new,prepared,statement,creator,params
NamedParameterJdbcTemplate -> protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource);1419966315;Build a PreparedStatementCreator based on the given SQL and named parameters._<p>Note: Not used for the {@code update} variant with generated key handling._@param sql SQL to execute_@param paramSource container of arguments to bind_@return the corresponding PreparedStatementCreator;protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource) {_		ParsedSql parsedSql = getParsedSql(sql)__		String sqlToUse = NamedParameterUtils.substituteNamedParameters(parsedSql, paramSource)__		Object[] params = NamedParameterUtils.buildValueArray(parsedSql, paramSource, null)__		List<SqlParameter> declaredParameters = NamedParameterUtils.buildSqlParameterList(parsedSql, paramSource)__		PreparedStatementCreatorFactory pscf = new PreparedStatementCreatorFactory(sqlToUse, declaredParameters)__		return pscf.newPreparedStatementCreator(params)__	};build,a,prepared,statement,creator,based,on,the,given,sql,and,named,parameters,p,note,not,used,for,the,code,update,variant,with,generated,key,handling,param,sql,sql,to,execute,param,param,source,container,of,arguments,to,bind,return,the,corresponding,prepared,statement,creator;protected,prepared,statement,creator,get,prepared,statement,creator,string,sql,sql,parameter,source,param,source,parsed,sql,parsed,sql,get,parsed,sql,sql,string,sql,to,use,named,parameter,utils,substitute,named,parameters,parsed,sql,param,source,object,params,named,parameter,utils,build,value,array,parsed,sql,param,source,null,list,sql,parameter,declared,parameters,named,parameter,utils,build,sql,parameter,list,parsed,sql,param,source,prepared,statement,creator,factory,pscf,new,prepared,statement,creator,factory,sql,to,use,declared,parameters,return,pscf,new,prepared,statement,creator,params
NamedParameterJdbcTemplate -> protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource);1467730834;Build a PreparedStatementCreator based on the given SQL and named parameters._<p>Note: Not used for the {@code update} variant with generated key handling._@param sql SQL to execute_@param paramSource container of arguments to bind_@return the corresponding PreparedStatementCreator;protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource) {_		ParsedSql parsedSql = getParsedSql(sql)__		String sqlToUse = NamedParameterUtils.substituteNamedParameters(parsedSql, paramSource)__		Object[] params = NamedParameterUtils.buildValueArray(parsedSql, paramSource, null)__		List<SqlParameter> declaredParameters = NamedParameterUtils.buildSqlParameterList(parsedSql, paramSource)__		PreparedStatementCreatorFactory pscf = new PreparedStatementCreatorFactory(sqlToUse, declaredParameters)__		return pscf.newPreparedStatementCreator(params)__	};build,a,prepared,statement,creator,based,on,the,given,sql,and,named,parameters,p,note,not,used,for,the,code,update,variant,with,generated,key,handling,param,sql,sql,to,execute,param,param,source,container,of,arguments,to,bind,return,the,corresponding,prepared,statement,creator;protected,prepared,statement,creator,get,prepared,statement,creator,string,sql,sql,parameter,source,param,source,parsed,sql,parsed,sql,get,parsed,sql,sql,string,sql,to,use,named,parameter,utils,substitute,named,parameters,parsed,sql,param,source,object,params,named,parameter,utils,build,value,array,parsed,sql,param,source,null,list,sql,parameter,declared,parameters,named,parameter,utils,build,sql,parameter,list,parsed,sql,param,source,prepared,statement,creator,factory,pscf,new,prepared,statement,creator,factory,sql,to,use,declared,parameters,return,pscf,new,prepared,statement,creator,params
NamedParameterJdbcTemplate -> protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource);1496259743;Build a PreparedStatementCreator based on the given SQL and named parameters._<p>Note: Not used for the {@code update} variant with generated key handling._@param sql SQL to execute_@param paramSource container of arguments to bind_@return the corresponding PreparedStatementCreator;protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource) {_		ParsedSql parsedSql = getParsedSql(sql)__		String sqlToUse = NamedParameterUtils.substituteNamedParameters(parsedSql, paramSource)__		Object[] params = NamedParameterUtils.buildValueArray(parsedSql, paramSource, null)__		List<SqlParameter> declaredParameters = NamedParameterUtils.buildSqlParameterList(parsedSql, paramSource)__		PreparedStatementCreatorFactory pscf = new PreparedStatementCreatorFactory(sqlToUse, declaredParameters)__		return pscf.newPreparedStatementCreator(params)__	};build,a,prepared,statement,creator,based,on,the,given,sql,and,named,parameters,p,note,not,used,for,the,code,update,variant,with,generated,key,handling,param,sql,sql,to,execute,param,param,source,container,of,arguments,to,bind,return,the,corresponding,prepared,statement,creator;protected,prepared,statement,creator,get,prepared,statement,creator,string,sql,sql,parameter,source,param,source,parsed,sql,parsed,sql,get,parsed,sql,sql,string,sql,to,use,named,parameter,utils,substitute,named,parameters,parsed,sql,param,source,object,params,named,parameter,utils,build,value,array,parsed,sql,param,source,null,list,sql,parameter,declared,parameters,named,parameter,utils,build,sql,parameter,list,parsed,sql,param,source,prepared,statement,creator,factory,pscf,new,prepared,statement,creator,factory,sql,to,use,declared,parameters,return,pscf,new,prepared,statement,creator,params
NamedParameterJdbcTemplate -> protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource);1496837955;Build a PreparedStatementCreator based on the given SQL and named parameters._<p>Note: Not used for the {@code update} variant with generated key handling._@param sql SQL to execute_@param paramSource container of arguments to bind_@return the corresponding PreparedStatementCreator;protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource) {_		ParsedSql parsedSql = getParsedSql(sql)__		String sqlToUse = NamedParameterUtils.substituteNamedParameters(parsedSql, paramSource)__		Object[] params = NamedParameterUtils.buildValueArray(parsedSql, paramSource, null)__		List<SqlParameter> declaredParameters = NamedParameterUtils.buildSqlParameterList(parsedSql, paramSource)__		PreparedStatementCreatorFactory pscf = new PreparedStatementCreatorFactory(sqlToUse, declaredParameters)__		return pscf.newPreparedStatementCreator(params)__	};build,a,prepared,statement,creator,based,on,the,given,sql,and,named,parameters,p,note,not,used,for,the,code,update,variant,with,generated,key,handling,param,sql,sql,to,execute,param,param,source,container,of,arguments,to,bind,return,the,corresponding,prepared,statement,creator;protected,prepared,statement,creator,get,prepared,statement,creator,string,sql,sql,parameter,source,param,source,parsed,sql,parsed,sql,get,parsed,sql,sql,string,sql,to,use,named,parameter,utils,substitute,named,parameters,parsed,sql,param,source,object,params,named,parameter,utils,build,value,array,parsed,sql,param,source,null,list,sql,parameter,declared,parameters,named,parameter,utils,build,sql,parameter,list,parsed,sql,param,source,prepared,statement,creator,factory,pscf,new,prepared,statement,creator,factory,sql,to,use,declared,parameters,return,pscf,new,prepared,statement,creator,params
NamedParameterJdbcTemplate -> protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource);1502974979;Build a PreparedStatementCreator based on the given SQL and named parameters._<p>Note: Not used for the {@code update} variant with generated key handling._@param sql SQL to execute_@param paramSource container of arguments to bind_@return the corresponding PreparedStatementCreator;protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource) {_		ParsedSql parsedSql = getParsedSql(sql)__		String sqlToUse = NamedParameterUtils.substituteNamedParameters(parsedSql, paramSource)__		Object[] params = NamedParameterUtils.buildValueArray(parsedSql, paramSource, null)__		List<SqlParameter> declaredParameters = NamedParameterUtils.buildSqlParameterList(parsedSql, paramSource)__		PreparedStatementCreatorFactory pscf = new PreparedStatementCreatorFactory(sqlToUse, declaredParameters)__		return pscf.newPreparedStatementCreator(params)__	};build,a,prepared,statement,creator,based,on,the,given,sql,and,named,parameters,p,note,not,used,for,the,code,update,variant,with,generated,key,handling,param,sql,sql,to,execute,param,param,source,container,of,arguments,to,bind,return,the,corresponding,prepared,statement,creator;protected,prepared,statement,creator,get,prepared,statement,creator,string,sql,sql,parameter,source,param,source,parsed,sql,parsed,sql,get,parsed,sql,sql,string,sql,to,use,named,parameter,utils,substitute,named,parameters,parsed,sql,param,source,object,params,named,parameter,utils,build,value,array,parsed,sql,param,source,null,list,sql,parameter,declared,parameters,named,parameter,utils,build,sql,parameter,list,parsed,sql,param,source,prepared,statement,creator,factory,pscf,new,prepared,statement,creator,factory,sql,to,use,declared,parameters,return,pscf,new,prepared,statement,creator,params
NamedParameterJdbcTemplate -> protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource);1503008146;Build a PreparedStatementCreator based on the given SQL and named parameters._<p>Note: Not used for the {@code update} variant with generated key handling._@param sql SQL to execute_@param paramSource container of arguments to bind_@return the corresponding PreparedStatementCreator;protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource) {_		ParsedSql parsedSql = getParsedSql(sql)__		String sqlToUse = NamedParameterUtils.substituteNamedParameters(parsedSql, paramSource)__		Object[] params = NamedParameterUtils.buildValueArray(parsedSql, paramSource, null)__		List<SqlParameter> declaredParameters = NamedParameterUtils.buildSqlParameterList(parsedSql, paramSource)__		PreparedStatementCreatorFactory pscf = new PreparedStatementCreatorFactory(sqlToUse, declaredParameters)__		return pscf.newPreparedStatementCreator(params)__	};build,a,prepared,statement,creator,based,on,the,given,sql,and,named,parameters,p,note,not,used,for,the,code,update,variant,with,generated,key,handling,param,sql,sql,to,execute,param,param,source,container,of,arguments,to,bind,return,the,corresponding,prepared,statement,creator;protected,prepared,statement,creator,get,prepared,statement,creator,string,sql,sql,parameter,source,param,source,parsed,sql,parsed,sql,get,parsed,sql,sql,string,sql,to,use,named,parameter,utils,substitute,named,parameters,parsed,sql,param,source,object,params,named,parameter,utils,build,value,array,parsed,sql,param,source,null,list,sql,parameter,declared,parameters,named,parameter,utils,build,sql,parameter,list,parsed,sql,param,source,prepared,statement,creator,factory,pscf,new,prepared,statement,creator,factory,sql,to,use,declared,parameters,return,pscf,new,prepared,statement,creator,params
NamedParameterJdbcTemplate -> protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource);1509754029;Build a PreparedStatementCreator based on the given SQL and named parameters._<p>Note: Not used for the {@code update} variant with generated key handling._@param sql SQL to execute_@param paramSource container of arguments to bind_@return the corresponding PreparedStatementCreator;protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource) {_		ParsedSql parsedSql = getParsedSql(sql)__		String sqlToUse = NamedParameterUtils.substituteNamedParameters(parsedSql, paramSource)__		Object[] params = NamedParameterUtils.buildValueArray(parsedSql, paramSource, null)__		List<SqlParameter> declaredParameters = NamedParameterUtils.buildSqlParameterList(parsedSql, paramSource)__		PreparedStatementCreatorFactory pscf = new PreparedStatementCreatorFactory(sqlToUse, declaredParameters)__		return pscf.newPreparedStatementCreator(params)__	};build,a,prepared,statement,creator,based,on,the,given,sql,and,named,parameters,p,note,not,used,for,the,code,update,variant,with,generated,key,handling,param,sql,sql,to,execute,param,param,source,container,of,arguments,to,bind,return,the,corresponding,prepared,statement,creator;protected,prepared,statement,creator,get,prepared,statement,creator,string,sql,sql,parameter,source,param,source,parsed,sql,parsed,sql,get,parsed,sql,sql,string,sql,to,use,named,parameter,utils,substitute,named,parameters,parsed,sql,param,source,object,params,named,parameter,utils,build,value,array,parsed,sql,param,source,null,list,sql,parameter,declared,parameters,named,parameter,utils,build,sql,parameter,list,parsed,sql,param,source,prepared,statement,creator,factory,pscf,new,prepared,statement,creator,factory,sql,to,use,declared,parameters,return,pscf,new,prepared,statement,creator,params
NamedParameterJdbcTemplate -> protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource);1511122644;Build a PreparedStatementCreator based on the given SQL and named parameters._<p>Note: Not used for the {@code update} variant with generated key handling._@param sql SQL to execute_@param paramSource container of arguments to bind_@return the corresponding PreparedStatementCreator;protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource) {_		ParsedSql parsedSql = getParsedSql(sql)__		String sqlToUse = NamedParameterUtils.substituteNamedParameters(parsedSql, paramSource)__		Object[] params = NamedParameterUtils.buildValueArray(parsedSql, paramSource, null)__		List<SqlParameter> declaredParameters = NamedParameterUtils.buildSqlParameterList(parsedSql, paramSource)__		PreparedStatementCreatorFactory pscf = new PreparedStatementCreatorFactory(sqlToUse, declaredParameters)__		return pscf.newPreparedStatementCreator(params)__	};build,a,prepared,statement,creator,based,on,the,given,sql,and,named,parameters,p,note,not,used,for,the,code,update,variant,with,generated,key,handling,param,sql,sql,to,execute,param,param,source,container,of,arguments,to,bind,return,the,corresponding,prepared,statement,creator;protected,prepared,statement,creator,get,prepared,statement,creator,string,sql,sql,parameter,source,param,source,parsed,sql,parsed,sql,get,parsed,sql,sql,string,sql,to,use,named,parameter,utils,substitute,named,parameters,parsed,sql,param,source,object,params,named,parameter,utils,build,value,array,parsed,sql,param,source,null,list,sql,parameter,declared,parameters,named,parameter,utils,build,sql,parameter,list,parsed,sql,param,source,prepared,statement,creator,factory,pscf,new,prepared,statement,creator,factory,sql,to,use,declared,parameters,return,pscf,new,prepared,statement,creator,params
NamedParameterJdbcTemplate -> protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource);1511712999;Build a PreparedStatementCreator based on the given SQL and named parameters._<p>Note: Not used for the {@code update} variant with generated key handling._@param sql SQL to execute_@param paramSource container of arguments to bind_@return the corresponding PreparedStatementCreator;protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource) {_		ParsedSql parsedSql = getParsedSql(sql)__		String sqlToUse = NamedParameterUtils.substituteNamedParameters(parsedSql, paramSource)__		Object[] params = NamedParameterUtils.buildValueArray(parsedSql, paramSource, null)__		List<SqlParameter> declaredParameters = NamedParameterUtils.buildSqlParameterList(parsedSql, paramSource)__		PreparedStatementCreatorFactory pscf = new PreparedStatementCreatorFactory(sqlToUse, declaredParameters)__		return pscf.newPreparedStatementCreator(params)__	};build,a,prepared,statement,creator,based,on,the,given,sql,and,named,parameters,p,note,not,used,for,the,code,update,variant,with,generated,key,handling,param,sql,sql,to,execute,param,param,source,container,of,arguments,to,bind,return,the,corresponding,prepared,statement,creator;protected,prepared,statement,creator,get,prepared,statement,creator,string,sql,sql,parameter,source,param,source,parsed,sql,parsed,sql,get,parsed,sql,sql,string,sql,to,use,named,parameter,utils,substitute,named,parameters,parsed,sql,param,source,object,params,named,parameter,utils,build,value,array,parsed,sql,param,source,null,list,sql,parameter,declared,parameters,named,parameter,utils,build,sql,parameter,list,parsed,sql,param,source,prepared,statement,creator,factory,pscf,new,prepared,statement,creator,factory,sql,to,use,declared,parameters,return,pscf,new,prepared,statement,creator,params
NamedParameterJdbcTemplate -> protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource);1511966301;Build a PreparedStatementCreator based on the given SQL and named parameters._<p>Note: Not used for the {@code update} variant with generated key handling._@param sql SQL to execute_@param paramSource container of arguments to bind_@return the corresponding PreparedStatementCreator;protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource) {_		ParsedSql parsedSql = getParsedSql(sql)__		String sqlToUse = NamedParameterUtils.substituteNamedParameters(parsedSql, paramSource)__		Object[] params = NamedParameterUtils.buildValueArray(parsedSql, paramSource, null)__		List<SqlParameter> declaredParameters = NamedParameterUtils.buildSqlParameterList(parsedSql, paramSource)__		PreparedStatementCreatorFactory pscf = new PreparedStatementCreatorFactory(sqlToUse, declaredParameters)__		return pscf.newPreparedStatementCreator(params)__	};build,a,prepared,statement,creator,based,on,the,given,sql,and,named,parameters,p,note,not,used,for,the,code,update,variant,with,generated,key,handling,param,sql,sql,to,execute,param,param,source,container,of,arguments,to,bind,return,the,corresponding,prepared,statement,creator;protected,prepared,statement,creator,get,prepared,statement,creator,string,sql,sql,parameter,source,param,source,parsed,sql,parsed,sql,get,parsed,sql,sql,string,sql,to,use,named,parameter,utils,substitute,named,parameters,parsed,sql,param,source,object,params,named,parameter,utils,build,value,array,parsed,sql,param,source,null,list,sql,parameter,declared,parameters,named,parameter,utils,build,sql,parameter,list,parsed,sql,param,source,prepared,statement,creator,factory,pscf,new,prepared,statement,creator,factory,sql,to,use,declared,parameters,return,pscf,new,prepared,statement,creator,params
NamedParameterJdbcTemplate -> protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource);1519579380;Build a {@link PreparedStatementCreator} based on the given SQL and named parameters._<p>Note: Directly called from all {@code query} variants. Delegates to the common_{@link #getPreparedStatementCreator(String, SqlParameterSource, Consumer)} method._@param sql the SQL statement to execute_@param paramSource container of arguments to bind_@return the corresponding {@link PreparedStatementCreator}_@see #getPreparedStatementCreator(String, SqlParameterSource, Consumer);protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource) {_		return getPreparedStatementCreator(sql, paramSource, null)__	};build,a,link,prepared,statement,creator,based,on,the,given,sql,and,named,parameters,p,note,directly,called,from,all,code,query,variants,delegates,to,the,common,link,get,prepared,statement,creator,string,sql,parameter,source,consumer,method,param,sql,the,sql,statement,to,execute,param,param,source,container,of,arguments,to,bind,return,the,corresponding,link,prepared,statement,creator,see,get,prepared,statement,creator,string,sql,parameter,source,consumer;protected,prepared,statement,creator,get,prepared,statement,creator,string,sql,sql,parameter,source,param,source,return,get,prepared,statement,creator,sql,param,source,null
NamedParameterJdbcTemplate -> protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource);1530174524;Build a {@link PreparedStatementCreator} based on the given SQL and named parameters._<p>Note: Directly called from all {@code query} variants. Delegates to the common_{@link #getPreparedStatementCreator(String, SqlParameterSource, Consumer)} method._@param sql the SQL statement to execute_@param paramSource container of arguments to bind_@return the corresponding {@link PreparedStatementCreator}_@see #getPreparedStatementCreator(String, SqlParameterSource, Consumer);protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource) {_		return getPreparedStatementCreator(sql, paramSource, null)__	};build,a,link,prepared,statement,creator,based,on,the,given,sql,and,named,parameters,p,note,directly,called,from,all,code,query,variants,delegates,to,the,common,link,get,prepared,statement,creator,string,sql,parameter,source,consumer,method,param,sql,the,sql,statement,to,execute,param,param,source,container,of,arguments,to,bind,return,the,corresponding,link,prepared,statement,creator,see,get,prepared,statement,creator,string,sql,parameter,source,consumer;protected,prepared,statement,creator,get,prepared,statement,creator,string,sql,sql,parameter,source,param,source,return,get,prepared,statement,creator,sql,param,source,null
NamedParameterJdbcTemplate -> protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource);1542747953;Build a {@link PreparedStatementCreator} based on the given SQL and named parameters._<p>Note: Directly called from all {@code query} variants. Delegates to the common_{@link #getPreparedStatementCreator(String, SqlParameterSource, Consumer)} method._@param sql the SQL statement to execute_@param paramSource container of arguments to bind_@return the corresponding {@link PreparedStatementCreator}_@see #getPreparedStatementCreator(String, SqlParameterSource, Consumer);protected PreparedStatementCreator getPreparedStatementCreator(String sql, SqlParameterSource paramSource) {_		return getPreparedStatementCreator(sql, paramSource, null)__	};build,a,link,prepared,statement,creator,based,on,the,given,sql,and,named,parameters,p,note,directly,called,from,all,code,query,variants,delegates,to,the,common,link,get,prepared,statement,creator,string,sql,parameter,source,consumer,method,param,sql,the,sql,statement,to,execute,param,param,source,container,of,arguments,to,bind,return,the,corresponding,link,prepared,statement,creator,see,get,prepared,statement,creator,string,sql,parameter,source,consumer;protected,prepared,statement,creator,get,prepared,statement,creator,string,sql,sql,parameter,source,param,source,return,get,prepared,statement,creator,sql,param,source,null
NamedParameterJdbcTemplate -> @Override 	public JdbcOperations getJdbcOperations();1356735495;Expose the classic Spring JdbcTemplate to allow invocation of_less commonly used methods.;@Override_	public JdbcOperations getJdbcOperations() {_		return this.classicJdbcTemplate__	};expose,the,classic,spring,jdbc,template,to,allow,invocation,of,less,commonly,used,methods;override,public,jdbc,operations,get,jdbc,operations,return,this,classic,jdbc,template
NamedParameterJdbcTemplate -> @Override 	public JdbcOperations getJdbcOperations();1368482696;Expose the classic Spring JdbcTemplate to allow invocation of_less commonly used methods.;@Override_	public JdbcOperations getJdbcOperations() {_		return this.classicJdbcTemplate__	};expose,the,classic,spring,jdbc,template,to,allow,invocation,of,less,commonly,used,methods;override,public,jdbc,operations,get,jdbc,operations,return,this,classic,jdbc,template
NamedParameterJdbcTemplate -> @Override 	public JdbcOperations getJdbcOperations();1393610431;Expose the classic Spring JdbcTemplate to allow invocation of_less commonly used methods.;@Override_	public JdbcOperations getJdbcOperations() {_		return this.classicJdbcTemplate__	};expose,the,classic,spring,jdbc,template,to,allow,invocation,of,less,commonly,used,methods;override,public,jdbc,operations,get,jdbc,operations,return,this,classic,jdbc,template
NamedParameterJdbcTemplate -> @Override 	public JdbcOperations getJdbcOperations();1410305334;Expose the classic Spring JdbcTemplate to allow invocation of_less commonly used methods.;@Override_	public JdbcOperations getJdbcOperations() {_		return this.classicJdbcTemplate__	};expose,the,classic,spring,jdbc,template,to,allow,invocation,of,less,commonly,used,methods;override,public,jdbc,operations,get,jdbc,operations,return,this,classic,jdbc,template
NamedParameterJdbcTemplate -> @Override 	public JdbcOperations getJdbcOperations();1419966315;Expose the classic Spring JdbcTemplate to allow invocation of_less commonly used methods.;@Override_	public JdbcOperations getJdbcOperations() {_		return this.classicJdbcTemplate__	};expose,the,classic,spring,jdbc,template,to,allow,invocation,of,less,commonly,used,methods;override,public,jdbc,operations,get,jdbc,operations,return,this,classic,jdbc,template
NamedParameterJdbcTemplate -> @Override 	public JdbcOperations getJdbcOperations();1467730834;Expose the classic Spring JdbcTemplate to allow invocation of_less commonly used methods.;@Override_	public JdbcOperations getJdbcOperations() {_		return this.classicJdbcTemplate__	};expose,the,classic,spring,jdbc,template,to,allow,invocation,of,less,commonly,used,methods;override,public,jdbc,operations,get,jdbc,operations,return,this,classic,jdbc,template
NamedParameterJdbcTemplate -> @Override 	public JdbcOperations getJdbcOperations();1496259743;Expose the classic Spring JdbcTemplate to allow invocation of_less commonly used methods.;@Override_	public JdbcOperations getJdbcOperations() {_		return this.classicJdbcTemplate__	};expose,the,classic,spring,jdbc,template,to,allow,invocation,of,less,commonly,used,methods;override,public,jdbc,operations,get,jdbc,operations,return,this,classic,jdbc,template
NamedParameterJdbcTemplate -> @Override 	public JdbcOperations getJdbcOperations();1496837955;Expose the classic Spring JdbcTemplate to allow invocation of_less commonly used methods.;@Override_	public JdbcOperations getJdbcOperations() {_		return this.classicJdbcTemplate__	};expose,the,classic,spring,jdbc,template,to,allow,invocation,of,less,commonly,used,methods;override,public,jdbc,operations,get,jdbc,operations,return,this,classic,jdbc,template
NamedParameterJdbcTemplate -> @Override 	public JdbcOperations getJdbcOperations();1502974979;Expose the classic Spring JdbcTemplate to allow invocation of_less commonly used methods.;@Override_	public JdbcOperations getJdbcOperations() {_		return this.classicJdbcTemplate__	};expose,the,classic,spring,jdbc,template,to,allow,invocation,of,less,commonly,used,methods;override,public,jdbc,operations,get,jdbc,operations,return,this,classic,jdbc,template
NamedParameterJdbcTemplate -> @Override 	public JdbcOperations getJdbcOperations();1503008146;Expose the classic Spring JdbcTemplate to allow invocation of_less commonly used methods.;@Override_	public JdbcOperations getJdbcOperations() {_		return this.classicJdbcTemplate__	};expose,the,classic,spring,jdbc,template,to,allow,invocation,of,less,commonly,used,methods;override,public,jdbc,operations,get,jdbc,operations,return,this,classic,jdbc,template
NamedParameterJdbcTemplate -> @Override 	public JdbcOperations getJdbcOperations();1509754029;Expose the classic Spring JdbcTemplate to allow invocation of_less commonly used methods.;@Override_	public JdbcOperations getJdbcOperations() {_		return this.classicJdbcTemplate__	};expose,the,classic,spring,jdbc,template,to,allow,invocation,of,less,commonly,used,methods;override,public,jdbc,operations,get,jdbc,operations,return,this,classic,jdbc,template
NamedParameterJdbcTemplate -> @Override 	public JdbcOperations getJdbcOperations();1511122644;Expose the classic Spring JdbcTemplate to allow invocation of_less commonly used methods.;@Override_	public JdbcOperations getJdbcOperations() {_		return this.classicJdbcTemplate__	};expose,the,classic,spring,jdbc,template,to,allow,invocation,of,less,commonly,used,methods;override,public,jdbc,operations,get,jdbc,operations,return,this,classic,jdbc,template
NamedParameterJdbcTemplate -> @Override 	public JdbcOperations getJdbcOperations();1511712999;Expose the classic Spring JdbcTemplate to allow invocation of_less commonly used methods.;@Override_	public JdbcOperations getJdbcOperations() {_		return this.classicJdbcTemplate__	};expose,the,classic,spring,jdbc,template,to,allow,invocation,of,less,commonly,used,methods;override,public,jdbc,operations,get,jdbc,operations,return,this,classic,jdbc,template
NamedParameterJdbcTemplate -> @Override 	public JdbcOperations getJdbcOperations();1511966301;Expose the classic Spring JdbcTemplate operations to allow invocation_of less commonly used methods.;@Override_	public JdbcOperations getJdbcOperations() {_		return this.classicJdbcTemplate__	};expose,the,classic,spring,jdbc,template,operations,to,allow,invocation,of,less,commonly,used,methods;override,public,jdbc,operations,get,jdbc,operations,return,this,classic,jdbc,template
NamedParameterJdbcTemplate -> @Override 	public JdbcOperations getJdbcOperations();1519579380;Expose the classic Spring JdbcTemplate operations to allow invocation_of less commonly used methods.;@Override_	public JdbcOperations getJdbcOperations() {_		return this.classicJdbcTemplate__	};expose,the,classic,spring,jdbc,template,operations,to,allow,invocation,of,less,commonly,used,methods;override,public,jdbc,operations,get,jdbc,operations,return,this,classic,jdbc,template
NamedParameterJdbcTemplate -> @Override 	public JdbcOperations getJdbcOperations();1530174524;Expose the classic Spring JdbcTemplate operations to allow invocation_of less commonly used methods.;@Override_	public JdbcOperations getJdbcOperations() {_		return this.classicJdbcTemplate__	};expose,the,classic,spring,jdbc,template,operations,to,allow,invocation,of,less,commonly,used,methods;override,public,jdbc,operations,get,jdbc,operations,return,this,classic,jdbc,template
NamedParameterJdbcTemplate -> @Override 	public JdbcOperations getJdbcOperations();1542747953;Expose the classic Spring JdbcTemplate operations to allow invocation_of less commonly used methods.;@Override_	public JdbcOperations getJdbcOperations() {_		return this.classicJdbcTemplate__	};expose,the,classic,spring,jdbc,template,operations,to,allow,invocation,of,less,commonly,used,methods;override,public,jdbc,operations,get,jdbc,operations,return,this,classic,jdbc,template
NamedParameterJdbcTemplate -> public NamedParameterJdbcTemplate(DataSource dataSource);1328020251;Create a new NamedParameterJdbcTemplate for the given {@link DataSource}._<p>Creates a classic Spring {@link org.springframework.jdbc.core.JdbcTemplate} and wraps it._@param dataSource the JDBC DataSource to access;public NamedParameterJdbcTemplate(DataSource dataSource) {_		Assert.notNull(dataSource, "DataSource must not be null")__		this.classicJdbcTemplate = new JdbcTemplate(dataSource)__	};create,a,new,named,parameter,jdbc,template,for,the,given,link,data,source,p,creates,a,classic,spring,link,org,springframework,jdbc,core,jdbc,template,and,wraps,it,param,data,source,the,jdbc,data,source,to,access;public,named,parameter,jdbc,template,data,source,data,source,assert,not,null,data,source,data,source,must,not,be,null,this,classic,jdbc,template,new,jdbc,template,data,source
NamedParameterJdbcTemplate -> public NamedParameterJdbcTemplate(DataSource dataSource);1356735495;Create a new NamedParameterJdbcTemplate for the given {@link DataSource}._<p>Creates a classic Spring {@link org.springframework.jdbc.core.JdbcTemplate} and wraps it._@param dataSource the JDBC DataSource to access;public NamedParameterJdbcTemplate(DataSource dataSource) {_		Assert.notNull(dataSource, "DataSource must not be null")__		this.classicJdbcTemplate = new JdbcTemplate(dataSource)__	};create,a,new,named,parameter,jdbc,template,for,the,given,link,data,source,p,creates,a,classic,spring,link,org,springframework,jdbc,core,jdbc,template,and,wraps,it,param,data,source,the,jdbc,data,source,to,access;public,named,parameter,jdbc,template,data,source,data,source,assert,not,null,data,source,data,source,must,not,be,null,this,classic,jdbc,template,new,jdbc,template,data,source
NamedParameterJdbcTemplate -> public NamedParameterJdbcTemplate(DataSource dataSource);1357119239;Create a new NamedParameterJdbcTemplate for the given {@link DataSource}._<p>Creates a classic Spring {@link org.springframework.jdbc.core.JdbcTemplate} and wraps it._@param dataSource the JDBC DataSource to access;public NamedParameterJdbcTemplate(DataSource dataSource) {_		Assert.notNull(dataSource, "DataSource must not be null")__		this.classicJdbcTemplate = new JdbcTemplate(dataSource)__	};create,a,new,named,parameter,jdbc,template,for,the,given,link,data,source,p,creates,a,classic,spring,link,org,springframework,jdbc,core,jdbc,template,and,wraps,it,param,data,source,the,jdbc,data,source,to,access;public,named,parameter,jdbc,template,data,source,data,source,assert,not,null,data,source,data,source,must,not,be,null,this,classic,jdbc,template,new,jdbc,template,data,source
NamedParameterJdbcTemplate -> public NamedParameterJdbcTemplate(DataSource dataSource);1362408075;Create a new NamedParameterJdbcTemplate for the given {@link DataSource}._<p>Creates a classic Spring {@link org.springframework.jdbc.core.JdbcTemplate} and wraps it._@param dataSource the JDBC DataSource to access;public NamedParameterJdbcTemplate(DataSource dataSource) {_		Assert.notNull(dataSource, "DataSource must not be null")__		this.classicJdbcTemplate = new JdbcTemplate(dataSource)__	};create,a,new,named,parameter,jdbc,template,for,the,given,link,data,source,p,creates,a,classic,spring,link,org,springframework,jdbc,core,jdbc,template,and,wraps,it,param,data,source,the,jdbc,data,source,to,access;public,named,parameter,jdbc,template,data,source,data,source,assert,not,null,data,source,data,source,must,not,be,null,this,classic,jdbc,template,new,jdbc,template,data,source
NamedParameterJdbcTemplate -> public NamedParameterJdbcTemplate(DataSource dataSource);1368482696;Create a new NamedParameterJdbcTemplate for the given {@link DataSource}._<p>Creates a classic Spring {@link org.springframework.jdbc.core.JdbcTemplate} and wraps it._@param dataSource the JDBC DataSource to access;public NamedParameterJdbcTemplate(DataSource dataSource) {_		Assert.notNull(dataSource, "DataSource must not be null")__		this.classicJdbcTemplate = new JdbcTemplate(dataSource)__	};create,a,new,named,parameter,jdbc,template,for,the,given,link,data,source,p,creates,a,classic,spring,link,org,springframework,jdbc,core,jdbc,template,and,wraps,it,param,data,source,the,jdbc,data,source,to,access;public,named,parameter,jdbc,template,data,source,data,source,assert,not,null,data,source,data,source,must,not,be,null,this,classic,jdbc,template,new,jdbc,template,data,source
NamedParameterJdbcTemplate -> public NamedParameterJdbcTemplate(DataSource dataSource);1393610431;Create a new NamedParameterJdbcTemplate for the given {@link DataSource}._<p>Creates a classic Spring {@link org.springframework.jdbc.core.JdbcTemplate} and wraps it._@param dataSource the JDBC DataSource to access;public NamedParameterJdbcTemplate(DataSource dataSource) {_		Assert.notNull(dataSource, "DataSource must not be null")__		this.classicJdbcTemplate = new JdbcTemplate(dataSource)__	};create,a,new,named,parameter,jdbc,template,for,the,given,link,data,source,p,creates,a,classic,spring,link,org,springframework,jdbc,core,jdbc,template,and,wraps,it,param,data,source,the,jdbc,data,source,to,access;public,named,parameter,jdbc,template,data,source,data,source,assert,not,null,data,source,data,source,must,not,be,null,this,classic,jdbc,template,new,jdbc,template,data,source
NamedParameterJdbcTemplate -> public NamedParameterJdbcTemplate(DataSource dataSource);1410305334;Create a new NamedParameterJdbcTemplate for the given {@link DataSource}._<p>Creates a classic Spring {@link org.springframework.jdbc.core.JdbcTemplate} and wraps it._@param dataSource the JDBC DataSource to access;public NamedParameterJdbcTemplate(DataSource dataSource) {_		Assert.notNull(dataSource, "DataSource must not be null")__		this.classicJdbcTemplate = new JdbcTemplate(dataSource)__	};create,a,new,named,parameter,jdbc,template,for,the,given,link,data,source,p,creates,a,classic,spring,link,org,springframework,jdbc,core,jdbc,template,and,wraps,it,param,data,source,the,jdbc,data,source,to,access;public,named,parameter,jdbc,template,data,source,data,source,assert,not,null,data,source,data,source,must,not,be,null,this,classic,jdbc,template,new,jdbc,template,data,source
NamedParameterJdbcTemplate -> public NamedParameterJdbcTemplate(DataSource dataSource);1419966315;Create a new NamedParameterJdbcTemplate for the given {@link DataSource}._<p>Creates a classic Spring {@link org.springframework.jdbc.core.JdbcTemplate} and wraps it._@param dataSource the JDBC DataSource to access;public NamedParameterJdbcTemplate(DataSource dataSource) {_		Assert.notNull(dataSource, "DataSource must not be null")__		this.classicJdbcTemplate = new JdbcTemplate(dataSource)__	};create,a,new,named,parameter,jdbc,template,for,the,given,link,data,source,p,creates,a,classic,spring,link,org,springframework,jdbc,core,jdbc,template,and,wraps,it,param,data,source,the,jdbc,data,source,to,access;public,named,parameter,jdbc,template,data,source,data,source,assert,not,null,data,source,data,source,must,not,be,null,this,classic,jdbc,template,new,jdbc,template,data,source
NamedParameterJdbcTemplate -> public NamedParameterJdbcTemplate(DataSource dataSource);1467730834;Create a new NamedParameterJdbcTemplate for the given {@link DataSource}._<p>Creates a classic Spring {@link org.springframework.jdbc.core.JdbcTemplate} and wraps it._@param dataSource the JDBC DataSource to access;public NamedParameterJdbcTemplate(DataSource dataSource) {_		Assert.notNull(dataSource, "DataSource must not be null")__		this.classicJdbcTemplate = new JdbcTemplate(dataSource)__	};create,a,new,named,parameter,jdbc,template,for,the,given,link,data,source,p,creates,a,classic,spring,link,org,springframework,jdbc,core,jdbc,template,and,wraps,it,param,data,source,the,jdbc,data,source,to,access;public,named,parameter,jdbc,template,data,source,data,source,assert,not,null,data,source,data,source,must,not,be,null,this,classic,jdbc,template,new,jdbc,template,data,source
NamedParameterJdbcTemplate -> public NamedParameterJdbcTemplate(DataSource dataSource);1496259743;Create a new NamedParameterJdbcTemplate for the given {@link DataSource}._<p>Creates a classic Spring {@link org.springframework.jdbc.core.JdbcTemplate} and wraps it._@param dataSource the JDBC DataSource to access;public NamedParameterJdbcTemplate(DataSource dataSource) {_		Assert.notNull(dataSource, "DataSource must not be null")__		this.classicJdbcTemplate = new JdbcTemplate(dataSource)__	};create,a,new,named,parameter,jdbc,template,for,the,given,link,data,source,p,creates,a,classic,spring,link,org,springframework,jdbc,core,jdbc,template,and,wraps,it,param,data,source,the,jdbc,data,source,to,access;public,named,parameter,jdbc,template,data,source,data,source,assert,not,null,data,source,data,source,must,not,be,null,this,classic,jdbc,template,new,jdbc,template,data,source
NamedParameterJdbcTemplate -> public NamedParameterJdbcTemplate(DataSource dataSource);1496837955;Create a new NamedParameterJdbcTemplate for the given {@link DataSource}._<p>Creates a classic Spring {@link org.springframework.jdbc.core.JdbcTemplate} and wraps it._@param dataSource the JDBC DataSource to access;public NamedParameterJdbcTemplate(DataSource dataSource) {_		Assert.notNull(dataSource, "DataSource must not be null")__		this.classicJdbcTemplate = new JdbcTemplate(dataSource)__	};create,a,new,named,parameter,jdbc,template,for,the,given,link,data,source,p,creates,a,classic,spring,link,org,springframework,jdbc,core,jdbc,template,and,wraps,it,param,data,source,the,jdbc,data,source,to,access;public,named,parameter,jdbc,template,data,source,data,source,assert,not,null,data,source,data,source,must,not,be,null,this,classic,jdbc,template,new,jdbc,template,data,source
NamedParameterJdbcTemplate -> public NamedParameterJdbcTemplate(DataSource dataSource);1502974979;Create a new NamedParameterJdbcTemplate for the given {@link DataSource}._<p>Creates a classic Spring {@link org.springframework.jdbc.core.JdbcTemplate} and wraps it._@param dataSource the JDBC DataSource to access;public NamedParameterJdbcTemplate(DataSource dataSource) {_		Assert.notNull(dataSource, "DataSource must not be null")__		this.classicJdbcTemplate = new JdbcTemplate(dataSource)__	};create,a,new,named,parameter,jdbc,template,for,the,given,link,data,source,p,creates,a,classic,spring,link,org,springframework,jdbc,core,jdbc,template,and,wraps,it,param,data,source,the,jdbc,data,source,to,access;public,named,parameter,jdbc,template,data,source,data,source,assert,not,null,data,source,data,source,must,not,be,null,this,classic,jdbc,template,new,jdbc,template,data,source
NamedParameterJdbcTemplate -> public NamedParameterJdbcTemplate(DataSource dataSource);1503008146;Create a new NamedParameterJdbcTemplate for the given {@link DataSource}._<p>Creates a classic Spring {@link org.springframework.jdbc.core.JdbcTemplate} and wraps it._@param dataSource the JDBC DataSource to access;public NamedParameterJdbcTemplate(DataSource dataSource) {_		Assert.notNull(dataSource, "DataSource must not be null")__		this.classicJdbcTemplate = new JdbcTemplate(dataSource)__	};create,a,new,named,parameter,jdbc,template,for,the,given,link,data,source,p,creates,a,classic,spring,link,org,springframework,jdbc,core,jdbc,template,and,wraps,it,param,data,source,the,jdbc,data,source,to,access;public,named,parameter,jdbc,template,data,source,data,source,assert,not,null,data,source,data,source,must,not,be,null,this,classic,jdbc,template,new,jdbc,template,data,source
NamedParameterJdbcTemplate -> public NamedParameterJdbcTemplate(DataSource dataSource);1509754029;Create a new NamedParameterJdbcTemplate for the given {@link DataSource}._<p>Creates a classic Spring {@link org.springframework.jdbc.core.JdbcTemplate} and wraps it._@param dataSource the JDBC DataSource to access;public NamedParameterJdbcTemplate(DataSource dataSource) {_		Assert.notNull(dataSource, "DataSource must not be null")__		this.classicJdbcTemplate = new JdbcTemplate(dataSource)__	};create,a,new,named,parameter,jdbc,template,for,the,given,link,data,source,p,creates,a,classic,spring,link,org,springframework,jdbc,core,jdbc,template,and,wraps,it,param,data,source,the,jdbc,data,source,to,access;public,named,parameter,jdbc,template,data,source,data,source,assert,not,null,data,source,data,source,must,not,be,null,this,classic,jdbc,template,new,jdbc,template,data,source
NamedParameterJdbcTemplate -> public NamedParameterJdbcTemplate(DataSource dataSource);1511122644;Create a new NamedParameterJdbcTemplate for the given {@link DataSource}._<p>Creates a classic Spring {@link org.springframework.jdbc.core.JdbcTemplate} and wraps it._@param dataSource the JDBC DataSource to access;public NamedParameterJdbcTemplate(DataSource dataSource) {_		Assert.notNull(dataSource, "DataSource must not be null")__		this.classicJdbcTemplate = new JdbcTemplate(dataSource)__	};create,a,new,named,parameter,jdbc,template,for,the,given,link,data,source,p,creates,a,classic,spring,link,org,springframework,jdbc,core,jdbc,template,and,wraps,it,param,data,source,the,jdbc,data,source,to,access;public,named,parameter,jdbc,template,data,source,data,source,assert,not,null,data,source,data,source,must,not,be,null,this,classic,jdbc,template,new,jdbc,template,data,source
NamedParameterJdbcTemplate -> public NamedParameterJdbcTemplate(DataSource dataSource);1511712999;Create a new NamedParameterJdbcTemplate for the given {@link DataSource}._<p>Creates a classic Spring {@link org.springframework.jdbc.core.JdbcTemplate} and wraps it._@param dataSource the JDBC DataSource to access;public NamedParameterJdbcTemplate(DataSource dataSource) {_		Assert.notNull(dataSource, "DataSource must not be null")__		this.classicJdbcTemplate = new JdbcTemplate(dataSource)__	};create,a,new,named,parameter,jdbc,template,for,the,given,link,data,source,p,creates,a,classic,spring,link,org,springframework,jdbc,core,jdbc,template,and,wraps,it,param,data,source,the,jdbc,data,source,to,access;public,named,parameter,jdbc,template,data,source,data,source,assert,not,null,data,source,data,source,must,not,be,null,this,classic,jdbc,template,new,jdbc,template,data,source
NamedParameterJdbcTemplate -> public NamedParameterJdbcTemplate(DataSource dataSource);1511966301;Create a new NamedParameterJdbcTemplate for the given {@link DataSource}._<p>Creates a classic Spring {@link org.springframework.jdbc.core.JdbcTemplate} and wraps it._@param dataSource the JDBC DataSource to access;public NamedParameterJdbcTemplate(DataSource dataSource) {_		Assert.notNull(dataSource, "DataSource must not be null")__		this.classicJdbcTemplate = new JdbcTemplate(dataSource)__	};create,a,new,named,parameter,jdbc,template,for,the,given,link,data,source,p,creates,a,classic,spring,link,org,springframework,jdbc,core,jdbc,template,and,wraps,it,param,data,source,the,jdbc,data,source,to,access;public,named,parameter,jdbc,template,data,source,data,source,assert,not,null,data,source,data,source,must,not,be,null,this,classic,jdbc,template,new,jdbc,template,data,source
NamedParameterJdbcTemplate -> public NamedParameterJdbcTemplate(DataSource dataSource);1519579380;Create a new NamedParameterJdbcTemplate for the given {@link DataSource}._<p>Creates a classic Spring {@link org.springframework.jdbc.core.JdbcTemplate} and wraps it._@param dataSource the JDBC DataSource to access;public NamedParameterJdbcTemplate(DataSource dataSource) {_		Assert.notNull(dataSource, "DataSource must not be null")__		this.classicJdbcTemplate = new JdbcTemplate(dataSource)__	};create,a,new,named,parameter,jdbc,template,for,the,given,link,data,source,p,creates,a,classic,spring,link,org,springframework,jdbc,core,jdbc,template,and,wraps,it,param,data,source,the,jdbc,data,source,to,access;public,named,parameter,jdbc,template,data,source,data,source,assert,not,null,data,source,data,source,must,not,be,null,this,classic,jdbc,template,new,jdbc,template,data,source
NamedParameterJdbcTemplate -> public NamedParameterJdbcTemplate(DataSource dataSource);1530174524;Create a new NamedParameterJdbcTemplate for the given {@link DataSource}._<p>Creates a classic Spring {@link org.springframework.jdbc.core.JdbcTemplate} and wraps it._@param dataSource the JDBC DataSource to access;public NamedParameterJdbcTemplate(DataSource dataSource) {_		Assert.notNull(dataSource, "DataSource must not be null")__		this.classicJdbcTemplate = new JdbcTemplate(dataSource)__	};create,a,new,named,parameter,jdbc,template,for,the,given,link,data,source,p,creates,a,classic,spring,link,org,springframework,jdbc,core,jdbc,template,and,wraps,it,param,data,source,the,jdbc,data,source,to,access;public,named,parameter,jdbc,template,data,source,data,source,assert,not,null,data,source,data,source,must,not,be,null,this,classic,jdbc,template,new,jdbc,template,data,source
NamedParameterJdbcTemplate -> public NamedParameterJdbcTemplate(DataSource dataSource);1542747953;Create a new NamedParameterJdbcTemplate for the given {@link DataSource}._<p>Creates a classic Spring {@link org.springframework.jdbc.core.JdbcTemplate} and wraps it._@param dataSource the JDBC DataSource to access;public NamedParameterJdbcTemplate(DataSource dataSource) {_		Assert.notNull(dataSource, "DataSource must not be null")__		this.classicJdbcTemplate = new JdbcTemplate(dataSource)__	};create,a,new,named,parameter,jdbc,template,for,the,given,link,data,source,p,creates,a,classic,spring,link,org,springframework,jdbc,core,jdbc,template,and,wraps,it,param,data,source,the,jdbc,data,source,to,access;public,named,parameter,jdbc,template,data,source,data,source,assert,not,null,data,source,data,source,must,not,be,null,this,classic,jdbc,template,new,jdbc,template,data,source
NamedParameterJdbcTemplate -> public void setCacheLimit(int cacheLimit);1328020251;Specify the maximum number of entries for this template's SQL cache._Default is 256.;public void setCacheLimit(int cacheLimit) {_		this.cacheLimit = cacheLimit__	};specify,the,maximum,number,of,entries,for,this,template,s,sql,cache,default,is,256;public,void,set,cache,limit,int,cache,limit,this,cache,limit,cache,limit
NamedParameterJdbcTemplate -> public void setCacheLimit(int cacheLimit);1356735495;Specify the maximum number of entries for this template's SQL cache._Default is 256.;public void setCacheLimit(int cacheLimit) {_		this.cacheLimit = cacheLimit__	};specify,the,maximum,number,of,entries,for,this,template,s,sql,cache,default,is,256;public,void,set,cache,limit,int,cache,limit,this,cache,limit,cache,limit
NamedParameterJdbcTemplate -> public void setCacheLimit(int cacheLimit);1357119239;Specify the maximum number of entries for this template's SQL cache._Default is 256.;public void setCacheLimit(int cacheLimit) {_		this.cacheLimit = cacheLimit__	};specify,the,maximum,number,of,entries,for,this,template,s,sql,cache,default,is,256;public,void,set,cache,limit,int,cache,limit,this,cache,limit,cache,limit
NamedParameterJdbcTemplate -> public void setCacheLimit(int cacheLimit);1362408075;Specify the maximum number of entries for this template's SQL cache._Default is 256.;public void setCacheLimit(int cacheLimit) {_		this.cacheLimit = cacheLimit__	};specify,the,maximum,number,of,entries,for,this,template,s,sql,cache,default,is,256;public,void,set,cache,limit,int,cache,limit,this,cache,limit,cache,limit
NamedParameterJdbcTemplate -> public void setCacheLimit(int cacheLimit);1368482696;Specify the maximum number of entries for this template's SQL cache._Default is 256.;public void setCacheLimit(int cacheLimit) {_		this.cacheLimit = cacheLimit__	};specify,the,maximum,number,of,entries,for,this,template,s,sql,cache,default,is,256;public,void,set,cache,limit,int,cache,limit,this,cache,limit,cache,limit
NamedParameterJdbcTemplate -> public void setCacheLimit(int cacheLimit);1393610431;Specify the maximum number of entries for this template's SQL cache._Default is 256.;public void setCacheLimit(int cacheLimit) {_		this.cacheLimit = cacheLimit__	};specify,the,maximum,number,of,entries,for,this,template,s,sql,cache,default,is,256;public,void,set,cache,limit,int,cache,limit,this,cache,limit,cache,limit
NamedParameterJdbcTemplate -> public void setCacheLimit(int cacheLimit);1410305334;Specify the maximum number of entries for this template's SQL cache._Default is 256.;public void setCacheLimit(int cacheLimit) {_		this.cacheLimit = cacheLimit__	};specify,the,maximum,number,of,entries,for,this,template,s,sql,cache,default,is,256;public,void,set,cache,limit,int,cache,limit,this,cache,limit,cache,limit
NamedParameterJdbcTemplate -> public void setCacheLimit(int cacheLimit);1419966315;Specify the maximum number of entries for this template's SQL cache._Default is 256.;public void setCacheLimit(int cacheLimit) {_		this.cacheLimit = cacheLimit__	};specify,the,maximum,number,of,entries,for,this,template,s,sql,cache,default,is,256;public,void,set,cache,limit,int,cache,limit,this,cache,limit,cache,limit
NamedParameterJdbcTemplate -> public void setCacheLimit(int cacheLimit);1467730834;Specify the maximum number of entries for this template's SQL cache._Default is 256.;public void setCacheLimit(int cacheLimit) {_		this.cacheLimit = cacheLimit__	};specify,the,maximum,number,of,entries,for,this,template,s,sql,cache,default,is,256;public,void,set,cache,limit,int,cache,limit,this,cache,limit,cache,limit
NamedParameterJdbcTemplate -> public void setCacheLimit(int cacheLimit);1496259743;Specify the maximum number of entries for this template's SQL cache._Default is 256.;public void setCacheLimit(int cacheLimit) {_		this.cacheLimit = cacheLimit__	};specify,the,maximum,number,of,entries,for,this,template,s,sql,cache,default,is,256;public,void,set,cache,limit,int,cache,limit,this,cache,limit,cache,limit
NamedParameterJdbcTemplate -> public void setCacheLimit(int cacheLimit);1496837955;Specify the maximum number of entries for this template's SQL cache._Default is 256.;public void setCacheLimit(int cacheLimit) {_		this.cacheLimit = cacheLimit__	};specify,the,maximum,number,of,entries,for,this,template,s,sql,cache,default,is,256;public,void,set,cache,limit,int,cache,limit,this,cache,limit,cache,limit
NamedParameterJdbcTemplate -> public void setCacheLimit(int cacheLimit);1502974979;Specify the maximum number of entries for this template's SQL cache._Default is 256.;public void setCacheLimit(int cacheLimit) {_		this.cacheLimit = cacheLimit__	};specify,the,maximum,number,of,entries,for,this,template,s,sql,cache,default,is,256;public,void,set,cache,limit,int,cache,limit,this,cache,limit,cache,limit
NamedParameterJdbcTemplate -> public void setCacheLimit(int cacheLimit);1503008146;Specify the maximum number of entries for this template's SQL cache._Default is 256.;public void setCacheLimit(int cacheLimit) {_		this.cacheLimit = cacheLimit__	};specify,the,maximum,number,of,entries,for,this,template,s,sql,cache,default,is,256;public,void,set,cache,limit,int,cache,limit,this,cache,limit,cache,limit
NamedParameterJdbcTemplate -> public void setCacheLimit(int cacheLimit);1509754029;Specify the maximum number of entries for this template's SQL cache._Default is 256.;public void setCacheLimit(int cacheLimit) {_		this.cacheLimit = cacheLimit__	};specify,the,maximum,number,of,entries,for,this,template,s,sql,cache,default,is,256;public,void,set,cache,limit,int,cache,limit,this,cache,limit,cache,limit
NamedParameterJdbcTemplate -> public void setCacheLimit(int cacheLimit);1511122644;Specify the maximum number of entries for this template's SQL cache._Default is 256.;public void setCacheLimit(int cacheLimit) {_		this.cacheLimit = cacheLimit__	};specify,the,maximum,number,of,entries,for,this,template,s,sql,cache,default,is,256;public,void,set,cache,limit,int,cache,limit,this,cache,limit,cache,limit
NamedParameterJdbcTemplate -> public void setCacheLimit(int cacheLimit);1511712999;Specify the maximum number of entries for this template's SQL cache._Default is 256.;public void setCacheLimit(int cacheLimit) {_		this.cacheLimit = cacheLimit__	};specify,the,maximum,number,of,entries,for,this,template,s,sql,cache,default,is,256;public,void,set,cache,limit,int,cache,limit,this,cache,limit,cache,limit
NamedParameterJdbcTemplate -> public void setCacheLimit(int cacheLimit);1511966301;Specify the maximum number of entries for this template's SQL cache._Default is 256.;public void setCacheLimit(int cacheLimit) {_		this.cacheLimit = cacheLimit__	};specify,the,maximum,number,of,entries,for,this,template,s,sql,cache,default,is,256;public,void,set,cache,limit,int,cache,limit,this,cache,limit,cache,limit
NamedParameterJdbcTemplate -> public void setCacheLimit(int cacheLimit);1519579380;Specify the maximum number of entries for this template's SQL cache._Default is 256.;public void setCacheLimit(int cacheLimit) {_		this.cacheLimit = cacheLimit__	};specify,the,maximum,number,of,entries,for,this,template,s,sql,cache,default,is,256;public,void,set,cache,limit,int,cache,limit,this,cache,limit,cache,limit
NamedParameterJdbcTemplate -> public void setCacheLimit(int cacheLimit);1530174524;Specify the maximum number of entries for this template's SQL cache._Default is 256.;public void setCacheLimit(int cacheLimit) {_		this.cacheLimit = cacheLimit__	};specify,the,maximum,number,of,entries,for,this,template,s,sql,cache,default,is,256;public,void,set,cache,limit,int,cache,limit,this,cache,limit,cache,limit
NamedParameterJdbcTemplate -> public void setCacheLimit(int cacheLimit);1542747953;Specify the maximum number of entries for this template's SQL cache._Default is 256.;public void setCacheLimit(int cacheLimit) {_		this.cacheLimit = cacheLimit__	};specify,the,maximum,number,of,entries,for,this,template,s,sql,cache,default,is,256;public,void,set,cache,limit,int,cache,limit,this,cache,limit,cache,limit
NamedParameterJdbcTemplate -> protected ParsedSql getParsedSql(String sql);1328020251;Obtain a parsed representation of the given SQL statement._<p>The default implementation uses an LRU cache with an upper limit_of 256 entries._@param sql the original SQL_@return a representation of the parsed SQL statement;protected ParsedSql getParsedSql(String sql) {_		if (getCacheLimit() <= 0) {_			return NamedParameterUtils.parseSqlStatement(sql)__		}_		synchronized (this.parsedSqlCache) {_			ParsedSql parsedSql = this.parsedSqlCache.get(sql)__			if (parsedSql == null) {_				parsedSql = NamedParameterUtils.parseSqlStatement(sql)__				this.parsedSqlCache.put(sql, parsedSql)__			}_			return parsedSql__		}_	};obtain,a,parsed,representation,of,the,given,sql,statement,p,the,default,implementation,uses,an,lru,cache,with,an,upper,limit,of,256,entries,param,sql,the,original,sql,return,a,representation,of,the,parsed,sql,statement;protected,parsed,sql,get,parsed,sql,string,sql,if,get,cache,limit,0,return,named,parameter,utils,parse,sql,statement,sql,synchronized,this,parsed,sql,cache,parsed,sql,parsed,sql,this,parsed,sql,cache,get,sql,if,parsed,sql,null,parsed,sql,named,parameter,utils,parse,sql,statement,sql,this,parsed,sql,cache,put,sql,parsed,sql,return,parsed,sql
NamedParameterJdbcTemplate -> protected ParsedSql getParsedSql(String sql);1356735495;Obtain a parsed representation of the given SQL statement._<p>The default implementation uses an LRU cache with an upper limit_of 256 entries._@param sql the original SQL_@return a representation of the parsed SQL statement;protected ParsedSql getParsedSql(String sql) {_		if (getCacheLimit() <= 0) {_			return NamedParameterUtils.parseSqlStatement(sql)__		}_		synchronized (this.parsedSqlCache) {_			ParsedSql parsedSql = this.parsedSqlCache.get(sql)__			if (parsedSql == null) {_				parsedSql = NamedParameterUtils.parseSqlStatement(sql)__				this.parsedSqlCache.put(sql, parsedSql)__			}_			return parsedSql__		}_	};obtain,a,parsed,representation,of,the,given,sql,statement,p,the,default,implementation,uses,an,lru,cache,with,an,upper,limit,of,256,entries,param,sql,the,original,sql,return,a,representation,of,the,parsed,sql,statement;protected,parsed,sql,get,parsed,sql,string,sql,if,get,cache,limit,0,return,named,parameter,utils,parse,sql,statement,sql,synchronized,this,parsed,sql,cache,parsed,sql,parsed,sql,this,parsed,sql,cache,get,sql,if,parsed,sql,null,parsed,sql,named,parameter,utils,parse,sql,statement,sql,this,parsed,sql,cache,put,sql,parsed,sql,return,parsed,sql
NamedParameterJdbcTemplate -> protected ParsedSql getParsedSql(String sql);1357119239;Obtain a parsed representation of the given SQL statement._<p>The default implementation uses an LRU cache with an upper limit_of 256 entries._@param sql the original SQL_@return a representation of the parsed SQL statement;protected ParsedSql getParsedSql(String sql) {_		if (getCacheLimit() <= 0) {_			return NamedParameterUtils.parseSqlStatement(sql)__		}_		synchronized (this.parsedSqlCache) {_			ParsedSql parsedSql = this.parsedSqlCache.get(sql)__			if (parsedSql == null) {_				parsedSql = NamedParameterUtils.parseSqlStatement(sql)__				this.parsedSqlCache.put(sql, parsedSql)__			}_			return parsedSql__		}_	};obtain,a,parsed,representation,of,the,given,sql,statement,p,the,default,implementation,uses,an,lru,cache,with,an,upper,limit,of,256,entries,param,sql,the,original,sql,return,a,representation,of,the,parsed,sql,statement;protected,parsed,sql,get,parsed,sql,string,sql,if,get,cache,limit,0,return,named,parameter,utils,parse,sql,statement,sql,synchronized,this,parsed,sql,cache,parsed,sql,parsed,sql,this,parsed,sql,cache,get,sql,if,parsed,sql,null,parsed,sql,named,parameter,utils,parse,sql,statement,sql,this,parsed,sql,cache,put,sql,parsed,sql,return,parsed,sql
NamedParameterJdbcTemplate -> protected ParsedSql getParsedSql(String sql);1362408075;Obtain a parsed representation of the given SQL statement._<p>The default implementation uses an LRU cache with an upper limit_of 256 entries._@param sql the original SQL_@return a representation of the parsed SQL statement;protected ParsedSql getParsedSql(String sql) {_		if (getCacheLimit() <= 0) {_			return NamedParameterUtils.parseSqlStatement(sql)__		}_		synchronized (this.parsedSqlCache) {_			ParsedSql parsedSql = this.parsedSqlCache.get(sql)__			if (parsedSql == null) {_				parsedSql = NamedParameterUtils.parseSqlStatement(sql)__				this.parsedSqlCache.put(sql, parsedSql)__			}_			return parsedSql__		}_	};obtain,a,parsed,representation,of,the,given,sql,statement,p,the,default,implementation,uses,an,lru,cache,with,an,upper,limit,of,256,entries,param,sql,the,original,sql,return,a,representation,of,the,parsed,sql,statement;protected,parsed,sql,get,parsed,sql,string,sql,if,get,cache,limit,0,return,named,parameter,utils,parse,sql,statement,sql,synchronized,this,parsed,sql,cache,parsed,sql,parsed,sql,this,parsed,sql,cache,get,sql,if,parsed,sql,null,parsed,sql,named,parameter,utils,parse,sql,statement,sql,this,parsed,sql,cache,put,sql,parsed,sql,return,parsed,sql
NamedParameterJdbcTemplate -> protected ParsedSql getParsedSql(String sql);1368482696;Obtain a parsed representation of the given SQL statement._<p>The default implementation uses an LRU cache with an upper limit_of 256 entries._@param sql the original SQL_@return a representation of the parsed SQL statement;protected ParsedSql getParsedSql(String sql) {_		if (getCacheLimit() <= 0) {_			return NamedParameterUtils.parseSqlStatement(sql)__		}_		synchronized (this.parsedSqlCache) {_			ParsedSql parsedSql = this.parsedSqlCache.get(sql)__			if (parsedSql == null) {_				parsedSql = NamedParameterUtils.parseSqlStatement(sql)__				this.parsedSqlCache.put(sql, parsedSql)__			}_			return parsedSql__		}_	};obtain,a,parsed,representation,of,the,given,sql,statement,p,the,default,implementation,uses,an,lru,cache,with,an,upper,limit,of,256,entries,param,sql,the,original,sql,return,a,representation,of,the,parsed,sql,statement;protected,parsed,sql,get,parsed,sql,string,sql,if,get,cache,limit,0,return,named,parameter,utils,parse,sql,statement,sql,synchronized,this,parsed,sql,cache,parsed,sql,parsed,sql,this,parsed,sql,cache,get,sql,if,parsed,sql,null,parsed,sql,named,parameter,utils,parse,sql,statement,sql,this,parsed,sql,cache,put,sql,parsed,sql,return,parsed,sql
NamedParameterJdbcTemplate -> protected ParsedSql getParsedSql(String sql);1393610431;Obtain a parsed representation of the given SQL statement._<p>The default implementation uses an LRU cache with an upper limit_of 256 entries._@param sql the original SQL_@return a representation of the parsed SQL statement;protected ParsedSql getParsedSql(String sql) {_		if (getCacheLimit() <= 0) {_			return NamedParameterUtils.parseSqlStatement(sql)__		}_		synchronized (this.parsedSqlCache) {_			ParsedSql parsedSql = this.parsedSqlCache.get(sql)__			if (parsedSql == null) {_				parsedSql = NamedParameterUtils.parseSqlStatement(sql)__				this.parsedSqlCache.put(sql, parsedSql)__			}_			return parsedSql__		}_	};obtain,a,parsed,representation,of,the,given,sql,statement,p,the,default,implementation,uses,an,lru,cache,with,an,upper,limit,of,256,entries,param,sql,the,original,sql,return,a,representation,of,the,parsed,sql,statement;protected,parsed,sql,get,parsed,sql,string,sql,if,get,cache,limit,0,return,named,parameter,utils,parse,sql,statement,sql,synchronized,this,parsed,sql,cache,parsed,sql,parsed,sql,this,parsed,sql,cache,get,sql,if,parsed,sql,null,parsed,sql,named,parameter,utils,parse,sql,statement,sql,this,parsed,sql,cache,put,sql,parsed,sql,return,parsed,sql
NamedParameterJdbcTemplate -> protected ParsedSql getParsedSql(String sql);1410305334;Obtain a parsed representation of the given SQL statement._<p>The default implementation uses an LRU cache with an upper limit_of 256 entries._@param sql the original SQL_@return a representation of the parsed SQL statement;protected ParsedSql getParsedSql(String sql) {_		if (getCacheLimit() <= 0) {_			return NamedParameterUtils.parseSqlStatement(sql)__		}_		synchronized (this.parsedSqlCache) {_			ParsedSql parsedSql = this.parsedSqlCache.get(sql)__			if (parsedSql == null) {_				parsedSql = NamedParameterUtils.parseSqlStatement(sql)__				this.parsedSqlCache.put(sql, parsedSql)__			}_			return parsedSql__		}_	};obtain,a,parsed,representation,of,the,given,sql,statement,p,the,default,implementation,uses,an,lru,cache,with,an,upper,limit,of,256,entries,param,sql,the,original,sql,return,a,representation,of,the,parsed,sql,statement;protected,parsed,sql,get,parsed,sql,string,sql,if,get,cache,limit,0,return,named,parameter,utils,parse,sql,statement,sql,synchronized,this,parsed,sql,cache,parsed,sql,parsed,sql,this,parsed,sql,cache,get,sql,if,parsed,sql,null,parsed,sql,named,parameter,utils,parse,sql,statement,sql,this,parsed,sql,cache,put,sql,parsed,sql,return,parsed,sql
NamedParameterJdbcTemplate -> protected ParsedSql getParsedSql(String sql);1419966315;Obtain a parsed representation of the given SQL statement._<p>The default implementation uses an LRU cache with an upper limit_of 256 entries._@param sql the original SQL_@return a representation of the parsed SQL statement;protected ParsedSql getParsedSql(String sql) {_		if (getCacheLimit() <= 0) {_			return NamedParameterUtils.parseSqlStatement(sql)__		}_		synchronized (this.parsedSqlCache) {_			ParsedSql parsedSql = this.parsedSqlCache.get(sql)__			if (parsedSql == null) {_				parsedSql = NamedParameterUtils.parseSqlStatement(sql)__				this.parsedSqlCache.put(sql, parsedSql)__			}_			return parsedSql__		}_	};obtain,a,parsed,representation,of,the,given,sql,statement,p,the,default,implementation,uses,an,lru,cache,with,an,upper,limit,of,256,entries,param,sql,the,original,sql,return,a,representation,of,the,parsed,sql,statement;protected,parsed,sql,get,parsed,sql,string,sql,if,get,cache,limit,0,return,named,parameter,utils,parse,sql,statement,sql,synchronized,this,parsed,sql,cache,parsed,sql,parsed,sql,this,parsed,sql,cache,get,sql,if,parsed,sql,null,parsed,sql,named,parameter,utils,parse,sql,statement,sql,this,parsed,sql,cache,put,sql,parsed,sql,return,parsed,sql
NamedParameterJdbcTemplate -> protected ParsedSql getParsedSql(String sql);1467730834;Obtain a parsed representation of the given SQL statement._<p>The default implementation uses an LRU cache with an upper limit_of 256 entries._@param sql the original SQL_@return a representation of the parsed SQL statement;protected ParsedSql getParsedSql(String sql) {_		if (getCacheLimit() <= 0) {_			return NamedParameterUtils.parseSqlStatement(sql)__		}_		synchronized (this.parsedSqlCache) {_			ParsedSql parsedSql = this.parsedSqlCache.get(sql)__			if (parsedSql == null) {_				parsedSql = NamedParameterUtils.parseSqlStatement(sql)__				this.parsedSqlCache.put(sql, parsedSql)__			}_			return parsedSql__		}_	};obtain,a,parsed,representation,of,the,given,sql,statement,p,the,default,implementation,uses,an,lru,cache,with,an,upper,limit,of,256,entries,param,sql,the,original,sql,return,a,representation,of,the,parsed,sql,statement;protected,parsed,sql,get,parsed,sql,string,sql,if,get,cache,limit,0,return,named,parameter,utils,parse,sql,statement,sql,synchronized,this,parsed,sql,cache,parsed,sql,parsed,sql,this,parsed,sql,cache,get,sql,if,parsed,sql,null,parsed,sql,named,parameter,utils,parse,sql,statement,sql,this,parsed,sql,cache,put,sql,parsed,sql,return,parsed,sql
NamedParameterJdbcTemplate -> protected ParsedSql getParsedSql(String sql);1496259743;Obtain a parsed representation of the given SQL statement._<p>The default implementation uses an LRU cache with an upper limit_of 256 entries._@param sql the original SQL_@return a representation of the parsed SQL statement;protected ParsedSql getParsedSql(String sql) {_		if (getCacheLimit() <= 0) {_			return NamedParameterUtils.parseSqlStatement(sql)__		}_		synchronized (this.parsedSqlCache) {_			ParsedSql parsedSql = this.parsedSqlCache.get(sql)__			if (parsedSql == null) {_				parsedSql = NamedParameterUtils.parseSqlStatement(sql)__				this.parsedSqlCache.put(sql, parsedSql)__			}_			return parsedSql__		}_	};obtain,a,parsed,representation,of,the,given,sql,statement,p,the,default,implementation,uses,an,lru,cache,with,an,upper,limit,of,256,entries,param,sql,the,original,sql,return,a,representation,of,the,parsed,sql,statement;protected,parsed,sql,get,parsed,sql,string,sql,if,get,cache,limit,0,return,named,parameter,utils,parse,sql,statement,sql,synchronized,this,parsed,sql,cache,parsed,sql,parsed,sql,this,parsed,sql,cache,get,sql,if,parsed,sql,null,parsed,sql,named,parameter,utils,parse,sql,statement,sql,this,parsed,sql,cache,put,sql,parsed,sql,return,parsed,sql
NamedParameterJdbcTemplate -> protected ParsedSql getParsedSql(String sql);1496837955;Obtain a parsed representation of the given SQL statement._<p>The default implementation uses an LRU cache with an upper limit_of 256 entries._@param sql the original SQL_@return a representation of the parsed SQL statement;protected ParsedSql getParsedSql(String sql) {_		if (getCacheLimit() <= 0) {_			return NamedParameterUtils.parseSqlStatement(sql)__		}_		synchronized (this.parsedSqlCache) {_			ParsedSql parsedSql = this.parsedSqlCache.get(sql)__			if (parsedSql == null) {_				parsedSql = NamedParameterUtils.parseSqlStatement(sql)__				this.parsedSqlCache.put(sql, parsedSql)__			}_			return parsedSql__		}_	};obtain,a,parsed,representation,of,the,given,sql,statement,p,the,default,implementation,uses,an,lru,cache,with,an,upper,limit,of,256,entries,param,sql,the,original,sql,return,a,representation,of,the,parsed,sql,statement;protected,parsed,sql,get,parsed,sql,string,sql,if,get,cache,limit,0,return,named,parameter,utils,parse,sql,statement,sql,synchronized,this,parsed,sql,cache,parsed,sql,parsed,sql,this,parsed,sql,cache,get,sql,if,parsed,sql,null,parsed,sql,named,parameter,utils,parse,sql,statement,sql,this,parsed,sql,cache,put,sql,parsed,sql,return,parsed,sql
NamedParameterJdbcTemplate -> protected ParsedSql getParsedSql(String sql);1502974979;Obtain a parsed representation of the given SQL statement._<p>The default implementation uses an LRU cache with an upper limit_of 256 entries._@param sql the original SQL_@return a representation of the parsed SQL statement;protected ParsedSql getParsedSql(String sql) {_		if (getCacheLimit() <= 0) {_			return NamedParameterUtils.parseSqlStatement(sql)__		}_		synchronized (this.parsedSqlCache) {_			ParsedSql parsedSql = this.parsedSqlCache.get(sql)__			if (parsedSql == null) {_				parsedSql = NamedParameterUtils.parseSqlStatement(sql)__				this.parsedSqlCache.put(sql, parsedSql)__			}_			return parsedSql__		}_	};obtain,a,parsed,representation,of,the,given,sql,statement,p,the,default,implementation,uses,an,lru,cache,with,an,upper,limit,of,256,entries,param,sql,the,original,sql,return,a,representation,of,the,parsed,sql,statement;protected,parsed,sql,get,parsed,sql,string,sql,if,get,cache,limit,0,return,named,parameter,utils,parse,sql,statement,sql,synchronized,this,parsed,sql,cache,parsed,sql,parsed,sql,this,parsed,sql,cache,get,sql,if,parsed,sql,null,parsed,sql,named,parameter,utils,parse,sql,statement,sql,this,parsed,sql,cache,put,sql,parsed,sql,return,parsed,sql
NamedParameterJdbcTemplate -> protected ParsedSql getParsedSql(String sql);1503008146;Obtain a parsed representation of the given SQL statement._<p>The default implementation uses an LRU cache with an upper limit_of 256 entries._@param sql the original SQL_@return a representation of the parsed SQL statement;protected ParsedSql getParsedSql(String sql) {_		if (getCacheLimit() <= 0) {_			return NamedParameterUtils.parseSqlStatement(sql)__		}_		synchronized (this.parsedSqlCache) {_			ParsedSql parsedSql = this.parsedSqlCache.get(sql)__			if (parsedSql == null) {_				parsedSql = NamedParameterUtils.parseSqlStatement(sql)__				this.parsedSqlCache.put(sql, parsedSql)__			}_			return parsedSql__		}_	};obtain,a,parsed,representation,of,the,given,sql,statement,p,the,default,implementation,uses,an,lru,cache,with,an,upper,limit,of,256,entries,param,sql,the,original,sql,return,a,representation,of,the,parsed,sql,statement;protected,parsed,sql,get,parsed,sql,string,sql,if,get,cache,limit,0,return,named,parameter,utils,parse,sql,statement,sql,synchronized,this,parsed,sql,cache,parsed,sql,parsed,sql,this,parsed,sql,cache,get,sql,if,parsed,sql,null,parsed,sql,named,parameter,utils,parse,sql,statement,sql,this,parsed,sql,cache,put,sql,parsed,sql,return,parsed,sql
NamedParameterJdbcTemplate -> protected ParsedSql getParsedSql(String sql);1509754029;Obtain a parsed representation of the given SQL statement._<p>The default implementation uses an LRU cache with an upper limit_of 256 entries._@param sql the original SQL_@return a representation of the parsed SQL statement;protected ParsedSql getParsedSql(String sql) {_		if (getCacheLimit() <= 0) {_			return NamedParameterUtils.parseSqlStatement(sql)__		}_		synchronized (this.parsedSqlCache) {_			ParsedSql parsedSql = this.parsedSqlCache.get(sql)__			if (parsedSql == null) {_				parsedSql = NamedParameterUtils.parseSqlStatement(sql)__				this.parsedSqlCache.put(sql, parsedSql)__			}_			return parsedSql__		}_	};obtain,a,parsed,representation,of,the,given,sql,statement,p,the,default,implementation,uses,an,lru,cache,with,an,upper,limit,of,256,entries,param,sql,the,original,sql,return,a,representation,of,the,parsed,sql,statement;protected,parsed,sql,get,parsed,sql,string,sql,if,get,cache,limit,0,return,named,parameter,utils,parse,sql,statement,sql,synchronized,this,parsed,sql,cache,parsed,sql,parsed,sql,this,parsed,sql,cache,get,sql,if,parsed,sql,null,parsed,sql,named,parameter,utils,parse,sql,statement,sql,this,parsed,sql,cache,put,sql,parsed,sql,return,parsed,sql
NamedParameterJdbcTemplate -> protected ParsedSql getParsedSql(String sql);1511122644;Obtain a parsed representation of the given SQL statement._<p>The default implementation uses an LRU cache with an upper limit_of 256 entries._@param sql the original SQL_@return a representation of the parsed SQL statement;protected ParsedSql getParsedSql(String sql) {_		if (getCacheLimit() <= 0) {_			return NamedParameterUtils.parseSqlStatement(sql)__		}_		synchronized (this.parsedSqlCache) {_			ParsedSql parsedSql = this.parsedSqlCache.get(sql)__			if (parsedSql == null) {_				parsedSql = NamedParameterUtils.parseSqlStatement(sql)__				this.parsedSqlCache.put(sql, parsedSql)__			}_			return parsedSql__		}_	};obtain,a,parsed,representation,of,the,given,sql,statement,p,the,default,implementation,uses,an,lru,cache,with,an,upper,limit,of,256,entries,param,sql,the,original,sql,return,a,representation,of,the,parsed,sql,statement;protected,parsed,sql,get,parsed,sql,string,sql,if,get,cache,limit,0,return,named,parameter,utils,parse,sql,statement,sql,synchronized,this,parsed,sql,cache,parsed,sql,parsed,sql,this,parsed,sql,cache,get,sql,if,parsed,sql,null,parsed,sql,named,parameter,utils,parse,sql,statement,sql,this,parsed,sql,cache,put,sql,parsed,sql,return,parsed,sql
NamedParameterJdbcTemplate -> protected ParsedSql getParsedSql(String sql);1511712999;Obtain a parsed representation of the given SQL statement._<p>The default implementation uses an LRU cache with an upper limit_of 256 entries._@param sql the original SQL_@return a representation of the parsed SQL statement;protected ParsedSql getParsedSql(String sql) {_		if (getCacheLimit() <= 0) {_			return NamedParameterUtils.parseSqlStatement(sql)__		}_		synchronized (this.parsedSqlCache) {_			ParsedSql parsedSql = this.parsedSqlCache.get(sql)__			if (parsedSql == null) {_				parsedSql = NamedParameterUtils.parseSqlStatement(sql)__				this.parsedSqlCache.put(sql, parsedSql)__			}_			return parsedSql__		}_	};obtain,a,parsed,representation,of,the,given,sql,statement,p,the,default,implementation,uses,an,lru,cache,with,an,upper,limit,of,256,entries,param,sql,the,original,sql,return,a,representation,of,the,parsed,sql,statement;protected,parsed,sql,get,parsed,sql,string,sql,if,get,cache,limit,0,return,named,parameter,utils,parse,sql,statement,sql,synchronized,this,parsed,sql,cache,parsed,sql,parsed,sql,this,parsed,sql,cache,get,sql,if,parsed,sql,null,parsed,sql,named,parameter,utils,parse,sql,statement,sql,this,parsed,sql,cache,put,sql,parsed,sql,return,parsed,sql
NamedParameterJdbcTemplate -> protected ParsedSql getParsedSql(String sql);1511966301;Obtain a parsed representation of the given SQL statement._<p>The default implementation uses an LRU cache with an upper limit_of 256 entries._@param sql the original SQL_@return a representation of the parsed SQL statement;protected ParsedSql getParsedSql(String sql) {_		if (getCacheLimit() <= 0) {_			return NamedParameterUtils.parseSqlStatement(sql)__		}_		synchronized (this.parsedSqlCache) {_			ParsedSql parsedSql = this.parsedSqlCache.get(sql)__			if (parsedSql == null) {_				parsedSql = NamedParameterUtils.parseSqlStatement(sql)__				this.parsedSqlCache.put(sql, parsedSql)__			}_			return parsedSql__		}_	};obtain,a,parsed,representation,of,the,given,sql,statement,p,the,default,implementation,uses,an,lru,cache,with,an,upper,limit,of,256,entries,param,sql,the,original,sql,return,a,representation,of,the,parsed,sql,statement;protected,parsed,sql,get,parsed,sql,string,sql,if,get,cache,limit,0,return,named,parameter,utils,parse,sql,statement,sql,synchronized,this,parsed,sql,cache,parsed,sql,parsed,sql,this,parsed,sql,cache,get,sql,if,parsed,sql,null,parsed,sql,named,parameter,utils,parse,sql,statement,sql,this,parsed,sql,cache,put,sql,parsed,sql,return,parsed,sql
NamedParameterJdbcTemplate -> protected ParsedSql getParsedSql(String sql);1519579380;Obtain a parsed representation of the given SQL statement._<p>The default implementation uses an LRU cache with an upper limit of 256 entries._@param sql the original SQL statement_@return a representation of the parsed SQL statement;protected ParsedSql getParsedSql(String sql) {_		if (getCacheLimit() <= 0) {_			return NamedParameterUtils.parseSqlStatement(sql)__		}_		synchronized (this.parsedSqlCache) {_			ParsedSql parsedSql = this.parsedSqlCache.get(sql)__			if (parsedSql == null) {_				parsedSql = NamedParameterUtils.parseSqlStatement(sql)__				this.parsedSqlCache.put(sql, parsedSql)__			}_			return parsedSql__		}_	};obtain,a,parsed,representation,of,the,given,sql,statement,p,the,default,implementation,uses,an,lru,cache,with,an,upper,limit,of,256,entries,param,sql,the,original,sql,statement,return,a,representation,of,the,parsed,sql,statement;protected,parsed,sql,get,parsed,sql,string,sql,if,get,cache,limit,0,return,named,parameter,utils,parse,sql,statement,sql,synchronized,this,parsed,sql,cache,parsed,sql,parsed,sql,this,parsed,sql,cache,get,sql,if,parsed,sql,null,parsed,sql,named,parameter,utils,parse,sql,statement,sql,this,parsed,sql,cache,put,sql,parsed,sql,return,parsed,sql
NamedParameterJdbcTemplate -> protected ParsedSql getParsedSql(String sql);1530174524;Obtain a parsed representation of the given SQL statement._<p>The default implementation uses an LRU cache with an upper limit of 256 entries._@param sql the original SQL statement_@return a representation of the parsed SQL statement;protected ParsedSql getParsedSql(String sql) {_		if (getCacheLimit() <= 0) {_			return NamedParameterUtils.parseSqlStatement(sql)__		}_		synchronized (this.parsedSqlCache) {_			ParsedSql parsedSql = this.parsedSqlCache.get(sql)__			if (parsedSql == null) {_				parsedSql = NamedParameterUtils.parseSqlStatement(sql)__				this.parsedSqlCache.put(sql, parsedSql)__			}_			return parsedSql__		}_	};obtain,a,parsed,representation,of,the,given,sql,statement,p,the,default,implementation,uses,an,lru,cache,with,an,upper,limit,of,256,entries,param,sql,the,original,sql,statement,return,a,representation,of,the,parsed,sql,statement;protected,parsed,sql,get,parsed,sql,string,sql,if,get,cache,limit,0,return,named,parameter,utils,parse,sql,statement,sql,synchronized,this,parsed,sql,cache,parsed,sql,parsed,sql,this,parsed,sql,cache,get,sql,if,parsed,sql,null,parsed,sql,named,parameter,utils,parse,sql,statement,sql,this,parsed,sql,cache,put,sql,parsed,sql,return,parsed,sql
NamedParameterJdbcTemplate -> protected ParsedSql getParsedSql(String sql);1542747953;Obtain a parsed representation of the given SQL statement._<p>The default implementation uses an LRU cache with an upper limit of 256 entries._@param sql the original SQL statement_@return a representation of the parsed SQL statement;protected ParsedSql getParsedSql(String sql) {_		if (getCacheLimit() <= 0) {_			return NamedParameterUtils.parseSqlStatement(sql)__		}_		synchronized (this.parsedSqlCache) {_			ParsedSql parsedSql = this.parsedSqlCache.get(sql)__			if (parsedSql == null) {_				parsedSql = NamedParameterUtils.parseSqlStatement(sql)__				this.parsedSqlCache.put(sql, parsedSql)__			}_			return parsedSql__		}_	};obtain,a,parsed,representation,of,the,given,sql,statement,p,the,default,implementation,uses,an,lru,cache,with,an,upper,limit,of,256,entries,param,sql,the,original,sql,statement,return,a,representation,of,the,parsed,sql,statement;protected,parsed,sql,get,parsed,sql,string,sql,if,get,cache,limit,0,return,named,parameter,utils,parse,sql,statement,sql,synchronized,this,parsed,sql,cache,parsed,sql,parsed,sql,this,parsed,sql,cache,get,sql,if,parsed,sql,null,parsed,sql,named,parameter,utils,parse,sql,statement,sql,this,parsed,sql,cache,put,sql,parsed,sql,return,parsed,sql
