# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractFallbackSQLExceptionTranslator -> protected String buildMessage(String task, String sql, SQLException ex);1328020251;Build a message <code>String</code> for the given {@link java.sql.SQLException}._<p>To be called by translator subclasses when creating an instance of a generic_{@link org.springframework.dao.DataAccessException} class._@param task readable text describing the task being attempted_@param sql the SQL statement that caused the problem (may be <code>null</code>)_@param ex the offending <code>SQLException</code>_@return the message <code>String</code> to use;protected String buildMessage(String task, String sql, SQLException ex) {_		return task + "_ SQL [" + sql + "]_ " + ex.getMessage()__	};build,a,message,code,string,code,for,the,given,link,java,sql,sqlexception,p,to,be,called,by,translator,subclasses,when,creating,an,instance,of,a,generic,link,org,springframework,dao,data,access,exception,class,param,task,readable,text,describing,the,task,being,attempted,param,sql,the,sql,statement,that,caused,the,problem,may,be,code,null,code,param,ex,the,offending,code,sqlexception,code,return,the,message,code,string,code,to,use;protected,string,build,message,string,task,string,sql,sqlexception,ex,return,task,sql,sql,ex,get,message
AbstractFallbackSQLExceptionTranslator -> protected String buildMessage(String task, String sql, SQLException ex);1356735495;Build a message {@code String} for the given {@link java.sql.SQLException}._<p>To be called by translator subclasses when creating an instance of a generic_{@link org.springframework.dao.DataAccessException} class._@param task readable text describing the task being attempted_@param sql the SQL statement that caused the problem (may be {@code null})_@param ex the offending {@code SQLException}_@return the message {@code String} to use;protected String buildMessage(String task, String sql, SQLException ex) {_		return task + "_ SQL [" + sql + "]_ " + ex.getMessage()__	};build,a,message,code,string,for,the,given,link,java,sql,sqlexception,p,to,be,called,by,translator,subclasses,when,creating,an,instance,of,a,generic,link,org,springframework,dao,data,access,exception,class,param,task,readable,text,describing,the,task,being,attempted,param,sql,the,sql,statement,that,caused,the,problem,may,be,code,null,param,ex,the,offending,code,sqlexception,return,the,message,code,string,to,use;protected,string,build,message,string,task,string,sql,sqlexception,ex,return,task,sql,sql,ex,get,message
AbstractFallbackSQLExceptionTranslator -> protected String buildMessage(String task, String sql, SQLException ex);1357119239;Build a message {@code String} for the given {@link java.sql.SQLException}._<p>To be called by translator subclasses when creating an instance of a generic_{@link org.springframework.dao.DataAccessException} class._@param task readable text describing the task being attempted_@param sql the SQL statement that caused the problem (may be {@code null})_@param ex the offending {@code SQLException}_@return the message {@code String} to use;protected String buildMessage(String task, String sql, SQLException ex) {_		return task + "_ SQL [" + sql + "]_ " + ex.getMessage()__	};build,a,message,code,string,for,the,given,link,java,sql,sqlexception,p,to,be,called,by,translator,subclasses,when,creating,an,instance,of,a,generic,link,org,springframework,dao,data,access,exception,class,param,task,readable,text,describing,the,task,being,attempted,param,sql,the,sql,statement,that,caused,the,problem,may,be,code,null,param,ex,the,offending,code,sqlexception,return,the,message,code,string,to,use;protected,string,build,message,string,task,string,sql,sqlexception,ex,return,task,sql,sql,ex,get,message
AbstractFallbackSQLExceptionTranslator -> protected String buildMessage(String task, String sql, SQLException ex);1368482696;Build a message {@code String} for the given {@link java.sql.SQLException}._<p>To be called by translator subclasses when creating an instance of a generic_{@link org.springframework.dao.DataAccessException} class._@param task readable text describing the task being attempted_@param sql the SQL statement that caused the problem (may be {@code null})_@param ex the offending {@code SQLException}_@return the message {@code String} to use;protected String buildMessage(String task, String sql, SQLException ex) {_		return task + "_ SQL [" + sql + "]_ " + ex.getMessage()__	};build,a,message,code,string,for,the,given,link,java,sql,sqlexception,p,to,be,called,by,translator,subclasses,when,creating,an,instance,of,a,generic,link,org,springframework,dao,data,access,exception,class,param,task,readable,text,describing,the,task,being,attempted,param,sql,the,sql,statement,that,caused,the,problem,may,be,code,null,param,ex,the,offending,code,sqlexception,return,the,message,code,string,to,use;protected,string,build,message,string,task,string,sql,sqlexception,ex,return,task,sql,sql,ex,get,message
AbstractFallbackSQLExceptionTranslator -> protected String buildMessage(String task, String sql, SQLException ex);1496837955;Build a message {@code String} for the given {@link java.sql.SQLException}._<p>To be called by translator subclasses when creating an instance of a generic_{@link org.springframework.dao.DataAccessException} class._@param task readable text describing the task being attempted_@param sql the SQL statement that caused the problem_@param ex the offending {@code SQLException}_@return the message {@code String} to use;protected String buildMessage(String task, String sql, SQLException ex) {_		return task + "_ SQL [" + sql + "]_ " + ex.getMessage()__	};build,a,message,code,string,for,the,given,link,java,sql,sqlexception,p,to,be,called,by,translator,subclasses,when,creating,an,instance,of,a,generic,link,org,springframework,dao,data,access,exception,class,param,task,readable,text,describing,the,task,being,attempted,param,sql,the,sql,statement,that,caused,the,problem,param,ex,the,offending,code,sqlexception,return,the,message,code,string,to,use;protected,string,build,message,string,task,string,sql,sqlexception,ex,return,task,sql,sql,ex,get,message
AbstractFallbackSQLExceptionTranslator -> protected String buildMessage(String task, String sql, SQLException ex);1500448076;Build a message {@code String} for the given {@link java.sql.SQLException}._<p>To be called by translator subclasses when creating an instance of a generic_{@link org.springframework.dao.DataAccessException} class._@param task readable text describing the task being attempted_@param sql the SQL statement that caused the problem_@param ex the offending {@code SQLException}_@return the message {@code String} to use;protected String buildMessage(String task, String sql, SQLException ex) {_		return task + "_ SQL [" + sql + "]_ " + ex.getMessage()__	};build,a,message,code,string,for,the,given,link,java,sql,sqlexception,p,to,be,called,by,translator,subclasses,when,creating,an,instance,of,a,generic,link,org,springframework,dao,data,access,exception,class,param,task,readable,text,describing,the,task,being,attempted,param,sql,the,sql,statement,that,caused,the,problem,param,ex,the,offending,code,sqlexception,return,the,message,code,string,to,use;protected,string,build,message,string,task,string,sql,sqlexception,ex,return,task,sql,sql,ex,get,message
AbstractFallbackSQLExceptionTranslator -> protected String buildMessage(String task, String sql, SQLException ex);1502974979;Build a message {@code String} for the given {@link java.sql.SQLException}._<p>To be called by translator subclasses when creating an instance of a generic_{@link org.springframework.dao.DataAccessException} class._@param task readable text describing the task being attempted_@param sql the SQL statement that caused the problem_@param ex the offending {@code SQLException}_@return the message {@code String} to use;protected String buildMessage(String task, String sql, SQLException ex) {_		return task + "_ SQL [" + sql + "]_ " + ex.getMessage()__	};build,a,message,code,string,for,the,given,link,java,sql,sqlexception,p,to,be,called,by,translator,subclasses,when,creating,an,instance,of,a,generic,link,org,springframework,dao,data,access,exception,class,param,task,readable,text,describing,the,task,being,attempted,param,sql,the,sql,statement,that,caused,the,problem,param,ex,the,offending,code,sqlexception,return,the,message,code,string,to,use;protected,string,build,message,string,task,string,sql,sqlexception,ex,return,task,sql,sql,ex,get,message
AbstractFallbackSQLExceptionTranslator -> protected String buildMessage(String task, @Nullable String sql, SQLException ex);1495868221;Build a message {@code String} for the given {@link java.sql.SQLException}._<p>To be called by translator subclasses when creating an instance of a generic_{@link org.springframework.dao.DataAccessException} class._@param task readable text describing the task being attempted_@param sql the SQL statement that caused the problem (may be {@code null})_@param ex the offending {@code SQLException}_@return the message {@code String} to use;protected String buildMessage(String task, @Nullable String sql, SQLException ex) {_		return task + "_ SQL [" + sql + "]_ " + ex.getMessage()__	};build,a,message,code,string,for,the,given,link,java,sql,sqlexception,p,to,be,called,by,translator,subclasses,when,creating,an,instance,of,a,generic,link,org,springframework,dao,data,access,exception,class,param,task,readable,text,describing,the,task,being,attempted,param,sql,the,sql,statement,that,caused,the,problem,may,be,code,null,param,ex,the,offending,code,sqlexception,return,the,message,code,string,to,use;protected,string,build,message,string,task,nullable,string,sql,sqlexception,ex,return,task,sql,sql,ex,get,message
AbstractFallbackSQLExceptionTranslator -> protected String buildMessage(String task, @Nullable String sql, SQLException ex);1496242568;Build a message {@code String} for the given {@link java.sql.SQLException}._<p>To be called by translator subclasses when creating an instance of a generic_{@link org.springframework.dao.DataAccessException} class._@param task readable text describing the task being attempted_@param sql the SQL statement that caused the problem (may be {@code null})_@param ex the offending {@code SQLException}_@return the message {@code String} to use;protected String buildMessage(String task, @Nullable String sql, SQLException ex) {_		return task + "_ SQL [" + sql + "]_ " + ex.getMessage()__	};build,a,message,code,string,for,the,given,link,java,sql,sqlexception,p,to,be,called,by,translator,subclasses,when,creating,an,instance,of,a,generic,link,org,springframework,dao,data,access,exception,class,param,task,readable,text,describing,the,task,being,attempted,param,sql,the,sql,statement,that,caused,the,problem,may,be,code,null,param,ex,the,offending,code,sqlexception,return,the,message,code,string,to,use;protected,string,build,message,string,task,nullable,string,sql,sqlexception,ex,return,task,sql,sql,ex,get,message
AbstractFallbackSQLExceptionTranslator -> protected String buildMessage(String task, @Nullable String sql, SQLException ex);1506097334;Build a message {@code String} for the given {@link java.sql.SQLException}._<p>To be called by translator subclasses when creating an instance of a generic_{@link org.springframework.dao.DataAccessException} class._@param task readable text describing the task being attempted_@param sql the SQL statement that caused the problem_@param ex the offending {@code SQLException}_@return the message {@code String} to use;protected String buildMessage(String task, @Nullable String sql, SQLException ex) {_		return task + "_ " + (sql != null ? "SQL [" + sql : "]_ " + "") + ex.getMessage()__	};build,a,message,code,string,for,the,given,link,java,sql,sqlexception,p,to,be,called,by,translator,subclasses,when,creating,an,instance,of,a,generic,link,org,springframework,dao,data,access,exception,class,param,task,readable,text,describing,the,task,being,attempted,param,sql,the,sql,statement,that,caused,the,problem,param,ex,the,offending,code,sqlexception,return,the,message,code,string,to,use;protected,string,build,message,string,task,nullable,string,sql,sqlexception,ex,return,task,sql,null,sql,sql,ex,get,message
AbstractFallbackSQLExceptionTranslator -> protected String buildMessage(String task, @Nullable String sql, SQLException ex);1530174524;Build a message {@code String} for the given {@link java.sql.SQLException}._<p>To be called by translator subclasses when creating an instance of a generic_{@link org.springframework.dao.DataAccessException} class._@param task readable text describing the task being attempted_@param sql the SQL statement that caused the problem_@param ex the offending {@code SQLException}_@return the message {@code String} to use;protected String buildMessage(String task, @Nullable String sql, SQLException ex) {_		return task + "_ " + (sql != null ? "SQL [" + sql : "]_ " + "") + ex.getMessage()__	};build,a,message,code,string,for,the,given,link,java,sql,sqlexception,p,to,be,called,by,translator,subclasses,when,creating,an,instance,of,a,generic,link,org,springframework,dao,data,access,exception,class,param,task,readable,text,describing,the,task,being,attempted,param,sql,the,sql,statement,that,caused,the,problem,param,ex,the,offending,code,sqlexception,return,the,message,code,string,to,use;protected,string,build,message,string,task,nullable,string,sql,sqlexception,ex,return,task,sql,null,sql,sql,ex,get,message
AbstractFallbackSQLExceptionTranslator -> protected String buildMessage(String task, @Nullable String sql, SQLException ex);1537283867;Build a message {@code String} for the given {@link java.sql.SQLException}._<p>To be called by translator subclasses when creating an instance of a generic_{@link org.springframework.dao.DataAccessException} class._@param task readable text describing the task being attempted_@param sql the SQL statement that caused the problem_@param ex the offending {@code SQLException}_@return the message {@code String} to use;protected String buildMessage(String task, @Nullable String sql, SQLException ex) {_		return task + "_ " + (sql != null ? ("SQL [" + sql + "]_ ") : "") + ex.getMessage()__	};build,a,message,code,string,for,the,given,link,java,sql,sqlexception,p,to,be,called,by,translator,subclasses,when,creating,an,instance,of,a,generic,link,org,springframework,dao,data,access,exception,class,param,task,readable,text,describing,the,task,being,attempted,param,sql,the,sql,statement,that,caused,the,problem,param,ex,the,offending,code,sqlexception,return,the,message,code,string,to,use;protected,string,build,message,string,task,nullable,string,sql,sqlexception,ex,return,task,sql,null,sql,sql,ex,get,message
AbstractFallbackSQLExceptionTranslator -> @Nullable 	protected abstract DataAccessException doTranslate(String task, String sql, SQLException ex)_;1496837955;Template method for actually translating the given exception._<p>The passed-in arguments will have been pre-checked. Furthermore, this method_is allowed to return {@code null} to indicate that no exception match has_been found and that fallback translation should kick in._@param task readable text describing the task being attempted_@param sql SQL query or update that caused the problem_@param ex the offending {@code SQLException}_@return the DataAccessException, wrapping the {@code SQLException}__or {@code null} if no exception match found;@Nullable_	protected abstract DataAccessException doTranslate(String task, String sql, SQLException ex)_;template,method,for,actually,translating,the,given,exception,p,the,passed,in,arguments,will,have,been,pre,checked,furthermore,this,method,is,allowed,to,return,code,null,to,indicate,that,no,exception,match,has,been,found,and,that,fallback,translation,should,kick,in,param,task,readable,text,describing,the,task,being,attempted,param,sql,sql,query,or,update,that,caused,the,problem,param,ex,the,offending,code,sqlexception,return,the,data,access,exception,wrapping,the,code,sqlexception,or,code,null,if,no,exception,match,found;nullable,protected,abstract,data,access,exception,do,translate,string,task,string,sql,sqlexception,ex
AbstractFallbackSQLExceptionTranslator -> @Nullable 	protected abstract DataAccessException doTranslate(String task, String sql, SQLException ex)_;1500448076;Template method for actually translating the given exception._<p>The passed-in arguments will have been pre-checked. Furthermore, this method_is allowed to return {@code null} to indicate that no exception match has_been found and that fallback translation should kick in._@param task readable text describing the task being attempted_@param sql SQL query or update that caused the problem_@param ex the offending {@code SQLException}_@return the DataAccessException, wrapping the {@code SQLException}__or {@code null} if no exception match found;@Nullable_	protected abstract DataAccessException doTranslate(String task, String sql, SQLException ex)_;template,method,for,actually,translating,the,given,exception,p,the,passed,in,arguments,will,have,been,pre,checked,furthermore,this,method,is,allowed,to,return,code,null,to,indicate,that,no,exception,match,has,been,found,and,that,fallback,translation,should,kick,in,param,task,readable,text,describing,the,task,being,attempted,param,sql,sql,query,or,update,that,caused,the,problem,param,ex,the,offending,code,sqlexception,return,the,data,access,exception,wrapping,the,code,sqlexception,or,code,null,if,no,exception,match,found;nullable,protected,abstract,data,access,exception,do,translate,string,task,string,sql,sqlexception,ex
AbstractFallbackSQLExceptionTranslator -> @Nullable 	protected abstract DataAccessException doTranslate(String task, String sql, SQLException ex)_;1502974979;Template method for actually translating the given exception._<p>The passed-in arguments will have been pre-checked. Furthermore, this method_is allowed to return {@code null} to indicate that no exception match has_been found and that fallback translation should kick in._@param task readable text describing the task being attempted_@param sql SQL query or update that caused the problem_@param ex the offending {@code SQLException}_@return the DataAccessException, wrapping the {@code SQLException}__or {@code null} if no exception match found;@Nullable_	protected abstract DataAccessException doTranslate(String task, String sql, SQLException ex)_;template,method,for,actually,translating,the,given,exception,p,the,passed,in,arguments,will,have,been,pre,checked,furthermore,this,method,is,allowed,to,return,code,null,to,indicate,that,no,exception,match,has,been,found,and,that,fallback,translation,should,kick,in,param,task,readable,text,describing,the,task,being,attempted,param,sql,sql,query,or,update,that,caused,the,problem,param,ex,the,offending,code,sqlexception,return,the,data,access,exception,wrapping,the,code,sqlexception,or,code,null,if,no,exception,match,found;nullable,protected,abstract,data,access,exception,do,translate,string,task,string,sql,sqlexception,ex
AbstractFallbackSQLExceptionTranslator -> @Nullable 	public SQLExceptionTranslator getFallbackTranslator();1495868221;Return the fallback exception translator, if any.;@Nullable_	public SQLExceptionTranslator getFallbackTranslator() {_		return this.fallbackTranslator__	};return,the,fallback,exception,translator,if,any;nullable,public,sqlexception,translator,get,fallback,translator,return,this,fallback,translator
AbstractFallbackSQLExceptionTranslator -> @Nullable 	public SQLExceptionTranslator getFallbackTranslator();1496242568;Return the fallback exception translator, if any.;@Nullable_	public SQLExceptionTranslator getFallbackTranslator() {_		return this.fallbackTranslator__	};return,the,fallback,exception,translator,if,any;nullable,public,sqlexception,translator,get,fallback,translator,return,this,fallback,translator
AbstractFallbackSQLExceptionTranslator -> @Nullable 	public SQLExceptionTranslator getFallbackTranslator();1496837955;Return the fallback exception translator, if any.;@Nullable_	public SQLExceptionTranslator getFallbackTranslator() {_		return this.fallbackTranslator__	};return,the,fallback,exception,translator,if,any;nullable,public,sqlexception,translator,get,fallback,translator,return,this,fallback,translator
AbstractFallbackSQLExceptionTranslator -> @Nullable 	public SQLExceptionTranslator getFallbackTranslator();1500448076;Return the fallback exception translator, if any.;@Nullable_	public SQLExceptionTranslator getFallbackTranslator() {_		return this.fallbackTranslator__	};return,the,fallback,exception,translator,if,any;nullable,public,sqlexception,translator,get,fallback,translator,return,this,fallback,translator
AbstractFallbackSQLExceptionTranslator -> @Nullable 	public SQLExceptionTranslator getFallbackTranslator();1502974979;Return the fallback exception translator, if any.;@Nullable_	public SQLExceptionTranslator getFallbackTranslator() {_		return this.fallbackTranslator__	};return,the,fallback,exception,translator,if,any;nullable,public,sqlexception,translator,get,fallback,translator,return,this,fallback,translator
AbstractFallbackSQLExceptionTranslator -> @Nullable 	public SQLExceptionTranslator getFallbackTranslator();1506097334;Return the fallback exception translator, if any.;@Nullable_	public SQLExceptionTranslator getFallbackTranslator() {_		return this.fallbackTranslator__	};return,the,fallback,exception,translator,if,any;nullable,public,sqlexception,translator,get,fallback,translator,return,this,fallback,translator
AbstractFallbackSQLExceptionTranslator -> @Nullable 	public SQLExceptionTranslator getFallbackTranslator();1530174524;Return the fallback exception translator, if any.;@Nullable_	public SQLExceptionTranslator getFallbackTranslator() {_		return this.fallbackTranslator__	};return,the,fallback,exception,translator,if,any;nullable,public,sqlexception,translator,get,fallback,translator,return,this,fallback,translator
AbstractFallbackSQLExceptionTranslator -> @Nullable 	public SQLExceptionTranslator getFallbackTranslator();1537283867;Return the fallback exception translator, if any.;@Nullable_	public SQLExceptionTranslator getFallbackTranslator() {_		return this.fallbackTranslator__	};return,the,fallback,exception,translator,if,any;nullable,public,sqlexception,translator,get,fallback,translator,return,this,fallback,translator
AbstractFallbackSQLExceptionTranslator -> public void setFallbackTranslator(SQLExceptionTranslator fallback);1328020251;Override the default SQL state fallback translator_(typically a {@link SQLStateSQLExceptionTranslator}).;public void setFallbackTranslator(SQLExceptionTranslator fallback) {_		this.fallbackTranslator = fallback__	};override,the,default,sql,state,fallback,translator,typically,a,link,sqlstate,sqlexception,translator;public,void,set,fallback,translator,sqlexception,translator,fallback,this,fallback,translator,fallback
AbstractFallbackSQLExceptionTranslator -> public void setFallbackTranslator(SQLExceptionTranslator fallback);1356735495;Override the default SQL state fallback translator_(typically a {@link SQLStateSQLExceptionTranslator}).;public void setFallbackTranslator(SQLExceptionTranslator fallback) {_		this.fallbackTranslator = fallback__	};override,the,default,sql,state,fallback,translator,typically,a,link,sqlstate,sqlexception,translator;public,void,set,fallback,translator,sqlexception,translator,fallback,this,fallback,translator,fallback
AbstractFallbackSQLExceptionTranslator -> public void setFallbackTranslator(SQLExceptionTranslator fallback);1357119239;Override the default SQL state fallback translator_(typically a {@link SQLStateSQLExceptionTranslator}).;public void setFallbackTranslator(SQLExceptionTranslator fallback) {_		this.fallbackTranslator = fallback__	};override,the,default,sql,state,fallback,translator,typically,a,link,sqlstate,sqlexception,translator;public,void,set,fallback,translator,sqlexception,translator,fallback,this,fallback,translator,fallback
AbstractFallbackSQLExceptionTranslator -> public void setFallbackTranslator(SQLExceptionTranslator fallback);1368482696;Override the default SQL state fallback translator_(typically a {@link SQLStateSQLExceptionTranslator}).;public void setFallbackTranslator(SQLExceptionTranslator fallback) {_		this.fallbackTranslator = fallback__	};override,the,default,sql,state,fallback,translator,typically,a,link,sqlstate,sqlexception,translator;public,void,set,fallback,translator,sqlexception,translator,fallback,this,fallback,translator,fallback
AbstractFallbackSQLExceptionTranslator -> public void setFallbackTranslator(SQLExceptionTranslator fallback);1495868221;Override the default SQL state fallback translator_(typically a {@link SQLStateSQLExceptionTranslator}).;public void setFallbackTranslator(SQLExceptionTranslator fallback) {_		this.fallbackTranslator = fallback__	};override,the,default,sql,state,fallback,translator,typically,a,link,sqlstate,sqlexception,translator;public,void,set,fallback,translator,sqlexception,translator,fallback,this,fallback,translator,fallback
AbstractFallbackSQLExceptionTranslator -> public void setFallbackTranslator(SQLExceptionTranslator fallback);1496242568;Override the default SQL state fallback translator_(typically a {@link SQLStateSQLExceptionTranslator}).;public void setFallbackTranslator(SQLExceptionTranslator fallback) {_		this.fallbackTranslator = fallback__	};override,the,default,sql,state,fallback,translator,typically,a,link,sqlstate,sqlexception,translator;public,void,set,fallback,translator,sqlexception,translator,fallback,this,fallback,translator,fallback
AbstractFallbackSQLExceptionTranslator -> public void setFallbackTranslator(SQLExceptionTranslator fallback);1496837955;Override the default SQL state fallback translator_(typically a {@link SQLStateSQLExceptionTranslator}).;public void setFallbackTranslator(SQLExceptionTranslator fallback) {_		this.fallbackTranslator = fallback__	};override,the,default,sql,state,fallback,translator,typically,a,link,sqlstate,sqlexception,translator;public,void,set,fallback,translator,sqlexception,translator,fallback,this,fallback,translator,fallback
AbstractFallbackSQLExceptionTranslator -> public DataAccessException translate(String task, String sql, SQLException ex);1328020251;Pre-checks the arguments, calls {@link #doTranslate}, and invokes the_{@link #getFallbackTranslator() fallback translator} if necessary.;public DataAccessException translate(String task, String sql, SQLException ex) {_		Assert.notNull(ex, "Cannot translate a null SQLException")__		if (task == null) {_			task = ""__		}_		if (sql == null) {_			sql = ""__		}__		DataAccessException dex = doTranslate(task, sql, ex)__		if (dex != null) {_			_			return dex__		}_		_		SQLExceptionTranslator fallback = getFallbackTranslator()__		if (fallback != null) {_			return fallback.translate(task, sql, ex)__		}_		_		return new UncategorizedSQLException(task, sql, ex)__	};pre,checks,the,arguments,calls,link,do,translate,and,invokes,the,link,get,fallback,translator,fallback,translator,if,necessary;public,data,access,exception,translate,string,task,string,sql,sqlexception,ex,assert,not,null,ex,cannot,translate,a,null,sqlexception,if,task,null,task,if,sql,null,sql,data,access,exception,dex,do,translate,task,sql,ex,if,dex,null,return,dex,sqlexception,translator,fallback,get,fallback,translator,if,fallback,null,return,fallback,translate,task,sql,ex,return,new,uncategorized,sqlexception,task,sql,ex
AbstractFallbackSQLExceptionTranslator -> public DataAccessException translate(String task, String sql, SQLException ex);1357119239;Pre-checks the arguments, calls {@link #doTranslate}, and invokes the_{@link #getFallbackTranslator() fallback translator} if necessary.;public DataAccessException translate(String task, String sql, SQLException ex) {_		Assert.notNull(ex, "Cannot translate a null SQLException")__		if (task == null) {_			task = ""__		}_		if (sql == null) {_			sql = ""__		}__		DataAccessException dex = doTranslate(task, sql, ex)__		if (dex != null) {_			_			return dex__		}_		_		SQLExceptionTranslator fallback = getFallbackTranslator()__		if (fallback != null) {_			return fallback.translate(task, sql, ex)__		}_		_		return new UncategorizedSQLException(task, sql, ex)__	};pre,checks,the,arguments,calls,link,do,translate,and,invokes,the,link,get,fallback,translator,fallback,translator,if,necessary;public,data,access,exception,translate,string,task,string,sql,sqlexception,ex,assert,not,null,ex,cannot,translate,a,null,sqlexception,if,task,null,task,if,sql,null,sql,data,access,exception,dex,do,translate,task,sql,ex,if,dex,null,return,dex,sqlexception,translator,fallback,get,fallback,translator,if,fallback,null,return,fallback,translate,task,sql,ex,return,new,uncategorized,sqlexception,task,sql,ex
AbstractFallbackSQLExceptionTranslator -> @Override 	public DataAccessException translate(@Nullable String task, @Nullable String sql, SQLException ex);1496837955;Pre-checks the arguments, calls {@link #doTranslate}, and invokes the_{@link #getFallbackTranslator() fallback translator} if necessary.;@Override_	public DataAccessException translate(@Nullable String task, @Nullable String sql, SQLException ex) {_		Assert.notNull(ex, "Cannot translate a null SQLException")__		if (task == null) {_			task = ""__		}_		if (sql == null) {_			sql = ""__		}__		DataAccessException dex = doTranslate(task, sql, ex)__		if (dex != null) {_			_			return dex__		}_		_		SQLExceptionTranslator fallback = getFallbackTranslator()__		if (fallback != null) {_			return fallback.translate(task, sql, ex)__		}_		_		return new UncategorizedSQLException(task, sql, ex)__	};pre,checks,the,arguments,calls,link,do,translate,and,invokes,the,link,get,fallback,translator,fallback,translator,if,necessary;override,public,data,access,exception,translate,nullable,string,task,nullable,string,sql,sqlexception,ex,assert,not,null,ex,cannot,translate,a,null,sqlexception,if,task,null,task,if,sql,null,sql,data,access,exception,dex,do,translate,task,sql,ex,if,dex,null,return,dex,sqlexception,translator,fallback,get,fallback,translator,if,fallback,null,return,fallback,translate,task,sql,ex,return,new,uncategorized,sqlexception,task,sql,ex
AbstractFallbackSQLExceptionTranslator -> @Override 	public DataAccessException translate(@Nullable String task, @Nullable String sql, SQLException ex);1500448076;Pre-checks the arguments, calls {@link #doTranslate}, and invokes the_{@link #getFallbackTranslator() fallback translator} if necessary.;@Override_	public DataAccessException translate(@Nullable String task, @Nullable String sql, SQLException ex) {_		Assert.notNull(ex, "Cannot translate a null SQLException")__		if (task == null) {_			task = ""__		}_		if (sql == null) {_			sql = ""__		}__		DataAccessException dex = doTranslate(task, sql, ex)__		if (dex != null) {_			_			return dex__		}_		_		SQLExceptionTranslator fallback = getFallbackTranslator()__		if (fallback != null) {_			return fallback.translate(task, sql, ex)__		}_		_		return new UncategorizedSQLException(task, sql, ex)__	};pre,checks,the,arguments,calls,link,do,translate,and,invokes,the,link,get,fallback,translator,fallback,translator,if,necessary;override,public,data,access,exception,translate,nullable,string,task,nullable,string,sql,sqlexception,ex,assert,not,null,ex,cannot,translate,a,null,sqlexception,if,task,null,task,if,sql,null,sql,data,access,exception,dex,do,translate,task,sql,ex,if,dex,null,return,dex,sqlexception,translator,fallback,get,fallback,translator,if,fallback,null,return,fallback,translate,task,sql,ex,return,new,uncategorized,sqlexception,task,sql,ex
AbstractFallbackSQLExceptionTranslator -> @Nullable 	protected abstract DataAccessException doTranslate(String task, @Nullable String sql, SQLException ex)_;1495868221;Template method for actually translating the given exception._<p>The passed-in arguments will have been pre-checked. Furthermore, this method_is allowed to return {@code null} to indicate that no exception match has_been found and that fallback translation should kick in._@param task readable text describing the task being attempted_@param sql SQL query or update that caused the problem (may be {@code null})_@param ex the offending {@code SQLException}_@return the DataAccessException, wrapping the {@code SQLException}__or {@code null} if no exception match found;@Nullable_	protected abstract DataAccessException doTranslate(String task, @Nullable String sql, SQLException ex)_;template,method,for,actually,translating,the,given,exception,p,the,passed,in,arguments,will,have,been,pre,checked,furthermore,this,method,is,allowed,to,return,code,null,to,indicate,that,no,exception,match,has,been,found,and,that,fallback,translation,should,kick,in,param,task,readable,text,describing,the,task,being,attempted,param,sql,sql,query,or,update,that,caused,the,problem,may,be,code,null,param,ex,the,offending,code,sqlexception,return,the,data,access,exception,wrapping,the,code,sqlexception,or,code,null,if,no,exception,match,found;nullable,protected,abstract,data,access,exception,do,translate,string,task,nullable,string,sql,sqlexception,ex
AbstractFallbackSQLExceptionTranslator -> @Nullable 	protected abstract DataAccessException doTranslate(String task, @Nullable String sql, SQLException ex)_;1496242568;Template method for actually translating the given exception._<p>The passed-in arguments will have been pre-checked. Furthermore, this method_is allowed to return {@code null} to indicate that no exception match has_been found and that fallback translation should kick in._@param task readable text describing the task being attempted_@param sql SQL query or update that caused the problem (may be {@code null})_@param ex the offending {@code SQLException}_@return the DataAccessException, wrapping the {@code SQLException}__or {@code null} if no exception match found;@Nullable_	protected abstract DataAccessException doTranslate(String task, @Nullable String sql, SQLException ex)_;template,method,for,actually,translating,the,given,exception,p,the,passed,in,arguments,will,have,been,pre,checked,furthermore,this,method,is,allowed,to,return,code,null,to,indicate,that,no,exception,match,has,been,found,and,that,fallback,translation,should,kick,in,param,task,readable,text,describing,the,task,being,attempted,param,sql,sql,query,or,update,that,caused,the,problem,may,be,code,null,param,ex,the,offending,code,sqlexception,return,the,data,access,exception,wrapping,the,code,sqlexception,or,code,null,if,no,exception,match,found;nullable,protected,abstract,data,access,exception,do,translate,string,task,nullable,string,sql,sqlexception,ex
AbstractFallbackSQLExceptionTranslator -> @Nullable 	protected abstract DataAccessException doTranslate(String task, @Nullable String sql, SQLException ex)_;1506097334;Template method for actually translating the given exception._<p>The passed-in arguments will have been pre-checked. Furthermore, this method_is allowed to return {@code null} to indicate that no exception match has_been found and that fallback translation should kick in._@param task readable text describing the task being attempted_@param sql SQL query or update that caused the problem (if known)_@param ex the offending {@code SQLException}_@return the DataAccessException, wrapping the {@code SQLException}__or {@code null} if no exception match found;@Nullable_	protected abstract DataAccessException doTranslate(String task, @Nullable String sql, SQLException ex)_;template,method,for,actually,translating,the,given,exception,p,the,passed,in,arguments,will,have,been,pre,checked,furthermore,this,method,is,allowed,to,return,code,null,to,indicate,that,no,exception,match,has,been,found,and,that,fallback,translation,should,kick,in,param,task,readable,text,describing,the,task,being,attempted,param,sql,sql,query,or,update,that,caused,the,problem,if,known,param,ex,the,offending,code,sqlexception,return,the,data,access,exception,wrapping,the,code,sqlexception,or,code,null,if,no,exception,match,found;nullable,protected,abstract,data,access,exception,do,translate,string,task,nullable,string,sql,sqlexception,ex
AbstractFallbackSQLExceptionTranslator -> @Nullable 	protected abstract DataAccessException doTranslate(String task, @Nullable String sql, SQLException ex)_;1530174524;Template method for actually translating the given exception._<p>The passed-in arguments will have been pre-checked. Furthermore, this method_is allowed to return {@code null} to indicate that no exception match has_been found and that fallback translation should kick in._@param task readable text describing the task being attempted_@param sql the SQL query or update that caused the problem (if known)_@param ex the offending {@code SQLException}_@return the DataAccessException, wrapping the {@code SQLException}__or {@code null} if no exception match found;@Nullable_	protected abstract DataAccessException doTranslate(String task, @Nullable String sql, SQLException ex)_;template,method,for,actually,translating,the,given,exception,p,the,passed,in,arguments,will,have,been,pre,checked,furthermore,this,method,is,allowed,to,return,code,null,to,indicate,that,no,exception,match,has,been,found,and,that,fallback,translation,should,kick,in,param,task,readable,text,describing,the,task,being,attempted,param,sql,the,sql,query,or,update,that,caused,the,problem,if,known,param,ex,the,offending,code,sqlexception,return,the,data,access,exception,wrapping,the,code,sqlexception,or,code,null,if,no,exception,match,found;nullable,protected,abstract,data,access,exception,do,translate,string,task,nullable,string,sql,sqlexception,ex
AbstractFallbackSQLExceptionTranslator -> @Nullable 	protected abstract DataAccessException doTranslate(String task, @Nullable String sql, SQLException ex)_;1537283867;Template method for actually translating the given exception._<p>The passed-in arguments will have been pre-checked. Furthermore, this method_is allowed to return {@code null} to indicate that no exception match has_been found and that fallback translation should kick in._@param task readable text describing the task being attempted_@param sql the SQL query or update that caused the problem (if known)_@param ex the offending {@code SQLException}_@return the DataAccessException, wrapping the {@code SQLException}__or {@code null} if no exception match found;@Nullable_	protected abstract DataAccessException doTranslate(String task, @Nullable String sql, SQLException ex)_;template,method,for,actually,translating,the,given,exception,p,the,passed,in,arguments,will,have,been,pre,checked,furthermore,this,method,is,allowed,to,return,code,null,to,indicate,that,no,exception,match,has,been,found,and,that,fallback,translation,should,kick,in,param,task,readable,text,describing,the,task,being,attempted,param,sql,the,sql,query,or,update,that,caused,the,problem,if,known,param,ex,the,offending,code,sqlexception,return,the,data,access,exception,wrapping,the,code,sqlexception,or,code,null,if,no,exception,match,found;nullable,protected,abstract,data,access,exception,do,translate,string,task,nullable,string,sql,sqlexception,ex
AbstractFallbackSQLExceptionTranslator -> @Override 	public DataAccessException translate(String task, String sql, SQLException ex);1356735495;Pre-checks the arguments, calls {@link #doTranslate}, and invokes the_{@link #getFallbackTranslator() fallback translator} if necessary.;@Override_	public DataAccessException translate(String task, String sql, SQLException ex) {_		Assert.notNull(ex, "Cannot translate a null SQLException")__		if (task == null) {_			task = ""__		}_		if (sql == null) {_			sql = ""__		}__		DataAccessException dex = doTranslate(task, sql, ex)__		if (dex != null) {_			_			return dex__		}_		_		SQLExceptionTranslator fallback = getFallbackTranslator()__		if (fallback != null) {_			return fallback.translate(task, sql, ex)__		}_		_		return new UncategorizedSQLException(task, sql, ex)__	};pre,checks,the,arguments,calls,link,do,translate,and,invokes,the,link,get,fallback,translator,fallback,translator,if,necessary;override,public,data,access,exception,translate,string,task,string,sql,sqlexception,ex,assert,not,null,ex,cannot,translate,a,null,sqlexception,if,task,null,task,if,sql,null,sql,data,access,exception,dex,do,translate,task,sql,ex,if,dex,null,return,dex,sqlexception,translator,fallback,get,fallback,translator,if,fallback,null,return,fallback,translate,task,sql,ex,return,new,uncategorized,sqlexception,task,sql,ex
AbstractFallbackSQLExceptionTranslator -> @Override 	public DataAccessException translate(String task, String sql, SQLException ex);1368482696;Pre-checks the arguments, calls {@link #doTranslate}, and invokes the_{@link #getFallbackTranslator() fallback translator} if necessary.;@Override_	public DataAccessException translate(String task, String sql, SQLException ex) {_		Assert.notNull(ex, "Cannot translate a null SQLException")__		if (task == null) {_			task = ""__		}_		if (sql == null) {_			sql = ""__		}__		DataAccessException dex = doTranslate(task, sql, ex)__		if (dex != null) {_			_			return dex__		}_		_		SQLExceptionTranslator fallback = getFallbackTranslator()__		if (fallback != null) {_			return fallback.translate(task, sql, ex)__		}_		_		return new UncategorizedSQLException(task, sql, ex)__	};pre,checks,the,arguments,calls,link,do,translate,and,invokes,the,link,get,fallback,translator,fallback,translator,if,necessary;override,public,data,access,exception,translate,string,task,string,sql,sqlexception,ex,assert,not,null,ex,cannot,translate,a,null,sqlexception,if,task,null,task,if,sql,null,sql,data,access,exception,dex,do,translate,task,sql,ex,if,dex,null,return,dex,sqlexception,translator,fallback,get,fallback,translator,if,fallback,null,return,fallback,translate,task,sql,ex,return,new,uncategorized,sqlexception,task,sql,ex
AbstractFallbackSQLExceptionTranslator -> @Override 	public DataAccessException translate(String task, String sql, SQLException ex);1495868221;Pre-checks the arguments, calls {@link #doTranslate}, and invokes the_{@link #getFallbackTranslator() fallback translator} if necessary.;@Override_	public DataAccessException translate(String task, String sql, SQLException ex) {_		Assert.notNull(ex, "Cannot translate a null SQLException")__		if (task == null) {_			task = ""__		}_		if (sql == null) {_			sql = ""__		}__		DataAccessException dex = doTranslate(task, sql, ex)__		if (dex != null) {_			_			return dex__		}_		_		SQLExceptionTranslator fallback = getFallbackTranslator()__		if (fallback != null) {_			return fallback.translate(task, sql, ex)__		}_		_		return new UncategorizedSQLException(task, sql, ex)__	};pre,checks,the,arguments,calls,link,do,translate,and,invokes,the,link,get,fallback,translator,fallback,translator,if,necessary;override,public,data,access,exception,translate,string,task,string,sql,sqlexception,ex,assert,not,null,ex,cannot,translate,a,null,sqlexception,if,task,null,task,if,sql,null,sql,data,access,exception,dex,do,translate,task,sql,ex,if,dex,null,return,dex,sqlexception,translator,fallback,get,fallback,translator,if,fallback,null,return,fallback,translate,task,sql,ex,return,new,uncategorized,sqlexception,task,sql,ex
AbstractFallbackSQLExceptionTranslator -> @Override 	@NonNull 	public DataAccessException translate(String task, @Nullable String sql, SQLException ex);1506097334;Pre-checks the arguments, calls {@link #doTranslate}, and invokes the_{@link #getFallbackTranslator() fallback translator} if necessary.;@Override_	@NonNull_	public DataAccessException translate(String task, @Nullable String sql, SQLException ex) {_		Assert.notNull(ex, "Cannot translate a null SQLException")___		DataAccessException dae = doTranslate(task, sql, ex)__		if (dae != null) {_			_			return dae__		}__		_		SQLExceptionTranslator fallback = getFallbackTranslator()__		if (fallback != null) {_			dae = fallback.translate(task, sql, ex)__			if (dae != null) {_				_				return dae__			}_		}__		_		return new UncategorizedSQLException(task, sql, ex)__	};pre,checks,the,arguments,calls,link,do,translate,and,invokes,the,link,get,fallback,translator,fallback,translator,if,necessary;override,non,null,public,data,access,exception,translate,string,task,nullable,string,sql,sqlexception,ex,assert,not,null,ex,cannot,translate,a,null,sqlexception,data,access,exception,dae,do,translate,task,sql,ex,if,dae,null,return,dae,sqlexception,translator,fallback,get,fallback,translator,if,fallback,null,dae,fallback,translate,task,sql,ex,if,dae,null,return,dae,return,new,uncategorized,sqlexception,task,sql,ex
AbstractFallbackSQLExceptionTranslator -> @Override 	@NonNull 	public DataAccessException translate(String task, @Nullable String sql, SQLException ex);1530174524;Pre-checks the arguments, calls {@link #doTranslate}, and invokes the_{@link #getFallbackTranslator() fallback translator} if necessary.;@Override_	@NonNull_	public DataAccessException translate(String task, @Nullable String sql, SQLException ex) {_		Assert.notNull(ex, "Cannot translate a null SQLException")___		DataAccessException dae = doTranslate(task, sql, ex)__		if (dae != null) {_			_			return dae__		}__		_		SQLExceptionTranslator fallback = getFallbackTranslator()__		if (fallback != null) {_			dae = fallback.translate(task, sql, ex)__			if (dae != null) {_				_				return dae__			}_		}__		_		return new UncategorizedSQLException(task, sql, ex)__	};pre,checks,the,arguments,calls,link,do,translate,and,invokes,the,link,get,fallback,translator,fallback,translator,if,necessary;override,non,null,public,data,access,exception,translate,string,task,nullable,string,sql,sqlexception,ex,assert,not,null,ex,cannot,translate,a,null,sqlexception,data,access,exception,dae,do,translate,task,sql,ex,if,dae,null,return,dae,sqlexception,translator,fallback,get,fallback,translator,if,fallback,null,dae,fallback,translate,task,sql,ex,if,dae,null,return,dae,return,new,uncategorized,sqlexception,task,sql,ex
AbstractFallbackSQLExceptionTranslator -> @Override 	@NonNull 	public DataAccessException translate(String task, @Nullable String sql, SQLException ex);1537283867;Pre-checks the arguments, calls {@link #doTranslate}, and invokes the_{@link #getFallbackTranslator() fallback translator} if necessary.;@Override_	@NonNull_	public DataAccessException translate(String task, @Nullable String sql, SQLException ex) {_		Assert.notNull(ex, "Cannot translate a null SQLException")___		DataAccessException dae = doTranslate(task, sql, ex)__		if (dae != null) {_			_			return dae__		}__		_		SQLExceptionTranslator fallback = getFallbackTranslator()__		if (fallback != null) {_			dae = fallback.translate(task, sql, ex)__			if (dae != null) {_				_				return dae__			}_		}__		_		return new UncategorizedSQLException(task, sql, ex)__	};pre,checks,the,arguments,calls,link,do,translate,and,invokes,the,link,get,fallback,translator,fallback,translator,if,necessary;override,non,null,public,data,access,exception,translate,string,task,nullable,string,sql,sqlexception,ex,assert,not,null,ex,cannot,translate,a,null,sqlexception,data,access,exception,dae,do,translate,task,sql,ex,if,dae,null,return,dae,sqlexception,translator,fallback,get,fallback,translator,if,fallback,null,dae,fallback,translate,task,sql,ex,if,dae,null,return,dae,return,new,uncategorized,sqlexception,task,sql,ex
AbstractFallbackSQLExceptionTranslator -> protected abstract DataAccessException doTranslate(String task, String sql, SQLException ex)_;1328020251;Template method for actually translating the given exception._<p>The passed-in arguments will have been pre-checked. Furthermore, this method_is allowed to return <code>null</code> to indicate that no exception match has_been found and that fallback translation should kick in._@param task readable text describing the task being attempted_@param sql SQL query or update that caused the problem (may be <code>null</code>)_@param ex the offending <code>SQLException</code>_@return the DataAccessException, wrapping the <code>SQLException</code>__or <code>null</code> if no exception match found;protected abstract DataAccessException doTranslate(String task, String sql, SQLException ex)_;template,method,for,actually,translating,the,given,exception,p,the,passed,in,arguments,will,have,been,pre,checked,furthermore,this,method,is,allowed,to,return,code,null,code,to,indicate,that,no,exception,match,has,been,found,and,that,fallback,translation,should,kick,in,param,task,readable,text,describing,the,task,being,attempted,param,sql,sql,query,or,update,that,caused,the,problem,may,be,code,null,code,param,ex,the,offending,code,sqlexception,code,return,the,data,access,exception,wrapping,the,code,sqlexception,code,or,code,null,code,if,no,exception,match,found;protected,abstract,data,access,exception,do,translate,string,task,string,sql,sqlexception,ex
AbstractFallbackSQLExceptionTranslator -> protected abstract DataAccessException doTranslate(String task, String sql, SQLException ex)_;1356735495;Template method for actually translating the given exception._<p>The passed-in arguments will have been pre-checked. Furthermore, this method_is allowed to return {@code null} to indicate that no exception match has_been found and that fallback translation should kick in._@param task readable text describing the task being attempted_@param sql SQL query or update that caused the problem (may be {@code null})_@param ex the offending {@code SQLException}_@return the DataAccessException, wrapping the {@code SQLException}__or {@code null} if no exception match found;protected abstract DataAccessException doTranslate(String task, String sql, SQLException ex)_;template,method,for,actually,translating,the,given,exception,p,the,passed,in,arguments,will,have,been,pre,checked,furthermore,this,method,is,allowed,to,return,code,null,to,indicate,that,no,exception,match,has,been,found,and,that,fallback,translation,should,kick,in,param,task,readable,text,describing,the,task,being,attempted,param,sql,sql,query,or,update,that,caused,the,problem,may,be,code,null,param,ex,the,offending,code,sqlexception,return,the,data,access,exception,wrapping,the,code,sqlexception,or,code,null,if,no,exception,match,found;protected,abstract,data,access,exception,do,translate,string,task,string,sql,sqlexception,ex
AbstractFallbackSQLExceptionTranslator -> protected abstract DataAccessException doTranslate(String task, String sql, SQLException ex)_;1357119239;Template method for actually translating the given exception._<p>The passed-in arguments will have been pre-checked. Furthermore, this method_is allowed to return {@code null} to indicate that no exception match has_been found and that fallback translation should kick in._@param task readable text describing the task being attempted_@param sql SQL query or update that caused the problem (may be {@code null})_@param ex the offending {@code SQLException}_@return the DataAccessException, wrapping the {@code SQLException}__or {@code null} if no exception match found;protected abstract DataAccessException doTranslate(String task, String sql, SQLException ex)_;template,method,for,actually,translating,the,given,exception,p,the,passed,in,arguments,will,have,been,pre,checked,furthermore,this,method,is,allowed,to,return,code,null,to,indicate,that,no,exception,match,has,been,found,and,that,fallback,translation,should,kick,in,param,task,readable,text,describing,the,task,being,attempted,param,sql,sql,query,or,update,that,caused,the,problem,may,be,code,null,param,ex,the,offending,code,sqlexception,return,the,data,access,exception,wrapping,the,code,sqlexception,or,code,null,if,no,exception,match,found;protected,abstract,data,access,exception,do,translate,string,task,string,sql,sqlexception,ex
AbstractFallbackSQLExceptionTranslator -> protected abstract DataAccessException doTranslate(String task, String sql, SQLException ex)_;1368482696;Template method for actually translating the given exception._<p>The passed-in arguments will have been pre-checked. Furthermore, this method_is allowed to return {@code null} to indicate that no exception match has_been found and that fallback translation should kick in._@param task readable text describing the task being attempted_@param sql SQL query or update that caused the problem (may be {@code null})_@param ex the offending {@code SQLException}_@return the DataAccessException, wrapping the {@code SQLException}__or {@code null} if no exception match found;protected abstract DataAccessException doTranslate(String task, String sql, SQLException ex)_;template,method,for,actually,translating,the,given,exception,p,the,passed,in,arguments,will,have,been,pre,checked,furthermore,this,method,is,allowed,to,return,code,null,to,indicate,that,no,exception,match,has,been,found,and,that,fallback,translation,should,kick,in,param,task,readable,text,describing,the,task,being,attempted,param,sql,sql,query,or,update,that,caused,the,problem,may,be,code,null,param,ex,the,offending,code,sqlexception,return,the,data,access,exception,wrapping,the,code,sqlexception,or,code,null,if,no,exception,match,found;protected,abstract,data,access,exception,do,translate,string,task,string,sql,sqlexception,ex
AbstractFallbackSQLExceptionTranslator -> public SQLExceptionTranslator getFallbackTranslator();1328020251;Return the fallback exception translator, if any.;public SQLExceptionTranslator getFallbackTranslator() {_		return this.fallbackTranslator__	};return,the,fallback,exception,translator,if,any;public,sqlexception,translator,get,fallback,translator,return,this,fallback,translator
AbstractFallbackSQLExceptionTranslator -> public SQLExceptionTranslator getFallbackTranslator();1356735495;Return the fallback exception translator, if any.;public SQLExceptionTranslator getFallbackTranslator() {_		return this.fallbackTranslator__	};return,the,fallback,exception,translator,if,any;public,sqlexception,translator,get,fallback,translator,return,this,fallback,translator
AbstractFallbackSQLExceptionTranslator -> public SQLExceptionTranslator getFallbackTranslator();1357119239;Return the fallback exception translator, if any.;public SQLExceptionTranslator getFallbackTranslator() {_		return this.fallbackTranslator__	};return,the,fallback,exception,translator,if,any;public,sqlexception,translator,get,fallback,translator,return,this,fallback,translator
AbstractFallbackSQLExceptionTranslator -> public SQLExceptionTranslator getFallbackTranslator();1368482696;Return the fallback exception translator, if any.;public SQLExceptionTranslator getFallbackTranslator() {_		return this.fallbackTranslator__	};return,the,fallback,exception,translator,if,any;public,sqlexception,translator,get,fallback,translator,return,this,fallback,translator
AbstractFallbackSQLExceptionTranslator -> public void setFallbackTranslator(@Nullable SQLExceptionTranslator fallback);1500448076;Override the default SQL state fallback translator_(typically a {@link SQLStateSQLExceptionTranslator}).;public void setFallbackTranslator(@Nullable SQLExceptionTranslator fallback) {_		this.fallbackTranslator = fallback__	};override,the,default,sql,state,fallback,translator,typically,a,link,sqlstate,sqlexception,translator;public,void,set,fallback,translator,nullable,sqlexception,translator,fallback,this,fallback,translator,fallback
AbstractFallbackSQLExceptionTranslator -> public void setFallbackTranslator(@Nullable SQLExceptionTranslator fallback);1502974979;Override the default SQL state fallback translator_(typically a {@link SQLStateSQLExceptionTranslator}).;public void setFallbackTranslator(@Nullable SQLExceptionTranslator fallback) {_		this.fallbackTranslator = fallback__	};override,the,default,sql,state,fallback,translator,typically,a,link,sqlstate,sqlexception,translator;public,void,set,fallback,translator,nullable,sqlexception,translator,fallback,this,fallback,translator,fallback
AbstractFallbackSQLExceptionTranslator -> public void setFallbackTranslator(@Nullable SQLExceptionTranslator fallback);1506097334;Override the default SQL state fallback translator_(typically a {@link SQLStateSQLExceptionTranslator}).;public void setFallbackTranslator(@Nullable SQLExceptionTranslator fallback) {_		this.fallbackTranslator = fallback__	};override,the,default,sql,state,fallback,translator,typically,a,link,sqlstate,sqlexception,translator;public,void,set,fallback,translator,nullable,sqlexception,translator,fallback,this,fallback,translator,fallback
AbstractFallbackSQLExceptionTranslator -> public void setFallbackTranslator(@Nullable SQLExceptionTranslator fallback);1530174524;Override the default SQL state fallback translator_(typically a {@link SQLStateSQLExceptionTranslator}).;public void setFallbackTranslator(@Nullable SQLExceptionTranslator fallback) {_		this.fallbackTranslator = fallback__	};override,the,default,sql,state,fallback,translator,typically,a,link,sqlstate,sqlexception,translator;public,void,set,fallback,translator,nullable,sqlexception,translator,fallback,this,fallback,translator,fallback
AbstractFallbackSQLExceptionTranslator -> public void setFallbackTranslator(@Nullable SQLExceptionTranslator fallback);1537283867;Override the default SQL state fallback translator_(typically a {@link SQLStateSQLExceptionTranslator}).;public void setFallbackTranslator(@Nullable SQLExceptionTranslator fallback) {_		this.fallbackTranslator = fallback__	};override,the,default,sql,state,fallback,translator,typically,a,link,sqlstate,sqlexception,translator;public,void,set,fallback,translator,nullable,sqlexception,translator,fallback,this,fallback,translator,fallback
