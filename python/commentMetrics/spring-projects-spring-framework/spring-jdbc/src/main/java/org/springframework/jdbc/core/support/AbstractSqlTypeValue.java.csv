commented;modifiers;parameterAmount;loc;comment;code
false;public,final;4;12;;@Override public final void setTypeValue(PreparedStatement ps, int paramIndex, int sqlType, @Nullable String typeName) throws SQLException {     Object value = createTypeValue(ps.getConnection(), sqlType, typeName).     if (sqlType == TYPE_UNKNOWN) {         ps.setObject(paramIndex, value).     } else {         ps.setObject(paramIndex, value, sqlType).     } }
true;protected,abstract;3;2;/**  * Create the type value to be passed into {@code PreparedStatement.setObject}.  * @param con the JDBC Connection, if needed to create any database-specific objects  * @param sqlType the SQL type of the parameter we are setting  * @param typeName the type name of the parameter  * @return the type value  * @throws SQLException if a SQLException is encountered setting  * parameter values (that is, there's no need to catch SQLException)  * @see java.sql.PreparedStatement#setObject(int, Object, int)  */ ;/**  * Create the type value to be passed into {@code PreparedStatement.setObject}.  * @param con the JDBC Connection, if needed to create any database-specific objects  * @param sqlType the SQL type of the parameter we are setting  * @param typeName the type name of the parameter  * @return the type value  * @throws SQLException if a SQLException is encountered setting  * parameter values (that is, there's no need to catch SQLException)  * @see java.sql.PreparedStatement#setObject(int, Object, int)  */ protected abstract Object createTypeValue(Connection con, int sqlType, @Nullable String typeName) throws SQLException.
