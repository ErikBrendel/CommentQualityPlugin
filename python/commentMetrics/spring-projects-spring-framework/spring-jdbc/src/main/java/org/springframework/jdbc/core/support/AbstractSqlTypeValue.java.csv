# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractSqlTypeValue -> protected abstract Object createTypeValue(Connection con, int sqlType, String typeName) throws SQLException_;1328020251;Create the type value to be passed into <code>PreparedStatement.setObject</code>._@param con the JDBC Connection, if needed to create any database-specific objects_@param sqlType SQL type of the parameter we are setting_@param typeName the type name of the parameter_@return the type value_@throws SQLException if a SQLException is encountered setting_parameter values (that is, there's no need to catch SQLException)_@see java.sql.PreparedStatement#setObject(int, Object, int);protected abstract Object createTypeValue(Connection con, int sqlType, String typeName) throws SQLException_;create,the,type,value,to,be,passed,into,code,prepared,statement,set,object,code,param,con,the,jdbc,connection,if,needed,to,create,any,database,specific,objects,param,sql,type,sql,type,of,the,parameter,we,are,setting,param,type,name,the,type,name,of,the,parameter,return,the,type,value,throws,sqlexception,if,a,sqlexception,is,encountered,setting,parameter,values,that,is,there,s,no,need,to,catch,sqlexception,see,java,sql,prepared,statement,set,object,int,object,int;protected,abstract,object,create,type,value,connection,con,int,sql,type,string,type,name,throws,sqlexception
AbstractSqlTypeValue -> protected abstract Object createTypeValue(Connection con, int sqlType, String typeName) throws SQLException_;1356735495;Create the type value to be passed into {@code PreparedStatement.setObject}._@param con the JDBC Connection, if needed to create any database-specific objects_@param sqlType SQL type of the parameter we are setting_@param typeName the type name of the parameter_@return the type value_@throws SQLException if a SQLException is encountered setting_parameter values (that is, there's no need to catch SQLException)_@see java.sql.PreparedStatement#setObject(int, Object, int);protected abstract Object createTypeValue(Connection con, int sqlType, String typeName) throws SQLException_;create,the,type,value,to,be,passed,into,code,prepared,statement,set,object,param,con,the,jdbc,connection,if,needed,to,create,any,database,specific,objects,param,sql,type,sql,type,of,the,parameter,we,are,setting,param,type,name,the,type,name,of,the,parameter,return,the,type,value,throws,sqlexception,if,a,sqlexception,is,encountered,setting,parameter,values,that,is,there,s,no,need,to,catch,sqlexception,see,java,sql,prepared,statement,set,object,int,object,int;protected,abstract,object,create,type,value,connection,con,int,sql,type,string,type,name,throws,sqlexception
AbstractSqlTypeValue -> protected abstract Object createTypeValue(Connection con, int sqlType, String typeName) throws SQLException_;1357119239;Create the type value to be passed into {@code PreparedStatement.setObject}._@param con the JDBC Connection, if needed to create any database-specific objects_@param sqlType SQL type of the parameter we are setting_@param typeName the type name of the parameter_@return the type value_@throws SQLException if a SQLException is encountered setting_parameter values (that is, there's no need to catch SQLException)_@see java.sql.PreparedStatement#setObject(int, Object, int);protected abstract Object createTypeValue(Connection con, int sqlType, String typeName) throws SQLException_;create,the,type,value,to,be,passed,into,code,prepared,statement,set,object,param,con,the,jdbc,connection,if,needed,to,create,any,database,specific,objects,param,sql,type,sql,type,of,the,parameter,we,are,setting,param,type,name,the,type,name,of,the,parameter,return,the,type,value,throws,sqlexception,if,a,sqlexception,is,encountered,setting,parameter,values,that,is,there,s,no,need,to,catch,sqlexception,see,java,sql,prepared,statement,set,object,int,object,int;protected,abstract,object,create,type,value,connection,con,int,sql,type,string,type,name,throws,sqlexception
AbstractSqlTypeValue -> protected abstract Object createTypeValue(Connection con, int sqlType, String typeName) throws SQLException_;1368482696;Create the type value to be passed into {@code PreparedStatement.setObject}._@param con the JDBC Connection, if needed to create any database-specific objects_@param sqlType SQL type of the parameter we are setting_@param typeName the type name of the parameter_@return the type value_@throws SQLException if a SQLException is encountered setting_parameter values (that is, there's no need to catch SQLException)_@see java.sql.PreparedStatement#setObject(int, Object, int);protected abstract Object createTypeValue(Connection con, int sqlType, String typeName) throws SQLException_;create,the,type,value,to,be,passed,into,code,prepared,statement,set,object,param,con,the,jdbc,connection,if,needed,to,create,any,database,specific,objects,param,sql,type,sql,type,of,the,parameter,we,are,setting,param,type,name,the,type,name,of,the,parameter,return,the,type,value,throws,sqlexception,if,a,sqlexception,is,encountered,setting,parameter,values,that,is,there,s,no,need,to,catch,sqlexception,see,java,sql,prepared,statement,set,object,int,object,int;protected,abstract,object,create,type,value,connection,con,int,sql,type,string,type,name,throws,sqlexception
AbstractSqlTypeValue -> protected abstract Object createTypeValue(Connection con, int sqlType, @Nullable String typeName) 			throws SQLException_;1496837955;Create the type value to be passed into {@code PreparedStatement.setObject}._@param con the JDBC Connection, if needed to create any database-specific objects_@param sqlType SQL type of the parameter we are setting_@param typeName the type name of the parameter_@return the type value_@throws SQLException if a SQLException is encountered setting_parameter values (that is, there's no need to catch SQLException)_@see java.sql.PreparedStatement#setObject(int, Object, int);protected abstract Object createTypeValue(Connection con, int sqlType, @Nullable String typeName)_			throws SQLException_;create,the,type,value,to,be,passed,into,code,prepared,statement,set,object,param,con,the,jdbc,connection,if,needed,to,create,any,database,specific,objects,param,sql,type,sql,type,of,the,parameter,we,are,setting,param,type,name,the,type,name,of,the,parameter,return,the,type,value,throws,sqlexception,if,a,sqlexception,is,encountered,setting,parameter,values,that,is,there,s,no,need,to,catch,sqlexception,see,java,sql,prepared,statement,set,object,int,object,int;protected,abstract,object,create,type,value,connection,con,int,sql,type,nullable,string,type,name,throws,sqlexception
AbstractSqlTypeValue -> protected abstract Object createTypeValue(Connection con, int sqlType, @Nullable String typeName) 			throws SQLException_;1530174524;Create the type value to be passed into {@code PreparedStatement.setObject}._@param con the JDBC Connection, if needed to create any database-specific objects_@param sqlType the SQL type of the parameter we are setting_@param typeName the type name of the parameter_@return the type value_@throws SQLException if a SQLException is encountered setting_parameter values (that is, there's no need to catch SQLException)_@see java.sql.PreparedStatement#setObject(int, Object, int);protected abstract Object createTypeValue(Connection con, int sqlType, @Nullable String typeName)_			throws SQLException_;create,the,type,value,to,be,passed,into,code,prepared,statement,set,object,param,con,the,jdbc,connection,if,needed,to,create,any,database,specific,objects,param,sql,type,the,sql,type,of,the,parameter,we,are,setting,param,type,name,the,type,name,of,the,parameter,return,the,type,value,throws,sqlexception,if,a,sqlexception,is,encountered,setting,parameter,values,that,is,there,s,no,need,to,catch,sqlexception,see,java,sql,prepared,statement,set,object,int,object,int;protected,abstract,object,create,type,value,connection,con,int,sql,type,nullable,string,type,name,throws,sqlexception
