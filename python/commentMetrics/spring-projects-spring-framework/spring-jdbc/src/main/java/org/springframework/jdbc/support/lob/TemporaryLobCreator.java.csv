commented;modifiers;parameterAmount;loc;comment;code
false;public;3;19;;@Override public void setBlobAsBytes(PreparedStatement ps, int paramIndex, @Nullable byte[] content) throws SQLException {     if (content != null) {         Blob blob = ps.getConnection().createBlob().         blob.setBytes(1, content).         this.temporaryBlobs.add(blob).         ps.setBlob(paramIndex, blob).     } else {         ps.setBlob(paramIndex, (Blob) null).     }     if (logger.isDebugEnabled()) {         logger.debug(content != null ? "Copied bytes into temporary BLOB with length " + content.length : "Set BLOB to null").     } }
false;public;4;26;;@Override public void setBlobAsBinaryStream(PreparedStatement ps, int paramIndex, @Nullable InputStream binaryStream, int contentLength) throws SQLException {     if (binaryStream != null) {         Blob blob = ps.getConnection().createBlob().         try {             FileCopyUtils.copy(binaryStream, blob.setBinaryStream(1)).         } catch (IOException ex) {             throw new DataAccessResourceFailureException("Could not copy into LOB stream", ex).         }         this.temporaryBlobs.add(blob).         ps.setBlob(paramIndex, blob).     } else {         ps.setBlob(paramIndex, (Blob) null).     }     if (logger.isDebugEnabled()) {         logger.debug(binaryStream != null ? "Copied binary stream into temporary BLOB with length " + contentLength : "Set BLOB to null").     } }
false;public;3;19;;@Override public void setClobAsString(PreparedStatement ps, int paramIndex, @Nullable String content) throws SQLException {     if (content != null) {         Clob clob = ps.getConnection().createClob().         clob.setString(1, content).         this.temporaryClobs.add(clob).         ps.setClob(paramIndex, clob).     } else {         ps.setClob(paramIndex, (Clob) null).     }     if (logger.isDebugEnabled()) {         logger.debug(content != null ? "Copied string into temporary CLOB with length " + content.length() : "Set CLOB to null").     } }
false;public;4;26;;@Override public void setClobAsAsciiStream(PreparedStatement ps, int paramIndex, @Nullable InputStream asciiStream, int contentLength) throws SQLException {     if (asciiStream != null) {         Clob clob = ps.getConnection().createClob().         try {             FileCopyUtils.copy(asciiStream, clob.setAsciiStream(1)).         } catch (IOException ex) {             throw new DataAccessResourceFailureException("Could not copy into LOB stream", ex).         }         this.temporaryClobs.add(clob).         ps.setClob(paramIndex, clob).     } else {         ps.setClob(paramIndex, (Clob) null).     }     if (logger.isDebugEnabled()) {         logger.debug(asciiStream != null ? "Copied ASCII stream into temporary CLOB with length " + contentLength : "Set CLOB to null").     } }
false;public;4;26;;@Override public void setClobAsCharacterStream(PreparedStatement ps, int paramIndex, @Nullable Reader characterStream, int contentLength) throws SQLException {     if (characterStream != null) {         Clob clob = ps.getConnection().createClob().         try {             FileCopyUtils.copy(characterStream, clob.setCharacterStream(1)).         } catch (IOException ex) {             throw new DataAccessResourceFailureException("Could not copy into LOB stream", ex).         }         this.temporaryClobs.add(clob).         ps.setClob(paramIndex, clob).     } else {         ps.setClob(paramIndex, (Clob) null).     }     if (logger.isDebugEnabled()) {         logger.debug(characterStream != null ? "Copied character stream into temporary CLOB with length " + contentLength : "Set CLOB to null").     } }
false;public;0;19;;@Override public void close() {     for (Blob blob : this.temporaryBlobs) {         try {             blob.free().         } catch (SQLException ex) {             logger.warn("Could not free BLOB", ex).         }     }     for (Clob clob : this.temporaryClobs) {         try {             clob.free().         } catch (SQLException ex) {             logger.warn("Could not free CLOB", ex).         }     } }
