# id;timestamp;commentText;codeText;commentWords;codeWords
UpdatableSqlQuery -> protected abstract T updateRow(ResultSet rs, int rowNum, Map context) throws SQLException_;1328020251;Subclasses must implement this method to update each row of the_ResultSet and optionally create object of the result type._@param rs ResultSet we're working through_@param rowNum row number (from 0) we're up to_@param context passed to the execute() method._It can be <code>null</code> if no contextual information is need.  If you_need to pass in data for each row, you can pass in a HashMap with_the primary key of the row being the key for the HashMap.  That way_it is easy to locate the updates for each row_@return an object of the result type_@throws SQLException if there's an error updateing data._Subclasses can simply not catch SQLExceptions, relying on the_framework to clean up.;protected abstract T updateRow(ResultSet rs, int rowNum, Map context) throws SQLException_;subclasses,must,implement,this,method,to,update,each,row,of,the,result,set,and,optionally,create,object,of,the,result,type,param,rs,result,set,we,re,working,through,param,row,num,row,number,from,0,we,re,up,to,param,context,passed,to,the,execute,method,it,can,be,code,null,code,if,no,contextual,information,is,need,if,you,need,to,pass,in,data,for,each,row,you,can,pass,in,a,hash,map,with,the,primary,key,of,the,row,being,the,key,for,the,hash,map,that,way,it,is,easy,to,locate,the,updates,for,each,row,return,an,object,of,the,result,type,throws,sqlexception,if,there,s,an,error,updateing,data,subclasses,can,simply,not,catch,sqlexceptions,relying,on,the,framework,to,clean,up;protected,abstract,t,update,row,result,set,rs,int,row,num,map,context,throws,sqlexception
UpdatableSqlQuery -> protected abstract T updateRow(ResultSet rs, int rowNum, Map context) throws SQLException_;1356735495;Subclasses must implement this method to update each row of the_ResultSet and optionally create object of the result type._@param rs ResultSet we're working through_@param rowNum row number (from 0) we're up to_@param context passed to the execute() method._It can be {@code null} if no contextual information is need.  If you_need to pass in data for each row, you can pass in a HashMap with_the primary key of the row being the key for the HashMap.  That way_it is easy to locate the updates for each row_@return an object of the result type_@throws SQLException if there's an error updateing data._Subclasses can simply not catch SQLExceptions, relying on the_framework to clean up.;protected abstract T updateRow(ResultSet rs, int rowNum, Map context) throws SQLException_;subclasses,must,implement,this,method,to,update,each,row,of,the,result,set,and,optionally,create,object,of,the,result,type,param,rs,result,set,we,re,working,through,param,row,num,row,number,from,0,we,re,up,to,param,context,passed,to,the,execute,method,it,can,be,code,null,if,no,contextual,information,is,need,if,you,need,to,pass,in,data,for,each,row,you,can,pass,in,a,hash,map,with,the,primary,key,of,the,row,being,the,key,for,the,hash,map,that,way,it,is,easy,to,locate,the,updates,for,each,row,return,an,object,of,the,result,type,throws,sqlexception,if,there,s,an,error,updateing,data,subclasses,can,simply,not,catch,sqlexceptions,relying,on,the,framework,to,clean,up;protected,abstract,t,update,row,result,set,rs,int,row,num,map,context,throws,sqlexception
UpdatableSqlQuery -> protected abstract T updateRow(ResultSet rs, int rowNum, Map context) throws SQLException_;1357119239;Subclasses must implement this method to update each row of the_ResultSet and optionally create object of the result type._@param rs ResultSet we're working through_@param rowNum row number (from 0) we're up to_@param context passed to the execute() method._It can be {@code null} if no contextual information is need.  If you_need to pass in data for each row, you can pass in a HashMap with_the primary key of the row being the key for the HashMap.  That way_it is easy to locate the updates for each row_@return an object of the result type_@throws SQLException if there's an error updateing data._Subclasses can simply not catch SQLExceptions, relying on the_framework to clean up.;protected abstract T updateRow(ResultSet rs, int rowNum, Map context) throws SQLException_;subclasses,must,implement,this,method,to,update,each,row,of,the,result,set,and,optionally,create,object,of,the,result,type,param,rs,result,set,we,re,working,through,param,row,num,row,number,from,0,we,re,up,to,param,context,passed,to,the,execute,method,it,can,be,code,null,if,no,contextual,information,is,need,if,you,need,to,pass,in,data,for,each,row,you,can,pass,in,a,hash,map,with,the,primary,key,of,the,row,being,the,key,for,the,hash,map,that,way,it,is,easy,to,locate,the,updates,for,each,row,return,an,object,of,the,result,type,throws,sqlexception,if,there,s,an,error,updateing,data,subclasses,can,simply,not,catch,sqlexceptions,relying,on,the,framework,to,clean,up;protected,abstract,t,update,row,result,set,rs,int,row,num,map,context,throws,sqlexception
UpdatableSqlQuery -> protected abstract T updateRow(ResultSet rs, int rowNum, Map context) throws SQLException_;1368482696;Subclasses must implement this method to update each row of the_ResultSet and optionally create object of the result type._@param rs ResultSet we're working through_@param rowNum row number (from 0) we're up to_@param context passed to the execute() method._It can be {@code null} if no contextual information is need.  If you_need to pass in data for each row, you can pass in a HashMap with_the primary key of the row being the key for the HashMap.  That way_it is easy to locate the updates for each row_@return an object of the result type_@throws SQLException if there's an error updateing data._Subclasses can simply not catch SQLExceptions, relying on the_framework to clean up.;protected abstract T updateRow(ResultSet rs, int rowNum, Map context) throws SQLException_;subclasses,must,implement,this,method,to,update,each,row,of,the,result,set,and,optionally,create,object,of,the,result,type,param,rs,result,set,we,re,working,through,param,row,num,row,number,from,0,we,re,up,to,param,context,passed,to,the,execute,method,it,can,be,code,null,if,no,contextual,information,is,need,if,you,need,to,pass,in,data,for,each,row,you,can,pass,in,a,hash,map,with,the,primary,key,of,the,row,being,the,key,for,the,hash,map,that,way,it,is,easy,to,locate,the,updates,for,each,row,return,an,object,of,the,result,type,throws,sqlexception,if,there,s,an,error,updateing,data,subclasses,can,simply,not,catch,sqlexceptions,relying,on,the,framework,to,clean,up;protected,abstract,t,update,row,result,set,rs,int,row,num,map,context,throws,sqlexception
UpdatableSqlQuery -> @Override 	protected RowMapper<T> newRowMapper(Object[] parameters, Map<?, ?> context);1385412762;Implementation of the superclass template method. This invokes the subclass's_implementation of the {@code updateRow()} method.;@Override_	protected RowMapper<T> newRowMapper(Object[] parameters, Map<?, ?> context) {_		return new RowMapperImpl(context)__	};implementation,of,the,superclass,template,method,this,invokes,the,subclass,s,implementation,of,the,code,update,row,method;override,protected,row,mapper,t,new,row,mapper,object,parameters,map,context,return,new,row,mapper,impl,context
UpdatableSqlQuery -> @Override 	protected RowMapper<T> newRowMapper(Object[] parameters, Map<?, ?> context);1413848647;Implementation of the superclass template method. This invokes the subclass's_implementation of the {@code updateRow()} method.;@Override_	protected RowMapper<T> newRowMapper(Object[] parameters, Map<?, ?> context) {_		return new RowMapperImpl(context)__	};implementation,of,the,superclass,template,method,this,invokes,the,subclass,s,implementation,of,the,code,update,row,method;override,protected,row,mapper,t,new,row,mapper,object,parameters,map,context,return,new,row,mapper,impl,context
UpdatableSqlQuery -> @Override 	protected RowMapper<T> newRowMapper(Object[] parameters, Map<?, ?> context);1495868221;Implementation of the superclass template method. This invokes the subclass's_implementation of the {@code updateRow()} method.;@Override_	protected RowMapper<T> newRowMapper(Object[] parameters, Map<?, ?> context) {_		return new RowMapperImpl(context)__	};implementation,of,the,superclass,template,method,this,invokes,the,subclass,s,implementation,of,the,code,update,row,method;override,protected,row,mapper,t,new,row,mapper,object,parameters,map,context,return,new,row,mapper,impl,context
UpdatableSqlQuery -> protected abstract T updateRow(ResultSet rs, int rowNum, Map<?, ?> context) throws SQLException_;1385412762;Subclasses must implement this method to update each row of the_ResultSet and optionally create object of the result type._@param rs ResultSet we're working through_@param rowNum row number (from 0) we're up to_@param context passed to the execute() method._It can be {@code null} if no contextual information is need.  If you_need to pass in data for each row, you can pass in a HashMap with_the primary key of the row being the key for the HashMap.  That way_it is easy to locate the updates for each row_@return an object of the result type_@throws SQLException if there's an error updateing data._Subclasses can simply not catch SQLExceptions, relying on the_framework to clean up.;protected abstract T updateRow(ResultSet rs, int rowNum, Map<?, ?> context) throws SQLException_;subclasses,must,implement,this,method,to,update,each,row,of,the,result,set,and,optionally,create,object,of,the,result,type,param,rs,result,set,we,re,working,through,param,row,num,row,number,from,0,we,re,up,to,param,context,passed,to,the,execute,method,it,can,be,code,null,if,no,contextual,information,is,need,if,you,need,to,pass,in,data,for,each,row,you,can,pass,in,a,hash,map,with,the,primary,key,of,the,row,being,the,key,for,the,hash,map,that,way,it,is,easy,to,locate,the,updates,for,each,row,return,an,object,of,the,result,type,throws,sqlexception,if,there,s,an,error,updateing,data,subclasses,can,simply,not,catch,sqlexceptions,relying,on,the,framework,to,clean,up;protected,abstract,t,update,row,result,set,rs,int,row,num,map,context,throws,sqlexception
UpdatableSqlQuery -> protected abstract T updateRow(ResultSet rs, int rowNum, Map<?, ?> context) throws SQLException_;1413848647;Subclasses must implement this method to update each row of the_ResultSet and optionally create object of the result type._@param rs ResultSet we're working through_@param rowNum row number (from 0) we're up to_@param context passed to the execute() method._It can be {@code null} if no contextual information is need.  If you_need to pass in data for each row, you can pass in a HashMap with_the primary key of the row being the key for the HashMap.  That way_it is easy to locate the updates for each row_@return an object of the result type_@throws SQLException if there's an error updateing data._Subclasses can simply not catch SQLExceptions, relying on the_framework to clean up.;protected abstract T updateRow(ResultSet rs, int rowNum, Map<?, ?> context) throws SQLException_;subclasses,must,implement,this,method,to,update,each,row,of,the,result,set,and,optionally,create,object,of,the,result,type,param,rs,result,set,we,re,working,through,param,row,num,row,number,from,0,we,re,up,to,param,context,passed,to,the,execute,method,it,can,be,code,null,if,no,contextual,information,is,need,if,you,need,to,pass,in,data,for,each,row,you,can,pass,in,a,hash,map,with,the,primary,key,of,the,row,being,the,key,for,the,hash,map,that,way,it,is,easy,to,locate,the,updates,for,each,row,return,an,object,of,the,result,type,throws,sqlexception,if,there,s,an,error,updateing,data,subclasses,can,simply,not,catch,sqlexceptions,relying,on,the,framework,to,clean,up;protected,abstract,t,update,row,result,set,rs,int,row,num,map,context,throws,sqlexception
UpdatableSqlQuery -> @Override 	protected RowMapper<T> newRowMapper(Object[] parameters, Map context);1328020251;Implementation of the superclass template method. This invokes the subclass's_implementation of the <code>updateRow()</code> method.;@Override_	protected RowMapper<T> newRowMapper(Object[] parameters, Map context) {_		return new RowMapperImpl(context)__	};implementation,of,the,superclass,template,method,this,invokes,the,subclass,s,implementation,of,the,code,update,row,code,method;override,protected,row,mapper,t,new,row,mapper,object,parameters,map,context,return,new,row,mapper,impl,context
UpdatableSqlQuery -> @Override 	protected RowMapper<T> newRowMapper(Object[] parameters, Map context);1356735495;Implementation of the superclass template method. This invokes the subclass's_implementation of the {@code updateRow()} method.;@Override_	protected RowMapper<T> newRowMapper(Object[] parameters, Map context) {_		return new RowMapperImpl(context)__	};implementation,of,the,superclass,template,method,this,invokes,the,subclass,s,implementation,of,the,code,update,row,method;override,protected,row,mapper,t,new,row,mapper,object,parameters,map,context,return,new,row,mapper,impl,context
UpdatableSqlQuery -> @Override 	protected RowMapper<T> newRowMapper(Object[] parameters, Map context);1357119239;Implementation of the superclass template method. This invokes the subclass's_implementation of the {@code updateRow()} method.;@Override_	protected RowMapper<T> newRowMapper(Object[] parameters, Map context) {_		return new RowMapperImpl(context)__	};implementation,of,the,superclass,template,method,this,invokes,the,subclass,s,implementation,of,the,code,update,row,method;override,protected,row,mapper,t,new,row,mapper,object,parameters,map,context,return,new,row,mapper,impl,context
UpdatableSqlQuery -> @Override 	protected RowMapper<T> newRowMapper(Object[] parameters, Map context);1368482696;Implementation of the superclass template method. This invokes the subclass's_implementation of the {@code updateRow()} method.;@Override_	protected RowMapper<T> newRowMapper(Object[] parameters, Map context) {_		return new RowMapperImpl(context)__	};implementation,of,the,superclass,template,method,this,invokes,the,subclass,s,implementation,of,the,code,update,row,method;override,protected,row,mapper,t,new,row,mapper,object,parameters,map,context,return,new,row,mapper,impl,context
UpdatableSqlQuery -> protected abstract T updateRow(ResultSet rs, int rowNum, @Nullable Map<?, ?> context) throws SQLException_;1495868221;Subclasses must implement this method to update each row of the_ResultSet and optionally create object of the result type._@param rs ResultSet we're working through_@param rowNum row number (from 0) we're up to_@param context passed to the execute() method._It can be {@code null} if no contextual information is need.  If you_need to pass in data for each row, you can pass in a HashMap with_the primary key of the row being the key for the HashMap.  That way_it is easy to locate the updates for each row_@return an object of the result type_@throws SQLException if there's an error updateing data._Subclasses can simply not catch SQLExceptions, relying on the_framework to clean up.;protected abstract T updateRow(ResultSet rs, int rowNum, @Nullable Map<?, ?> context) throws SQLException_;subclasses,must,implement,this,method,to,update,each,row,of,the,result,set,and,optionally,create,object,of,the,result,type,param,rs,result,set,we,re,working,through,param,row,num,row,number,from,0,we,re,up,to,param,context,passed,to,the,execute,method,it,can,be,code,null,if,no,contextual,information,is,need,if,you,need,to,pass,in,data,for,each,row,you,can,pass,in,a,hash,map,with,the,primary,key,of,the,row,being,the,key,for,the,hash,map,that,way,it,is,easy,to,locate,the,updates,for,each,row,return,an,object,of,the,result,type,throws,sqlexception,if,there,s,an,error,updateing,data,subclasses,can,simply,not,catch,sqlexceptions,relying,on,the,framework,to,clean,up;protected,abstract,t,update,row,result,set,rs,int,row,num,nullable,map,context,throws,sqlexception
UpdatableSqlQuery -> protected abstract T updateRow(ResultSet rs, int rowNum, @Nullable Map<?, ?> context) throws SQLException_;1496242568;Subclasses must implement this method to update each row of the_ResultSet and optionally create object of the result type._@param rs ResultSet we're working through_@param rowNum row number (from 0) we're up to_@param context passed to the execute() method._It can be {@code null} if no contextual information is need.  If you_need to pass in data for each row, you can pass in a HashMap with_the primary key of the row being the key for the HashMap.  That way_it is easy to locate the updates for each row_@return an object of the result type_@throws SQLException if there's an error updateing data._Subclasses can simply not catch SQLExceptions, relying on the_framework to clean up.;protected abstract T updateRow(ResultSet rs, int rowNum, @Nullable Map<?, ?> context) throws SQLException_;subclasses,must,implement,this,method,to,update,each,row,of,the,result,set,and,optionally,create,object,of,the,result,type,param,rs,result,set,we,re,working,through,param,row,num,row,number,from,0,we,re,up,to,param,context,passed,to,the,execute,method,it,can,be,code,null,if,no,contextual,information,is,need,if,you,need,to,pass,in,data,for,each,row,you,can,pass,in,a,hash,map,with,the,primary,key,of,the,row,being,the,key,for,the,hash,map,that,way,it,is,easy,to,locate,the,updates,for,each,row,return,an,object,of,the,result,type,throws,sqlexception,if,there,s,an,error,updateing,data,subclasses,can,simply,not,catch,sqlexceptions,relying,on,the,framework,to,clean,up;protected,abstract,t,update,row,result,set,rs,int,row,num,nullable,map,context,throws,sqlexception
UpdatableSqlQuery -> protected abstract T updateRow(ResultSet rs, int rowNum, @Nullable Map<?, ?> context) throws SQLException_;1496837955;Subclasses must implement this method to update each row of the_ResultSet and optionally create object of the result type._@param rs ResultSet we're working through_@param rowNum row number (from 0) we're up to_@param context passed to the execute() method._It can be {@code null} if no contextual information is need.  If you_need to pass in data for each row, you can pass in a HashMap with_the primary key of the row being the key for the HashMap.  That way_it is easy to locate the updates for each row_@return an object of the result type_@throws SQLException if there's an error updateing data._Subclasses can simply not catch SQLExceptions, relying on the_framework to clean up.;protected abstract T updateRow(ResultSet rs, int rowNum, @Nullable Map<?, ?> context) throws SQLException_;subclasses,must,implement,this,method,to,update,each,row,of,the,result,set,and,optionally,create,object,of,the,result,type,param,rs,result,set,we,re,working,through,param,row,num,row,number,from,0,we,re,up,to,param,context,passed,to,the,execute,method,it,can,be,code,null,if,no,contextual,information,is,need,if,you,need,to,pass,in,data,for,each,row,you,can,pass,in,a,hash,map,with,the,primary,key,of,the,row,being,the,key,for,the,hash,map,that,way,it,is,easy,to,locate,the,updates,for,each,row,return,an,object,of,the,result,type,throws,sqlexception,if,there,s,an,error,updateing,data,subclasses,can,simply,not,catch,sqlexceptions,relying,on,the,framework,to,clean,up;protected,abstract,t,update,row,result,set,rs,int,row,num,nullable,map,context,throws,sqlexception
UpdatableSqlQuery -> protected abstract T updateRow(ResultSet rs, int rowNum, @Nullable Map<?, ?> context) throws SQLException_;1498780456;Subclasses must implement this method to update each row of the_ResultSet and optionally create object of the result type._@param rs ResultSet we're working through_@param rowNum row number (from 0) we're up to_@param context passed to the execute() method._It can be {@code null} if no contextual information is need.  If you_need to pass in data for each row, you can pass in a HashMap with_the primary key of the row being the key for the HashMap.  That way_it is easy to locate the updates for each row_@return an object of the result type_@throws SQLException if there's an error updateing data._Subclasses can simply not catch SQLExceptions, relying on the_framework to clean up.;protected abstract T updateRow(ResultSet rs, int rowNum, @Nullable Map<?, ?> context) throws SQLException_;subclasses,must,implement,this,method,to,update,each,row,of,the,result,set,and,optionally,create,object,of,the,result,type,param,rs,result,set,we,re,working,through,param,row,num,row,number,from,0,we,re,up,to,param,context,passed,to,the,execute,method,it,can,be,code,null,if,no,contextual,information,is,need,if,you,need,to,pass,in,data,for,each,row,you,can,pass,in,a,hash,map,with,the,primary,key,of,the,row,being,the,key,for,the,hash,map,that,way,it,is,easy,to,locate,the,updates,for,each,row,return,an,object,of,the,result,type,throws,sqlexception,if,there,s,an,error,updateing,data,subclasses,can,simply,not,catch,sqlexceptions,relying,on,the,framework,to,clean,up;protected,abstract,t,update,row,result,set,rs,int,row,num,nullable,map,context,throws,sqlexception
UpdatableSqlQuery -> protected abstract T updateRow(ResultSet rs, int rowNum, @Nullable Map<?, ?> context) throws SQLException_;1530174524;Subclasses must implement this method to update each row of the_ResultSet and optionally create object of the result type._@param rs the ResultSet we're working through_@param rowNum row number (from 0) we're up to_@param context passed to the execute() method._It can be {@code null} if no contextual information is need.  If you_need to pass in data for each row, you can pass in a HashMap with_the primary key of the row being the key for the HashMap.  That way_it is easy to locate the updates for each row_@return an object of the result type_@throws SQLException if there's an error updateing data._Subclasses can simply not catch SQLExceptions, relying on the_framework to clean up.;protected abstract T updateRow(ResultSet rs, int rowNum, @Nullable Map<?, ?> context) throws SQLException_;subclasses,must,implement,this,method,to,update,each,row,of,the,result,set,and,optionally,create,object,of,the,result,type,param,rs,the,result,set,we,re,working,through,param,row,num,row,number,from,0,we,re,up,to,param,context,passed,to,the,execute,method,it,can,be,code,null,if,no,contextual,information,is,need,if,you,need,to,pass,in,data,for,each,row,you,can,pass,in,a,hash,map,with,the,primary,key,of,the,row,being,the,key,for,the,hash,map,that,way,it,is,easy,to,locate,the,updates,for,each,row,return,an,object,of,the,result,type,throws,sqlexception,if,there,s,an,error,updateing,data,subclasses,can,simply,not,catch,sqlexceptions,relying,on,the,framework,to,clean,up;protected,abstract,t,update,row,result,set,rs,int,row,num,nullable,map,context,throws,sqlexception
UpdatableSqlQuery -> public UpdatableSqlQuery(DataSource ds, String sql);1328020251;Convenient constructor with DataSource and SQL string._@param ds DataSource to use to get connections_@param sql SQL to run;public UpdatableSqlQuery(DataSource ds, String sql) {_		super(ds, sql)__		setUpdatableResults(true)__	};convenient,constructor,with,data,source,and,sql,string,param,ds,data,source,to,use,to,get,connections,param,sql,sql,to,run;public,updatable,sql,query,data,source,ds,string,sql,super,ds,sql,set,updatable,results,true
UpdatableSqlQuery -> public UpdatableSqlQuery(DataSource ds, String sql);1356735495;Convenient constructor with DataSource and SQL string._@param ds DataSource to use to get connections_@param sql SQL to run;public UpdatableSqlQuery(DataSource ds, String sql) {_		super(ds, sql)__		setUpdatableResults(true)__	};convenient,constructor,with,data,source,and,sql,string,param,ds,data,source,to,use,to,get,connections,param,sql,sql,to,run;public,updatable,sql,query,data,source,ds,string,sql,super,ds,sql,set,updatable,results,true
UpdatableSqlQuery -> public UpdatableSqlQuery(DataSource ds, String sql);1357119239;Convenient constructor with DataSource and SQL string._@param ds DataSource to use to get connections_@param sql SQL to run;public UpdatableSqlQuery(DataSource ds, String sql) {_		super(ds, sql)__		setUpdatableResults(true)__	};convenient,constructor,with,data,source,and,sql,string,param,ds,data,source,to,use,to,get,connections,param,sql,sql,to,run;public,updatable,sql,query,data,source,ds,string,sql,super,ds,sql,set,updatable,results,true
UpdatableSqlQuery -> public UpdatableSqlQuery(DataSource ds, String sql);1368482696;Convenient constructor with DataSource and SQL string._@param ds DataSource to use to get connections_@param sql SQL to run;public UpdatableSqlQuery(DataSource ds, String sql) {_		super(ds, sql)__		setUpdatableResults(true)__	};convenient,constructor,with,data,source,and,sql,string,param,ds,data,source,to,use,to,get,connections,param,sql,sql,to,run;public,updatable,sql,query,data,source,ds,string,sql,super,ds,sql,set,updatable,results,true
UpdatableSqlQuery -> public UpdatableSqlQuery(DataSource ds, String sql);1385412762;Convenient constructor with DataSource and SQL string._@param ds DataSource to use to get connections_@param sql SQL to run;public UpdatableSqlQuery(DataSource ds, String sql) {_		super(ds, sql)__		setUpdatableResults(true)__	};convenient,constructor,with,data,source,and,sql,string,param,ds,data,source,to,use,to,get,connections,param,sql,sql,to,run;public,updatable,sql,query,data,source,ds,string,sql,super,ds,sql,set,updatable,results,true
UpdatableSqlQuery -> public UpdatableSqlQuery(DataSource ds, String sql);1413848647;Convenient constructor with DataSource and SQL string._@param ds DataSource to use to get connections_@param sql SQL to run;public UpdatableSqlQuery(DataSource ds, String sql) {_		super(ds, sql)__		setUpdatableResults(true)__	};convenient,constructor,with,data,source,and,sql,string,param,ds,data,source,to,use,to,get,connections,param,sql,sql,to,run;public,updatable,sql,query,data,source,ds,string,sql,super,ds,sql,set,updatable,results,true
UpdatableSqlQuery -> public UpdatableSqlQuery(DataSource ds, String sql);1495868221;Convenient constructor with DataSource and SQL string._@param ds DataSource to use to get connections_@param sql SQL to run;public UpdatableSqlQuery(DataSource ds, String sql) {_		super(ds, sql)__		setUpdatableResults(true)__	};convenient,constructor,with,data,source,and,sql,string,param,ds,data,source,to,use,to,get,connections,param,sql,sql,to,run;public,updatable,sql,query,data,source,ds,string,sql,super,ds,sql,set,updatable,results,true
UpdatableSqlQuery -> public UpdatableSqlQuery(DataSource ds, String sql);1496242568;Convenient constructor with DataSource and SQL string._@param ds DataSource to use to get connections_@param sql SQL to run;public UpdatableSqlQuery(DataSource ds, String sql) {_		super(ds, sql)__		setUpdatableResults(true)__	};convenient,constructor,with,data,source,and,sql,string,param,ds,data,source,to,use,to,get,connections,param,sql,sql,to,run;public,updatable,sql,query,data,source,ds,string,sql,super,ds,sql,set,updatable,results,true
UpdatableSqlQuery -> public UpdatableSqlQuery(DataSource ds, String sql);1496837955;Convenient constructor with DataSource and SQL string._@param ds DataSource to use to get connections_@param sql SQL to run;public UpdatableSqlQuery(DataSource ds, String sql) {_		super(ds, sql)__		setUpdatableResults(true)__	};convenient,constructor,with,data,source,and,sql,string,param,ds,data,source,to,use,to,get,connections,param,sql,sql,to,run;public,updatable,sql,query,data,source,ds,string,sql,super,ds,sql,set,updatable,results,true
UpdatableSqlQuery -> public UpdatableSqlQuery(DataSource ds, String sql);1498780456;Convenient constructor with DataSource and SQL string._@param ds DataSource to use to get connections_@param sql SQL to run;public UpdatableSqlQuery(DataSource ds, String sql) {_		super(ds, sql)__		setUpdatableResults(true)__	};convenient,constructor,with,data,source,and,sql,string,param,ds,data,source,to,use,to,get,connections,param,sql,sql,to,run;public,updatable,sql,query,data,source,ds,string,sql,super,ds,sql,set,updatable,results,true
UpdatableSqlQuery -> public UpdatableSqlQuery(DataSource ds, String sql);1530174524;Convenient constructor with DataSource and SQL string._@param ds the DataSource to use to get connections_@param sql the SQL to run;public UpdatableSqlQuery(DataSource ds, String sql) {_		super(ds, sql)__		setUpdatableResults(true)__	};convenient,constructor,with,data,source,and,sql,string,param,ds,the,data,source,to,use,to,get,connections,param,sql,the,sql,to,run;public,updatable,sql,query,data,source,ds,string,sql,super,ds,sql,set,updatable,results,true
UpdatableSqlQuery -> @Override 	protected RowMapper<T> newRowMapper(@Nullable Object[] parameters, @Nullable Map<?, ?> context);1496837955;Implementation of the superclass template method. This invokes the subclass's_implementation of the {@code updateRow()} method.;@Override_	protected RowMapper<T> newRowMapper(@Nullable Object[] parameters, @Nullable Map<?, ?> context) {_		return new RowMapperImpl(context)__	};implementation,of,the,superclass,template,method,this,invokes,the,subclass,s,implementation,of,the,code,update,row,method;override,protected,row,mapper,t,new,row,mapper,nullable,object,parameters,nullable,map,context,return,new,row,mapper,impl,context
UpdatableSqlQuery -> @Override 	protected RowMapper<T> newRowMapper(@Nullable Object[] parameters, @Nullable Map<?, ?> context);1498780456;Implementation of the superclass template method. This invokes the subclass's_implementation of the {@code updateRow()} method.;@Override_	protected RowMapper<T> newRowMapper(@Nullable Object[] parameters, @Nullable Map<?, ?> context) {_		return new RowMapperImpl(context)__	};implementation,of,the,superclass,template,method,this,invokes,the,subclass,s,implementation,of,the,code,update,row,method;override,protected,row,mapper,t,new,row,mapper,nullable,object,parameters,nullable,map,context,return,new,row,mapper,impl,context
UpdatableSqlQuery -> @Override 	protected RowMapper<T> newRowMapper(@Nullable Object[] parameters, @Nullable Map<?, ?> context);1530174524;Implementation of the superclass template method. This invokes the subclass's_implementation of the {@code updateRow()} method.;@Override_	protected RowMapper<T> newRowMapper(@Nullable Object[] parameters, @Nullable Map<?, ?> context) {_		return new RowMapperImpl(context)__	};implementation,of,the,superclass,template,method,this,invokes,the,subclass,s,implementation,of,the,code,update,row,method;override,protected,row,mapper,t,new,row,mapper,nullable,object,parameters,nullable,map,context,return,new,row,mapper,impl,context
UpdatableSqlQuery -> public UpdatableSqlQuery();1328020251;Constructor to allow use as a JavaBean;public UpdatableSqlQuery() {_		setUpdatableResults(true)__	};constructor,to,allow,use,as,a,java,bean;public,updatable,sql,query,set,updatable,results,true
UpdatableSqlQuery -> public UpdatableSqlQuery();1356735495;Constructor to allow use as a JavaBean;public UpdatableSqlQuery() {_		setUpdatableResults(true)__	};constructor,to,allow,use,as,a,java,bean;public,updatable,sql,query,set,updatable,results,true
UpdatableSqlQuery -> public UpdatableSqlQuery();1357119239;Constructor to allow use as a JavaBean;public UpdatableSqlQuery() {_		setUpdatableResults(true)__	};constructor,to,allow,use,as,a,java,bean;public,updatable,sql,query,set,updatable,results,true
UpdatableSqlQuery -> public UpdatableSqlQuery();1368482696;Constructor to allow use as a JavaBean;public UpdatableSqlQuery() {_		setUpdatableResults(true)__	};constructor,to,allow,use,as,a,java,bean;public,updatable,sql,query,set,updatable,results,true
UpdatableSqlQuery -> public UpdatableSqlQuery();1385412762;Constructor to allow use as a JavaBean;public UpdatableSqlQuery() {_		setUpdatableResults(true)__	};constructor,to,allow,use,as,a,java,bean;public,updatable,sql,query,set,updatable,results,true
UpdatableSqlQuery -> public UpdatableSqlQuery();1413848647;Constructor to allow use as a JavaBean;public UpdatableSqlQuery() {_		setUpdatableResults(true)__	};constructor,to,allow,use,as,a,java,bean;public,updatable,sql,query,set,updatable,results,true
UpdatableSqlQuery -> public UpdatableSqlQuery();1495868221;Constructor to allow use as a JavaBean;public UpdatableSqlQuery() {_		setUpdatableResults(true)__	};constructor,to,allow,use,as,a,java,bean;public,updatable,sql,query,set,updatable,results,true
UpdatableSqlQuery -> public UpdatableSqlQuery();1496242568;Constructor to allow use as a JavaBean;public UpdatableSqlQuery() {_		setUpdatableResults(true)__	};constructor,to,allow,use,as,a,java,bean;public,updatable,sql,query,set,updatable,results,true
UpdatableSqlQuery -> public UpdatableSqlQuery();1496837955;Constructor to allow use as a JavaBean;public UpdatableSqlQuery() {_		setUpdatableResults(true)__	};constructor,to,allow,use,as,a,java,bean;public,updatable,sql,query,set,updatable,results,true
UpdatableSqlQuery -> public UpdatableSqlQuery();1498780456;Constructor to allow use as a JavaBean;public UpdatableSqlQuery() {_		setUpdatableResults(true)__	};constructor,to,allow,use,as,a,java,bean;public,updatable,sql,query,set,updatable,results,true
UpdatableSqlQuery -> public UpdatableSqlQuery();1530174524;Constructor to allow use as a JavaBean.;public UpdatableSqlQuery() {_		setUpdatableResults(true)__	};constructor,to,allow,use,as,a,java,bean;public,updatable,sql,query,set,updatable,results,true
