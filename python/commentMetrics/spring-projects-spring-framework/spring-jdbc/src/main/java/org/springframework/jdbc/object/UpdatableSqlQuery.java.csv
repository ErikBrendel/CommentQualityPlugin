commented;modifiers;parameterAmount;loc;comment;code
true;protected;2;4;/**  * Implementation of the superclass template method. This invokes the subclass's  * implementation of the {@code updateRow()} method.  */ ;/**  * Implementation of the superclass template method. This invokes the subclass's  * implementation of the {@code updateRow()} method.  */ @Override protected RowMapper<T> newRowMapper(@Nullable Object[] parameters, @Nullable Map<?, ?> context) {     return new RowMapperImpl(context). }
true;protected,abstract;3;1;/**  * Subclasses must implement this method to update each row of the  * ResultSet and optionally create object of the result type.  * @param rs the ResultSet we're working through  * @param rowNum row number (from 0) we're up to  * @param context passed to the execute() method.  * It can be {@code null} if no contextual information is need.  If you  * need to pass in data for each row, you can pass in a HashMap with  * the primary key of the row being the key for the HashMap.  That way  * it is easy to locate the updates for each row  * @return an object of the result type  * @throws SQLException if there's an error updateing data.  * Subclasses can simply not catch SQLExceptions, relying on the  * framework to clean up.  */ ;/**  * Subclasses must implement this method to update each row of the  * ResultSet and optionally create object of the result type.  * @param rs the ResultSet we're working through  * @param rowNum row number (from 0) we're up to  * @param context passed to the execute() method.  * It can be {@code null} if no contextual information is need.  If you  * need to pass in data for each row, you can pass in a HashMap with  * the primary key of the row being the key for the HashMap.  That way  * it is easy to locate the updates for each row  * @return an object of the result type  * @throws SQLException if there's an error updateing data.  * Subclasses can simply not catch SQLExceptions, relying on the  * framework to clean up.  */ protected abstract T updateRow(ResultSet rs, int rowNum, @Nullable Map<?, ?> context) throws SQLException.
false;public;2;6;;@Override public T mapRow(ResultSet rs, int rowNum) throws SQLException {     T result = updateRow(rs, rowNum, this.context).     rs.updateRow().     return result. }
