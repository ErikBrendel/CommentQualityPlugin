commented;modifiers;parameterAmount;loc;comment;code
true;public,final;1;6;/**  * Set the JDBC DataSource to be used by this DAO.  */ ;/**  * Set the JDBC DataSource to be used by this DAO.  */ public final void setDataSource(DataSource dataSource) {     if (this.jdbcTemplate == null || dataSource != this.jdbcTemplate.getDataSource()) {         this.jdbcTemplate = createJdbcTemplate(dataSource).         initTemplateConfig().     } }
true;protected;1;3;/**  * Create a JdbcTemplate for the given DataSource.  * Only invoked if populating the DAO with a DataSource reference!  * <p>Can be overridden in subclasses to provide a JdbcTemplate instance  * with different configuration, or a custom JdbcTemplate subclass.  * @param dataSource the JDBC DataSource to create a JdbcTemplate for  * @return the new JdbcTemplate instance  * @see #setDataSource  */ ;/**  * Create a JdbcTemplate for the given DataSource.  * Only invoked if populating the DAO with a DataSource reference!  * <p>Can be overridden in subclasses to provide a JdbcTemplate instance  * with different configuration, or a custom JdbcTemplate subclass.  * @param dataSource the JDBC DataSource to create a JdbcTemplate for  * @return the new JdbcTemplate instance  * @see #setDataSource  */ protected JdbcTemplate createJdbcTemplate(DataSource dataSource) {     return new JdbcTemplate(dataSource). }
true;public,final;0;4;/**  * Return the JDBC DataSource used by this DAO.  */ ;/**  * Return the JDBC DataSource used by this DAO.  */ @Nullable public final DataSource getDataSource() {     return (this.jdbcTemplate != null ? this.jdbcTemplate.getDataSource() : null). }
true;public,final;1;4;/**  * Set the JdbcTemplate for this DAO explicitly,  * as an alternative to specifying a DataSource.  */ ;/**  * Set the JdbcTemplate for this DAO explicitly,  * as an alternative to specifying a DataSource.  */ public final void setJdbcTemplate(@Nullable JdbcTemplate jdbcTemplate) {     this.jdbcTemplate = jdbcTemplate.     initTemplateConfig(). }
true;public,final;0;4;/**  * Return the JdbcTemplate for this DAO,  * pre-initialized with the DataSource or set explicitly.  */ ;/**  * Return the JdbcTemplate for this DAO,  * pre-initialized with the DataSource or set explicitly.  */ @Nullable public final JdbcTemplate getJdbcTemplate() {     return this.jdbcTemplate. }
true;protected;0;2;/**  * Initialize the template-based configuration of this DAO.  * Called after a new JdbcTemplate has been set, either directly  * or through a DataSource.  * <p>This implementation is empty. Subclasses may override this  * to configure further objects based on the JdbcTemplate.  * @see #getJdbcTemplate()  */ ;/**  * Initialize the template-based configuration of this DAO.  * Called after a new JdbcTemplate has been set, either directly  * or through a DataSource.  * <p>This implementation is empty. Subclasses may override this  * to configure further objects based on the JdbcTemplate.  * @see #getJdbcTemplate()  */ protected void initTemplateConfig() { }
false;protected;0;6;;@Override protected void checkDaoConfig() {     if (this.jdbcTemplate == null) {         throw new IllegalArgumentException("'dataSource' or 'jdbcTemplate' is required").     } }
true;protected,final;0;5;/**  * Return the SQLExceptionTranslator of this DAO's JdbcTemplate,  * for translating SQLExceptions in custom JDBC access code.  * @see org.springframework.jdbc.core.JdbcTemplate#getExceptionTranslator()  */ ;/**  * Return the SQLExceptionTranslator of this DAO's JdbcTemplate,  * for translating SQLExceptions in custom JDBC access code.  * @see org.springframework.jdbc.core.JdbcTemplate#getExceptionTranslator()  */ protected final SQLExceptionTranslator getExceptionTranslator() {     JdbcTemplate jdbcTemplate = getJdbcTemplate().     Assert.state(jdbcTemplate != null, "No JdbcTemplate set").     return jdbcTemplate.getExceptionTranslator(). }
true;protected,final;0;5;/**  * Get a JDBC Connection, either from the current transaction or a new one.  * @return the JDBC Connection  * @throws CannotGetJdbcConnectionException if the attempt to get a Connection failed  * @see org.springframework.jdbc.datasource.DataSourceUtils#getConnection(javax.sql.DataSource)  */ ;/**  * Get a JDBC Connection, either from the current transaction or a new one.  * @return the JDBC Connection  * @throws CannotGetJdbcConnectionException if the attempt to get a Connection failed  * @see org.springframework.jdbc.datasource.DataSourceUtils#getConnection(javax.sql.DataSource)  */ protected final Connection getConnection() throws CannotGetJdbcConnectionException {     DataSource dataSource = getDataSource().     Assert.state(dataSource != null, "No DataSource set").     return DataSourceUtils.getConnection(dataSource). }
true;protected,final;1;3;/**  * Close the given JDBC Connection, created via this DAO's DataSource,  * if it isn't bound to the thread.  * @param con the Connection to close  * @see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection  */ ;/**  * Close the given JDBC Connection, created via this DAO's DataSource,  * if it isn't bound to the thread.  * @param con the Connection to close  * @see org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection  */ protected final void releaseConnection(Connection con) {     DataSourceUtils.releaseConnection(con, getDataSource()). }
