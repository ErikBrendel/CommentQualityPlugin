# id;timestamp;commentText;codeText;commentWords;codeWords
ArgumentTypePreparedStatementSetter -> public ArgumentTypePreparedStatementSetter(Object[] args, int[] argTypes);1365871149;Create a new ArgTypePreparedStatementSetter for the given arguments._@param args the arguments to set_@param argTypes the corresponding SQL types of the arguments;public ArgumentTypePreparedStatementSetter(Object[] args, int[] argTypes) {_		if ((args != null && argTypes == null) || (args == null && argTypes != null) ||_				(args != null && args.length != argTypes.length)) {_			throw new InvalidDataAccessApiUsageException("args and argTypes parameters must match")__		}_		this.args = args__		this.argTypes = argTypes__	};create,a,new,arg,type,prepared,statement,setter,for,the,given,arguments,param,args,the,arguments,to,set,param,arg,types,the,corresponding,sql,types,of,the,arguments;public,argument,type,prepared,statement,setter,object,args,int,arg,types,if,args,null,arg,types,null,args,null,arg,types,null,args,null,args,length,arg,types,length,throw,new,invalid,data,access,api,usage,exception,args,and,arg,types,parameters,must,match,this,args,args,this,arg,types,arg,types
ArgumentTypePreparedStatementSetter -> public ArgumentTypePreparedStatementSetter(Object[] args, int[] argTypes);1368482696;Create a new ArgTypePreparedStatementSetter for the given arguments._@param args the arguments to set_@param argTypes the corresponding SQL types of the arguments;public ArgumentTypePreparedStatementSetter(Object[] args, int[] argTypes) {_		if ((args != null && argTypes == null) || (args == null && argTypes != null) ||_				(args != null && args.length != argTypes.length)) {_			throw new InvalidDataAccessApiUsageException("args and argTypes parameters must match")__		}_		this.args = args__		this.argTypes = argTypes__	};create,a,new,arg,type,prepared,statement,setter,for,the,given,arguments,param,args,the,arguments,to,set,param,arg,types,the,corresponding,sql,types,of,the,arguments;public,argument,type,prepared,statement,setter,object,args,int,arg,types,if,args,null,arg,types,null,args,null,arg,types,null,args,null,args,length,arg,types,length,throw,new,invalid,data,access,api,usage,exception,args,and,arg,types,parameters,must,match,this,args,args,this,arg,types,arg,types
ArgumentTypePreparedStatementSetter -> public ArgumentTypePreparedStatementSetter(Object[] args, int[] argTypes);1385412762;Create a new ArgTypePreparedStatementSetter for the given arguments._@param args the arguments to set_@param argTypes the corresponding SQL types of the arguments;public ArgumentTypePreparedStatementSetter(Object[] args, int[] argTypes) {_		if ((args != null && argTypes == null) || (args == null && argTypes != null) ||_				(args != null && args.length != argTypes.length)) {_			throw new InvalidDataAccessApiUsageException("args and argTypes parameters must match")__		}_		this.args = args__		this.argTypes = argTypes__	};create,a,new,arg,type,prepared,statement,setter,for,the,given,arguments,param,args,the,arguments,to,set,param,arg,types,the,corresponding,sql,types,of,the,arguments;public,argument,type,prepared,statement,setter,object,args,int,arg,types,if,args,null,arg,types,null,args,null,arg,types,null,args,null,args,length,arg,types,length,throw,new,invalid,data,access,api,usage,exception,args,and,arg,types,parameters,must,match,this,args,args,this,arg,types,arg,types
ArgumentTypePreparedStatementSetter -> protected void doSetValue(PreparedStatement ps, int parameterPosition, int argType, Object argValue) 			throws SQLException;1365871149;Set the value for the prepared statement's specified parameter position using the passed in_value and type. This method can be overridden by sub-classes if needed._@param ps the PreparedStatement_@param parameterPosition index of the parameter position_@param argType the argument type_@param argValue the argument value_@throws SQLException;protected void doSetValue(PreparedStatement ps, int parameterPosition, int argType, Object argValue)_			throws SQLException {__		StatementCreatorUtils.setParameterValue(ps, parameterPosition, argType, argValue)__	};set,the,value,for,the,prepared,statement,s,specified,parameter,position,using,the,passed,in,value,and,type,this,method,can,be,overridden,by,sub,classes,if,needed,param,ps,the,prepared,statement,param,parameter,position,index,of,the,parameter,position,param,arg,type,the,argument,type,param,arg,value,the,argument,value,throws,sqlexception;protected,void,do,set,value,prepared,statement,ps,int,parameter,position,int,arg,type,object,arg,value,throws,sqlexception,statement,creator,utils,set,parameter,value,ps,parameter,position,arg,type,arg,value
ArgumentTypePreparedStatementSetter -> protected void doSetValue(PreparedStatement ps, int parameterPosition, int argType, Object argValue) 			throws SQLException;1368482696;Set the value for the prepared statement's specified parameter position using the passed in_value and type. This method can be overridden by sub-classes if needed._@param ps the PreparedStatement_@param parameterPosition index of the parameter position_@param argType the argument type_@param argValue the argument value_@throws SQLException;protected void doSetValue(PreparedStatement ps, int parameterPosition, int argType, Object argValue)_			throws SQLException {__		StatementCreatorUtils.setParameterValue(ps, parameterPosition, argType, argValue)__	};set,the,value,for,the,prepared,statement,s,specified,parameter,position,using,the,passed,in,value,and,type,this,method,can,be,overridden,by,sub,classes,if,needed,param,ps,the,prepared,statement,param,parameter,position,index,of,the,parameter,position,param,arg,type,the,argument,type,param,arg,value,the,argument,value,throws,sqlexception;protected,void,do,set,value,prepared,statement,ps,int,parameter,position,int,arg,type,object,arg,value,throws,sqlexception,statement,creator,utils,set,parameter,value,ps,parameter,position,arg,type,arg,value
ArgumentTypePreparedStatementSetter -> protected void doSetValue(PreparedStatement ps, int parameterPosition, int argType, Object argValue) 			throws SQLException;1385412762;Set the value for the prepared statement's specified parameter position using the passed in_value and type. This method can be overridden by sub-classes if needed._@param ps the PreparedStatement_@param parameterPosition index of the parameter position_@param argType the argument type_@param argValue the argument value_@throws SQLException;protected void doSetValue(PreparedStatement ps, int parameterPosition, int argType, Object argValue)_			throws SQLException {__		StatementCreatorUtils.setParameterValue(ps, parameterPosition, argType, argValue)__	};set,the,value,for,the,prepared,statement,s,specified,parameter,position,using,the,passed,in,value,and,type,this,method,can,be,overridden,by,sub,classes,if,needed,param,ps,the,prepared,statement,param,parameter,position,index,of,the,parameter,position,param,arg,type,the,argument,type,param,arg,value,the,argument,value,throws,sqlexception;protected,void,do,set,value,prepared,statement,ps,int,parameter,position,int,arg,type,object,arg,value,throws,sqlexception,statement,creator,utils,set,parameter,value,ps,parameter,position,arg,type,arg,value
ArgumentTypePreparedStatementSetter -> protected void doSetValue(PreparedStatement ps, int parameterPosition, int argType, Object argValue) 			throws SQLException;1496837955;Set the value for the prepared statement's specified parameter position using the passed in_value and type. This method can be overridden by sub-classes if needed._@param ps the PreparedStatement_@param parameterPosition index of the parameter position_@param argType the argument type_@param argValue the argument value_@throws SQLException;protected void doSetValue(PreparedStatement ps, int parameterPosition, int argType, Object argValue)_			throws SQLException {__		StatementCreatorUtils.setParameterValue(ps, parameterPosition, argType, argValue)__	};set,the,value,for,the,prepared,statement,s,specified,parameter,position,using,the,passed,in,value,and,type,this,method,can,be,overridden,by,sub,classes,if,needed,param,ps,the,prepared,statement,param,parameter,position,index,of,the,parameter,position,param,arg,type,the,argument,type,param,arg,value,the,argument,value,throws,sqlexception;protected,void,do,set,value,prepared,statement,ps,int,parameter,position,int,arg,type,object,arg,value,throws,sqlexception,statement,creator,utils,set,parameter,value,ps,parameter,position,arg,type,arg,value
ArgumentTypePreparedStatementSetter -> protected void doSetValue(PreparedStatement ps, int parameterPosition, int argType, Object argValue) 			throws SQLException;1498780456;Set the value for the prepared statement's specified parameter position using the passed in_value and type. This method can be overridden by sub-classes if needed._@param ps the PreparedStatement_@param parameterPosition index of the parameter position_@param argType the argument type_@param argValue the argument value_@throws SQLException;protected void doSetValue(PreparedStatement ps, int parameterPosition, int argType, Object argValue)_			throws SQLException {__		StatementCreatorUtils.setParameterValue(ps, parameterPosition, argType, argValue)__	};set,the,value,for,the,prepared,statement,s,specified,parameter,position,using,the,passed,in,value,and,type,this,method,can,be,overridden,by,sub,classes,if,needed,param,ps,the,prepared,statement,param,parameter,position,index,of,the,parameter,position,param,arg,type,the,argument,type,param,arg,value,the,argument,value,throws,sqlexception;protected,void,do,set,value,prepared,statement,ps,int,parameter,position,int,arg,type,object,arg,value,throws,sqlexception,statement,creator,utils,set,parameter,value,ps,parameter,position,arg,type,arg,value
ArgumentTypePreparedStatementSetter -> protected void doSetValue(PreparedStatement ps, int parameterPosition, int argType, Object argValue) 			throws SQLException;1516617801;Set the value for the prepared statement's specified parameter position using the passed in_value and type. This method can be overridden by sub-classes if needed._@param ps the PreparedStatement_@param parameterPosition index of the parameter position_@param argType the argument type_@param argValue the argument value_@throws SQLException if thrown by PreparedStatement methods;protected void doSetValue(PreparedStatement ps, int parameterPosition, int argType, Object argValue)_			throws SQLException {__		StatementCreatorUtils.setParameterValue(ps, parameterPosition, argType, argValue)__	};set,the,value,for,the,prepared,statement,s,specified,parameter,position,using,the,passed,in,value,and,type,this,method,can,be,overridden,by,sub,classes,if,needed,param,ps,the,prepared,statement,param,parameter,position,index,of,the,parameter,position,param,arg,type,the,argument,type,param,arg,value,the,argument,value,throws,sqlexception,if,thrown,by,prepared,statement,methods;protected,void,do,set,value,prepared,statement,ps,int,parameter,position,int,arg,type,object,arg,value,throws,sqlexception,statement,creator,utils,set,parameter,value,ps,parameter,position,arg,type,arg,value
ArgumentTypePreparedStatementSetter -> public ArgumentTypePreparedStatementSetter(@Nullable Object[] args, @Nullable int[] argTypes);1496837955;Create a new ArgTypePreparedStatementSetter for the given arguments._@param args the arguments to set_@param argTypes the corresponding SQL types of the arguments;public ArgumentTypePreparedStatementSetter(@Nullable Object[] args, @Nullable int[] argTypes) {_		if ((args != null && argTypes == null) || (args == null && argTypes != null) ||_				(args != null && args.length != argTypes.length)) {_			throw new InvalidDataAccessApiUsageException("args and argTypes parameters must match")__		}_		this.args = args__		this.argTypes = argTypes__	};create,a,new,arg,type,prepared,statement,setter,for,the,given,arguments,param,args,the,arguments,to,set,param,arg,types,the,corresponding,sql,types,of,the,arguments;public,argument,type,prepared,statement,setter,nullable,object,args,nullable,int,arg,types,if,args,null,arg,types,null,args,null,arg,types,null,args,null,args,length,arg,types,length,throw,new,invalid,data,access,api,usage,exception,args,and,arg,types,parameters,must,match,this,args,args,this,arg,types,arg,types
ArgumentTypePreparedStatementSetter -> public ArgumentTypePreparedStatementSetter(@Nullable Object[] args, @Nullable int[] argTypes);1498780456;Create a new ArgTypePreparedStatementSetter for the given arguments._@param args the arguments to set_@param argTypes the corresponding SQL types of the arguments;public ArgumentTypePreparedStatementSetter(@Nullable Object[] args, @Nullable int[] argTypes) {_		if ((args != null && argTypes == null) || (args == null && argTypes != null) ||_				(args != null && args.length != argTypes.length)) {_			throw new InvalidDataAccessApiUsageException("args and argTypes parameters must match")__		}_		this.args = args__		this.argTypes = argTypes__	};create,a,new,arg,type,prepared,statement,setter,for,the,given,arguments,param,args,the,arguments,to,set,param,arg,types,the,corresponding,sql,types,of,the,arguments;public,argument,type,prepared,statement,setter,nullable,object,args,nullable,int,arg,types,if,args,null,arg,types,null,args,null,arg,types,null,args,null,args,length,arg,types,length,throw,new,invalid,data,access,api,usage,exception,args,and,arg,types,parameters,must,match,this,args,args,this,arg,types,arg,types
ArgumentTypePreparedStatementSetter -> public ArgumentTypePreparedStatementSetter(@Nullable Object[] args, @Nullable int[] argTypes);1516617801;Create a new ArgTypePreparedStatementSetter for the given arguments._@param args the arguments to set_@param argTypes the corresponding SQL types of the arguments;public ArgumentTypePreparedStatementSetter(@Nullable Object[] args, @Nullable int[] argTypes) {_		if ((args != null && argTypes == null) || (args == null && argTypes != null) ||_				(args != null && args.length != argTypes.length)) {_			throw new InvalidDataAccessApiUsageException("args and argTypes parameters must match")__		}_		this.args = args__		this.argTypes = argTypes__	};create,a,new,arg,type,prepared,statement,setter,for,the,given,arguments,param,args,the,arguments,to,set,param,arg,types,the,corresponding,sql,types,of,the,arguments;public,argument,type,prepared,statement,setter,nullable,object,args,nullable,int,arg,types,if,args,null,arg,types,null,args,null,arg,types,null,args,null,args,length,arg,types,length,throw,new,invalid,data,access,api,usage,exception,args,and,arg,types,parameters,must,match,this,args,args,this,arg,types,arg,types
