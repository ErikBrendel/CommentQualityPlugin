commented;modifiers;parameterAmount;loc;comment;code
true;public;0;4;/**  * Returns 0, indicating the default system timeout is to be used.  */ ;/**  * Returns 0, indicating the default system timeout is to be used.  */ @Override public int getLoginTimeout() throws SQLException {     return 0. }
true;public;1;4;/**  * Setting a login timeout is not supported.  */ ;/**  * Setting a login timeout is not supported.  */ @Override public void setLoginTimeout(int timeout) throws SQLException {     throw new UnsupportedOperationException("setLoginTimeout"). }
true;public;0;4;/**  * LogWriter methods are not supported.  */ ;/**  * LogWriter methods are not supported.  */ @Override public PrintWriter getLogWriter() {     throw new UnsupportedOperationException("getLogWriter"). }
true;public;1;4;/**  * LogWriter methods are not supported.  */ ;/**  * LogWriter methods are not supported.  */ @Override public void setLogWriter(PrintWriter pw) throws SQLException {     throw new UnsupportedOperationException("setLogWriter"). }
false;public;1;9;;// --------------------------------------------------------------------- // Implementation of JDBC 4.0's Wrapper interface // --------------------------------------------------------------------- @Override @SuppressWarnings("unchecked") public <T> T unwrap(Class<T> iface) throws SQLException {     if (iface.isInstance(this)) {         return (T) this.     }     throw new SQLException("DataSource of type [" + getClass().getName() + "] cannot be unwrapped as [" + iface.getName() + "]"). }
false;public;1;4;;@Override public boolean isWrapperFor(Class<?> iface) throws SQLException {     return iface.isInstance(this). }
false;public;0;4;;// --------------------------------------------------------------------- // Implementation of JDBC 4.1's getParentLogger method // --------------------------------------------------------------------- @Override public Logger getParentLogger() {     return Logger.getLogger(Logger.GLOBAL_LOGGER_NAME). }
