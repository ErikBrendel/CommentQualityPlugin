commented;modifiers;parameterAmount;loc;comment;code
true;;3;2;/**  * Set the given content as bytes on the given statement, using the given  * parameter index. Might simply invoke {@code PreparedStatement.setBytes}  * or create a Blob instance for it, depending on the database and driver.  * @param ps the PreparedStatement to the set the content on  * @param paramIndex the parameter index to use  * @param content the content as byte array, or {@code null} for SQL NULL  * @throws SQLException if thrown by JDBC methods  * @see java.sql.PreparedStatement#setBytes  */ ;/**  * Set the given content as bytes on the given statement, using the given  * parameter index. Might simply invoke {@code PreparedStatement.setBytes}  * or create a Blob instance for it, depending on the database and driver.  * @param ps the PreparedStatement to the set the content on  * @param paramIndex the parameter index to use  * @param content the content as byte array, or {@code null} for SQL NULL  * @throws SQLException if thrown by JDBC methods  * @see java.sql.PreparedStatement#setBytes  */ void setBlobAsBytes(PreparedStatement ps, int paramIndex, @Nullable byte[] content) throws SQLException.
true;;4;3;/**  * Set the given content as binary stream on the given statement, using the given  * parameter index. Might simply invoke {@code PreparedStatement.setBinaryStream}  * or create a Blob instance for it, depending on the database and driver.  * @param ps the PreparedStatement to the set the content on  * @param paramIndex the parameter index to use  * @param contentStream the content as binary stream, or {@code null} for SQL NULL  * @throws SQLException if thrown by JDBC methods  * @see java.sql.PreparedStatement#setBinaryStream  */ ;/**  * Set the given content as binary stream on the given statement, using the given  * parameter index. Might simply invoke {@code PreparedStatement.setBinaryStream}  * or create a Blob instance for it, depending on the database and driver.  * @param ps the PreparedStatement to the set the content on  * @param paramIndex the parameter index to use  * @param contentStream the content as binary stream, or {@code null} for SQL NULL  * @throws SQLException if thrown by JDBC methods  * @see java.sql.PreparedStatement#setBinaryStream  */ void setBlobAsBinaryStream(PreparedStatement ps, int paramIndex, @Nullable InputStream contentStream, int contentLength) throws SQLException.
true;;3;2;/**  * Set the given content as String on the given statement, using the given  * parameter index. Might simply invoke {@code PreparedStatement.setString}  * or create a Clob instance for it, depending on the database and driver.  * @param ps the PreparedStatement to the set the content on  * @param paramIndex the parameter index to use  * @param content the content as String, or {@code null} for SQL NULL  * @throws SQLException if thrown by JDBC methods  * @see java.sql.PreparedStatement#setBytes  */ ;/**  * Set the given content as String on the given statement, using the given  * parameter index. Might simply invoke {@code PreparedStatement.setString}  * or create a Clob instance for it, depending on the database and driver.  * @param ps the PreparedStatement to the set the content on  * @param paramIndex the parameter index to use  * @param content the content as String, or {@code null} for SQL NULL  * @throws SQLException if thrown by JDBC methods  * @see java.sql.PreparedStatement#setBytes  */ void setClobAsString(PreparedStatement ps, int paramIndex, @Nullable String content) throws SQLException.
true;;4;3;/**  * Set the given content as ASCII stream on the given statement, using the given  * parameter index. Might simply invoke {@code PreparedStatement.setAsciiStream}  * or create a Clob instance for it, depending on the database and driver.  * @param ps the PreparedStatement to the set the content on  * @param paramIndex the parameter index to use  * @param asciiStream the content as ASCII stream, or {@code null} for SQL NULL  * @throws SQLException if thrown by JDBC methods  * @see java.sql.PreparedStatement#setAsciiStream  */ ;/**  * Set the given content as ASCII stream on the given statement, using the given  * parameter index. Might simply invoke {@code PreparedStatement.setAsciiStream}  * or create a Clob instance for it, depending on the database and driver.  * @param ps the PreparedStatement to the set the content on  * @param paramIndex the parameter index to use  * @param asciiStream the content as ASCII stream, or {@code null} for SQL NULL  * @throws SQLException if thrown by JDBC methods  * @see java.sql.PreparedStatement#setAsciiStream  */ void setClobAsAsciiStream(PreparedStatement ps, int paramIndex, @Nullable InputStream asciiStream, int contentLength) throws SQLException.
true;;4;3;/**  * Set the given content as character stream on the given statement, using the given  * parameter index. Might simply invoke {@code PreparedStatement.setCharacterStream}  * or create a Clob instance for it, depending on the database and driver.  * @param ps the PreparedStatement to the set the content on  * @param paramIndex the parameter index to use  * @param characterStream the content as character stream, or {@code null} for SQL NULL  * @throws SQLException if thrown by JDBC methods  * @see java.sql.PreparedStatement#setCharacterStream  */ ;/**  * Set the given content as character stream on the given statement, using the given  * parameter index. Might simply invoke {@code PreparedStatement.setCharacterStream}  * or create a Clob instance for it, depending on the database and driver.  * @param ps the PreparedStatement to the set the content on  * @param paramIndex the parameter index to use  * @param characterStream the content as character stream, or {@code null} for SQL NULL  * @throws SQLException if thrown by JDBC methods  * @see java.sql.PreparedStatement#setCharacterStream  */ void setClobAsCharacterStream(PreparedStatement ps, int paramIndex, @Nullable Reader characterStream, int contentLength) throws SQLException.
true;;0;2;/**  * Close this LobCreator session and free its temporarily created BLOBs and CLOBs.  * Will not need to do anything if using PreparedStatement's standard methods,  * but might be necessary to free database resources if using proprietary means.  * <p><b>NOTE</b>: Needs to be invoked after the involved PreparedStatements have  * been executed or the affected O/R mapping sessions have been flushed.  * Otherwise, the database resources for the temporary BLOBs might stay allocated.  */ ;/**  * Close this LobCreator session and free its temporarily created BLOBs and CLOBs.  * Will not need to do anything if using PreparedStatement's standard methods,  * but might be necessary to free database resources if using proprietary means.  * <p><b>NOTE</b>: Needs to be invoked after the involved PreparedStatements have  * been executed or the affected O/R mapping sessions have been flushed.  * Otherwise, the database resources for the temporary BLOBs might stay allocated.  */ @Override void close().
