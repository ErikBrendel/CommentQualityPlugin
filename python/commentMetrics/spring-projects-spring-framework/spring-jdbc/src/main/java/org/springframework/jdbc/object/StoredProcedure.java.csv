# id;timestamp;commentText;codeText;commentWords;codeWords
StoredProcedure -> @Override 	public void declareParameter(SqlParameter param) throws InvalidDataAccessApiUsageException;1328020251;Declare a parameter. Overridden method._Parameters declared as <code>SqlParameter</code> and <code>SqlInOutParameter</code>_will always be used to provide input values.  In addition to this any parameter declared_as <code>SqlOutParameter</code> where an non-null input value is provided will also be used_as an input paraneter._<b>Note: Calls to declareParameter must be made in the same order as_they appear in the database's stored procedure parameter list.</b>_Names are purely used to help mapping._@param param parameter object;@Override_	public void declareParameter(SqlParameter param) throws InvalidDataAccessApiUsageException {_		if (param.getName() == null) {_			throw new InvalidDataAccessApiUsageException("Parameters to stored procedures must have names as well as types")__		}_		super.declareParameter(param)__	};declare,a,parameter,overridden,method,parameters,declared,as,code,sql,parameter,code,and,code,sql,in,out,parameter,code,will,always,be,used,to,provide,input,values,in,addition,to,this,any,parameter,declared,as,code,sql,out,parameter,code,where,an,non,null,input,value,is,provided,will,also,be,used,as,an,input,paraneter,b,note,calls,to,declare,parameter,must,be,made,in,the,same,order,as,they,appear,in,the,database,s,stored,procedure,parameter,list,b,names,are,purely,used,to,help,mapping,param,param,parameter,object;override,public,void,declare,parameter,sql,parameter,param,throws,invalid,data,access,api,usage,exception,if,param,get,name,null,throw,new,invalid,data,access,api,usage,exception,parameters,to,stored,procedures,must,have,names,as,well,as,types,super,declare,parameter,param
StoredProcedure -> @Override 	public void declareParameter(SqlParameter param) throws InvalidDataAccessApiUsageException;1356735495;Declare a parameter. Overridden method._Parameters declared as {@code SqlParameter} and {@code SqlInOutParameter}_will always be used to provide input values.  In addition to this any parameter declared_as {@code SqlOutParameter} where an non-null input value is provided will also be used_as an input paraneter._<b>Note: Calls to declareParameter must be made in the same order as_they appear in the database's stored procedure parameter list.</b>_Names are purely used to help mapping._@param param parameter object;@Override_	public void declareParameter(SqlParameter param) throws InvalidDataAccessApiUsageException {_		if (param.getName() == null) {_			throw new InvalidDataAccessApiUsageException("Parameters to stored procedures must have names as well as types")__		}_		super.declareParameter(param)__	};declare,a,parameter,overridden,method,parameters,declared,as,code,sql,parameter,and,code,sql,in,out,parameter,will,always,be,used,to,provide,input,values,in,addition,to,this,any,parameter,declared,as,code,sql,out,parameter,where,an,non,null,input,value,is,provided,will,also,be,used,as,an,input,paraneter,b,note,calls,to,declare,parameter,must,be,made,in,the,same,order,as,they,appear,in,the,database,s,stored,procedure,parameter,list,b,names,are,purely,used,to,help,mapping,param,param,parameter,object;override,public,void,declare,parameter,sql,parameter,param,throws,invalid,data,access,api,usage,exception,if,param,get,name,null,throw,new,invalid,data,access,api,usage,exception,parameters,to,stored,procedures,must,have,names,as,well,as,types,super,declare,parameter,param
StoredProcedure -> @Override 	public void declareParameter(SqlParameter param) throws InvalidDataAccessApiUsageException;1397137946;Declare a parameter. Overridden method._Parameters declared as {@code SqlParameter} and {@code SqlInOutParameter}_will always be used to provide input values.  In addition to this any parameter declared_as {@code SqlOutParameter} where an non-null input value is provided will also be used_as an input paraneter._<b>Note: Calls to declareParameter must be made in the same order as_they appear in the database's stored procedure parameter list.</b>_Names are purely used to help mapping._@param param parameter object;@Override_	public void declareParameter(SqlParameter param) throws InvalidDataAccessApiUsageException {_		if (param.getName() == null) {_			throw new InvalidDataAccessApiUsageException("Parameters to stored procedures must have names as well as types")__		}_		super.declareParameter(param)__	};declare,a,parameter,overridden,method,parameters,declared,as,code,sql,parameter,and,code,sql,in,out,parameter,will,always,be,used,to,provide,input,values,in,addition,to,this,any,parameter,declared,as,code,sql,out,parameter,where,an,non,null,input,value,is,provided,will,also,be,used,as,an,input,paraneter,b,note,calls,to,declare,parameter,must,be,made,in,the,same,order,as,they,appear,in,the,database,s,stored,procedure,parameter,list,b,names,are,purely,used,to,help,mapping,param,param,parameter,object;override,public,void,declare,parameter,sql,parameter,param,throws,invalid,data,access,api,usage,exception,if,param,get,name,null,throw,new,invalid,data,access,api,usage,exception,parameters,to,stored,procedures,must,have,names,as,well,as,types,super,declare,parameter,param
StoredProcedure -> @Override 	public void declareParameter(SqlParameter param) throws InvalidDataAccessApiUsageException;1467730834;Declare a parameter. Overridden method._Parameters declared as {@code SqlParameter} and {@code SqlInOutParameter}_will always be used to provide input values.  In addition to this any parameter declared_as {@code SqlOutParameter} where an non-null input value is provided will also be used_as an input paraneter._<b>Note: Calls to declareParameter must be made in the same order as_they appear in the database's stored procedure parameter list.</b>_Names are purely used to help mapping._@param param parameter object;@Override_	public void declareParameter(SqlParameter param) throws InvalidDataAccessApiUsageException {_		if (param.getName() == null) {_			throw new InvalidDataAccessApiUsageException("Parameters to stored procedures must have names as well as types")__		}_		super.declareParameter(param)__	};declare,a,parameter,overridden,method,parameters,declared,as,code,sql,parameter,and,code,sql,in,out,parameter,will,always,be,used,to,provide,input,values,in,addition,to,this,any,parameter,declared,as,code,sql,out,parameter,where,an,non,null,input,value,is,provided,will,also,be,used,as,an,input,paraneter,b,note,calls,to,declare,parameter,must,be,made,in,the,same,order,as,they,appear,in,the,database,s,stored,procedure,parameter,list,b,names,are,purely,used,to,help,mapping,param,param,parameter,object;override,public,void,declare,parameter,sql,parameter,param,throws,invalid,data,access,api,usage,exception,if,param,get,name,null,throw,new,invalid,data,access,api,usage,exception,parameters,to,stored,procedures,must,have,names,as,well,as,types,super,declare,parameter,param
StoredProcedure -> @Override 	public void declareParameter(SqlParameter param) throws InvalidDataAccessApiUsageException;1495868221;Declare a parameter. Overridden method._Parameters declared as {@code SqlParameter} and {@code SqlInOutParameter}_will always be used to provide input values.  In addition to this any parameter declared_as {@code SqlOutParameter} where an non-null input value is provided will also be used_as an input paraneter._<b>Note: Calls to declareParameter must be made in the same order as_they appear in the database's stored procedure parameter list.</b>_Names are purely used to help mapping._@param param parameter object;@Override_	public void declareParameter(SqlParameter param) throws InvalidDataAccessApiUsageException {_		if (param.getName() == null) {_			throw new InvalidDataAccessApiUsageException("Parameters to stored procedures must have names as well as types")__		}_		super.declareParameter(param)__	};declare,a,parameter,overridden,method,parameters,declared,as,code,sql,parameter,and,code,sql,in,out,parameter,will,always,be,used,to,provide,input,values,in,addition,to,this,any,parameter,declared,as,code,sql,out,parameter,where,an,non,null,input,value,is,provided,will,also,be,used,as,an,input,paraneter,b,note,calls,to,declare,parameter,must,be,made,in,the,same,order,as,they,appear,in,the,database,s,stored,procedure,parameter,list,b,names,are,purely,used,to,help,mapping,param,param,parameter,object;override,public,void,declare,parameter,sql,parameter,param,throws,invalid,data,access,api,usage,exception,if,param,get,name,null,throw,new,invalid,data,access,api,usage,exception,parameters,to,stored,procedures,must,have,names,as,well,as,types,super,declare,parameter,param
StoredProcedure -> @Override 	public void declareParameter(SqlParameter param) throws InvalidDataAccessApiUsageException;1496837955;Declare a parameter. Overridden method._Parameters declared as {@code SqlParameter} and {@code SqlInOutParameter}_will always be used to provide input values.  In addition to this any parameter declared_as {@code SqlOutParameter} where an non-null input value is provided will also be used_as an input paraneter._<b>Note: Calls to declareParameter must be made in the same order as_they appear in the database's stored procedure parameter list.</b>_Names are purely used to help mapping._@param param parameter object;@Override_	public void declareParameter(SqlParameter param) throws InvalidDataAccessApiUsageException {_		if (param.getName() == null) {_			throw new InvalidDataAccessApiUsageException("Parameters to stored procedures must have names as well as types")__		}_		super.declareParameter(param)__	};declare,a,parameter,overridden,method,parameters,declared,as,code,sql,parameter,and,code,sql,in,out,parameter,will,always,be,used,to,provide,input,values,in,addition,to,this,any,parameter,declared,as,code,sql,out,parameter,where,an,non,null,input,value,is,provided,will,also,be,used,as,an,input,paraneter,b,note,calls,to,declare,parameter,must,be,made,in,the,same,order,as,they,appear,in,the,database,s,stored,procedure,parameter,list,b,names,are,purely,used,to,help,mapping,param,param,parameter,object;override,public,void,declare,parameter,sql,parameter,param,throws,invalid,data,access,api,usage,exception,if,param,get,name,null,throw,new,invalid,data,access,api,usage,exception,parameters,to,stored,procedures,must,have,names,as,well,as,types,super,declare,parameter,param
StoredProcedure -> @Override 	public void declareParameter(SqlParameter param) throws InvalidDataAccessApiUsageException;1520529117;Declare a parameter. Overridden method._Parameters declared as {@code SqlParameter} and {@code SqlInOutParameter}_will always be used to provide input values.  In addition to this any parameter declared_as {@code SqlOutParameter} where an non-null input value is provided will also be used_as an input paraneter._<b>Note: Calls to declareParameter must be made in the same order as_they appear in the database's stored procedure parameter list.</b>_Names are purely used to help mapping._@param param parameter object;@Override_	public void declareParameter(SqlParameter param) throws InvalidDataAccessApiUsageException {_		if (param.getName() == null) {_			throw new InvalidDataAccessApiUsageException("Parameters to stored procedures must have names as well as types")__		}_		super.declareParameter(param)__	};declare,a,parameter,overridden,method,parameters,declared,as,code,sql,parameter,and,code,sql,in,out,parameter,will,always,be,used,to,provide,input,values,in,addition,to,this,any,parameter,declared,as,code,sql,out,parameter,where,an,non,null,input,value,is,provided,will,also,be,used,as,an,input,paraneter,b,note,calls,to,declare,parameter,must,be,made,in,the,same,order,as,they,appear,in,the,database,s,stored,procedure,parameter,list,b,names,are,purely,used,to,help,mapping,param,param,parameter,object;override,public,void,declare,parameter,sql,parameter,param,throws,invalid,data,access,api,usage,exception,if,param,get,name,null,throw,new,invalid,data,access,api,usage,exception,parameters,to,stored,procedures,must,have,names,as,well,as,types,super,declare,parameter,param
StoredProcedure -> @Override 	public void declareParameter(SqlParameter param) throws InvalidDataAccessApiUsageException;1530174524;Declare a parameter. Overridden method._Parameters declared as {@code SqlParameter} and {@code SqlInOutParameter}_will always be used to provide input values.  In addition to this any parameter declared_as {@code SqlOutParameter} where an non-null input value is provided will also be used_as an input paraneter._<b>Note: Calls to declareParameter must be made in the same order as_they appear in the database's stored procedure parameter list.</b>_Names are purely used to help mapping._@param param parameter object;@Override_	public void declareParameter(SqlParameter param) throws InvalidDataAccessApiUsageException {_		if (param.getName() == null) {_			throw new InvalidDataAccessApiUsageException("Parameters to stored procedures must have names as well as types")__		}_		super.declareParameter(param)__	};declare,a,parameter,overridden,method,parameters,declared,as,code,sql,parameter,and,code,sql,in,out,parameter,will,always,be,used,to,provide,input,values,in,addition,to,this,any,parameter,declared,as,code,sql,out,parameter,where,an,non,null,input,value,is,provided,will,also,be,used,as,an,input,paraneter,b,note,calls,to,declare,parameter,must,be,made,in,the,same,order,as,they,appear,in,the,database,s,stored,procedure,parameter,list,b,names,are,purely,used,to,help,mapping,param,param,parameter,object;override,public,void,declare,parameter,sql,parameter,param,throws,invalid,data,access,api,usage,exception,if,param,get,name,null,throw,new,invalid,data,access,api,usage,exception,parameters,to,stored,procedures,must,have,names,as,well,as,types,super,declare,parameter,param
StoredProcedure -> public Map<String, Object> execute(ParameterMapper inParamMapper) throws DataAccessException;1328020251;Execute the stored procedure. Subclasses should define a strongly typed_execute method (with a meaningful name) that invokes this method, passing in_a ParameterMapper that will populate the input map.  This allows mapping database_specific features since the ParameterMapper has access to the Connection object._The execute method is also responsible for extracting typed values from the output map._Subclass execute methods will often take domain objects as arguments and return values._Alternatively, they can return void._@param inParamMapper map of input parameters, keyed by name as in parameter_declarations. Output parameters need not (but can) be included in this map._It is legal for map entries to be <code>null</code>, and this will produce the correct_behavior using a NULL argument to the stored procedure._@return map of output params, keyed by name as in parameter declarations._Output parameters will appear here, with their values after the_stored procedure has been called.;public Map<String, Object> execute(ParameterMapper inParamMapper) throws DataAccessException {_		checkCompiled()__		return getJdbcTemplate().call(newCallableStatementCreator(inParamMapper), getDeclaredParameters())__	};execute,the,stored,procedure,subclasses,should,define,a,strongly,typed,execute,method,with,a,meaningful,name,that,invokes,this,method,passing,in,a,parameter,mapper,that,will,populate,the,input,map,this,allows,mapping,database,specific,features,since,the,parameter,mapper,has,access,to,the,connection,object,the,execute,method,is,also,responsible,for,extracting,typed,values,from,the,output,map,subclass,execute,methods,will,often,take,domain,objects,as,arguments,and,return,values,alternatively,they,can,return,void,param,in,param,mapper,map,of,input,parameters,keyed,by,name,as,in,parameter,declarations,output,parameters,need,not,but,can,be,included,in,this,map,it,is,legal,for,map,entries,to,be,code,null,code,and,this,will,produce,the,correct,behavior,using,a,null,argument,to,the,stored,procedure,return,map,of,output,params,keyed,by,name,as,in,parameter,declarations,output,parameters,will,appear,here,with,their,values,after,the,stored,procedure,has,been,called;public,map,string,object,execute,parameter,mapper,in,param,mapper,throws,data,access,exception,check,compiled,return,get,jdbc,template,call,new,callable,statement,creator,in,param,mapper,get,declared,parameters
StoredProcedure -> public Map<String, Object> execute(ParameterMapper inParamMapper) throws DataAccessException;1356735495;Execute the stored procedure. Subclasses should define a strongly typed_execute method (with a meaningful name) that invokes this method, passing in_a ParameterMapper that will populate the input map.  This allows mapping database_specific features since the ParameterMapper has access to the Connection object._The execute method is also responsible for extracting typed values from the output map._Subclass execute methods will often take domain objects as arguments and return values._Alternatively, they can return void._@param inParamMapper map of input parameters, keyed by name as in parameter_declarations. Output parameters need not (but can) be included in this map._It is legal for map entries to be {@code null}, and this will produce the correct_behavior using a NULL argument to the stored procedure._@return map of output params, keyed by name as in parameter declarations._Output parameters will appear here, with their values after the_stored procedure has been called.;public Map<String, Object> execute(ParameterMapper inParamMapper) throws DataAccessException {_		checkCompiled()__		return getJdbcTemplate().call(newCallableStatementCreator(inParamMapper), getDeclaredParameters())__	};execute,the,stored,procedure,subclasses,should,define,a,strongly,typed,execute,method,with,a,meaningful,name,that,invokes,this,method,passing,in,a,parameter,mapper,that,will,populate,the,input,map,this,allows,mapping,database,specific,features,since,the,parameter,mapper,has,access,to,the,connection,object,the,execute,method,is,also,responsible,for,extracting,typed,values,from,the,output,map,subclass,execute,methods,will,often,take,domain,objects,as,arguments,and,return,values,alternatively,they,can,return,void,param,in,param,mapper,map,of,input,parameters,keyed,by,name,as,in,parameter,declarations,output,parameters,need,not,but,can,be,included,in,this,map,it,is,legal,for,map,entries,to,be,code,null,and,this,will,produce,the,correct,behavior,using,a,null,argument,to,the,stored,procedure,return,map,of,output,params,keyed,by,name,as,in,parameter,declarations,output,parameters,will,appear,here,with,their,values,after,the,stored,procedure,has,been,called;public,map,string,object,execute,parameter,mapper,in,param,mapper,throws,data,access,exception,check,compiled,return,get,jdbc,template,call,new,callable,statement,creator,in,param,mapper,get,declared,parameters
StoredProcedure -> public Map<String, Object> execute(ParameterMapper inParamMapper) throws DataAccessException;1397137946;Execute the stored procedure. Subclasses should define a strongly typed_execute method (with a meaningful name) that invokes this method, passing in_a ParameterMapper that will populate the input map.  This allows mapping database_specific features since the ParameterMapper has access to the Connection object._The execute method is also responsible for extracting typed values from the output map._Subclass execute methods will often take domain objects as arguments and return values._Alternatively, they can return void._@param inParamMapper map of input parameters, keyed by name as in parameter_declarations. Output parameters need not (but can) be included in this map._It is legal for map entries to be {@code null}, and this will produce the correct_behavior using a NULL argument to the stored procedure._@return map of output params, keyed by name as in parameter declarations._Output parameters will appear here, with their values after the_stored procedure has been called.;public Map<String, Object> execute(ParameterMapper inParamMapper) throws DataAccessException {_		checkCompiled()__		return getJdbcTemplate().call(newCallableStatementCreator(inParamMapper), getDeclaredParameters())__	};execute,the,stored,procedure,subclasses,should,define,a,strongly,typed,execute,method,with,a,meaningful,name,that,invokes,this,method,passing,in,a,parameter,mapper,that,will,populate,the,input,map,this,allows,mapping,database,specific,features,since,the,parameter,mapper,has,access,to,the,connection,object,the,execute,method,is,also,responsible,for,extracting,typed,values,from,the,output,map,subclass,execute,methods,will,often,take,domain,objects,as,arguments,and,return,values,alternatively,they,can,return,void,param,in,param,mapper,map,of,input,parameters,keyed,by,name,as,in,parameter,declarations,output,parameters,need,not,but,can,be,included,in,this,map,it,is,legal,for,map,entries,to,be,code,null,and,this,will,produce,the,correct,behavior,using,a,null,argument,to,the,stored,procedure,return,map,of,output,params,keyed,by,name,as,in,parameter,declarations,output,parameters,will,appear,here,with,their,values,after,the,stored,procedure,has,been,called;public,map,string,object,execute,parameter,mapper,in,param,mapper,throws,data,access,exception,check,compiled,return,get,jdbc,template,call,new,callable,statement,creator,in,param,mapper,get,declared,parameters
StoredProcedure -> public Map<String, Object> execute(ParameterMapper inParamMapper) throws DataAccessException;1467730834;Execute the stored procedure. Subclasses should define a strongly typed_execute method (with a meaningful name) that invokes this method, passing in_a ParameterMapper that will populate the input map.  This allows mapping database_specific features since the ParameterMapper has access to the Connection object._The execute method is also responsible for extracting typed values from the output map._Subclass execute methods will often take domain objects as arguments and return values._Alternatively, they can return void._@param inParamMapper map of input parameters, keyed by name as in parameter_declarations. Output parameters need not (but can) be included in this map._It is legal for map entries to be {@code null}, and this will produce the correct_behavior using a NULL argument to the stored procedure._@return map of output params, keyed by name as in parameter declarations._Output parameters will appear here, with their values after the_stored procedure has been called.;public Map<String, Object> execute(ParameterMapper inParamMapper) throws DataAccessException {_		checkCompiled()__		return getJdbcTemplate().call(newCallableStatementCreator(inParamMapper), getDeclaredParameters())__	};execute,the,stored,procedure,subclasses,should,define,a,strongly,typed,execute,method,with,a,meaningful,name,that,invokes,this,method,passing,in,a,parameter,mapper,that,will,populate,the,input,map,this,allows,mapping,database,specific,features,since,the,parameter,mapper,has,access,to,the,connection,object,the,execute,method,is,also,responsible,for,extracting,typed,values,from,the,output,map,subclass,execute,methods,will,often,take,domain,objects,as,arguments,and,return,values,alternatively,they,can,return,void,param,in,param,mapper,map,of,input,parameters,keyed,by,name,as,in,parameter,declarations,output,parameters,need,not,but,can,be,included,in,this,map,it,is,legal,for,map,entries,to,be,code,null,and,this,will,produce,the,correct,behavior,using,a,null,argument,to,the,stored,procedure,return,map,of,output,params,keyed,by,name,as,in,parameter,declarations,output,parameters,will,appear,here,with,their,values,after,the,stored,procedure,has,been,called;public,map,string,object,execute,parameter,mapper,in,param,mapper,throws,data,access,exception,check,compiled,return,get,jdbc,template,call,new,callable,statement,creator,in,param,mapper,get,declared,parameters
StoredProcedure -> public Map<String, Object> execute(ParameterMapper inParamMapper) throws DataAccessException;1496837955;Execute the stored procedure. Subclasses should define a strongly typed_execute method (with a meaningful name) that invokes this method, passing in_a ParameterMapper that will populate the input map.  This allows mapping database_specific features since the ParameterMapper has access to the Connection object._The execute method is also responsible for extracting typed values from the output map._Subclass execute methods will often take domain objects as arguments and return values._Alternatively, they can return void._@param inParamMapper map of input parameters, keyed by name as in parameter_declarations. Output parameters need not (but can) be included in this map._It is legal for map entries to be {@code null}, and this will produce the correct_behavior using a NULL argument to the stored procedure._@return map of output params, keyed by name as in parameter declarations._Output parameters will appear here, with their values after the_stored procedure has been called.;public Map<String, Object> execute(ParameterMapper inParamMapper) throws DataAccessException {_		checkCompiled()__		return getJdbcTemplate().call(newCallableStatementCreator(inParamMapper), getDeclaredParameters())__	};execute,the,stored,procedure,subclasses,should,define,a,strongly,typed,execute,method,with,a,meaningful,name,that,invokes,this,method,passing,in,a,parameter,mapper,that,will,populate,the,input,map,this,allows,mapping,database,specific,features,since,the,parameter,mapper,has,access,to,the,connection,object,the,execute,method,is,also,responsible,for,extracting,typed,values,from,the,output,map,subclass,execute,methods,will,often,take,domain,objects,as,arguments,and,return,values,alternatively,they,can,return,void,param,in,param,mapper,map,of,input,parameters,keyed,by,name,as,in,parameter,declarations,output,parameters,need,not,but,can,be,included,in,this,map,it,is,legal,for,map,entries,to,be,code,null,and,this,will,produce,the,correct,behavior,using,a,null,argument,to,the,stored,procedure,return,map,of,output,params,keyed,by,name,as,in,parameter,declarations,output,parameters,will,appear,here,with,their,values,after,the,stored,procedure,has,been,called;public,map,string,object,execute,parameter,mapper,in,param,mapper,throws,data,access,exception,check,compiled,return,get,jdbc,template,call,new,callable,statement,creator,in,param,mapper,get,declared,parameters
StoredProcedure -> public Map<String, Object> execute(ParameterMapper inParamMapper) throws DataAccessException;1520529117;Execute the stored procedure. Subclasses should define a strongly typed_execute method (with a meaningful name) that invokes this method, passing in_a ParameterMapper that will populate the input map.  This allows mapping database_specific features since the ParameterMapper has access to the Connection object._The execute method is also responsible for extracting typed values from the output map._Subclass execute methods will often take domain objects as arguments and return values._Alternatively, they can return void._@param inParamMapper map of input parameters, keyed by name as in parameter_declarations. Output parameters need not (but can) be included in this map._It is legal for map entries to be {@code null}, and this will produce the correct_behavior using a NULL argument to the stored procedure._@return map of output params, keyed by name as in parameter declarations._Output parameters will appear here, with their values after the_stored procedure has been called.;public Map<String, Object> execute(ParameterMapper inParamMapper) throws DataAccessException {_		checkCompiled()__		return getJdbcTemplate().call(newCallableStatementCreator(inParamMapper), getDeclaredParameters())__	};execute,the,stored,procedure,subclasses,should,define,a,strongly,typed,execute,method,with,a,meaningful,name,that,invokes,this,method,passing,in,a,parameter,mapper,that,will,populate,the,input,map,this,allows,mapping,database,specific,features,since,the,parameter,mapper,has,access,to,the,connection,object,the,execute,method,is,also,responsible,for,extracting,typed,values,from,the,output,map,subclass,execute,methods,will,often,take,domain,objects,as,arguments,and,return,values,alternatively,they,can,return,void,param,in,param,mapper,map,of,input,parameters,keyed,by,name,as,in,parameter,declarations,output,parameters,need,not,but,can,be,included,in,this,map,it,is,legal,for,map,entries,to,be,code,null,and,this,will,produce,the,correct,behavior,using,a,null,argument,to,the,stored,procedure,return,map,of,output,params,keyed,by,name,as,in,parameter,declarations,output,parameters,will,appear,here,with,their,values,after,the,stored,procedure,has,been,called;public,map,string,object,execute,parameter,mapper,in,param,mapper,throws,data,access,exception,check,compiled,return,get,jdbc,template,call,new,callable,statement,creator,in,param,mapper,get,declared,parameters
StoredProcedure -> public Map<String, Object> execute(ParameterMapper inParamMapper) throws DataAccessException;1530174524;Execute the stored procedure. Subclasses should define a strongly typed_execute method (with a meaningful name) that invokes this method, passing in_a ParameterMapper that will populate the input map.  This allows mapping database_specific features since the ParameterMapper has access to the Connection object._The execute method is also responsible for extracting typed values from the output map._Subclass execute methods will often take domain objects as arguments and return values._Alternatively, they can return void._@param inParamMapper map of input parameters, keyed by name as in parameter_declarations. Output parameters need not (but can) be included in this map._It is legal for map entries to be {@code null}, and this will produce the correct_behavior using a NULL argument to the stored procedure._@return map of output params, keyed by name as in parameter declarations._Output parameters will appear here, with their values after the_stored procedure has been called.;public Map<String, Object> execute(ParameterMapper inParamMapper) throws DataAccessException {_		checkCompiled()__		return getJdbcTemplate().call(newCallableStatementCreator(inParamMapper), getDeclaredParameters())__	};execute,the,stored,procedure,subclasses,should,define,a,strongly,typed,execute,method,with,a,meaningful,name,that,invokes,this,method,passing,in,a,parameter,mapper,that,will,populate,the,input,map,this,allows,mapping,database,specific,features,since,the,parameter,mapper,has,access,to,the,connection,object,the,execute,method,is,also,responsible,for,extracting,typed,values,from,the,output,map,subclass,execute,methods,will,often,take,domain,objects,as,arguments,and,return,values,alternatively,they,can,return,void,param,in,param,mapper,map,of,input,parameters,keyed,by,name,as,in,parameter,declarations,output,parameters,need,not,but,can,be,included,in,this,map,it,is,legal,for,map,entries,to,be,code,null,and,this,will,produce,the,correct,behavior,using,a,null,argument,to,the,stored,procedure,return,map,of,output,params,keyed,by,name,as,in,parameter,declarations,output,parameters,will,appear,here,with,their,values,after,the,stored,procedure,has,been,called;public,map,string,object,execute,parameter,mapper,in,param,mapper,throws,data,access,exception,check,compiled,return,get,jdbc,template,call,new,callable,statement,creator,in,param,mapper,get,declared,parameters
StoredProcedure -> protected StoredProcedure(DataSource ds, String name);1328020251;Create a new object wrapper for a stored procedure._@param ds DataSource to use throughout the lifetime_of this object to obtain connections_@param name name of the stored procedure in the database;protected StoredProcedure(DataSource ds, String name) {_		setDataSource(ds)__		setSql(name)__	};create,a,new,object,wrapper,for,a,stored,procedure,param,ds,data,source,to,use,throughout,the,lifetime,of,this,object,to,obtain,connections,param,name,name,of,the,stored,procedure,in,the,database;protected,stored,procedure,data,source,ds,string,name,set,data,source,ds,set,sql,name
StoredProcedure -> protected StoredProcedure(DataSource ds, String name);1356735495;Create a new object wrapper for a stored procedure._@param ds DataSource to use throughout the lifetime_of this object to obtain connections_@param name name of the stored procedure in the database;protected StoredProcedure(DataSource ds, String name) {_		setDataSource(ds)__		setSql(name)__	};create,a,new,object,wrapper,for,a,stored,procedure,param,ds,data,source,to,use,throughout,the,lifetime,of,this,object,to,obtain,connections,param,name,name,of,the,stored,procedure,in,the,database;protected,stored,procedure,data,source,ds,string,name,set,data,source,ds,set,sql,name
StoredProcedure -> protected StoredProcedure(DataSource ds, String name);1397137946;Create a new object wrapper for a stored procedure._@param ds DataSource to use throughout the lifetime_of this object to obtain connections_@param name name of the stored procedure in the database;protected StoredProcedure(DataSource ds, String name) {_		setDataSource(ds)__		setSql(name)__	};create,a,new,object,wrapper,for,a,stored,procedure,param,ds,data,source,to,use,throughout,the,lifetime,of,this,object,to,obtain,connections,param,name,name,of,the,stored,procedure,in,the,database;protected,stored,procedure,data,source,ds,string,name,set,data,source,ds,set,sql,name
StoredProcedure -> protected StoredProcedure(DataSource ds, String name);1467730834;Create a new object wrapper for a stored procedure._@param ds DataSource to use throughout the lifetime_of this object to obtain connections_@param name name of the stored procedure in the database;protected StoredProcedure(DataSource ds, String name) {_		setDataSource(ds)__		setSql(name)__	};create,a,new,object,wrapper,for,a,stored,procedure,param,ds,data,source,to,use,throughout,the,lifetime,of,this,object,to,obtain,connections,param,name,name,of,the,stored,procedure,in,the,database;protected,stored,procedure,data,source,ds,string,name,set,data,source,ds,set,sql,name
StoredProcedure -> protected StoredProcedure(DataSource ds, String name);1495868221;Create a new object wrapper for a stored procedure._@param ds DataSource to use throughout the lifetime_of this object to obtain connections_@param name name of the stored procedure in the database;protected StoredProcedure(DataSource ds, String name) {_		setDataSource(ds)__		setSql(name)__	};create,a,new,object,wrapper,for,a,stored,procedure,param,ds,data,source,to,use,throughout,the,lifetime,of,this,object,to,obtain,connections,param,name,name,of,the,stored,procedure,in,the,database;protected,stored,procedure,data,source,ds,string,name,set,data,source,ds,set,sql,name
StoredProcedure -> protected StoredProcedure(DataSource ds, String name);1496837955;Create a new object wrapper for a stored procedure._@param ds DataSource to use throughout the lifetime_of this object to obtain connections_@param name name of the stored procedure in the database;protected StoredProcedure(DataSource ds, String name) {_		setDataSource(ds)__		setSql(name)__	};create,a,new,object,wrapper,for,a,stored,procedure,param,ds,data,source,to,use,throughout,the,lifetime,of,this,object,to,obtain,connections,param,name,name,of,the,stored,procedure,in,the,database;protected,stored,procedure,data,source,ds,string,name,set,data,source,ds,set,sql,name
StoredProcedure -> protected StoredProcedure(DataSource ds, String name);1520529117;Create a new object wrapper for a stored procedure._@param ds DataSource to use throughout the lifetime_of this object to obtain connections_@param name name of the stored procedure in the database;protected StoredProcedure(DataSource ds, String name) {_		setDataSource(ds)__		setSql(name)__	};create,a,new,object,wrapper,for,a,stored,procedure,param,ds,data,source,to,use,throughout,the,lifetime,of,this,object,to,obtain,connections,param,name,name,of,the,stored,procedure,in,the,database;protected,stored,procedure,data,source,ds,string,name,set,data,source,ds,set,sql,name
StoredProcedure -> protected StoredProcedure(DataSource ds, String name);1530174524;Create a new object wrapper for a stored procedure._@param ds the DataSource to use throughout the lifetime_of this object to obtain connections_@param name name of the stored procedure in the database;protected StoredProcedure(DataSource ds, String name) {_		setDataSource(ds)__		setSql(name)__	};create,a,new,object,wrapper,for,a,stored,procedure,param,ds,the,data,source,to,use,throughout,the,lifetime,of,this,object,to,obtain,connections,param,name,name,of,the,stored,procedure,in,the,database;protected,stored,procedure,data,source,ds,string,name,set,data,source,ds,set,sql,name
StoredProcedure -> public Map<String, Object> execute(Object... inParams);1328020251;Execute the stored procedure with the provided parameter values. This is_a convenience method where the order of the passed in parameter values_must match the order that the parameters where declared in._@param inParams variable number of input parameters. Output parameters should_not be included in this map._It is legal for values to be <code>null</code>, and this will produce the_correct behavior using a NULL argument to the stored procedure._@return map of output params, keyed by name as in parameter declarations._Output parameters will appear here, with their values after the_stored procedure has been called.;public Map<String, Object> execute(Object... inParams) {_		Map<String, Object> paramsToUse = new HashMap<String, Object>()__		validateParameters(inParams)__		int i = 0__		for (SqlParameter sqlParameter : getDeclaredParameters()) {_			if (sqlParameter.isInputValueProvided()) {_				if (i < inParams.length) {_					paramsToUse.put(sqlParameter.getName(), inParams[i++])__				}_			}_		}_		return getJdbcTemplate().call(newCallableStatementCreator(paramsToUse), getDeclaredParameters())__	};execute,the,stored,procedure,with,the,provided,parameter,values,this,is,a,convenience,method,where,the,order,of,the,passed,in,parameter,values,must,match,the,order,that,the,parameters,where,declared,in,param,in,params,variable,number,of,input,parameters,output,parameters,should,not,be,included,in,this,map,it,is,legal,for,values,to,be,code,null,code,and,this,will,produce,the,correct,behavior,using,a,null,argument,to,the,stored,procedure,return,map,of,output,params,keyed,by,name,as,in,parameter,declarations,output,parameters,will,appear,here,with,their,values,after,the,stored,procedure,has,been,called;public,map,string,object,execute,object,in,params,map,string,object,params,to,use,new,hash,map,string,object,validate,parameters,in,params,int,i,0,for,sql,parameter,sql,parameter,get,declared,parameters,if,sql,parameter,is,input,value,provided,if,i,in,params,length,params,to,use,put,sql,parameter,get,name,in,params,i,return,get,jdbc,template,call,new,callable,statement,creator,params,to,use,get,declared,parameters
StoredProcedure -> public Map<String, Object> execute(Object... inParams);1356735495;Execute the stored procedure with the provided parameter values. This is_a convenience method where the order of the passed in parameter values_must match the order that the parameters where declared in._@param inParams variable number of input parameters. Output parameters should_not be included in this map._It is legal for values to be {@code null}, and this will produce the_correct behavior using a NULL argument to the stored procedure._@return map of output params, keyed by name as in parameter declarations._Output parameters will appear here, with their values after the_stored procedure has been called.;public Map<String, Object> execute(Object... inParams) {_		Map<String, Object> paramsToUse = new HashMap<String, Object>()__		validateParameters(inParams)__		int i = 0__		for (SqlParameter sqlParameter : getDeclaredParameters()) {_			if (sqlParameter.isInputValueProvided()) {_				if (i < inParams.length) {_					paramsToUse.put(sqlParameter.getName(), inParams[i++])__				}_			}_		}_		return getJdbcTemplate().call(newCallableStatementCreator(paramsToUse), getDeclaredParameters())__	};execute,the,stored,procedure,with,the,provided,parameter,values,this,is,a,convenience,method,where,the,order,of,the,passed,in,parameter,values,must,match,the,order,that,the,parameters,where,declared,in,param,in,params,variable,number,of,input,parameters,output,parameters,should,not,be,included,in,this,map,it,is,legal,for,values,to,be,code,null,and,this,will,produce,the,correct,behavior,using,a,null,argument,to,the,stored,procedure,return,map,of,output,params,keyed,by,name,as,in,parameter,declarations,output,parameters,will,appear,here,with,their,values,after,the,stored,procedure,has,been,called;public,map,string,object,execute,object,in,params,map,string,object,params,to,use,new,hash,map,string,object,validate,parameters,in,params,int,i,0,for,sql,parameter,sql,parameter,get,declared,parameters,if,sql,parameter,is,input,value,provided,if,i,in,params,length,params,to,use,put,sql,parameter,get,name,in,params,i,return,get,jdbc,template,call,new,callable,statement,creator,params,to,use,get,declared,parameters
StoredProcedure -> public Map<String, Object> execute(Object... inParams);1397137946;Execute the stored procedure with the provided parameter values. This is_a convenience method where the order of the passed in parameter values_must match the order that the parameters where declared in._@param inParams variable number of input parameters. Output parameters should_not be included in this map._It is legal for values to be {@code null}, and this will produce the_correct behavior using a NULL argument to the stored procedure._@return map of output params, keyed by name as in parameter declarations._Output parameters will appear here, with their values after the_stored procedure has been called.;public Map<String, Object> execute(Object... inParams) {_		Map<String, Object> paramsToUse = new HashMap<String, Object>()__		validateParameters(inParams)__		int i = 0__		for (SqlParameter sqlParameter : getDeclaredParameters()) {_			if (sqlParameter.isInputValueProvided()) {_				if (i < inParams.length) {_					paramsToUse.put(sqlParameter.getName(), inParams[i++])__				}_			}_		}_		return getJdbcTemplate().call(newCallableStatementCreator(paramsToUse), getDeclaredParameters())__	};execute,the,stored,procedure,with,the,provided,parameter,values,this,is,a,convenience,method,where,the,order,of,the,passed,in,parameter,values,must,match,the,order,that,the,parameters,where,declared,in,param,in,params,variable,number,of,input,parameters,output,parameters,should,not,be,included,in,this,map,it,is,legal,for,values,to,be,code,null,and,this,will,produce,the,correct,behavior,using,a,null,argument,to,the,stored,procedure,return,map,of,output,params,keyed,by,name,as,in,parameter,declarations,output,parameters,will,appear,here,with,their,values,after,the,stored,procedure,has,been,called;public,map,string,object,execute,object,in,params,map,string,object,params,to,use,new,hash,map,string,object,validate,parameters,in,params,int,i,0,for,sql,parameter,sql,parameter,get,declared,parameters,if,sql,parameter,is,input,value,provided,if,i,in,params,length,params,to,use,put,sql,parameter,get,name,in,params,i,return,get,jdbc,template,call,new,callable,statement,creator,params,to,use,get,declared,parameters
StoredProcedure -> public Map<String, Object> execute(Object... inParams);1467730834;Execute the stored procedure with the provided parameter values. This is_a convenience method where the order of the passed in parameter values_must match the order that the parameters where declared in._@param inParams variable number of input parameters. Output parameters should_not be included in this map._It is legal for values to be {@code null}, and this will produce the_correct behavior using a NULL argument to the stored procedure._@return map of output params, keyed by name as in parameter declarations._Output parameters will appear here, with their values after the_stored procedure has been called.;public Map<String, Object> execute(Object... inParams) {_		Map<String, Object> paramsToUse = new HashMap<>()__		validateParameters(inParams)__		int i = 0__		for (SqlParameter sqlParameter : getDeclaredParameters()) {_			if (sqlParameter.isInputValueProvided()) {_				if (i < inParams.length) {_					paramsToUse.put(sqlParameter.getName(), inParams[i++])__				}_			}_		}_		return getJdbcTemplate().call(newCallableStatementCreator(paramsToUse), getDeclaredParameters())__	};execute,the,stored,procedure,with,the,provided,parameter,values,this,is,a,convenience,method,where,the,order,of,the,passed,in,parameter,values,must,match,the,order,that,the,parameters,where,declared,in,param,in,params,variable,number,of,input,parameters,output,parameters,should,not,be,included,in,this,map,it,is,legal,for,values,to,be,code,null,and,this,will,produce,the,correct,behavior,using,a,null,argument,to,the,stored,procedure,return,map,of,output,params,keyed,by,name,as,in,parameter,declarations,output,parameters,will,appear,here,with,their,values,after,the,stored,procedure,has,been,called;public,map,string,object,execute,object,in,params,map,string,object,params,to,use,new,hash,map,validate,parameters,in,params,int,i,0,for,sql,parameter,sql,parameter,get,declared,parameters,if,sql,parameter,is,input,value,provided,if,i,in,params,length,params,to,use,put,sql,parameter,get,name,in,params,i,return,get,jdbc,template,call,new,callable,statement,creator,params,to,use,get,declared,parameters
StoredProcedure -> public Map<String, Object> execute(Object... inParams);1496837955;Execute the stored procedure with the provided parameter values. This is_a convenience method where the order of the passed in parameter values_must match the order that the parameters where declared in._@param inParams variable number of input parameters. Output parameters should_not be included in this map. It is legal for values to be {@code null}, and this_will produce the correct behavior using a NULL argument to the stored procedure._@return map of output params, keyed by name as in parameter declarations._Output parameters will appear here, with their values after the stored procedure_has been called.;public Map<String, Object> execute(Object... inParams) {_		Map<String, Object> paramsToUse = new HashMap<>()__		validateParameters(inParams)__		int i = 0__		for (SqlParameter sqlParameter : getDeclaredParameters()) {_			if (sqlParameter.isInputValueProvided()) {_				if (i < inParams.length) {_					paramsToUse.put(sqlParameter.getName(), inParams[i++])__				}_			}_		}_		return getJdbcTemplate().call(newCallableStatementCreator(paramsToUse), getDeclaredParameters())__	};execute,the,stored,procedure,with,the,provided,parameter,values,this,is,a,convenience,method,where,the,order,of,the,passed,in,parameter,values,must,match,the,order,that,the,parameters,where,declared,in,param,in,params,variable,number,of,input,parameters,output,parameters,should,not,be,included,in,this,map,it,is,legal,for,values,to,be,code,null,and,this,will,produce,the,correct,behavior,using,a,null,argument,to,the,stored,procedure,return,map,of,output,params,keyed,by,name,as,in,parameter,declarations,output,parameters,will,appear,here,with,their,values,after,the,stored,procedure,has,been,called;public,map,string,object,execute,object,in,params,map,string,object,params,to,use,new,hash,map,validate,parameters,in,params,int,i,0,for,sql,parameter,sql,parameter,get,declared,parameters,if,sql,parameter,is,input,value,provided,if,i,in,params,length,params,to,use,put,sql,parameter,get,name,in,params,i,return,get,jdbc,template,call,new,callable,statement,creator,params,to,use,get,declared,parameters
StoredProcedure -> public Map<String, Object> execute(Object... inParams);1520529117;Execute the stored procedure with the provided parameter values. This is_a convenience method where the order of the passed in parameter values_must match the order that the parameters where declared in._@param inParams variable number of input parameters. Output parameters should_not be included in this map. It is legal for values to be {@code null}, and this_will produce the correct behavior using a NULL argument to the stored procedure._@return map of output params, keyed by name as in parameter declarations._Output parameters will appear here, with their values after the stored procedure_has been called.;public Map<String, Object> execute(Object... inParams) {_		Map<String, Object> paramsToUse = new HashMap<>()__		validateParameters(inParams)__		int i = 0__		for (SqlParameter sqlParameter : getDeclaredParameters()) {_			if (sqlParameter.isInputValueProvided() && i < inParams.length) {_				paramsToUse.put(sqlParameter.getName(), inParams[i++])__			}_		}_		return getJdbcTemplate().call(newCallableStatementCreator(paramsToUse), getDeclaredParameters())__	};execute,the,stored,procedure,with,the,provided,parameter,values,this,is,a,convenience,method,where,the,order,of,the,passed,in,parameter,values,must,match,the,order,that,the,parameters,where,declared,in,param,in,params,variable,number,of,input,parameters,output,parameters,should,not,be,included,in,this,map,it,is,legal,for,values,to,be,code,null,and,this,will,produce,the,correct,behavior,using,a,null,argument,to,the,stored,procedure,return,map,of,output,params,keyed,by,name,as,in,parameter,declarations,output,parameters,will,appear,here,with,their,values,after,the,stored,procedure,has,been,called;public,map,string,object,execute,object,in,params,map,string,object,params,to,use,new,hash,map,validate,parameters,in,params,int,i,0,for,sql,parameter,sql,parameter,get,declared,parameters,if,sql,parameter,is,input,value,provided,i,in,params,length,params,to,use,put,sql,parameter,get,name,in,params,i,return,get,jdbc,template,call,new,callable,statement,creator,params,to,use,get,declared,parameters
StoredProcedure -> public Map<String, Object> execute(Object... inParams);1530174524;Execute the stored procedure with the provided parameter values. This is_a convenience method where the order of the passed in parameter values_must match the order that the parameters where declared in._@param inParams variable number of input parameters. Output parameters should_not be included in this map. It is legal for values to be {@code null}, and this_will produce the correct behavior using a NULL argument to the stored procedure._@return map of output params, keyed by name as in parameter declarations._Output parameters will appear here, with their values after the stored procedure_has been called.;public Map<String, Object> execute(Object... inParams) {_		Map<String, Object> paramsToUse = new HashMap<>()__		validateParameters(inParams)__		int i = 0__		for (SqlParameter sqlParameter : getDeclaredParameters()) {_			if (sqlParameter.isInputValueProvided() && i < inParams.length) {_				paramsToUse.put(sqlParameter.getName(), inParams[i++])__			}_		}_		return getJdbcTemplate().call(newCallableStatementCreator(paramsToUse), getDeclaredParameters())__	};execute,the,stored,procedure,with,the,provided,parameter,values,this,is,a,convenience,method,where,the,order,of,the,passed,in,parameter,values,must,match,the,order,that,the,parameters,where,declared,in,param,in,params,variable,number,of,input,parameters,output,parameters,should,not,be,included,in,this,map,it,is,legal,for,values,to,be,code,null,and,this,will,produce,the,correct,behavior,using,a,null,argument,to,the,stored,procedure,return,map,of,output,params,keyed,by,name,as,in,parameter,declarations,output,parameters,will,appear,here,with,their,values,after,the,stored,procedure,has,been,called;public,map,string,object,execute,object,in,params,map,string,object,params,to,use,new,hash,map,validate,parameters,in,params,int,i,0,for,sql,parameter,sql,parameter,get,declared,parameters,if,sql,parameter,is,input,value,provided,i,in,params,length,params,to,use,put,sql,parameter,get,name,in,params,i,return,get,jdbc,template,call,new,callable,statement,creator,params,to,use,get,declared,parameters
StoredProcedure -> @Override 	protected boolean allowsUnusedParameters();1328020251;StoredProcedure parameter Maps are by default allowed to contain_additional entries that are not actually used as parameters.;@Override_	protected boolean allowsUnusedParameters() {_		return true__	};stored,procedure,parameter,maps,are,by,default,allowed,to,contain,additional,entries,that,are,not,actually,used,as,parameters;override,protected,boolean,allows,unused,parameters,return,true
StoredProcedure -> @Override 	protected boolean allowsUnusedParameters();1356735495;StoredProcedure parameter Maps are by default allowed to contain_additional entries that are not actually used as parameters.;@Override_	protected boolean allowsUnusedParameters() {_		return true__	};stored,procedure,parameter,maps,are,by,default,allowed,to,contain,additional,entries,that,are,not,actually,used,as,parameters;override,protected,boolean,allows,unused,parameters,return,true
StoredProcedure -> @Override 	protected boolean allowsUnusedParameters();1397137946;StoredProcedure parameter Maps are by default allowed to contain_additional entries that are not actually used as parameters.;@Override_	protected boolean allowsUnusedParameters() {_		return true__	};stored,procedure,parameter,maps,are,by,default,allowed,to,contain,additional,entries,that,are,not,actually,used,as,parameters;override,protected,boolean,allows,unused,parameters,return,true
StoredProcedure -> @Override 	protected boolean allowsUnusedParameters();1467730834;StoredProcedure parameter Maps are by default allowed to contain_additional entries that are not actually used as parameters.;@Override_	protected boolean allowsUnusedParameters() {_		return true__	};stored,procedure,parameter,maps,are,by,default,allowed,to,contain,additional,entries,that,are,not,actually,used,as,parameters;override,protected,boolean,allows,unused,parameters,return,true
StoredProcedure -> @Override 	protected boolean allowsUnusedParameters();1495868221;StoredProcedure parameter Maps are by default allowed to contain_additional entries that are not actually used as parameters.;@Override_	protected boolean allowsUnusedParameters() {_		return true__	};stored,procedure,parameter,maps,are,by,default,allowed,to,contain,additional,entries,that,are,not,actually,used,as,parameters;override,protected,boolean,allows,unused,parameters,return,true
StoredProcedure -> @Override 	protected boolean allowsUnusedParameters();1496837955;StoredProcedure parameter Maps are by default allowed to contain_additional entries that are not actually used as parameters.;@Override_	protected boolean allowsUnusedParameters() {_		return true__	};stored,procedure,parameter,maps,are,by,default,allowed,to,contain,additional,entries,that,are,not,actually,used,as,parameters;override,protected,boolean,allows,unused,parameters,return,true
StoredProcedure -> @Override 	protected boolean allowsUnusedParameters();1520529117;StoredProcedure parameter Maps are by default allowed to contain_additional entries that are not actually used as parameters.;@Override_	protected boolean allowsUnusedParameters() {_		return true__	};stored,procedure,parameter,maps,are,by,default,allowed,to,contain,additional,entries,that,are,not,actually,used,as,parameters;override,protected,boolean,allows,unused,parameters,return,true
StoredProcedure -> @Override 	protected boolean allowsUnusedParameters();1530174524;StoredProcedure parameter Maps are by default allowed to contain_additional entries that are not actually used as parameters.;@Override_	protected boolean allowsUnusedParameters() {_		return true__	};stored,procedure,parameter,maps,are,by,default,allowed,to,contain,additional,entries,that,are,not,actually,used,as,parameters;override,protected,boolean,allows,unused,parameters,return,true
StoredProcedure -> public Map<String, Object> execute(Map<String, ?> inParams) throws DataAccessException;1328020251;Execute the stored procedure. Subclasses should define a strongly typed_execute method (with a meaningful name) that invokes this method, populating_the input map and extracting typed values from the output map. Subclass_execute methods will often take domain objects as arguments and return values._Alternatively, they can return void._@param inParams map of input parameters, keyed by name as in parameter_declarations. Output parameters need not (but can) be included in this map._It is legal for map entries to be <code>null</code>, and this will produce the_correct behavior using a NULL argument to the stored procedure._@return map of output params, keyed by name as in parameter declarations._Output parameters will appear here, with their values after the_stored procedure has been called.;public Map<String, Object> execute(Map<String, ?> inParams) throws DataAccessException {_		validateParameters(inParams.values().toArray())__		return getJdbcTemplate().call(newCallableStatementCreator(inParams), getDeclaredParameters())__	};execute,the,stored,procedure,subclasses,should,define,a,strongly,typed,execute,method,with,a,meaningful,name,that,invokes,this,method,populating,the,input,map,and,extracting,typed,values,from,the,output,map,subclass,execute,methods,will,often,take,domain,objects,as,arguments,and,return,values,alternatively,they,can,return,void,param,in,params,map,of,input,parameters,keyed,by,name,as,in,parameter,declarations,output,parameters,need,not,but,can,be,included,in,this,map,it,is,legal,for,map,entries,to,be,code,null,code,and,this,will,produce,the,correct,behavior,using,a,null,argument,to,the,stored,procedure,return,map,of,output,params,keyed,by,name,as,in,parameter,declarations,output,parameters,will,appear,here,with,their,values,after,the,stored,procedure,has,been,called;public,map,string,object,execute,map,string,in,params,throws,data,access,exception,validate,parameters,in,params,values,to,array,return,get,jdbc,template,call,new,callable,statement,creator,in,params,get,declared,parameters
StoredProcedure -> public Map<String, Object> execute(Map<String, ?> inParams) throws DataAccessException;1356735495;Execute the stored procedure. Subclasses should define a strongly typed_execute method (with a meaningful name) that invokes this method, populating_the input map and extracting typed values from the output map. Subclass_execute methods will often take domain objects as arguments and return values._Alternatively, they can return void._@param inParams map of input parameters, keyed by name as in parameter_declarations. Output parameters need not (but can) be included in this map._It is legal for map entries to be {@code null}, and this will produce the_correct behavior using a NULL argument to the stored procedure._@return map of output params, keyed by name as in parameter declarations._Output parameters will appear here, with their values after the_stored procedure has been called.;public Map<String, Object> execute(Map<String, ?> inParams) throws DataAccessException {_		validateParameters(inParams.values().toArray())__		return getJdbcTemplate().call(newCallableStatementCreator(inParams), getDeclaredParameters())__	};execute,the,stored,procedure,subclasses,should,define,a,strongly,typed,execute,method,with,a,meaningful,name,that,invokes,this,method,populating,the,input,map,and,extracting,typed,values,from,the,output,map,subclass,execute,methods,will,often,take,domain,objects,as,arguments,and,return,values,alternatively,they,can,return,void,param,in,params,map,of,input,parameters,keyed,by,name,as,in,parameter,declarations,output,parameters,need,not,but,can,be,included,in,this,map,it,is,legal,for,map,entries,to,be,code,null,and,this,will,produce,the,correct,behavior,using,a,null,argument,to,the,stored,procedure,return,map,of,output,params,keyed,by,name,as,in,parameter,declarations,output,parameters,will,appear,here,with,their,values,after,the,stored,procedure,has,been,called;public,map,string,object,execute,map,string,in,params,throws,data,access,exception,validate,parameters,in,params,values,to,array,return,get,jdbc,template,call,new,callable,statement,creator,in,params,get,declared,parameters
StoredProcedure -> public Map<String, Object> execute(Map<String, ?> inParams) throws DataAccessException;1397137946;Execute the stored procedure. Subclasses should define a strongly typed_execute method (with a meaningful name) that invokes this method, populating_the input map and extracting typed values from the output map. Subclass_execute methods will often take domain objects as arguments and return values._Alternatively, they can return void._@param inParams map of input parameters, keyed by name as in parameter_declarations. Output parameters need not (but can) be included in this map._It is legal for map entries to be {@code null}, and this will produce the_correct behavior using a NULL argument to the stored procedure._@return map of output params, keyed by name as in parameter declarations._Output parameters will appear here, with their values after the_stored procedure has been called.;public Map<String, Object> execute(Map<String, ?> inParams) throws DataAccessException {_		validateParameters(inParams.values().toArray())__		return getJdbcTemplate().call(newCallableStatementCreator(inParams), getDeclaredParameters())__	};execute,the,stored,procedure,subclasses,should,define,a,strongly,typed,execute,method,with,a,meaningful,name,that,invokes,this,method,populating,the,input,map,and,extracting,typed,values,from,the,output,map,subclass,execute,methods,will,often,take,domain,objects,as,arguments,and,return,values,alternatively,they,can,return,void,param,in,params,map,of,input,parameters,keyed,by,name,as,in,parameter,declarations,output,parameters,need,not,but,can,be,included,in,this,map,it,is,legal,for,map,entries,to,be,code,null,and,this,will,produce,the,correct,behavior,using,a,null,argument,to,the,stored,procedure,return,map,of,output,params,keyed,by,name,as,in,parameter,declarations,output,parameters,will,appear,here,with,their,values,after,the,stored,procedure,has,been,called;public,map,string,object,execute,map,string,in,params,throws,data,access,exception,validate,parameters,in,params,values,to,array,return,get,jdbc,template,call,new,callable,statement,creator,in,params,get,declared,parameters
StoredProcedure -> public Map<String, Object> execute(Map<String, ?> inParams) throws DataAccessException;1467730834;Execute the stored procedure. Subclasses should define a strongly typed_execute method (with a meaningful name) that invokes this method, populating_the input map and extracting typed values from the output map. Subclass_execute methods will often take domain objects as arguments and return values._Alternatively, they can return void._@param inParams map of input parameters, keyed by name as in parameter_declarations. Output parameters need not (but can) be included in this map._It is legal for map entries to be {@code null}, and this will produce the_correct behavior using a NULL argument to the stored procedure._@return map of output params, keyed by name as in parameter declarations._Output parameters will appear here, with their values after the_stored procedure has been called.;public Map<String, Object> execute(Map<String, ?> inParams) throws DataAccessException {_		validateParameters(inParams.values().toArray())__		return getJdbcTemplate().call(newCallableStatementCreator(inParams), getDeclaredParameters())__	};execute,the,stored,procedure,subclasses,should,define,a,strongly,typed,execute,method,with,a,meaningful,name,that,invokes,this,method,populating,the,input,map,and,extracting,typed,values,from,the,output,map,subclass,execute,methods,will,often,take,domain,objects,as,arguments,and,return,values,alternatively,they,can,return,void,param,in,params,map,of,input,parameters,keyed,by,name,as,in,parameter,declarations,output,parameters,need,not,but,can,be,included,in,this,map,it,is,legal,for,map,entries,to,be,code,null,and,this,will,produce,the,correct,behavior,using,a,null,argument,to,the,stored,procedure,return,map,of,output,params,keyed,by,name,as,in,parameter,declarations,output,parameters,will,appear,here,with,their,values,after,the,stored,procedure,has,been,called;public,map,string,object,execute,map,string,in,params,throws,data,access,exception,validate,parameters,in,params,values,to,array,return,get,jdbc,template,call,new,callable,statement,creator,in,params,get,declared,parameters
StoredProcedure -> public Map<String, Object> execute(Map<String, ?> inParams) throws DataAccessException;1496837955;Execute the stored procedure. Subclasses should define a strongly typed_execute method (with a meaningful name) that invokes this method, populating_the input map and extracting typed values from the output map. Subclass_execute methods will often take domain objects as arguments and return values._Alternatively, they can return void._@param inParams map of input parameters, keyed by name as in parameter_declarations. Output parameters need not (but can) be included in this map._It is legal for map entries to be {@code null}, and this will produce the_correct behavior using a NULL argument to the stored procedure._@return map of output params, keyed by name as in parameter declarations._Output parameters will appear here, with their values after the_stored procedure has been called.;public Map<String, Object> execute(Map<String, ?> inParams) throws DataAccessException {_		validateParameters(inParams.values().toArray())__		return getJdbcTemplate().call(newCallableStatementCreator(inParams), getDeclaredParameters())__	};execute,the,stored,procedure,subclasses,should,define,a,strongly,typed,execute,method,with,a,meaningful,name,that,invokes,this,method,populating,the,input,map,and,extracting,typed,values,from,the,output,map,subclass,execute,methods,will,often,take,domain,objects,as,arguments,and,return,values,alternatively,they,can,return,void,param,in,params,map,of,input,parameters,keyed,by,name,as,in,parameter,declarations,output,parameters,need,not,but,can,be,included,in,this,map,it,is,legal,for,map,entries,to,be,code,null,and,this,will,produce,the,correct,behavior,using,a,null,argument,to,the,stored,procedure,return,map,of,output,params,keyed,by,name,as,in,parameter,declarations,output,parameters,will,appear,here,with,their,values,after,the,stored,procedure,has,been,called;public,map,string,object,execute,map,string,in,params,throws,data,access,exception,validate,parameters,in,params,values,to,array,return,get,jdbc,template,call,new,callable,statement,creator,in,params,get,declared,parameters
StoredProcedure -> public Map<String, Object> execute(Map<String, ?> inParams) throws DataAccessException;1520529117;Execute the stored procedure. Subclasses should define a strongly typed_execute method (with a meaningful name) that invokes this method, populating_the input map and extracting typed values from the output map. Subclass_execute methods will often take domain objects as arguments and return values._Alternatively, they can return void._@param inParams map of input parameters, keyed by name as in parameter_declarations. Output parameters need not (but can) be included in this map._It is legal for map entries to be {@code null}, and this will produce the_correct behavior using a NULL argument to the stored procedure._@return map of output params, keyed by name as in parameter declarations._Output parameters will appear here, with their values after the_stored procedure has been called.;public Map<String, Object> execute(Map<String, ?> inParams) throws DataAccessException {_		validateParameters(inParams.values().toArray())__		return getJdbcTemplate().call(newCallableStatementCreator(inParams), getDeclaredParameters())__	};execute,the,stored,procedure,subclasses,should,define,a,strongly,typed,execute,method,with,a,meaningful,name,that,invokes,this,method,populating,the,input,map,and,extracting,typed,values,from,the,output,map,subclass,execute,methods,will,often,take,domain,objects,as,arguments,and,return,values,alternatively,they,can,return,void,param,in,params,map,of,input,parameters,keyed,by,name,as,in,parameter,declarations,output,parameters,need,not,but,can,be,included,in,this,map,it,is,legal,for,map,entries,to,be,code,null,and,this,will,produce,the,correct,behavior,using,a,null,argument,to,the,stored,procedure,return,map,of,output,params,keyed,by,name,as,in,parameter,declarations,output,parameters,will,appear,here,with,their,values,after,the,stored,procedure,has,been,called;public,map,string,object,execute,map,string,in,params,throws,data,access,exception,validate,parameters,in,params,values,to,array,return,get,jdbc,template,call,new,callable,statement,creator,in,params,get,declared,parameters
StoredProcedure -> public Map<String, Object> execute(Map<String, ?> inParams) throws DataAccessException;1530174524;Execute the stored procedure. Subclasses should define a strongly typed_execute method (with a meaningful name) that invokes this method, populating_the input map and extracting typed values from the output map. Subclass_execute methods will often take domain objects as arguments and return values._Alternatively, they can return void._@param inParams map of input parameters, keyed by name as in parameter_declarations. Output parameters need not (but can) be included in this map._It is legal for map entries to be {@code null}, and this will produce the_correct behavior using a NULL argument to the stored procedure._@return map of output params, keyed by name as in parameter declarations._Output parameters will appear here, with their values after the_stored procedure has been called.;public Map<String, Object> execute(Map<String, ?> inParams) throws DataAccessException {_		validateParameters(inParams.values().toArray())__		return getJdbcTemplate().call(newCallableStatementCreator(inParams), getDeclaredParameters())__	};execute,the,stored,procedure,subclasses,should,define,a,strongly,typed,execute,method,with,a,meaningful,name,that,invokes,this,method,populating,the,input,map,and,extracting,typed,values,from,the,output,map,subclass,execute,methods,will,often,take,domain,objects,as,arguments,and,return,values,alternatively,they,can,return,void,param,in,params,map,of,input,parameters,keyed,by,name,as,in,parameter,declarations,output,parameters,need,not,but,can,be,included,in,this,map,it,is,legal,for,map,entries,to,be,code,null,and,this,will,produce,the,correct,behavior,using,a,null,argument,to,the,stored,procedure,return,map,of,output,params,keyed,by,name,as,in,parameter,declarations,output,parameters,will,appear,here,with,their,values,after,the,stored,procedure,has,been,called;public,map,string,object,execute,map,string,in,params,throws,data,access,exception,validate,parameters,in,params,values,to,array,return,get,jdbc,template,call,new,callable,statement,creator,in,params,get,declared,parameters
StoredProcedure -> protected StoredProcedure();1328020251;Allow use as a bean.;protected StoredProcedure() {_	};allow,use,as,a,bean;protected,stored,procedure
StoredProcedure -> protected StoredProcedure();1356735495;Allow use as a bean.;protected StoredProcedure() {_	};allow,use,as,a,bean;protected,stored,procedure
StoredProcedure -> protected StoredProcedure();1397137946;Allow use as a bean.;protected StoredProcedure() {_	};allow,use,as,a,bean;protected,stored,procedure
StoredProcedure -> protected StoredProcedure();1467730834;Allow use as a bean.;protected StoredProcedure() {_	};allow,use,as,a,bean;protected,stored,procedure
StoredProcedure -> protected StoredProcedure();1495868221;Allow use as a bean.;protected StoredProcedure() {_	};allow,use,as,a,bean;protected,stored,procedure
StoredProcedure -> protected StoredProcedure();1496837955;Allow use as a bean.;protected StoredProcedure() {_	};allow,use,as,a,bean;protected,stored,procedure
StoredProcedure -> protected StoredProcedure();1520529117;Allow use as a bean.;protected StoredProcedure() {_	};allow,use,as,a,bean;protected,stored,procedure
StoredProcedure -> protected StoredProcedure();1530174524;Allow use as a bean.;protected StoredProcedure() {_	};allow,use,as,a,bean;protected,stored,procedure
StoredProcedure -> protected StoredProcedure(JdbcTemplate jdbcTemplate, String name);1328020251;Create a new object wrapper for a stored procedure._@param jdbcTemplate JdbcTemplate which wraps DataSource_@param name name of the stored procedure in the database;protected StoredProcedure(JdbcTemplate jdbcTemplate, String name) {_		setJdbcTemplate(jdbcTemplate)__		setSql(name)__	};create,a,new,object,wrapper,for,a,stored,procedure,param,jdbc,template,jdbc,template,which,wraps,data,source,param,name,name,of,the,stored,procedure,in,the,database;protected,stored,procedure,jdbc,template,jdbc,template,string,name,set,jdbc,template,jdbc,template,set,sql,name
StoredProcedure -> protected StoredProcedure(JdbcTemplate jdbcTemplate, String name);1356735495;Create a new object wrapper for a stored procedure._@param jdbcTemplate JdbcTemplate which wraps DataSource_@param name name of the stored procedure in the database;protected StoredProcedure(JdbcTemplate jdbcTemplate, String name) {_		setJdbcTemplate(jdbcTemplate)__		setSql(name)__	};create,a,new,object,wrapper,for,a,stored,procedure,param,jdbc,template,jdbc,template,which,wraps,data,source,param,name,name,of,the,stored,procedure,in,the,database;protected,stored,procedure,jdbc,template,jdbc,template,string,name,set,jdbc,template,jdbc,template,set,sql,name
StoredProcedure -> protected StoredProcedure(JdbcTemplate jdbcTemplate, String name);1397137946;Create a new object wrapper for a stored procedure._@param jdbcTemplate JdbcTemplate which wraps DataSource_@param name name of the stored procedure in the database;protected StoredProcedure(JdbcTemplate jdbcTemplate, String name) {_		setJdbcTemplate(jdbcTemplate)__		setSql(name)__	};create,a,new,object,wrapper,for,a,stored,procedure,param,jdbc,template,jdbc,template,which,wraps,data,source,param,name,name,of,the,stored,procedure,in,the,database;protected,stored,procedure,jdbc,template,jdbc,template,string,name,set,jdbc,template,jdbc,template,set,sql,name
StoredProcedure -> protected StoredProcedure(JdbcTemplate jdbcTemplate, String name);1467730834;Create a new object wrapper for a stored procedure._@param jdbcTemplate JdbcTemplate which wraps DataSource_@param name name of the stored procedure in the database;protected StoredProcedure(JdbcTemplate jdbcTemplate, String name) {_		setJdbcTemplate(jdbcTemplate)__		setSql(name)__	};create,a,new,object,wrapper,for,a,stored,procedure,param,jdbc,template,jdbc,template,which,wraps,data,source,param,name,name,of,the,stored,procedure,in,the,database;protected,stored,procedure,jdbc,template,jdbc,template,string,name,set,jdbc,template,jdbc,template,set,sql,name
StoredProcedure -> protected StoredProcedure(JdbcTemplate jdbcTemplate, String name);1495868221;Create a new object wrapper for a stored procedure._@param jdbcTemplate JdbcTemplate which wraps DataSource_@param name name of the stored procedure in the database;protected StoredProcedure(JdbcTemplate jdbcTemplate, String name) {_		setJdbcTemplate(jdbcTemplate)__		setSql(name)__	};create,a,new,object,wrapper,for,a,stored,procedure,param,jdbc,template,jdbc,template,which,wraps,data,source,param,name,name,of,the,stored,procedure,in,the,database;protected,stored,procedure,jdbc,template,jdbc,template,string,name,set,jdbc,template,jdbc,template,set,sql,name
StoredProcedure -> protected StoredProcedure(JdbcTemplate jdbcTemplate, String name);1496837955;Create a new object wrapper for a stored procedure._@param jdbcTemplate JdbcTemplate which wraps DataSource_@param name name of the stored procedure in the database;protected StoredProcedure(JdbcTemplate jdbcTemplate, String name) {_		setJdbcTemplate(jdbcTemplate)__		setSql(name)__	};create,a,new,object,wrapper,for,a,stored,procedure,param,jdbc,template,jdbc,template,which,wraps,data,source,param,name,name,of,the,stored,procedure,in,the,database;protected,stored,procedure,jdbc,template,jdbc,template,string,name,set,jdbc,template,jdbc,template,set,sql,name
StoredProcedure -> protected StoredProcedure(JdbcTemplate jdbcTemplate, String name);1520529117;Create a new object wrapper for a stored procedure._@param jdbcTemplate JdbcTemplate which wraps DataSource_@param name name of the stored procedure in the database;protected StoredProcedure(JdbcTemplate jdbcTemplate, String name) {_		setJdbcTemplate(jdbcTemplate)__		setSql(name)__	};create,a,new,object,wrapper,for,a,stored,procedure,param,jdbc,template,jdbc,template,which,wraps,data,source,param,name,name,of,the,stored,procedure,in,the,database;protected,stored,procedure,jdbc,template,jdbc,template,string,name,set,jdbc,template,jdbc,template,set,sql,name
StoredProcedure -> protected StoredProcedure(JdbcTemplate jdbcTemplate, String name);1530174524;Create a new object wrapper for a stored procedure._@param jdbcTemplate the JdbcTemplate which wraps DataSource_@param name name of the stored procedure in the database;protected StoredProcedure(JdbcTemplate jdbcTemplate, String name) {_		setJdbcTemplate(jdbcTemplate)__		setSql(name)__	};create,a,new,object,wrapper,for,a,stored,procedure,param,jdbc,template,the,jdbc,template,which,wraps,data,source,param,name,name,of,the,stored,procedure,in,the,database;protected,stored,procedure,jdbc,template,jdbc,template,string,name,set,jdbc,template,jdbc,template,set,sql,name
