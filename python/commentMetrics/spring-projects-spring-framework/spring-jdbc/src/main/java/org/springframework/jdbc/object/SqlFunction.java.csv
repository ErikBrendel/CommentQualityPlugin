commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Specify the type that the result object is required to match.  * <p>If not specified, the result value will be exposed as  * returned by the JDBC driver.  */ ;/**  * Specify the type that the result object is required to match.  * <p>If not specified, the result value will be exposed as  * returned by the JDBC driver.  */ public void setResultType(Class<T> resultType) {     this.rowMapper.setRequiredType(resultType). }
true;protected;2;5;/**  * This implementation of this method extracts a single value from the  * single row returned by the function. If there are a different number  * of rows returned, this is treated as an error.  */ ;/**  * This implementation of this method extracts a single value from the  * single row returned by the function. If there are a different number  * of rows returned, this is treated as an error.  */ @Override @Nullable protected T mapRow(ResultSet rs, int rowNum) throws SQLException {     return this.rowMapper.mapRow(rs, rowNum). }
true;public;0;3;/**  * Convenient method to run the function without arguments.  * @return the value of the function  */ ;/**  * Convenient method to run the function without arguments.  * @return the value of the function  */ public int run() {     return run(new Object[0]). }
true;public;1;3;/**  * Convenient method to run the function with a single int argument.  * @param parameter single int parameter  * @return the value of the function  */ ;/**  * Convenient method to run the function with a single int argument.  * @param parameter single int parameter  * @return the value of the function  */ public int run(int parameter) {     return run(new Object[] { parameter }). }
true;public;1;7;/**  * Analogous to the SqlQuery.execute([]) method. This is a  * generic method to execute a query, taken a number of arguments.  * @param parameters array of parameters. These will be objects or  * object wrapper types for primitives.  * @return the value of the function  */ ;/**  * Analogous to the SqlQuery.execute([]) method. This is a  * generic method to execute a query, taken a number of arguments.  * @param parameters array of parameters. These will be objects or  * object wrapper types for primitives.  * @return the value of the function  */ public int run(Object... parameters) {     Object obj = super.findObject(parameters).     if (!(obj instanceof Number)) {         throw new TypeMismatchDataAccessException("Couldn't convert result object [" + obj + "] to int").     }     return ((Number) obj).intValue(). }
true;public;0;4;/**  * Convenient method to run the function without arguments,  * returning the value as an object.  * @return the value of the function  */ ;/**  * Convenient method to run the function without arguments,  * returning the value as an object.  * @return the value of the function  */ @Nullable public Object runGeneric() {     return findObject((Object[]) null, null). }
true;public;1;4;/**  * Convenient method to run the function with a single int argument.  * @param parameter single int parameter  * @return the value of the function as an Object  */ ;/**  * Convenient method to run the function with a single int argument.  * @param parameter single int parameter  * @return the value of the function as an Object  */ @Nullable public Object runGeneric(int parameter) {     return findObject(parameter). }
true;public;1;4;/**  * Analogous to the {@code SqlQuery.findObject(Object[])} method.  * This is a generic method to execute a query, taken a number of arguments.  * @param parameters array of parameters. These will be objects or  * object wrapper types for primitives.  * @return the value of the function, as an Object  * @see #execute(Object[])  */ ;/**  * Analogous to the {@code SqlQuery.findObject(Object[])} method.  * This is a generic method to execute a query, taken a number of arguments.  * @param parameters array of parameters. These will be objects or  * object wrapper types for primitives.  * @return the value of the function, as an Object  * @see #execute(Object[])  */ @Nullable public Object runGeneric(Object[] parameters) {     return findObject(parameters). }
