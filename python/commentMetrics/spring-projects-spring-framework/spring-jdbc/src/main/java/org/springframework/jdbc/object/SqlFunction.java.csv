# id;timestamp;commentText;codeText;commentWords;codeWords
SqlFunction -> @Nullable 	public Object runGeneric();1496837955;Convenient method to run the function without arguments,_returning the value as an object._@return the value of the function;@Nullable_	public Object runGeneric() {_		return findObject((Object[]) null, null)__	};convenient,method,to,run,the,function,without,arguments,returning,the,value,as,an,object,return,the,value,of,the,function;nullable,public,object,run,generic,return,find,object,object,null,null
SqlFunction -> @Nullable 	public Object runGeneric();1502974979;Convenient method to run the function without arguments,_returning the value as an object._@return the value of the function;@Nullable_	public Object runGeneric() {_		return findObject((Object[]) null, null)__	};convenient,method,to,run,the,function,without,arguments,returning,the,value,as,an,object,return,the,value,of,the,function;nullable,public,object,run,generic,return,find,object,object,null,null
SqlFunction -> @Nullable 	public Object runGeneric();1530174524;Convenient method to run the function without arguments,_returning the value as an object._@return the value of the function;@Nullable_	public Object runGeneric() {_		return findObject((Object[]) null, null)__	};convenient,method,to,run,the,function,without,arguments,returning,the,value,as,an,object,return,the,value,of,the,function;nullable,public,object,run,generic,return,find,object,object,null,null
SqlFunction -> public SqlFunction();1328020251;Constructor to allow use as a JavaBean._A DataSource, SQL and any parameters must be supplied before_invoking the <code>compile</code> method and using this object._@see #setDataSource_@see #setSql_@see #compile;public SqlFunction() {_		setRowsExpected(1)__	};constructor,to,allow,use,as,a,java,bean,a,data,source,sql,and,any,parameters,must,be,supplied,before,invoking,the,code,compile,code,method,and,using,this,object,see,set,data,source,see,set,sql,see,compile;public,sql,function,set,rows,expected,1
SqlFunction -> public SqlFunction();1356735495;Constructor to allow use as a JavaBean._A DataSource, SQL and any parameters must be supplied before_invoking the {@code compile} method and using this object._@see #setDataSource_@see #setSql_@see #compile;public SqlFunction() {_		setRowsExpected(1)__	};constructor,to,allow,use,as,a,java,bean,a,data,source,sql,and,any,parameters,must,be,supplied,before,invoking,the,code,compile,method,and,using,this,object,see,set,data,source,see,set,sql,see,compile;public,sql,function,set,rows,expected,1
SqlFunction -> public SqlFunction();1467730834;Constructor to allow use as a JavaBean._A DataSource, SQL and any parameters must be supplied before_invoking the {@code compile} method and using this object._@see #setDataSource_@see #setSql_@see #compile;public SqlFunction() {_		setRowsExpected(1)__	};constructor,to,allow,use,as,a,java,bean,a,data,source,sql,and,any,parameters,must,be,supplied,before,invoking,the,code,compile,method,and,using,this,object,see,set,data,source,see,set,sql,see,compile;public,sql,function,set,rows,expected,1
SqlFunction -> public SqlFunction();1496837955;Constructor to allow use as a JavaBean._A DataSource, SQL and any parameters must be supplied before_invoking the {@code compile} method and using this object._@see #setDataSource_@see #setSql_@see #compile;public SqlFunction() {_		setRowsExpected(1)__	};constructor,to,allow,use,as,a,java,bean,a,data,source,sql,and,any,parameters,must,be,supplied,before,invoking,the,code,compile,method,and,using,this,object,see,set,data,source,see,set,sql,see,compile;public,sql,function,set,rows,expected,1
SqlFunction -> public SqlFunction();1502974979;Constructor to allow use as a JavaBean._A DataSource, SQL and any parameters must be supplied before_invoking the {@code compile} method and using this object._@see #setDataSource_@see #setSql_@see #compile;public SqlFunction() {_		setRowsExpected(1)__	};constructor,to,allow,use,as,a,java,bean,a,data,source,sql,and,any,parameters,must,be,supplied,before,invoking,the,code,compile,method,and,using,this,object,see,set,data,source,see,set,sql,see,compile;public,sql,function,set,rows,expected,1
SqlFunction -> public SqlFunction();1530174524;Constructor to allow use as a JavaBean._A DataSource, SQL and any parameters must be supplied before_invoking the {@code compile} method and using this object._@see #setDataSource_@see #setSql_@see #compile;public SqlFunction() {_		setRowsExpected(1)__	};constructor,to,allow,use,as,a,java,bean,a,data,source,sql,and,any,parameters,must,be,supplied,before,invoking,the,code,compile,method,and,using,this,object,see,set,data,source,see,set,sql,see,compile;public,sql,function,set,rows,expected,1
SqlFunction -> public void setResultType(Class<T> resultType);1328020251;Specify the type that the result object is required to match._<p>If not specified, the result value will be exposed as_returned by the JDBC driver.;public void setResultType(Class<T> resultType) {_		this.rowMapper.setRequiredType(resultType)__	};specify,the,type,that,the,result,object,is,required,to,match,p,if,not,specified,the,result,value,will,be,exposed,as,returned,by,the,jdbc,driver;public,void,set,result,type,class,t,result,type,this,row,mapper,set,required,type,result,type
SqlFunction -> public void setResultType(Class<T> resultType);1356735495;Specify the type that the result object is required to match._<p>If not specified, the result value will be exposed as_returned by the JDBC driver.;public void setResultType(Class<T> resultType) {_		this.rowMapper.setRequiredType(resultType)__	};specify,the,type,that,the,result,object,is,required,to,match,p,if,not,specified,the,result,value,will,be,exposed,as,returned,by,the,jdbc,driver;public,void,set,result,type,class,t,result,type,this,row,mapper,set,required,type,result,type
SqlFunction -> public void setResultType(Class<T> resultType);1467730834;Specify the type that the result object is required to match._<p>If not specified, the result value will be exposed as_returned by the JDBC driver.;public void setResultType(Class<T> resultType) {_		this.rowMapper.setRequiredType(resultType)__	};specify,the,type,that,the,result,object,is,required,to,match,p,if,not,specified,the,result,value,will,be,exposed,as,returned,by,the,jdbc,driver;public,void,set,result,type,class,t,result,type,this,row,mapper,set,required,type,result,type
SqlFunction -> public void setResultType(Class<T> resultType);1496837955;Specify the type that the result object is required to match._<p>If not specified, the result value will be exposed as_returned by the JDBC driver.;public void setResultType(Class<T> resultType) {_		this.rowMapper.setRequiredType(resultType)__	};specify,the,type,that,the,result,object,is,required,to,match,p,if,not,specified,the,result,value,will,be,exposed,as,returned,by,the,jdbc,driver;public,void,set,result,type,class,t,result,type,this,row,mapper,set,required,type,result,type
SqlFunction -> public void setResultType(Class<T> resultType);1502974979;Specify the type that the result object is required to match._<p>If not specified, the result value will be exposed as_returned by the JDBC driver.;public void setResultType(Class<T> resultType) {_		this.rowMapper.setRequiredType(resultType)__	};specify,the,type,that,the,result,object,is,required,to,match,p,if,not,specified,the,result,value,will,be,exposed,as,returned,by,the,jdbc,driver;public,void,set,result,type,class,t,result,type,this,row,mapper,set,required,type,result,type
SqlFunction -> public void setResultType(Class<T> resultType);1530174524;Specify the type that the result object is required to match._<p>If not specified, the result value will be exposed as_returned by the JDBC driver.;public void setResultType(Class<T> resultType) {_		this.rowMapper.setRequiredType(resultType)__	};specify,the,type,that,the,result,object,is,required,to,match,p,if,not,specified,the,result,value,will,be,exposed,as,returned,by,the,jdbc,driver;public,void,set,result,type,class,t,result,type,this,row,mapper,set,required,type,result,type
SqlFunction -> @Override 	@Nullable 	protected T mapRow(ResultSet rs, int rowNum) throws SQLException;1502974979;This implementation of this method extracts a single value from the_single row returned by the function. If there are a different number_of rows returned, this is treated as an error.;@Override_	@Nullable_	protected T mapRow(ResultSet rs, int rowNum) throws SQLException {_		return this.rowMapper.mapRow(rs, rowNum)__	};this,implementation,of,this,method,extracts,a,single,value,from,the,single,row,returned,by,the,function,if,there,are,a,different,number,of,rows,returned,this,is,treated,as,an,error;override,nullable,protected,t,map,row,result,set,rs,int,row,num,throws,sqlexception,return,this,row,mapper,map,row,rs,row,num
SqlFunction -> @Override 	@Nullable 	protected T mapRow(ResultSet rs, int rowNum) throws SQLException;1530174524;This implementation of this method extracts a single value from the_single row returned by the function. If there are a different number_of rows returned, this is treated as an error.;@Override_	@Nullable_	protected T mapRow(ResultSet rs, int rowNum) throws SQLException {_		return this.rowMapper.mapRow(rs, rowNum)__	};this,implementation,of,this,method,extracts,a,single,value,from,the,single,row,returned,by,the,function,if,there,are,a,different,number,of,rows,returned,this,is,treated,as,an,error;override,nullable,protected,t,map,row,result,set,rs,int,row,num,throws,sqlexception,return,this,row,mapper,map,row,rs,row,num
SqlFunction -> public Object runGeneric(Object[] parameters);1328020251;Analogous to the <code>SqlQuery.findObject(Object[])</code> method._This is a generic method to execute a query, taken a number of arguments._@param parameters array of parameters. These will be objects or_object wrapper types for primitives._@return the value of the function, as an Object_@see #execute(Object[]);public Object runGeneric(Object[] parameters) {_		return findObject(parameters)__	};analogous,to,the,code,sql,query,find,object,object,code,method,this,is,a,generic,method,to,execute,a,query,taken,a,number,of,arguments,param,parameters,array,of,parameters,these,will,be,objects,or,object,wrapper,types,for,primitives,return,the,value,of,the,function,as,an,object,see,execute,object;public,object,run,generic,object,parameters,return,find,object,parameters
SqlFunction -> public Object runGeneric(Object[] parameters);1356735495;Analogous to the {@code SqlQuery.findObject(Object[])} method._This is a generic method to execute a query, taken a number of arguments._@param parameters array of parameters. These will be objects or_object wrapper types for primitives._@return the value of the function, as an Object_@see #execute(Object[]);public Object runGeneric(Object[] parameters) {_		return findObject(parameters)__	};analogous,to,the,code,sql,query,find,object,object,method,this,is,a,generic,method,to,execute,a,query,taken,a,number,of,arguments,param,parameters,array,of,parameters,these,will,be,objects,or,object,wrapper,types,for,primitives,return,the,value,of,the,function,as,an,object,see,execute,object;public,object,run,generic,object,parameters,return,find,object,parameters
SqlFunction -> public Object runGeneric(Object[] parameters);1467730834;Analogous to the {@code SqlQuery.findObject(Object[])} method._This is a generic method to execute a query, taken a number of arguments._@param parameters array of parameters. These will be objects or_object wrapper types for primitives._@return the value of the function, as an Object_@see #execute(Object[]);public Object runGeneric(Object[] parameters) {_		return findObject(parameters)__	};analogous,to,the,code,sql,query,find,object,object,method,this,is,a,generic,method,to,execute,a,query,taken,a,number,of,arguments,param,parameters,array,of,parameters,these,will,be,objects,or,object,wrapper,types,for,primitives,return,the,value,of,the,function,as,an,object,see,execute,object;public,object,run,generic,object,parameters,return,find,object,parameters
SqlFunction -> public SqlFunction(DataSource ds, String sql);1328020251;Create a new SqlFunction object with SQL, but without parameters._Must add parameters or settle with none._@param ds DataSource to obtain connections from_@param sql SQL to execute;public SqlFunction(DataSource ds, String sql) {_		setRowsExpected(1)__		setDataSource(ds)__		setSql(sql)__	};create,a,new,sql,function,object,with,sql,but,without,parameters,must,add,parameters,or,settle,with,none,param,ds,data,source,to,obtain,connections,from,param,sql,sql,to,execute;public,sql,function,data,source,ds,string,sql,set,rows,expected,1,set,data,source,ds,set,sql,sql
SqlFunction -> public SqlFunction(DataSource ds, String sql);1356735495;Create a new SqlFunction object with SQL, but without parameters._Must add parameters or settle with none._@param ds DataSource to obtain connections from_@param sql SQL to execute;public SqlFunction(DataSource ds, String sql) {_		setRowsExpected(1)__		setDataSource(ds)__		setSql(sql)__	};create,a,new,sql,function,object,with,sql,but,without,parameters,must,add,parameters,or,settle,with,none,param,ds,data,source,to,obtain,connections,from,param,sql,sql,to,execute;public,sql,function,data,source,ds,string,sql,set,rows,expected,1,set,data,source,ds,set,sql,sql
SqlFunction -> public SqlFunction(DataSource ds, String sql);1467730834;Create a new SqlFunction object with SQL, but without parameters._Must add parameters or settle with none._@param ds DataSource to obtain connections from_@param sql SQL to execute;public SqlFunction(DataSource ds, String sql) {_		setRowsExpected(1)__		setDataSource(ds)__		setSql(sql)__	};create,a,new,sql,function,object,with,sql,but,without,parameters,must,add,parameters,or,settle,with,none,param,ds,data,source,to,obtain,connections,from,param,sql,sql,to,execute;public,sql,function,data,source,ds,string,sql,set,rows,expected,1,set,data,source,ds,set,sql,sql
SqlFunction -> public SqlFunction(DataSource ds, String sql);1496837955;Create a new SqlFunction object with SQL, but without parameters._Must add parameters or settle with none._@param ds DataSource to obtain connections from_@param sql SQL to execute;public SqlFunction(DataSource ds, String sql) {_		setRowsExpected(1)__		setDataSource(ds)__		setSql(sql)__	};create,a,new,sql,function,object,with,sql,but,without,parameters,must,add,parameters,or,settle,with,none,param,ds,data,source,to,obtain,connections,from,param,sql,sql,to,execute;public,sql,function,data,source,ds,string,sql,set,rows,expected,1,set,data,source,ds,set,sql,sql
SqlFunction -> public SqlFunction(DataSource ds, String sql);1502974979;Create a new SqlFunction object with SQL, but without parameters._Must add parameters or settle with none._@param ds DataSource to obtain connections from_@param sql SQL to execute;public SqlFunction(DataSource ds, String sql) {_		setRowsExpected(1)__		setDataSource(ds)__		setSql(sql)__	};create,a,new,sql,function,object,with,sql,but,without,parameters,must,add,parameters,or,settle,with,none,param,ds,data,source,to,obtain,connections,from,param,sql,sql,to,execute;public,sql,function,data,source,ds,string,sql,set,rows,expected,1,set,data,source,ds,set,sql,sql
SqlFunction -> public SqlFunction(DataSource ds, String sql);1530174524;Create a new SqlFunction object with SQL, but without parameters._Must add parameters or settle with none._@param ds the DataSource to obtain connections from_@param sql the SQL to execute;public SqlFunction(DataSource ds, String sql) {_		setRowsExpected(1)__		setDataSource(ds)__		setSql(sql)__	};create,a,new,sql,function,object,with,sql,but,without,parameters,must,add,parameters,or,settle,with,none,param,ds,the,data,source,to,obtain,connections,from,param,sql,the,sql,to,execute;public,sql,function,data,source,ds,string,sql,set,rows,expected,1,set,data,source,ds,set,sql,sql
SqlFunction -> public SqlFunction(DataSource ds, String sql, int[] types);1328020251;Create a new SqlFunction object with SQL and parameters._@param ds DataSource to obtain connections from_@param sql SQL to execute_@param types SQL types of the parameters, as defined in the_<code>java.sql.Types</code> class_@see java.sql.Types;public SqlFunction(DataSource ds, String sql, int[] types) {_		setRowsExpected(1)__		setDataSource(ds)__		setSql(sql)__		setTypes(types)__	};create,a,new,sql,function,object,with,sql,and,parameters,param,ds,data,source,to,obtain,connections,from,param,sql,sql,to,execute,param,types,sql,types,of,the,parameters,as,defined,in,the,code,java,sql,types,code,class,see,java,sql,types;public,sql,function,data,source,ds,string,sql,int,types,set,rows,expected,1,set,data,source,ds,set,sql,sql,set,types,types
SqlFunction -> public SqlFunction(DataSource ds, String sql, int[] types);1356735495;Create a new SqlFunction object with SQL and parameters._@param ds DataSource to obtain connections from_@param sql SQL to execute_@param types SQL types of the parameters, as defined in the_{@code java.sql.Types} class_@see java.sql.Types;public SqlFunction(DataSource ds, String sql, int[] types) {_		setRowsExpected(1)__		setDataSource(ds)__		setSql(sql)__		setTypes(types)__	};create,a,new,sql,function,object,with,sql,and,parameters,param,ds,data,source,to,obtain,connections,from,param,sql,sql,to,execute,param,types,sql,types,of,the,parameters,as,defined,in,the,code,java,sql,types,class,see,java,sql,types;public,sql,function,data,source,ds,string,sql,int,types,set,rows,expected,1,set,data,source,ds,set,sql,sql,set,types,types
SqlFunction -> public SqlFunction(DataSource ds, String sql, int[] types);1467730834;Create a new SqlFunction object with SQL and parameters._@param ds DataSource to obtain connections from_@param sql SQL to execute_@param types SQL types of the parameters, as defined in the_{@code java.sql.Types} class_@see java.sql.Types;public SqlFunction(DataSource ds, String sql, int[] types) {_		setRowsExpected(1)__		setDataSource(ds)__		setSql(sql)__		setTypes(types)__	};create,a,new,sql,function,object,with,sql,and,parameters,param,ds,data,source,to,obtain,connections,from,param,sql,sql,to,execute,param,types,sql,types,of,the,parameters,as,defined,in,the,code,java,sql,types,class,see,java,sql,types;public,sql,function,data,source,ds,string,sql,int,types,set,rows,expected,1,set,data,source,ds,set,sql,sql,set,types,types
SqlFunction -> public SqlFunction(DataSource ds, String sql, int[] types);1496837955;Create a new SqlFunction object with SQL and parameters._@param ds DataSource to obtain connections from_@param sql SQL to execute_@param types SQL types of the parameters, as defined in the_{@code java.sql.Types} class_@see java.sql.Types;public SqlFunction(DataSource ds, String sql, int[] types) {_		setRowsExpected(1)__		setDataSource(ds)__		setSql(sql)__		setTypes(types)__	};create,a,new,sql,function,object,with,sql,and,parameters,param,ds,data,source,to,obtain,connections,from,param,sql,sql,to,execute,param,types,sql,types,of,the,parameters,as,defined,in,the,code,java,sql,types,class,see,java,sql,types;public,sql,function,data,source,ds,string,sql,int,types,set,rows,expected,1,set,data,source,ds,set,sql,sql,set,types,types
SqlFunction -> public SqlFunction(DataSource ds, String sql, int[] types);1502974979;Create a new SqlFunction object with SQL and parameters._@param ds DataSource to obtain connections from_@param sql SQL to execute_@param types SQL types of the parameters, as defined in the_{@code java.sql.Types} class_@see java.sql.Types;public SqlFunction(DataSource ds, String sql, int[] types) {_		setRowsExpected(1)__		setDataSource(ds)__		setSql(sql)__		setTypes(types)__	};create,a,new,sql,function,object,with,sql,and,parameters,param,ds,data,source,to,obtain,connections,from,param,sql,sql,to,execute,param,types,sql,types,of,the,parameters,as,defined,in,the,code,java,sql,types,class,see,java,sql,types;public,sql,function,data,source,ds,string,sql,int,types,set,rows,expected,1,set,data,source,ds,set,sql,sql,set,types,types
SqlFunction -> public SqlFunction(DataSource ds, String sql, int[] types);1530174524;Create a new SqlFunction object with SQL and parameters._@param ds the DataSource to obtain connections from_@param sql the SQL to execute_@param types the SQL types of the parameters, as defined in the_{@code java.sql.Types} class_@see java.sql.Types;public SqlFunction(DataSource ds, String sql, int[] types) {_		setRowsExpected(1)__		setDataSource(ds)__		setSql(sql)__		setTypes(types)__	};create,a,new,sql,function,object,with,sql,and,parameters,param,ds,the,data,source,to,obtain,connections,from,param,sql,the,sql,to,execute,param,types,the,sql,types,of,the,parameters,as,defined,in,the,code,java,sql,types,class,see,java,sql,types;public,sql,function,data,source,ds,string,sql,int,types,set,rows,expected,1,set,data,source,ds,set,sql,sql,set,types,types
SqlFunction -> public SqlFunction(DataSource ds, String sql, int[] types, Class<T> resultType);1328020251;Create a new SqlFunction object with SQL, parameters and a result type._@param ds DataSource to obtain connections from_@param sql SQL to execute_@param types SQL types of the parameters, as defined in the_<code>java.sql.Types</code> class_@param resultType the type that the result object is required to match_@see #setResultType(Class)_@see java.sql.Types;public SqlFunction(DataSource ds, String sql, int[] types, Class<T> resultType) {_		setRowsExpected(1)__		setDataSource(ds)__		setSql(sql)__		setTypes(types)__		setResultType(resultType)__	};create,a,new,sql,function,object,with,sql,parameters,and,a,result,type,param,ds,data,source,to,obtain,connections,from,param,sql,sql,to,execute,param,types,sql,types,of,the,parameters,as,defined,in,the,code,java,sql,types,code,class,param,result,type,the,type,that,the,result,object,is,required,to,match,see,set,result,type,class,see,java,sql,types;public,sql,function,data,source,ds,string,sql,int,types,class,t,result,type,set,rows,expected,1,set,data,source,ds,set,sql,sql,set,types,types,set,result,type,result,type
SqlFunction -> public SqlFunction(DataSource ds, String sql, int[] types, Class<T> resultType);1356735495;Create a new SqlFunction object with SQL, parameters and a result type._@param ds DataSource to obtain connections from_@param sql SQL to execute_@param types SQL types of the parameters, as defined in the_{@code java.sql.Types} class_@param resultType the type that the result object is required to match_@see #setResultType(Class)_@see java.sql.Types;public SqlFunction(DataSource ds, String sql, int[] types, Class<T> resultType) {_		setRowsExpected(1)__		setDataSource(ds)__		setSql(sql)__		setTypes(types)__		setResultType(resultType)__	};create,a,new,sql,function,object,with,sql,parameters,and,a,result,type,param,ds,data,source,to,obtain,connections,from,param,sql,sql,to,execute,param,types,sql,types,of,the,parameters,as,defined,in,the,code,java,sql,types,class,param,result,type,the,type,that,the,result,object,is,required,to,match,see,set,result,type,class,see,java,sql,types;public,sql,function,data,source,ds,string,sql,int,types,class,t,result,type,set,rows,expected,1,set,data,source,ds,set,sql,sql,set,types,types,set,result,type,result,type
SqlFunction -> public SqlFunction(DataSource ds, String sql, int[] types, Class<T> resultType);1467730834;Create a new SqlFunction object with SQL, parameters and a result type._@param ds DataSource to obtain connections from_@param sql SQL to execute_@param types SQL types of the parameters, as defined in the_{@code java.sql.Types} class_@param resultType the type that the result object is required to match_@see #setResultType(Class)_@see java.sql.Types;public SqlFunction(DataSource ds, String sql, int[] types, Class<T> resultType) {_		setRowsExpected(1)__		setDataSource(ds)__		setSql(sql)__		setTypes(types)__		setResultType(resultType)__	};create,a,new,sql,function,object,with,sql,parameters,and,a,result,type,param,ds,data,source,to,obtain,connections,from,param,sql,sql,to,execute,param,types,sql,types,of,the,parameters,as,defined,in,the,code,java,sql,types,class,param,result,type,the,type,that,the,result,object,is,required,to,match,see,set,result,type,class,see,java,sql,types;public,sql,function,data,source,ds,string,sql,int,types,class,t,result,type,set,rows,expected,1,set,data,source,ds,set,sql,sql,set,types,types,set,result,type,result,type
SqlFunction -> public SqlFunction(DataSource ds, String sql, int[] types, Class<T> resultType);1496837955;Create a new SqlFunction object with SQL, parameters and a result type._@param ds DataSource to obtain connections from_@param sql SQL to execute_@param types SQL types of the parameters, as defined in the_{@code java.sql.Types} class_@param resultType the type that the result object is required to match_@see #setResultType(Class)_@see java.sql.Types;public SqlFunction(DataSource ds, String sql, int[] types, Class<T> resultType) {_		setRowsExpected(1)__		setDataSource(ds)__		setSql(sql)__		setTypes(types)__		setResultType(resultType)__	};create,a,new,sql,function,object,with,sql,parameters,and,a,result,type,param,ds,data,source,to,obtain,connections,from,param,sql,sql,to,execute,param,types,sql,types,of,the,parameters,as,defined,in,the,code,java,sql,types,class,param,result,type,the,type,that,the,result,object,is,required,to,match,see,set,result,type,class,see,java,sql,types;public,sql,function,data,source,ds,string,sql,int,types,class,t,result,type,set,rows,expected,1,set,data,source,ds,set,sql,sql,set,types,types,set,result,type,result,type
SqlFunction -> public SqlFunction(DataSource ds, String sql, int[] types, Class<T> resultType);1502974979;Create a new SqlFunction object with SQL, parameters and a result type._@param ds DataSource to obtain connections from_@param sql SQL to execute_@param types SQL types of the parameters, as defined in the_{@code java.sql.Types} class_@param resultType the type that the result object is required to match_@see #setResultType(Class)_@see java.sql.Types;public SqlFunction(DataSource ds, String sql, int[] types, Class<T> resultType) {_		setRowsExpected(1)__		setDataSource(ds)__		setSql(sql)__		setTypes(types)__		setResultType(resultType)__	};create,a,new,sql,function,object,with,sql,parameters,and,a,result,type,param,ds,data,source,to,obtain,connections,from,param,sql,sql,to,execute,param,types,sql,types,of,the,parameters,as,defined,in,the,code,java,sql,types,class,param,result,type,the,type,that,the,result,object,is,required,to,match,see,set,result,type,class,see,java,sql,types;public,sql,function,data,source,ds,string,sql,int,types,class,t,result,type,set,rows,expected,1,set,data,source,ds,set,sql,sql,set,types,types,set,result,type,result,type
SqlFunction -> public SqlFunction(DataSource ds, String sql, int[] types, Class<T> resultType);1530174524;Create a new SqlFunction object with SQL, parameters and a result type._@param ds the DataSource to obtain connections from_@param sql the SQL to execute_@param types the SQL types of the parameters, as defined in the_{@code java.sql.Types} class_@param resultType the type that the result object is required to match_@see #setResultType(Class)_@see java.sql.Types;public SqlFunction(DataSource ds, String sql, int[] types, Class<T> resultType) {_		setRowsExpected(1)__		setDataSource(ds)__		setSql(sql)__		setTypes(types)__		setResultType(resultType)__	};create,a,new,sql,function,object,with,sql,parameters,and,a,result,type,param,ds,the,data,source,to,obtain,connections,from,param,sql,the,sql,to,execute,param,types,the,sql,types,of,the,parameters,as,defined,in,the,code,java,sql,types,class,param,result,type,the,type,that,the,result,object,is,required,to,match,see,set,result,type,class,see,java,sql,types;public,sql,function,data,source,ds,string,sql,int,types,class,t,result,type,set,rows,expected,1,set,data,source,ds,set,sql,sql,set,types,types,set,result,type,result,type
SqlFunction -> public int run();1328020251;Convenient method to run the function without arguments._@return the value of the function;public int run() {_		return run(new Object[0])__	};convenient,method,to,run,the,function,without,arguments,return,the,value,of,the,function;public,int,run,return,run,new,object,0
SqlFunction -> public int run();1356735495;Convenient method to run the function without arguments._@return the value of the function;public int run() {_		return run(new Object[0])__	};convenient,method,to,run,the,function,without,arguments,return,the,value,of,the,function;public,int,run,return,run,new,object,0
SqlFunction -> public int run();1467730834;Convenient method to run the function without arguments._@return the value of the function;public int run() {_		return run(new Object[0])__	};convenient,method,to,run,the,function,without,arguments,return,the,value,of,the,function;public,int,run,return,run,new,object,0
SqlFunction -> public int run();1496837955;Convenient method to run the function without arguments._@return the value of the function;public int run() {_		return run(new Object[0])__	};convenient,method,to,run,the,function,without,arguments,return,the,value,of,the,function;public,int,run,return,run,new,object,0
SqlFunction -> public int run();1502974979;Convenient method to run the function without arguments._@return the value of the function;public int run() {_		return run(new Object[0])__	};convenient,method,to,run,the,function,without,arguments,return,the,value,of,the,function;public,int,run,return,run,new,object,0
SqlFunction -> public int run();1530174524;Convenient method to run the function without arguments._@return the value of the function;public int run() {_		return run(new Object[0])__	};convenient,method,to,run,the,function,without,arguments,return,the,value,of,the,function;public,int,run,return,run,new,object,0
SqlFunction -> public Object runGeneric();1328020251;Convenient method to run the function without arguments,_returning the value as an object._@return the value of the function;public Object runGeneric() {_		return findObject((Object[]) null)__	};convenient,method,to,run,the,function,without,arguments,returning,the,value,as,an,object,return,the,value,of,the,function;public,object,run,generic,return,find,object,object,null
SqlFunction -> public Object runGeneric();1356735495;Convenient method to run the function without arguments,_returning the value as an object._@return the value of the function;public Object runGeneric() {_		return findObject((Object[]) null)__	};convenient,method,to,run,the,function,without,arguments,returning,the,value,as,an,object,return,the,value,of,the,function;public,object,run,generic,return,find,object,object,null
SqlFunction -> public Object runGeneric();1467730834;Convenient method to run the function without arguments,_returning the value as an object._@return the value of the function;public Object runGeneric() {_		return findObject((Object[]) null)__	};convenient,method,to,run,the,function,without,arguments,returning,the,value,as,an,object,return,the,value,of,the,function;public,object,run,generic,return,find,object,object,null
SqlFunction -> public int run(Object... parameters);1328020251;Analogous to the SqlQuery.execute([]) method. This is a_generic method to execute a query, taken a number of arguments._@param parameters array of parameters. These will be objects or_object wrapper types for primitives._@return the value of the function;public int run(Object... parameters) {_		Object obj = super.findObject(parameters)__		if (!(obj instanceof Number)) {_			throw new TypeMismatchDataAccessException("Couldn't convert result object [" + obj + "] to int")__		}_		return ((Number) obj).intValue()__	};analogous,to,the,sql,query,execute,method,this,is,a,generic,method,to,execute,a,query,taken,a,number,of,arguments,param,parameters,array,of,parameters,these,will,be,objects,or,object,wrapper,types,for,primitives,return,the,value,of,the,function;public,int,run,object,parameters,object,obj,super,find,object,parameters,if,obj,instanceof,number,throw,new,type,mismatch,data,access,exception,couldn,t,convert,result,object,obj,to,int,return,number,obj,int,value
SqlFunction -> public int run(Object... parameters);1356735495;Analogous to the SqlQuery.execute([]) method. This is a_generic method to execute a query, taken a number of arguments._@param parameters array of parameters. These will be objects or_object wrapper types for primitives._@return the value of the function;public int run(Object... parameters) {_		Object obj = super.findObject(parameters)__		if (!(obj instanceof Number)) {_			throw new TypeMismatchDataAccessException("Couldn't convert result object [" + obj + "] to int")__		}_		return ((Number) obj).intValue()__	};analogous,to,the,sql,query,execute,method,this,is,a,generic,method,to,execute,a,query,taken,a,number,of,arguments,param,parameters,array,of,parameters,these,will,be,objects,or,object,wrapper,types,for,primitives,return,the,value,of,the,function;public,int,run,object,parameters,object,obj,super,find,object,parameters,if,obj,instanceof,number,throw,new,type,mismatch,data,access,exception,couldn,t,convert,result,object,obj,to,int,return,number,obj,int,value
SqlFunction -> public int run(Object... parameters);1467730834;Analogous to the SqlQuery.execute([]) method. This is a_generic method to execute a query, taken a number of arguments._@param parameters array of parameters. These will be objects or_object wrapper types for primitives._@return the value of the function;public int run(Object... parameters) {_		Object obj = super.findObject(parameters)__		if (!(obj instanceof Number)) {_			throw new TypeMismatchDataAccessException("Couldn't convert result object [" + obj + "] to int")__		}_		return ((Number) obj).intValue()__	};analogous,to,the,sql,query,execute,method,this,is,a,generic,method,to,execute,a,query,taken,a,number,of,arguments,param,parameters,array,of,parameters,these,will,be,objects,or,object,wrapper,types,for,primitives,return,the,value,of,the,function;public,int,run,object,parameters,object,obj,super,find,object,parameters,if,obj,instanceof,number,throw,new,type,mismatch,data,access,exception,couldn,t,convert,result,object,obj,to,int,return,number,obj,int,value
SqlFunction -> public int run(Object... parameters);1496837955;Analogous to the SqlQuery.execute([]) method. This is a_generic method to execute a query, taken a number of arguments._@param parameters array of parameters. These will be objects or_object wrapper types for primitives._@return the value of the function;public int run(Object... parameters) {_		Object obj = super.findObject(parameters)__		if (!(obj instanceof Number)) {_			throw new TypeMismatchDataAccessException("Couldn't convert result object [" + obj + "] to int")__		}_		return ((Number) obj).intValue()__	};analogous,to,the,sql,query,execute,method,this,is,a,generic,method,to,execute,a,query,taken,a,number,of,arguments,param,parameters,array,of,parameters,these,will,be,objects,or,object,wrapper,types,for,primitives,return,the,value,of,the,function;public,int,run,object,parameters,object,obj,super,find,object,parameters,if,obj,instanceof,number,throw,new,type,mismatch,data,access,exception,couldn,t,convert,result,object,obj,to,int,return,number,obj,int,value
SqlFunction -> public int run(Object... parameters);1502974979;Analogous to the SqlQuery.execute([]) method. This is a_generic method to execute a query, taken a number of arguments._@param parameters array of parameters. These will be objects or_object wrapper types for primitives._@return the value of the function;public int run(Object... parameters) {_		Object obj = super.findObject(parameters)__		if (!(obj instanceof Number)) {_			throw new TypeMismatchDataAccessException("Couldn't convert result object [" + obj + "] to int")__		}_		return ((Number) obj).intValue()__	};analogous,to,the,sql,query,execute,method,this,is,a,generic,method,to,execute,a,query,taken,a,number,of,arguments,param,parameters,array,of,parameters,these,will,be,objects,or,object,wrapper,types,for,primitives,return,the,value,of,the,function;public,int,run,object,parameters,object,obj,super,find,object,parameters,if,obj,instanceof,number,throw,new,type,mismatch,data,access,exception,couldn,t,convert,result,object,obj,to,int,return,number,obj,int,value
SqlFunction -> public int run(Object... parameters);1530174524;Analogous to the SqlQuery.execute([]) method. This is a_generic method to execute a query, taken a number of arguments._@param parameters array of parameters. These will be objects or_object wrapper types for primitives._@return the value of the function;public int run(Object... parameters) {_		Object obj = super.findObject(parameters)__		if (!(obj instanceof Number)) {_			throw new TypeMismatchDataAccessException("Couldn't convert result object [" + obj + "] to int")__		}_		return ((Number) obj).intValue()__	};analogous,to,the,sql,query,execute,method,this,is,a,generic,method,to,execute,a,query,taken,a,number,of,arguments,param,parameters,array,of,parameters,these,will,be,objects,or,object,wrapper,types,for,primitives,return,the,value,of,the,function;public,int,run,object,parameters,object,obj,super,find,object,parameters,if,obj,instanceof,number,throw,new,type,mismatch,data,access,exception,couldn,t,convert,result,object,obj,to,int,return,number,obj,int,value
SqlFunction -> public int run(int parameter);1328020251;Convenient method to run the function with a single int argument._@param parameter single int parameter_@return the value of the function;public int run(int parameter) {_		return run(new Object[] {parameter})__	};convenient,method,to,run,the,function,with,a,single,int,argument,param,parameter,single,int,parameter,return,the,value,of,the,function;public,int,run,int,parameter,return,run,new,object,parameter
SqlFunction -> public int run(int parameter);1356735495;Convenient method to run the function with a single int argument._@param parameter single int parameter_@return the value of the function;public int run(int parameter) {_		return run(new Object[] {parameter})__	};convenient,method,to,run,the,function,with,a,single,int,argument,param,parameter,single,int,parameter,return,the,value,of,the,function;public,int,run,int,parameter,return,run,new,object,parameter
SqlFunction -> public int run(int parameter);1467730834;Convenient method to run the function with a single int argument._@param parameter single int parameter_@return the value of the function;public int run(int parameter) {_		return run(new Object[] {parameter})__	};convenient,method,to,run,the,function,with,a,single,int,argument,param,parameter,single,int,parameter,return,the,value,of,the,function;public,int,run,int,parameter,return,run,new,object,parameter
SqlFunction -> public int run(int parameter);1496837955;Convenient method to run the function with a single int argument._@param parameter single int parameter_@return the value of the function;public int run(int parameter) {_		return run(new Object[] {parameter})__	};convenient,method,to,run,the,function,with,a,single,int,argument,param,parameter,single,int,parameter,return,the,value,of,the,function;public,int,run,int,parameter,return,run,new,object,parameter
SqlFunction -> public int run(int parameter);1502974979;Convenient method to run the function with a single int argument._@param parameter single int parameter_@return the value of the function;public int run(int parameter) {_		return run(new Object[] {parameter})__	};convenient,method,to,run,the,function,with,a,single,int,argument,param,parameter,single,int,parameter,return,the,value,of,the,function;public,int,run,int,parameter,return,run,new,object,parameter
SqlFunction -> public int run(int parameter);1530174524;Convenient method to run the function with a single int argument._@param parameter single int parameter_@return the value of the function;public int run(int parameter) {_		return run(new Object[] {parameter})__	};convenient,method,to,run,the,function,with,a,single,int,argument,param,parameter,single,int,parameter,return,the,value,of,the,function;public,int,run,int,parameter,return,run,new,object,parameter
SqlFunction -> @Override 	protected T mapRow(ResultSet rs, int rowNum) throws SQLException;1328020251;This implementation of this method extracts a single value from the_single row returned by the function. If there are a different number_of rows returned, this is treated as an error.;@Override_	protected T mapRow(ResultSet rs, int rowNum) throws SQLException {_		return this.rowMapper.mapRow(rs, rowNum)__	};this,implementation,of,this,method,extracts,a,single,value,from,the,single,row,returned,by,the,function,if,there,are,a,different,number,of,rows,returned,this,is,treated,as,an,error;override,protected,t,map,row,result,set,rs,int,row,num,throws,sqlexception,return,this,row,mapper,map,row,rs,row,num
SqlFunction -> @Override 	protected T mapRow(ResultSet rs, int rowNum) throws SQLException;1356735495;This implementation of this method extracts a single value from the_single row returned by the function. If there are a different number_of rows returned, this is treated as an error.;@Override_	protected T mapRow(ResultSet rs, int rowNum) throws SQLException {_		return this.rowMapper.mapRow(rs, rowNum)__	};this,implementation,of,this,method,extracts,a,single,value,from,the,single,row,returned,by,the,function,if,there,are,a,different,number,of,rows,returned,this,is,treated,as,an,error;override,protected,t,map,row,result,set,rs,int,row,num,throws,sqlexception,return,this,row,mapper,map,row,rs,row,num
SqlFunction -> @Override 	protected T mapRow(ResultSet rs, int rowNum) throws SQLException;1467730834;This implementation of this method extracts a single value from the_single row returned by the function. If there are a different number_of rows returned, this is treated as an error.;@Override_	protected T mapRow(ResultSet rs, int rowNum) throws SQLException {_		return this.rowMapper.mapRow(rs, rowNum)__	};this,implementation,of,this,method,extracts,a,single,value,from,the,single,row,returned,by,the,function,if,there,are,a,different,number,of,rows,returned,this,is,treated,as,an,error;override,protected,t,map,row,result,set,rs,int,row,num,throws,sqlexception,return,this,row,mapper,map,row,rs,row,num
SqlFunction -> @Override 	protected T mapRow(ResultSet rs, int rowNum) throws SQLException;1496837955;This implementation of this method extracts a single value from the_single row returned by the function. If there are a different number_of rows returned, this is treated as an error.;@Override_	protected T mapRow(ResultSet rs, int rowNum) throws SQLException {_		return this.rowMapper.mapRow(rs, rowNum)__	};this,implementation,of,this,method,extracts,a,single,value,from,the,single,row,returned,by,the,function,if,there,are,a,different,number,of,rows,returned,this,is,treated,as,an,error;override,protected,t,map,row,result,set,rs,int,row,num,throws,sqlexception,return,this,row,mapper,map,row,rs,row,num
SqlFunction -> @Nullable 	public Object runGeneric(Object[] parameters);1496837955;Analogous to the {@code SqlQuery.findObject(Object[])} method._This is a generic method to execute a query, taken a number of arguments._@param parameters array of parameters. These will be objects or_object wrapper types for primitives._@return the value of the function, as an Object_@see #execute(Object[]);@Nullable_	public Object runGeneric(Object[] parameters) {_		return findObject(parameters)__	};analogous,to,the,code,sql,query,find,object,object,method,this,is,a,generic,method,to,execute,a,query,taken,a,number,of,arguments,param,parameters,array,of,parameters,these,will,be,objects,or,object,wrapper,types,for,primitives,return,the,value,of,the,function,as,an,object,see,execute,object;nullable,public,object,run,generic,object,parameters,return,find,object,parameters
SqlFunction -> @Nullable 	public Object runGeneric(Object[] parameters);1502974979;Analogous to the {@code SqlQuery.findObject(Object[])} method._This is a generic method to execute a query, taken a number of arguments._@param parameters array of parameters. These will be objects or_object wrapper types for primitives._@return the value of the function, as an Object_@see #execute(Object[]);@Nullable_	public Object runGeneric(Object[] parameters) {_		return findObject(parameters)__	};analogous,to,the,code,sql,query,find,object,object,method,this,is,a,generic,method,to,execute,a,query,taken,a,number,of,arguments,param,parameters,array,of,parameters,these,will,be,objects,or,object,wrapper,types,for,primitives,return,the,value,of,the,function,as,an,object,see,execute,object;nullable,public,object,run,generic,object,parameters,return,find,object,parameters
SqlFunction -> @Nullable 	public Object runGeneric(Object[] parameters);1530174524;Analogous to the {@code SqlQuery.findObject(Object[])} method._This is a generic method to execute a query, taken a number of arguments._@param parameters array of parameters. These will be objects or_object wrapper types for primitives._@return the value of the function, as an Object_@see #execute(Object[]);@Nullable_	public Object runGeneric(Object[] parameters) {_		return findObject(parameters)__	};analogous,to,the,code,sql,query,find,object,object,method,this,is,a,generic,method,to,execute,a,query,taken,a,number,of,arguments,param,parameters,array,of,parameters,these,will,be,objects,or,object,wrapper,types,for,primitives,return,the,value,of,the,function,as,an,object,see,execute,object;nullable,public,object,run,generic,object,parameters,return,find,object,parameters
SqlFunction -> public Object runGeneric(int parameter);1328020251;Convenient method to run the function with a single int argument._@param parameter single int parameter_@return the value of the function as an Object;public Object runGeneric(int parameter) {_		return findObject(parameter)__	};convenient,method,to,run,the,function,with,a,single,int,argument,param,parameter,single,int,parameter,return,the,value,of,the,function,as,an,object;public,object,run,generic,int,parameter,return,find,object,parameter
SqlFunction -> public Object runGeneric(int parameter);1356735495;Convenient method to run the function with a single int argument._@param parameter single int parameter_@return the value of the function as an Object;public Object runGeneric(int parameter) {_		return findObject(parameter)__	};convenient,method,to,run,the,function,with,a,single,int,argument,param,parameter,single,int,parameter,return,the,value,of,the,function,as,an,object;public,object,run,generic,int,parameter,return,find,object,parameter
SqlFunction -> public Object runGeneric(int parameter);1467730834;Convenient method to run the function with a single int argument._@param parameter single int parameter_@return the value of the function as an Object;public Object runGeneric(int parameter) {_		return findObject(parameter)__	};convenient,method,to,run,the,function,with,a,single,int,argument,param,parameter,single,int,parameter,return,the,value,of,the,function,as,an,object;public,object,run,generic,int,parameter,return,find,object,parameter
SqlFunction -> @Nullable 	public Object runGeneric(int parameter);1496837955;Convenient method to run the function with a single int argument._@param parameter single int parameter_@return the value of the function as an Object;@Nullable_	public Object runGeneric(int parameter) {_		return findObject(parameter)__	};convenient,method,to,run,the,function,with,a,single,int,argument,param,parameter,single,int,parameter,return,the,value,of,the,function,as,an,object;nullable,public,object,run,generic,int,parameter,return,find,object,parameter
SqlFunction -> @Nullable 	public Object runGeneric(int parameter);1502974979;Convenient method to run the function with a single int argument._@param parameter single int parameter_@return the value of the function as an Object;@Nullable_	public Object runGeneric(int parameter) {_		return findObject(parameter)__	};convenient,method,to,run,the,function,with,a,single,int,argument,param,parameter,single,int,parameter,return,the,value,of,the,function,as,an,object;nullable,public,object,run,generic,int,parameter,return,find,object,parameter
SqlFunction -> @Nullable 	public Object runGeneric(int parameter);1530174524;Convenient method to run the function with a single int argument._@param parameter single int parameter_@return the value of the function as an Object;@Nullable_	public Object runGeneric(int parameter) {_		return findObject(parameter)__	};convenient,method,to,run,the,function,with,a,single,int,argument,param,parameter,single,int,parameter,return,the,value,of,the,function,as,an,object;nullable,public,object,run,generic,int,parameter,return,find,object,parameter
