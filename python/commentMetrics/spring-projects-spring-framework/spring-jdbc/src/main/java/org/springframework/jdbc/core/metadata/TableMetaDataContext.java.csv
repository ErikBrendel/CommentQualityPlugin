# id;timestamp;commentText;codeText;commentWords;codeWords
TableMetaDataContext -> public boolean isAccessTableColumnMetaData();1328020251;Are we accessing table meta data?;public boolean isAccessTableColumnMetaData() {_		return this.accessTableColumnMetaData__	};are,we,accessing,table,meta,data;public,boolean,is,access,table,column,meta,data,return,this,access,table,column,meta,data
TableMetaDataContext -> public boolean isAccessTableColumnMetaData();1385412762;Are we accessing table meta data?;public boolean isAccessTableColumnMetaData() {_		return this.accessTableColumnMetaData__	};are,we,accessing,table,meta,data;public,boolean,is,access,table,column,meta,data,return,this,access,table,column,meta,data
TableMetaDataContext -> public boolean isAccessTableColumnMetaData();1407511029;Are we accessing table meta data?;public boolean isAccessTableColumnMetaData() {_		return this.accessTableColumnMetaData__	};are,we,accessing,table,meta,data;public,boolean,is,access,table,column,meta,data,return,this,access,table,column,meta,data
TableMetaDataContext -> public boolean isAccessTableColumnMetaData();1416833949;Are we accessing table meta data?;public boolean isAccessTableColumnMetaData() {_		return this.accessTableColumnMetaData__	};are,we,accessing,table,meta,data;public,boolean,is,access,table,column,meta,data,return,this,access,table,column,meta,data
TableMetaDataContext -> public boolean isAccessTableColumnMetaData();1429214043;Are we accessing table meta data?;public boolean isAccessTableColumnMetaData() {_		return this.accessTableColumnMetaData__	};are,we,accessing,table,meta,data;public,boolean,is,access,table,column,meta,data,return,this,access,table,column,meta,data
TableMetaDataContext -> public boolean isAccessTableColumnMetaData();1464241861;Are we accessing table meta data?;public boolean isAccessTableColumnMetaData() {_		return this.accessTableColumnMetaData__	};are,we,accessing,table,meta,data;public,boolean,is,access,table,column,meta,data,return,this,access,table,column,meta,data
TableMetaDataContext -> public boolean isAccessTableColumnMetaData();1467730834;Are we accessing table meta data?;public boolean isAccessTableColumnMetaData() {_		return this.accessTableColumnMetaData__	};are,we,accessing,table,meta,data;public,boolean,is,access,table,column,meta,data,return,this,access,table,column,meta,data
TableMetaDataContext -> public boolean isAccessTableColumnMetaData();1487178248;Are we accessing table meta data?;public boolean isAccessTableColumnMetaData() {_		return this.accessTableColumnMetaData__	};are,we,accessing,table,meta,data;public,boolean,is,access,table,column,meta,data,return,this,access,table,column,meta,data
TableMetaDataContext -> public boolean isAccessTableColumnMetaData();1496837955;Are we accessing table meta data?;public boolean isAccessTableColumnMetaData() {_		return this.accessTableColumnMetaData__	};are,we,accessing,table,meta,data;public,boolean,is,access,table,column,meta,data,return,this,access,table,column,meta,data
TableMetaDataContext -> public boolean isAccessTableColumnMetaData();1500448076;Are we accessing table meta data?;public boolean isAccessTableColumnMetaData() {_		return this.accessTableColumnMetaData__	};are,we,accessing,table,meta,data;public,boolean,is,access,table,column,meta,data,return,this,access,table,column,meta,data
TableMetaDataContext -> public boolean isAccessTableColumnMetaData();1500457438;Are we accessing table meta data?;public boolean isAccessTableColumnMetaData() {_		return this.accessTableColumnMetaData__	};are,we,accessing,table,meta,data;public,boolean,is,access,table,column,meta,data,return,this,access,table,column,meta,data
TableMetaDataContext -> public boolean isAccessTableColumnMetaData();1515532822;Are we accessing table meta data?;public boolean isAccessTableColumnMetaData() {_		return this.accessTableColumnMetaData__	};are,we,accessing,table,meta,data;public,boolean,is,access,table,column,meta,data,return,this,access,table,column,meta,data
TableMetaDataContext -> public boolean isAccessTableColumnMetaData();1516393837;Are we accessing table meta data?;public boolean isAccessTableColumnMetaData() {_		return this.accessTableColumnMetaData__	};are,we,accessing,table,meta,data;public,boolean,is,access,table,column,meta,data,return,this,access,table,column,meta,data
TableMetaDataContext -> public boolean isAccessTableColumnMetaData();1518167526;Are we accessing table meta data?;public boolean isAccessTableColumnMetaData() {_		return this.accessTableColumnMetaData__	};are,we,accessing,table,meta,data;public,boolean,is,access,table,column,meta,data,return,this,access,table,column,meta,data
TableMetaDataContext -> public boolean isAccessTableColumnMetaData();1521457491;Are we accessing table meta-data?;public boolean isAccessTableColumnMetaData() {_		return this.accessTableColumnMetaData__	};are,we,accessing,table,meta,data;public,boolean,is,access,table,column,meta,data,return,this,access,table,column,meta,data
TableMetaDataContext -> public boolean isAccessTableColumnMetaData();1522103912;Are we accessing table meta-data?;public boolean isAccessTableColumnMetaData() {_		return this.accessTableColumnMetaData__	};are,we,accessing,table,meta,data;public,boolean,is,access,table,column,meta,data,return,this,access,table,column,meta,data
TableMetaDataContext -> public boolean isAccessTableColumnMetaData();1528719423;Are we accessing table meta-data?;public boolean isAccessTableColumnMetaData() {_		return this.accessTableColumnMetaData__	};are,we,accessing,table,meta,data;public,boolean,is,access,table,column,meta,data,return,this,access,table,column,meta,data
TableMetaDataContext -> public boolean isAccessTableColumnMetaData();1530174524;Are we accessing table meta-data?;public boolean isAccessTableColumnMetaData() {_		return this.accessTableColumnMetaData__	};are,we,accessing,table,meta,data;public,boolean,is,access,table,column,meta,data,return,this,access,table,column,meta,data
TableMetaDataContext -> public boolean isAccessTableColumnMetaData();1532091916;Are we accessing table meta-data?;public boolean isAccessTableColumnMetaData() {_		return this.accessTableColumnMetaData__	};are,we,accessing,table,meta,data;public,boolean,is,access,table,column,meta,data,return,this,access,table,column,meta,data
TableMetaDataContext -> public boolean isAccessTableColumnMetaData();1550238935;Are we accessing table meta-data?;public boolean isAccessTableColumnMetaData() {_		return this.accessTableColumnMetaData__	};are,we,accessing,table,meta,data;public,boolean,is,access,table,column,meta,data,return,this,access,table,column,meta,data
TableMetaDataContext -> public boolean isGetGeneratedKeysSupported();1328020251;Does this database support the JDBC 3.0 feature of retrieving generated keys_{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public boolean isGetGeneratedKeysSupported() {_		return this.metaDataProvider.isGetGeneratedKeysSupported()__	};does,this,database,support,the,jdbc,3,0,feature,of,retrieving,generated,keys,link,java,sql,database,meta,data,supports,get,generated,keys;public,boolean,is,get,generated,keys,supported,return,this,meta,data,provider,is,get,generated,keys,supported
TableMetaDataContext -> public boolean isGetGeneratedKeysSupported();1385412762;Does this database support the JDBC 3.0 feature of retrieving generated keys_{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public boolean isGetGeneratedKeysSupported() {_		return this.metaDataProvider.isGetGeneratedKeysSupported()__	};does,this,database,support,the,jdbc,3,0,feature,of,retrieving,generated,keys,link,java,sql,database,meta,data,supports,get,generated,keys;public,boolean,is,get,generated,keys,supported,return,this,meta,data,provider,is,get,generated,keys,supported
TableMetaDataContext -> public boolean isGetGeneratedKeysSupported();1407511029;Does this database support the JDBC 3.0 feature of retrieving generated keys_{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public boolean isGetGeneratedKeysSupported() {_		return this.metaDataProvider.isGetGeneratedKeysSupported()__	};does,this,database,support,the,jdbc,3,0,feature,of,retrieving,generated,keys,link,java,sql,database,meta,data,supports,get,generated,keys;public,boolean,is,get,generated,keys,supported,return,this,meta,data,provider,is,get,generated,keys,supported
TableMetaDataContext -> public boolean isGetGeneratedKeysSupported();1416833949;Does this database support the JDBC 3.0 feature of retrieving generated keys_{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public boolean isGetGeneratedKeysSupported() {_		return this.metaDataProvider.isGetGeneratedKeysSupported()__	};does,this,database,support,the,jdbc,3,0,feature,of,retrieving,generated,keys,link,java,sql,database,meta,data,supports,get,generated,keys;public,boolean,is,get,generated,keys,supported,return,this,meta,data,provider,is,get,generated,keys,supported
TableMetaDataContext -> public boolean isGetGeneratedKeysSupported();1429214043;Does this database support the JDBC 3.0 feature of retrieving generated keys_{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public boolean isGetGeneratedKeysSupported() {_		return this.metaDataProvider.isGetGeneratedKeysSupported()__	};does,this,database,support,the,jdbc,3,0,feature,of,retrieving,generated,keys,link,java,sql,database,meta,data,supports,get,generated,keys;public,boolean,is,get,generated,keys,supported,return,this,meta,data,provider,is,get,generated,keys,supported
TableMetaDataContext -> public boolean isGetGeneratedKeysSupported();1464241861;Does this database support the JDBC 3.0 feature of retrieving generated keys_{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public boolean isGetGeneratedKeysSupported() {_		return this.metaDataProvider.isGetGeneratedKeysSupported()__	};does,this,database,support,the,jdbc,3,0,feature,of,retrieving,generated,keys,link,java,sql,database,meta,data,supports,get,generated,keys;public,boolean,is,get,generated,keys,supported,return,this,meta,data,provider,is,get,generated,keys,supported
TableMetaDataContext -> public boolean isGetGeneratedKeysSupported();1467730834;Does this database support the JDBC 3.0 feature of retrieving generated keys_{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public boolean isGetGeneratedKeysSupported() {_		return this.metaDataProvider.isGetGeneratedKeysSupported()__	};does,this,database,support,the,jdbc,3,0,feature,of,retrieving,generated,keys,link,java,sql,database,meta,data,supports,get,generated,keys;public,boolean,is,get,generated,keys,supported,return,this,meta,data,provider,is,get,generated,keys,supported
TableMetaDataContext -> public boolean isGetGeneratedKeysSupported();1487178248;Does this database support the JDBC 3.0 feature of retrieving generated keys_{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public boolean isGetGeneratedKeysSupported() {_		return this.metaDataProvider.isGetGeneratedKeysSupported()__	};does,this,database,support,the,jdbc,3,0,feature,of,retrieving,generated,keys,link,java,sql,database,meta,data,supports,get,generated,keys;public,boolean,is,get,generated,keys,supported,return,this,meta,data,provider,is,get,generated,keys,supported
TableMetaDataContext -> public boolean isGetGeneratedKeysSupported();1496837955;Does this database support the JDBC 3.0 feature of retrieving generated keys_{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public boolean isGetGeneratedKeysSupported() {_		return this.metaDataProvider.isGetGeneratedKeysSupported()__	};does,this,database,support,the,jdbc,3,0,feature,of,retrieving,generated,keys,link,java,sql,database,meta,data,supports,get,generated,keys;public,boolean,is,get,generated,keys,supported,return,this,meta,data,provider,is,get,generated,keys,supported
TableMetaDataContext -> public boolean isGetGeneratedKeysSupported();1500448076;Does this database support the JDBC 3.0 feature of retrieving generated keys_{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public boolean isGetGeneratedKeysSupported() {_		return this.metaDataProvider.isGetGeneratedKeysSupported()__	};does,this,database,support,the,jdbc,3,0,feature,of,retrieving,generated,keys,link,java,sql,database,meta,data,supports,get,generated,keys;public,boolean,is,get,generated,keys,supported,return,this,meta,data,provider,is,get,generated,keys,supported
TableMetaDataContext -> public boolean isGetGeneratedKeysSupported();1500457438;Does this database support the JDBC 3.0 feature of retrieving generated keys_{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public boolean isGetGeneratedKeysSupported() {_		return obtainMetaDataProvider().isGetGeneratedKeysSupported()__	};does,this,database,support,the,jdbc,3,0,feature,of,retrieving,generated,keys,link,java,sql,database,meta,data,supports,get,generated,keys;public,boolean,is,get,generated,keys,supported,return,obtain,meta,data,provider,is,get,generated,keys,supported
TableMetaDataContext -> public boolean isGetGeneratedKeysSupported();1515532822;Does this database support the JDBC 3.0 feature of retrieving generated keys_{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public boolean isGetGeneratedKeysSupported() {_		return obtainMetaDataProvider().isGetGeneratedKeysSupported()__	};does,this,database,support,the,jdbc,3,0,feature,of,retrieving,generated,keys,link,java,sql,database,meta,data,supports,get,generated,keys;public,boolean,is,get,generated,keys,supported,return,obtain,meta,data,provider,is,get,generated,keys,supported
TableMetaDataContext -> public boolean isGetGeneratedKeysSupported();1516393837;Does this database support the JDBC 3.0 feature of retrieving generated keys_{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public boolean isGetGeneratedKeysSupported() {_		return obtainMetaDataProvider().isGetGeneratedKeysSupported()__	};does,this,database,support,the,jdbc,3,0,feature,of,retrieving,generated,keys,link,java,sql,database,meta,data,supports,get,generated,keys;public,boolean,is,get,generated,keys,supported,return,obtain,meta,data,provider,is,get,generated,keys,supported
TableMetaDataContext -> public boolean isGetGeneratedKeysSupported();1518167526;Does this database support the JDBC 3.0 feature of retrieving generated keys_{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public boolean isGetGeneratedKeysSupported() {_		return obtainMetaDataProvider().isGetGeneratedKeysSupported()__	};does,this,database,support,the,jdbc,3,0,feature,of,retrieving,generated,keys,link,java,sql,database,meta,data,supports,get,generated,keys;public,boolean,is,get,generated,keys,supported,return,obtain,meta,data,provider,is,get,generated,keys,supported
TableMetaDataContext -> public boolean isGetGeneratedKeysSupported();1521457491;Does this database support the JDBC 3.0 feature of retrieving generated keys:_{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public boolean isGetGeneratedKeysSupported() {_		return obtainMetaDataProvider().isGetGeneratedKeysSupported()__	};does,this,database,support,the,jdbc,3,0,feature,of,retrieving,generated,keys,link,java,sql,database,meta,data,supports,get,generated,keys;public,boolean,is,get,generated,keys,supported,return,obtain,meta,data,provider,is,get,generated,keys,supported
TableMetaDataContext -> public boolean isGetGeneratedKeysSupported();1522103912;Does this database support the JDBC 3.0 feature of retrieving generated keys:_{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public boolean isGetGeneratedKeysSupported() {_		return obtainMetaDataProvider().isGetGeneratedKeysSupported()__	};does,this,database,support,the,jdbc,3,0,feature,of,retrieving,generated,keys,link,java,sql,database,meta,data,supports,get,generated,keys;public,boolean,is,get,generated,keys,supported,return,obtain,meta,data,provider,is,get,generated,keys,supported
TableMetaDataContext -> public boolean isGetGeneratedKeysSupported();1528719423;Does this database support the JDBC 3.0 feature of retrieving generated keys:_{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public boolean isGetGeneratedKeysSupported() {_		return obtainMetaDataProvider().isGetGeneratedKeysSupported()__	};does,this,database,support,the,jdbc,3,0,feature,of,retrieving,generated,keys,link,java,sql,database,meta,data,supports,get,generated,keys;public,boolean,is,get,generated,keys,supported,return,obtain,meta,data,provider,is,get,generated,keys,supported
TableMetaDataContext -> public boolean isGetGeneratedKeysSupported();1530174524;Does this database support the JDBC 3.0 feature of retrieving generated keys:_{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public boolean isGetGeneratedKeysSupported() {_		return obtainMetaDataProvider().isGetGeneratedKeysSupported()__	};does,this,database,support,the,jdbc,3,0,feature,of,retrieving,generated,keys,link,java,sql,database,meta,data,supports,get,generated,keys;public,boolean,is,get,generated,keys,supported,return,obtain,meta,data,provider,is,get,generated,keys,supported
TableMetaDataContext -> public boolean isGetGeneratedKeysSupported();1532091916;Does this database support the JDBC 3.0 feature of retrieving generated keys:_{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public boolean isGetGeneratedKeysSupported() {_		return obtainMetaDataProvider().isGetGeneratedKeysSupported()__	};does,this,database,support,the,jdbc,3,0,feature,of,retrieving,generated,keys,link,java,sql,database,meta,data,supports,get,generated,keys;public,boolean,is,get,generated,keys,supported,return,obtain,meta,data,provider,is,get,generated,keys,supported
TableMetaDataContext -> public boolean isGetGeneratedKeysSupported();1550238935;Does this database support the JDBC 3.0 feature of retrieving generated keys:_{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public boolean isGetGeneratedKeysSupported() {_		return obtainMetaDataProvider().isGetGeneratedKeysSupported()__	};does,this,database,support,the,jdbc,3,0,feature,of,retrieving,generated,keys,link,java,sql,database,meta,data,supports,get,generated,keys;public,boolean,is,get,generated,keys,supported,return,obtain,meta,data,provider,is,get,generated,keys,supported
TableMetaDataContext -> public void setSchemaName(@Nullable String schemaName);1500448076;Set the name of the schema for this context.;public void setSchemaName(@Nullable String schemaName) {_		this.schemaName = schemaName__	};set,the,name,of,the,schema,for,this,context;public,void,set,schema,name,nullable,string,schema,name,this,schema,name,schema,name
TableMetaDataContext -> public void setSchemaName(@Nullable String schemaName);1500457438;Set the name of the schema for this context.;public void setSchemaName(@Nullable String schemaName) {_		this.schemaName = schemaName__	};set,the,name,of,the,schema,for,this,context;public,void,set,schema,name,nullable,string,schema,name,this,schema,name,schema,name
TableMetaDataContext -> public void setSchemaName(@Nullable String schemaName);1515532822;Set the name of the schema for this context.;public void setSchemaName(@Nullable String schemaName) {_		this.schemaName = schemaName__	};set,the,name,of,the,schema,for,this,context;public,void,set,schema,name,nullable,string,schema,name,this,schema,name,schema,name
TableMetaDataContext -> public void setSchemaName(@Nullable String schemaName);1516393837;Set the name of the schema for this context.;public void setSchemaName(@Nullable String schemaName) {_		this.schemaName = schemaName__	};set,the,name,of,the,schema,for,this,context;public,void,set,schema,name,nullable,string,schema,name,this,schema,name,schema,name
TableMetaDataContext -> public void setSchemaName(@Nullable String schemaName);1518167526;Set the name of the schema for this context.;public void setSchemaName(@Nullable String schemaName) {_		this.schemaName = schemaName__	};set,the,name,of,the,schema,for,this,context;public,void,set,schema,name,nullable,string,schema,name,this,schema,name,schema,name
TableMetaDataContext -> public void setSchemaName(@Nullable String schemaName);1521457491;Set the name of the schema for this context.;public void setSchemaName(@Nullable String schemaName) {_		this.schemaName = schemaName__	};set,the,name,of,the,schema,for,this,context;public,void,set,schema,name,nullable,string,schema,name,this,schema,name,schema,name
TableMetaDataContext -> public void setSchemaName(@Nullable String schemaName);1522103912;Set the name of the schema for this context.;public void setSchemaName(@Nullable String schemaName) {_		this.schemaName = schemaName__	};set,the,name,of,the,schema,for,this,context;public,void,set,schema,name,nullable,string,schema,name,this,schema,name,schema,name
TableMetaDataContext -> public void setSchemaName(@Nullable String schemaName);1528719423;Set the name of the schema for this context.;public void setSchemaName(@Nullable String schemaName) {_		this.schemaName = schemaName__	};set,the,name,of,the,schema,for,this,context;public,void,set,schema,name,nullable,string,schema,name,this,schema,name,schema,name
TableMetaDataContext -> public void setSchemaName(@Nullable String schemaName);1530174524;Set the name of the schema for this context.;public void setSchemaName(@Nullable String schemaName) {_		this.schemaName = schemaName__	};set,the,name,of,the,schema,for,this,context;public,void,set,schema,name,nullable,string,schema,name,this,schema,name,schema,name
TableMetaDataContext -> public void setSchemaName(@Nullable String schemaName);1532091916;Set the name of the schema for this context.;public void setSchemaName(@Nullable String schemaName) {_		this.schemaName = schemaName__	};set,the,name,of,the,schema,for,this,context;public,void,set,schema,name,nullable,string,schema,name,this,schema,name,schema,name
TableMetaDataContext -> public void setSchemaName(@Nullable String schemaName);1550238935;Set the name of the schema for this context.;public void setSchemaName(@Nullable String schemaName) {_		this.schemaName = schemaName__	};set,the,name,of,the,schema,for,this,context;public,void,set,schema,name,nullable,string,schema,name,this,schema,name,schema,name
TableMetaDataContext -> @Nullable 	public String getSimulationQueryForGetGeneratedKey(String tableName, String keyColumnName);1496837955;Does this database support simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported._{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;@Nullable_	public String getSimulationQueryForGetGeneratedKey(String tableName, String keyColumnName) {_		return this.metaDataProvider.getSimpleQueryForGetGeneratedKey(tableName, keyColumnName)__	};does,this,database,support,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys;nullable,public,string,get,simulation,query,for,get,generated,key,string,table,name,string,key,column,name,return,this,meta,data,provider,get,simple,query,for,get,generated,key,table,name,key,column,name
TableMetaDataContext -> @Nullable 	public String getSimulationQueryForGetGeneratedKey(String tableName, String keyColumnName);1500448076;Does this database support simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported._{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;@Nullable_	public String getSimulationQueryForGetGeneratedKey(String tableName, String keyColumnName) {_		return this.metaDataProvider.getSimpleQueryForGetGeneratedKey(tableName, keyColumnName)__	};does,this,database,support,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys;nullable,public,string,get,simulation,query,for,get,generated,key,string,table,name,string,key,column,name,return,this,meta,data,provider,get,simple,query,for,get,generated,key,table,name,key,column,name
TableMetaDataContext -> @Nullable 	public String getSimulationQueryForGetGeneratedKey(String tableName, String keyColumnName);1500457438;Does this database support simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported._{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;@Nullable_	public String getSimulationQueryForGetGeneratedKey(String tableName, String keyColumnName) {_		return obtainMetaDataProvider().getSimpleQueryForGetGeneratedKey(tableName, keyColumnName)__	};does,this,database,support,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys;nullable,public,string,get,simulation,query,for,get,generated,key,string,table,name,string,key,column,name,return,obtain,meta,data,provider,get,simple,query,for,get,generated,key,table,name,key,column,name
TableMetaDataContext -> @Nullable 	public String getSimulationQueryForGetGeneratedKey(String tableName, String keyColumnName);1515532822;Does this database support simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported._{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;@Nullable_	public String getSimulationQueryForGetGeneratedKey(String tableName, String keyColumnName) {_		return obtainMetaDataProvider().getSimpleQueryForGetGeneratedKey(tableName, keyColumnName)__	};does,this,database,support,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys;nullable,public,string,get,simulation,query,for,get,generated,key,string,table,name,string,key,column,name,return,obtain,meta,data,provider,get,simple,query,for,get,generated,key,table,name,key,column,name
TableMetaDataContext -> @Nullable 	public String getSimulationQueryForGetGeneratedKey(String tableName, String keyColumnName);1516393837;Does this database support simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported._{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;@Nullable_	public String getSimulationQueryForGetGeneratedKey(String tableName, String keyColumnName) {_		return obtainMetaDataProvider().getSimpleQueryForGetGeneratedKey(tableName, keyColumnName)__	};does,this,database,support,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys;nullable,public,string,get,simulation,query,for,get,generated,key,string,table,name,string,key,column,name,return,obtain,meta,data,provider,get,simple,query,for,get,generated,key,table,name,key,column,name
TableMetaDataContext -> @Nullable 	public String getSimulationQueryForGetGeneratedKey(String tableName, String keyColumnName);1518167526;Does this database support simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported._{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;@Nullable_	public String getSimulationQueryForGetGeneratedKey(String tableName, String keyColumnName) {_		return obtainMetaDataProvider().getSimpleQueryForGetGeneratedKey(tableName, keyColumnName)__	};does,this,database,support,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys;nullable,public,string,get,simulation,query,for,get,generated,key,string,table,name,string,key,column,name,return,obtain,meta,data,provider,get,simple,query,for,get,generated,key,table,name,key,column,name
TableMetaDataContext -> @Deprecated 	@Nullable 	public String getSimulationQueryForGetGeneratedKey(String tableName, String keyColumnName);1521457491;@deprecated as of 4.3.15, in favor of {@link #getSimpleQueryForGetGeneratedKey};@Deprecated_	@Nullable_	public String getSimulationQueryForGetGeneratedKey(String tableName, String keyColumnName) {_		return getSimpleQueryForGetGeneratedKey(tableName, keyColumnName)__	};deprecated,as,of,4,3,15,in,favor,of,link,get,simple,query,for,get,generated,key;deprecated,nullable,public,string,get,simulation,query,for,get,generated,key,string,table,name,string,key,column,name,return,get,simple,query,for,get,generated,key,table,name,key,column,name
TableMetaDataContext -> @Deprecated 	@Nullable 	public String getSimulationQueryForGetGeneratedKey(String tableName, String keyColumnName);1522103912;@deprecated as of 4.3.15, in favor of {@link #getSimpleQueryForGetGeneratedKey};@Deprecated_	@Nullable_	public String getSimulationQueryForGetGeneratedKey(String tableName, String keyColumnName) {_		return getSimpleQueryForGetGeneratedKey(tableName, keyColumnName)__	};deprecated,as,of,4,3,15,in,favor,of,link,get,simple,query,for,get,generated,key;deprecated,nullable,public,string,get,simulation,query,for,get,generated,key,string,table,name,string,key,column,name,return,get,simple,query,for,get,generated,key,table,name,key,column,name
TableMetaDataContext -> @Deprecated 	@Nullable 	public String getSimulationQueryForGetGeneratedKey(String tableName, String keyColumnName);1528719423;@deprecated as of 4.3.15, in favor of {@link #getSimpleQueryForGetGeneratedKey};@Deprecated_	@Nullable_	public String getSimulationQueryForGetGeneratedKey(String tableName, String keyColumnName) {_		return getSimpleQueryForGetGeneratedKey(tableName, keyColumnName)__	};deprecated,as,of,4,3,15,in,favor,of,link,get,simple,query,for,get,generated,key;deprecated,nullable,public,string,get,simulation,query,for,get,generated,key,string,table,name,string,key,column,name,return,get,simple,query,for,get,generated,key,table,name,key,column,name
TableMetaDataContext -> @Deprecated 	@Nullable 	public String getSimulationQueryForGetGeneratedKey(String tableName, String keyColumnName);1530174524;Does this database support a simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported:_{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?_@deprecated as of 4.3.15, in favor of {@link #getSimpleQueryForGetGeneratedKey};@Deprecated_	@Nullable_	public String getSimulationQueryForGetGeneratedKey(String tableName, String keyColumnName) {_		return getSimpleQueryForGetGeneratedKey(tableName, keyColumnName)__	};does,this,database,support,a,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys,deprecated,as,of,4,3,15,in,favor,of,link,get,simple,query,for,get,generated,key;deprecated,nullable,public,string,get,simulation,query,for,get,generated,key,string,table,name,string,key,column,name,return,get,simple,query,for,get,generated,key,table,name,key,column,name
TableMetaDataContext -> @Deprecated 	@Nullable 	public String getSimulationQueryForGetGeneratedKey(String tableName, String keyColumnName);1532091916;Does this database support a simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported:_{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?_@deprecated as of 4.3.15, in favor of {@link #getSimpleQueryForGetGeneratedKey};@Deprecated_	@Nullable_	public String getSimulationQueryForGetGeneratedKey(String tableName, String keyColumnName) {_		return getSimpleQueryForGetGeneratedKey(tableName, keyColumnName)__	};does,this,database,support,a,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys,deprecated,as,of,4,3,15,in,favor,of,link,get,simple,query,for,get,generated,key;deprecated,nullable,public,string,get,simulation,query,for,get,generated,key,string,table,name,string,key,column,name,return,get,simple,query,for,get,generated,key,table,name,key,column,name
TableMetaDataContext -> @Deprecated 	@Nullable 	public String getSimulationQueryForGetGeneratedKey(String tableName, String keyColumnName);1550238935;Does this database support a simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported:_{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?_@deprecated as of 4.3.15, in favor of {@link #getSimpleQueryForGetGeneratedKey};@Deprecated_	@Nullable_	public String getSimulationQueryForGetGeneratedKey(String tableName, String keyColumnName) {_		return getSimpleQueryForGetGeneratedKey(tableName, keyColumnName)__	};does,this,database,support,a,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys,deprecated,as,of,4,3,15,in,favor,of,link,get,simple,query,for,get,generated,key;deprecated,nullable,public,string,get,simulation,query,for,get,generated,key,string,table,name,string,key,column,name,return,get,simple,query,for,get,generated,key,table,name,key,column,name
TableMetaDataContext -> public List<String> getTableColumns();1328020251;Get a List of the table column names.;public List<String> getTableColumns() {_		return this.tableColumns__	};get,a,list,of,the,table,column,names;public,list,string,get,table,columns,return,this,table,columns
TableMetaDataContext -> public List<String> getTableColumns();1385412762;Get a List of the table column names.;public List<String> getTableColumns() {_		return this.tableColumns__	};get,a,list,of,the,table,column,names;public,list,string,get,table,columns,return,this,table,columns
TableMetaDataContext -> public List<String> getTableColumns();1407511029;Get a List of the table column names.;public List<String> getTableColumns() {_		return this.tableColumns__	};get,a,list,of,the,table,column,names;public,list,string,get,table,columns,return,this,table,columns
TableMetaDataContext -> public List<String> getTableColumns();1416833949;Get a List of the table column names.;public List<String> getTableColumns() {_		return this.tableColumns__	};get,a,list,of,the,table,column,names;public,list,string,get,table,columns,return,this,table,columns
TableMetaDataContext -> public List<String> getTableColumns();1429214043;Get a List of the table column names.;public List<String> getTableColumns() {_		return this.tableColumns__	};get,a,list,of,the,table,column,names;public,list,string,get,table,columns,return,this,table,columns
TableMetaDataContext -> public List<String> getTableColumns();1464241861;Get a List of the table column names.;public List<String> getTableColumns() {_		return this.tableColumns__	};get,a,list,of,the,table,column,names;public,list,string,get,table,columns,return,this,table,columns
TableMetaDataContext -> public List<String> getTableColumns();1467730834;Get a List of the table column names.;public List<String> getTableColumns() {_		return this.tableColumns__	};get,a,list,of,the,table,column,names;public,list,string,get,table,columns,return,this,table,columns
TableMetaDataContext -> public List<String> getTableColumns();1487178248;Get a List of the table column names.;public List<String> getTableColumns() {_		return this.tableColumns__	};get,a,list,of,the,table,column,names;public,list,string,get,table,columns,return,this,table,columns
TableMetaDataContext -> public List<String> getTableColumns();1496837955;Get a List of the table column names.;public List<String> getTableColumns() {_		return this.tableColumns__	};get,a,list,of,the,table,column,names;public,list,string,get,table,columns,return,this,table,columns
TableMetaDataContext -> public List<String> getTableColumns();1500448076;Get a List of the table column names.;public List<String> getTableColumns() {_		return this.tableColumns__	};get,a,list,of,the,table,column,names;public,list,string,get,table,columns,return,this,table,columns
TableMetaDataContext -> public List<String> getTableColumns();1500457438;Get a List of the table column names.;public List<String> getTableColumns() {_		return this.tableColumns__	};get,a,list,of,the,table,column,names;public,list,string,get,table,columns,return,this,table,columns
TableMetaDataContext -> public List<String> getTableColumns();1515532822;Get a List of the table column names.;public List<String> getTableColumns() {_		return this.tableColumns__	};get,a,list,of,the,table,column,names;public,list,string,get,table,columns,return,this,table,columns
TableMetaDataContext -> public List<String> getTableColumns();1516393837;Get a List of the table column names.;public List<String> getTableColumns() {_		return this.tableColumns__	};get,a,list,of,the,table,column,names;public,list,string,get,table,columns,return,this,table,columns
TableMetaDataContext -> public List<String> getTableColumns();1518167526;Get a List of the table column names.;public List<String> getTableColumns() {_		return this.tableColumns__	};get,a,list,of,the,table,column,names;public,list,string,get,table,columns,return,this,table,columns
TableMetaDataContext -> public List<String> getTableColumns();1521457491;Get a List of the table column names.;public List<String> getTableColumns() {_		return this.tableColumns__	};get,a,list,of,the,table,column,names;public,list,string,get,table,columns,return,this,table,columns
TableMetaDataContext -> public List<String> getTableColumns();1522103912;Get a List of the table column names.;public List<String> getTableColumns() {_		return this.tableColumns__	};get,a,list,of,the,table,column,names;public,list,string,get,table,columns,return,this,table,columns
TableMetaDataContext -> public List<String> getTableColumns();1528719423;Get a List of the table column names.;public List<String> getTableColumns() {_		return this.tableColumns__	};get,a,list,of,the,table,column,names;public,list,string,get,table,columns,return,this,table,columns
TableMetaDataContext -> public List<String> getTableColumns();1530174524;Get a List of the table column names.;public List<String> getTableColumns() {_		return this.tableColumns__	};get,a,list,of,the,table,column,names;public,list,string,get,table,columns,return,this,table,columns
TableMetaDataContext -> public List<String> getTableColumns();1532091916;Get a List of the table column names.;public List<String> getTableColumns() {_		return this.tableColumns__	};get,a,list,of,the,table,column,names;public,list,string,get,table,columns,return,this,table,columns
TableMetaDataContext -> public List<String> getTableColumns();1550238935;Get a List of the table column names.;public List<String> getTableColumns() {_		return this.tableColumns__	};get,a,list,of,the,table,column,names;public,list,string,get,table,columns,return,this,table,columns
TableMetaDataContext -> public void setTableName(@Nullable String tableName);1500448076;Set the name of the table for this context.;public void setTableName(@Nullable String tableName) {_		this.tableName = tableName__	};set,the,name,of,the,table,for,this,context;public,void,set,table,name,nullable,string,table,name,this,table,name,table,name
TableMetaDataContext -> public void setTableName(@Nullable String tableName);1500457438;Set the name of the table for this context.;public void setTableName(@Nullable String tableName) {_		this.tableName = tableName__	};set,the,name,of,the,table,for,this,context;public,void,set,table,name,nullable,string,table,name,this,table,name,table,name
TableMetaDataContext -> public void setTableName(@Nullable String tableName);1515532822;Set the name of the table for this context.;public void setTableName(@Nullable String tableName) {_		this.tableName = tableName__	};set,the,name,of,the,table,for,this,context;public,void,set,table,name,nullable,string,table,name,this,table,name,table,name
TableMetaDataContext -> public void setTableName(@Nullable String tableName);1516393837;Set the name of the table for this context.;public void setTableName(@Nullable String tableName) {_		this.tableName = tableName__	};set,the,name,of,the,table,for,this,context;public,void,set,table,name,nullable,string,table,name,this,table,name,table,name
TableMetaDataContext -> public void setTableName(@Nullable String tableName);1518167526;Set the name of the table for this context.;public void setTableName(@Nullable String tableName) {_		this.tableName = tableName__	};set,the,name,of,the,table,for,this,context;public,void,set,table,name,nullable,string,table,name,this,table,name,table,name
TableMetaDataContext -> public void setTableName(@Nullable String tableName);1521457491;Set the name of the table for this context.;public void setTableName(@Nullable String tableName) {_		this.tableName = tableName__	};set,the,name,of,the,table,for,this,context;public,void,set,table,name,nullable,string,table,name,this,table,name,table,name
TableMetaDataContext -> public void setTableName(@Nullable String tableName);1522103912;Set the name of the table for this context.;public void setTableName(@Nullable String tableName) {_		this.tableName = tableName__	};set,the,name,of,the,table,for,this,context;public,void,set,table,name,nullable,string,table,name,this,table,name,table,name
TableMetaDataContext -> public void setTableName(@Nullable String tableName);1528719423;Set the name of the table for this context.;public void setTableName(@Nullable String tableName) {_		this.tableName = tableName__	};set,the,name,of,the,table,for,this,context;public,void,set,table,name,nullable,string,table,name,this,table,name,table,name
TableMetaDataContext -> public void setTableName(@Nullable String tableName);1530174524;Set the name of the table for this context.;public void setTableName(@Nullable String tableName) {_		this.tableName = tableName__	};set,the,name,of,the,table,for,this,context;public,void,set,table,name,nullable,string,table,name,this,table,name,table,name
TableMetaDataContext -> public void setTableName(@Nullable String tableName);1532091916;Set the name of the table for this context.;public void setTableName(@Nullable String tableName) {_		this.tableName = tableName__	};set,the,name,of,the,table,for,this,context;public,void,set,table,name,nullable,string,table,name,this,table,name,table,name
TableMetaDataContext -> public void setTableName(@Nullable String tableName);1550238935;Set the name of the table for this context.;public void setTableName(@Nullable String tableName) {_		this.tableName = tableName__	};set,the,name,of,the,table,for,this,context;public,void,set,table,name,nullable,string,table,name,this,table,name,table,name
TableMetaDataContext -> public void setCatalogName(String catalogName);1328020251;Set the name of the catalog for this context.;public void setCatalogName(String catalogName) {_		this.catalogName = catalogName__	};set,the,name,of,the,catalog,for,this,context;public,void,set,catalog,name,string,catalog,name,this,catalog,name,catalog,name
TableMetaDataContext -> public void setCatalogName(String catalogName);1385412762;Set the name of the catalog for this context.;public void setCatalogName(String catalogName) {_		this.catalogName = catalogName__	};set,the,name,of,the,catalog,for,this,context;public,void,set,catalog,name,string,catalog,name,this,catalog,name,catalog,name
TableMetaDataContext -> public void setCatalogName(String catalogName);1407511029;Set the name of the catalog for this context.;public void setCatalogName(String catalogName) {_		this.catalogName = catalogName__	};set,the,name,of,the,catalog,for,this,context;public,void,set,catalog,name,string,catalog,name,this,catalog,name,catalog,name
TableMetaDataContext -> public void setCatalogName(String catalogName);1416833949;Set the name of the catalog for this context.;public void setCatalogName(String catalogName) {_		this.catalogName = catalogName__	};set,the,name,of,the,catalog,for,this,context;public,void,set,catalog,name,string,catalog,name,this,catalog,name,catalog,name
TableMetaDataContext -> public void setCatalogName(String catalogName);1429214043;Set the name of the catalog for this context.;public void setCatalogName(String catalogName) {_		this.catalogName = catalogName__	};set,the,name,of,the,catalog,for,this,context;public,void,set,catalog,name,string,catalog,name,this,catalog,name,catalog,name
TableMetaDataContext -> public void setCatalogName(String catalogName);1464241861;Set the name of the catalog for this context.;public void setCatalogName(String catalogName) {_		this.catalogName = catalogName__	};set,the,name,of,the,catalog,for,this,context;public,void,set,catalog,name,string,catalog,name,this,catalog,name,catalog,name
TableMetaDataContext -> public void setCatalogName(String catalogName);1467730834;Set the name of the catalog for this context.;public void setCatalogName(String catalogName) {_		this.catalogName = catalogName__	};set,the,name,of,the,catalog,for,this,context;public,void,set,catalog,name,string,catalog,name,this,catalog,name,catalog,name
TableMetaDataContext -> public void setCatalogName(String catalogName);1487178248;Set the name of the catalog for this context.;public void setCatalogName(String catalogName) {_		this.catalogName = catalogName__	};set,the,name,of,the,catalog,for,this,context;public,void,set,catalog,name,string,catalog,name,this,catalog,name,catalog,name
TableMetaDataContext -> public void setCatalogName(String catalogName);1496837955;Set the name of the catalog for this context.;public void setCatalogName(String catalogName) {_		this.catalogName = catalogName__	};set,the,name,of,the,catalog,for,this,context;public,void,set,catalog,name,string,catalog,name,this,catalog,name,catalog,name
TableMetaDataContext -> public void setSchemaName(String schemaName);1328020251;Set the name of the schema for this context.;public void setSchemaName(String schemaName) {_		this.schemaName = schemaName__	};set,the,name,of,the,schema,for,this,context;public,void,set,schema,name,string,schema,name,this,schema,name,schema,name
TableMetaDataContext -> public void setSchemaName(String schemaName);1385412762;Set the name of the schema for this context.;public void setSchemaName(String schemaName) {_		this.schemaName = schemaName__	};set,the,name,of,the,schema,for,this,context;public,void,set,schema,name,string,schema,name,this,schema,name,schema,name
TableMetaDataContext -> public void setSchemaName(String schemaName);1407511029;Set the name of the schema for this context.;public void setSchemaName(String schemaName) {_		this.schemaName = schemaName__	};set,the,name,of,the,schema,for,this,context;public,void,set,schema,name,string,schema,name,this,schema,name,schema,name
TableMetaDataContext -> public void setSchemaName(String schemaName);1416833949;Set the name of the schema for this context.;public void setSchemaName(String schemaName) {_		this.schemaName = schemaName__	};set,the,name,of,the,schema,for,this,context;public,void,set,schema,name,string,schema,name,this,schema,name,schema,name
TableMetaDataContext -> public void setSchemaName(String schemaName);1429214043;Set the name of the schema for this context.;public void setSchemaName(String schemaName) {_		this.schemaName = schemaName__	};set,the,name,of,the,schema,for,this,context;public,void,set,schema,name,string,schema,name,this,schema,name,schema,name
TableMetaDataContext -> public void setSchemaName(String schemaName);1464241861;Set the name of the schema for this context.;public void setSchemaName(String schemaName) {_		this.schemaName = schemaName__	};set,the,name,of,the,schema,for,this,context;public,void,set,schema,name,string,schema,name,this,schema,name,schema,name
TableMetaDataContext -> public void setSchemaName(String schemaName);1467730834;Set the name of the schema for this context.;public void setSchemaName(String schemaName) {_		this.schemaName = schemaName__	};set,the,name,of,the,schema,for,this,context;public,void,set,schema,name,string,schema,name,this,schema,name,schema,name
TableMetaDataContext -> public void setSchemaName(String schemaName);1487178248;Set the name of the schema for this context.;public void setSchemaName(String schemaName) {_		this.schemaName = schemaName__	};set,the,name,of,the,schema,for,this,context;public,void,set,schema,name,string,schema,name,this,schema,name,schema,name
TableMetaDataContext -> public void setSchemaName(String schemaName);1496837955;Set the name of the schema for this context.;public void setSchemaName(String schemaName) {_		this.schemaName = schemaName__	};set,the,name,of,the,schema,for,this,context;public,void,set,schema,name,string,schema,name,this,schema,name,schema,name
TableMetaDataContext -> @Nullable 	public String getTableName();1496837955;Get the name of the table for this context.;@Nullable_	public String getTableName() {_		return this.tableName__	};get,the,name,of,the,table,for,this,context;nullable,public,string,get,table,name,return,this,table,name
TableMetaDataContext -> @Nullable 	public String getTableName();1500448076;Get the name of the table for this context.;@Nullable_	public String getTableName() {_		return this.tableName__	};get,the,name,of,the,table,for,this,context;nullable,public,string,get,table,name,return,this,table,name
TableMetaDataContext -> @Nullable 	public String getTableName();1500457438;Get the name of the table for this context.;@Nullable_	public String getTableName() {_		return this.tableName__	};get,the,name,of,the,table,for,this,context;nullable,public,string,get,table,name,return,this,table,name
TableMetaDataContext -> @Nullable 	public String getTableName();1515532822;Get the name of the table for this context.;@Nullable_	public String getTableName() {_		return this.tableName__	};get,the,name,of,the,table,for,this,context;nullable,public,string,get,table,name,return,this,table,name
TableMetaDataContext -> @Nullable 	public String getTableName();1516393837;Get the name of the table for this context.;@Nullable_	public String getTableName() {_		return this.tableName__	};get,the,name,of,the,table,for,this,context;nullable,public,string,get,table,name,return,this,table,name
TableMetaDataContext -> @Nullable 	public String getTableName();1518167526;Get the name of the table for this context.;@Nullable_	public String getTableName() {_		return this.tableName__	};get,the,name,of,the,table,for,this,context;nullable,public,string,get,table,name,return,this,table,name
TableMetaDataContext -> @Nullable 	public String getTableName();1521457491;Get the name of the table for this context.;@Nullable_	public String getTableName() {_		return this.tableName__	};get,the,name,of,the,table,for,this,context;nullable,public,string,get,table,name,return,this,table,name
TableMetaDataContext -> @Nullable 	public String getTableName();1522103912;Get the name of the table for this context.;@Nullable_	public String getTableName() {_		return this.tableName__	};get,the,name,of,the,table,for,this,context;nullable,public,string,get,table,name,return,this,table,name
TableMetaDataContext -> @Nullable 	public String getTableName();1528719423;Get the name of the table for this context.;@Nullable_	public String getTableName() {_		return this.tableName__	};get,the,name,of,the,table,for,this,context;nullable,public,string,get,table,name,return,this,table,name
TableMetaDataContext -> @Nullable 	public String getTableName();1530174524;Get the name of the table for this context.;@Nullable_	public String getTableName() {_		return this.tableName__	};get,the,name,of,the,table,for,this,context;nullable,public,string,get,table,name,return,this,table,name
TableMetaDataContext -> @Nullable 	public String getTableName();1532091916;Get the name of the table for this context.;@Nullable_	public String getTableName() {_		return this.tableName__	};get,the,name,of,the,table,for,this,context;nullable,public,string,get,table,name,return,this,table,name
TableMetaDataContext -> @Nullable 	public String getTableName();1550238935;Get the name of the table for this context.;@Nullable_	public String getTableName() {_		return this.tableName__	};get,the,name,of,the,table,for,this,context;nullable,public,string,get,table,name,return,this,table,name
TableMetaDataContext -> public void setTableName(String tableName);1328020251;Set the name of the table for this context.;public void setTableName(String tableName) {_		this.tableName = tableName__	};set,the,name,of,the,table,for,this,context;public,void,set,table,name,string,table,name,this,table,name,table,name
TableMetaDataContext -> public void setTableName(String tableName);1385412762;Set the name of the table for this context.;public void setTableName(String tableName) {_		this.tableName = tableName__	};set,the,name,of,the,table,for,this,context;public,void,set,table,name,string,table,name,this,table,name,table,name
TableMetaDataContext -> public void setTableName(String tableName);1407511029;Set the name of the table for this context.;public void setTableName(String tableName) {_		this.tableName = tableName__	};set,the,name,of,the,table,for,this,context;public,void,set,table,name,string,table,name,this,table,name,table,name
TableMetaDataContext -> public void setTableName(String tableName);1416833949;Set the name of the table for this context.;public void setTableName(String tableName) {_		this.tableName = tableName__	};set,the,name,of,the,table,for,this,context;public,void,set,table,name,string,table,name,this,table,name,table,name
TableMetaDataContext -> public void setTableName(String tableName);1429214043;Set the name of the table for this context.;public void setTableName(String tableName) {_		this.tableName = tableName__	};set,the,name,of,the,table,for,this,context;public,void,set,table,name,string,table,name,this,table,name,table,name
TableMetaDataContext -> public void setTableName(String tableName);1464241861;Set the name of the table for this context.;public void setTableName(String tableName) {_		this.tableName = tableName__	};set,the,name,of,the,table,for,this,context;public,void,set,table,name,string,table,name,this,table,name,table,name
TableMetaDataContext -> public void setTableName(String tableName);1467730834;Set the name of the table for this context.;public void setTableName(String tableName) {_		this.tableName = tableName__	};set,the,name,of,the,table,for,this,context;public,void,set,table,name,string,table,name,this,table,name,table,name
TableMetaDataContext -> public void setTableName(String tableName);1487178248;Set the name of the table for this context.;public void setTableName(String tableName) {_		this.tableName = tableName__	};set,the,name,of,the,table,for,this,context;public,void,set,table,name,string,table,name,this,table,name,table,name
TableMetaDataContext -> public void setTableName(String tableName);1496837955;Set the name of the table for this context.;public void setTableName(String tableName) {_		this.tableName = tableName__	};set,the,name,of,the,table,for,this,context;public,void,set,table,name,string,table,name,this,table,name,table,name
TableMetaDataContext -> @Nullable 	public String getCatalogName();1496837955;Get the name of the catalog for this context.;@Nullable_	public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog,for,this,context;nullable,public,string,get,catalog,name,return,this,catalog,name
TableMetaDataContext -> @Nullable 	public String getCatalogName();1500448076;Get the name of the catalog for this context.;@Nullable_	public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog,for,this,context;nullable,public,string,get,catalog,name,return,this,catalog,name
TableMetaDataContext -> @Nullable 	public String getCatalogName();1500457438;Get the name of the catalog for this context.;@Nullable_	public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog,for,this,context;nullable,public,string,get,catalog,name,return,this,catalog,name
TableMetaDataContext -> @Nullable 	public String getCatalogName();1515532822;Get the name of the catalog for this context.;@Nullable_	public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog,for,this,context;nullable,public,string,get,catalog,name,return,this,catalog,name
TableMetaDataContext -> @Nullable 	public String getCatalogName();1516393837;Get the name of the catalog for this context.;@Nullable_	public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog,for,this,context;nullable,public,string,get,catalog,name,return,this,catalog,name
TableMetaDataContext -> @Nullable 	public String getCatalogName();1518167526;Get the name of the catalog for this context.;@Nullable_	public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog,for,this,context;nullable,public,string,get,catalog,name,return,this,catalog,name
TableMetaDataContext -> @Nullable 	public String getCatalogName();1521457491;Get the name of the catalog for this context.;@Nullable_	public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog,for,this,context;nullable,public,string,get,catalog,name,return,this,catalog,name
TableMetaDataContext -> @Nullable 	public String getCatalogName();1522103912;Get the name of the catalog for this context.;@Nullable_	public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog,for,this,context;nullable,public,string,get,catalog,name,return,this,catalog,name
TableMetaDataContext -> @Nullable 	public String getCatalogName();1528719423;Get the name of the catalog for this context.;@Nullable_	public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog,for,this,context;nullable,public,string,get,catalog,name,return,this,catalog,name
TableMetaDataContext -> @Nullable 	public String getCatalogName();1530174524;Get the name of the catalog for this context.;@Nullable_	public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog,for,this,context;nullable,public,string,get,catalog,name,return,this,catalog,name
TableMetaDataContext -> @Nullable 	public String getCatalogName();1532091916;Get the name of the catalog for this context.;@Nullable_	public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog,for,this,context;nullable,public,string,get,catalog,name,return,this,catalog,name
TableMetaDataContext -> @Nullable 	public String getCatalogName();1550238935;Get the name of the catalog for this context.;@Nullable_	public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog,for,this,context;nullable,public,string,get,catalog,name,return,this,catalog,name
TableMetaDataContext -> public String getSimulationQueryForGetGeneratedKey(String tableName, String keyColumnName);1328020251;Does this database support simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported._{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public String getSimulationQueryForGetGeneratedKey(String tableName, String keyColumnName) {_		return this.metaDataProvider.getSimpleQueryForGetGeneratedKey(tableName, keyColumnName)__	};does,this,database,support,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys;public,string,get,simulation,query,for,get,generated,key,string,table,name,string,key,column,name,return,this,meta,data,provider,get,simple,query,for,get,generated,key,table,name,key,column,name
TableMetaDataContext -> public String getSimulationQueryForGetGeneratedKey(String tableName, String keyColumnName);1385412762;Does this database support simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported._{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public String getSimulationQueryForGetGeneratedKey(String tableName, String keyColumnName) {_		return this.metaDataProvider.getSimpleQueryForGetGeneratedKey(tableName, keyColumnName)__	};does,this,database,support,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys;public,string,get,simulation,query,for,get,generated,key,string,table,name,string,key,column,name,return,this,meta,data,provider,get,simple,query,for,get,generated,key,table,name,key,column,name
TableMetaDataContext -> public String getSimulationQueryForGetGeneratedKey(String tableName, String keyColumnName);1407511029;Does this database support simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported._{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public String getSimulationQueryForGetGeneratedKey(String tableName, String keyColumnName) {_		return this.metaDataProvider.getSimpleQueryForGetGeneratedKey(tableName, keyColumnName)__	};does,this,database,support,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys;public,string,get,simulation,query,for,get,generated,key,string,table,name,string,key,column,name,return,this,meta,data,provider,get,simple,query,for,get,generated,key,table,name,key,column,name
TableMetaDataContext -> public String getSimulationQueryForGetGeneratedKey(String tableName, String keyColumnName);1416833949;Does this database support simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported._{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public String getSimulationQueryForGetGeneratedKey(String tableName, String keyColumnName) {_		return this.metaDataProvider.getSimpleQueryForGetGeneratedKey(tableName, keyColumnName)__	};does,this,database,support,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys;public,string,get,simulation,query,for,get,generated,key,string,table,name,string,key,column,name,return,this,meta,data,provider,get,simple,query,for,get,generated,key,table,name,key,column,name
TableMetaDataContext -> public String getSimulationQueryForGetGeneratedKey(String tableName, String keyColumnName);1429214043;Does this database support simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported._{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public String getSimulationQueryForGetGeneratedKey(String tableName, String keyColumnName) {_		return this.metaDataProvider.getSimpleQueryForGetGeneratedKey(tableName, keyColumnName)__	};does,this,database,support,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys;public,string,get,simulation,query,for,get,generated,key,string,table,name,string,key,column,name,return,this,meta,data,provider,get,simple,query,for,get,generated,key,table,name,key,column,name
TableMetaDataContext -> public String getSimulationQueryForGetGeneratedKey(String tableName, String keyColumnName);1464241861;Does this database support simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported._{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public String getSimulationQueryForGetGeneratedKey(String tableName, String keyColumnName) {_		return this.metaDataProvider.getSimpleQueryForGetGeneratedKey(tableName, keyColumnName)__	};does,this,database,support,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys;public,string,get,simulation,query,for,get,generated,key,string,table,name,string,key,column,name,return,this,meta,data,provider,get,simple,query,for,get,generated,key,table,name,key,column,name
TableMetaDataContext -> public String getSimulationQueryForGetGeneratedKey(String tableName, String keyColumnName);1467730834;Does this database support simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported._{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public String getSimulationQueryForGetGeneratedKey(String tableName, String keyColumnName) {_		return this.metaDataProvider.getSimpleQueryForGetGeneratedKey(tableName, keyColumnName)__	};does,this,database,support,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys;public,string,get,simulation,query,for,get,generated,key,string,table,name,string,key,column,name,return,this,meta,data,provider,get,simple,query,for,get,generated,key,table,name,key,column,name
TableMetaDataContext -> public String getSimulationQueryForGetGeneratedKey(String tableName, String keyColumnName);1487178248;Does this database support simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported._{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public String getSimulationQueryForGetGeneratedKey(String tableName, String keyColumnName) {_		return this.metaDataProvider.getSimpleQueryForGetGeneratedKey(tableName, keyColumnName)__	};does,this,database,support,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys;public,string,get,simulation,query,for,get,generated,key,string,table,name,string,key,column,name,return,this,meta,data,provider,get,simple,query,for,get,generated,key,table,name,key,column,name
TableMetaDataContext -> public String getCatalogName();1328020251;Get the name of the catalog for this context.;public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog,for,this,context;public,string,get,catalog,name,return,this,catalog,name
TableMetaDataContext -> public String getCatalogName();1385412762;Get the name of the catalog for this context.;public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog,for,this,context;public,string,get,catalog,name,return,this,catalog,name
TableMetaDataContext -> public String getCatalogName();1407511029;Get the name of the catalog for this context.;public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog,for,this,context;public,string,get,catalog,name,return,this,catalog,name
TableMetaDataContext -> public String getCatalogName();1416833949;Get the name of the catalog for this context.;public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog,for,this,context;public,string,get,catalog,name,return,this,catalog,name
TableMetaDataContext -> public String getCatalogName();1429214043;Get the name of the catalog for this context.;public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog,for,this,context;public,string,get,catalog,name,return,this,catalog,name
TableMetaDataContext -> public String getCatalogName();1464241861;Get the name of the catalog for this context.;public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog,for,this,context;public,string,get,catalog,name,return,this,catalog,name
TableMetaDataContext -> public String getCatalogName();1467730834;Get the name of the catalog for this context.;public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog,for,this,context;public,string,get,catalog,name,return,this,catalog,name
TableMetaDataContext -> public String getCatalogName();1487178248;Get the name of the catalog for this context.;public String getCatalogName() {_		return this.catalogName__	};get,the,name,of,the,catalog,for,this,context;public,string,get,catalog,name,return,this,catalog,name
TableMetaDataContext -> public void processMetaData(DataSource dataSource, List<String> declaredColumns, String[] generatedKeyNames);1328020251;Process the current meta data with the provided configuration options._@param dataSource the DataSource being used_@param declaredColumns any columns that are declared_@param generatedKeyNames name of generated keys;public void processMetaData(DataSource dataSource, List<String> declaredColumns, String[] generatedKeyNames) {_		this.metaDataProvider = TableMetaDataProviderFactory.createMetaDataProvider(dataSource, this, this.nativeJdbcExtractor)__		this.tableColumns = reconcileColumnsToUse(declaredColumns, generatedKeyNames)__	};process,the,current,meta,data,with,the,provided,configuration,options,param,data,source,the,data,source,being,used,param,declared,columns,any,columns,that,are,declared,param,generated,key,names,name,of,generated,keys;public,void,process,meta,data,data,source,data,source,list,string,declared,columns,string,generated,key,names,this,meta,data,provider,table,meta,data,provider,factory,create,meta,data,provider,data,source,this,this,native,jdbc,extractor,this,table,columns,reconcile,columns,to,use,declared,columns,generated,key,names
TableMetaDataContext -> public void processMetaData(DataSource dataSource, List<String> declaredColumns, String[] generatedKeyNames);1385412762;Process the current meta data with the provided configuration options._@param dataSource the DataSource being used_@param declaredColumns any columns that are declared_@param generatedKeyNames name of generated keys;public void processMetaData(DataSource dataSource, List<String> declaredColumns, String[] generatedKeyNames) {_		this.metaDataProvider = TableMetaDataProviderFactory.createMetaDataProvider(dataSource, this, this.nativeJdbcExtractor)__		this.tableColumns = reconcileColumnsToUse(declaredColumns, generatedKeyNames)__	};process,the,current,meta,data,with,the,provided,configuration,options,param,data,source,the,data,source,being,used,param,declared,columns,any,columns,that,are,declared,param,generated,key,names,name,of,generated,keys;public,void,process,meta,data,data,source,data,source,list,string,declared,columns,string,generated,key,names,this,meta,data,provider,table,meta,data,provider,factory,create,meta,data,provider,data,source,this,this,native,jdbc,extractor,this,table,columns,reconcile,columns,to,use,declared,columns,generated,key,names
TableMetaDataContext -> public void processMetaData(DataSource dataSource, List<String> declaredColumns, String[] generatedKeyNames);1407511029;Process the current meta data with the provided configuration options._@param dataSource the DataSource being used_@param declaredColumns any columns that are declared_@param generatedKeyNames name of generated keys;public void processMetaData(DataSource dataSource, List<String> declaredColumns, String[] generatedKeyNames) {_		this.metaDataProvider = TableMetaDataProviderFactory.createMetaDataProvider(dataSource, this, this.nativeJdbcExtractor)__		this.tableColumns = reconcileColumnsToUse(declaredColumns, generatedKeyNames)__	};process,the,current,meta,data,with,the,provided,configuration,options,param,data,source,the,data,source,being,used,param,declared,columns,any,columns,that,are,declared,param,generated,key,names,name,of,generated,keys;public,void,process,meta,data,data,source,data,source,list,string,declared,columns,string,generated,key,names,this,meta,data,provider,table,meta,data,provider,factory,create,meta,data,provider,data,source,this,this,native,jdbc,extractor,this,table,columns,reconcile,columns,to,use,declared,columns,generated,key,names
TableMetaDataContext -> public void processMetaData(DataSource dataSource, List<String> declaredColumns, String[] generatedKeyNames);1416833949;Process the current meta data with the provided configuration options._@param dataSource the DataSource being used_@param declaredColumns any columns that are declared_@param generatedKeyNames name of generated keys;public void processMetaData(DataSource dataSource, List<String> declaredColumns, String[] generatedKeyNames) {_		this.metaDataProvider = TableMetaDataProviderFactory.createMetaDataProvider(dataSource, this, this.nativeJdbcExtractor)__		this.tableColumns = reconcileColumnsToUse(declaredColumns, generatedKeyNames)__	};process,the,current,meta,data,with,the,provided,configuration,options,param,data,source,the,data,source,being,used,param,declared,columns,any,columns,that,are,declared,param,generated,key,names,name,of,generated,keys;public,void,process,meta,data,data,source,data,source,list,string,declared,columns,string,generated,key,names,this,meta,data,provider,table,meta,data,provider,factory,create,meta,data,provider,data,source,this,this,native,jdbc,extractor,this,table,columns,reconcile,columns,to,use,declared,columns,generated,key,names
TableMetaDataContext -> public void processMetaData(DataSource dataSource, List<String> declaredColumns, String[] generatedKeyNames);1429214043;Process the current meta data with the provided configuration options._@param dataSource the DataSource being used_@param declaredColumns any columns that are declared_@param generatedKeyNames name of generated keys;public void processMetaData(DataSource dataSource, List<String> declaredColumns, String[] generatedKeyNames) {_		this.metaDataProvider =_				TableMetaDataProviderFactory.createMetaDataProvider(dataSource, this, this.nativeJdbcExtractor)__		this.tableColumns = reconcileColumnsToUse(declaredColumns, generatedKeyNames)__	};process,the,current,meta,data,with,the,provided,configuration,options,param,data,source,the,data,source,being,used,param,declared,columns,any,columns,that,are,declared,param,generated,key,names,name,of,generated,keys;public,void,process,meta,data,data,source,data,source,list,string,declared,columns,string,generated,key,names,this,meta,data,provider,table,meta,data,provider,factory,create,meta,data,provider,data,source,this,this,native,jdbc,extractor,this,table,columns,reconcile,columns,to,use,declared,columns,generated,key,names
TableMetaDataContext -> public void processMetaData(DataSource dataSource, List<String> declaredColumns, String[] generatedKeyNames);1464241861;Process the current meta data with the provided configuration options._@param dataSource the DataSource being used_@param declaredColumns any columns that are declared_@param generatedKeyNames name of generated keys;public void processMetaData(DataSource dataSource, List<String> declaredColumns, String[] generatedKeyNames) {_		this.metaDataProvider =_				TableMetaDataProviderFactory.createMetaDataProvider(dataSource, this, this.nativeJdbcExtractor)__		this.tableColumns = reconcileColumnsToUse(declaredColumns, generatedKeyNames)__	};process,the,current,meta,data,with,the,provided,configuration,options,param,data,source,the,data,source,being,used,param,declared,columns,any,columns,that,are,declared,param,generated,key,names,name,of,generated,keys;public,void,process,meta,data,data,source,data,source,list,string,declared,columns,string,generated,key,names,this,meta,data,provider,table,meta,data,provider,factory,create,meta,data,provider,data,source,this,this,native,jdbc,extractor,this,table,columns,reconcile,columns,to,use,declared,columns,generated,key,names
TableMetaDataContext -> public void processMetaData(DataSource dataSource, List<String> declaredColumns, String[] generatedKeyNames);1467730834;Process the current meta data with the provided configuration options._@param dataSource the DataSource being used_@param declaredColumns any columns that are declared_@param generatedKeyNames name of generated keys;public void processMetaData(DataSource dataSource, List<String> declaredColumns, String[] generatedKeyNames) {_		this.metaDataProvider =_				TableMetaDataProviderFactory.createMetaDataProvider(dataSource, this, this.nativeJdbcExtractor)__		this.tableColumns = reconcileColumnsToUse(declaredColumns, generatedKeyNames)__	};process,the,current,meta,data,with,the,provided,configuration,options,param,data,source,the,data,source,being,used,param,declared,columns,any,columns,that,are,declared,param,generated,key,names,name,of,generated,keys;public,void,process,meta,data,data,source,data,source,list,string,declared,columns,string,generated,key,names,this,meta,data,provider,table,meta,data,provider,factory,create,meta,data,provider,data,source,this,this,native,jdbc,extractor,this,table,columns,reconcile,columns,to,use,declared,columns,generated,key,names
TableMetaDataContext -> public void processMetaData(DataSource dataSource, List<String> declaredColumns, String[] generatedKeyNames);1487178248;Process the current meta data with the provided configuration options._@param dataSource the DataSource being used_@param declaredColumns any columns that are declared_@param generatedKeyNames name of generated keys;public void processMetaData(DataSource dataSource, List<String> declaredColumns, String[] generatedKeyNames) {_		this.metaDataProvider = TableMetaDataProviderFactory.createMetaDataProvider(dataSource, this)__		this.tableColumns = reconcileColumnsToUse(declaredColumns, generatedKeyNames)__	};process,the,current,meta,data,with,the,provided,configuration,options,param,data,source,the,data,source,being,used,param,declared,columns,any,columns,that,are,declared,param,generated,key,names,name,of,generated,keys;public,void,process,meta,data,data,source,data,source,list,string,declared,columns,string,generated,key,names,this,meta,data,provider,table,meta,data,provider,factory,create,meta,data,provider,data,source,this,this,table,columns,reconcile,columns,to,use,declared,columns,generated,key,names
TableMetaDataContext -> public void processMetaData(DataSource dataSource, List<String> declaredColumns, String[] generatedKeyNames);1496837955;Process the current meta data with the provided configuration options._@param dataSource the DataSource being used_@param declaredColumns any columns that are declared_@param generatedKeyNames name of generated keys;public void processMetaData(DataSource dataSource, List<String> declaredColumns, String[] generatedKeyNames) {_		this.metaDataProvider = TableMetaDataProviderFactory.createMetaDataProvider(dataSource, this)__		this.tableColumns = reconcileColumnsToUse(declaredColumns, generatedKeyNames)__	};process,the,current,meta,data,with,the,provided,configuration,options,param,data,source,the,data,source,being,used,param,declared,columns,any,columns,that,are,declared,param,generated,key,names,name,of,generated,keys;public,void,process,meta,data,data,source,data,source,list,string,declared,columns,string,generated,key,names,this,meta,data,provider,table,meta,data,provider,factory,create,meta,data,provider,data,source,this,this,table,columns,reconcile,columns,to,use,declared,columns,generated,key,names
TableMetaDataContext -> public void processMetaData(DataSource dataSource, List<String> declaredColumns, String[] generatedKeyNames);1500448076;Process the current meta data with the provided configuration options._@param dataSource the DataSource being used_@param declaredColumns any columns that are declared_@param generatedKeyNames name of generated keys;public void processMetaData(DataSource dataSource, List<String> declaredColumns, String[] generatedKeyNames) {_		this.metaDataProvider = TableMetaDataProviderFactory.createMetaDataProvider(dataSource, this)__		this.tableColumns = reconcileColumnsToUse(declaredColumns, generatedKeyNames)__	};process,the,current,meta,data,with,the,provided,configuration,options,param,data,source,the,data,source,being,used,param,declared,columns,any,columns,that,are,declared,param,generated,key,names,name,of,generated,keys;public,void,process,meta,data,data,source,data,source,list,string,declared,columns,string,generated,key,names,this,meta,data,provider,table,meta,data,provider,factory,create,meta,data,provider,data,source,this,this,table,columns,reconcile,columns,to,use,declared,columns,generated,key,names
TableMetaDataContext -> public void processMetaData(DataSource dataSource, List<String> declaredColumns, String[] generatedKeyNames);1500457438;Process the current meta data with the provided configuration options._@param dataSource the DataSource being used_@param declaredColumns any columns that are declared_@param generatedKeyNames name of generated keys;public void processMetaData(DataSource dataSource, List<String> declaredColumns, String[] generatedKeyNames) {_		this.metaDataProvider = TableMetaDataProviderFactory.createMetaDataProvider(dataSource, this)__		this.tableColumns = reconcileColumnsToUse(declaredColumns, generatedKeyNames)__	};process,the,current,meta,data,with,the,provided,configuration,options,param,data,source,the,data,source,being,used,param,declared,columns,any,columns,that,are,declared,param,generated,key,names,name,of,generated,keys;public,void,process,meta,data,data,source,data,source,list,string,declared,columns,string,generated,key,names,this,meta,data,provider,table,meta,data,provider,factory,create,meta,data,provider,data,source,this,this,table,columns,reconcile,columns,to,use,declared,columns,generated,key,names
TableMetaDataContext -> public void processMetaData(DataSource dataSource, List<String> declaredColumns, String[] generatedKeyNames);1515532822;Process the current meta data with the provided configuration options._@param dataSource the DataSource being used_@param declaredColumns any columns that are declared_@param generatedKeyNames name of generated keys;public void processMetaData(DataSource dataSource, List<String> declaredColumns, String[] generatedKeyNames) {_		this.metaDataProvider = TableMetaDataProviderFactory.createMetaDataProvider(dataSource, this)__		this.tableColumns = reconcileColumnsToUse(declaredColumns, generatedKeyNames)__	};process,the,current,meta,data,with,the,provided,configuration,options,param,data,source,the,data,source,being,used,param,declared,columns,any,columns,that,are,declared,param,generated,key,names,name,of,generated,keys;public,void,process,meta,data,data,source,data,source,list,string,declared,columns,string,generated,key,names,this,meta,data,provider,table,meta,data,provider,factory,create,meta,data,provider,data,source,this,this,table,columns,reconcile,columns,to,use,declared,columns,generated,key,names
TableMetaDataContext -> public void processMetaData(DataSource dataSource, List<String> declaredColumns, String[] generatedKeyNames);1516393837;Process the current meta data with the provided configuration options._@param dataSource the DataSource being used_@param declaredColumns any columns that are declared_@param generatedKeyNames name of generated keys;public void processMetaData(DataSource dataSource, List<String> declaredColumns, String[] generatedKeyNames) {_		this.metaDataProvider = TableMetaDataProviderFactory.createMetaDataProvider(dataSource, this)__		this.tableColumns = reconcileColumnsToUse(declaredColumns, generatedKeyNames)__	};process,the,current,meta,data,with,the,provided,configuration,options,param,data,source,the,data,source,being,used,param,declared,columns,any,columns,that,are,declared,param,generated,key,names,name,of,generated,keys;public,void,process,meta,data,data,source,data,source,list,string,declared,columns,string,generated,key,names,this,meta,data,provider,table,meta,data,provider,factory,create,meta,data,provider,data,source,this,this,table,columns,reconcile,columns,to,use,declared,columns,generated,key,names
TableMetaDataContext -> public void processMetaData(DataSource dataSource, List<String> declaredColumns, String[] generatedKeyNames);1518167526;Process the current meta data with the provided configuration options._@param dataSource the DataSource being used_@param declaredColumns any columns that are declared_@param generatedKeyNames name of generated keys;public void processMetaData(DataSource dataSource, List<String> declaredColumns, String[] generatedKeyNames) {_		this.metaDataProvider = TableMetaDataProviderFactory.createMetaDataProvider(dataSource, this)__		this.tableColumns = reconcileColumnsToUse(declaredColumns, generatedKeyNames)__	};process,the,current,meta,data,with,the,provided,configuration,options,param,data,source,the,data,source,being,used,param,declared,columns,any,columns,that,are,declared,param,generated,key,names,name,of,generated,keys;public,void,process,meta,data,data,source,data,source,list,string,declared,columns,string,generated,key,names,this,meta,data,provider,table,meta,data,provider,factory,create,meta,data,provider,data,source,this,this,table,columns,reconcile,columns,to,use,declared,columns,generated,key,names
TableMetaDataContext -> public void processMetaData(DataSource dataSource, List<String> declaredColumns, String[] generatedKeyNames);1521457491;Process the current meta-data with the provided configuration options._@param dataSource the DataSource being used_@param declaredColumns any columns that are declared_@param generatedKeyNames name of generated keys;public void processMetaData(DataSource dataSource, List<String> declaredColumns, String[] generatedKeyNames) {_		this.metaDataProvider = TableMetaDataProviderFactory.createMetaDataProvider(dataSource, this)__		this.tableColumns = reconcileColumnsToUse(declaredColumns, generatedKeyNames)__	};process,the,current,meta,data,with,the,provided,configuration,options,param,data,source,the,data,source,being,used,param,declared,columns,any,columns,that,are,declared,param,generated,key,names,name,of,generated,keys;public,void,process,meta,data,data,source,data,source,list,string,declared,columns,string,generated,key,names,this,meta,data,provider,table,meta,data,provider,factory,create,meta,data,provider,data,source,this,this,table,columns,reconcile,columns,to,use,declared,columns,generated,key,names
TableMetaDataContext -> public void processMetaData(DataSource dataSource, List<String> declaredColumns, String[] generatedKeyNames);1522103912;Process the current meta-data with the provided configuration options._@param dataSource the DataSource being used_@param declaredColumns any columns that are declared_@param generatedKeyNames name of generated keys;public void processMetaData(DataSource dataSource, List<String> declaredColumns, String[] generatedKeyNames) {_		this.metaDataProvider = TableMetaDataProviderFactory.createMetaDataProvider(dataSource, this)__		this.tableColumns = reconcileColumnsToUse(declaredColumns, generatedKeyNames)__	};process,the,current,meta,data,with,the,provided,configuration,options,param,data,source,the,data,source,being,used,param,declared,columns,any,columns,that,are,declared,param,generated,key,names,name,of,generated,keys;public,void,process,meta,data,data,source,data,source,list,string,declared,columns,string,generated,key,names,this,meta,data,provider,table,meta,data,provider,factory,create,meta,data,provider,data,source,this,this,table,columns,reconcile,columns,to,use,declared,columns,generated,key,names
TableMetaDataContext -> public void processMetaData(DataSource dataSource, List<String> declaredColumns, String[] generatedKeyNames);1528719423;Process the current meta-data with the provided configuration options._@param dataSource the DataSource being used_@param declaredColumns any columns that are declared_@param generatedKeyNames name of generated keys;public void processMetaData(DataSource dataSource, List<String> declaredColumns, String[] generatedKeyNames) {_		this.metaDataProvider = TableMetaDataProviderFactory.createMetaDataProvider(dataSource, this)__		this.tableColumns = reconcileColumnsToUse(declaredColumns, generatedKeyNames)__	};process,the,current,meta,data,with,the,provided,configuration,options,param,data,source,the,data,source,being,used,param,declared,columns,any,columns,that,are,declared,param,generated,key,names,name,of,generated,keys;public,void,process,meta,data,data,source,data,source,list,string,declared,columns,string,generated,key,names,this,meta,data,provider,table,meta,data,provider,factory,create,meta,data,provider,data,source,this,this,table,columns,reconcile,columns,to,use,declared,columns,generated,key,names
TableMetaDataContext -> public void processMetaData(DataSource dataSource, List<String> declaredColumns, String[] generatedKeyNames);1530174524;Process the current meta-data with the provided configuration options._@param dataSource the DataSource being used_@param declaredColumns any columns that are declared_@param generatedKeyNames name of generated keys;public void processMetaData(DataSource dataSource, List<String> declaredColumns, String[] generatedKeyNames) {_		this.metaDataProvider = TableMetaDataProviderFactory.createMetaDataProvider(dataSource, this)__		this.tableColumns = reconcileColumnsToUse(declaredColumns, generatedKeyNames)__	};process,the,current,meta,data,with,the,provided,configuration,options,param,data,source,the,data,source,being,used,param,declared,columns,any,columns,that,are,declared,param,generated,key,names,name,of,generated,keys;public,void,process,meta,data,data,source,data,source,list,string,declared,columns,string,generated,key,names,this,meta,data,provider,table,meta,data,provider,factory,create,meta,data,provider,data,source,this,this,table,columns,reconcile,columns,to,use,declared,columns,generated,key,names
TableMetaDataContext -> public void processMetaData(DataSource dataSource, List<String> declaredColumns, String[] generatedKeyNames);1532091916;Process the current meta-data with the provided configuration options._@param dataSource the DataSource being used_@param declaredColumns any columns that are declared_@param generatedKeyNames name of generated keys;public void processMetaData(DataSource dataSource, List<String> declaredColumns, String[] generatedKeyNames) {_		this.metaDataProvider = TableMetaDataProviderFactory.createMetaDataProvider(dataSource, this)__		this.tableColumns = reconcileColumnsToUse(declaredColumns, generatedKeyNames)__	};process,the,current,meta,data,with,the,provided,configuration,options,param,data,source,the,data,source,being,used,param,declared,columns,any,columns,that,are,declared,param,generated,key,names,name,of,generated,keys;public,void,process,meta,data,data,source,data,source,list,string,declared,columns,string,generated,key,names,this,meta,data,provider,table,meta,data,provider,factory,create,meta,data,provider,data,source,this,this,table,columns,reconcile,columns,to,use,declared,columns,generated,key,names
TableMetaDataContext -> public void processMetaData(DataSource dataSource, List<String> declaredColumns, String[] generatedKeyNames);1550238935;Process the current meta-data with the provided configuration options._@param dataSource the DataSource being used_@param declaredColumns any columns that are declared_@param generatedKeyNames name of generated keys;public void processMetaData(DataSource dataSource, List<String> declaredColumns, String[] generatedKeyNames) {_		this.metaDataProvider = TableMetaDataProviderFactory.createMetaDataProvider(dataSource, this)__		this.tableColumns = reconcileColumnsToUse(declaredColumns, generatedKeyNames)__	};process,the,current,meta,data,with,the,provided,configuration,options,param,data,source,the,data,source,being,used,param,declared,columns,any,columns,that,are,declared,param,generated,key,names,name,of,generated,keys;public,void,process,meta,data,data,source,data,source,list,string,declared,columns,string,generated,key,names,this,meta,data,provider,table,meta,data,provider,factory,create,meta,data,provider,data,source,this,this,table,columns,reconcile,columns,to,use,declared,columns,generated,key,names
TableMetaDataContext -> protected List<String> reconcileColumnsToUse(List<String> declaredColumns, String[] generatedKeyNames);1328020251;Compare columns created from metadata with declared columns and return a reconciled list._@param declaredColumns declared column names_@param generatedKeyNames names of generated key columns;protected List<String> reconcileColumnsToUse(List<String> declaredColumns, String[] generatedKeyNames) {_		if (generatedKeyNames.length > 0) {_			this.generatedKeyColumnsUsed = true__		}_		if (declaredColumns.size() > 0) {_			return new ArrayList<String>(declaredColumns)__		}_		Set<String> keys = new HashSet<String>(generatedKeyNames.length)__		for (String key : generatedKeyNames) {_			keys.add(key.toUpperCase())__		}_		List<String> columns = new ArrayList<String>()__		for (TableParameterMetaData meta : metaDataProvider.getTableParameterMetaData()) {_			if (!keys.contains(meta.getParameterName().toUpperCase())) {_				columns.add(meta.getParameterName())__			}_		}_		return columns__	};compare,columns,created,from,metadata,with,declared,columns,and,return,a,reconciled,list,param,declared,columns,declared,column,names,param,generated,key,names,names,of,generated,key,columns;protected,list,string,reconcile,columns,to,use,list,string,declared,columns,string,generated,key,names,if,generated,key,names,length,0,this,generated,key,columns,used,true,if,declared,columns,size,0,return,new,array,list,string,declared,columns,set,string,keys,new,hash,set,string,generated,key,names,length,for,string,key,generated,key,names,keys,add,key,to,upper,case,list,string,columns,new,array,list,string,for,table,parameter,meta,data,meta,meta,data,provider,get,table,parameter,meta,data,if,keys,contains,meta,get,parameter,name,to,upper,case,columns,add,meta,get,parameter,name,return,columns
TableMetaDataContext -> protected List<String> reconcileColumnsToUse(List<String> declaredColumns, String[] generatedKeyNames);1385412762;Compare columns created from metadata with declared columns and return a reconciled list._@param declaredColumns declared column names_@param generatedKeyNames names of generated key columns;protected List<String> reconcileColumnsToUse(List<String> declaredColumns, String[] generatedKeyNames) {_		if (generatedKeyNames.length > 0) {_			this.generatedKeyColumnsUsed = true__		}_		if (declaredColumns.size() > 0) {_			return new ArrayList<String>(declaredColumns)__		}_		Set<String> keys = new HashSet<String>(generatedKeyNames.length)__		for (String key : generatedKeyNames) {_			keys.add(key.toUpperCase())__		}_		List<String> columns = new ArrayList<String>()__		for (TableParameterMetaData meta : metaDataProvider.getTableParameterMetaData()) {_			if (!keys.contains(meta.getParameterName().toUpperCase())) {_				columns.add(meta.getParameterName())__			}_		}_		return columns__	};compare,columns,created,from,metadata,with,declared,columns,and,return,a,reconciled,list,param,declared,columns,declared,column,names,param,generated,key,names,names,of,generated,key,columns;protected,list,string,reconcile,columns,to,use,list,string,declared,columns,string,generated,key,names,if,generated,key,names,length,0,this,generated,key,columns,used,true,if,declared,columns,size,0,return,new,array,list,string,declared,columns,set,string,keys,new,hash,set,string,generated,key,names,length,for,string,key,generated,key,names,keys,add,key,to,upper,case,list,string,columns,new,array,list,string,for,table,parameter,meta,data,meta,meta,data,provider,get,table,parameter,meta,data,if,keys,contains,meta,get,parameter,name,to,upper,case,columns,add,meta,get,parameter,name,return,columns
TableMetaDataContext -> protected List<String> reconcileColumnsToUse(List<String> declaredColumns, String[] generatedKeyNames);1407511029;Compare columns created from metadata with declared columns and return a reconciled list._@param declaredColumns declared column names_@param generatedKeyNames names of generated key columns;protected List<String> reconcileColumnsToUse(List<String> declaredColumns, String[] generatedKeyNames) {_		if (generatedKeyNames.length > 0) {_			this.generatedKeyColumnsUsed = true__		}_		if (declaredColumns.size() > 0) {_			return new ArrayList<String>(declaredColumns)__		}_		Set<String> keys = new HashSet<String>(generatedKeyNames.length)__		for (String key : generatedKeyNames) {_			keys.add(key.toUpperCase())__		}_		List<String> columns = new ArrayList<String>()__		for (TableParameterMetaData meta : metaDataProvider.getTableParameterMetaData()) {_			if (!keys.contains(meta.getParameterName().toUpperCase())) {_				columns.add(meta.getParameterName())__			}_		}_		return columns__	};compare,columns,created,from,metadata,with,declared,columns,and,return,a,reconciled,list,param,declared,columns,declared,column,names,param,generated,key,names,names,of,generated,key,columns;protected,list,string,reconcile,columns,to,use,list,string,declared,columns,string,generated,key,names,if,generated,key,names,length,0,this,generated,key,columns,used,true,if,declared,columns,size,0,return,new,array,list,string,declared,columns,set,string,keys,new,hash,set,string,generated,key,names,length,for,string,key,generated,key,names,keys,add,key,to,upper,case,list,string,columns,new,array,list,string,for,table,parameter,meta,data,meta,meta,data,provider,get,table,parameter,meta,data,if,keys,contains,meta,get,parameter,name,to,upper,case,columns,add,meta,get,parameter,name,return,columns
TableMetaDataContext -> protected List<String> reconcileColumnsToUse(List<String> declaredColumns, String[] generatedKeyNames);1416833949;Compare columns created from metadata with declared columns and return a reconciled list._@param declaredColumns declared column names_@param generatedKeyNames names of generated key columns;protected List<String> reconcileColumnsToUse(List<String> declaredColumns, String[] generatedKeyNames) {_		if (generatedKeyNames.length > 0) {_			this.generatedKeyColumnsUsed = true__		}_		if (declaredColumns.size() > 0) {_			return new ArrayList<String>(declaredColumns)__		}_		Set<String> keys = new LinkedHashSet<String>(generatedKeyNames.length)__		for (String key : generatedKeyNames) {_			keys.add(key.toUpperCase())__		}_		List<String> columns = new ArrayList<String>()__		for (TableParameterMetaData meta : metaDataProvider.getTableParameterMetaData()) {_			if (!keys.contains(meta.getParameterName().toUpperCase())) {_				columns.add(meta.getParameterName())__			}_		}_		return columns__	};compare,columns,created,from,metadata,with,declared,columns,and,return,a,reconciled,list,param,declared,columns,declared,column,names,param,generated,key,names,names,of,generated,key,columns;protected,list,string,reconcile,columns,to,use,list,string,declared,columns,string,generated,key,names,if,generated,key,names,length,0,this,generated,key,columns,used,true,if,declared,columns,size,0,return,new,array,list,string,declared,columns,set,string,keys,new,linked,hash,set,string,generated,key,names,length,for,string,key,generated,key,names,keys,add,key,to,upper,case,list,string,columns,new,array,list,string,for,table,parameter,meta,data,meta,meta,data,provider,get,table,parameter,meta,data,if,keys,contains,meta,get,parameter,name,to,upper,case,columns,add,meta,get,parameter,name,return,columns
TableMetaDataContext -> protected List<String> reconcileColumnsToUse(List<String> declaredColumns, String[] generatedKeyNames);1429214043;Compare columns created from metadata with declared columns and return a reconciled list._@param declaredColumns declared column names_@param generatedKeyNames names of generated key columns;protected List<String> reconcileColumnsToUse(List<String> declaredColumns, String[] generatedKeyNames) {_		if (generatedKeyNames.length > 0) {_			this.generatedKeyColumnsUsed = true__		}_		if (declaredColumns.size() > 0) {_			return new ArrayList<String>(declaredColumns)__		}_		Set<String> keys = new LinkedHashSet<String>(generatedKeyNames.length)__		for (String key : generatedKeyNames) {_			keys.add(key.toUpperCase())__		}_		List<String> columns = new ArrayList<String>()__		for (TableParameterMetaData meta : metaDataProvider.getTableParameterMetaData()) {_			if (!keys.contains(meta.getParameterName().toUpperCase())) {_				columns.add(meta.getParameterName())__			}_		}_		return columns__	};compare,columns,created,from,metadata,with,declared,columns,and,return,a,reconciled,list,param,declared,columns,declared,column,names,param,generated,key,names,names,of,generated,key,columns;protected,list,string,reconcile,columns,to,use,list,string,declared,columns,string,generated,key,names,if,generated,key,names,length,0,this,generated,key,columns,used,true,if,declared,columns,size,0,return,new,array,list,string,declared,columns,set,string,keys,new,linked,hash,set,string,generated,key,names,length,for,string,key,generated,key,names,keys,add,key,to,upper,case,list,string,columns,new,array,list,string,for,table,parameter,meta,data,meta,meta,data,provider,get,table,parameter,meta,data,if,keys,contains,meta,get,parameter,name,to,upper,case,columns,add,meta,get,parameter,name,return,columns
TableMetaDataContext -> protected List<String> reconcileColumnsToUse(List<String> declaredColumns, String[] generatedKeyNames);1464241861;Compare columns created from metadata with declared columns and return a reconciled list._@param declaredColumns declared column names_@param generatedKeyNames names of generated key columns;protected List<String> reconcileColumnsToUse(List<String> declaredColumns, String[] generatedKeyNames) {_		if (generatedKeyNames.length > 0) {_			this.generatedKeyColumnsUsed = true__		}_		if (declaredColumns.size() > 0) {_			return new ArrayList<String>(declaredColumns)__		}_		Set<String> keys = new LinkedHashSet<String>(generatedKeyNames.length)__		for (String key : generatedKeyNames) {_			keys.add(key.toUpperCase())__		}_		List<String> columns = new ArrayList<String>()__		for (TableParameterMetaData meta : metaDataProvider.getTableParameterMetaData()) {_			if (!keys.contains(meta.getParameterName().toUpperCase())) {_				columns.add(meta.getParameterName())__			}_		}_		return columns__	};compare,columns,created,from,metadata,with,declared,columns,and,return,a,reconciled,list,param,declared,columns,declared,column,names,param,generated,key,names,names,of,generated,key,columns;protected,list,string,reconcile,columns,to,use,list,string,declared,columns,string,generated,key,names,if,generated,key,names,length,0,this,generated,key,columns,used,true,if,declared,columns,size,0,return,new,array,list,string,declared,columns,set,string,keys,new,linked,hash,set,string,generated,key,names,length,for,string,key,generated,key,names,keys,add,key,to,upper,case,list,string,columns,new,array,list,string,for,table,parameter,meta,data,meta,meta,data,provider,get,table,parameter,meta,data,if,keys,contains,meta,get,parameter,name,to,upper,case,columns,add,meta,get,parameter,name,return,columns
TableMetaDataContext -> protected List<String> reconcileColumnsToUse(List<String> declaredColumns, String[] generatedKeyNames);1467730834;Compare columns created from metadata with declared columns and return a reconciled list._@param declaredColumns declared column names_@param generatedKeyNames names of generated key columns;protected List<String> reconcileColumnsToUse(List<String> declaredColumns, String[] generatedKeyNames) {_		if (generatedKeyNames.length > 0) {_			this.generatedKeyColumnsUsed = true__		}_		if (declaredColumns.size() > 0) {_			return new ArrayList<>(declaredColumns)__		}_		Set<String> keys = new LinkedHashSet<>(generatedKeyNames.length)__		for (String key : generatedKeyNames) {_			keys.add(key.toUpperCase())__		}_		List<String> columns = new ArrayList<>()__		for (TableParameterMetaData meta : metaDataProvider.getTableParameterMetaData()) {_			if (!keys.contains(meta.getParameterName().toUpperCase())) {_				columns.add(meta.getParameterName())__			}_		}_		return columns__	};compare,columns,created,from,metadata,with,declared,columns,and,return,a,reconciled,list,param,declared,columns,declared,column,names,param,generated,key,names,names,of,generated,key,columns;protected,list,string,reconcile,columns,to,use,list,string,declared,columns,string,generated,key,names,if,generated,key,names,length,0,this,generated,key,columns,used,true,if,declared,columns,size,0,return,new,array,list,declared,columns,set,string,keys,new,linked,hash,set,generated,key,names,length,for,string,key,generated,key,names,keys,add,key,to,upper,case,list,string,columns,new,array,list,for,table,parameter,meta,data,meta,meta,data,provider,get,table,parameter,meta,data,if,keys,contains,meta,get,parameter,name,to,upper,case,columns,add,meta,get,parameter,name,return,columns
TableMetaDataContext -> protected List<String> reconcileColumnsToUse(List<String> declaredColumns, String[] generatedKeyNames);1487178248;Compare columns created from metadata with declared columns and return a reconciled list._@param declaredColumns declared column names_@param generatedKeyNames names of generated key columns;protected List<String> reconcileColumnsToUse(List<String> declaredColumns, String[] generatedKeyNames) {_		if (generatedKeyNames.length > 0) {_			this.generatedKeyColumnsUsed = true__		}_		if (declaredColumns.size() > 0) {_			return new ArrayList<>(declaredColumns)__		}_		Set<String> keys = new LinkedHashSet<>(generatedKeyNames.length)__		for (String key : generatedKeyNames) {_			keys.add(key.toUpperCase())__		}_		List<String> columns = new ArrayList<>()__		for (TableParameterMetaData meta : metaDataProvider.getTableParameterMetaData()) {_			if (!keys.contains(meta.getParameterName().toUpperCase())) {_				columns.add(meta.getParameterName())__			}_		}_		return columns__	};compare,columns,created,from,metadata,with,declared,columns,and,return,a,reconciled,list,param,declared,columns,declared,column,names,param,generated,key,names,names,of,generated,key,columns;protected,list,string,reconcile,columns,to,use,list,string,declared,columns,string,generated,key,names,if,generated,key,names,length,0,this,generated,key,columns,used,true,if,declared,columns,size,0,return,new,array,list,declared,columns,set,string,keys,new,linked,hash,set,generated,key,names,length,for,string,key,generated,key,names,keys,add,key,to,upper,case,list,string,columns,new,array,list,for,table,parameter,meta,data,meta,meta,data,provider,get,table,parameter,meta,data,if,keys,contains,meta,get,parameter,name,to,upper,case,columns,add,meta,get,parameter,name,return,columns
TableMetaDataContext -> protected List<String> reconcileColumnsToUse(List<String> declaredColumns, String[] generatedKeyNames);1496837955;Compare columns created from metadata with declared columns and return a reconciled list._@param declaredColumns declared column names_@param generatedKeyNames names of generated key columns;protected List<String> reconcileColumnsToUse(List<String> declaredColumns, String[] generatedKeyNames) {_		if (generatedKeyNames.length > 0) {_			this.generatedKeyColumnsUsed = true__		}_		if (declaredColumns.size() > 0) {_			return new ArrayList<>(declaredColumns)__		}_		Set<String> keys = new LinkedHashSet<>(generatedKeyNames.length)__		for (String key : generatedKeyNames) {_			keys.add(key.toUpperCase())__		}_		List<String> columns = new ArrayList<>()__		for (TableParameterMetaData meta : metaDataProvider.getTableParameterMetaData()) {_			if (!keys.contains(meta.getParameterName().toUpperCase())) {_				columns.add(meta.getParameterName())__			}_		}_		return columns__	};compare,columns,created,from,metadata,with,declared,columns,and,return,a,reconciled,list,param,declared,columns,declared,column,names,param,generated,key,names,names,of,generated,key,columns;protected,list,string,reconcile,columns,to,use,list,string,declared,columns,string,generated,key,names,if,generated,key,names,length,0,this,generated,key,columns,used,true,if,declared,columns,size,0,return,new,array,list,declared,columns,set,string,keys,new,linked,hash,set,generated,key,names,length,for,string,key,generated,key,names,keys,add,key,to,upper,case,list,string,columns,new,array,list,for,table,parameter,meta,data,meta,meta,data,provider,get,table,parameter,meta,data,if,keys,contains,meta,get,parameter,name,to,upper,case,columns,add,meta,get,parameter,name,return,columns
TableMetaDataContext -> protected List<String> reconcileColumnsToUse(List<String> declaredColumns, String[] generatedKeyNames);1500448076;Compare columns created from metadata with declared columns and return a reconciled list._@param declaredColumns declared column names_@param generatedKeyNames names of generated key columns;protected List<String> reconcileColumnsToUse(List<String> declaredColumns, String[] generatedKeyNames) {_		if (generatedKeyNames.length > 0) {_			this.generatedKeyColumnsUsed = true__		}_		if (declaredColumns.size() > 0) {_			return new ArrayList<>(declaredColumns)__		}_		Set<String> keys = new LinkedHashSet<>(generatedKeyNames.length)__		for (String key : generatedKeyNames) {_			keys.add(key.toUpperCase())__		}_		List<String> columns = new ArrayList<>()__		for (TableParameterMetaData meta : metaDataProvider.getTableParameterMetaData()) {_			if (!keys.contains(meta.getParameterName().toUpperCase())) {_				columns.add(meta.getParameterName())__			}_		}_		return columns__	};compare,columns,created,from,metadata,with,declared,columns,and,return,a,reconciled,list,param,declared,columns,declared,column,names,param,generated,key,names,names,of,generated,key,columns;protected,list,string,reconcile,columns,to,use,list,string,declared,columns,string,generated,key,names,if,generated,key,names,length,0,this,generated,key,columns,used,true,if,declared,columns,size,0,return,new,array,list,declared,columns,set,string,keys,new,linked,hash,set,generated,key,names,length,for,string,key,generated,key,names,keys,add,key,to,upper,case,list,string,columns,new,array,list,for,table,parameter,meta,data,meta,meta,data,provider,get,table,parameter,meta,data,if,keys,contains,meta,get,parameter,name,to,upper,case,columns,add,meta,get,parameter,name,return,columns
TableMetaDataContext -> protected List<String> reconcileColumnsToUse(List<String> declaredColumns, String[] generatedKeyNames);1500457438;Compare columns created from metadata with declared columns and return a reconciled list._@param declaredColumns declared column names_@param generatedKeyNames names of generated key columns;protected List<String> reconcileColumnsToUse(List<String> declaredColumns, String[] generatedKeyNames) {_		if (generatedKeyNames.length > 0) {_			this.generatedKeyColumnsUsed = true__		}_		if (declaredColumns.size() > 0) {_			return new ArrayList<>(declaredColumns)__		}_		Set<String> keys = new LinkedHashSet<>(generatedKeyNames.length)__		for (String key : generatedKeyNames) {_			keys.add(key.toUpperCase())__		}_		List<String> columns = new ArrayList<>()__		for (TableParameterMetaData meta : obtainMetaDataProvider().getTableParameterMetaData()) {_			if (!keys.contains(meta.getParameterName().toUpperCase())) {_				columns.add(meta.getParameterName())__			}_		}_		return columns__	};compare,columns,created,from,metadata,with,declared,columns,and,return,a,reconciled,list,param,declared,columns,declared,column,names,param,generated,key,names,names,of,generated,key,columns;protected,list,string,reconcile,columns,to,use,list,string,declared,columns,string,generated,key,names,if,generated,key,names,length,0,this,generated,key,columns,used,true,if,declared,columns,size,0,return,new,array,list,declared,columns,set,string,keys,new,linked,hash,set,generated,key,names,length,for,string,key,generated,key,names,keys,add,key,to,upper,case,list,string,columns,new,array,list,for,table,parameter,meta,data,meta,obtain,meta,data,provider,get,table,parameter,meta,data,if,keys,contains,meta,get,parameter,name,to,upper,case,columns,add,meta,get,parameter,name,return,columns
TableMetaDataContext -> protected List<String> reconcileColumnsToUse(List<String> declaredColumns, String[] generatedKeyNames);1515532822;Compare columns created from metadata with declared columns and return a reconciled list._@param declaredColumns declared column names_@param generatedKeyNames names of generated key columns;protected List<String> reconcileColumnsToUse(List<String> declaredColumns, String[] generatedKeyNames) {_		if (generatedKeyNames.length > 0) {_			this.generatedKeyColumnsUsed = true__		}_		if (declaredColumns.size() > 0) {_			return new ArrayList<>(declaredColumns)__		}_		Set<String> keys = new LinkedHashSet<>(generatedKeyNames.length)__		for (String key : generatedKeyNames) {_			keys.add(key.toUpperCase())__		}_		List<String> columns = new ArrayList<>()__		for (TableParameterMetaData meta : obtainMetaDataProvider().getTableParameterMetaData()) {_			if (!keys.contains(meta.getParameterName().toUpperCase())) {_				columns.add(meta.getParameterName())__			}_		}_		return columns__	};compare,columns,created,from,metadata,with,declared,columns,and,return,a,reconciled,list,param,declared,columns,declared,column,names,param,generated,key,names,names,of,generated,key,columns;protected,list,string,reconcile,columns,to,use,list,string,declared,columns,string,generated,key,names,if,generated,key,names,length,0,this,generated,key,columns,used,true,if,declared,columns,size,0,return,new,array,list,declared,columns,set,string,keys,new,linked,hash,set,generated,key,names,length,for,string,key,generated,key,names,keys,add,key,to,upper,case,list,string,columns,new,array,list,for,table,parameter,meta,data,meta,obtain,meta,data,provider,get,table,parameter,meta,data,if,keys,contains,meta,get,parameter,name,to,upper,case,columns,add,meta,get,parameter,name,return,columns
TableMetaDataContext -> protected List<String> reconcileColumnsToUse(List<String> declaredColumns, String[] generatedKeyNames);1516393837;Compare columns created from metadata with declared columns and return a reconciled list._@param declaredColumns declared column names_@param generatedKeyNames names of generated key columns;protected List<String> reconcileColumnsToUse(List<String> declaredColumns, String[] generatedKeyNames) {_		if (generatedKeyNames.length > 0) {_			this.generatedKeyColumnsUsed = true__		}_		if (declaredColumns.size() > 0) {_			return new ArrayList<>(declaredColumns)__		}_		Set<String> keys = new LinkedHashSet<>(generatedKeyNames.length)__		for (String key : generatedKeyNames) {_			keys.add(key.toUpperCase())__		}_		List<String> columns = new ArrayList<>()__		for (TableParameterMetaData meta : obtainMetaDataProvider().getTableParameterMetaData()) {_			if (!keys.contains(meta.getParameterName().toUpperCase())) {_				columns.add(meta.getParameterName())__			}_		}_		return columns__	};compare,columns,created,from,metadata,with,declared,columns,and,return,a,reconciled,list,param,declared,columns,declared,column,names,param,generated,key,names,names,of,generated,key,columns;protected,list,string,reconcile,columns,to,use,list,string,declared,columns,string,generated,key,names,if,generated,key,names,length,0,this,generated,key,columns,used,true,if,declared,columns,size,0,return,new,array,list,declared,columns,set,string,keys,new,linked,hash,set,generated,key,names,length,for,string,key,generated,key,names,keys,add,key,to,upper,case,list,string,columns,new,array,list,for,table,parameter,meta,data,meta,obtain,meta,data,provider,get,table,parameter,meta,data,if,keys,contains,meta,get,parameter,name,to,upper,case,columns,add,meta,get,parameter,name,return,columns
TableMetaDataContext -> protected List<String> reconcileColumnsToUse(List<String> declaredColumns, String[] generatedKeyNames);1518167526;Compare columns created from metadata with declared columns and return a reconciled list._@param declaredColumns declared column names_@param generatedKeyNames names of generated key columns;protected List<String> reconcileColumnsToUse(List<String> declaredColumns, String[] generatedKeyNames) {_		if (generatedKeyNames.length > 0) {_			this.generatedKeyColumnsUsed = true__		}_		if (!declaredColumns.isEmpty()) {_			return new ArrayList<>(declaredColumns)__		}_		Set<String> keys = new LinkedHashSet<>(generatedKeyNames.length)__		for (String key : generatedKeyNames) {_			keys.add(key.toUpperCase())__		}_		List<String> columns = new ArrayList<>()__		for (TableParameterMetaData meta : obtainMetaDataProvider().getTableParameterMetaData()) {_			if (!keys.contains(meta.getParameterName().toUpperCase())) {_				columns.add(meta.getParameterName())__			}_		}_		return columns__	};compare,columns,created,from,metadata,with,declared,columns,and,return,a,reconciled,list,param,declared,columns,declared,column,names,param,generated,key,names,names,of,generated,key,columns;protected,list,string,reconcile,columns,to,use,list,string,declared,columns,string,generated,key,names,if,generated,key,names,length,0,this,generated,key,columns,used,true,if,declared,columns,is,empty,return,new,array,list,declared,columns,set,string,keys,new,linked,hash,set,generated,key,names,length,for,string,key,generated,key,names,keys,add,key,to,upper,case,list,string,columns,new,array,list,for,table,parameter,meta,data,meta,obtain,meta,data,provider,get,table,parameter,meta,data,if,keys,contains,meta,get,parameter,name,to,upper,case,columns,add,meta,get,parameter,name,return,columns
TableMetaDataContext -> protected List<String> reconcileColumnsToUse(List<String> declaredColumns, String[] generatedKeyNames);1521457491;Compare columns created from meta-data with declared columns and return a reconciled list._@param declaredColumns declared column names_@param generatedKeyNames names of generated key columns;protected List<String> reconcileColumnsToUse(List<String> declaredColumns, String[] generatedKeyNames) {_		if (generatedKeyNames.length > 0) {_			this.generatedKeyColumnsUsed = true__		}_		if (!declaredColumns.isEmpty()) {_			return new ArrayList<>(declaredColumns)__		}_		Set<String> keys = new LinkedHashSet<>(generatedKeyNames.length)__		for (String key : generatedKeyNames) {_			keys.add(key.toUpperCase())__		}_		List<String> columns = new ArrayList<>()__		for (TableParameterMetaData meta : obtainMetaDataProvider().getTableParameterMetaData()) {_			if (!keys.contains(meta.getParameterName().toUpperCase())) {_				columns.add(meta.getParameterName())__			}_		}_		return columns__	};compare,columns,created,from,meta,data,with,declared,columns,and,return,a,reconciled,list,param,declared,columns,declared,column,names,param,generated,key,names,names,of,generated,key,columns;protected,list,string,reconcile,columns,to,use,list,string,declared,columns,string,generated,key,names,if,generated,key,names,length,0,this,generated,key,columns,used,true,if,declared,columns,is,empty,return,new,array,list,declared,columns,set,string,keys,new,linked,hash,set,generated,key,names,length,for,string,key,generated,key,names,keys,add,key,to,upper,case,list,string,columns,new,array,list,for,table,parameter,meta,data,meta,obtain,meta,data,provider,get,table,parameter,meta,data,if,keys,contains,meta,get,parameter,name,to,upper,case,columns,add,meta,get,parameter,name,return,columns
TableMetaDataContext -> protected List<String> reconcileColumnsToUse(List<String> declaredColumns, String[] generatedKeyNames);1522103912;Compare columns created from meta-data with declared columns and return a reconciled list._@param declaredColumns declared column names_@param generatedKeyNames names of generated key columns;protected List<String> reconcileColumnsToUse(List<String> declaredColumns, String[] generatedKeyNames) {_		if (generatedKeyNames.length > 0) {_			this.generatedKeyColumnsUsed = true__		}_		if (!declaredColumns.isEmpty()) {_			return new ArrayList<>(declaredColumns)__		}_		Set<String> keys = new LinkedHashSet<>(generatedKeyNames.length)__		for (String key : generatedKeyNames) {_			keys.add(key.toUpperCase())__		}_		List<String> columns = new ArrayList<>()__		for (TableParameterMetaData meta : obtainMetaDataProvider().getTableParameterMetaData()) {_			if (!keys.contains(meta.getParameterName().toUpperCase())) {_				columns.add(meta.getParameterName())__			}_		}_		return columns__	};compare,columns,created,from,meta,data,with,declared,columns,and,return,a,reconciled,list,param,declared,columns,declared,column,names,param,generated,key,names,names,of,generated,key,columns;protected,list,string,reconcile,columns,to,use,list,string,declared,columns,string,generated,key,names,if,generated,key,names,length,0,this,generated,key,columns,used,true,if,declared,columns,is,empty,return,new,array,list,declared,columns,set,string,keys,new,linked,hash,set,generated,key,names,length,for,string,key,generated,key,names,keys,add,key,to,upper,case,list,string,columns,new,array,list,for,table,parameter,meta,data,meta,obtain,meta,data,provider,get,table,parameter,meta,data,if,keys,contains,meta,get,parameter,name,to,upper,case,columns,add,meta,get,parameter,name,return,columns
TableMetaDataContext -> protected List<String> reconcileColumnsToUse(List<String> declaredColumns, String[] generatedKeyNames);1528719423;Compare columns created from meta-data with declared columns and return a reconciled list._@param declaredColumns declared column names_@param generatedKeyNames names of generated key columns;protected List<String> reconcileColumnsToUse(List<String> declaredColumns, String[] generatedKeyNames) {_		if (generatedKeyNames.length > 0) {_			this.generatedKeyColumnsUsed = true__		}_		if (!declaredColumns.isEmpty()) {_			return new ArrayList<>(declaredColumns)__		}_		Set<String> keys = new LinkedHashSet<>(generatedKeyNames.length)__		for (String key : generatedKeyNames) {_			keys.add(key.toUpperCase())__		}_		List<String> columns = new ArrayList<>()__		for (TableParameterMetaData meta : obtainMetaDataProvider().getTableParameterMetaData()) {_			if (!keys.contains(meta.getParameterName().toUpperCase())) {_				columns.add(meta.getParameterName())__			}_		}_		return columns__	};compare,columns,created,from,meta,data,with,declared,columns,and,return,a,reconciled,list,param,declared,columns,declared,column,names,param,generated,key,names,names,of,generated,key,columns;protected,list,string,reconcile,columns,to,use,list,string,declared,columns,string,generated,key,names,if,generated,key,names,length,0,this,generated,key,columns,used,true,if,declared,columns,is,empty,return,new,array,list,declared,columns,set,string,keys,new,linked,hash,set,generated,key,names,length,for,string,key,generated,key,names,keys,add,key,to,upper,case,list,string,columns,new,array,list,for,table,parameter,meta,data,meta,obtain,meta,data,provider,get,table,parameter,meta,data,if,keys,contains,meta,get,parameter,name,to,upper,case,columns,add,meta,get,parameter,name,return,columns
TableMetaDataContext -> protected List<String> reconcileColumnsToUse(List<String> declaredColumns, String[] generatedKeyNames);1530174524;Compare columns created from meta-data with declared columns and return a reconciled list._@param declaredColumns declared column names_@param generatedKeyNames names of generated key columns;protected List<String> reconcileColumnsToUse(List<String> declaredColumns, String[] generatedKeyNames) {_		if (generatedKeyNames.length > 0) {_			this.generatedKeyColumnsUsed = true__		}_		if (!declaredColumns.isEmpty()) {_			return new ArrayList<>(declaredColumns)__		}_		Set<String> keys = new LinkedHashSet<>(generatedKeyNames.length)__		for (String key : generatedKeyNames) {_			keys.add(key.toUpperCase())__		}_		List<String> columns = new ArrayList<>()__		for (TableParameterMetaData meta : obtainMetaDataProvider().getTableParameterMetaData()) {_			if (!keys.contains(meta.getParameterName().toUpperCase())) {_				columns.add(meta.getParameterName())__			}_		}_		return columns__	};compare,columns,created,from,meta,data,with,declared,columns,and,return,a,reconciled,list,param,declared,columns,declared,column,names,param,generated,key,names,names,of,generated,key,columns;protected,list,string,reconcile,columns,to,use,list,string,declared,columns,string,generated,key,names,if,generated,key,names,length,0,this,generated,key,columns,used,true,if,declared,columns,is,empty,return,new,array,list,declared,columns,set,string,keys,new,linked,hash,set,generated,key,names,length,for,string,key,generated,key,names,keys,add,key,to,upper,case,list,string,columns,new,array,list,for,table,parameter,meta,data,meta,obtain,meta,data,provider,get,table,parameter,meta,data,if,keys,contains,meta,get,parameter,name,to,upper,case,columns,add,meta,get,parameter,name,return,columns
TableMetaDataContext -> protected List<String> reconcileColumnsToUse(List<String> declaredColumns, String[] generatedKeyNames);1532091916;Compare columns created from meta-data with declared columns and return a reconciled list._@param declaredColumns declared column names_@param generatedKeyNames names of generated key columns;protected List<String> reconcileColumnsToUse(List<String> declaredColumns, String[] generatedKeyNames) {_		if (generatedKeyNames.length > 0) {_			this.generatedKeyColumnsUsed = true__		}_		if (!declaredColumns.isEmpty()) {_			return new ArrayList<>(declaredColumns)__		}_		Set<String> keys = new LinkedHashSet<>(generatedKeyNames.length)__		for (String key : generatedKeyNames) {_			keys.add(key.toUpperCase())__		}_		List<String> columns = new ArrayList<>()__		for (TableParameterMetaData meta : obtainMetaDataProvider().getTableParameterMetaData()) {_			if (!keys.contains(meta.getParameterName().toUpperCase())) {_				columns.add(meta.getParameterName())__			}_		}_		return columns__	};compare,columns,created,from,meta,data,with,declared,columns,and,return,a,reconciled,list,param,declared,columns,declared,column,names,param,generated,key,names,names,of,generated,key,columns;protected,list,string,reconcile,columns,to,use,list,string,declared,columns,string,generated,key,names,if,generated,key,names,length,0,this,generated,key,columns,used,true,if,declared,columns,is,empty,return,new,array,list,declared,columns,set,string,keys,new,linked,hash,set,generated,key,names,length,for,string,key,generated,key,names,keys,add,key,to,upper,case,list,string,columns,new,array,list,for,table,parameter,meta,data,meta,obtain,meta,data,provider,get,table,parameter,meta,data,if,keys,contains,meta,get,parameter,name,to,upper,case,columns,add,meta,get,parameter,name,return,columns
TableMetaDataContext -> protected List<String> reconcileColumnsToUse(List<String> declaredColumns, String[] generatedKeyNames);1550238935;Compare columns created from meta-data with declared columns and return a reconciled list._@param declaredColumns declared column names_@param generatedKeyNames names of generated key columns;protected List<String> reconcileColumnsToUse(List<String> declaredColumns, String[] generatedKeyNames) {_		if (generatedKeyNames.length > 0) {_			this.generatedKeyColumnsUsed = true__		}_		if (!declaredColumns.isEmpty()) {_			return new ArrayList<>(declaredColumns)__		}_		Set<String> keys = new LinkedHashSet<>(generatedKeyNames.length)__		for (String key : generatedKeyNames) {_			keys.add(key.toUpperCase())__		}_		List<String> columns = new ArrayList<>()__		for (TableParameterMetaData meta : obtainMetaDataProvider().getTableParameterMetaData()) {_			if (!keys.contains(meta.getParameterName().toUpperCase())) {_				columns.add(meta.getParameterName())__			}_		}_		return columns__	};compare,columns,created,from,meta,data,with,declared,columns,and,return,a,reconciled,list,param,declared,columns,declared,column,names,param,generated,key,names,names,of,generated,key,columns;protected,list,string,reconcile,columns,to,use,list,string,declared,columns,string,generated,key,names,if,generated,key,names,length,0,this,generated,key,columns,used,true,if,declared,columns,is,empty,return,new,array,list,declared,columns,set,string,keys,new,linked,hash,set,generated,key,names,length,for,string,key,generated,key,names,keys,add,key,to,upper,case,list,string,columns,new,array,list,for,table,parameter,meta,data,meta,obtain,meta,data,provider,get,table,parameter,meta,data,if,keys,contains,meta,get,parameter,name,to,upper,case,columns,add,meta,get,parameter,name,return,columns
TableMetaDataContext -> public String getTableName();1328020251;Get the name of the table for this context.;public String getTableName() {_		return this.tableName__	};get,the,name,of,the,table,for,this,context;public,string,get,table,name,return,this,table,name
TableMetaDataContext -> public String getTableName();1385412762;Get the name of the table for this context.;public String getTableName() {_		return this.tableName__	};get,the,name,of,the,table,for,this,context;public,string,get,table,name,return,this,table,name
TableMetaDataContext -> public String getTableName();1407511029;Get the name of the table for this context.;public String getTableName() {_		return this.tableName__	};get,the,name,of,the,table,for,this,context;public,string,get,table,name,return,this,table,name
TableMetaDataContext -> public String getTableName();1416833949;Get the name of the table for this context.;public String getTableName() {_		return this.tableName__	};get,the,name,of,the,table,for,this,context;public,string,get,table,name,return,this,table,name
TableMetaDataContext -> public String getTableName();1429214043;Get the name of the table for this context.;public String getTableName() {_		return this.tableName__	};get,the,name,of,the,table,for,this,context;public,string,get,table,name,return,this,table,name
TableMetaDataContext -> public String getTableName();1464241861;Get the name of the table for this context.;public String getTableName() {_		return this.tableName__	};get,the,name,of,the,table,for,this,context;public,string,get,table,name,return,this,table,name
TableMetaDataContext -> public String getTableName();1467730834;Get the name of the table for this context.;public String getTableName() {_		return this.tableName__	};get,the,name,of,the,table,for,this,context;public,string,get,table,name,return,this,table,name
TableMetaDataContext -> public String getTableName();1487178248;Get the name of the table for this context.;public String getTableName() {_		return this.tableName__	};get,the,name,of,the,table,for,this,context;public,string,get,table,name,return,this,table,name
TableMetaDataContext -> public List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> inParameters);1416833949;Match the provided column names and values with the list of columns used._@param inParameters the parameter names and values;public List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> inParameters) {_		List<Object> values = new ArrayList<Object>()__		Map<String, Object> source = new LinkedHashMap<String, Object>(inParameters.size())__		for (String key : inParameters.keySet()) {_			source.put(key.toLowerCase(), inParameters.get(key))__		}_		for (String column : this.tableColumns) {_			values.add(source.get(column.toLowerCase()))__		}_		return values__	};match,the,provided,column,names,and,values,with,the,list,of,columns,used,param,in,parameters,the,parameter,names,and,values;public,list,object,match,in,parameter,values,with,insert,columns,map,string,in,parameters,list,object,values,new,array,list,object,map,string,object,source,new,linked,hash,map,string,object,in,parameters,size,for,string,key,in,parameters,key,set,source,put,key,to,lower,case,in,parameters,get,key,for,string,column,this,table,columns,values,add,source,get,column,to,lower,case,return,values
TableMetaDataContext -> public List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> inParameters);1429214043;Match the provided column names and values with the list of columns used._@param inParameters the parameter names and values;public List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> inParameters) {_		List<Object> values = new ArrayList<Object>()__		Map<String, Object> source = new LinkedHashMap<String, Object>(inParameters.size())__		for (String key : inParameters.keySet()) {_			source.put(key.toLowerCase(), inParameters.get(key))__		}_		for (String column : this.tableColumns) {_			values.add(source.get(column.toLowerCase()))__		}_		return values__	};match,the,provided,column,names,and,values,with,the,list,of,columns,used,param,in,parameters,the,parameter,names,and,values;public,list,object,match,in,parameter,values,with,insert,columns,map,string,in,parameters,list,object,values,new,array,list,object,map,string,object,source,new,linked,hash,map,string,object,in,parameters,size,for,string,key,in,parameters,key,set,source,put,key,to,lower,case,in,parameters,get,key,for,string,column,this,table,columns,values,add,source,get,column,to,lower,case,return,values
TableMetaDataContext -> public List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> inParameters);1464241861;Match the provided column names and values with the list of columns used._@param inParameters the parameter names and values;public List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> inParameters) {_		List<Object> values = new ArrayList<Object>()__		Map<String, Object> source = new LinkedHashMap<String, Object>(inParameters.size())__		for (String key : inParameters.keySet()) {_			source.put(key.toLowerCase(), inParameters.get(key))__		}_		for (String column : this.tableColumns) {_			values.add(source.get(column.toLowerCase()))__		}_		return values__	};match,the,provided,column,names,and,values,with,the,list,of,columns,used,param,in,parameters,the,parameter,names,and,values;public,list,object,match,in,parameter,values,with,insert,columns,map,string,in,parameters,list,object,values,new,array,list,object,map,string,object,source,new,linked,hash,map,string,object,in,parameters,size,for,string,key,in,parameters,key,set,source,put,key,to,lower,case,in,parameters,get,key,for,string,column,this,table,columns,values,add,source,get,column,to,lower,case,return,values
TableMetaDataContext -> public List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> inParameters);1467730834;Match the provided column names and values with the list of columns used._@param inParameters the parameter names and values;public List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> inParameters) {_		List<Object> values = new ArrayList<>()__		Map<String, Object> source = new LinkedHashMap<>(inParameters.size())__		for (String key : inParameters.keySet()) {_			source.put(key.toLowerCase(), inParameters.get(key))__		}_		for (String column : this.tableColumns) {_			values.add(source.get(column.toLowerCase()))__		}_		return values__	};match,the,provided,column,names,and,values,with,the,list,of,columns,used,param,in,parameters,the,parameter,names,and,values;public,list,object,match,in,parameter,values,with,insert,columns,map,string,in,parameters,list,object,values,new,array,list,map,string,object,source,new,linked,hash,map,in,parameters,size,for,string,key,in,parameters,key,set,source,put,key,to,lower,case,in,parameters,get,key,for,string,column,this,table,columns,values,add,source,get,column,to,lower,case,return,values
TableMetaDataContext -> public List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> inParameters);1487178248;Match the provided column names and values with the list of columns used._@param inParameters the parameter names and values;public List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> inParameters) {_		List<Object> values = new ArrayList<>()__		Map<String, Object> source = new LinkedHashMap<>(inParameters.size())__		for (String key : inParameters.keySet()) {_			source.put(key.toLowerCase(), inParameters.get(key))__		}_		for (String column : this.tableColumns) {_			values.add(source.get(column.toLowerCase()))__		}_		return values__	};match,the,provided,column,names,and,values,with,the,list,of,columns,used,param,in,parameters,the,parameter,names,and,values;public,list,object,match,in,parameter,values,with,insert,columns,map,string,in,parameters,list,object,values,new,array,list,map,string,object,source,new,linked,hash,map,in,parameters,size,for,string,key,in,parameters,key,set,source,put,key,to,lower,case,in,parameters,get,key,for,string,column,this,table,columns,values,add,source,get,column,to,lower,case,return,values
TableMetaDataContext -> public List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> inParameters);1496837955;Match the provided column names and values with the list of columns used._@param inParameters the parameter names and values;public List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> inParameters) {_		List<Object> values = new ArrayList<>()__		Map<String, Object> source = new LinkedHashMap<>(inParameters.size())__		for (String key : inParameters.keySet()) {_			source.put(key.toLowerCase(), inParameters.get(key))__		}_		for (String column : this.tableColumns) {_			values.add(source.get(column.toLowerCase()))__		}_		return values__	};match,the,provided,column,names,and,values,with,the,list,of,columns,used,param,in,parameters,the,parameter,names,and,values;public,list,object,match,in,parameter,values,with,insert,columns,map,string,in,parameters,list,object,values,new,array,list,map,string,object,source,new,linked,hash,map,in,parameters,size,for,string,key,in,parameters,key,set,source,put,key,to,lower,case,in,parameters,get,key,for,string,column,this,table,columns,values,add,source,get,column,to,lower,case,return,values
TableMetaDataContext -> public List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> inParameters);1500448076;Match the provided column names and values with the list of columns used._@param inParameters the parameter names and values;public List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> inParameters) {_		List<Object> values = new ArrayList<>()__		Map<String, Object> source = new LinkedHashMap<>(inParameters.size())__		for (String key : inParameters.keySet()) {_			source.put(key.toLowerCase(), inParameters.get(key))__		}_		for (String column : this.tableColumns) {_			values.add(source.get(column.toLowerCase()))__		}_		return values__	};match,the,provided,column,names,and,values,with,the,list,of,columns,used,param,in,parameters,the,parameter,names,and,values;public,list,object,match,in,parameter,values,with,insert,columns,map,string,in,parameters,list,object,values,new,array,list,map,string,object,source,new,linked,hash,map,in,parameters,size,for,string,key,in,parameters,key,set,source,put,key,to,lower,case,in,parameters,get,key,for,string,column,this,table,columns,values,add,source,get,column,to,lower,case,return,values
TableMetaDataContext -> public List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> inParameters);1500457438;Match the provided column names and values with the list of columns used._@param inParameters the parameter names and values;public List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> inParameters) {_		List<Object> values = new ArrayList<>()__		Map<String, Object> source = new LinkedHashMap<>(inParameters.size())__		for (String key : inParameters.keySet()) {_			source.put(key.toLowerCase(), inParameters.get(key))__		}_		for (String column : this.tableColumns) {_			values.add(source.get(column.toLowerCase()))__		}_		return values__	};match,the,provided,column,names,and,values,with,the,list,of,columns,used,param,in,parameters,the,parameter,names,and,values;public,list,object,match,in,parameter,values,with,insert,columns,map,string,in,parameters,list,object,values,new,array,list,map,string,object,source,new,linked,hash,map,in,parameters,size,for,string,key,in,parameters,key,set,source,put,key,to,lower,case,in,parameters,get,key,for,string,column,this,table,columns,values,add,source,get,column,to,lower,case,return,values
TableMetaDataContext -> public List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> inParameters);1515532822;Match the provided column names and values with the list of columns used._@param inParameters the parameter names and values;public List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> inParameters) {_		List<Object> values = new ArrayList<>()__		Map<String, Object> source = new LinkedHashMap<>(inParameters.size())__		for (String key : inParameters.keySet()) {_			source.put(key.toLowerCase(), inParameters.get(key))__		}_		for (String column : this.tableColumns) {_			values.add(source.get(column.toLowerCase()))__		}_		return values__	};match,the,provided,column,names,and,values,with,the,list,of,columns,used,param,in,parameters,the,parameter,names,and,values;public,list,object,match,in,parameter,values,with,insert,columns,map,string,in,parameters,list,object,values,new,array,list,map,string,object,source,new,linked,hash,map,in,parameters,size,for,string,key,in,parameters,key,set,source,put,key,to,lower,case,in,parameters,get,key,for,string,column,this,table,columns,values,add,source,get,column,to,lower,case,return,values
TableMetaDataContext -> public List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> inParameters);1516393837;Match the provided column names and values with the list of columns used._@param inParameters the parameter names and values;public List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> inParameters) {_		List<Object> values = new ArrayList<>()__		Map<String, Object> source = new LinkedHashMap<>(inParameters.size())__		for (String key : inParameters.keySet()) {_			source.put(key.toLowerCase(), inParameters.get(key))__		}_		for (String column : this.tableColumns) {_			values.add(source.get(column.toLowerCase()))__		}_		return values__	};match,the,provided,column,names,and,values,with,the,list,of,columns,used,param,in,parameters,the,parameter,names,and,values;public,list,object,match,in,parameter,values,with,insert,columns,map,string,in,parameters,list,object,values,new,array,list,map,string,object,source,new,linked,hash,map,in,parameters,size,for,string,key,in,parameters,key,set,source,put,key,to,lower,case,in,parameters,get,key,for,string,column,this,table,columns,values,add,source,get,column,to,lower,case,return,values
TableMetaDataContext -> public List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> inParameters);1518167526;Match the provided column names and values with the list of columns used._@param inParameters the parameter names and values;public List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> inParameters) {_		List<Object> values = new ArrayList<>()__		Map<String, Object> source = new LinkedHashMap<>(inParameters.size())__		for (String key : inParameters.keySet()) {_			source.put(key.toLowerCase(), inParameters.get(key))__		}_		for (String column : this.tableColumns) {_			values.add(source.get(column.toLowerCase()))__		}_		return values__	};match,the,provided,column,names,and,values,with,the,list,of,columns,used,param,in,parameters,the,parameter,names,and,values;public,list,object,match,in,parameter,values,with,insert,columns,map,string,in,parameters,list,object,values,new,array,list,map,string,object,source,new,linked,hash,map,in,parameters,size,for,string,key,in,parameters,key,set,source,put,key,to,lower,case,in,parameters,get,key,for,string,column,this,table,columns,values,add,source,get,column,to,lower,case,return,values
TableMetaDataContext -> public List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> inParameters);1521457491;Match the provided column names and values with the list of columns used._@param inParameters the parameter names and values;public List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> inParameters) {_		List<Object> values = new ArrayList<>()__		Map<String, Object> source = new LinkedHashMap<>(inParameters.size())__		for (String key : inParameters.keySet()) {_			source.put(key.toLowerCase(), inParameters.get(key))__		}_		for (String column : this.tableColumns) {_			values.add(source.get(column.toLowerCase()))__		}_		return values__	};match,the,provided,column,names,and,values,with,the,list,of,columns,used,param,in,parameters,the,parameter,names,and,values;public,list,object,match,in,parameter,values,with,insert,columns,map,string,in,parameters,list,object,values,new,array,list,map,string,object,source,new,linked,hash,map,in,parameters,size,for,string,key,in,parameters,key,set,source,put,key,to,lower,case,in,parameters,get,key,for,string,column,this,table,columns,values,add,source,get,column,to,lower,case,return,values
TableMetaDataContext -> public List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> inParameters);1522103912;Match the provided column names and values with the list of columns used._@param inParameters the parameter names and values;public List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> inParameters) {_		List<Object> values = new ArrayList<>(inParameters.size())__		for (String column : this.tableColumns) {_			Object value = inParameters.get(column)__			if (value == null) {_				value = inParameters.get(column.toLowerCase())__				if (value == null) {_					for (Map.Entry<String, ?> entry : inParameters.entrySet()) {_						if (column.equalsIgnoreCase(entry.getKey())) {_							value = entry.getValue()__							_						}_					}_				}_			}_			values.add(value)__		}_		return values__	};match,the,provided,column,names,and,values,with,the,list,of,columns,used,param,in,parameters,the,parameter,names,and,values;public,list,object,match,in,parameter,values,with,insert,columns,map,string,in,parameters,list,object,values,new,array,list,in,parameters,size,for,string,column,this,table,columns,object,value,in,parameters,get,column,if,value,null,value,in,parameters,get,column,to,lower,case,if,value,null,for,map,entry,string,entry,in,parameters,entry,set,if,column,equals,ignore,case,entry,get,key,value,entry,get,value,values,add,value,return,values
TableMetaDataContext -> public List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> inParameters);1528719423;Match the provided column names and values with the list of columns used._@param inParameters the parameter names and values;public List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> inParameters) {_		List<Object> values = new ArrayList<>(inParameters.size())__		for (String column : this.tableColumns) {_			Object value = inParameters.get(column)__			if (value == null) {_				value = inParameters.get(column.toLowerCase())__				if (value == null) {_					for (Map.Entry<String, ?> entry : inParameters.entrySet()) {_						if (column.equalsIgnoreCase(entry.getKey())) {_							value = entry.getValue()__							break__						}_					}_				}_			}_			values.add(value)__		}_		return values__	};match,the,provided,column,names,and,values,with,the,list,of,columns,used,param,in,parameters,the,parameter,names,and,values;public,list,object,match,in,parameter,values,with,insert,columns,map,string,in,parameters,list,object,values,new,array,list,in,parameters,size,for,string,column,this,table,columns,object,value,in,parameters,get,column,if,value,null,value,in,parameters,get,column,to,lower,case,if,value,null,for,map,entry,string,entry,in,parameters,entry,set,if,column,equals,ignore,case,entry,get,key,value,entry,get,value,break,values,add,value,return,values
TableMetaDataContext -> public List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> inParameters);1530174524;Match the provided column names and values with the list of columns used._@param inParameters the parameter names and values;public List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> inParameters) {_		List<Object> values = new ArrayList<>(inParameters.size())__		for (String column : this.tableColumns) {_			Object value = inParameters.get(column)__			if (value == null) {_				value = inParameters.get(column.toLowerCase())__				if (value == null) {_					for (Map.Entry<String, ?> entry : inParameters.entrySet()) {_						if (column.equalsIgnoreCase(entry.getKey())) {_							value = entry.getValue()__							break__						}_					}_				}_			}_			values.add(value)__		}_		return values__	};match,the,provided,column,names,and,values,with,the,list,of,columns,used,param,in,parameters,the,parameter,names,and,values;public,list,object,match,in,parameter,values,with,insert,columns,map,string,in,parameters,list,object,values,new,array,list,in,parameters,size,for,string,column,this,table,columns,object,value,in,parameters,get,column,if,value,null,value,in,parameters,get,column,to,lower,case,if,value,null,for,map,entry,string,entry,in,parameters,entry,set,if,column,equals,ignore,case,entry,get,key,value,entry,get,value,break,values,add,value,return,values
TableMetaDataContext -> public List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> inParameters);1532091916;Match the provided column names and values with the list of columns used._@param inParameters the parameter names and values;public List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> inParameters) {_		List<Object> values = new ArrayList<>(inParameters.size())__		for (String column : this.tableColumns) {_			Object value = inParameters.get(column)__			if (value == null) {_				value = inParameters.get(column.toLowerCase())__				if (value == null) {_					for (Map.Entry<String, ?> entry : inParameters.entrySet()) {_						if (column.equalsIgnoreCase(entry.getKey())) {_							value = entry.getValue()__							break__						}_					}_				}_			}_			values.add(value)__		}_		return values__	};match,the,provided,column,names,and,values,with,the,list,of,columns,used,param,in,parameters,the,parameter,names,and,values;public,list,object,match,in,parameter,values,with,insert,columns,map,string,in,parameters,list,object,values,new,array,list,in,parameters,size,for,string,column,this,table,columns,object,value,in,parameters,get,column,if,value,null,value,in,parameters,get,column,to,lower,case,if,value,null,for,map,entry,string,entry,in,parameters,entry,set,if,column,equals,ignore,case,entry,get,key,value,entry,get,value,break,values,add,value,return,values
TableMetaDataContext -> public List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> inParameters);1550238935;Match the provided column names and values with the list of columns used._@param inParameters the parameter names and values;public List<Object> matchInParameterValuesWithInsertColumns(Map<String, ?> inParameters) {_		List<Object> values = new ArrayList<>(inParameters.size())__		for (String column : this.tableColumns) {_			Object value = inParameters.get(column)__			if (value == null) {_				value = inParameters.get(column.toLowerCase())__				if (value == null) {_					for (Map.Entry<String, ?> entry : inParameters.entrySet()) {_						if (column.equalsIgnoreCase(entry.getKey())) {_							value = entry.getValue()__							break__						}_					}_				}_			}_			values.add(value)__		}_		return values__	};match,the,provided,column,names,and,values,with,the,list,of,columns,used,param,in,parameters,the,parameter,names,and,values;public,list,object,match,in,parameter,values,with,insert,columns,map,string,in,parameters,list,object,values,new,array,list,in,parameters,size,for,string,column,this,table,columns,object,value,in,parameters,get,column,if,value,null,value,in,parameters,get,column,to,lower,case,if,value,null,for,map,entry,string,entry,in,parameters,entry,set,if,column,equals,ignore,case,entry,get,key,value,entry,get,value,break,values,add,value,return,values
TableMetaDataContext -> public int[] createInsertTypes();1328020251;Build the array of {@link java.sql.Types} based on configuration and metadata information_@return the array of types to be used;public int[] createInsertTypes() {_		int[] types = new int[this.getTableColumns().size()]__		List<TableParameterMetaData> parameters = this.metaDataProvider.getTableParameterMetaData()__		Map<String, TableParameterMetaData> parameterMap = new HashMap<String, TableParameterMetaData>(parameters.size())__		for (TableParameterMetaData tpmd : parameters) {_			parameterMap.put(tpmd.getParameterName().toUpperCase(), tpmd)__		}_		int typeIndx = 0__		for (String column : this.getTableColumns()) {_			if (column == null) {_				types[typeIndx] = SqlTypeValue.TYPE_UNKNOWN__			}_			else {_				TableParameterMetaData tpmd = parameterMap.get(column.toUpperCase())__				if (tpmd != null) {_					types[typeIndx] = tpmd.getSqlType()__				}_				else {_					types[typeIndx] = SqlTypeValue.TYPE_UNKNOWN__				}_			}_			typeIndx++__		}_		return types__	};build,the,array,of,link,java,sql,types,based,on,configuration,and,metadata,information,return,the,array,of,types,to,be,used;public,int,create,insert,types,int,types,new,int,this,get,table,columns,size,list,table,parameter,meta,data,parameters,this,meta,data,provider,get,table,parameter,meta,data,map,string,table,parameter,meta,data,parameter,map,new,hash,map,string,table,parameter,meta,data,parameters,size,for,table,parameter,meta,data,tpmd,parameters,parameter,map,put,tpmd,get,parameter,name,to,upper,case,tpmd,int,type,indx,0,for,string,column,this,get,table,columns,if,column,null,types,type,indx,sql,type,value,else,table,parameter,meta,data,tpmd,parameter,map,get,column,to,upper,case,if,tpmd,null,types,type,indx,tpmd,get,sql,type,else,types,type,indx,sql,type,value,type,indx,return,types
TableMetaDataContext -> public int[] createInsertTypes();1385412762;Build the array of {@link java.sql.Types} based on configuration and metadata information_@return the array of types to be used;public int[] createInsertTypes() {_		int[] types = new int[this.getTableColumns().size()]__		List<TableParameterMetaData> parameters = this.metaDataProvider.getTableParameterMetaData()__		Map<String, TableParameterMetaData> parameterMap = new HashMap<String, TableParameterMetaData>(parameters.size())__		for (TableParameterMetaData tpmd : parameters) {_			parameterMap.put(tpmd.getParameterName().toUpperCase(), tpmd)__		}_		int typeIndx = 0__		for (String column : this.getTableColumns()) {_			if (column == null) {_				types[typeIndx] = SqlTypeValue.TYPE_UNKNOWN__			}_			else {_				TableParameterMetaData tpmd = parameterMap.get(column.toUpperCase())__				if (tpmd != null) {_					types[typeIndx] = tpmd.getSqlType()__				}_				else {_					types[typeIndx] = SqlTypeValue.TYPE_UNKNOWN__				}_			}_			typeIndx++__		}_		return types__	};build,the,array,of,link,java,sql,types,based,on,configuration,and,metadata,information,return,the,array,of,types,to,be,used;public,int,create,insert,types,int,types,new,int,this,get,table,columns,size,list,table,parameter,meta,data,parameters,this,meta,data,provider,get,table,parameter,meta,data,map,string,table,parameter,meta,data,parameter,map,new,hash,map,string,table,parameter,meta,data,parameters,size,for,table,parameter,meta,data,tpmd,parameters,parameter,map,put,tpmd,get,parameter,name,to,upper,case,tpmd,int,type,indx,0,for,string,column,this,get,table,columns,if,column,null,types,type,indx,sql,type,value,else,table,parameter,meta,data,tpmd,parameter,map,get,column,to,upper,case,if,tpmd,null,types,type,indx,tpmd,get,sql,type,else,types,type,indx,sql,type,value,type,indx,return,types
TableMetaDataContext -> public int[] createInsertTypes();1407511029;Build the array of {@link java.sql.Types} based on configuration and metadata information_@return the array of types to be used;public int[] createInsertTypes() {_		int[] types = new int[this.getTableColumns().size()]__		List<TableParameterMetaData> parameters = this.metaDataProvider.getTableParameterMetaData()__		Map<String, TableParameterMetaData> parameterMap = new HashMap<String, TableParameterMetaData>(parameters.size())__		for (TableParameterMetaData tpmd : parameters) {_			parameterMap.put(tpmd.getParameterName().toUpperCase(), tpmd)__		}_		int typeIndx = 0__		for (String column : this.getTableColumns()) {_			if (column == null) {_				types[typeIndx] = SqlTypeValue.TYPE_UNKNOWN__			}_			else {_				TableParameterMetaData tpmd = parameterMap.get(column.toUpperCase())__				if (tpmd != null) {_					types[typeIndx] = tpmd.getSqlType()__				}_				else {_					types[typeIndx] = SqlTypeValue.TYPE_UNKNOWN__				}_			}_			typeIndx++__		}_		return types__	};build,the,array,of,link,java,sql,types,based,on,configuration,and,metadata,information,return,the,array,of,types,to,be,used;public,int,create,insert,types,int,types,new,int,this,get,table,columns,size,list,table,parameter,meta,data,parameters,this,meta,data,provider,get,table,parameter,meta,data,map,string,table,parameter,meta,data,parameter,map,new,hash,map,string,table,parameter,meta,data,parameters,size,for,table,parameter,meta,data,tpmd,parameters,parameter,map,put,tpmd,get,parameter,name,to,upper,case,tpmd,int,type,indx,0,for,string,column,this,get,table,columns,if,column,null,types,type,indx,sql,type,value,else,table,parameter,meta,data,tpmd,parameter,map,get,column,to,upper,case,if,tpmd,null,types,type,indx,tpmd,get,sql,type,else,types,type,indx,sql,type,value,type,indx,return,types
TableMetaDataContext -> public int[] createInsertTypes();1416833949;Build the array of {@link java.sql.Types} based on configuration and metadata information_@return the array of types to be used;public int[] createInsertTypes() {_		int[] types = new int[this.getTableColumns().size()]__		List<TableParameterMetaData> parameters = this.metaDataProvider.getTableParameterMetaData()__		Map<String, TableParameterMetaData> parameterMap =_				new LinkedHashMap<String, TableParameterMetaData>(parameters.size())__		for (TableParameterMetaData tpmd : parameters) {_			parameterMap.put(tpmd.getParameterName().toUpperCase(), tpmd)__		}_		int typeIndx = 0__		for (String column : this.getTableColumns()) {_			if (column == null) {_				types[typeIndx] = SqlTypeValue.TYPE_UNKNOWN__			}_			else {_				TableParameterMetaData tpmd = parameterMap.get(column.toUpperCase())__				if (tpmd != null) {_					types[typeIndx] = tpmd.getSqlType()__				}_				else {_					types[typeIndx] = SqlTypeValue.TYPE_UNKNOWN__				}_			}_			typeIndx++__		}_		return types__	};build,the,array,of,link,java,sql,types,based,on,configuration,and,metadata,information,return,the,array,of,types,to,be,used;public,int,create,insert,types,int,types,new,int,this,get,table,columns,size,list,table,parameter,meta,data,parameters,this,meta,data,provider,get,table,parameter,meta,data,map,string,table,parameter,meta,data,parameter,map,new,linked,hash,map,string,table,parameter,meta,data,parameters,size,for,table,parameter,meta,data,tpmd,parameters,parameter,map,put,tpmd,get,parameter,name,to,upper,case,tpmd,int,type,indx,0,for,string,column,this,get,table,columns,if,column,null,types,type,indx,sql,type,value,else,table,parameter,meta,data,tpmd,parameter,map,get,column,to,upper,case,if,tpmd,null,types,type,indx,tpmd,get,sql,type,else,types,type,indx,sql,type,value,type,indx,return,types
TableMetaDataContext -> public int[] createInsertTypes();1429214043;Build the array of {@link java.sql.Types} based on configuration and metadata information_@return the array of types to be used;public int[] createInsertTypes() {_		int[] types = new int[getTableColumns().size()]__		List<TableParameterMetaData> parameters = this.metaDataProvider.getTableParameterMetaData()__		Map<String, TableParameterMetaData> parameterMap =_				new LinkedHashMap<String, TableParameterMetaData>(parameters.size())__		for (TableParameterMetaData tpmd : parameters) {_			parameterMap.put(tpmd.getParameterName().toUpperCase(), tpmd)__		}_		int typeIndx = 0__		for (String column : getTableColumns()) {_			if (column == null) {_				types[typeIndx] = SqlTypeValue.TYPE_UNKNOWN__			}_			else {_				TableParameterMetaData tpmd = parameterMap.get(column.toUpperCase())__				if (tpmd != null) {_					types[typeIndx] = tpmd.getSqlType()__				}_				else {_					types[typeIndx] = SqlTypeValue.TYPE_UNKNOWN__				}_			}_			typeIndx++__		}_		return types__	};build,the,array,of,link,java,sql,types,based,on,configuration,and,metadata,information,return,the,array,of,types,to,be,used;public,int,create,insert,types,int,types,new,int,get,table,columns,size,list,table,parameter,meta,data,parameters,this,meta,data,provider,get,table,parameter,meta,data,map,string,table,parameter,meta,data,parameter,map,new,linked,hash,map,string,table,parameter,meta,data,parameters,size,for,table,parameter,meta,data,tpmd,parameters,parameter,map,put,tpmd,get,parameter,name,to,upper,case,tpmd,int,type,indx,0,for,string,column,get,table,columns,if,column,null,types,type,indx,sql,type,value,else,table,parameter,meta,data,tpmd,parameter,map,get,column,to,upper,case,if,tpmd,null,types,type,indx,tpmd,get,sql,type,else,types,type,indx,sql,type,value,type,indx,return,types
TableMetaDataContext -> public int[] createInsertTypes();1464241861;Build the array of {@link java.sql.Types} based on configuration and metadata information_@return the array of types to be used;public int[] createInsertTypes() {_		int[] types = new int[getTableColumns().size()]__		List<TableParameterMetaData> parameters = this.metaDataProvider.getTableParameterMetaData()__		Map<String, TableParameterMetaData> parameterMap =_				new LinkedHashMap<String, TableParameterMetaData>(parameters.size())__		for (TableParameterMetaData tpmd : parameters) {_			parameterMap.put(tpmd.getParameterName().toUpperCase(), tpmd)__		}_		int typeIndx = 0__		for (String column : getTableColumns()) {_			if (column == null) {_				types[typeIndx] = SqlTypeValue.TYPE_UNKNOWN__			}_			else {_				TableParameterMetaData tpmd = parameterMap.get(column.toUpperCase())__				if (tpmd != null) {_					types[typeIndx] = tpmd.getSqlType()__				}_				else {_					types[typeIndx] = SqlTypeValue.TYPE_UNKNOWN__				}_			}_			typeIndx++__		}_		return types__	};build,the,array,of,link,java,sql,types,based,on,configuration,and,metadata,information,return,the,array,of,types,to,be,used;public,int,create,insert,types,int,types,new,int,get,table,columns,size,list,table,parameter,meta,data,parameters,this,meta,data,provider,get,table,parameter,meta,data,map,string,table,parameter,meta,data,parameter,map,new,linked,hash,map,string,table,parameter,meta,data,parameters,size,for,table,parameter,meta,data,tpmd,parameters,parameter,map,put,tpmd,get,parameter,name,to,upper,case,tpmd,int,type,indx,0,for,string,column,get,table,columns,if,column,null,types,type,indx,sql,type,value,else,table,parameter,meta,data,tpmd,parameter,map,get,column,to,upper,case,if,tpmd,null,types,type,indx,tpmd,get,sql,type,else,types,type,indx,sql,type,value,type,indx,return,types
TableMetaDataContext -> public int[] createInsertTypes();1467730834;Build the array of {@link java.sql.Types} based on configuration and metadata information_@return the array of types to be used;public int[] createInsertTypes() {_		int[] types = new int[getTableColumns().size()]__		List<TableParameterMetaData> parameters = this.metaDataProvider.getTableParameterMetaData()__		Map<String, TableParameterMetaData> parameterMap =_				new LinkedHashMap<>(parameters.size())__		for (TableParameterMetaData tpmd : parameters) {_			parameterMap.put(tpmd.getParameterName().toUpperCase(), tpmd)__		}_		int typeIndx = 0__		for (String column : getTableColumns()) {_			if (column == null) {_				types[typeIndx] = SqlTypeValue.TYPE_UNKNOWN__			}_			else {_				TableParameterMetaData tpmd = parameterMap.get(column.toUpperCase())__				if (tpmd != null) {_					types[typeIndx] = tpmd.getSqlType()__				}_				else {_					types[typeIndx] = SqlTypeValue.TYPE_UNKNOWN__				}_			}_			typeIndx++__		}_		return types__	};build,the,array,of,link,java,sql,types,based,on,configuration,and,metadata,information,return,the,array,of,types,to,be,used;public,int,create,insert,types,int,types,new,int,get,table,columns,size,list,table,parameter,meta,data,parameters,this,meta,data,provider,get,table,parameter,meta,data,map,string,table,parameter,meta,data,parameter,map,new,linked,hash,map,parameters,size,for,table,parameter,meta,data,tpmd,parameters,parameter,map,put,tpmd,get,parameter,name,to,upper,case,tpmd,int,type,indx,0,for,string,column,get,table,columns,if,column,null,types,type,indx,sql,type,value,else,table,parameter,meta,data,tpmd,parameter,map,get,column,to,upper,case,if,tpmd,null,types,type,indx,tpmd,get,sql,type,else,types,type,indx,sql,type,value,type,indx,return,types
TableMetaDataContext -> public int[] createInsertTypes();1487178248;Build the array of {@link java.sql.Types} based on configuration and metadata information_@return the array of types to be used;public int[] createInsertTypes() {_		int[] types = new int[getTableColumns().size()]__		List<TableParameterMetaData> parameters = this.metaDataProvider.getTableParameterMetaData()__		Map<String, TableParameterMetaData> parameterMap =_				new LinkedHashMap<>(parameters.size())__		for (TableParameterMetaData tpmd : parameters) {_			parameterMap.put(tpmd.getParameterName().toUpperCase(), tpmd)__		}_		int typeIndx = 0__		for (String column : getTableColumns()) {_			if (column == null) {_				types[typeIndx] = SqlTypeValue.TYPE_UNKNOWN__			}_			else {_				TableParameterMetaData tpmd = parameterMap.get(column.toUpperCase())__				if (tpmd != null) {_					types[typeIndx] = tpmd.getSqlType()__				}_				else {_					types[typeIndx] = SqlTypeValue.TYPE_UNKNOWN__				}_			}_			typeIndx++__		}_		return types__	};build,the,array,of,link,java,sql,types,based,on,configuration,and,metadata,information,return,the,array,of,types,to,be,used;public,int,create,insert,types,int,types,new,int,get,table,columns,size,list,table,parameter,meta,data,parameters,this,meta,data,provider,get,table,parameter,meta,data,map,string,table,parameter,meta,data,parameter,map,new,linked,hash,map,parameters,size,for,table,parameter,meta,data,tpmd,parameters,parameter,map,put,tpmd,get,parameter,name,to,upper,case,tpmd,int,type,indx,0,for,string,column,get,table,columns,if,column,null,types,type,indx,sql,type,value,else,table,parameter,meta,data,tpmd,parameter,map,get,column,to,upper,case,if,tpmd,null,types,type,indx,tpmd,get,sql,type,else,types,type,indx,sql,type,value,type,indx,return,types
TableMetaDataContext -> public int[] createInsertTypes();1496837955;Build the array of {@link java.sql.Types} based on configuration and metadata information_@return the array of types to be used;public int[] createInsertTypes() {_		int[] types = new int[getTableColumns().size()]__		List<TableParameterMetaData> parameters = this.metaDataProvider.getTableParameterMetaData()__		Map<String, TableParameterMetaData> parameterMap =_				new LinkedHashMap<>(parameters.size())__		for (TableParameterMetaData tpmd : parameters) {_			parameterMap.put(tpmd.getParameterName().toUpperCase(), tpmd)__		}_		int typeIndx = 0__		for (String column : getTableColumns()) {_			if (column == null) {_				types[typeIndx] = SqlTypeValue.TYPE_UNKNOWN__			}_			else {_				TableParameterMetaData tpmd = parameterMap.get(column.toUpperCase())__				if (tpmd != null) {_					types[typeIndx] = tpmd.getSqlType()__				}_				else {_					types[typeIndx] = SqlTypeValue.TYPE_UNKNOWN__				}_			}_			typeIndx++__		}_		return types__	};build,the,array,of,link,java,sql,types,based,on,configuration,and,metadata,information,return,the,array,of,types,to,be,used;public,int,create,insert,types,int,types,new,int,get,table,columns,size,list,table,parameter,meta,data,parameters,this,meta,data,provider,get,table,parameter,meta,data,map,string,table,parameter,meta,data,parameter,map,new,linked,hash,map,parameters,size,for,table,parameter,meta,data,tpmd,parameters,parameter,map,put,tpmd,get,parameter,name,to,upper,case,tpmd,int,type,indx,0,for,string,column,get,table,columns,if,column,null,types,type,indx,sql,type,value,else,table,parameter,meta,data,tpmd,parameter,map,get,column,to,upper,case,if,tpmd,null,types,type,indx,tpmd,get,sql,type,else,types,type,indx,sql,type,value,type,indx,return,types
TableMetaDataContext -> public int[] createInsertTypes();1500448076;Build the array of {@link java.sql.Types} based on configuration and metadata information_@return the array of types to be used;public int[] createInsertTypes() {_		int[] types = new int[getTableColumns().size()]__		List<TableParameterMetaData> parameters = this.metaDataProvider.getTableParameterMetaData()__		Map<String, TableParameterMetaData> parameterMap =_				new LinkedHashMap<>(parameters.size())__		for (TableParameterMetaData tpmd : parameters) {_			parameterMap.put(tpmd.getParameterName().toUpperCase(), tpmd)__		}_		int typeIndx = 0__		for (String column : getTableColumns()) {_			if (column == null) {_				types[typeIndx] = SqlTypeValue.TYPE_UNKNOWN__			}_			else {_				TableParameterMetaData tpmd = parameterMap.get(column.toUpperCase())__				if (tpmd != null) {_					types[typeIndx] = tpmd.getSqlType()__				}_				else {_					types[typeIndx] = SqlTypeValue.TYPE_UNKNOWN__				}_			}_			typeIndx++__		}_		return types__	};build,the,array,of,link,java,sql,types,based,on,configuration,and,metadata,information,return,the,array,of,types,to,be,used;public,int,create,insert,types,int,types,new,int,get,table,columns,size,list,table,parameter,meta,data,parameters,this,meta,data,provider,get,table,parameter,meta,data,map,string,table,parameter,meta,data,parameter,map,new,linked,hash,map,parameters,size,for,table,parameter,meta,data,tpmd,parameters,parameter,map,put,tpmd,get,parameter,name,to,upper,case,tpmd,int,type,indx,0,for,string,column,get,table,columns,if,column,null,types,type,indx,sql,type,value,else,table,parameter,meta,data,tpmd,parameter,map,get,column,to,upper,case,if,tpmd,null,types,type,indx,tpmd,get,sql,type,else,types,type,indx,sql,type,value,type,indx,return,types
TableMetaDataContext -> public int[] createInsertTypes();1500457438;Build the array of {@link java.sql.Types} based on configuration and metadata information_@return the array of types to be used;public int[] createInsertTypes() {_		int[] types = new int[getTableColumns().size()]__		List<TableParameterMetaData> parameters = obtainMetaDataProvider().getTableParameterMetaData()__		Map<String, TableParameterMetaData> parameterMap =_				new LinkedHashMap<>(parameters.size())__		for (TableParameterMetaData tpmd : parameters) {_			parameterMap.put(tpmd.getParameterName().toUpperCase(), tpmd)__		}_		int typeIndx = 0__		for (String column : getTableColumns()) {_			if (column == null) {_				types[typeIndx] = SqlTypeValue.TYPE_UNKNOWN__			}_			else {_				TableParameterMetaData tpmd = parameterMap.get(column.toUpperCase())__				if (tpmd != null) {_					types[typeIndx] = tpmd.getSqlType()__				}_				else {_					types[typeIndx] = SqlTypeValue.TYPE_UNKNOWN__				}_			}_			typeIndx++__		}_		return types__	};build,the,array,of,link,java,sql,types,based,on,configuration,and,metadata,information,return,the,array,of,types,to,be,used;public,int,create,insert,types,int,types,new,int,get,table,columns,size,list,table,parameter,meta,data,parameters,obtain,meta,data,provider,get,table,parameter,meta,data,map,string,table,parameter,meta,data,parameter,map,new,linked,hash,map,parameters,size,for,table,parameter,meta,data,tpmd,parameters,parameter,map,put,tpmd,get,parameter,name,to,upper,case,tpmd,int,type,indx,0,for,string,column,get,table,columns,if,column,null,types,type,indx,sql,type,value,else,table,parameter,meta,data,tpmd,parameter,map,get,column,to,upper,case,if,tpmd,null,types,type,indx,tpmd,get,sql,type,else,types,type,indx,sql,type,value,type,indx,return,types
TableMetaDataContext -> public int[] createInsertTypes();1515532822;Build the array of {@link java.sql.Types} based on configuration and metadata information_@return the array of types to be used;public int[] createInsertTypes() {_		int[] types = new int[getTableColumns().size()]__		List<TableParameterMetaData> parameters = obtainMetaDataProvider().getTableParameterMetaData()__		Map<String, TableParameterMetaData> parameterMap =_				new LinkedHashMap<>(parameters.size())__		for (TableParameterMetaData tpmd : parameters) {_			parameterMap.put(tpmd.getParameterName().toUpperCase(), tpmd)__		}_		int typeIndx = 0__		for (String column : getTableColumns()) {_			if (column == null) {_				types[typeIndx] = SqlTypeValue.TYPE_UNKNOWN__			}_			else {_				TableParameterMetaData tpmd = parameterMap.get(column.toUpperCase())__				if (tpmd != null) {_					types[typeIndx] = tpmd.getSqlType()__				}_				else {_					types[typeIndx] = SqlTypeValue.TYPE_UNKNOWN__				}_			}_			typeIndx++__		}_		return types__	};build,the,array,of,link,java,sql,types,based,on,configuration,and,metadata,information,return,the,array,of,types,to,be,used;public,int,create,insert,types,int,types,new,int,get,table,columns,size,list,table,parameter,meta,data,parameters,obtain,meta,data,provider,get,table,parameter,meta,data,map,string,table,parameter,meta,data,parameter,map,new,linked,hash,map,parameters,size,for,table,parameter,meta,data,tpmd,parameters,parameter,map,put,tpmd,get,parameter,name,to,upper,case,tpmd,int,type,indx,0,for,string,column,get,table,columns,if,column,null,types,type,indx,sql,type,value,else,table,parameter,meta,data,tpmd,parameter,map,get,column,to,upper,case,if,tpmd,null,types,type,indx,tpmd,get,sql,type,else,types,type,indx,sql,type,value,type,indx,return,types
TableMetaDataContext -> public int[] createInsertTypes();1516393837;Build the array of {@link java.sql.Types} based on configuration and metadata information_@return the array of types to be used;public int[] createInsertTypes() {_		int[] types = new int[getTableColumns().size()]__		List<TableParameterMetaData> parameters = obtainMetaDataProvider().getTableParameterMetaData()__		Map<String, TableParameterMetaData> parameterMap =_				new LinkedHashMap<>(parameters.size())__		for (TableParameterMetaData tpmd : parameters) {_			parameterMap.put(tpmd.getParameterName().toUpperCase(), tpmd)__		}_		int typeIndx = 0__		for (String column : getTableColumns()) {_			if (column == null) {_				types[typeIndx] = SqlTypeValue.TYPE_UNKNOWN__			}_			else {_				TableParameterMetaData tpmd = parameterMap.get(column.toUpperCase())__				if (tpmd != null) {_					types[typeIndx] = tpmd.getSqlType()__				}_				else {_					types[typeIndx] = SqlTypeValue.TYPE_UNKNOWN__				}_			}_			typeIndx++__		}_		return types__	};build,the,array,of,link,java,sql,types,based,on,configuration,and,metadata,information,return,the,array,of,types,to,be,used;public,int,create,insert,types,int,types,new,int,get,table,columns,size,list,table,parameter,meta,data,parameters,obtain,meta,data,provider,get,table,parameter,meta,data,map,string,table,parameter,meta,data,parameter,map,new,linked,hash,map,parameters,size,for,table,parameter,meta,data,tpmd,parameters,parameter,map,put,tpmd,get,parameter,name,to,upper,case,tpmd,int,type,indx,0,for,string,column,get,table,columns,if,column,null,types,type,indx,sql,type,value,else,table,parameter,meta,data,tpmd,parameter,map,get,column,to,upper,case,if,tpmd,null,types,type,indx,tpmd,get,sql,type,else,types,type,indx,sql,type,value,type,indx,return,types
TableMetaDataContext -> public int[] createInsertTypes();1518167526;Build the array of {@link java.sql.Types} based on configuration and metadata information_@return the array of types to be used;public int[] createInsertTypes() {_		int[] types = new int[getTableColumns().size()]__		List<TableParameterMetaData> parameters = obtainMetaDataProvider().getTableParameterMetaData()__		Map<String, TableParameterMetaData> parameterMap =_				new LinkedHashMap<>(parameters.size())__		for (TableParameterMetaData tpmd : parameters) {_			parameterMap.put(tpmd.getParameterName().toUpperCase(), tpmd)__		}_		int typeIndx = 0__		for (String column : getTableColumns()) {_			if (column == null) {_				types[typeIndx] = SqlTypeValue.TYPE_UNKNOWN__			}_			else {_				TableParameterMetaData tpmd = parameterMap.get(column.toUpperCase())__				if (tpmd != null) {_					types[typeIndx] = tpmd.getSqlType()__				}_				else {_					types[typeIndx] = SqlTypeValue.TYPE_UNKNOWN__				}_			}_			typeIndx++__		}_		return types__	};build,the,array,of,link,java,sql,types,based,on,configuration,and,metadata,information,return,the,array,of,types,to,be,used;public,int,create,insert,types,int,types,new,int,get,table,columns,size,list,table,parameter,meta,data,parameters,obtain,meta,data,provider,get,table,parameter,meta,data,map,string,table,parameter,meta,data,parameter,map,new,linked,hash,map,parameters,size,for,table,parameter,meta,data,tpmd,parameters,parameter,map,put,tpmd,get,parameter,name,to,upper,case,tpmd,int,type,indx,0,for,string,column,get,table,columns,if,column,null,types,type,indx,sql,type,value,else,table,parameter,meta,data,tpmd,parameter,map,get,column,to,upper,case,if,tpmd,null,types,type,indx,tpmd,get,sql,type,else,types,type,indx,sql,type,value,type,indx,return,types
TableMetaDataContext -> public int[] createInsertTypes();1521457491;Build the array of {@link java.sql.Types} based on configuration and meta-data information._@return the array of types to be used;public int[] createInsertTypes() {_		int[] types = new int[getTableColumns().size()]__		List<TableParameterMetaData> parameters = obtainMetaDataProvider().getTableParameterMetaData()__		Map<String, TableParameterMetaData> parameterMap = new LinkedHashMap<>(parameters.size())__		for (TableParameterMetaData tpmd : parameters) {_			parameterMap.put(tpmd.getParameterName().toUpperCase(), tpmd)__		}_		int typeIndx = 0__		for (String column : getTableColumns()) {_			if (column == null) {_				types[typeIndx] = SqlTypeValue.TYPE_UNKNOWN__			}_			else {_				TableParameterMetaData tpmd = parameterMap.get(column.toUpperCase())__				if (tpmd != null) {_					types[typeIndx] = tpmd.getSqlType()__				}_				else {_					types[typeIndx] = SqlTypeValue.TYPE_UNKNOWN__				}_			}_			typeIndx++__		}_		return types__	};build,the,array,of,link,java,sql,types,based,on,configuration,and,meta,data,information,return,the,array,of,types,to,be,used;public,int,create,insert,types,int,types,new,int,get,table,columns,size,list,table,parameter,meta,data,parameters,obtain,meta,data,provider,get,table,parameter,meta,data,map,string,table,parameter,meta,data,parameter,map,new,linked,hash,map,parameters,size,for,table,parameter,meta,data,tpmd,parameters,parameter,map,put,tpmd,get,parameter,name,to,upper,case,tpmd,int,type,indx,0,for,string,column,get,table,columns,if,column,null,types,type,indx,sql,type,value,else,table,parameter,meta,data,tpmd,parameter,map,get,column,to,upper,case,if,tpmd,null,types,type,indx,tpmd,get,sql,type,else,types,type,indx,sql,type,value,type,indx,return,types
TableMetaDataContext -> public int[] createInsertTypes();1522103912;Build the array of {@link java.sql.Types} based on configuration and meta-data information._@return the array of types to be used;public int[] createInsertTypes() {_		int[] types = new int[getTableColumns().size()]__		List<TableParameterMetaData> parameters = obtainMetaDataProvider().getTableParameterMetaData()__		Map<String, TableParameterMetaData> parameterMap = new LinkedHashMap<>(parameters.size())__		for (TableParameterMetaData tpmd : parameters) {_			parameterMap.put(tpmd.getParameterName().toUpperCase(), tpmd)__		}_		int typeIndx = 0__		for (String column : getTableColumns()) {_			if (column == null) {_				types[typeIndx] = SqlTypeValue.TYPE_UNKNOWN__			}_			else {_				TableParameterMetaData tpmd = parameterMap.get(column.toUpperCase())__				if (tpmd != null) {_					types[typeIndx] = tpmd.getSqlType()__				}_				else {_					types[typeIndx] = SqlTypeValue.TYPE_UNKNOWN__				}_			}_			typeIndx++__		}_		return types__	};build,the,array,of,link,java,sql,types,based,on,configuration,and,meta,data,information,return,the,array,of,types,to,be,used;public,int,create,insert,types,int,types,new,int,get,table,columns,size,list,table,parameter,meta,data,parameters,obtain,meta,data,provider,get,table,parameter,meta,data,map,string,table,parameter,meta,data,parameter,map,new,linked,hash,map,parameters,size,for,table,parameter,meta,data,tpmd,parameters,parameter,map,put,tpmd,get,parameter,name,to,upper,case,tpmd,int,type,indx,0,for,string,column,get,table,columns,if,column,null,types,type,indx,sql,type,value,else,table,parameter,meta,data,tpmd,parameter,map,get,column,to,upper,case,if,tpmd,null,types,type,indx,tpmd,get,sql,type,else,types,type,indx,sql,type,value,type,indx,return,types
TableMetaDataContext -> public int[] createInsertTypes();1528719423;Build the array of {@link java.sql.Types} based on configuration and meta-data information._@return the array of types to be used;public int[] createInsertTypes() {_		int[] types = new int[getTableColumns().size()]__		List<TableParameterMetaData> parameters = obtainMetaDataProvider().getTableParameterMetaData()__		Map<String, TableParameterMetaData> parameterMap = new LinkedHashMap<>(parameters.size())__		for (TableParameterMetaData tpmd : parameters) {_			parameterMap.put(tpmd.getParameterName().toUpperCase(), tpmd)__		}_		int typeIndx = 0__		for (String column : getTableColumns()) {_			if (column == null) {_				types[typeIndx] = SqlTypeValue.TYPE_UNKNOWN__			}_			else {_				TableParameterMetaData tpmd = parameterMap.get(column.toUpperCase())__				if (tpmd != null) {_					types[typeIndx] = tpmd.getSqlType()__				}_				else {_					types[typeIndx] = SqlTypeValue.TYPE_UNKNOWN__				}_			}_			typeIndx++__		}_		return types__	};build,the,array,of,link,java,sql,types,based,on,configuration,and,meta,data,information,return,the,array,of,types,to,be,used;public,int,create,insert,types,int,types,new,int,get,table,columns,size,list,table,parameter,meta,data,parameters,obtain,meta,data,provider,get,table,parameter,meta,data,map,string,table,parameter,meta,data,parameter,map,new,linked,hash,map,parameters,size,for,table,parameter,meta,data,tpmd,parameters,parameter,map,put,tpmd,get,parameter,name,to,upper,case,tpmd,int,type,indx,0,for,string,column,get,table,columns,if,column,null,types,type,indx,sql,type,value,else,table,parameter,meta,data,tpmd,parameter,map,get,column,to,upper,case,if,tpmd,null,types,type,indx,tpmd,get,sql,type,else,types,type,indx,sql,type,value,type,indx,return,types
TableMetaDataContext -> public int[] createInsertTypes();1530174524;Build the array of {@link java.sql.Types} based on configuration and meta-data information._@return the array of types to be used;public int[] createInsertTypes() {_		int[] types = new int[getTableColumns().size()]__		List<TableParameterMetaData> parameters = obtainMetaDataProvider().getTableParameterMetaData()__		Map<String, TableParameterMetaData> parameterMap = new LinkedHashMap<>(parameters.size())__		for (TableParameterMetaData tpmd : parameters) {_			parameterMap.put(tpmd.getParameterName().toUpperCase(), tpmd)__		}_		int typeIndx = 0__		for (String column : getTableColumns()) {_			if (column == null) {_				types[typeIndx] = SqlTypeValue.TYPE_UNKNOWN__			}_			else {_				TableParameterMetaData tpmd = parameterMap.get(column.toUpperCase())__				if (tpmd != null) {_					types[typeIndx] = tpmd.getSqlType()__				}_				else {_					types[typeIndx] = SqlTypeValue.TYPE_UNKNOWN__				}_			}_			typeIndx++__		}_		return types__	};build,the,array,of,link,java,sql,types,based,on,configuration,and,meta,data,information,return,the,array,of,types,to,be,used;public,int,create,insert,types,int,types,new,int,get,table,columns,size,list,table,parameter,meta,data,parameters,obtain,meta,data,provider,get,table,parameter,meta,data,map,string,table,parameter,meta,data,parameter,map,new,linked,hash,map,parameters,size,for,table,parameter,meta,data,tpmd,parameters,parameter,map,put,tpmd,get,parameter,name,to,upper,case,tpmd,int,type,indx,0,for,string,column,get,table,columns,if,column,null,types,type,indx,sql,type,value,else,table,parameter,meta,data,tpmd,parameter,map,get,column,to,upper,case,if,tpmd,null,types,type,indx,tpmd,get,sql,type,else,types,type,indx,sql,type,value,type,indx,return,types
TableMetaDataContext -> public int[] createInsertTypes();1532091916;Build the array of {@link java.sql.Types} based on configuration and meta-data information._@return the array of types to be used;public int[] createInsertTypes() {_		int[] types = new int[getTableColumns().size()]__		List<TableParameterMetaData> parameters = obtainMetaDataProvider().getTableParameterMetaData()__		Map<String, TableParameterMetaData> parameterMap = new LinkedHashMap<>(parameters.size())__		for (TableParameterMetaData tpmd : parameters) {_			parameterMap.put(tpmd.getParameterName().toUpperCase(), tpmd)__		}_		int typeIndx = 0__		for (String column : getTableColumns()) {_			if (column == null) {_				types[typeIndx] = SqlTypeValue.TYPE_UNKNOWN__			}_			else {_				TableParameterMetaData tpmd = parameterMap.get(column.toUpperCase())__				if (tpmd != null) {_					types[typeIndx] = tpmd.getSqlType()__				}_				else {_					types[typeIndx] = SqlTypeValue.TYPE_UNKNOWN__				}_			}_			typeIndx++__		}_		return types__	};build,the,array,of,link,java,sql,types,based,on,configuration,and,meta,data,information,return,the,array,of,types,to,be,used;public,int,create,insert,types,int,types,new,int,get,table,columns,size,list,table,parameter,meta,data,parameters,obtain,meta,data,provider,get,table,parameter,meta,data,map,string,table,parameter,meta,data,parameter,map,new,linked,hash,map,parameters,size,for,table,parameter,meta,data,tpmd,parameters,parameter,map,put,tpmd,get,parameter,name,to,upper,case,tpmd,int,type,indx,0,for,string,column,get,table,columns,if,column,null,types,type,indx,sql,type,value,else,table,parameter,meta,data,tpmd,parameter,map,get,column,to,upper,case,if,tpmd,null,types,type,indx,tpmd,get,sql,type,else,types,type,indx,sql,type,value,type,indx,return,types
TableMetaDataContext -> public int[] createInsertTypes();1550238935;Build the array of {@link java.sql.Types} based on configuration and meta-data information._@return the array of types to be used;public int[] createInsertTypes() {_		int[] types = new int[getTableColumns().size()]__		List<TableParameterMetaData> parameters = obtainMetaDataProvider().getTableParameterMetaData()__		Map<String, TableParameterMetaData> parameterMap = new LinkedHashMap<>(parameters.size())__		for (TableParameterMetaData tpmd : parameters) {_			parameterMap.put(tpmd.getParameterName().toUpperCase(), tpmd)__		}_		int typeIndx = 0__		for (String column : getTableColumns()) {_			if (column == null) {_				types[typeIndx] = SqlTypeValue.TYPE_UNKNOWN__			}_			else {_				TableParameterMetaData tpmd = parameterMap.get(column.toUpperCase())__				if (tpmd != null) {_					types[typeIndx] = tpmd.getSqlType()__				}_				else {_					types[typeIndx] = SqlTypeValue.TYPE_UNKNOWN__				}_			}_			typeIndx++__		}_		return types__	};build,the,array,of,link,java,sql,types,based,on,configuration,and,meta,data,information,return,the,array,of,types,to,be,used;public,int,create,insert,types,int,types,new,int,get,table,columns,size,list,table,parameter,meta,data,parameters,obtain,meta,data,provider,get,table,parameter,meta,data,map,string,table,parameter,meta,data,parameter,map,new,linked,hash,map,parameters,size,for,table,parameter,meta,data,tpmd,parameters,parameter,map,put,tpmd,get,parameter,name,to,upper,case,tpmd,int,type,indx,0,for,string,column,get,table,columns,if,column,null,types,type,indx,sql,type,value,else,table,parameter,meta,data,tpmd,parameter,map,get,column,to,upper,case,if,tpmd,null,types,type,indx,tpmd,get,sql,type,else,types,type,indx,sql,type,value,type,indx,return,types
TableMetaDataContext -> public boolean isGetGeneratedKeysSimulated();1328020251;Does this database support simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported._{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public boolean isGetGeneratedKeysSimulated() {_		return this.metaDataProvider.isGetGeneratedKeysSimulated()__	};does,this,database,support,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys;public,boolean,is,get,generated,keys,simulated,return,this,meta,data,provider,is,get,generated,keys,simulated
TableMetaDataContext -> public boolean isGetGeneratedKeysSimulated();1385412762;Does this database support simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported._{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public boolean isGetGeneratedKeysSimulated() {_		return this.metaDataProvider.isGetGeneratedKeysSimulated()__	};does,this,database,support,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys;public,boolean,is,get,generated,keys,simulated,return,this,meta,data,provider,is,get,generated,keys,simulated
TableMetaDataContext -> public boolean isGetGeneratedKeysSimulated();1407511029;Does this database support simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported._{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public boolean isGetGeneratedKeysSimulated() {_		return this.metaDataProvider.isGetGeneratedKeysSimulated()__	};does,this,database,support,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys;public,boolean,is,get,generated,keys,simulated,return,this,meta,data,provider,is,get,generated,keys,simulated
TableMetaDataContext -> public boolean isGetGeneratedKeysSimulated();1416833949;Does this database support simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported._{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public boolean isGetGeneratedKeysSimulated() {_		return this.metaDataProvider.isGetGeneratedKeysSimulated()__	};does,this,database,support,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys;public,boolean,is,get,generated,keys,simulated,return,this,meta,data,provider,is,get,generated,keys,simulated
TableMetaDataContext -> public boolean isGetGeneratedKeysSimulated();1429214043;Does this database support simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported._{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public boolean isGetGeneratedKeysSimulated() {_		return this.metaDataProvider.isGetGeneratedKeysSimulated()__	};does,this,database,support,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys;public,boolean,is,get,generated,keys,simulated,return,this,meta,data,provider,is,get,generated,keys,simulated
TableMetaDataContext -> public boolean isGetGeneratedKeysSimulated();1464241861;Does this database support simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported._{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public boolean isGetGeneratedKeysSimulated() {_		return this.metaDataProvider.isGetGeneratedKeysSimulated()__	};does,this,database,support,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys;public,boolean,is,get,generated,keys,simulated,return,this,meta,data,provider,is,get,generated,keys,simulated
TableMetaDataContext -> public boolean isGetGeneratedKeysSimulated();1467730834;Does this database support simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported._{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public boolean isGetGeneratedKeysSimulated() {_		return this.metaDataProvider.isGetGeneratedKeysSimulated()__	};does,this,database,support,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys;public,boolean,is,get,generated,keys,simulated,return,this,meta,data,provider,is,get,generated,keys,simulated
TableMetaDataContext -> public boolean isGetGeneratedKeysSimulated();1487178248;Does this database support simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported._{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public boolean isGetGeneratedKeysSimulated() {_		return this.metaDataProvider.isGetGeneratedKeysSimulated()__	};does,this,database,support,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys;public,boolean,is,get,generated,keys,simulated,return,this,meta,data,provider,is,get,generated,keys,simulated
TableMetaDataContext -> public boolean isGetGeneratedKeysSimulated();1496837955;Does this database support simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported._{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public boolean isGetGeneratedKeysSimulated() {_		return this.metaDataProvider.isGetGeneratedKeysSimulated()__	};does,this,database,support,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys;public,boolean,is,get,generated,keys,simulated,return,this,meta,data,provider,is,get,generated,keys,simulated
TableMetaDataContext -> public boolean isGetGeneratedKeysSimulated();1500448076;Does this database support simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported._{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public boolean isGetGeneratedKeysSimulated() {_		return this.metaDataProvider.isGetGeneratedKeysSimulated()__	};does,this,database,support,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys;public,boolean,is,get,generated,keys,simulated,return,this,meta,data,provider,is,get,generated,keys,simulated
TableMetaDataContext -> public boolean isGetGeneratedKeysSimulated();1500457438;Does this database support simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported._{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public boolean isGetGeneratedKeysSimulated() {_		return obtainMetaDataProvider().isGetGeneratedKeysSimulated()__	};does,this,database,support,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys;public,boolean,is,get,generated,keys,simulated,return,obtain,meta,data,provider,is,get,generated,keys,simulated
TableMetaDataContext -> public boolean isGetGeneratedKeysSimulated();1515532822;Does this database support simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported._{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public boolean isGetGeneratedKeysSimulated() {_		return obtainMetaDataProvider().isGetGeneratedKeysSimulated()__	};does,this,database,support,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys;public,boolean,is,get,generated,keys,simulated,return,obtain,meta,data,provider,is,get,generated,keys,simulated
TableMetaDataContext -> public boolean isGetGeneratedKeysSimulated();1516393837;Does this database support simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported._{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public boolean isGetGeneratedKeysSimulated() {_		return obtainMetaDataProvider().isGetGeneratedKeysSimulated()__	};does,this,database,support,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys;public,boolean,is,get,generated,keys,simulated,return,obtain,meta,data,provider,is,get,generated,keys,simulated
TableMetaDataContext -> public boolean isGetGeneratedKeysSimulated();1518167526;Does this database support simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported._{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public boolean isGetGeneratedKeysSimulated() {_		return obtainMetaDataProvider().isGetGeneratedKeysSimulated()__	};does,this,database,support,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys;public,boolean,is,get,generated,keys,simulated,return,obtain,meta,data,provider,is,get,generated,keys,simulated
TableMetaDataContext -> public boolean isGetGeneratedKeysSimulated();1521457491;Does this database support simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported:_{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public boolean isGetGeneratedKeysSimulated() {_		return obtainMetaDataProvider().isGetGeneratedKeysSimulated()__	};does,this,database,support,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys;public,boolean,is,get,generated,keys,simulated,return,obtain,meta,data,provider,is,get,generated,keys,simulated
TableMetaDataContext -> public boolean isGetGeneratedKeysSimulated();1522103912;Does this database support simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported:_{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public boolean isGetGeneratedKeysSimulated() {_		return obtainMetaDataProvider().isGetGeneratedKeysSimulated()__	};does,this,database,support,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys;public,boolean,is,get,generated,keys,simulated,return,obtain,meta,data,provider,is,get,generated,keys,simulated
TableMetaDataContext -> public boolean isGetGeneratedKeysSimulated();1528719423;Does this database support simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported:_{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public boolean isGetGeneratedKeysSimulated() {_		return obtainMetaDataProvider().isGetGeneratedKeysSimulated()__	};does,this,database,support,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys;public,boolean,is,get,generated,keys,simulated,return,obtain,meta,data,provider,is,get,generated,keys,simulated
TableMetaDataContext -> public boolean isGetGeneratedKeysSimulated();1530174524;Does this database support simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported:_{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public boolean isGetGeneratedKeysSimulated() {_		return obtainMetaDataProvider().isGetGeneratedKeysSimulated()__	};does,this,database,support,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys;public,boolean,is,get,generated,keys,simulated,return,obtain,meta,data,provider,is,get,generated,keys,simulated
TableMetaDataContext -> public boolean isGetGeneratedKeysSimulated();1532091916;Does this database support simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported:_{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public boolean isGetGeneratedKeysSimulated() {_		return obtainMetaDataProvider().isGetGeneratedKeysSimulated()__	};does,this,database,support,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys;public,boolean,is,get,generated,keys,simulated,return,obtain,meta,data,provider,is,get,generated,keys,simulated
TableMetaDataContext -> public boolean isGetGeneratedKeysSimulated();1550238935;Does this database support simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported:_{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;public boolean isGetGeneratedKeysSimulated() {_		return obtainMetaDataProvider().isGetGeneratedKeysSimulated()__	};does,this,database,support,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys;public,boolean,is,get,generated,keys,simulated,return,obtain,meta,data,provider,is,get,generated,keys,simulated
TableMetaDataContext -> public String createInsertString(String... generatedKeyNames);1407511029;Build the insert string based on configuration and metadata information_@return the insert string to be used;public String createInsertString(String... generatedKeyNames) {_		HashSet<String> keys = new HashSet<String>(generatedKeyNames.length)__		for (String key : generatedKeyNames) {_			keys.add(key.toUpperCase())__		}_		StringBuilder insertStatement = new StringBuilder()__		insertStatement.append("INSERT INTO ")__		if (this.getSchemaName() != null) {_			insertStatement.append(this.getSchemaName())__			insertStatement.append(".")__		}_		insertStatement.append(this.getTableName())__		insertStatement.append(" (")__		int columnCount = 0__		for (String columnName : this.getTableColumns()) {_			if (!keys.contains(columnName.toUpperCase())) {_				columnCount++__				if (columnCount > 1) {_					insertStatement.append(", ")__				}_				insertStatement.append(columnName)__			}_		}_		insertStatement.append(") VALUES(")__		if (columnCount < 1) {_			if (this.generatedKeyColumnsUsed) {_				logger.info("Unable to locate non-key columns for table '" +_						this.getTableName() + "' so an empty insert statement is generated")__			}_			else {_				throw new InvalidDataAccessApiUsageException("Unable to locate columns for table '" +_						this.getTableName() + "' so an insert statement can't be generated")__			}_		}_		for (int i = 0_ i < columnCount_ i++) {_			if (i > 0) {_				insertStatement.append(", ")__			}_			insertStatement.append("?")__		}_		insertStatement.append(")")__		return insertStatement.toString()__	};build,the,insert,string,based,on,configuration,and,metadata,information,return,the,insert,string,to,be,used;public,string,create,insert,string,string,generated,key,names,hash,set,string,keys,new,hash,set,string,generated,key,names,length,for,string,key,generated,key,names,keys,add,key,to,upper,case,string,builder,insert,statement,new,string,builder,insert,statement,append,insert,into,if,this,get,schema,name,null,insert,statement,append,this,get,schema,name,insert,statement,append,insert,statement,append,this,get,table,name,insert,statement,append,int,column,count,0,for,string,column,name,this,get,table,columns,if,keys,contains,column,name,to,upper,case,column,count,if,column,count,1,insert,statement,append,insert,statement,append,column,name,insert,statement,append,values,if,column,count,1,if,this,generated,key,columns,used,logger,info,unable,to,locate,non,key,columns,for,table,this,get,table,name,so,an,empty,insert,statement,is,generated,else,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,columns,for,table,this,get,table,name,so,an,insert,statement,can,t,be,generated,for,int,i,0,i,column,count,i,if,i,0,insert,statement,append,insert,statement,append,insert,statement,append,return,insert,statement,to,string
TableMetaDataContext -> public String createInsertString(String... generatedKeyNames);1416833949;Build the insert string based on configuration and metadata information_@return the insert string to be used;public String createInsertString(String... generatedKeyNames) {_		Set<String> keys = new LinkedHashSet<String>(generatedKeyNames.length)__		for (String key : generatedKeyNames) {_			keys.add(key.toUpperCase())__		}_		StringBuilder insertStatement = new StringBuilder()__		insertStatement.append("INSERT INTO ")__		if (this.getSchemaName() != null) {_			insertStatement.append(this.getSchemaName())__			insertStatement.append(".")__		}_		insertStatement.append(this.getTableName())__		insertStatement.append(" (")__		int columnCount = 0__		for (String columnName : this.getTableColumns()) {_			if (!keys.contains(columnName.toUpperCase())) {_				columnCount++__				if (columnCount > 1) {_					insertStatement.append(", ")__				}_				insertStatement.append(columnName)__			}_		}_		insertStatement.append(") VALUES(")__		if (columnCount < 1) {_			if (this.generatedKeyColumnsUsed) {_				logger.info("Unable to locate non-key columns for table '" +_						this.getTableName() + "' so an empty insert statement is generated")__			}_			else {_				throw new InvalidDataAccessApiUsageException("Unable to locate columns for table '" +_						this.getTableName() + "' so an insert statement can't be generated")__			}_		}_		for (int i = 0_ i < columnCount_ i++) {_			if (i > 0) {_				insertStatement.append(", ")__			}_			insertStatement.append("?")__		}_		insertStatement.append(")")__		return insertStatement.toString()__	};build,the,insert,string,based,on,configuration,and,metadata,information,return,the,insert,string,to,be,used;public,string,create,insert,string,string,generated,key,names,set,string,keys,new,linked,hash,set,string,generated,key,names,length,for,string,key,generated,key,names,keys,add,key,to,upper,case,string,builder,insert,statement,new,string,builder,insert,statement,append,insert,into,if,this,get,schema,name,null,insert,statement,append,this,get,schema,name,insert,statement,append,insert,statement,append,this,get,table,name,insert,statement,append,int,column,count,0,for,string,column,name,this,get,table,columns,if,keys,contains,column,name,to,upper,case,column,count,if,column,count,1,insert,statement,append,insert,statement,append,column,name,insert,statement,append,values,if,column,count,1,if,this,generated,key,columns,used,logger,info,unable,to,locate,non,key,columns,for,table,this,get,table,name,so,an,empty,insert,statement,is,generated,else,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,columns,for,table,this,get,table,name,so,an,insert,statement,can,t,be,generated,for,int,i,0,i,column,count,i,if,i,0,insert,statement,append,insert,statement,append,insert,statement,append,return,insert,statement,to,string
TableMetaDataContext -> public String createInsertString(String... generatedKeyNames);1429214043;Build the insert string based on configuration and metadata information_@return the insert string to be used;public String createInsertString(String... generatedKeyNames) {_		Set<String> keys = new LinkedHashSet<String>(generatedKeyNames.length)__		for (String key : generatedKeyNames) {_			keys.add(key.toUpperCase())__		}_		StringBuilder insertStatement = new StringBuilder()__		insertStatement.append("INSERT INTO ")__		if (getSchemaName() != null) {_			insertStatement.append(getSchemaName())__			insertStatement.append(".")__		}_		insertStatement.append(getTableName())__		insertStatement.append(" (")__		int columnCount = 0__		for (String columnName : getTableColumns()) {_			if (!keys.contains(columnName.toUpperCase())) {_				columnCount++__				if (columnCount > 1) {_					insertStatement.append(", ")__				}_				insertStatement.append(columnName)__			}_		}_		insertStatement.append(") VALUES(")__		if (columnCount < 1) {_			if (this.generatedKeyColumnsUsed) {_				logger.info("Unable to locate non-key columns for table '" +_						getTableName() + "' so an empty insert statement is generated")__			}_			else {_				throw new InvalidDataAccessApiUsageException("Unable to locate columns for table '" +_						getTableName() + "' so an insert statement can't be generated")__			}_		}_		for (int i = 0_ i < columnCount_ i++) {_			if (i > 0) {_				insertStatement.append(", ")__			}_			insertStatement.append("?")__		}_		insertStatement.append(")")__		return insertStatement.toString()__	};build,the,insert,string,based,on,configuration,and,metadata,information,return,the,insert,string,to,be,used;public,string,create,insert,string,string,generated,key,names,set,string,keys,new,linked,hash,set,string,generated,key,names,length,for,string,key,generated,key,names,keys,add,key,to,upper,case,string,builder,insert,statement,new,string,builder,insert,statement,append,insert,into,if,get,schema,name,null,insert,statement,append,get,schema,name,insert,statement,append,insert,statement,append,get,table,name,insert,statement,append,int,column,count,0,for,string,column,name,get,table,columns,if,keys,contains,column,name,to,upper,case,column,count,if,column,count,1,insert,statement,append,insert,statement,append,column,name,insert,statement,append,values,if,column,count,1,if,this,generated,key,columns,used,logger,info,unable,to,locate,non,key,columns,for,table,get,table,name,so,an,empty,insert,statement,is,generated,else,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,columns,for,table,get,table,name,so,an,insert,statement,can,t,be,generated,for,int,i,0,i,column,count,i,if,i,0,insert,statement,append,insert,statement,append,insert,statement,append,return,insert,statement,to,string
TableMetaDataContext -> public String createInsertString(String... generatedKeyNames);1464241861;Build the insert string based on configuration and metadata information_@return the insert string to be used;public String createInsertString(String... generatedKeyNames) {_		Set<String> keys = new LinkedHashSet<String>(generatedKeyNames.length)__		for (String key : generatedKeyNames) {_			keys.add(key.toUpperCase())__		}_		StringBuilder insertStatement = new StringBuilder()__		insertStatement.append("INSERT INTO ")__		if (getSchemaName() != null) {_			insertStatement.append(getSchemaName())__			insertStatement.append(".")__		}_		insertStatement.append(getTableName())__		insertStatement.append(" (")__		int columnCount = 0__		for (String columnName : getTableColumns()) {_			if (!keys.contains(columnName.toUpperCase())) {_				columnCount++__				if (columnCount > 1) {_					insertStatement.append(", ")__				}_				insertStatement.append(columnName)__			}_		}_		insertStatement.append(") VALUES(")__		if (columnCount < 1) {_			if (this.generatedKeyColumnsUsed) {_				logger.info("Unable to locate non-key columns for table '" +_						getTableName() + "' so an empty insert statement is generated")__			}_			else {_				throw new InvalidDataAccessApiUsageException("Unable to locate columns for table '" +_						getTableName() + "' so an insert statement can't be generated")__			}_		}_		for (int i = 0_ i < columnCount_ i++) {_			if (i > 0) {_				insertStatement.append(", ")__			}_			insertStatement.append("?")__		}_		insertStatement.append(")")__		return insertStatement.toString()__	};build,the,insert,string,based,on,configuration,and,metadata,information,return,the,insert,string,to,be,used;public,string,create,insert,string,string,generated,key,names,set,string,keys,new,linked,hash,set,string,generated,key,names,length,for,string,key,generated,key,names,keys,add,key,to,upper,case,string,builder,insert,statement,new,string,builder,insert,statement,append,insert,into,if,get,schema,name,null,insert,statement,append,get,schema,name,insert,statement,append,insert,statement,append,get,table,name,insert,statement,append,int,column,count,0,for,string,column,name,get,table,columns,if,keys,contains,column,name,to,upper,case,column,count,if,column,count,1,insert,statement,append,insert,statement,append,column,name,insert,statement,append,values,if,column,count,1,if,this,generated,key,columns,used,logger,info,unable,to,locate,non,key,columns,for,table,get,table,name,so,an,empty,insert,statement,is,generated,else,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,columns,for,table,get,table,name,so,an,insert,statement,can,t,be,generated,for,int,i,0,i,column,count,i,if,i,0,insert,statement,append,insert,statement,append,insert,statement,append,return,insert,statement,to,string
TableMetaDataContext -> public String createInsertString(String... generatedKeyNames);1467730834;Build the insert string based on configuration and metadata information_@return the insert string to be used;public String createInsertString(String... generatedKeyNames) {_		Set<String> keys = new LinkedHashSet<>(generatedKeyNames.length)__		for (String key : generatedKeyNames) {_			keys.add(key.toUpperCase())__		}_		StringBuilder insertStatement = new StringBuilder()__		insertStatement.append("INSERT INTO ")__		if (getSchemaName() != null) {_			insertStatement.append(getSchemaName())__			insertStatement.append(".")__		}_		insertStatement.append(getTableName())__		insertStatement.append(" (")__		int columnCount = 0__		for (String columnName : getTableColumns()) {_			if (!keys.contains(columnName.toUpperCase())) {_				columnCount++__				if (columnCount > 1) {_					insertStatement.append(", ")__				}_				insertStatement.append(columnName)__			}_		}_		insertStatement.append(") VALUES(")__		if (columnCount < 1) {_			if (this.generatedKeyColumnsUsed) {_				logger.info("Unable to locate non-key columns for table '" +_						getTableName() + "' so an empty insert statement is generated")__			}_			else {_				throw new InvalidDataAccessApiUsageException("Unable to locate columns for table '" +_						getTableName() + "' so an insert statement can't be generated")__			}_		}_		for (int i = 0_ i < columnCount_ i++) {_			if (i > 0) {_				insertStatement.append(", ")__			}_			insertStatement.append("?")__		}_		insertStatement.append(")")__		return insertStatement.toString()__	};build,the,insert,string,based,on,configuration,and,metadata,information,return,the,insert,string,to,be,used;public,string,create,insert,string,string,generated,key,names,set,string,keys,new,linked,hash,set,generated,key,names,length,for,string,key,generated,key,names,keys,add,key,to,upper,case,string,builder,insert,statement,new,string,builder,insert,statement,append,insert,into,if,get,schema,name,null,insert,statement,append,get,schema,name,insert,statement,append,insert,statement,append,get,table,name,insert,statement,append,int,column,count,0,for,string,column,name,get,table,columns,if,keys,contains,column,name,to,upper,case,column,count,if,column,count,1,insert,statement,append,insert,statement,append,column,name,insert,statement,append,values,if,column,count,1,if,this,generated,key,columns,used,logger,info,unable,to,locate,non,key,columns,for,table,get,table,name,so,an,empty,insert,statement,is,generated,else,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,columns,for,table,get,table,name,so,an,insert,statement,can,t,be,generated,for,int,i,0,i,column,count,i,if,i,0,insert,statement,append,insert,statement,append,insert,statement,append,return,insert,statement,to,string
TableMetaDataContext -> public String createInsertString(String... generatedKeyNames);1487178248;Build the insert string based on configuration and metadata information_@return the insert string to be used;public String createInsertString(String... generatedKeyNames) {_		Set<String> keys = new LinkedHashSet<>(generatedKeyNames.length)__		for (String key : generatedKeyNames) {_			keys.add(key.toUpperCase())__		}_		StringBuilder insertStatement = new StringBuilder()__		insertStatement.append("INSERT INTO ")__		if (getSchemaName() != null) {_			insertStatement.append(getSchemaName())__			insertStatement.append(".")__		}_		insertStatement.append(getTableName())__		insertStatement.append(" (")__		int columnCount = 0__		for (String columnName : getTableColumns()) {_			if (!keys.contains(columnName.toUpperCase())) {_				columnCount++__				if (columnCount > 1) {_					insertStatement.append(", ")__				}_				insertStatement.append(columnName)__			}_		}_		insertStatement.append(") VALUES(")__		if (columnCount < 1) {_			if (this.generatedKeyColumnsUsed) {_				logger.info("Unable to locate non-key columns for table '" +_						getTableName() + "' so an empty insert statement is generated")__			}_			else {_				throw new InvalidDataAccessApiUsageException("Unable to locate columns for table '" +_						getTableName() + "' so an insert statement can't be generated")__			}_		}_		for (int i = 0_ i < columnCount_ i++) {_			if (i > 0) {_				insertStatement.append(", ")__			}_			insertStatement.append("?")__		}_		insertStatement.append(")")__		return insertStatement.toString()__	};build,the,insert,string,based,on,configuration,and,metadata,information,return,the,insert,string,to,be,used;public,string,create,insert,string,string,generated,key,names,set,string,keys,new,linked,hash,set,generated,key,names,length,for,string,key,generated,key,names,keys,add,key,to,upper,case,string,builder,insert,statement,new,string,builder,insert,statement,append,insert,into,if,get,schema,name,null,insert,statement,append,get,schema,name,insert,statement,append,insert,statement,append,get,table,name,insert,statement,append,int,column,count,0,for,string,column,name,get,table,columns,if,keys,contains,column,name,to,upper,case,column,count,if,column,count,1,insert,statement,append,insert,statement,append,column,name,insert,statement,append,values,if,column,count,1,if,this,generated,key,columns,used,logger,info,unable,to,locate,non,key,columns,for,table,get,table,name,so,an,empty,insert,statement,is,generated,else,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,columns,for,table,get,table,name,so,an,insert,statement,can,t,be,generated,for,int,i,0,i,column,count,i,if,i,0,insert,statement,append,insert,statement,append,insert,statement,append,return,insert,statement,to,string
TableMetaDataContext -> public String createInsertString(String... generatedKeyNames);1496837955;Build the insert string based on configuration and metadata information_@return the insert string to be used;public String createInsertString(String... generatedKeyNames) {_		Set<String> keys = new LinkedHashSet<>(generatedKeyNames.length)__		for (String key : generatedKeyNames) {_			keys.add(key.toUpperCase())__		}_		StringBuilder insertStatement = new StringBuilder()__		insertStatement.append("INSERT INTO ")__		if (getSchemaName() != null) {_			insertStatement.append(getSchemaName())__			insertStatement.append(".")__		}_		insertStatement.append(getTableName())__		insertStatement.append(" (")__		int columnCount = 0__		for (String columnName : getTableColumns()) {_			if (!keys.contains(columnName.toUpperCase())) {_				columnCount++__				if (columnCount > 1) {_					insertStatement.append(", ")__				}_				insertStatement.append(columnName)__			}_		}_		insertStatement.append(") VALUES(")__		if (columnCount < 1) {_			if (this.generatedKeyColumnsUsed) {_				logger.info("Unable to locate non-key columns for table '" +_						getTableName() + "' so an empty insert statement is generated")__			}_			else {_				throw new InvalidDataAccessApiUsageException("Unable to locate columns for table '" +_						getTableName() + "' so an insert statement can't be generated")__			}_		}_		for (int i = 0_ i < columnCount_ i++) {_			if (i > 0) {_				insertStatement.append(", ")__			}_			insertStatement.append("?")__		}_		insertStatement.append(")")__		return insertStatement.toString()__	};build,the,insert,string,based,on,configuration,and,metadata,information,return,the,insert,string,to,be,used;public,string,create,insert,string,string,generated,key,names,set,string,keys,new,linked,hash,set,generated,key,names,length,for,string,key,generated,key,names,keys,add,key,to,upper,case,string,builder,insert,statement,new,string,builder,insert,statement,append,insert,into,if,get,schema,name,null,insert,statement,append,get,schema,name,insert,statement,append,insert,statement,append,get,table,name,insert,statement,append,int,column,count,0,for,string,column,name,get,table,columns,if,keys,contains,column,name,to,upper,case,column,count,if,column,count,1,insert,statement,append,insert,statement,append,column,name,insert,statement,append,values,if,column,count,1,if,this,generated,key,columns,used,logger,info,unable,to,locate,non,key,columns,for,table,get,table,name,so,an,empty,insert,statement,is,generated,else,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,columns,for,table,get,table,name,so,an,insert,statement,can,t,be,generated,for,int,i,0,i,column,count,i,if,i,0,insert,statement,append,insert,statement,append,insert,statement,append,return,insert,statement,to,string
TableMetaDataContext -> public String createInsertString(String... generatedKeyNames);1500448076;Build the insert string based on configuration and metadata information_@return the insert string to be used;public String createInsertString(String... generatedKeyNames) {_		Set<String> keys = new LinkedHashSet<>(generatedKeyNames.length)__		for (String key : generatedKeyNames) {_			keys.add(key.toUpperCase())__		}_		StringBuilder insertStatement = new StringBuilder()__		insertStatement.append("INSERT INTO ")__		if (getSchemaName() != null) {_			insertStatement.append(getSchemaName())__			insertStatement.append(".")__		}_		insertStatement.append(getTableName())__		insertStatement.append(" (")__		int columnCount = 0__		for (String columnName : getTableColumns()) {_			if (!keys.contains(columnName.toUpperCase())) {_				columnCount++__				if (columnCount > 1) {_					insertStatement.append(", ")__				}_				insertStatement.append(columnName)__			}_		}_		insertStatement.append(") VALUES(")__		if (columnCount < 1) {_			if (this.generatedKeyColumnsUsed) {_				logger.info("Unable to locate non-key columns for table '" +_						getTableName() + "' so an empty insert statement is generated")__			}_			else {_				throw new InvalidDataAccessApiUsageException("Unable to locate columns for table '" +_						getTableName() + "' so an insert statement can't be generated")__			}_		}_		for (int i = 0_ i < columnCount_ i++) {_			if (i > 0) {_				insertStatement.append(", ")__			}_			insertStatement.append("?")__		}_		insertStatement.append(")")__		return insertStatement.toString()__	};build,the,insert,string,based,on,configuration,and,metadata,information,return,the,insert,string,to,be,used;public,string,create,insert,string,string,generated,key,names,set,string,keys,new,linked,hash,set,generated,key,names,length,for,string,key,generated,key,names,keys,add,key,to,upper,case,string,builder,insert,statement,new,string,builder,insert,statement,append,insert,into,if,get,schema,name,null,insert,statement,append,get,schema,name,insert,statement,append,insert,statement,append,get,table,name,insert,statement,append,int,column,count,0,for,string,column,name,get,table,columns,if,keys,contains,column,name,to,upper,case,column,count,if,column,count,1,insert,statement,append,insert,statement,append,column,name,insert,statement,append,values,if,column,count,1,if,this,generated,key,columns,used,logger,info,unable,to,locate,non,key,columns,for,table,get,table,name,so,an,empty,insert,statement,is,generated,else,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,columns,for,table,get,table,name,so,an,insert,statement,can,t,be,generated,for,int,i,0,i,column,count,i,if,i,0,insert,statement,append,insert,statement,append,insert,statement,append,return,insert,statement,to,string
TableMetaDataContext -> public String createInsertString(String... generatedKeyNames);1500457438;Build the insert string based on configuration and metadata information_@return the insert string to be used;public String createInsertString(String... generatedKeyNames) {_		Set<String> keys = new LinkedHashSet<>(generatedKeyNames.length)__		for (String key : generatedKeyNames) {_			keys.add(key.toUpperCase())__		}_		StringBuilder insertStatement = new StringBuilder()__		insertStatement.append("INSERT INTO ")__		if (getSchemaName() != null) {_			insertStatement.append(getSchemaName())__			insertStatement.append(".")__		}_		insertStatement.append(getTableName())__		insertStatement.append(" (")__		int columnCount = 0__		for (String columnName : getTableColumns()) {_			if (!keys.contains(columnName.toUpperCase())) {_				columnCount++__				if (columnCount > 1) {_					insertStatement.append(", ")__				}_				insertStatement.append(columnName)__			}_		}_		insertStatement.append(") VALUES(")__		if (columnCount < 1) {_			if (this.generatedKeyColumnsUsed) {_				logger.info("Unable to locate non-key columns for table '" +_						getTableName() + "' so an empty insert statement is generated")__			}_			else {_				throw new InvalidDataAccessApiUsageException("Unable to locate columns for table '" +_						getTableName() + "' so an insert statement can't be generated")__			}_		}_		for (int i = 0_ i < columnCount_ i++) {_			if (i > 0) {_				insertStatement.append(", ")__			}_			insertStatement.append("?")__		}_		insertStatement.append(")")__		return insertStatement.toString()__	};build,the,insert,string,based,on,configuration,and,metadata,information,return,the,insert,string,to,be,used;public,string,create,insert,string,string,generated,key,names,set,string,keys,new,linked,hash,set,generated,key,names,length,for,string,key,generated,key,names,keys,add,key,to,upper,case,string,builder,insert,statement,new,string,builder,insert,statement,append,insert,into,if,get,schema,name,null,insert,statement,append,get,schema,name,insert,statement,append,insert,statement,append,get,table,name,insert,statement,append,int,column,count,0,for,string,column,name,get,table,columns,if,keys,contains,column,name,to,upper,case,column,count,if,column,count,1,insert,statement,append,insert,statement,append,column,name,insert,statement,append,values,if,column,count,1,if,this,generated,key,columns,used,logger,info,unable,to,locate,non,key,columns,for,table,get,table,name,so,an,empty,insert,statement,is,generated,else,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,columns,for,table,get,table,name,so,an,insert,statement,can,t,be,generated,for,int,i,0,i,column,count,i,if,i,0,insert,statement,append,insert,statement,append,insert,statement,append,return,insert,statement,to,string
TableMetaDataContext -> public String createInsertString(String... generatedKeyNames);1515532822;Build the insert string based on configuration and metadata information_@return the insert string to be used;public String createInsertString(String... generatedKeyNames) {_		Set<String> keys = new LinkedHashSet<>(generatedKeyNames.length)__		for (String key : generatedKeyNames) {_			keys.add(key.toUpperCase())__		}_		StringBuilder insertStatement = new StringBuilder()__		insertStatement.append("INSERT INTO ")__		if (getSchemaName() != null) {_			insertStatement.append(getSchemaName())__			insertStatement.append(".")__		}_		insertStatement.append(getTableName())__		insertStatement.append(" (")__		int columnCount = 0__		for (String columnName : getTableColumns()) {_			if (!keys.contains(columnName.toUpperCase())) {_				columnCount++__				if (columnCount > 1) {_					insertStatement.append(", ")__				}_				insertStatement.append(columnName)__			}_		}_		insertStatement.append(") VALUES(")__		if (columnCount < 1) {_			if (this.generatedKeyColumnsUsed) {_				logger.info("Unable to locate non-key columns for table '" +_						getTableName() + "' so an empty insert statement is generated")__			}_			else {_				throw new InvalidDataAccessApiUsageException("Unable to locate columns for table '" +_						getTableName() + "' so an insert statement can't be generated")__			}_		}_		for (int i = 0_ i < columnCount_ i++) {_			if (i > 0) {_				insertStatement.append(", ")__			}_			insertStatement.append("?")__		}_		insertStatement.append(")")__		return insertStatement.toString()__	};build,the,insert,string,based,on,configuration,and,metadata,information,return,the,insert,string,to,be,used;public,string,create,insert,string,string,generated,key,names,set,string,keys,new,linked,hash,set,generated,key,names,length,for,string,key,generated,key,names,keys,add,key,to,upper,case,string,builder,insert,statement,new,string,builder,insert,statement,append,insert,into,if,get,schema,name,null,insert,statement,append,get,schema,name,insert,statement,append,insert,statement,append,get,table,name,insert,statement,append,int,column,count,0,for,string,column,name,get,table,columns,if,keys,contains,column,name,to,upper,case,column,count,if,column,count,1,insert,statement,append,insert,statement,append,column,name,insert,statement,append,values,if,column,count,1,if,this,generated,key,columns,used,logger,info,unable,to,locate,non,key,columns,for,table,get,table,name,so,an,empty,insert,statement,is,generated,else,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,columns,for,table,get,table,name,so,an,insert,statement,can,t,be,generated,for,int,i,0,i,column,count,i,if,i,0,insert,statement,append,insert,statement,append,insert,statement,append,return,insert,statement,to,string
TableMetaDataContext -> public String createInsertString(String... generatedKeyNames);1516393837;Build the insert string based on configuration and metadata information_@return the insert string to be used;public String createInsertString(String... generatedKeyNames) {_		Set<String> keys = new LinkedHashSet<>(generatedKeyNames.length)__		for (String key : generatedKeyNames) {_			keys.add(key.toUpperCase())__		}_		StringBuilder insertStatement = new StringBuilder()__		insertStatement.append("INSERT INTO ")__		if (getSchemaName() != null) {_			insertStatement.append(getSchemaName())__			insertStatement.append(".")__		}_		insertStatement.append(getTableName())__		insertStatement.append(" (")__		int columnCount = 0__		for (String columnName : getTableColumns()) {_			if (!keys.contains(columnName.toUpperCase())) {_				columnCount++__				if (columnCount > 1) {_					insertStatement.append(", ")__				}_				insertStatement.append(columnName)__			}_		}_		insertStatement.append(") VALUES(")__		if (columnCount < 1) {_			if (this.generatedKeyColumnsUsed) {_				logger.info("Unable to locate non-key columns for table '" +_						getTableName() + "' so an empty insert statement is generated")__			}_			else {_				throw new InvalidDataAccessApiUsageException("Unable to locate columns for table '" +_						getTableName() + "' so an insert statement can't be generated")__			}_		}_		for (int i = 0_ i < columnCount_ i++) {_			if (i > 0) {_				insertStatement.append(", ")__			}_			insertStatement.append("?")__		}_		insertStatement.append(")")__		return insertStatement.toString()__	};build,the,insert,string,based,on,configuration,and,metadata,information,return,the,insert,string,to,be,used;public,string,create,insert,string,string,generated,key,names,set,string,keys,new,linked,hash,set,generated,key,names,length,for,string,key,generated,key,names,keys,add,key,to,upper,case,string,builder,insert,statement,new,string,builder,insert,statement,append,insert,into,if,get,schema,name,null,insert,statement,append,get,schema,name,insert,statement,append,insert,statement,append,get,table,name,insert,statement,append,int,column,count,0,for,string,column,name,get,table,columns,if,keys,contains,column,name,to,upper,case,column,count,if,column,count,1,insert,statement,append,insert,statement,append,column,name,insert,statement,append,values,if,column,count,1,if,this,generated,key,columns,used,logger,info,unable,to,locate,non,key,columns,for,table,get,table,name,so,an,empty,insert,statement,is,generated,else,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,columns,for,table,get,table,name,so,an,insert,statement,can,t,be,generated,for,int,i,0,i,column,count,i,if,i,0,insert,statement,append,insert,statement,append,insert,statement,append,return,insert,statement,to,string
TableMetaDataContext -> public String createInsertString(String... generatedKeyNames);1518167526;Build the insert string based on configuration and metadata information_@return the insert string to be used;public String createInsertString(String... generatedKeyNames) {_		Set<String> keys = new LinkedHashSet<>(generatedKeyNames.length)__		for (String key : generatedKeyNames) {_			keys.add(key.toUpperCase())__		}_		StringBuilder insertStatement = new StringBuilder()__		insertStatement.append("INSERT INTO ")__		if (getSchemaName() != null) {_			insertStatement.append(getSchemaName())__			insertStatement.append(".")__		}_		insertStatement.append(getTableName())__		insertStatement.append(" (")__		int columnCount = 0__		for (String columnName : getTableColumns()) {_			if (!keys.contains(columnName.toUpperCase())) {_				columnCount++__				if (columnCount > 1) {_					insertStatement.append(", ")__				}_				insertStatement.append(columnName)__			}_		}_		insertStatement.append(") VALUES(")__		if (columnCount < 1) {_			if (this.generatedKeyColumnsUsed) {_				logger.info("Unable to locate non-key columns for table '" +_						getTableName() + "' so an empty insert statement is generated")__			}_			else {_				throw new InvalidDataAccessApiUsageException("Unable to locate columns for table '" +_						getTableName() + "' so an insert statement can't be generated")__			}_		}_		for (int i = 0_ i < columnCount_ i++) {_			if (i > 0) {_				insertStatement.append(", ")__			}_			insertStatement.append("?")__		}_		insertStatement.append(")")__		return insertStatement.toString()__	};build,the,insert,string,based,on,configuration,and,metadata,information,return,the,insert,string,to,be,used;public,string,create,insert,string,string,generated,key,names,set,string,keys,new,linked,hash,set,generated,key,names,length,for,string,key,generated,key,names,keys,add,key,to,upper,case,string,builder,insert,statement,new,string,builder,insert,statement,append,insert,into,if,get,schema,name,null,insert,statement,append,get,schema,name,insert,statement,append,insert,statement,append,get,table,name,insert,statement,append,int,column,count,0,for,string,column,name,get,table,columns,if,keys,contains,column,name,to,upper,case,column,count,if,column,count,1,insert,statement,append,insert,statement,append,column,name,insert,statement,append,values,if,column,count,1,if,this,generated,key,columns,used,logger,info,unable,to,locate,non,key,columns,for,table,get,table,name,so,an,empty,insert,statement,is,generated,else,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,columns,for,table,get,table,name,so,an,insert,statement,can,t,be,generated,for,int,i,0,i,column,count,i,if,i,0,insert,statement,append,insert,statement,append,insert,statement,append,return,insert,statement,to,string
TableMetaDataContext -> public String createInsertString(String... generatedKeyNames);1521457491;Build the insert string based on configuration and meta-data information_@return the insert string to be used;public String createInsertString(String... generatedKeyNames) {_		Set<String> keys = new LinkedHashSet<>(generatedKeyNames.length)__		for (String key : generatedKeyNames) {_			keys.add(key.toUpperCase())__		}_		StringBuilder insertStatement = new StringBuilder()__		insertStatement.append("INSERT INTO ")__		if (getSchemaName() != null) {_			insertStatement.append(getSchemaName())__			insertStatement.append(".")__		}_		insertStatement.append(getTableName())__		insertStatement.append(" (")__		int columnCount = 0__		for (String columnName : getTableColumns()) {_			if (!keys.contains(columnName.toUpperCase())) {_				columnCount++__				if (columnCount > 1) {_					insertStatement.append(", ")__				}_				insertStatement.append(columnName)__			}_		}_		insertStatement.append(") VALUES(")__		if (columnCount < 1) {_			if (this.generatedKeyColumnsUsed) {_				logger.info("Unable to locate non-key columns for table '" +_						getTableName() + "' so an empty insert statement is generated")__			}_			else {_				throw new InvalidDataAccessApiUsageException("Unable to locate columns for table '" +_						getTableName() + "' so an insert statement can't be generated")__			}_		}_		for (int i = 0_ i < columnCount_ i++) {_			if (i > 0) {_				insertStatement.append(", ")__			}_			insertStatement.append("?")__		}_		insertStatement.append(")")__		return insertStatement.toString()__	};build,the,insert,string,based,on,configuration,and,meta,data,information,return,the,insert,string,to,be,used;public,string,create,insert,string,string,generated,key,names,set,string,keys,new,linked,hash,set,generated,key,names,length,for,string,key,generated,key,names,keys,add,key,to,upper,case,string,builder,insert,statement,new,string,builder,insert,statement,append,insert,into,if,get,schema,name,null,insert,statement,append,get,schema,name,insert,statement,append,insert,statement,append,get,table,name,insert,statement,append,int,column,count,0,for,string,column,name,get,table,columns,if,keys,contains,column,name,to,upper,case,column,count,if,column,count,1,insert,statement,append,insert,statement,append,column,name,insert,statement,append,values,if,column,count,1,if,this,generated,key,columns,used,logger,info,unable,to,locate,non,key,columns,for,table,get,table,name,so,an,empty,insert,statement,is,generated,else,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,columns,for,table,get,table,name,so,an,insert,statement,can,t,be,generated,for,int,i,0,i,column,count,i,if,i,0,insert,statement,append,insert,statement,append,insert,statement,append,return,insert,statement,to,string
TableMetaDataContext -> public String createInsertString(String... generatedKeyNames);1522103912;Build the insert string based on configuration and meta-data information_@return the insert string to be used;public String createInsertString(String... generatedKeyNames) {_		Set<String> keys = new LinkedHashSet<>(generatedKeyNames.length)__		for (String key : generatedKeyNames) {_			keys.add(key.toUpperCase())__		}_		StringBuilder insertStatement = new StringBuilder()__		insertStatement.append("INSERT INTO ")__		if (getSchemaName() != null) {_			insertStatement.append(getSchemaName())__			insertStatement.append(".")__		}_		insertStatement.append(getTableName())__		insertStatement.append(" (")__		int columnCount = 0__		for (String columnName : getTableColumns()) {_			if (!keys.contains(columnName.toUpperCase())) {_				columnCount++__				if (columnCount > 1) {_					insertStatement.append(", ")__				}_				insertStatement.append(columnName)__			}_		}_		insertStatement.append(") VALUES(")__		if (columnCount < 1) {_			if (this.generatedKeyColumnsUsed) {_				logger.info("Unable to locate non-key columns for table '" +_						getTableName() + "' so an empty insert statement is generated")__			}_			else {_				throw new InvalidDataAccessApiUsageException("Unable to locate columns for table '" +_						getTableName() + "' so an insert statement can't be generated")__			}_		}_		for (int i = 0_ i < columnCount_ i++) {_			if (i > 0) {_				insertStatement.append(", ")__			}_			insertStatement.append("?")__		}_		insertStatement.append(")")__		return insertStatement.toString()__	};build,the,insert,string,based,on,configuration,and,meta,data,information,return,the,insert,string,to,be,used;public,string,create,insert,string,string,generated,key,names,set,string,keys,new,linked,hash,set,generated,key,names,length,for,string,key,generated,key,names,keys,add,key,to,upper,case,string,builder,insert,statement,new,string,builder,insert,statement,append,insert,into,if,get,schema,name,null,insert,statement,append,get,schema,name,insert,statement,append,insert,statement,append,get,table,name,insert,statement,append,int,column,count,0,for,string,column,name,get,table,columns,if,keys,contains,column,name,to,upper,case,column,count,if,column,count,1,insert,statement,append,insert,statement,append,column,name,insert,statement,append,values,if,column,count,1,if,this,generated,key,columns,used,logger,info,unable,to,locate,non,key,columns,for,table,get,table,name,so,an,empty,insert,statement,is,generated,else,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,columns,for,table,get,table,name,so,an,insert,statement,can,t,be,generated,for,int,i,0,i,column,count,i,if,i,0,insert,statement,append,insert,statement,append,insert,statement,append,return,insert,statement,to,string
TableMetaDataContext -> public String createInsertString(String... generatedKeyNames);1528719423;Build the insert string based on configuration and meta-data information_@return the insert string to be used;public String createInsertString(String... generatedKeyNames) {_		Set<String> keys = new LinkedHashSet<>(generatedKeyNames.length)__		for (String key : generatedKeyNames) {_			keys.add(key.toUpperCase())__		}_		StringBuilder insertStatement = new StringBuilder()__		insertStatement.append("INSERT INTO ")__		if (getSchemaName() != null) {_			insertStatement.append(getSchemaName())__			insertStatement.append(".")__		}_		insertStatement.append(getTableName())__		insertStatement.append(" (")__		int columnCount = 0__		for (String columnName : getTableColumns()) {_			if (!keys.contains(columnName.toUpperCase())) {_				columnCount++__				if (columnCount > 1) {_					insertStatement.append(", ")__				}_				insertStatement.append(columnName)__			}_		}_		insertStatement.append(") VALUES(")__		if (columnCount < 1) {_			if (this.generatedKeyColumnsUsed) {_				logger.info("Unable to locate non-key columns for table '" +_						getTableName() + "' so an empty insert statement is generated")__			}_			else {_				throw new InvalidDataAccessApiUsageException("Unable to locate columns for table '" +_						getTableName() + "' so an insert statement can't be generated")__			}_		}_		for (int i = 0_ i < columnCount_ i++) {_			if (i > 0) {_				insertStatement.append(", ")__			}_			insertStatement.append("?")__		}_		insertStatement.append(")")__		return insertStatement.toString()__	};build,the,insert,string,based,on,configuration,and,meta,data,information,return,the,insert,string,to,be,used;public,string,create,insert,string,string,generated,key,names,set,string,keys,new,linked,hash,set,generated,key,names,length,for,string,key,generated,key,names,keys,add,key,to,upper,case,string,builder,insert,statement,new,string,builder,insert,statement,append,insert,into,if,get,schema,name,null,insert,statement,append,get,schema,name,insert,statement,append,insert,statement,append,get,table,name,insert,statement,append,int,column,count,0,for,string,column,name,get,table,columns,if,keys,contains,column,name,to,upper,case,column,count,if,column,count,1,insert,statement,append,insert,statement,append,column,name,insert,statement,append,values,if,column,count,1,if,this,generated,key,columns,used,logger,info,unable,to,locate,non,key,columns,for,table,get,table,name,so,an,empty,insert,statement,is,generated,else,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,columns,for,table,get,table,name,so,an,insert,statement,can,t,be,generated,for,int,i,0,i,column,count,i,if,i,0,insert,statement,append,insert,statement,append,insert,statement,append,return,insert,statement,to,string
TableMetaDataContext -> public String createInsertString(String... generatedKeyNames);1530174524;Build the insert string based on configuration and meta-data information._@return the insert string to be used;public String createInsertString(String... generatedKeyNames) {_		Set<String> keys = new LinkedHashSet<>(generatedKeyNames.length)__		for (String key : generatedKeyNames) {_			keys.add(key.toUpperCase())__		}_		StringBuilder insertStatement = new StringBuilder()__		insertStatement.append("INSERT INTO ")__		if (getSchemaName() != null) {_			insertStatement.append(getSchemaName())__			insertStatement.append(".")__		}_		insertStatement.append(getTableName())__		insertStatement.append(" (")__		int columnCount = 0__		for (String columnName : getTableColumns()) {_			if (!keys.contains(columnName.toUpperCase())) {_				columnCount++__				if (columnCount > 1) {_					insertStatement.append(", ")__				}_				insertStatement.append(columnName)__			}_		}_		insertStatement.append(") VALUES(")__		if (columnCount < 1) {_			if (this.generatedKeyColumnsUsed) {_				logger.info("Unable to locate non-key columns for table '" +_						getTableName() + "' so an empty insert statement is generated")__			}_			else {_				throw new InvalidDataAccessApiUsageException("Unable to locate columns for table '" +_						getTableName() + "' so an insert statement can't be generated")__			}_		}_		for (int i = 0_ i < columnCount_ i++) {_			if (i > 0) {_				insertStatement.append(", ")__			}_			insertStatement.append("?")__		}_		insertStatement.append(")")__		return insertStatement.toString()__	};build,the,insert,string,based,on,configuration,and,meta,data,information,return,the,insert,string,to,be,used;public,string,create,insert,string,string,generated,key,names,set,string,keys,new,linked,hash,set,generated,key,names,length,for,string,key,generated,key,names,keys,add,key,to,upper,case,string,builder,insert,statement,new,string,builder,insert,statement,append,insert,into,if,get,schema,name,null,insert,statement,append,get,schema,name,insert,statement,append,insert,statement,append,get,table,name,insert,statement,append,int,column,count,0,for,string,column,name,get,table,columns,if,keys,contains,column,name,to,upper,case,column,count,if,column,count,1,insert,statement,append,insert,statement,append,column,name,insert,statement,append,values,if,column,count,1,if,this,generated,key,columns,used,logger,info,unable,to,locate,non,key,columns,for,table,get,table,name,so,an,empty,insert,statement,is,generated,else,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,columns,for,table,get,table,name,so,an,insert,statement,can,t,be,generated,for,int,i,0,i,column,count,i,if,i,0,insert,statement,append,insert,statement,append,insert,statement,append,return,insert,statement,to,string
TableMetaDataContext -> public String createInsertString(String... generatedKeyNames);1532091916;Build the insert string based on configuration and meta-data information._@return the insert string to be used;public String createInsertString(String... generatedKeyNames) {_		Set<String> keys = new LinkedHashSet<>(generatedKeyNames.length)__		for (String key : generatedKeyNames) {_			keys.add(key.toUpperCase())__		}_		StringBuilder insertStatement = new StringBuilder()__		insertStatement.append("INSERT INTO ")__		if (getSchemaName() != null) {_			insertStatement.append(getSchemaName())__			insertStatement.append(".")__		}_		insertStatement.append(getTableName())__		insertStatement.append(" (")__		int columnCount = 0__		for (String columnName : getTableColumns()) {_			if (!keys.contains(columnName.toUpperCase())) {_				columnCount++__				if (columnCount > 1) {_					insertStatement.append(", ")__				}_				insertStatement.append(columnName)__			}_		}_		insertStatement.append(") VALUES(")__		if (columnCount < 1) {_			if (this.generatedKeyColumnsUsed) {_				if (logger.isDebugEnabled()) {_					logger.debug("Unable to locate non-key columns for table '" +_							getTableName() + "' so an empty insert statement is generated")__				}_			}_			else {_				throw new InvalidDataAccessApiUsageException("Unable to locate columns for table '" +_						getTableName() + "' so an insert statement can't be generated")__			}_		}_		for (int i = 0_ i < columnCount_ i++) {_			if (i > 0) {_				insertStatement.append(", ")__			}_			insertStatement.append("?")__		}_		insertStatement.append(")")__		return insertStatement.toString()__	};build,the,insert,string,based,on,configuration,and,meta,data,information,return,the,insert,string,to,be,used;public,string,create,insert,string,string,generated,key,names,set,string,keys,new,linked,hash,set,generated,key,names,length,for,string,key,generated,key,names,keys,add,key,to,upper,case,string,builder,insert,statement,new,string,builder,insert,statement,append,insert,into,if,get,schema,name,null,insert,statement,append,get,schema,name,insert,statement,append,insert,statement,append,get,table,name,insert,statement,append,int,column,count,0,for,string,column,name,get,table,columns,if,keys,contains,column,name,to,upper,case,column,count,if,column,count,1,insert,statement,append,insert,statement,append,column,name,insert,statement,append,values,if,column,count,1,if,this,generated,key,columns,used,if,logger,is,debug,enabled,logger,debug,unable,to,locate,non,key,columns,for,table,get,table,name,so,an,empty,insert,statement,is,generated,else,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,columns,for,table,get,table,name,so,an,insert,statement,can,t,be,generated,for,int,i,0,i,column,count,i,if,i,0,insert,statement,append,insert,statement,append,insert,statement,append,return,insert,statement,to,string
TableMetaDataContext -> public String createInsertString(String... generatedKeyNames);1550238935;Build the insert string based on configuration and meta-data information._@return the insert string to be used;public String createInsertString(String... generatedKeyNames) {_		Set<String> keys = new LinkedHashSet<>(generatedKeyNames.length)__		for (String key : generatedKeyNames) {_			keys.add(key.toUpperCase())__		}_		StringBuilder insertStatement = new StringBuilder()__		insertStatement.append("INSERT INTO ")__		if (getSchemaName() != null) {_			insertStatement.append(getSchemaName())__			insertStatement.append(".")__		}_		insertStatement.append(getTableName())__		insertStatement.append(" (")__		int columnCount = 0__		for (String columnName : getTableColumns()) {_			if (!keys.contains(columnName.toUpperCase())) {_				columnCount++__				if (columnCount > 1) {_					insertStatement.append(", ")__				}_				insertStatement.append(columnName)__			}_		}_		insertStatement.append(") VALUES(")__		if (columnCount < 1) {_			if (this.generatedKeyColumnsUsed) {_				if (logger.isDebugEnabled()) {_					logger.debug("Unable to locate non-key columns for table '" +_							getTableName() + "' so an empty insert statement is generated")__				}_			}_			else {_				throw new InvalidDataAccessApiUsageException("Unable to locate columns for table '" +_						getTableName() + "' so an insert statement can't be generated")__			}_		}_		String params = String.join(", ", Collections.nCopies(columnCount, "?"))__		insertStatement.append(params)__		insertStatement.append(")")__		return insertStatement.toString()__	};build,the,insert,string,based,on,configuration,and,meta,data,information,return,the,insert,string,to,be,used;public,string,create,insert,string,string,generated,key,names,set,string,keys,new,linked,hash,set,generated,key,names,length,for,string,key,generated,key,names,keys,add,key,to,upper,case,string,builder,insert,statement,new,string,builder,insert,statement,append,insert,into,if,get,schema,name,null,insert,statement,append,get,schema,name,insert,statement,append,insert,statement,append,get,table,name,insert,statement,append,int,column,count,0,for,string,column,name,get,table,columns,if,keys,contains,column,name,to,upper,case,column,count,if,column,count,1,insert,statement,append,insert,statement,append,column,name,insert,statement,append,values,if,column,count,1,if,this,generated,key,columns,used,if,logger,is,debug,enabled,logger,debug,unable,to,locate,non,key,columns,for,table,get,table,name,so,an,empty,insert,statement,is,generated,else,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,columns,for,table,get,table,name,so,an,insert,statement,can,t,be,generated,string,params,string,join,collections,n,copies,column,count,insert,statement,append,params,insert,statement,append,return,insert,statement,to,string
TableMetaDataContext -> @Nullable 	public String getSimpleQueryForGetGeneratedKey(String tableName, String keyColumnName);1521457491;Does this database support a simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported:_{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;@Nullable_	public String getSimpleQueryForGetGeneratedKey(String tableName, String keyColumnName) {_		return obtainMetaDataProvider().getSimpleQueryForGetGeneratedKey(tableName, keyColumnName)__	};does,this,database,support,a,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys;nullable,public,string,get,simple,query,for,get,generated,key,string,table,name,string,key,column,name,return,obtain,meta,data,provider,get,simple,query,for,get,generated,key,table,name,key,column,name
TableMetaDataContext -> @Nullable 	public String getSimpleQueryForGetGeneratedKey(String tableName, String keyColumnName);1522103912;Does this database support a simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported:_{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;@Nullable_	public String getSimpleQueryForGetGeneratedKey(String tableName, String keyColumnName) {_		return obtainMetaDataProvider().getSimpleQueryForGetGeneratedKey(tableName, keyColumnName)__	};does,this,database,support,a,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys;nullable,public,string,get,simple,query,for,get,generated,key,string,table,name,string,key,column,name,return,obtain,meta,data,provider,get,simple,query,for,get,generated,key,table,name,key,column,name
TableMetaDataContext -> @Nullable 	public String getSimpleQueryForGetGeneratedKey(String tableName, String keyColumnName);1528719423;Does this database support a simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported:_{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;@Nullable_	public String getSimpleQueryForGetGeneratedKey(String tableName, String keyColumnName) {_		return obtainMetaDataProvider().getSimpleQueryForGetGeneratedKey(tableName, keyColumnName)__	};does,this,database,support,a,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys;nullable,public,string,get,simple,query,for,get,generated,key,string,table,name,string,key,column,name,return,obtain,meta,data,provider,get,simple,query,for,get,generated,key,table,name,key,column,name
TableMetaDataContext -> @Nullable 	public String getSimpleQueryForGetGeneratedKey(String tableName, String keyColumnName);1530174524;Does this database support a simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported:_{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;@Nullable_	public String getSimpleQueryForGetGeneratedKey(String tableName, String keyColumnName) {_		return obtainMetaDataProvider().getSimpleQueryForGetGeneratedKey(tableName, keyColumnName)__	};does,this,database,support,a,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys;nullable,public,string,get,simple,query,for,get,generated,key,string,table,name,string,key,column,name,return,obtain,meta,data,provider,get,simple,query,for,get,generated,key,table,name,key,column,name
TableMetaDataContext -> @Nullable 	public String getSimpleQueryForGetGeneratedKey(String tableName, String keyColumnName);1532091916;Does this database support a simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported:_{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;@Nullable_	public String getSimpleQueryForGetGeneratedKey(String tableName, String keyColumnName) {_		return obtainMetaDataProvider().getSimpleQueryForGetGeneratedKey(tableName, keyColumnName)__	};does,this,database,support,a,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys;nullable,public,string,get,simple,query,for,get,generated,key,string,table,name,string,key,column,name,return,obtain,meta,data,provider,get,simple,query,for,get,generated,key,table,name,key,column,name
TableMetaDataContext -> @Nullable 	public String getSimpleQueryForGetGeneratedKey(String tableName, String keyColumnName);1550238935;Does this database support a simple query to retrieve generated keys_when the JDBC 3.0 feature is not supported:_{@link java.sql.DatabaseMetaData#supportsGetGeneratedKeys()}?;@Nullable_	public String getSimpleQueryForGetGeneratedKey(String tableName, String keyColumnName) {_		return obtainMetaDataProvider().getSimpleQueryForGetGeneratedKey(tableName, keyColumnName)__	};does,this,database,support,a,simple,query,to,retrieve,generated,keys,when,the,jdbc,3,0,feature,is,not,supported,link,java,sql,database,meta,data,supports,get,generated,keys;nullable,public,string,get,simple,query,for,get,generated,key,string,table,name,string,key,column,name,return,obtain,meta,data,provider,get,simple,query,for,get,generated,key,table,name,key,column,name
TableMetaDataContext -> public String createInsertString(String[] generatedKeyNames);1328020251;Build the insert string based on configuration and metadata information_@return the insert string to be used;public String createInsertString(String[] generatedKeyNames) {_		HashSet<String> keys = new HashSet<String>(generatedKeyNames.length)__		for (String key : generatedKeyNames) {_			keys.add(key.toUpperCase())__		}_		StringBuilder insertStatement = new StringBuilder()__		insertStatement.append("INSERT INTO ")__		if (this.getSchemaName() != null) {_			insertStatement.append(this.getSchemaName())__			insertStatement.append(".")__		}_		insertStatement.append(this.getTableName())__		insertStatement.append(" (")__		int columnCount = 0__		for (String columnName : this.getTableColumns()) {_			if (!keys.contains(columnName.toUpperCase())) {_				columnCount++__				if (columnCount > 1) {_					insertStatement.append(", ")__				}_				insertStatement.append(columnName)__			}_		}_		insertStatement.append(") VALUES(")__		if (columnCount < 1) {_			if (this.generatedKeyColumnsUsed) {_				logger.info("Unable to locate non-key columns for table '" +_						this.getTableName() + "' so an empty insert statement is generated")__			}_			else {_				throw new InvalidDataAccessApiUsageException("Unable to locate columns for table '" +_						this.getTableName() + "' so an insert statement can't be generated")__			}_		}_		for (int i = 0_ i < columnCount_ i++) {_			if (i > 0) {_				insertStatement.append(", ")__			}_			insertStatement.append("?")__		}_		insertStatement.append(")")__		return insertStatement.toString()__	};build,the,insert,string,based,on,configuration,and,metadata,information,return,the,insert,string,to,be,used;public,string,create,insert,string,string,generated,key,names,hash,set,string,keys,new,hash,set,string,generated,key,names,length,for,string,key,generated,key,names,keys,add,key,to,upper,case,string,builder,insert,statement,new,string,builder,insert,statement,append,insert,into,if,this,get,schema,name,null,insert,statement,append,this,get,schema,name,insert,statement,append,insert,statement,append,this,get,table,name,insert,statement,append,int,column,count,0,for,string,column,name,this,get,table,columns,if,keys,contains,column,name,to,upper,case,column,count,if,column,count,1,insert,statement,append,insert,statement,append,column,name,insert,statement,append,values,if,column,count,1,if,this,generated,key,columns,used,logger,info,unable,to,locate,non,key,columns,for,table,this,get,table,name,so,an,empty,insert,statement,is,generated,else,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,columns,for,table,this,get,table,name,so,an,insert,statement,can,t,be,generated,for,int,i,0,i,column,count,i,if,i,0,insert,statement,append,insert,statement,append,insert,statement,append,return,insert,statement,to,string
TableMetaDataContext -> public String createInsertString(String[] generatedKeyNames);1385412762;Build the insert string based on configuration and metadata information_@return the insert string to be used;public String createInsertString(String[] generatedKeyNames) {_		HashSet<String> keys = new HashSet<String>(generatedKeyNames.length)__		for (String key : generatedKeyNames) {_			keys.add(key.toUpperCase())__		}_		StringBuilder insertStatement = new StringBuilder()__		insertStatement.append("INSERT INTO ")__		if (this.getSchemaName() != null) {_			insertStatement.append(this.getSchemaName())__			insertStatement.append(".")__		}_		insertStatement.append(this.getTableName())__		insertStatement.append(" (")__		int columnCount = 0__		for (String columnName : this.getTableColumns()) {_			if (!keys.contains(columnName.toUpperCase())) {_				columnCount++__				if (columnCount > 1) {_					insertStatement.append(", ")__				}_				insertStatement.append(columnName)__			}_		}_		insertStatement.append(") VALUES(")__		if (columnCount < 1) {_			if (this.generatedKeyColumnsUsed) {_				logger.info("Unable to locate non-key columns for table '" +_						this.getTableName() + "' so an empty insert statement is generated")__			}_			else {_				throw new InvalidDataAccessApiUsageException("Unable to locate columns for table '" +_						this.getTableName() + "' so an insert statement can't be generated")__			}_		}_		for (int i = 0_ i < columnCount_ i++) {_			if (i > 0) {_				insertStatement.append(", ")__			}_			insertStatement.append("?")__		}_		insertStatement.append(")")__		return insertStatement.toString()__	};build,the,insert,string,based,on,configuration,and,metadata,information,return,the,insert,string,to,be,used;public,string,create,insert,string,string,generated,key,names,hash,set,string,keys,new,hash,set,string,generated,key,names,length,for,string,key,generated,key,names,keys,add,key,to,upper,case,string,builder,insert,statement,new,string,builder,insert,statement,append,insert,into,if,this,get,schema,name,null,insert,statement,append,this,get,schema,name,insert,statement,append,insert,statement,append,this,get,table,name,insert,statement,append,int,column,count,0,for,string,column,name,this,get,table,columns,if,keys,contains,column,name,to,upper,case,column,count,if,column,count,1,insert,statement,append,insert,statement,append,column,name,insert,statement,append,values,if,column,count,1,if,this,generated,key,columns,used,logger,info,unable,to,locate,non,key,columns,for,table,this,get,table,name,so,an,empty,insert,statement,is,generated,else,throw,new,invalid,data,access,api,usage,exception,unable,to,locate,columns,for,table,this,get,table,name,so,an,insert,statement,can,t,be,generated,for,int,i,0,i,column,count,i,if,i,0,insert,statement,append,insert,statement,append,insert,statement,append,return,insert,statement,to,string
TableMetaDataContext -> public List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1328020251;Match the provided column names and values with the list of columns used._@param parameterSource the parameter names and values;public List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		List<Object> values = new ArrayList<Object>()__		_		_		Map caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)__		for (String column : this.tableColumns) {_			if (parameterSource.hasValue(column)) {_				values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, column))__			}_			else {_				String lowerCaseName = column.toLowerCase()__				if (parameterSource.hasValue(lowerCaseName)) {_					values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__				}_				else {_					String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(column)__					if (parameterSource.hasValue(propertyName)) {_						values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__					}_					else {_						if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_							values.add(_									SqlParameterSourceUtils.getTypedValue(parameterSource,_											(String) caseInsensitiveParameterNames.get(lowerCaseName)))__						}_						else {_							values.add(null)__						}_					}_				}_			}_		}_		return values__	};match,the,provided,column,names,and,values,with,the,list,of,columns,used,param,parameter,source,the,parameter,names,and,values;public,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,list,object,values,new,array,list,object,map,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,for,string,column,this,table,columns,if,parameter,source,has,value,column,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,column,else,string,lower,case,name,column,to,lower,case,if,parameter,source,has,value,lower,case,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,column,if,parameter,source,has,value,property,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,string,case,insensitive,parameter,names,get,lower,case,name,else,values,add,null,return,values
TableMetaDataContext -> public List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1385412762;Match the provided column names and values with the list of columns used._@param parameterSource the parameter names and values;public List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		List<Object> values = new ArrayList<Object>()__		_		_		Map<String, String> caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)__		for (String column : this.tableColumns) {_			if (parameterSource.hasValue(column)) {_				values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, column))__			}_			else {_				String lowerCaseName = column.toLowerCase()__				if (parameterSource.hasValue(lowerCaseName)) {_					values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__				}_				else {_					String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(column)__					if (parameterSource.hasValue(propertyName)) {_						values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__					}_					else {_						if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_							values.add(_									SqlParameterSourceUtils.getTypedValue(parameterSource,_											caseInsensitiveParameterNames.get(lowerCaseName)))__						}_						else {_							values.add(null)__						}_					}_				}_			}_		}_		return values__	};match,the,provided,column,names,and,values,with,the,list,of,columns,used,param,parameter,source,the,parameter,names,and,values;public,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,list,object,values,new,array,list,object,map,string,string,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,for,string,column,this,table,columns,if,parameter,source,has,value,column,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,column,else,string,lower,case,name,column,to,lower,case,if,parameter,source,has,value,lower,case,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,column,if,parameter,source,has,value,property,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,case,insensitive,parameter,names,get,lower,case,name,else,values,add,null,return,values
TableMetaDataContext -> public List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1407511029;Match the provided column names and values with the list of columns used._@param parameterSource the parameter names and values;public List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		List<Object> values = new ArrayList<Object>()__		_		_		Map<String, String> caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)__		for (String column : this.tableColumns) {_			if (parameterSource.hasValue(column)) {_				values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, column))__			}_			else {_				String lowerCaseName = column.toLowerCase()__				if (parameterSource.hasValue(lowerCaseName)) {_					values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__				}_				else {_					String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(column)__					if (parameterSource.hasValue(propertyName)) {_						values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__					}_					else {_						if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_							values.add(_									SqlParameterSourceUtils.getTypedValue(parameterSource,_											caseInsensitiveParameterNames.get(lowerCaseName)))__						}_						else {_							values.add(null)__						}_					}_				}_			}_		}_		return values__	};match,the,provided,column,names,and,values,with,the,list,of,columns,used,param,parameter,source,the,parameter,names,and,values;public,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,list,object,values,new,array,list,object,map,string,string,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,for,string,column,this,table,columns,if,parameter,source,has,value,column,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,column,else,string,lower,case,name,column,to,lower,case,if,parameter,source,has,value,lower,case,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,column,if,parameter,source,has,value,property,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,case,insensitive,parameter,names,get,lower,case,name,else,values,add,null,return,values
TableMetaDataContext -> public List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1416833949;Match the provided column names and values with the list of columns used._@param parameterSource the parameter names and values;public List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		List<Object> values = new ArrayList<Object>()__		_		_		Map<String, String> caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)__		for (String column : this.tableColumns) {_			if (parameterSource.hasValue(column)) {_				values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, column))__			}_			else {_				String lowerCaseName = column.toLowerCase()__				if (parameterSource.hasValue(lowerCaseName)) {_					values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__				}_				else {_					String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(column)__					if (parameterSource.hasValue(propertyName)) {_						values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__					}_					else {_						if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_							values.add(_									SqlParameterSourceUtils.getTypedValue(parameterSource,_											caseInsensitiveParameterNames.get(lowerCaseName)))__						}_						else {_							values.add(null)__						}_					}_				}_			}_		}_		return values__	};match,the,provided,column,names,and,values,with,the,list,of,columns,used,param,parameter,source,the,parameter,names,and,values;public,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,list,object,values,new,array,list,object,map,string,string,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,for,string,column,this,table,columns,if,parameter,source,has,value,column,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,column,else,string,lower,case,name,column,to,lower,case,if,parameter,source,has,value,lower,case,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,column,if,parameter,source,has,value,property,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,case,insensitive,parameter,names,get,lower,case,name,else,values,add,null,return,values
TableMetaDataContext -> public List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1429214043;Match the provided column names and values with the list of columns used._@param parameterSource the parameter names and values;public List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		List<Object> values = new ArrayList<Object>()__		_		_		Map<String, String> caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)__		for (String column : this.tableColumns) {_			if (parameterSource.hasValue(column)) {_				values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, column))__			}_			else {_				String lowerCaseName = column.toLowerCase()__				if (parameterSource.hasValue(lowerCaseName)) {_					values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__				}_				else {_					String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(column)__					if (parameterSource.hasValue(propertyName)) {_						values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__					}_					else {_						if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_							values.add(_									SqlParameterSourceUtils.getTypedValue(parameterSource,_											caseInsensitiveParameterNames.get(lowerCaseName)))__						}_						else {_							values.add(null)__						}_					}_				}_			}_		}_		return values__	};match,the,provided,column,names,and,values,with,the,list,of,columns,used,param,parameter,source,the,parameter,names,and,values;public,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,list,object,values,new,array,list,object,map,string,string,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,for,string,column,this,table,columns,if,parameter,source,has,value,column,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,column,else,string,lower,case,name,column,to,lower,case,if,parameter,source,has,value,lower,case,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,column,if,parameter,source,has,value,property,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,case,insensitive,parameter,names,get,lower,case,name,else,values,add,null,return,values
TableMetaDataContext -> public List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1464241861;Match the provided column names and values with the list of columns used._@param parameterSource the parameter names and values;public List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		List<Object> values = new ArrayList<Object>()__		_		_		Map<String, String> caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)__		for (String column : this.tableColumns) {_			if (parameterSource.hasValue(column)) {_				values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, column))__			}_			else {_				String lowerCaseName = column.toLowerCase()__				if (parameterSource.hasValue(lowerCaseName)) {_					values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__				}_				else {_					String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(column)__					if (parameterSource.hasValue(propertyName)) {_						values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__					}_					else {_						if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_							values.add(_									SqlParameterSourceUtils.getTypedValue(parameterSource,_											caseInsensitiveParameterNames.get(lowerCaseName)))__						}_						else {_							values.add(null)__						}_					}_				}_			}_		}_		return values__	};match,the,provided,column,names,and,values,with,the,list,of,columns,used,param,parameter,source,the,parameter,names,and,values;public,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,list,object,values,new,array,list,object,map,string,string,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,for,string,column,this,table,columns,if,parameter,source,has,value,column,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,column,else,string,lower,case,name,column,to,lower,case,if,parameter,source,has,value,lower,case,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,column,if,parameter,source,has,value,property,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,case,insensitive,parameter,names,get,lower,case,name,else,values,add,null,return,values
TableMetaDataContext -> public List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1467730834;Match the provided column names and values with the list of columns used._@param parameterSource the parameter names and values;public List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		List<Object> values = new ArrayList<>()__		_		_		Map<String, String> caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)__		for (String column : this.tableColumns) {_			if (parameterSource.hasValue(column)) {_				values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, column))__			}_			else {_				String lowerCaseName = column.toLowerCase()__				if (parameterSource.hasValue(lowerCaseName)) {_					values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__				}_				else {_					String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(column)__					if (parameterSource.hasValue(propertyName)) {_						values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__					}_					else {_						if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_							values.add(_									SqlParameterSourceUtils.getTypedValue(parameterSource,_											caseInsensitiveParameterNames.get(lowerCaseName)))__						}_						else {_							values.add(null)__						}_					}_				}_			}_		}_		return values__	};match,the,provided,column,names,and,values,with,the,list,of,columns,used,param,parameter,source,the,parameter,names,and,values;public,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,list,object,values,new,array,list,map,string,string,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,for,string,column,this,table,columns,if,parameter,source,has,value,column,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,column,else,string,lower,case,name,column,to,lower,case,if,parameter,source,has,value,lower,case,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,column,if,parameter,source,has,value,property,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,case,insensitive,parameter,names,get,lower,case,name,else,values,add,null,return,values
TableMetaDataContext -> public List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1487178248;Match the provided column names and values with the list of columns used._@param parameterSource the parameter names and values;public List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		List<Object> values = new ArrayList<>()__		_		_		Map<String, String> caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)__		for (String column : this.tableColumns) {_			if (parameterSource.hasValue(column)) {_				values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, column))__			}_			else {_				String lowerCaseName = column.toLowerCase()__				if (parameterSource.hasValue(lowerCaseName)) {_					values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__				}_				else {_					String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(column)__					if (parameterSource.hasValue(propertyName)) {_						values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__					}_					else {_						if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_							values.add(_									SqlParameterSourceUtils.getTypedValue(parameterSource,_											caseInsensitiveParameterNames.get(lowerCaseName)))__						}_						else {_							values.add(null)__						}_					}_				}_			}_		}_		return values__	};match,the,provided,column,names,and,values,with,the,list,of,columns,used,param,parameter,source,the,parameter,names,and,values;public,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,list,object,values,new,array,list,map,string,string,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,for,string,column,this,table,columns,if,parameter,source,has,value,column,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,column,else,string,lower,case,name,column,to,lower,case,if,parameter,source,has,value,lower,case,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,column,if,parameter,source,has,value,property,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,case,insensitive,parameter,names,get,lower,case,name,else,values,add,null,return,values
TableMetaDataContext -> public List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1496837955;Match the provided column names and values with the list of columns used._@param parameterSource the parameter names and values;public List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		List<Object> values = new ArrayList<>()__		_		_		Map<String, String> caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)__		for (String column : this.tableColumns) {_			if (parameterSource.hasValue(column)) {_				values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, column))__			}_			else {_				String lowerCaseName = column.toLowerCase()__				if (parameterSource.hasValue(lowerCaseName)) {_					values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__				}_				else {_					String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(column)__					if (parameterSource.hasValue(propertyName)) {_						values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__					}_					else {_						if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_							values.add(_									SqlParameterSourceUtils.getTypedValue(parameterSource,_											caseInsensitiveParameterNames.get(lowerCaseName)))__						}_						else {_							values.add(null)__						}_					}_				}_			}_		}_		return values__	};match,the,provided,column,names,and,values,with,the,list,of,columns,used,param,parameter,source,the,parameter,names,and,values;public,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,list,object,values,new,array,list,map,string,string,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,for,string,column,this,table,columns,if,parameter,source,has,value,column,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,column,else,string,lower,case,name,column,to,lower,case,if,parameter,source,has,value,lower,case,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,column,if,parameter,source,has,value,property,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,case,insensitive,parameter,names,get,lower,case,name,else,values,add,null,return,values
TableMetaDataContext -> public List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1500448076;Match the provided column names and values with the list of columns used._@param parameterSource the parameter names and values;public List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		List<Object> values = new ArrayList<>()__		_		_		Map<String, String> caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)__		for (String column : this.tableColumns) {_			if (parameterSource.hasValue(column)) {_				values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, column))__			}_			else {_				String lowerCaseName = column.toLowerCase()__				if (parameterSource.hasValue(lowerCaseName)) {_					values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__				}_				else {_					String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(column)__					if (parameterSource.hasValue(propertyName)) {_						values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__					}_					else {_						if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_							values.add(_									SqlParameterSourceUtils.getTypedValue(parameterSource,_											caseInsensitiveParameterNames.get(lowerCaseName)))__						}_						else {_							values.add(null)__						}_					}_				}_			}_		}_		return values__	};match,the,provided,column,names,and,values,with,the,list,of,columns,used,param,parameter,source,the,parameter,names,and,values;public,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,list,object,values,new,array,list,map,string,string,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,for,string,column,this,table,columns,if,parameter,source,has,value,column,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,column,else,string,lower,case,name,column,to,lower,case,if,parameter,source,has,value,lower,case,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,column,if,parameter,source,has,value,property,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,case,insensitive,parameter,names,get,lower,case,name,else,values,add,null,return,values
TableMetaDataContext -> public List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1500457438;Match the provided column names and values with the list of columns used._@param parameterSource the parameter names and values;public List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		List<Object> values = new ArrayList<>()__		_		_		Map<String, String> caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)__		for (String column : this.tableColumns) {_			if (parameterSource.hasValue(column)) {_				values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, column))__			}_			else {_				String lowerCaseName = column.toLowerCase()__				if (parameterSource.hasValue(lowerCaseName)) {_					values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__				}_				else {_					String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(column)__					if (parameterSource.hasValue(propertyName)) {_						values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__					}_					else {_						if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_							values.add(_									SqlParameterSourceUtils.getTypedValue(parameterSource,_											caseInsensitiveParameterNames.get(lowerCaseName)))__						}_						else {_							values.add(null)__						}_					}_				}_			}_		}_		return values__	};match,the,provided,column,names,and,values,with,the,list,of,columns,used,param,parameter,source,the,parameter,names,and,values;public,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,list,object,values,new,array,list,map,string,string,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,for,string,column,this,table,columns,if,parameter,source,has,value,column,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,column,else,string,lower,case,name,column,to,lower,case,if,parameter,source,has,value,lower,case,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,column,if,parameter,source,has,value,property,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,case,insensitive,parameter,names,get,lower,case,name,else,values,add,null,return,values
TableMetaDataContext -> public List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1515532822;Match the provided column names and values with the list of columns used._@param parameterSource the parameter names and values;public List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		List<Object> values = new ArrayList<>()__		_		_		Map<String, String> caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)__		for (String column : this.tableColumns) {_			if (parameterSource.hasValue(column)) {_				values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, column))__			}_			else {_				String lowerCaseName = column.toLowerCase()__				if (parameterSource.hasValue(lowerCaseName)) {_					values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__				}_				else {_					String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(column)__					if (parameterSource.hasValue(propertyName)) {_						values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__					}_					else {_						if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_							values.add(SqlParameterSourceUtils.getTypedValue(_									parameterSource, caseInsensitiveParameterNames.get(lowerCaseName)))__						}_						else {_							values.add(null)__						}_					}_				}_			}_		}_		return values__	};match,the,provided,column,names,and,values,with,the,list,of,columns,used,param,parameter,source,the,parameter,names,and,values;public,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,list,object,values,new,array,list,map,string,string,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,for,string,column,this,table,columns,if,parameter,source,has,value,column,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,column,else,string,lower,case,name,column,to,lower,case,if,parameter,source,has,value,lower,case,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,column,if,parameter,source,has,value,property,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,case,insensitive,parameter,names,get,lower,case,name,else,values,add,null,return,values
TableMetaDataContext -> public List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1516393837;Match the provided column names and values with the list of columns used._@param parameterSource the parameter names and values;public List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		List<Object> values = new ArrayList<>()__		_		_		Map<String, String> caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)__		for (String column : this.tableColumns) {_			if (parameterSource.hasValue(column)) {_				values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, column))__			}_			else {_				String lowerCaseName = column.toLowerCase()__				if (parameterSource.hasValue(lowerCaseName)) {_					values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__				}_				else {_					String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(column)__					if (parameterSource.hasValue(propertyName)) {_						values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__					}_					else {_						if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_							values.add(SqlParameterSourceUtils.getTypedValue(_									parameterSource, caseInsensitiveParameterNames.get(lowerCaseName)))__						}_						else {_							values.add(null)__						}_					}_				}_			}_		}_		return values__	};match,the,provided,column,names,and,values,with,the,list,of,columns,used,param,parameter,source,the,parameter,names,and,values;public,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,list,object,values,new,array,list,map,string,string,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,for,string,column,this,table,columns,if,parameter,source,has,value,column,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,column,else,string,lower,case,name,column,to,lower,case,if,parameter,source,has,value,lower,case,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,column,if,parameter,source,has,value,property,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,case,insensitive,parameter,names,get,lower,case,name,else,values,add,null,return,values
TableMetaDataContext -> public List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1518167526;Match the provided column names and values with the list of columns used._@param parameterSource the parameter names and values;public List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		List<Object> values = new ArrayList<>()__		_		_		Map<String, String> caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)__		for (String column : this.tableColumns) {_			if (parameterSource.hasValue(column)) {_				values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, column))__			}_			else {_				String lowerCaseName = column.toLowerCase()__				if (parameterSource.hasValue(lowerCaseName)) {_					values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__				}_				else {_					String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(column)__					if (parameterSource.hasValue(propertyName)) {_						values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__					}_					else {_						if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_							values.add(SqlParameterSourceUtils.getTypedValue(_									parameterSource, caseInsensitiveParameterNames.get(lowerCaseName)))__						}_						else {_							values.add(null)__						}_					}_				}_			}_		}_		return values__	};match,the,provided,column,names,and,values,with,the,list,of,columns,used,param,parameter,source,the,parameter,names,and,values;public,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,list,object,values,new,array,list,map,string,string,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,for,string,column,this,table,columns,if,parameter,source,has,value,column,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,column,else,string,lower,case,name,column,to,lower,case,if,parameter,source,has,value,lower,case,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,column,if,parameter,source,has,value,property,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,case,insensitive,parameter,names,get,lower,case,name,else,values,add,null,return,values
TableMetaDataContext -> public List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1521457491;Match the provided column names and values with the list of columns used._@param parameterSource the parameter names and values;public List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		List<Object> values = new ArrayList<>()__		_		_		Map<String, String> caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)__		for (String column : this.tableColumns) {_			if (parameterSource.hasValue(column)) {_				values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, column))__			}_			else {_				String lowerCaseName = column.toLowerCase()__				if (parameterSource.hasValue(lowerCaseName)) {_					values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__				}_				else {_					String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(column)__					if (parameterSource.hasValue(propertyName)) {_						values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__					}_					else {_						if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_							values.add(SqlParameterSourceUtils.getTypedValue(_									parameterSource, caseInsensitiveParameterNames.get(lowerCaseName)))__						}_						else {_							values.add(null)__						}_					}_				}_			}_		}_		return values__	};match,the,provided,column,names,and,values,with,the,list,of,columns,used,param,parameter,source,the,parameter,names,and,values;public,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,list,object,values,new,array,list,map,string,string,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,for,string,column,this,table,columns,if,parameter,source,has,value,column,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,column,else,string,lower,case,name,column,to,lower,case,if,parameter,source,has,value,lower,case,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,column,if,parameter,source,has,value,property,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,case,insensitive,parameter,names,get,lower,case,name,else,values,add,null,return,values
TableMetaDataContext -> public List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1522103912;Match the provided column names and values with the list of columns used._@param parameterSource the parameter names and values;public List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		List<Object> values = new ArrayList<>()__		_		_		Map<String, String> caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)__		for (String column : this.tableColumns) {_			if (parameterSource.hasValue(column)) {_				values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, column))__			}_			else {_				String lowerCaseName = column.toLowerCase()__				if (parameterSource.hasValue(lowerCaseName)) {_					values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__				}_				else {_					String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(column)__					if (parameterSource.hasValue(propertyName)) {_						values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__					}_					else {_						if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_							values.add(SqlParameterSourceUtils.getTypedValue(_									parameterSource, caseInsensitiveParameterNames.get(lowerCaseName)))__						}_						else {_							values.add(null)__						}_					}_				}_			}_		}_		return values__	};match,the,provided,column,names,and,values,with,the,list,of,columns,used,param,parameter,source,the,parameter,names,and,values;public,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,list,object,values,new,array,list,map,string,string,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,for,string,column,this,table,columns,if,parameter,source,has,value,column,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,column,else,string,lower,case,name,column,to,lower,case,if,parameter,source,has,value,lower,case,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,column,if,parameter,source,has,value,property,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,case,insensitive,parameter,names,get,lower,case,name,else,values,add,null,return,values
TableMetaDataContext -> public List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1528719423;Match the provided column names and values with the list of columns used._@param parameterSource the parameter names and values;public List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		List<Object> values = new ArrayList<>()__		_		_		Map<String, String> caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)__		for (String column : this.tableColumns) {_			if (parameterSource.hasValue(column)) {_				values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, column))__			}_			else {_				String lowerCaseName = column.toLowerCase()__				if (parameterSource.hasValue(lowerCaseName)) {_					values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__				}_				else {_					String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(column)__					if (parameterSource.hasValue(propertyName)) {_						values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__					}_					else {_						if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_							values.add(SqlParameterSourceUtils.getTypedValue(_									parameterSource, caseInsensitiveParameterNames.get(lowerCaseName)))__						}_						else {_							values.add(null)__						}_					}_				}_			}_		}_		return values__	};match,the,provided,column,names,and,values,with,the,list,of,columns,used,param,parameter,source,the,parameter,names,and,values;public,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,list,object,values,new,array,list,map,string,string,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,for,string,column,this,table,columns,if,parameter,source,has,value,column,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,column,else,string,lower,case,name,column,to,lower,case,if,parameter,source,has,value,lower,case,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,column,if,parameter,source,has,value,property,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,case,insensitive,parameter,names,get,lower,case,name,else,values,add,null,return,values
TableMetaDataContext -> public List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1530174524;Match the provided column names and values with the list of columns used._@param parameterSource the parameter names and values;public List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		List<Object> values = new ArrayList<>()__		_		_		Map<String, String> caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)__		for (String column : this.tableColumns) {_			if (parameterSource.hasValue(column)) {_				values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, column))__			}_			else {_				String lowerCaseName = column.toLowerCase()__				if (parameterSource.hasValue(lowerCaseName)) {_					values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__				}_				else {_					String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(column)__					if (parameterSource.hasValue(propertyName)) {_						values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__					}_					else {_						if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_							values.add(SqlParameterSourceUtils.getTypedValue(_									parameterSource, caseInsensitiveParameterNames.get(lowerCaseName)))__						}_						else {_							values.add(null)__						}_					}_				}_			}_		}_		return values__	};match,the,provided,column,names,and,values,with,the,list,of,columns,used,param,parameter,source,the,parameter,names,and,values;public,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,list,object,values,new,array,list,map,string,string,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,for,string,column,this,table,columns,if,parameter,source,has,value,column,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,column,else,string,lower,case,name,column,to,lower,case,if,parameter,source,has,value,lower,case,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,column,if,parameter,source,has,value,property,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,case,insensitive,parameter,names,get,lower,case,name,else,values,add,null,return,values
TableMetaDataContext -> public List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1532091916;Match the provided column names and values with the list of columns used._@param parameterSource the parameter names and values;public List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		List<Object> values = new ArrayList<>()__		_		_		Map<String, String> caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)__		for (String column : this.tableColumns) {_			if (parameterSource.hasValue(column)) {_				values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, column))__			}_			else {_				String lowerCaseName = column.toLowerCase()__				if (parameterSource.hasValue(lowerCaseName)) {_					values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__				}_				else {_					String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(column)__					if (parameterSource.hasValue(propertyName)) {_						values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__					}_					else {_						if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_							values.add(SqlParameterSourceUtils.getTypedValue(_									parameterSource, caseInsensitiveParameterNames.get(lowerCaseName)))__						}_						else {_							values.add(null)__						}_					}_				}_			}_		}_		return values__	};match,the,provided,column,names,and,values,with,the,list,of,columns,used,param,parameter,source,the,parameter,names,and,values;public,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,list,object,values,new,array,list,map,string,string,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,for,string,column,this,table,columns,if,parameter,source,has,value,column,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,column,else,string,lower,case,name,column,to,lower,case,if,parameter,source,has,value,lower,case,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,column,if,parameter,source,has,value,property,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,case,insensitive,parameter,names,get,lower,case,name,else,values,add,null,return,values
TableMetaDataContext -> public List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource);1550238935;Match the provided column names and values with the list of columns used._@param parameterSource the parameter names and values;public List<Object> matchInParameterValuesWithInsertColumns(SqlParameterSource parameterSource) {_		List<Object> values = new ArrayList<>()__		_		_		Map<String, String> caseInsensitiveParameterNames =_				SqlParameterSourceUtils.extractCaseInsensitiveParameterNames(parameterSource)__		for (String column : this.tableColumns) {_			if (parameterSource.hasValue(column)) {_				values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, column))__			}_			else {_				String lowerCaseName = column.toLowerCase()__				if (parameterSource.hasValue(lowerCaseName)) {_					values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, lowerCaseName))__				}_				else {_					String propertyName = JdbcUtils.convertUnderscoreNameToPropertyName(column)__					if (parameterSource.hasValue(propertyName)) {_						values.add(SqlParameterSourceUtils.getTypedValue(parameterSource, propertyName))__					}_					else {_						if (caseInsensitiveParameterNames.containsKey(lowerCaseName)) {_							values.add(SqlParameterSourceUtils.getTypedValue(_									parameterSource, caseInsensitiveParameterNames.get(lowerCaseName)))__						}_						else {_							values.add(null)__						}_					}_				}_			}_		}_		return values__	};match,the,provided,column,names,and,values,with,the,list,of,columns,used,param,parameter,source,the,parameter,names,and,values;public,list,object,match,in,parameter,values,with,insert,columns,sql,parameter,source,parameter,source,list,object,values,new,array,list,map,string,string,case,insensitive,parameter,names,sql,parameter,source,utils,extract,case,insensitive,parameter,names,parameter,source,for,string,column,this,table,columns,if,parameter,source,has,value,column,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,column,else,string,lower,case,name,column,to,lower,case,if,parameter,source,has,value,lower,case,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,lower,case,name,else,string,property,name,jdbc,utils,convert,underscore,name,to,property,name,column,if,parameter,source,has,value,property,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,property,name,else,if,case,insensitive,parameter,names,contains,key,lower,case,name,values,add,sql,parameter,source,utils,get,typed,value,parameter,source,case,insensitive,parameter,names,get,lower,case,name,else,values,add,null,return,values
TableMetaDataContext -> public void setOverrideIncludeSynonymsDefault(boolean override);1328020251;Specify whether we should override default for accessing synonyms.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.overrideIncludeSynonymsDefault = override__	};specify,whether,we,should,override,default,for,accessing,synonyms;public,void,set,override,include,synonyms,default,boolean,override,this,override,include,synonyms,default,override
TableMetaDataContext -> public void setOverrideIncludeSynonymsDefault(boolean override);1385412762;Specify whether we should override default for accessing synonyms.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.overrideIncludeSynonymsDefault = override__	};specify,whether,we,should,override,default,for,accessing,synonyms;public,void,set,override,include,synonyms,default,boolean,override,this,override,include,synonyms,default,override
TableMetaDataContext -> public void setOverrideIncludeSynonymsDefault(boolean override);1407511029;Specify whether we should override default for accessing synonyms.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.overrideIncludeSynonymsDefault = override__	};specify,whether,we,should,override,default,for,accessing,synonyms;public,void,set,override,include,synonyms,default,boolean,override,this,override,include,synonyms,default,override
TableMetaDataContext -> public void setOverrideIncludeSynonymsDefault(boolean override);1416833949;Specify whether we should override default for accessing synonyms.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.overrideIncludeSynonymsDefault = override__	};specify,whether,we,should,override,default,for,accessing,synonyms;public,void,set,override,include,synonyms,default,boolean,override,this,override,include,synonyms,default,override
TableMetaDataContext -> public void setOverrideIncludeSynonymsDefault(boolean override);1429214043;Specify whether we should override default for accessing synonyms.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.overrideIncludeSynonymsDefault = override__	};specify,whether,we,should,override,default,for,accessing,synonyms;public,void,set,override,include,synonyms,default,boolean,override,this,override,include,synonyms,default,override
TableMetaDataContext -> public void setOverrideIncludeSynonymsDefault(boolean override);1464241861;Specify whether we should override default for accessing synonyms.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.overrideIncludeSynonymsDefault = override__	};specify,whether,we,should,override,default,for,accessing,synonyms;public,void,set,override,include,synonyms,default,boolean,override,this,override,include,synonyms,default,override
TableMetaDataContext -> public void setOverrideIncludeSynonymsDefault(boolean override);1467730834;Specify whether we should override default for accessing synonyms.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.overrideIncludeSynonymsDefault = override__	};specify,whether,we,should,override,default,for,accessing,synonyms;public,void,set,override,include,synonyms,default,boolean,override,this,override,include,synonyms,default,override
TableMetaDataContext -> public void setOverrideIncludeSynonymsDefault(boolean override);1487178248;Specify whether we should override default for accessing synonyms.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.overrideIncludeSynonymsDefault = override__	};specify,whether,we,should,override,default,for,accessing,synonyms;public,void,set,override,include,synonyms,default,boolean,override,this,override,include,synonyms,default,override
TableMetaDataContext -> public void setOverrideIncludeSynonymsDefault(boolean override);1496837955;Specify whether we should override default for accessing synonyms.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.overrideIncludeSynonymsDefault = override__	};specify,whether,we,should,override,default,for,accessing,synonyms;public,void,set,override,include,synonyms,default,boolean,override,this,override,include,synonyms,default,override
TableMetaDataContext -> public void setOverrideIncludeSynonymsDefault(boolean override);1500448076;Specify whether we should override default for accessing synonyms.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.overrideIncludeSynonymsDefault = override__	};specify,whether,we,should,override,default,for,accessing,synonyms;public,void,set,override,include,synonyms,default,boolean,override,this,override,include,synonyms,default,override
TableMetaDataContext -> public void setOverrideIncludeSynonymsDefault(boolean override);1500457438;Specify whether we should override default for accessing synonyms.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.overrideIncludeSynonymsDefault = override__	};specify,whether,we,should,override,default,for,accessing,synonyms;public,void,set,override,include,synonyms,default,boolean,override,this,override,include,synonyms,default,override
TableMetaDataContext -> public void setOverrideIncludeSynonymsDefault(boolean override);1515532822;Specify whether we should override default for accessing synonyms.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.overrideIncludeSynonymsDefault = override__	};specify,whether,we,should,override,default,for,accessing,synonyms;public,void,set,override,include,synonyms,default,boolean,override,this,override,include,synonyms,default,override
TableMetaDataContext -> public void setOverrideIncludeSynonymsDefault(boolean override);1516393837;Specify whether we should override default for accessing synonyms.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.overrideIncludeSynonymsDefault = override__	};specify,whether,we,should,override,default,for,accessing,synonyms;public,void,set,override,include,synonyms,default,boolean,override,this,override,include,synonyms,default,override
TableMetaDataContext -> public void setOverrideIncludeSynonymsDefault(boolean override);1518167526;Specify whether we should override default for accessing synonyms.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.overrideIncludeSynonymsDefault = override__	};specify,whether,we,should,override,default,for,accessing,synonyms;public,void,set,override,include,synonyms,default,boolean,override,this,override,include,synonyms,default,override
TableMetaDataContext -> public void setOverrideIncludeSynonymsDefault(boolean override);1521457491;Specify whether we should override default for accessing synonyms.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.overrideIncludeSynonymsDefault = override__	};specify,whether,we,should,override,default,for,accessing,synonyms;public,void,set,override,include,synonyms,default,boolean,override,this,override,include,synonyms,default,override
TableMetaDataContext -> public void setOverrideIncludeSynonymsDefault(boolean override);1522103912;Specify whether we should override default for accessing synonyms.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.overrideIncludeSynonymsDefault = override__	};specify,whether,we,should,override,default,for,accessing,synonyms;public,void,set,override,include,synonyms,default,boolean,override,this,override,include,synonyms,default,override
TableMetaDataContext -> public void setOverrideIncludeSynonymsDefault(boolean override);1528719423;Specify whether we should override default for accessing synonyms.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.overrideIncludeSynonymsDefault = override__	};specify,whether,we,should,override,default,for,accessing,synonyms;public,void,set,override,include,synonyms,default,boolean,override,this,override,include,synonyms,default,override
TableMetaDataContext -> public void setOverrideIncludeSynonymsDefault(boolean override);1530174524;Specify whether we should override default for accessing synonyms.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.overrideIncludeSynonymsDefault = override__	};specify,whether,we,should,override,default,for,accessing,synonyms;public,void,set,override,include,synonyms,default,boolean,override,this,override,include,synonyms,default,override
TableMetaDataContext -> public void setOverrideIncludeSynonymsDefault(boolean override);1532091916;Specify whether we should override default for accessing synonyms.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.overrideIncludeSynonymsDefault = override__	};specify,whether,we,should,override,default,for,accessing,synonyms;public,void,set,override,include,synonyms,default,boolean,override,this,override,include,synonyms,default,override
TableMetaDataContext -> public void setOverrideIncludeSynonymsDefault(boolean override);1550238935;Specify whether we should override default for accessing synonyms.;public void setOverrideIncludeSynonymsDefault(boolean override) {_		this.overrideIncludeSynonymsDefault = override__	};specify,whether,we,should,override,default,for,accessing,synonyms;public,void,set,override,include,synonyms,default,boolean,override,this,override,include,synonyms,default,override
TableMetaDataContext -> public String getSchemaName();1328020251;Get the name of the schema for this context.;public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema,for,this,context;public,string,get,schema,name,return,this,schema,name
TableMetaDataContext -> public String getSchemaName();1385412762;Get the name of the schema for this context.;public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema,for,this,context;public,string,get,schema,name,return,this,schema,name
TableMetaDataContext -> public String getSchemaName();1407511029;Get the name of the schema for this context.;public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema,for,this,context;public,string,get,schema,name,return,this,schema,name
TableMetaDataContext -> public String getSchemaName();1416833949;Get the name of the schema for this context.;public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema,for,this,context;public,string,get,schema,name,return,this,schema,name
TableMetaDataContext -> public String getSchemaName();1429214043;Get the name of the schema for this context.;public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema,for,this,context;public,string,get,schema,name,return,this,schema,name
TableMetaDataContext -> public String getSchemaName();1464241861;Get the name of the schema for this context.;public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema,for,this,context;public,string,get,schema,name,return,this,schema,name
TableMetaDataContext -> public String getSchemaName();1467730834;Get the name of the schema for this context.;public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema,for,this,context;public,string,get,schema,name,return,this,schema,name
TableMetaDataContext -> public String getSchemaName();1487178248;Get the name of the schema for this context.;public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema,for,this,context;public,string,get,schema,name,return,this,schema,name
TableMetaDataContext -> public boolean isGeneratedKeysColumnNameArraySupported();1328020251;Is a column name String array for retrieving generated keys supported?_{@link java.sql.Connection#createStruct(String, Object[])}?;public boolean isGeneratedKeysColumnNameArraySupported() {_		return this.metaDataProvider.isGeneratedKeysColumnNameArraySupported()__	};is,a,column,name,string,array,for,retrieving,generated,keys,supported,link,java,sql,connection,create,struct,string,object;public,boolean,is,generated,keys,column,name,array,supported,return,this,meta,data,provider,is,generated,keys,column,name,array,supported
TableMetaDataContext -> public boolean isGeneratedKeysColumnNameArraySupported();1385412762;Is a column name String array for retrieving generated keys supported?_{@link java.sql.Connection#createStruct(String, Object[])}?;public boolean isGeneratedKeysColumnNameArraySupported() {_		return this.metaDataProvider.isGeneratedKeysColumnNameArraySupported()__	};is,a,column,name,string,array,for,retrieving,generated,keys,supported,link,java,sql,connection,create,struct,string,object;public,boolean,is,generated,keys,column,name,array,supported,return,this,meta,data,provider,is,generated,keys,column,name,array,supported
TableMetaDataContext -> public boolean isGeneratedKeysColumnNameArraySupported();1407511029;Is a column name String array for retrieving generated keys supported?_{@link java.sql.Connection#createStruct(String, Object[])}?;public boolean isGeneratedKeysColumnNameArraySupported() {_		return this.metaDataProvider.isGeneratedKeysColumnNameArraySupported()__	};is,a,column,name,string,array,for,retrieving,generated,keys,supported,link,java,sql,connection,create,struct,string,object;public,boolean,is,generated,keys,column,name,array,supported,return,this,meta,data,provider,is,generated,keys,column,name,array,supported
TableMetaDataContext -> public boolean isGeneratedKeysColumnNameArraySupported();1416833949;Is a column name String array for retrieving generated keys supported?_{@link java.sql.Connection#createStruct(String, Object[])}?;public boolean isGeneratedKeysColumnNameArraySupported() {_		return this.metaDataProvider.isGeneratedKeysColumnNameArraySupported()__	};is,a,column,name,string,array,for,retrieving,generated,keys,supported,link,java,sql,connection,create,struct,string,object;public,boolean,is,generated,keys,column,name,array,supported,return,this,meta,data,provider,is,generated,keys,column,name,array,supported
TableMetaDataContext -> public boolean isGeneratedKeysColumnNameArraySupported();1429214043;Is a column name String array for retrieving generated keys supported?_{@link java.sql.Connection#createStruct(String, Object[])}?;public boolean isGeneratedKeysColumnNameArraySupported() {_		return this.metaDataProvider.isGeneratedKeysColumnNameArraySupported()__	};is,a,column,name,string,array,for,retrieving,generated,keys,supported,link,java,sql,connection,create,struct,string,object;public,boolean,is,generated,keys,column,name,array,supported,return,this,meta,data,provider,is,generated,keys,column,name,array,supported
TableMetaDataContext -> public boolean isGeneratedKeysColumnNameArraySupported();1464241861;Is a column name String array for retrieving generated keys supported?_{@link java.sql.Connection#createStruct(String, Object[])}?;public boolean isGeneratedKeysColumnNameArraySupported() {_		return this.metaDataProvider.isGeneratedKeysColumnNameArraySupported()__	};is,a,column,name,string,array,for,retrieving,generated,keys,supported,link,java,sql,connection,create,struct,string,object;public,boolean,is,generated,keys,column,name,array,supported,return,this,meta,data,provider,is,generated,keys,column,name,array,supported
TableMetaDataContext -> public boolean isGeneratedKeysColumnNameArraySupported();1467730834;Is a column name String array for retrieving generated keys supported?_{@link java.sql.Connection#createStruct(String, Object[])}?;public boolean isGeneratedKeysColumnNameArraySupported() {_		return this.metaDataProvider.isGeneratedKeysColumnNameArraySupported()__	};is,a,column,name,string,array,for,retrieving,generated,keys,supported,link,java,sql,connection,create,struct,string,object;public,boolean,is,generated,keys,column,name,array,supported,return,this,meta,data,provider,is,generated,keys,column,name,array,supported
TableMetaDataContext -> public boolean isGeneratedKeysColumnNameArraySupported();1487178248;Is a column name String array for retrieving generated keys supported?_{@link java.sql.Connection#createStruct(String, Object[])}?;public boolean isGeneratedKeysColumnNameArraySupported() {_		return this.metaDataProvider.isGeneratedKeysColumnNameArraySupported()__	};is,a,column,name,string,array,for,retrieving,generated,keys,supported,link,java,sql,connection,create,struct,string,object;public,boolean,is,generated,keys,column,name,array,supported,return,this,meta,data,provider,is,generated,keys,column,name,array,supported
TableMetaDataContext -> public boolean isGeneratedKeysColumnNameArraySupported();1496837955;Is a column name String array for retrieving generated keys supported?_{@link java.sql.Connection#createStruct(String, Object[])}?;public boolean isGeneratedKeysColumnNameArraySupported() {_		return this.metaDataProvider.isGeneratedKeysColumnNameArraySupported()__	};is,a,column,name,string,array,for,retrieving,generated,keys,supported,link,java,sql,connection,create,struct,string,object;public,boolean,is,generated,keys,column,name,array,supported,return,this,meta,data,provider,is,generated,keys,column,name,array,supported
TableMetaDataContext -> public boolean isGeneratedKeysColumnNameArraySupported();1500448076;Is a column name String array for retrieving generated keys supported?_{@link java.sql.Connection#createStruct(String, Object[])}?;public boolean isGeneratedKeysColumnNameArraySupported() {_		return this.metaDataProvider.isGeneratedKeysColumnNameArraySupported()__	};is,a,column,name,string,array,for,retrieving,generated,keys,supported,link,java,sql,connection,create,struct,string,object;public,boolean,is,generated,keys,column,name,array,supported,return,this,meta,data,provider,is,generated,keys,column,name,array,supported
TableMetaDataContext -> public boolean isGeneratedKeysColumnNameArraySupported();1500457438;Is a column name String array for retrieving generated keys supported?_{@link java.sql.Connection#createStruct(String, Object[])}?;public boolean isGeneratedKeysColumnNameArraySupported() {_		return obtainMetaDataProvider().isGeneratedKeysColumnNameArraySupported()__	};is,a,column,name,string,array,for,retrieving,generated,keys,supported,link,java,sql,connection,create,struct,string,object;public,boolean,is,generated,keys,column,name,array,supported,return,obtain,meta,data,provider,is,generated,keys,column,name,array,supported
TableMetaDataContext -> public boolean isGeneratedKeysColumnNameArraySupported();1515532822;Is a column name String array for retrieving generated keys supported?_{@link java.sql.Connection#createStruct(String, Object[])}?;public boolean isGeneratedKeysColumnNameArraySupported() {_		return obtainMetaDataProvider().isGeneratedKeysColumnNameArraySupported()__	};is,a,column,name,string,array,for,retrieving,generated,keys,supported,link,java,sql,connection,create,struct,string,object;public,boolean,is,generated,keys,column,name,array,supported,return,obtain,meta,data,provider,is,generated,keys,column,name,array,supported
TableMetaDataContext -> public boolean isGeneratedKeysColumnNameArraySupported();1516393837;Is a column name String array for retrieving generated keys supported?_{@link java.sql.Connection#createStruct(String, Object[])}?;public boolean isGeneratedKeysColumnNameArraySupported() {_		return obtainMetaDataProvider().isGeneratedKeysColumnNameArraySupported()__	};is,a,column,name,string,array,for,retrieving,generated,keys,supported,link,java,sql,connection,create,struct,string,object;public,boolean,is,generated,keys,column,name,array,supported,return,obtain,meta,data,provider,is,generated,keys,column,name,array,supported
TableMetaDataContext -> public boolean isGeneratedKeysColumnNameArraySupported();1518167526;Is a column name String array for retrieving generated keys supported?_{@link java.sql.Connection#createStruct(String, Object[])}?;public boolean isGeneratedKeysColumnNameArraySupported() {_		return obtainMetaDataProvider().isGeneratedKeysColumnNameArraySupported()__	};is,a,column,name,string,array,for,retrieving,generated,keys,supported,link,java,sql,connection,create,struct,string,object;public,boolean,is,generated,keys,column,name,array,supported,return,obtain,meta,data,provider,is,generated,keys,column,name,array,supported
TableMetaDataContext -> public boolean isGeneratedKeysColumnNameArraySupported();1521457491;Is a column name String array for retrieving generated keys supported:_{@link java.sql.Connection#createStruct(String, Object[])}?;public boolean isGeneratedKeysColumnNameArraySupported() {_		return obtainMetaDataProvider().isGeneratedKeysColumnNameArraySupported()__	};is,a,column,name,string,array,for,retrieving,generated,keys,supported,link,java,sql,connection,create,struct,string,object;public,boolean,is,generated,keys,column,name,array,supported,return,obtain,meta,data,provider,is,generated,keys,column,name,array,supported
TableMetaDataContext -> public boolean isGeneratedKeysColumnNameArraySupported();1522103912;Is a column name String array for retrieving generated keys supported:_{@link java.sql.Connection#createStruct(String, Object[])}?;public boolean isGeneratedKeysColumnNameArraySupported() {_		return obtainMetaDataProvider().isGeneratedKeysColumnNameArraySupported()__	};is,a,column,name,string,array,for,retrieving,generated,keys,supported,link,java,sql,connection,create,struct,string,object;public,boolean,is,generated,keys,column,name,array,supported,return,obtain,meta,data,provider,is,generated,keys,column,name,array,supported
TableMetaDataContext -> public boolean isGeneratedKeysColumnNameArraySupported();1528719423;Is a column name String array for retrieving generated keys supported:_{@link java.sql.Connection#createStruct(String, Object[])}?;public boolean isGeneratedKeysColumnNameArraySupported() {_		return obtainMetaDataProvider().isGeneratedKeysColumnNameArraySupported()__	};is,a,column,name,string,array,for,retrieving,generated,keys,supported,link,java,sql,connection,create,struct,string,object;public,boolean,is,generated,keys,column,name,array,supported,return,obtain,meta,data,provider,is,generated,keys,column,name,array,supported
TableMetaDataContext -> public boolean isGeneratedKeysColumnNameArraySupported();1530174524;Is a column name String array for retrieving generated keys supported:_{@link java.sql.Connection#createStruct(String, Object[])}?;public boolean isGeneratedKeysColumnNameArraySupported() {_		return obtainMetaDataProvider().isGeneratedKeysColumnNameArraySupported()__	};is,a,column,name,string,array,for,retrieving,generated,keys,supported,link,java,sql,connection,create,struct,string,object;public,boolean,is,generated,keys,column,name,array,supported,return,obtain,meta,data,provider,is,generated,keys,column,name,array,supported
TableMetaDataContext -> public boolean isGeneratedKeysColumnNameArraySupported();1532091916;Is a column name String array for retrieving generated keys supported:_{@link java.sql.Connection#createStruct(String, Object[])}?;public boolean isGeneratedKeysColumnNameArraySupported() {_		return obtainMetaDataProvider().isGeneratedKeysColumnNameArraySupported()__	};is,a,column,name,string,array,for,retrieving,generated,keys,supported,link,java,sql,connection,create,struct,string,object;public,boolean,is,generated,keys,column,name,array,supported,return,obtain,meta,data,provider,is,generated,keys,column,name,array,supported
TableMetaDataContext -> public boolean isGeneratedKeysColumnNameArraySupported();1550238935;Is a column name String array for retrieving generated keys supported:_{@link java.sql.Connection#createStruct(String, Object[])}?;public boolean isGeneratedKeysColumnNameArraySupported() {_		return obtainMetaDataProvider().isGeneratedKeysColumnNameArraySupported()__	};is,a,column,name,string,array,for,retrieving,generated,keys,supported,link,java,sql,connection,create,struct,string,object;public,boolean,is,generated,keys,column,name,array,supported,return,obtain,meta,data,provider,is,generated,keys,column,name,array,supported
TableMetaDataContext -> public void setNativeJdbcExtractor(NativeJdbcExtractor nativeJdbcExtractor);1328020251;Set {@link NativeJdbcExtractor} to be used to retrieve the native connection.;public void setNativeJdbcExtractor(NativeJdbcExtractor nativeJdbcExtractor) {_		this.nativeJdbcExtractor = nativeJdbcExtractor__	};set,link,native,jdbc,extractor,to,be,used,to,retrieve,the,native,connection;public,void,set,native,jdbc,extractor,native,jdbc,extractor,native,jdbc,extractor,this,native,jdbc,extractor,native,jdbc,extractor
TableMetaDataContext -> public void setNativeJdbcExtractor(NativeJdbcExtractor nativeJdbcExtractor);1385412762;Set {@link NativeJdbcExtractor} to be used to retrieve the native connection.;public void setNativeJdbcExtractor(NativeJdbcExtractor nativeJdbcExtractor) {_		this.nativeJdbcExtractor = nativeJdbcExtractor__	};set,link,native,jdbc,extractor,to,be,used,to,retrieve,the,native,connection;public,void,set,native,jdbc,extractor,native,jdbc,extractor,native,jdbc,extractor,this,native,jdbc,extractor,native,jdbc,extractor
TableMetaDataContext -> public void setNativeJdbcExtractor(NativeJdbcExtractor nativeJdbcExtractor);1407511029;Set {@link NativeJdbcExtractor} to be used to retrieve the native connection.;public void setNativeJdbcExtractor(NativeJdbcExtractor nativeJdbcExtractor) {_		this.nativeJdbcExtractor = nativeJdbcExtractor__	};set,link,native,jdbc,extractor,to,be,used,to,retrieve,the,native,connection;public,void,set,native,jdbc,extractor,native,jdbc,extractor,native,jdbc,extractor,this,native,jdbc,extractor,native,jdbc,extractor
TableMetaDataContext -> public void setNativeJdbcExtractor(NativeJdbcExtractor nativeJdbcExtractor);1416833949;Set {@link NativeJdbcExtractor} to be used to retrieve the native connection.;public void setNativeJdbcExtractor(NativeJdbcExtractor nativeJdbcExtractor) {_		this.nativeJdbcExtractor = nativeJdbcExtractor__	};set,link,native,jdbc,extractor,to,be,used,to,retrieve,the,native,connection;public,void,set,native,jdbc,extractor,native,jdbc,extractor,native,jdbc,extractor,this,native,jdbc,extractor,native,jdbc,extractor
TableMetaDataContext -> public void setNativeJdbcExtractor(NativeJdbcExtractor nativeJdbcExtractor);1429214043;Set {@link NativeJdbcExtractor} to be used to retrieve the native connection.;public void setNativeJdbcExtractor(NativeJdbcExtractor nativeJdbcExtractor) {_		this.nativeJdbcExtractor = nativeJdbcExtractor__	};set,link,native,jdbc,extractor,to,be,used,to,retrieve,the,native,connection;public,void,set,native,jdbc,extractor,native,jdbc,extractor,native,jdbc,extractor,this,native,jdbc,extractor,native,jdbc,extractor
TableMetaDataContext -> public void setNativeJdbcExtractor(NativeJdbcExtractor nativeJdbcExtractor);1464241861;Set {@link NativeJdbcExtractor} to be used to retrieve the native connection.;public void setNativeJdbcExtractor(NativeJdbcExtractor nativeJdbcExtractor) {_		this.nativeJdbcExtractor = nativeJdbcExtractor__	};set,link,native,jdbc,extractor,to,be,used,to,retrieve,the,native,connection;public,void,set,native,jdbc,extractor,native,jdbc,extractor,native,jdbc,extractor,this,native,jdbc,extractor,native,jdbc,extractor
TableMetaDataContext -> public void setNativeJdbcExtractor(NativeJdbcExtractor nativeJdbcExtractor);1467730834;Set {@link NativeJdbcExtractor} to be used to retrieve the native connection.;public void setNativeJdbcExtractor(NativeJdbcExtractor nativeJdbcExtractor) {_		this.nativeJdbcExtractor = nativeJdbcExtractor__	};set,link,native,jdbc,extractor,to,be,used,to,retrieve,the,native,connection;public,void,set,native,jdbc,extractor,native,jdbc,extractor,native,jdbc,extractor,this,native,jdbc,extractor,native,jdbc,extractor
TableMetaDataContext -> @Nullable 	public String getSchemaName();1496837955;Get the name of the schema for this context.;@Nullable_	public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema,for,this,context;nullable,public,string,get,schema,name,return,this,schema,name
TableMetaDataContext -> @Nullable 	public String getSchemaName();1500448076;Get the name of the schema for this context.;@Nullable_	public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema,for,this,context;nullable,public,string,get,schema,name,return,this,schema,name
TableMetaDataContext -> @Nullable 	public String getSchemaName();1500457438;Get the name of the schema for this context.;@Nullable_	public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema,for,this,context;nullable,public,string,get,schema,name,return,this,schema,name
TableMetaDataContext -> @Nullable 	public String getSchemaName();1515532822;Get the name of the schema for this context.;@Nullable_	public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema,for,this,context;nullable,public,string,get,schema,name,return,this,schema,name
TableMetaDataContext -> @Nullable 	public String getSchemaName();1516393837;Get the name of the schema for this context.;@Nullable_	public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema,for,this,context;nullable,public,string,get,schema,name,return,this,schema,name
TableMetaDataContext -> @Nullable 	public String getSchemaName();1518167526;Get the name of the schema for this context.;@Nullable_	public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema,for,this,context;nullable,public,string,get,schema,name,return,this,schema,name
TableMetaDataContext -> @Nullable 	public String getSchemaName();1521457491;Get the name of the schema for this context.;@Nullable_	public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema,for,this,context;nullable,public,string,get,schema,name,return,this,schema,name
TableMetaDataContext -> @Nullable 	public String getSchemaName();1522103912;Get the name of the schema for this context.;@Nullable_	public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema,for,this,context;nullable,public,string,get,schema,name,return,this,schema,name
TableMetaDataContext -> @Nullable 	public String getSchemaName();1528719423;Get the name of the schema for this context.;@Nullable_	public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema,for,this,context;nullable,public,string,get,schema,name,return,this,schema,name
TableMetaDataContext -> @Nullable 	public String getSchemaName();1530174524;Get the name of the schema for this context.;@Nullable_	public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema,for,this,context;nullable,public,string,get,schema,name,return,this,schema,name
TableMetaDataContext -> @Nullable 	public String getSchemaName();1532091916;Get the name of the schema for this context.;@Nullable_	public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema,for,this,context;nullable,public,string,get,schema,name,return,this,schema,name
TableMetaDataContext -> @Nullable 	public String getSchemaName();1550238935;Get the name of the schema for this context.;@Nullable_	public String getSchemaName() {_		return this.schemaName__	};get,the,name,of,the,schema,for,this,context;nullable,public,string,get,schema,name,return,this,schema,name
TableMetaDataContext -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1328020251;Specify whether we should access table column meta data.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.accessTableColumnMetaData = accessTableColumnMetaData__	};specify,whether,we,should,access,table,column,meta,data;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,access,table,column,meta,data,access,table,column,meta,data
TableMetaDataContext -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1385412762;Specify whether we should access table column meta data.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.accessTableColumnMetaData = accessTableColumnMetaData__	};specify,whether,we,should,access,table,column,meta,data;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,access,table,column,meta,data,access,table,column,meta,data
TableMetaDataContext -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1407511029;Specify whether we should access table column meta data.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.accessTableColumnMetaData = accessTableColumnMetaData__	};specify,whether,we,should,access,table,column,meta,data;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,access,table,column,meta,data,access,table,column,meta,data
TableMetaDataContext -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1416833949;Specify whether we should access table column meta data.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.accessTableColumnMetaData = accessTableColumnMetaData__	};specify,whether,we,should,access,table,column,meta,data;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,access,table,column,meta,data,access,table,column,meta,data
TableMetaDataContext -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1429214043;Specify whether we should access table column meta data.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.accessTableColumnMetaData = accessTableColumnMetaData__	};specify,whether,we,should,access,table,column,meta,data;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,access,table,column,meta,data,access,table,column,meta,data
TableMetaDataContext -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1464241861;Specify whether we should access table column meta data.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.accessTableColumnMetaData = accessTableColumnMetaData__	};specify,whether,we,should,access,table,column,meta,data;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,access,table,column,meta,data,access,table,column,meta,data
TableMetaDataContext -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1467730834;Specify whether we should access table column meta data.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.accessTableColumnMetaData = accessTableColumnMetaData__	};specify,whether,we,should,access,table,column,meta,data;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,access,table,column,meta,data,access,table,column,meta,data
TableMetaDataContext -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1487178248;Specify whether we should access table column meta data.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.accessTableColumnMetaData = accessTableColumnMetaData__	};specify,whether,we,should,access,table,column,meta,data;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,access,table,column,meta,data,access,table,column,meta,data
TableMetaDataContext -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1496837955;Specify whether we should access table column meta data.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.accessTableColumnMetaData = accessTableColumnMetaData__	};specify,whether,we,should,access,table,column,meta,data;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,access,table,column,meta,data,access,table,column,meta,data
TableMetaDataContext -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1500448076;Specify whether we should access table column meta data.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.accessTableColumnMetaData = accessTableColumnMetaData__	};specify,whether,we,should,access,table,column,meta,data;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,access,table,column,meta,data,access,table,column,meta,data
TableMetaDataContext -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1500457438;Specify whether we should access table column meta data.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.accessTableColumnMetaData = accessTableColumnMetaData__	};specify,whether,we,should,access,table,column,meta,data;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,access,table,column,meta,data,access,table,column,meta,data
TableMetaDataContext -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1515532822;Specify whether we should access table column meta data.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.accessTableColumnMetaData = accessTableColumnMetaData__	};specify,whether,we,should,access,table,column,meta,data;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,access,table,column,meta,data,access,table,column,meta,data
TableMetaDataContext -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1516393837;Specify whether we should access table column meta data.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.accessTableColumnMetaData = accessTableColumnMetaData__	};specify,whether,we,should,access,table,column,meta,data;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,access,table,column,meta,data,access,table,column,meta,data
TableMetaDataContext -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1518167526;Specify whether we should access table column meta data.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.accessTableColumnMetaData = accessTableColumnMetaData__	};specify,whether,we,should,access,table,column,meta,data;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,access,table,column,meta,data,access,table,column,meta,data
TableMetaDataContext -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1521457491;Specify whether we should access table column meta-data.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.accessTableColumnMetaData = accessTableColumnMetaData__	};specify,whether,we,should,access,table,column,meta,data;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,access,table,column,meta,data,access,table,column,meta,data
TableMetaDataContext -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1522103912;Specify whether we should access table column meta-data.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.accessTableColumnMetaData = accessTableColumnMetaData__	};specify,whether,we,should,access,table,column,meta,data;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,access,table,column,meta,data,access,table,column,meta,data
TableMetaDataContext -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1528719423;Specify whether we should access table column meta-data.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.accessTableColumnMetaData = accessTableColumnMetaData__	};specify,whether,we,should,access,table,column,meta,data;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,access,table,column,meta,data,access,table,column,meta,data
TableMetaDataContext -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1530174524;Specify whether we should access table column meta-data.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.accessTableColumnMetaData = accessTableColumnMetaData__	};specify,whether,we,should,access,table,column,meta,data;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,access,table,column,meta,data,access,table,column,meta,data
TableMetaDataContext -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1532091916;Specify whether we should access table column meta-data.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.accessTableColumnMetaData = accessTableColumnMetaData__	};specify,whether,we,should,access,table,column,meta,data;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,access,table,column,meta,data,access,table,column,meta,data
TableMetaDataContext -> public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData);1550238935;Specify whether we should access table column meta-data.;public void setAccessTableColumnMetaData(boolean accessTableColumnMetaData) {_		this.accessTableColumnMetaData = accessTableColumnMetaData__	};specify,whether,we,should,access,table,column,meta,data;public,void,set,access,table,column,meta,data,boolean,access,table,column,meta,data,this,access,table,column,meta,data,access,table,column,meta,data
TableMetaDataContext -> public List<Object> matchInParameterValuesWithInsertColumns(Map<String, Object> inParameters);1328020251;Match the provided column names and values with the list of columns used._@param inParameters the parameter names and values;public List<Object> matchInParameterValuesWithInsertColumns(Map<String, Object> inParameters) {_		List<Object> values = new ArrayList<Object>()__		Map<String, Object> source = new HashMap<String, Object>()__		for (String key : inParameters.keySet()) {_			source.put(key.toLowerCase(), inParameters.get(key))__		}_		for (String column : this.tableColumns) {_			values.add(source.get(column.toLowerCase()))__		}_		return values__	};match,the,provided,column,names,and,values,with,the,list,of,columns,used,param,in,parameters,the,parameter,names,and,values;public,list,object,match,in,parameter,values,with,insert,columns,map,string,object,in,parameters,list,object,values,new,array,list,object,map,string,object,source,new,hash,map,string,object,for,string,key,in,parameters,key,set,source,put,key,to,lower,case,in,parameters,get,key,for,string,column,this,table,columns,values,add,source,get,column,to,lower,case,return,values
TableMetaDataContext -> public List<Object> matchInParameterValuesWithInsertColumns(Map<String, Object> inParameters);1385412762;Match the provided column names and values with the list of columns used._@param inParameters the parameter names and values;public List<Object> matchInParameterValuesWithInsertColumns(Map<String, Object> inParameters) {_		List<Object> values = new ArrayList<Object>()__		Map<String, Object> source = new HashMap<String, Object>()__		for (String key : inParameters.keySet()) {_			source.put(key.toLowerCase(), inParameters.get(key))__		}_		for (String column : this.tableColumns) {_			values.add(source.get(column.toLowerCase()))__		}_		return values__	};match,the,provided,column,names,and,values,with,the,list,of,columns,used,param,in,parameters,the,parameter,names,and,values;public,list,object,match,in,parameter,values,with,insert,columns,map,string,object,in,parameters,list,object,values,new,array,list,object,map,string,object,source,new,hash,map,string,object,for,string,key,in,parameters,key,set,source,put,key,to,lower,case,in,parameters,get,key,for,string,column,this,table,columns,values,add,source,get,column,to,lower,case,return,values
TableMetaDataContext -> public List<Object> matchInParameterValuesWithInsertColumns(Map<String, Object> inParameters);1407511029;Match the provided column names and values with the list of columns used._@param inParameters the parameter names and values;public List<Object> matchInParameterValuesWithInsertColumns(Map<String, Object> inParameters) {_		List<Object> values = new ArrayList<Object>()__		Map<String, Object> source = new HashMap<String, Object>()__		for (String key : inParameters.keySet()) {_			source.put(key.toLowerCase(), inParameters.get(key))__		}_		for (String column : this.tableColumns) {_			values.add(source.get(column.toLowerCase()))__		}_		return values__	};match,the,provided,column,names,and,values,with,the,list,of,columns,used,param,in,parameters,the,parameter,names,and,values;public,list,object,match,in,parameter,values,with,insert,columns,map,string,object,in,parameters,list,object,values,new,array,list,object,map,string,object,source,new,hash,map,string,object,for,string,key,in,parameters,key,set,source,put,key,to,lower,case,in,parameters,get,key,for,string,column,this,table,columns,values,add,source,get,column,to,lower,case,return,values
TableMetaDataContext -> public void setCatalogName(@Nullable String catalogName);1500448076;Set the name of the catalog for this context.;public void setCatalogName(@Nullable String catalogName) {_		this.catalogName = catalogName__	};set,the,name,of,the,catalog,for,this,context;public,void,set,catalog,name,nullable,string,catalog,name,this,catalog,name,catalog,name
TableMetaDataContext -> public void setCatalogName(@Nullable String catalogName);1500457438;Set the name of the catalog for this context.;public void setCatalogName(@Nullable String catalogName) {_		this.catalogName = catalogName__	};set,the,name,of,the,catalog,for,this,context;public,void,set,catalog,name,nullable,string,catalog,name,this,catalog,name,catalog,name
TableMetaDataContext -> public void setCatalogName(@Nullable String catalogName);1515532822;Set the name of the catalog for this context.;public void setCatalogName(@Nullable String catalogName) {_		this.catalogName = catalogName__	};set,the,name,of,the,catalog,for,this,context;public,void,set,catalog,name,nullable,string,catalog,name,this,catalog,name,catalog,name
TableMetaDataContext -> public void setCatalogName(@Nullable String catalogName);1516393837;Set the name of the catalog for this context.;public void setCatalogName(@Nullable String catalogName) {_		this.catalogName = catalogName__	};set,the,name,of,the,catalog,for,this,context;public,void,set,catalog,name,nullable,string,catalog,name,this,catalog,name,catalog,name
TableMetaDataContext -> public void setCatalogName(@Nullable String catalogName);1518167526;Set the name of the catalog for this context.;public void setCatalogName(@Nullable String catalogName) {_		this.catalogName = catalogName__	};set,the,name,of,the,catalog,for,this,context;public,void,set,catalog,name,nullable,string,catalog,name,this,catalog,name,catalog,name
TableMetaDataContext -> public void setCatalogName(@Nullable String catalogName);1521457491;Set the name of the catalog for this context.;public void setCatalogName(@Nullable String catalogName) {_		this.catalogName = catalogName__	};set,the,name,of,the,catalog,for,this,context;public,void,set,catalog,name,nullable,string,catalog,name,this,catalog,name,catalog,name
TableMetaDataContext -> public void setCatalogName(@Nullable String catalogName);1522103912;Set the name of the catalog for this context.;public void setCatalogName(@Nullable String catalogName) {_		this.catalogName = catalogName__	};set,the,name,of,the,catalog,for,this,context;public,void,set,catalog,name,nullable,string,catalog,name,this,catalog,name,catalog,name
TableMetaDataContext -> public void setCatalogName(@Nullable String catalogName);1528719423;Set the name of the catalog for this context.;public void setCatalogName(@Nullable String catalogName) {_		this.catalogName = catalogName__	};set,the,name,of,the,catalog,for,this,context;public,void,set,catalog,name,nullable,string,catalog,name,this,catalog,name,catalog,name
TableMetaDataContext -> public void setCatalogName(@Nullable String catalogName);1530174524;Set the name of the catalog for this context.;public void setCatalogName(@Nullable String catalogName) {_		this.catalogName = catalogName__	};set,the,name,of,the,catalog,for,this,context;public,void,set,catalog,name,nullable,string,catalog,name,this,catalog,name,catalog,name
TableMetaDataContext -> public void setCatalogName(@Nullable String catalogName);1532091916;Set the name of the catalog for this context.;public void setCatalogName(@Nullable String catalogName) {_		this.catalogName = catalogName__	};set,the,name,of,the,catalog,for,this,context;public,void,set,catalog,name,nullable,string,catalog,name,this,catalog,name,catalog,name
TableMetaDataContext -> public void setCatalogName(@Nullable String catalogName);1550238935;Set the name of the catalog for this context.;public void setCatalogName(@Nullable String catalogName) {_		this.catalogName = catalogName__	};set,the,name,of,the,catalog,for,this,context;public,void,set,catalog,name,nullable,string,catalog,name,this,catalog,name,catalog,name
TableMetaDataContext -> public boolean isOverrideIncludeSynonymsDefault();1328020251;Are we overriding include synonyms default?;public boolean isOverrideIncludeSynonymsDefault() {_		return this.overrideIncludeSynonymsDefault__	};are,we,overriding,include,synonyms,default;public,boolean,is,override,include,synonyms,default,return,this,override,include,synonyms,default
TableMetaDataContext -> public boolean isOverrideIncludeSynonymsDefault();1385412762;Are we overriding include synonyms default?;public boolean isOverrideIncludeSynonymsDefault() {_		return this.overrideIncludeSynonymsDefault__	};are,we,overriding,include,synonyms,default;public,boolean,is,override,include,synonyms,default,return,this,override,include,synonyms,default
TableMetaDataContext -> public boolean isOverrideIncludeSynonymsDefault();1407511029;Are we overriding include synonyms default?;public boolean isOverrideIncludeSynonymsDefault() {_		return this.overrideIncludeSynonymsDefault__	};are,we,overriding,include,synonyms,default;public,boolean,is,override,include,synonyms,default,return,this,override,include,synonyms,default
TableMetaDataContext -> public boolean isOverrideIncludeSynonymsDefault();1416833949;Are we overriding include synonyms default?;public boolean isOverrideIncludeSynonymsDefault() {_		return this.overrideIncludeSynonymsDefault__	};are,we,overriding,include,synonyms,default;public,boolean,is,override,include,synonyms,default,return,this,override,include,synonyms,default
TableMetaDataContext -> public boolean isOverrideIncludeSynonymsDefault();1429214043;Are we overriding include synonyms default?;public boolean isOverrideIncludeSynonymsDefault() {_		return this.overrideIncludeSynonymsDefault__	};are,we,overriding,include,synonyms,default;public,boolean,is,override,include,synonyms,default,return,this,override,include,synonyms,default
TableMetaDataContext -> public boolean isOverrideIncludeSynonymsDefault();1464241861;Are we overriding include synonyms default?;public boolean isOverrideIncludeSynonymsDefault() {_		return this.overrideIncludeSynonymsDefault__	};are,we,overriding,include,synonyms,default;public,boolean,is,override,include,synonyms,default,return,this,override,include,synonyms,default
TableMetaDataContext -> public boolean isOverrideIncludeSynonymsDefault();1467730834;Are we overriding include synonyms default?;public boolean isOverrideIncludeSynonymsDefault() {_		return this.overrideIncludeSynonymsDefault__	};are,we,overriding,include,synonyms,default;public,boolean,is,override,include,synonyms,default,return,this,override,include,synonyms,default
TableMetaDataContext -> public boolean isOverrideIncludeSynonymsDefault();1487178248;Are we overriding include synonyms default?;public boolean isOverrideIncludeSynonymsDefault() {_		return this.overrideIncludeSynonymsDefault__	};are,we,overriding,include,synonyms,default;public,boolean,is,override,include,synonyms,default,return,this,override,include,synonyms,default
TableMetaDataContext -> public boolean isOverrideIncludeSynonymsDefault();1496837955;Are we overriding include synonyms default?;public boolean isOverrideIncludeSynonymsDefault() {_		return this.overrideIncludeSynonymsDefault__	};are,we,overriding,include,synonyms,default;public,boolean,is,override,include,synonyms,default,return,this,override,include,synonyms,default
TableMetaDataContext -> public boolean isOverrideIncludeSynonymsDefault();1500448076;Are we overriding include synonyms default?;public boolean isOverrideIncludeSynonymsDefault() {_		return this.overrideIncludeSynonymsDefault__	};are,we,overriding,include,synonyms,default;public,boolean,is,override,include,synonyms,default,return,this,override,include,synonyms,default
TableMetaDataContext -> public boolean isOverrideIncludeSynonymsDefault();1500457438;Are we overriding include synonyms default?;public boolean isOverrideIncludeSynonymsDefault() {_		return this.overrideIncludeSynonymsDefault__	};are,we,overriding,include,synonyms,default;public,boolean,is,override,include,synonyms,default,return,this,override,include,synonyms,default
TableMetaDataContext -> public boolean isOverrideIncludeSynonymsDefault();1515532822;Are we overriding include synonyms default?;public boolean isOverrideIncludeSynonymsDefault() {_		return this.overrideIncludeSynonymsDefault__	};are,we,overriding,include,synonyms,default;public,boolean,is,override,include,synonyms,default,return,this,override,include,synonyms,default
TableMetaDataContext -> public boolean isOverrideIncludeSynonymsDefault();1516393837;Are we overriding include synonyms default?;public boolean isOverrideIncludeSynonymsDefault() {_		return this.overrideIncludeSynonymsDefault__	};are,we,overriding,include,synonyms,default;public,boolean,is,override,include,synonyms,default,return,this,override,include,synonyms,default
TableMetaDataContext -> public boolean isOverrideIncludeSynonymsDefault();1518167526;Are we overriding include synonyms default?;public boolean isOverrideIncludeSynonymsDefault() {_		return this.overrideIncludeSynonymsDefault__	};are,we,overriding,include,synonyms,default;public,boolean,is,override,include,synonyms,default,return,this,override,include,synonyms,default
TableMetaDataContext -> public boolean isOverrideIncludeSynonymsDefault();1521457491;Are we overriding include synonyms default?;public boolean isOverrideIncludeSynonymsDefault() {_		return this.overrideIncludeSynonymsDefault__	};are,we,overriding,include,synonyms,default;public,boolean,is,override,include,synonyms,default,return,this,override,include,synonyms,default
TableMetaDataContext -> public boolean isOverrideIncludeSynonymsDefault();1522103912;Are we overriding include synonyms default?;public boolean isOverrideIncludeSynonymsDefault() {_		return this.overrideIncludeSynonymsDefault__	};are,we,overriding,include,synonyms,default;public,boolean,is,override,include,synonyms,default,return,this,override,include,synonyms,default
TableMetaDataContext -> public boolean isOverrideIncludeSynonymsDefault();1528719423;Are we overriding include synonyms default?;public boolean isOverrideIncludeSynonymsDefault() {_		return this.overrideIncludeSynonymsDefault__	};are,we,overriding,include,synonyms,default;public,boolean,is,override,include,synonyms,default,return,this,override,include,synonyms,default
TableMetaDataContext -> public boolean isOverrideIncludeSynonymsDefault();1530174524;Are we overriding include synonyms default?;public boolean isOverrideIncludeSynonymsDefault() {_		return this.overrideIncludeSynonymsDefault__	};are,we,overriding,include,synonyms,default;public,boolean,is,override,include,synonyms,default,return,this,override,include,synonyms,default
TableMetaDataContext -> public boolean isOverrideIncludeSynonymsDefault();1532091916;Are we overriding include synonyms default?;public boolean isOverrideIncludeSynonymsDefault() {_		return this.overrideIncludeSynonymsDefault__	};are,we,overriding,include,synonyms,default;public,boolean,is,override,include,synonyms,default,return,this,override,include,synonyms,default
TableMetaDataContext -> public boolean isOverrideIncludeSynonymsDefault();1550238935;Are we overriding include synonyms default?;public boolean isOverrideIncludeSynonymsDefault() {_		return this.overrideIncludeSynonymsDefault__	};are,we,overriding,include,synonyms,default;public,boolean,is,override,include,synonyms,default,return,this,override,include,synonyms,default
