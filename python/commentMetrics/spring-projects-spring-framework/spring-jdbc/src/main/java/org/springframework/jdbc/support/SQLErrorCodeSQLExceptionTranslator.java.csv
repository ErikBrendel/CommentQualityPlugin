# id;timestamp;commentText;codeText;commentWords;codeWords
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(String dbName);1328020251;Create a SQL error code translator for the given database product name._Invoking this constructor will avoid obtaining a Connection from the_DataSource to get the metadata._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodesFactory_@see java.sql.DatabaseMetaData#getDatabaseProductName();public SQLErrorCodeSQLExceptionTranslator(String dbName) {_		this()__		setDatabaseProductName(dbName)__	};create,a,sql,error,code,translator,for,the,given,database,product,name,invoking,this,constructor,will,avoid,obtaining,a,connection,from,the,data,source,to,get,the,metadata,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,codes,factory,see,java,sql,database,meta,data,get,database,product,name;public,sqlerror,code,sqlexception,translator,string,db,name,this,set,database,product,name,db,name
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(String dbName);1356735495;Create a SQL error code translator for the given database product name._Invoking this constructor will avoid obtaining a Connection from the_DataSource to get the metadata._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodesFactory_@see java.sql.DatabaseMetaData#getDatabaseProductName();public SQLErrorCodeSQLExceptionTranslator(String dbName) {_		this()__		setDatabaseProductName(dbName)__	};create,a,sql,error,code,translator,for,the,given,database,product,name,invoking,this,constructor,will,avoid,obtaining,a,connection,from,the,data,source,to,get,the,metadata,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,codes,factory,see,java,sql,database,meta,data,get,database,product,name;public,sqlerror,code,sqlexception,translator,string,db,name,this,set,database,product,name,db,name
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(String dbName);1362408075;Create a SQL error code translator for the given database product name._Invoking this constructor will avoid obtaining a Connection from the_DataSource to get the metadata._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodesFactory_@see java.sql.DatabaseMetaData#getDatabaseProductName();public SQLErrorCodeSQLExceptionTranslator(String dbName) {_		this()__		setDatabaseProductName(dbName)__	};create,a,sql,error,code,translator,for,the,given,database,product,name,invoking,this,constructor,will,avoid,obtaining,a,connection,from,the,data,source,to,get,the,metadata,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,codes,factory,see,java,sql,database,meta,data,get,database,product,name;public,sqlerror,code,sqlexception,translator,string,db,name,this,set,database,product,name,db,name
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(String dbName);1363695025;Create a SQL error code translator for the given database product name._Invoking this constructor will avoid obtaining a Connection from the_DataSource to get the metadata._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodesFactory_@see java.sql.DatabaseMetaData#getDatabaseProductName();public SQLErrorCodeSQLExceptionTranslator(String dbName) {_		this()__		setDatabaseProductName(dbName)__	};create,a,sql,error,code,translator,for,the,given,database,product,name,invoking,this,constructor,will,avoid,obtaining,a,connection,from,the,data,source,to,get,the,metadata,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,codes,factory,see,java,sql,database,meta,data,get,database,product,name;public,sqlerror,code,sqlexception,translator,string,db,name,this,set,database,product,name,db,name
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(String dbName);1385412762;Create a SQL error code translator for the given database product name._Invoking this constructor will avoid obtaining a Connection from the_DataSource to get the metadata._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodesFactory_@see java.sql.DatabaseMetaData#getDatabaseProductName();public SQLErrorCodeSQLExceptionTranslator(String dbName) {_		this()__		setDatabaseProductName(dbName)__	};create,a,sql,error,code,translator,for,the,given,database,product,name,invoking,this,constructor,will,avoid,obtaining,a,connection,from,the,data,source,to,get,the,metadata,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,codes,factory,see,java,sql,database,meta,data,get,database,product,name;public,sqlerror,code,sqlexception,translator,string,db,name,this,set,database,product,name,db,name
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(String dbName);1432125256;Create a SQL error code translator for the given database product name._Invoking this constructor will avoid obtaining a Connection from the_DataSource to get the metadata._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodesFactory_@see java.sql.DatabaseMetaData#getDatabaseProductName();public SQLErrorCodeSQLExceptionTranslator(String dbName) {_		this()__		setDatabaseProductName(dbName)__	};create,a,sql,error,code,translator,for,the,given,database,product,name,invoking,this,constructor,will,avoid,obtaining,a,connection,from,the,data,source,to,get,the,metadata,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,codes,factory,see,java,sql,database,meta,data,get,database,product,name;public,sqlerror,code,sqlexception,translator,string,db,name,this,set,database,product,name,db,name
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(String dbName);1495868221;Create a SQL error code translator for the given database product name._Invoking this constructor will avoid obtaining a Connection from the_DataSource to get the metadata._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodesFactory_@see java.sql.DatabaseMetaData#getDatabaseProductName();public SQLErrorCodeSQLExceptionTranslator(String dbName) {_		this()__		setDatabaseProductName(dbName)__	};create,a,sql,error,code,translator,for,the,given,database,product,name,invoking,this,constructor,will,avoid,obtaining,a,connection,from,the,data,source,to,get,the,metadata,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,codes,factory,see,java,sql,database,meta,data,get,database,product,name;public,sqlerror,code,sqlexception,translator,string,db,name,this,set,database,product,name,db,name
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(String dbName);1496242568;Create a SQL error code translator for the given database product name._Invoking this constructor will avoid obtaining a Connection from the_DataSource to get the metadata._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodesFactory_@see java.sql.DatabaseMetaData#getDatabaseProductName();public SQLErrorCodeSQLExceptionTranslator(String dbName) {_		this()__		setDatabaseProductName(dbName)__	};create,a,sql,error,code,translator,for,the,given,database,product,name,invoking,this,constructor,will,avoid,obtaining,a,connection,from,the,data,source,to,get,the,metadata,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,codes,factory,see,java,sql,database,meta,data,get,database,product,name;public,sqlerror,code,sqlexception,translator,string,db,name,this,set,database,product,name,db,name
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(String dbName);1496837955;Create a SQL error code translator for the given database product name._Invoking this constructor will avoid obtaining a Connection from the_DataSource to get the metadata._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodesFactory_@see java.sql.DatabaseMetaData#getDatabaseProductName();public SQLErrorCodeSQLExceptionTranslator(String dbName) {_		this()__		setDatabaseProductName(dbName)__	};create,a,sql,error,code,translator,for,the,given,database,product,name,invoking,this,constructor,will,avoid,obtaining,a,connection,from,the,data,source,to,get,the,metadata,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,codes,factory,see,java,sql,database,meta,data,get,database,product,name;public,sqlerror,code,sqlexception,translator,string,db,name,this,set,database,product,name,db,name
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(String dbName);1498780456;Create a SQL error code translator for the given database product name._Invoking this constructor will avoid obtaining a Connection from the_DataSource to get the metadata._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodesFactory_@see java.sql.DatabaseMetaData#getDatabaseProductName();public SQLErrorCodeSQLExceptionTranslator(String dbName) {_		this()__		setDatabaseProductName(dbName)__	};create,a,sql,error,code,translator,for,the,given,database,product,name,invoking,this,constructor,will,avoid,obtaining,a,connection,from,the,data,source,to,get,the,metadata,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,codes,factory,see,java,sql,database,meta,data,get,database,product,name;public,sqlerror,code,sqlexception,translator,string,db,name,this,set,database,product,name,db,name
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(String dbName);1500448076;Create a SQL error code translator for the given database product name._Invoking this constructor will avoid obtaining a Connection from the_DataSource to get the metadata._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodesFactory_@see java.sql.DatabaseMetaData#getDatabaseProductName();public SQLErrorCodeSQLExceptionTranslator(String dbName) {_		this()__		setDatabaseProductName(dbName)__	};create,a,sql,error,code,translator,for,the,given,database,product,name,invoking,this,constructor,will,avoid,obtaining,a,connection,from,the,data,source,to,get,the,metadata,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,codes,factory,see,java,sql,database,meta,data,get,database,product,name;public,sqlerror,code,sqlexception,translator,string,db,name,this,set,database,product,name,db,name
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(String dbName);1502974979;Create a SQL error code translator for the given database product name._Invoking this constructor will avoid obtaining a Connection from the_DataSource to get the metadata._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodesFactory_@see java.sql.DatabaseMetaData#getDatabaseProductName();public SQLErrorCodeSQLExceptionTranslator(String dbName) {_		this()__		setDatabaseProductName(dbName)__	};create,a,sql,error,code,translator,for,the,given,database,product,name,invoking,this,constructor,will,avoid,obtaining,a,connection,from,the,data,source,to,get,the,metadata,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,codes,factory,see,java,sql,database,meta,data,get,database,product,name;public,sqlerror,code,sqlexception,translator,string,db,name,this,set,database,product,name,db,name
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(String dbName);1506097334;Create a SQL error code translator for the given database product name._Invoking this constructor will avoid obtaining a Connection from the_DataSource to get the metadata._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodesFactory_@see java.sql.DatabaseMetaData#getDatabaseProductName();public SQLErrorCodeSQLExceptionTranslator(String dbName) {_		this()__		setDatabaseProductName(dbName)__	};create,a,sql,error,code,translator,for,the,given,database,product,name,invoking,this,constructor,will,avoid,obtaining,a,connection,from,the,data,source,to,get,the,metadata,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,codes,factory,see,java,sql,database,meta,data,get,database,product,name;public,sqlerror,code,sqlexception,translator,string,db,name,this,set,database,product,name,db,name
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(String dbName);1520529117;Create a SQL error code translator for the given database product name._Invoking this constructor will avoid obtaining a Connection from the_DataSource to get the metadata._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodesFactory_@see java.sql.DatabaseMetaData#getDatabaseProductName();public SQLErrorCodeSQLExceptionTranslator(String dbName) {_		this()__		setDatabaseProductName(dbName)__	};create,a,sql,error,code,translator,for,the,given,database,product,name,invoking,this,constructor,will,avoid,obtaining,a,connection,from,the,data,source,to,get,the,metadata,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,codes,factory,see,java,sql,database,meta,data,get,database,product,name;public,sqlerror,code,sqlexception,translator,string,db,name,this,set,database,product,name,db,name
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(String dbName);1521457504;Create a SQL error code translator for the given database product name._Invoking this constructor will avoid obtaining a Connection from the_DataSource to get the meta-data._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodesFactory_@see java.sql.DatabaseMetaData#getDatabaseProductName();public SQLErrorCodeSQLExceptionTranslator(String dbName) {_		this()__		setDatabaseProductName(dbName)__	};create,a,sql,error,code,translator,for,the,given,database,product,name,invoking,this,constructor,will,avoid,obtaining,a,connection,from,the,data,source,to,get,the,meta,data,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,codes,factory,see,java,sql,database,meta,data,get,database,product,name;public,sqlerror,code,sqlexception,translator,string,db,name,this,set,database,product,name,db,name
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(String dbName);1530174524;Create a SQL error code translator for the given database product name._Invoking this constructor will avoid obtaining a Connection from the_DataSource to get the meta-data._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodesFactory_@see java.sql.DatabaseMetaData#getDatabaseProductName();public SQLErrorCodeSQLExceptionTranslator(String dbName) {_		this()__		setDatabaseProductName(dbName)__	};create,a,sql,error,code,translator,for,the,given,database,product,name,invoking,this,constructor,will,avoid,obtaining,a,connection,from,the,data,source,to,get,the,meta,data,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,codes,factory,see,java,sql,database,meta,data,get,database,product,name;public,sqlerror,code,sqlexception,translator,string,db,name,this,set,database,product,name,db,name
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(String dbName);1531144424;Create a SQL error code translator for the given database product name._Invoking this constructor will avoid obtaining a Connection from the_DataSource to get the meta-data._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodesFactory_@see java.sql.DatabaseMetaData#getDatabaseProductName();public SQLErrorCodeSQLExceptionTranslator(String dbName) {_		this()__		setDatabaseProductName(dbName)__	};create,a,sql,error,code,translator,for,the,given,database,product,name,invoking,this,constructor,will,avoid,obtaining,a,connection,from,the,data,source,to,get,the,meta,data,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,codes,factory,see,java,sql,database,meta,data,get,database,product,name;public,sqlerror,code,sqlexception,translator,string,db,name,this,set,database,product,name,db,name
SQLErrorCodeSQLExceptionTranslator -> protected DataAccessException createCustomException( 			String task, String sql, SQLException sqlEx, Class exceptionClass);1328020251;Create a custom DataAccessException, based on a given exception_class from a CustomSQLErrorCodesTranslation definition._@param task readable text describing the task being attempted_@param sql SQL query or update that caused the problem. May be <code>null</code>._@param sqlEx the offending SQLException_@param exceptionClass the exception class to use, as defined in the_CustomSQLErrorCodesTranslation definition_@return null if the custom exception could not be created, otherwise_the resulting DataAccessException. This exception should include the_sqlEx parameter as a nested root cause._@see CustomSQLErrorCodesTranslation#setExceptionClass;protected DataAccessException createCustomException(_			String task, String sql, SQLException sqlEx, Class exceptionClass) {__		_		try {_			int constructorType = 0__			Constructor[] constructors = exceptionClass.getConstructors()__			for (int i = 0_ i < constructors.length_ i++) {_				Class[] parameterTypes = constructors[i].getParameterTypes()__				if (parameterTypes.length == 1 && parameterTypes[0].equals(String.class)) {_					if (constructorType < MESSAGE_ONLY_CONSTRUCTOR)_						constructorType = MESSAGE_ONLY_CONSTRUCTOR__				}_				if (parameterTypes.length == 2 && parameterTypes[0].equals(String.class) &&_						parameterTypes[1].equals(Throwable.class)) {_					if (constructorType < MESSAGE_THROWABLE_CONSTRUCTOR)_						constructorType = MESSAGE_THROWABLE_CONSTRUCTOR__				}_				if (parameterTypes.length == 2 && parameterTypes[0].equals(String.class) &&_						parameterTypes[1].equals(SQLException.class)) {_					if (constructorType < MESSAGE_SQLEX_CONSTRUCTOR)_						constructorType = MESSAGE_SQLEX_CONSTRUCTOR__				}_				if (parameterTypes.length == 3 && parameterTypes[0].equals(String.class) &&_						parameterTypes[1].equals(String.class) && parameterTypes[2].equals(Throwable.class)) {_					if (constructorType < MESSAGE_SQL_THROWABLE_CONSTRUCTOR)_						constructorType = MESSAGE_SQL_THROWABLE_CONSTRUCTOR__				}_				if (parameterTypes.length == 3 && parameterTypes[0].equals(String.class) &&_						parameterTypes[1].equals(String.class) && parameterTypes[2].equals(SQLException.class)) {_					if (constructorType < MESSAGE_SQL_SQLEX_CONSTRUCTOR)_						constructorType = MESSAGE_SQL_SQLEX_CONSTRUCTOR__				}_			}__			_			Constructor exceptionConstructor = null__			switch (constructorType) {_				case MESSAGE_SQL_SQLEX_CONSTRUCTOR:_					Class[] messageAndSqlAndSqlExArgsClass = new Class[] {String.class, String.class, SQLException.class}__					Object[] messageAndSqlAndSqlExArgs = new Object[] {task, sql, sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndSqlExArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlAndSqlExArgs)__				case MESSAGE_SQL_THROWABLE_CONSTRUCTOR:_					Class[] messageAndSqlAndThrowableArgsClass = new Class[] {String.class, String.class, Throwable.class}__					Object[] messageAndSqlAndThrowableArgs = new Object[] {task, sql, sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndThrowableArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlAndThrowableArgs)__				case MESSAGE_SQLEX_CONSTRUCTOR:_					Class[] messageAndSqlExArgsClass = new Class[] {String.class, SQLException.class}__					Object[] messageAndSqlExArgs = new Object[] {task + ": " + sqlEx.getMessage(), sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlExArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlExArgs)__				case MESSAGE_THROWABLE_CONSTRUCTOR:_					Class[] messageAndThrowableArgsClass = new Class[] {String.class, Throwable.class}__					Object[] messageAndThrowableArgs = new Object[] {task + ": " + sqlEx.getMessage(), sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndThrowableArgsClass)__					return (DataAccessException)exceptionConstructor.newInstance(messageAndThrowableArgs)__				case MESSAGE_ONLY_CONSTRUCTOR:_					Class[] messageOnlyArgsClass = new Class[] {String.class}__					Object[] messageOnlyArgs = new Object[] {task + ": " + sqlEx.getMessage()}__					exceptionConstructor = exceptionClass.getConstructor(messageOnlyArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageOnlyArgs)__				default:_					if (logger.isWarnEnabled()) {_						logger.warn("Unable to find appropriate constructor of custom exception class [" +_								exceptionClass.getName() + "]")__					}_					return null__				}_		}_		catch (Throwable ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Unable to instantiate custom exception class [" + exceptionClass.getName() + "]", ex)__			}_			return null__		}_	};create,a,custom,data,access,exception,based,on,a,given,exception,class,from,a,custom,sqlerror,codes,translation,definition,param,task,readable,text,describing,the,task,being,attempted,param,sql,sql,query,or,update,that,caused,the,problem,may,be,code,null,code,param,sql,ex,the,offending,sqlexception,param,exception,class,the,exception,class,to,use,as,defined,in,the,custom,sqlerror,codes,translation,definition,return,null,if,the,custom,exception,could,not,be,created,otherwise,the,resulting,data,access,exception,this,exception,should,include,the,sql,ex,parameter,as,a,nested,root,cause,see,custom,sqlerror,codes,translation,set,exception,class;protected,data,access,exception,create,custom,exception,string,task,string,sql,sqlexception,sql,ex,class,exception,class,try,int,constructor,type,0,constructor,constructors,exception,class,get,constructors,for,int,i,0,i,constructors,length,i,class,parameter,types,constructors,i,get,parameter,types,if,parameter,types,length,1,parameter,types,0,equals,string,class,if,constructor,type,constructor,type,if,parameter,types,length,2,parameter,types,0,equals,string,class,parameter,types,1,equals,throwable,class,if,constructor,type,constructor,type,if,parameter,types,length,2,parameter,types,0,equals,string,class,parameter,types,1,equals,sqlexception,class,if,constructor,type,constructor,type,if,parameter,types,length,3,parameter,types,0,equals,string,class,parameter,types,1,equals,string,class,parameter,types,2,equals,throwable,class,if,constructor,type,constructor,type,if,parameter,types,length,3,parameter,types,0,equals,string,class,parameter,types,1,equals,string,class,parameter,types,2,equals,sqlexception,class,if,constructor,type,constructor,type,constructor,exception,constructor,null,switch,constructor,type,case,class,message,and,sql,and,sql,ex,args,class,new,class,string,class,string,class,sqlexception,class,object,message,and,sql,and,sql,ex,args,new,object,task,sql,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,and,sql,ex,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,and,sql,ex,args,case,class,message,and,sql,and,throwable,args,class,new,class,string,class,string,class,throwable,class,object,message,and,sql,and,throwable,args,new,object,task,sql,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,and,throwable,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,and,throwable,args,case,class,message,and,sql,ex,args,class,new,class,string,class,sqlexception,class,object,message,and,sql,ex,args,new,object,task,sql,ex,get,message,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,ex,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,ex,args,case,class,message,and,throwable,args,class,new,class,string,class,throwable,class,object,message,and,throwable,args,new,object,task,sql,ex,get,message,sql,ex,exception,constructor,exception,class,get,constructor,message,and,throwable,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,throwable,args,case,class,message,only,args,class,new,class,string,class,object,message,only,args,new,object,task,sql,ex,get,message,exception,constructor,exception,class,get,constructor,message,only,args,class,return,data,access,exception,exception,constructor,new,instance,message,only,args,default,if,logger,is,warn,enabled,logger,warn,unable,to,find,appropriate,constructor,of,custom,exception,class,exception,class,get,name,return,null,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,unable,to,instantiate,custom,exception,class,exception,class,get,name,ex,return,null
SQLErrorCodeSQLExceptionTranslator -> protected DataAccessException createCustomException( 			String task, String sql, SQLException sqlEx, Class exceptionClass);1356735495;Create a custom DataAccessException, based on a given exception_class from a CustomSQLErrorCodesTranslation definition._@param task readable text describing the task being attempted_@param sql SQL query or update that caused the problem. May be {@code null}._@param sqlEx the offending SQLException_@param exceptionClass the exception class to use, as defined in the_CustomSQLErrorCodesTranslation definition_@return null if the custom exception could not be created, otherwise_the resulting DataAccessException. This exception should include the_sqlEx parameter as a nested root cause._@see CustomSQLErrorCodesTranslation#setExceptionClass;protected DataAccessException createCustomException(_			String task, String sql, SQLException sqlEx, Class exceptionClass) {__		_		try {_			int constructorType = 0__			Constructor[] constructors = exceptionClass.getConstructors()__			for (int i = 0_ i < constructors.length_ i++) {_				Class[] parameterTypes = constructors[i].getParameterTypes()__				if (parameterTypes.length == 1 && parameterTypes[0].equals(String.class)) {_					if (constructorType < MESSAGE_ONLY_CONSTRUCTOR)_						constructorType = MESSAGE_ONLY_CONSTRUCTOR__				}_				if (parameterTypes.length == 2 && parameterTypes[0].equals(String.class) &&_						parameterTypes[1].equals(Throwable.class)) {_					if (constructorType < MESSAGE_THROWABLE_CONSTRUCTOR)_						constructorType = MESSAGE_THROWABLE_CONSTRUCTOR__				}_				if (parameterTypes.length == 2 && parameterTypes[0].equals(String.class) &&_						parameterTypes[1].equals(SQLException.class)) {_					if (constructorType < MESSAGE_SQLEX_CONSTRUCTOR)_						constructorType = MESSAGE_SQLEX_CONSTRUCTOR__				}_				if (parameterTypes.length == 3 && parameterTypes[0].equals(String.class) &&_						parameterTypes[1].equals(String.class) && parameterTypes[2].equals(Throwable.class)) {_					if (constructorType < MESSAGE_SQL_THROWABLE_CONSTRUCTOR)_						constructorType = MESSAGE_SQL_THROWABLE_CONSTRUCTOR__				}_				if (parameterTypes.length == 3 && parameterTypes[0].equals(String.class) &&_						parameterTypes[1].equals(String.class) && parameterTypes[2].equals(SQLException.class)) {_					if (constructorType < MESSAGE_SQL_SQLEX_CONSTRUCTOR)_						constructorType = MESSAGE_SQL_SQLEX_CONSTRUCTOR__				}_			}__			_			Constructor exceptionConstructor = null__			switch (constructorType) {_				case MESSAGE_SQL_SQLEX_CONSTRUCTOR:_					Class[] messageAndSqlAndSqlExArgsClass = new Class[] {String.class, String.class, SQLException.class}__					Object[] messageAndSqlAndSqlExArgs = new Object[] {task, sql, sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndSqlExArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlAndSqlExArgs)__				case MESSAGE_SQL_THROWABLE_CONSTRUCTOR:_					Class[] messageAndSqlAndThrowableArgsClass = new Class[] {String.class, String.class, Throwable.class}__					Object[] messageAndSqlAndThrowableArgs = new Object[] {task, sql, sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndThrowableArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlAndThrowableArgs)__				case MESSAGE_SQLEX_CONSTRUCTOR:_					Class[] messageAndSqlExArgsClass = new Class[] {String.class, SQLException.class}__					Object[] messageAndSqlExArgs = new Object[] {task + ": " + sqlEx.getMessage(), sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlExArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlExArgs)__				case MESSAGE_THROWABLE_CONSTRUCTOR:_					Class[] messageAndThrowableArgsClass = new Class[] {String.class, Throwable.class}__					Object[] messageAndThrowableArgs = new Object[] {task + ": " + sqlEx.getMessage(), sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndThrowableArgsClass)__					return (DataAccessException)exceptionConstructor.newInstance(messageAndThrowableArgs)__				case MESSAGE_ONLY_CONSTRUCTOR:_					Class[] messageOnlyArgsClass = new Class[] {String.class}__					Object[] messageOnlyArgs = new Object[] {task + ": " + sqlEx.getMessage()}__					exceptionConstructor = exceptionClass.getConstructor(messageOnlyArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageOnlyArgs)__				default:_					if (logger.isWarnEnabled()) {_						logger.warn("Unable to find appropriate constructor of custom exception class [" +_								exceptionClass.getName() + "]")__					}_					return null__				}_		}_		catch (Throwable ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Unable to instantiate custom exception class [" + exceptionClass.getName() + "]", ex)__			}_			return null__		}_	};create,a,custom,data,access,exception,based,on,a,given,exception,class,from,a,custom,sqlerror,codes,translation,definition,param,task,readable,text,describing,the,task,being,attempted,param,sql,sql,query,or,update,that,caused,the,problem,may,be,code,null,param,sql,ex,the,offending,sqlexception,param,exception,class,the,exception,class,to,use,as,defined,in,the,custom,sqlerror,codes,translation,definition,return,null,if,the,custom,exception,could,not,be,created,otherwise,the,resulting,data,access,exception,this,exception,should,include,the,sql,ex,parameter,as,a,nested,root,cause,see,custom,sqlerror,codes,translation,set,exception,class;protected,data,access,exception,create,custom,exception,string,task,string,sql,sqlexception,sql,ex,class,exception,class,try,int,constructor,type,0,constructor,constructors,exception,class,get,constructors,for,int,i,0,i,constructors,length,i,class,parameter,types,constructors,i,get,parameter,types,if,parameter,types,length,1,parameter,types,0,equals,string,class,if,constructor,type,constructor,type,if,parameter,types,length,2,parameter,types,0,equals,string,class,parameter,types,1,equals,throwable,class,if,constructor,type,constructor,type,if,parameter,types,length,2,parameter,types,0,equals,string,class,parameter,types,1,equals,sqlexception,class,if,constructor,type,constructor,type,if,parameter,types,length,3,parameter,types,0,equals,string,class,parameter,types,1,equals,string,class,parameter,types,2,equals,throwable,class,if,constructor,type,constructor,type,if,parameter,types,length,3,parameter,types,0,equals,string,class,parameter,types,1,equals,string,class,parameter,types,2,equals,sqlexception,class,if,constructor,type,constructor,type,constructor,exception,constructor,null,switch,constructor,type,case,class,message,and,sql,and,sql,ex,args,class,new,class,string,class,string,class,sqlexception,class,object,message,and,sql,and,sql,ex,args,new,object,task,sql,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,and,sql,ex,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,and,sql,ex,args,case,class,message,and,sql,and,throwable,args,class,new,class,string,class,string,class,throwable,class,object,message,and,sql,and,throwable,args,new,object,task,sql,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,and,throwable,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,and,throwable,args,case,class,message,and,sql,ex,args,class,new,class,string,class,sqlexception,class,object,message,and,sql,ex,args,new,object,task,sql,ex,get,message,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,ex,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,ex,args,case,class,message,and,throwable,args,class,new,class,string,class,throwable,class,object,message,and,throwable,args,new,object,task,sql,ex,get,message,sql,ex,exception,constructor,exception,class,get,constructor,message,and,throwable,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,throwable,args,case,class,message,only,args,class,new,class,string,class,object,message,only,args,new,object,task,sql,ex,get,message,exception,constructor,exception,class,get,constructor,message,only,args,class,return,data,access,exception,exception,constructor,new,instance,message,only,args,default,if,logger,is,warn,enabled,logger,warn,unable,to,find,appropriate,constructor,of,custom,exception,class,exception,class,get,name,return,null,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,unable,to,instantiate,custom,exception,class,exception,class,get,name,ex,return,null
SQLErrorCodeSQLExceptionTranslator -> protected DataAccessException createCustomException( 			String task, String sql, SQLException sqlEx, Class exceptionClass);1362408075;Create a custom DataAccessException, based on a given exception_class from a CustomSQLErrorCodesTranslation definition._@param task readable text describing the task being attempted_@param sql SQL query or update that caused the problem. May be {@code null}._@param sqlEx the offending SQLException_@param exceptionClass the exception class to use, as defined in the_CustomSQLErrorCodesTranslation definition_@return null if the custom exception could not be created, otherwise_the resulting DataAccessException. This exception should include the_sqlEx parameter as a nested root cause._@see CustomSQLErrorCodesTranslation#setExceptionClass;protected DataAccessException createCustomException(_			String task, String sql, SQLException sqlEx, Class exceptionClass) {__		_		try {_			int constructorType = 0__			Constructor[] constructors = exceptionClass.getConstructors()__			for (Constructor constructor : constructors) {_				Class[] parameterTypes = constructor.getParameterTypes()__				if (parameterTypes.length == 1 && parameterTypes[0].equals(String.class)) {_					if (constructorType < MESSAGE_ONLY_CONSTRUCTOR)_						constructorType = MESSAGE_ONLY_CONSTRUCTOR__				}_				if (parameterTypes.length == 2 && parameterTypes[0].equals(String.class) &&_						parameterTypes[1].equals(Throwable.class)) {_					if (constructorType < MESSAGE_THROWABLE_CONSTRUCTOR)_						constructorType = MESSAGE_THROWABLE_CONSTRUCTOR__				}_				if (parameterTypes.length == 2 && parameterTypes[0].equals(String.class) &&_						parameterTypes[1].equals(SQLException.class)) {_					if (constructorType < MESSAGE_SQLEX_CONSTRUCTOR)_						constructorType = MESSAGE_SQLEX_CONSTRUCTOR__				}_				if (parameterTypes.length == 3 && parameterTypes[0].equals(String.class) &&_						parameterTypes[1].equals(String.class) && parameterTypes[2].equals(Throwable.class)) {_					if (constructorType < MESSAGE_SQL_THROWABLE_CONSTRUCTOR)_						constructorType = MESSAGE_SQL_THROWABLE_CONSTRUCTOR__				}_				if (parameterTypes.length == 3 && parameterTypes[0].equals(String.class) &&_						parameterTypes[1].equals(String.class) && parameterTypes[2].equals(SQLException.class)) {_					if (constructorType < MESSAGE_SQL_SQLEX_CONSTRUCTOR)_						constructorType = MESSAGE_SQL_SQLEX_CONSTRUCTOR__				}_			}__			_			Constructor exceptionConstructor__			switch (constructorType) {_				case MESSAGE_SQL_SQLEX_CONSTRUCTOR:_					Class[] messageAndSqlAndSqlExArgsClass = new Class[] {String.class, String.class, SQLException.class}__					Object[] messageAndSqlAndSqlExArgs = new Object[] {task, sql, sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndSqlExArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlAndSqlExArgs)__				case MESSAGE_SQL_THROWABLE_CONSTRUCTOR:_					Class[] messageAndSqlAndThrowableArgsClass = new Class[] {String.class, String.class, Throwable.class}__					Object[] messageAndSqlAndThrowableArgs = new Object[] {task, sql, sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndThrowableArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlAndThrowableArgs)__				case MESSAGE_SQLEX_CONSTRUCTOR:_					Class[] messageAndSqlExArgsClass = new Class[] {String.class, SQLException.class}__					Object[] messageAndSqlExArgs = new Object[] {task + ": " + sqlEx.getMessage(), sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlExArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlExArgs)__				case MESSAGE_THROWABLE_CONSTRUCTOR:_					Class[] messageAndThrowableArgsClass = new Class[] {String.class, Throwable.class}__					Object[] messageAndThrowableArgs = new Object[] {task + ": " + sqlEx.getMessage(), sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndThrowableArgsClass)__					return (DataAccessException)exceptionConstructor.newInstance(messageAndThrowableArgs)__				case MESSAGE_ONLY_CONSTRUCTOR:_					Class[] messageOnlyArgsClass = new Class[] {String.class}__					Object[] messageOnlyArgs = new Object[] {task + ": " + sqlEx.getMessage()}__					exceptionConstructor = exceptionClass.getConstructor(messageOnlyArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageOnlyArgs)__				default:_					if (logger.isWarnEnabled()) {_						logger.warn("Unable to find appropriate constructor of custom exception class [" +_								exceptionClass.getName() + "]")__					}_					return null__				}_		}_		catch (Throwable ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Unable to instantiate custom exception class [" + exceptionClass.getName() + "]", ex)__			}_			return null__		}_	};create,a,custom,data,access,exception,based,on,a,given,exception,class,from,a,custom,sqlerror,codes,translation,definition,param,task,readable,text,describing,the,task,being,attempted,param,sql,sql,query,or,update,that,caused,the,problem,may,be,code,null,param,sql,ex,the,offending,sqlexception,param,exception,class,the,exception,class,to,use,as,defined,in,the,custom,sqlerror,codes,translation,definition,return,null,if,the,custom,exception,could,not,be,created,otherwise,the,resulting,data,access,exception,this,exception,should,include,the,sql,ex,parameter,as,a,nested,root,cause,see,custom,sqlerror,codes,translation,set,exception,class;protected,data,access,exception,create,custom,exception,string,task,string,sql,sqlexception,sql,ex,class,exception,class,try,int,constructor,type,0,constructor,constructors,exception,class,get,constructors,for,constructor,constructor,constructors,class,parameter,types,constructor,get,parameter,types,if,parameter,types,length,1,parameter,types,0,equals,string,class,if,constructor,type,constructor,type,if,parameter,types,length,2,parameter,types,0,equals,string,class,parameter,types,1,equals,throwable,class,if,constructor,type,constructor,type,if,parameter,types,length,2,parameter,types,0,equals,string,class,parameter,types,1,equals,sqlexception,class,if,constructor,type,constructor,type,if,parameter,types,length,3,parameter,types,0,equals,string,class,parameter,types,1,equals,string,class,parameter,types,2,equals,throwable,class,if,constructor,type,constructor,type,if,parameter,types,length,3,parameter,types,0,equals,string,class,parameter,types,1,equals,string,class,parameter,types,2,equals,sqlexception,class,if,constructor,type,constructor,type,constructor,exception,constructor,switch,constructor,type,case,class,message,and,sql,and,sql,ex,args,class,new,class,string,class,string,class,sqlexception,class,object,message,and,sql,and,sql,ex,args,new,object,task,sql,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,and,sql,ex,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,and,sql,ex,args,case,class,message,and,sql,and,throwable,args,class,new,class,string,class,string,class,throwable,class,object,message,and,sql,and,throwable,args,new,object,task,sql,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,and,throwable,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,and,throwable,args,case,class,message,and,sql,ex,args,class,new,class,string,class,sqlexception,class,object,message,and,sql,ex,args,new,object,task,sql,ex,get,message,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,ex,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,ex,args,case,class,message,and,throwable,args,class,new,class,string,class,throwable,class,object,message,and,throwable,args,new,object,task,sql,ex,get,message,sql,ex,exception,constructor,exception,class,get,constructor,message,and,throwable,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,throwable,args,case,class,message,only,args,class,new,class,string,class,object,message,only,args,new,object,task,sql,ex,get,message,exception,constructor,exception,class,get,constructor,message,only,args,class,return,data,access,exception,exception,constructor,new,instance,message,only,args,default,if,logger,is,warn,enabled,logger,warn,unable,to,find,appropriate,constructor,of,custom,exception,class,exception,class,get,name,return,null,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,unable,to,instantiate,custom,exception,class,exception,class,get,name,ex,return,null
SQLErrorCodeSQLExceptionTranslator -> protected DataAccessException createCustomException( 			String task, String sql, SQLException sqlEx, Class exceptionClass);1363695025;Create a custom DataAccessException, based on a given exception_class from a CustomSQLErrorCodesTranslation definition._@param task readable text describing the task being attempted_@param sql SQL query or update that caused the problem. May be {@code null}._@param sqlEx the offending SQLException_@param exceptionClass the exception class to use, as defined in the_CustomSQLErrorCodesTranslation definition_@return null if the custom exception could not be created, otherwise_the resulting DataAccessException. This exception should include the_sqlEx parameter as a nested root cause._@see CustomSQLErrorCodesTranslation#setExceptionClass;protected DataAccessException createCustomException(_			String task, String sql, SQLException sqlEx, Class exceptionClass) {__		_		try {_			int constructorType = 0__			Constructor[] constructors = exceptionClass.getConstructors()__			for (Constructor constructor : constructors) {_				Class[] parameterTypes = constructor.getParameterTypes()__				if (parameterTypes.length == 1 && parameterTypes[0].equals(String.class)) {_					if (constructorType < MESSAGE_ONLY_CONSTRUCTOR)_						constructorType = MESSAGE_ONLY_CONSTRUCTOR__				}_				if (parameterTypes.length == 2 && parameterTypes[0].equals(String.class) &&_						parameterTypes[1].equals(Throwable.class)) {_					if (constructorType < MESSAGE_THROWABLE_CONSTRUCTOR)_						constructorType = MESSAGE_THROWABLE_CONSTRUCTOR__				}_				if (parameterTypes.length == 2 && parameterTypes[0].equals(String.class) &&_						parameterTypes[1].equals(SQLException.class)) {_					if (constructorType < MESSAGE_SQLEX_CONSTRUCTOR)_						constructorType = MESSAGE_SQLEX_CONSTRUCTOR__				}_				if (parameterTypes.length == 3 && parameterTypes[0].equals(String.class) &&_						parameterTypes[1].equals(String.class) && parameterTypes[2].equals(Throwable.class)) {_					if (constructorType < MESSAGE_SQL_THROWABLE_CONSTRUCTOR)_						constructorType = MESSAGE_SQL_THROWABLE_CONSTRUCTOR__				}_				if (parameterTypes.length == 3 && parameterTypes[0].equals(String.class) &&_						parameterTypes[1].equals(String.class) && parameterTypes[2].equals(SQLException.class)) {_					if (constructorType < MESSAGE_SQL_SQLEX_CONSTRUCTOR)_						constructorType = MESSAGE_SQL_SQLEX_CONSTRUCTOR__				}_			}__			_			Constructor exceptionConstructor__			switch (constructorType) {_				case MESSAGE_SQL_SQLEX_CONSTRUCTOR:_					Class[] messageAndSqlAndSqlExArgsClass = new Class[] {String.class, String.class, SQLException.class}__					Object[] messageAndSqlAndSqlExArgs = new Object[] {task, sql, sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndSqlExArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlAndSqlExArgs)__				case MESSAGE_SQL_THROWABLE_CONSTRUCTOR:_					Class[] messageAndSqlAndThrowableArgsClass = new Class[] {String.class, String.class, Throwable.class}__					Object[] messageAndSqlAndThrowableArgs = new Object[] {task, sql, sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndThrowableArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlAndThrowableArgs)__				case MESSAGE_SQLEX_CONSTRUCTOR:_					Class[] messageAndSqlExArgsClass = new Class[] {String.class, SQLException.class}__					Object[] messageAndSqlExArgs = new Object[] {task + ": " + sqlEx.getMessage(), sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlExArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlExArgs)__				case MESSAGE_THROWABLE_CONSTRUCTOR:_					Class[] messageAndThrowableArgsClass = new Class[] {String.class, Throwable.class}__					Object[] messageAndThrowableArgs = new Object[] {task + ": " + sqlEx.getMessage(), sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndThrowableArgsClass)__					return (DataAccessException)exceptionConstructor.newInstance(messageAndThrowableArgs)__				case MESSAGE_ONLY_CONSTRUCTOR:_					Class[] messageOnlyArgsClass = new Class[] {String.class}__					Object[] messageOnlyArgs = new Object[] {task + ": " + sqlEx.getMessage()}__					exceptionConstructor = exceptionClass.getConstructor(messageOnlyArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageOnlyArgs)__				default:_					if (logger.isWarnEnabled()) {_						logger.warn("Unable to find appropriate constructor of custom exception class [" +_								exceptionClass.getName() + "]")__					}_					return null__				}_		}_		catch (Throwable ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Unable to instantiate custom exception class [" + exceptionClass.getName() + "]", ex)__			}_			return null__		}_	};create,a,custom,data,access,exception,based,on,a,given,exception,class,from,a,custom,sqlerror,codes,translation,definition,param,task,readable,text,describing,the,task,being,attempted,param,sql,sql,query,or,update,that,caused,the,problem,may,be,code,null,param,sql,ex,the,offending,sqlexception,param,exception,class,the,exception,class,to,use,as,defined,in,the,custom,sqlerror,codes,translation,definition,return,null,if,the,custom,exception,could,not,be,created,otherwise,the,resulting,data,access,exception,this,exception,should,include,the,sql,ex,parameter,as,a,nested,root,cause,see,custom,sqlerror,codes,translation,set,exception,class;protected,data,access,exception,create,custom,exception,string,task,string,sql,sqlexception,sql,ex,class,exception,class,try,int,constructor,type,0,constructor,constructors,exception,class,get,constructors,for,constructor,constructor,constructors,class,parameter,types,constructor,get,parameter,types,if,parameter,types,length,1,parameter,types,0,equals,string,class,if,constructor,type,constructor,type,if,parameter,types,length,2,parameter,types,0,equals,string,class,parameter,types,1,equals,throwable,class,if,constructor,type,constructor,type,if,parameter,types,length,2,parameter,types,0,equals,string,class,parameter,types,1,equals,sqlexception,class,if,constructor,type,constructor,type,if,parameter,types,length,3,parameter,types,0,equals,string,class,parameter,types,1,equals,string,class,parameter,types,2,equals,throwable,class,if,constructor,type,constructor,type,if,parameter,types,length,3,parameter,types,0,equals,string,class,parameter,types,1,equals,string,class,parameter,types,2,equals,sqlexception,class,if,constructor,type,constructor,type,constructor,exception,constructor,switch,constructor,type,case,class,message,and,sql,and,sql,ex,args,class,new,class,string,class,string,class,sqlexception,class,object,message,and,sql,and,sql,ex,args,new,object,task,sql,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,and,sql,ex,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,and,sql,ex,args,case,class,message,and,sql,and,throwable,args,class,new,class,string,class,string,class,throwable,class,object,message,and,sql,and,throwable,args,new,object,task,sql,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,and,throwable,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,and,throwable,args,case,class,message,and,sql,ex,args,class,new,class,string,class,sqlexception,class,object,message,and,sql,ex,args,new,object,task,sql,ex,get,message,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,ex,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,ex,args,case,class,message,and,throwable,args,class,new,class,string,class,throwable,class,object,message,and,throwable,args,new,object,task,sql,ex,get,message,sql,ex,exception,constructor,exception,class,get,constructor,message,and,throwable,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,throwable,args,case,class,message,only,args,class,new,class,string,class,object,message,only,args,new,object,task,sql,ex,get,message,exception,constructor,exception,class,get,constructor,message,only,args,class,return,data,access,exception,exception,constructor,new,instance,message,only,args,default,if,logger,is,warn,enabled,logger,warn,unable,to,find,appropriate,constructor,of,custom,exception,class,exception,class,get,name,return,null,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,unable,to,instantiate,custom,exception,class,exception,class,get,name,ex,return,null
SQLErrorCodeSQLExceptionTranslator -> public void setSqlErrorCodes(SQLErrorCodes sec);1328020251;Set custom error codes to be used for translation._@param sec custom error codes to use;public void setSqlErrorCodes(SQLErrorCodes sec) {_		this.sqlErrorCodes = sec__	};set,custom,error,codes,to,be,used,for,translation,param,sec,custom,error,codes,to,use;public,void,set,sql,error,codes,sqlerror,codes,sec,this,sql,error,codes,sec
SQLErrorCodeSQLExceptionTranslator -> public void setSqlErrorCodes(SQLErrorCodes sec);1356735495;Set custom error codes to be used for translation._@param sec custom error codes to use;public void setSqlErrorCodes(SQLErrorCodes sec) {_		this.sqlErrorCodes = sec__	};set,custom,error,codes,to,be,used,for,translation,param,sec,custom,error,codes,to,use;public,void,set,sql,error,codes,sqlerror,codes,sec,this,sql,error,codes,sec
SQLErrorCodeSQLExceptionTranslator -> public void setSqlErrorCodes(SQLErrorCodes sec);1362408075;Set custom error codes to be used for translation._@param sec custom error codes to use;public void setSqlErrorCodes(SQLErrorCodes sec) {_		this.sqlErrorCodes = sec__	};set,custom,error,codes,to,be,used,for,translation,param,sec,custom,error,codes,to,use;public,void,set,sql,error,codes,sqlerror,codes,sec,this,sql,error,codes,sec
SQLErrorCodeSQLExceptionTranslator -> public void setSqlErrorCodes(SQLErrorCodes sec);1363695025;Set custom error codes to be used for translation._@param sec custom error codes to use;public void setSqlErrorCodes(SQLErrorCodes sec) {_		this.sqlErrorCodes = sec__	};set,custom,error,codes,to,be,used,for,translation,param,sec,custom,error,codes,to,use;public,void,set,sql,error,codes,sqlerror,codes,sec,this,sql,error,codes,sec
SQLErrorCodeSQLExceptionTranslator -> public void setSqlErrorCodes(SQLErrorCodes sec);1385412762;Set custom error codes to be used for translation._@param sec custom error codes to use;public void setSqlErrorCodes(SQLErrorCodes sec) {_		this.sqlErrorCodes = sec__	};set,custom,error,codes,to,be,used,for,translation,param,sec,custom,error,codes,to,use;public,void,set,sql,error,codes,sqlerror,codes,sec,this,sql,error,codes,sec
SQLErrorCodeSQLExceptionTranslator -> public void setSqlErrorCodes(SQLErrorCodes sec);1432125256;Set custom error codes to be used for translation._@param sec custom error codes to use;public void setSqlErrorCodes(SQLErrorCodes sec) {_		this.sqlErrorCodes = sec__	};set,custom,error,codes,to,be,used,for,translation,param,sec,custom,error,codes,to,use;public,void,set,sql,error,codes,sqlerror,codes,sec,this,sql,error,codes,sec
SQLErrorCodeSQLExceptionTranslator -> public void setSqlErrorCodes(SQLErrorCodes sec);1495868221;Set custom error codes to be used for translation._@param sec custom error codes to use;public void setSqlErrorCodes(SQLErrorCodes sec) {_		this.sqlErrorCodes = sec__	};set,custom,error,codes,to,be,used,for,translation,param,sec,custom,error,codes,to,use;public,void,set,sql,error,codes,sqlerror,codes,sec,this,sql,error,codes,sec
SQLErrorCodeSQLExceptionTranslator -> public void setSqlErrorCodes(SQLErrorCodes sec);1496242568;Set custom error codes to be used for translation._@param sec custom error codes to use;public void setSqlErrorCodes(SQLErrorCodes sec) {_		this.sqlErrorCodes = sec__	};set,custom,error,codes,to,be,used,for,translation,param,sec,custom,error,codes,to,use;public,void,set,sql,error,codes,sqlerror,codes,sec,this,sql,error,codes,sec
SQLErrorCodeSQLExceptionTranslator -> public void setSqlErrorCodes(SQLErrorCodes sec);1496837955;Set custom error codes to be used for translation._@param sec custom error codes to use;public void setSqlErrorCodes(SQLErrorCodes sec) {_		this.sqlErrorCodes = sec__	};set,custom,error,codes,to,be,used,for,translation,param,sec,custom,error,codes,to,use;public,void,set,sql,error,codes,sqlerror,codes,sec,this,sql,error,codes,sec
SQLErrorCodeSQLExceptionTranslator -> public void setSqlErrorCodes(SQLErrorCodes sec);1498780456;Set custom error codes to be used for translation._@param sec custom error codes to use;public void setSqlErrorCodes(SQLErrorCodes sec) {_		this.sqlErrorCodes = sec__	};set,custom,error,codes,to,be,used,for,translation,param,sec,custom,error,codes,to,use;public,void,set,sql,error,codes,sqlerror,codes,sec,this,sql,error,codes,sec
SQLErrorCodeSQLExceptionTranslator -> @Nullable 	protected DataAccessException createCustomException( 			String task, @Nullable String sql, SQLException sqlEx, Class<?> exceptionClass);1496837955;Create a custom DataAccessException, based on a given exception_class from a CustomSQLErrorCodesTranslation definition._@param task readable text describing the task being attempted_@param sql SQL query or update that caused the problem. May be {@code null}._@param sqlEx the offending SQLException_@param exceptionClass the exception class to use, as defined in the_CustomSQLErrorCodesTranslation definition_@return null if the custom exception could not be created, otherwise_the resulting DataAccessException. This exception should include the_sqlEx parameter as a nested root cause._@see CustomSQLErrorCodesTranslation#setExceptionClass;@Nullable_	protected DataAccessException createCustomException(_			String task, @Nullable String sql, SQLException sqlEx, Class<?> exceptionClass) {__		_		try {_			int constructorType = 0__			Constructor<?>[] constructors = exceptionClass.getConstructors()__			for (Constructor<?> constructor : constructors) {_				Class<?>[] parameterTypes = constructor.getParameterTypes()__				if (parameterTypes.length == 1 && String.class == parameterTypes[0]) {_					if (constructorType < MESSAGE_ONLY_CONSTRUCTOR)_						constructorType = MESSAGE_ONLY_CONSTRUCTOR__				}_				if (parameterTypes.length == 2 && String.class == parameterTypes[0] &&_						Throwable.class == parameterTypes[1]) {_					if (constructorType < MESSAGE_THROWABLE_CONSTRUCTOR)_						constructorType = MESSAGE_THROWABLE_CONSTRUCTOR__				}_				if (parameterTypes.length == 2 && String.class == parameterTypes[0] &&_						SQLException.class == parameterTypes[1]) {_					if (constructorType < MESSAGE_SQLEX_CONSTRUCTOR)_						constructorType = MESSAGE_SQLEX_CONSTRUCTOR__				}_				if (parameterTypes.length == 3 && String.class == parameterTypes[0] &&_						String.class == parameterTypes[1] && Throwable.class == parameterTypes[2]) {_					if (constructorType < MESSAGE_SQL_THROWABLE_CONSTRUCTOR)_						constructorType = MESSAGE_SQL_THROWABLE_CONSTRUCTOR__				}_				if (parameterTypes.length == 3 && String.class == parameterTypes[0] &&_						String.class == parameterTypes[1] && SQLException.class == parameterTypes[2]) {_					if (constructorType < MESSAGE_SQL_SQLEX_CONSTRUCTOR)_						constructorType = MESSAGE_SQL_SQLEX_CONSTRUCTOR__				}_			}__			_			Constructor<?> exceptionConstructor__			switch (constructorType) {_				case MESSAGE_SQL_SQLEX_CONSTRUCTOR:_					Class<?>[] messageAndSqlAndSqlExArgsClass = new Class<?>[] {String.class, String.class, SQLException.class}__					Object[] messageAndSqlAndSqlExArgs = new Object[] {task, sql, sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndSqlExArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlAndSqlExArgs)__				case MESSAGE_SQL_THROWABLE_CONSTRUCTOR:_					Class<?>[] messageAndSqlAndThrowableArgsClass = new Class<?>[] {String.class, String.class, Throwable.class}__					Object[] messageAndSqlAndThrowableArgs = new Object[] {task, sql, sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndThrowableArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlAndThrowableArgs)__				case MESSAGE_SQLEX_CONSTRUCTOR:_					Class<?>[] messageAndSqlExArgsClass = new Class<?>[] {String.class, SQLException.class}__					Object[] messageAndSqlExArgs = new Object[] {task + ": " + sqlEx.getMessage(), sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlExArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlExArgs)__				case MESSAGE_THROWABLE_CONSTRUCTOR:_					Class<?>[] messageAndThrowableArgsClass = new Class<?>[] {String.class, Throwable.class}__					Object[] messageAndThrowableArgs = new Object[] {task + ": " + sqlEx.getMessage(), sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndThrowableArgsClass)__					return (DataAccessException)exceptionConstructor.newInstance(messageAndThrowableArgs)__				case MESSAGE_ONLY_CONSTRUCTOR:_					Class<?>[] messageOnlyArgsClass = new Class<?>[] {String.class}__					Object[] messageOnlyArgs = new Object[] {task + ": " + sqlEx.getMessage()}__					exceptionConstructor = exceptionClass.getConstructor(messageOnlyArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageOnlyArgs)__				default:_					if (logger.isWarnEnabled()) {_						logger.warn("Unable to find appropriate constructor of custom exception class [" +_								exceptionClass.getName() + "]")__					}_					return null__				}_		}_		catch (Throwable ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Unable to instantiate custom exception class [" + exceptionClass.getName() + "]", ex)__			}_			return null__		}_	};create,a,custom,data,access,exception,based,on,a,given,exception,class,from,a,custom,sqlerror,codes,translation,definition,param,task,readable,text,describing,the,task,being,attempted,param,sql,sql,query,or,update,that,caused,the,problem,may,be,code,null,param,sql,ex,the,offending,sqlexception,param,exception,class,the,exception,class,to,use,as,defined,in,the,custom,sqlerror,codes,translation,definition,return,null,if,the,custom,exception,could,not,be,created,otherwise,the,resulting,data,access,exception,this,exception,should,include,the,sql,ex,parameter,as,a,nested,root,cause,see,custom,sqlerror,codes,translation,set,exception,class;nullable,protected,data,access,exception,create,custom,exception,string,task,nullable,string,sql,sqlexception,sql,ex,class,exception,class,try,int,constructor,type,0,constructor,constructors,exception,class,get,constructors,for,constructor,constructor,constructors,class,parameter,types,constructor,get,parameter,types,if,parameter,types,length,1,string,class,parameter,types,0,if,constructor,type,constructor,type,if,parameter,types,length,2,string,class,parameter,types,0,throwable,class,parameter,types,1,if,constructor,type,constructor,type,if,parameter,types,length,2,string,class,parameter,types,0,sqlexception,class,parameter,types,1,if,constructor,type,constructor,type,if,parameter,types,length,3,string,class,parameter,types,0,string,class,parameter,types,1,throwable,class,parameter,types,2,if,constructor,type,constructor,type,if,parameter,types,length,3,string,class,parameter,types,0,string,class,parameter,types,1,sqlexception,class,parameter,types,2,if,constructor,type,constructor,type,constructor,exception,constructor,switch,constructor,type,case,class,message,and,sql,and,sql,ex,args,class,new,class,string,class,string,class,sqlexception,class,object,message,and,sql,and,sql,ex,args,new,object,task,sql,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,and,sql,ex,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,and,sql,ex,args,case,class,message,and,sql,and,throwable,args,class,new,class,string,class,string,class,throwable,class,object,message,and,sql,and,throwable,args,new,object,task,sql,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,and,throwable,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,and,throwable,args,case,class,message,and,sql,ex,args,class,new,class,string,class,sqlexception,class,object,message,and,sql,ex,args,new,object,task,sql,ex,get,message,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,ex,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,ex,args,case,class,message,and,throwable,args,class,new,class,string,class,throwable,class,object,message,and,throwable,args,new,object,task,sql,ex,get,message,sql,ex,exception,constructor,exception,class,get,constructor,message,and,throwable,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,throwable,args,case,class,message,only,args,class,new,class,string,class,object,message,only,args,new,object,task,sql,ex,get,message,exception,constructor,exception,class,get,constructor,message,only,args,class,return,data,access,exception,exception,constructor,new,instance,message,only,args,default,if,logger,is,warn,enabled,logger,warn,unable,to,find,appropriate,constructor,of,custom,exception,class,exception,class,get,name,return,null,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,unable,to,instantiate,custom,exception,class,exception,class,get,name,ex,return,null
SQLErrorCodeSQLExceptionTranslator -> @Nullable 	protected DataAccessException createCustomException( 			String task, @Nullable String sql, SQLException sqlEx, Class<?> exceptionClass);1498780456;Create a custom DataAccessException, based on a given exception_class from a CustomSQLErrorCodesTranslation definition._@param task readable text describing the task being attempted_@param sql SQL query or update that caused the problem. May be {@code null}._@param sqlEx the offending SQLException_@param exceptionClass the exception class to use, as defined in the_CustomSQLErrorCodesTranslation definition_@return null if the custom exception could not be created, otherwise_the resulting DataAccessException. This exception should include the_sqlEx parameter as a nested root cause._@see CustomSQLErrorCodesTranslation#setExceptionClass;@Nullable_	protected DataAccessException createCustomException(_			String task, @Nullable String sql, SQLException sqlEx, Class<?> exceptionClass) {__		_		try {_			int constructorType = 0__			Constructor<?>[] constructors = exceptionClass.getConstructors()__			for (Constructor<?> constructor : constructors) {_				Class<?>[] parameterTypes = constructor.getParameterTypes()__				if (parameterTypes.length == 1 && String.class == parameterTypes[0]) {_					if (constructorType < MESSAGE_ONLY_CONSTRUCTOR)_						constructorType = MESSAGE_ONLY_CONSTRUCTOR__				}_				if (parameterTypes.length == 2 && String.class == parameterTypes[0] &&_						Throwable.class == parameterTypes[1]) {_					if (constructorType < MESSAGE_THROWABLE_CONSTRUCTOR)_						constructorType = MESSAGE_THROWABLE_CONSTRUCTOR__				}_				if (parameterTypes.length == 2 && String.class == parameterTypes[0] &&_						SQLException.class == parameterTypes[1]) {_					if (constructorType < MESSAGE_SQLEX_CONSTRUCTOR)_						constructorType = MESSAGE_SQLEX_CONSTRUCTOR__				}_				if (parameterTypes.length == 3 && String.class == parameterTypes[0] &&_						String.class == parameterTypes[1] && Throwable.class == parameterTypes[2]) {_					if (constructorType < MESSAGE_SQL_THROWABLE_CONSTRUCTOR)_						constructorType = MESSAGE_SQL_THROWABLE_CONSTRUCTOR__				}_				if (parameterTypes.length == 3 && String.class == parameterTypes[0] &&_						String.class == parameterTypes[1] && SQLException.class == parameterTypes[2]) {_					if (constructorType < MESSAGE_SQL_SQLEX_CONSTRUCTOR)_						constructorType = MESSAGE_SQL_SQLEX_CONSTRUCTOR__				}_			}__			_			Constructor<?> exceptionConstructor__			switch (constructorType) {_				case MESSAGE_SQL_SQLEX_CONSTRUCTOR:_					Class<?>[] messageAndSqlAndSqlExArgsClass = new Class<?>[] {String.class, String.class, SQLException.class}__					Object[] messageAndSqlAndSqlExArgs = new Object[] {task, sql, sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndSqlExArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlAndSqlExArgs)__				case MESSAGE_SQL_THROWABLE_CONSTRUCTOR:_					Class<?>[] messageAndSqlAndThrowableArgsClass = new Class<?>[] {String.class, String.class, Throwable.class}__					Object[] messageAndSqlAndThrowableArgs = new Object[] {task, sql, sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndThrowableArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlAndThrowableArgs)__				case MESSAGE_SQLEX_CONSTRUCTOR:_					Class<?>[] messageAndSqlExArgsClass = new Class<?>[] {String.class, SQLException.class}__					Object[] messageAndSqlExArgs = new Object[] {task + ": " + sqlEx.getMessage(), sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlExArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlExArgs)__				case MESSAGE_THROWABLE_CONSTRUCTOR:_					Class<?>[] messageAndThrowableArgsClass = new Class<?>[] {String.class, Throwable.class}__					Object[] messageAndThrowableArgs = new Object[] {task + ": " + sqlEx.getMessage(), sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndThrowableArgsClass)__					return (DataAccessException)exceptionConstructor.newInstance(messageAndThrowableArgs)__				case MESSAGE_ONLY_CONSTRUCTOR:_					Class<?>[] messageOnlyArgsClass = new Class<?>[] {String.class}__					Object[] messageOnlyArgs = new Object[] {task + ": " + sqlEx.getMessage()}__					exceptionConstructor = exceptionClass.getConstructor(messageOnlyArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageOnlyArgs)__				default:_					if (logger.isWarnEnabled()) {_						logger.warn("Unable to find appropriate constructor of custom exception class [" +_								exceptionClass.getName() + "]")__					}_					return null__				}_		}_		catch (Throwable ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Unable to instantiate custom exception class [" + exceptionClass.getName() + "]", ex)__			}_			return null__		}_	};create,a,custom,data,access,exception,based,on,a,given,exception,class,from,a,custom,sqlerror,codes,translation,definition,param,task,readable,text,describing,the,task,being,attempted,param,sql,sql,query,or,update,that,caused,the,problem,may,be,code,null,param,sql,ex,the,offending,sqlexception,param,exception,class,the,exception,class,to,use,as,defined,in,the,custom,sqlerror,codes,translation,definition,return,null,if,the,custom,exception,could,not,be,created,otherwise,the,resulting,data,access,exception,this,exception,should,include,the,sql,ex,parameter,as,a,nested,root,cause,see,custom,sqlerror,codes,translation,set,exception,class;nullable,protected,data,access,exception,create,custom,exception,string,task,nullable,string,sql,sqlexception,sql,ex,class,exception,class,try,int,constructor,type,0,constructor,constructors,exception,class,get,constructors,for,constructor,constructor,constructors,class,parameter,types,constructor,get,parameter,types,if,parameter,types,length,1,string,class,parameter,types,0,if,constructor,type,constructor,type,if,parameter,types,length,2,string,class,parameter,types,0,throwable,class,parameter,types,1,if,constructor,type,constructor,type,if,parameter,types,length,2,string,class,parameter,types,0,sqlexception,class,parameter,types,1,if,constructor,type,constructor,type,if,parameter,types,length,3,string,class,parameter,types,0,string,class,parameter,types,1,throwable,class,parameter,types,2,if,constructor,type,constructor,type,if,parameter,types,length,3,string,class,parameter,types,0,string,class,parameter,types,1,sqlexception,class,parameter,types,2,if,constructor,type,constructor,type,constructor,exception,constructor,switch,constructor,type,case,class,message,and,sql,and,sql,ex,args,class,new,class,string,class,string,class,sqlexception,class,object,message,and,sql,and,sql,ex,args,new,object,task,sql,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,and,sql,ex,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,and,sql,ex,args,case,class,message,and,sql,and,throwable,args,class,new,class,string,class,string,class,throwable,class,object,message,and,sql,and,throwable,args,new,object,task,sql,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,and,throwable,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,and,throwable,args,case,class,message,and,sql,ex,args,class,new,class,string,class,sqlexception,class,object,message,and,sql,ex,args,new,object,task,sql,ex,get,message,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,ex,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,ex,args,case,class,message,and,throwable,args,class,new,class,string,class,throwable,class,object,message,and,throwable,args,new,object,task,sql,ex,get,message,sql,ex,exception,constructor,exception,class,get,constructor,message,and,throwable,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,throwable,args,case,class,message,only,args,class,new,class,string,class,object,message,only,args,new,object,task,sql,ex,get,message,exception,constructor,exception,class,get,constructor,message,only,args,class,return,data,access,exception,exception,constructor,new,instance,message,only,args,default,if,logger,is,warn,enabled,logger,warn,unable,to,find,appropriate,constructor,of,custom,exception,class,exception,class,get,name,return,null,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,unable,to,instantiate,custom,exception,class,exception,class,get,name,ex,return,null
SQLErrorCodeSQLExceptionTranslator -> @Nullable 	protected DataAccessException createCustomException( 			String task, @Nullable String sql, SQLException sqlEx, Class<?> exceptionClass);1500448076;Create a custom DataAccessException, based on a given exception_class from a CustomSQLErrorCodesTranslation definition._@param task readable text describing the task being attempted_@param sql SQL query or update that caused the problem. May be {@code null}._@param sqlEx the offending SQLException_@param exceptionClass the exception class to use, as defined in the_CustomSQLErrorCodesTranslation definition_@return null if the custom exception could not be created, otherwise_the resulting DataAccessException. This exception should include the_sqlEx parameter as a nested root cause._@see CustomSQLErrorCodesTranslation#setExceptionClass;@Nullable_	protected DataAccessException createCustomException(_			String task, @Nullable String sql, SQLException sqlEx, Class<?> exceptionClass) {__		_		try {_			int constructorType = 0__			Constructor<?>[] constructors = exceptionClass.getConstructors()__			for (Constructor<?> constructor : constructors) {_				Class<?>[] parameterTypes = constructor.getParameterTypes()__				if (parameterTypes.length == 1 && String.class == parameterTypes[0]) {_					if (constructorType < MESSAGE_ONLY_CONSTRUCTOR)_						constructorType = MESSAGE_ONLY_CONSTRUCTOR__				}_				if (parameterTypes.length == 2 && String.class == parameterTypes[0] &&_						Throwable.class == parameterTypes[1]) {_					if (constructorType < MESSAGE_THROWABLE_CONSTRUCTOR)_						constructorType = MESSAGE_THROWABLE_CONSTRUCTOR__				}_				if (parameterTypes.length == 2 && String.class == parameterTypes[0] &&_						SQLException.class == parameterTypes[1]) {_					if (constructorType < MESSAGE_SQLEX_CONSTRUCTOR)_						constructorType = MESSAGE_SQLEX_CONSTRUCTOR__				}_				if (parameterTypes.length == 3 && String.class == parameterTypes[0] &&_						String.class == parameterTypes[1] && Throwable.class == parameterTypes[2]) {_					if (constructorType < MESSAGE_SQL_THROWABLE_CONSTRUCTOR)_						constructorType = MESSAGE_SQL_THROWABLE_CONSTRUCTOR__				}_				if (parameterTypes.length == 3 && String.class == parameterTypes[0] &&_						String.class == parameterTypes[1] && SQLException.class == parameterTypes[2]) {_					if (constructorType < MESSAGE_SQL_SQLEX_CONSTRUCTOR)_						constructorType = MESSAGE_SQL_SQLEX_CONSTRUCTOR__				}_			}__			_			Constructor<?> exceptionConstructor__			switch (constructorType) {_				case MESSAGE_SQL_SQLEX_CONSTRUCTOR:_					Class<?>[] messageAndSqlAndSqlExArgsClass = new Class<?>[] {String.class, String.class, SQLException.class}__					Object[] messageAndSqlAndSqlExArgs = new Object[] {task, sql, sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndSqlExArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlAndSqlExArgs)__				case MESSAGE_SQL_THROWABLE_CONSTRUCTOR:_					Class<?>[] messageAndSqlAndThrowableArgsClass = new Class<?>[] {String.class, String.class, Throwable.class}__					Object[] messageAndSqlAndThrowableArgs = new Object[] {task, sql, sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndThrowableArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlAndThrowableArgs)__				case MESSAGE_SQLEX_CONSTRUCTOR:_					Class<?>[] messageAndSqlExArgsClass = new Class<?>[] {String.class, SQLException.class}__					Object[] messageAndSqlExArgs = new Object[] {task + ": " + sqlEx.getMessage(), sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlExArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlExArgs)__				case MESSAGE_THROWABLE_CONSTRUCTOR:_					Class<?>[] messageAndThrowableArgsClass = new Class<?>[] {String.class, Throwable.class}__					Object[] messageAndThrowableArgs = new Object[] {task + ": " + sqlEx.getMessage(), sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndThrowableArgsClass)__					return (DataAccessException)exceptionConstructor.newInstance(messageAndThrowableArgs)__				case MESSAGE_ONLY_CONSTRUCTOR:_					Class<?>[] messageOnlyArgsClass = new Class<?>[] {String.class}__					Object[] messageOnlyArgs = new Object[] {task + ": " + sqlEx.getMessage()}__					exceptionConstructor = exceptionClass.getConstructor(messageOnlyArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageOnlyArgs)__				default:_					if (logger.isWarnEnabled()) {_						logger.warn("Unable to find appropriate constructor of custom exception class [" +_								exceptionClass.getName() + "]")__					}_					return null__				}_		}_		catch (Throwable ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Unable to instantiate custom exception class [" + exceptionClass.getName() + "]", ex)__			}_			return null__		}_	};create,a,custom,data,access,exception,based,on,a,given,exception,class,from,a,custom,sqlerror,codes,translation,definition,param,task,readable,text,describing,the,task,being,attempted,param,sql,sql,query,or,update,that,caused,the,problem,may,be,code,null,param,sql,ex,the,offending,sqlexception,param,exception,class,the,exception,class,to,use,as,defined,in,the,custom,sqlerror,codes,translation,definition,return,null,if,the,custom,exception,could,not,be,created,otherwise,the,resulting,data,access,exception,this,exception,should,include,the,sql,ex,parameter,as,a,nested,root,cause,see,custom,sqlerror,codes,translation,set,exception,class;nullable,protected,data,access,exception,create,custom,exception,string,task,nullable,string,sql,sqlexception,sql,ex,class,exception,class,try,int,constructor,type,0,constructor,constructors,exception,class,get,constructors,for,constructor,constructor,constructors,class,parameter,types,constructor,get,parameter,types,if,parameter,types,length,1,string,class,parameter,types,0,if,constructor,type,constructor,type,if,parameter,types,length,2,string,class,parameter,types,0,throwable,class,parameter,types,1,if,constructor,type,constructor,type,if,parameter,types,length,2,string,class,parameter,types,0,sqlexception,class,parameter,types,1,if,constructor,type,constructor,type,if,parameter,types,length,3,string,class,parameter,types,0,string,class,parameter,types,1,throwable,class,parameter,types,2,if,constructor,type,constructor,type,if,parameter,types,length,3,string,class,parameter,types,0,string,class,parameter,types,1,sqlexception,class,parameter,types,2,if,constructor,type,constructor,type,constructor,exception,constructor,switch,constructor,type,case,class,message,and,sql,and,sql,ex,args,class,new,class,string,class,string,class,sqlexception,class,object,message,and,sql,and,sql,ex,args,new,object,task,sql,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,and,sql,ex,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,and,sql,ex,args,case,class,message,and,sql,and,throwable,args,class,new,class,string,class,string,class,throwable,class,object,message,and,sql,and,throwable,args,new,object,task,sql,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,and,throwable,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,and,throwable,args,case,class,message,and,sql,ex,args,class,new,class,string,class,sqlexception,class,object,message,and,sql,ex,args,new,object,task,sql,ex,get,message,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,ex,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,ex,args,case,class,message,and,throwable,args,class,new,class,string,class,throwable,class,object,message,and,throwable,args,new,object,task,sql,ex,get,message,sql,ex,exception,constructor,exception,class,get,constructor,message,and,throwable,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,throwable,args,case,class,message,only,args,class,new,class,string,class,object,message,only,args,new,object,task,sql,ex,get,message,exception,constructor,exception,class,get,constructor,message,only,args,class,return,data,access,exception,exception,constructor,new,instance,message,only,args,default,if,logger,is,warn,enabled,logger,warn,unable,to,find,appropriate,constructor,of,custom,exception,class,exception,class,get,name,return,null,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,unable,to,instantiate,custom,exception,class,exception,class,get,name,ex,return,null
SQLErrorCodeSQLExceptionTranslator -> @Nullable 	protected DataAccessException createCustomException( 			String task, @Nullable String sql, SQLException sqlEx, Class<?> exceptionClass);1502974979;Create a custom DataAccessException, based on a given exception_class from a CustomSQLErrorCodesTranslation definition._@param task readable text describing the task being attempted_@param sql SQL query or update that caused the problem. May be {@code null}._@param sqlEx the offending SQLException_@param exceptionClass the exception class to use, as defined in the_CustomSQLErrorCodesTranslation definition_@return null if the custom exception could not be created, otherwise_the resulting DataAccessException. This exception should include the_sqlEx parameter as a nested root cause._@see CustomSQLErrorCodesTranslation#setExceptionClass;@Nullable_	protected DataAccessException createCustomException(_			String task, @Nullable String sql, SQLException sqlEx, Class<?> exceptionClass) {__		_		try {_			int constructorType = 0__			Constructor<?>[] constructors = exceptionClass.getConstructors()__			for (Constructor<?> constructor : constructors) {_				Class<?>[] parameterTypes = constructor.getParameterTypes()__				if (parameterTypes.length == 1 && String.class == parameterTypes[0]) {_					if (constructorType < MESSAGE_ONLY_CONSTRUCTOR)_						constructorType = MESSAGE_ONLY_CONSTRUCTOR__				}_				if (parameterTypes.length == 2 && String.class == parameterTypes[0] &&_						Throwable.class == parameterTypes[1]) {_					if (constructorType < MESSAGE_THROWABLE_CONSTRUCTOR)_						constructorType = MESSAGE_THROWABLE_CONSTRUCTOR__				}_				if (parameterTypes.length == 2 && String.class == parameterTypes[0] &&_						SQLException.class == parameterTypes[1]) {_					if (constructorType < MESSAGE_SQLEX_CONSTRUCTOR)_						constructorType = MESSAGE_SQLEX_CONSTRUCTOR__				}_				if (parameterTypes.length == 3 && String.class == parameterTypes[0] &&_						String.class == parameterTypes[1] && Throwable.class == parameterTypes[2]) {_					if (constructorType < MESSAGE_SQL_THROWABLE_CONSTRUCTOR)_						constructorType = MESSAGE_SQL_THROWABLE_CONSTRUCTOR__				}_				if (parameterTypes.length == 3 && String.class == parameterTypes[0] &&_						String.class == parameterTypes[1] && SQLException.class == parameterTypes[2]) {_					if (constructorType < MESSAGE_SQL_SQLEX_CONSTRUCTOR)_						constructorType = MESSAGE_SQL_SQLEX_CONSTRUCTOR__				}_			}__			_			Constructor<?> exceptionConstructor__			switch (constructorType) {_				case MESSAGE_SQL_SQLEX_CONSTRUCTOR:_					Class<?>[] messageAndSqlAndSqlExArgsClass = new Class<?>[] {String.class, String.class, SQLException.class}__					Object[] messageAndSqlAndSqlExArgs = new Object[] {task, sql, sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndSqlExArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlAndSqlExArgs)__				case MESSAGE_SQL_THROWABLE_CONSTRUCTOR:_					Class<?>[] messageAndSqlAndThrowableArgsClass = new Class<?>[] {String.class, String.class, Throwable.class}__					Object[] messageAndSqlAndThrowableArgs = new Object[] {task, sql, sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndThrowableArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlAndThrowableArgs)__				case MESSAGE_SQLEX_CONSTRUCTOR:_					Class<?>[] messageAndSqlExArgsClass = new Class<?>[] {String.class, SQLException.class}__					Object[] messageAndSqlExArgs = new Object[] {task + ": " + sqlEx.getMessage(), sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlExArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlExArgs)__				case MESSAGE_THROWABLE_CONSTRUCTOR:_					Class<?>[] messageAndThrowableArgsClass = new Class<?>[] {String.class, Throwable.class}__					Object[] messageAndThrowableArgs = new Object[] {task + ": " + sqlEx.getMessage(), sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndThrowableArgsClass)__					return (DataAccessException)exceptionConstructor.newInstance(messageAndThrowableArgs)__				case MESSAGE_ONLY_CONSTRUCTOR:_					Class<?>[] messageOnlyArgsClass = new Class<?>[] {String.class}__					Object[] messageOnlyArgs = new Object[] {task + ": " + sqlEx.getMessage()}__					exceptionConstructor = exceptionClass.getConstructor(messageOnlyArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageOnlyArgs)__				default:_					if (logger.isWarnEnabled()) {_						logger.warn("Unable to find appropriate constructor of custom exception class [" +_								exceptionClass.getName() + "]")__					}_					return null__				}_		}_		catch (Throwable ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Unable to instantiate custom exception class [" + exceptionClass.getName() + "]", ex)__			}_			return null__		}_	};create,a,custom,data,access,exception,based,on,a,given,exception,class,from,a,custom,sqlerror,codes,translation,definition,param,task,readable,text,describing,the,task,being,attempted,param,sql,sql,query,or,update,that,caused,the,problem,may,be,code,null,param,sql,ex,the,offending,sqlexception,param,exception,class,the,exception,class,to,use,as,defined,in,the,custom,sqlerror,codes,translation,definition,return,null,if,the,custom,exception,could,not,be,created,otherwise,the,resulting,data,access,exception,this,exception,should,include,the,sql,ex,parameter,as,a,nested,root,cause,see,custom,sqlerror,codes,translation,set,exception,class;nullable,protected,data,access,exception,create,custom,exception,string,task,nullable,string,sql,sqlexception,sql,ex,class,exception,class,try,int,constructor,type,0,constructor,constructors,exception,class,get,constructors,for,constructor,constructor,constructors,class,parameter,types,constructor,get,parameter,types,if,parameter,types,length,1,string,class,parameter,types,0,if,constructor,type,constructor,type,if,parameter,types,length,2,string,class,parameter,types,0,throwable,class,parameter,types,1,if,constructor,type,constructor,type,if,parameter,types,length,2,string,class,parameter,types,0,sqlexception,class,parameter,types,1,if,constructor,type,constructor,type,if,parameter,types,length,3,string,class,parameter,types,0,string,class,parameter,types,1,throwable,class,parameter,types,2,if,constructor,type,constructor,type,if,parameter,types,length,3,string,class,parameter,types,0,string,class,parameter,types,1,sqlexception,class,parameter,types,2,if,constructor,type,constructor,type,constructor,exception,constructor,switch,constructor,type,case,class,message,and,sql,and,sql,ex,args,class,new,class,string,class,string,class,sqlexception,class,object,message,and,sql,and,sql,ex,args,new,object,task,sql,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,and,sql,ex,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,and,sql,ex,args,case,class,message,and,sql,and,throwable,args,class,new,class,string,class,string,class,throwable,class,object,message,and,sql,and,throwable,args,new,object,task,sql,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,and,throwable,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,and,throwable,args,case,class,message,and,sql,ex,args,class,new,class,string,class,sqlexception,class,object,message,and,sql,ex,args,new,object,task,sql,ex,get,message,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,ex,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,ex,args,case,class,message,and,throwable,args,class,new,class,string,class,throwable,class,object,message,and,throwable,args,new,object,task,sql,ex,get,message,sql,ex,exception,constructor,exception,class,get,constructor,message,and,throwable,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,throwable,args,case,class,message,only,args,class,new,class,string,class,object,message,only,args,new,object,task,sql,ex,get,message,exception,constructor,exception,class,get,constructor,message,only,args,class,return,data,access,exception,exception,constructor,new,instance,message,only,args,default,if,logger,is,warn,enabled,logger,warn,unable,to,find,appropriate,constructor,of,custom,exception,class,exception,class,get,name,return,null,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,unable,to,instantiate,custom,exception,class,exception,class,get,name,ex,return,null
SQLErrorCodeSQLExceptionTranslator -> @Nullable 	protected DataAccessException createCustomException( 			String task, @Nullable String sql, SQLException sqlEx, Class<?> exceptionClass);1506097334;Create a custom DataAccessException, based on a given exception_class from a CustomSQLErrorCodesTranslation definition._@param task readable text describing the task being attempted_@param sql SQL query or update that caused the problem. May be {@code null}._@param sqlEx the offending SQLException_@param exceptionClass the exception class to use, as defined in the_CustomSQLErrorCodesTranslation definition_@return null if the custom exception could not be created, otherwise_the resulting DataAccessException. This exception should include the_sqlEx parameter as a nested root cause._@see CustomSQLErrorCodesTranslation#setExceptionClass;@Nullable_	protected DataAccessException createCustomException(_			String task, @Nullable String sql, SQLException sqlEx, Class<?> exceptionClass) {__		_		try {_			int constructorType = 0__			Constructor<?>[] constructors = exceptionClass.getConstructors()__			for (Constructor<?> constructor : constructors) {_				Class<?>[] parameterTypes = constructor.getParameterTypes()__				if (parameterTypes.length == 1 && String.class == parameterTypes[0]) {_					if (constructorType < MESSAGE_ONLY_CONSTRUCTOR)_						constructorType = MESSAGE_ONLY_CONSTRUCTOR__				}_				if (parameterTypes.length == 2 && String.class == parameterTypes[0] &&_						Throwable.class == parameterTypes[1]) {_					if (constructorType < MESSAGE_THROWABLE_CONSTRUCTOR)_						constructorType = MESSAGE_THROWABLE_CONSTRUCTOR__				}_				if (parameterTypes.length == 2 && String.class == parameterTypes[0] &&_						SQLException.class == parameterTypes[1]) {_					if (constructorType < MESSAGE_SQLEX_CONSTRUCTOR)_						constructorType = MESSAGE_SQLEX_CONSTRUCTOR__				}_				if (parameterTypes.length == 3 && String.class == parameterTypes[0] &&_						String.class == parameterTypes[1] && Throwable.class == parameterTypes[2]) {_					if (constructorType < MESSAGE_SQL_THROWABLE_CONSTRUCTOR)_						constructorType = MESSAGE_SQL_THROWABLE_CONSTRUCTOR__				}_				if (parameterTypes.length == 3 && String.class == parameterTypes[0] &&_						String.class == parameterTypes[1] && SQLException.class == parameterTypes[2]) {_					if (constructorType < MESSAGE_SQL_SQLEX_CONSTRUCTOR)_						constructorType = MESSAGE_SQL_SQLEX_CONSTRUCTOR__				}_			}__			_			Constructor<?> exceptionConstructor__			switch (constructorType) {_				case MESSAGE_SQL_SQLEX_CONSTRUCTOR:_					Class<?>[] messageAndSqlAndSqlExArgsClass = new Class<?>[] {String.class, String.class, SQLException.class}__					Object[] messageAndSqlAndSqlExArgs = new Object[] {task, sql, sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndSqlExArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlAndSqlExArgs)__				case MESSAGE_SQL_THROWABLE_CONSTRUCTOR:_					Class<?>[] messageAndSqlAndThrowableArgsClass = new Class<?>[] {String.class, String.class, Throwable.class}__					Object[] messageAndSqlAndThrowableArgs = new Object[] {task, sql, sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndThrowableArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlAndThrowableArgs)__				case MESSAGE_SQLEX_CONSTRUCTOR:_					Class<?>[] messageAndSqlExArgsClass = new Class<?>[] {String.class, SQLException.class}__					Object[] messageAndSqlExArgs = new Object[] {task + ": " + sqlEx.getMessage(), sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlExArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlExArgs)__				case MESSAGE_THROWABLE_CONSTRUCTOR:_					Class<?>[] messageAndThrowableArgsClass = new Class<?>[] {String.class, Throwable.class}__					Object[] messageAndThrowableArgs = new Object[] {task + ": " + sqlEx.getMessage(), sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndThrowableArgsClass)__					return (DataAccessException)exceptionConstructor.newInstance(messageAndThrowableArgs)__				case MESSAGE_ONLY_CONSTRUCTOR:_					Class<?>[] messageOnlyArgsClass = new Class<?>[] {String.class}__					Object[] messageOnlyArgs = new Object[] {task + ": " + sqlEx.getMessage()}__					exceptionConstructor = exceptionClass.getConstructor(messageOnlyArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageOnlyArgs)__				default:_					if (logger.isWarnEnabled()) {_						logger.warn("Unable to find appropriate constructor of custom exception class [" +_								exceptionClass.getName() + "]")__					}_					return null__				}_		}_		catch (Throwable ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Unable to instantiate custom exception class [" + exceptionClass.getName() + "]", ex)__			}_			return null__		}_	};create,a,custom,data,access,exception,based,on,a,given,exception,class,from,a,custom,sqlerror,codes,translation,definition,param,task,readable,text,describing,the,task,being,attempted,param,sql,sql,query,or,update,that,caused,the,problem,may,be,code,null,param,sql,ex,the,offending,sqlexception,param,exception,class,the,exception,class,to,use,as,defined,in,the,custom,sqlerror,codes,translation,definition,return,null,if,the,custom,exception,could,not,be,created,otherwise,the,resulting,data,access,exception,this,exception,should,include,the,sql,ex,parameter,as,a,nested,root,cause,see,custom,sqlerror,codes,translation,set,exception,class;nullable,protected,data,access,exception,create,custom,exception,string,task,nullable,string,sql,sqlexception,sql,ex,class,exception,class,try,int,constructor,type,0,constructor,constructors,exception,class,get,constructors,for,constructor,constructor,constructors,class,parameter,types,constructor,get,parameter,types,if,parameter,types,length,1,string,class,parameter,types,0,if,constructor,type,constructor,type,if,parameter,types,length,2,string,class,parameter,types,0,throwable,class,parameter,types,1,if,constructor,type,constructor,type,if,parameter,types,length,2,string,class,parameter,types,0,sqlexception,class,parameter,types,1,if,constructor,type,constructor,type,if,parameter,types,length,3,string,class,parameter,types,0,string,class,parameter,types,1,throwable,class,parameter,types,2,if,constructor,type,constructor,type,if,parameter,types,length,3,string,class,parameter,types,0,string,class,parameter,types,1,sqlexception,class,parameter,types,2,if,constructor,type,constructor,type,constructor,exception,constructor,switch,constructor,type,case,class,message,and,sql,and,sql,ex,args,class,new,class,string,class,string,class,sqlexception,class,object,message,and,sql,and,sql,ex,args,new,object,task,sql,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,and,sql,ex,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,and,sql,ex,args,case,class,message,and,sql,and,throwable,args,class,new,class,string,class,string,class,throwable,class,object,message,and,sql,and,throwable,args,new,object,task,sql,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,and,throwable,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,and,throwable,args,case,class,message,and,sql,ex,args,class,new,class,string,class,sqlexception,class,object,message,and,sql,ex,args,new,object,task,sql,ex,get,message,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,ex,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,ex,args,case,class,message,and,throwable,args,class,new,class,string,class,throwable,class,object,message,and,throwable,args,new,object,task,sql,ex,get,message,sql,ex,exception,constructor,exception,class,get,constructor,message,and,throwable,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,throwable,args,case,class,message,only,args,class,new,class,string,class,object,message,only,args,new,object,task,sql,ex,get,message,exception,constructor,exception,class,get,constructor,message,only,args,class,return,data,access,exception,exception,constructor,new,instance,message,only,args,default,if,logger,is,warn,enabled,logger,warn,unable,to,find,appropriate,constructor,of,custom,exception,class,exception,class,get,name,return,null,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,unable,to,instantiate,custom,exception,class,exception,class,get,name,ex,return,null
SQLErrorCodeSQLExceptionTranslator -> @Nullable 	protected DataAccessException createCustomException( 			String task, @Nullable String sql, SQLException sqlEx, Class<?> exceptionClass);1520529117;Create a custom DataAccessException, based on a given exception_class from a CustomSQLErrorCodesTranslation definition._@param task readable text describing the task being attempted_@param sql SQL query or update that caused the problem. May be {@code null}._@param sqlEx the offending SQLException_@param exceptionClass the exception class to use, as defined in the_CustomSQLErrorCodesTranslation definition_@return null if the custom exception could not be created, otherwise_the resulting DataAccessException. This exception should include the_sqlEx parameter as a nested root cause._@see CustomSQLErrorCodesTranslation#setExceptionClass;@Nullable_	protected DataAccessException createCustomException(_			String task, @Nullable String sql, SQLException sqlEx, Class<?> exceptionClass) {__		_		try {_			int constructorType = 0__			Constructor<?>[] constructors = exceptionClass.getConstructors()__			for (Constructor<?> constructor : constructors) {_				Class<?>[] parameterTypes = constructor.getParameterTypes()__				if (parameterTypes.length == 1 && String.class == parameterTypes[0] &&_						constructorType < MESSAGE_ONLY_CONSTRUCTOR) {_					constructorType = MESSAGE_ONLY_CONSTRUCTOR__				}_				if (parameterTypes.length == 2 && String.class == parameterTypes[0] &&_						Throwable.class == parameterTypes[1] &&_						constructorType < MESSAGE_THROWABLE_CONSTRUCTOR) {_					constructorType = MESSAGE_THROWABLE_CONSTRUCTOR__				}_				if (parameterTypes.length == 2 && String.class == parameterTypes[0] &&_						SQLException.class == parameterTypes[1] &&_						constructorType < MESSAGE_SQLEX_CONSTRUCTOR) {_					constructorType = MESSAGE_SQLEX_CONSTRUCTOR__				}_				if (parameterTypes.length == 3 && String.class == parameterTypes[0] &&_						String.class == parameterTypes[1] && Throwable.class == parameterTypes[2] &&_						constructorType < MESSAGE_SQL_THROWABLE_CONSTRUCTOR) {_					constructorType = MESSAGE_SQL_THROWABLE_CONSTRUCTOR__				}_				if (parameterTypes.length == 3 && String.class == parameterTypes[0] &&_						String.class == parameterTypes[1] && SQLException.class == parameterTypes[2] &&_						constructorType < MESSAGE_SQL_SQLEX_CONSTRUCTOR) {_					constructorType = MESSAGE_SQL_SQLEX_CONSTRUCTOR__				}_			}__			_			Constructor<?> exceptionConstructor__			switch (constructorType) {_				case MESSAGE_SQL_SQLEX_CONSTRUCTOR:_					Class<?>[] messageAndSqlAndSqlExArgsClass = new Class<?>[] {String.class, String.class, SQLException.class}__					Object[] messageAndSqlAndSqlExArgs = new Object[] {task, sql, sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndSqlExArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlAndSqlExArgs)__				case MESSAGE_SQL_THROWABLE_CONSTRUCTOR:_					Class<?>[] messageAndSqlAndThrowableArgsClass = new Class<?>[] {String.class, String.class, Throwable.class}__					Object[] messageAndSqlAndThrowableArgs = new Object[] {task, sql, sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndThrowableArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlAndThrowableArgs)__				case MESSAGE_SQLEX_CONSTRUCTOR:_					Class<?>[] messageAndSqlExArgsClass = new Class<?>[] {String.class, SQLException.class}__					Object[] messageAndSqlExArgs = new Object[] {task + ": " + sqlEx.getMessage(), sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlExArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlExArgs)__				case MESSAGE_THROWABLE_CONSTRUCTOR:_					Class<?>[] messageAndThrowableArgsClass = new Class<?>[] {String.class, Throwable.class}__					Object[] messageAndThrowableArgs = new Object[] {task + ": " + sqlEx.getMessage(), sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndThrowableArgsClass)__					return (DataAccessException)exceptionConstructor.newInstance(messageAndThrowableArgs)__				case MESSAGE_ONLY_CONSTRUCTOR:_					Class<?>[] messageOnlyArgsClass = new Class<?>[] {String.class}__					Object[] messageOnlyArgs = new Object[] {task + ": " + sqlEx.getMessage()}__					exceptionConstructor = exceptionClass.getConstructor(messageOnlyArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageOnlyArgs)__				default:_					if (logger.isWarnEnabled()) {_						logger.warn("Unable to find appropriate constructor of custom exception class [" +_								exceptionClass.getName() + "]")__					}_					return null__				}_		}_		catch (Throwable ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Unable to instantiate custom exception class [" + exceptionClass.getName() + "]", ex)__			}_			return null__		}_	};create,a,custom,data,access,exception,based,on,a,given,exception,class,from,a,custom,sqlerror,codes,translation,definition,param,task,readable,text,describing,the,task,being,attempted,param,sql,sql,query,or,update,that,caused,the,problem,may,be,code,null,param,sql,ex,the,offending,sqlexception,param,exception,class,the,exception,class,to,use,as,defined,in,the,custom,sqlerror,codes,translation,definition,return,null,if,the,custom,exception,could,not,be,created,otherwise,the,resulting,data,access,exception,this,exception,should,include,the,sql,ex,parameter,as,a,nested,root,cause,see,custom,sqlerror,codes,translation,set,exception,class;nullable,protected,data,access,exception,create,custom,exception,string,task,nullable,string,sql,sqlexception,sql,ex,class,exception,class,try,int,constructor,type,0,constructor,constructors,exception,class,get,constructors,for,constructor,constructor,constructors,class,parameter,types,constructor,get,parameter,types,if,parameter,types,length,1,string,class,parameter,types,0,constructor,type,constructor,type,if,parameter,types,length,2,string,class,parameter,types,0,throwable,class,parameter,types,1,constructor,type,constructor,type,if,parameter,types,length,2,string,class,parameter,types,0,sqlexception,class,parameter,types,1,constructor,type,constructor,type,if,parameter,types,length,3,string,class,parameter,types,0,string,class,parameter,types,1,throwable,class,parameter,types,2,constructor,type,constructor,type,if,parameter,types,length,3,string,class,parameter,types,0,string,class,parameter,types,1,sqlexception,class,parameter,types,2,constructor,type,constructor,type,constructor,exception,constructor,switch,constructor,type,case,class,message,and,sql,and,sql,ex,args,class,new,class,string,class,string,class,sqlexception,class,object,message,and,sql,and,sql,ex,args,new,object,task,sql,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,and,sql,ex,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,and,sql,ex,args,case,class,message,and,sql,and,throwable,args,class,new,class,string,class,string,class,throwable,class,object,message,and,sql,and,throwable,args,new,object,task,sql,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,and,throwable,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,and,throwable,args,case,class,message,and,sql,ex,args,class,new,class,string,class,sqlexception,class,object,message,and,sql,ex,args,new,object,task,sql,ex,get,message,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,ex,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,ex,args,case,class,message,and,throwable,args,class,new,class,string,class,throwable,class,object,message,and,throwable,args,new,object,task,sql,ex,get,message,sql,ex,exception,constructor,exception,class,get,constructor,message,and,throwable,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,throwable,args,case,class,message,only,args,class,new,class,string,class,object,message,only,args,new,object,task,sql,ex,get,message,exception,constructor,exception,class,get,constructor,message,only,args,class,return,data,access,exception,exception,constructor,new,instance,message,only,args,default,if,logger,is,warn,enabled,logger,warn,unable,to,find,appropriate,constructor,of,custom,exception,class,exception,class,get,name,return,null,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,unable,to,instantiate,custom,exception,class,exception,class,get,name,ex,return,null
SQLErrorCodeSQLExceptionTranslator -> @Nullable 	protected DataAccessException createCustomException( 			String task, @Nullable String sql, SQLException sqlEx, Class<?> exceptionClass);1521457504;Create a custom DataAccessException, based on a given exception_class from a CustomSQLErrorCodesTranslation definition._@param task readable text describing the task being attempted_@param sql SQL query or update that caused the problem. May be {@code null}._@param sqlEx the offending SQLException_@param exceptionClass the exception class to use, as defined in the_CustomSQLErrorCodesTranslation definition_@return null if the custom exception could not be created, otherwise_the resulting DataAccessException. This exception should include the_sqlEx parameter as a nested root cause._@see CustomSQLErrorCodesTranslation#setExceptionClass;@Nullable_	protected DataAccessException createCustomException(_			String task, @Nullable String sql, SQLException sqlEx, Class<?> exceptionClass) {__		_		try {_			int constructorType = 0__			Constructor<?>[] constructors = exceptionClass.getConstructors()__			for (Constructor<?> constructor : constructors) {_				Class<?>[] parameterTypes = constructor.getParameterTypes()__				if (parameterTypes.length == 1 && String.class == parameterTypes[0] &&_						constructorType < MESSAGE_ONLY_CONSTRUCTOR) {_					constructorType = MESSAGE_ONLY_CONSTRUCTOR__				}_				if (parameterTypes.length == 2 && String.class == parameterTypes[0] &&_						Throwable.class == parameterTypes[1] &&_						constructorType < MESSAGE_THROWABLE_CONSTRUCTOR) {_					constructorType = MESSAGE_THROWABLE_CONSTRUCTOR__				}_				if (parameterTypes.length == 2 && String.class == parameterTypes[0] &&_						SQLException.class == parameterTypes[1] &&_						constructorType < MESSAGE_SQLEX_CONSTRUCTOR) {_					constructorType = MESSAGE_SQLEX_CONSTRUCTOR__				}_				if (parameterTypes.length == 3 && String.class == parameterTypes[0] &&_						String.class == parameterTypes[1] && Throwable.class == parameterTypes[2] &&_						constructorType < MESSAGE_SQL_THROWABLE_CONSTRUCTOR) {_					constructorType = MESSAGE_SQL_THROWABLE_CONSTRUCTOR__				}_				if (parameterTypes.length == 3 && String.class == parameterTypes[0] &&_						String.class == parameterTypes[1] && SQLException.class == parameterTypes[2] &&_						constructorType < MESSAGE_SQL_SQLEX_CONSTRUCTOR) {_					constructorType = MESSAGE_SQL_SQLEX_CONSTRUCTOR__				}_			}__			_			Constructor<?> exceptionConstructor__			switch (constructorType) {_				case MESSAGE_SQL_SQLEX_CONSTRUCTOR:_					Class<?>[] messageAndSqlAndSqlExArgsClass = new Class<?>[] {String.class, String.class, SQLException.class}__					Object[] messageAndSqlAndSqlExArgs = new Object[] {task, sql, sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndSqlExArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlAndSqlExArgs)__				case MESSAGE_SQL_THROWABLE_CONSTRUCTOR:_					Class<?>[] messageAndSqlAndThrowableArgsClass = new Class<?>[] {String.class, String.class, Throwable.class}__					Object[] messageAndSqlAndThrowableArgs = new Object[] {task, sql, sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndThrowableArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlAndThrowableArgs)__				case MESSAGE_SQLEX_CONSTRUCTOR:_					Class<?>[] messageAndSqlExArgsClass = new Class<?>[] {String.class, SQLException.class}__					Object[] messageAndSqlExArgs = new Object[] {task + ": " + sqlEx.getMessage(), sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlExArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlExArgs)__				case MESSAGE_THROWABLE_CONSTRUCTOR:_					Class<?>[] messageAndThrowableArgsClass = new Class<?>[] {String.class, Throwable.class}__					Object[] messageAndThrowableArgs = new Object[] {task + ": " + sqlEx.getMessage(), sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndThrowableArgsClass)__					return (DataAccessException)exceptionConstructor.newInstance(messageAndThrowableArgs)__				case MESSAGE_ONLY_CONSTRUCTOR:_					Class<?>[] messageOnlyArgsClass = new Class<?>[] {String.class}__					Object[] messageOnlyArgs = new Object[] {task + ": " + sqlEx.getMessage()}__					exceptionConstructor = exceptionClass.getConstructor(messageOnlyArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageOnlyArgs)__				default:_					if (logger.isWarnEnabled()) {_						logger.warn("Unable to find appropriate constructor of custom exception class [" +_								exceptionClass.getName() + "]")__					}_					return null__				}_		}_		catch (Throwable ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Unable to instantiate custom exception class [" + exceptionClass.getName() + "]", ex)__			}_			return null__		}_	};create,a,custom,data,access,exception,based,on,a,given,exception,class,from,a,custom,sqlerror,codes,translation,definition,param,task,readable,text,describing,the,task,being,attempted,param,sql,sql,query,or,update,that,caused,the,problem,may,be,code,null,param,sql,ex,the,offending,sqlexception,param,exception,class,the,exception,class,to,use,as,defined,in,the,custom,sqlerror,codes,translation,definition,return,null,if,the,custom,exception,could,not,be,created,otherwise,the,resulting,data,access,exception,this,exception,should,include,the,sql,ex,parameter,as,a,nested,root,cause,see,custom,sqlerror,codes,translation,set,exception,class;nullable,protected,data,access,exception,create,custom,exception,string,task,nullable,string,sql,sqlexception,sql,ex,class,exception,class,try,int,constructor,type,0,constructor,constructors,exception,class,get,constructors,for,constructor,constructor,constructors,class,parameter,types,constructor,get,parameter,types,if,parameter,types,length,1,string,class,parameter,types,0,constructor,type,constructor,type,if,parameter,types,length,2,string,class,parameter,types,0,throwable,class,parameter,types,1,constructor,type,constructor,type,if,parameter,types,length,2,string,class,parameter,types,0,sqlexception,class,parameter,types,1,constructor,type,constructor,type,if,parameter,types,length,3,string,class,parameter,types,0,string,class,parameter,types,1,throwable,class,parameter,types,2,constructor,type,constructor,type,if,parameter,types,length,3,string,class,parameter,types,0,string,class,parameter,types,1,sqlexception,class,parameter,types,2,constructor,type,constructor,type,constructor,exception,constructor,switch,constructor,type,case,class,message,and,sql,and,sql,ex,args,class,new,class,string,class,string,class,sqlexception,class,object,message,and,sql,and,sql,ex,args,new,object,task,sql,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,and,sql,ex,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,and,sql,ex,args,case,class,message,and,sql,and,throwable,args,class,new,class,string,class,string,class,throwable,class,object,message,and,sql,and,throwable,args,new,object,task,sql,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,and,throwable,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,and,throwable,args,case,class,message,and,sql,ex,args,class,new,class,string,class,sqlexception,class,object,message,and,sql,ex,args,new,object,task,sql,ex,get,message,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,ex,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,ex,args,case,class,message,and,throwable,args,class,new,class,string,class,throwable,class,object,message,and,throwable,args,new,object,task,sql,ex,get,message,sql,ex,exception,constructor,exception,class,get,constructor,message,and,throwable,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,throwable,args,case,class,message,only,args,class,new,class,string,class,object,message,only,args,new,object,task,sql,ex,get,message,exception,constructor,exception,class,get,constructor,message,only,args,class,return,data,access,exception,exception,constructor,new,instance,message,only,args,default,if,logger,is,warn,enabled,logger,warn,unable,to,find,appropriate,constructor,of,custom,exception,class,exception,class,get,name,return,null,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,unable,to,instantiate,custom,exception,class,exception,class,get,name,ex,return,null
SQLErrorCodeSQLExceptionTranslator -> @Nullable 	protected DataAccessException createCustomException( 			String task, @Nullable String sql, SQLException sqlEx, Class<?> exceptionClass);1530174524;Create a custom DataAccessException, based on a given exception_class from a CustomSQLErrorCodesTranslation definition._@param task readable text describing the task being attempted_@param sql the SQL query or update that caused the problem. May be {@code null}._@param sqlEx the offending SQLException_@param exceptionClass the exception class to use, as defined in the_CustomSQLErrorCodesTranslation definition_@return null if the custom exception could not be created, otherwise_the resulting DataAccessException. This exception should include the_sqlEx parameter as a nested root cause._@see CustomSQLErrorCodesTranslation#setExceptionClass;@Nullable_	protected DataAccessException createCustomException(_			String task, @Nullable String sql, SQLException sqlEx, Class<?> exceptionClass) {__		_		try {_			int constructorType = 0__			Constructor<?>[] constructors = exceptionClass.getConstructors()__			for (Constructor<?> constructor : constructors) {_				Class<?>[] parameterTypes = constructor.getParameterTypes()__				if (parameterTypes.length == 1 && String.class == parameterTypes[0] &&_						constructorType < MESSAGE_ONLY_CONSTRUCTOR) {_					constructorType = MESSAGE_ONLY_CONSTRUCTOR__				}_				if (parameterTypes.length == 2 && String.class == parameterTypes[0] &&_						Throwable.class == parameterTypes[1] &&_						constructorType < MESSAGE_THROWABLE_CONSTRUCTOR) {_					constructorType = MESSAGE_THROWABLE_CONSTRUCTOR__				}_				if (parameterTypes.length == 2 && String.class == parameterTypes[0] &&_						SQLException.class == parameterTypes[1] &&_						constructorType < MESSAGE_SQLEX_CONSTRUCTOR) {_					constructorType = MESSAGE_SQLEX_CONSTRUCTOR__				}_				if (parameterTypes.length == 3 && String.class == parameterTypes[0] &&_						String.class == parameterTypes[1] && Throwable.class == parameterTypes[2] &&_						constructorType < MESSAGE_SQL_THROWABLE_CONSTRUCTOR) {_					constructorType = MESSAGE_SQL_THROWABLE_CONSTRUCTOR__				}_				if (parameterTypes.length == 3 && String.class == parameterTypes[0] &&_						String.class == parameterTypes[1] && SQLException.class == parameterTypes[2] &&_						constructorType < MESSAGE_SQL_SQLEX_CONSTRUCTOR) {_					constructorType = MESSAGE_SQL_SQLEX_CONSTRUCTOR__				}_			}__			_			Constructor<?> exceptionConstructor__			switch (constructorType) {_				case MESSAGE_SQL_SQLEX_CONSTRUCTOR:_					Class<?>[] messageAndSqlAndSqlExArgsClass = new Class<?>[] {String.class, String.class, SQLException.class}__					Object[] messageAndSqlAndSqlExArgs = new Object[] {task, sql, sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndSqlExArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlAndSqlExArgs)__				case MESSAGE_SQL_THROWABLE_CONSTRUCTOR:_					Class<?>[] messageAndSqlAndThrowableArgsClass = new Class<?>[] {String.class, String.class, Throwable.class}__					Object[] messageAndSqlAndThrowableArgs = new Object[] {task, sql, sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndThrowableArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlAndThrowableArgs)__				case MESSAGE_SQLEX_CONSTRUCTOR:_					Class<?>[] messageAndSqlExArgsClass = new Class<?>[] {String.class, SQLException.class}__					Object[] messageAndSqlExArgs = new Object[] {task + ": " + sqlEx.getMessage(), sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlExArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlExArgs)__				case MESSAGE_THROWABLE_CONSTRUCTOR:_					Class<?>[] messageAndThrowableArgsClass = new Class<?>[] {String.class, Throwable.class}__					Object[] messageAndThrowableArgs = new Object[] {task + ": " + sqlEx.getMessage(), sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndThrowableArgsClass)__					return (DataAccessException)exceptionConstructor.newInstance(messageAndThrowableArgs)__				case MESSAGE_ONLY_CONSTRUCTOR:_					Class<?>[] messageOnlyArgsClass = new Class<?>[] {String.class}__					Object[] messageOnlyArgs = new Object[] {task + ": " + sqlEx.getMessage()}__					exceptionConstructor = exceptionClass.getConstructor(messageOnlyArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageOnlyArgs)__				default:_					if (logger.isWarnEnabled()) {_						logger.warn("Unable to find appropriate constructor of custom exception class [" +_								exceptionClass.getName() + "]")__					}_					return null__				}_		}_		catch (Throwable ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Unable to instantiate custom exception class [" + exceptionClass.getName() + "]", ex)__			}_			return null__		}_	};create,a,custom,data,access,exception,based,on,a,given,exception,class,from,a,custom,sqlerror,codes,translation,definition,param,task,readable,text,describing,the,task,being,attempted,param,sql,the,sql,query,or,update,that,caused,the,problem,may,be,code,null,param,sql,ex,the,offending,sqlexception,param,exception,class,the,exception,class,to,use,as,defined,in,the,custom,sqlerror,codes,translation,definition,return,null,if,the,custom,exception,could,not,be,created,otherwise,the,resulting,data,access,exception,this,exception,should,include,the,sql,ex,parameter,as,a,nested,root,cause,see,custom,sqlerror,codes,translation,set,exception,class;nullable,protected,data,access,exception,create,custom,exception,string,task,nullable,string,sql,sqlexception,sql,ex,class,exception,class,try,int,constructor,type,0,constructor,constructors,exception,class,get,constructors,for,constructor,constructor,constructors,class,parameter,types,constructor,get,parameter,types,if,parameter,types,length,1,string,class,parameter,types,0,constructor,type,constructor,type,if,parameter,types,length,2,string,class,parameter,types,0,throwable,class,parameter,types,1,constructor,type,constructor,type,if,parameter,types,length,2,string,class,parameter,types,0,sqlexception,class,parameter,types,1,constructor,type,constructor,type,if,parameter,types,length,3,string,class,parameter,types,0,string,class,parameter,types,1,throwable,class,parameter,types,2,constructor,type,constructor,type,if,parameter,types,length,3,string,class,parameter,types,0,string,class,parameter,types,1,sqlexception,class,parameter,types,2,constructor,type,constructor,type,constructor,exception,constructor,switch,constructor,type,case,class,message,and,sql,and,sql,ex,args,class,new,class,string,class,string,class,sqlexception,class,object,message,and,sql,and,sql,ex,args,new,object,task,sql,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,and,sql,ex,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,and,sql,ex,args,case,class,message,and,sql,and,throwable,args,class,new,class,string,class,string,class,throwable,class,object,message,and,sql,and,throwable,args,new,object,task,sql,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,and,throwable,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,and,throwable,args,case,class,message,and,sql,ex,args,class,new,class,string,class,sqlexception,class,object,message,and,sql,ex,args,new,object,task,sql,ex,get,message,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,ex,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,ex,args,case,class,message,and,throwable,args,class,new,class,string,class,throwable,class,object,message,and,throwable,args,new,object,task,sql,ex,get,message,sql,ex,exception,constructor,exception,class,get,constructor,message,and,throwable,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,throwable,args,case,class,message,only,args,class,new,class,string,class,object,message,only,args,new,object,task,sql,ex,get,message,exception,constructor,exception,class,get,constructor,message,only,args,class,return,data,access,exception,exception,constructor,new,instance,message,only,args,default,if,logger,is,warn,enabled,logger,warn,unable,to,find,appropriate,constructor,of,custom,exception,class,exception,class,get,name,return,null,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,unable,to,instantiate,custom,exception,class,exception,class,get,name,ex,return,null
SQLErrorCodeSQLExceptionTranslator -> @Nullable 	protected DataAccessException createCustomException( 			String task, @Nullable String sql, SQLException sqlEx, Class<?> exceptionClass);1531144424;Create a custom {@link DataAccessException}, based on a given exception_class from a {@link CustomSQLErrorCodesTranslation} definition._@param task readable text describing the task being attempted_@param sql the SQL query or update that caused the problem (may be {@code null})_@param sqlEx the offending SQLException_@param exceptionClass the exception class to use, as defined in the_{@link CustomSQLErrorCodesTranslation} definition_@return {@code null} if the custom exception could not be created, otherwise_the resulting {@link DataAccessException}. This exception should include the_{@code sqlEx} parameter as a nested root cause._@see CustomSQLErrorCodesTranslation#setExceptionClass;@Nullable_	protected DataAccessException createCustomException(_			String task, @Nullable String sql, SQLException sqlEx, Class<?> exceptionClass) {__		_		try {_			int constructorType = 0__			Constructor<?>[] constructors = exceptionClass.getConstructors()__			for (Constructor<?> constructor : constructors) {_				Class<?>[] parameterTypes = constructor.getParameterTypes()__				if (parameterTypes.length == 1 && String.class == parameterTypes[0] &&_						constructorType < MESSAGE_ONLY_CONSTRUCTOR) {_					constructorType = MESSAGE_ONLY_CONSTRUCTOR__				}_				if (parameterTypes.length == 2 && String.class == parameterTypes[0] &&_						Throwable.class == parameterTypes[1] &&_						constructorType < MESSAGE_THROWABLE_CONSTRUCTOR) {_					constructorType = MESSAGE_THROWABLE_CONSTRUCTOR__				}_				if (parameterTypes.length == 2 && String.class == parameterTypes[0] &&_						SQLException.class == parameterTypes[1] &&_						constructorType < MESSAGE_SQLEX_CONSTRUCTOR) {_					constructorType = MESSAGE_SQLEX_CONSTRUCTOR__				}_				if (parameterTypes.length == 3 && String.class == parameterTypes[0] &&_						String.class == parameterTypes[1] && Throwable.class == parameterTypes[2] &&_						constructorType < MESSAGE_SQL_THROWABLE_CONSTRUCTOR) {_					constructorType = MESSAGE_SQL_THROWABLE_CONSTRUCTOR__				}_				if (parameterTypes.length == 3 && String.class == parameterTypes[0] &&_						String.class == parameterTypes[1] && SQLException.class == parameterTypes[2] &&_						constructorType < MESSAGE_SQL_SQLEX_CONSTRUCTOR) {_					constructorType = MESSAGE_SQL_SQLEX_CONSTRUCTOR__				}_			}__			_			Constructor<?> exceptionConstructor__			switch (constructorType) {_				case MESSAGE_SQL_SQLEX_CONSTRUCTOR:_					Class<?>[] messageAndSqlAndSqlExArgsClass = new Class<?>[] {String.class, String.class, SQLException.class}__					Object[] messageAndSqlAndSqlExArgs = new Object[] {task, sql, sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndSqlExArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlAndSqlExArgs)__				case MESSAGE_SQL_THROWABLE_CONSTRUCTOR:_					Class<?>[] messageAndSqlAndThrowableArgsClass = new Class<?>[] {String.class, String.class, Throwable.class}__					Object[] messageAndSqlAndThrowableArgs = new Object[] {task, sql, sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndThrowableArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlAndThrowableArgs)__				case MESSAGE_SQLEX_CONSTRUCTOR:_					Class<?>[] messageAndSqlExArgsClass = new Class<?>[] {String.class, SQLException.class}__					Object[] messageAndSqlExArgs = new Object[] {task + ": " + sqlEx.getMessage(), sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlExArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlExArgs)__				case MESSAGE_THROWABLE_CONSTRUCTOR:_					Class<?>[] messageAndThrowableArgsClass = new Class<?>[] {String.class, Throwable.class}__					Object[] messageAndThrowableArgs = new Object[] {task + ": " + sqlEx.getMessage(), sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndThrowableArgsClass)__					return (DataAccessException)exceptionConstructor.newInstance(messageAndThrowableArgs)__				case MESSAGE_ONLY_CONSTRUCTOR:_					Class<?>[] messageOnlyArgsClass = new Class<?>[] {String.class}__					Object[] messageOnlyArgs = new Object[] {task + ": " + sqlEx.getMessage()}__					exceptionConstructor = exceptionClass.getConstructor(messageOnlyArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageOnlyArgs)__				default:_					if (logger.isWarnEnabled()) {_						logger.warn("Unable to find appropriate constructor of custom exception class [" +_								exceptionClass.getName() + "]")__					}_					return null__				}_		}_		catch (Throwable ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Unable to instantiate custom exception class [" + exceptionClass.getName() + "]", ex)__			}_			return null__		}_	};create,a,custom,link,data,access,exception,based,on,a,given,exception,class,from,a,link,custom,sqlerror,codes,translation,definition,param,task,readable,text,describing,the,task,being,attempted,param,sql,the,sql,query,or,update,that,caused,the,problem,may,be,code,null,param,sql,ex,the,offending,sqlexception,param,exception,class,the,exception,class,to,use,as,defined,in,the,link,custom,sqlerror,codes,translation,definition,return,code,null,if,the,custom,exception,could,not,be,created,otherwise,the,resulting,link,data,access,exception,this,exception,should,include,the,code,sql,ex,parameter,as,a,nested,root,cause,see,custom,sqlerror,codes,translation,set,exception,class;nullable,protected,data,access,exception,create,custom,exception,string,task,nullable,string,sql,sqlexception,sql,ex,class,exception,class,try,int,constructor,type,0,constructor,constructors,exception,class,get,constructors,for,constructor,constructor,constructors,class,parameter,types,constructor,get,parameter,types,if,parameter,types,length,1,string,class,parameter,types,0,constructor,type,constructor,type,if,parameter,types,length,2,string,class,parameter,types,0,throwable,class,parameter,types,1,constructor,type,constructor,type,if,parameter,types,length,2,string,class,parameter,types,0,sqlexception,class,parameter,types,1,constructor,type,constructor,type,if,parameter,types,length,3,string,class,parameter,types,0,string,class,parameter,types,1,throwable,class,parameter,types,2,constructor,type,constructor,type,if,parameter,types,length,3,string,class,parameter,types,0,string,class,parameter,types,1,sqlexception,class,parameter,types,2,constructor,type,constructor,type,constructor,exception,constructor,switch,constructor,type,case,class,message,and,sql,and,sql,ex,args,class,new,class,string,class,string,class,sqlexception,class,object,message,and,sql,and,sql,ex,args,new,object,task,sql,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,and,sql,ex,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,and,sql,ex,args,case,class,message,and,sql,and,throwable,args,class,new,class,string,class,string,class,throwable,class,object,message,and,sql,and,throwable,args,new,object,task,sql,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,and,throwable,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,and,throwable,args,case,class,message,and,sql,ex,args,class,new,class,string,class,sqlexception,class,object,message,and,sql,ex,args,new,object,task,sql,ex,get,message,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,ex,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,ex,args,case,class,message,and,throwable,args,class,new,class,string,class,throwable,class,object,message,and,throwable,args,new,object,task,sql,ex,get,message,sql,ex,exception,constructor,exception,class,get,constructor,message,and,throwable,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,throwable,args,case,class,message,only,args,class,new,class,string,class,object,message,only,args,new,object,task,sql,ex,get,message,exception,constructor,exception,class,get,constructor,message,only,args,class,return,data,access,exception,exception,constructor,new,instance,message,only,args,default,if,logger,is,warn,enabled,logger,warn,unable,to,find,appropriate,constructor,of,custom,exception,class,exception,class,get,name,return,null,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,unable,to,instantiate,custom,exception,class,exception,class,get,name,ex,return,null
SQLErrorCodeSQLExceptionTranslator -> @Nullable 	protected DataAccessException customTranslate(String task, @Nullable String sql, SQLException sqlEx);1496242568;Subclasses can override this method to attempt a custom mapping from SQLException_to DataAccessException._@param task readable text describing the task being attempted_@param sql SQL query or update that caused the problem. May be {@code null}._@param sqlEx the offending SQLException_@return null if no custom translation was possible, otherwise a DataAccessException_resulting from custom translation. This exception should include the sqlEx parameter_as a nested root cause. This implementation always returns null, meaning that_the translator always falls back to the default error codes.;@Nullable_	protected DataAccessException customTranslate(String task, @Nullable String sql, SQLException sqlEx) {_		return null__	};subclasses,can,override,this,method,to,attempt,a,custom,mapping,from,sqlexception,to,data,access,exception,param,task,readable,text,describing,the,task,being,attempted,param,sql,sql,query,or,update,that,caused,the,problem,may,be,code,null,param,sql,ex,the,offending,sqlexception,return,null,if,no,custom,translation,was,possible,otherwise,a,data,access,exception,resulting,from,custom,translation,this,exception,should,include,the,sql,ex,parameter,as,a,nested,root,cause,this,implementation,always,returns,null,meaning,that,the,translator,always,falls,back,to,the,default,error,codes;nullable,protected,data,access,exception,custom,translate,string,task,nullable,string,sql,sqlexception,sql,ex,return,null
SQLErrorCodeSQLExceptionTranslator -> @Nullable 	protected DataAccessException customTranslate(String task, @Nullable String sql, SQLException sqlEx);1496837955;Subclasses can override this method to attempt a custom mapping from SQLException_to DataAccessException._@param task readable text describing the task being attempted_@param sql SQL query or update that caused the problem. May be {@code null}._@param sqlEx the offending SQLException_@return null if no custom translation was possible, otherwise a DataAccessException_resulting from custom translation. This exception should include the sqlEx parameter_as a nested root cause. This implementation always returns null, meaning that_the translator always falls back to the default error codes.;@Nullable_	protected DataAccessException customTranslate(String task, @Nullable String sql, SQLException sqlEx) {_		return null__	};subclasses,can,override,this,method,to,attempt,a,custom,mapping,from,sqlexception,to,data,access,exception,param,task,readable,text,describing,the,task,being,attempted,param,sql,sql,query,or,update,that,caused,the,problem,may,be,code,null,param,sql,ex,the,offending,sqlexception,return,null,if,no,custom,translation,was,possible,otherwise,a,data,access,exception,resulting,from,custom,translation,this,exception,should,include,the,sql,ex,parameter,as,a,nested,root,cause,this,implementation,always,returns,null,meaning,that,the,translator,always,falls,back,to,the,default,error,codes;nullable,protected,data,access,exception,custom,translate,string,task,nullable,string,sql,sqlexception,sql,ex,return,null
SQLErrorCodeSQLExceptionTranslator -> @Nullable 	protected DataAccessException customTranslate(String task, @Nullable String sql, SQLException sqlEx);1498780456;Subclasses can override this method to attempt a custom mapping from SQLException_to DataAccessException._@param task readable text describing the task being attempted_@param sql SQL query or update that caused the problem. May be {@code null}._@param sqlEx the offending SQLException_@return null if no custom translation was possible, otherwise a DataAccessException_resulting from custom translation. This exception should include the sqlEx parameter_as a nested root cause. This implementation always returns null, meaning that_the translator always falls back to the default error codes.;@Nullable_	protected DataAccessException customTranslate(String task, @Nullable String sql, SQLException sqlEx) {_		return null__	};subclasses,can,override,this,method,to,attempt,a,custom,mapping,from,sqlexception,to,data,access,exception,param,task,readable,text,describing,the,task,being,attempted,param,sql,sql,query,or,update,that,caused,the,problem,may,be,code,null,param,sql,ex,the,offending,sqlexception,return,null,if,no,custom,translation,was,possible,otherwise,a,data,access,exception,resulting,from,custom,translation,this,exception,should,include,the,sql,ex,parameter,as,a,nested,root,cause,this,implementation,always,returns,null,meaning,that,the,translator,always,falls,back,to,the,default,error,codes;nullable,protected,data,access,exception,custom,translate,string,task,nullable,string,sql,sqlexception,sql,ex,return,null
SQLErrorCodeSQLExceptionTranslator -> @Nullable 	protected DataAccessException customTranslate(String task, @Nullable String sql, SQLException sqlEx);1500448076;Subclasses can override this method to attempt a custom mapping from SQLException_to DataAccessException._@param task readable text describing the task being attempted_@param sql SQL query or update that caused the problem. May be {@code null}._@param sqlEx the offending SQLException_@return null if no custom translation was possible, otherwise a DataAccessException_resulting from custom translation. This exception should include the sqlEx parameter_as a nested root cause. This implementation always returns null, meaning that_the translator always falls back to the default error codes.;@Nullable_	protected DataAccessException customTranslate(String task, @Nullable String sql, SQLException sqlEx) {_		return null__	};subclasses,can,override,this,method,to,attempt,a,custom,mapping,from,sqlexception,to,data,access,exception,param,task,readable,text,describing,the,task,being,attempted,param,sql,sql,query,or,update,that,caused,the,problem,may,be,code,null,param,sql,ex,the,offending,sqlexception,return,null,if,no,custom,translation,was,possible,otherwise,a,data,access,exception,resulting,from,custom,translation,this,exception,should,include,the,sql,ex,parameter,as,a,nested,root,cause,this,implementation,always,returns,null,meaning,that,the,translator,always,falls,back,to,the,default,error,codes;nullable,protected,data,access,exception,custom,translate,string,task,nullable,string,sql,sqlexception,sql,ex,return,null
SQLErrorCodeSQLExceptionTranslator -> @Nullable 	protected DataAccessException customTranslate(String task, @Nullable String sql, SQLException sqlEx);1502974979;Subclasses can override this method to attempt a custom mapping from SQLException_to DataAccessException._@param task readable text describing the task being attempted_@param sql SQL query or update that caused the problem. May be {@code null}._@param sqlEx the offending SQLException_@return null if no custom translation was possible, otherwise a DataAccessException_resulting from custom translation. This exception should include the sqlEx parameter_as a nested root cause. This implementation always returns null, meaning that_the translator always falls back to the default error codes.;@Nullable_	protected DataAccessException customTranslate(String task, @Nullable String sql, SQLException sqlEx) {_		return null__	};subclasses,can,override,this,method,to,attempt,a,custom,mapping,from,sqlexception,to,data,access,exception,param,task,readable,text,describing,the,task,being,attempted,param,sql,sql,query,or,update,that,caused,the,problem,may,be,code,null,param,sql,ex,the,offending,sqlexception,return,null,if,no,custom,translation,was,possible,otherwise,a,data,access,exception,resulting,from,custom,translation,this,exception,should,include,the,sql,ex,parameter,as,a,nested,root,cause,this,implementation,always,returns,null,meaning,that,the,translator,always,falls,back,to,the,default,error,codes;nullable,protected,data,access,exception,custom,translate,string,task,nullable,string,sql,sqlexception,sql,ex,return,null
SQLErrorCodeSQLExceptionTranslator -> @Nullable 	protected DataAccessException customTranslate(String task, @Nullable String sql, SQLException sqlEx);1506097334;Subclasses can override this method to attempt a custom mapping from SQLException_to DataAccessException._@param task readable text describing the task being attempted_@param sql SQL query or update that caused the problem. May be {@code null}._@param sqlEx the offending SQLException_@return null if no custom translation was possible, otherwise a DataAccessException_resulting from custom translation. This exception should include the sqlEx parameter_as a nested root cause. This implementation always returns null, meaning that_the translator always falls back to the default error codes.;@Nullable_	protected DataAccessException customTranslate(String task, @Nullable String sql, SQLException sqlEx) {_		return null__	};subclasses,can,override,this,method,to,attempt,a,custom,mapping,from,sqlexception,to,data,access,exception,param,task,readable,text,describing,the,task,being,attempted,param,sql,sql,query,or,update,that,caused,the,problem,may,be,code,null,param,sql,ex,the,offending,sqlexception,return,null,if,no,custom,translation,was,possible,otherwise,a,data,access,exception,resulting,from,custom,translation,this,exception,should,include,the,sql,ex,parameter,as,a,nested,root,cause,this,implementation,always,returns,null,meaning,that,the,translator,always,falls,back,to,the,default,error,codes;nullable,protected,data,access,exception,custom,translate,string,task,nullable,string,sql,sqlexception,sql,ex,return,null
SQLErrorCodeSQLExceptionTranslator -> @Nullable 	protected DataAccessException customTranslate(String task, @Nullable String sql, SQLException sqlEx);1520529117;Subclasses can override this method to attempt a custom mapping from SQLException_to DataAccessException._@param task readable text describing the task being attempted_@param sql SQL query or update that caused the problem. May be {@code null}._@param sqlEx the offending SQLException_@return null if no custom translation was possible, otherwise a DataAccessException_resulting from custom translation. This exception should include the sqlEx parameter_as a nested root cause. This implementation always returns null, meaning that_the translator always falls back to the default error codes.;@Nullable_	protected DataAccessException customTranslate(String task, @Nullable String sql, SQLException sqlEx) {_		return null__	};subclasses,can,override,this,method,to,attempt,a,custom,mapping,from,sqlexception,to,data,access,exception,param,task,readable,text,describing,the,task,being,attempted,param,sql,sql,query,or,update,that,caused,the,problem,may,be,code,null,param,sql,ex,the,offending,sqlexception,return,null,if,no,custom,translation,was,possible,otherwise,a,data,access,exception,resulting,from,custom,translation,this,exception,should,include,the,sql,ex,parameter,as,a,nested,root,cause,this,implementation,always,returns,null,meaning,that,the,translator,always,falls,back,to,the,default,error,codes;nullable,protected,data,access,exception,custom,translate,string,task,nullable,string,sql,sqlexception,sql,ex,return,null
SQLErrorCodeSQLExceptionTranslator -> @Nullable 	protected DataAccessException customTranslate(String task, @Nullable String sql, SQLException sqlEx);1521457504;Subclasses can override this method to attempt a custom mapping from SQLException_to DataAccessException._@param task readable text describing the task being attempted_@param sql SQL query or update that caused the problem. May be {@code null}._@param sqlEx the offending SQLException_@return null if no custom translation was possible, otherwise a DataAccessException_resulting from custom translation. This exception should include the sqlEx parameter_as a nested root cause. This implementation always returns null, meaning that_the translator always falls back to the default error codes.;@Nullable_	protected DataAccessException customTranslate(String task, @Nullable String sql, SQLException sqlEx) {_		return null__	};subclasses,can,override,this,method,to,attempt,a,custom,mapping,from,sqlexception,to,data,access,exception,param,task,readable,text,describing,the,task,being,attempted,param,sql,sql,query,or,update,that,caused,the,problem,may,be,code,null,param,sql,ex,the,offending,sqlexception,return,null,if,no,custom,translation,was,possible,otherwise,a,data,access,exception,resulting,from,custom,translation,this,exception,should,include,the,sql,ex,parameter,as,a,nested,root,cause,this,implementation,always,returns,null,meaning,that,the,translator,always,falls,back,to,the,default,error,codes;nullable,protected,data,access,exception,custom,translate,string,task,nullable,string,sql,sqlexception,sql,ex,return,null
SQLErrorCodeSQLExceptionTranslator -> @Nullable 	protected DataAccessException customTranslate(String task, @Nullable String sql, SQLException sqlEx);1530174524;Subclasses can override this method to attempt a custom mapping from SQLException_to DataAccessException._@param task readable text describing the task being attempted_@param sql the SQL query or update that caused the problem. May be {@code null}._@param sqlEx the offending SQLException_@return null if no custom translation was possible, otherwise a DataAccessException_resulting from custom translation. This exception should include the sqlEx parameter_as a nested root cause. This implementation always returns null, meaning that_the translator always falls back to the default error codes.;@Nullable_	protected DataAccessException customTranslate(String task, @Nullable String sql, SQLException sqlEx) {_		return null__	};subclasses,can,override,this,method,to,attempt,a,custom,mapping,from,sqlexception,to,data,access,exception,param,task,readable,text,describing,the,task,being,attempted,param,sql,the,sql,query,or,update,that,caused,the,problem,may,be,code,null,param,sql,ex,the,offending,sqlexception,return,null,if,no,custom,translation,was,possible,otherwise,a,data,access,exception,resulting,from,custom,translation,this,exception,should,include,the,sql,ex,parameter,as,a,nested,root,cause,this,implementation,always,returns,null,meaning,that,the,translator,always,falls,back,to,the,default,error,codes;nullable,protected,data,access,exception,custom,translate,string,task,nullable,string,sql,sqlexception,sql,ex,return,null
SQLErrorCodeSQLExceptionTranslator -> @Nullable 	protected DataAccessException customTranslate(String task, @Nullable String sql, SQLException sqlEx);1531144424;Subclasses can override this method to attempt a custom mapping from_{@link SQLException} to {@link DataAccessException}._@param task readable text describing the task being attempted_@param sql the SQL query or update that caused the problem (may be {@code null})_@param sqlEx the offending SQLException_@return {@code null} if no custom translation applies, otherwise a {@link DataAccessException}_resulting from custom translation. This exception should include the {@code sqlEx} parameter_as a nested root cause. This implementation always returns {@code null}, meaning that the_translator always falls back to the default error codes.;@Nullable_	protected DataAccessException customTranslate(String task, @Nullable String sql, SQLException sqlEx) {_		return null__	};subclasses,can,override,this,method,to,attempt,a,custom,mapping,from,link,sqlexception,to,link,data,access,exception,param,task,readable,text,describing,the,task,being,attempted,param,sql,the,sql,query,or,update,that,caused,the,problem,may,be,code,null,param,sql,ex,the,offending,sqlexception,return,code,null,if,no,custom,translation,applies,otherwise,a,link,data,access,exception,resulting,from,custom,translation,this,exception,should,include,the,code,sql,ex,parameter,as,a,nested,root,cause,this,implementation,always,returns,code,null,meaning,that,the,translator,always,falls,back,to,the,default,error,codes;nullable,protected,data,access,exception,custom,translate,string,task,nullable,string,sql,sqlexception,sql,ex,return,null
SQLErrorCodeSQLExceptionTranslator -> protected DataAccessException createCustomException( 			String task, String sql, SQLException sqlEx, Class<?> exceptionClass);1385412762;Create a custom DataAccessException, based on a given exception_class from a CustomSQLErrorCodesTranslation definition._@param task readable text describing the task being attempted_@param sql SQL query or update that caused the problem. May be {@code null}._@param sqlEx the offending SQLException_@param exceptionClass the exception class to use, as defined in the_CustomSQLErrorCodesTranslation definition_@return null if the custom exception could not be created, otherwise_the resulting DataAccessException. This exception should include the_sqlEx parameter as a nested root cause._@see CustomSQLErrorCodesTranslation#setExceptionClass;protected DataAccessException createCustomException(_			String task, String sql, SQLException sqlEx, Class<?> exceptionClass) {__		_		try {_			int constructorType = 0__			Constructor<?>[] constructors = exceptionClass.getConstructors()__			for (Constructor<?> constructor : constructors) {_				Class<?>[] parameterTypes = constructor.getParameterTypes()__				if (parameterTypes.length == 1 && parameterTypes[0].equals(String.class)) {_					if (constructorType < MESSAGE_ONLY_CONSTRUCTOR)_						constructorType = MESSAGE_ONLY_CONSTRUCTOR__				}_				if (parameterTypes.length == 2 && parameterTypes[0].equals(String.class) &&_						parameterTypes[1].equals(Throwable.class)) {_					if (constructorType < MESSAGE_THROWABLE_CONSTRUCTOR)_						constructorType = MESSAGE_THROWABLE_CONSTRUCTOR__				}_				if (parameterTypes.length == 2 && parameterTypes[0].equals(String.class) &&_						parameterTypes[1].equals(SQLException.class)) {_					if (constructorType < MESSAGE_SQLEX_CONSTRUCTOR)_						constructorType = MESSAGE_SQLEX_CONSTRUCTOR__				}_				if (parameterTypes.length == 3 && parameterTypes[0].equals(String.class) &&_						parameterTypes[1].equals(String.class) && parameterTypes[2].equals(Throwable.class)) {_					if (constructorType < MESSAGE_SQL_THROWABLE_CONSTRUCTOR)_						constructorType = MESSAGE_SQL_THROWABLE_CONSTRUCTOR__				}_				if (parameterTypes.length == 3 && parameterTypes[0].equals(String.class) &&_						parameterTypes[1].equals(String.class) && parameterTypes[2].equals(SQLException.class)) {_					if (constructorType < MESSAGE_SQL_SQLEX_CONSTRUCTOR)_						constructorType = MESSAGE_SQL_SQLEX_CONSTRUCTOR__				}_			}__			_			Constructor<?> exceptionConstructor__			switch (constructorType) {_				case MESSAGE_SQL_SQLEX_CONSTRUCTOR:_					Class<?>[] messageAndSqlAndSqlExArgsClass = new Class<?>[] {String.class, String.class, SQLException.class}__					Object[] messageAndSqlAndSqlExArgs = new Object[] {task, sql, sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndSqlExArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlAndSqlExArgs)__				case MESSAGE_SQL_THROWABLE_CONSTRUCTOR:_					Class<?>[] messageAndSqlAndThrowableArgsClass = new Class<?>[] {String.class, String.class, Throwable.class}__					Object[] messageAndSqlAndThrowableArgs = new Object[] {task, sql, sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndThrowableArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlAndThrowableArgs)__				case MESSAGE_SQLEX_CONSTRUCTOR:_					Class<?>[] messageAndSqlExArgsClass = new Class<?>[] {String.class, SQLException.class}__					Object[] messageAndSqlExArgs = new Object[] {task + ": " + sqlEx.getMessage(), sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlExArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlExArgs)__				case MESSAGE_THROWABLE_CONSTRUCTOR:_					Class<?>[] messageAndThrowableArgsClass = new Class<?>[] {String.class, Throwable.class}__					Object[] messageAndThrowableArgs = new Object[] {task + ": " + sqlEx.getMessage(), sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndThrowableArgsClass)__					return (DataAccessException)exceptionConstructor.newInstance(messageAndThrowableArgs)__				case MESSAGE_ONLY_CONSTRUCTOR:_					Class<?>[] messageOnlyArgsClass = new Class<?>[] {String.class}__					Object[] messageOnlyArgs = new Object[] {task + ": " + sqlEx.getMessage()}__					exceptionConstructor = exceptionClass.getConstructor(messageOnlyArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageOnlyArgs)__				default:_					if (logger.isWarnEnabled()) {_						logger.warn("Unable to find appropriate constructor of custom exception class [" +_								exceptionClass.getName() + "]")__					}_					return null__				}_		}_		catch (Throwable ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Unable to instantiate custom exception class [" + exceptionClass.getName() + "]", ex)__			}_			return null__		}_	};create,a,custom,data,access,exception,based,on,a,given,exception,class,from,a,custom,sqlerror,codes,translation,definition,param,task,readable,text,describing,the,task,being,attempted,param,sql,sql,query,or,update,that,caused,the,problem,may,be,code,null,param,sql,ex,the,offending,sqlexception,param,exception,class,the,exception,class,to,use,as,defined,in,the,custom,sqlerror,codes,translation,definition,return,null,if,the,custom,exception,could,not,be,created,otherwise,the,resulting,data,access,exception,this,exception,should,include,the,sql,ex,parameter,as,a,nested,root,cause,see,custom,sqlerror,codes,translation,set,exception,class;protected,data,access,exception,create,custom,exception,string,task,string,sql,sqlexception,sql,ex,class,exception,class,try,int,constructor,type,0,constructor,constructors,exception,class,get,constructors,for,constructor,constructor,constructors,class,parameter,types,constructor,get,parameter,types,if,parameter,types,length,1,parameter,types,0,equals,string,class,if,constructor,type,constructor,type,if,parameter,types,length,2,parameter,types,0,equals,string,class,parameter,types,1,equals,throwable,class,if,constructor,type,constructor,type,if,parameter,types,length,2,parameter,types,0,equals,string,class,parameter,types,1,equals,sqlexception,class,if,constructor,type,constructor,type,if,parameter,types,length,3,parameter,types,0,equals,string,class,parameter,types,1,equals,string,class,parameter,types,2,equals,throwable,class,if,constructor,type,constructor,type,if,parameter,types,length,3,parameter,types,0,equals,string,class,parameter,types,1,equals,string,class,parameter,types,2,equals,sqlexception,class,if,constructor,type,constructor,type,constructor,exception,constructor,switch,constructor,type,case,class,message,and,sql,and,sql,ex,args,class,new,class,string,class,string,class,sqlexception,class,object,message,and,sql,and,sql,ex,args,new,object,task,sql,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,and,sql,ex,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,and,sql,ex,args,case,class,message,and,sql,and,throwable,args,class,new,class,string,class,string,class,throwable,class,object,message,and,sql,and,throwable,args,new,object,task,sql,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,and,throwable,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,and,throwable,args,case,class,message,and,sql,ex,args,class,new,class,string,class,sqlexception,class,object,message,and,sql,ex,args,new,object,task,sql,ex,get,message,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,ex,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,ex,args,case,class,message,and,throwable,args,class,new,class,string,class,throwable,class,object,message,and,throwable,args,new,object,task,sql,ex,get,message,sql,ex,exception,constructor,exception,class,get,constructor,message,and,throwable,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,throwable,args,case,class,message,only,args,class,new,class,string,class,object,message,only,args,new,object,task,sql,ex,get,message,exception,constructor,exception,class,get,constructor,message,only,args,class,return,data,access,exception,exception,constructor,new,instance,message,only,args,default,if,logger,is,warn,enabled,logger,warn,unable,to,find,appropriate,constructor,of,custom,exception,class,exception,class,get,name,return,null,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,unable,to,instantiate,custom,exception,class,exception,class,get,name,ex,return,null
SQLErrorCodeSQLExceptionTranslator -> protected DataAccessException createCustomException( 			String task, String sql, SQLException sqlEx, Class<?> exceptionClass);1432125256;Create a custom DataAccessException, based on a given exception_class from a CustomSQLErrorCodesTranslation definition._@param task readable text describing the task being attempted_@param sql SQL query or update that caused the problem. May be {@code null}._@param sqlEx the offending SQLException_@param exceptionClass the exception class to use, as defined in the_CustomSQLErrorCodesTranslation definition_@return null if the custom exception could not be created, otherwise_the resulting DataAccessException. This exception should include the_sqlEx parameter as a nested root cause._@see CustomSQLErrorCodesTranslation#setExceptionClass;protected DataAccessException createCustomException(_			String task, String sql, SQLException sqlEx, Class<?> exceptionClass) {__		_		try {_			int constructorType = 0__			Constructor<?>[] constructors = exceptionClass.getConstructors()__			for (Constructor<?> constructor : constructors) {_				Class<?>[] parameterTypes = constructor.getParameterTypes()__				if (parameterTypes.length == 1 && String.class == parameterTypes[0]) {_					if (constructorType < MESSAGE_ONLY_CONSTRUCTOR)_						constructorType = MESSAGE_ONLY_CONSTRUCTOR__				}_				if (parameterTypes.length == 2 && String.class == parameterTypes[0] &&_						Throwable.class == parameterTypes[1]) {_					if (constructorType < MESSAGE_THROWABLE_CONSTRUCTOR)_						constructorType = MESSAGE_THROWABLE_CONSTRUCTOR__				}_				if (parameterTypes.length == 2 && String.class == parameterTypes[0] &&_						SQLException.class == parameterTypes[1]) {_					if (constructorType < MESSAGE_SQLEX_CONSTRUCTOR)_						constructorType = MESSAGE_SQLEX_CONSTRUCTOR__				}_				if (parameterTypes.length == 3 && String.class == parameterTypes[0] &&_						String.class == parameterTypes[1] && Throwable.class == parameterTypes[2]) {_					if (constructorType < MESSAGE_SQL_THROWABLE_CONSTRUCTOR)_						constructorType = MESSAGE_SQL_THROWABLE_CONSTRUCTOR__				}_				if (parameterTypes.length == 3 && String.class == parameterTypes[0] &&_						String.class == parameterTypes[1] && SQLException.class == parameterTypes[2]) {_					if (constructorType < MESSAGE_SQL_SQLEX_CONSTRUCTOR)_						constructorType = MESSAGE_SQL_SQLEX_CONSTRUCTOR__				}_			}__			_			Constructor<?> exceptionConstructor__			switch (constructorType) {_				case MESSAGE_SQL_SQLEX_CONSTRUCTOR:_					Class<?>[] messageAndSqlAndSqlExArgsClass = new Class<?>[] {String.class, String.class, SQLException.class}__					Object[] messageAndSqlAndSqlExArgs = new Object[] {task, sql, sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndSqlExArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlAndSqlExArgs)__				case MESSAGE_SQL_THROWABLE_CONSTRUCTOR:_					Class<?>[] messageAndSqlAndThrowableArgsClass = new Class<?>[] {String.class, String.class, Throwable.class}__					Object[] messageAndSqlAndThrowableArgs = new Object[] {task, sql, sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndThrowableArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlAndThrowableArgs)__				case MESSAGE_SQLEX_CONSTRUCTOR:_					Class<?>[] messageAndSqlExArgsClass = new Class<?>[] {String.class, SQLException.class}__					Object[] messageAndSqlExArgs = new Object[] {task + ": " + sqlEx.getMessage(), sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlExArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlExArgs)__				case MESSAGE_THROWABLE_CONSTRUCTOR:_					Class<?>[] messageAndThrowableArgsClass = new Class<?>[] {String.class, Throwable.class}__					Object[] messageAndThrowableArgs = new Object[] {task + ": " + sqlEx.getMessage(), sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndThrowableArgsClass)__					return (DataAccessException)exceptionConstructor.newInstance(messageAndThrowableArgs)__				case MESSAGE_ONLY_CONSTRUCTOR:_					Class<?>[] messageOnlyArgsClass = new Class<?>[] {String.class}__					Object[] messageOnlyArgs = new Object[] {task + ": " + sqlEx.getMessage()}__					exceptionConstructor = exceptionClass.getConstructor(messageOnlyArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageOnlyArgs)__				default:_					if (logger.isWarnEnabled()) {_						logger.warn("Unable to find appropriate constructor of custom exception class [" +_								exceptionClass.getName() + "]")__					}_					return null__				}_		}_		catch (Throwable ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Unable to instantiate custom exception class [" + exceptionClass.getName() + "]", ex)__			}_			return null__		}_	};create,a,custom,data,access,exception,based,on,a,given,exception,class,from,a,custom,sqlerror,codes,translation,definition,param,task,readable,text,describing,the,task,being,attempted,param,sql,sql,query,or,update,that,caused,the,problem,may,be,code,null,param,sql,ex,the,offending,sqlexception,param,exception,class,the,exception,class,to,use,as,defined,in,the,custom,sqlerror,codes,translation,definition,return,null,if,the,custom,exception,could,not,be,created,otherwise,the,resulting,data,access,exception,this,exception,should,include,the,sql,ex,parameter,as,a,nested,root,cause,see,custom,sqlerror,codes,translation,set,exception,class;protected,data,access,exception,create,custom,exception,string,task,string,sql,sqlexception,sql,ex,class,exception,class,try,int,constructor,type,0,constructor,constructors,exception,class,get,constructors,for,constructor,constructor,constructors,class,parameter,types,constructor,get,parameter,types,if,parameter,types,length,1,string,class,parameter,types,0,if,constructor,type,constructor,type,if,parameter,types,length,2,string,class,parameter,types,0,throwable,class,parameter,types,1,if,constructor,type,constructor,type,if,parameter,types,length,2,string,class,parameter,types,0,sqlexception,class,parameter,types,1,if,constructor,type,constructor,type,if,parameter,types,length,3,string,class,parameter,types,0,string,class,parameter,types,1,throwable,class,parameter,types,2,if,constructor,type,constructor,type,if,parameter,types,length,3,string,class,parameter,types,0,string,class,parameter,types,1,sqlexception,class,parameter,types,2,if,constructor,type,constructor,type,constructor,exception,constructor,switch,constructor,type,case,class,message,and,sql,and,sql,ex,args,class,new,class,string,class,string,class,sqlexception,class,object,message,and,sql,and,sql,ex,args,new,object,task,sql,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,and,sql,ex,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,and,sql,ex,args,case,class,message,and,sql,and,throwable,args,class,new,class,string,class,string,class,throwable,class,object,message,and,sql,and,throwable,args,new,object,task,sql,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,and,throwable,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,and,throwable,args,case,class,message,and,sql,ex,args,class,new,class,string,class,sqlexception,class,object,message,and,sql,ex,args,new,object,task,sql,ex,get,message,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,ex,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,ex,args,case,class,message,and,throwable,args,class,new,class,string,class,throwable,class,object,message,and,throwable,args,new,object,task,sql,ex,get,message,sql,ex,exception,constructor,exception,class,get,constructor,message,and,throwable,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,throwable,args,case,class,message,only,args,class,new,class,string,class,object,message,only,args,new,object,task,sql,ex,get,message,exception,constructor,exception,class,get,constructor,message,only,args,class,return,data,access,exception,exception,constructor,new,instance,message,only,args,default,if,logger,is,warn,enabled,logger,warn,unable,to,find,appropriate,constructor,of,custom,exception,class,exception,class,get,name,return,null,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,unable,to,instantiate,custom,exception,class,exception,class,get,name,ex,return,null
SQLErrorCodeSQLExceptionTranslator -> protected DataAccessException createCustomException( 			String task, @Nullable String sql, SQLException sqlEx, Class<?> exceptionClass);1495868221;Create a custom DataAccessException, based on a given exception_class from a CustomSQLErrorCodesTranslation definition._@param task readable text describing the task being attempted_@param sql SQL query or update that caused the problem. May be {@code null}._@param sqlEx the offending SQLException_@param exceptionClass the exception class to use, as defined in the_CustomSQLErrorCodesTranslation definition_@return null if the custom exception could not be created, otherwise_the resulting DataAccessException. This exception should include the_sqlEx parameter as a nested root cause._@see CustomSQLErrorCodesTranslation#setExceptionClass;protected DataAccessException createCustomException(_			String task, @Nullable String sql, SQLException sqlEx, Class<?> exceptionClass) {__		_		try {_			int constructorType = 0__			Constructor<?>[] constructors = exceptionClass.getConstructors()__			for (Constructor<?> constructor : constructors) {_				Class<?>[] parameterTypes = constructor.getParameterTypes()__				if (parameterTypes.length == 1 && String.class == parameterTypes[0]) {_					if (constructorType < MESSAGE_ONLY_CONSTRUCTOR)_						constructorType = MESSAGE_ONLY_CONSTRUCTOR__				}_				if (parameterTypes.length == 2 && String.class == parameterTypes[0] &&_						Throwable.class == parameterTypes[1]) {_					if (constructorType < MESSAGE_THROWABLE_CONSTRUCTOR)_						constructorType = MESSAGE_THROWABLE_CONSTRUCTOR__				}_				if (parameterTypes.length == 2 && String.class == parameterTypes[0] &&_						SQLException.class == parameterTypes[1]) {_					if (constructorType < MESSAGE_SQLEX_CONSTRUCTOR)_						constructorType = MESSAGE_SQLEX_CONSTRUCTOR__				}_				if (parameterTypes.length == 3 && String.class == parameterTypes[0] &&_						String.class == parameterTypes[1] && Throwable.class == parameterTypes[2]) {_					if (constructorType < MESSAGE_SQL_THROWABLE_CONSTRUCTOR)_						constructorType = MESSAGE_SQL_THROWABLE_CONSTRUCTOR__				}_				if (parameterTypes.length == 3 && String.class == parameterTypes[0] &&_						String.class == parameterTypes[1] && SQLException.class == parameterTypes[2]) {_					if (constructorType < MESSAGE_SQL_SQLEX_CONSTRUCTOR)_						constructorType = MESSAGE_SQL_SQLEX_CONSTRUCTOR__				}_			}__			_			Constructor<?> exceptionConstructor__			switch (constructorType) {_				case MESSAGE_SQL_SQLEX_CONSTRUCTOR:_					Class<?>[] messageAndSqlAndSqlExArgsClass = new Class<?>[] {String.class, String.class, SQLException.class}__					Object[] messageAndSqlAndSqlExArgs = new Object[] {task, sql, sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndSqlExArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlAndSqlExArgs)__				case MESSAGE_SQL_THROWABLE_CONSTRUCTOR:_					Class<?>[] messageAndSqlAndThrowableArgsClass = new Class<?>[] {String.class, String.class, Throwable.class}__					Object[] messageAndSqlAndThrowableArgs = new Object[] {task, sql, sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndThrowableArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlAndThrowableArgs)__				case MESSAGE_SQLEX_CONSTRUCTOR:_					Class<?>[] messageAndSqlExArgsClass = new Class<?>[] {String.class, SQLException.class}__					Object[] messageAndSqlExArgs = new Object[] {task + ": " + sqlEx.getMessage(), sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlExArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlExArgs)__				case MESSAGE_THROWABLE_CONSTRUCTOR:_					Class<?>[] messageAndThrowableArgsClass = new Class<?>[] {String.class, Throwable.class}__					Object[] messageAndThrowableArgs = new Object[] {task + ": " + sqlEx.getMessage(), sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndThrowableArgsClass)__					return (DataAccessException)exceptionConstructor.newInstance(messageAndThrowableArgs)__				case MESSAGE_ONLY_CONSTRUCTOR:_					Class<?>[] messageOnlyArgsClass = new Class<?>[] {String.class}__					Object[] messageOnlyArgs = new Object[] {task + ": " + sqlEx.getMessage()}__					exceptionConstructor = exceptionClass.getConstructor(messageOnlyArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageOnlyArgs)__				default:_					if (logger.isWarnEnabled()) {_						logger.warn("Unable to find appropriate constructor of custom exception class [" +_								exceptionClass.getName() + "]")__					}_					return null__				}_		}_		catch (Throwable ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Unable to instantiate custom exception class [" + exceptionClass.getName() + "]", ex)__			}_			return null__		}_	};create,a,custom,data,access,exception,based,on,a,given,exception,class,from,a,custom,sqlerror,codes,translation,definition,param,task,readable,text,describing,the,task,being,attempted,param,sql,sql,query,or,update,that,caused,the,problem,may,be,code,null,param,sql,ex,the,offending,sqlexception,param,exception,class,the,exception,class,to,use,as,defined,in,the,custom,sqlerror,codes,translation,definition,return,null,if,the,custom,exception,could,not,be,created,otherwise,the,resulting,data,access,exception,this,exception,should,include,the,sql,ex,parameter,as,a,nested,root,cause,see,custom,sqlerror,codes,translation,set,exception,class;protected,data,access,exception,create,custom,exception,string,task,nullable,string,sql,sqlexception,sql,ex,class,exception,class,try,int,constructor,type,0,constructor,constructors,exception,class,get,constructors,for,constructor,constructor,constructors,class,parameter,types,constructor,get,parameter,types,if,parameter,types,length,1,string,class,parameter,types,0,if,constructor,type,constructor,type,if,parameter,types,length,2,string,class,parameter,types,0,throwable,class,parameter,types,1,if,constructor,type,constructor,type,if,parameter,types,length,2,string,class,parameter,types,0,sqlexception,class,parameter,types,1,if,constructor,type,constructor,type,if,parameter,types,length,3,string,class,parameter,types,0,string,class,parameter,types,1,throwable,class,parameter,types,2,if,constructor,type,constructor,type,if,parameter,types,length,3,string,class,parameter,types,0,string,class,parameter,types,1,sqlexception,class,parameter,types,2,if,constructor,type,constructor,type,constructor,exception,constructor,switch,constructor,type,case,class,message,and,sql,and,sql,ex,args,class,new,class,string,class,string,class,sqlexception,class,object,message,and,sql,and,sql,ex,args,new,object,task,sql,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,and,sql,ex,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,and,sql,ex,args,case,class,message,and,sql,and,throwable,args,class,new,class,string,class,string,class,throwable,class,object,message,and,sql,and,throwable,args,new,object,task,sql,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,and,throwable,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,and,throwable,args,case,class,message,and,sql,ex,args,class,new,class,string,class,sqlexception,class,object,message,and,sql,ex,args,new,object,task,sql,ex,get,message,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,ex,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,ex,args,case,class,message,and,throwable,args,class,new,class,string,class,throwable,class,object,message,and,throwable,args,new,object,task,sql,ex,get,message,sql,ex,exception,constructor,exception,class,get,constructor,message,and,throwable,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,throwable,args,case,class,message,only,args,class,new,class,string,class,object,message,only,args,new,object,task,sql,ex,get,message,exception,constructor,exception,class,get,constructor,message,only,args,class,return,data,access,exception,exception,constructor,new,instance,message,only,args,default,if,logger,is,warn,enabled,logger,warn,unable,to,find,appropriate,constructor,of,custom,exception,class,exception,class,get,name,return,null,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,unable,to,instantiate,custom,exception,class,exception,class,get,name,ex,return,null
SQLErrorCodeSQLExceptionTranslator -> protected DataAccessException createCustomException( 			String task, @Nullable String sql, SQLException sqlEx, Class<?> exceptionClass);1496242568;Create a custom DataAccessException, based on a given exception_class from a CustomSQLErrorCodesTranslation definition._@param task readable text describing the task being attempted_@param sql SQL query or update that caused the problem. May be {@code null}._@param sqlEx the offending SQLException_@param exceptionClass the exception class to use, as defined in the_CustomSQLErrorCodesTranslation definition_@return null if the custom exception could not be created, otherwise_the resulting DataAccessException. This exception should include the_sqlEx parameter as a nested root cause._@see CustomSQLErrorCodesTranslation#setExceptionClass;protected DataAccessException createCustomException(_			String task, @Nullable String sql, SQLException sqlEx, Class<?> exceptionClass) {__		_		try {_			int constructorType = 0__			Constructor<?>[] constructors = exceptionClass.getConstructors()__			for (Constructor<?> constructor : constructors) {_				Class<?>[] parameterTypes = constructor.getParameterTypes()__				if (parameterTypes.length == 1 && String.class == parameterTypes[0]) {_					if (constructorType < MESSAGE_ONLY_CONSTRUCTOR)_						constructorType = MESSAGE_ONLY_CONSTRUCTOR__				}_				if (parameterTypes.length == 2 && String.class == parameterTypes[0] &&_						Throwable.class == parameterTypes[1]) {_					if (constructorType < MESSAGE_THROWABLE_CONSTRUCTOR)_						constructorType = MESSAGE_THROWABLE_CONSTRUCTOR__				}_				if (parameterTypes.length == 2 && String.class == parameterTypes[0] &&_						SQLException.class == parameterTypes[1]) {_					if (constructorType < MESSAGE_SQLEX_CONSTRUCTOR)_						constructorType = MESSAGE_SQLEX_CONSTRUCTOR__				}_				if (parameterTypes.length == 3 && String.class == parameterTypes[0] &&_						String.class == parameterTypes[1] && Throwable.class == parameterTypes[2]) {_					if (constructorType < MESSAGE_SQL_THROWABLE_CONSTRUCTOR)_						constructorType = MESSAGE_SQL_THROWABLE_CONSTRUCTOR__				}_				if (parameterTypes.length == 3 && String.class == parameterTypes[0] &&_						String.class == parameterTypes[1] && SQLException.class == parameterTypes[2]) {_					if (constructorType < MESSAGE_SQL_SQLEX_CONSTRUCTOR)_						constructorType = MESSAGE_SQL_SQLEX_CONSTRUCTOR__				}_			}__			_			Constructor<?> exceptionConstructor__			switch (constructorType) {_				case MESSAGE_SQL_SQLEX_CONSTRUCTOR:_					Class<?>[] messageAndSqlAndSqlExArgsClass = new Class<?>[] {String.class, String.class, SQLException.class}__					Object[] messageAndSqlAndSqlExArgs = new Object[] {task, sql, sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndSqlExArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlAndSqlExArgs)__				case MESSAGE_SQL_THROWABLE_CONSTRUCTOR:_					Class<?>[] messageAndSqlAndThrowableArgsClass = new Class<?>[] {String.class, String.class, Throwable.class}__					Object[] messageAndSqlAndThrowableArgs = new Object[] {task, sql, sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlAndThrowableArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlAndThrowableArgs)__				case MESSAGE_SQLEX_CONSTRUCTOR:_					Class<?>[] messageAndSqlExArgsClass = new Class<?>[] {String.class, SQLException.class}__					Object[] messageAndSqlExArgs = new Object[] {task + ": " + sqlEx.getMessage(), sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndSqlExArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageAndSqlExArgs)__				case MESSAGE_THROWABLE_CONSTRUCTOR:_					Class<?>[] messageAndThrowableArgsClass = new Class<?>[] {String.class, Throwable.class}__					Object[] messageAndThrowableArgs = new Object[] {task + ": " + sqlEx.getMessage(), sqlEx}__					exceptionConstructor = exceptionClass.getConstructor(messageAndThrowableArgsClass)__					return (DataAccessException)exceptionConstructor.newInstance(messageAndThrowableArgs)__				case MESSAGE_ONLY_CONSTRUCTOR:_					Class<?>[] messageOnlyArgsClass = new Class<?>[] {String.class}__					Object[] messageOnlyArgs = new Object[] {task + ": " + sqlEx.getMessage()}__					exceptionConstructor = exceptionClass.getConstructor(messageOnlyArgsClass)__					return (DataAccessException) exceptionConstructor.newInstance(messageOnlyArgs)__				default:_					if (logger.isWarnEnabled()) {_						logger.warn("Unable to find appropriate constructor of custom exception class [" +_								exceptionClass.getName() + "]")__					}_					return null__				}_		}_		catch (Throwable ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Unable to instantiate custom exception class [" + exceptionClass.getName() + "]", ex)__			}_			return null__		}_	};create,a,custom,data,access,exception,based,on,a,given,exception,class,from,a,custom,sqlerror,codes,translation,definition,param,task,readable,text,describing,the,task,being,attempted,param,sql,sql,query,or,update,that,caused,the,problem,may,be,code,null,param,sql,ex,the,offending,sqlexception,param,exception,class,the,exception,class,to,use,as,defined,in,the,custom,sqlerror,codes,translation,definition,return,null,if,the,custom,exception,could,not,be,created,otherwise,the,resulting,data,access,exception,this,exception,should,include,the,sql,ex,parameter,as,a,nested,root,cause,see,custom,sqlerror,codes,translation,set,exception,class;protected,data,access,exception,create,custom,exception,string,task,nullable,string,sql,sqlexception,sql,ex,class,exception,class,try,int,constructor,type,0,constructor,constructors,exception,class,get,constructors,for,constructor,constructor,constructors,class,parameter,types,constructor,get,parameter,types,if,parameter,types,length,1,string,class,parameter,types,0,if,constructor,type,constructor,type,if,parameter,types,length,2,string,class,parameter,types,0,throwable,class,parameter,types,1,if,constructor,type,constructor,type,if,parameter,types,length,2,string,class,parameter,types,0,sqlexception,class,parameter,types,1,if,constructor,type,constructor,type,if,parameter,types,length,3,string,class,parameter,types,0,string,class,parameter,types,1,throwable,class,parameter,types,2,if,constructor,type,constructor,type,if,parameter,types,length,3,string,class,parameter,types,0,string,class,parameter,types,1,sqlexception,class,parameter,types,2,if,constructor,type,constructor,type,constructor,exception,constructor,switch,constructor,type,case,class,message,and,sql,and,sql,ex,args,class,new,class,string,class,string,class,sqlexception,class,object,message,and,sql,and,sql,ex,args,new,object,task,sql,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,and,sql,ex,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,and,sql,ex,args,case,class,message,and,sql,and,throwable,args,class,new,class,string,class,string,class,throwable,class,object,message,and,sql,and,throwable,args,new,object,task,sql,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,and,throwable,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,and,throwable,args,case,class,message,and,sql,ex,args,class,new,class,string,class,sqlexception,class,object,message,and,sql,ex,args,new,object,task,sql,ex,get,message,sql,ex,exception,constructor,exception,class,get,constructor,message,and,sql,ex,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,sql,ex,args,case,class,message,and,throwable,args,class,new,class,string,class,throwable,class,object,message,and,throwable,args,new,object,task,sql,ex,get,message,sql,ex,exception,constructor,exception,class,get,constructor,message,and,throwable,args,class,return,data,access,exception,exception,constructor,new,instance,message,and,throwable,args,case,class,message,only,args,class,new,class,string,class,object,message,only,args,new,object,task,sql,ex,get,message,exception,constructor,exception,class,get,constructor,message,only,args,class,return,data,access,exception,exception,constructor,new,instance,message,only,args,default,if,logger,is,warn,enabled,logger,warn,unable,to,find,appropriate,constructor,of,custom,exception,class,exception,class,get,name,return,null,catch,throwable,ex,if,logger,is,warn,enabled,logger,warn,unable,to,instantiate,custom,exception,class,exception,class,get,name,ex,return,null
SQLErrorCodeSQLExceptionTranslator -> public void setSqlErrorCodes(@Nullable SQLErrorCodes sec);1500448076;Set custom error codes to be used for translation._@param sec custom error codes to use;public void setSqlErrorCodes(@Nullable SQLErrorCodes sec) {_		this.sqlErrorCodes = sec__	};set,custom,error,codes,to,be,used,for,translation,param,sec,custom,error,codes,to,use;public,void,set,sql,error,codes,nullable,sqlerror,codes,sec,this,sql,error,codes,sec
SQLErrorCodeSQLExceptionTranslator -> public void setSqlErrorCodes(@Nullable SQLErrorCodes sec);1502974979;Set custom error codes to be used for translation._@param sec custom error codes to use;public void setSqlErrorCodes(@Nullable SQLErrorCodes sec) {_		this.sqlErrorCodes = sec__	};set,custom,error,codes,to,be,used,for,translation,param,sec,custom,error,codes,to,use;public,void,set,sql,error,codes,nullable,sqlerror,codes,sec,this,sql,error,codes,sec
SQLErrorCodeSQLExceptionTranslator -> public void setSqlErrorCodes(@Nullable SQLErrorCodes sec);1506097334;Set custom error codes to be used for translation._@param sec custom error codes to use;public void setSqlErrorCodes(@Nullable SQLErrorCodes sec) {_		this.sqlErrorCodes = sec__	};set,custom,error,codes,to,be,used,for,translation,param,sec,custom,error,codes,to,use;public,void,set,sql,error,codes,nullable,sqlerror,codes,sec,this,sql,error,codes,sec
SQLErrorCodeSQLExceptionTranslator -> public void setSqlErrorCodes(@Nullable SQLErrorCodes sec);1520529117;Set custom error codes to be used for translation._@param sec custom error codes to use;public void setSqlErrorCodes(@Nullable SQLErrorCodes sec) {_		this.sqlErrorCodes = sec__	};set,custom,error,codes,to,be,used,for,translation,param,sec,custom,error,codes,to,use;public,void,set,sql,error,codes,nullable,sqlerror,codes,sec,this,sql,error,codes,sec
SQLErrorCodeSQLExceptionTranslator -> public void setSqlErrorCodes(@Nullable SQLErrorCodes sec);1521457504;Set custom error codes to be used for translation._@param sec custom error codes to use;public void setSqlErrorCodes(@Nullable SQLErrorCodes sec) {_		this.sqlErrorCodes = sec__	};set,custom,error,codes,to,be,used,for,translation,param,sec,custom,error,codes,to,use;public,void,set,sql,error,codes,nullable,sqlerror,codes,sec,this,sql,error,codes,sec
SQLErrorCodeSQLExceptionTranslator -> public void setSqlErrorCodes(@Nullable SQLErrorCodes sec);1530174524;Set custom error codes to be used for translation._@param sec custom error codes to use;public void setSqlErrorCodes(@Nullable SQLErrorCodes sec) {_		this.sqlErrorCodes = sec__	};set,custom,error,codes,to,be,used,for,translation,param,sec,custom,error,codes,to,use;public,void,set,sql,error,codes,nullable,sqlerror,codes,sec,this,sql,error,codes,sec
SQLErrorCodeSQLExceptionTranslator -> public void setSqlErrorCodes(@Nullable SQLErrorCodes sec);1531144424;Set custom error codes to be used for translation._@param sec custom error codes to use;public void setSqlErrorCodes(@Nullable SQLErrorCodes sec) {_		this.sqlErrorCodes = sec__	};set,custom,error,codes,to,be,used,for,translation,param,sec,custom,error,codes,to,use;public,void,set,sql,error,codes,nullable,sqlerror,codes,sec,this,sql,error,codes,sec
SQLErrorCodeSQLExceptionTranslator -> public void setDatabaseProductName(String dbName);1328020251;Set the database product name for this translator._<p>Setting this property will avoid obtaining a Connection from the DataSource_to get the metadata._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodesFactory#getErrorCodes(String)_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDatabaseProductName(String dbName) {_		this.sqlErrorCodes = SQLErrorCodesFactory.getInstance().getErrorCodes(dbName)__	};set,the,database,product,name,for,this,translator,p,setting,this,property,will,avoid,obtaining,a,connection,from,the,data,source,to,get,the,metadata,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,codes,factory,get,error,codes,string,see,java,sql,database,meta,data,get,database,product,name;public,void,set,database,product,name,string,db,name,this,sql,error,codes,sqlerror,codes,factory,get,instance,get,error,codes,db,name
SQLErrorCodeSQLExceptionTranslator -> public void setDatabaseProductName(String dbName);1356735495;Set the database product name for this translator._<p>Setting this property will avoid obtaining a Connection from the DataSource_to get the metadata._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodesFactory#getErrorCodes(String)_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDatabaseProductName(String dbName) {_		this.sqlErrorCodes = SQLErrorCodesFactory.getInstance().getErrorCodes(dbName)__	};set,the,database,product,name,for,this,translator,p,setting,this,property,will,avoid,obtaining,a,connection,from,the,data,source,to,get,the,metadata,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,codes,factory,get,error,codes,string,see,java,sql,database,meta,data,get,database,product,name;public,void,set,database,product,name,string,db,name,this,sql,error,codes,sqlerror,codes,factory,get,instance,get,error,codes,db,name
SQLErrorCodeSQLExceptionTranslator -> public void setDatabaseProductName(String dbName);1362408075;Set the database product name for this translator._<p>Setting this property will avoid obtaining a Connection from the DataSource_to get the metadata._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodesFactory#getErrorCodes(String)_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDatabaseProductName(String dbName) {_		this.sqlErrorCodes = SQLErrorCodesFactory.getInstance().getErrorCodes(dbName)__	};set,the,database,product,name,for,this,translator,p,setting,this,property,will,avoid,obtaining,a,connection,from,the,data,source,to,get,the,metadata,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,codes,factory,get,error,codes,string,see,java,sql,database,meta,data,get,database,product,name;public,void,set,database,product,name,string,db,name,this,sql,error,codes,sqlerror,codes,factory,get,instance,get,error,codes,db,name
SQLErrorCodeSQLExceptionTranslator -> public void setDatabaseProductName(String dbName);1363695025;Set the database product name for this translator._<p>Setting this property will avoid obtaining a Connection from the DataSource_to get the metadata._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodesFactory#getErrorCodes(String)_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDatabaseProductName(String dbName) {_		this.sqlErrorCodes = SQLErrorCodesFactory.getInstance().getErrorCodes(dbName)__	};set,the,database,product,name,for,this,translator,p,setting,this,property,will,avoid,obtaining,a,connection,from,the,data,source,to,get,the,metadata,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,codes,factory,get,error,codes,string,see,java,sql,database,meta,data,get,database,product,name;public,void,set,database,product,name,string,db,name,this,sql,error,codes,sqlerror,codes,factory,get,instance,get,error,codes,db,name
SQLErrorCodeSQLExceptionTranslator -> public void setDatabaseProductName(String dbName);1385412762;Set the database product name for this translator._<p>Setting this property will avoid obtaining a Connection from the DataSource_to get the metadata._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodesFactory#getErrorCodes(String)_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDatabaseProductName(String dbName) {_		this.sqlErrorCodes = SQLErrorCodesFactory.getInstance().getErrorCodes(dbName)__	};set,the,database,product,name,for,this,translator,p,setting,this,property,will,avoid,obtaining,a,connection,from,the,data,source,to,get,the,metadata,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,codes,factory,get,error,codes,string,see,java,sql,database,meta,data,get,database,product,name;public,void,set,database,product,name,string,db,name,this,sql,error,codes,sqlerror,codes,factory,get,instance,get,error,codes,db,name
SQLErrorCodeSQLExceptionTranslator -> public void setDatabaseProductName(String dbName);1432125256;Set the database product name for this translator._<p>Setting this property will avoid obtaining a Connection from the DataSource_to get the metadata._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodesFactory#getErrorCodes(String)_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDatabaseProductName(String dbName) {_		this.sqlErrorCodes = SQLErrorCodesFactory.getInstance().getErrorCodes(dbName)__	};set,the,database,product,name,for,this,translator,p,setting,this,property,will,avoid,obtaining,a,connection,from,the,data,source,to,get,the,metadata,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,codes,factory,get,error,codes,string,see,java,sql,database,meta,data,get,database,product,name;public,void,set,database,product,name,string,db,name,this,sql,error,codes,sqlerror,codes,factory,get,instance,get,error,codes,db,name
SQLErrorCodeSQLExceptionTranslator -> public void setDatabaseProductName(String dbName);1495868221;Set the database product name for this translator._<p>Setting this property will avoid obtaining a Connection from the DataSource_to get the metadata._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodesFactory#getErrorCodes(String)_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDatabaseProductName(String dbName) {_		this.sqlErrorCodes = SQLErrorCodesFactory.getInstance().getErrorCodes(dbName)__	};set,the,database,product,name,for,this,translator,p,setting,this,property,will,avoid,obtaining,a,connection,from,the,data,source,to,get,the,metadata,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,codes,factory,get,error,codes,string,see,java,sql,database,meta,data,get,database,product,name;public,void,set,database,product,name,string,db,name,this,sql,error,codes,sqlerror,codes,factory,get,instance,get,error,codes,db,name
SQLErrorCodeSQLExceptionTranslator -> public void setDatabaseProductName(String dbName);1496242568;Set the database product name for this translator._<p>Setting this property will avoid obtaining a Connection from the DataSource_to get the metadata._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodesFactory#getErrorCodes(String)_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDatabaseProductName(String dbName) {_		this.sqlErrorCodes = SQLErrorCodesFactory.getInstance().getErrorCodes(dbName)__	};set,the,database,product,name,for,this,translator,p,setting,this,property,will,avoid,obtaining,a,connection,from,the,data,source,to,get,the,metadata,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,codes,factory,get,error,codes,string,see,java,sql,database,meta,data,get,database,product,name;public,void,set,database,product,name,string,db,name,this,sql,error,codes,sqlerror,codes,factory,get,instance,get,error,codes,db,name
SQLErrorCodeSQLExceptionTranslator -> public void setDatabaseProductName(String dbName);1496837955;Set the database product name for this translator._<p>Setting this property will avoid obtaining a Connection from the DataSource_to get the metadata._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodesFactory#getErrorCodes(String)_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDatabaseProductName(String dbName) {_		this.sqlErrorCodes = SQLErrorCodesFactory.getInstance().getErrorCodes(dbName)__	};set,the,database,product,name,for,this,translator,p,setting,this,property,will,avoid,obtaining,a,connection,from,the,data,source,to,get,the,metadata,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,codes,factory,get,error,codes,string,see,java,sql,database,meta,data,get,database,product,name;public,void,set,database,product,name,string,db,name,this,sql,error,codes,sqlerror,codes,factory,get,instance,get,error,codes,db,name
SQLErrorCodeSQLExceptionTranslator -> public void setDatabaseProductName(String dbName);1498780456;Set the database product name for this translator._<p>Setting this property will avoid obtaining a Connection from the DataSource_to get the metadata._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodesFactory#getErrorCodes(String)_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDatabaseProductName(String dbName) {_		this.sqlErrorCodes = SQLErrorCodesFactory.getInstance().getErrorCodes(dbName)__	};set,the,database,product,name,for,this,translator,p,setting,this,property,will,avoid,obtaining,a,connection,from,the,data,source,to,get,the,metadata,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,codes,factory,get,error,codes,string,see,java,sql,database,meta,data,get,database,product,name;public,void,set,database,product,name,string,db,name,this,sql,error,codes,sqlerror,codes,factory,get,instance,get,error,codes,db,name
SQLErrorCodeSQLExceptionTranslator -> public void setDatabaseProductName(String dbName);1500448076;Set the database product name for this translator._<p>Setting this property will avoid obtaining a Connection from the DataSource_to get the metadata._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodesFactory#getErrorCodes(String)_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDatabaseProductName(String dbName) {_		this.sqlErrorCodes = SQLErrorCodesFactory.getInstance().getErrorCodes(dbName)__	};set,the,database,product,name,for,this,translator,p,setting,this,property,will,avoid,obtaining,a,connection,from,the,data,source,to,get,the,metadata,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,codes,factory,get,error,codes,string,see,java,sql,database,meta,data,get,database,product,name;public,void,set,database,product,name,string,db,name,this,sql,error,codes,sqlerror,codes,factory,get,instance,get,error,codes,db,name
SQLErrorCodeSQLExceptionTranslator -> public void setDatabaseProductName(String dbName);1502974979;Set the database product name for this translator._<p>Setting this property will avoid obtaining a Connection from the DataSource_to get the metadata._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodesFactory#getErrorCodes(String)_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDatabaseProductName(String dbName) {_		this.sqlErrorCodes = SQLErrorCodesFactory.getInstance().getErrorCodes(dbName)__	};set,the,database,product,name,for,this,translator,p,setting,this,property,will,avoid,obtaining,a,connection,from,the,data,source,to,get,the,metadata,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,codes,factory,get,error,codes,string,see,java,sql,database,meta,data,get,database,product,name;public,void,set,database,product,name,string,db,name,this,sql,error,codes,sqlerror,codes,factory,get,instance,get,error,codes,db,name
SQLErrorCodeSQLExceptionTranslator -> public void setDatabaseProductName(String dbName);1506097334;Set the database product name for this translator._<p>Setting this property will avoid obtaining a Connection from the DataSource_to get the metadata._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodesFactory#getErrorCodes(String)_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDatabaseProductName(String dbName) {_		this.sqlErrorCodes = SQLErrorCodesFactory.getInstance().getErrorCodes(dbName)__	};set,the,database,product,name,for,this,translator,p,setting,this,property,will,avoid,obtaining,a,connection,from,the,data,source,to,get,the,metadata,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,codes,factory,get,error,codes,string,see,java,sql,database,meta,data,get,database,product,name;public,void,set,database,product,name,string,db,name,this,sql,error,codes,sqlerror,codes,factory,get,instance,get,error,codes,db,name
SQLErrorCodeSQLExceptionTranslator -> public void setDatabaseProductName(String dbName);1520529117;Set the database product name for this translator._<p>Setting this property will avoid obtaining a Connection from the DataSource_to get the metadata._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodesFactory#getErrorCodes(String)_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDatabaseProductName(String dbName) {_		this.sqlErrorCodes = SQLErrorCodesFactory.getInstance().getErrorCodes(dbName)__	};set,the,database,product,name,for,this,translator,p,setting,this,property,will,avoid,obtaining,a,connection,from,the,data,source,to,get,the,metadata,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,codes,factory,get,error,codes,string,see,java,sql,database,meta,data,get,database,product,name;public,void,set,database,product,name,string,db,name,this,sql,error,codes,sqlerror,codes,factory,get,instance,get,error,codes,db,name
SQLErrorCodeSQLExceptionTranslator -> public void setDatabaseProductName(String dbName);1521457504;Set the database product name for this translator._<p>Setting this property will avoid obtaining a Connection from the DataSource_to get the meta-data._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodesFactory#getErrorCodes(String)_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDatabaseProductName(String dbName) {_		this.sqlErrorCodes = SQLErrorCodesFactory.getInstance().getErrorCodes(dbName)__	};set,the,database,product,name,for,this,translator,p,setting,this,property,will,avoid,obtaining,a,connection,from,the,data,source,to,get,the,meta,data,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,codes,factory,get,error,codes,string,see,java,sql,database,meta,data,get,database,product,name;public,void,set,database,product,name,string,db,name,this,sql,error,codes,sqlerror,codes,factory,get,instance,get,error,codes,db,name
SQLErrorCodeSQLExceptionTranslator -> public void setDatabaseProductName(String dbName);1530174524;Set the database product name for this translator._<p>Setting this property will avoid obtaining a Connection from the DataSource_to get the meta-data._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodesFactory#getErrorCodes(String)_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDatabaseProductName(String dbName) {_		this.sqlErrorCodes = SQLErrorCodesFactory.getInstance().getErrorCodes(dbName)__	};set,the,database,product,name,for,this,translator,p,setting,this,property,will,avoid,obtaining,a,connection,from,the,data,source,to,get,the,meta,data,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,codes,factory,get,error,codes,string,see,java,sql,database,meta,data,get,database,product,name;public,void,set,database,product,name,string,db,name,this,sql,error,codes,sqlerror,codes,factory,get,instance,get,error,codes,db,name
SQLErrorCodeSQLExceptionTranslator -> public void setDatabaseProductName(String dbName);1531144424;Set the database product name for this translator._<p>Setting this property will avoid obtaining a Connection from the DataSource_to get the meta-data._@param dbName the database product name that identifies the error codes entry_@see SQLErrorCodesFactory#getErrorCodes(String)_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDatabaseProductName(String dbName) {_		this.sqlErrorCodes = SQLErrorCodesFactory.getInstance().getErrorCodes(dbName)__	};set,the,database,product,name,for,this,translator,p,setting,this,property,will,avoid,obtaining,a,connection,from,the,data,source,to,get,the,meta,data,param,db,name,the,database,product,name,that,identifies,the,error,codes,entry,see,sqlerror,codes,factory,get,error,codes,string,see,java,sql,database,meta,data,get,database,product,name;public,void,set,database,product,name,string,db,name,this,sql,error,codes,sqlerror,codes,factory,get,instance,get,error,codes,db,name
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator();1328020251;Constructor for use as a JavaBean._The SqlErrorCodes or DataSource property must be set.;public SQLErrorCodeSQLExceptionTranslator() {_		if (JdkVersion.getMajorJavaVersion() >= JdkVersion.JAVA_16) {_			setFallbackTranslator(new SQLExceptionSubclassTranslator())__		}_		else {_			setFallbackTranslator(new SQLStateSQLExceptionTranslator())__		}_	};constructor,for,use,as,a,java,bean,the,sql,error,codes,or,data,source,property,must,be,set;public,sqlerror,code,sqlexception,translator,if,jdk,version,get,major,java,version,jdk,version,set,fallback,translator,new,sqlexception,subclass,translator,else,set,fallback,translator,new,sqlstate,sqlexception,translator
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator();1356735495;Constructor for use as a JavaBean._The SqlErrorCodes or DataSource property must be set.;public SQLErrorCodeSQLExceptionTranslator() {_		if (JdkVersion.getMajorJavaVersion() >= JdkVersion.JAVA_16) {_			setFallbackTranslator(new SQLExceptionSubclassTranslator())__		}_		else {_			setFallbackTranslator(new SQLStateSQLExceptionTranslator())__		}_	};constructor,for,use,as,a,java,bean,the,sql,error,codes,or,data,source,property,must,be,set;public,sqlerror,code,sqlexception,translator,if,jdk,version,get,major,java,version,jdk,version,set,fallback,translator,new,sqlexception,subclass,translator,else,set,fallback,translator,new,sqlstate,sqlexception,translator
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator();1362408075;Constructor for use as a JavaBean._The SqlErrorCodes or DataSource property must be set.;public SQLErrorCodeSQLExceptionTranslator() {_		if (JdkVersion.getMajorJavaVersion() >= JdkVersion.JAVA_16) {_			setFallbackTranslator(new SQLExceptionSubclassTranslator())__		}_		else {_			setFallbackTranslator(new SQLStateSQLExceptionTranslator())__		}_	};constructor,for,use,as,a,java,bean,the,sql,error,codes,or,data,source,property,must,be,set;public,sqlerror,code,sqlexception,translator,if,jdk,version,get,major,java,version,jdk,version,set,fallback,translator,new,sqlexception,subclass,translator,else,set,fallback,translator,new,sqlstate,sqlexception,translator
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator();1363695025;Constructor for use as a JavaBean._The SqlErrorCodes or DataSource property must be set.;public SQLErrorCodeSQLExceptionTranslator() {_		setFallbackTranslator(new SQLExceptionSubclassTranslator())__	};constructor,for,use,as,a,java,bean,the,sql,error,codes,or,data,source,property,must,be,set;public,sqlerror,code,sqlexception,translator,set,fallback,translator,new,sqlexception,subclass,translator
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator();1385412762;Constructor for use as a JavaBean._The SqlErrorCodes or DataSource property must be set.;public SQLErrorCodeSQLExceptionTranslator() {_		setFallbackTranslator(new SQLExceptionSubclassTranslator())__	};constructor,for,use,as,a,java,bean,the,sql,error,codes,or,data,source,property,must,be,set;public,sqlerror,code,sqlexception,translator,set,fallback,translator,new,sqlexception,subclass,translator
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator();1432125256;Constructor for use as a JavaBean._The SqlErrorCodes or DataSource property must be set.;public SQLErrorCodeSQLExceptionTranslator() {_		setFallbackTranslator(new SQLExceptionSubclassTranslator())__	};constructor,for,use,as,a,java,bean,the,sql,error,codes,or,data,source,property,must,be,set;public,sqlerror,code,sqlexception,translator,set,fallback,translator,new,sqlexception,subclass,translator
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator();1495868221;Constructor for use as a JavaBean._The SqlErrorCodes or DataSource property must be set.;public SQLErrorCodeSQLExceptionTranslator() {_		setFallbackTranslator(new SQLExceptionSubclassTranslator())__	};constructor,for,use,as,a,java,bean,the,sql,error,codes,or,data,source,property,must,be,set;public,sqlerror,code,sqlexception,translator,set,fallback,translator,new,sqlexception,subclass,translator
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator();1496242568;Constructor for use as a JavaBean._The SqlErrorCodes or DataSource property must be set.;public SQLErrorCodeSQLExceptionTranslator() {_		setFallbackTranslator(new SQLExceptionSubclassTranslator())__	};constructor,for,use,as,a,java,bean,the,sql,error,codes,or,data,source,property,must,be,set;public,sqlerror,code,sqlexception,translator,set,fallback,translator,new,sqlexception,subclass,translator
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator();1496837955;Constructor for use as a JavaBean._The SqlErrorCodes or DataSource property must be set.;public SQLErrorCodeSQLExceptionTranslator() {_		setFallbackTranslator(new SQLExceptionSubclassTranslator())__	};constructor,for,use,as,a,java,bean,the,sql,error,codes,or,data,source,property,must,be,set;public,sqlerror,code,sqlexception,translator,set,fallback,translator,new,sqlexception,subclass,translator
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator();1498780456;Constructor for use as a JavaBean._The SqlErrorCodes or DataSource property must be set.;public SQLErrorCodeSQLExceptionTranslator() {_		setFallbackTranslator(new SQLExceptionSubclassTranslator())__	};constructor,for,use,as,a,java,bean,the,sql,error,codes,or,data,source,property,must,be,set;public,sqlerror,code,sqlexception,translator,set,fallback,translator,new,sqlexception,subclass,translator
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator();1500448076;Constructor for use as a JavaBean._The SqlErrorCodes or DataSource property must be set.;public SQLErrorCodeSQLExceptionTranslator() {_		setFallbackTranslator(new SQLExceptionSubclassTranslator())__	};constructor,for,use,as,a,java,bean,the,sql,error,codes,or,data,source,property,must,be,set;public,sqlerror,code,sqlexception,translator,set,fallback,translator,new,sqlexception,subclass,translator
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator();1502974979;Constructor for use as a JavaBean._The SqlErrorCodes or DataSource property must be set.;public SQLErrorCodeSQLExceptionTranslator() {_		setFallbackTranslator(new SQLExceptionSubclassTranslator())__	};constructor,for,use,as,a,java,bean,the,sql,error,codes,or,data,source,property,must,be,set;public,sqlerror,code,sqlexception,translator,set,fallback,translator,new,sqlexception,subclass,translator
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator();1506097334;Constructor for use as a JavaBean._The SqlErrorCodes or DataSource property must be set.;public SQLErrorCodeSQLExceptionTranslator() {_		setFallbackTranslator(new SQLExceptionSubclassTranslator())__	};constructor,for,use,as,a,java,bean,the,sql,error,codes,or,data,source,property,must,be,set;public,sqlerror,code,sqlexception,translator,set,fallback,translator,new,sqlexception,subclass,translator
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator();1520529117;Constructor for use as a JavaBean._The SqlErrorCodes or DataSource property must be set.;public SQLErrorCodeSQLExceptionTranslator() {_		setFallbackTranslator(new SQLExceptionSubclassTranslator())__	};constructor,for,use,as,a,java,bean,the,sql,error,codes,or,data,source,property,must,be,set;public,sqlerror,code,sqlexception,translator,set,fallback,translator,new,sqlexception,subclass,translator
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator();1521457504;Constructor for use as a JavaBean._The SqlErrorCodes or DataSource property must be set.;public SQLErrorCodeSQLExceptionTranslator() {_		setFallbackTranslator(new SQLExceptionSubclassTranslator())__	};constructor,for,use,as,a,java,bean,the,sql,error,codes,or,data,source,property,must,be,set;public,sqlerror,code,sqlexception,translator,set,fallback,translator,new,sqlexception,subclass,translator
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator();1530174524;Constructor for use as a JavaBean._The SqlErrorCodes or DataSource property must be set.;public SQLErrorCodeSQLExceptionTranslator() {_		setFallbackTranslator(new SQLExceptionSubclassTranslator())__	};constructor,for,use,as,a,java,bean,the,sql,error,codes,or,data,source,property,must,be,set;public,sqlerror,code,sqlexception,translator,set,fallback,translator,new,sqlexception,subclass,translator
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator();1531144424;Constructor for use as a JavaBean._The SqlErrorCodes or DataSource property must be set.;public SQLErrorCodeSQLExceptionTranslator() {_		setFallbackTranslator(new SQLExceptionSubclassTranslator())__	};constructor,for,use,as,a,java,bean,the,sql,error,codes,or,data,source,property,must,be,set;public,sqlerror,code,sqlexception,translator,set,fallback,translator,new,sqlexception,subclass,translator
SQLErrorCodeSQLExceptionTranslator -> public void setDataSource(DataSource dataSource);1328020251;Set the DataSource for this translator._<p>Setting this property will cause a Connection to be obtained from_the DataSource to get the metadata._@param dataSource DataSource to use to find metadata and establish_which error codes are usable_@see SQLErrorCodesFactory#getErrorCodes(javax.sql.DataSource)_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDataSource(DataSource dataSource) {_		this.sqlErrorCodes = SQLErrorCodesFactory.getInstance().getErrorCodes(dataSource)__	};set,the,data,source,for,this,translator,p,setting,this,property,will,cause,a,connection,to,be,obtained,from,the,data,source,to,get,the,metadata,param,data,source,data,source,to,use,to,find,metadata,and,establish,which,error,codes,are,usable,see,sqlerror,codes,factory,get,error,codes,javax,sql,data,source,see,java,sql,database,meta,data,get,database,product,name;public,void,set,data,source,data,source,data,source,this,sql,error,codes,sqlerror,codes,factory,get,instance,get,error,codes,data,source
SQLErrorCodeSQLExceptionTranslator -> public void setDataSource(DataSource dataSource);1356735495;Set the DataSource for this translator._<p>Setting this property will cause a Connection to be obtained from_the DataSource to get the metadata._@param dataSource DataSource to use to find metadata and establish_which error codes are usable_@see SQLErrorCodesFactory#getErrorCodes(javax.sql.DataSource)_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDataSource(DataSource dataSource) {_		this.sqlErrorCodes = SQLErrorCodesFactory.getInstance().getErrorCodes(dataSource)__	};set,the,data,source,for,this,translator,p,setting,this,property,will,cause,a,connection,to,be,obtained,from,the,data,source,to,get,the,metadata,param,data,source,data,source,to,use,to,find,metadata,and,establish,which,error,codes,are,usable,see,sqlerror,codes,factory,get,error,codes,javax,sql,data,source,see,java,sql,database,meta,data,get,database,product,name;public,void,set,data,source,data,source,data,source,this,sql,error,codes,sqlerror,codes,factory,get,instance,get,error,codes,data,source
SQLErrorCodeSQLExceptionTranslator -> public void setDataSource(DataSource dataSource);1362408075;Set the DataSource for this translator._<p>Setting this property will cause a Connection to be obtained from_the DataSource to get the metadata._@param dataSource DataSource to use to find metadata and establish_which error codes are usable_@see SQLErrorCodesFactory#getErrorCodes(javax.sql.DataSource)_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDataSource(DataSource dataSource) {_		this.sqlErrorCodes = SQLErrorCodesFactory.getInstance().getErrorCodes(dataSource)__	};set,the,data,source,for,this,translator,p,setting,this,property,will,cause,a,connection,to,be,obtained,from,the,data,source,to,get,the,metadata,param,data,source,data,source,to,use,to,find,metadata,and,establish,which,error,codes,are,usable,see,sqlerror,codes,factory,get,error,codes,javax,sql,data,source,see,java,sql,database,meta,data,get,database,product,name;public,void,set,data,source,data,source,data,source,this,sql,error,codes,sqlerror,codes,factory,get,instance,get,error,codes,data,source
SQLErrorCodeSQLExceptionTranslator -> public void setDataSource(DataSource dataSource);1363695025;Set the DataSource for this translator._<p>Setting this property will cause a Connection to be obtained from_the DataSource to get the metadata._@param dataSource DataSource to use to find metadata and establish_which error codes are usable_@see SQLErrorCodesFactory#getErrorCodes(javax.sql.DataSource)_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDataSource(DataSource dataSource) {_		this.sqlErrorCodes = SQLErrorCodesFactory.getInstance().getErrorCodes(dataSource)__	};set,the,data,source,for,this,translator,p,setting,this,property,will,cause,a,connection,to,be,obtained,from,the,data,source,to,get,the,metadata,param,data,source,data,source,to,use,to,find,metadata,and,establish,which,error,codes,are,usable,see,sqlerror,codes,factory,get,error,codes,javax,sql,data,source,see,java,sql,database,meta,data,get,database,product,name;public,void,set,data,source,data,source,data,source,this,sql,error,codes,sqlerror,codes,factory,get,instance,get,error,codes,data,source
SQLErrorCodeSQLExceptionTranslator -> public void setDataSource(DataSource dataSource);1385412762;Set the DataSource for this translator._<p>Setting this property will cause a Connection to be obtained from_the DataSource to get the metadata._@param dataSource DataSource to use to find metadata and establish_which error codes are usable_@see SQLErrorCodesFactory#getErrorCodes(javax.sql.DataSource)_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDataSource(DataSource dataSource) {_		this.sqlErrorCodes = SQLErrorCodesFactory.getInstance().getErrorCodes(dataSource)__	};set,the,data,source,for,this,translator,p,setting,this,property,will,cause,a,connection,to,be,obtained,from,the,data,source,to,get,the,metadata,param,data,source,data,source,to,use,to,find,metadata,and,establish,which,error,codes,are,usable,see,sqlerror,codes,factory,get,error,codes,javax,sql,data,source,see,java,sql,database,meta,data,get,database,product,name;public,void,set,data,source,data,source,data,source,this,sql,error,codes,sqlerror,codes,factory,get,instance,get,error,codes,data,source
SQLErrorCodeSQLExceptionTranslator -> public void setDataSource(DataSource dataSource);1432125256;Set the DataSource for this translator._<p>Setting this property will cause a Connection to be obtained from_the DataSource to get the metadata._@param dataSource DataSource to use to find metadata and establish_which error codes are usable_@see SQLErrorCodesFactory#getErrorCodes(javax.sql.DataSource)_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDataSource(DataSource dataSource) {_		this.sqlErrorCodes = SQLErrorCodesFactory.getInstance().getErrorCodes(dataSource)__	};set,the,data,source,for,this,translator,p,setting,this,property,will,cause,a,connection,to,be,obtained,from,the,data,source,to,get,the,metadata,param,data,source,data,source,to,use,to,find,metadata,and,establish,which,error,codes,are,usable,see,sqlerror,codes,factory,get,error,codes,javax,sql,data,source,see,java,sql,database,meta,data,get,database,product,name;public,void,set,data,source,data,source,data,source,this,sql,error,codes,sqlerror,codes,factory,get,instance,get,error,codes,data,source
SQLErrorCodeSQLExceptionTranslator -> public void setDataSource(DataSource dataSource);1495868221;Set the DataSource for this translator._<p>Setting this property will cause a Connection to be obtained from_the DataSource to get the metadata._@param dataSource DataSource to use to find metadata and establish_which error codes are usable_@see SQLErrorCodesFactory#getErrorCodes(javax.sql.DataSource)_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDataSource(DataSource dataSource) {_		this.sqlErrorCodes = SQLErrorCodesFactory.getInstance().getErrorCodes(dataSource)__	};set,the,data,source,for,this,translator,p,setting,this,property,will,cause,a,connection,to,be,obtained,from,the,data,source,to,get,the,metadata,param,data,source,data,source,to,use,to,find,metadata,and,establish,which,error,codes,are,usable,see,sqlerror,codes,factory,get,error,codes,javax,sql,data,source,see,java,sql,database,meta,data,get,database,product,name;public,void,set,data,source,data,source,data,source,this,sql,error,codes,sqlerror,codes,factory,get,instance,get,error,codes,data,source
SQLErrorCodeSQLExceptionTranslator -> public void setDataSource(DataSource dataSource);1496242568;Set the DataSource for this translator._<p>Setting this property will cause a Connection to be obtained from_the DataSource to get the metadata._@param dataSource DataSource to use to find metadata and establish_which error codes are usable_@see SQLErrorCodesFactory#getErrorCodes(javax.sql.DataSource)_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDataSource(DataSource dataSource) {_		this.sqlErrorCodes = SQLErrorCodesFactory.getInstance().getErrorCodes(dataSource)__	};set,the,data,source,for,this,translator,p,setting,this,property,will,cause,a,connection,to,be,obtained,from,the,data,source,to,get,the,metadata,param,data,source,data,source,to,use,to,find,metadata,and,establish,which,error,codes,are,usable,see,sqlerror,codes,factory,get,error,codes,javax,sql,data,source,see,java,sql,database,meta,data,get,database,product,name;public,void,set,data,source,data,source,data,source,this,sql,error,codes,sqlerror,codes,factory,get,instance,get,error,codes,data,source
SQLErrorCodeSQLExceptionTranslator -> public void setDataSource(DataSource dataSource);1496837955;Set the DataSource for this translator._<p>Setting this property will cause a Connection to be obtained from_the DataSource to get the metadata._@param dataSource DataSource to use to find metadata and establish_which error codes are usable_@see SQLErrorCodesFactory#getErrorCodes(javax.sql.DataSource)_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDataSource(DataSource dataSource) {_		this.sqlErrorCodes = SQLErrorCodesFactory.getInstance().getErrorCodes(dataSource)__	};set,the,data,source,for,this,translator,p,setting,this,property,will,cause,a,connection,to,be,obtained,from,the,data,source,to,get,the,metadata,param,data,source,data,source,to,use,to,find,metadata,and,establish,which,error,codes,are,usable,see,sqlerror,codes,factory,get,error,codes,javax,sql,data,source,see,java,sql,database,meta,data,get,database,product,name;public,void,set,data,source,data,source,data,source,this,sql,error,codes,sqlerror,codes,factory,get,instance,get,error,codes,data,source
SQLErrorCodeSQLExceptionTranslator -> public void setDataSource(DataSource dataSource);1498780456;Set the DataSource for this translator._<p>Setting this property will cause a Connection to be obtained from_the DataSource to get the metadata._@param dataSource DataSource to use to find metadata and establish_which error codes are usable_@see SQLErrorCodesFactory#getErrorCodes(javax.sql.DataSource)_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDataSource(DataSource dataSource) {_		this.sqlErrorCodes = SQLErrorCodesFactory.getInstance().getErrorCodes(dataSource)__	};set,the,data,source,for,this,translator,p,setting,this,property,will,cause,a,connection,to,be,obtained,from,the,data,source,to,get,the,metadata,param,data,source,data,source,to,use,to,find,metadata,and,establish,which,error,codes,are,usable,see,sqlerror,codes,factory,get,error,codes,javax,sql,data,source,see,java,sql,database,meta,data,get,database,product,name;public,void,set,data,source,data,source,data,source,this,sql,error,codes,sqlerror,codes,factory,get,instance,get,error,codes,data,source
SQLErrorCodeSQLExceptionTranslator -> public void setDataSource(DataSource dataSource);1500448076;Set the DataSource for this translator._<p>Setting this property will cause a Connection to be obtained from_the DataSource to get the metadata._@param dataSource DataSource to use to find metadata and establish_which error codes are usable_@see SQLErrorCodesFactory#getErrorCodes(javax.sql.DataSource)_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDataSource(DataSource dataSource) {_		this.sqlErrorCodes = SQLErrorCodesFactory.getInstance().getErrorCodes(dataSource)__	};set,the,data,source,for,this,translator,p,setting,this,property,will,cause,a,connection,to,be,obtained,from,the,data,source,to,get,the,metadata,param,data,source,data,source,to,use,to,find,metadata,and,establish,which,error,codes,are,usable,see,sqlerror,codes,factory,get,error,codes,javax,sql,data,source,see,java,sql,database,meta,data,get,database,product,name;public,void,set,data,source,data,source,data,source,this,sql,error,codes,sqlerror,codes,factory,get,instance,get,error,codes,data,source
SQLErrorCodeSQLExceptionTranslator -> public void setDataSource(DataSource dataSource);1502974979;Set the DataSource for this translator._<p>Setting this property will cause a Connection to be obtained from_the DataSource to get the metadata._@param dataSource DataSource to use to find metadata and establish_which error codes are usable_@see SQLErrorCodesFactory#getErrorCodes(javax.sql.DataSource)_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDataSource(DataSource dataSource) {_		this.sqlErrorCodes = SQLErrorCodesFactory.getInstance().getErrorCodes(dataSource)__	};set,the,data,source,for,this,translator,p,setting,this,property,will,cause,a,connection,to,be,obtained,from,the,data,source,to,get,the,metadata,param,data,source,data,source,to,use,to,find,metadata,and,establish,which,error,codes,are,usable,see,sqlerror,codes,factory,get,error,codes,javax,sql,data,source,see,java,sql,database,meta,data,get,database,product,name;public,void,set,data,source,data,source,data,source,this,sql,error,codes,sqlerror,codes,factory,get,instance,get,error,codes,data,source
SQLErrorCodeSQLExceptionTranslator -> public void setDataSource(DataSource dataSource);1506097334;Set the DataSource for this translator._<p>Setting this property will cause a Connection to be obtained from_the DataSource to get the metadata._@param dataSource DataSource to use to find metadata and establish_which error codes are usable_@see SQLErrorCodesFactory#getErrorCodes(javax.sql.DataSource)_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDataSource(DataSource dataSource) {_		this.sqlErrorCodes = SQLErrorCodesFactory.getInstance().getErrorCodes(dataSource)__	};set,the,data,source,for,this,translator,p,setting,this,property,will,cause,a,connection,to,be,obtained,from,the,data,source,to,get,the,metadata,param,data,source,data,source,to,use,to,find,metadata,and,establish,which,error,codes,are,usable,see,sqlerror,codes,factory,get,error,codes,javax,sql,data,source,see,java,sql,database,meta,data,get,database,product,name;public,void,set,data,source,data,source,data,source,this,sql,error,codes,sqlerror,codes,factory,get,instance,get,error,codes,data,source
SQLErrorCodeSQLExceptionTranslator -> public void setDataSource(DataSource dataSource);1520529117;Set the DataSource for this translator._<p>Setting this property will cause a Connection to be obtained from_the DataSource to get the metadata._@param dataSource DataSource to use to find metadata and establish_which error codes are usable_@see SQLErrorCodesFactory#getErrorCodes(javax.sql.DataSource)_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDataSource(DataSource dataSource) {_		this.sqlErrorCodes = SQLErrorCodesFactory.getInstance().getErrorCodes(dataSource)__	};set,the,data,source,for,this,translator,p,setting,this,property,will,cause,a,connection,to,be,obtained,from,the,data,source,to,get,the,metadata,param,data,source,data,source,to,use,to,find,metadata,and,establish,which,error,codes,are,usable,see,sqlerror,codes,factory,get,error,codes,javax,sql,data,source,see,java,sql,database,meta,data,get,database,product,name;public,void,set,data,source,data,source,data,source,this,sql,error,codes,sqlerror,codes,factory,get,instance,get,error,codes,data,source
SQLErrorCodeSQLExceptionTranslator -> public void setDataSource(DataSource dataSource);1521457504;Set the DataSource for this translator._<p>Setting this property will cause a Connection to be obtained from_the DataSource to get the meta-data._@param dataSource DataSource to use to find meta-data and establish_which error codes are usable_@see SQLErrorCodesFactory#getErrorCodes(javax.sql.DataSource)_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDataSource(DataSource dataSource) {_		this.sqlErrorCodes = SQLErrorCodesFactory.getInstance().getErrorCodes(dataSource)__	};set,the,data,source,for,this,translator,p,setting,this,property,will,cause,a,connection,to,be,obtained,from,the,data,source,to,get,the,meta,data,param,data,source,data,source,to,use,to,find,meta,data,and,establish,which,error,codes,are,usable,see,sqlerror,codes,factory,get,error,codes,javax,sql,data,source,see,java,sql,database,meta,data,get,database,product,name;public,void,set,data,source,data,source,data,source,this,sql,error,codes,sqlerror,codes,factory,get,instance,get,error,codes,data,source
SQLErrorCodeSQLExceptionTranslator -> public void setDataSource(DataSource dataSource);1530174524;Set the DataSource for this translator._<p>Setting this property will cause a Connection to be obtained from_the DataSource to get the meta-data._@param dataSource the DataSource to use to find meta-data and establish_which error codes are usable_@see SQLErrorCodesFactory#getErrorCodes(javax.sql.DataSource)_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDataSource(DataSource dataSource) {_		this.sqlErrorCodes = SQLErrorCodesFactory.getInstance().getErrorCodes(dataSource)__	};set,the,data,source,for,this,translator,p,setting,this,property,will,cause,a,connection,to,be,obtained,from,the,data,source,to,get,the,meta,data,param,data,source,the,data,source,to,use,to,find,meta,data,and,establish,which,error,codes,are,usable,see,sqlerror,codes,factory,get,error,codes,javax,sql,data,source,see,java,sql,database,meta,data,get,database,product,name;public,void,set,data,source,data,source,data,source,this,sql,error,codes,sqlerror,codes,factory,get,instance,get,error,codes,data,source
SQLErrorCodeSQLExceptionTranslator -> public void setDataSource(DataSource dataSource);1531144424;Set the DataSource for this translator._<p>Setting this property will cause a Connection to be obtained from_the DataSource to get the meta-data._@param dataSource the DataSource to use to find meta-data and establish_which error codes are usable_@see SQLErrorCodesFactory#getErrorCodes(javax.sql.DataSource)_@see java.sql.DatabaseMetaData#getDatabaseProductName();public void setDataSource(DataSource dataSource) {_		this.sqlErrorCodes = SQLErrorCodesFactory.getInstance().getErrorCodes(dataSource)__	};set,the,data,source,for,this,translator,p,setting,this,property,will,cause,a,connection,to,be,obtained,from,the,data,source,to,get,the,meta,data,param,data,source,the,data,source,to,use,to,find,meta,data,and,establish,which,error,codes,are,usable,see,sqlerror,codes,factory,get,error,codes,javax,sql,data,source,see,java,sql,database,meta,data,get,database,product,name;public,void,set,data,source,data,source,data,source,this,sql,error,codes,sqlerror,codes,factory,get,instance,get,error,codes,data,source
SQLErrorCodeSQLExceptionTranslator -> protected DataAccessException customTranslate(String task, String sql, SQLException sqlEx);1328020251;Subclasses can override this method to attempt a custom mapping from SQLException_to DataAccessException._@param task readable text describing the task being attempted_@param sql SQL query or update that caused the problem. May be <code>null</code>._@param sqlEx the offending SQLException_@return null if no custom translation was possible, otherwise a DataAccessException_resulting from custom translation. This exception should include the sqlEx parameter_as a nested root cause. This implementation always returns null, meaning that_the translator always falls back to the default error codes.;protected DataAccessException customTranslate(String task, String sql, SQLException sqlEx) {_		return null__	};subclasses,can,override,this,method,to,attempt,a,custom,mapping,from,sqlexception,to,data,access,exception,param,task,readable,text,describing,the,task,being,attempted,param,sql,sql,query,or,update,that,caused,the,problem,may,be,code,null,code,param,sql,ex,the,offending,sqlexception,return,null,if,no,custom,translation,was,possible,otherwise,a,data,access,exception,resulting,from,custom,translation,this,exception,should,include,the,sql,ex,parameter,as,a,nested,root,cause,this,implementation,always,returns,null,meaning,that,the,translator,always,falls,back,to,the,default,error,codes;protected,data,access,exception,custom,translate,string,task,string,sql,sqlexception,sql,ex,return,null
SQLErrorCodeSQLExceptionTranslator -> protected DataAccessException customTranslate(String task, String sql, SQLException sqlEx);1356735495;Subclasses can override this method to attempt a custom mapping from SQLException_to DataAccessException._@param task readable text describing the task being attempted_@param sql SQL query or update that caused the problem. May be {@code null}._@param sqlEx the offending SQLException_@return null if no custom translation was possible, otherwise a DataAccessException_resulting from custom translation. This exception should include the sqlEx parameter_as a nested root cause. This implementation always returns null, meaning that_the translator always falls back to the default error codes.;protected DataAccessException customTranslate(String task, String sql, SQLException sqlEx) {_		return null__	};subclasses,can,override,this,method,to,attempt,a,custom,mapping,from,sqlexception,to,data,access,exception,param,task,readable,text,describing,the,task,being,attempted,param,sql,sql,query,or,update,that,caused,the,problem,may,be,code,null,param,sql,ex,the,offending,sqlexception,return,null,if,no,custom,translation,was,possible,otherwise,a,data,access,exception,resulting,from,custom,translation,this,exception,should,include,the,sql,ex,parameter,as,a,nested,root,cause,this,implementation,always,returns,null,meaning,that,the,translator,always,falls,back,to,the,default,error,codes;protected,data,access,exception,custom,translate,string,task,string,sql,sqlexception,sql,ex,return,null
SQLErrorCodeSQLExceptionTranslator -> protected DataAccessException customTranslate(String task, String sql, SQLException sqlEx);1362408075;Subclasses can override this method to attempt a custom mapping from SQLException_to DataAccessException._@param task readable text describing the task being attempted_@param sql SQL query or update that caused the problem. May be {@code null}._@param sqlEx the offending SQLException_@return null if no custom translation was possible, otherwise a DataAccessException_resulting from custom translation. This exception should include the sqlEx parameter_as a nested root cause. This implementation always returns null, meaning that_the translator always falls back to the default error codes.;protected DataAccessException customTranslate(String task, String sql, SQLException sqlEx) {_		return null__	};subclasses,can,override,this,method,to,attempt,a,custom,mapping,from,sqlexception,to,data,access,exception,param,task,readable,text,describing,the,task,being,attempted,param,sql,sql,query,or,update,that,caused,the,problem,may,be,code,null,param,sql,ex,the,offending,sqlexception,return,null,if,no,custom,translation,was,possible,otherwise,a,data,access,exception,resulting,from,custom,translation,this,exception,should,include,the,sql,ex,parameter,as,a,nested,root,cause,this,implementation,always,returns,null,meaning,that,the,translator,always,falls,back,to,the,default,error,codes;protected,data,access,exception,custom,translate,string,task,string,sql,sqlexception,sql,ex,return,null
SQLErrorCodeSQLExceptionTranslator -> protected DataAccessException customTranslate(String task, String sql, SQLException sqlEx);1363695025;Subclasses can override this method to attempt a custom mapping from SQLException_to DataAccessException._@param task readable text describing the task being attempted_@param sql SQL query or update that caused the problem. May be {@code null}._@param sqlEx the offending SQLException_@return null if no custom translation was possible, otherwise a DataAccessException_resulting from custom translation. This exception should include the sqlEx parameter_as a nested root cause. This implementation always returns null, meaning that_the translator always falls back to the default error codes.;protected DataAccessException customTranslate(String task, String sql, SQLException sqlEx) {_		return null__	};subclasses,can,override,this,method,to,attempt,a,custom,mapping,from,sqlexception,to,data,access,exception,param,task,readable,text,describing,the,task,being,attempted,param,sql,sql,query,or,update,that,caused,the,problem,may,be,code,null,param,sql,ex,the,offending,sqlexception,return,null,if,no,custom,translation,was,possible,otherwise,a,data,access,exception,resulting,from,custom,translation,this,exception,should,include,the,sql,ex,parameter,as,a,nested,root,cause,this,implementation,always,returns,null,meaning,that,the,translator,always,falls,back,to,the,default,error,codes;protected,data,access,exception,custom,translate,string,task,string,sql,sqlexception,sql,ex,return,null
SQLErrorCodeSQLExceptionTranslator -> protected DataAccessException customTranslate(String task, String sql, SQLException sqlEx);1385412762;Subclasses can override this method to attempt a custom mapping from SQLException_to DataAccessException._@param task readable text describing the task being attempted_@param sql SQL query or update that caused the problem. May be {@code null}._@param sqlEx the offending SQLException_@return null if no custom translation was possible, otherwise a DataAccessException_resulting from custom translation. This exception should include the sqlEx parameter_as a nested root cause. This implementation always returns null, meaning that_the translator always falls back to the default error codes.;protected DataAccessException customTranslate(String task, String sql, SQLException sqlEx) {_		return null__	};subclasses,can,override,this,method,to,attempt,a,custom,mapping,from,sqlexception,to,data,access,exception,param,task,readable,text,describing,the,task,being,attempted,param,sql,sql,query,or,update,that,caused,the,problem,may,be,code,null,param,sql,ex,the,offending,sqlexception,return,null,if,no,custom,translation,was,possible,otherwise,a,data,access,exception,resulting,from,custom,translation,this,exception,should,include,the,sql,ex,parameter,as,a,nested,root,cause,this,implementation,always,returns,null,meaning,that,the,translator,always,falls,back,to,the,default,error,codes;protected,data,access,exception,custom,translate,string,task,string,sql,sqlexception,sql,ex,return,null
SQLErrorCodeSQLExceptionTranslator -> protected DataAccessException customTranslate(String task, String sql, SQLException sqlEx);1432125256;Subclasses can override this method to attempt a custom mapping from SQLException_to DataAccessException._@param task readable text describing the task being attempted_@param sql SQL query or update that caused the problem. May be {@code null}._@param sqlEx the offending SQLException_@return null if no custom translation was possible, otherwise a DataAccessException_resulting from custom translation. This exception should include the sqlEx parameter_as a nested root cause. This implementation always returns null, meaning that_the translator always falls back to the default error codes.;protected DataAccessException customTranslate(String task, String sql, SQLException sqlEx) {_		return null__	};subclasses,can,override,this,method,to,attempt,a,custom,mapping,from,sqlexception,to,data,access,exception,param,task,readable,text,describing,the,task,being,attempted,param,sql,sql,query,or,update,that,caused,the,problem,may,be,code,null,param,sql,ex,the,offending,sqlexception,return,null,if,no,custom,translation,was,possible,otherwise,a,data,access,exception,resulting,from,custom,translation,this,exception,should,include,the,sql,ex,parameter,as,a,nested,root,cause,this,implementation,always,returns,null,meaning,that,the,translator,always,falls,back,to,the,default,error,codes;protected,data,access,exception,custom,translate,string,task,string,sql,sqlexception,sql,ex,return,null
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(SQLErrorCodes sec);1328020251;Create a SQLErrorCode translator given these error codes._Does not require a database metadata lookup to be performed using a connection._@param sec error codes;public SQLErrorCodeSQLExceptionTranslator(SQLErrorCodes sec) {_		this()__		this.sqlErrorCodes = sec__	};create,a,sqlerror,code,translator,given,these,error,codes,does,not,require,a,database,metadata,lookup,to,be,performed,using,a,connection,param,sec,error,codes;public,sqlerror,code,sqlexception,translator,sqlerror,codes,sec,this,this,sql,error,codes,sec
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(SQLErrorCodes sec);1356735495;Create a SQLErrorCode translator given these error codes._Does not require a database metadata lookup to be performed using a connection._@param sec error codes;public SQLErrorCodeSQLExceptionTranslator(SQLErrorCodes sec) {_		this()__		this.sqlErrorCodes = sec__	};create,a,sqlerror,code,translator,given,these,error,codes,does,not,require,a,database,metadata,lookup,to,be,performed,using,a,connection,param,sec,error,codes;public,sqlerror,code,sqlexception,translator,sqlerror,codes,sec,this,this,sql,error,codes,sec
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(SQLErrorCodes sec);1362408075;Create a SQLErrorCode translator given these error codes._Does not require a database metadata lookup to be performed using a connection._@param sec error codes;public SQLErrorCodeSQLExceptionTranslator(SQLErrorCodes sec) {_		this()__		this.sqlErrorCodes = sec__	};create,a,sqlerror,code,translator,given,these,error,codes,does,not,require,a,database,metadata,lookup,to,be,performed,using,a,connection,param,sec,error,codes;public,sqlerror,code,sqlexception,translator,sqlerror,codes,sec,this,this,sql,error,codes,sec
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(SQLErrorCodes sec);1363695025;Create a SQLErrorCode translator given these error codes._Does not require a database metadata lookup to be performed using a connection._@param sec error codes;public SQLErrorCodeSQLExceptionTranslator(SQLErrorCodes sec) {_		this()__		this.sqlErrorCodes = sec__	};create,a,sqlerror,code,translator,given,these,error,codes,does,not,require,a,database,metadata,lookup,to,be,performed,using,a,connection,param,sec,error,codes;public,sqlerror,code,sqlexception,translator,sqlerror,codes,sec,this,this,sql,error,codes,sec
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(SQLErrorCodes sec);1385412762;Create a SQLErrorCode translator given these error codes._Does not require a database metadata lookup to be performed using a connection._@param sec error codes;public SQLErrorCodeSQLExceptionTranslator(SQLErrorCodes sec) {_		this()__		this.sqlErrorCodes = sec__	};create,a,sqlerror,code,translator,given,these,error,codes,does,not,require,a,database,metadata,lookup,to,be,performed,using,a,connection,param,sec,error,codes;public,sqlerror,code,sqlexception,translator,sqlerror,codes,sec,this,this,sql,error,codes,sec
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(SQLErrorCodes sec);1432125256;Create a SQLErrorCode translator given these error codes._Does not require a database metadata lookup to be performed using a connection._@param sec error codes;public SQLErrorCodeSQLExceptionTranslator(SQLErrorCodes sec) {_		this()__		this.sqlErrorCodes = sec__	};create,a,sqlerror,code,translator,given,these,error,codes,does,not,require,a,database,metadata,lookup,to,be,performed,using,a,connection,param,sec,error,codes;public,sqlerror,code,sqlexception,translator,sqlerror,codes,sec,this,this,sql,error,codes,sec
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(SQLErrorCodes sec);1495868221;Create a SQLErrorCode translator given these error codes._Does not require a database metadata lookup to be performed using a connection._@param sec error codes;public SQLErrorCodeSQLExceptionTranslator(SQLErrorCodes sec) {_		this()__		this.sqlErrorCodes = sec__	};create,a,sqlerror,code,translator,given,these,error,codes,does,not,require,a,database,metadata,lookup,to,be,performed,using,a,connection,param,sec,error,codes;public,sqlerror,code,sqlexception,translator,sqlerror,codes,sec,this,this,sql,error,codes,sec
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(SQLErrorCodes sec);1496242568;Create a SQLErrorCode translator given these error codes._Does not require a database metadata lookup to be performed using a connection._@param sec error codes;public SQLErrorCodeSQLExceptionTranslator(SQLErrorCodes sec) {_		this()__		this.sqlErrorCodes = sec__	};create,a,sqlerror,code,translator,given,these,error,codes,does,not,require,a,database,metadata,lookup,to,be,performed,using,a,connection,param,sec,error,codes;public,sqlerror,code,sqlexception,translator,sqlerror,codes,sec,this,this,sql,error,codes,sec
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(SQLErrorCodes sec);1496837955;Create a SQLErrorCode translator given these error codes._Does not require a database metadata lookup to be performed using a connection._@param sec error codes;public SQLErrorCodeSQLExceptionTranslator(SQLErrorCodes sec) {_		this()__		this.sqlErrorCodes = sec__	};create,a,sqlerror,code,translator,given,these,error,codes,does,not,require,a,database,metadata,lookup,to,be,performed,using,a,connection,param,sec,error,codes;public,sqlerror,code,sqlexception,translator,sqlerror,codes,sec,this,this,sql,error,codes,sec
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(SQLErrorCodes sec);1498780456;Create a SQLErrorCode translator given these error codes._Does not require a database metadata lookup to be performed using a connection._@param sec error codes;public SQLErrorCodeSQLExceptionTranslator(SQLErrorCodes sec) {_		this()__		this.sqlErrorCodes = sec__	};create,a,sqlerror,code,translator,given,these,error,codes,does,not,require,a,database,metadata,lookup,to,be,performed,using,a,connection,param,sec,error,codes;public,sqlerror,code,sqlexception,translator,sqlerror,codes,sec,this,this,sql,error,codes,sec
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(SQLErrorCodes sec);1500448076;Create a SQLErrorCode translator given these error codes._Does not require a database metadata lookup to be performed using a connection._@param sec error codes;public SQLErrorCodeSQLExceptionTranslator(SQLErrorCodes sec) {_		this()__		this.sqlErrorCodes = sec__	};create,a,sqlerror,code,translator,given,these,error,codes,does,not,require,a,database,metadata,lookup,to,be,performed,using,a,connection,param,sec,error,codes;public,sqlerror,code,sqlexception,translator,sqlerror,codes,sec,this,this,sql,error,codes,sec
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(SQLErrorCodes sec);1502974979;Create a SQLErrorCode translator given these error codes._Does not require a database metadata lookup to be performed using a connection._@param sec error codes;public SQLErrorCodeSQLExceptionTranslator(SQLErrorCodes sec) {_		this()__		this.sqlErrorCodes = sec__	};create,a,sqlerror,code,translator,given,these,error,codes,does,not,require,a,database,metadata,lookup,to,be,performed,using,a,connection,param,sec,error,codes;public,sqlerror,code,sqlexception,translator,sqlerror,codes,sec,this,this,sql,error,codes,sec
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(SQLErrorCodes sec);1506097334;Create a SQLErrorCode translator given these error codes._Does not require a database metadata lookup to be performed using a connection._@param sec error codes;public SQLErrorCodeSQLExceptionTranslator(SQLErrorCodes sec) {_		this()__		this.sqlErrorCodes = sec__	};create,a,sqlerror,code,translator,given,these,error,codes,does,not,require,a,database,metadata,lookup,to,be,performed,using,a,connection,param,sec,error,codes;public,sqlerror,code,sqlexception,translator,sqlerror,codes,sec,this,this,sql,error,codes,sec
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(SQLErrorCodes sec);1520529117;Create a SQLErrorCode translator given these error codes._Does not require a database metadata lookup to be performed using a connection._@param sec error codes;public SQLErrorCodeSQLExceptionTranslator(SQLErrorCodes sec) {_		this()__		this.sqlErrorCodes = sec__	};create,a,sqlerror,code,translator,given,these,error,codes,does,not,require,a,database,metadata,lookup,to,be,performed,using,a,connection,param,sec,error,codes;public,sqlerror,code,sqlexception,translator,sqlerror,codes,sec,this,this,sql,error,codes,sec
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(SQLErrorCodes sec);1521457504;Create a SQLErrorCode translator given these error codes._Does not require a database meta-data lookup to be performed using a connection._@param sec error codes;public SQLErrorCodeSQLExceptionTranslator(SQLErrorCodes sec) {_		this()__		this.sqlErrorCodes = sec__	};create,a,sqlerror,code,translator,given,these,error,codes,does,not,require,a,database,meta,data,lookup,to,be,performed,using,a,connection,param,sec,error,codes;public,sqlerror,code,sqlexception,translator,sqlerror,codes,sec,this,this,sql,error,codes,sec
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(SQLErrorCodes sec);1530174524;Create a SQLErrorCode translator given these error codes._Does not require a database meta-data lookup to be performed using a connection._@param sec error codes;public SQLErrorCodeSQLExceptionTranslator(SQLErrorCodes sec) {_		this()__		this.sqlErrorCodes = sec__	};create,a,sqlerror,code,translator,given,these,error,codes,does,not,require,a,database,meta,data,lookup,to,be,performed,using,a,connection,param,sec,error,codes;public,sqlerror,code,sqlexception,translator,sqlerror,codes,sec,this,this,sql,error,codes,sec
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(SQLErrorCodes sec);1531144424;Create a SQLErrorCode translator given these error codes._Does not require a database meta-data lookup to be performed using a connection._@param sec error codes;public SQLErrorCodeSQLExceptionTranslator(SQLErrorCodes sec) {_		this()__		this.sqlErrorCodes = sec__	};create,a,sqlerror,code,translator,given,these,error,codes,does,not,require,a,database,meta,data,lookup,to,be,performed,using,a,connection,param,sec,error,codes;public,sqlerror,code,sqlexception,translator,sqlerror,codes,sec,this,this,sql,error,codes,sec
SQLErrorCodeSQLExceptionTranslator -> @Nullable 	public SQLErrorCodes getSqlErrorCodes();1498780456;Return the error codes used by this translator._Usually determined via a DataSource._@see #setDataSource;@Nullable_	public SQLErrorCodes getSqlErrorCodes() {_		return this.sqlErrorCodes__	};return,the,error,codes,used,by,this,translator,usually,determined,via,a,data,source,see,set,data,source;nullable,public,sqlerror,codes,get,sql,error,codes,return,this,sql,error,codes
SQLErrorCodeSQLExceptionTranslator -> @Nullable 	public SQLErrorCodes getSqlErrorCodes();1500448076;Return the error codes used by this translator._Usually determined via a DataSource._@see #setDataSource;@Nullable_	public SQLErrorCodes getSqlErrorCodes() {_		return this.sqlErrorCodes__	};return,the,error,codes,used,by,this,translator,usually,determined,via,a,data,source,see,set,data,source;nullable,public,sqlerror,codes,get,sql,error,codes,return,this,sql,error,codes
SQLErrorCodeSQLExceptionTranslator -> @Nullable 	public SQLErrorCodes getSqlErrorCodes();1502974979;Return the error codes used by this translator._Usually determined via a DataSource._@see #setDataSource;@Nullable_	public SQLErrorCodes getSqlErrorCodes() {_		return this.sqlErrorCodes__	};return,the,error,codes,used,by,this,translator,usually,determined,via,a,data,source,see,set,data,source;nullable,public,sqlerror,codes,get,sql,error,codes,return,this,sql,error,codes
SQLErrorCodeSQLExceptionTranslator -> @Nullable 	public SQLErrorCodes getSqlErrorCodes();1506097334;Return the error codes used by this translator._Usually determined via a DataSource._@see #setDataSource;@Nullable_	public SQLErrorCodes getSqlErrorCodes() {_		return this.sqlErrorCodes__	};return,the,error,codes,used,by,this,translator,usually,determined,via,a,data,source,see,set,data,source;nullable,public,sqlerror,codes,get,sql,error,codes,return,this,sql,error,codes
SQLErrorCodeSQLExceptionTranslator -> @Nullable 	public SQLErrorCodes getSqlErrorCodes();1520529117;Return the error codes used by this translator._Usually determined via a DataSource._@see #setDataSource;@Nullable_	public SQLErrorCodes getSqlErrorCodes() {_		return this.sqlErrorCodes__	};return,the,error,codes,used,by,this,translator,usually,determined,via,a,data,source,see,set,data,source;nullable,public,sqlerror,codes,get,sql,error,codes,return,this,sql,error,codes
SQLErrorCodeSQLExceptionTranslator -> @Nullable 	public SQLErrorCodes getSqlErrorCodes();1521457504;Return the error codes used by this translator._Usually determined via a DataSource._@see #setDataSource;@Nullable_	public SQLErrorCodes getSqlErrorCodes() {_		return this.sqlErrorCodes__	};return,the,error,codes,used,by,this,translator,usually,determined,via,a,data,source,see,set,data,source;nullable,public,sqlerror,codes,get,sql,error,codes,return,this,sql,error,codes
SQLErrorCodeSQLExceptionTranslator -> @Nullable 	public SQLErrorCodes getSqlErrorCodes();1530174524;Return the error codes used by this translator._Usually determined via a DataSource._@see #setDataSource;@Nullable_	public SQLErrorCodes getSqlErrorCodes() {_		return this.sqlErrorCodes__	};return,the,error,codes,used,by,this,translator,usually,determined,via,a,data,source,see,set,data,source;nullable,public,sqlerror,codes,get,sql,error,codes,return,this,sql,error,codes
SQLErrorCodeSQLExceptionTranslator -> @Nullable 	public SQLErrorCodes getSqlErrorCodes();1531144424;Return the error codes used by this translator._Usually determined via a DataSource._@see #setDataSource;@Nullable_	public SQLErrorCodes getSqlErrorCodes() {_		return this.sqlErrorCodes__	};return,the,error,codes,used,by,this,translator,usually,determined,via,a,data,source,see,set,data,source;nullable,public,sqlerror,codes,get,sql,error,codes,return,this,sql,error,codes
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodes getSqlErrorCodes();1328020251;Return the error codes used by this translator._Usually determined via a DataSource._@see #setDataSource;public SQLErrorCodes getSqlErrorCodes() {_		return this.sqlErrorCodes__	};return,the,error,codes,used,by,this,translator,usually,determined,via,a,data,source,see,set,data,source;public,sqlerror,codes,get,sql,error,codes,return,this,sql,error,codes
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodes getSqlErrorCodes();1356735495;Return the error codes used by this translator._Usually determined via a DataSource._@see #setDataSource;public SQLErrorCodes getSqlErrorCodes() {_		return this.sqlErrorCodes__	};return,the,error,codes,used,by,this,translator,usually,determined,via,a,data,source,see,set,data,source;public,sqlerror,codes,get,sql,error,codes,return,this,sql,error,codes
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodes getSqlErrorCodes();1362408075;Return the error codes used by this translator._Usually determined via a DataSource._@see #setDataSource;public SQLErrorCodes getSqlErrorCodes() {_		return this.sqlErrorCodes__	};return,the,error,codes,used,by,this,translator,usually,determined,via,a,data,source,see,set,data,source;public,sqlerror,codes,get,sql,error,codes,return,this,sql,error,codes
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodes getSqlErrorCodes();1363695025;Return the error codes used by this translator._Usually determined via a DataSource._@see #setDataSource;public SQLErrorCodes getSqlErrorCodes() {_		return this.sqlErrorCodes__	};return,the,error,codes,used,by,this,translator,usually,determined,via,a,data,source,see,set,data,source;public,sqlerror,codes,get,sql,error,codes,return,this,sql,error,codes
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodes getSqlErrorCodes();1385412762;Return the error codes used by this translator._Usually determined via a DataSource._@see #setDataSource;public SQLErrorCodes getSqlErrorCodes() {_		return this.sqlErrorCodes__	};return,the,error,codes,used,by,this,translator,usually,determined,via,a,data,source,see,set,data,source;public,sqlerror,codes,get,sql,error,codes,return,this,sql,error,codes
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodes getSqlErrorCodes();1432125256;Return the error codes used by this translator._Usually determined via a DataSource._@see #setDataSource;public SQLErrorCodes getSqlErrorCodes() {_		return this.sqlErrorCodes__	};return,the,error,codes,used,by,this,translator,usually,determined,via,a,data,source,see,set,data,source;public,sqlerror,codes,get,sql,error,codes,return,this,sql,error,codes
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodes getSqlErrorCodes();1495868221;Return the error codes used by this translator._Usually determined via a DataSource._@see #setDataSource;public SQLErrorCodes getSqlErrorCodes() {_		return this.sqlErrorCodes__	};return,the,error,codes,used,by,this,translator,usually,determined,via,a,data,source,see,set,data,source;public,sqlerror,codes,get,sql,error,codes,return,this,sql,error,codes
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodes getSqlErrorCodes();1496242568;Return the error codes used by this translator._Usually determined via a DataSource._@see #setDataSource;public SQLErrorCodes getSqlErrorCodes() {_		return this.sqlErrorCodes__	};return,the,error,codes,used,by,this,translator,usually,determined,via,a,data,source,see,set,data,source;public,sqlerror,codes,get,sql,error,codes,return,this,sql,error,codes
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodes getSqlErrorCodes();1496837955;Return the error codes used by this translator._Usually determined via a DataSource._@see #setDataSource;public SQLErrorCodes getSqlErrorCodes() {_		return this.sqlErrorCodes__	};return,the,error,codes,used,by,this,translator,usually,determined,via,a,data,source,see,set,data,source;public,sqlerror,codes,get,sql,error,codes,return,this,sql,error,codes
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(DataSource dataSource);1328020251;Create a SQL error code translator for the given DataSource._Invoking this constructor will cause a Connection to be obtained_from the DataSource to get the metadata._@param dataSource DataSource to use to find metadata and establish_which error codes are usable_@see SQLErrorCodesFactory;public SQLErrorCodeSQLExceptionTranslator(DataSource dataSource) {_		this()__		setDataSource(dataSource)__	};create,a,sql,error,code,translator,for,the,given,data,source,invoking,this,constructor,will,cause,a,connection,to,be,obtained,from,the,data,source,to,get,the,metadata,param,data,source,data,source,to,use,to,find,metadata,and,establish,which,error,codes,are,usable,see,sqlerror,codes,factory;public,sqlerror,code,sqlexception,translator,data,source,data,source,this,set,data,source,data,source
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(DataSource dataSource);1356735495;Create a SQL error code translator for the given DataSource._Invoking this constructor will cause a Connection to be obtained_from the DataSource to get the metadata._@param dataSource DataSource to use to find metadata and establish_which error codes are usable_@see SQLErrorCodesFactory;public SQLErrorCodeSQLExceptionTranslator(DataSource dataSource) {_		this()__		setDataSource(dataSource)__	};create,a,sql,error,code,translator,for,the,given,data,source,invoking,this,constructor,will,cause,a,connection,to,be,obtained,from,the,data,source,to,get,the,metadata,param,data,source,data,source,to,use,to,find,metadata,and,establish,which,error,codes,are,usable,see,sqlerror,codes,factory;public,sqlerror,code,sqlexception,translator,data,source,data,source,this,set,data,source,data,source
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(DataSource dataSource);1362408075;Create a SQL error code translator for the given DataSource._Invoking this constructor will cause a Connection to be obtained_from the DataSource to get the metadata._@param dataSource DataSource to use to find metadata and establish_which error codes are usable_@see SQLErrorCodesFactory;public SQLErrorCodeSQLExceptionTranslator(DataSource dataSource) {_		this()__		setDataSource(dataSource)__	};create,a,sql,error,code,translator,for,the,given,data,source,invoking,this,constructor,will,cause,a,connection,to,be,obtained,from,the,data,source,to,get,the,metadata,param,data,source,data,source,to,use,to,find,metadata,and,establish,which,error,codes,are,usable,see,sqlerror,codes,factory;public,sqlerror,code,sqlexception,translator,data,source,data,source,this,set,data,source,data,source
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(DataSource dataSource);1363695025;Create a SQL error code translator for the given DataSource._Invoking this constructor will cause a Connection to be obtained_from the DataSource to get the metadata._@param dataSource DataSource to use to find metadata and establish_which error codes are usable_@see SQLErrorCodesFactory;public SQLErrorCodeSQLExceptionTranslator(DataSource dataSource) {_		this()__		setDataSource(dataSource)__	};create,a,sql,error,code,translator,for,the,given,data,source,invoking,this,constructor,will,cause,a,connection,to,be,obtained,from,the,data,source,to,get,the,metadata,param,data,source,data,source,to,use,to,find,metadata,and,establish,which,error,codes,are,usable,see,sqlerror,codes,factory;public,sqlerror,code,sqlexception,translator,data,source,data,source,this,set,data,source,data,source
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(DataSource dataSource);1385412762;Create a SQL error code translator for the given DataSource._Invoking this constructor will cause a Connection to be obtained_from the DataSource to get the metadata._@param dataSource DataSource to use to find metadata and establish_which error codes are usable_@see SQLErrorCodesFactory;public SQLErrorCodeSQLExceptionTranslator(DataSource dataSource) {_		this()__		setDataSource(dataSource)__	};create,a,sql,error,code,translator,for,the,given,data,source,invoking,this,constructor,will,cause,a,connection,to,be,obtained,from,the,data,source,to,get,the,metadata,param,data,source,data,source,to,use,to,find,metadata,and,establish,which,error,codes,are,usable,see,sqlerror,codes,factory;public,sqlerror,code,sqlexception,translator,data,source,data,source,this,set,data,source,data,source
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(DataSource dataSource);1432125256;Create a SQL error code translator for the given DataSource._Invoking this constructor will cause a Connection to be obtained_from the DataSource to get the metadata._@param dataSource DataSource to use to find metadata and establish_which error codes are usable_@see SQLErrorCodesFactory;public SQLErrorCodeSQLExceptionTranslator(DataSource dataSource) {_		this()__		setDataSource(dataSource)__	};create,a,sql,error,code,translator,for,the,given,data,source,invoking,this,constructor,will,cause,a,connection,to,be,obtained,from,the,data,source,to,get,the,metadata,param,data,source,data,source,to,use,to,find,metadata,and,establish,which,error,codes,are,usable,see,sqlerror,codes,factory;public,sqlerror,code,sqlexception,translator,data,source,data,source,this,set,data,source,data,source
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(DataSource dataSource);1495868221;Create a SQL error code translator for the given DataSource._Invoking this constructor will cause a Connection to be obtained_from the DataSource to get the metadata._@param dataSource DataSource to use to find metadata and establish_which error codes are usable_@see SQLErrorCodesFactory;public SQLErrorCodeSQLExceptionTranslator(DataSource dataSource) {_		this()__		setDataSource(dataSource)__	};create,a,sql,error,code,translator,for,the,given,data,source,invoking,this,constructor,will,cause,a,connection,to,be,obtained,from,the,data,source,to,get,the,metadata,param,data,source,data,source,to,use,to,find,metadata,and,establish,which,error,codes,are,usable,see,sqlerror,codes,factory;public,sqlerror,code,sqlexception,translator,data,source,data,source,this,set,data,source,data,source
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(DataSource dataSource);1496242568;Create a SQL error code translator for the given DataSource._Invoking this constructor will cause a Connection to be obtained_from the DataSource to get the metadata._@param dataSource DataSource to use to find metadata and establish_which error codes are usable_@see SQLErrorCodesFactory;public SQLErrorCodeSQLExceptionTranslator(DataSource dataSource) {_		this()__		setDataSource(dataSource)__	};create,a,sql,error,code,translator,for,the,given,data,source,invoking,this,constructor,will,cause,a,connection,to,be,obtained,from,the,data,source,to,get,the,metadata,param,data,source,data,source,to,use,to,find,metadata,and,establish,which,error,codes,are,usable,see,sqlerror,codes,factory;public,sqlerror,code,sqlexception,translator,data,source,data,source,this,set,data,source,data,source
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(DataSource dataSource);1496837955;Create a SQL error code translator for the given DataSource._Invoking this constructor will cause a Connection to be obtained_from the DataSource to get the metadata._@param dataSource DataSource to use to find metadata and establish_which error codes are usable_@see SQLErrorCodesFactory;public SQLErrorCodeSQLExceptionTranslator(DataSource dataSource) {_		this()__		setDataSource(dataSource)__	};create,a,sql,error,code,translator,for,the,given,data,source,invoking,this,constructor,will,cause,a,connection,to,be,obtained,from,the,data,source,to,get,the,metadata,param,data,source,data,source,to,use,to,find,metadata,and,establish,which,error,codes,are,usable,see,sqlerror,codes,factory;public,sqlerror,code,sqlexception,translator,data,source,data,source,this,set,data,source,data,source
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(DataSource dataSource);1498780456;Create a SQL error code translator for the given DataSource._Invoking this constructor will cause a Connection to be obtained_from the DataSource to get the metadata._@param dataSource DataSource to use to find metadata and establish_which error codes are usable_@see SQLErrorCodesFactory;public SQLErrorCodeSQLExceptionTranslator(DataSource dataSource) {_		this()__		setDataSource(dataSource)__	};create,a,sql,error,code,translator,for,the,given,data,source,invoking,this,constructor,will,cause,a,connection,to,be,obtained,from,the,data,source,to,get,the,metadata,param,data,source,data,source,to,use,to,find,metadata,and,establish,which,error,codes,are,usable,see,sqlerror,codes,factory;public,sqlerror,code,sqlexception,translator,data,source,data,source,this,set,data,source,data,source
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(DataSource dataSource);1500448076;Create a SQL error code translator for the given DataSource._Invoking this constructor will cause a Connection to be obtained_from the DataSource to get the metadata._@param dataSource DataSource to use to find metadata and establish_which error codes are usable_@see SQLErrorCodesFactory;public SQLErrorCodeSQLExceptionTranslator(DataSource dataSource) {_		this()__		setDataSource(dataSource)__	};create,a,sql,error,code,translator,for,the,given,data,source,invoking,this,constructor,will,cause,a,connection,to,be,obtained,from,the,data,source,to,get,the,metadata,param,data,source,data,source,to,use,to,find,metadata,and,establish,which,error,codes,are,usable,see,sqlerror,codes,factory;public,sqlerror,code,sqlexception,translator,data,source,data,source,this,set,data,source,data,source
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(DataSource dataSource);1502974979;Create a SQL error code translator for the given DataSource._Invoking this constructor will cause a Connection to be obtained_from the DataSource to get the metadata._@param dataSource DataSource to use to find metadata and establish_which error codes are usable_@see SQLErrorCodesFactory;public SQLErrorCodeSQLExceptionTranslator(DataSource dataSource) {_		this()__		setDataSource(dataSource)__	};create,a,sql,error,code,translator,for,the,given,data,source,invoking,this,constructor,will,cause,a,connection,to,be,obtained,from,the,data,source,to,get,the,metadata,param,data,source,data,source,to,use,to,find,metadata,and,establish,which,error,codes,are,usable,see,sqlerror,codes,factory;public,sqlerror,code,sqlexception,translator,data,source,data,source,this,set,data,source,data,source
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(DataSource dataSource);1506097334;Create a SQL error code translator for the given DataSource._Invoking this constructor will cause a Connection to be obtained_from the DataSource to get the metadata._@param dataSource DataSource to use to find metadata and establish_which error codes are usable_@see SQLErrorCodesFactory;public SQLErrorCodeSQLExceptionTranslator(DataSource dataSource) {_		this()__		setDataSource(dataSource)__	};create,a,sql,error,code,translator,for,the,given,data,source,invoking,this,constructor,will,cause,a,connection,to,be,obtained,from,the,data,source,to,get,the,metadata,param,data,source,data,source,to,use,to,find,metadata,and,establish,which,error,codes,are,usable,see,sqlerror,codes,factory;public,sqlerror,code,sqlexception,translator,data,source,data,source,this,set,data,source,data,source
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(DataSource dataSource);1520529117;Create a SQL error code translator for the given DataSource._Invoking this constructor will cause a Connection to be obtained_from the DataSource to get the metadata._@param dataSource DataSource to use to find metadata and establish_which error codes are usable_@see SQLErrorCodesFactory;public SQLErrorCodeSQLExceptionTranslator(DataSource dataSource) {_		this()__		setDataSource(dataSource)__	};create,a,sql,error,code,translator,for,the,given,data,source,invoking,this,constructor,will,cause,a,connection,to,be,obtained,from,the,data,source,to,get,the,metadata,param,data,source,data,source,to,use,to,find,metadata,and,establish,which,error,codes,are,usable,see,sqlerror,codes,factory;public,sqlerror,code,sqlexception,translator,data,source,data,source,this,set,data,source,data,source
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(DataSource dataSource);1521457504;Create a SQL error code translator for the given DataSource._Invoking this constructor will cause a Connection to be obtained_from the DataSource to get the meta-data._@param dataSource DataSource to use to find meta-data and establish_which error codes are usable_@see SQLErrorCodesFactory;public SQLErrorCodeSQLExceptionTranslator(DataSource dataSource) {_		this()__		setDataSource(dataSource)__	};create,a,sql,error,code,translator,for,the,given,data,source,invoking,this,constructor,will,cause,a,connection,to,be,obtained,from,the,data,source,to,get,the,meta,data,param,data,source,data,source,to,use,to,find,meta,data,and,establish,which,error,codes,are,usable,see,sqlerror,codes,factory;public,sqlerror,code,sqlexception,translator,data,source,data,source,this,set,data,source,data,source
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(DataSource dataSource);1530174524;Create a SQL error code translator for the given DataSource._Invoking this constructor will cause a Connection to be obtained_from the DataSource to get the meta-data._@param dataSource the DataSource to use to find meta-data and establish_which error codes are usable_@see SQLErrorCodesFactory;public SQLErrorCodeSQLExceptionTranslator(DataSource dataSource) {_		this()__		setDataSource(dataSource)__	};create,a,sql,error,code,translator,for,the,given,data,source,invoking,this,constructor,will,cause,a,connection,to,be,obtained,from,the,data,source,to,get,the,meta,data,param,data,source,the,data,source,to,use,to,find,meta,data,and,establish,which,error,codes,are,usable,see,sqlerror,codes,factory;public,sqlerror,code,sqlexception,translator,data,source,data,source,this,set,data,source,data,source
SQLErrorCodeSQLExceptionTranslator -> public SQLErrorCodeSQLExceptionTranslator(DataSource dataSource);1531144424;Create a SQL error code translator for the given DataSource._Invoking this constructor will cause a Connection to be obtained_from the DataSource to get the meta-data._@param dataSource the DataSource to use to find meta-data and establish_which error codes are usable_@see SQLErrorCodesFactory;public SQLErrorCodeSQLExceptionTranslator(DataSource dataSource) {_		this()__		setDataSource(dataSource)__	};create,a,sql,error,code,translator,for,the,given,data,source,invoking,this,constructor,will,cause,a,connection,to,be,obtained,from,the,data,source,to,get,the,meta,data,param,data,source,the,data,source,to,use,to,find,meta,data,and,establish,which,error,codes,are,usable,see,sqlerror,codes,factory;public,sqlerror,code,sqlexception,translator,data,source,data,source,this,set,data,source,data,source
