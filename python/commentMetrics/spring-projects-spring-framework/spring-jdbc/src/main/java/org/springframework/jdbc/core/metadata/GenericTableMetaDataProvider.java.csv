# id;timestamp;commentText;codeText;commentWords;codeWords
GenericTableMetaDataProvider -> private void locateTableAndProcessMetaData(DatabaseMetaData databaseMetaData, String catalogName, 			String schemaName, String tableName);1328020251;Method supporting the metedata processing for a table.;private void locateTableAndProcessMetaData(DatabaseMetaData databaseMetaData, String catalogName,_			String schemaName, String tableName) {__		Map<String, TableMetaData> tableMeta = new HashMap<String, TableMetaData>()__		ResultSet tables = null__		try {_			tables = databaseMetaData.getTables(_				catalogNameToUse(catalogName),_				schemaNameToUse(schemaName),_				tableNameToUse(tableName),_				null)__			while (tables != null && tables.next()) {_				TableMetaData tmd = new TableMetaData()__				tmd.setCatalogName(tables.getString("TABLE_CAT"))__				tmd.setSchemaName(tables.getString("TABLE_SCHEM"))__				tmd.setTableName(tables.getString("TABLE_NAME"))__				tmd.setType(tables.getString("TABLE_TYPE"))__				if (tmd.getSchemaName() == null) {_					tableMeta.put(userName.toUpperCase(), tmd)__				}_				else {_					tableMeta.put(tmd.getSchemaName().toUpperCase(), tmd)__				}_			}_		}_		catch (SQLException se) {_			logger.warn("Error while accessing table meta data results" + se.getMessage())__		}_		finally {_			if (tables != null) {_				try {_					tables.close()__				} catch (SQLException e) {_					logger.warn("Error while closing table meta data reults" + e.getMessage())__				}_			}_		}__		if (tableMeta.size() < 1) {_			logger.warn("Unable to locate table meta data for '" + tableName +"' -- column names must be provided")__		}_		else {_			TableMetaData tmd__			if (schemaName == null) {_				tmd = tableMeta.get(getDefaultSchema())__				if (tmd == null) {_					tmd = tableMeta.get(userName.toUpperCase())__				}_				if (tmd == null) {_					tmd = tableMeta.get("PUBLIC")__				}_				if (tmd == null) {_					tmd = tableMeta.get("DBO")__				}_				if (tmd == null) {_					throw new DataAccessResourceFailureException("Unable to locate table meta data for '" +_							tableName + "' in the default schema")__				}_			}_			else {_				tmd = tableMeta.get(schemaName.toUpperCase())__				if (tmd == null) {_					throw new DataAccessResourceFailureException("Unable to locate table meta data for '" +_							tableName + "' in the '" + schemaName + "' schema")__				}_			}__			processTableColumns(databaseMetaData, tmd)__		}_	};method,supporting,the,metedata,processing,for,a,table;private,void,locate,table,and,process,meta,data,database,meta,data,database,meta,data,string,catalog,name,string,schema,name,string,table,name,map,string,table,meta,data,table,meta,new,hash,map,string,table,meta,data,result,set,tables,null,try,tables,database,meta,data,get,tables,catalog,name,to,use,catalog,name,schema,name,to,use,schema,name,table,name,to,use,table,name,null,while,tables,null,tables,next,table,meta,data,tmd,new,table,meta,data,tmd,set,catalog,name,tables,get,string,tmd,set,schema,name,tables,get,string,tmd,set,table,name,tables,get,string,tmd,set,type,tables,get,string,if,tmd,get,schema,name,null,table,meta,put,user,name,to,upper,case,tmd,else,table,meta,put,tmd,get,schema,name,to,upper,case,tmd,catch,sqlexception,se,logger,warn,error,while,accessing,table,meta,data,results,se,get,message,finally,if,tables,null,try,tables,close,catch,sqlexception,e,logger,warn,error,while,closing,table,meta,data,reults,e,get,message,if,table,meta,size,1,logger,warn,unable,to,locate,table,meta,data,for,table,name,column,names,must,be,provided,else,table,meta,data,tmd,if,schema,name,null,tmd,table,meta,get,get,default,schema,if,tmd,null,tmd,table,meta,get,user,name,to,upper,case,if,tmd,null,tmd,table,meta,get,public,if,tmd,null,tmd,table,meta,get,dbo,if,tmd,null,throw,new,data,access,resource,failure,exception,unable,to,locate,table,meta,data,for,table,name,in,the,default,schema,else,tmd,table,meta,get,schema,name,to,upper,case,if,tmd,null,throw,new,data,access,resource,failure,exception,unable,to,locate,table,meta,data,for,table,name,in,the,schema,name,schema,process,table,columns,database,meta,data,tmd
GenericTableMetaDataProvider -> private void locateTableAndProcessMetaData(DatabaseMetaData databaseMetaData, String catalogName, 			String schemaName, String tableName);1329142650;Method supporting the metedata processing for a table.;private void locateTableAndProcessMetaData(DatabaseMetaData databaseMetaData, String catalogName,_			String schemaName, String tableName) {__		Map<String, TableMetaData> tableMeta = new HashMap<String, TableMetaData>()__		ResultSet tables = null__		try {_			tables = databaseMetaData.getTables(_				catalogNameToUse(catalogName),_				schemaNameToUse(schemaName),_				tableNameToUse(tableName),_				null)__			while (tables != null && tables.next()) {_				TableMetaData tmd = new TableMetaData()__				tmd.setCatalogName(tables.getString("TABLE_CAT"))__				tmd.setSchemaName(tables.getString("TABLE_SCHEM"))__				tmd.setTableName(tables.getString("TABLE_NAME"))__				tmd.setType(tables.getString("TABLE_TYPE"))__				if (tmd.getSchemaName() == null) {_					tableMeta.put(userName != null ? userName.toUpperCase() : "", tmd)__				}_				else {_					tableMeta.put(tmd.getSchemaName().toUpperCase(), tmd)__				}_			}_		}_		catch (SQLException se) {_			logger.warn("Error while accessing table meta data results" + se.getMessage())__		}_		finally {_			if (tables != null) {_				try {_					tables.close()__				} catch (SQLException e) {_					logger.warn("Error while closing table meta data reults" + e.getMessage())__				}_			}_		}__		if (tableMeta.size() < 1) {_			logger.warn("Unable to locate table meta data for '" + tableName +"' -- column names must be provided")__		}_		else {_			TableMetaData tmd__			if (schemaName == null) {_				tmd = tableMeta.get(getDefaultSchema())__				if (tmd == null) {_					tmd = tableMeta.get(userName != null ? userName.toUpperCase() : "")__				}_				if (tmd == null) {_					tmd = tableMeta.get("PUBLIC")__				}_				if (tmd == null) {_					tmd = tableMeta.get("DBO")__				}_				if (tmd == null) {_					throw new DataAccessResourceFailureException("Unable to locate table meta data for '" +_							tableName + "' in the default schema")__				}_			}_			else {_				tmd = tableMeta.get(schemaName.toUpperCase())__				if (tmd == null) {_					throw new DataAccessResourceFailureException("Unable to locate table meta data for '" +_							tableName + "' in the '" + schemaName + "' schema")__				}_			}__			processTableColumns(databaseMetaData, tmd)__		}_	};method,supporting,the,metedata,processing,for,a,table;private,void,locate,table,and,process,meta,data,database,meta,data,database,meta,data,string,catalog,name,string,schema,name,string,table,name,map,string,table,meta,data,table,meta,new,hash,map,string,table,meta,data,result,set,tables,null,try,tables,database,meta,data,get,tables,catalog,name,to,use,catalog,name,schema,name,to,use,schema,name,table,name,to,use,table,name,null,while,tables,null,tables,next,table,meta,data,tmd,new,table,meta,data,tmd,set,catalog,name,tables,get,string,tmd,set,schema,name,tables,get,string,tmd,set,table,name,tables,get,string,tmd,set,type,tables,get,string,if,tmd,get,schema,name,null,table,meta,put,user,name,null,user,name,to,upper,case,tmd,else,table,meta,put,tmd,get,schema,name,to,upper,case,tmd,catch,sqlexception,se,logger,warn,error,while,accessing,table,meta,data,results,se,get,message,finally,if,tables,null,try,tables,close,catch,sqlexception,e,logger,warn,error,while,closing,table,meta,data,reults,e,get,message,if,table,meta,size,1,logger,warn,unable,to,locate,table,meta,data,for,table,name,column,names,must,be,provided,else,table,meta,data,tmd,if,schema,name,null,tmd,table,meta,get,get,default,schema,if,tmd,null,tmd,table,meta,get,user,name,null,user,name,to,upper,case,if,tmd,null,tmd,table,meta,get,public,if,tmd,null,tmd,table,meta,get,dbo,if,tmd,null,throw,new,data,access,resource,failure,exception,unable,to,locate,table,meta,data,for,table,name,in,the,default,schema,else,tmd,table,meta,get,schema,name,to,upper,case,if,tmd,null,throw,new,data,access,resource,failure,exception,unable,to,locate,table,meta,data,for,table,name,in,the,schema,name,schema,process,table,columns,database,meta,data,tmd
GenericTableMetaDataProvider -> private void locateTableAndProcessMetaData(DatabaseMetaData databaseMetaData, String catalogName, 			String schemaName, String tableName);1356735495;Method supporting the metedata processing for a table.;private void locateTableAndProcessMetaData(DatabaseMetaData databaseMetaData, String catalogName,_			String schemaName, String tableName) {__		Map<String, TableMetaData> tableMeta = new HashMap<String, TableMetaData>()__		ResultSet tables = null__		try {_			tables = databaseMetaData.getTables(_				catalogNameToUse(catalogName),_				schemaNameToUse(schemaName),_				tableNameToUse(tableName),_				null)__			while (tables != null && tables.next()) {_				TableMetaData tmd = new TableMetaData()__				tmd.setCatalogName(tables.getString("TABLE_CAT"))__				tmd.setSchemaName(tables.getString("TABLE_SCHEM"))__				tmd.setTableName(tables.getString("TABLE_NAME"))__				tmd.setType(tables.getString("TABLE_TYPE"))__				if (tmd.getSchemaName() == null) {_					tableMeta.put(userName != null ? userName.toUpperCase() : "", tmd)__				}_				else {_					tableMeta.put(tmd.getSchemaName().toUpperCase(), tmd)__				}_			}_		}_		catch (SQLException se) {_			logger.warn("Error while accessing table meta data results" + se.getMessage())__		}_		finally {_			if (tables != null) {_				try {_					tables.close()__				} catch (SQLException e) {_					logger.warn("Error while closing table meta data reults" + e.getMessage())__				}_			}_		}__		if (tableMeta.size() < 1) {_			logger.warn("Unable to locate table meta data for '" + tableName +"' -- column names must be provided")__		}_		else {_			TableMetaData tmd__			if (schemaName == null) {_				tmd = tableMeta.get(getDefaultSchema())__				if (tmd == null) {_					tmd = tableMeta.get(userName != null ? userName.toUpperCase() : "")__				}_				if (tmd == null) {_					tmd = tableMeta.get("PUBLIC")__				}_				if (tmd == null) {_					tmd = tableMeta.get("DBO")__				}_				if (tmd == null) {_					throw new DataAccessResourceFailureException("Unable to locate table meta data for '" +_							tableName + "' in the default schema")__				}_			}_			else {_				tmd = tableMeta.get(schemaName.toUpperCase())__				if (tmd == null) {_					throw new DataAccessResourceFailureException("Unable to locate table meta data for '" +_							tableName + "' in the '" + schemaName + "' schema")__				}_			}__			processTableColumns(databaseMetaData, tmd)__		}_	};method,supporting,the,metedata,processing,for,a,table;private,void,locate,table,and,process,meta,data,database,meta,data,database,meta,data,string,catalog,name,string,schema,name,string,table,name,map,string,table,meta,data,table,meta,new,hash,map,string,table,meta,data,result,set,tables,null,try,tables,database,meta,data,get,tables,catalog,name,to,use,catalog,name,schema,name,to,use,schema,name,table,name,to,use,table,name,null,while,tables,null,tables,next,table,meta,data,tmd,new,table,meta,data,tmd,set,catalog,name,tables,get,string,tmd,set,schema,name,tables,get,string,tmd,set,table,name,tables,get,string,tmd,set,type,tables,get,string,if,tmd,get,schema,name,null,table,meta,put,user,name,null,user,name,to,upper,case,tmd,else,table,meta,put,tmd,get,schema,name,to,upper,case,tmd,catch,sqlexception,se,logger,warn,error,while,accessing,table,meta,data,results,se,get,message,finally,if,tables,null,try,tables,close,catch,sqlexception,e,logger,warn,error,while,closing,table,meta,data,reults,e,get,message,if,table,meta,size,1,logger,warn,unable,to,locate,table,meta,data,for,table,name,column,names,must,be,provided,else,table,meta,data,tmd,if,schema,name,null,tmd,table,meta,get,get,default,schema,if,tmd,null,tmd,table,meta,get,user,name,null,user,name,to,upper,case,if,tmd,null,tmd,table,meta,get,public,if,tmd,null,tmd,table,meta,get,dbo,if,tmd,null,throw,new,data,access,resource,failure,exception,unable,to,locate,table,meta,data,for,table,name,in,the,default,schema,else,tmd,table,meta,get,schema,name,to,upper,case,if,tmd,null,throw,new,data,access,resource,failure,exception,unable,to,locate,table,meta,data,for,table,name,in,the,schema,name,schema,process,table,columns,database,meta,data,tmd
GenericTableMetaDataProvider -> private void locateTableAndProcessMetaData(DatabaseMetaData databaseMetaData, String catalogName, 			String schemaName, String tableName);1357119239;Method supporting the metedata processing for a table.;private void locateTableAndProcessMetaData(DatabaseMetaData databaseMetaData, String catalogName,_			String schemaName, String tableName) {__		Map<String, TableMetaData> tableMeta = new HashMap<String, TableMetaData>()__		ResultSet tables = null__		try {_			tables = databaseMetaData.getTables(_				catalogNameToUse(catalogName),_				schemaNameToUse(schemaName),_				tableNameToUse(tableName),_				null)__			while (tables != null && tables.next()) {_				TableMetaData tmd = new TableMetaData()__				tmd.setCatalogName(tables.getString("TABLE_CAT"))__				tmd.setSchemaName(tables.getString("TABLE_SCHEM"))__				tmd.setTableName(tables.getString("TABLE_NAME"))__				tmd.setType(tables.getString("TABLE_TYPE"))__				if (tmd.getSchemaName() == null) {_					tableMeta.put(userName != null ? userName.toUpperCase() : "", tmd)__				}_				else {_					tableMeta.put(tmd.getSchemaName().toUpperCase(), tmd)__				}_			}_		}_		catch (SQLException se) {_			logger.warn("Error while accessing table meta data results" + se.getMessage())__		}_		finally {_			if (tables != null) {_				try {_					tables.close()__				} catch (SQLException e) {_					logger.warn("Error while closing table meta data reults" + e.getMessage())__				}_			}_		}__		if (tableMeta.size() < 1) {_			logger.warn("Unable to locate table meta data for '" + tableName +"' -- column names must be provided")__		}_		else {_			TableMetaData tmd__			if (schemaName == null) {_				tmd = tableMeta.get(getDefaultSchema())__				if (tmd == null) {_					tmd = tableMeta.get(userName != null ? userName.toUpperCase() : "")__				}_				if (tmd == null) {_					tmd = tableMeta.get("PUBLIC")__				}_				if (tmd == null) {_					tmd = tableMeta.get("DBO")__				}_				if (tmd == null) {_					throw new DataAccessResourceFailureException("Unable to locate table meta data for '" +_							tableName + "' in the default schema")__				}_			}_			else {_				tmd = tableMeta.get(schemaName.toUpperCase())__				if (tmd == null) {_					throw new DataAccessResourceFailureException("Unable to locate table meta data for '" +_							tableName + "' in the '" + schemaName + "' schema")__				}_			}__			processTableColumns(databaseMetaData, tmd)__		}_	};method,supporting,the,metedata,processing,for,a,table;private,void,locate,table,and,process,meta,data,database,meta,data,database,meta,data,string,catalog,name,string,schema,name,string,table,name,map,string,table,meta,data,table,meta,new,hash,map,string,table,meta,data,result,set,tables,null,try,tables,database,meta,data,get,tables,catalog,name,to,use,catalog,name,schema,name,to,use,schema,name,table,name,to,use,table,name,null,while,tables,null,tables,next,table,meta,data,tmd,new,table,meta,data,tmd,set,catalog,name,tables,get,string,tmd,set,schema,name,tables,get,string,tmd,set,table,name,tables,get,string,tmd,set,type,tables,get,string,if,tmd,get,schema,name,null,table,meta,put,user,name,null,user,name,to,upper,case,tmd,else,table,meta,put,tmd,get,schema,name,to,upper,case,tmd,catch,sqlexception,se,logger,warn,error,while,accessing,table,meta,data,results,se,get,message,finally,if,tables,null,try,tables,close,catch,sqlexception,e,logger,warn,error,while,closing,table,meta,data,reults,e,get,message,if,table,meta,size,1,logger,warn,unable,to,locate,table,meta,data,for,table,name,column,names,must,be,provided,else,table,meta,data,tmd,if,schema,name,null,tmd,table,meta,get,get,default,schema,if,tmd,null,tmd,table,meta,get,user,name,null,user,name,to,upper,case,if,tmd,null,tmd,table,meta,get,public,if,tmd,null,tmd,table,meta,get,dbo,if,tmd,null,throw,new,data,access,resource,failure,exception,unable,to,locate,table,meta,data,for,table,name,in,the,default,schema,else,tmd,table,meta,get,schema,name,to,upper,case,if,tmd,null,throw,new,data,access,resource,failure,exception,unable,to,locate,table,meta,data,for,table,name,in,the,schema,name,schema,process,table,columns,database,meta,data,tmd
GenericTableMetaDataProvider -> private void locateTableAndProcessMetaData(DatabaseMetaData databaseMetaData, String catalogName, 			String schemaName, String tableName);1362408075;Method supporting the metedata processing for a table.;private void locateTableAndProcessMetaData(DatabaseMetaData databaseMetaData, String catalogName,_			String schemaName, String tableName) {__		Map<String, TableMetaData> tableMeta = new HashMap<String, TableMetaData>()__		ResultSet tables = null__		try {_			tables = databaseMetaData.getTables(_				catalogNameToUse(catalogName),_				schemaNameToUse(schemaName),_				tableNameToUse(tableName),_				null)__			while (tables != null && tables.next()) {_				TableMetaData tmd = new TableMetaData()__				tmd.setCatalogName(tables.getString("TABLE_CAT"))__				tmd.setSchemaName(tables.getString("TABLE_SCHEM"))__				tmd.setTableName(tables.getString("TABLE_NAME"))__				if (tmd.getSchemaName() == null) {_					tableMeta.put(userName != null ? userName.toUpperCase() : "", tmd)__				}_				else {_					tableMeta.put(tmd.getSchemaName().toUpperCase(), tmd)__				}_			}_		}_		catch (SQLException se) {_			logger.warn("Error while accessing table meta data results" + se.getMessage())__		}_		finally {_			if (tables != null) {_				try {_					tables.close()__				} catch (SQLException e) {_					logger.warn("Error while closing table meta data reults" + e.getMessage())__				}_			}_		}__		if (tableMeta.size() < 1) {_			logger.warn("Unable to locate table meta data for '" + tableName +"' -- column names must be provided")__		}_		else {_			TableMetaData tmd__			if (schemaName == null) {_				tmd = tableMeta.get(getDefaultSchema())__				if (tmd == null) {_					tmd = tableMeta.get(userName != null ? userName.toUpperCase() : "")__				}_				if (tmd == null) {_					tmd = tableMeta.get("PUBLIC")__				}_				if (tmd == null) {_					tmd = tableMeta.get("DBO")__				}_				if (tmd == null) {_					throw new DataAccessResourceFailureException("Unable to locate table meta data for '" +_							tableName + "' in the default schema")__				}_			}_			else {_				tmd = tableMeta.get(schemaName.toUpperCase())__				if (tmd == null) {_					throw new DataAccessResourceFailureException("Unable to locate table meta data for '" +_							tableName + "' in the '" + schemaName + "' schema")__				}_			}__			processTableColumns(databaseMetaData, tmd)__		}_	};method,supporting,the,metedata,processing,for,a,table;private,void,locate,table,and,process,meta,data,database,meta,data,database,meta,data,string,catalog,name,string,schema,name,string,table,name,map,string,table,meta,data,table,meta,new,hash,map,string,table,meta,data,result,set,tables,null,try,tables,database,meta,data,get,tables,catalog,name,to,use,catalog,name,schema,name,to,use,schema,name,table,name,to,use,table,name,null,while,tables,null,tables,next,table,meta,data,tmd,new,table,meta,data,tmd,set,catalog,name,tables,get,string,tmd,set,schema,name,tables,get,string,tmd,set,table,name,tables,get,string,if,tmd,get,schema,name,null,table,meta,put,user,name,null,user,name,to,upper,case,tmd,else,table,meta,put,tmd,get,schema,name,to,upper,case,tmd,catch,sqlexception,se,logger,warn,error,while,accessing,table,meta,data,results,se,get,message,finally,if,tables,null,try,tables,close,catch,sqlexception,e,logger,warn,error,while,closing,table,meta,data,reults,e,get,message,if,table,meta,size,1,logger,warn,unable,to,locate,table,meta,data,for,table,name,column,names,must,be,provided,else,table,meta,data,tmd,if,schema,name,null,tmd,table,meta,get,get,default,schema,if,tmd,null,tmd,table,meta,get,user,name,null,user,name,to,upper,case,if,tmd,null,tmd,table,meta,get,public,if,tmd,null,tmd,table,meta,get,dbo,if,tmd,null,throw,new,data,access,resource,failure,exception,unable,to,locate,table,meta,data,for,table,name,in,the,default,schema,else,tmd,table,meta,get,schema,name,to,upper,case,if,tmd,null,throw,new,data,access,resource,failure,exception,unable,to,locate,table,meta,data,for,table,name,in,the,schema,name,schema,process,table,columns,database,meta,data,tmd
GenericTableMetaDataProvider -> private void locateTableAndProcessMetaData(DatabaseMetaData databaseMetaData, String catalogName, 			String schemaName, String tableName);1368482696;Method supporting the metedata processing for a table.;private void locateTableAndProcessMetaData(DatabaseMetaData databaseMetaData, String catalogName,_			String schemaName, String tableName) {__		Map<String, TableMetaData> tableMeta = new HashMap<String, TableMetaData>()__		ResultSet tables = null__		try {_			tables = databaseMetaData.getTables(_				catalogNameToUse(catalogName),_				schemaNameToUse(schemaName),_				tableNameToUse(tableName),_				null)__			while (tables != null && tables.next()) {_				TableMetaData tmd = new TableMetaData()__				tmd.setCatalogName(tables.getString("TABLE_CAT"))__				tmd.setSchemaName(tables.getString("TABLE_SCHEM"))__				tmd.setTableName(tables.getString("TABLE_NAME"))__				if (tmd.getSchemaName() == null) {_					tableMeta.put(userName != null ? userName.toUpperCase() : "", tmd)__				}_				else {_					tableMeta.put(tmd.getSchemaName().toUpperCase(), tmd)__				}_			}_		}_		catch (SQLException se) {_			logger.warn("Error while accessing table meta data results" + se.getMessage())__		}_		finally {_			if (tables != null) {_				try {_					tables.close()__				} catch (SQLException e) {_					logger.warn("Error while closing table meta data reults" + e.getMessage())__				}_			}_		}__		if (tableMeta.size() < 1) {_			logger.warn("Unable to locate table meta data for '" + tableName +"' -- column names must be provided")__		}_		else {_			TableMetaData tmd__			if (schemaName == null) {_				tmd = tableMeta.get(getDefaultSchema())__				if (tmd == null) {_					tmd = tableMeta.get(userName != null ? userName.toUpperCase() : "")__				}_				if (tmd == null) {_					tmd = tableMeta.get("PUBLIC")__				}_				if (tmd == null) {_					tmd = tableMeta.get("DBO")__				}_				if (tmd == null) {_					throw new DataAccessResourceFailureException("Unable to locate table meta data for '" +_							tableName + "' in the default schema")__				}_			}_			else {_				tmd = tableMeta.get(schemaName.toUpperCase())__				if (tmd == null) {_					throw new DataAccessResourceFailureException("Unable to locate table meta data for '" +_							tableName + "' in the '" + schemaName + "' schema")__				}_			}__			processTableColumns(databaseMetaData, tmd)__		}_	};method,supporting,the,metedata,processing,for,a,table;private,void,locate,table,and,process,meta,data,database,meta,data,database,meta,data,string,catalog,name,string,schema,name,string,table,name,map,string,table,meta,data,table,meta,new,hash,map,string,table,meta,data,result,set,tables,null,try,tables,database,meta,data,get,tables,catalog,name,to,use,catalog,name,schema,name,to,use,schema,name,table,name,to,use,table,name,null,while,tables,null,tables,next,table,meta,data,tmd,new,table,meta,data,tmd,set,catalog,name,tables,get,string,tmd,set,schema,name,tables,get,string,tmd,set,table,name,tables,get,string,if,tmd,get,schema,name,null,table,meta,put,user,name,null,user,name,to,upper,case,tmd,else,table,meta,put,tmd,get,schema,name,to,upper,case,tmd,catch,sqlexception,se,logger,warn,error,while,accessing,table,meta,data,results,se,get,message,finally,if,tables,null,try,tables,close,catch,sqlexception,e,logger,warn,error,while,closing,table,meta,data,reults,e,get,message,if,table,meta,size,1,logger,warn,unable,to,locate,table,meta,data,for,table,name,column,names,must,be,provided,else,table,meta,data,tmd,if,schema,name,null,tmd,table,meta,get,get,default,schema,if,tmd,null,tmd,table,meta,get,user,name,null,user,name,to,upper,case,if,tmd,null,tmd,table,meta,get,public,if,tmd,null,tmd,table,meta,get,dbo,if,tmd,null,throw,new,data,access,resource,failure,exception,unable,to,locate,table,meta,data,for,table,name,in,the,default,schema,else,tmd,table,meta,get,schema,name,to,upper,case,if,tmd,null,throw,new,data,access,resource,failure,exception,unable,to,locate,table,meta,data,for,table,name,in,the,schema,name,schema,process,table,columns,database,meta,data,tmd
GenericTableMetaDataProvider -> private void locateTableAndProcessMetaData(DatabaseMetaData databaseMetaData, String catalogName, 			String schemaName, String tableName);1385423968;Method supporting the metedata processing for a table.;private void locateTableAndProcessMetaData(DatabaseMetaData databaseMetaData, String catalogName,_			String schemaName, String tableName) {__		Map<String, TableMetaData> tableMeta = new HashMap<String, TableMetaData>()__		ResultSet tables = null__		try {_			tables = databaseMetaData.getTables(_				catalogNameToUse(catalogName),_				schemaNameToUse(schemaName),_				tableNameToUse(tableName),_				null)__			while (tables != null && tables.next()) {_				TableMetaData tmd = new TableMetaData()__				tmd.setCatalogName(tables.getString("TABLE_CAT"))__				tmd.setSchemaName(tables.getString("TABLE_SCHEM"))__				tmd.setTableName(tables.getString("TABLE_NAME"))__				if (tmd.getSchemaName() == null) {_					tableMeta.put(userName != null ? userName.toUpperCase() : "", tmd)__				}_				else {_					tableMeta.put(tmd.getSchemaName().toUpperCase(), tmd)__				}_			}_		}_		catch (SQLException se) {_			logger.warn("Error while accessing table meta data results" + se.getMessage())__		}_		finally {_			if (tables != null) {_				try {_					tables.close()__				} catch (SQLException e) {_					logger.warn("Error while closing table meta data results" + e.getMessage())__				}_			}_		}__		if (tableMeta.size() < 1) {_			logger.warn("Unable to locate table meta data for '" + tableName +"' -- column names must be provided")__		}_		else {_			TableMetaData tmd__			if (schemaName == null) {_				tmd = tableMeta.get(getDefaultSchema())__				if (tmd == null) {_					tmd = tableMeta.get(userName != null ? userName.toUpperCase() : "")__				}_				if (tmd == null) {_					tmd = tableMeta.get("PUBLIC")__				}_				if (tmd == null) {_					tmd = tableMeta.get("DBO")__				}_				if (tmd == null) {_					throw new DataAccessResourceFailureException("Unable to locate table meta data for '" +_							tableName + "' in the default schema")__				}_			}_			else {_				tmd = tableMeta.get(schemaName.toUpperCase())__				if (tmd == null) {_					throw new DataAccessResourceFailureException("Unable to locate table meta data for '" +_							tableName + "' in the '" + schemaName + "' schema")__				}_			}__			processTableColumns(databaseMetaData, tmd)__		}_	};method,supporting,the,metedata,processing,for,a,table;private,void,locate,table,and,process,meta,data,database,meta,data,database,meta,data,string,catalog,name,string,schema,name,string,table,name,map,string,table,meta,data,table,meta,new,hash,map,string,table,meta,data,result,set,tables,null,try,tables,database,meta,data,get,tables,catalog,name,to,use,catalog,name,schema,name,to,use,schema,name,table,name,to,use,table,name,null,while,tables,null,tables,next,table,meta,data,tmd,new,table,meta,data,tmd,set,catalog,name,tables,get,string,tmd,set,schema,name,tables,get,string,tmd,set,table,name,tables,get,string,if,tmd,get,schema,name,null,table,meta,put,user,name,null,user,name,to,upper,case,tmd,else,table,meta,put,tmd,get,schema,name,to,upper,case,tmd,catch,sqlexception,se,logger,warn,error,while,accessing,table,meta,data,results,se,get,message,finally,if,tables,null,try,tables,close,catch,sqlexception,e,logger,warn,error,while,closing,table,meta,data,results,e,get,message,if,table,meta,size,1,logger,warn,unable,to,locate,table,meta,data,for,table,name,column,names,must,be,provided,else,table,meta,data,tmd,if,schema,name,null,tmd,table,meta,get,get,default,schema,if,tmd,null,tmd,table,meta,get,user,name,null,user,name,to,upper,case,if,tmd,null,tmd,table,meta,get,public,if,tmd,null,tmd,table,meta,get,dbo,if,tmd,null,throw,new,data,access,resource,failure,exception,unable,to,locate,table,meta,data,for,table,name,in,the,default,schema,else,tmd,table,meta,get,schema,name,to,upper,case,if,tmd,null,throw,new,data,access,resource,failure,exception,unable,to,locate,table,meta,data,for,table,name,in,the,schema,name,schema,process,table,columns,database,meta,data,tmd
GenericTableMetaDataProvider -> private void locateTableAndProcessMetaData(DatabaseMetaData databaseMetaData, String catalogName, 			String schemaName, String tableName);1405696918;Method supporting the metedata processing for a table.;private void locateTableAndProcessMetaData(DatabaseMetaData databaseMetaData, String catalogName,_			String schemaName, String tableName) {__		Map<String, TableMetaData> tableMeta = new HashMap<String, TableMetaData>()__		ResultSet tables = null__		try {_			tables = databaseMetaData.getTables(_				catalogNameToUse(catalogName),_				schemaNameToUse(schemaName),_				tableNameToUse(tableName),_				null)__			while (tables != null && tables.next()) {_				TableMetaData tmd = new TableMetaData()__				tmd.setCatalogName(tables.getString("TABLE_CAT"))__				tmd.setSchemaName(tables.getString("TABLE_SCHEM"))__				tmd.setTableName(tables.getString("TABLE_NAME"))__				if (tmd.getSchemaName() == null) {_					tableMeta.put(this.userName != null ? this.userName.toUpperCase() : "", tmd)__				}_				else {_					tableMeta.put(tmd.getSchemaName().toUpperCase(), tmd)__				}_			}_		}_		catch (SQLException ex) {_			logger.warn("Error while accessing table meta data results" + ex.getMessage())__		}_		finally {_			if (tables != null) {_				try {_					tables.close()__				}_				catch (SQLException ex) {_					logger.warn("Error while closing table meta data results" + ex.getMessage())__				}_			}_		}__		if (tableMeta.size() < 1) {_			logger.warn("Unable to locate table meta data for '" + tableName +"' -- column names must be provided")__		}_		else {_			TableMetaData tmd__			if (schemaName == null) {_				tmd = tableMeta.get(getDefaultSchema())__				if (tmd == null) {_					tmd = tableMeta.get(userName != null ? userName.toUpperCase() : "")__				}_				if (tmd == null) {_					tmd = tableMeta.get("PUBLIC")__				}_				if (tmd == null) {_					tmd = tableMeta.get("DBO")__				}_				if (tmd == null) {_					throw new DataAccessResourceFailureException("Unable to locate table meta data for '" +_							tableName + "' in the default schema")__				}_			}_			else {_				tmd = tableMeta.get(schemaName.toUpperCase())__				if (tmd == null) {_					throw new DataAccessResourceFailureException("Unable to locate table meta data for '" +_							tableName + "' in the '" + schemaName + "' schema")__				}_			}__			processTableColumns(databaseMetaData, tmd)__		}_	};method,supporting,the,metedata,processing,for,a,table;private,void,locate,table,and,process,meta,data,database,meta,data,database,meta,data,string,catalog,name,string,schema,name,string,table,name,map,string,table,meta,data,table,meta,new,hash,map,string,table,meta,data,result,set,tables,null,try,tables,database,meta,data,get,tables,catalog,name,to,use,catalog,name,schema,name,to,use,schema,name,table,name,to,use,table,name,null,while,tables,null,tables,next,table,meta,data,tmd,new,table,meta,data,tmd,set,catalog,name,tables,get,string,tmd,set,schema,name,tables,get,string,tmd,set,table,name,tables,get,string,if,tmd,get,schema,name,null,table,meta,put,this,user,name,null,this,user,name,to,upper,case,tmd,else,table,meta,put,tmd,get,schema,name,to,upper,case,tmd,catch,sqlexception,ex,logger,warn,error,while,accessing,table,meta,data,results,ex,get,message,finally,if,tables,null,try,tables,close,catch,sqlexception,ex,logger,warn,error,while,closing,table,meta,data,results,ex,get,message,if,table,meta,size,1,logger,warn,unable,to,locate,table,meta,data,for,table,name,column,names,must,be,provided,else,table,meta,data,tmd,if,schema,name,null,tmd,table,meta,get,get,default,schema,if,tmd,null,tmd,table,meta,get,user,name,null,user,name,to,upper,case,if,tmd,null,tmd,table,meta,get,public,if,tmd,null,tmd,table,meta,get,dbo,if,tmd,null,throw,new,data,access,resource,failure,exception,unable,to,locate,table,meta,data,for,table,name,in,the,default,schema,else,tmd,table,meta,get,schema,name,to,upper,case,if,tmd,null,throw,new,data,access,resource,failure,exception,unable,to,locate,table,meta,data,for,table,name,in,the,schema,name,schema,process,table,columns,database,meta,data,tmd
GenericTableMetaDataProvider -> private void locateTableAndProcessMetaData(DatabaseMetaData databaseMetaData, String catalogName, 			String schemaName, String tableName);1429214043;Method supporting the metedata processing for a table.;private void locateTableAndProcessMetaData(DatabaseMetaData databaseMetaData, String catalogName,_			String schemaName, String tableName) {__		Map<String, TableMetaData> tableMeta = new HashMap<String, TableMetaData>()__		ResultSet tables = null__		try {_			tables = databaseMetaData.getTables(_				catalogNameToUse(catalogName),_				schemaNameToUse(schemaName),_				tableNameToUse(tableName),_				null)__			while (tables != null && tables.next()) {_				TableMetaData tmd = new TableMetaData()__				tmd.setCatalogName(tables.getString("TABLE_CAT"))__				tmd.setSchemaName(tables.getString("TABLE_SCHEM"))__				tmd.setTableName(tables.getString("TABLE_NAME"))__				if (tmd.getSchemaName() == null) {_					tableMeta.put(this.userName != null ? this.userName.toUpperCase() : "", tmd)__				}_				else {_					tableMeta.put(tmd.getSchemaName().toUpperCase(), tmd)__				}_			}_		}_		catch (SQLException ex) {_			logger.warn("Error while accessing table meta data results" + ex.getMessage())__		}_		finally {_			if (tables != null) {_				try {_					tables.close()__				}_				catch (SQLException ex) {_					logger.warn("Error while closing table meta data results" + ex.getMessage())__				}_			}_		}__		if (tableMeta.size() < 1) {_			logger.warn("Unable to locate table meta data for '" + tableName +"' -- column names must be provided")__		}_		else {_			TableMetaData tmd__			if (schemaName == null) {_				tmd = tableMeta.get(getDefaultSchema())__				if (tmd == null) {_					tmd = tableMeta.get(userName != null ? userName.toUpperCase() : "")__				}_				if (tmd == null) {_					tmd = tableMeta.get("PUBLIC")__				}_				if (tmd == null) {_					tmd = tableMeta.get("DBO")__				}_				if (tmd == null) {_					throw new DataAccessResourceFailureException("Unable to locate table meta data for '" +_							tableName + "' in the default schema")__				}_			}_			else {_				tmd = tableMeta.get(schemaName.toUpperCase())__				if (tmd == null) {_					throw new DataAccessResourceFailureException("Unable to locate table meta data for '" +_							tableName + "' in the '" + schemaName + "' schema")__				}_			}__			processTableColumns(databaseMetaData, tmd)__		}_	};method,supporting,the,metedata,processing,for,a,table;private,void,locate,table,and,process,meta,data,database,meta,data,database,meta,data,string,catalog,name,string,schema,name,string,table,name,map,string,table,meta,data,table,meta,new,hash,map,string,table,meta,data,result,set,tables,null,try,tables,database,meta,data,get,tables,catalog,name,to,use,catalog,name,schema,name,to,use,schema,name,table,name,to,use,table,name,null,while,tables,null,tables,next,table,meta,data,tmd,new,table,meta,data,tmd,set,catalog,name,tables,get,string,tmd,set,schema,name,tables,get,string,tmd,set,table,name,tables,get,string,if,tmd,get,schema,name,null,table,meta,put,this,user,name,null,this,user,name,to,upper,case,tmd,else,table,meta,put,tmd,get,schema,name,to,upper,case,tmd,catch,sqlexception,ex,logger,warn,error,while,accessing,table,meta,data,results,ex,get,message,finally,if,tables,null,try,tables,close,catch,sqlexception,ex,logger,warn,error,while,closing,table,meta,data,results,ex,get,message,if,table,meta,size,1,logger,warn,unable,to,locate,table,meta,data,for,table,name,column,names,must,be,provided,else,table,meta,data,tmd,if,schema,name,null,tmd,table,meta,get,get,default,schema,if,tmd,null,tmd,table,meta,get,user,name,null,user,name,to,upper,case,if,tmd,null,tmd,table,meta,get,public,if,tmd,null,tmd,table,meta,get,dbo,if,tmd,null,throw,new,data,access,resource,failure,exception,unable,to,locate,table,meta,data,for,table,name,in,the,default,schema,else,tmd,table,meta,get,schema,name,to,upper,case,if,tmd,null,throw,new,data,access,resource,failure,exception,unable,to,locate,table,meta,data,for,table,name,in,the,schema,name,schema,process,table,columns,database,meta,data,tmd
GenericTableMetaDataProvider -> private void locateTableAndProcessMetaData(DatabaseMetaData databaseMetaData, String catalogName, 			String schemaName, String tableName);1467730834;Method supporting the metedata processing for a table.;private void locateTableAndProcessMetaData(DatabaseMetaData databaseMetaData, String catalogName,_			String schemaName, String tableName) {__		Map<String, TableMetaData> tableMeta = new HashMap<>()__		ResultSet tables = null__		try {_			tables = databaseMetaData.getTables(_				catalogNameToUse(catalogName),_				schemaNameToUse(schemaName),_				tableNameToUse(tableName),_				null)__			while (tables != null && tables.next()) {_				TableMetaData tmd = new TableMetaData()__				tmd.setCatalogName(tables.getString("TABLE_CAT"))__				tmd.setSchemaName(tables.getString("TABLE_SCHEM"))__				tmd.setTableName(tables.getString("TABLE_NAME"))__				if (tmd.getSchemaName() == null) {_					tableMeta.put(this.userName != null ? this.userName.toUpperCase() : "", tmd)__				}_				else {_					tableMeta.put(tmd.getSchemaName().toUpperCase(), tmd)__				}_			}_		}_		catch (SQLException ex) {_			logger.warn("Error while accessing table meta data results" + ex.getMessage())__		}_		finally {_			if (tables != null) {_				try {_					tables.close()__				}_				catch (SQLException ex) {_					logger.warn("Error while closing table meta data results" + ex.getMessage())__				}_			}_		}__		if (tableMeta.size() < 1) {_			logger.warn("Unable to locate table meta data for '" + tableName +"' -- column names must be provided")__		}_		else {_			TableMetaData tmd__			if (schemaName == null) {_				tmd = tableMeta.get(getDefaultSchema())__				if (tmd == null) {_					tmd = tableMeta.get(userName != null ? userName.toUpperCase() : "")__				}_				if (tmd == null) {_					tmd = tableMeta.get("PUBLIC")__				}_				if (tmd == null) {_					tmd = tableMeta.get("DBO")__				}_				if (tmd == null) {_					throw new DataAccessResourceFailureException("Unable to locate table meta data for '" +_							tableName + "' in the default schema")__				}_			}_			else {_				tmd = tableMeta.get(schemaName.toUpperCase())__				if (tmd == null) {_					throw new DataAccessResourceFailureException("Unable to locate table meta data for '" +_							tableName + "' in the '" + schemaName + "' schema")__				}_			}__			processTableColumns(databaseMetaData, tmd)__		}_	};method,supporting,the,metedata,processing,for,a,table;private,void,locate,table,and,process,meta,data,database,meta,data,database,meta,data,string,catalog,name,string,schema,name,string,table,name,map,string,table,meta,data,table,meta,new,hash,map,result,set,tables,null,try,tables,database,meta,data,get,tables,catalog,name,to,use,catalog,name,schema,name,to,use,schema,name,table,name,to,use,table,name,null,while,tables,null,tables,next,table,meta,data,tmd,new,table,meta,data,tmd,set,catalog,name,tables,get,string,tmd,set,schema,name,tables,get,string,tmd,set,table,name,tables,get,string,if,tmd,get,schema,name,null,table,meta,put,this,user,name,null,this,user,name,to,upper,case,tmd,else,table,meta,put,tmd,get,schema,name,to,upper,case,tmd,catch,sqlexception,ex,logger,warn,error,while,accessing,table,meta,data,results,ex,get,message,finally,if,tables,null,try,tables,close,catch,sqlexception,ex,logger,warn,error,while,closing,table,meta,data,results,ex,get,message,if,table,meta,size,1,logger,warn,unable,to,locate,table,meta,data,for,table,name,column,names,must,be,provided,else,table,meta,data,tmd,if,schema,name,null,tmd,table,meta,get,get,default,schema,if,tmd,null,tmd,table,meta,get,user,name,null,user,name,to,upper,case,if,tmd,null,tmd,table,meta,get,public,if,tmd,null,tmd,table,meta,get,dbo,if,tmd,null,throw,new,data,access,resource,failure,exception,unable,to,locate,table,meta,data,for,table,name,in,the,default,schema,else,tmd,table,meta,get,schema,name,to,upper,case,if,tmd,null,throw,new,data,access,resource,failure,exception,unable,to,locate,table,meta,data,for,table,name,in,the,schema,name,schema,process,table,columns,database,meta,data,tmd
GenericTableMetaDataProvider -> private void locateTableAndProcessMetaData(DatabaseMetaData databaseMetaData, String catalogName, 			String schemaName, String tableName);1477045587;Method supporting the metedata processing for a table.;private void locateTableAndProcessMetaData(DatabaseMetaData databaseMetaData, String catalogName,_			String schemaName, String tableName) {__		Map<String, TableMetaData> tableMeta = new HashMap<>()__		ResultSet tables = null__		try {_			tables = databaseMetaData.getTables(_				catalogNameToUse(catalogName),_				schemaNameToUse(schemaName),_				tableNameToUse(tableName),_				null)__			while (tables != null && tables.next()) {_				TableMetaData tmd = new TableMetaData()__				tmd.setCatalogName(tables.getString("TABLE_CAT"))__				tmd.setSchemaName(tables.getString("TABLE_SCHEM"))__				tmd.setTableName(tables.getString("TABLE_NAME"))__				if (tmd.getSchemaName() == null) {_					tableMeta.put(this.userName != null ? this.userName.toUpperCase() : "", tmd)__				}_				else {_					tableMeta.put(tmd.getSchemaName().toUpperCase(), tmd)__				}_			}_		}_		catch (SQLException ex) {_			logger.warn("Error while accessing table meta data results" + ex.getMessage())__		}_		finally {_			if (tables != null) {_				try {_					tables.close()__				}_				catch (SQLException ex) {_					logger.warn("Error while closing table meta data results" + ex.getMessage())__				}_			}_		}__		if (tableMeta.size() < 1) {_			logger.warn("Unable to locate table meta data for '" + tableName +"' -- column names must be provided")__		}_		else {_			TableMetaData tmd__			if (schemaName == null) {_				tmd = tableMeta.get(getDefaultSchema())__				if (tmd == null) {_					tmd = tableMeta.get(userName != null ? userName.toUpperCase() : "")__				}_				if (tmd == null) {_					tmd = tableMeta.get("PUBLIC")__				}_				if (tmd == null) {_					tmd = tableMeta.get("DBO")__				}_				if (tmd == null) {_					throw new DataAccessResourceFailureException("Unable to locate table meta data for '" +_							tableName + "' in the default schema")__				}_			}_			else {_				tmd = tableMeta.get(schemaName.toUpperCase())__				if (tmd == null) {_					throw new DataAccessResourceFailureException("Unable to locate table meta data for '" +_							tableName + "' in the '" + schemaName + "' schema")__				}_			}__			processTableColumns(databaseMetaData, tmd)__		}_	};method,supporting,the,metedata,processing,for,a,table;private,void,locate,table,and,process,meta,data,database,meta,data,database,meta,data,string,catalog,name,string,schema,name,string,table,name,map,string,table,meta,data,table,meta,new,hash,map,result,set,tables,null,try,tables,database,meta,data,get,tables,catalog,name,to,use,catalog,name,schema,name,to,use,schema,name,table,name,to,use,table,name,null,while,tables,null,tables,next,table,meta,data,tmd,new,table,meta,data,tmd,set,catalog,name,tables,get,string,tmd,set,schema,name,tables,get,string,tmd,set,table,name,tables,get,string,if,tmd,get,schema,name,null,table,meta,put,this,user,name,null,this,user,name,to,upper,case,tmd,else,table,meta,put,tmd,get,schema,name,to,upper,case,tmd,catch,sqlexception,ex,logger,warn,error,while,accessing,table,meta,data,results,ex,get,message,finally,if,tables,null,try,tables,close,catch,sqlexception,ex,logger,warn,error,while,closing,table,meta,data,results,ex,get,message,if,table,meta,size,1,logger,warn,unable,to,locate,table,meta,data,for,table,name,column,names,must,be,provided,else,table,meta,data,tmd,if,schema,name,null,tmd,table,meta,get,get,default,schema,if,tmd,null,tmd,table,meta,get,user,name,null,user,name,to,upper,case,if,tmd,null,tmd,table,meta,get,public,if,tmd,null,tmd,table,meta,get,dbo,if,tmd,null,throw,new,data,access,resource,failure,exception,unable,to,locate,table,meta,data,for,table,name,in,the,default,schema,else,tmd,table,meta,get,schema,name,to,upper,case,if,tmd,null,throw,new,data,access,resource,failure,exception,unable,to,locate,table,meta,data,for,table,name,in,the,schema,name,schema,process,table,columns,database,meta,data,tmd
GenericTableMetaDataProvider -> @Nullable 	protected String getDefaultSchema();1498780456;Provide access to default schema for subclasses.;@Nullable_	protected String getDefaultSchema() {_		return this.userName__	};provide,access,to,default,schema,for,subclasses;nullable,protected,string,get,default,schema,return,this,user,name
GenericTableMetaDataProvider -> @Nullable 	protected String getDefaultSchema();1502974979;Provide access to default schema for subclasses.;@Nullable_	protected String getDefaultSchema() {_		return this.userName__	};provide,access,to,default,schema,for,subclasses;nullable,protected,string,get,default,schema,return,this,user,name
GenericTableMetaDataProvider -> @Nullable 	protected String getDefaultSchema();1520339775;Provide access to default schema for subclasses.;@Nullable_	protected String getDefaultSchema() {_		return this.userName__	};provide,access,to,default,schema,for,subclasses;nullable,protected,string,get,default,schema,return,this,user,name
GenericTableMetaDataProvider -> @Nullable 	protected String getDefaultSchema();1521457504;Provide access to default schema for subclasses.;@Nullable_	protected String getDefaultSchema() {_		return this.userName__	};provide,access,to,default,schema,for,subclasses;nullable,protected,string,get,default,schema,return,this,user,name
GenericTableMetaDataProvider -> @Nullable 	protected String getDefaultSchema();1530174524;Provide access to default schema for subclasses.;@Nullable_	protected String getDefaultSchema() {_		return this.userName__	};provide,access,to,default,schema,for,subclasses;nullable,protected,string,get,default,schema,return,this,user,name
GenericTableMetaDataProvider -> @Nullable 	protected String getDefaultSchema();1532091916;Provide access to default schema for subclasses.;@Nullable_	protected String getDefaultSchema() {_		return this.userName__	};provide,access,to,default,schema,for,subclasses;nullable,protected,string,get,default,schema,return,this,user,name
GenericTableMetaDataProvider -> private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd);1328020251;Method supporting the metedata processing for a table's columns;private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd) {_		ResultSet tableColumns = null__		String metaDataCatalogName = metaDataCatalogNameToUse(tmd.getCatalogName())__		String metaDataSchemaName = metaDataSchemaNameToUse(tmd.getSchemaName())__		String metaDataTableName = tableNameToUse(tmd.getTableName())__		if (logger.isDebugEnabled()) {_			logger.debug("Retrieving metadata for " + metaDataCatalogName + "/" +_					metaDataSchemaName + "/" + metaDataTableName)__		}_		try {_			tableColumns = databaseMetaData.getColumns(_					metaDataCatalogName,_					metaDataSchemaName,_					metaDataTableName,_					null)__			while (tableColumns.next()) {_				String columnName = tableColumns.getString("COLUMN_NAME")__				int dataType = tableColumns.getInt("DATA_TYPE")__				if (dataType == Types.DECIMAL) {_					String typeName = tableColumns.getString("TYPE_NAME")__					int decimalDigits = tableColumns.getInt("DECIMAL_DIGITS")__					_					_					_					if ("NUMBER".equals(typeName) && decimalDigits == 0) {_						dataType = Types.NUMERIC__						if (logger.isDebugEnabled()) {_							logger.debug("Overriding metadata: "_								+ columnName +_								" now using NUMERIC instead of DECIMAL"_							)__						}_					}_				}_				boolean nullable = tableColumns.getBoolean("NULLABLE")__				TableParameterMetaData meta = new TableParameterMetaData(_						columnName,_						dataType,_						nullable_				)__				this.insertParameterMetaData.add(meta)__				if (logger.isDebugEnabled()) {_					logger.debug("Retrieved metadata: "_						+ meta.getParameterName() +_						" " + meta.getSqlType() +_						" " + meta.isNullable()_					)__				}_			}_		}_		catch (SQLException se) {_			logger.warn("Error while retrieving metadata for table columns: " + se.getMessage())__		}_		finally {_			try {_				if (tableColumns != null)_					tableColumns.close()__			}_			catch (SQLException se) {_				logger.warn("Problem closing ResultSet for table column metadata " + se.getMessage())__			}_		}__	};method,supporting,the,metedata,processing,for,a,table,s,columns;private,void,process,table,columns,database,meta,data,database,meta,data,table,meta,data,tmd,result,set,table,columns,null,string,meta,data,catalog,name,meta,data,catalog,name,to,use,tmd,get,catalog,name,string,meta,data,schema,name,meta,data,schema,name,to,use,tmd,get,schema,name,string,meta,data,table,name,table,name,to,use,tmd,get,table,name,if,logger,is,debug,enabled,logger,debug,retrieving,metadata,for,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,try,table,columns,database,meta,data,get,columns,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,null,while,table,columns,next,string,column,name,table,columns,get,string,int,data,type,table,columns,get,int,if,data,type,types,decimal,string,type,name,table,columns,get,string,int,decimal,digits,table,columns,get,int,if,number,equals,type,name,decimal,digits,0,data,type,types,numeric,if,logger,is,debug,enabled,logger,debug,overriding,metadata,column,name,now,using,numeric,instead,of,decimal,boolean,nullable,table,columns,get,boolean,nullable,table,parameter,meta,data,meta,new,table,parameter,meta,data,column,name,data,type,nullable,this,insert,parameter,meta,data,add,meta,if,logger,is,debug,enabled,logger,debug,retrieved,metadata,meta,get,parameter,name,meta,get,sql,type,meta,is,nullable,catch,sqlexception,se,logger,warn,error,while,retrieving,metadata,for,table,columns,se,get,message,finally,try,if,table,columns,null,table,columns,close,catch,sqlexception,se,logger,warn,problem,closing,result,set,for,table,column,metadata,se,get,message
GenericTableMetaDataProvider -> private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd);1329142650;Method supporting the metedata processing for a table's columns;private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd) {_		ResultSet tableColumns = null__		String metaDataCatalogName = metaDataCatalogNameToUse(tmd.getCatalogName())__		String metaDataSchemaName = metaDataSchemaNameToUse(tmd.getSchemaName())__		String metaDataTableName = tableNameToUse(tmd.getTableName())__		if (logger.isDebugEnabled()) {_			logger.debug("Retrieving metadata for " + metaDataCatalogName + "/" +_					metaDataSchemaName + "/" + metaDataTableName)__		}_		try {_			tableColumns = databaseMetaData.getColumns(_					metaDataCatalogName,_					metaDataSchemaName,_					metaDataTableName,_					null)__			while (tableColumns.next()) {_				String columnName = tableColumns.getString("COLUMN_NAME")__				int dataType = tableColumns.getInt("DATA_TYPE")__				if (dataType == Types.DECIMAL) {_					String typeName = tableColumns.getString("TYPE_NAME")__					int decimalDigits = tableColumns.getInt("DECIMAL_DIGITS")__					_					_					_					if ("NUMBER".equals(typeName) && decimalDigits == 0) {_						dataType = Types.NUMERIC__						if (logger.isDebugEnabled()) {_							logger.debug("Overriding metadata: "_								+ columnName +_								" now using NUMERIC instead of DECIMAL"_							)__						}_					}_				}_				boolean nullable = tableColumns.getBoolean("NULLABLE")__				TableParameterMetaData meta = new TableParameterMetaData(_						columnName,_						dataType,_						nullable_				)__				this.insertParameterMetaData.add(meta)__				if (logger.isDebugEnabled()) {_					logger.debug("Retrieved metadata: "_						+ meta.getParameterName() +_						" " + meta.getSqlType() +_						" " + meta.isNullable()_					)__				}_			}_		}_		catch (SQLException se) {_			logger.warn("Error while retrieving metadata for table columns: " + se.getMessage())__		}_		finally {_			try {_				if (tableColumns != null)_					tableColumns.close()__			}_			catch (SQLException se) {_				logger.warn("Problem closing ResultSet for table column metadata " + se.getMessage())__			}_		}__	};method,supporting,the,metedata,processing,for,a,table,s,columns;private,void,process,table,columns,database,meta,data,database,meta,data,table,meta,data,tmd,result,set,table,columns,null,string,meta,data,catalog,name,meta,data,catalog,name,to,use,tmd,get,catalog,name,string,meta,data,schema,name,meta,data,schema,name,to,use,tmd,get,schema,name,string,meta,data,table,name,table,name,to,use,tmd,get,table,name,if,logger,is,debug,enabled,logger,debug,retrieving,metadata,for,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,try,table,columns,database,meta,data,get,columns,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,null,while,table,columns,next,string,column,name,table,columns,get,string,int,data,type,table,columns,get,int,if,data,type,types,decimal,string,type,name,table,columns,get,string,int,decimal,digits,table,columns,get,int,if,number,equals,type,name,decimal,digits,0,data,type,types,numeric,if,logger,is,debug,enabled,logger,debug,overriding,metadata,column,name,now,using,numeric,instead,of,decimal,boolean,nullable,table,columns,get,boolean,nullable,table,parameter,meta,data,meta,new,table,parameter,meta,data,column,name,data,type,nullable,this,insert,parameter,meta,data,add,meta,if,logger,is,debug,enabled,logger,debug,retrieved,metadata,meta,get,parameter,name,meta,get,sql,type,meta,is,nullable,catch,sqlexception,se,logger,warn,error,while,retrieving,metadata,for,table,columns,se,get,message,finally,try,if,table,columns,null,table,columns,close,catch,sqlexception,se,logger,warn,problem,closing,result,set,for,table,column,metadata,se,get,message
GenericTableMetaDataProvider -> private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd);1356735495;Method supporting the metedata processing for a table's columns;private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd) {_		ResultSet tableColumns = null__		String metaDataCatalogName = metaDataCatalogNameToUse(tmd.getCatalogName())__		String metaDataSchemaName = metaDataSchemaNameToUse(tmd.getSchemaName())__		String metaDataTableName = tableNameToUse(tmd.getTableName())__		if (logger.isDebugEnabled()) {_			logger.debug("Retrieving metadata for " + metaDataCatalogName + "/" +_					metaDataSchemaName + "/" + metaDataTableName)__		}_		try {_			tableColumns = databaseMetaData.getColumns(_					metaDataCatalogName,_					metaDataSchemaName,_					metaDataTableName,_					null)__			while (tableColumns.next()) {_				String columnName = tableColumns.getString("COLUMN_NAME")__				int dataType = tableColumns.getInt("DATA_TYPE")__				if (dataType == Types.DECIMAL) {_					String typeName = tableColumns.getString("TYPE_NAME")__					int decimalDigits = tableColumns.getInt("DECIMAL_DIGITS")__					_					_					_					if ("NUMBER".equals(typeName) && decimalDigits == 0) {_						dataType = Types.NUMERIC__						if (logger.isDebugEnabled()) {_							logger.debug("Overriding metadata: "_								+ columnName +_								" now using NUMERIC instead of DECIMAL"_							)__						}_					}_				}_				boolean nullable = tableColumns.getBoolean("NULLABLE")__				TableParameterMetaData meta = new TableParameterMetaData(_						columnName,_						dataType,_						nullable_				)__				this.insertParameterMetaData.add(meta)__				if (logger.isDebugEnabled()) {_					logger.debug("Retrieved metadata: "_						+ meta.getParameterName() +_						" " + meta.getSqlType() +_						" " + meta.isNullable()_					)__				}_			}_		}_		catch (SQLException se) {_			logger.warn("Error while retrieving metadata for table columns: " + se.getMessage())__		}_		finally {_			try {_				if (tableColumns != null)_					tableColumns.close()__			}_			catch (SQLException se) {_				logger.warn("Problem closing ResultSet for table column metadata " + se.getMessage())__			}_		}__	};method,supporting,the,metedata,processing,for,a,table,s,columns;private,void,process,table,columns,database,meta,data,database,meta,data,table,meta,data,tmd,result,set,table,columns,null,string,meta,data,catalog,name,meta,data,catalog,name,to,use,tmd,get,catalog,name,string,meta,data,schema,name,meta,data,schema,name,to,use,tmd,get,schema,name,string,meta,data,table,name,table,name,to,use,tmd,get,table,name,if,logger,is,debug,enabled,logger,debug,retrieving,metadata,for,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,try,table,columns,database,meta,data,get,columns,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,null,while,table,columns,next,string,column,name,table,columns,get,string,int,data,type,table,columns,get,int,if,data,type,types,decimal,string,type,name,table,columns,get,string,int,decimal,digits,table,columns,get,int,if,number,equals,type,name,decimal,digits,0,data,type,types,numeric,if,logger,is,debug,enabled,logger,debug,overriding,metadata,column,name,now,using,numeric,instead,of,decimal,boolean,nullable,table,columns,get,boolean,nullable,table,parameter,meta,data,meta,new,table,parameter,meta,data,column,name,data,type,nullable,this,insert,parameter,meta,data,add,meta,if,logger,is,debug,enabled,logger,debug,retrieved,metadata,meta,get,parameter,name,meta,get,sql,type,meta,is,nullable,catch,sqlexception,se,logger,warn,error,while,retrieving,metadata,for,table,columns,se,get,message,finally,try,if,table,columns,null,table,columns,close,catch,sqlexception,se,logger,warn,problem,closing,result,set,for,table,column,metadata,se,get,message
GenericTableMetaDataProvider -> private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd);1357119239;Method supporting the metedata processing for a table's columns;private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd) {_		ResultSet tableColumns = null__		String metaDataCatalogName = metaDataCatalogNameToUse(tmd.getCatalogName())__		String metaDataSchemaName = metaDataSchemaNameToUse(tmd.getSchemaName())__		String metaDataTableName = tableNameToUse(tmd.getTableName())__		if (logger.isDebugEnabled()) {_			logger.debug("Retrieving metadata for " + metaDataCatalogName + "/" +_					metaDataSchemaName + "/" + metaDataTableName)__		}_		try {_			tableColumns = databaseMetaData.getColumns(_					metaDataCatalogName,_					metaDataSchemaName,_					metaDataTableName,_					null)__			while (tableColumns.next()) {_				String columnName = tableColumns.getString("COLUMN_NAME")__				int dataType = tableColumns.getInt("DATA_TYPE")__				if (dataType == Types.DECIMAL) {_					String typeName = tableColumns.getString("TYPE_NAME")__					int decimalDigits = tableColumns.getInt("DECIMAL_DIGITS")__					_					_					_					if ("NUMBER".equals(typeName) && decimalDigits == 0) {_						dataType = Types.NUMERIC__						if (logger.isDebugEnabled()) {_							logger.debug("Overriding metadata: "_								+ columnName +_								" now using NUMERIC instead of DECIMAL"_							)__						}_					}_				}_				boolean nullable = tableColumns.getBoolean("NULLABLE")__				TableParameterMetaData meta = new TableParameterMetaData(_						columnName,_						dataType,_						nullable_				)__				this.insertParameterMetaData.add(meta)__				if (logger.isDebugEnabled()) {_					logger.debug("Retrieved metadata: "_						+ meta.getParameterName() +_						" " + meta.getSqlType() +_						" " + meta.isNullable()_					)__				}_			}_		}_		catch (SQLException se) {_			logger.warn("Error while retrieving metadata for table columns: " + se.getMessage())__		}_		finally {_			try {_				if (tableColumns != null)_					tableColumns.close()__			}_			catch (SQLException se) {_				logger.warn("Problem closing ResultSet for table column metadata " + se.getMessage())__			}_		}__	};method,supporting,the,metedata,processing,for,a,table,s,columns;private,void,process,table,columns,database,meta,data,database,meta,data,table,meta,data,tmd,result,set,table,columns,null,string,meta,data,catalog,name,meta,data,catalog,name,to,use,tmd,get,catalog,name,string,meta,data,schema,name,meta,data,schema,name,to,use,tmd,get,schema,name,string,meta,data,table,name,table,name,to,use,tmd,get,table,name,if,logger,is,debug,enabled,logger,debug,retrieving,metadata,for,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,try,table,columns,database,meta,data,get,columns,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,null,while,table,columns,next,string,column,name,table,columns,get,string,int,data,type,table,columns,get,int,if,data,type,types,decimal,string,type,name,table,columns,get,string,int,decimal,digits,table,columns,get,int,if,number,equals,type,name,decimal,digits,0,data,type,types,numeric,if,logger,is,debug,enabled,logger,debug,overriding,metadata,column,name,now,using,numeric,instead,of,decimal,boolean,nullable,table,columns,get,boolean,nullable,table,parameter,meta,data,meta,new,table,parameter,meta,data,column,name,data,type,nullable,this,insert,parameter,meta,data,add,meta,if,logger,is,debug,enabled,logger,debug,retrieved,metadata,meta,get,parameter,name,meta,get,sql,type,meta,is,nullable,catch,sqlexception,se,logger,warn,error,while,retrieving,metadata,for,table,columns,se,get,message,finally,try,if,table,columns,null,table,columns,close,catch,sqlexception,se,logger,warn,problem,closing,result,set,for,table,column,metadata,se,get,message
GenericTableMetaDataProvider -> private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd);1362408075;Method supporting the metedata processing for a table's columns;private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd) {_		ResultSet tableColumns = null__		String metaDataCatalogName = metaDataCatalogNameToUse(tmd.getCatalogName())__		String metaDataSchemaName = metaDataSchemaNameToUse(tmd.getSchemaName())__		String metaDataTableName = tableNameToUse(tmd.getTableName())__		if (logger.isDebugEnabled()) {_			logger.debug("Retrieving metadata for " + metaDataCatalogName + "/" +_					metaDataSchemaName + "/" + metaDataTableName)__		}_		try {_			tableColumns = databaseMetaData.getColumns(_					metaDataCatalogName,_					metaDataSchemaName,_					metaDataTableName,_					null)__			while (tableColumns.next()) {_				String columnName = tableColumns.getString("COLUMN_NAME")__				int dataType = tableColumns.getInt("DATA_TYPE")__				if (dataType == Types.DECIMAL) {_					String typeName = tableColumns.getString("TYPE_NAME")__					int decimalDigits = tableColumns.getInt("DECIMAL_DIGITS")__					_					_					_					if ("NUMBER".equals(typeName) && decimalDigits == 0) {_						dataType = Types.NUMERIC__						if (logger.isDebugEnabled()) {_							logger.debug("Overriding metadata: "_								+ columnName +_								" now using NUMERIC instead of DECIMAL"_							)__						}_					}_				}_				boolean nullable = tableColumns.getBoolean("NULLABLE")__				TableParameterMetaData meta = new TableParameterMetaData(_						columnName,_						dataType,_						nullable_				)__				this.insertParameterMetaData.add(meta)__				if (logger.isDebugEnabled()) {_					logger.debug("Retrieved metadata: "_						+ meta.getParameterName() +_						" " + meta.getSqlType() +_						" " + meta.isNullable()_					)__				}_			}_		}_		catch (SQLException se) {_			logger.warn("Error while retrieving metadata for table columns: " + se.getMessage())__		}_		finally {_			try {_				if (tableColumns != null)_					tableColumns.close()__			}_			catch (SQLException se) {_				logger.warn("Problem closing ResultSet for table column metadata " + se.getMessage())__			}_		}__	};method,supporting,the,metedata,processing,for,a,table,s,columns;private,void,process,table,columns,database,meta,data,database,meta,data,table,meta,data,tmd,result,set,table,columns,null,string,meta,data,catalog,name,meta,data,catalog,name,to,use,tmd,get,catalog,name,string,meta,data,schema,name,meta,data,schema,name,to,use,tmd,get,schema,name,string,meta,data,table,name,table,name,to,use,tmd,get,table,name,if,logger,is,debug,enabled,logger,debug,retrieving,metadata,for,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,try,table,columns,database,meta,data,get,columns,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,null,while,table,columns,next,string,column,name,table,columns,get,string,int,data,type,table,columns,get,int,if,data,type,types,decimal,string,type,name,table,columns,get,string,int,decimal,digits,table,columns,get,int,if,number,equals,type,name,decimal,digits,0,data,type,types,numeric,if,logger,is,debug,enabled,logger,debug,overriding,metadata,column,name,now,using,numeric,instead,of,decimal,boolean,nullable,table,columns,get,boolean,nullable,table,parameter,meta,data,meta,new,table,parameter,meta,data,column,name,data,type,nullable,this,insert,parameter,meta,data,add,meta,if,logger,is,debug,enabled,logger,debug,retrieved,metadata,meta,get,parameter,name,meta,get,sql,type,meta,is,nullable,catch,sqlexception,se,logger,warn,error,while,retrieving,metadata,for,table,columns,se,get,message,finally,try,if,table,columns,null,table,columns,close,catch,sqlexception,se,logger,warn,problem,closing,result,set,for,table,column,metadata,se,get,message
GenericTableMetaDataProvider -> private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd);1368482696;Method supporting the metedata processing for a table's columns;private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd) {_		ResultSet tableColumns = null__		String metaDataCatalogName = metaDataCatalogNameToUse(tmd.getCatalogName())__		String metaDataSchemaName = metaDataSchemaNameToUse(tmd.getSchemaName())__		String metaDataTableName = tableNameToUse(tmd.getTableName())__		if (logger.isDebugEnabled()) {_			logger.debug("Retrieving metadata for " + metaDataCatalogName + "/" +_					metaDataSchemaName + "/" + metaDataTableName)__		}_		try {_			tableColumns = databaseMetaData.getColumns(_					metaDataCatalogName,_					metaDataSchemaName,_					metaDataTableName,_					null)__			while (tableColumns.next()) {_				String columnName = tableColumns.getString("COLUMN_NAME")__				int dataType = tableColumns.getInt("DATA_TYPE")__				if (dataType == Types.DECIMAL) {_					String typeName = tableColumns.getString("TYPE_NAME")__					int decimalDigits = tableColumns.getInt("DECIMAL_DIGITS")__					_					_					_					if ("NUMBER".equals(typeName) && decimalDigits == 0) {_						dataType = Types.NUMERIC__						if (logger.isDebugEnabled()) {_							logger.debug("Overriding metadata: "_								+ columnName +_								" now using NUMERIC instead of DECIMAL"_							)__						}_					}_				}_				boolean nullable = tableColumns.getBoolean("NULLABLE")__				TableParameterMetaData meta = new TableParameterMetaData(_						columnName,_						dataType,_						nullable_				)__				this.insertParameterMetaData.add(meta)__				if (logger.isDebugEnabled()) {_					logger.debug("Retrieved metadata: "_						+ meta.getParameterName() +_						" " + meta.getSqlType() +_						" " + meta.isNullable()_					)__				}_			}_		}_		catch (SQLException se) {_			logger.warn("Error while retrieving metadata for table columns: " + se.getMessage())__		}_		finally {_			try {_				if (tableColumns != null)_					tableColumns.close()__			}_			catch (SQLException se) {_				logger.warn("Problem closing ResultSet for table column metadata " + se.getMessage())__			}_		}__	};method,supporting,the,metedata,processing,for,a,table,s,columns;private,void,process,table,columns,database,meta,data,database,meta,data,table,meta,data,tmd,result,set,table,columns,null,string,meta,data,catalog,name,meta,data,catalog,name,to,use,tmd,get,catalog,name,string,meta,data,schema,name,meta,data,schema,name,to,use,tmd,get,schema,name,string,meta,data,table,name,table,name,to,use,tmd,get,table,name,if,logger,is,debug,enabled,logger,debug,retrieving,metadata,for,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,try,table,columns,database,meta,data,get,columns,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,null,while,table,columns,next,string,column,name,table,columns,get,string,int,data,type,table,columns,get,int,if,data,type,types,decimal,string,type,name,table,columns,get,string,int,decimal,digits,table,columns,get,int,if,number,equals,type,name,decimal,digits,0,data,type,types,numeric,if,logger,is,debug,enabled,logger,debug,overriding,metadata,column,name,now,using,numeric,instead,of,decimal,boolean,nullable,table,columns,get,boolean,nullable,table,parameter,meta,data,meta,new,table,parameter,meta,data,column,name,data,type,nullable,this,insert,parameter,meta,data,add,meta,if,logger,is,debug,enabled,logger,debug,retrieved,metadata,meta,get,parameter,name,meta,get,sql,type,meta,is,nullable,catch,sqlexception,se,logger,warn,error,while,retrieving,metadata,for,table,columns,se,get,message,finally,try,if,table,columns,null,table,columns,close,catch,sqlexception,se,logger,warn,problem,closing,result,set,for,table,column,metadata,se,get,message
GenericTableMetaDataProvider -> private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd);1385423968;Method supporting the metadata processing for a table's columns;private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd) {_		ResultSet tableColumns = null__		String metaDataCatalogName = metaDataCatalogNameToUse(tmd.getCatalogName())__		String metaDataSchemaName = metaDataSchemaNameToUse(tmd.getSchemaName())__		String metaDataTableName = tableNameToUse(tmd.getTableName())__		if (logger.isDebugEnabled()) {_			logger.debug("Retrieving metadata for " + metaDataCatalogName + "/" +_					metaDataSchemaName + "/" + metaDataTableName)__		}_		try {_			tableColumns = databaseMetaData.getColumns(_					metaDataCatalogName,_					metaDataSchemaName,_					metaDataTableName,_					null)__			while (tableColumns.next()) {_				String columnName = tableColumns.getString("COLUMN_NAME")__				int dataType = tableColumns.getInt("DATA_TYPE")__				if (dataType == Types.DECIMAL) {_					String typeName = tableColumns.getString("TYPE_NAME")__					int decimalDigits = tableColumns.getInt("DECIMAL_DIGITS")__					_					_					_					if ("NUMBER".equals(typeName) && decimalDigits == 0) {_						dataType = Types.NUMERIC__						if (logger.isDebugEnabled()) {_							logger.debug("Overriding metadata: "_								+ columnName +_								" now using NUMERIC instead of DECIMAL"_							)__						}_					}_				}_				boolean nullable = tableColumns.getBoolean("NULLABLE")__				TableParameterMetaData meta = new TableParameterMetaData(_						columnName,_						dataType,_						nullable_				)__				this.insertParameterMetaData.add(meta)__				if (logger.isDebugEnabled()) {_					logger.debug("Retrieved metadata: "_						+ meta.getParameterName() +_						" " + meta.getSqlType() +_						" " + meta.isNullable()_					)__				}_			}_		}_		catch (SQLException se) {_			logger.warn("Error while retrieving metadata for table columns: " + se.getMessage())__		}_		finally {_			try {_				if (tableColumns != null)_					tableColumns.close()__			}_			catch (SQLException se) {_				logger.warn("Problem closing ResultSet for table column metadata " + se.getMessage())__			}_		}__	};method,supporting,the,metadata,processing,for,a,table,s,columns;private,void,process,table,columns,database,meta,data,database,meta,data,table,meta,data,tmd,result,set,table,columns,null,string,meta,data,catalog,name,meta,data,catalog,name,to,use,tmd,get,catalog,name,string,meta,data,schema,name,meta,data,schema,name,to,use,tmd,get,schema,name,string,meta,data,table,name,table,name,to,use,tmd,get,table,name,if,logger,is,debug,enabled,logger,debug,retrieving,metadata,for,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,try,table,columns,database,meta,data,get,columns,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,null,while,table,columns,next,string,column,name,table,columns,get,string,int,data,type,table,columns,get,int,if,data,type,types,decimal,string,type,name,table,columns,get,string,int,decimal,digits,table,columns,get,int,if,number,equals,type,name,decimal,digits,0,data,type,types,numeric,if,logger,is,debug,enabled,logger,debug,overriding,metadata,column,name,now,using,numeric,instead,of,decimal,boolean,nullable,table,columns,get,boolean,nullable,table,parameter,meta,data,meta,new,table,parameter,meta,data,column,name,data,type,nullable,this,insert,parameter,meta,data,add,meta,if,logger,is,debug,enabled,logger,debug,retrieved,metadata,meta,get,parameter,name,meta,get,sql,type,meta,is,nullable,catch,sqlexception,se,logger,warn,error,while,retrieving,metadata,for,table,columns,se,get,message,finally,try,if,table,columns,null,table,columns,close,catch,sqlexception,se,logger,warn,problem,closing,result,set,for,table,column,metadata,se,get,message
GenericTableMetaDataProvider -> private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd);1405696918;Method supporting the metadata processing for a table's columns;private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd) {_		ResultSet tableColumns = null__		String metaDataCatalogName = metaDataCatalogNameToUse(tmd.getCatalogName())__		String metaDataSchemaName = metaDataSchemaNameToUse(tmd.getSchemaName())__		String metaDataTableName = tableNameToUse(tmd.getTableName())__		if (logger.isDebugEnabled()) {_			logger.debug("Retrieving metadata for " + metaDataCatalogName + "/" +_					metaDataSchemaName + "/" + metaDataTableName)__		}_		try {_			tableColumns = databaseMetaData.getColumns(_					metaDataCatalogName,_					metaDataSchemaName,_					metaDataTableName,_					null)__			while (tableColumns.next()) {_				String columnName = tableColumns.getString("COLUMN_NAME")__				int dataType = tableColumns.getInt("DATA_TYPE")__				if (dataType == Types.DECIMAL) {_					String typeName = tableColumns.getString("TYPE_NAME")__					int decimalDigits = tableColumns.getInt("DECIMAL_DIGITS")__					_					_					_					if ("NUMBER".equals(typeName) && decimalDigits == 0) {_						dataType = Types.NUMERIC__						if (logger.isDebugEnabled()) {_							logger.debug("Overriding metadata: "_								+ columnName +_								" now using NUMERIC instead of DECIMAL"_							)__						}_					}_				}_				boolean nullable = tableColumns.getBoolean("NULLABLE")__				TableParameterMetaData meta = new TableParameterMetaData(_						columnName,_						dataType,_						nullable_				)__				this.insertParameterMetaData.add(meta)__				if (logger.isDebugEnabled()) {_					logger.debug("Retrieved metadata: "_						+ meta.getParameterName() +_						" " + meta.getSqlType() +_						" " + meta.isNullable()_					)__				}_			}_		}_		catch (SQLException ex) {_			logger.warn("Error while retrieving metadata for table columns: " + ex.getMessage())__		}_		finally {_			try {_				if (tableColumns != null)_					tableColumns.close()__			}_			catch (SQLException ex) {_				logger.warn("Problem closing ResultSet for table column metadata " + ex.getMessage())__			}_		}__	};method,supporting,the,metadata,processing,for,a,table,s,columns;private,void,process,table,columns,database,meta,data,database,meta,data,table,meta,data,tmd,result,set,table,columns,null,string,meta,data,catalog,name,meta,data,catalog,name,to,use,tmd,get,catalog,name,string,meta,data,schema,name,meta,data,schema,name,to,use,tmd,get,schema,name,string,meta,data,table,name,table,name,to,use,tmd,get,table,name,if,logger,is,debug,enabled,logger,debug,retrieving,metadata,for,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,try,table,columns,database,meta,data,get,columns,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,null,while,table,columns,next,string,column,name,table,columns,get,string,int,data,type,table,columns,get,int,if,data,type,types,decimal,string,type,name,table,columns,get,string,int,decimal,digits,table,columns,get,int,if,number,equals,type,name,decimal,digits,0,data,type,types,numeric,if,logger,is,debug,enabled,logger,debug,overriding,metadata,column,name,now,using,numeric,instead,of,decimal,boolean,nullable,table,columns,get,boolean,nullable,table,parameter,meta,data,meta,new,table,parameter,meta,data,column,name,data,type,nullable,this,insert,parameter,meta,data,add,meta,if,logger,is,debug,enabled,logger,debug,retrieved,metadata,meta,get,parameter,name,meta,get,sql,type,meta,is,nullable,catch,sqlexception,ex,logger,warn,error,while,retrieving,metadata,for,table,columns,ex,get,message,finally,try,if,table,columns,null,table,columns,close,catch,sqlexception,ex,logger,warn,problem,closing,result,set,for,table,column,metadata,ex,get,message
GenericTableMetaDataProvider -> private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd);1429214043;Method supporting the metadata processing for a table's columns;private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd) {_		ResultSet tableColumns = null__		String metaDataCatalogName = metaDataCatalogNameToUse(tmd.getCatalogName())__		String metaDataSchemaName = metaDataSchemaNameToUse(tmd.getSchemaName())__		String metaDataTableName = tableNameToUse(tmd.getTableName())__		if (logger.isDebugEnabled()) {_			logger.debug("Retrieving metadata for " + metaDataCatalogName + "/" +_					metaDataSchemaName + "/" + metaDataTableName)__		}_		try {_			tableColumns = databaseMetaData.getColumns(_					metaDataCatalogName, metaDataSchemaName, metaDataTableName, null)__			while (tableColumns.next()) {_				String columnName = tableColumns.getString("COLUMN_NAME")__				int dataType = tableColumns.getInt("DATA_TYPE")__				if (dataType == Types.DECIMAL) {_					String typeName = tableColumns.getString("TYPE_NAME")__					int decimalDigits = tableColumns.getInt("DECIMAL_DIGITS")__					_					_					_					if ("NUMBER".equals(typeName) && decimalDigits == 0) {_						dataType = Types.NUMERIC__						if (logger.isDebugEnabled()) {_							logger.debug("Overriding metadata: "_								+ columnName +_								" now using NUMERIC instead of DECIMAL"_							)__						}_					}_				}_				boolean nullable = tableColumns.getBoolean("NULLABLE")__				TableParameterMetaData meta = new TableParameterMetaData(columnName, dataType, nullable)__				this.tableParameterMetaData.add(meta)__				if (logger.isDebugEnabled()) {_					logger.debug("Retrieved metadata: " + meta.getParameterName() +_						" " + meta.getSqlType() + " " + meta.isNullable())__				}_			}_		}_		catch (SQLException ex) {_			logger.warn("Error while retrieving metadata for table columns: " + ex.getMessage())__		}_		finally {_			try {_				if (tableColumns != null)_					tableColumns.close()__			}_			catch (SQLException ex) {_				logger.warn("Problem closing ResultSet for table column metadata " + ex.getMessage())__			}_		}__	};method,supporting,the,metadata,processing,for,a,table,s,columns;private,void,process,table,columns,database,meta,data,database,meta,data,table,meta,data,tmd,result,set,table,columns,null,string,meta,data,catalog,name,meta,data,catalog,name,to,use,tmd,get,catalog,name,string,meta,data,schema,name,meta,data,schema,name,to,use,tmd,get,schema,name,string,meta,data,table,name,table,name,to,use,tmd,get,table,name,if,logger,is,debug,enabled,logger,debug,retrieving,metadata,for,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,try,table,columns,database,meta,data,get,columns,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,null,while,table,columns,next,string,column,name,table,columns,get,string,int,data,type,table,columns,get,int,if,data,type,types,decimal,string,type,name,table,columns,get,string,int,decimal,digits,table,columns,get,int,if,number,equals,type,name,decimal,digits,0,data,type,types,numeric,if,logger,is,debug,enabled,logger,debug,overriding,metadata,column,name,now,using,numeric,instead,of,decimal,boolean,nullable,table,columns,get,boolean,nullable,table,parameter,meta,data,meta,new,table,parameter,meta,data,column,name,data,type,nullable,this,table,parameter,meta,data,add,meta,if,logger,is,debug,enabled,logger,debug,retrieved,metadata,meta,get,parameter,name,meta,get,sql,type,meta,is,nullable,catch,sqlexception,ex,logger,warn,error,while,retrieving,metadata,for,table,columns,ex,get,message,finally,try,if,table,columns,null,table,columns,close,catch,sqlexception,ex,logger,warn,problem,closing,result,set,for,table,column,metadata,ex,get,message
GenericTableMetaDataProvider -> private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd);1467730834;Method supporting the metadata processing for a table's columns;private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd) {_		ResultSet tableColumns = null__		String metaDataCatalogName = metaDataCatalogNameToUse(tmd.getCatalogName())__		String metaDataSchemaName = metaDataSchemaNameToUse(tmd.getSchemaName())__		String metaDataTableName = tableNameToUse(tmd.getTableName())__		if (logger.isDebugEnabled()) {_			logger.debug("Retrieving metadata for " + metaDataCatalogName + "/" +_					metaDataSchemaName + "/" + metaDataTableName)__		}_		try {_			tableColumns = databaseMetaData.getColumns(_					metaDataCatalogName, metaDataSchemaName, metaDataTableName, null)__			while (tableColumns.next()) {_				String columnName = tableColumns.getString("COLUMN_NAME")__				int dataType = tableColumns.getInt("DATA_TYPE")__				if (dataType == Types.DECIMAL) {_					String typeName = tableColumns.getString("TYPE_NAME")__					int decimalDigits = tableColumns.getInt("DECIMAL_DIGITS")__					_					_					_					if ("NUMBER".equals(typeName) && decimalDigits == 0) {_						dataType = Types.NUMERIC__						if (logger.isDebugEnabled()) {_							logger.debug("Overriding metadata: "_								+ columnName +_								" now using NUMERIC instead of DECIMAL"_							)__						}_					}_				}_				boolean nullable = tableColumns.getBoolean("NULLABLE")__				TableParameterMetaData meta = new TableParameterMetaData(columnName, dataType, nullable)__				this.tableParameterMetaData.add(meta)__				if (logger.isDebugEnabled()) {_					logger.debug("Retrieved metadata: " + meta.getParameterName() +_						" " + meta.getSqlType() + " " + meta.isNullable())__				}_			}_		}_		catch (SQLException ex) {_			logger.warn("Error while retrieving metadata for table columns: " + ex.getMessage())__		}_		finally {_			try {_				if (tableColumns != null)_					tableColumns.close()__			}_			catch (SQLException ex) {_				logger.warn("Problem closing ResultSet for table column metadata " + ex.getMessage())__			}_		}__	};method,supporting,the,metadata,processing,for,a,table,s,columns;private,void,process,table,columns,database,meta,data,database,meta,data,table,meta,data,tmd,result,set,table,columns,null,string,meta,data,catalog,name,meta,data,catalog,name,to,use,tmd,get,catalog,name,string,meta,data,schema,name,meta,data,schema,name,to,use,tmd,get,schema,name,string,meta,data,table,name,table,name,to,use,tmd,get,table,name,if,logger,is,debug,enabled,logger,debug,retrieving,metadata,for,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,try,table,columns,database,meta,data,get,columns,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,null,while,table,columns,next,string,column,name,table,columns,get,string,int,data,type,table,columns,get,int,if,data,type,types,decimal,string,type,name,table,columns,get,string,int,decimal,digits,table,columns,get,int,if,number,equals,type,name,decimal,digits,0,data,type,types,numeric,if,logger,is,debug,enabled,logger,debug,overriding,metadata,column,name,now,using,numeric,instead,of,decimal,boolean,nullable,table,columns,get,boolean,nullable,table,parameter,meta,data,meta,new,table,parameter,meta,data,column,name,data,type,nullable,this,table,parameter,meta,data,add,meta,if,logger,is,debug,enabled,logger,debug,retrieved,metadata,meta,get,parameter,name,meta,get,sql,type,meta,is,nullable,catch,sqlexception,ex,logger,warn,error,while,retrieving,metadata,for,table,columns,ex,get,message,finally,try,if,table,columns,null,table,columns,close,catch,sqlexception,ex,logger,warn,problem,closing,result,set,for,table,column,metadata,ex,get,message
GenericTableMetaDataProvider -> private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd);1477045587;Method supporting the metadata processing for a table's columns;private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd) {_		ResultSet tableColumns = null__		String metaDataCatalogName = metaDataCatalogNameToUse(tmd.getCatalogName())__		String metaDataSchemaName = metaDataSchemaNameToUse(tmd.getSchemaName())__		String metaDataTableName = tableNameToUse(tmd.getTableName())__		if (logger.isDebugEnabled()) {_			logger.debug("Retrieving metadata for " + metaDataCatalogName + '/' +_					metaDataSchemaName + '/' + metaDataTableName)__		}_		try {_			tableColumns = databaseMetaData.getColumns(_					metaDataCatalogName, metaDataSchemaName, metaDataTableName, null)__			while (tableColumns.next()) {_				String columnName = tableColumns.getString("COLUMN_NAME")__				int dataType = tableColumns.getInt("DATA_TYPE")__				if (dataType == Types.DECIMAL) {_					String typeName = tableColumns.getString("TYPE_NAME")__					int decimalDigits = tableColumns.getInt("DECIMAL_DIGITS")__					_					_					_					if ("NUMBER".equals(typeName) && decimalDigits == 0) {_						dataType = Types.NUMERIC__						if (logger.isDebugEnabled()) {_							logger.debug("Overriding metadata: "_								+ columnName +_								" now using NUMERIC instead of DECIMAL"_							)__						}_					}_				}_				boolean nullable = tableColumns.getBoolean("NULLABLE")__				TableParameterMetaData meta = new TableParameterMetaData(columnName, dataType, nullable)__				this.tableParameterMetaData.add(meta)__				if (logger.isDebugEnabled()) {_					logger.debug("Retrieved metadata: " + meta.getParameterName() +_						" " + meta.getSqlType() + " " + meta.isNullable())__				}_			}_		}_		catch (SQLException ex) {_			logger.warn("Error while retrieving metadata for table columns: " + ex.getMessage())__		}_		finally {_			try {_				if (tableColumns != null)_					tableColumns.close()__			}_			catch (SQLException ex) {_				logger.warn("Problem closing ResultSet for table column metadata " + ex.getMessage())__			}_		}__	};method,supporting,the,metadata,processing,for,a,table,s,columns;private,void,process,table,columns,database,meta,data,database,meta,data,table,meta,data,tmd,result,set,table,columns,null,string,meta,data,catalog,name,meta,data,catalog,name,to,use,tmd,get,catalog,name,string,meta,data,schema,name,meta,data,schema,name,to,use,tmd,get,schema,name,string,meta,data,table,name,table,name,to,use,tmd,get,table,name,if,logger,is,debug,enabled,logger,debug,retrieving,metadata,for,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,try,table,columns,database,meta,data,get,columns,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,null,while,table,columns,next,string,column,name,table,columns,get,string,int,data,type,table,columns,get,int,if,data,type,types,decimal,string,type,name,table,columns,get,string,int,decimal,digits,table,columns,get,int,if,number,equals,type,name,decimal,digits,0,data,type,types,numeric,if,logger,is,debug,enabled,logger,debug,overriding,metadata,column,name,now,using,numeric,instead,of,decimal,boolean,nullable,table,columns,get,boolean,nullable,table,parameter,meta,data,meta,new,table,parameter,meta,data,column,name,data,type,nullable,this,table,parameter,meta,data,add,meta,if,logger,is,debug,enabled,logger,debug,retrieved,metadata,meta,get,parameter,name,meta,get,sql,type,meta,is,nullable,catch,sqlexception,ex,logger,warn,error,while,retrieving,metadata,for,table,columns,ex,get,message,finally,try,if,table,columns,null,table,columns,close,catch,sqlexception,ex,logger,warn,problem,closing,result,set,for,table,column,metadata,ex,get,message
GenericTableMetaDataProvider -> private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd);1484252108;Method supporting the metadata processing for a table's columns;private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd) {_		ResultSet tableColumns = null__		String metaDataCatalogName = metaDataCatalogNameToUse(tmd.getCatalogName())__		String metaDataSchemaName = metaDataSchemaNameToUse(tmd.getSchemaName())__		String metaDataTableName = tableNameToUse(tmd.getTableName())__		if (logger.isDebugEnabled()) {_			logger.debug("Retrieving metadata for " + metaDataCatalogName + '/' +_					metaDataSchemaName + '/' + metaDataTableName)__		}_		try {_			tableColumns = databaseMetaData.getColumns(_					metaDataCatalogName, metaDataSchemaName, metaDataTableName, null)__			while (tableColumns.next()) {_				String columnName = tableColumns.getString("COLUMN_NAME")__				int dataType = tableColumns.getInt("DATA_TYPE")__				if (dataType == Types.DECIMAL) {_					String typeName = tableColumns.getString("TYPE_NAME")__					int decimalDigits = tableColumns.getInt("DECIMAL_DIGITS")__					_					_					_					if ("NUMBER".equals(typeName) && decimalDigits == 0) {_						dataType = Types.NUMERIC__						if (logger.isDebugEnabled()) {_							logger.debug("Overriding metadata: " + columnName + " now NUMERIC instead of DECIMAL")__						}_					}_				}_				boolean nullable = tableColumns.getBoolean("NULLABLE")__				TableParameterMetaData meta = new TableParameterMetaData(columnName, dataType, nullable)__				this.tableParameterMetaData.add(meta)__				if (logger.isDebugEnabled()) {_					logger.debug("Retrieved metadata: " + meta.getParameterName() + " " +_							meta.getSqlType() + " " + meta.isNullable())__				}_			}_		}_		catch (SQLException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Error while retrieving metadata for table columns: " + ex.getMessage())__			}_		}_		finally {_			JdbcUtils.closeResultSet(tableColumns)__		}_	};method,supporting,the,metadata,processing,for,a,table,s,columns;private,void,process,table,columns,database,meta,data,database,meta,data,table,meta,data,tmd,result,set,table,columns,null,string,meta,data,catalog,name,meta,data,catalog,name,to,use,tmd,get,catalog,name,string,meta,data,schema,name,meta,data,schema,name,to,use,tmd,get,schema,name,string,meta,data,table,name,table,name,to,use,tmd,get,table,name,if,logger,is,debug,enabled,logger,debug,retrieving,metadata,for,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,try,table,columns,database,meta,data,get,columns,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,null,while,table,columns,next,string,column,name,table,columns,get,string,int,data,type,table,columns,get,int,if,data,type,types,decimal,string,type,name,table,columns,get,string,int,decimal,digits,table,columns,get,int,if,number,equals,type,name,decimal,digits,0,data,type,types,numeric,if,logger,is,debug,enabled,logger,debug,overriding,metadata,column,name,now,numeric,instead,of,decimal,boolean,nullable,table,columns,get,boolean,nullable,table,parameter,meta,data,meta,new,table,parameter,meta,data,column,name,data,type,nullable,this,table,parameter,meta,data,add,meta,if,logger,is,debug,enabled,logger,debug,retrieved,metadata,meta,get,parameter,name,meta,get,sql,type,meta,is,nullable,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,error,while,retrieving,metadata,for,table,columns,ex,get,message,finally,jdbc,utils,close,result,set,table,columns
GenericTableMetaDataProvider -> private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd);1487178248;Method supporting the metadata processing for a table's columns;private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd) {_		ResultSet tableColumns = null__		String metaDataCatalogName = metaDataCatalogNameToUse(tmd.getCatalogName())__		String metaDataSchemaName = metaDataSchemaNameToUse(tmd.getSchemaName())__		String metaDataTableName = tableNameToUse(tmd.getTableName())__		if (logger.isDebugEnabled()) {_			logger.debug("Retrieving metadata for " + metaDataCatalogName + '/' +_					metaDataSchemaName + '/' + metaDataTableName)__		}_		try {_			tableColumns = databaseMetaData.getColumns(_					metaDataCatalogName, metaDataSchemaName, metaDataTableName, null)__			while (tableColumns.next()) {_				String columnName = tableColumns.getString("COLUMN_NAME")__				int dataType = tableColumns.getInt("DATA_TYPE")__				if (dataType == Types.DECIMAL) {_					String typeName = tableColumns.getString("TYPE_NAME")__					int decimalDigits = tableColumns.getInt("DECIMAL_DIGITS")__					_					_					_					if ("NUMBER".equals(typeName) && decimalDigits == 0) {_						dataType = Types.NUMERIC__						if (logger.isDebugEnabled()) {_							logger.debug("Overriding metadata: " + columnName + " now NUMERIC instead of DECIMAL")__						}_					}_				}_				boolean nullable = tableColumns.getBoolean("NULLABLE")__				TableParameterMetaData meta = new TableParameterMetaData(columnName, dataType, nullable)__				this.tableParameterMetaData.add(meta)__				if (logger.isDebugEnabled()) {_					logger.debug("Retrieved metadata: " + meta.getParameterName() + " " +_							meta.getSqlType() + " " + meta.isNullable())__				}_			}_		}_		catch (SQLException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Error while retrieving metadata for table columns: " + ex.getMessage())__			}_		}_		finally {_			JdbcUtils.closeResultSet(tableColumns)__		}_	};method,supporting,the,metadata,processing,for,a,table,s,columns;private,void,process,table,columns,database,meta,data,database,meta,data,table,meta,data,tmd,result,set,table,columns,null,string,meta,data,catalog,name,meta,data,catalog,name,to,use,tmd,get,catalog,name,string,meta,data,schema,name,meta,data,schema,name,to,use,tmd,get,schema,name,string,meta,data,table,name,table,name,to,use,tmd,get,table,name,if,logger,is,debug,enabled,logger,debug,retrieving,metadata,for,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,try,table,columns,database,meta,data,get,columns,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,null,while,table,columns,next,string,column,name,table,columns,get,string,int,data,type,table,columns,get,int,if,data,type,types,decimal,string,type,name,table,columns,get,string,int,decimal,digits,table,columns,get,int,if,number,equals,type,name,decimal,digits,0,data,type,types,numeric,if,logger,is,debug,enabled,logger,debug,overriding,metadata,column,name,now,numeric,instead,of,decimal,boolean,nullable,table,columns,get,boolean,nullable,table,parameter,meta,data,meta,new,table,parameter,meta,data,column,name,data,type,nullable,this,table,parameter,meta,data,add,meta,if,logger,is,debug,enabled,logger,debug,retrieved,metadata,meta,get,parameter,name,meta,get,sql,type,meta,is,nullable,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,error,while,retrieving,metadata,for,table,columns,ex,get,message,finally,jdbc,utils,close,result,set,table,columns
GenericTableMetaDataProvider -> private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd);1496242568;Method supporting the metadata processing for a table's columns;private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd) {_		ResultSet tableColumns = null__		String metaDataCatalogName = metaDataCatalogNameToUse(tmd.getCatalogName())__		String metaDataSchemaName = metaDataSchemaNameToUse(tmd.getSchemaName())__		String metaDataTableName = tableNameToUse(tmd.getTableName())__		if (logger.isDebugEnabled()) {_			logger.debug("Retrieving metadata for " + metaDataCatalogName + '/' +_					metaDataSchemaName + '/' + metaDataTableName)__		}_		try {_			tableColumns = databaseMetaData.getColumns(_					metaDataCatalogName, metaDataSchemaName, metaDataTableName, null)__			while (tableColumns.next()) {_				String columnName = tableColumns.getString("COLUMN_NAME")__				int dataType = tableColumns.getInt("DATA_TYPE")__				if (dataType == Types.DECIMAL) {_					String typeName = tableColumns.getString("TYPE_NAME")__					int decimalDigits = tableColumns.getInt("DECIMAL_DIGITS")__					_					_					_					if ("NUMBER".equals(typeName) && decimalDigits == 0) {_						dataType = Types.NUMERIC__						if (logger.isDebugEnabled()) {_							logger.debug("Overriding metadata: " + columnName + " now NUMERIC instead of DECIMAL")__						}_					}_				}_				boolean nullable = tableColumns.getBoolean("NULLABLE")__				TableParameterMetaData meta = new TableParameterMetaData(columnName, dataType, nullable)__				this.tableParameterMetaData.add(meta)__				if (logger.isDebugEnabled()) {_					logger.debug("Retrieved metadata: " + meta.getParameterName() + " " +_							meta.getSqlType() + " " + meta.isNullable())__				}_			}_		}_		catch (SQLException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Error while retrieving metadata for table columns: " + ex.getMessage())__			}_		}_		finally {_			JdbcUtils.closeResultSet(tableColumns)__		}_	};method,supporting,the,metadata,processing,for,a,table,s,columns;private,void,process,table,columns,database,meta,data,database,meta,data,table,meta,data,tmd,result,set,table,columns,null,string,meta,data,catalog,name,meta,data,catalog,name,to,use,tmd,get,catalog,name,string,meta,data,schema,name,meta,data,schema,name,to,use,tmd,get,schema,name,string,meta,data,table,name,table,name,to,use,tmd,get,table,name,if,logger,is,debug,enabled,logger,debug,retrieving,metadata,for,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,try,table,columns,database,meta,data,get,columns,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,null,while,table,columns,next,string,column,name,table,columns,get,string,int,data,type,table,columns,get,int,if,data,type,types,decimal,string,type,name,table,columns,get,string,int,decimal,digits,table,columns,get,int,if,number,equals,type,name,decimal,digits,0,data,type,types,numeric,if,logger,is,debug,enabled,logger,debug,overriding,metadata,column,name,now,numeric,instead,of,decimal,boolean,nullable,table,columns,get,boolean,nullable,table,parameter,meta,data,meta,new,table,parameter,meta,data,column,name,data,type,nullable,this,table,parameter,meta,data,add,meta,if,logger,is,debug,enabled,logger,debug,retrieved,metadata,meta,get,parameter,name,meta,get,sql,type,meta,is,nullable,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,error,while,retrieving,metadata,for,table,columns,ex,get,message,finally,jdbc,utils,close,result,set,table,columns
GenericTableMetaDataProvider -> private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd);1496837955;Method supporting the metadata processing for a table's columns;private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd) {_		ResultSet tableColumns = null__		String metaDataCatalogName = metaDataCatalogNameToUse(tmd.getCatalogName())__		String metaDataSchemaName = metaDataSchemaNameToUse(tmd.getSchemaName())__		String metaDataTableName = tableNameToUse(tmd.getTableName())__		if (logger.isDebugEnabled()) {_			logger.debug("Retrieving metadata for " + metaDataCatalogName + '/' +_					metaDataSchemaName + '/' + metaDataTableName)__		}_		try {_			tableColumns = databaseMetaData.getColumns(_					metaDataCatalogName, metaDataSchemaName, metaDataTableName, null)__			while (tableColumns.next()) {_				String columnName = tableColumns.getString("COLUMN_NAME")__				int dataType = tableColumns.getInt("DATA_TYPE")__				if (dataType == Types.DECIMAL) {_					String typeName = tableColumns.getString("TYPE_NAME")__					int decimalDigits = tableColumns.getInt("DECIMAL_DIGITS")__					_					_					_					if ("NUMBER".equals(typeName) && decimalDigits == 0) {_						dataType = Types.NUMERIC__						if (logger.isDebugEnabled()) {_							logger.debug("Overriding metadata: " + columnName + " now NUMERIC instead of DECIMAL")__						}_					}_				}_				boolean nullable = tableColumns.getBoolean("NULLABLE")__				TableParameterMetaData meta = new TableParameterMetaData(columnName, dataType, nullable)__				this.tableParameterMetaData.add(meta)__				if (logger.isDebugEnabled()) {_					logger.debug("Retrieved metadata: " + meta.getParameterName() + " " +_							meta.getSqlType() + " " + meta.isNullable())__				}_			}_		}_		catch (SQLException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Error while retrieving metadata for table columns: " + ex.getMessage())__			}_		}_		finally {_			JdbcUtils.closeResultSet(tableColumns)__		}_	};method,supporting,the,metadata,processing,for,a,table,s,columns;private,void,process,table,columns,database,meta,data,database,meta,data,table,meta,data,tmd,result,set,table,columns,null,string,meta,data,catalog,name,meta,data,catalog,name,to,use,tmd,get,catalog,name,string,meta,data,schema,name,meta,data,schema,name,to,use,tmd,get,schema,name,string,meta,data,table,name,table,name,to,use,tmd,get,table,name,if,logger,is,debug,enabled,logger,debug,retrieving,metadata,for,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,try,table,columns,database,meta,data,get,columns,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,null,while,table,columns,next,string,column,name,table,columns,get,string,int,data,type,table,columns,get,int,if,data,type,types,decimal,string,type,name,table,columns,get,string,int,decimal,digits,table,columns,get,int,if,number,equals,type,name,decimal,digits,0,data,type,types,numeric,if,logger,is,debug,enabled,logger,debug,overriding,metadata,column,name,now,numeric,instead,of,decimal,boolean,nullable,table,columns,get,boolean,nullable,table,parameter,meta,data,meta,new,table,parameter,meta,data,column,name,data,type,nullable,this,table,parameter,meta,data,add,meta,if,logger,is,debug,enabled,logger,debug,retrieved,metadata,meta,get,parameter,name,meta,get,sql,type,meta,is,nullable,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,error,while,retrieving,metadata,for,table,columns,ex,get,message,finally,jdbc,utils,close,result,set,table,columns
GenericTableMetaDataProvider -> private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd);1498780456;Method supporting the metadata processing for a table's columns;private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd) {_		ResultSet tableColumns = null__		String metaDataCatalogName = metaDataCatalogNameToUse(tmd.getCatalogName())__		String metaDataSchemaName = metaDataSchemaNameToUse(tmd.getSchemaName())__		String metaDataTableName = tableNameToUse(tmd.getTableName())__		if (logger.isDebugEnabled()) {_			logger.debug("Retrieving metadata for " + metaDataCatalogName + '/' +_					metaDataSchemaName + '/' + metaDataTableName)__		}_		try {_			tableColumns = databaseMetaData.getColumns(_					metaDataCatalogName, metaDataSchemaName, metaDataTableName, null)__			while (tableColumns.next()) {_				String columnName = tableColumns.getString("COLUMN_NAME")__				int dataType = tableColumns.getInt("DATA_TYPE")__				if (dataType == Types.DECIMAL) {_					String typeName = tableColumns.getString("TYPE_NAME")__					int decimalDigits = tableColumns.getInt("DECIMAL_DIGITS")__					_					_					_					if ("NUMBER".equals(typeName) && decimalDigits == 0) {_						dataType = Types.NUMERIC__						if (logger.isDebugEnabled()) {_							logger.debug("Overriding metadata: " + columnName + " now NUMERIC instead of DECIMAL")__						}_					}_				}_				boolean nullable = tableColumns.getBoolean("NULLABLE")__				TableParameterMetaData meta = new TableParameterMetaData(columnName, dataType, nullable)__				this.tableParameterMetaData.add(meta)__				if (logger.isDebugEnabled()) {_					logger.debug("Retrieved metadata: " + meta.getParameterName() + " " +_							meta.getSqlType() + " " + meta.isNullable())__				}_			}_		}_		catch (SQLException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Error while retrieving metadata for table columns: " + ex.getMessage())__			}_		}_		finally {_			JdbcUtils.closeResultSet(tableColumns)__		}_	};method,supporting,the,metadata,processing,for,a,table,s,columns;private,void,process,table,columns,database,meta,data,database,meta,data,table,meta,data,tmd,result,set,table,columns,null,string,meta,data,catalog,name,meta,data,catalog,name,to,use,tmd,get,catalog,name,string,meta,data,schema,name,meta,data,schema,name,to,use,tmd,get,schema,name,string,meta,data,table,name,table,name,to,use,tmd,get,table,name,if,logger,is,debug,enabled,logger,debug,retrieving,metadata,for,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,try,table,columns,database,meta,data,get,columns,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,null,while,table,columns,next,string,column,name,table,columns,get,string,int,data,type,table,columns,get,int,if,data,type,types,decimal,string,type,name,table,columns,get,string,int,decimal,digits,table,columns,get,int,if,number,equals,type,name,decimal,digits,0,data,type,types,numeric,if,logger,is,debug,enabled,logger,debug,overriding,metadata,column,name,now,numeric,instead,of,decimal,boolean,nullable,table,columns,get,boolean,nullable,table,parameter,meta,data,meta,new,table,parameter,meta,data,column,name,data,type,nullable,this,table,parameter,meta,data,add,meta,if,logger,is,debug,enabled,logger,debug,retrieved,metadata,meta,get,parameter,name,meta,get,sql,type,meta,is,nullable,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,error,while,retrieving,metadata,for,table,columns,ex,get,message,finally,jdbc,utils,close,result,set,table,columns
GenericTableMetaDataProvider -> private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd);1502974979;Method supporting the metadata processing for a table's columns;private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd) {_		ResultSet tableColumns = null__		String metaDataCatalogName = metaDataCatalogNameToUse(tmd.getCatalogName())__		String metaDataSchemaName = metaDataSchemaNameToUse(tmd.getSchemaName())__		String metaDataTableName = tableNameToUse(tmd.getTableName())__		if (logger.isDebugEnabled()) {_			logger.debug("Retrieving metadata for " + metaDataCatalogName + '/' +_					metaDataSchemaName + '/' + metaDataTableName)__		}_		try {_			tableColumns = databaseMetaData.getColumns(_					metaDataCatalogName, metaDataSchemaName, metaDataTableName, null)__			while (tableColumns.next()) {_				String columnName = tableColumns.getString("COLUMN_NAME")__				int dataType = tableColumns.getInt("DATA_TYPE")__				if (dataType == Types.DECIMAL) {_					String typeName = tableColumns.getString("TYPE_NAME")__					int decimalDigits = tableColumns.getInt("DECIMAL_DIGITS")__					_					_					_					if ("NUMBER".equals(typeName) && decimalDigits == 0) {_						dataType = Types.NUMERIC__						if (logger.isDebugEnabled()) {_							logger.debug("Overriding metadata: " + columnName + " now NUMERIC instead of DECIMAL")__						}_					}_				}_				boolean nullable = tableColumns.getBoolean("NULLABLE")__				TableParameterMetaData meta = new TableParameterMetaData(columnName, dataType, nullable)__				this.tableParameterMetaData.add(meta)__				if (logger.isDebugEnabled()) {_					logger.debug("Retrieved metadata: " + meta.getParameterName() + " " +_							meta.getSqlType() + " " + meta.isNullable())__				}_			}_		}_		catch (SQLException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Error while retrieving metadata for table columns: " + ex.getMessage())__			}_		}_		finally {_			JdbcUtils.closeResultSet(tableColumns)__		}_	};method,supporting,the,metadata,processing,for,a,table,s,columns;private,void,process,table,columns,database,meta,data,database,meta,data,table,meta,data,tmd,result,set,table,columns,null,string,meta,data,catalog,name,meta,data,catalog,name,to,use,tmd,get,catalog,name,string,meta,data,schema,name,meta,data,schema,name,to,use,tmd,get,schema,name,string,meta,data,table,name,table,name,to,use,tmd,get,table,name,if,logger,is,debug,enabled,logger,debug,retrieving,metadata,for,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,try,table,columns,database,meta,data,get,columns,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,null,while,table,columns,next,string,column,name,table,columns,get,string,int,data,type,table,columns,get,int,if,data,type,types,decimal,string,type,name,table,columns,get,string,int,decimal,digits,table,columns,get,int,if,number,equals,type,name,decimal,digits,0,data,type,types,numeric,if,logger,is,debug,enabled,logger,debug,overriding,metadata,column,name,now,numeric,instead,of,decimal,boolean,nullable,table,columns,get,boolean,nullable,table,parameter,meta,data,meta,new,table,parameter,meta,data,column,name,data,type,nullable,this,table,parameter,meta,data,add,meta,if,logger,is,debug,enabled,logger,debug,retrieved,metadata,meta,get,parameter,name,meta,get,sql,type,meta,is,nullable,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,error,while,retrieving,metadata,for,table,columns,ex,get,message,finally,jdbc,utils,close,result,set,table,columns
GenericTableMetaDataProvider -> private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd);1520339775;Method supporting the metadata processing for a table's columns;private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd) {_		ResultSet tableColumns = null__		String metaDataCatalogName = metaDataCatalogNameToUse(tmd.getCatalogName())__		String metaDataSchemaName = metaDataSchemaNameToUse(tmd.getSchemaName())__		String metaDataTableName = tableNameToUse(tmd.getTableName())__		if (logger.isDebugEnabled()) {_			logger.debug("Retrieving metadata for " + metaDataCatalogName + '/' +_					metaDataSchemaName + '/' + metaDataTableName)__		}_		try {_			tableColumns = databaseMetaData.getColumns(_					metaDataCatalogName, metaDataSchemaName, metaDataTableName, null)__			while (tableColumns.next()) {_				String columnName = tableColumns.getString("COLUMN_NAME")__				int dataType = tableColumns.getInt("DATA_TYPE")__				if (dataType == Types.DECIMAL) {_					String typeName = tableColumns.getString("TYPE_NAME")__					int decimalDigits = tableColumns.getInt("DECIMAL_DIGITS")__					_					_					_					if ("NUMBER".equals(typeName) && decimalDigits == 0) {_						dataType = Types.NUMERIC__						if (logger.isDebugEnabled()) {_							logger.debug("Overriding metadata: " + columnName + " now NUMERIC instead of DECIMAL")__						}_					}_				}_				boolean nullable = tableColumns.getBoolean("NULLABLE")__				TableParameterMetaData meta = new TableParameterMetaData(columnName, dataType, nullable)__				this.tableParameterMetaData.add(meta)__				if (logger.isDebugEnabled()) {_					logger.debug("Retrieved metadata: " + meta.getParameterName() + " " +_							meta.getSqlType() + " " + meta.isNullable())__				}_			}_		}_		catch (SQLException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Error while retrieving metadata for table columns: " + ex.getMessage())__			}_		}_		finally {_			JdbcUtils.closeResultSet(tableColumns)__		}_	};method,supporting,the,metadata,processing,for,a,table,s,columns;private,void,process,table,columns,database,meta,data,database,meta,data,table,meta,data,tmd,result,set,table,columns,null,string,meta,data,catalog,name,meta,data,catalog,name,to,use,tmd,get,catalog,name,string,meta,data,schema,name,meta,data,schema,name,to,use,tmd,get,schema,name,string,meta,data,table,name,table,name,to,use,tmd,get,table,name,if,logger,is,debug,enabled,logger,debug,retrieving,metadata,for,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,try,table,columns,database,meta,data,get,columns,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,null,while,table,columns,next,string,column,name,table,columns,get,string,int,data,type,table,columns,get,int,if,data,type,types,decimal,string,type,name,table,columns,get,string,int,decimal,digits,table,columns,get,int,if,number,equals,type,name,decimal,digits,0,data,type,types,numeric,if,logger,is,debug,enabled,logger,debug,overriding,metadata,column,name,now,numeric,instead,of,decimal,boolean,nullable,table,columns,get,boolean,nullable,table,parameter,meta,data,meta,new,table,parameter,meta,data,column,name,data,type,nullable,this,table,parameter,meta,data,add,meta,if,logger,is,debug,enabled,logger,debug,retrieved,metadata,meta,get,parameter,name,meta,get,sql,type,meta,is,nullable,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,error,while,retrieving,metadata,for,table,columns,ex,get,message,finally,jdbc,utils,close,result,set,table,columns
GenericTableMetaDataProvider -> private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd);1521457504;Method supporting the meta-data processing for a table's columns;private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd) {_		ResultSet tableColumns = null__		String metaDataCatalogName = metaDataCatalogNameToUse(tmd.getCatalogName())__		String metaDataSchemaName = metaDataSchemaNameToUse(tmd.getSchemaName())__		String metaDataTableName = tableNameToUse(tmd.getTableName())__		if (logger.isDebugEnabled()) {_			logger.debug("Retrieving meta-data for " + metaDataCatalogName + '/' +_					metaDataSchemaName + '/' + metaDataTableName)__		}_		try {_			tableColumns = databaseMetaData.getColumns(_					metaDataCatalogName, metaDataSchemaName, metaDataTableName, null)__			while (tableColumns.next()) {_				String columnName = tableColumns.getString("COLUMN_NAME")__				int dataType = tableColumns.getInt("DATA_TYPE")__				if (dataType == Types.DECIMAL) {_					String typeName = tableColumns.getString("TYPE_NAME")__					int decimalDigits = tableColumns.getInt("DECIMAL_DIGITS")__					_					_					_					if ("NUMBER".equals(typeName) && decimalDigits == 0) {_						dataType = Types.NUMERIC__						if (logger.isDebugEnabled()) {_							logger.debug("Overriding meta-data: " + columnName + " now NUMERIC instead of DECIMAL")__						}_					}_				}_				boolean nullable = tableColumns.getBoolean("NULLABLE")__				TableParameterMetaData meta = new TableParameterMetaData(columnName, dataType, nullable)__				this.tableParameterMetaData.add(meta)__				if (logger.isDebugEnabled()) {_					logger.debug("Retrieved meta-data: " + meta.getParameterName() + " " +_							meta.getSqlType() + " " + meta.isNullable())__				}_			}_		}_		catch (SQLException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Error while retrieving meta-data for table columns: " + ex.getMessage())__			}_		}_		finally {_			JdbcUtils.closeResultSet(tableColumns)__		}_	};method,supporting,the,meta,data,processing,for,a,table,s,columns;private,void,process,table,columns,database,meta,data,database,meta,data,table,meta,data,tmd,result,set,table,columns,null,string,meta,data,catalog,name,meta,data,catalog,name,to,use,tmd,get,catalog,name,string,meta,data,schema,name,meta,data,schema,name,to,use,tmd,get,schema,name,string,meta,data,table,name,table,name,to,use,tmd,get,table,name,if,logger,is,debug,enabled,logger,debug,retrieving,meta,data,for,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,try,table,columns,database,meta,data,get,columns,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,null,while,table,columns,next,string,column,name,table,columns,get,string,int,data,type,table,columns,get,int,if,data,type,types,decimal,string,type,name,table,columns,get,string,int,decimal,digits,table,columns,get,int,if,number,equals,type,name,decimal,digits,0,data,type,types,numeric,if,logger,is,debug,enabled,logger,debug,overriding,meta,data,column,name,now,numeric,instead,of,decimal,boolean,nullable,table,columns,get,boolean,nullable,table,parameter,meta,data,meta,new,table,parameter,meta,data,column,name,data,type,nullable,this,table,parameter,meta,data,add,meta,if,logger,is,debug,enabled,logger,debug,retrieved,meta,data,meta,get,parameter,name,meta,get,sql,type,meta,is,nullable,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,error,while,retrieving,meta,data,for,table,columns,ex,get,message,finally,jdbc,utils,close,result,set,table,columns
GenericTableMetaDataProvider -> private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd);1530174524;Method supporting the meta-data processing for a table's columns.;private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd) {_		ResultSet tableColumns = null__		String metaDataCatalogName = metaDataCatalogNameToUse(tmd.getCatalogName())__		String metaDataSchemaName = metaDataSchemaNameToUse(tmd.getSchemaName())__		String metaDataTableName = tableNameToUse(tmd.getTableName())__		if (logger.isDebugEnabled()) {_			logger.debug("Retrieving meta-data for " + metaDataCatalogName + '/' +_					metaDataSchemaName + '/' + metaDataTableName)__		}_		try {_			tableColumns = databaseMetaData.getColumns(_					metaDataCatalogName, metaDataSchemaName, metaDataTableName, null)__			while (tableColumns.next()) {_				String columnName = tableColumns.getString("COLUMN_NAME")__				int dataType = tableColumns.getInt("DATA_TYPE")__				if (dataType == Types.DECIMAL) {_					String typeName = tableColumns.getString("TYPE_NAME")__					int decimalDigits = tableColumns.getInt("DECIMAL_DIGITS")__					_					_					_					if ("NUMBER".equals(typeName) && decimalDigits == 0) {_						dataType = Types.NUMERIC__						if (logger.isDebugEnabled()) {_							logger.debug("Overriding meta-data: " + columnName + " now NUMERIC instead of DECIMAL")__						}_					}_				}_				boolean nullable = tableColumns.getBoolean("NULLABLE")__				TableParameterMetaData meta = new TableParameterMetaData(columnName, dataType, nullable)__				this.tableParameterMetaData.add(meta)__				if (logger.isDebugEnabled()) {_					logger.debug("Retrieved meta-data: " + meta.getParameterName() + " " +_							meta.getSqlType() + " " + meta.isNullable())__				}_			}_		}_		catch (SQLException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Error while retrieving meta-data for table columns: " + ex.getMessage())__			}_		}_		finally {_			JdbcUtils.closeResultSet(tableColumns)__		}_	};method,supporting,the,meta,data,processing,for,a,table,s,columns;private,void,process,table,columns,database,meta,data,database,meta,data,table,meta,data,tmd,result,set,table,columns,null,string,meta,data,catalog,name,meta,data,catalog,name,to,use,tmd,get,catalog,name,string,meta,data,schema,name,meta,data,schema,name,to,use,tmd,get,schema,name,string,meta,data,table,name,table,name,to,use,tmd,get,table,name,if,logger,is,debug,enabled,logger,debug,retrieving,meta,data,for,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,try,table,columns,database,meta,data,get,columns,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,null,while,table,columns,next,string,column,name,table,columns,get,string,int,data,type,table,columns,get,int,if,data,type,types,decimal,string,type,name,table,columns,get,string,int,decimal,digits,table,columns,get,int,if,number,equals,type,name,decimal,digits,0,data,type,types,numeric,if,logger,is,debug,enabled,logger,debug,overriding,meta,data,column,name,now,numeric,instead,of,decimal,boolean,nullable,table,columns,get,boolean,nullable,table,parameter,meta,data,meta,new,table,parameter,meta,data,column,name,data,type,nullable,this,table,parameter,meta,data,add,meta,if,logger,is,debug,enabled,logger,debug,retrieved,meta,data,meta,get,parameter,name,meta,get,sql,type,meta,is,nullable,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,error,while,retrieving,meta,data,for,table,columns,ex,get,message,finally,jdbc,utils,close,result,set,table,columns
GenericTableMetaDataProvider -> private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd);1532091916;Method supporting the meta-data processing for a table's columns.;private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd) {_		ResultSet tableColumns = null__		String metaDataCatalogName = metaDataCatalogNameToUse(tmd.getCatalogName())__		String metaDataSchemaName = metaDataSchemaNameToUse(tmd.getSchemaName())__		String metaDataTableName = tableNameToUse(tmd.getTableName())__		if (logger.isDebugEnabled()) {_			logger.debug("Retrieving meta-data for " + metaDataCatalogName + '/' +_					metaDataSchemaName + '/' + metaDataTableName)__		}_		try {_			tableColumns = databaseMetaData.getColumns(_					metaDataCatalogName, metaDataSchemaName, metaDataTableName, null)__			while (tableColumns.next()) {_				String columnName = tableColumns.getString("COLUMN_NAME")__				int dataType = tableColumns.getInt("DATA_TYPE")__				if (dataType == Types.DECIMAL) {_					String typeName = tableColumns.getString("TYPE_NAME")__					int decimalDigits = tableColumns.getInt("DECIMAL_DIGITS")__					_					_					_					if ("NUMBER".equals(typeName) && decimalDigits == 0) {_						dataType = Types.NUMERIC__						if (logger.isDebugEnabled()) {_							logger.debug("Overriding meta-data: " + columnName + " now NUMERIC instead of DECIMAL")__						}_					}_				}_				boolean nullable = tableColumns.getBoolean("NULLABLE")__				TableParameterMetaData meta = new TableParameterMetaData(columnName, dataType, nullable)__				this.tableParameterMetaData.add(meta)__				if (logger.isDebugEnabled()) {_					logger.debug("Retrieved meta-data: " + meta.getParameterName() + " " +_							meta.getSqlType() + " " + meta.isNullable())__				}_			}_		}_		catch (SQLException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Error while retrieving meta-data for table columns: " + ex.getMessage())__			}_		}_		finally {_			JdbcUtils.closeResultSet(tableColumns)__		}_	};method,supporting,the,meta,data,processing,for,a,table,s,columns;private,void,process,table,columns,database,meta,data,database,meta,data,table,meta,data,tmd,result,set,table,columns,null,string,meta,data,catalog,name,meta,data,catalog,name,to,use,tmd,get,catalog,name,string,meta,data,schema,name,meta,data,schema,name,to,use,tmd,get,schema,name,string,meta,data,table,name,table,name,to,use,tmd,get,table,name,if,logger,is,debug,enabled,logger,debug,retrieving,meta,data,for,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,try,table,columns,database,meta,data,get,columns,meta,data,catalog,name,meta,data,schema,name,meta,data,table,name,null,while,table,columns,next,string,column,name,table,columns,get,string,int,data,type,table,columns,get,int,if,data,type,types,decimal,string,type,name,table,columns,get,string,int,decimal,digits,table,columns,get,int,if,number,equals,type,name,decimal,digits,0,data,type,types,numeric,if,logger,is,debug,enabled,logger,debug,overriding,meta,data,column,name,now,numeric,instead,of,decimal,boolean,nullable,table,columns,get,boolean,nullable,table,parameter,meta,data,meta,new,table,parameter,meta,data,column,name,data,type,nullable,this,table,parameter,meta,data,add,meta,if,logger,is,debug,enabled,logger,debug,retrieved,meta,data,meta,get,parameter,name,meta,get,sql,type,meta,is,nullable,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,error,while,retrieving,meta,data,for,table,columns,ex,get,message,finally,jdbc,utils,close,result,set,table,columns
GenericTableMetaDataProvider -> private void locateTableAndProcessMetaData(DatabaseMetaData databaseMetaData, 			@Nullable String catalogName, @Nullable String schemaName, @Nullable String tableName);1496837955;Method supporting the metadata processing for a table.;private void locateTableAndProcessMetaData(DatabaseMetaData databaseMetaData,_			@Nullable String catalogName, @Nullable String schemaName, @Nullable String tableName) {__		Map<String, TableMetaData> tableMeta = new HashMap<>()__		ResultSet tables = null__		try {_			tables = databaseMetaData.getTables(_					catalogNameToUse(catalogName), schemaNameToUse(schemaName), tableNameToUse(tableName), null)__			while (tables != null && tables.next()) {_				TableMetaData tmd = new TableMetaData()__				tmd.setCatalogName(tables.getString("TABLE_CAT"))__				tmd.setSchemaName(tables.getString("TABLE_SCHEM"))__				tmd.setTableName(tables.getString("TABLE_NAME"))__				if (tmd.getSchemaName() == null) {_					tableMeta.put(this.userName != null ? this.userName.toUpperCase() : "", tmd)__				}_				else {_					tableMeta.put(tmd.getSchemaName().toUpperCase(), tmd)__				}_			}_		}_		catch (SQLException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Error while accessing table meta data results: " + ex.getMessage())__			}_		}_		finally {_			JdbcUtils.closeResultSet(tables)__		}__		if (tableMeta.isEmpty()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Unable to locate table meta data for '" + tableName + "': column names must be provided")__			}_		}_		else {_			processTableColumns(databaseMetaData, findTableMetaData(schemaName, tableName, tableMeta))__		}_	};method,supporting,the,metadata,processing,for,a,table;private,void,locate,table,and,process,meta,data,database,meta,data,database,meta,data,nullable,string,catalog,name,nullable,string,schema,name,nullable,string,table,name,map,string,table,meta,data,table,meta,new,hash,map,result,set,tables,null,try,tables,database,meta,data,get,tables,catalog,name,to,use,catalog,name,schema,name,to,use,schema,name,table,name,to,use,table,name,null,while,tables,null,tables,next,table,meta,data,tmd,new,table,meta,data,tmd,set,catalog,name,tables,get,string,tmd,set,schema,name,tables,get,string,tmd,set,table,name,tables,get,string,if,tmd,get,schema,name,null,table,meta,put,this,user,name,null,this,user,name,to,upper,case,tmd,else,table,meta,put,tmd,get,schema,name,to,upper,case,tmd,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,error,while,accessing,table,meta,data,results,ex,get,message,finally,jdbc,utils,close,result,set,tables,if,table,meta,is,empty,if,logger,is,warn,enabled,logger,warn,unable,to,locate,table,meta,data,for,table,name,column,names,must,be,provided,else,process,table,columns,database,meta,data,find,table,meta,data,schema,name,table,name,table,meta
GenericTableMetaDataProvider -> private void locateTableAndProcessMetaData(DatabaseMetaData databaseMetaData, 			@Nullable String catalogName, @Nullable String schemaName, @Nullable String tableName);1498780456;Method supporting the metadata processing for a table.;private void locateTableAndProcessMetaData(DatabaseMetaData databaseMetaData,_			@Nullable String catalogName, @Nullable String schemaName, @Nullable String tableName) {__		Map<String, TableMetaData> tableMeta = new HashMap<>()__		ResultSet tables = null__		try {_			tables = databaseMetaData.getTables(_					catalogNameToUse(catalogName), schemaNameToUse(schemaName), tableNameToUse(tableName), null)__			while (tables != null && tables.next()) {_				TableMetaData tmd = new TableMetaData()__				tmd.setCatalogName(tables.getString("TABLE_CAT"))__				tmd.setSchemaName(tables.getString("TABLE_SCHEM"))__				tmd.setTableName(tables.getString("TABLE_NAME"))__				if (tmd.getSchemaName() == null) {_					tableMeta.put(this.userName != null ? this.userName.toUpperCase() : "", tmd)__				}_				else {_					tableMeta.put(tmd.getSchemaName().toUpperCase(), tmd)__				}_			}_		}_		catch (SQLException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Error while accessing table meta data results: " + ex.getMessage())__			}_		}_		finally {_			JdbcUtils.closeResultSet(tables)__		}__		if (tableMeta.isEmpty()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Unable to locate table meta data for '" + tableName + "': column names must be provided")__			}_		}_		else {_			processTableColumns(databaseMetaData, findTableMetaData(schemaName, tableName, tableMeta))__		}_	};method,supporting,the,metadata,processing,for,a,table;private,void,locate,table,and,process,meta,data,database,meta,data,database,meta,data,nullable,string,catalog,name,nullable,string,schema,name,nullable,string,table,name,map,string,table,meta,data,table,meta,new,hash,map,result,set,tables,null,try,tables,database,meta,data,get,tables,catalog,name,to,use,catalog,name,schema,name,to,use,schema,name,table,name,to,use,table,name,null,while,tables,null,tables,next,table,meta,data,tmd,new,table,meta,data,tmd,set,catalog,name,tables,get,string,tmd,set,schema,name,tables,get,string,tmd,set,table,name,tables,get,string,if,tmd,get,schema,name,null,table,meta,put,this,user,name,null,this,user,name,to,upper,case,tmd,else,table,meta,put,tmd,get,schema,name,to,upper,case,tmd,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,error,while,accessing,table,meta,data,results,ex,get,message,finally,jdbc,utils,close,result,set,tables,if,table,meta,is,empty,if,logger,is,warn,enabled,logger,warn,unable,to,locate,table,meta,data,for,table,name,column,names,must,be,provided,else,process,table,columns,database,meta,data,find,table,meta,data,schema,name,table,name,table,meta
GenericTableMetaDataProvider -> private void locateTableAndProcessMetaData(DatabaseMetaData databaseMetaData, 			@Nullable String catalogName, @Nullable String schemaName, @Nullable String tableName);1502974979;Method supporting the metadata processing for a table.;private void locateTableAndProcessMetaData(DatabaseMetaData databaseMetaData,_			@Nullable String catalogName, @Nullable String schemaName, @Nullable String tableName) {__		Map<String, TableMetaData> tableMeta = new HashMap<>()__		ResultSet tables = null__		try {_			tables = databaseMetaData.getTables(_					catalogNameToUse(catalogName), schemaNameToUse(schemaName), tableNameToUse(tableName), null)__			while (tables != null && tables.next()) {_				TableMetaData tmd = new TableMetaData()__				tmd.setCatalogName(tables.getString("TABLE_CAT"))__				tmd.setSchemaName(tables.getString("TABLE_SCHEM"))__				tmd.setTableName(tables.getString("TABLE_NAME"))__				if (tmd.getSchemaName() == null) {_					tableMeta.put(this.userName != null ? this.userName.toUpperCase() : "", tmd)__				}_				else {_					tableMeta.put(tmd.getSchemaName().toUpperCase(), tmd)__				}_			}_		}_		catch (SQLException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Error while accessing table meta data results: " + ex.getMessage())__			}_		}_		finally {_			JdbcUtils.closeResultSet(tables)__		}__		if (tableMeta.isEmpty()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Unable to locate table meta data for '" + tableName + "': column names must be provided")__			}_		}_		else {_			processTableColumns(databaseMetaData, findTableMetaData(schemaName, tableName, tableMeta))__		}_	};method,supporting,the,metadata,processing,for,a,table;private,void,locate,table,and,process,meta,data,database,meta,data,database,meta,data,nullable,string,catalog,name,nullable,string,schema,name,nullable,string,table,name,map,string,table,meta,data,table,meta,new,hash,map,result,set,tables,null,try,tables,database,meta,data,get,tables,catalog,name,to,use,catalog,name,schema,name,to,use,schema,name,table,name,to,use,table,name,null,while,tables,null,tables,next,table,meta,data,tmd,new,table,meta,data,tmd,set,catalog,name,tables,get,string,tmd,set,schema,name,tables,get,string,tmd,set,table,name,tables,get,string,if,tmd,get,schema,name,null,table,meta,put,this,user,name,null,this,user,name,to,upper,case,tmd,else,table,meta,put,tmd,get,schema,name,to,upper,case,tmd,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,error,while,accessing,table,meta,data,results,ex,get,message,finally,jdbc,utils,close,result,set,tables,if,table,meta,is,empty,if,logger,is,warn,enabled,logger,warn,unable,to,locate,table,meta,data,for,table,name,column,names,must,be,provided,else,process,table,columns,database,meta,data,find,table,meta,data,schema,name,table,name,table,meta
GenericTableMetaDataProvider -> private void locateTableAndProcessMetaData(DatabaseMetaData databaseMetaData, 			@Nullable String catalogName, @Nullable String schemaName, @Nullable String tableName);1520339775;Method supporting the metadata processing for a table.;private void locateTableAndProcessMetaData(DatabaseMetaData databaseMetaData,_			@Nullable String catalogName, @Nullable String schemaName, @Nullable String tableName) {__		Map<String, TableMetaData> tableMeta = new HashMap<>()__		ResultSet tables = null__		try {_			tables = databaseMetaData.getTables(_					catalogNameToUse(catalogName), schemaNameToUse(schemaName), tableNameToUse(tableName), null)__			while (tables != null && tables.next()) {_				TableMetaData tmd = new TableMetaData()__				tmd.setCatalogName(tables.getString("TABLE_CAT"))__				tmd.setSchemaName(tables.getString("TABLE_SCHEM"))__				tmd.setTableName(tables.getString("TABLE_NAME"))__				if (tmd.getSchemaName() == null) {_					tableMeta.put(this.userName != null ? this.userName.toUpperCase() : "", tmd)__				}_				else {_					tableMeta.put(tmd.getSchemaName().toUpperCase(), tmd)__				}_			}_		}_		catch (SQLException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Error while accessing table meta data results: " + ex.getMessage())__			}_		}_		finally {_			JdbcUtils.closeResultSet(tables)__		}__		if (tableMeta.isEmpty()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Unable to locate table meta data for '" + tableName + "': column names must be provided")__			}_		}_		else {_			processTableColumns(databaseMetaData, findTableMetaData(schemaName, tableName, tableMeta))__		}_	};method,supporting,the,metadata,processing,for,a,table;private,void,locate,table,and,process,meta,data,database,meta,data,database,meta,data,nullable,string,catalog,name,nullable,string,schema,name,nullable,string,table,name,map,string,table,meta,data,table,meta,new,hash,map,result,set,tables,null,try,tables,database,meta,data,get,tables,catalog,name,to,use,catalog,name,schema,name,to,use,schema,name,table,name,to,use,table,name,null,while,tables,null,tables,next,table,meta,data,tmd,new,table,meta,data,tmd,set,catalog,name,tables,get,string,tmd,set,schema,name,tables,get,string,tmd,set,table,name,tables,get,string,if,tmd,get,schema,name,null,table,meta,put,this,user,name,null,this,user,name,to,upper,case,tmd,else,table,meta,put,tmd,get,schema,name,to,upper,case,tmd,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,error,while,accessing,table,meta,data,results,ex,get,message,finally,jdbc,utils,close,result,set,tables,if,table,meta,is,empty,if,logger,is,warn,enabled,logger,warn,unable,to,locate,table,meta,data,for,table,name,column,names,must,be,provided,else,process,table,columns,database,meta,data,find,table,meta,data,schema,name,table,name,table,meta
GenericTableMetaDataProvider -> private void locateTableAndProcessMetaData(DatabaseMetaData databaseMetaData, 			@Nullable String catalogName, @Nullable String schemaName, @Nullable String tableName);1521457504;Method supporting the meta-data processing for a table.;private void locateTableAndProcessMetaData(DatabaseMetaData databaseMetaData,_			@Nullable String catalogName, @Nullable String schemaName, @Nullable String tableName) {__		Map<String, TableMetaData> tableMeta = new HashMap<>()__		ResultSet tables = null__		try {_			tables = databaseMetaData.getTables(_					catalogNameToUse(catalogName), schemaNameToUse(schemaName), tableNameToUse(tableName), null)__			while (tables != null && tables.next()) {_				TableMetaData tmd = new TableMetaData()__				tmd.setCatalogName(tables.getString("TABLE_CAT"))__				tmd.setSchemaName(tables.getString("TABLE_SCHEM"))__				tmd.setTableName(tables.getString("TABLE_NAME"))__				if (tmd.getSchemaName() == null) {_					tableMeta.put(this.userName != null ? this.userName.toUpperCase() : "", tmd)__				}_				else {_					tableMeta.put(tmd.getSchemaName().toUpperCase(), tmd)__				}_			}_		}_		catch (SQLException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Error while accessing table meta-data results: " + ex.getMessage())__			}_		}_		finally {_			JdbcUtils.closeResultSet(tables)__		}__		if (tableMeta.isEmpty()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Unable to locate table meta-data for '" + tableName + "': column names must be provided")__			}_		}_		else {_			processTableColumns(databaseMetaData, findTableMetaData(schemaName, tableName, tableMeta))__		}_	};method,supporting,the,meta,data,processing,for,a,table;private,void,locate,table,and,process,meta,data,database,meta,data,database,meta,data,nullable,string,catalog,name,nullable,string,schema,name,nullable,string,table,name,map,string,table,meta,data,table,meta,new,hash,map,result,set,tables,null,try,tables,database,meta,data,get,tables,catalog,name,to,use,catalog,name,schema,name,to,use,schema,name,table,name,to,use,table,name,null,while,tables,null,tables,next,table,meta,data,tmd,new,table,meta,data,tmd,set,catalog,name,tables,get,string,tmd,set,schema,name,tables,get,string,tmd,set,table,name,tables,get,string,if,tmd,get,schema,name,null,table,meta,put,this,user,name,null,this,user,name,to,upper,case,tmd,else,table,meta,put,tmd,get,schema,name,to,upper,case,tmd,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,error,while,accessing,table,meta,data,results,ex,get,message,finally,jdbc,utils,close,result,set,tables,if,table,meta,is,empty,if,logger,is,warn,enabled,logger,warn,unable,to,locate,table,meta,data,for,table,name,column,names,must,be,provided,else,process,table,columns,database,meta,data,find,table,meta,data,schema,name,table,name,table,meta
GenericTableMetaDataProvider -> private void locateTableAndProcessMetaData(DatabaseMetaData databaseMetaData, 			@Nullable String catalogName, @Nullable String schemaName, @Nullable String tableName);1530174524;Method supporting the meta-data processing for a table.;private void locateTableAndProcessMetaData(DatabaseMetaData databaseMetaData,_			@Nullable String catalogName, @Nullable String schemaName, @Nullable String tableName) {__		Map<String, TableMetaData> tableMeta = new HashMap<>()__		ResultSet tables = null__		try {_			tables = databaseMetaData.getTables(_					catalogNameToUse(catalogName), schemaNameToUse(schemaName), tableNameToUse(tableName), null)__			while (tables != null && tables.next()) {_				TableMetaData tmd = new TableMetaData()__				tmd.setCatalogName(tables.getString("TABLE_CAT"))__				tmd.setSchemaName(tables.getString("TABLE_SCHEM"))__				tmd.setTableName(tables.getString("TABLE_NAME"))__				if (tmd.getSchemaName() == null) {_					tableMeta.put(this.userName != null ? this.userName.toUpperCase() : "", tmd)__				}_				else {_					tableMeta.put(tmd.getSchemaName().toUpperCase(), tmd)__				}_			}_		}_		catch (SQLException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Error while accessing table meta-data results: " + ex.getMessage())__			}_		}_		finally {_			JdbcUtils.closeResultSet(tables)__		}__		if (tableMeta.isEmpty()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Unable to locate table meta-data for '" + tableName + "': column names must be provided")__			}_		}_		else {_			processTableColumns(databaseMetaData, findTableMetaData(schemaName, tableName, tableMeta))__		}_	};method,supporting,the,meta,data,processing,for,a,table;private,void,locate,table,and,process,meta,data,database,meta,data,database,meta,data,nullable,string,catalog,name,nullable,string,schema,name,nullable,string,table,name,map,string,table,meta,data,table,meta,new,hash,map,result,set,tables,null,try,tables,database,meta,data,get,tables,catalog,name,to,use,catalog,name,schema,name,to,use,schema,name,table,name,to,use,table,name,null,while,tables,null,tables,next,table,meta,data,tmd,new,table,meta,data,tmd,set,catalog,name,tables,get,string,tmd,set,schema,name,tables,get,string,tmd,set,table,name,tables,get,string,if,tmd,get,schema,name,null,table,meta,put,this,user,name,null,this,user,name,to,upper,case,tmd,else,table,meta,put,tmd,get,schema,name,to,upper,case,tmd,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,error,while,accessing,table,meta,data,results,ex,get,message,finally,jdbc,utils,close,result,set,tables,if,table,meta,is,empty,if,logger,is,warn,enabled,logger,warn,unable,to,locate,table,meta,data,for,table,name,column,names,must,be,provided,else,process,table,columns,database,meta,data,find,table,meta,data,schema,name,table,name,table,meta
GenericTableMetaDataProvider -> private void locateTableAndProcessMetaData(DatabaseMetaData databaseMetaData, 			@Nullable String catalogName, @Nullable String schemaName, @Nullable String tableName);1532091916;Method supporting the meta-data processing for a table.;private void locateTableAndProcessMetaData(DatabaseMetaData databaseMetaData,_			@Nullable String catalogName, @Nullable String schemaName, @Nullable String tableName) {__		Map<String, TableMetaData> tableMeta = new HashMap<>()__		ResultSet tables = null__		try {_			tables = databaseMetaData.getTables(_					catalogNameToUse(catalogName), schemaNameToUse(schemaName), tableNameToUse(tableName), null)__			while (tables != null && tables.next()) {_				TableMetaData tmd = new TableMetaData()__				tmd.setCatalogName(tables.getString("TABLE_CAT"))__				tmd.setSchemaName(tables.getString("TABLE_SCHEM"))__				tmd.setTableName(tables.getString("TABLE_NAME"))__				if (tmd.getSchemaName() == null) {_					tableMeta.put(this.userName != null ? this.userName.toUpperCase() : "", tmd)__				}_				else {_					tableMeta.put(tmd.getSchemaName().toUpperCase(), tmd)__				}_			}_		}_		catch (SQLException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Error while accessing table meta-data results: " + ex.getMessage())__			}_		}_		finally {_			JdbcUtils.closeResultSet(tables)__		}__		if (tableMeta.isEmpty()) {_			if (logger.isInfoEnabled()) {_				logger.info("Unable to locate table meta-data for '" + tableName + "': column names must be provided")__			}_		}_		else {_			processTableColumns(databaseMetaData, findTableMetaData(schemaName, tableName, tableMeta))__		}_	};method,supporting,the,meta,data,processing,for,a,table;private,void,locate,table,and,process,meta,data,database,meta,data,database,meta,data,nullable,string,catalog,name,nullable,string,schema,name,nullable,string,table,name,map,string,table,meta,data,table,meta,new,hash,map,result,set,tables,null,try,tables,database,meta,data,get,tables,catalog,name,to,use,catalog,name,schema,name,to,use,schema,name,table,name,to,use,table,name,null,while,tables,null,tables,next,table,meta,data,tmd,new,table,meta,data,tmd,set,catalog,name,tables,get,string,tmd,set,schema,name,tables,get,string,tmd,set,table,name,tables,get,string,if,tmd,get,schema,name,null,table,meta,put,this,user,name,null,this,user,name,to,upper,case,tmd,else,table,meta,put,tmd,get,schema,name,to,upper,case,tmd,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,error,while,accessing,table,meta,data,results,ex,get,message,finally,jdbc,utils,close,result,set,tables,if,table,meta,is,empty,if,logger,is,info,enabled,logger,info,unable,to,locate,table,meta,data,for,table,name,column,names,must,be,provided,else,process,table,columns,database,meta,data,find,table,meta,data,schema,name,table,name,table,meta
GenericTableMetaDataProvider -> protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException;1328020251;Constructor used to initialize with provided database meta data._@param databaseMetaData meta data to be used;protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException {_		this.userName = databaseMetaData.getUserName()__	};constructor,used,to,initialize,with,provided,database,meta,data,param,database,meta,data,meta,data,to,be,used;protected,generic,table,meta,data,provider,database,meta,data,database,meta,data,throws,sqlexception,this,user,name,database,meta,data,get,user,name
GenericTableMetaDataProvider -> protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException;1329142650;Constructor used to initialize with provided database meta data._@param databaseMetaData meta data to be used;protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException {_		this.userName = databaseMetaData.getUserName()__	};constructor,used,to,initialize,with,provided,database,meta,data,param,database,meta,data,meta,data,to,be,used;protected,generic,table,meta,data,provider,database,meta,data,database,meta,data,throws,sqlexception,this,user,name,database,meta,data,get,user,name
GenericTableMetaDataProvider -> protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException;1356735495;Constructor used to initialize with provided database meta data._@param databaseMetaData meta data to be used;protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException {_		this.userName = databaseMetaData.getUserName()__	};constructor,used,to,initialize,with,provided,database,meta,data,param,database,meta,data,meta,data,to,be,used;protected,generic,table,meta,data,provider,database,meta,data,database,meta,data,throws,sqlexception,this,user,name,database,meta,data,get,user,name
GenericTableMetaDataProvider -> protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException;1357119239;Constructor used to initialize with provided database meta data._@param databaseMetaData meta data to be used;protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException {_		this.userName = databaseMetaData.getUserName()__	};constructor,used,to,initialize,with,provided,database,meta,data,param,database,meta,data,meta,data,to,be,used;protected,generic,table,meta,data,provider,database,meta,data,database,meta,data,throws,sqlexception,this,user,name,database,meta,data,get,user,name
GenericTableMetaDataProvider -> protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException;1362408075;Constructor used to initialize with provided database meta data._@param databaseMetaData meta data to be used;protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException {_		this.userName = databaseMetaData.getUserName()__	};constructor,used,to,initialize,with,provided,database,meta,data,param,database,meta,data,meta,data,to,be,used;protected,generic,table,meta,data,provider,database,meta,data,database,meta,data,throws,sqlexception,this,user,name,database,meta,data,get,user,name
GenericTableMetaDataProvider -> protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException;1368482696;Constructor used to initialize with provided database meta data._@param databaseMetaData meta data to be used;protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException {_		this.userName = databaseMetaData.getUserName()__	};constructor,used,to,initialize,with,provided,database,meta,data,param,database,meta,data,meta,data,to,be,used;protected,generic,table,meta,data,provider,database,meta,data,database,meta,data,throws,sqlexception,this,user,name,database,meta,data,get,user,name
GenericTableMetaDataProvider -> protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException;1385423968;Constructor used to initialize with provided database meta data._@param databaseMetaData meta data to be used;protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException {_		this.userName = databaseMetaData.getUserName()__	};constructor,used,to,initialize,with,provided,database,meta,data,param,database,meta,data,meta,data,to,be,used;protected,generic,table,meta,data,provider,database,meta,data,database,meta,data,throws,sqlexception,this,user,name,database,meta,data,get,user,name
GenericTableMetaDataProvider -> protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException;1405696918;Constructor used to initialize with provided database meta data._@param databaseMetaData meta data to be used;protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException {_		this.userName = databaseMetaData.getUserName()__	};constructor,used,to,initialize,with,provided,database,meta,data,param,database,meta,data,meta,data,to,be,used;protected,generic,table,meta,data,provider,database,meta,data,database,meta,data,throws,sqlexception,this,user,name,database,meta,data,get,user,name
GenericTableMetaDataProvider -> protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException;1429214043;Constructor used to initialize with provided database meta data._@param databaseMetaData meta data to be used;protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException {_		this.userName = databaseMetaData.getUserName()__	};constructor,used,to,initialize,with,provided,database,meta,data,param,database,meta,data,meta,data,to,be,used;protected,generic,table,meta,data,provider,database,meta,data,database,meta,data,throws,sqlexception,this,user,name,database,meta,data,get,user,name
GenericTableMetaDataProvider -> protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException;1467730834;Constructor used to initialize with provided database meta data._@param databaseMetaData meta data to be used;protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException {_		this.userName = databaseMetaData.getUserName()__	};constructor,used,to,initialize,with,provided,database,meta,data,param,database,meta,data,meta,data,to,be,used;protected,generic,table,meta,data,provider,database,meta,data,database,meta,data,throws,sqlexception,this,user,name,database,meta,data,get,user,name
GenericTableMetaDataProvider -> protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException;1477045587;Constructor used to initialize with provided database meta data._@param databaseMetaData meta data to be used;protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException {_		this.userName = databaseMetaData.getUserName()__	};constructor,used,to,initialize,with,provided,database,meta,data,param,database,meta,data,meta,data,to,be,used;protected,generic,table,meta,data,provider,database,meta,data,database,meta,data,throws,sqlexception,this,user,name,database,meta,data,get,user,name
GenericTableMetaDataProvider -> protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException;1484252108;Constructor used to initialize with provided database meta data._@param databaseMetaData meta data to be used;protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException {_		this.userName = databaseMetaData.getUserName()__	};constructor,used,to,initialize,with,provided,database,meta,data,param,database,meta,data,meta,data,to,be,used;protected,generic,table,meta,data,provider,database,meta,data,database,meta,data,throws,sqlexception,this,user,name,database,meta,data,get,user,name
GenericTableMetaDataProvider -> protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException;1487178248;Constructor used to initialize with provided database metadata._@param databaseMetaData metadata to be used;protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException {_		this.userName = databaseMetaData.getUserName()__	};constructor,used,to,initialize,with,provided,database,metadata,param,database,meta,data,metadata,to,be,used;protected,generic,table,meta,data,provider,database,meta,data,database,meta,data,throws,sqlexception,this,user,name,database,meta,data,get,user,name
GenericTableMetaDataProvider -> protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException;1496242568;Constructor used to initialize with provided database metadata._@param databaseMetaData metadata to be used;protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException {_		this.userName = databaseMetaData.getUserName()__	};constructor,used,to,initialize,with,provided,database,metadata,param,database,meta,data,metadata,to,be,used;protected,generic,table,meta,data,provider,database,meta,data,database,meta,data,throws,sqlexception,this,user,name,database,meta,data,get,user,name
GenericTableMetaDataProvider -> protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException;1496837955;Constructor used to initialize with provided database metadata._@param databaseMetaData metadata to be used;protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException {_		this.userName = databaseMetaData.getUserName()__	};constructor,used,to,initialize,with,provided,database,metadata,param,database,meta,data,metadata,to,be,used;protected,generic,table,meta,data,provider,database,meta,data,database,meta,data,throws,sqlexception,this,user,name,database,meta,data,get,user,name
GenericTableMetaDataProvider -> protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException;1498780456;Constructor used to initialize with provided database metadata._@param databaseMetaData metadata to be used;protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException {_		this.userName = databaseMetaData.getUserName()__	};constructor,used,to,initialize,with,provided,database,metadata,param,database,meta,data,metadata,to,be,used;protected,generic,table,meta,data,provider,database,meta,data,database,meta,data,throws,sqlexception,this,user,name,database,meta,data,get,user,name
GenericTableMetaDataProvider -> protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException;1502974979;Constructor used to initialize with provided database metadata._@param databaseMetaData metadata to be used;protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException {_		this.userName = databaseMetaData.getUserName()__	};constructor,used,to,initialize,with,provided,database,metadata,param,database,meta,data,metadata,to,be,used;protected,generic,table,meta,data,provider,database,meta,data,database,meta,data,throws,sqlexception,this,user,name,database,meta,data,get,user,name
GenericTableMetaDataProvider -> protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException;1520339775;Constructor used to initialize with provided database metadata._@param databaseMetaData metadata to be used;protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException {_		this.userName = databaseMetaData.getUserName()__	};constructor,used,to,initialize,with,provided,database,metadata,param,database,meta,data,metadata,to,be,used;protected,generic,table,meta,data,provider,database,meta,data,database,meta,data,throws,sqlexception,this,user,name,database,meta,data,get,user,name
GenericTableMetaDataProvider -> protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException;1521457504;Constructor used to initialize with provided database meta-data._@param databaseMetaData meta-data to be used;protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException {_		this.userName = databaseMetaData.getUserName()__	};constructor,used,to,initialize,with,provided,database,meta,data,param,database,meta,data,meta,data,to,be,used;protected,generic,table,meta,data,provider,database,meta,data,database,meta,data,throws,sqlexception,this,user,name,database,meta,data,get,user,name
GenericTableMetaDataProvider -> protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException;1530174524;Constructor used to initialize with provided database meta-data._@param databaseMetaData meta-data to be used;protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException {_		this.userName = databaseMetaData.getUserName()__	};constructor,used,to,initialize,with,provided,database,meta,data,param,database,meta,data,meta,data,to,be,used;protected,generic,table,meta,data,provider,database,meta,data,database,meta,data,throws,sqlexception,this,user,name,database,meta,data,get,user,name
GenericTableMetaDataProvider -> protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException;1532091916;Constructor used to initialize with provided database meta-data._@param databaseMetaData meta-data to be used;protected GenericTableMetaDataProvider(DatabaseMetaData databaseMetaData) throws SQLException {_		this.userName = databaseMetaData.getUserName()__	};constructor,used,to,initialize,with,provided,database,meta,data,param,database,meta,data,meta,data,to,be,used;protected,generic,table,meta,data,provider,database,meta,data,database,meta,data,throws,sqlexception,this,user,name,database,meta,data,get,user,name
GenericTableMetaDataProvider -> public void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers);1328020251;Specify whether identifiers use upper case;public void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers) {_		this.storesUpperCaseIdentifiers = storesUpperCaseIdentifiers__	};specify,whether,identifiers,use,upper,case;public,void,set,stores,upper,case,identifiers,boolean,stores,upper,case,identifiers,this,stores,upper,case,identifiers,stores,upper,case,identifiers
GenericTableMetaDataProvider -> public void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers);1329142650;Specify whether identifiers use upper case;public void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers) {_		this.storesUpperCaseIdentifiers = storesUpperCaseIdentifiers__	};specify,whether,identifiers,use,upper,case;public,void,set,stores,upper,case,identifiers,boolean,stores,upper,case,identifiers,this,stores,upper,case,identifiers,stores,upper,case,identifiers
GenericTableMetaDataProvider -> public void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers);1356735495;Specify whether identifiers use upper case;public void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers) {_		this.storesUpperCaseIdentifiers = storesUpperCaseIdentifiers__	};specify,whether,identifiers,use,upper,case;public,void,set,stores,upper,case,identifiers,boolean,stores,upper,case,identifiers,this,stores,upper,case,identifiers,stores,upper,case,identifiers
GenericTableMetaDataProvider -> public void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers);1357119239;Specify whether identifiers use upper case;public void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers) {_		this.storesUpperCaseIdentifiers = storesUpperCaseIdentifiers__	};specify,whether,identifiers,use,upper,case;public,void,set,stores,upper,case,identifiers,boolean,stores,upper,case,identifiers,this,stores,upper,case,identifiers,stores,upper,case,identifiers
GenericTableMetaDataProvider -> public void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers);1362408075;Specify whether identifiers use upper case;public void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers) {_		this.storesUpperCaseIdentifiers = storesUpperCaseIdentifiers__	};specify,whether,identifiers,use,upper,case;public,void,set,stores,upper,case,identifiers,boolean,stores,upper,case,identifiers,this,stores,upper,case,identifiers,stores,upper,case,identifiers
GenericTableMetaDataProvider -> public void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers);1368482696;Specify whether identifiers use upper case;public void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers) {_		this.storesUpperCaseIdentifiers = storesUpperCaseIdentifiers__	};specify,whether,identifiers,use,upper,case;public,void,set,stores,upper,case,identifiers,boolean,stores,upper,case,identifiers,this,stores,upper,case,identifiers,stores,upper,case,identifiers
GenericTableMetaDataProvider -> public void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers);1385423968;Specify whether identifiers use upper case;public void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers) {_		this.storesUpperCaseIdentifiers = storesUpperCaseIdentifiers__	};specify,whether,identifiers,use,upper,case;public,void,set,stores,upper,case,identifiers,boolean,stores,upper,case,identifiers,this,stores,upper,case,identifiers,stores,upper,case,identifiers
GenericTableMetaDataProvider -> public void setGetGeneratedKeysSupported(boolean getGeneratedKeysSupported);1328020251;Specify whether a column name array is supported for generated keys;public void setGetGeneratedKeysSupported(boolean getGeneratedKeysSupported) {_		this.getGeneratedKeysSupported = getGeneratedKeysSupported__	};specify,whether,a,column,name,array,is,supported,for,generated,keys;public,void,set,get,generated,keys,supported,boolean,get,generated,keys,supported,this,get,generated,keys,supported,get,generated,keys,supported
GenericTableMetaDataProvider -> public void setGetGeneratedKeysSupported(boolean getGeneratedKeysSupported);1329142650;Specify whether a column name array is supported for generated keys;public void setGetGeneratedKeysSupported(boolean getGeneratedKeysSupported) {_		this.getGeneratedKeysSupported = getGeneratedKeysSupported__	};specify,whether,a,column,name,array,is,supported,for,generated,keys;public,void,set,get,generated,keys,supported,boolean,get,generated,keys,supported,this,get,generated,keys,supported,get,generated,keys,supported
GenericTableMetaDataProvider -> public void setGetGeneratedKeysSupported(boolean getGeneratedKeysSupported);1356735495;Specify whether a column name array is supported for generated keys;public void setGetGeneratedKeysSupported(boolean getGeneratedKeysSupported) {_		this.getGeneratedKeysSupported = getGeneratedKeysSupported__	};specify,whether,a,column,name,array,is,supported,for,generated,keys;public,void,set,get,generated,keys,supported,boolean,get,generated,keys,supported,this,get,generated,keys,supported,get,generated,keys,supported
GenericTableMetaDataProvider -> public void setGetGeneratedKeysSupported(boolean getGeneratedKeysSupported);1357119239;Specify whether a column name array is supported for generated keys;public void setGetGeneratedKeysSupported(boolean getGeneratedKeysSupported) {_		this.getGeneratedKeysSupported = getGeneratedKeysSupported__	};specify,whether,a,column,name,array,is,supported,for,generated,keys;public,void,set,get,generated,keys,supported,boolean,get,generated,keys,supported,this,get,generated,keys,supported,get,generated,keys,supported
GenericTableMetaDataProvider -> public void setGetGeneratedKeysSupported(boolean getGeneratedKeysSupported);1362408075;Specify whether a column name array is supported for generated keys;public void setGetGeneratedKeysSupported(boolean getGeneratedKeysSupported) {_		this.getGeneratedKeysSupported = getGeneratedKeysSupported__	};specify,whether,a,column,name,array,is,supported,for,generated,keys;public,void,set,get,generated,keys,supported,boolean,get,generated,keys,supported,this,get,generated,keys,supported,get,generated,keys,supported
GenericTableMetaDataProvider -> public void setGetGeneratedKeysSupported(boolean getGeneratedKeysSupported);1368482696;Specify whether a column name array is supported for generated keys;public void setGetGeneratedKeysSupported(boolean getGeneratedKeysSupported) {_		this.getGeneratedKeysSupported = getGeneratedKeysSupported__	};specify,whether,a,column,name,array,is,supported,for,generated,keys;public,void,set,get,generated,keys,supported,boolean,get,generated,keys,supported,this,get,generated,keys,supported,get,generated,keys,supported
GenericTableMetaDataProvider -> public void setGetGeneratedKeysSupported(boolean getGeneratedKeysSupported);1385423968;Specify whether a column name array is supported for generated keys;public void setGetGeneratedKeysSupported(boolean getGeneratedKeysSupported) {_		this.getGeneratedKeysSupported = getGeneratedKeysSupported__	};specify,whether,a,column,name,array,is,supported,for,generated,keys;public,void,set,get,generated,keys,supported,boolean,get,generated,keys,supported,this,get,generated,keys,supported,get,generated,keys,supported
GenericTableMetaDataProvider -> public void setGeneratedKeysColumnNameArraySupported(boolean generatedKeysColumnNameArraySupported);1328020251;Specify whether a column name array is supported for generated keys;public void setGeneratedKeysColumnNameArraySupported(boolean generatedKeysColumnNameArraySupported) {_		this.generatedKeysColumnNameArraySupported = generatedKeysColumnNameArraySupported__	};specify,whether,a,column,name,array,is,supported,for,generated,keys;public,void,set,generated,keys,column,name,array,supported,boolean,generated,keys,column,name,array,supported,this,generated,keys,column,name,array,supported,generated,keys,column,name,array,supported
GenericTableMetaDataProvider -> public void setGeneratedKeysColumnNameArraySupported(boolean generatedKeysColumnNameArraySupported);1329142650;Specify whether a column name array is supported for generated keys;public void setGeneratedKeysColumnNameArraySupported(boolean generatedKeysColumnNameArraySupported) {_		this.generatedKeysColumnNameArraySupported = generatedKeysColumnNameArraySupported__	};specify,whether,a,column,name,array,is,supported,for,generated,keys;public,void,set,generated,keys,column,name,array,supported,boolean,generated,keys,column,name,array,supported,this,generated,keys,column,name,array,supported,generated,keys,column,name,array,supported
GenericTableMetaDataProvider -> public void setGeneratedKeysColumnNameArraySupported(boolean generatedKeysColumnNameArraySupported);1356735495;Specify whether a column name array is supported for generated keys;public void setGeneratedKeysColumnNameArraySupported(boolean generatedKeysColumnNameArraySupported) {_		this.generatedKeysColumnNameArraySupported = generatedKeysColumnNameArraySupported__	};specify,whether,a,column,name,array,is,supported,for,generated,keys;public,void,set,generated,keys,column,name,array,supported,boolean,generated,keys,column,name,array,supported,this,generated,keys,column,name,array,supported,generated,keys,column,name,array,supported
GenericTableMetaDataProvider -> public void setGeneratedKeysColumnNameArraySupported(boolean generatedKeysColumnNameArraySupported);1357119239;Specify whether a column name array is supported for generated keys;public void setGeneratedKeysColumnNameArraySupported(boolean generatedKeysColumnNameArraySupported) {_		this.generatedKeysColumnNameArraySupported = generatedKeysColumnNameArraySupported__	};specify,whether,a,column,name,array,is,supported,for,generated,keys;public,void,set,generated,keys,column,name,array,supported,boolean,generated,keys,column,name,array,supported,this,generated,keys,column,name,array,supported,generated,keys,column,name,array,supported
GenericTableMetaDataProvider -> public void setGeneratedKeysColumnNameArraySupported(boolean generatedKeysColumnNameArraySupported);1362408075;Specify whether a column name array is supported for generated keys;public void setGeneratedKeysColumnNameArraySupported(boolean generatedKeysColumnNameArraySupported) {_		this.generatedKeysColumnNameArraySupported = generatedKeysColumnNameArraySupported__	};specify,whether,a,column,name,array,is,supported,for,generated,keys;public,void,set,generated,keys,column,name,array,supported,boolean,generated,keys,column,name,array,supported,this,generated,keys,column,name,array,supported,generated,keys,column,name,array,supported
GenericTableMetaDataProvider -> public void setGeneratedKeysColumnNameArraySupported(boolean generatedKeysColumnNameArraySupported);1368482696;Specify whether a column name array is supported for generated keys;public void setGeneratedKeysColumnNameArraySupported(boolean generatedKeysColumnNameArraySupported) {_		this.generatedKeysColumnNameArraySupported = generatedKeysColumnNameArraySupported__	};specify,whether,a,column,name,array,is,supported,for,generated,keys;public,void,set,generated,keys,column,name,array,supported,boolean,generated,keys,column,name,array,supported,this,generated,keys,column,name,array,supported,generated,keys,column,name,array,supported
GenericTableMetaDataProvider -> public void setGeneratedKeysColumnNameArraySupported(boolean generatedKeysColumnNameArraySupported);1385423968;Specify whether a column name array is supported for generated keys;public void setGeneratedKeysColumnNameArraySupported(boolean generatedKeysColumnNameArraySupported) {_		this.generatedKeysColumnNameArraySupported = generatedKeysColumnNameArraySupported__	};specify,whether,a,column,name,array,is,supported,for,generated,keys;public,void,set,generated,keys,column,name,array,supported,boolean,generated,keys,column,name,array,supported,this,generated,keys,column,name,array,supported,generated,keys,column,name,array,supported
GenericTableMetaDataProvider -> private void locateTableAndProcessMetaData( 			DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String tableName);1484252108;Method supporting the metedata processing for a table.;private void locateTableAndProcessMetaData(_			DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String tableName) {__		Map<String, TableMetaData> tableMeta = new HashMap<>()__		ResultSet tables = null__		try {_			tables = databaseMetaData.getTables(_					catalogNameToUse(catalogName), schemaNameToUse(schemaName), tableNameToUse(tableName), null)__			while (tables != null && tables.next()) {_				TableMetaData tmd = new TableMetaData()__				tmd.setCatalogName(tables.getString("TABLE_CAT"))__				tmd.setSchemaName(tables.getString("TABLE_SCHEM"))__				tmd.setTableName(tables.getString("TABLE_NAME"))__				if (tmd.getSchemaName() == null) {_					tableMeta.put(this.userName != null ? this.userName.toUpperCase() : "", tmd)__				}_				else {_					tableMeta.put(tmd.getSchemaName().toUpperCase(), tmd)__				}_			}_		}_		catch (SQLException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Error while accessing table meta data results: " + ex.getMessage())__			}_		}_		finally {_			JdbcUtils.closeResultSet(tables)__		}__		if (tableMeta.isEmpty()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Unable to locate table meta data for '" + tableName + "': column names must be provided")__			}_		}_		else {_			processTableColumns(databaseMetaData, findTableMetaData(schemaName, tableName, tableMeta))__		}_	};method,supporting,the,metedata,processing,for,a,table;private,void,locate,table,and,process,meta,data,database,meta,data,database,meta,data,string,catalog,name,string,schema,name,string,table,name,map,string,table,meta,data,table,meta,new,hash,map,result,set,tables,null,try,tables,database,meta,data,get,tables,catalog,name,to,use,catalog,name,schema,name,to,use,schema,name,table,name,to,use,table,name,null,while,tables,null,tables,next,table,meta,data,tmd,new,table,meta,data,tmd,set,catalog,name,tables,get,string,tmd,set,schema,name,tables,get,string,tmd,set,table,name,tables,get,string,if,tmd,get,schema,name,null,table,meta,put,this,user,name,null,this,user,name,to,upper,case,tmd,else,table,meta,put,tmd,get,schema,name,to,upper,case,tmd,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,error,while,accessing,table,meta,data,results,ex,get,message,finally,jdbc,utils,close,result,set,tables,if,table,meta,is,empty,if,logger,is,warn,enabled,logger,warn,unable,to,locate,table,meta,data,for,table,name,column,names,must,be,provided,else,process,table,columns,database,meta,data,find,table,meta,data,schema,name,table,name,table,meta
GenericTableMetaDataProvider -> private void locateTableAndProcessMetaData( 			DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String tableName);1487178248;Method supporting the metadata processing for a table.;private void locateTableAndProcessMetaData(_			DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String tableName) {__		Map<String, TableMetaData> tableMeta = new HashMap<>()__		ResultSet tables = null__		try {_			tables = databaseMetaData.getTables(_					catalogNameToUse(catalogName), schemaNameToUse(schemaName), tableNameToUse(tableName), null)__			while (tables != null && tables.next()) {_				TableMetaData tmd = new TableMetaData()__				tmd.setCatalogName(tables.getString("TABLE_CAT"))__				tmd.setSchemaName(tables.getString("TABLE_SCHEM"))__				tmd.setTableName(tables.getString("TABLE_NAME"))__				if (tmd.getSchemaName() == null) {_					tableMeta.put(this.userName != null ? this.userName.toUpperCase() : "", tmd)__				}_				else {_					tableMeta.put(tmd.getSchemaName().toUpperCase(), tmd)__				}_			}_		}_		catch (SQLException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Error while accessing table meta data results: " + ex.getMessage())__			}_		}_		finally {_			JdbcUtils.closeResultSet(tables)__		}__		if (tableMeta.isEmpty()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Unable to locate table meta data for '" + tableName + "': column names must be provided")__			}_		}_		else {_			processTableColumns(databaseMetaData, findTableMetaData(schemaName, tableName, tableMeta))__		}_	};method,supporting,the,metadata,processing,for,a,table;private,void,locate,table,and,process,meta,data,database,meta,data,database,meta,data,string,catalog,name,string,schema,name,string,table,name,map,string,table,meta,data,table,meta,new,hash,map,result,set,tables,null,try,tables,database,meta,data,get,tables,catalog,name,to,use,catalog,name,schema,name,to,use,schema,name,table,name,to,use,table,name,null,while,tables,null,tables,next,table,meta,data,tmd,new,table,meta,data,tmd,set,catalog,name,tables,get,string,tmd,set,schema,name,tables,get,string,tmd,set,table,name,tables,get,string,if,tmd,get,schema,name,null,table,meta,put,this,user,name,null,this,user,name,to,upper,case,tmd,else,table,meta,put,tmd,get,schema,name,to,upper,case,tmd,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,error,while,accessing,table,meta,data,results,ex,get,message,finally,jdbc,utils,close,result,set,tables,if,table,meta,is,empty,if,logger,is,warn,enabled,logger,warn,unable,to,locate,table,meta,data,for,table,name,column,names,must,be,provided,else,process,table,columns,database,meta,data,find,table,meta,data,schema,name,table,name,table,meta
GenericTableMetaDataProvider -> private void locateTableAndProcessMetaData( 			DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String tableName);1496242568;Method supporting the metadata processing for a table.;private void locateTableAndProcessMetaData(_			DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String tableName) {__		Map<String, TableMetaData> tableMeta = new HashMap<>()__		ResultSet tables = null__		try {_			tables = databaseMetaData.getTables(_					catalogNameToUse(catalogName), schemaNameToUse(schemaName), tableNameToUse(tableName), null)__			while (tables != null && tables.next()) {_				TableMetaData tmd = new TableMetaData()__				tmd.setCatalogName(tables.getString("TABLE_CAT"))__				tmd.setSchemaName(tables.getString("TABLE_SCHEM"))__				tmd.setTableName(tables.getString("TABLE_NAME"))__				if (tmd.getSchemaName() == null) {_					tableMeta.put(this.userName != null ? this.userName.toUpperCase() : "", tmd)__				}_				else {_					tableMeta.put(tmd.getSchemaName().toUpperCase(), tmd)__				}_			}_		}_		catch (SQLException ex) {_			if (logger.isWarnEnabled()) {_				logger.warn("Error while accessing table meta data results: " + ex.getMessage())__			}_		}_		finally {_			JdbcUtils.closeResultSet(tables)__		}__		if (tableMeta.isEmpty()) {_			if (logger.isWarnEnabled()) {_				logger.warn("Unable to locate table meta data for '" + tableName + "': column names must be provided")__			}_		}_		else {_			processTableColumns(databaseMetaData, findTableMetaData(schemaName, tableName, tableMeta))__		}_	};method,supporting,the,metadata,processing,for,a,table;private,void,locate,table,and,process,meta,data,database,meta,data,database,meta,data,string,catalog,name,string,schema,name,string,table,name,map,string,table,meta,data,table,meta,new,hash,map,result,set,tables,null,try,tables,database,meta,data,get,tables,catalog,name,to,use,catalog,name,schema,name,to,use,schema,name,table,name,to,use,table,name,null,while,tables,null,tables,next,table,meta,data,tmd,new,table,meta,data,tmd,set,catalog,name,tables,get,string,tmd,set,schema,name,tables,get,string,tmd,set,table,name,tables,get,string,if,tmd,get,schema,name,null,table,meta,put,this,user,name,null,this,user,name,to,upper,case,tmd,else,table,meta,put,tmd,get,schema,name,to,upper,case,tmd,catch,sqlexception,ex,if,logger,is,warn,enabled,logger,warn,error,while,accessing,table,meta,data,results,ex,get,message,finally,jdbc,utils,close,result,set,tables,if,table,meta,is,empty,if,logger,is,warn,enabled,logger,warn,unable,to,locate,table,meta,data,for,table,name,column,names,must,be,provided,else,process,table,columns,database,meta,data,find,table,meta,data,schema,name,table,name,table,meta
GenericTableMetaDataProvider -> public boolean isStoresUpperCaseIdentifiers();1328020251;Get whether identifiers use upper case;public boolean isStoresUpperCaseIdentifiers() {_		return this.storesUpperCaseIdentifiers__	};get,whether,identifiers,use,upper,case;public,boolean,is,stores,upper,case,identifiers,return,this,stores,upper,case,identifiers
GenericTableMetaDataProvider -> public boolean isStoresUpperCaseIdentifiers();1329142650;Get whether identifiers use upper case;public boolean isStoresUpperCaseIdentifiers() {_		return this.storesUpperCaseIdentifiers__	};get,whether,identifiers,use,upper,case;public,boolean,is,stores,upper,case,identifiers,return,this,stores,upper,case,identifiers
GenericTableMetaDataProvider -> public boolean isStoresUpperCaseIdentifiers();1356735495;Get whether identifiers use upper case;public boolean isStoresUpperCaseIdentifiers() {_		return this.storesUpperCaseIdentifiers__	};get,whether,identifiers,use,upper,case;public,boolean,is,stores,upper,case,identifiers,return,this,stores,upper,case,identifiers
GenericTableMetaDataProvider -> public boolean isStoresUpperCaseIdentifiers();1357119239;Get whether identifiers use upper case;public boolean isStoresUpperCaseIdentifiers() {_		return this.storesUpperCaseIdentifiers__	};get,whether,identifiers,use,upper,case;public,boolean,is,stores,upper,case,identifiers,return,this,stores,upper,case,identifiers
GenericTableMetaDataProvider -> public boolean isStoresUpperCaseIdentifiers();1362408075;Get whether identifiers use upper case;public boolean isStoresUpperCaseIdentifiers() {_		return this.storesUpperCaseIdentifiers__	};get,whether,identifiers,use,upper,case;public,boolean,is,stores,upper,case,identifiers,return,this,stores,upper,case,identifiers
GenericTableMetaDataProvider -> public boolean isStoresUpperCaseIdentifiers();1368482696;Get whether identifiers use upper case;public boolean isStoresUpperCaseIdentifiers() {_		return this.storesUpperCaseIdentifiers__	};get,whether,identifiers,use,upper,case;public,boolean,is,stores,upper,case,identifiers,return,this,stores,upper,case,identifiers
GenericTableMetaDataProvider -> public boolean isStoresUpperCaseIdentifiers();1385423968;Get whether identifiers use upper case;public boolean isStoresUpperCaseIdentifiers() {_		return this.storesUpperCaseIdentifiers__	};get,whether,identifiers,use,upper,case;public,boolean,is,stores,upper,case,identifiers,return,this,stores,upper,case,identifiers
GenericTableMetaDataProvider -> protected String getDatabaseVersion();1328020251;Provide access to version info for subclasses.;protected String getDatabaseVersion() {_		return this.databaseVersion__	};provide,access,to,version,info,for,subclasses;protected,string,get,database,version,return,this,database,version
GenericTableMetaDataProvider -> protected String getDatabaseVersion();1329142650;Provide access to version info for subclasses.;protected String getDatabaseVersion() {_		return this.databaseVersion__	};provide,access,to,version,info,for,subclasses;protected,string,get,database,version,return,this,database,version
GenericTableMetaDataProvider -> protected String getDatabaseVersion();1356735495;Provide access to version info for subclasses.;protected String getDatabaseVersion() {_		return this.databaseVersion__	};provide,access,to,version,info,for,subclasses;protected,string,get,database,version,return,this,database,version
GenericTableMetaDataProvider -> protected String getDatabaseVersion();1357119239;Provide access to version info for subclasses.;protected String getDatabaseVersion() {_		return this.databaseVersion__	};provide,access,to,version,info,for,subclasses;protected,string,get,database,version,return,this,database,version
GenericTableMetaDataProvider -> protected String getDatabaseVersion();1362408075;Provide access to version info for subclasses.;protected String getDatabaseVersion() {_		return this.databaseVersion__	};provide,access,to,version,info,for,subclasses;protected,string,get,database,version,return,this,database,version
GenericTableMetaDataProvider -> protected String getDatabaseVersion();1368482696;Provide access to version info for subclasses.;protected String getDatabaseVersion() {_		return this.databaseVersion__	};provide,access,to,version,info,for,subclasses;protected,string,get,database,version,return,this,database,version
GenericTableMetaDataProvider -> protected String getDatabaseVersion();1385423968;Provide access to version info for subclasses.;protected String getDatabaseVersion() {_		return this.databaseVersion__	};provide,access,to,version,info,for,subclasses;protected,string,get,database,version,return,this,database,version
GenericTableMetaDataProvider -> protected String getDatabaseVersion();1405696918;Provide access to version info for subclasses.;protected String getDatabaseVersion() {_		return this.databaseVersion__	};provide,access,to,version,info,for,subclasses;protected,string,get,database,version,return,this,database,version
GenericTableMetaDataProvider -> protected String getDatabaseVersion();1429214043;Provide access to version info for subclasses.;protected String getDatabaseVersion() {_		return this.databaseVersion__	};provide,access,to,version,info,for,subclasses;protected,string,get,database,version,return,this,database,version
GenericTableMetaDataProvider -> protected String getDatabaseVersion();1467730834;Provide access to version info for subclasses.;protected String getDatabaseVersion() {_		return this.databaseVersion__	};provide,access,to,version,info,for,subclasses;protected,string,get,database,version,return,this,database,version
GenericTableMetaDataProvider -> protected String getDatabaseVersion();1477045587;Provide access to version info for subclasses.;protected String getDatabaseVersion() {_		return this.databaseVersion__	};provide,access,to,version,info,for,subclasses;protected,string,get,database,version,return,this,database,version
GenericTableMetaDataProvider -> protected String getDatabaseVersion();1484252108;Provide access to version info for subclasses.;protected String getDatabaseVersion() {_		return this.databaseVersion__	};provide,access,to,version,info,for,subclasses;protected,string,get,database,version,return,this,database,version
GenericTableMetaDataProvider -> protected String getDatabaseVersion();1487178248;Provide access to version info for subclasses.;protected String getDatabaseVersion() {_		return this.databaseVersion__	};provide,access,to,version,info,for,subclasses;protected,string,get,database,version,return,this,database,version
GenericTableMetaDataProvider -> protected String getDatabaseVersion();1496242568;Provide access to version info for subclasses.;protected String getDatabaseVersion() {_		return this.databaseVersion__	};provide,access,to,version,info,for,subclasses;protected,string,get,database,version,return,this,database,version
GenericTableMetaDataProvider -> protected String getDatabaseVersion();1496837955;Provide access to version info for subclasses.;protected String getDatabaseVersion() {_		return this.databaseVersion__	};provide,access,to,version,info,for,subclasses;protected,string,get,database,version,return,this,database,version
GenericTableMetaDataProvider -> public void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers);1328020251;Specify whether identifiers use lower case.;public void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers) {_		this.storesLowerCaseIdentifiers = storesLowerCaseIdentifiers__	};specify,whether,identifiers,use,lower,case;public,void,set,stores,lower,case,identifiers,boolean,stores,lower,case,identifiers,this,stores,lower,case,identifiers,stores,lower,case,identifiers
GenericTableMetaDataProvider -> public void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers);1329142650;Specify whether identifiers use lower case.;public void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers) {_		this.storesLowerCaseIdentifiers = storesLowerCaseIdentifiers__	};specify,whether,identifiers,use,lower,case;public,void,set,stores,lower,case,identifiers,boolean,stores,lower,case,identifiers,this,stores,lower,case,identifiers,stores,lower,case,identifiers
GenericTableMetaDataProvider -> public void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers);1356735495;Specify whether identifiers use lower case.;public void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers) {_		this.storesLowerCaseIdentifiers = storesLowerCaseIdentifiers__	};specify,whether,identifiers,use,lower,case;public,void,set,stores,lower,case,identifiers,boolean,stores,lower,case,identifiers,this,stores,lower,case,identifiers,stores,lower,case,identifiers
GenericTableMetaDataProvider -> public void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers);1357119239;Specify whether identifiers use lower case.;public void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers) {_		this.storesLowerCaseIdentifiers = storesLowerCaseIdentifiers__	};specify,whether,identifiers,use,lower,case;public,void,set,stores,lower,case,identifiers,boolean,stores,lower,case,identifiers,this,stores,lower,case,identifiers,stores,lower,case,identifiers
GenericTableMetaDataProvider -> public void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers);1362408075;Specify whether identifiers use lower case.;public void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers) {_		this.storesLowerCaseIdentifiers = storesLowerCaseIdentifiers__	};specify,whether,identifiers,use,lower,case;public,void,set,stores,lower,case,identifiers,boolean,stores,lower,case,identifiers,this,stores,lower,case,identifiers,stores,lower,case,identifiers
GenericTableMetaDataProvider -> public void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers);1368482696;Specify whether identifiers use lower case.;public void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers) {_		this.storesLowerCaseIdentifiers = storesLowerCaseIdentifiers__	};specify,whether,identifiers,use,lower,case;public,void,set,stores,lower,case,identifiers,boolean,stores,lower,case,identifiers,this,stores,lower,case,identifiers,stores,lower,case,identifiers
GenericTableMetaDataProvider -> public void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers);1385423968;Specify whether identifiers use lower case.;public void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers) {_		this.storesLowerCaseIdentifiers = storesLowerCaseIdentifiers__	};specify,whether,identifiers,use,lower,case;public,void,set,stores,lower,case,identifiers,boolean,stores,lower,case,identifiers,this,stores,lower,case,identifiers,stores,lower,case,identifiers
GenericTableMetaDataProvider -> public boolean isStoresLowerCaseIdentifiers();1328020251;Get whether identifiers use lower case;public boolean isStoresLowerCaseIdentifiers() {_		return this.storesLowerCaseIdentifiers__	};get,whether,identifiers,use,lower,case;public,boolean,is,stores,lower,case,identifiers,return,this,stores,lower,case,identifiers
GenericTableMetaDataProvider -> public boolean isStoresLowerCaseIdentifiers();1329142650;Get whether identifiers use lower case;public boolean isStoresLowerCaseIdentifiers() {_		return this.storesLowerCaseIdentifiers__	};get,whether,identifiers,use,lower,case;public,boolean,is,stores,lower,case,identifiers,return,this,stores,lower,case,identifiers
GenericTableMetaDataProvider -> public boolean isStoresLowerCaseIdentifiers();1356735495;Get whether identifiers use lower case;public boolean isStoresLowerCaseIdentifiers() {_		return this.storesLowerCaseIdentifiers__	};get,whether,identifiers,use,lower,case;public,boolean,is,stores,lower,case,identifiers,return,this,stores,lower,case,identifiers
GenericTableMetaDataProvider -> public boolean isStoresLowerCaseIdentifiers();1357119239;Get whether identifiers use lower case;public boolean isStoresLowerCaseIdentifiers() {_		return this.storesLowerCaseIdentifiers__	};get,whether,identifiers,use,lower,case;public,boolean,is,stores,lower,case,identifiers,return,this,stores,lower,case,identifiers
GenericTableMetaDataProvider -> public boolean isStoresLowerCaseIdentifiers();1362408075;Get whether identifiers use lower case;public boolean isStoresLowerCaseIdentifiers() {_		return this.storesLowerCaseIdentifiers__	};get,whether,identifiers,use,lower,case;public,boolean,is,stores,lower,case,identifiers,return,this,stores,lower,case,identifiers
GenericTableMetaDataProvider -> public boolean isStoresLowerCaseIdentifiers();1368482696;Get whether identifiers use lower case;public boolean isStoresLowerCaseIdentifiers() {_		return this.storesLowerCaseIdentifiers__	};get,whether,identifiers,use,lower,case;public,boolean,is,stores,lower,case,identifiers,return,this,stores,lower,case,identifiers
GenericTableMetaDataProvider -> public boolean isStoresLowerCaseIdentifiers();1385423968;Get whether identifiers use lower case;public boolean isStoresLowerCaseIdentifiers() {_		return this.storesLowerCaseIdentifiers__	};get,whether,identifiers,use,lower,case;public,boolean,is,stores,lower,case,identifiers,return,this,stores,lower,case,identifiers
GenericTableMetaDataProvider -> protected String getDefaultSchema();1328020251;Provide access to default schema for subclasses.;protected String getDefaultSchema() {_		return userName__	};provide,access,to,default,schema,for,subclasses;protected,string,get,default,schema,return,user,name
GenericTableMetaDataProvider -> protected String getDefaultSchema();1329142650;Provide access to default schema for subclasses.;protected String getDefaultSchema() {_		return userName__	};provide,access,to,default,schema,for,subclasses;protected,string,get,default,schema,return,user,name
GenericTableMetaDataProvider -> protected String getDefaultSchema();1356735495;Provide access to default schema for subclasses.;protected String getDefaultSchema() {_		return userName__	};provide,access,to,default,schema,for,subclasses;protected,string,get,default,schema,return,user,name
GenericTableMetaDataProvider -> protected String getDefaultSchema();1357119239;Provide access to default schema for subclasses.;protected String getDefaultSchema() {_		return userName__	};provide,access,to,default,schema,for,subclasses;protected,string,get,default,schema,return,user,name
GenericTableMetaDataProvider -> protected String getDefaultSchema();1362408075;Provide access to default schema for subclasses.;protected String getDefaultSchema() {_		return userName__	};provide,access,to,default,schema,for,subclasses;protected,string,get,default,schema,return,user,name
GenericTableMetaDataProvider -> protected String getDefaultSchema();1368482696;Provide access to default schema for subclasses.;protected String getDefaultSchema() {_		return userName__	};provide,access,to,default,schema,for,subclasses;protected,string,get,default,schema,return,user,name
GenericTableMetaDataProvider -> protected String getDefaultSchema();1385423968;Provide access to default schema for subclasses.;protected String getDefaultSchema() {_		return userName__	};provide,access,to,default,schema,for,subclasses;protected,string,get,default,schema,return,user,name
GenericTableMetaDataProvider -> protected String getDefaultSchema();1405696918;Provide access to default schema for subclasses.;protected String getDefaultSchema() {_		return userName__	};provide,access,to,default,schema,for,subclasses;protected,string,get,default,schema,return,user,name
GenericTableMetaDataProvider -> protected String getDefaultSchema();1429214043;Provide access to default schema for subclasses.;protected String getDefaultSchema() {_		return userName__	};provide,access,to,default,schema,for,subclasses;protected,string,get,default,schema,return,user,name
GenericTableMetaDataProvider -> protected String getDefaultSchema();1467730834;Provide access to default schema for subclasses.;protected String getDefaultSchema() {_		return userName__	};provide,access,to,default,schema,for,subclasses;protected,string,get,default,schema,return,user,name
GenericTableMetaDataProvider -> protected String getDefaultSchema();1477045587;Provide access to default schema for subclasses.;protected String getDefaultSchema() {_		return userName__	};provide,access,to,default,schema,for,subclasses;protected,string,get,default,schema,return,user,name
GenericTableMetaDataProvider -> protected String getDefaultSchema();1484252108;Provide access to default schema for subclasses.;protected String getDefaultSchema() {_		return this.userName__	};provide,access,to,default,schema,for,subclasses;protected,string,get,default,schema,return,this,user,name
GenericTableMetaDataProvider -> protected String getDefaultSchema();1487178248;Provide access to default schema for subclasses.;protected String getDefaultSchema() {_		return this.userName__	};provide,access,to,default,schema,for,subclasses;protected,string,get,default,schema,return,this,user,name
GenericTableMetaDataProvider -> protected String getDefaultSchema();1496242568;Provide access to default schema for subclasses.;protected String getDefaultSchema() {_		return this.userName__	};provide,access,to,default,schema,for,subclasses;protected,string,get,default,schema,return,this,user,name
GenericTableMetaDataProvider -> protected String getDefaultSchema();1496837955;Provide access to default schema for subclasses.;protected String getDefaultSchema() {_		return this.userName__	};provide,access,to,default,schema,for,subclasses;protected,string,get,default,schema,return,this,user,name
GenericTableMetaDataProvider -> @Nullable 	protected String getDatabaseVersion();1498780456;Provide access to version info for subclasses.;@Nullable_	protected String getDatabaseVersion() {_		return this.databaseVersion__	};provide,access,to,version,info,for,subclasses;nullable,protected,string,get,database,version,return,this,database,version
GenericTableMetaDataProvider -> @Nullable 	protected String getDatabaseVersion();1502974979;Provide access to version info for subclasses.;@Nullable_	protected String getDatabaseVersion() {_		return this.databaseVersion__	};provide,access,to,version,info,for,subclasses;nullable,protected,string,get,database,version,return,this,database,version
GenericTableMetaDataProvider -> @Nullable 	protected String getDatabaseVersion();1520339775;Provide access to version info for subclasses.;@Nullable_	protected String getDatabaseVersion() {_		return this.databaseVersion__	};provide,access,to,version,info,for,subclasses;nullable,protected,string,get,database,version,return,this,database,version
GenericTableMetaDataProvider -> @Nullable 	protected String getDatabaseVersion();1521457504;Provide access to version info for subclasses.;@Nullable_	protected String getDatabaseVersion() {_		return this.databaseVersion__	};provide,access,to,version,info,for,subclasses;nullable,protected,string,get,database,version,return,this,database,version
GenericTableMetaDataProvider -> @Nullable 	protected String getDatabaseVersion();1530174524;Provide access to version info for subclasses.;@Nullable_	protected String getDatabaseVersion() {_		return this.databaseVersion__	};provide,access,to,version,info,for,subclasses;nullable,protected,string,get,database,version,return,this,database,version
GenericTableMetaDataProvider -> @Nullable 	protected String getDatabaseVersion();1532091916;Provide access to version info for subclasses.;@Nullable_	protected String getDatabaseVersion() {_		return this.databaseVersion__	};provide,access,to,version,info,for,subclasses;nullable,protected,string,get,database,version,return,this,database,version
