commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers) {     this.storesUpperCaseIdentifiers = storesUpperCaseIdentifiers. }
false;public;0;3;;public boolean isStoresUpperCaseIdentifiers() {     return this.storesUpperCaseIdentifiers. }
false;public;1;3;;public void setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers) {     this.storesLowerCaseIdentifiers = storesLowerCaseIdentifiers. }
false;public;0;3;;public boolean isStoresLowerCaseIdentifiers() {     return this.storesLowerCaseIdentifiers. }
false;public;0;4;;@Override public boolean isTableColumnMetaDataUsed() {     return this.tableColumnMetaDataUsed. }
false;public;0;4;;@Override public List<TableParameterMetaData> getTableParameterMetaData() {     return this.tableParameterMetaData. }
false;public;0;4;;@Override public boolean isGetGeneratedKeysSupported() {     return this.getGeneratedKeysSupported. }
false;public;0;4;;@Override public boolean isGetGeneratedKeysSimulated() {     return false. }
false;public;2;5;;@Override @Nullable public String getSimpleQueryForGetGeneratedKey(String tableName, String keyColumnName) {     return null. }
false;public;1;3;;public void setGetGeneratedKeysSupported(boolean getGeneratedKeysSupported) {     this.getGeneratedKeysSupported = getGeneratedKeysSupported. }
false;public;1;3;;public void setGeneratedKeysColumnNameArraySupported(boolean generatedKeysColumnNameArraySupported) {     this.generatedKeysColumnNameArraySupported = generatedKeysColumnNameArraySupported. }
false;public;0;4;;@Override public boolean isGeneratedKeysColumnNameArraySupported() {     return this.generatedKeysColumnNameArraySupported. }
false;public;1;70;;@Override public void initializeWithMetaData(DatabaseMetaData databaseMetaData) throws SQLException {     try {         if (databaseMetaData.supportsGetGeneratedKeys()) {             logger.debug("GetGeneratedKeys is supported").             setGetGeneratedKeysSupported(true).         } else {             logger.debug("GetGeneratedKeys is not supported").             setGetGeneratedKeysSupported(false).         }     } catch (SQLException ex) {         if (logger.isWarnEnabled()) {             logger.warn("Error retrieving 'DatabaseMetaData.getGeneratedKeys': " + ex.getMessage()).         }     }     try {         String databaseProductName = databaseMetaData.getDatabaseProductName().         if (this.productsNotSupportingGeneratedKeysColumnNameArray.contains(databaseProductName)) {             if (logger.isDebugEnabled()) {                 logger.debug("GeneratedKeysColumnNameArray is not supported for " + databaseProductName).             }             setGeneratedKeysColumnNameArraySupported(false).         } else {             if (isGetGeneratedKeysSupported()) {                 if (logger.isDebugEnabled()) {                     logger.debug("GeneratedKeysColumnNameArray is supported for " + databaseProductName).                 }                 setGeneratedKeysColumnNameArraySupported(true).             } else {                 setGeneratedKeysColumnNameArraySupported(false).             }         }     } catch (SQLException ex) {         if (logger.isWarnEnabled()) {             logger.warn("Error retrieving 'DatabaseMetaData.getDatabaseProductName': " + ex.getMessage()).         }     }     try {         this.databaseVersion = databaseMetaData.getDatabaseProductVersion().     } catch (SQLException ex) {         if (logger.isWarnEnabled()) {             logger.warn("Error retrieving 'DatabaseMetaData.getDatabaseProductVersion': " + ex.getMessage()).         }     }     try {         setStoresUpperCaseIdentifiers(databaseMetaData.storesUpperCaseIdentifiers()).     } catch (SQLException ex) {         if (logger.isWarnEnabled()) {             logger.warn("Error retrieving 'DatabaseMetaData.storesUpperCaseIdentifiers': " + ex.getMessage()).         }     }     try {         setStoresLowerCaseIdentifiers(databaseMetaData.storesLowerCaseIdentifiers()).     } catch (SQLException ex) {         if (logger.isWarnEnabled()) {             logger.warn("Error retrieving 'DatabaseMetaData.storesLowerCaseIdentifiers': " + ex.getMessage()).         }     } }
false;public;4;7;;@Override public void initializeWithTableColumnMetaData(DatabaseMetaData databaseMetaData, @Nullable String catalogName, @Nullable String schemaName, @Nullable String tableName) throws SQLException {     this.tableColumnMetaDataUsed = true.     locateTableAndProcessMetaData(databaseMetaData, catalogName, schemaName, tableName). }
false;public;1;16;;@Override @Nullable public String tableNameToUse(@Nullable String tableName) {     if (tableName == null) {         return null.     } else if (isStoresUpperCaseIdentifiers()) {         return tableName.toUpperCase().     } else if (isStoresLowerCaseIdentifiers()) {         return tableName.toLowerCase().     } else {         return tableName.     } }
false;public;1;16;;@Override @Nullable public String catalogNameToUse(@Nullable String catalogName) {     if (catalogName == null) {         return null.     } else if (isStoresUpperCaseIdentifiers()) {         return catalogName.toUpperCase().     } else if (isStoresLowerCaseIdentifiers()) {         return catalogName.toLowerCase().     } else {         return catalogName.     } }
false;public;1;16;;@Override @Nullable public String schemaNameToUse(@Nullable String schemaName) {     if (schemaName == null) {         return null.     } else if (isStoresUpperCaseIdentifiers()) {         return schemaName.toUpperCase().     } else if (isStoresLowerCaseIdentifiers()) {         return schemaName.toLowerCase().     } else {         return schemaName.     } }
false;public;1;5;;@Override @Nullable public String metaDataCatalogNameToUse(@Nullable String catalogName) {     return catalogNameToUse(catalogName). }
false;public;1;8;;@Override @Nullable public String metaDataSchemaNameToUse(@Nullable String schemaName) {     if (schemaName == null) {         return schemaNameToUse(getDefaultSchema()).     }     return schemaNameToUse(schemaName). }
true;protected;0;4;/**  * Provide access to default schema for subclasses.  */ ;/**  * Provide access to default schema for subclasses.  */ @Nullable protected String getDefaultSchema() {     return this.userName. }
true;protected;0;4;/**  * Provide access to version info for subclasses.  */ ;/**  * Provide access to version info for subclasses.  */ @Nullable protected String getDatabaseVersion() {     return this.databaseVersion. }
true;private;4;39;/**  * Method supporting the meta-data processing for a table.  */ ;/**  * Method supporting the meta-data processing for a table.  */ private void locateTableAndProcessMetaData(DatabaseMetaData databaseMetaData, @Nullable String catalogName, @Nullable String schemaName, @Nullable String tableName) {     Map<String, TableMetaData> tableMeta = new HashMap<>().     ResultSet tables = null.     try {         tables = databaseMetaData.getTables(catalogNameToUse(catalogName), schemaNameToUse(schemaName), tableNameToUse(tableName), null).         while (tables != null && tables.next()) {             TableMetaData tmd = new TableMetaData().             tmd.setCatalogName(tables.getString("TABLE_CAT")).             tmd.setSchemaName(tables.getString("TABLE_SCHEM")).             tmd.setTableName(tables.getString("TABLE_NAME")).             if (tmd.getSchemaName() == null) {                 tableMeta.put(this.userName != null ? this.userName.toUpperCase() : "", tmd).             } else {                 tableMeta.put(tmd.getSchemaName().toUpperCase(), tmd).             }         }     } catch (SQLException ex) {         if (logger.isWarnEnabled()) {             logger.warn("Error while accessing table meta-data results: " + ex.getMessage()).         }     } finally {         JdbcUtils.closeResultSet(tables).     }     if (tableMeta.isEmpty()) {         if (logger.isInfoEnabled()) {             logger.info("Unable to locate table meta-data for '" + tableName + "': column names must be provided").         }     } else {         processTableColumns(databaseMetaData, findTableMetaData(schemaName, tableName, tableMeta)).     } }
false;private;3;32;;private TableMetaData findTableMetaData(@Nullable String schemaName, @Nullable String tableName, Map<String, TableMetaData> tableMeta) {     if (schemaName != null) {         TableMetaData tmd = tableMeta.get(schemaName.toUpperCase()).         if (tmd == null) {             throw new DataAccessResourceFailureException("Unable to locate table meta-data for '" + tableName + "' in the '" + schemaName + "' schema").         }         return tmd.     } else if (tableMeta.size() == 1) {         return tableMeta.values().iterator().next().     } else {         TableMetaData tmd = tableMeta.get(getDefaultSchema()).         if (tmd == null) {             tmd = tableMeta.get(this.userName != null ? this.userName.toUpperCase() : "").         }         if (tmd == null) {             tmd = tableMeta.get("PUBLIC").         }         if (tmd == null) {             tmd = tableMeta.get("DBO").         }         if (tmd == null) {             throw new DataAccessResourceFailureException("Unable to locate table meta-data for '" + tableName + "' in the default schema").         }         return tmd.     } }
true;private;2;46;/**  * Method supporting the meta-data processing for a table's columns.  */ ;/**  * Method supporting the meta-data processing for a table's columns.  */ private void processTableColumns(DatabaseMetaData databaseMetaData, TableMetaData tmd) {     ResultSet tableColumns = null.     String metaDataCatalogName = metaDataCatalogNameToUse(tmd.getCatalogName()).     String metaDataSchemaName = metaDataSchemaNameToUse(tmd.getSchemaName()).     String metaDataTableName = tableNameToUse(tmd.getTableName()).     if (logger.isDebugEnabled()) {         logger.debug("Retrieving meta-data for " + metaDataCatalogName + '/' + metaDataSchemaName + '/' + metaDataTableName).     }     try {         tableColumns = databaseMetaData.getColumns(metaDataCatalogName, metaDataSchemaName, metaDataTableName, null).         while (tableColumns.next()) {             String columnName = tableColumns.getString("COLUMN_NAME").             int dataType = tableColumns.getInt("DATA_TYPE").             if (dataType == Types.DECIMAL) {                 String typeName = tableColumns.getString("TYPE_NAME").                 int decimalDigits = tableColumns.getInt("DECIMAL_DIGITS").                 // using DECIMAL for certain inserts (see SPR-6912))                 if ("NUMBER".equals(typeName) && decimalDigits == 0) {                     dataType = Types.NUMERIC.                     if (logger.isDebugEnabled()) {                         logger.debug("Overriding meta-data: " + columnName + " now NUMERIC instead of DECIMAL").                     }                 }             }             boolean nullable = tableColumns.getBoolean("NULLABLE").             TableParameterMetaData meta = new TableParameterMetaData(columnName, dataType, nullable).             this.tableParameterMetaData.add(meta).             if (logger.isDebugEnabled()) {                 logger.debug("Retrieved meta-data: " + meta.getParameterName() + " " + meta.getSqlType() + " " + meta.isNullable()).             }         }     } catch (SQLException ex) {         if (logger.isWarnEnabled()) {             logger.warn("Error while retrieving meta-data for table columns: " + ex.getMessage()).         }     } finally {         JdbcUtils.closeResultSet(tableColumns).     } }
false;public;1;3;;public void setCatalogName(String catalogName) {     this.catalogName = catalogName. }
false;public;0;4;;@Nullable public String getCatalogName() {     return this.catalogName. }
false;public;1;3;;public void setSchemaName(String schemaName) {     this.schemaName = schemaName. }
false;public;0;4;;@Nullable public String getSchemaName() {     return this.schemaName. }
false;public;1;3;;public void setTableName(String tableName) {     this.tableName = tableName. }
false;public;0;4;;@Nullable public String getTableName() {     return this.tableName. }
