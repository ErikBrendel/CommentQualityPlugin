commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;19;/**  * Execute the given {@link DatabasePopulator} against the given {@link DataSource}.  * @param populator the {@code DatabasePopulator} to execute  * @param dataSource the {@code DataSource} to execute against  * @throws DataAccessException if an error occurs, specifically a {@link ScriptException}  */ ;/**  * Execute the given {@link DatabasePopulator} against the given {@link DataSource}.  * @param populator the {@code DatabasePopulator} to execute  * @param dataSource the {@code DataSource} to execute against  * @throws DataAccessException if an error occurs, specifically a {@link ScriptException}  */ public static void execute(DatabasePopulator populator, DataSource dataSource) throws DataAccessException {     Assert.notNull(populator, "DatabasePopulator must not be null").     Assert.notNull(dataSource, "DataSource must not be null").     try {         Connection connection = DataSourceUtils.getConnection(dataSource).         try {             populator.populate(connection).         } finally {             DataSourceUtils.releaseConnection(connection, dataSource).         }     } catch (Throwable ex) {         if (ex instanceof ScriptException) {             throw (ScriptException) ex.         }         throw new UncategorizedScriptException("Failed to execute database script", ex).     } }
