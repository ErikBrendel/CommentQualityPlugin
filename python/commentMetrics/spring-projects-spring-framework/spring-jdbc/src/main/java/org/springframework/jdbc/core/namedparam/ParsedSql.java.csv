commented;modifiers;parameterAmount;loc;comment;code
true;;0;3;/**  * Return the SQL statement that is being parsed.  */ ;/**  * Return the SQL statement that is being parsed.  */ String getOriginalSql() {     return this.originalSql. }
true;;3;4;/**  * Add a named parameter parsed from this SQL statement.  * @param parameterName the name of the parameter  * @param startIndex the start index in the original SQL String  * @param endIndex the end index in the original SQL String  */ ;/**  * Add a named parameter parsed from this SQL statement.  * @param parameterName the name of the parameter  * @param startIndex the start index in the original SQL String  * @param endIndex the end index in the original SQL String  */ void addNamedParameter(String parameterName, int startIndex, int endIndex) {     this.parameterNames.add(parameterName).     this.parameterIndexes.add(new int[] { startIndex, endIndex }). }
true;;0;3;/**  * Return all of the parameters (bind variables) in the parsed SQL statement.  * Repeated occurrences of the same parameter name are included here.  */ ;/**  * Return all of the parameters (bind variables) in the parsed SQL statement.  * Repeated occurrences of the same parameter name are included here.  */ List<String> getParameterNames() {     return this.parameterNames. }
true;;1;3;/**  * Return the parameter indexes for the specified parameter.  * @param parameterPosition the position of the parameter  * (as index in the parameter names List)  * @return the start index and end index, combined into  * a int array of length 2  */ ;/**  * Return the parameter indexes for the specified parameter.  * @param parameterPosition the position of the parameter  * (as index in the parameter names List)  * @return the start index and end index, combined into  * a int array of length 2  */ int[] getParameterIndexes(int parameterPosition) {     return this.parameterIndexes.get(parameterPosition). }
true;;1;3;/**  * Set the count of named parameters in the SQL statement.  * Each parameter name counts once. repeated occurrences do not count here.  */ ;/**  * Set the count of named parameters in the SQL statement.  * Each parameter name counts once. repeated occurrences do not count here.  */ void setNamedParameterCount(int namedParameterCount) {     this.namedParameterCount = namedParameterCount. }
true;;0;3;/**  * Return the count of named parameters in the SQL statement.  * Each parameter name counts once. repeated occurrences do not count here.  */ ;/**  * Return the count of named parameters in the SQL statement.  * Each parameter name counts once. repeated occurrences do not count here.  */ int getNamedParameterCount() {     return this.namedParameterCount. }
true;;1;3;/**  * Set the count of all of the unnamed parameters in the SQL statement.  */ ;/**  * Set the count of all of the unnamed parameters in the SQL statement.  */ void setUnnamedParameterCount(int unnamedParameterCount) {     this.unnamedParameterCount = unnamedParameterCount. }
true;;0;3;/**  * Return the count of all of the unnamed parameters in the SQL statement.  */ ;/**  * Return the count of all of the unnamed parameters in the SQL statement.  */ int getUnnamedParameterCount() {     return this.unnamedParameterCount. }
true;;1;3;/**  * Set the total count of all of the parameters in the SQL statement.  * Repeated occurrences of the same parameter name do count here.  */ ;/**  * Set the total count of all of the parameters in the SQL statement.  * Repeated occurrences of the same parameter name do count here.  */ void setTotalParameterCount(int totalParameterCount) {     this.totalParameterCount = totalParameterCount. }
true;;0;3;/**  * Return the total count of all of the parameters in the SQL statement.  * Repeated occurrences of the same parameter name do count here.  */ ;/**  * Return the total count of all of the parameters in the SQL statement.  * Repeated occurrences of the same parameter name do count here.  */ int getTotalParameterCount() {     return this.totalParameterCount. }
true;public;0;4;/**  * Exposes the original SQL String.  */ ;/**  * Exposes the original SQL String.  */ @Override public String toString() {     return this.originalSql. }
