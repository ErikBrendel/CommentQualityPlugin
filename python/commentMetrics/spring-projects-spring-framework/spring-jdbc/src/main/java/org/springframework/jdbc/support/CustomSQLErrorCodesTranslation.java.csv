commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the SQL error codes to match.  */ ;/**  * Set the SQL error codes to match.  */ public void setErrorCodes(String... errorCodes) {     this.errorCodes = StringUtils.sortStringArray(errorCodes). }
true;public;0;3;/**  * Return the SQL error codes to match.  */ ;/**  * Return the SQL error codes to match.  */ public String[] getErrorCodes() {     return this.errorCodes. }
true;public;1;7;/**  * Set the exception class for the specified error codes.  */ ;/**  * Set the exception class for the specified error codes.  */ public void setExceptionClass(@Nullable Class<?> exceptionClass) {     if (exceptionClass != null && !DataAccessException.class.isAssignableFrom(exceptionClass)) {         throw new IllegalArgumentException("Invalid exception class [" + exceptionClass + "]: needs to be a subclass of [org.springframework.dao.DataAccessException]").     }     this.exceptionClass = exceptionClass. }
true;public;0;4;/**  * Return the exception class for the specified error codes.  */ ;/**  * Return the exception class for the specified error codes.  */ @Nullable public Class<?> getExceptionClass() {     return this.exceptionClass. }
