commented;modifiers;parameterAmount;loc;comment;code
true;public,final;1;19;/**  * Delegates to handleNoRowFound, handleMultipleRowsFound and streamData,  * according to the ResultSet state. Converts an IOException thrown by  * streamData to a LobRetrievalFailureException.  * @see #handleNoRowFound  * @see #handleMultipleRowsFound  * @see #streamData  * @see org.springframework.jdbc.LobRetrievalFailureException  */ ;/**  * Delegates to handleNoRowFound, handleMultipleRowsFound and streamData,  * according to the ResultSet state. Converts an IOException thrown by  * streamData to a LobRetrievalFailureException.  * @see #handleNoRowFound  * @see #handleMultipleRowsFound  * @see #streamData  * @see org.springframework.jdbc.LobRetrievalFailureException  */ @Override @Nullable public final T extractData(ResultSet rs) throws SQLException, DataAccessException {     if (!rs.next()) {         handleNoRowFound().     } else {         try {             streamData(rs).             if (rs.next()) {                 handleMultipleRowsFound().             }         } catch (IOException ex) {             throw new LobRetrievalFailureException("Couldn't stream LOB content", ex).         }     }     return null. }
true;protected;0;4;/**  * Handle the case where the ResultSet does not contain a row.  * @throws DataAccessException a corresponding exception,  * by default an EmptyResultDataAccessException  * @see org.springframework.dao.EmptyResultDataAccessException  */ ;/**  * Handle the case where the ResultSet does not contain a row.  * @throws DataAccessException a corresponding exception,  * by default an EmptyResultDataAccessException  * @see org.springframework.dao.EmptyResultDataAccessException  */ protected void handleNoRowFound() throws DataAccessException {     throw new EmptyResultDataAccessException("LobStreamingResultSetExtractor did not find row in database", 1). }
true;protected;0;4;/**  * Handle the case where the ResultSet contains multiple rows.  * @throws DataAccessException a corresponding exception,  * by default an IncorrectResultSizeDataAccessException  * @see org.springframework.dao.IncorrectResultSizeDataAccessException  */ ;/**  * Handle the case where the ResultSet contains multiple rows.  * @throws DataAccessException a corresponding exception,  * by default an IncorrectResultSizeDataAccessException  * @see org.springframework.dao.IncorrectResultSizeDataAccessException  */ protected void handleMultipleRowsFound() throws DataAccessException {     throw new IncorrectResultSizeDataAccessException("LobStreamingResultSetExtractor found multiple rows in database", 1). }
true;protected,abstract;1;1;/**  * Stream LOB content from the given ResultSet to some OutputStream.  * <p>Typically used as inner class, with access to surrounding method arguments  * and to a LobHandler instance variable of the surrounding class.  * @param rs the ResultSet to take the LOB content from  * @throws SQLException if thrown by JDBC methods  * @throws IOException if thrown by stream access methods  * @throws DataAccessException in case of custom exceptions  * @see org.springframework.jdbc.support.lob.LobHandler#getBlobAsBinaryStream  * @see org.springframework.util.FileCopyUtils  */ ;/**  * Stream LOB content from the given ResultSet to some OutputStream.  * <p>Typically used as inner class, with access to surrounding method arguments  * and to a LobHandler instance variable of the surrounding class.  * @param rs the ResultSet to take the LOB content from  * @throws SQLException if thrown by JDBC methods  * @throws IOException if thrown by stream access methods  * @throws DataAccessException in case of custom exceptions  * @see org.springframework.jdbc.support.lob.LobHandler#getBlobAsBinaryStream  * @see org.springframework.util.FileCopyUtils  */ protected abstract void streamData(ResultSet rs) throws SQLException, IOException, DataAccessException.
