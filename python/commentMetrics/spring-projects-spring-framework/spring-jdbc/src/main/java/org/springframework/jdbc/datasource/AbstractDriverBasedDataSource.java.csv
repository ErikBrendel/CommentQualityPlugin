# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractDriverBasedDataSource -> public void setUrl(@Nullable String url);1500448076;Set the JDBC URL to use for connecting through the Driver._@see java.sql.Driver#connect(String, java.util.Properties);public void setUrl(@Nullable String url) {_		Assert.hasText(url, "Property 'url' must not be empty")__		this.url = url.trim()__	};set,the,jdbc,url,to,use,for,connecting,through,the,driver,see,java,sql,driver,connect,string,java,util,properties;public,void,set,url,nullable,string,url,assert,has,text,url,property,url,must,not,be,empty,this,url,url,trim
AbstractDriverBasedDataSource -> public void setUrl(@Nullable String url);1500457438;Set the JDBC URL to use for connecting through the Driver._@see java.sql.Driver#connect(String, java.util.Properties);public void setUrl(@Nullable String url) {_		this.url = (url != null ? url.trim() : null)__	};set,the,jdbc,url,to,use,for,connecting,through,the,driver,see,java,sql,driver,connect,string,java,util,properties;public,void,set,url,nullable,string,url,this,url,url,null,url,trim,null
AbstractDriverBasedDataSource -> @Nullable 	public String getCatalog();1495868221;Return the database catalog to be applied to each Connection, if any._@since 4.3.2;@Nullable_	public String getCatalog() {_		return this.catalog__	};return,the,database,catalog,to,be,applied,to,each,connection,if,any,since,4,3,2;nullable,public,string,get,catalog,return,this,catalog
AbstractDriverBasedDataSource -> @Nullable 	public String getCatalog();1496837955;Return the database catalog to be applied to each Connection, if any._@since 4.3.2;@Nullable_	public String getCatalog() {_		return this.catalog__	};return,the,database,catalog,to,be,applied,to,each,connection,if,any,since,4,3,2;nullable,public,string,get,catalog,return,this,catalog
AbstractDriverBasedDataSource -> @Nullable 	public String getCatalog();1498780456;Return the database catalog to be applied to each Connection, if any._@since 4.3.2;@Nullable_	public String getCatalog() {_		return this.catalog__	};return,the,database,catalog,to,be,applied,to,each,connection,if,any,since,4,3,2;nullable,public,string,get,catalog,return,this,catalog
AbstractDriverBasedDataSource -> @Nullable 	public String getCatalog();1500448076;Return the database catalog to be applied to each Connection, if any._@since 4.3.2;@Nullable_	public String getCatalog() {_		return this.catalog__	};return,the,database,catalog,to,be,applied,to,each,connection,if,any,since,4,3,2;nullable,public,string,get,catalog,return,this,catalog
AbstractDriverBasedDataSource -> @Nullable 	public String getCatalog();1500457438;Return the database catalog to be applied to each Connection, if any._@since 4.3.2;@Nullable_	public String getCatalog() {_		return this.catalog__	};return,the,database,catalog,to,be,applied,to,each,connection,if,any,since,4,3,2;nullable,public,string,get,catalog,return,this,catalog
AbstractDriverBasedDataSource -> protected Connection getConnectionFromDriver(String username, String password) throws SQLException;1328020251;Build properties for the Driver, including the given username and password (if any),_and obtain a corresponding Connection._@param username the name of the user_@param password the password to use_@return the obtained Connection_@throws SQLException in case of failure_@see java.sql.Driver#connect(String, java.util.Properties);protected Connection getConnectionFromDriver(String username, String password) throws SQLException {_		Properties props = new Properties(getConnectionProperties())__		if (username != null) {_			props.setProperty("user", username)__		}_		if (password != null) {_			props.setProperty("password", password)__		}_		return getConnectionFromDriver(props)__	};build,properties,for,the,driver,including,the,given,username,and,password,if,any,and,obtain,a,corresponding,connection,param,username,the,name,of,the,user,param,password,the,password,to,use,return,the,obtained,connection,throws,sqlexception,in,case,of,failure,see,java,sql,driver,connect,string,java,util,properties;protected,connection,get,connection,from,driver,string,username,string,password,throws,sqlexception,properties,props,new,properties,get,connection,properties,if,username,null,props,set,property,user,username,if,password,null,props,set,property,password,password,return,get,connection,from,driver,props
AbstractDriverBasedDataSource -> protected Connection getConnectionFromDriver(String username, String password) throws SQLException;1356735495;Build properties for the Driver, including the given username and password (if any),_and obtain a corresponding Connection._@param username the name of the user_@param password the password to use_@return the obtained Connection_@throws SQLException in case of failure_@see java.sql.Driver#connect(String, java.util.Properties);protected Connection getConnectionFromDriver(String username, String password) throws SQLException {_		Properties props = new Properties(getConnectionProperties())__		if (username != null) {_			props.setProperty("user", username)__		}_		if (password != null) {_			props.setProperty("password", password)__		}_		return getConnectionFromDriver(props)__	};build,properties,for,the,driver,including,the,given,username,and,password,if,any,and,obtain,a,corresponding,connection,param,username,the,name,of,the,user,param,password,the,password,to,use,return,the,obtained,connection,throws,sqlexception,in,case,of,failure,see,java,sql,driver,connect,string,java,util,properties;protected,connection,get,connection,from,driver,string,username,string,password,throws,sqlexception,properties,props,new,properties,get,connection,properties,if,username,null,props,set,property,user,username,if,password,null,props,set,property,password,password,return,get,connection,from,driver,props
AbstractDriverBasedDataSource -> protected Connection getConnectionFromDriver(String username, String password) throws SQLException;1357119239;Build properties for the Driver, including the given username and password (if any),_and obtain a corresponding Connection._@param username the name of the user_@param password the password to use_@return the obtained Connection_@throws SQLException in case of failure_@see java.sql.Driver#connect(String, java.util.Properties);protected Connection getConnectionFromDriver(String username, String password) throws SQLException {_		Properties props = new Properties(getConnectionProperties())__		if (username != null) {_			props.setProperty("user", username)__		}_		if (password != null) {_			props.setProperty("password", password)__		}_		return getConnectionFromDriver(props)__	};build,properties,for,the,driver,including,the,given,username,and,password,if,any,and,obtain,a,corresponding,connection,param,username,the,name,of,the,user,param,password,the,password,to,use,return,the,obtained,connection,throws,sqlexception,in,case,of,failure,see,java,sql,driver,connect,string,java,util,properties;protected,connection,get,connection,from,driver,string,username,string,password,throws,sqlexception,properties,props,new,properties,get,connection,properties,if,username,null,props,set,property,user,username,if,password,null,props,set,property,password,password,return,get,connection,from,driver,props
AbstractDriverBasedDataSource -> protected Connection getConnectionFromDriver(String username, String password) throws SQLException;1362408075;Build properties for the Driver, including the given username and password (if any),_and obtain a corresponding Connection._@param username the name of the user_@param password the password to use_@return the obtained Connection_@throws SQLException in case of failure_@see java.sql.Driver#connect(String, java.util.Properties);protected Connection getConnectionFromDriver(String username, String password) throws SQLException {_		Properties mergedProps = new Properties()__		Properties connProps = getConnectionProperties()__		if (connProps != null) {_			mergedProps.putAll(connProps)__		}_		if (username != null) {_			mergedProps.setProperty("user", username)__		}_		if (password != null) {_			mergedProps.setProperty("password", password)__		}_		return getConnectionFromDriver(mergedProps)__	};build,properties,for,the,driver,including,the,given,username,and,password,if,any,and,obtain,a,corresponding,connection,param,username,the,name,of,the,user,param,password,the,password,to,use,return,the,obtained,connection,throws,sqlexception,in,case,of,failure,see,java,sql,driver,connect,string,java,util,properties;protected,connection,get,connection,from,driver,string,username,string,password,throws,sqlexception,properties,merged,props,new,properties,properties,conn,props,get,connection,properties,if,conn,props,null,merged,props,put,all,conn,props,if,username,null,merged,props,set,property,user,username,if,password,null,merged,props,set,property,password,password,return,get,connection,from,driver,merged,props
AbstractDriverBasedDataSource -> protected Connection getConnectionFromDriver(String username, String password) throws SQLException;1368482696;Build properties for the Driver, including the given username and password (if any),_and obtain a corresponding Connection._@param username the name of the user_@param password the password to use_@return the obtained Connection_@throws SQLException in case of failure_@see java.sql.Driver#connect(String, java.util.Properties);protected Connection getConnectionFromDriver(String username, String password) throws SQLException {_		Properties mergedProps = new Properties()__		Properties connProps = getConnectionProperties()__		if (connProps != null) {_			mergedProps.putAll(connProps)__		}_		if (username != null) {_			mergedProps.setProperty("user", username)__		}_		if (password != null) {_			mergedProps.setProperty("password", password)__		}_		return getConnectionFromDriver(mergedProps)__	};build,properties,for,the,driver,including,the,given,username,and,password,if,any,and,obtain,a,corresponding,connection,param,username,the,name,of,the,user,param,password,the,password,to,use,return,the,obtained,connection,throws,sqlexception,in,case,of,failure,see,java,sql,driver,connect,string,java,util,properties;protected,connection,get,connection,from,driver,string,username,string,password,throws,sqlexception,properties,merged,props,new,properties,properties,conn,props,get,connection,properties,if,conn,props,null,merged,props,put,all,conn,props,if,username,null,merged,props,set,property,user,username,if,password,null,merged,props,set,property,password,password,return,get,connection,from,driver,merged,props
AbstractDriverBasedDataSource -> protected Connection getConnectionFromDriver(String username, String password) throws SQLException;1469102800;Build properties for the Driver, including the given username and password (if any),_and obtain a corresponding Connection._@param username the name of the user_@param password the password to use_@return the obtained Connection_@throws SQLException in case of failure_@see java.sql.Driver#connect(String, java.util.Properties);protected Connection getConnectionFromDriver(String username, String password) throws SQLException {_		Properties mergedProps = new Properties()__		Properties connProps = getConnectionProperties()__		if (connProps != null) {_			mergedProps.putAll(connProps)__		}_		if (username != null) {_			mergedProps.setProperty("user", username)__		}_		if (password != null) {_			mergedProps.setProperty("password", password)__		}__		Connection con = getConnectionFromDriver(mergedProps)__		if (this.catalog != null) {_			con.setCatalog(this.catalog)__		}_		if (this.schema != null) {_			con.setSchema(this.schema)__		}_		return con__	};build,properties,for,the,driver,including,the,given,username,and,password,if,any,and,obtain,a,corresponding,connection,param,username,the,name,of,the,user,param,password,the,password,to,use,return,the,obtained,connection,throws,sqlexception,in,case,of,failure,see,java,sql,driver,connect,string,java,util,properties;protected,connection,get,connection,from,driver,string,username,string,password,throws,sqlexception,properties,merged,props,new,properties,properties,conn,props,get,connection,properties,if,conn,props,null,merged,props,put,all,conn,props,if,username,null,merged,props,set,property,user,username,if,password,null,merged,props,set,property,password,password,connection,con,get,connection,from,driver,merged,props,if,this,catalog,null,con,set,catalog,this,catalog,if,this,schema,null,con,set,schema,this,schema,return,con
AbstractDriverBasedDataSource -> @Nullable 	public Properties getConnectionProperties();1495868221;Return the connection properties to be passed to the Driver, if any.;@Nullable_	public Properties getConnectionProperties() {_		return this.connectionProperties__	};return,the,connection,properties,to,be,passed,to,the,driver,if,any;nullable,public,properties,get,connection,properties,return,this,connection,properties
AbstractDriverBasedDataSource -> @Nullable 	public Properties getConnectionProperties();1496837955;Return the connection properties to be passed to the Driver, if any.;@Nullable_	public Properties getConnectionProperties() {_		return this.connectionProperties__	};return,the,connection,properties,to,be,passed,to,the,driver,if,any;nullable,public,properties,get,connection,properties,return,this,connection,properties
AbstractDriverBasedDataSource -> @Nullable 	public Properties getConnectionProperties();1498780456;Return the connection properties to be passed to the Driver, if any.;@Nullable_	public Properties getConnectionProperties() {_		return this.connectionProperties__	};return,the,connection,properties,to,be,passed,to,the,driver,if,any;nullable,public,properties,get,connection,properties,return,this,connection,properties
AbstractDriverBasedDataSource -> @Nullable 	public Properties getConnectionProperties();1500448076;Return the connection properties to be passed to the Driver, if any.;@Nullable_	public Properties getConnectionProperties() {_		return this.connectionProperties__	};return,the,connection,properties,to,be,passed,to,the,driver,if,any;nullable,public,properties,get,connection,properties,return,this,connection,properties
AbstractDriverBasedDataSource -> @Nullable 	public Properties getConnectionProperties();1500457438;Return the connection properties to be passed to the Driver, if any.;@Nullable_	public Properties getConnectionProperties() {_		return this.connectionProperties__	};return,the,connection,properties,to,be,passed,to,the,driver,if,any;nullable,public,properties,get,connection,properties,return,this,connection,properties
AbstractDriverBasedDataSource -> public void setUsername(@Nullable String username);1500448076;Set the JDBC username to use for connecting through the Driver._@see java.sql.Driver#connect(String, java.util.Properties);public void setUsername(@Nullable String username) {_		this.username = username__	};set,the,jdbc,username,to,use,for,connecting,through,the,driver,see,java,sql,driver,connect,string,java,util,properties;public,void,set,username,nullable,string,username,this,username,username
AbstractDriverBasedDataSource -> public void setUsername(@Nullable String username);1500457438;Set the JDBC username to use for connecting through the Driver._@see java.sql.Driver#connect(String, java.util.Properties);public void setUsername(@Nullable String username) {_		this.username = username__	};set,the,jdbc,username,to,use,for,connecting,through,the,driver,see,java,sql,driver,connect,string,java,util,properties;public,void,set,username,nullable,string,username,this,username,username
AbstractDriverBasedDataSource -> @Nullable 	public String getUsername();1496837955;Return the JDBC username to use for connecting through the Driver.;@Nullable_	public String getUsername() {_		return this.username__	};return,the,jdbc,username,to,use,for,connecting,through,the,driver;nullable,public,string,get,username,return,this,username
AbstractDriverBasedDataSource -> @Nullable 	public String getUsername();1498780456;Return the JDBC username to use for connecting through the Driver.;@Nullable_	public String getUsername() {_		return this.username__	};return,the,jdbc,username,to,use,for,connecting,through,the,driver;nullable,public,string,get,username,return,this,username
AbstractDriverBasedDataSource -> @Nullable 	public String getUsername();1500448076;Return the JDBC username to use for connecting through the Driver.;@Nullable_	public String getUsername() {_		return this.username__	};return,the,jdbc,username,to,use,for,connecting,through,the,driver;nullable,public,string,get,username,return,this,username
AbstractDriverBasedDataSource -> @Nullable 	public String getUsername();1500457438;Return the JDBC username to use for connecting through the Driver.;@Nullable_	public String getUsername() {_		return this.username__	};return,the,jdbc,username,to,use,for,connecting,through,the,driver;nullable,public,string,get,username,return,this,username
AbstractDriverBasedDataSource -> public String getPassword();1328020251;Return the JDBC password to use for connecting through the Driver.;public String getPassword() {_		return this.password__	};return,the,jdbc,password,to,use,for,connecting,through,the,driver;public,string,get,password,return,this,password
AbstractDriverBasedDataSource -> public String getPassword();1356735495;Return the JDBC password to use for connecting through the Driver.;public String getPassword() {_		return this.password__	};return,the,jdbc,password,to,use,for,connecting,through,the,driver;public,string,get,password,return,this,password
AbstractDriverBasedDataSource -> public String getPassword();1357119239;Return the JDBC password to use for connecting through the Driver.;public String getPassword() {_		return this.password__	};return,the,jdbc,password,to,use,for,connecting,through,the,driver;public,string,get,password,return,this,password
AbstractDriverBasedDataSource -> public String getPassword();1362408075;Return the JDBC password to use for connecting through the Driver.;public String getPassword() {_		return this.password__	};return,the,jdbc,password,to,use,for,connecting,through,the,driver;public,string,get,password,return,this,password
AbstractDriverBasedDataSource -> public String getPassword();1368482696;Return the JDBC password to use for connecting through the Driver.;public String getPassword() {_		return this.password__	};return,the,jdbc,password,to,use,for,connecting,through,the,driver;public,string,get,password,return,this,password
AbstractDriverBasedDataSource -> public String getPassword();1469102800;Return the JDBC password to use for connecting through the Driver.;public String getPassword() {_		return this.password__	};return,the,jdbc,password,to,use,for,connecting,through,the,driver;public,string,get,password,return,this,password
AbstractDriverBasedDataSource -> public String getPassword();1495868221;Return the JDBC password to use for connecting through the Driver.;public String getPassword() {_		return this.password__	};return,the,jdbc,password,to,use,for,connecting,through,the,driver;public,string,get,password,return,this,password
AbstractDriverBasedDataSource -> public void setPassword(String password);1328020251;Set the JDBC password to use for connecting through the Driver._@see java.sql.Driver#connect(String, java.util.Properties);public void setPassword(String password) {_		this.password = password__	};set,the,jdbc,password,to,use,for,connecting,through,the,driver,see,java,sql,driver,connect,string,java,util,properties;public,void,set,password,string,password,this,password,password
AbstractDriverBasedDataSource -> public void setPassword(String password);1356735495;Set the JDBC password to use for connecting through the Driver._@see java.sql.Driver#connect(String, java.util.Properties);public void setPassword(String password) {_		this.password = password__	};set,the,jdbc,password,to,use,for,connecting,through,the,driver,see,java,sql,driver,connect,string,java,util,properties;public,void,set,password,string,password,this,password,password
AbstractDriverBasedDataSource -> public void setPassword(String password);1357119239;Set the JDBC password to use for connecting through the Driver._@see java.sql.Driver#connect(String, java.util.Properties);public void setPassword(String password) {_		this.password = password__	};set,the,jdbc,password,to,use,for,connecting,through,the,driver,see,java,sql,driver,connect,string,java,util,properties;public,void,set,password,string,password,this,password,password
AbstractDriverBasedDataSource -> public void setPassword(String password);1362408075;Set the JDBC password to use for connecting through the Driver._@see java.sql.Driver#connect(String, java.util.Properties);public void setPassword(String password) {_		this.password = password__	};set,the,jdbc,password,to,use,for,connecting,through,the,driver,see,java,sql,driver,connect,string,java,util,properties;public,void,set,password,string,password,this,password,password
AbstractDriverBasedDataSource -> public void setPassword(String password);1368482696;Set the JDBC password to use for connecting through the Driver._@see java.sql.Driver#connect(String, java.util.Properties);public void setPassword(String password) {_		this.password = password__	};set,the,jdbc,password,to,use,for,connecting,through,the,driver,see,java,sql,driver,connect,string,java,util,properties;public,void,set,password,string,password,this,password,password
AbstractDriverBasedDataSource -> public void setPassword(String password);1469102800;Set the JDBC password to use for connecting through the Driver._@see java.sql.Driver#connect(String, java.util.Properties);public void setPassword(String password) {_		this.password = password__	};set,the,jdbc,password,to,use,for,connecting,through,the,driver,see,java,sql,driver,connect,string,java,util,properties;public,void,set,password,string,password,this,password,password
AbstractDriverBasedDataSource -> public void setPassword(String password);1495868221;Set the JDBC password to use for connecting through the Driver._@see java.sql.Driver#connect(String, java.util.Properties);public void setPassword(String password) {_		this.password = password__	};set,the,jdbc,password,to,use,for,connecting,through,the,driver,see,java,sql,driver,connect,string,java,util,properties;public,void,set,password,string,password,this,password,password
AbstractDriverBasedDataSource -> public void setPassword(String password);1496837955;Set the JDBC password to use for connecting through the Driver._@see java.sql.Driver#connect(String, java.util.Properties);public void setPassword(String password) {_		this.password = password__	};set,the,jdbc,password,to,use,for,connecting,through,the,driver,see,java,sql,driver,connect,string,java,util,properties;public,void,set,password,string,password,this,password,password
AbstractDriverBasedDataSource -> public void setPassword(String password);1498780456;Set the JDBC password to use for connecting through the Driver._@see java.sql.Driver#connect(String, java.util.Properties);public void setPassword(String password) {_		this.password = password__	};set,the,jdbc,password,to,use,for,connecting,through,the,driver,see,java,sql,driver,connect,string,java,util,properties;public,void,set,password,string,password,this,password,password
AbstractDriverBasedDataSource -> @Nullable 	public String getPassword();1496837955;Return the JDBC password to use for connecting through the Driver.;@Nullable_	public String getPassword() {_		return this.password__	};return,the,jdbc,password,to,use,for,connecting,through,the,driver;nullable,public,string,get,password,return,this,password
AbstractDriverBasedDataSource -> @Nullable 	public String getPassword();1498780456;Return the JDBC password to use for connecting through the Driver.;@Nullable_	public String getPassword() {_		return this.password__	};return,the,jdbc,password,to,use,for,connecting,through,the,driver;nullable,public,string,get,password,return,this,password
AbstractDriverBasedDataSource -> @Nullable 	public String getPassword();1500448076;Return the JDBC password to use for connecting through the Driver.;@Nullable_	public String getPassword() {_		return this.password__	};return,the,jdbc,password,to,use,for,connecting,through,the,driver;nullable,public,string,get,password,return,this,password
AbstractDriverBasedDataSource -> @Nullable 	public String getPassword();1500457438;Return the JDBC password to use for connecting through the Driver.;@Nullable_	public String getPassword() {_		return this.password__	};return,the,jdbc,password,to,use,for,connecting,through,the,driver;nullable,public,string,get,password,return,this,password
AbstractDriverBasedDataSource -> @Nullable 	public String getSchema();1495868221;Return the database schema to be applied to each Connection, if any._@since 4.3.2;@Nullable_	public String getSchema() {_		return this.schema__	};return,the,database,schema,to,be,applied,to,each,connection,if,any,since,4,3,2;nullable,public,string,get,schema,return,this,schema
AbstractDriverBasedDataSource -> @Nullable 	public String getSchema();1496837955;Return the database schema to be applied to each Connection, if any._@since 4.3.2;@Nullable_	public String getSchema() {_		return this.schema__	};return,the,database,schema,to,be,applied,to,each,connection,if,any,since,4,3,2;nullable,public,string,get,schema,return,this,schema
AbstractDriverBasedDataSource -> @Nullable 	public String getSchema();1498780456;Return the database schema to be applied to each Connection, if any._@since 4.3.2;@Nullable_	public String getSchema() {_		return this.schema__	};return,the,database,schema,to,be,applied,to,each,connection,if,any,since,4,3,2;nullable,public,string,get,schema,return,this,schema
AbstractDriverBasedDataSource -> @Nullable 	public String getSchema();1500448076;Return the database schema to be applied to each Connection, if any._@since 4.3.2;@Nullable_	public String getSchema() {_		return this.schema__	};return,the,database,schema,to,be,applied,to,each,connection,if,any,since,4,3,2;nullable,public,string,get,schema,return,this,schema
AbstractDriverBasedDataSource -> @Nullable 	public String getSchema();1500457438;Return the database schema to be applied to each Connection, if any._@since 4.3.2;@Nullable_	public String getSchema() {_		return this.schema__	};return,the,database,schema,to,be,applied,to,each,connection,if,any,since,4,3,2;nullable,public,string,get,schema,return,this,schema
AbstractDriverBasedDataSource -> public void setUsername(String username);1328020251;Set the JDBC username to use for connecting through the Driver._@see java.sql.Driver#connect(String, java.util.Properties);public void setUsername(String username) {_		this.username = username__	};set,the,jdbc,username,to,use,for,connecting,through,the,driver,see,java,sql,driver,connect,string,java,util,properties;public,void,set,username,string,username,this,username,username
AbstractDriverBasedDataSource -> public void setUsername(String username);1356735495;Set the JDBC username to use for connecting through the Driver._@see java.sql.Driver#connect(String, java.util.Properties);public void setUsername(String username) {_		this.username = username__	};set,the,jdbc,username,to,use,for,connecting,through,the,driver,see,java,sql,driver,connect,string,java,util,properties;public,void,set,username,string,username,this,username,username
AbstractDriverBasedDataSource -> public void setUsername(String username);1357119239;Set the JDBC username to use for connecting through the Driver._@see java.sql.Driver#connect(String, java.util.Properties);public void setUsername(String username) {_		this.username = username__	};set,the,jdbc,username,to,use,for,connecting,through,the,driver,see,java,sql,driver,connect,string,java,util,properties;public,void,set,username,string,username,this,username,username
AbstractDriverBasedDataSource -> public void setUsername(String username);1362408075;Set the JDBC username to use for connecting through the Driver._@see java.sql.Driver#connect(String, java.util.Properties);public void setUsername(String username) {_		this.username = username__	};set,the,jdbc,username,to,use,for,connecting,through,the,driver,see,java,sql,driver,connect,string,java,util,properties;public,void,set,username,string,username,this,username,username
AbstractDriverBasedDataSource -> public void setUsername(String username);1368482696;Set the JDBC username to use for connecting through the Driver._@see java.sql.Driver#connect(String, java.util.Properties);public void setUsername(String username) {_		this.username = username__	};set,the,jdbc,username,to,use,for,connecting,through,the,driver,see,java,sql,driver,connect,string,java,util,properties;public,void,set,username,string,username,this,username,username
AbstractDriverBasedDataSource -> public void setUsername(String username);1469102800;Set the JDBC username to use for connecting through the Driver._@see java.sql.Driver#connect(String, java.util.Properties);public void setUsername(String username) {_		this.username = username__	};set,the,jdbc,username,to,use,for,connecting,through,the,driver,see,java,sql,driver,connect,string,java,util,properties;public,void,set,username,string,username,this,username,username
AbstractDriverBasedDataSource -> public void setUsername(String username);1495868221;Set the JDBC username to use for connecting through the Driver._@see java.sql.Driver#connect(String, java.util.Properties);public void setUsername(String username) {_		this.username = username__	};set,the,jdbc,username,to,use,for,connecting,through,the,driver,see,java,sql,driver,connect,string,java,util,properties;public,void,set,username,string,username,this,username,username
AbstractDriverBasedDataSource -> public void setUsername(String username);1496837955;Set the JDBC username to use for connecting through the Driver._@see java.sql.Driver#connect(String, java.util.Properties);public void setUsername(String username) {_		this.username = username__	};set,the,jdbc,username,to,use,for,connecting,through,the,driver,see,java,sql,driver,connect,string,java,util,properties;public,void,set,username,string,username,this,username,username
AbstractDriverBasedDataSource -> public void setUsername(String username);1498780456;Set the JDBC username to use for connecting through the Driver._@see java.sql.Driver#connect(String, java.util.Properties);public void setUsername(String username) {_		this.username = username__	};set,the,jdbc,username,to,use,for,connecting,through,the,driver,see,java,sql,driver,connect,string,java,util,properties;public,void,set,username,string,username,this,username,username
AbstractDriverBasedDataSource -> public void setSchema(@Nullable String schema);1500448076;Specify a database schema to be applied to each Connection._@since 4.3.2_@see Connection#setSchema;public void setSchema(@Nullable String schema) {_		this.schema = schema__	};specify,a,database,schema,to,be,applied,to,each,connection,since,4,3,2,see,connection,set,schema;public,void,set,schema,nullable,string,schema,this,schema,schema
AbstractDriverBasedDataSource -> public void setSchema(@Nullable String schema);1500457438;Specify a database schema to be applied to each Connection._@since 4.3.2_@see Connection#setSchema;public void setSchema(@Nullable String schema) {_		this.schema = schema__	};specify,a,database,schema,to,be,applied,to,each,connection,since,4,3,2,see,connection,set,schema;public,void,set,schema,nullable,string,schema,this,schema,schema
AbstractDriverBasedDataSource -> public Connection getConnection(String username, String password) throws SQLException;1328020251;This implementation delegates to <code>getConnectionFromDriver</code>,_using the given username and password._@see #getConnectionFromDriver(String, String);public Connection getConnection(String username, String password) throws SQLException {_		return getConnectionFromDriver(username, password)__	};this,implementation,delegates,to,code,get,connection,from,driver,code,using,the,given,username,and,password,see,get,connection,from,driver,string,string;public,connection,get,connection,string,username,string,password,throws,sqlexception,return,get,connection,from,driver,username,password
AbstractDriverBasedDataSource -> public Connection getConnection(String username, String password) throws SQLException;1357119239;This implementation delegates to {@code getConnectionFromDriver},_using the given username and password._@see #getConnectionFromDriver(String, String);public Connection getConnection(String username, String password) throws SQLException {_		return getConnectionFromDriver(username, password)__	};this,implementation,delegates,to,code,get,connection,from,driver,using,the,given,username,and,password,see,get,connection,from,driver,string,string;public,connection,get,connection,string,username,string,password,throws,sqlexception,return,get,connection,from,driver,username,password
AbstractDriverBasedDataSource -> public Connection getConnection(String username, String password) throws SQLException;1362408075;This implementation delegates to {@code getConnectionFromDriver},_using the given username and password._@see #getConnectionFromDriver(String, String);public Connection getConnection(String username, String password) throws SQLException {_		return getConnectionFromDriver(username, password)__	};this,implementation,delegates,to,code,get,connection,from,driver,using,the,given,username,and,password,see,get,connection,from,driver,string,string;public,connection,get,connection,string,username,string,password,throws,sqlexception,return,get,connection,from,driver,username,password
AbstractDriverBasedDataSource -> @Override 	public Connection getConnection() throws SQLException;1356735495;This implementation delegates to {@code getConnectionFromDriver},_using the default username and password of this DataSource._@see #getConnectionFromDriver(String, String)_@see #setUsername_@see #setPassword;@Override_	public Connection getConnection() throws SQLException {_		return getConnectionFromDriver(getUsername(), getPassword())__	};this,implementation,delegates,to,code,get,connection,from,driver,using,the,default,username,and,password,of,this,data,source,see,get,connection,from,driver,string,string,see,set,username,see,set,password;override,public,connection,get,connection,throws,sqlexception,return,get,connection,from,driver,get,username,get,password
AbstractDriverBasedDataSource -> @Override 	public Connection getConnection() throws SQLException;1368482696;This implementation delegates to {@code getConnectionFromDriver},_using the default username and password of this DataSource._@see #getConnectionFromDriver(String, String)_@see #setUsername_@see #setPassword;@Override_	public Connection getConnection() throws SQLException {_		return getConnectionFromDriver(getUsername(), getPassword())__	};this,implementation,delegates,to,code,get,connection,from,driver,using,the,default,username,and,password,of,this,data,source,see,get,connection,from,driver,string,string,see,set,username,see,set,password;override,public,connection,get,connection,throws,sqlexception,return,get,connection,from,driver,get,username,get,password
AbstractDriverBasedDataSource -> @Override 	public Connection getConnection() throws SQLException;1469102800;This implementation delegates to {@code getConnectionFromDriver},_using the default username and password of this DataSource._@see #getConnectionFromDriver(String, String)_@see #setUsername_@see #setPassword;@Override_	public Connection getConnection() throws SQLException {_		return getConnectionFromDriver(getUsername(), getPassword())__	};this,implementation,delegates,to,code,get,connection,from,driver,using,the,default,username,and,password,of,this,data,source,see,get,connection,from,driver,string,string,see,set,username,see,set,password;override,public,connection,get,connection,throws,sqlexception,return,get,connection,from,driver,get,username,get,password
AbstractDriverBasedDataSource -> @Override 	public Connection getConnection() throws SQLException;1495868221;This implementation delegates to {@code getConnectionFromDriver},_using the default username and password of this DataSource._@see #getConnectionFromDriver(String, String)_@see #setUsername_@see #setPassword;@Override_	public Connection getConnection() throws SQLException {_		return getConnectionFromDriver(getUsername(), getPassword())__	};this,implementation,delegates,to,code,get,connection,from,driver,using,the,default,username,and,password,of,this,data,source,see,get,connection,from,driver,string,string,see,set,username,see,set,password;override,public,connection,get,connection,throws,sqlexception,return,get,connection,from,driver,get,username,get,password
AbstractDriverBasedDataSource -> @Override 	public Connection getConnection() throws SQLException;1496837955;This implementation delegates to {@code getConnectionFromDriver},_using the default username and password of this DataSource._@see #getConnectionFromDriver(String, String)_@see #setUsername_@see #setPassword;@Override_	public Connection getConnection() throws SQLException {_		return getConnectionFromDriver(getUsername(), getPassword())__	};this,implementation,delegates,to,code,get,connection,from,driver,using,the,default,username,and,password,of,this,data,source,see,get,connection,from,driver,string,string,see,set,username,see,set,password;override,public,connection,get,connection,throws,sqlexception,return,get,connection,from,driver,get,username,get,password
AbstractDriverBasedDataSource -> @Override 	public Connection getConnection() throws SQLException;1498780456;This implementation delegates to {@code getConnectionFromDriver},_using the default username and password of this DataSource._@see #getConnectionFromDriver(String, String)_@see #setUsername_@see #setPassword;@Override_	public Connection getConnection() throws SQLException {_		return getConnectionFromDriver(getUsername(), getPassword())__	};this,implementation,delegates,to,code,get,connection,from,driver,using,the,default,username,and,password,of,this,data,source,see,get,connection,from,driver,string,string,see,set,username,see,set,password;override,public,connection,get,connection,throws,sqlexception,return,get,connection,from,driver,get,username,get,password
AbstractDriverBasedDataSource -> @Override 	public Connection getConnection() throws SQLException;1500448076;This implementation delegates to {@code getConnectionFromDriver},_using the default username and password of this DataSource._@see #getConnectionFromDriver(String, String)_@see #setUsername_@see #setPassword;@Override_	public Connection getConnection() throws SQLException {_		return getConnectionFromDriver(getUsername(), getPassword())__	};this,implementation,delegates,to,code,get,connection,from,driver,using,the,default,username,and,password,of,this,data,source,see,get,connection,from,driver,string,string,see,set,username,see,set,password;override,public,connection,get,connection,throws,sqlexception,return,get,connection,from,driver,get,username,get,password
AbstractDriverBasedDataSource -> @Override 	public Connection getConnection() throws SQLException;1500457438;This implementation delegates to {@code getConnectionFromDriver},_using the default username and password of this DataSource._@see #getConnectionFromDriver(String, String)_@see #setUsername_@see #setPassword;@Override_	public Connection getConnection() throws SQLException {_		return getConnectionFromDriver(getUsername(), getPassword())__	};this,implementation,delegates,to,code,get,connection,from,driver,using,the,default,username,and,password,of,this,data,source,see,get,connection,from,driver,string,string,see,set,username,see,set,password;override,public,connection,get,connection,throws,sqlexception,return,get,connection,from,driver,get,username,get,password
AbstractDriverBasedDataSource -> public String getUrl();1328020251;Return the JDBC URL to use for connecting through the Driver.;public String getUrl() {_		return this.url__	};return,the,jdbc,url,to,use,for,connecting,through,the,driver;public,string,get,url,return,this,url
AbstractDriverBasedDataSource -> public String getUrl();1356735495;Return the JDBC URL to use for connecting through the Driver.;public String getUrl() {_		return this.url__	};return,the,jdbc,url,to,use,for,connecting,through,the,driver;public,string,get,url,return,this,url
AbstractDriverBasedDataSource -> public String getUrl();1357119239;Return the JDBC URL to use for connecting through the Driver.;public String getUrl() {_		return this.url__	};return,the,jdbc,url,to,use,for,connecting,through,the,driver;public,string,get,url,return,this,url
AbstractDriverBasedDataSource -> public String getUrl();1362408075;Return the JDBC URL to use for connecting through the Driver.;public String getUrl() {_		return this.url__	};return,the,jdbc,url,to,use,for,connecting,through,the,driver;public,string,get,url,return,this,url
AbstractDriverBasedDataSource -> public String getUrl();1368482696;Return the JDBC URL to use for connecting through the Driver.;public String getUrl() {_		return this.url__	};return,the,jdbc,url,to,use,for,connecting,through,the,driver;public,string,get,url,return,this,url
AbstractDriverBasedDataSource -> public String getUrl();1469102800;Return the JDBC URL to use for connecting through the Driver.;public String getUrl() {_		return this.url__	};return,the,jdbc,url,to,use,for,connecting,through,the,driver;public,string,get,url,return,this,url
AbstractDriverBasedDataSource -> public String getUrl();1495868221;Return the JDBC URL to use for connecting through the Driver.;public String getUrl() {_		return this.url__	};return,the,jdbc,url,to,use,for,connecting,through,the,driver;public,string,get,url,return,this,url
AbstractDriverBasedDataSource -> public Properties getConnectionProperties();1328020251;Return the connection properties to be passed to the Driver, if any.;public Properties getConnectionProperties() {_		return this.connectionProperties__	};return,the,connection,properties,to,be,passed,to,the,driver,if,any;public,properties,get,connection,properties,return,this,connection,properties
AbstractDriverBasedDataSource -> public Properties getConnectionProperties();1356735495;Return the connection properties to be passed to the Driver, if any.;public Properties getConnectionProperties() {_		return this.connectionProperties__	};return,the,connection,properties,to,be,passed,to,the,driver,if,any;public,properties,get,connection,properties,return,this,connection,properties
AbstractDriverBasedDataSource -> public Properties getConnectionProperties();1357119239;Return the connection properties to be passed to the Driver, if any.;public Properties getConnectionProperties() {_		return this.connectionProperties__	};return,the,connection,properties,to,be,passed,to,the,driver,if,any;public,properties,get,connection,properties,return,this,connection,properties
AbstractDriverBasedDataSource -> public Properties getConnectionProperties();1362408075;Return the connection properties to be passed to the Driver, if any.;public Properties getConnectionProperties() {_		return this.connectionProperties__	};return,the,connection,properties,to,be,passed,to,the,driver,if,any;public,properties,get,connection,properties,return,this,connection,properties
AbstractDriverBasedDataSource -> public Properties getConnectionProperties();1368482696;Return the connection properties to be passed to the Driver, if any.;public Properties getConnectionProperties() {_		return this.connectionProperties__	};return,the,connection,properties,to,be,passed,to,the,driver,if,any;public,properties,get,connection,properties,return,this,connection,properties
AbstractDriverBasedDataSource -> public Properties getConnectionProperties();1469102800;Return the connection properties to be passed to the Driver, if any.;public Properties getConnectionProperties() {_		return this.connectionProperties__	};return,the,connection,properties,to,be,passed,to,the,driver,if,any;public,properties,get,connection,properties,return,this,connection,properties
AbstractDriverBasedDataSource -> public void setUrl(String url);1328020251;Set the JDBC URL to use for connecting through the Driver._@see java.sql.Driver#connect(String, java.util.Properties);public void setUrl(String url) {_		Assert.hasText(url, "Property 'url' must not be empty")__		this.url = url.trim()__	};set,the,jdbc,url,to,use,for,connecting,through,the,driver,see,java,sql,driver,connect,string,java,util,properties;public,void,set,url,string,url,assert,has,text,url,property,url,must,not,be,empty,this,url,url,trim
AbstractDriverBasedDataSource -> public void setUrl(String url);1356735495;Set the JDBC URL to use for connecting through the Driver._@see java.sql.Driver#connect(String, java.util.Properties);public void setUrl(String url) {_		Assert.hasText(url, "Property 'url' must not be empty")__		this.url = url.trim()__	};set,the,jdbc,url,to,use,for,connecting,through,the,driver,see,java,sql,driver,connect,string,java,util,properties;public,void,set,url,string,url,assert,has,text,url,property,url,must,not,be,empty,this,url,url,trim
AbstractDriverBasedDataSource -> public void setUrl(String url);1357119239;Set the JDBC URL to use for connecting through the Driver._@see java.sql.Driver#connect(String, java.util.Properties);public void setUrl(String url) {_		Assert.hasText(url, "Property 'url' must not be empty")__		this.url = url.trim()__	};set,the,jdbc,url,to,use,for,connecting,through,the,driver,see,java,sql,driver,connect,string,java,util,properties;public,void,set,url,string,url,assert,has,text,url,property,url,must,not,be,empty,this,url,url,trim
AbstractDriverBasedDataSource -> public void setUrl(String url);1362408075;Set the JDBC URL to use for connecting through the Driver._@see java.sql.Driver#connect(String, java.util.Properties);public void setUrl(String url) {_		Assert.hasText(url, "Property 'url' must not be empty")__		this.url = url.trim()__	};set,the,jdbc,url,to,use,for,connecting,through,the,driver,see,java,sql,driver,connect,string,java,util,properties;public,void,set,url,string,url,assert,has,text,url,property,url,must,not,be,empty,this,url,url,trim
AbstractDriverBasedDataSource -> public void setUrl(String url);1368482696;Set the JDBC URL to use for connecting through the Driver._@see java.sql.Driver#connect(String, java.util.Properties);public void setUrl(String url) {_		Assert.hasText(url, "Property 'url' must not be empty")__		this.url = url.trim()__	};set,the,jdbc,url,to,use,for,connecting,through,the,driver,see,java,sql,driver,connect,string,java,util,properties;public,void,set,url,string,url,assert,has,text,url,property,url,must,not,be,empty,this,url,url,trim
AbstractDriverBasedDataSource -> public void setUrl(String url);1469102800;Set the JDBC URL to use for connecting through the Driver._@see java.sql.Driver#connect(String, java.util.Properties);public void setUrl(String url) {_		Assert.hasText(url, "Property 'url' must not be empty")__		this.url = url.trim()__	};set,the,jdbc,url,to,use,for,connecting,through,the,driver,see,java,sql,driver,connect,string,java,util,properties;public,void,set,url,string,url,assert,has,text,url,property,url,must,not,be,empty,this,url,url,trim
AbstractDriverBasedDataSource -> public void setUrl(String url);1495868221;Set the JDBC URL to use for connecting through the Driver._@see java.sql.Driver#connect(String, java.util.Properties);public void setUrl(String url) {_		Assert.hasText(url, "Property 'url' must not be empty")__		this.url = url.trim()__	};set,the,jdbc,url,to,use,for,connecting,through,the,driver,see,java,sql,driver,connect,string,java,util,properties;public,void,set,url,string,url,assert,has,text,url,property,url,must,not,be,empty,this,url,url,trim
AbstractDriverBasedDataSource -> public void setUrl(String url);1496837955;Set the JDBC URL to use for connecting through the Driver._@see java.sql.Driver#connect(String, java.util.Properties);public void setUrl(String url) {_		Assert.hasText(url, "Property 'url' must not be empty")__		this.url = url.trim()__	};set,the,jdbc,url,to,use,for,connecting,through,the,driver,see,java,sql,driver,connect,string,java,util,properties;public,void,set,url,string,url,assert,has,text,url,property,url,must,not,be,empty,this,url,url,trim
AbstractDriverBasedDataSource -> public void setUrl(String url);1498780456;Set the JDBC URL to use for connecting through the Driver._@see java.sql.Driver#connect(String, java.util.Properties);public void setUrl(String url) {_		Assert.hasText(url, "Property 'url' must not be empty")__		this.url = url.trim()__	};set,the,jdbc,url,to,use,for,connecting,through,the,driver,see,java,sql,driver,connect,string,java,util,properties;public,void,set,url,string,url,assert,has,text,url,property,url,must,not,be,empty,this,url,url,trim
AbstractDriverBasedDataSource -> @Nullable 	public String getUrl();1496837955;Return the JDBC URL to use for connecting through the Driver.;@Nullable_	public String getUrl() {_		return this.url__	};return,the,jdbc,url,to,use,for,connecting,through,the,driver;nullable,public,string,get,url,return,this,url
AbstractDriverBasedDataSource -> @Nullable 	public String getUrl();1498780456;Return the JDBC URL to use for connecting through the Driver.;@Nullable_	public String getUrl() {_		return this.url__	};return,the,jdbc,url,to,use,for,connecting,through,the,driver;nullable,public,string,get,url,return,this,url
AbstractDriverBasedDataSource -> @Nullable 	public String getUrl();1500448076;Return the JDBC URL to use for connecting through the Driver.;@Nullable_	public String getUrl() {_		return this.url__	};return,the,jdbc,url,to,use,for,connecting,through,the,driver;nullable,public,string,get,url,return,this,url
AbstractDriverBasedDataSource -> @Nullable 	public String getUrl();1500457438;Return the JDBC URL to use for connecting through the Driver.;@Nullable_	public String getUrl() {_		return this.url__	};return,the,jdbc,url,to,use,for,connecting,through,the,driver;nullable,public,string,get,url,return,this,url
AbstractDriverBasedDataSource -> public void setCatalog(@Nullable String catalog);1500448076;Specify a database catalog to be applied to each Connection._@since 4.3.2_@see Connection#setCatalog;public void setCatalog(@Nullable String catalog) {_		this.catalog = catalog__	};specify,a,database,catalog,to,be,applied,to,each,connection,since,4,3,2,see,connection,set,catalog;public,void,set,catalog,nullable,string,catalog,this,catalog,catalog
AbstractDriverBasedDataSource -> public void setCatalog(@Nullable String catalog);1500457438;Specify a database catalog to be applied to each Connection._@since 4.3.2_@see Connection#setCatalog;public void setCatalog(@Nullable String catalog) {_		this.catalog = catalog__	};specify,a,database,catalog,to,be,applied,to,each,connection,since,4,3,2,see,connection,set,catalog;public,void,set,catalog,nullable,string,catalog,this,catalog,catalog
AbstractDriverBasedDataSource -> public void setConnectionProperties(@Nullable Properties connectionProperties);1500448076;Specify arbitrary connection properties as key/value pairs,_to be passed to the Driver._<p>Can also contain "user" and "password" properties. However,_any "username" and "password" bean properties specified on this_DataSource will override the corresponding connection properties._@see java.sql.Driver#connect(String, java.util.Properties);public void setConnectionProperties(@Nullable Properties connectionProperties) {_		this.connectionProperties = connectionProperties__	};specify,arbitrary,connection,properties,as,key,value,pairs,to,be,passed,to,the,driver,p,can,also,contain,user,and,password,properties,however,any,username,and,password,bean,properties,specified,on,this,data,source,will,override,the,corresponding,connection,properties,see,java,sql,driver,connect,string,java,util,properties;public,void,set,connection,properties,nullable,properties,connection,properties,this,connection,properties,connection,properties
AbstractDriverBasedDataSource -> public void setConnectionProperties(@Nullable Properties connectionProperties);1500457438;Specify arbitrary connection properties as key/value pairs,_to be passed to the Driver._<p>Can also contain "user" and "password" properties. However,_any "username" and "password" bean properties specified on this_DataSource will override the corresponding connection properties._@see java.sql.Driver#connect(String, java.util.Properties);public void setConnectionProperties(@Nullable Properties connectionProperties) {_		this.connectionProperties = connectionProperties__	};specify,arbitrary,connection,properties,as,key,value,pairs,to,be,passed,to,the,driver,p,can,also,contain,user,and,password,properties,however,any,username,and,password,bean,properties,specified,on,this,data,source,will,override,the,corresponding,connection,properties,see,java,sql,driver,connect,string,java,util,properties;public,void,set,connection,properties,nullable,properties,connection,properties,this,connection,properties,connection,properties
AbstractDriverBasedDataSource -> public void setPassword(@Nullable String password);1500448076;Set the JDBC password to use for connecting through the Driver._@see java.sql.Driver#connect(String, java.util.Properties);public void setPassword(@Nullable String password) {_		this.password = password__	};set,the,jdbc,password,to,use,for,connecting,through,the,driver,see,java,sql,driver,connect,string,java,util,properties;public,void,set,password,nullable,string,password,this,password,password
AbstractDriverBasedDataSource -> public void setPassword(@Nullable String password);1500457438;Set the JDBC password to use for connecting through the Driver._@see java.sql.Driver#connect(String, java.util.Properties);public void setPassword(@Nullable String password) {_		this.password = password__	};set,the,jdbc,password,to,use,for,connecting,through,the,driver,see,java,sql,driver,connect,string,java,util,properties;public,void,set,password,nullable,string,password,this,password,password
AbstractDriverBasedDataSource -> public String getUsername();1328020251;Return the JDBC username to use for connecting through the Driver.;public String getUsername() {_		return this.username__	};return,the,jdbc,username,to,use,for,connecting,through,the,driver;public,string,get,username,return,this,username
AbstractDriverBasedDataSource -> public String getUsername();1356735495;Return the JDBC username to use for connecting through the Driver.;public String getUsername() {_		return this.username__	};return,the,jdbc,username,to,use,for,connecting,through,the,driver;public,string,get,username,return,this,username
AbstractDriverBasedDataSource -> public String getUsername();1357119239;Return the JDBC username to use for connecting through the Driver.;public String getUsername() {_		return this.username__	};return,the,jdbc,username,to,use,for,connecting,through,the,driver;public,string,get,username,return,this,username
AbstractDriverBasedDataSource -> public String getUsername();1362408075;Return the JDBC username to use for connecting through the Driver.;public String getUsername() {_		return this.username__	};return,the,jdbc,username,to,use,for,connecting,through,the,driver;public,string,get,username,return,this,username
AbstractDriverBasedDataSource -> public String getUsername();1368482696;Return the JDBC username to use for connecting through the Driver.;public String getUsername() {_		return this.username__	};return,the,jdbc,username,to,use,for,connecting,through,the,driver;public,string,get,username,return,this,username
AbstractDriverBasedDataSource -> public String getUsername();1469102800;Return the JDBC username to use for connecting through the Driver.;public String getUsername() {_		return this.username__	};return,the,jdbc,username,to,use,for,connecting,through,the,driver;public,string,get,username,return,this,username
AbstractDriverBasedDataSource -> public String getUsername();1495868221;Return the JDBC username to use for connecting through the Driver.;public String getUsername() {_		return this.username__	};return,the,jdbc,username,to,use,for,connecting,through,the,driver;public,string,get,username,return,this,username
AbstractDriverBasedDataSource -> public void setConnectionProperties(Properties connectionProperties);1328020251;Specify arbitrary connection properties as key/value pairs,_to be passed to the Driver._<p>Can also contain "user" and "password" properties. However,_any "username" and "password" bean properties specified on this_DataSource will override the corresponding connection properties._@see java.sql.Driver#connect(String, java.util.Properties);public void setConnectionProperties(Properties connectionProperties) {_		this.connectionProperties = connectionProperties__	};specify,arbitrary,connection,properties,as,key,value,pairs,to,be,passed,to,the,driver,p,can,also,contain,user,and,password,properties,however,any,username,and,password,bean,properties,specified,on,this,data,source,will,override,the,corresponding,connection,properties,see,java,sql,driver,connect,string,java,util,properties;public,void,set,connection,properties,properties,connection,properties,this,connection,properties,connection,properties
AbstractDriverBasedDataSource -> public void setConnectionProperties(Properties connectionProperties);1356735495;Specify arbitrary connection properties as key/value pairs,_to be passed to the Driver._<p>Can also contain "user" and "password" properties. However,_any "username" and "password" bean properties specified on this_DataSource will override the corresponding connection properties._@see java.sql.Driver#connect(String, java.util.Properties);public void setConnectionProperties(Properties connectionProperties) {_		this.connectionProperties = connectionProperties__	};specify,arbitrary,connection,properties,as,key,value,pairs,to,be,passed,to,the,driver,p,can,also,contain,user,and,password,properties,however,any,username,and,password,bean,properties,specified,on,this,data,source,will,override,the,corresponding,connection,properties,see,java,sql,driver,connect,string,java,util,properties;public,void,set,connection,properties,properties,connection,properties,this,connection,properties,connection,properties
AbstractDriverBasedDataSource -> public void setConnectionProperties(Properties connectionProperties);1357119239;Specify arbitrary connection properties as key/value pairs,_to be passed to the Driver._<p>Can also contain "user" and "password" properties. However,_any "username" and "password" bean properties specified on this_DataSource will override the corresponding connection properties._@see java.sql.Driver#connect(String, java.util.Properties);public void setConnectionProperties(Properties connectionProperties) {_		this.connectionProperties = connectionProperties__	};specify,arbitrary,connection,properties,as,key,value,pairs,to,be,passed,to,the,driver,p,can,also,contain,user,and,password,properties,however,any,username,and,password,bean,properties,specified,on,this,data,source,will,override,the,corresponding,connection,properties,see,java,sql,driver,connect,string,java,util,properties;public,void,set,connection,properties,properties,connection,properties,this,connection,properties,connection,properties
AbstractDriverBasedDataSource -> public void setConnectionProperties(Properties connectionProperties);1362408075;Specify arbitrary connection properties as key/value pairs,_to be passed to the Driver._<p>Can also contain "user" and "password" properties. However,_any "username" and "password" bean properties specified on this_DataSource will override the corresponding connection properties._@see java.sql.Driver#connect(String, java.util.Properties);public void setConnectionProperties(Properties connectionProperties) {_		this.connectionProperties = connectionProperties__	};specify,arbitrary,connection,properties,as,key,value,pairs,to,be,passed,to,the,driver,p,can,also,contain,user,and,password,properties,however,any,username,and,password,bean,properties,specified,on,this,data,source,will,override,the,corresponding,connection,properties,see,java,sql,driver,connect,string,java,util,properties;public,void,set,connection,properties,properties,connection,properties,this,connection,properties,connection,properties
AbstractDriverBasedDataSource -> public void setConnectionProperties(Properties connectionProperties);1368482696;Specify arbitrary connection properties as key/value pairs,_to be passed to the Driver._<p>Can also contain "user" and "password" properties. However,_any "username" and "password" bean properties specified on this_DataSource will override the corresponding connection properties._@see java.sql.Driver#connect(String, java.util.Properties);public void setConnectionProperties(Properties connectionProperties) {_		this.connectionProperties = connectionProperties__	};specify,arbitrary,connection,properties,as,key,value,pairs,to,be,passed,to,the,driver,p,can,also,contain,user,and,password,properties,however,any,username,and,password,bean,properties,specified,on,this,data,source,will,override,the,corresponding,connection,properties,see,java,sql,driver,connect,string,java,util,properties;public,void,set,connection,properties,properties,connection,properties,this,connection,properties,connection,properties
AbstractDriverBasedDataSource -> public void setConnectionProperties(Properties connectionProperties);1469102800;Specify arbitrary connection properties as key/value pairs,_to be passed to the Driver._<p>Can also contain "user" and "password" properties. However,_any "username" and "password" bean properties specified on this_DataSource will override the corresponding connection properties._@see java.sql.Driver#connect(String, java.util.Properties);public void setConnectionProperties(Properties connectionProperties) {_		this.connectionProperties = connectionProperties__	};specify,arbitrary,connection,properties,as,key,value,pairs,to,be,passed,to,the,driver,p,can,also,contain,user,and,password,properties,however,any,username,and,password,bean,properties,specified,on,this,data,source,will,override,the,corresponding,connection,properties,see,java,sql,driver,connect,string,java,util,properties;public,void,set,connection,properties,properties,connection,properties,this,connection,properties,connection,properties
AbstractDriverBasedDataSource -> public void setConnectionProperties(Properties connectionProperties);1495868221;Specify arbitrary connection properties as key/value pairs,_to be passed to the Driver._<p>Can also contain "user" and "password" properties. However,_any "username" and "password" bean properties specified on this_DataSource will override the corresponding connection properties._@see java.sql.Driver#connect(String, java.util.Properties);public void setConnectionProperties(Properties connectionProperties) {_		this.connectionProperties = connectionProperties__	};specify,arbitrary,connection,properties,as,key,value,pairs,to,be,passed,to,the,driver,p,can,also,contain,user,and,password,properties,however,any,username,and,password,bean,properties,specified,on,this,data,source,will,override,the,corresponding,connection,properties,see,java,sql,driver,connect,string,java,util,properties;public,void,set,connection,properties,properties,connection,properties,this,connection,properties,connection,properties
AbstractDriverBasedDataSource -> public void setConnectionProperties(Properties connectionProperties);1496837955;Specify arbitrary connection properties as key/value pairs,_to be passed to the Driver._<p>Can also contain "user" and "password" properties. However,_any "username" and "password" bean properties specified on this_DataSource will override the corresponding connection properties._@see java.sql.Driver#connect(String, java.util.Properties);public void setConnectionProperties(Properties connectionProperties) {_		this.connectionProperties = connectionProperties__	};specify,arbitrary,connection,properties,as,key,value,pairs,to,be,passed,to,the,driver,p,can,also,contain,user,and,password,properties,however,any,username,and,password,bean,properties,specified,on,this,data,source,will,override,the,corresponding,connection,properties,see,java,sql,driver,connect,string,java,util,properties;public,void,set,connection,properties,properties,connection,properties,this,connection,properties,connection,properties
AbstractDriverBasedDataSource -> public void setConnectionProperties(Properties connectionProperties);1498780456;Specify arbitrary connection properties as key/value pairs,_to be passed to the Driver._<p>Can also contain "user" and "password" properties. However,_any "username" and "password" bean properties specified on this_DataSource will override the corresponding connection properties._@see java.sql.Driver#connect(String, java.util.Properties);public void setConnectionProperties(Properties connectionProperties) {_		this.connectionProperties = connectionProperties__	};specify,arbitrary,connection,properties,as,key,value,pairs,to,be,passed,to,the,driver,p,can,also,contain,user,and,password,properties,however,any,username,and,password,bean,properties,specified,on,this,data,source,will,override,the,corresponding,connection,properties,see,java,sql,driver,connect,string,java,util,properties;public,void,set,connection,properties,properties,connection,properties,this,connection,properties,connection,properties
AbstractDriverBasedDataSource -> public Connection getConnection() throws SQLException;1328020251;This implementation delegates to <code>getConnectionFromDriver</code>,_using the default username and password of this DataSource._@see #getConnectionFromDriver(String, String)_@see #setUsername_@see #setPassword;public Connection getConnection() throws SQLException {_		return getConnectionFromDriver(getUsername(), getPassword())__	};this,implementation,delegates,to,code,get,connection,from,driver,code,using,the,default,username,and,password,of,this,data,source,see,get,connection,from,driver,string,string,see,set,username,see,set,password;public,connection,get,connection,throws,sqlexception,return,get,connection,from,driver,get,username,get,password
AbstractDriverBasedDataSource -> public Connection getConnection() throws SQLException;1357119239;This implementation delegates to {@code getConnectionFromDriver},_using the default username and password of this DataSource._@see #getConnectionFromDriver(String, String)_@see #setUsername_@see #setPassword;public Connection getConnection() throws SQLException {_		return getConnectionFromDriver(getUsername(), getPassword())__	};this,implementation,delegates,to,code,get,connection,from,driver,using,the,default,username,and,password,of,this,data,source,see,get,connection,from,driver,string,string,see,set,username,see,set,password;public,connection,get,connection,throws,sqlexception,return,get,connection,from,driver,get,username,get,password
AbstractDriverBasedDataSource -> public Connection getConnection() throws SQLException;1362408075;This implementation delegates to {@code getConnectionFromDriver},_using the default username and password of this DataSource._@see #getConnectionFromDriver(String, String)_@see #setUsername_@see #setPassword;public Connection getConnection() throws SQLException {_		return getConnectionFromDriver(getUsername(), getPassword())__	};this,implementation,delegates,to,code,get,connection,from,driver,using,the,default,username,and,password,of,this,data,source,see,get,connection,from,driver,string,string,see,set,username,see,set,password;public,connection,get,connection,throws,sqlexception,return,get,connection,from,driver,get,username,get,password
AbstractDriverBasedDataSource -> public void setSchema(String schema);1469102800;Specify a database schema to be applied to each Connection._@since 4.3.2_@see Connection#setSchema;public void setSchema(String schema) {_		this.schema = schema__	};specify,a,database,schema,to,be,applied,to,each,connection,since,4,3,2,see,connection,set,schema;public,void,set,schema,string,schema,this,schema,schema
AbstractDriverBasedDataSource -> public void setSchema(String schema);1495868221;Specify a database schema to be applied to each Connection._@since 4.3.2_@see Connection#setSchema;public void setSchema(String schema) {_		this.schema = schema__	};specify,a,database,schema,to,be,applied,to,each,connection,since,4,3,2,see,connection,set,schema;public,void,set,schema,string,schema,this,schema,schema
AbstractDriverBasedDataSource -> public void setSchema(String schema);1496837955;Specify a database schema to be applied to each Connection._@since 4.3.2_@see Connection#setSchema;public void setSchema(String schema) {_		this.schema = schema__	};specify,a,database,schema,to,be,applied,to,each,connection,since,4,3,2,see,connection,set,schema;public,void,set,schema,string,schema,this,schema,schema
AbstractDriverBasedDataSource -> public void setSchema(String schema);1498780456;Specify a database schema to be applied to each Connection._@since 4.3.2_@see Connection#setSchema;public void setSchema(String schema) {_		this.schema = schema__	};specify,a,database,schema,to,be,applied,to,each,connection,since,4,3,2,see,connection,set,schema;public,void,set,schema,string,schema,this,schema,schema
AbstractDriverBasedDataSource -> protected abstract Connection getConnectionFromDriver(Properties props) throws SQLException_;1328020251;Obtain a Connection using the given properties._<p>Template method to be implemented by subclasses._@param props the merged connection properties_@return the obtained Connection_@throws SQLException in case of failure;protected abstract Connection getConnectionFromDriver(Properties props) throws SQLException_;obtain,a,connection,using,the,given,properties,p,template,method,to,be,implemented,by,subclasses,param,props,the,merged,connection,properties,return,the,obtained,connection,throws,sqlexception,in,case,of,failure;protected,abstract,connection,get,connection,from,driver,properties,props,throws,sqlexception
AbstractDriverBasedDataSource -> protected abstract Connection getConnectionFromDriver(Properties props) throws SQLException_;1356735495;Obtain a Connection using the given properties._<p>Template method to be implemented by subclasses._@param props the merged connection properties_@return the obtained Connection_@throws SQLException in case of failure;protected abstract Connection getConnectionFromDriver(Properties props) throws SQLException_;obtain,a,connection,using,the,given,properties,p,template,method,to,be,implemented,by,subclasses,param,props,the,merged,connection,properties,return,the,obtained,connection,throws,sqlexception,in,case,of,failure;protected,abstract,connection,get,connection,from,driver,properties,props,throws,sqlexception
AbstractDriverBasedDataSource -> protected abstract Connection getConnectionFromDriver(Properties props) throws SQLException_;1357119239;Obtain a Connection using the given properties._<p>Template method to be implemented by subclasses._@param props the merged connection properties_@return the obtained Connection_@throws SQLException in case of failure;protected abstract Connection getConnectionFromDriver(Properties props) throws SQLException_;obtain,a,connection,using,the,given,properties,p,template,method,to,be,implemented,by,subclasses,param,props,the,merged,connection,properties,return,the,obtained,connection,throws,sqlexception,in,case,of,failure;protected,abstract,connection,get,connection,from,driver,properties,props,throws,sqlexception
AbstractDriverBasedDataSource -> protected abstract Connection getConnectionFromDriver(Properties props) throws SQLException_;1362408075;Obtain a Connection using the given properties._<p>Template method to be implemented by subclasses._@param props the merged connection properties_@return the obtained Connection_@throws SQLException in case of failure;protected abstract Connection getConnectionFromDriver(Properties props) throws SQLException_;obtain,a,connection,using,the,given,properties,p,template,method,to,be,implemented,by,subclasses,param,props,the,merged,connection,properties,return,the,obtained,connection,throws,sqlexception,in,case,of,failure;protected,abstract,connection,get,connection,from,driver,properties,props,throws,sqlexception
AbstractDriverBasedDataSource -> protected abstract Connection getConnectionFromDriver(Properties props) throws SQLException_;1368482696;Obtain a Connection using the given properties._<p>Template method to be implemented by subclasses._@param props the merged connection properties_@return the obtained Connection_@throws SQLException in case of failure;protected abstract Connection getConnectionFromDriver(Properties props) throws SQLException_;obtain,a,connection,using,the,given,properties,p,template,method,to,be,implemented,by,subclasses,param,props,the,merged,connection,properties,return,the,obtained,connection,throws,sqlexception,in,case,of,failure;protected,abstract,connection,get,connection,from,driver,properties,props,throws,sqlexception
AbstractDriverBasedDataSource -> protected abstract Connection getConnectionFromDriver(Properties props) throws SQLException_;1469102800;Obtain a Connection using the given properties._<p>Template method to be implemented by subclasses._@param props the merged connection properties_@return the obtained Connection_@throws SQLException in case of failure;protected abstract Connection getConnectionFromDriver(Properties props) throws SQLException_;obtain,a,connection,using,the,given,properties,p,template,method,to,be,implemented,by,subclasses,param,props,the,merged,connection,properties,return,the,obtained,connection,throws,sqlexception,in,case,of,failure;protected,abstract,connection,get,connection,from,driver,properties,props,throws,sqlexception
AbstractDriverBasedDataSource -> protected abstract Connection getConnectionFromDriver(Properties props) throws SQLException_;1495868221;Obtain a Connection using the given properties._<p>Template method to be implemented by subclasses._@param props the merged connection properties_@return the obtained Connection_@throws SQLException in case of failure;protected abstract Connection getConnectionFromDriver(Properties props) throws SQLException_;obtain,a,connection,using,the,given,properties,p,template,method,to,be,implemented,by,subclasses,param,props,the,merged,connection,properties,return,the,obtained,connection,throws,sqlexception,in,case,of,failure;protected,abstract,connection,get,connection,from,driver,properties,props,throws,sqlexception
AbstractDriverBasedDataSource -> protected abstract Connection getConnectionFromDriver(Properties props) throws SQLException_;1496837955;Obtain a Connection using the given properties._<p>Template method to be implemented by subclasses._@param props the merged connection properties_@return the obtained Connection_@throws SQLException in case of failure;protected abstract Connection getConnectionFromDriver(Properties props) throws SQLException_;obtain,a,connection,using,the,given,properties,p,template,method,to,be,implemented,by,subclasses,param,props,the,merged,connection,properties,return,the,obtained,connection,throws,sqlexception,in,case,of,failure;protected,abstract,connection,get,connection,from,driver,properties,props,throws,sqlexception
AbstractDriverBasedDataSource -> protected abstract Connection getConnectionFromDriver(Properties props) throws SQLException_;1498780456;Obtain a Connection using the given properties._<p>Template method to be implemented by subclasses._@param props the merged connection properties_@return the obtained Connection_@throws SQLException in case of failure;protected abstract Connection getConnectionFromDriver(Properties props) throws SQLException_;obtain,a,connection,using,the,given,properties,p,template,method,to,be,implemented,by,subclasses,param,props,the,merged,connection,properties,return,the,obtained,connection,throws,sqlexception,in,case,of,failure;protected,abstract,connection,get,connection,from,driver,properties,props,throws,sqlexception
AbstractDriverBasedDataSource -> protected abstract Connection getConnectionFromDriver(Properties props) throws SQLException_;1500448076;Obtain a Connection using the given properties._<p>Template method to be implemented by subclasses._@param props the merged connection properties_@return the obtained Connection_@throws SQLException in case of failure;protected abstract Connection getConnectionFromDriver(Properties props) throws SQLException_;obtain,a,connection,using,the,given,properties,p,template,method,to,be,implemented,by,subclasses,param,props,the,merged,connection,properties,return,the,obtained,connection,throws,sqlexception,in,case,of,failure;protected,abstract,connection,get,connection,from,driver,properties,props,throws,sqlexception
AbstractDriverBasedDataSource -> protected abstract Connection getConnectionFromDriver(Properties props) throws SQLException_;1500457438;Obtain a Connection using the given properties._<p>Template method to be implemented by subclasses._@param props the merged connection properties_@return the obtained Connection_@throws SQLException in case of failure;protected abstract Connection getConnectionFromDriver(Properties props) throws SQLException_;obtain,a,connection,using,the,given,properties,p,template,method,to,be,implemented,by,subclasses,param,props,the,merged,connection,properties,return,the,obtained,connection,throws,sqlexception,in,case,of,failure;protected,abstract,connection,get,connection,from,driver,properties,props,throws,sqlexception
AbstractDriverBasedDataSource -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1356735495;This implementation delegates to {@code getConnectionFromDriver},_using the given username and password._@see #getConnectionFromDriver(String, String);@Override_	public Connection getConnection(String username, String password) throws SQLException {_		return getConnectionFromDriver(username, password)__	};this,implementation,delegates,to,code,get,connection,from,driver,using,the,given,username,and,password,see,get,connection,from,driver,string,string;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,return,get,connection,from,driver,username,password
AbstractDriverBasedDataSource -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1368482696;This implementation delegates to {@code getConnectionFromDriver},_using the given username and password._@see #getConnectionFromDriver(String, String);@Override_	public Connection getConnection(String username, String password) throws SQLException {_		return getConnectionFromDriver(username, password)__	};this,implementation,delegates,to,code,get,connection,from,driver,using,the,given,username,and,password,see,get,connection,from,driver,string,string;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,return,get,connection,from,driver,username,password
AbstractDriverBasedDataSource -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1469102800;This implementation delegates to {@code getConnectionFromDriver},_using the given username and password._@see #getConnectionFromDriver(String, String);@Override_	public Connection getConnection(String username, String password) throws SQLException {_		return getConnectionFromDriver(username, password)__	};this,implementation,delegates,to,code,get,connection,from,driver,using,the,given,username,and,password,see,get,connection,from,driver,string,string;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,return,get,connection,from,driver,username,password
AbstractDriverBasedDataSource -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1495868221;This implementation delegates to {@code getConnectionFromDriver},_using the given username and password._@see #getConnectionFromDriver(String, String);@Override_	public Connection getConnection(String username, String password) throws SQLException {_		return getConnectionFromDriver(username, password)__	};this,implementation,delegates,to,code,get,connection,from,driver,using,the,given,username,and,password,see,get,connection,from,driver,string,string;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,return,get,connection,from,driver,username,password
AbstractDriverBasedDataSource -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1496837955;This implementation delegates to {@code getConnectionFromDriver},_using the given username and password._@see #getConnectionFromDriver(String, String);@Override_	public Connection getConnection(String username, String password) throws SQLException {_		return getConnectionFromDriver(username, password)__	};this,implementation,delegates,to,code,get,connection,from,driver,using,the,given,username,and,password,see,get,connection,from,driver,string,string;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,return,get,connection,from,driver,username,password
AbstractDriverBasedDataSource -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1498780456;This implementation delegates to {@code getConnectionFromDriver},_using the given username and password._@see #getConnectionFromDriver(String, String);@Override_	public Connection getConnection(String username, String password) throws SQLException {_		return getConnectionFromDriver(username, password)__	};this,implementation,delegates,to,code,get,connection,from,driver,using,the,given,username,and,password,see,get,connection,from,driver,string,string;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,return,get,connection,from,driver,username,password
AbstractDriverBasedDataSource -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1500448076;This implementation delegates to {@code getConnectionFromDriver},_using the given username and password._@see #getConnectionFromDriver(String, String);@Override_	public Connection getConnection(String username, String password) throws SQLException {_		return getConnectionFromDriver(username, password)__	};this,implementation,delegates,to,code,get,connection,from,driver,using,the,given,username,and,password,see,get,connection,from,driver,string,string;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,return,get,connection,from,driver,username,password
AbstractDriverBasedDataSource -> @Override 	public Connection getConnection(String username, String password) throws SQLException;1500457438;This implementation delegates to {@code getConnectionFromDriver},_using the given username and password._@see #getConnectionFromDriver(String, String);@Override_	public Connection getConnection(String username, String password) throws SQLException {_		return getConnectionFromDriver(username, password)__	};this,implementation,delegates,to,code,get,connection,from,driver,using,the,given,username,and,password,see,get,connection,from,driver,string,string;override,public,connection,get,connection,string,username,string,password,throws,sqlexception,return,get,connection,from,driver,username,password
AbstractDriverBasedDataSource -> public void setCatalog(String catalog);1469102800;Specify a database catalog to be applied to each Connection._@since 4.3.2_@see Connection#setCatalog;public void setCatalog(String catalog) {_		this.catalog = catalog__	};specify,a,database,catalog,to,be,applied,to,each,connection,since,4,3,2,see,connection,set,catalog;public,void,set,catalog,string,catalog,this,catalog,catalog
AbstractDriverBasedDataSource -> public void setCatalog(String catalog);1495868221;Specify a database catalog to be applied to each Connection._@since 4.3.2_@see Connection#setCatalog;public void setCatalog(String catalog) {_		this.catalog = catalog__	};specify,a,database,catalog,to,be,applied,to,each,connection,since,4,3,2,see,connection,set,catalog;public,void,set,catalog,string,catalog,this,catalog,catalog
AbstractDriverBasedDataSource -> public void setCatalog(String catalog);1496837955;Specify a database catalog to be applied to each Connection._@since 4.3.2_@see Connection#setCatalog;public void setCatalog(String catalog) {_		this.catalog = catalog__	};specify,a,database,catalog,to,be,applied,to,each,connection,since,4,3,2,see,connection,set,catalog;public,void,set,catalog,string,catalog,this,catalog,catalog
AbstractDriverBasedDataSource -> public void setCatalog(String catalog);1498780456;Specify a database catalog to be applied to each Connection._@since 4.3.2_@see Connection#setCatalog;public void setCatalog(String catalog) {_		this.catalog = catalog__	};specify,a,database,catalog,to,be,applied,to,each,connection,since,4,3,2,see,connection,set,catalog;public,void,set,catalog,string,catalog,this,catalog,catalog
AbstractDriverBasedDataSource -> protected Connection getConnectionFromDriver(@Nullable String username, @Nullable String password) throws SQLException;1495868221;Build properties for the Driver, including the given username and password (if any),_and obtain a corresponding Connection._@param username the name of the user_@param password the password to use_@return the obtained Connection_@throws SQLException in case of failure_@see java.sql.Driver#connect(String, java.util.Properties);protected Connection getConnectionFromDriver(@Nullable String username, @Nullable String password) throws SQLException {_		Properties mergedProps = new Properties()__		Properties connProps = getConnectionProperties()__		if (connProps != null) {_			mergedProps.putAll(connProps)__		}_		if (username != null) {_			mergedProps.setProperty("user", username)__		}_		if (password != null) {_			mergedProps.setProperty("password", password)__		}__		Connection con = getConnectionFromDriver(mergedProps)__		if (this.catalog != null) {_			con.setCatalog(this.catalog)__		}_		if (this.schema != null) {_			con.setSchema(this.schema)__		}_		return con__	};build,properties,for,the,driver,including,the,given,username,and,password,if,any,and,obtain,a,corresponding,connection,param,username,the,name,of,the,user,param,password,the,password,to,use,return,the,obtained,connection,throws,sqlexception,in,case,of,failure,see,java,sql,driver,connect,string,java,util,properties;protected,connection,get,connection,from,driver,nullable,string,username,nullable,string,password,throws,sqlexception,properties,merged,props,new,properties,properties,conn,props,get,connection,properties,if,conn,props,null,merged,props,put,all,conn,props,if,username,null,merged,props,set,property,user,username,if,password,null,merged,props,set,property,password,password,connection,con,get,connection,from,driver,merged,props,if,this,catalog,null,con,set,catalog,this,catalog,if,this,schema,null,con,set,schema,this,schema,return,con
AbstractDriverBasedDataSource -> protected Connection getConnectionFromDriver(@Nullable String username, @Nullable String password) throws SQLException;1496837955;Build properties for the Driver, including the given username and password (if any),_and obtain a corresponding Connection._@param username the name of the user_@param password the password to use_@return the obtained Connection_@throws SQLException in case of failure_@see java.sql.Driver#connect(String, java.util.Properties);protected Connection getConnectionFromDriver(@Nullable String username, @Nullable String password) throws SQLException {_		Properties mergedProps = new Properties()__		Properties connProps = getConnectionProperties()__		if (connProps != null) {_			mergedProps.putAll(connProps)__		}_		if (username != null) {_			mergedProps.setProperty("user", username)__		}_		if (password != null) {_			mergedProps.setProperty("password", password)__		}__		Connection con = getConnectionFromDriver(mergedProps)__		if (this.catalog != null) {_			con.setCatalog(this.catalog)__		}_		if (this.schema != null) {_			con.setSchema(this.schema)__		}_		return con__	};build,properties,for,the,driver,including,the,given,username,and,password,if,any,and,obtain,a,corresponding,connection,param,username,the,name,of,the,user,param,password,the,password,to,use,return,the,obtained,connection,throws,sqlexception,in,case,of,failure,see,java,sql,driver,connect,string,java,util,properties;protected,connection,get,connection,from,driver,nullable,string,username,nullable,string,password,throws,sqlexception,properties,merged,props,new,properties,properties,conn,props,get,connection,properties,if,conn,props,null,merged,props,put,all,conn,props,if,username,null,merged,props,set,property,user,username,if,password,null,merged,props,set,property,password,password,connection,con,get,connection,from,driver,merged,props,if,this,catalog,null,con,set,catalog,this,catalog,if,this,schema,null,con,set,schema,this,schema,return,con
AbstractDriverBasedDataSource -> protected Connection getConnectionFromDriver(@Nullable String username, @Nullable String password) throws SQLException;1498780456;Build properties for the Driver, including the given username and password (if any),_and obtain a corresponding Connection._@param username the name of the user_@param password the password to use_@return the obtained Connection_@throws SQLException in case of failure_@see java.sql.Driver#connect(String, java.util.Properties);protected Connection getConnectionFromDriver(@Nullable String username, @Nullable String password) throws SQLException {_		Properties mergedProps = new Properties()__		Properties connProps = getConnectionProperties()__		if (connProps != null) {_			mergedProps.putAll(connProps)__		}_		if (username != null) {_			mergedProps.setProperty("user", username)__		}_		if (password != null) {_			mergedProps.setProperty("password", password)__		}__		Connection con = getConnectionFromDriver(mergedProps)__		if (this.catalog != null) {_			con.setCatalog(this.catalog)__		}_		if (this.schema != null) {_			con.setSchema(this.schema)__		}_		return con__	};build,properties,for,the,driver,including,the,given,username,and,password,if,any,and,obtain,a,corresponding,connection,param,username,the,name,of,the,user,param,password,the,password,to,use,return,the,obtained,connection,throws,sqlexception,in,case,of,failure,see,java,sql,driver,connect,string,java,util,properties;protected,connection,get,connection,from,driver,nullable,string,username,nullable,string,password,throws,sqlexception,properties,merged,props,new,properties,properties,conn,props,get,connection,properties,if,conn,props,null,merged,props,put,all,conn,props,if,username,null,merged,props,set,property,user,username,if,password,null,merged,props,set,property,password,password,connection,con,get,connection,from,driver,merged,props,if,this,catalog,null,con,set,catalog,this,catalog,if,this,schema,null,con,set,schema,this,schema,return,con
AbstractDriverBasedDataSource -> protected Connection getConnectionFromDriver(@Nullable String username, @Nullable String password) throws SQLException;1500448076;Build properties for the Driver, including the given username and password (if any),_and obtain a corresponding Connection._@param username the name of the user_@param password the password to use_@return the obtained Connection_@throws SQLException in case of failure_@see java.sql.Driver#connect(String, java.util.Properties);protected Connection getConnectionFromDriver(@Nullable String username, @Nullable String password) throws SQLException {_		Properties mergedProps = new Properties()__		Properties connProps = getConnectionProperties()__		if (connProps != null) {_			mergedProps.putAll(connProps)__		}_		if (username != null) {_			mergedProps.setProperty("user", username)__		}_		if (password != null) {_			mergedProps.setProperty("password", password)__		}__		Connection con = getConnectionFromDriver(mergedProps)__		if (this.catalog != null) {_			con.setCatalog(this.catalog)__		}_		if (this.schema != null) {_			con.setSchema(this.schema)__		}_		return con__	};build,properties,for,the,driver,including,the,given,username,and,password,if,any,and,obtain,a,corresponding,connection,param,username,the,name,of,the,user,param,password,the,password,to,use,return,the,obtained,connection,throws,sqlexception,in,case,of,failure,see,java,sql,driver,connect,string,java,util,properties;protected,connection,get,connection,from,driver,nullable,string,username,nullable,string,password,throws,sqlexception,properties,merged,props,new,properties,properties,conn,props,get,connection,properties,if,conn,props,null,merged,props,put,all,conn,props,if,username,null,merged,props,set,property,user,username,if,password,null,merged,props,set,property,password,password,connection,con,get,connection,from,driver,merged,props,if,this,catalog,null,con,set,catalog,this,catalog,if,this,schema,null,con,set,schema,this,schema,return,con
AbstractDriverBasedDataSource -> protected Connection getConnectionFromDriver(@Nullable String username, @Nullable String password) throws SQLException;1500457438;Build properties for the Driver, including the given username and password (if any),_and obtain a corresponding Connection._@param username the name of the user_@param password the password to use_@return the obtained Connection_@throws SQLException in case of failure_@see java.sql.Driver#connect(String, java.util.Properties);protected Connection getConnectionFromDriver(@Nullable String username, @Nullable String password) throws SQLException {_		Properties mergedProps = new Properties()__		Properties connProps = getConnectionProperties()__		if (connProps != null) {_			mergedProps.putAll(connProps)__		}_		if (username != null) {_			mergedProps.setProperty("user", username)__		}_		if (password != null) {_			mergedProps.setProperty("password", password)__		}__		Connection con = getConnectionFromDriver(mergedProps)__		if (this.catalog != null) {_			con.setCatalog(this.catalog)__		}_		if (this.schema != null) {_			con.setSchema(this.schema)__		}_		return con__	};build,properties,for,the,driver,including,the,given,username,and,password,if,any,and,obtain,a,corresponding,connection,param,username,the,name,of,the,user,param,password,the,password,to,use,return,the,obtained,connection,throws,sqlexception,in,case,of,failure,see,java,sql,driver,connect,string,java,util,properties;protected,connection,get,connection,from,driver,nullable,string,username,nullable,string,password,throws,sqlexception,properties,merged,props,new,properties,properties,conn,props,get,connection,properties,if,conn,props,null,merged,props,put,all,conn,props,if,username,null,merged,props,set,property,user,username,if,password,null,merged,props,set,property,password,password,connection,con,get,connection,from,driver,merged,props,if,this,catalog,null,con,set,catalog,this,catalog,if,this,schema,null,con,set,schema,this,schema,return,con
