commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the JDBC URL to use for connecting through the Driver.  * @see java.sql.Driver#connect(String, java.util.Properties)  */ ;/**  * Set the JDBC URL to use for connecting through the Driver.  * @see java.sql.Driver#connect(String, java.util.Properties)  */ public void setUrl(@Nullable String url) {     this.url = (url != null ? url.trim() : null). }
true;public;0;4;/**  * Return the JDBC URL to use for connecting through the Driver.  */ ;/**  * Return the JDBC URL to use for connecting through the Driver.  */ @Nullable public String getUrl() {     return this.url. }
true;public;1;3;/**  * Set the JDBC username to use for connecting through the Driver.  * @see java.sql.Driver#connect(String, java.util.Properties)  */ ;/**  * Set the JDBC username to use for connecting through the Driver.  * @see java.sql.Driver#connect(String, java.util.Properties)  */ public void setUsername(@Nullable String username) {     this.username = username. }
true;public;0;4;/**  * Return the JDBC username to use for connecting through the Driver.  */ ;/**  * Return the JDBC username to use for connecting through the Driver.  */ @Nullable public String getUsername() {     return this.username. }
true;public;1;3;/**  * Set the JDBC password to use for connecting through the Driver.  * @see java.sql.Driver#connect(String, java.util.Properties)  */ ;/**  * Set the JDBC password to use for connecting through the Driver.  * @see java.sql.Driver#connect(String, java.util.Properties)  */ public void setPassword(@Nullable String password) {     this.password = password. }
true;public;0;4;/**  * Return the JDBC password to use for connecting through the Driver.  */ ;/**  * Return the JDBC password to use for connecting through the Driver.  */ @Nullable public String getPassword() {     return this.password. }
true;public;1;3;/**  * Specify a database catalog to be applied to each Connection.  * @since 4.3.2  * @see Connection#setCatalog  */ ;/**  * Specify a database catalog to be applied to each Connection.  * @since 4.3.2  * @see Connection#setCatalog  */ public void setCatalog(@Nullable String catalog) {     this.catalog = catalog. }
true;public;0;4;/**  * Return the database catalog to be applied to each Connection, if any.  * @since 4.3.2  */ ;/**  * Return the database catalog to be applied to each Connection, if any.  * @since 4.3.2  */ @Nullable public String getCatalog() {     return this.catalog. }
true;public;1;3;/**  * Specify a database schema to be applied to each Connection.  * @since 4.3.2  * @see Connection#setSchema  */ ;/**  * Specify a database schema to be applied to each Connection.  * @since 4.3.2  * @see Connection#setSchema  */ public void setSchema(@Nullable String schema) {     this.schema = schema. }
true;public;0;4;/**  * Return the database schema to be applied to each Connection, if any.  * @since 4.3.2  */ ;/**  * Return the database schema to be applied to each Connection, if any.  * @since 4.3.2  */ @Nullable public String getSchema() {     return this.schema. }
true;public;1;3;/**  * Specify arbitrary connection properties as key/value pairs,  * to be passed to the Driver.  * <p>Can also contain "user" and "password" properties. However,  * any "username" and "password" bean properties specified on this  * DataSource will override the corresponding connection properties.  * @see java.sql.Driver#connect(String, java.util.Properties)  */ ;/**  * Specify arbitrary connection properties as key/value pairs,  * to be passed to the Driver.  * <p>Can also contain "user" and "password" properties. However,  * any "username" and "password" bean properties specified on this  * DataSource will override the corresponding connection properties.  * @see java.sql.Driver#connect(String, java.util.Properties)  */ public void setConnectionProperties(@Nullable Properties connectionProperties) {     this.connectionProperties = connectionProperties. }
true;public;0;4;/**  * Return the connection properties to be passed to the Driver, if any.  */ ;/**  * Return the connection properties to be passed to the Driver, if any.  */ @Nullable public Properties getConnectionProperties() {     return this.connectionProperties. }
true;public;0;4;/**  * This implementation delegates to {@code getConnectionFromDriver},  * using the default username and password of this DataSource.  * @see #getConnectionFromDriver(String, String)  * @see #setUsername  * @see #setPassword  */ ;/**  * This implementation delegates to {@code getConnectionFromDriver},  * using the default username and password of this DataSource.  * @see #getConnectionFromDriver(String, String)  * @see #setUsername  * @see #setPassword  */ @Override public Connection getConnection() throws SQLException {     return getConnectionFromDriver(getUsername(), getPassword()). }
true;public;2;4;/**  * This implementation delegates to {@code getConnectionFromDriver},  * using the given username and password.  * @see #getConnectionFromDriver(String, String)  */ ;/**  * This implementation delegates to {@code getConnectionFromDriver},  * using the given username and password.  * @see #getConnectionFromDriver(String, String)  */ @Override public Connection getConnection(String username, String password) throws SQLException {     return getConnectionFromDriver(username, password). }
true;protected;2;22;/**  * Build properties for the Driver, including the given username and password (if any),  * and obtain a corresponding Connection.  * @param username the name of the user  * @param password the password to use  * @return the obtained Connection  * @throws SQLException in case of failure  * @see java.sql.Driver#connect(String, java.util.Properties)  */ ;/**  * Build properties for the Driver, including the given username and password (if any),  * and obtain a corresponding Connection.  * @param username the name of the user  * @param password the password to use  * @return the obtained Connection  * @throws SQLException in case of failure  * @see java.sql.Driver#connect(String, java.util.Properties)  */ protected Connection getConnectionFromDriver(@Nullable String username, @Nullable String password) throws SQLException {     Properties mergedProps = new Properties().     Properties connProps = getConnectionProperties().     if (connProps != null) {         mergedProps.putAll(connProps).     }     if (username != null) {         mergedProps.setProperty("user", username).     }     if (password != null) {         mergedProps.setProperty("password", password).     }     Connection con = getConnectionFromDriver(mergedProps).     if (this.catalog != null) {         con.setCatalog(this.catalog).     }     if (this.schema != null) {         con.setSchema(this.schema).     }     return con. }
true;protected,abstract;1;1;/**  * Obtain a Connection using the given properties.  * <p>Template method to be implemented by subclasses.  * @param props the merged connection properties  * @return the obtained Connection  * @throws SQLException in case of failure  */ ;/**  * Obtain a Connection using the given properties.  * <p>Template method to be implemented by subclasses.  * @param props the merged connection properties  * @return the obtained Connection  * @throws SQLException in case of failure  */ protected abstract Connection getConnectionFromDriver(Properties props) throws SQLException.
