# id;timestamp;commentText;codeText;commentWords;codeWords
SqlQuery -> protected abstract RowMapper<T> newRowMapper(@Nullable Object[] parameters, @Nullable Map<?, ?> context)_;1496837955;Subclasses must implement this method to extract an object per row, to be_returned by the <cod>execute</code> method as an aggregated {@link List}._@param parameters the parameters to the {@code execute()} method,_in case subclass is interested_ may be {@code null} if there_were no parameters._@param context contextual information passed to the {@code mapRow}_callback method. The JDBC operation itself doesn't rely on this parameter,_but it can be useful for creating the objects of the result list._@see #execute;protected abstract RowMapper<T> newRowMapper(@Nullable Object[] parameters, @Nullable Map<?, ?> context)_;subclasses,must,implement,this,method,to,extract,an,object,per,row,to,be,returned,by,the,cod,execute,code,method,as,an,aggregated,link,list,param,parameters,the,parameters,to,the,code,execute,method,in,case,subclass,is,interested,may,be,code,null,if,there,were,no,parameters,param,context,contextual,information,passed,to,the,code,map,row,callback,method,the,jdbc,operation,itself,doesn,t,rely,on,this,parameter,but,it,can,be,useful,for,creating,the,objects,of,the,result,list,see,execute;protected,abstract,row,mapper,t,new,row,mapper,nullable,object,parameters,nullable,map,context
SqlQuery -> protected abstract RowMapper<T> newRowMapper(@Nullable Object[] parameters, @Nullable Map<?, ?> context)_;1530174524;Subclasses must implement this method to extract an object per row, to be_returned by the {@code execute} method as an aggregated {@link List}._@param parameters the parameters to the {@code execute()} method,_in case subclass is interested_ may be {@code null} if there_were no parameters._@param context contextual information passed to the {@code mapRow}_callback method. The JDBC operation itself doesn't rely on this parameter,_but it can be useful for creating the objects of the result list._@see #execute;protected abstract RowMapper<T> newRowMapper(@Nullable Object[] parameters, @Nullable Map<?, ?> context)_;subclasses,must,implement,this,method,to,extract,an,object,per,row,to,be,returned,by,the,code,execute,method,as,an,aggregated,link,list,param,parameters,the,parameters,to,the,code,execute,method,in,case,subclass,is,interested,may,be,code,null,if,there,were,no,parameters,param,context,contextual,information,passed,to,the,code,map,row,callback,method,the,jdbc,operation,itself,doesn,t,rely,on,this,parameter,but,it,can,be,useful,for,creating,the,objects,of,the,result,list,see,execute;protected,abstract,row,mapper,t,new,row,mapper,nullable,object,parameters,nullable,map,context
SqlQuery -> protected abstract RowMapper<T> newRowMapper(@Nullable Object[] parameters, @Nullable Map<?, ?> context)_;1530174524;Subclasses must implement this method to extract an object per row, to be_returned by the {@code execute} method as an aggregated {@link List}._@param parameters the parameters to the {@code execute()} method,_in case subclass is interested_ may be {@code null} if there_were no parameters._@param context contextual information passed to the {@code mapRow}_callback method. The JDBC operation itself doesn't rely on this parameter,_but it can be useful for creating the objects of the result list._@see #execute;protected abstract RowMapper<T> newRowMapper(@Nullable Object[] parameters, @Nullable Map<?, ?> context)_;subclasses,must,implement,this,method,to,extract,an,object,per,row,to,be,returned,by,the,code,execute,method,as,an,aggregated,link,list,param,parameters,the,parameters,to,the,code,execute,method,in,case,subclass,is,interested,may,be,code,null,if,there,were,no,parameters,param,context,contextual,information,passed,to,the,code,map,row,callback,method,the,jdbc,operation,itself,doesn,t,rely,on,this,parameter,but,it,can,be,useful,for,creating,the,objects,of,the,result,list,see,execute;protected,abstract,row,mapper,t,new,row,mapper,nullable,object,parameters,nullable,map,context
SqlQuery -> protected abstract RowMapper<T> newRowMapper(@Nullable Object[] parameters, @Nullable Map<?, ?> context)_;1530174524;Subclasses must implement this method to extract an object per row, to be_returned by the {@code execute} method as an aggregated {@link List}._@param parameters the parameters to the {@code execute()} method,_in case subclass is interested_ may be {@code null} if there_were no parameters._@param context contextual information passed to the {@code mapRow}_callback method. The JDBC operation itself doesn't rely on this parameter,_but it can be useful for creating the objects of the result list._@see #execute;protected abstract RowMapper<T> newRowMapper(@Nullable Object[] parameters, @Nullable Map<?, ?> context)_;subclasses,must,implement,this,method,to,extract,an,object,per,row,to,be,returned,by,the,code,execute,method,as,an,aggregated,link,list,param,parameters,the,parameters,to,the,code,execute,method,in,case,subclass,is,interested,may,be,code,null,if,there,were,no,parameters,param,context,contextual,information,passed,to,the,code,map,row,callback,method,the,jdbc,operation,itself,doesn,t,rely,on,this,parameter,but,it,can,be,useful,for,creating,the,objects,of,the,result,list,see,execute;protected,abstract,row,mapper,t,new,row,mapper,nullable,object,parameters,nullable,map,context
SqlQuery -> public List<T> execute(int p1) throws DataAccessException;1328020251;Convenient method to execute with a single int parameter._@param p1 single int parameter;public List<T> execute(int p1) throws DataAccessException {_		return execute(p1, null)__	};convenient,method,to,execute,with,a,single,int,parameter,param,p1,single,int,parameter;public,list,t,execute,int,p1,throws,data,access,exception,return,execute,p1,null
SqlQuery -> public List<T> execute(int p1) throws DataAccessException;1356735495;Convenient method to execute with a single int parameter._@param p1 single int parameter;public List<T> execute(int p1) throws DataAccessException {_		return execute(p1, null)__	};convenient,method,to,execute,with,a,single,int,parameter,param,p1,single,int,parameter;public,list,t,execute,int,p1,throws,data,access,exception,return,execute,p1,null
SqlQuery -> public List<T> execute(int p1) throws DataAccessException;1385412762;Convenient method to execute with a single int parameter._@param p1 single int parameter;public List<T> execute(int p1) throws DataAccessException {_		return execute(p1, null)__	};convenient,method,to,execute,with,a,single,int,parameter,param,p1,single,int,parameter;public,list,t,execute,int,p1,throws,data,access,exception,return,execute,p1,null
SqlQuery -> public List<T> execute(int p1) throws DataAccessException;1413848647;Convenient method to execute with a single int parameter._@param p1 single int parameter;public List<T> execute(int p1) throws DataAccessException {_		return execute(p1, null)__	};convenient,method,to,execute,with,a,single,int,parameter,param,p1,single,int,parameter;public,list,t,execute,int,p1,throws,data,access,exception,return,execute,p1,null
SqlQuery -> public List<T> execute(int p1) throws DataAccessException;1495868221;Convenient method to execute with a single int parameter._@param p1 single int parameter;public List<T> execute(int p1) throws DataAccessException {_		return execute(p1, null)__	};convenient,method,to,execute,with,a,single,int,parameter,param,p1,single,int,parameter;public,list,t,execute,int,p1,throws,data,access,exception,return,execute,p1,null
SqlQuery -> public List<T> execute(int p1) throws DataAccessException;1496259743;Convenient method to execute with a single int parameter._@param p1 single int parameter;public List<T> execute(int p1) throws DataAccessException {_		return execute(p1, null)__	};convenient,method,to,execute,with,a,single,int,parameter,param,p1,single,int,parameter;public,list,t,execute,int,p1,throws,data,access,exception,return,execute,p1,null
SqlQuery -> public List<T> execute(int p1) throws DataAccessException;1496837955;Convenient method to execute with a single int parameter._@param p1 single int parameter;public List<T> execute(int p1) throws DataAccessException {_		return execute(p1, null)__	};convenient,method,to,execute,with,a,single,int,parameter,param,p1,single,int,parameter;public,list,t,execute,int,p1,throws,data,access,exception,return,execute,p1,null
SqlQuery -> public List<T> execute(int p1) throws DataAccessException;1530174524;Convenient method to execute with a single int parameter._@param p1 single int parameter;public List<T> execute(int p1) throws DataAccessException {_		return execute(p1, null)__	};convenient,method,to,execute,with,a,single,int,parameter,param,p1,single,int,parameter;public,list,t,execute,int,p1,throws,data,access,exception,return,execute,p1,null
SqlQuery -> public List<T> execute(int p1) throws DataAccessException;1530174524;Convenient method to execute with a single int parameter._@param p1 single int parameter;public List<T> execute(int p1) throws DataAccessException {_		return execute(p1, null)__	};convenient,method,to,execute,with,a,single,int,parameter,param,p1,single,int,parameter;public,list,t,execute,int,p1,throws,data,access,exception,return,execute,p1,null
SqlQuery -> public List<T> execute(int p1) throws DataAccessException;1530174524;Convenient method to execute with a single int parameter._@param p1 single int parameter;public List<T> execute(int p1) throws DataAccessException {_		return execute(p1, null)__	};convenient,method,to,execute,with,a,single,int,parameter,param,p1,single,int,parameter;public,list,t,execute,int,p1,throws,data,access,exception,return,execute,p1,null
SqlQuery -> public T findObject(int p1, int p2, Map context) throws DataAccessException;1328020251;Convenient method to find a single object given two int parameters_and a context.;public T findObject(int p1, int p2, Map context) throws DataAccessException {_		return findObject(new Object[] {p1, p2}, context)__	};convenient,method,to,find,a,single,object,given,two,int,parameters,and,a,context;public,t,find,object,int,p1,int,p2,map,context,throws,data,access,exception,return,find,object,new,object,p1,p2,context
SqlQuery -> public T findObject(int p1, int p2, Map context) throws DataAccessException;1356735495;Convenient method to find a single object given two int parameters_and a context.;public T findObject(int p1, int p2, Map context) throws DataAccessException {_		return findObject(new Object[] {p1, p2}, context)__	};convenient,method,to,find,a,single,object,given,two,int,parameters,and,a,context;public,t,find,object,int,p1,int,p2,map,context,throws,data,access,exception,return,find,object,new,object,p1,p2,context
SqlQuery -> public List<T> execute(Map context) throws DataAccessException;1328020251;Convenient method to execute without parameters._@param context the contextual information for object creation;public List<T> execute(Map context) throws DataAccessException {_		return execute((Object[]) null, context)__	};convenient,method,to,execute,without,parameters,param,context,the,contextual,information,for,object,creation;public,list,t,execute,map,context,throws,data,access,exception,return,execute,object,null,context
SqlQuery -> public List<T> execute(Map context) throws DataAccessException;1356735495;Convenient method to execute without parameters._@param context the contextual information for object creation;public List<T> execute(Map context) throws DataAccessException {_		return execute((Object[]) null, context)__	};convenient,method,to,execute,without,parameters,param,context,the,contextual,information,for,object,creation;public,list,t,execute,map,context,throws,data,access,exception,return,execute,object,null,context
SqlQuery -> public List<T> execute(int p1, @Nullable Map<?, ?> context) throws DataAccessException;1496259743;Convenient method to execute with a single int parameter and context._@param p1 single int parameter_@param context the contextual information for object creation;public List<T> execute(int p1, @Nullable Map<?, ?> context) throws DataAccessException {_		return execute(new Object[] {p1}, context)__	};convenient,method,to,execute,with,a,single,int,parameter,and,context,param,p1,single,int,parameter,param,context,the,contextual,information,for,object,creation;public,list,t,execute,int,p1,nullable,map,context,throws,data,access,exception,return,execute,new,object,p1,context
SqlQuery -> public List<T> execute(int p1, @Nullable Map<?, ?> context) throws DataAccessException;1496837955;Convenient method to execute with a single int parameter and context._@param p1 single int parameter_@param context the contextual information for object creation;public List<T> execute(int p1, @Nullable Map<?, ?> context) throws DataAccessException {_		return execute(new Object[] {p1}, context)__	};convenient,method,to,execute,with,a,single,int,parameter,and,context,param,p1,single,int,parameter,param,context,the,contextual,information,for,object,creation;public,list,t,execute,int,p1,nullable,map,context,throws,data,access,exception,return,execute,new,object,p1,context
SqlQuery -> public List<T> execute(int p1, @Nullable Map<?, ?> context) throws DataAccessException;1530174524;Convenient method to execute with a single int parameter and context._@param p1 single int parameter_@param context the contextual information for object creation;public List<T> execute(int p1, @Nullable Map<?, ?> context) throws DataAccessException {_		return execute(new Object[] {p1}, context)__	};convenient,method,to,execute,with,a,single,int,parameter,and,context,param,p1,single,int,parameter,param,context,the,contextual,information,for,object,creation;public,list,t,execute,int,p1,nullable,map,context,throws,data,access,exception,return,execute,new,object,p1,context
SqlQuery -> public List<T> execute(int p1, @Nullable Map<?, ?> context) throws DataAccessException;1530174524;Convenient method to execute with a single int parameter and context._@param p1 single int parameter_@param context the contextual information for object creation;public List<T> execute(int p1, @Nullable Map<?, ?> context) throws DataAccessException {_		return execute(new Object[] {p1}, context)__	};convenient,method,to,execute,with,a,single,int,parameter,and,context,param,p1,single,int,parameter,param,context,the,contextual,information,for,object,creation;public,list,t,execute,int,p1,nullable,map,context,throws,data,access,exception,return,execute,new,object,p1,context
SqlQuery -> public List<T> execute(int p1, @Nullable Map<?, ?> context) throws DataAccessException;1530174524;Convenient method to execute with a single int parameter and context._@param p1 single int parameter_@param context the contextual information for object creation;public List<T> execute(int p1, @Nullable Map<?, ?> context) throws DataAccessException {_		return execute(new Object[] {p1}, context)__	};convenient,method,to,execute,with,a,single,int,parameter,and,context,param,p1,single,int,parameter,param,context,the,contextual,information,for,object,creation;public,list,t,execute,int,p1,nullable,map,context,throws,data,access,exception,return,execute,new,object,p1,context
SqlQuery -> public T findObjectByNamedParam(Map<String, ?> paramMap) throws DataAccessException;1328020251;Convenient method to execute without context._@param paramMap Map of parameter name to parameter object,_matching named parameters specified in the SQL statement._Ordering is not significant.;public T findObjectByNamedParam(Map<String, ?> paramMap) throws DataAccessException {_		return findObjectByNamedParam(paramMap, null)__	};convenient,method,to,execute,without,context,param,param,map,map,of,parameter,name,to,parameter,object,matching,named,parameters,specified,in,the,sql,statement,ordering,is,not,significant;public,t,find,object,by,named,param,map,string,param,map,throws,data,access,exception,return,find,object,by,named,param,param,map,null
SqlQuery -> public T findObjectByNamedParam(Map<String, ?> paramMap) throws DataAccessException;1356735495;Convenient method to execute without context._@param paramMap Map of parameter name to parameter object,_matching named parameters specified in the SQL statement._Ordering is not significant.;public T findObjectByNamedParam(Map<String, ?> paramMap) throws DataAccessException {_		return findObjectByNamedParam(paramMap, null)__	};convenient,method,to,execute,without,context,param,param,map,map,of,parameter,name,to,parameter,object,matching,named,parameters,specified,in,the,sql,statement,ordering,is,not,significant;public,t,find,object,by,named,param,map,string,param,map,throws,data,access,exception,return,find,object,by,named,param,param,map,null
SqlQuery -> public T findObjectByNamedParam(Map<String, ?> paramMap) throws DataAccessException;1385412762;Convenient method to execute without context._@param paramMap Map of parameter name to parameter object,_matching named parameters specified in the SQL statement._Ordering is not significant.;public T findObjectByNamedParam(Map<String, ?> paramMap) throws DataAccessException {_		return findObjectByNamedParam(paramMap, null)__	};convenient,method,to,execute,without,context,param,param,map,map,of,parameter,name,to,parameter,object,matching,named,parameters,specified,in,the,sql,statement,ordering,is,not,significant;public,t,find,object,by,named,param,map,string,param,map,throws,data,access,exception,return,find,object,by,named,param,param,map,null
SqlQuery -> public T findObjectByNamedParam(Map<String, ?> paramMap) throws DataAccessException;1413848647;Convenient method to execute without context._@param paramMap Map of parameter name to parameter object,_matching named parameters specified in the SQL statement._Ordering is not significant.;public T findObjectByNamedParam(Map<String, ?> paramMap) throws DataAccessException {_		return findObjectByNamedParam(paramMap, null)__	};convenient,method,to,execute,without,context,param,param,map,map,of,parameter,name,to,parameter,object,matching,named,parameters,specified,in,the,sql,statement,ordering,is,not,significant;public,t,find,object,by,named,param,map,string,param,map,throws,data,access,exception,return,find,object,by,named,param,param,map,null
SqlQuery -> public T findObjectByNamedParam(Map<String, ?> paramMap) throws DataAccessException;1495868221;Convenient method to execute without context._@param paramMap Map of parameter name to parameter object,_matching named parameters specified in the SQL statement._Ordering is not significant.;public T findObjectByNamedParam(Map<String, ?> paramMap) throws DataAccessException {_		return findObjectByNamedParam(paramMap, null)__	};convenient,method,to,execute,without,context,param,param,map,map,of,parameter,name,to,parameter,object,matching,named,parameters,specified,in,the,sql,statement,ordering,is,not,significant;public,t,find,object,by,named,param,map,string,param,map,throws,data,access,exception,return,find,object,by,named,param,param,map,null
SqlQuery -> public T findObjectByNamedParam(Map<String, ?> paramMap) throws DataAccessException;1496259743;Convenient method to execute without context._@param paramMap Map of parameter name to parameter object,_matching named parameters specified in the SQL statement._Ordering is not significant.;public T findObjectByNamedParam(Map<String, ?> paramMap) throws DataAccessException {_		return findObjectByNamedParam(paramMap, null)__	};convenient,method,to,execute,without,context,param,param,map,map,of,parameter,name,to,parameter,object,matching,named,parameters,specified,in,the,sql,statement,ordering,is,not,significant;public,t,find,object,by,named,param,map,string,param,map,throws,data,access,exception,return,find,object,by,named,param,param,map,null
SqlQuery -> @Nullable 	public T findObject(int p1, int p2, @Nullable Map<?, ?> context) throws DataAccessException;1496837955;Convenient method to find a single object given two int parameters_and a context.;@Nullable_	public T findObject(int p1, int p2, @Nullable Map<?, ?> context) throws DataAccessException {_		return findObject(new Object[] {p1, p2}, context)__	};convenient,method,to,find,a,single,object,given,two,int,parameters,and,a,context;nullable,public,t,find,object,int,p1,int,p2,nullable,map,context,throws,data,access,exception,return,find,object,new,object,p1,p2,context
SqlQuery -> @Nullable 	public T findObject(int p1, int p2, @Nullable Map<?, ?> context) throws DataAccessException;1530174524;Convenient method to find a single object given two int parameters_and a context.;@Nullable_	public T findObject(int p1, int p2, @Nullable Map<?, ?> context) throws DataAccessException {_		return findObject(new Object[] {p1, p2}, context)__	};convenient,method,to,find,a,single,object,given,two,int,parameters,and,a,context;nullable,public,t,find,object,int,p1,int,p2,nullable,map,context,throws,data,access,exception,return,find,object,new,object,p1,p2,context
SqlQuery -> @Nullable 	public T findObject(int p1, int p2, @Nullable Map<?, ?> context) throws DataAccessException;1530174524;Convenient method to find a single object given two int parameters_and a context.;@Nullable_	public T findObject(int p1, int p2, @Nullable Map<?, ?> context) throws DataAccessException {_		return findObject(new Object[] {p1, p2}, context)__	};convenient,method,to,find,a,single,object,given,two,int,parameters,and,a,context;nullable,public,t,find,object,int,p1,int,p2,nullable,map,context,throws,data,access,exception,return,find,object,new,object,p1,p2,context
SqlQuery -> @Nullable 	public T findObject(int p1, int p2, @Nullable Map<?, ?> context) throws DataAccessException;1530174524;Convenient method to find a single object given two int parameters_and a context.;@Nullable_	public T findObject(int p1, int p2, @Nullable Map<?, ?> context) throws DataAccessException {_		return findObject(new Object[] {p1, p2}, context)__	};convenient,method,to,find,a,single,object,given,two,int,parameters,and,a,context;nullable,public,t,find,object,int,p1,int,p2,nullable,map,context,throws,data,access,exception,return,find,object,new,object,p1,p2,context
SqlQuery -> public T findObject(Object[] params, Map context) throws DataAccessException;1328020251;Generic object finder method, used by all other <code>findObject</code> methods._Object finder methods are like EJB entity bean finders, in that it is_considered an error if they return more than one result._@return the result object, or <code>null</code> if not found. Subclasses may_choose to treat this as an error and throw an exception._@see org.springframework.dao.support.DataAccessUtils#singleResult;public T findObject(Object[] params, Map context) throws DataAccessException {_		List<T> results = execute(params, context)__		return DataAccessUtils.singleResult(results)__	};generic,object,finder,method,used,by,all,other,code,find,object,code,methods,object,finder,methods,are,like,ejb,entity,bean,finders,in,that,it,is,considered,an,error,if,they,return,more,than,one,result,return,the,result,object,or,code,null,code,if,not,found,subclasses,may,choose,to,treat,this,as,an,error,and,throw,an,exception,see,org,springframework,dao,support,data,access,utils,single,result;public,t,find,object,object,params,map,context,throws,data,access,exception,list,t,results,execute,params,context,return,data,access,utils,single,result,results
SqlQuery -> public T findObject(Object[] params, Map context) throws DataAccessException;1356735495;Generic object finder method, used by all other {@code findObject} methods._Object finder methods are like EJB entity bean finders, in that it is_considered an error if they return more than one result._@return the result object, or {@code null} if not found. Subclasses may_choose to treat this as an error and throw an exception._@see org.springframework.dao.support.DataAccessUtils#singleResult;public T findObject(Object[] params, Map context) throws DataAccessException {_		List<T> results = execute(params, context)__		return DataAccessUtils.singleResult(results)__	};generic,object,finder,method,used,by,all,other,code,find,object,methods,object,finder,methods,are,like,ejb,entity,bean,finders,in,that,it,is,considered,an,error,if,they,return,more,than,one,result,return,the,result,object,or,code,null,if,not,found,subclasses,may,choose,to,treat,this,as,an,error,and,throw,an,exception,see,org,springframework,dao,support,data,access,utils,single,result;public,t,find,object,object,params,map,context,throws,data,access,exception,list,t,results,execute,params,context,return,data,access,utils,single,result,results
SqlQuery -> public List<T> execute(int p1, int p2, @Nullable Map<?, ?> context) throws DataAccessException;1496259743;Convenient method to execute with two int parameters and context._@param p1 first int parameter_@param p2 second int parameter_@param context the contextual information for object creation;public List<T> execute(int p1, int p2, @Nullable Map<?, ?> context) throws DataAccessException {_		return execute(new Object[] {p1, p2}, context)__	};convenient,method,to,execute,with,two,int,parameters,and,context,param,p1,first,int,parameter,param,p2,second,int,parameter,param,context,the,contextual,information,for,object,creation;public,list,t,execute,int,p1,int,p2,nullable,map,context,throws,data,access,exception,return,execute,new,object,p1,p2,context
SqlQuery -> public List<T> execute(int p1, int p2, @Nullable Map<?, ?> context) throws DataAccessException;1496837955;Convenient method to execute with two int parameters and context._@param p1 first int parameter_@param p2 second int parameter_@param context the contextual information for object creation;public List<T> execute(int p1, int p2, @Nullable Map<?, ?> context) throws DataAccessException {_		return execute(new Object[] {p1, p2}, context)__	};convenient,method,to,execute,with,two,int,parameters,and,context,param,p1,first,int,parameter,param,p2,second,int,parameter,param,context,the,contextual,information,for,object,creation;public,list,t,execute,int,p1,int,p2,nullable,map,context,throws,data,access,exception,return,execute,new,object,p1,p2,context
SqlQuery -> public List<T> execute(int p1, int p2, @Nullable Map<?, ?> context) throws DataAccessException;1530174524;Convenient method to execute with two int parameters and context._@param p1 first int parameter_@param p2 second int parameter_@param context the contextual information for object creation;public List<T> execute(int p1, int p2, @Nullable Map<?, ?> context) throws DataAccessException {_		return execute(new Object[] {p1, p2}, context)__	};convenient,method,to,execute,with,two,int,parameters,and,context,param,p1,first,int,parameter,param,p2,second,int,parameter,param,context,the,contextual,information,for,object,creation;public,list,t,execute,int,p1,int,p2,nullable,map,context,throws,data,access,exception,return,execute,new,object,p1,p2,context
SqlQuery -> public List<T> execute(int p1, int p2, @Nullable Map<?, ?> context) throws DataAccessException;1530174524;Convenient method to execute with two int parameters and context._@param p1 first int parameter_@param p2 second int parameter_@param context the contextual information for object creation;public List<T> execute(int p1, int p2, @Nullable Map<?, ?> context) throws DataAccessException {_		return execute(new Object[] {p1, p2}, context)__	};convenient,method,to,execute,with,two,int,parameters,and,context,param,p1,first,int,parameter,param,p2,second,int,parameter,param,context,the,contextual,information,for,object,creation;public,list,t,execute,int,p1,int,p2,nullable,map,context,throws,data,access,exception,return,execute,new,object,p1,p2,context
SqlQuery -> public List<T> execute(int p1, int p2, @Nullable Map<?, ?> context) throws DataAccessException;1530174524;Convenient method to execute with two int parameters and context._@param p1 first int parameter_@param p2 second int parameter_@param context the contextual information for object creation;public List<T> execute(int p1, int p2, @Nullable Map<?, ?> context) throws DataAccessException {_		return execute(new Object[] {p1, p2}, context)__	};convenient,method,to,execute,with,two,int,parameters,and,context,param,p1,first,int,parameter,param,p2,second,int,parameter,param,context,the,contextual,information,for,object,creation;public,list,t,execute,int,p1,int,p2,nullable,map,context,throws,data,access,exception,return,execute,new,object,p1,p2,context
SqlQuery -> @Nullable 	public T findObject(int p1) throws DataAccessException;1496837955;Convenient method to find a single object given a single int parameter.;@Nullable_	public T findObject(int p1) throws DataAccessException {_		return findObject(p1, null)__	};convenient,method,to,find,a,single,object,given,a,single,int,parameter;nullable,public,t,find,object,int,p1,throws,data,access,exception,return,find,object,p1,null
SqlQuery -> @Nullable 	public T findObject(int p1) throws DataAccessException;1530174524;Convenient method to find a single object given a single int parameter.;@Nullable_	public T findObject(int p1) throws DataAccessException {_		return findObject(p1, null)__	};convenient,method,to,find,a,single,object,given,a,single,int,parameter;nullable,public,t,find,object,int,p1,throws,data,access,exception,return,find,object,p1,null
SqlQuery -> @Nullable 	public T findObject(int p1) throws DataAccessException;1530174524;Convenient method to find a single object given a single int parameter.;@Nullable_	public T findObject(int p1) throws DataAccessException {_		return findObject(p1, null)__	};convenient,method,to,find,a,single,object,given,a,single,int,parameter;nullable,public,t,find,object,int,p1,throws,data,access,exception,return,find,object,p1,null
SqlQuery -> @Nullable 	public T findObject(int p1) throws DataAccessException;1530174524;Convenient method to find a single object given a single int parameter.;@Nullable_	public T findObject(int p1) throws DataAccessException {_		return findObject(p1, null)__	};convenient,method,to,find,a,single,object,given,a,single,int,parameter;nullable,public,t,find,object,int,p1,throws,data,access,exception,return,find,object,p1,null
SqlQuery -> public List<T> execute(long p1, Map<?, ?> context) throws DataAccessException;1385412762;Convenient method to execute with a single long parameter and context._@param p1 single long parameter_@param context the contextual information for object creation;public List<T> execute(long p1, Map<?, ?> context) throws DataAccessException {_		return execute(new Object[] {p1}, context)__	};convenient,method,to,execute,with,a,single,long,parameter,and,context,param,p1,single,long,parameter,param,context,the,contextual,information,for,object,creation;public,list,t,execute,long,p1,map,context,throws,data,access,exception,return,execute,new,object,p1,context
SqlQuery -> public List<T> execute(long p1, Map<?, ?> context) throws DataAccessException;1413848647;Convenient method to execute with a single long parameter and context._@param p1 single long parameter_@param context the contextual information for object creation;public List<T> execute(long p1, Map<?, ?> context) throws DataAccessException {_		return execute(new Object[] {p1}, context)__	};convenient,method,to,execute,with,a,single,long,parameter,and,context,param,p1,single,long,parameter,param,context,the,contextual,information,for,object,creation;public,list,t,execute,long,p1,map,context,throws,data,access,exception,return,execute,new,object,p1,context
SqlQuery -> public List<T> execute(long p1, Map<?, ?> context) throws DataAccessException;1495868221;Convenient method to execute with a single long parameter and context._@param p1 single long parameter_@param context the contextual information for object creation;public List<T> execute(long p1, Map<?, ?> context) throws DataAccessException {_		return execute(new Object[] {p1}, context)__	};convenient,method,to,execute,with,a,single,long,parameter,and,context,param,p1,single,long,parameter,param,context,the,contextual,information,for,object,creation;public,list,t,execute,long,p1,map,context,throws,data,access,exception,return,execute,new,object,p1,context
SqlQuery -> public T findObject(String p1) throws DataAccessException;1328020251;Convenient method to find a single object given a single String parameter.;public T findObject(String p1) throws DataAccessException {_		return findObject(p1, null)__	};convenient,method,to,find,a,single,object,given,a,single,string,parameter;public,t,find,object,string,p1,throws,data,access,exception,return,find,object,p1,null
SqlQuery -> public T findObject(String p1) throws DataAccessException;1356735495;Convenient method to find a single object given a single String parameter.;public T findObject(String p1) throws DataAccessException {_		return findObject(p1, null)__	};convenient,method,to,find,a,single,object,given,a,single,string,parameter;public,t,find,object,string,p1,throws,data,access,exception,return,find,object,p1,null
SqlQuery -> public T findObject(String p1) throws DataAccessException;1385412762;Convenient method to find a single object given a single String parameter.;public T findObject(String p1) throws DataAccessException {_		return findObject(p1, null)__	};convenient,method,to,find,a,single,object,given,a,single,string,parameter;public,t,find,object,string,p1,throws,data,access,exception,return,find,object,p1,null
SqlQuery -> public T findObject(String p1) throws DataAccessException;1413848647;Convenient method to find a single object given a single String parameter.;public T findObject(String p1) throws DataAccessException {_		return findObject(p1, null)__	};convenient,method,to,find,a,single,object,given,a,single,string,parameter;public,t,find,object,string,p1,throws,data,access,exception,return,find,object,p1,null
SqlQuery -> public T findObject(String p1) throws DataAccessException;1495868221;Convenient method to find a single object given a single String parameter.;public T findObject(String p1) throws DataAccessException {_		return findObject(p1, null)__	};convenient,method,to,find,a,single,object,given,a,single,string,parameter;public,t,find,object,string,p1,throws,data,access,exception,return,find,object,p1,null
SqlQuery -> public T findObject(String p1) throws DataAccessException;1496259743;Convenient method to find a single object given a single String parameter.;public T findObject(String p1) throws DataAccessException {_		return findObject(p1, null)__	};convenient,method,to,find,a,single,object,given,a,single,string,parameter;public,t,find,object,string,p1,throws,data,access,exception,return,find,object,p1,null
SqlQuery -> public T findObject(Object[] params, Map<?, ?> context) throws DataAccessException;1385412762;Generic object finder method, used by all other {@code findObject} methods._Object finder methods are like EJB entity bean finders, in that it is_considered an error if they return more than one result._@return the result object, or {@code null} if not found. Subclasses may_choose to treat this as an error and throw an exception._@see org.springframework.dao.support.DataAccessUtils#singleResult;public T findObject(Object[] params, Map<?, ?> context) throws DataAccessException {_		List<T> results = execute(params, context)__		return DataAccessUtils.singleResult(results)__	};generic,object,finder,method,used,by,all,other,code,find,object,methods,object,finder,methods,are,like,ejb,entity,bean,finders,in,that,it,is,considered,an,error,if,they,return,more,than,one,result,return,the,result,object,or,code,null,if,not,found,subclasses,may,choose,to,treat,this,as,an,error,and,throw,an,exception,see,org,springframework,dao,support,data,access,utils,single,result;public,t,find,object,object,params,map,context,throws,data,access,exception,list,t,results,execute,params,context,return,data,access,utils,single,result,results
SqlQuery -> public T findObject(Object[] params, Map<?, ?> context) throws DataAccessException;1413848647;Generic object finder method, used by all other {@code findObject} methods._Object finder methods are like EJB entity bean finders, in that it is_considered an error if they return more than one result._@return the result object, or {@code null} if not found. Subclasses may_choose to treat this as an error and throw an exception._@see org.springframework.dao.support.DataAccessUtils#singleResult;public T findObject(Object[] params, Map<?, ?> context) throws DataAccessException {_		List<T> results = execute(params, context)__		return DataAccessUtils.singleResult(results)__	};generic,object,finder,method,used,by,all,other,code,find,object,methods,object,finder,methods,are,like,ejb,entity,bean,finders,in,that,it,is,considered,an,error,if,they,return,more,than,one,result,return,the,result,object,or,code,null,if,not,found,subclasses,may,choose,to,treat,this,as,an,error,and,throw,an,exception,see,org,springframework,dao,support,data,access,utils,single,result;public,t,find,object,object,params,map,context,throws,data,access,exception,list,t,results,execute,params,context,return,data,access,utils,single,result,results
SqlQuery -> public List<T> execute(@Nullable Object[] params, @Nullable Map<?, ?> context) throws DataAccessException;1496837955;Central execution method. All un-named parameter execution goes through this method._@param params parameters, similar to JDO query parameters._Primitive parameters must be represented by their Object wrapper type._The ordering of parameters is significant._@param context contextual information passed to the {@code mapRow}_callback method. The JDBC operation itself doesn't rely on this parameter,_but it can be useful for creating the objects of the result list._@return a List of objects, one per row of the ResultSet. Normally all these_will be of the same class, although it is possible to use different types.;public List<T> execute(@Nullable Object[] params, @Nullable Map<?, ?> context) throws DataAccessException {_		validateParameters(params)__		RowMapper<T> rowMapper = newRowMapper(params, context)__		return getJdbcTemplate().query(newPreparedStatementCreator(params), rowMapper)__	};central,execution,method,all,un,named,parameter,execution,goes,through,this,method,param,params,parameters,similar,to,jdo,query,parameters,primitive,parameters,must,be,represented,by,their,object,wrapper,type,the,ordering,of,parameters,is,significant,param,context,contextual,information,passed,to,the,code,map,row,callback,method,the,jdbc,operation,itself,doesn,t,rely,on,this,parameter,but,it,can,be,useful,for,creating,the,objects,of,the,result,list,return,a,list,of,objects,one,per,row,of,the,result,set,normally,all,these,will,be,of,the,same,class,although,it,is,possible,to,use,different,types;public,list,t,execute,nullable,object,params,nullable,map,context,throws,data,access,exception,validate,parameters,params,row,mapper,t,row,mapper,new,row,mapper,params,context,return,get,jdbc,template,query,new,prepared,statement,creator,params,row,mapper
SqlQuery -> public List<T> execute(@Nullable Object[] params, @Nullable Map<?, ?> context) throws DataAccessException;1530174524;Central execution method. All un-named parameter execution goes through this method._@param params parameters, similar to JDO query parameters._Primitive parameters must be represented by their Object wrapper type._The ordering of parameters is significant._@param context contextual information passed to the {@code mapRow}_callback method. The JDBC operation itself doesn't rely on this parameter,_but it can be useful for creating the objects of the result list._@return a List of objects, one per row of the ResultSet. Normally all these_will be of the same class, although it is possible to use different types.;public List<T> execute(@Nullable Object[] params, @Nullable Map<?, ?> context) throws DataAccessException {_		validateParameters(params)__		RowMapper<T> rowMapper = newRowMapper(params, context)__		return getJdbcTemplate().query(newPreparedStatementCreator(params), rowMapper)__	};central,execution,method,all,un,named,parameter,execution,goes,through,this,method,param,params,parameters,similar,to,jdo,query,parameters,primitive,parameters,must,be,represented,by,their,object,wrapper,type,the,ordering,of,parameters,is,significant,param,context,contextual,information,passed,to,the,code,map,row,callback,method,the,jdbc,operation,itself,doesn,t,rely,on,this,parameter,but,it,can,be,useful,for,creating,the,objects,of,the,result,list,return,a,list,of,objects,one,per,row,of,the,result,set,normally,all,these,will,be,of,the,same,class,although,it,is,possible,to,use,different,types;public,list,t,execute,nullable,object,params,nullable,map,context,throws,data,access,exception,validate,parameters,params,row,mapper,t,row,mapper,new,row,mapper,params,context,return,get,jdbc,template,query,new,prepared,statement,creator,params,row,mapper
SqlQuery -> public List<T> execute(@Nullable Object[] params, @Nullable Map<?, ?> context) throws DataAccessException;1530174524;Central execution method. All un-named parameter execution goes through this method._@param params parameters, similar to JDO query parameters._Primitive parameters must be represented by their Object wrapper type._The ordering of parameters is significant._@param context contextual information passed to the {@code mapRow}_callback method. The JDBC operation itself doesn't rely on this parameter,_but it can be useful for creating the objects of the result list._@return a List of objects, one per row of the ResultSet. Normally all these_will be of the same class, although it is possible to use different types.;public List<T> execute(@Nullable Object[] params, @Nullable Map<?, ?> context) throws DataAccessException {_		validateParameters(params)__		RowMapper<T> rowMapper = newRowMapper(params, context)__		return getJdbcTemplate().query(newPreparedStatementCreator(params), rowMapper)__	};central,execution,method,all,un,named,parameter,execution,goes,through,this,method,param,params,parameters,similar,to,jdo,query,parameters,primitive,parameters,must,be,represented,by,their,object,wrapper,type,the,ordering,of,parameters,is,significant,param,context,contextual,information,passed,to,the,code,map,row,callback,method,the,jdbc,operation,itself,doesn,t,rely,on,this,parameter,but,it,can,be,useful,for,creating,the,objects,of,the,result,list,return,a,list,of,objects,one,per,row,of,the,result,set,normally,all,these,will,be,of,the,same,class,although,it,is,possible,to,use,different,types;public,list,t,execute,nullable,object,params,nullable,map,context,throws,data,access,exception,validate,parameters,params,row,mapper,t,row,mapper,new,row,mapper,params,context,return,get,jdbc,template,query,new,prepared,statement,creator,params,row,mapper
SqlQuery -> public List<T> execute(@Nullable Object[] params, @Nullable Map<?, ?> context) throws DataAccessException;1530174524;Central execution method. All un-named parameter execution goes through this method._@param params parameters, similar to JDO query parameters._Primitive parameters must be represented by their Object wrapper type._The ordering of parameters is significant._@param context contextual information passed to the {@code mapRow}_callback method. The JDBC operation itself doesn't rely on this parameter,_but it can be useful for creating the objects of the result list._@return a List of objects, one per row of the ResultSet. Normally all these_will be of the same class, although it is possible to use different types.;public List<T> execute(@Nullable Object[] params, @Nullable Map<?, ?> context) throws DataAccessException {_		validateParameters(params)__		RowMapper<T> rowMapper = newRowMapper(params, context)__		return getJdbcTemplate().query(newPreparedStatementCreator(params), rowMapper)__	};central,execution,method,all,un,named,parameter,execution,goes,through,this,method,param,params,parameters,similar,to,jdo,query,parameters,primitive,parameters,must,be,represented,by,their,object,wrapper,type,the,ordering,of,parameters,is,significant,param,context,contextual,information,passed,to,the,code,map,row,callback,method,the,jdbc,operation,itself,doesn,t,rely,on,this,parameter,but,it,can,be,useful,for,creating,the,objects,of,the,result,list,return,a,list,of,objects,one,per,row,of,the,result,set,normally,all,these,will,be,of,the,same,class,although,it,is,possible,to,use,different,types;public,list,t,execute,nullable,object,params,nullable,map,context,throws,data,access,exception,validate,parameters,params,row,mapper,t,row,mapper,new,row,mapper,params,context,return,get,jdbc,template,query,new,prepared,statement,creator,params,row,mapper
SqlQuery -> @Nullable 	public T findObject(long p1, @Nullable Map<?, ?> context) throws DataAccessException;1496837955;Convenient method to find a single object given a single long parameter_and a context.;@Nullable_	public T findObject(long p1, @Nullable Map<?, ?> context) throws DataAccessException {_		return findObject(new Object[] {p1}, context)__	};convenient,method,to,find,a,single,object,given,a,single,long,parameter,and,a,context;nullable,public,t,find,object,long,p1,nullable,map,context,throws,data,access,exception,return,find,object,new,object,p1,context
SqlQuery -> @Nullable 	public T findObject(long p1, @Nullable Map<?, ?> context) throws DataAccessException;1530174524;Convenient method to find a single object given a single long parameter_and a context.;@Nullable_	public T findObject(long p1, @Nullable Map<?, ?> context) throws DataAccessException {_		return findObject(new Object[] {p1}, context)__	};convenient,method,to,find,a,single,object,given,a,single,long,parameter,and,a,context;nullable,public,t,find,object,long,p1,nullable,map,context,throws,data,access,exception,return,find,object,new,object,p1,context
SqlQuery -> @Nullable 	public T findObject(long p1, @Nullable Map<?, ?> context) throws DataAccessException;1530174524;Convenient method to find a single object given a single long parameter_and a context.;@Nullable_	public T findObject(long p1, @Nullable Map<?, ?> context) throws DataAccessException {_		return findObject(new Object[] {p1}, context)__	};convenient,method,to,find,a,single,object,given,a,single,long,parameter,and,a,context;nullable,public,t,find,object,long,p1,nullable,map,context,throws,data,access,exception,return,find,object,new,object,p1,context
SqlQuery -> @Nullable 	public T findObject(long p1, @Nullable Map<?, ?> context) throws DataAccessException;1530174524;Convenient method to find a single object given a single long parameter_and a context.;@Nullable_	public T findObject(long p1, @Nullable Map<?, ?> context) throws DataAccessException {_		return findObject(new Object[] {p1}, context)__	};convenient,method,to,find,a,single,object,given,a,single,long,parameter,and,a,context;nullable,public,t,find,object,long,p1,nullable,map,context,throws,data,access,exception,return,find,object,new,object,p1,context
SqlQuery -> public T findObject(int p1, Map context) throws DataAccessException;1328020251;Convenient method to find a single object given a single int parameter_and a context.;public T findObject(int p1, Map context) throws DataAccessException {_		return findObject(new Object[] {p1}, context)__	};convenient,method,to,find,a,single,object,given,a,single,int,parameter,and,a,context;public,t,find,object,int,p1,map,context,throws,data,access,exception,return,find,object,new,object,p1,context
SqlQuery -> public T findObject(int p1, Map context) throws DataAccessException;1356735495;Convenient method to find a single object given a single int parameter_and a context.;public T findObject(int p1, Map context) throws DataAccessException {_		return findObject(new Object[] {p1}, context)__	};convenient,method,to,find,a,single,object,given,a,single,int,parameter,and,a,context;public,t,find,object,int,p1,map,context,throws,data,access,exception,return,find,object,new,object,p1,context
SqlQuery -> public List<T> execute(long p1) throws DataAccessException;1328020251;Convenient method to execute with a single long parameter._@param p1 single long parameter;public List<T> execute(long p1) throws DataAccessException {_		return execute(p1, null)__	};convenient,method,to,execute,with,a,single,long,parameter,param,p1,single,long,parameter;public,list,t,execute,long,p1,throws,data,access,exception,return,execute,p1,null
SqlQuery -> public List<T> execute(long p1) throws DataAccessException;1356735495;Convenient method to execute with a single long parameter._@param p1 single long parameter;public List<T> execute(long p1) throws DataAccessException {_		return execute(p1, null)__	};convenient,method,to,execute,with,a,single,long,parameter,param,p1,single,long,parameter;public,list,t,execute,long,p1,throws,data,access,exception,return,execute,p1,null
SqlQuery -> public List<T> execute(long p1) throws DataAccessException;1385412762;Convenient method to execute with a single long parameter._@param p1 single long parameter;public List<T> execute(long p1) throws DataAccessException {_		return execute(p1, null)__	};convenient,method,to,execute,with,a,single,long,parameter,param,p1,single,long,parameter;public,list,t,execute,long,p1,throws,data,access,exception,return,execute,p1,null
SqlQuery -> public List<T> execute(long p1) throws DataAccessException;1413848647;Convenient method to execute with a single long parameter._@param p1 single long parameter;public List<T> execute(long p1) throws DataAccessException {_		return execute(p1, null)__	};convenient,method,to,execute,with,a,single,long,parameter,param,p1,single,long,parameter;public,list,t,execute,long,p1,throws,data,access,exception,return,execute,p1,null
SqlQuery -> public List<T> execute(long p1) throws DataAccessException;1495868221;Convenient method to execute with a single long parameter._@param p1 single long parameter;public List<T> execute(long p1) throws DataAccessException {_		return execute(p1, null)__	};convenient,method,to,execute,with,a,single,long,parameter,param,p1,single,long,parameter;public,list,t,execute,long,p1,throws,data,access,exception,return,execute,p1,null
SqlQuery -> public List<T> execute(long p1) throws DataAccessException;1496259743;Convenient method to execute with a single long parameter._@param p1 single long parameter;public List<T> execute(long p1) throws DataAccessException {_		return execute(p1, null)__	};convenient,method,to,execute,with,a,single,long,parameter,param,p1,single,long,parameter;public,list,t,execute,long,p1,throws,data,access,exception,return,execute,p1,null
SqlQuery -> public List<T> execute(long p1) throws DataAccessException;1496837955;Convenient method to execute with a single long parameter._@param p1 single long parameter;public List<T> execute(long p1) throws DataAccessException {_		return execute(p1, null)__	};convenient,method,to,execute,with,a,single,long,parameter,param,p1,single,long,parameter;public,list,t,execute,long,p1,throws,data,access,exception,return,execute,p1,null
SqlQuery -> public List<T> execute(long p1) throws DataAccessException;1530174524;Convenient method to execute with a single long parameter._@param p1 single long parameter;public List<T> execute(long p1) throws DataAccessException {_		return execute(p1, null)__	};convenient,method,to,execute,with,a,single,long,parameter,param,p1,single,long,parameter;public,list,t,execute,long,p1,throws,data,access,exception,return,execute,p1,null
SqlQuery -> public List<T> execute(long p1) throws DataAccessException;1530174524;Convenient method to execute with a single long parameter._@param p1 single long parameter;public List<T> execute(long p1) throws DataAccessException {_		return execute(p1, null)__	};convenient,method,to,execute,with,a,single,long,parameter,param,p1,single,long,parameter;public,list,t,execute,long,p1,throws,data,access,exception,return,execute,p1,null
SqlQuery -> public List<T> execute(long p1) throws DataAccessException;1530174524;Convenient method to execute with a single long parameter._@param p1 single long parameter;public List<T> execute(long p1) throws DataAccessException {_		return execute(p1, null)__	};convenient,method,to,execute,with,a,single,long,parameter,param,p1,single,long,parameter;public,list,t,execute,long,p1,throws,data,access,exception,return,execute,p1,null
SqlQuery -> public List<T> execute(int p1, int p2) throws DataAccessException;1328020251;Convenient method to execute with two int parameters._@param p1 first int parameter_@param p2 second int parameter;public List<T> execute(int p1, int p2) throws DataAccessException {_		return execute(p1, p2, null)__	};convenient,method,to,execute,with,two,int,parameters,param,p1,first,int,parameter,param,p2,second,int,parameter;public,list,t,execute,int,p1,int,p2,throws,data,access,exception,return,execute,p1,p2,null
SqlQuery -> public List<T> execute(int p1, int p2) throws DataAccessException;1356735495;Convenient method to execute with two int parameters._@param p1 first int parameter_@param p2 second int parameter;public List<T> execute(int p1, int p2) throws DataAccessException {_		return execute(p1, p2, null)__	};convenient,method,to,execute,with,two,int,parameters,param,p1,first,int,parameter,param,p2,second,int,parameter;public,list,t,execute,int,p1,int,p2,throws,data,access,exception,return,execute,p1,p2,null
SqlQuery -> public List<T> execute(int p1, int p2) throws DataAccessException;1385412762;Convenient method to execute with two int parameters._@param p1 first int parameter_@param p2 second int parameter;public List<T> execute(int p1, int p2) throws DataAccessException {_		return execute(p1, p2, null)__	};convenient,method,to,execute,with,two,int,parameters,param,p1,first,int,parameter,param,p2,second,int,parameter;public,list,t,execute,int,p1,int,p2,throws,data,access,exception,return,execute,p1,p2,null
SqlQuery -> public List<T> execute(int p1, int p2) throws DataAccessException;1413848647;Convenient method to execute with two int parameters._@param p1 first int parameter_@param p2 second int parameter;public List<T> execute(int p1, int p2) throws DataAccessException {_		return execute(p1, p2, null)__	};convenient,method,to,execute,with,two,int,parameters,param,p1,first,int,parameter,param,p2,second,int,parameter;public,list,t,execute,int,p1,int,p2,throws,data,access,exception,return,execute,p1,p2,null
SqlQuery -> public List<T> execute(int p1, int p2) throws DataAccessException;1495868221;Convenient method to execute with two int parameters._@param p1 first int parameter_@param p2 second int parameter;public List<T> execute(int p1, int p2) throws DataAccessException {_		return execute(p1, p2, null)__	};convenient,method,to,execute,with,two,int,parameters,param,p1,first,int,parameter,param,p2,second,int,parameter;public,list,t,execute,int,p1,int,p2,throws,data,access,exception,return,execute,p1,p2,null
SqlQuery -> public List<T> execute(int p1, int p2) throws DataAccessException;1496259743;Convenient method to execute with two int parameters._@param p1 first int parameter_@param p2 second int parameter;public List<T> execute(int p1, int p2) throws DataAccessException {_		return execute(p1, p2, null)__	};convenient,method,to,execute,with,two,int,parameters,param,p1,first,int,parameter,param,p2,second,int,parameter;public,list,t,execute,int,p1,int,p2,throws,data,access,exception,return,execute,p1,p2,null
SqlQuery -> public List<T> execute(int p1, int p2) throws DataAccessException;1496837955;Convenient method to execute with two int parameters._@param p1 first int parameter_@param p2 second int parameter;public List<T> execute(int p1, int p2) throws DataAccessException {_		return execute(p1, p2, null)__	};convenient,method,to,execute,with,two,int,parameters,param,p1,first,int,parameter,param,p2,second,int,parameter;public,list,t,execute,int,p1,int,p2,throws,data,access,exception,return,execute,p1,p2,null
SqlQuery -> public List<T> execute(int p1, int p2) throws DataAccessException;1530174524;Convenient method to execute with two int parameters._@param p1 first int parameter_@param p2 second int parameter;public List<T> execute(int p1, int p2) throws DataAccessException {_		return execute(p1, p2, null)__	};convenient,method,to,execute,with,two,int,parameters,param,p1,first,int,parameter,param,p2,second,int,parameter;public,list,t,execute,int,p1,int,p2,throws,data,access,exception,return,execute,p1,p2,null
SqlQuery -> public List<T> execute(int p1, int p2) throws DataAccessException;1530174524;Convenient method to execute with two int parameters._@param p1 first int parameter_@param p2 second int parameter;public List<T> execute(int p1, int p2) throws DataAccessException {_		return execute(p1, p2, null)__	};convenient,method,to,execute,with,two,int,parameters,param,p1,first,int,parameter,param,p2,second,int,parameter;public,list,t,execute,int,p1,int,p2,throws,data,access,exception,return,execute,p1,p2,null
SqlQuery -> public List<T> execute(int p1, int p2) throws DataAccessException;1530174524;Convenient method to execute with two int parameters._@param p1 first int parameter_@param p2 second int parameter;public List<T> execute(int p1, int p2) throws DataAccessException {_		return execute(p1, p2, null)__	};convenient,method,to,execute,with,two,int,parameters,param,p1,first,int,parameter,param,p2,second,int,parameter;public,list,t,execute,int,p1,int,p2,throws,data,access,exception,return,execute,p1,p2,null
SqlQuery -> public T findObject(int p1) throws DataAccessException;1328020251;Convenient method to find a single object given a single int parameter.;public T findObject(int p1) throws DataAccessException {_		return findObject(p1, null)__	};convenient,method,to,find,a,single,object,given,a,single,int,parameter;public,t,find,object,int,p1,throws,data,access,exception,return,find,object,p1,null
SqlQuery -> public T findObject(int p1) throws DataAccessException;1356735495;Convenient method to find a single object given a single int parameter.;public T findObject(int p1) throws DataAccessException {_		return findObject(p1, null)__	};convenient,method,to,find,a,single,object,given,a,single,int,parameter;public,t,find,object,int,p1,throws,data,access,exception,return,find,object,p1,null
SqlQuery -> public T findObject(int p1) throws DataAccessException;1385412762;Convenient method to find a single object given a single int parameter.;public T findObject(int p1) throws DataAccessException {_		return findObject(p1, null)__	};convenient,method,to,find,a,single,object,given,a,single,int,parameter;public,t,find,object,int,p1,throws,data,access,exception,return,find,object,p1,null
SqlQuery -> public T findObject(int p1) throws DataAccessException;1413848647;Convenient method to find a single object given a single int parameter.;public T findObject(int p1) throws DataAccessException {_		return findObject(p1, null)__	};convenient,method,to,find,a,single,object,given,a,single,int,parameter;public,t,find,object,int,p1,throws,data,access,exception,return,find,object,p1,null
SqlQuery -> public T findObject(int p1) throws DataAccessException;1495868221;Convenient method to find a single object given a single int parameter.;public T findObject(int p1) throws DataAccessException {_		return findObject(p1, null)__	};convenient,method,to,find,a,single,object,given,a,single,int,parameter;public,t,find,object,int,p1,throws,data,access,exception,return,find,object,p1,null
SqlQuery -> public T findObject(int p1) throws DataAccessException;1496259743;Convenient method to find a single object given a single int parameter.;public T findObject(int p1) throws DataAccessException {_		return findObject(p1, null)__	};convenient,method,to,find,a,single,object,given,a,single,int,parameter;public,t,find,object,int,p1,throws,data,access,exception,return,find,object,p1,null
SqlQuery -> public T findObject(String p1, Map context) throws DataAccessException;1328020251;Convenient method to find a single object given a single String parameter_and a context.;public T findObject(String p1, Map context) throws DataAccessException {_		return findObject(new Object[] {p1}, context)__	};convenient,method,to,find,a,single,object,given,a,single,string,parameter,and,a,context;public,t,find,object,string,p1,map,context,throws,data,access,exception,return,find,object,new,object,p1,context
SqlQuery -> public T findObject(String p1, Map context) throws DataAccessException;1356735495;Convenient method to find a single object given a single String parameter_and a context.;public T findObject(String p1, Map context) throws DataAccessException {_		return findObject(new Object[] {p1}, context)__	};convenient,method,to,find,a,single,object,given,a,single,string,parameter,and,a,context;public,t,find,object,string,p1,map,context,throws,data,access,exception,return,find,object,new,object,p1,context
SqlQuery -> public T findObject(long p1) throws DataAccessException;1328020251;Convenient method to find a single object given a single long parameter.;public T findObject(long p1) throws DataAccessException {_		return findObject(p1, null)__	};convenient,method,to,find,a,single,object,given,a,single,long,parameter;public,t,find,object,long,p1,throws,data,access,exception,return,find,object,p1,null
SqlQuery -> public T findObject(long p1) throws DataAccessException;1356735495;Convenient method to find a single object given a single long parameter.;public T findObject(long p1) throws DataAccessException {_		return findObject(p1, null)__	};convenient,method,to,find,a,single,object,given,a,single,long,parameter;public,t,find,object,long,p1,throws,data,access,exception,return,find,object,p1,null
SqlQuery -> public T findObject(long p1) throws DataAccessException;1385412762;Convenient method to find a single object given a single long parameter.;public T findObject(long p1) throws DataAccessException {_		return findObject(p1, null)__	};convenient,method,to,find,a,single,object,given,a,single,long,parameter;public,t,find,object,long,p1,throws,data,access,exception,return,find,object,p1,null
SqlQuery -> public T findObject(long p1) throws DataAccessException;1413848647;Convenient method to find a single object given a single long parameter.;public T findObject(long p1) throws DataAccessException {_		return findObject(p1, null)__	};convenient,method,to,find,a,single,object,given,a,single,long,parameter;public,t,find,object,long,p1,throws,data,access,exception,return,find,object,p1,null
SqlQuery -> public T findObject(long p1) throws DataAccessException;1495868221;Convenient method to find a single object given a single long parameter.;public T findObject(long p1) throws DataAccessException {_		return findObject(p1, null)__	};convenient,method,to,find,a,single,object,given,a,single,long,parameter;public,t,find,object,long,p1,throws,data,access,exception,return,find,object,p1,null
SqlQuery -> public T findObject(long p1) throws DataAccessException;1496259743;Convenient method to find a single object given a single long parameter.;public T findObject(long p1) throws DataAccessException {_		return findObject(p1, null)__	};convenient,method,to,find,a,single,object,given,a,single,long,parameter;public,t,find,object,long,p1,throws,data,access,exception,return,find,object,p1,null
SqlQuery -> protected abstract RowMapper<T> newRowMapper(Object[] parameters, Map context)_;1328020251;Subclasses must implement this method to extract an object per row, to be_returned by the <cod>execute</code> method as an aggregated {@link List}._@param parameters the parameters to the <code>execute()</code> method,_in case subclass is interested_ may be <code>null</code> if there_were no parameters._@param context contextual information passed to the <code>mapRow</code>_callback method. The JDBC operation itself doesn't rely on this parameter,_but it can be useful for creating the objects of the result list._@see #execute;protected abstract RowMapper<T> newRowMapper(Object[] parameters, Map context)_;subclasses,must,implement,this,method,to,extract,an,object,per,row,to,be,returned,by,the,cod,execute,code,method,as,an,aggregated,link,list,param,parameters,the,parameters,to,the,code,execute,code,method,in,case,subclass,is,interested,may,be,code,null,code,if,there,were,no,parameters,param,context,contextual,information,passed,to,the,code,map,row,code,callback,method,the,jdbc,operation,itself,doesn,t,rely,on,this,parameter,but,it,can,be,useful,for,creating,the,objects,of,the,result,list,see,execute;protected,abstract,row,mapper,t,new,row,mapper,object,parameters,map,context
SqlQuery -> protected abstract RowMapper<T> newRowMapper(Object[] parameters, Map context)_;1356735495;Subclasses must implement this method to extract an object per row, to be_returned by the <cod>execute</code> method as an aggregated {@link List}._@param parameters the parameters to the {@code execute()} method,_in case subclass is interested_ may be {@code null} if there_were no parameters._@param context contextual information passed to the {@code mapRow}_callback method. The JDBC operation itself doesn't rely on this parameter,_but it can be useful for creating the objects of the result list._@see #execute;protected abstract RowMapper<T> newRowMapper(Object[] parameters, Map context)_;subclasses,must,implement,this,method,to,extract,an,object,per,row,to,be,returned,by,the,cod,execute,code,method,as,an,aggregated,link,list,param,parameters,the,parameters,to,the,code,execute,method,in,case,subclass,is,interested,may,be,code,null,if,there,were,no,parameters,param,context,contextual,information,passed,to,the,code,map,row,callback,method,the,jdbc,operation,itself,doesn,t,rely,on,this,parameter,but,it,can,be,useful,for,creating,the,objects,of,the,result,list,see,execute;protected,abstract,row,mapper,t,new,row,mapper,object,parameters,map,context
SqlQuery -> @Nullable 	public T findObjectByNamedParam(Map<String, ?> paramMap) throws DataAccessException;1496837955;Convenient method to execute without context._@param paramMap Map of parameter name to parameter object,_matching named parameters specified in the SQL statement._Ordering is not significant.;@Nullable_	public T findObjectByNamedParam(Map<String, ?> paramMap) throws DataAccessException {_		return findObjectByNamedParam(paramMap, null)__	};convenient,method,to,execute,without,context,param,param,map,map,of,parameter,name,to,parameter,object,matching,named,parameters,specified,in,the,sql,statement,ordering,is,not,significant;nullable,public,t,find,object,by,named,param,map,string,param,map,throws,data,access,exception,return,find,object,by,named,param,param,map,null
SqlQuery -> @Nullable 	public T findObjectByNamedParam(Map<String, ?> paramMap) throws DataAccessException;1530174524;Convenient method to execute without context._@param paramMap a Map of parameter name to parameter object,_matching named parameters specified in the SQL statement._Ordering is not significant.;@Nullable_	public T findObjectByNamedParam(Map<String, ?> paramMap) throws DataAccessException {_		return findObjectByNamedParam(paramMap, null)__	};convenient,method,to,execute,without,context,param,param,map,a,map,of,parameter,name,to,parameter,object,matching,named,parameters,specified,in,the,sql,statement,ordering,is,not,significant;nullable,public,t,find,object,by,named,param,map,string,param,map,throws,data,access,exception,return,find,object,by,named,param,param,map,null
SqlQuery -> @Nullable 	public T findObjectByNamedParam(Map<String, ?> paramMap) throws DataAccessException;1530174524;Convenient method to execute without context._@param paramMap a Map of parameter name to parameter object,_matching named parameters specified in the SQL statement._Ordering is not significant.;@Nullable_	public T findObjectByNamedParam(Map<String, ?> paramMap) throws DataAccessException {_		return findObjectByNamedParam(paramMap, null)__	};convenient,method,to,execute,without,context,param,param,map,a,map,of,parameter,name,to,parameter,object,matching,named,parameters,specified,in,the,sql,statement,ordering,is,not,significant;nullable,public,t,find,object,by,named,param,map,string,param,map,throws,data,access,exception,return,find,object,by,named,param,param,map,null
SqlQuery -> @Nullable 	public T findObjectByNamedParam(Map<String, ?> paramMap) throws DataAccessException;1530174524;Convenient method to execute without context._@param paramMap a Map of parameter name to parameter object,_matching named parameters specified in the SQL statement._Ordering is not significant.;@Nullable_	public T findObjectByNamedParam(Map<String, ?> paramMap) throws DataAccessException {_		return findObjectByNamedParam(paramMap, null)__	};convenient,method,to,execute,without,context,param,param,map,a,map,of,parameter,name,to,parameter,object,matching,named,parameters,specified,in,the,sql,statement,ordering,is,not,significant;nullable,public,t,find,object,by,named,param,map,string,param,map,throws,data,access,exception,return,find,object,by,named,param,param,map,null
SqlQuery -> public List<T> execute() throws DataAccessException;1328020251;Convenient method to execute without parameters nor context.;public List<T> execute() throws DataAccessException {_		return execute((Object[]) null)__	};convenient,method,to,execute,without,parameters,nor,context;public,list,t,execute,throws,data,access,exception,return,execute,object,null
SqlQuery -> public List<T> execute() throws DataAccessException;1356735495;Convenient method to execute without parameters nor context.;public List<T> execute() throws DataAccessException {_		return execute((Object[]) null)__	};convenient,method,to,execute,without,parameters,nor,context;public,list,t,execute,throws,data,access,exception,return,execute,object,null
SqlQuery -> public List<T> execute() throws DataAccessException;1385412762;Convenient method to execute without parameters nor context.;public List<T> execute() throws DataAccessException {_		return execute((Object[]) null)__	};convenient,method,to,execute,without,parameters,nor,context;public,list,t,execute,throws,data,access,exception,return,execute,object,null
SqlQuery -> public List<T> execute() throws DataAccessException;1413848647;Convenient method to execute without parameters nor context.;public List<T> execute() throws DataAccessException {_		return execute((Object[]) null)__	};convenient,method,to,execute,without,parameters,nor,context;public,list,t,execute,throws,data,access,exception,return,execute,object,null
SqlQuery -> public List<T> execute() throws DataAccessException;1495868221;Convenient method to execute without parameters nor context.;public List<T> execute() throws DataAccessException {_		return execute((Object[]) null)__	};convenient,method,to,execute,without,parameters,nor,context;public,list,t,execute,throws,data,access,exception,return,execute,object,null
SqlQuery -> public List<T> execute() throws DataAccessException;1496259743;Convenient method to execute without parameters nor context.;public List<T> execute() throws DataAccessException {_		return execute((Object[]) null)__	};convenient,method,to,execute,without,parameters,nor,context;public,list,t,execute,throws,data,access,exception,return,execute,object,null
SqlQuery -> public List<T> execute() throws DataAccessException;1496837955;Convenient method to execute without parameters nor context.;public List<T> execute() throws DataAccessException {_		return execute((Object[]) null, null)__	};convenient,method,to,execute,without,parameters,nor,context;public,list,t,execute,throws,data,access,exception,return,execute,object,null,null
SqlQuery -> public List<T> execute() throws DataAccessException;1530174524;Convenient method to execute without parameters nor context.;public List<T> execute() throws DataAccessException {_		return execute((Object[]) null, null)__	};convenient,method,to,execute,without,parameters,nor,context;public,list,t,execute,throws,data,access,exception,return,execute,object,null,null
SqlQuery -> public List<T> execute() throws DataAccessException;1530174524;Convenient method to execute without parameters nor context.;public List<T> execute() throws DataAccessException {_		return execute((Object[]) null, null)__	};convenient,method,to,execute,without,parameters,nor,context;public,list,t,execute,throws,data,access,exception,return,execute,object,null,null
SqlQuery -> public List<T> execute() throws DataAccessException;1530174524;Convenient method to execute without parameters nor context.;public List<T> execute() throws DataAccessException {_		return execute((Object[]) null, null)__	};convenient,method,to,execute,without,parameters,nor,context;public,list,t,execute,throws,data,access,exception,return,execute,object,null,null
SqlQuery -> public T findObject(int p1, Map<?, ?> context) throws DataAccessException;1385412762;Convenient method to find a single object given a single int parameter_and a context.;public T findObject(int p1, Map<?, ?> context) throws DataAccessException {_		return findObject(new Object[] {p1}, context)__	};convenient,method,to,find,a,single,object,given,a,single,int,parameter,and,a,context;public,t,find,object,int,p1,map,context,throws,data,access,exception,return,find,object,new,object,p1,context
SqlQuery -> public T findObject(int p1, Map<?, ?> context) throws DataAccessException;1413848647;Convenient method to find a single object given a single int parameter_and a context.;public T findObject(int p1, Map<?, ?> context) throws DataAccessException {_		return findObject(new Object[] {p1}, context)__	};convenient,method,to,find,a,single,object,given,a,single,int,parameter,and,a,context;public,t,find,object,int,p1,map,context,throws,data,access,exception,return,find,object,new,object,p1,context
SqlQuery -> public T findObject(int p1, Map<?, ?> context) throws DataAccessException;1495868221;Convenient method to find a single object given a single int parameter_and a context.;public T findObject(int p1, Map<?, ?> context) throws DataAccessException {_		return findObject(new Object[] {p1}, context)__	};convenient,method,to,find,a,single,object,given,a,single,int,parameter,and,a,context;public,t,find,object,int,p1,map,context,throws,data,access,exception,return,find,object,new,object,p1,context
SqlQuery -> public T findObject(long p1, Map<?, ?> context) throws DataAccessException;1385412762;Convenient method to find a single object given a single long parameter_and a context.;public T findObject(long p1, Map<?, ?> context) throws DataAccessException {_		return findObject(new Object[] {p1}, context)__	};convenient,method,to,find,a,single,object,given,a,single,long,parameter,and,a,context;public,t,find,object,long,p1,map,context,throws,data,access,exception,return,find,object,new,object,p1,context
SqlQuery -> public T findObject(long p1, Map<?, ?> context) throws DataAccessException;1413848647;Convenient method to find a single object given a single long parameter_and a context.;public T findObject(long p1, Map<?, ?> context) throws DataAccessException {_		return findObject(new Object[] {p1}, context)__	};convenient,method,to,find,a,single,object,given,a,single,long,parameter,and,a,context;public,t,find,object,long,p1,map,context,throws,data,access,exception,return,find,object,new,object,p1,context
SqlQuery -> public T findObject(long p1, Map<?, ?> context) throws DataAccessException;1495868221;Convenient method to find a single object given a single long parameter_and a context.;public T findObject(long p1, Map<?, ?> context) throws DataAccessException {_		return findObject(new Object[] {p1}, context)__	};convenient,method,to,find,a,single,object,given,a,single,long,parameter,and,a,context;public,t,find,object,long,p1,map,context,throws,data,access,exception,return,find,object,new,object,p1,context
SqlQuery -> public List<T> execute(int p1, int p2, Map context) throws DataAccessException;1328020251;Convenient method to execute with two int parameters and context._@param p1 first int parameter_@param p2 second int parameter_@param context the contextual information for object creation;public List<T> execute(int p1, int p2, Map context) throws DataAccessException {_		return execute(new Object[] {p1, p2}, context)__	};convenient,method,to,execute,with,two,int,parameters,and,context,param,p1,first,int,parameter,param,p2,second,int,parameter,param,context,the,contextual,information,for,object,creation;public,list,t,execute,int,p1,int,p2,map,context,throws,data,access,exception,return,execute,new,object,p1,p2,context
SqlQuery -> public List<T> execute(int p1, int p2, Map context) throws DataAccessException;1356735495;Convenient method to execute with two int parameters and context._@param p1 first int parameter_@param p2 second int parameter_@param context the contextual information for object creation;public List<T> execute(int p1, int p2, Map context) throws DataAccessException {_		return execute(new Object[] {p1, p2}, context)__	};convenient,method,to,execute,with,two,int,parameters,and,context,param,p1,first,int,parameter,param,p2,second,int,parameter,param,context,the,contextual,information,for,object,creation;public,list,t,execute,int,p1,int,p2,map,context,throws,data,access,exception,return,execute,new,object,p1,p2,context
SqlQuery -> public List<T> execute(int p1, Map context) throws DataAccessException;1328020251;Convenient method to execute with a single int parameter and context._@param p1 single int parameter_@param context the contextual information for object creation;public List<T> execute(int p1, Map context) throws DataAccessException {_		return execute(new Object[] {p1}, context)__	};convenient,method,to,execute,with,a,single,int,parameter,and,context,param,p1,single,int,parameter,param,context,the,contextual,information,for,object,creation;public,list,t,execute,int,p1,map,context,throws,data,access,exception,return,execute,new,object,p1,context
SqlQuery -> public List<T> execute(int p1, Map context) throws DataAccessException;1356735495;Convenient method to execute with a single int parameter and context._@param p1 single int parameter_@param context the contextual information for object creation;public List<T> execute(int p1, Map context) throws DataAccessException {_		return execute(new Object[] {p1}, context)__	};convenient,method,to,execute,with,a,single,int,parameter,and,context,param,p1,single,int,parameter,param,context,the,contextual,information,for,object,creation;public,list,t,execute,int,p1,map,context,throws,data,access,exception,return,execute,new,object,p1,context
SqlQuery -> @Nullable 	public T findObject(long p1) throws DataAccessException;1496837955;Convenient method to find a single object given a single long parameter.;@Nullable_	public T findObject(long p1) throws DataAccessException {_		return findObject(p1, null)__	};convenient,method,to,find,a,single,object,given,a,single,long,parameter;nullable,public,t,find,object,long,p1,throws,data,access,exception,return,find,object,p1,null
SqlQuery -> @Nullable 	public T findObject(long p1) throws DataAccessException;1530174524;Convenient method to find a single object given a single long parameter.;@Nullable_	public T findObject(long p1) throws DataAccessException {_		return findObject(p1, null)__	};convenient,method,to,find,a,single,object,given,a,single,long,parameter;nullable,public,t,find,object,long,p1,throws,data,access,exception,return,find,object,p1,null
SqlQuery -> @Nullable 	public T findObject(long p1) throws DataAccessException;1530174524;Convenient method to find a single object given a single long parameter.;@Nullable_	public T findObject(long p1) throws DataAccessException {_		return findObject(p1, null)__	};convenient,method,to,find,a,single,object,given,a,single,long,parameter;nullable,public,t,find,object,long,p1,throws,data,access,exception,return,find,object,p1,null
SqlQuery -> @Nullable 	public T findObject(long p1) throws DataAccessException;1530174524;Convenient method to find a single object given a single long parameter.;@Nullable_	public T findObject(long p1) throws DataAccessException {_		return findObject(p1, null)__	};convenient,method,to,find,a,single,object,given,a,single,long,parameter;nullable,public,t,find,object,long,p1,throws,data,access,exception,return,find,object,p1,null
SqlQuery -> public List<T> execute(Object[] params, Map<?, ?> context) throws DataAccessException;1385412762;Central execution method. All un-named parameter execution goes through this method._@param params parameters, similar to JDO query parameters._Primitive parameters must be represented by their Object wrapper type._The ordering of parameters is significant._@param context contextual information passed to the {@code mapRow}_callback method. The JDBC operation itself doesn't rely on this parameter,_but it can be useful for creating the objects of the result list._@return a List of objects, one per row of the ResultSet. Normally all these_will be of the same class, although it is possible to use different types.;public List<T> execute(Object[] params, Map<?, ?> context) throws DataAccessException {_		validateParameters(params)__		RowMapper<T> rowMapper = newRowMapper(params, context)__		return getJdbcTemplate().query(newPreparedStatementCreator(params), rowMapper)__	};central,execution,method,all,un,named,parameter,execution,goes,through,this,method,param,params,parameters,similar,to,jdo,query,parameters,primitive,parameters,must,be,represented,by,their,object,wrapper,type,the,ordering,of,parameters,is,significant,param,context,contextual,information,passed,to,the,code,map,row,callback,method,the,jdbc,operation,itself,doesn,t,rely,on,this,parameter,but,it,can,be,useful,for,creating,the,objects,of,the,result,list,return,a,list,of,objects,one,per,row,of,the,result,set,normally,all,these,will,be,of,the,same,class,although,it,is,possible,to,use,different,types;public,list,t,execute,object,params,map,context,throws,data,access,exception,validate,parameters,params,row,mapper,t,row,mapper,new,row,mapper,params,context,return,get,jdbc,template,query,new,prepared,statement,creator,params,row,mapper
SqlQuery -> public List<T> execute(Object[] params, Map<?, ?> context) throws DataAccessException;1413848647;Central execution method. All un-named parameter execution goes through this method._@param params parameters, similar to JDO query parameters._Primitive parameters must be represented by their Object wrapper type._The ordering of parameters is significant._@param context contextual information passed to the {@code mapRow}_callback method. The JDBC operation itself doesn't rely on this parameter,_but it can be useful for creating the objects of the result list._@return a List of objects, one per row of the ResultSet. Normally all these_will be of the same class, although it is possible to use different types.;public List<T> execute(Object[] params, Map<?, ?> context) throws DataAccessException {_		validateParameters(params)__		RowMapper<T> rowMapper = newRowMapper(params, context)__		return getJdbcTemplate().query(newPreparedStatementCreator(params), rowMapper)__	};central,execution,method,all,un,named,parameter,execution,goes,through,this,method,param,params,parameters,similar,to,jdo,query,parameters,primitive,parameters,must,be,represented,by,their,object,wrapper,type,the,ordering,of,parameters,is,significant,param,context,contextual,information,passed,to,the,code,map,row,callback,method,the,jdbc,operation,itself,doesn,t,rely,on,this,parameter,but,it,can,be,useful,for,creating,the,objects,of,the,result,list,return,a,list,of,objects,one,per,row,of,the,result,set,normally,all,these,will,be,of,the,same,class,although,it,is,possible,to,use,different,types;public,list,t,execute,object,params,map,context,throws,data,access,exception,validate,parameters,params,row,mapper,t,row,mapper,new,row,mapper,params,context,return,get,jdbc,template,query,new,prepared,statement,creator,params,row,mapper
SqlQuery -> public List<T> execute(Object[] params, Map<?, ?> context) throws DataAccessException;1495868221;Central execution method. All un-named parameter execution goes through this method._@param params parameters, similar to JDO query parameters._Primitive parameters must be represented by their Object wrapper type._The ordering of parameters is significant._@param context contextual information passed to the {@code mapRow}_callback method. The JDBC operation itself doesn't rely on this parameter,_but it can be useful for creating the objects of the result list._@return a List of objects, one per row of the ResultSet. Normally all these_will be of the same class, although it is possible to use different types.;public List<T> execute(Object[] params, Map<?, ?> context) throws DataAccessException {_		validateParameters(params)__		RowMapper<T> rowMapper = newRowMapper(params, context)__		return getJdbcTemplate().query(newPreparedStatementCreator(params), rowMapper)__	};central,execution,method,all,un,named,parameter,execution,goes,through,this,method,param,params,parameters,similar,to,jdo,query,parameters,primitive,parameters,must,be,represented,by,their,object,wrapper,type,the,ordering,of,parameters,is,significant,param,context,contextual,information,passed,to,the,code,map,row,callback,method,the,jdbc,operation,itself,doesn,t,rely,on,this,parameter,but,it,can,be,useful,for,creating,the,objects,of,the,result,list,return,a,list,of,objects,one,per,row,of,the,result,set,normally,all,these,will,be,of,the,same,class,although,it,is,possible,to,use,different,types;public,list,t,execute,object,params,map,context,throws,data,access,exception,validate,parameters,params,row,mapper,t,row,mapper,new,row,mapper,params,context,return,get,jdbc,template,query,new,prepared,statement,creator,params,row,mapper
SqlQuery -> protected abstract RowMapper<T> newRowMapper(Object[] parameters, Map<?, ?> context)_;1385412762;Subclasses must implement this method to extract an object per row, to be_returned by the <cod>execute</code> method as an aggregated {@link List}._@param parameters the parameters to the {@code execute()} method,_in case subclass is interested_ may be {@code null} if there_were no parameters._@param context contextual information passed to the {@code mapRow}_callback method. The JDBC operation itself doesn't rely on this parameter,_but it can be useful for creating the objects of the result list._@see #execute;protected abstract RowMapper<T> newRowMapper(Object[] parameters, Map<?, ?> context)_;subclasses,must,implement,this,method,to,extract,an,object,per,row,to,be,returned,by,the,cod,execute,code,method,as,an,aggregated,link,list,param,parameters,the,parameters,to,the,code,execute,method,in,case,subclass,is,interested,may,be,code,null,if,there,were,no,parameters,param,context,contextual,information,passed,to,the,code,map,row,callback,method,the,jdbc,operation,itself,doesn,t,rely,on,this,parameter,but,it,can,be,useful,for,creating,the,objects,of,the,result,list,see,execute;protected,abstract,row,mapper,t,new,row,mapper,object,parameters,map,context
SqlQuery -> protected abstract RowMapper<T> newRowMapper(Object[] parameters, Map<?, ?> context)_;1413848647;Subclasses must implement this method to extract an object per row, to be_returned by the <cod>execute</code> method as an aggregated {@link List}._@param parameters the parameters to the {@code execute()} method,_in case subclass is interested_ may be {@code null} if there_were no parameters._@param context contextual information passed to the {@code mapRow}_callback method. The JDBC operation itself doesn't rely on this parameter,_but it can be useful for creating the objects of the result list._@see #execute;protected abstract RowMapper<T> newRowMapper(Object[] parameters, Map<?, ?> context)_;subclasses,must,implement,this,method,to,extract,an,object,per,row,to,be,returned,by,the,cod,execute,code,method,as,an,aggregated,link,list,param,parameters,the,parameters,to,the,code,execute,method,in,case,subclass,is,interested,may,be,code,null,if,there,were,no,parameters,param,context,contextual,information,passed,to,the,code,map,row,callback,method,the,jdbc,operation,itself,doesn,t,rely,on,this,parameter,but,it,can,be,useful,for,creating,the,objects,of,the,result,list,see,execute;protected,abstract,row,mapper,t,new,row,mapper,object,parameters,map,context
SqlQuery -> @Nullable 	public T findObject(int p1, int p2) throws DataAccessException;1496837955;Convenient method to find a single object given two int parameters.;@Nullable_	public T findObject(int p1, int p2) throws DataAccessException {_		return findObject(p1, p2, null)__	};convenient,method,to,find,a,single,object,given,two,int,parameters;nullable,public,t,find,object,int,p1,int,p2,throws,data,access,exception,return,find,object,p1,p2,null
SqlQuery -> @Nullable 	public T findObject(int p1, int p2) throws DataAccessException;1530174524;Convenient method to find a single object given two int parameters.;@Nullable_	public T findObject(int p1, int p2) throws DataAccessException {_		return findObject(p1, p2, null)__	};convenient,method,to,find,a,single,object,given,two,int,parameters;nullable,public,t,find,object,int,p1,int,p2,throws,data,access,exception,return,find,object,p1,p2,null
SqlQuery -> @Nullable 	public T findObject(int p1, int p2) throws DataAccessException;1530174524;Convenient method to find a single object given two int parameters.;@Nullable_	public T findObject(int p1, int p2) throws DataAccessException {_		return findObject(p1, p2, null)__	};convenient,method,to,find,a,single,object,given,two,int,parameters;nullable,public,t,find,object,int,p1,int,p2,throws,data,access,exception,return,find,object,p1,p2,null
SqlQuery -> @Nullable 	public T findObject(int p1, int p2) throws DataAccessException;1530174524;Convenient method to find a single object given two int parameters.;@Nullable_	public T findObject(int p1, int p2) throws DataAccessException {_		return findObject(p1, p2, null)__	};convenient,method,to,find,a,single,object,given,two,int,parameters;nullable,public,t,find,object,int,p1,int,p2,throws,data,access,exception,return,find,object,p1,p2,null
SqlQuery -> public SqlQuery();1328020251;Constructor to allow use as a JavaBean._<p>The <code>DataSource</code> and SQL must be supplied before_compilation and use.;public SqlQuery() {_	};constructor,to,allow,use,as,a,java,bean,p,the,code,data,source,code,and,sql,must,be,supplied,before,compilation,and,use;public,sql,query
SqlQuery -> public SqlQuery();1356735495;Constructor to allow use as a JavaBean._<p>The {@code DataSource} and SQL must be supplied before_compilation and use.;public SqlQuery() {_	};constructor,to,allow,use,as,a,java,bean,p,the,code,data,source,and,sql,must,be,supplied,before,compilation,and,use;public,sql,query
SqlQuery -> public SqlQuery();1385412762;Constructor to allow use as a JavaBean._<p>The {@code DataSource} and SQL must be supplied before_compilation and use.;public SqlQuery() {_	};constructor,to,allow,use,as,a,java,bean,p,the,code,data,source,and,sql,must,be,supplied,before,compilation,and,use;public,sql,query
SqlQuery -> public SqlQuery();1413848647;Constructor to allow use as a JavaBean._<p>The {@code DataSource} and SQL must be supplied before_compilation and use.;public SqlQuery() {_	};constructor,to,allow,use,as,a,java,bean,p,the,code,data,source,and,sql,must,be,supplied,before,compilation,and,use;public,sql,query
SqlQuery -> public SqlQuery();1495868221;Constructor to allow use as a JavaBean._<p>The {@code DataSource} and SQL must be supplied before_compilation and use.;public SqlQuery() {_	};constructor,to,allow,use,as,a,java,bean,p,the,code,data,source,and,sql,must,be,supplied,before,compilation,and,use;public,sql,query
SqlQuery -> public SqlQuery();1496259743;Constructor to allow use as a JavaBean._<p>The {@code DataSource} and SQL must be supplied before_compilation and use.;public SqlQuery() {_	};constructor,to,allow,use,as,a,java,bean,p,the,code,data,source,and,sql,must,be,supplied,before,compilation,and,use;public,sql,query
SqlQuery -> public SqlQuery();1496837955;Constructor to allow use as a JavaBean._<p>The {@code DataSource} and SQL must be supplied before_compilation and use.;public SqlQuery() {_	};constructor,to,allow,use,as,a,java,bean,p,the,code,data,source,and,sql,must,be,supplied,before,compilation,and,use;public,sql,query
SqlQuery -> public SqlQuery();1530174524;Constructor to allow use as a JavaBean._<p>The {@code DataSource} and SQL must be supplied before_compilation and use.;public SqlQuery() {_	};constructor,to,allow,use,as,a,java,bean,p,the,code,data,source,and,sql,must,be,supplied,before,compilation,and,use;public,sql,query
SqlQuery -> public SqlQuery();1530174524;Constructor to allow use as a JavaBean._<p>The {@code DataSource} and SQL must be supplied before_compilation and use.;public SqlQuery() {_	};constructor,to,allow,use,as,a,java,bean,p,the,code,data,source,and,sql,must,be,supplied,before,compilation,and,use;public,sql,query
SqlQuery -> public SqlQuery();1530174524;Constructor to allow use as a JavaBean._<p>The {@code DataSource} and SQL must be supplied before_compilation and use.;public SqlQuery() {_	};constructor,to,allow,use,as,a,java,bean,p,the,code,data,source,and,sql,must,be,supplied,before,compilation,and,use;public,sql,query
SqlQuery -> public List<T> execute(Object... params) throws DataAccessException;1328020251;Convenient method to execute without context._@param params parameters for the query. Primitive parameters must_be represented by their Object wrapper type. The ordering of parameters is_significant.;public List<T> execute(Object... params) throws DataAccessException {_		return execute(params, null)__	};convenient,method,to,execute,without,context,param,params,parameters,for,the,query,primitive,parameters,must,be,represented,by,their,object,wrapper,type,the,ordering,of,parameters,is,significant;public,list,t,execute,object,params,throws,data,access,exception,return,execute,params,null
SqlQuery -> public List<T> execute(Object... params) throws DataAccessException;1356735495;Convenient method to execute without context._@param params parameters for the query. Primitive parameters must_be represented by their Object wrapper type. The ordering of parameters is_significant.;public List<T> execute(Object... params) throws DataAccessException {_		return execute(params, null)__	};convenient,method,to,execute,without,context,param,params,parameters,for,the,query,primitive,parameters,must,be,represented,by,their,object,wrapper,type,the,ordering,of,parameters,is,significant;public,list,t,execute,object,params,throws,data,access,exception,return,execute,params,null
SqlQuery -> public List<T> execute(Object... params) throws DataAccessException;1385412762;Convenient method to execute without context._@param params parameters for the query. Primitive parameters must_be represented by their Object wrapper type. The ordering of parameters is_significant.;public List<T> execute(Object... params) throws DataAccessException {_		return execute(params, null)__	};convenient,method,to,execute,without,context,param,params,parameters,for,the,query,primitive,parameters,must,be,represented,by,their,object,wrapper,type,the,ordering,of,parameters,is,significant;public,list,t,execute,object,params,throws,data,access,exception,return,execute,params,null
SqlQuery -> public List<T> execute(Object... params) throws DataAccessException;1413848647;Convenient method to execute without context._@param params parameters for the query. Primitive parameters must_be represented by their Object wrapper type. The ordering of parameters is_significant.;public List<T> execute(Object... params) throws DataAccessException {_		return execute(params, null)__	};convenient,method,to,execute,without,context,param,params,parameters,for,the,query,primitive,parameters,must,be,represented,by,their,object,wrapper,type,the,ordering,of,parameters,is,significant;public,list,t,execute,object,params,throws,data,access,exception,return,execute,params,null
SqlQuery -> public List<T> execute(Object... params) throws DataAccessException;1495868221;Convenient method to execute without context._@param params parameters for the query. Primitive parameters must_be represented by their Object wrapper type. The ordering of parameters is_significant.;public List<T> execute(Object... params) throws DataAccessException {_		return execute(params, null)__	};convenient,method,to,execute,without,context,param,params,parameters,for,the,query,primitive,parameters,must,be,represented,by,their,object,wrapper,type,the,ordering,of,parameters,is,significant;public,list,t,execute,object,params,throws,data,access,exception,return,execute,params,null
SqlQuery -> public List<T> execute(Object... params) throws DataAccessException;1496259743;Convenient method to execute without context._@param params parameters for the query. Primitive parameters must_be represented by their Object wrapper type. The ordering of parameters is_significant.;public List<T> execute(Object... params) throws DataAccessException {_		return execute(params, null)__	};convenient,method,to,execute,without,context,param,params,parameters,for,the,query,primitive,parameters,must,be,represented,by,their,object,wrapper,type,the,ordering,of,parameters,is,significant;public,list,t,execute,object,params,throws,data,access,exception,return,execute,params,null
SqlQuery -> public List<T> execute(Object... params) throws DataAccessException;1496837955;Convenient method to execute without context._@param params parameters for the query. Primitive parameters must_be represented by their Object wrapper type. The ordering of parameters is_significant.;public List<T> execute(Object... params) throws DataAccessException {_		return execute(params, null)__	};convenient,method,to,execute,without,context,param,params,parameters,for,the,query,primitive,parameters,must,be,represented,by,their,object,wrapper,type,the,ordering,of,parameters,is,significant;public,list,t,execute,object,params,throws,data,access,exception,return,execute,params,null
SqlQuery -> public List<T> execute(Object... params) throws DataAccessException;1530174524;Convenient method to execute without context._@param params parameters for the query. Primitive parameters must_be represented by their Object wrapper type. The ordering of parameters is_significant.;public List<T> execute(Object... params) throws DataAccessException {_		return execute(params, null)__	};convenient,method,to,execute,without,context,param,params,parameters,for,the,query,primitive,parameters,must,be,represented,by,their,object,wrapper,type,the,ordering,of,parameters,is,significant;public,list,t,execute,object,params,throws,data,access,exception,return,execute,params,null
SqlQuery -> public List<T> execute(Object... params) throws DataAccessException;1530174524;Convenient method to execute without context._@param params parameters for the query. Primitive parameters must_be represented by their Object wrapper type. The ordering of parameters is_significant.;public List<T> execute(Object... params) throws DataAccessException {_		return execute(params, null)__	};convenient,method,to,execute,without,context,param,params,parameters,for,the,query,primitive,parameters,must,be,represented,by,their,object,wrapper,type,the,ordering,of,parameters,is,significant;public,list,t,execute,object,params,throws,data,access,exception,return,execute,params,null
SqlQuery -> public List<T> execute(Object... params) throws DataAccessException;1530174524;Convenient method to execute without context._@param params parameters for the query. Primitive parameters must_be represented by their Object wrapper type. The ordering of parameters is_significant.;public List<T> execute(Object... params) throws DataAccessException {_		return execute(params, null)__	};convenient,method,to,execute,without,context,param,params,parameters,for,the,query,primitive,parameters,must,be,represented,by,their,object,wrapper,type,the,ordering,of,parameters,is,significant;public,list,t,execute,object,params,throws,data,access,exception,return,execute,params,null
SqlQuery -> @Nullable 	public T findObject(int p1, @Nullable Map<?, ?> context) throws DataAccessException;1496837955;Convenient method to find a single object given a single int parameter_and a context.;@Nullable_	public T findObject(int p1, @Nullable Map<?, ?> context) throws DataAccessException {_		return findObject(new Object[] {p1}, context)__	};convenient,method,to,find,a,single,object,given,a,single,int,parameter,and,a,context;nullable,public,t,find,object,int,p1,nullable,map,context,throws,data,access,exception,return,find,object,new,object,p1,context
SqlQuery -> @Nullable 	public T findObject(int p1, @Nullable Map<?, ?> context) throws DataAccessException;1530174524;Convenient method to find a single object given a single int parameter_and a context.;@Nullable_	public T findObject(int p1, @Nullable Map<?, ?> context) throws DataAccessException {_		return findObject(new Object[] {p1}, context)__	};convenient,method,to,find,a,single,object,given,a,single,int,parameter,and,a,context;nullable,public,t,find,object,int,p1,nullable,map,context,throws,data,access,exception,return,find,object,new,object,p1,context
SqlQuery -> @Nullable 	public T findObject(int p1, @Nullable Map<?, ?> context) throws DataAccessException;1530174524;Convenient method to find a single object given a single int parameter_and a context.;@Nullable_	public T findObject(int p1, @Nullable Map<?, ?> context) throws DataAccessException {_		return findObject(new Object[] {p1}, context)__	};convenient,method,to,find,a,single,object,given,a,single,int,parameter,and,a,context;nullable,public,t,find,object,int,p1,nullable,map,context,throws,data,access,exception,return,find,object,new,object,p1,context
SqlQuery -> @Nullable 	public T findObject(int p1, @Nullable Map<?, ?> context) throws DataAccessException;1530174524;Convenient method to find a single object given a single int parameter_and a context.;@Nullable_	public T findObject(int p1, @Nullable Map<?, ?> context) throws DataAccessException {_		return findObject(new Object[] {p1}, context)__	};convenient,method,to,find,a,single,object,given,a,single,int,parameter,and,a,context;nullable,public,t,find,object,int,p1,nullable,map,context,throws,data,access,exception,return,find,object,new,object,p1,context
SqlQuery -> public List<T> execute(String p1, Map context) throws DataAccessException;1328020251;Convenient method to execute with a single String parameter and context._@param p1 single String parameter_@param context the contextual information for object creation;public List<T> execute(String p1, Map context) throws DataAccessException {_		return execute(new Object[] {p1}, context)__	};convenient,method,to,execute,with,a,single,string,parameter,and,context,param,p1,single,string,parameter,param,context,the,contextual,information,for,object,creation;public,list,t,execute,string,p1,map,context,throws,data,access,exception,return,execute,new,object,p1,context
SqlQuery -> public List<T> execute(String p1, Map context) throws DataAccessException;1356735495;Convenient method to execute with a single String parameter and context._@param p1 single String parameter_@param context the contextual information for object creation;public List<T> execute(String p1, Map context) throws DataAccessException {_		return execute(new Object[] {p1}, context)__	};convenient,method,to,execute,with,a,single,string,parameter,and,context,param,p1,single,string,parameter,param,context,the,contextual,information,for,object,creation;public,list,t,execute,string,p1,map,context,throws,data,access,exception,return,execute,new,object,p1,context
SqlQuery -> public List<T> executeByNamedParam(Map<String, ?> paramMap, Map context) throws DataAccessException;1328020251;Central execution method. All named parameter execution goes through this method._@param paramMap parameters associated with the name specified while declaring_the SqlParameters. Primitive parameters must be represented by their Object wrapper_type. The ordering of parameters is not significant since they are supplied in a_SqlParameterMap which is an implementation of the Map interface._@param context contextual information passed to the <code>mapRow</code>_callback method. The JDBC operation itself doesn't rely on this parameter,_but it can be useful for creating the objects of the result list._@return a List of objects, one per row of the ResultSet. Normally all these_will be of the same class, although it is possible to use different types.;public List<T> executeByNamedParam(Map<String, ?> paramMap, Map context) throws DataAccessException {_		validateNamedParameters(paramMap)__		ParsedSql parsedSql = getParsedSql()__		MapSqlParameterSource paramSource = new MapSqlParameterSource(paramMap)__		String sqlToUse = NamedParameterUtils.substituteNamedParameters(parsedSql, paramSource)__		Object[] params = NamedParameterUtils.buildValueArray(parsedSql, paramSource, getDeclaredParameters())__		RowMapper<T> rowMapper = newRowMapper(params, context)__ 		return getJdbcTemplate().query(newPreparedStatementCreator(sqlToUse, params), rowMapper)__	};central,execution,method,all,named,parameter,execution,goes,through,this,method,param,param,map,parameters,associated,with,the,name,specified,while,declaring,the,sql,parameters,primitive,parameters,must,be,represented,by,their,object,wrapper,type,the,ordering,of,parameters,is,not,significant,since,they,are,supplied,in,a,sql,parameter,map,which,is,an,implementation,of,the,map,interface,param,context,contextual,information,passed,to,the,code,map,row,code,callback,method,the,jdbc,operation,itself,doesn,t,rely,on,this,parameter,but,it,can,be,useful,for,creating,the,objects,of,the,result,list,return,a,list,of,objects,one,per,row,of,the,result,set,normally,all,these,will,be,of,the,same,class,although,it,is,possible,to,use,different,types;public,list,t,execute,by,named,param,map,string,param,map,map,context,throws,data,access,exception,validate,named,parameters,param,map,parsed,sql,parsed,sql,get,parsed,sql,map,sql,parameter,source,param,source,new,map,sql,parameter,source,param,map,string,sql,to,use,named,parameter,utils,substitute,named,parameters,parsed,sql,param,source,object,params,named,parameter,utils,build,value,array,parsed,sql,param,source,get,declared,parameters,row,mapper,t,row,mapper,new,row,mapper,params,context,return,get,jdbc,template,query,new,prepared,statement,creator,sql,to,use,params,row,mapper
SqlQuery -> public List<T> executeByNamedParam(Map<String, ?> paramMap, Map context) throws DataAccessException;1356735495;Central execution method. All named parameter execution goes through this method._@param paramMap parameters associated with the name specified while declaring_the SqlParameters. Primitive parameters must be represented by their Object wrapper_type. The ordering of parameters is not significant since they are supplied in a_SqlParameterMap which is an implementation of the Map interface._@param context contextual information passed to the {@code mapRow}_callback method. The JDBC operation itself doesn't rely on this parameter,_but it can be useful for creating the objects of the result list._@return a List of objects, one per row of the ResultSet. Normally all these_will be of the same class, although it is possible to use different types.;public List<T> executeByNamedParam(Map<String, ?> paramMap, Map context) throws DataAccessException {_		validateNamedParameters(paramMap)__		ParsedSql parsedSql = getParsedSql()__		MapSqlParameterSource paramSource = new MapSqlParameterSource(paramMap)__		String sqlToUse = NamedParameterUtils.substituteNamedParameters(parsedSql, paramSource)__		Object[] params = NamedParameterUtils.buildValueArray(parsedSql, paramSource, getDeclaredParameters())__		RowMapper<T> rowMapper = newRowMapper(params, context)__ 		return getJdbcTemplate().query(newPreparedStatementCreator(sqlToUse, params), rowMapper)__	};central,execution,method,all,named,parameter,execution,goes,through,this,method,param,param,map,parameters,associated,with,the,name,specified,while,declaring,the,sql,parameters,primitive,parameters,must,be,represented,by,their,object,wrapper,type,the,ordering,of,parameters,is,not,significant,since,they,are,supplied,in,a,sql,parameter,map,which,is,an,implementation,of,the,map,interface,param,context,contextual,information,passed,to,the,code,map,row,callback,method,the,jdbc,operation,itself,doesn,t,rely,on,this,parameter,but,it,can,be,useful,for,creating,the,objects,of,the,result,list,return,a,list,of,objects,one,per,row,of,the,result,set,normally,all,these,will,be,of,the,same,class,although,it,is,possible,to,use,different,types;public,list,t,execute,by,named,param,map,string,param,map,map,context,throws,data,access,exception,validate,named,parameters,param,map,parsed,sql,parsed,sql,get,parsed,sql,map,sql,parameter,source,param,source,new,map,sql,parameter,source,param,map,string,sql,to,use,named,parameter,utils,substitute,named,parameters,parsed,sql,param,source,object,params,named,parameter,utils,build,value,array,parsed,sql,param,source,get,declared,parameters,row,mapper,t,row,mapper,new,row,mapper,params,context,return,get,jdbc,template,query,new,prepared,statement,creator,sql,to,use,params,row,mapper
SqlQuery -> public T findObjectByNamedParam(Map<String, ?> paramMap, Map<?, ?> context) throws DataAccessException;1385412762;Generic object finder method for named parameters._@param paramMap Map of parameter name to parameter object,_matching named parameters specified in the SQL statement._Ordering is not significant._@param context contextual information passed to the {@code mapRow}_callback method. The JDBC operation itself doesn't rely on this parameter,_but it can be useful for creating the objects of the result list._@return a List of objects, one per row of the ResultSet. Normally all these_will be of the same class, although it is possible to use different types.;public T findObjectByNamedParam(Map<String, ?> paramMap, Map<?, ?> context) throws DataAccessException {_		List<T> results = executeByNamedParam(paramMap, context)__		return DataAccessUtils.singleResult(results)__	};generic,object,finder,method,for,named,parameters,param,param,map,map,of,parameter,name,to,parameter,object,matching,named,parameters,specified,in,the,sql,statement,ordering,is,not,significant,param,context,contextual,information,passed,to,the,code,map,row,callback,method,the,jdbc,operation,itself,doesn,t,rely,on,this,parameter,but,it,can,be,useful,for,creating,the,objects,of,the,result,list,return,a,list,of,objects,one,per,row,of,the,result,set,normally,all,these,will,be,of,the,same,class,although,it,is,possible,to,use,different,types;public,t,find,object,by,named,param,map,string,param,map,map,context,throws,data,access,exception,list,t,results,execute,by,named,param,param,map,context,return,data,access,utils,single,result,results
SqlQuery -> public T findObjectByNamedParam(Map<String, ?> paramMap, Map<?, ?> context) throws DataAccessException;1413848647;Generic object finder method for named parameters._@param paramMap Map of parameter name to parameter object,_matching named parameters specified in the SQL statement._Ordering is not significant._@param context contextual information passed to the {@code mapRow}_callback method. The JDBC operation itself doesn't rely on this parameter,_but it can be useful for creating the objects of the result list._@return a List of objects, one per row of the ResultSet. Normally all these_will be of the same class, although it is possible to use different types.;public T findObjectByNamedParam(Map<String, ?> paramMap, Map<?, ?> context) throws DataAccessException {_		List<T> results = executeByNamedParam(paramMap, context)__		return DataAccessUtils.singleResult(results)__	};generic,object,finder,method,for,named,parameters,param,param,map,map,of,parameter,name,to,parameter,object,matching,named,parameters,specified,in,the,sql,statement,ordering,is,not,significant,param,context,contextual,information,passed,to,the,code,map,row,callback,method,the,jdbc,operation,itself,doesn,t,rely,on,this,parameter,but,it,can,be,useful,for,creating,the,objects,of,the,result,list,return,a,list,of,objects,one,per,row,of,the,result,set,normally,all,these,will,be,of,the,same,class,although,it,is,possible,to,use,different,types;public,t,find,object,by,named,param,map,string,param,map,map,context,throws,data,access,exception,list,t,results,execute,by,named,param,param,map,context,return,data,access,utils,single,result,results
SqlQuery -> public T findObjectByNamedParam(Map<String, ?> paramMap, Map<?, ?> context) throws DataAccessException;1495868221;Generic object finder method for named parameters._@param paramMap Map of parameter name to parameter object,_matching named parameters specified in the SQL statement._Ordering is not significant._@param context contextual information passed to the {@code mapRow}_callback method. The JDBC operation itself doesn't rely on this parameter,_but it can be useful for creating the objects of the result list._@return a List of objects, one per row of the ResultSet. Normally all these_will be of the same class, although it is possible to use different types.;public T findObjectByNamedParam(Map<String, ?> paramMap, Map<?, ?> context) throws DataAccessException {_		List<T> results = executeByNamedParam(paramMap, context)__		return DataAccessUtils.singleResult(results)__	};generic,object,finder,method,for,named,parameters,param,param,map,map,of,parameter,name,to,parameter,object,matching,named,parameters,specified,in,the,sql,statement,ordering,is,not,significant,param,context,contextual,information,passed,to,the,code,map,row,callback,method,the,jdbc,operation,itself,doesn,t,rely,on,this,parameter,but,it,can,be,useful,for,creating,the,objects,of,the,result,list,return,a,list,of,objects,one,per,row,of,the,result,set,normally,all,these,will,be,of,the,same,class,although,it,is,possible,to,use,different,types;public,t,find,object,by,named,param,map,string,param,map,map,context,throws,data,access,exception,list,t,results,execute,by,named,param,param,map,context,return,data,access,utils,single,result,results
SqlQuery -> protected abstract RowMapper<T> newRowMapper(@Nullable Object[] parameters, Map<?, ?> context)_;1495868221;Subclasses must implement this method to extract an object per row, to be_returned by the <cod>execute</code> method as an aggregated {@link List}._@param parameters the parameters to the {@code execute()} method,_in case subclass is interested_ may be {@code null} if there_were no parameters._@param context contextual information passed to the {@code mapRow}_callback method. The JDBC operation itself doesn't rely on this parameter,_but it can be useful for creating the objects of the result list._@see #execute;protected abstract RowMapper<T> newRowMapper(@Nullable Object[] parameters, Map<?, ?> context)_;subclasses,must,implement,this,method,to,extract,an,object,per,row,to,be,returned,by,the,cod,execute,code,method,as,an,aggregated,link,list,param,parameters,the,parameters,to,the,code,execute,method,in,case,subclass,is,interested,may,be,code,null,if,there,were,no,parameters,param,context,contextual,information,passed,to,the,code,map,row,callback,method,the,jdbc,operation,itself,doesn,t,rely,on,this,parameter,but,it,can,be,useful,for,creating,the,objects,of,the,result,list,see,execute;protected,abstract,row,mapper,t,new,row,mapper,nullable,object,parameters,map,context
SqlQuery -> protected abstract RowMapper<T> newRowMapper(@Nullable Object[] parameters, Map<?, ?> context)_;1496259743;Subclasses must implement this method to extract an object per row, to be_returned by the <cod>execute</code> method as an aggregated {@link List}._@param parameters the parameters to the {@code execute()} method,_in case subclass is interested_ may be {@code null} if there_were no parameters._@param context contextual information passed to the {@code mapRow}_callback method. The JDBC operation itself doesn't rely on this parameter,_but it can be useful for creating the objects of the result list._@see #execute;protected abstract RowMapper<T> newRowMapper(@Nullable Object[] parameters, Map<?, ?> context)_;subclasses,must,implement,this,method,to,extract,an,object,per,row,to,be,returned,by,the,cod,execute,code,method,as,an,aggregated,link,list,param,parameters,the,parameters,to,the,code,execute,method,in,case,subclass,is,interested,may,be,code,null,if,there,were,no,parameters,param,context,contextual,information,passed,to,the,code,map,row,callback,method,the,jdbc,operation,itself,doesn,t,rely,on,this,parameter,but,it,can,be,useful,for,creating,the,objects,of,the,result,list,see,execute;protected,abstract,row,mapper,t,new,row,mapper,nullable,object,parameters,map,context
SqlQuery -> public List<T> execute(int p1, Map<?, ?> context) throws DataAccessException;1385412762;Convenient method to execute with a single int parameter and context._@param p1 single int parameter_@param context the contextual information for object creation;public List<T> execute(int p1, Map<?, ?> context) throws DataAccessException {_		return execute(new Object[] {p1}, context)__	};convenient,method,to,execute,with,a,single,int,parameter,and,context,param,p1,single,int,parameter,param,context,the,contextual,information,for,object,creation;public,list,t,execute,int,p1,map,context,throws,data,access,exception,return,execute,new,object,p1,context
SqlQuery -> public List<T> execute(int p1, Map<?, ?> context) throws DataAccessException;1413848647;Convenient method to execute with a single int parameter and context._@param p1 single int parameter_@param context the contextual information for object creation;public List<T> execute(int p1, Map<?, ?> context) throws DataAccessException {_		return execute(new Object[] {p1}, context)__	};convenient,method,to,execute,with,a,single,int,parameter,and,context,param,p1,single,int,parameter,param,context,the,contextual,information,for,object,creation;public,list,t,execute,int,p1,map,context,throws,data,access,exception,return,execute,new,object,p1,context
SqlQuery -> public List<T> execute(int p1, Map<?, ?> context) throws DataAccessException;1495868221;Convenient method to execute with a single int parameter and context._@param p1 single int parameter_@param context the contextual information for object creation;public List<T> execute(int p1, Map<?, ?> context) throws DataAccessException {_		return execute(new Object[] {p1}, context)__	};convenient,method,to,execute,with,a,single,int,parameter,and,context,param,p1,single,int,parameter,param,context,the,contextual,information,for,object,creation;public,list,t,execute,int,p1,map,context,throws,data,access,exception,return,execute,new,object,p1,context
SqlQuery -> public int getRowsExpected();1328020251;Get the number of rows expected.;public int getRowsExpected() {_		return this.rowsExpected__	};get,the,number,of,rows,expected;public,int,get,rows,expected,return,this,rows,expected
SqlQuery -> public int getRowsExpected();1356735495;Get the number of rows expected.;public int getRowsExpected() {_		return this.rowsExpected__	};get,the,number,of,rows,expected;public,int,get,rows,expected,return,this,rows,expected
SqlQuery -> public int getRowsExpected();1385412762;Get the number of rows expected.;public int getRowsExpected() {_		return this.rowsExpected__	};get,the,number,of,rows,expected;public,int,get,rows,expected,return,this,rows,expected
SqlQuery -> public int getRowsExpected();1413848647;Get the number of rows expected.;public int getRowsExpected() {_		return this.rowsExpected__	};get,the,number,of,rows,expected;public,int,get,rows,expected,return,this,rows,expected
SqlQuery -> public int getRowsExpected();1495868221;Get the number of rows expected.;public int getRowsExpected() {_		return this.rowsExpected__	};get,the,number,of,rows,expected;public,int,get,rows,expected,return,this,rows,expected
SqlQuery -> public int getRowsExpected();1496259743;Get the number of rows expected.;public int getRowsExpected() {_		return this.rowsExpected__	};get,the,number,of,rows,expected;public,int,get,rows,expected,return,this,rows,expected
SqlQuery -> public int getRowsExpected();1496837955;Get the number of rows expected.;public int getRowsExpected() {_		return this.rowsExpected__	};get,the,number,of,rows,expected;public,int,get,rows,expected,return,this,rows,expected
SqlQuery -> public int getRowsExpected();1530174524;Get the number of rows expected.;public int getRowsExpected() {_		return this.rowsExpected__	};get,the,number,of,rows,expected;public,int,get,rows,expected,return,this,rows,expected
SqlQuery -> public int getRowsExpected();1530174524;Get the number of rows expected.;public int getRowsExpected() {_		return this.rowsExpected__	};get,the,number,of,rows,expected;public,int,get,rows,expected,return,this,rows,expected
SqlQuery -> public int getRowsExpected();1530174524;Get the number of rows expected.;public int getRowsExpected() {_		return this.rowsExpected__	};get,the,number,of,rows,expected;public,int,get,rows,expected,return,this,rows,expected
SqlQuery -> public SqlQuery(DataSource ds, String sql);1328020251;Convenient constructor with a <code>DataSource</code> and SQL string._@param ds the <code>DataSource</code> to use to get connections_@param sql the SQL to execute_ SQL can also be supplied at runtime_by overriding the {@link #getSql()} method.;public SqlQuery(DataSource ds, String sql) {_		setDataSource(ds)__		setSql(sql)__	};convenient,constructor,with,a,code,data,source,code,and,sql,string,param,ds,the,code,data,source,code,to,use,to,get,connections,param,sql,the,sql,to,execute,sql,can,also,be,supplied,at,runtime,by,overriding,the,link,get,sql,method;public,sql,query,data,source,ds,string,sql,set,data,source,ds,set,sql,sql
SqlQuery -> public SqlQuery(DataSource ds, String sql);1356735495;Convenient constructor with a {@code DataSource} and SQL string._@param ds the {@code DataSource} to use to get connections_@param sql the SQL to execute_ SQL can also be supplied at runtime_by overriding the {@link #getSql()} method.;public SqlQuery(DataSource ds, String sql) {_		setDataSource(ds)__		setSql(sql)__	};convenient,constructor,with,a,code,data,source,and,sql,string,param,ds,the,code,data,source,to,use,to,get,connections,param,sql,the,sql,to,execute,sql,can,also,be,supplied,at,runtime,by,overriding,the,link,get,sql,method;public,sql,query,data,source,ds,string,sql,set,data,source,ds,set,sql,sql
SqlQuery -> public SqlQuery(DataSource ds, String sql);1385412762;Convenient constructor with a {@code DataSource} and SQL string._@param ds the {@code DataSource} to use to get connections_@param sql the SQL to execute_ SQL can also be supplied at runtime_by overriding the {@link #getSql()} method.;public SqlQuery(DataSource ds, String sql) {_		setDataSource(ds)__		setSql(sql)__	};convenient,constructor,with,a,code,data,source,and,sql,string,param,ds,the,code,data,source,to,use,to,get,connections,param,sql,the,sql,to,execute,sql,can,also,be,supplied,at,runtime,by,overriding,the,link,get,sql,method;public,sql,query,data,source,ds,string,sql,set,data,source,ds,set,sql,sql
SqlQuery -> public SqlQuery(DataSource ds, String sql);1413848647;Convenient constructor with a {@code DataSource} and SQL string._@param ds the {@code DataSource} to use to get connections_@param sql the SQL to execute_ SQL can also be supplied at runtime_by overriding the {@link #getSql()} method.;public SqlQuery(DataSource ds, String sql) {_		setDataSource(ds)__		setSql(sql)__	};convenient,constructor,with,a,code,data,source,and,sql,string,param,ds,the,code,data,source,to,use,to,get,connections,param,sql,the,sql,to,execute,sql,can,also,be,supplied,at,runtime,by,overriding,the,link,get,sql,method;public,sql,query,data,source,ds,string,sql,set,data,source,ds,set,sql,sql
SqlQuery -> public SqlQuery(DataSource ds, String sql);1495868221;Convenient constructor with a {@code DataSource} and SQL string._@param ds the {@code DataSource} to use to get connections_@param sql the SQL to execute_ SQL can also be supplied at runtime_by overriding the {@link #getSql()} method.;public SqlQuery(DataSource ds, String sql) {_		setDataSource(ds)__		setSql(sql)__	};convenient,constructor,with,a,code,data,source,and,sql,string,param,ds,the,code,data,source,to,use,to,get,connections,param,sql,the,sql,to,execute,sql,can,also,be,supplied,at,runtime,by,overriding,the,link,get,sql,method;public,sql,query,data,source,ds,string,sql,set,data,source,ds,set,sql,sql
SqlQuery -> public SqlQuery(DataSource ds, String sql);1496259743;Convenient constructor with a {@code DataSource} and SQL string._@param ds the {@code DataSource} to use to get connections_@param sql the SQL to execute_ SQL can also be supplied at runtime_by overriding the {@link #getSql()} method.;public SqlQuery(DataSource ds, String sql) {_		setDataSource(ds)__		setSql(sql)__	};convenient,constructor,with,a,code,data,source,and,sql,string,param,ds,the,code,data,source,to,use,to,get,connections,param,sql,the,sql,to,execute,sql,can,also,be,supplied,at,runtime,by,overriding,the,link,get,sql,method;public,sql,query,data,source,ds,string,sql,set,data,source,ds,set,sql,sql
SqlQuery -> public SqlQuery(DataSource ds, String sql);1496837955;Convenient constructor with a {@code DataSource} and SQL string._@param ds the {@code DataSource} to use to get connections_@param sql the SQL to execute_ SQL can also be supplied at runtime_by overriding the {@link #getSql()} method.;public SqlQuery(DataSource ds, String sql) {_		setDataSource(ds)__		setSql(sql)__	};convenient,constructor,with,a,code,data,source,and,sql,string,param,ds,the,code,data,source,to,use,to,get,connections,param,sql,the,sql,to,execute,sql,can,also,be,supplied,at,runtime,by,overriding,the,link,get,sql,method;public,sql,query,data,source,ds,string,sql,set,data,source,ds,set,sql,sql
SqlQuery -> public SqlQuery(DataSource ds, String sql);1530174524;Convenient constructor with a {@code DataSource} and SQL string._@param ds the {@code DataSource} to use to get connections_@param sql the SQL to execute_ SQL can also be supplied at runtime_by overriding the {@link #getSql()} method.;public SqlQuery(DataSource ds, String sql) {_		setDataSource(ds)__		setSql(sql)__	};convenient,constructor,with,a,code,data,source,and,sql,string,param,ds,the,code,data,source,to,use,to,get,connections,param,sql,the,sql,to,execute,sql,can,also,be,supplied,at,runtime,by,overriding,the,link,get,sql,method;public,sql,query,data,source,ds,string,sql,set,data,source,ds,set,sql,sql
SqlQuery -> public SqlQuery(DataSource ds, String sql);1530174524;Convenient constructor with a {@code DataSource} and SQL string._@param ds the {@code DataSource} to use to get connections_@param sql the SQL to execute_ SQL can also be supplied at runtime_by overriding the {@link #getSql()} method.;public SqlQuery(DataSource ds, String sql) {_		setDataSource(ds)__		setSql(sql)__	};convenient,constructor,with,a,code,data,source,and,sql,string,param,ds,the,code,data,source,to,use,to,get,connections,param,sql,the,sql,to,execute,sql,can,also,be,supplied,at,runtime,by,overriding,the,link,get,sql,method;public,sql,query,data,source,ds,string,sql,set,data,source,ds,set,sql,sql
SqlQuery -> public SqlQuery(DataSource ds, String sql);1530174524;Convenient constructor with a {@code DataSource} and SQL string._@param ds the {@code DataSource} to use to get connections_@param sql the SQL to execute_ SQL can also be supplied at runtime_by overriding the {@link #getSql()} method.;public SqlQuery(DataSource ds, String sql) {_		setDataSource(ds)__		setSql(sql)__	};convenient,constructor,with,a,code,data,source,and,sql,string,param,ds,the,code,data,source,to,use,to,get,connections,param,sql,the,sql,to,execute,sql,can,also,be,supplied,at,runtime,by,overriding,the,link,get,sql,method;public,sql,query,data,source,ds,string,sql,set,data,source,ds,set,sql,sql
SqlQuery -> @Nullable 	public T findObject(Object... params) throws DataAccessException;1496837955;Convenient method to find a single object without context.;@Nullable_	public T findObject(Object... params) throws DataAccessException {_		return findObject(params, null)__	};convenient,method,to,find,a,single,object,without,context;nullable,public,t,find,object,object,params,throws,data,access,exception,return,find,object,params,null
SqlQuery -> @Nullable 	public T findObject(Object... params) throws DataAccessException;1530174524;Convenient method to find a single object without context.;@Nullable_	public T findObject(Object... params) throws DataAccessException {_		return findObject(params, null)__	};convenient,method,to,find,a,single,object,without,context;nullable,public,t,find,object,object,params,throws,data,access,exception,return,find,object,params,null
SqlQuery -> @Nullable 	public T findObject(Object... params) throws DataAccessException;1530174524;Convenient method to find a single object without context.;@Nullable_	public T findObject(Object... params) throws DataAccessException {_		return findObject(params, null)__	};convenient,method,to,find,a,single,object,without,context;nullable,public,t,find,object,object,params,throws,data,access,exception,return,find,object,params,null
SqlQuery -> @Nullable 	public T findObject(Object... params) throws DataAccessException;1530174524;Convenient method to find a single object without context.;@Nullable_	public T findObject(Object... params) throws DataAccessException {_		return findObject(params, null)__	};convenient,method,to,find,a,single,object,without,context;nullable,public,t,find,object,object,params,throws,data,access,exception,return,find,object,params,null
SqlQuery -> @Nullable 	public T findObject(@Nullable Object[] params, @Nullable Map<?, ?> context) throws DataAccessException;1496837955;Generic object finder method, used by all other {@code findObject} methods._Object finder methods are like EJB entity bean finders, in that it is_considered an error if they return more than one result._@return the result object, or {@code null} if not found. Subclasses may_choose to treat this as an error and throw an exception._@see org.springframework.dao.support.DataAccessUtils#singleResult;@Nullable_	public T findObject(@Nullable Object[] params, @Nullable Map<?, ?> context) throws DataAccessException {_		List<T> results = execute(params, context)__		return DataAccessUtils.singleResult(results)__	};generic,object,finder,method,used,by,all,other,code,find,object,methods,object,finder,methods,are,like,ejb,entity,bean,finders,in,that,it,is,considered,an,error,if,they,return,more,than,one,result,return,the,result,object,or,code,null,if,not,found,subclasses,may,choose,to,treat,this,as,an,error,and,throw,an,exception,see,org,springframework,dao,support,data,access,utils,single,result;nullable,public,t,find,object,nullable,object,params,nullable,map,context,throws,data,access,exception,list,t,results,execute,params,context,return,data,access,utils,single,result,results
SqlQuery -> @Nullable 	public T findObject(@Nullable Object[] params, @Nullable Map<?, ?> context) throws DataAccessException;1530174524;Generic object finder method, used by all other {@code findObject} methods._Object finder methods are like EJB entity bean finders, in that it is_considered an error if they return more than one result._@return the result object, or {@code null} if not found. Subclasses may_choose to treat this as an error and throw an exception._@see org.springframework.dao.support.DataAccessUtils#singleResult;@Nullable_	public T findObject(@Nullable Object[] params, @Nullable Map<?, ?> context) throws DataAccessException {_		List<T> results = execute(params, context)__		return DataAccessUtils.singleResult(results)__	};generic,object,finder,method,used,by,all,other,code,find,object,methods,object,finder,methods,are,like,ejb,entity,bean,finders,in,that,it,is,considered,an,error,if,they,return,more,than,one,result,return,the,result,object,or,code,null,if,not,found,subclasses,may,choose,to,treat,this,as,an,error,and,throw,an,exception,see,org,springframework,dao,support,data,access,utils,single,result;nullable,public,t,find,object,nullable,object,params,nullable,map,context,throws,data,access,exception,list,t,results,execute,params,context,return,data,access,utils,single,result,results
SqlQuery -> @Nullable 	public T findObject(@Nullable Object[] params, @Nullable Map<?, ?> context) throws DataAccessException;1530174524;Generic object finder method, used by all other {@code findObject} methods._Object finder methods are like EJB entity bean finders, in that it is_considered an error if they return more than one result._@return the result object, or {@code null} if not found. Subclasses may_choose to treat this as an error and throw an exception._@see org.springframework.dao.support.DataAccessUtils#singleResult;@Nullable_	public T findObject(@Nullable Object[] params, @Nullable Map<?, ?> context) throws DataAccessException {_		List<T> results = execute(params, context)__		return DataAccessUtils.singleResult(results)__	};generic,object,finder,method,used,by,all,other,code,find,object,methods,object,finder,methods,are,like,ejb,entity,bean,finders,in,that,it,is,considered,an,error,if,they,return,more,than,one,result,return,the,result,object,or,code,null,if,not,found,subclasses,may,choose,to,treat,this,as,an,error,and,throw,an,exception,see,org,springframework,dao,support,data,access,utils,single,result;nullable,public,t,find,object,nullable,object,params,nullable,map,context,throws,data,access,exception,list,t,results,execute,params,context,return,data,access,utils,single,result,results
SqlQuery -> @Nullable 	public T findObject(@Nullable Object[] params, @Nullable Map<?, ?> context) throws DataAccessException;1530174524;Generic object finder method, used by all other {@code findObject} methods._Object finder methods are like EJB entity bean finders, in that it is_considered an error if they return more than one result._@return the result object, or {@code null} if not found. Subclasses may_choose to treat this as an error and throw an exception._@see org.springframework.dao.support.DataAccessUtils#singleResult;@Nullable_	public T findObject(@Nullable Object[] params, @Nullable Map<?, ?> context) throws DataAccessException {_		List<T> results = execute(params, context)__		return DataAccessUtils.singleResult(results)__	};generic,object,finder,method,used,by,all,other,code,find,object,methods,object,finder,methods,are,like,ejb,entity,bean,finders,in,that,it,is,considered,an,error,if,they,return,more,than,one,result,return,the,result,object,or,code,null,if,not,found,subclasses,may,choose,to,treat,this,as,an,error,and,throw,an,exception,see,org,springframework,dao,support,data,access,utils,single,result;nullable,public,t,find,object,nullable,object,params,nullable,map,context,throws,data,access,exception,list,t,results,execute,params,context,return,data,access,utils,single,result,results
SqlQuery -> public T findObject(Object... params) throws DataAccessException;1328020251;Convenient method to find a single object without context.;public T findObject(Object... params) throws DataAccessException {_		return findObject(params, null)__	};convenient,method,to,find,a,single,object,without,context;public,t,find,object,object,params,throws,data,access,exception,return,find,object,params,null
SqlQuery -> public T findObject(Object... params) throws DataAccessException;1356735495;Convenient method to find a single object without context.;public T findObject(Object... params) throws DataAccessException {_		return findObject(params, null)__	};convenient,method,to,find,a,single,object,without,context;public,t,find,object,object,params,throws,data,access,exception,return,find,object,params,null
SqlQuery -> public T findObject(Object... params) throws DataAccessException;1385412762;Convenient method to find a single object without context.;public T findObject(Object... params) throws DataAccessException {_		return findObject(params, null)__	};convenient,method,to,find,a,single,object,without,context;public,t,find,object,object,params,throws,data,access,exception,return,find,object,params,null
SqlQuery -> public T findObject(Object... params) throws DataAccessException;1413848647;Convenient method to find a single object without context.;public T findObject(Object... params) throws DataAccessException {_		return findObject(params, null)__	};convenient,method,to,find,a,single,object,without,context;public,t,find,object,object,params,throws,data,access,exception,return,find,object,params,null
SqlQuery -> public T findObject(Object... params) throws DataAccessException;1495868221;Convenient method to find a single object without context.;public T findObject(Object... params) throws DataAccessException {_		return findObject(params, null)__	};convenient,method,to,find,a,single,object,without,context;public,t,find,object,object,params,throws,data,access,exception,return,find,object,params,null
SqlQuery -> public T findObject(Object... params) throws DataAccessException;1496259743;Convenient method to find a single object without context.;public T findObject(Object... params) throws DataAccessException {_		return findObject(params, null)__	};convenient,method,to,find,a,single,object,without,context;public,t,find,object,object,params,throws,data,access,exception,return,find,object,params,null
SqlQuery -> public List<T> executeByNamedParam(Map<String, ?> paramMap, Map<?, ?> context) throws DataAccessException;1385412762;Central execution method. All named parameter execution goes through this method._@param paramMap parameters associated with the name specified while declaring_the SqlParameters. Primitive parameters must be represented by their Object wrapper_type. The ordering of parameters is not significant since they are supplied in a_SqlParameterMap which is an implementation of the Map interface._@param context contextual information passed to the {@code mapRow}_callback method. The JDBC operation itself doesn't rely on this parameter,_but it can be useful for creating the objects of the result list._@return a List of objects, one per row of the ResultSet. Normally all these_will be of the same class, although it is possible to use different types.;public List<T> executeByNamedParam(Map<String, ?> paramMap, Map<?, ?> context) throws DataAccessException {_		validateNamedParameters(paramMap)__		ParsedSql parsedSql = getParsedSql()__		MapSqlParameterSource paramSource = new MapSqlParameterSource(paramMap)__		String sqlToUse = NamedParameterUtils.substituteNamedParameters(parsedSql, paramSource)__		Object[] params = NamedParameterUtils.buildValueArray(parsedSql, paramSource, getDeclaredParameters())__		RowMapper<T> rowMapper = newRowMapper(params, context)__ 		return getJdbcTemplate().query(newPreparedStatementCreator(sqlToUse, params), rowMapper)__	};central,execution,method,all,named,parameter,execution,goes,through,this,method,param,param,map,parameters,associated,with,the,name,specified,while,declaring,the,sql,parameters,primitive,parameters,must,be,represented,by,their,object,wrapper,type,the,ordering,of,parameters,is,not,significant,since,they,are,supplied,in,a,sql,parameter,map,which,is,an,implementation,of,the,map,interface,param,context,contextual,information,passed,to,the,code,map,row,callback,method,the,jdbc,operation,itself,doesn,t,rely,on,this,parameter,but,it,can,be,useful,for,creating,the,objects,of,the,result,list,return,a,list,of,objects,one,per,row,of,the,result,set,normally,all,these,will,be,of,the,same,class,although,it,is,possible,to,use,different,types;public,list,t,execute,by,named,param,map,string,param,map,map,context,throws,data,access,exception,validate,named,parameters,param,map,parsed,sql,parsed,sql,get,parsed,sql,map,sql,parameter,source,param,source,new,map,sql,parameter,source,param,map,string,sql,to,use,named,parameter,utils,substitute,named,parameters,parsed,sql,param,source,object,params,named,parameter,utils,build,value,array,parsed,sql,param,source,get,declared,parameters,row,mapper,t,row,mapper,new,row,mapper,params,context,return,get,jdbc,template,query,new,prepared,statement,creator,sql,to,use,params,row,mapper
SqlQuery -> public List<T> executeByNamedParam(Map<String, ?> paramMap, Map<?, ?> context) throws DataAccessException;1413848647;Central execution method. All named parameter execution goes through this method._@param paramMap parameters associated with the name specified while declaring_the SqlParameters. Primitive parameters must be represented by their Object wrapper_type. The ordering of parameters is not significant since they are supplied in a_SqlParameterMap which is an implementation of the Map interface._@param context contextual information passed to the {@code mapRow}_callback method. The JDBC operation itself doesn't rely on this parameter,_but it can be useful for creating the objects of the result list._@return a List of objects, one per row of the ResultSet. Normally all these_will be of the same class, although it is possible to use different types.;public List<T> executeByNamedParam(Map<String, ?> paramMap, Map<?, ?> context) throws DataAccessException {_		validateNamedParameters(paramMap)__		ParsedSql parsedSql = getParsedSql()__		MapSqlParameterSource paramSource = new MapSqlParameterSource(paramMap)__		String sqlToUse = NamedParameterUtils.substituteNamedParameters(parsedSql, paramSource)__		Object[] params = NamedParameterUtils.buildValueArray(parsedSql, paramSource, getDeclaredParameters())__		RowMapper<T> rowMapper = newRowMapper(params, context)__ 		return getJdbcTemplate().query(newPreparedStatementCreator(sqlToUse, params), rowMapper)__	};central,execution,method,all,named,parameter,execution,goes,through,this,method,param,param,map,parameters,associated,with,the,name,specified,while,declaring,the,sql,parameters,primitive,parameters,must,be,represented,by,their,object,wrapper,type,the,ordering,of,parameters,is,not,significant,since,they,are,supplied,in,a,sql,parameter,map,which,is,an,implementation,of,the,map,interface,param,context,contextual,information,passed,to,the,code,map,row,callback,method,the,jdbc,operation,itself,doesn,t,rely,on,this,parameter,but,it,can,be,useful,for,creating,the,objects,of,the,result,list,return,a,list,of,objects,one,per,row,of,the,result,set,normally,all,these,will,be,of,the,same,class,although,it,is,possible,to,use,different,types;public,list,t,execute,by,named,param,map,string,param,map,map,context,throws,data,access,exception,validate,named,parameters,param,map,parsed,sql,parsed,sql,get,parsed,sql,map,sql,parameter,source,param,source,new,map,sql,parameter,source,param,map,string,sql,to,use,named,parameter,utils,substitute,named,parameters,parsed,sql,param,source,object,params,named,parameter,utils,build,value,array,parsed,sql,param,source,get,declared,parameters,row,mapper,t,row,mapper,new,row,mapper,params,context,return,get,jdbc,template,query,new,prepared,statement,creator,sql,to,use,params,row,mapper
SqlQuery -> public List<T> executeByNamedParam(Map<String, ?> paramMap, Map<?, ?> context) throws DataAccessException;1495868221;Central execution method. All named parameter execution goes through this method._@param paramMap parameters associated with the name specified while declaring_the SqlParameters. Primitive parameters must be represented by their Object wrapper_type. The ordering of parameters is not significant since they are supplied in a_SqlParameterMap which is an implementation of the Map interface._@param context contextual information passed to the {@code mapRow}_callback method. The JDBC operation itself doesn't rely on this parameter,_but it can be useful for creating the objects of the result list._@return a List of objects, one per row of the ResultSet. Normally all these_will be of the same class, although it is possible to use different types.;public List<T> executeByNamedParam(Map<String, ?> paramMap, Map<?, ?> context) throws DataAccessException {_		validateNamedParameters(paramMap)__		ParsedSql parsedSql = getParsedSql()__		MapSqlParameterSource paramSource = new MapSqlParameterSource(paramMap)__		String sqlToUse = NamedParameterUtils.substituteNamedParameters(parsedSql, paramSource)__		Object[] params = NamedParameterUtils.buildValueArray(parsedSql, paramSource, getDeclaredParameters())__		RowMapper<T> rowMapper = newRowMapper(params, context)__ 		return getJdbcTemplate().query(newPreparedStatementCreator(sqlToUse, params), rowMapper)__	};central,execution,method,all,named,parameter,execution,goes,through,this,method,param,param,map,parameters,associated,with,the,name,specified,while,declaring,the,sql,parameters,primitive,parameters,must,be,represented,by,their,object,wrapper,type,the,ordering,of,parameters,is,not,significant,since,they,are,supplied,in,a,sql,parameter,map,which,is,an,implementation,of,the,map,interface,param,context,contextual,information,passed,to,the,code,map,row,callback,method,the,jdbc,operation,itself,doesn,t,rely,on,this,parameter,but,it,can,be,useful,for,creating,the,objects,of,the,result,list,return,a,list,of,objects,one,per,row,of,the,result,set,normally,all,these,will,be,of,the,same,class,although,it,is,possible,to,use,different,types;public,list,t,execute,by,named,param,map,string,param,map,map,context,throws,data,access,exception,validate,named,parameters,param,map,parsed,sql,parsed,sql,get,parsed,sql,map,sql,parameter,source,param,source,new,map,sql,parameter,source,param,map,string,sql,to,use,named,parameter,utils,substitute,named,parameters,parsed,sql,param,source,object,params,named,parameter,utils,build,value,array,parsed,sql,param,source,get,declared,parameters,row,mapper,t,row,mapper,new,row,mapper,params,context,return,get,jdbc,template,query,new,prepared,statement,creator,sql,to,use,params,row,mapper
SqlQuery -> public T findObject(int p1, int p2) throws DataAccessException;1328020251;Convenient method to find a single object given two int parameters.;public T findObject(int p1, int p2) throws DataAccessException {_		return findObject(p1, p2, null)__	};convenient,method,to,find,a,single,object,given,two,int,parameters;public,t,find,object,int,p1,int,p2,throws,data,access,exception,return,find,object,p1,p2,null
SqlQuery -> public T findObject(int p1, int p2) throws DataAccessException;1356735495;Convenient method to find a single object given two int parameters.;public T findObject(int p1, int p2) throws DataAccessException {_		return findObject(p1, p2, null)__	};convenient,method,to,find,a,single,object,given,two,int,parameters;public,t,find,object,int,p1,int,p2,throws,data,access,exception,return,find,object,p1,p2,null
SqlQuery -> public T findObject(int p1, int p2) throws DataAccessException;1385412762;Convenient method to find a single object given two int parameters.;public T findObject(int p1, int p2) throws DataAccessException {_		return findObject(p1, p2, null)__	};convenient,method,to,find,a,single,object,given,two,int,parameters;public,t,find,object,int,p1,int,p2,throws,data,access,exception,return,find,object,p1,p2,null
SqlQuery -> public T findObject(int p1, int p2) throws DataAccessException;1413848647;Convenient method to find a single object given two int parameters.;public T findObject(int p1, int p2) throws DataAccessException {_		return findObject(p1, p2, null)__	};convenient,method,to,find,a,single,object,given,two,int,parameters;public,t,find,object,int,p1,int,p2,throws,data,access,exception,return,find,object,p1,p2,null
SqlQuery -> public T findObject(int p1, int p2) throws DataAccessException;1495868221;Convenient method to find a single object given two int parameters.;public T findObject(int p1, int p2) throws DataAccessException {_		return findObject(p1, p2, null)__	};convenient,method,to,find,a,single,object,given,two,int,parameters;public,t,find,object,int,p1,int,p2,throws,data,access,exception,return,find,object,p1,p2,null
SqlQuery -> public T findObject(int p1, int p2) throws DataAccessException;1496259743;Convenient method to find a single object given two int parameters.;public T findObject(int p1, int p2) throws DataAccessException {_		return findObject(p1, p2, null)__	};convenient,method,to,find,a,single,object,given,two,int,parameters;public,t,find,object,int,p1,int,p2,throws,data,access,exception,return,find,object,p1,p2,null
SqlQuery -> public T findObject(long p1, Map context) throws DataAccessException;1328020251;Convenient method to find a single object given a single long parameter_and a context.;public T findObject(long p1, Map context) throws DataAccessException {_		return findObject(new Object[] {p1}, context)__	};convenient,method,to,find,a,single,object,given,a,single,long,parameter,and,a,context;public,t,find,object,long,p1,map,context,throws,data,access,exception,return,find,object,new,object,p1,context
SqlQuery -> public T findObject(long p1, Map context) throws DataAccessException;1356735495;Convenient method to find a single object given a single long parameter_and a context.;public T findObject(long p1, Map context) throws DataAccessException {_		return findObject(new Object[] {p1}, context)__	};convenient,method,to,find,a,single,object,given,a,single,long,parameter,and,a,context;public,t,find,object,long,p1,map,context,throws,data,access,exception,return,find,object,new,object,p1,context
SqlQuery -> public List<T> execute(int p1, int p2, Map<?, ?> context) throws DataAccessException;1385412762;Convenient method to execute with two int parameters and context._@param p1 first int parameter_@param p2 second int parameter_@param context the contextual information for object creation;public List<T> execute(int p1, int p2, Map<?, ?> context) throws DataAccessException {_		return execute(new Object[] {p1, p2}, context)__	};convenient,method,to,execute,with,two,int,parameters,and,context,param,p1,first,int,parameter,param,p2,second,int,parameter,param,context,the,contextual,information,for,object,creation;public,list,t,execute,int,p1,int,p2,map,context,throws,data,access,exception,return,execute,new,object,p1,p2,context
SqlQuery -> public List<T> execute(int p1, int p2, Map<?, ?> context) throws DataAccessException;1413848647;Convenient method to execute with two int parameters and context._@param p1 first int parameter_@param p2 second int parameter_@param context the contextual information for object creation;public List<T> execute(int p1, int p2, Map<?, ?> context) throws DataAccessException {_		return execute(new Object[] {p1, p2}, context)__	};convenient,method,to,execute,with,two,int,parameters,and,context,param,p1,first,int,parameter,param,p2,second,int,parameter,param,context,the,contextual,information,for,object,creation;public,list,t,execute,int,p1,int,p2,map,context,throws,data,access,exception,return,execute,new,object,p1,p2,context
SqlQuery -> public List<T> execute(int p1, int p2, Map<?, ?> context) throws DataAccessException;1495868221;Convenient method to execute with two int parameters and context._@param p1 first int parameter_@param p2 second int parameter_@param context the contextual information for object creation;public List<T> execute(int p1, int p2, Map<?, ?> context) throws DataAccessException {_		return execute(new Object[] {p1, p2}, context)__	};convenient,method,to,execute,with,two,int,parameters,and,context,param,p1,first,int,parameter,param,p2,second,int,parameter,param,context,the,contextual,information,for,object,creation;public,list,t,execute,int,p1,int,p2,map,context,throws,data,access,exception,return,execute,new,object,p1,p2,context
SqlQuery -> public List<T> execute(String p1, Map<?, ?> context) throws DataAccessException;1385412762;Convenient method to execute with a single String parameter and context._@param p1 single String parameter_@param context the contextual information for object creation;public List<T> execute(String p1, Map<?, ?> context) throws DataAccessException {_		return execute(new Object[] {p1}, context)__	};convenient,method,to,execute,with,a,single,string,parameter,and,context,param,p1,single,string,parameter,param,context,the,contextual,information,for,object,creation;public,list,t,execute,string,p1,map,context,throws,data,access,exception,return,execute,new,object,p1,context
SqlQuery -> public List<T> execute(String p1, Map<?, ?> context) throws DataAccessException;1413848647;Convenient method to execute with a single String parameter and context._@param p1 single String parameter_@param context the contextual information for object creation;public List<T> execute(String p1, Map<?, ?> context) throws DataAccessException {_		return execute(new Object[] {p1}, context)__	};convenient,method,to,execute,with,a,single,string,parameter,and,context,param,p1,single,string,parameter,param,context,the,contextual,information,for,object,creation;public,list,t,execute,string,p1,map,context,throws,data,access,exception,return,execute,new,object,p1,context
SqlQuery -> public List<T> execute(String p1, Map<?, ?> context) throws DataAccessException;1495868221;Convenient method to execute with a single String parameter and context._@param p1 single String parameter_@param context the contextual information for object creation;public List<T> execute(String p1, Map<?, ?> context) throws DataAccessException {_		return execute(new Object[] {p1}, context)__	};convenient,method,to,execute,with,a,single,string,parameter,and,context,param,p1,single,string,parameter,param,context,the,contextual,information,for,object,creation;public,list,t,execute,string,p1,map,context,throws,data,access,exception,return,execute,new,object,p1,context
SqlQuery -> public List<T> executeByNamedParam(Map<String, ?> paramMap) throws DataAccessException;1328020251;Convenient method to execute without context._@param paramMap parameters associated with the name specified while declaring_the SqlParameters. Primitive parameters must be represented by their Object wrapper_type. The ordering of parameters is not significant.;public List<T> executeByNamedParam(Map<String, ?> paramMap) throws DataAccessException {_		return executeByNamedParam(paramMap, null)__	};convenient,method,to,execute,without,context,param,param,map,parameters,associated,with,the,name,specified,while,declaring,the,sql,parameters,primitive,parameters,must,be,represented,by,their,object,wrapper,type,the,ordering,of,parameters,is,not,significant;public,list,t,execute,by,named,param,map,string,param,map,throws,data,access,exception,return,execute,by,named,param,param,map,null
SqlQuery -> public List<T> executeByNamedParam(Map<String, ?> paramMap) throws DataAccessException;1356735495;Convenient method to execute without context._@param paramMap parameters associated with the name specified while declaring_the SqlParameters. Primitive parameters must be represented by their Object wrapper_type. The ordering of parameters is not significant.;public List<T> executeByNamedParam(Map<String, ?> paramMap) throws DataAccessException {_		return executeByNamedParam(paramMap, null)__	};convenient,method,to,execute,without,context,param,param,map,parameters,associated,with,the,name,specified,while,declaring,the,sql,parameters,primitive,parameters,must,be,represented,by,their,object,wrapper,type,the,ordering,of,parameters,is,not,significant;public,list,t,execute,by,named,param,map,string,param,map,throws,data,access,exception,return,execute,by,named,param,param,map,null
SqlQuery -> public List<T> executeByNamedParam(Map<String, ?> paramMap) throws DataAccessException;1385412762;Convenient method to execute without context._@param paramMap parameters associated with the name specified while declaring_the SqlParameters. Primitive parameters must be represented by their Object wrapper_type. The ordering of parameters is not significant.;public List<T> executeByNamedParam(Map<String, ?> paramMap) throws DataAccessException {_		return executeByNamedParam(paramMap, null)__	};convenient,method,to,execute,without,context,param,param,map,parameters,associated,with,the,name,specified,while,declaring,the,sql,parameters,primitive,parameters,must,be,represented,by,their,object,wrapper,type,the,ordering,of,parameters,is,not,significant;public,list,t,execute,by,named,param,map,string,param,map,throws,data,access,exception,return,execute,by,named,param,param,map,null
SqlQuery -> public List<T> executeByNamedParam(Map<String, ?> paramMap) throws DataAccessException;1413848647;Convenient method to execute without context._@param paramMap parameters associated with the name specified while declaring_the SqlParameters. Primitive parameters must be represented by their Object wrapper_type. The ordering of parameters is not significant.;public List<T> executeByNamedParam(Map<String, ?> paramMap) throws DataAccessException {_		return executeByNamedParam(paramMap, null)__	};convenient,method,to,execute,without,context,param,param,map,parameters,associated,with,the,name,specified,while,declaring,the,sql,parameters,primitive,parameters,must,be,represented,by,their,object,wrapper,type,the,ordering,of,parameters,is,not,significant;public,list,t,execute,by,named,param,map,string,param,map,throws,data,access,exception,return,execute,by,named,param,param,map,null
SqlQuery -> public List<T> executeByNamedParam(Map<String, ?> paramMap) throws DataAccessException;1495868221;Convenient method to execute without context._@param paramMap parameters associated with the name specified while declaring_the SqlParameters. Primitive parameters must be represented by their Object wrapper_type. The ordering of parameters is not significant.;public List<T> executeByNamedParam(Map<String, ?> paramMap) throws DataAccessException {_		return executeByNamedParam(paramMap, null)__	};convenient,method,to,execute,without,context,param,param,map,parameters,associated,with,the,name,specified,while,declaring,the,sql,parameters,primitive,parameters,must,be,represented,by,their,object,wrapper,type,the,ordering,of,parameters,is,not,significant;public,list,t,execute,by,named,param,map,string,param,map,throws,data,access,exception,return,execute,by,named,param,param,map,null
SqlQuery -> public List<T> executeByNamedParam(Map<String, ?> paramMap) throws DataAccessException;1496259743;Convenient method to execute without context._@param paramMap parameters associated with the name specified while declaring_the SqlParameters. Primitive parameters must be represented by their Object wrapper_type. The ordering of parameters is not significant.;public List<T> executeByNamedParam(Map<String, ?> paramMap) throws DataAccessException {_		return executeByNamedParam(paramMap, null)__	};convenient,method,to,execute,without,context,param,param,map,parameters,associated,with,the,name,specified,while,declaring,the,sql,parameters,primitive,parameters,must,be,represented,by,their,object,wrapper,type,the,ordering,of,parameters,is,not,significant;public,list,t,execute,by,named,param,map,string,param,map,throws,data,access,exception,return,execute,by,named,param,param,map,null
SqlQuery -> public List<T> executeByNamedParam(Map<String, ?> paramMap) throws DataAccessException;1496837955;Convenient method to execute without context._@param paramMap parameters associated with the name specified while declaring_the SqlParameters. Primitive parameters must be represented by their Object wrapper_type. The ordering of parameters is not significant.;public List<T> executeByNamedParam(Map<String, ?> paramMap) throws DataAccessException {_		return executeByNamedParam(paramMap, null)__	};convenient,method,to,execute,without,context,param,param,map,parameters,associated,with,the,name,specified,while,declaring,the,sql,parameters,primitive,parameters,must,be,represented,by,their,object,wrapper,type,the,ordering,of,parameters,is,not,significant;public,list,t,execute,by,named,param,map,string,param,map,throws,data,access,exception,return,execute,by,named,param,param,map,null
SqlQuery -> public List<T> executeByNamedParam(Map<String, ?> paramMap) throws DataAccessException;1530174524;Convenient method to execute without context._@param paramMap parameters associated with the name specified while declaring_the SqlParameters. Primitive parameters must be represented by their Object wrapper_type. The ordering of parameters is not significant.;public List<T> executeByNamedParam(Map<String, ?> paramMap) throws DataAccessException {_		return executeByNamedParam(paramMap, null)__	};convenient,method,to,execute,without,context,param,param,map,parameters,associated,with,the,name,specified,while,declaring,the,sql,parameters,primitive,parameters,must,be,represented,by,their,object,wrapper,type,the,ordering,of,parameters,is,not,significant;public,list,t,execute,by,named,param,map,string,param,map,throws,data,access,exception,return,execute,by,named,param,param,map,null
SqlQuery -> public List<T> executeByNamedParam(Map<String, ?> paramMap) throws DataAccessException;1530174524;Convenient method to execute without context._@param paramMap parameters associated with the name specified while declaring_the SqlParameters. Primitive parameters must be represented by their Object wrapper_type. The ordering of parameters is not significant.;public List<T> executeByNamedParam(Map<String, ?> paramMap) throws DataAccessException {_		return executeByNamedParam(paramMap, null)__	};convenient,method,to,execute,without,context,param,param,map,parameters,associated,with,the,name,specified,while,declaring,the,sql,parameters,primitive,parameters,must,be,represented,by,their,object,wrapper,type,the,ordering,of,parameters,is,not,significant;public,list,t,execute,by,named,param,map,string,param,map,throws,data,access,exception,return,execute,by,named,param,param,map,null
SqlQuery -> public List<T> executeByNamedParam(Map<String, ?> paramMap) throws DataAccessException;1530174524;Convenient method to execute without context._@param paramMap parameters associated with the name specified while declaring_the SqlParameters. Primitive parameters must be represented by their Object wrapper_type. The ordering of parameters is not significant.;public List<T> executeByNamedParam(Map<String, ?> paramMap) throws DataAccessException {_		return executeByNamedParam(paramMap, null)__	};convenient,method,to,execute,without,context,param,param,map,parameters,associated,with,the,name,specified,while,declaring,the,sql,parameters,primitive,parameters,must,be,represented,by,their,object,wrapper,type,the,ordering,of,parameters,is,not,significant;public,list,t,execute,by,named,param,map,string,param,map,throws,data,access,exception,return,execute,by,named,param,param,map,null
SqlQuery -> public List<T> executeByNamedParam(Map<String, ?> paramMap, @Nullable Map<?, ?> context) throws DataAccessException;1496259743;Central execution method. All named parameter execution goes through this method._@param paramMap parameters associated with the name specified while declaring_the SqlParameters. Primitive parameters must be represented by their Object wrapper_type. The ordering of parameters is not significant since they are supplied in a_SqlParameterMap which is an implementation of the Map interface._@param context contextual information passed to the {@code mapRow}_callback method. The JDBC operation itself doesn't rely on this parameter,_but it can be useful for creating the objects of the result list._@return a List of objects, one per row of the ResultSet. Normally all these_will be of the same class, although it is possible to use different types.;public List<T> executeByNamedParam(Map<String, ?> paramMap, @Nullable Map<?, ?> context) throws DataAccessException {_		validateNamedParameters(paramMap)__		ParsedSql parsedSql = getParsedSql()__		MapSqlParameterSource paramSource = new MapSqlParameterSource(paramMap)__		String sqlToUse = NamedParameterUtils.substituteNamedParameters(parsedSql, paramSource)__		Object[] params = NamedParameterUtils.buildValueArray(parsedSql, paramSource, getDeclaredParameters())__		RowMapper<T> rowMapper = newRowMapper(params, context)__ 		return getJdbcTemplate().query(newPreparedStatementCreator(sqlToUse, params), rowMapper)__	};central,execution,method,all,named,parameter,execution,goes,through,this,method,param,param,map,parameters,associated,with,the,name,specified,while,declaring,the,sql,parameters,primitive,parameters,must,be,represented,by,their,object,wrapper,type,the,ordering,of,parameters,is,not,significant,since,they,are,supplied,in,a,sql,parameter,map,which,is,an,implementation,of,the,map,interface,param,context,contextual,information,passed,to,the,code,map,row,callback,method,the,jdbc,operation,itself,doesn,t,rely,on,this,parameter,but,it,can,be,useful,for,creating,the,objects,of,the,result,list,return,a,list,of,objects,one,per,row,of,the,result,set,normally,all,these,will,be,of,the,same,class,although,it,is,possible,to,use,different,types;public,list,t,execute,by,named,param,map,string,param,map,nullable,map,context,throws,data,access,exception,validate,named,parameters,param,map,parsed,sql,parsed,sql,get,parsed,sql,map,sql,parameter,source,param,source,new,map,sql,parameter,source,param,map,string,sql,to,use,named,parameter,utils,substitute,named,parameters,parsed,sql,param,source,object,params,named,parameter,utils,build,value,array,parsed,sql,param,source,get,declared,parameters,row,mapper,t,row,mapper,new,row,mapper,params,context,return,get,jdbc,template,query,new,prepared,statement,creator,sql,to,use,params,row,mapper
SqlQuery -> public List<T> executeByNamedParam(Map<String, ?> paramMap, @Nullable Map<?, ?> context) throws DataAccessException;1496837955;Central execution method. All named parameter execution goes through this method._@param paramMap parameters associated with the name specified while declaring_the SqlParameters. Primitive parameters must be represented by their Object wrapper_type. The ordering of parameters is not significant since they are supplied in a_SqlParameterMap which is an implementation of the Map interface._@param context contextual information passed to the {@code mapRow}_callback method. The JDBC operation itself doesn't rely on this parameter,_but it can be useful for creating the objects of the result list._@return a List of objects, one per row of the ResultSet. Normally all these_will be of the same class, although it is possible to use different types.;public List<T> executeByNamedParam(Map<String, ?> paramMap, @Nullable Map<?, ?> context) throws DataAccessException {_		validateNamedParameters(paramMap)__		ParsedSql parsedSql = getParsedSql()__		MapSqlParameterSource paramSource = new MapSqlParameterSource(paramMap)__		String sqlToUse = NamedParameterUtils.substituteNamedParameters(parsedSql, paramSource)__		Object[] params = NamedParameterUtils.buildValueArray(parsedSql, paramSource, getDeclaredParameters())__		RowMapper<T> rowMapper = newRowMapper(params, context)__ 		return getJdbcTemplate().query(newPreparedStatementCreator(sqlToUse, params), rowMapper)__	};central,execution,method,all,named,parameter,execution,goes,through,this,method,param,param,map,parameters,associated,with,the,name,specified,while,declaring,the,sql,parameters,primitive,parameters,must,be,represented,by,their,object,wrapper,type,the,ordering,of,parameters,is,not,significant,since,they,are,supplied,in,a,sql,parameter,map,which,is,an,implementation,of,the,map,interface,param,context,contextual,information,passed,to,the,code,map,row,callback,method,the,jdbc,operation,itself,doesn,t,rely,on,this,parameter,but,it,can,be,useful,for,creating,the,objects,of,the,result,list,return,a,list,of,objects,one,per,row,of,the,result,set,normally,all,these,will,be,of,the,same,class,although,it,is,possible,to,use,different,types;public,list,t,execute,by,named,param,map,string,param,map,nullable,map,context,throws,data,access,exception,validate,named,parameters,param,map,parsed,sql,parsed,sql,get,parsed,sql,map,sql,parameter,source,param,source,new,map,sql,parameter,source,param,map,string,sql,to,use,named,parameter,utils,substitute,named,parameters,parsed,sql,param,source,object,params,named,parameter,utils,build,value,array,parsed,sql,param,source,get,declared,parameters,row,mapper,t,row,mapper,new,row,mapper,params,context,return,get,jdbc,template,query,new,prepared,statement,creator,sql,to,use,params,row,mapper
SqlQuery -> public List<T> executeByNamedParam(Map<String, ?> paramMap, @Nullable Map<?, ?> context) throws DataAccessException;1530174524;Central execution method. All named parameter execution goes through this method._@param paramMap parameters associated with the name specified while declaring_the SqlParameters. Primitive parameters must be represented by their Object wrapper_type. The ordering of parameters is not significant since they are supplied in a_SqlParameterMap which is an implementation of the Map interface._@param context contextual information passed to the {@code mapRow}_callback method. The JDBC operation itself doesn't rely on this parameter,_but it can be useful for creating the objects of the result list._@return a List of objects, one per row of the ResultSet. Normally all these_will be of the same class, although it is possible to use different types.;public List<T> executeByNamedParam(Map<String, ?> paramMap, @Nullable Map<?, ?> context) throws DataAccessException {_		validateNamedParameters(paramMap)__		ParsedSql parsedSql = getParsedSql()__		MapSqlParameterSource paramSource = new MapSqlParameterSource(paramMap)__		String sqlToUse = NamedParameterUtils.substituteNamedParameters(parsedSql, paramSource)__		Object[] params = NamedParameterUtils.buildValueArray(parsedSql, paramSource, getDeclaredParameters())__		RowMapper<T> rowMapper = newRowMapper(params, context)__ 		return getJdbcTemplate().query(newPreparedStatementCreator(sqlToUse, params), rowMapper)__	};central,execution,method,all,named,parameter,execution,goes,through,this,method,param,param,map,parameters,associated,with,the,name,specified,while,declaring,the,sql,parameters,primitive,parameters,must,be,represented,by,their,object,wrapper,type,the,ordering,of,parameters,is,not,significant,since,they,are,supplied,in,a,sql,parameter,map,which,is,an,implementation,of,the,map,interface,param,context,contextual,information,passed,to,the,code,map,row,callback,method,the,jdbc,operation,itself,doesn,t,rely,on,this,parameter,but,it,can,be,useful,for,creating,the,objects,of,the,result,list,return,a,list,of,objects,one,per,row,of,the,result,set,normally,all,these,will,be,of,the,same,class,although,it,is,possible,to,use,different,types;public,list,t,execute,by,named,param,map,string,param,map,nullable,map,context,throws,data,access,exception,validate,named,parameters,param,map,parsed,sql,parsed,sql,get,parsed,sql,map,sql,parameter,source,param,source,new,map,sql,parameter,source,param,map,string,sql,to,use,named,parameter,utils,substitute,named,parameters,parsed,sql,param,source,object,params,named,parameter,utils,build,value,array,parsed,sql,param,source,get,declared,parameters,row,mapper,t,row,mapper,new,row,mapper,params,context,return,get,jdbc,template,query,new,prepared,statement,creator,sql,to,use,params,row,mapper
SqlQuery -> public List<T> executeByNamedParam(Map<String, ?> paramMap, @Nullable Map<?, ?> context) throws DataAccessException;1530174524;Central execution method. All named parameter execution goes through this method._@param paramMap parameters associated with the name specified while declaring_the SqlParameters. Primitive parameters must be represented by their Object wrapper_type. The ordering of parameters is not significant since they are supplied in a_SqlParameterMap which is an implementation of the Map interface._@param context contextual information passed to the {@code mapRow}_callback method. The JDBC operation itself doesn't rely on this parameter,_but it can be useful for creating the objects of the result list._@return a List of objects, one per row of the ResultSet. Normally all these_will be of the same class, although it is possible to use different types.;public List<T> executeByNamedParam(Map<String, ?> paramMap, @Nullable Map<?, ?> context) throws DataAccessException {_		validateNamedParameters(paramMap)__		ParsedSql parsedSql = getParsedSql()__		MapSqlParameterSource paramSource = new MapSqlParameterSource(paramMap)__		String sqlToUse = NamedParameterUtils.substituteNamedParameters(parsedSql, paramSource)__		Object[] params = NamedParameterUtils.buildValueArray(parsedSql, paramSource, getDeclaredParameters())__		RowMapper<T> rowMapper = newRowMapper(params, context)__		return getJdbcTemplate().query(newPreparedStatementCreator(sqlToUse, params), rowMapper)__	};central,execution,method,all,named,parameter,execution,goes,through,this,method,param,param,map,parameters,associated,with,the,name,specified,while,declaring,the,sql,parameters,primitive,parameters,must,be,represented,by,their,object,wrapper,type,the,ordering,of,parameters,is,not,significant,since,they,are,supplied,in,a,sql,parameter,map,which,is,an,implementation,of,the,map,interface,param,context,contextual,information,passed,to,the,code,map,row,callback,method,the,jdbc,operation,itself,doesn,t,rely,on,this,parameter,but,it,can,be,useful,for,creating,the,objects,of,the,result,list,return,a,list,of,objects,one,per,row,of,the,result,set,normally,all,these,will,be,of,the,same,class,although,it,is,possible,to,use,different,types;public,list,t,execute,by,named,param,map,string,param,map,nullable,map,context,throws,data,access,exception,validate,named,parameters,param,map,parsed,sql,parsed,sql,get,parsed,sql,map,sql,parameter,source,param,source,new,map,sql,parameter,source,param,map,string,sql,to,use,named,parameter,utils,substitute,named,parameters,parsed,sql,param,source,object,params,named,parameter,utils,build,value,array,parsed,sql,param,source,get,declared,parameters,row,mapper,t,row,mapper,new,row,mapper,params,context,return,get,jdbc,template,query,new,prepared,statement,creator,sql,to,use,params,row,mapper
SqlQuery -> public List<T> executeByNamedParam(Map<String, ?> paramMap, @Nullable Map<?, ?> context) throws DataAccessException;1530174524;Central execution method. All named parameter execution goes through this method._@param paramMap parameters associated with the name specified while declaring_the SqlParameters. Primitive parameters must be represented by their Object wrapper_type. The ordering of parameters is not significant since they are supplied in a_SqlParameterMap which is an implementation of the Map interface._@param context contextual information passed to the {@code mapRow}_callback method. The JDBC operation itself doesn't rely on this parameter,_but it can be useful for creating the objects of the result list._@return a List of objects, one per row of the ResultSet. Normally all these_will be of the same class, although it is possible to use different types.;public List<T> executeByNamedParam(Map<String, ?> paramMap, @Nullable Map<?, ?> context) throws DataAccessException {_		validateNamedParameters(paramMap)__		ParsedSql parsedSql = getParsedSql()__		MapSqlParameterSource paramSource = new MapSqlParameterSource(paramMap)__		String sqlToUse = NamedParameterUtils.substituteNamedParameters(parsedSql, paramSource)__		Object[] params = NamedParameterUtils.buildValueArray(parsedSql, paramSource, getDeclaredParameters())__		RowMapper<T> rowMapper = newRowMapper(params, context)__		return getJdbcTemplate().query(newPreparedStatementCreator(sqlToUse, params), rowMapper)__	};central,execution,method,all,named,parameter,execution,goes,through,this,method,param,param,map,parameters,associated,with,the,name,specified,while,declaring,the,sql,parameters,primitive,parameters,must,be,represented,by,their,object,wrapper,type,the,ordering,of,parameters,is,not,significant,since,they,are,supplied,in,a,sql,parameter,map,which,is,an,implementation,of,the,map,interface,param,context,contextual,information,passed,to,the,code,map,row,callback,method,the,jdbc,operation,itself,doesn,t,rely,on,this,parameter,but,it,can,be,useful,for,creating,the,objects,of,the,result,list,return,a,list,of,objects,one,per,row,of,the,result,set,normally,all,these,will,be,of,the,same,class,although,it,is,possible,to,use,different,types;public,list,t,execute,by,named,param,map,string,param,map,nullable,map,context,throws,data,access,exception,validate,named,parameters,param,map,parsed,sql,parsed,sql,get,parsed,sql,map,sql,parameter,source,param,source,new,map,sql,parameter,source,param,map,string,sql,to,use,named,parameter,utils,substitute,named,parameters,parsed,sql,param,source,object,params,named,parameter,utils,build,value,array,parsed,sql,param,source,get,declared,parameters,row,mapper,t,row,mapper,new,row,mapper,params,context,return,get,jdbc,template,query,new,prepared,statement,creator,sql,to,use,params,row,mapper
SqlQuery -> public T findObject(int p1, int p2, Map<?, ?> context) throws DataAccessException;1385412762;Convenient method to find a single object given two int parameters_and a context.;public T findObject(int p1, int p2, Map<?, ?> context) throws DataAccessException {_		return findObject(new Object[] {p1, p2}, context)__	};convenient,method,to,find,a,single,object,given,two,int,parameters,and,a,context;public,t,find,object,int,p1,int,p2,map,context,throws,data,access,exception,return,find,object,new,object,p1,p2,context
SqlQuery -> public T findObject(int p1, int p2, Map<?, ?> context) throws DataAccessException;1413848647;Convenient method to find a single object given two int parameters_and a context.;public T findObject(int p1, int p2, Map<?, ?> context) throws DataAccessException {_		return findObject(new Object[] {p1, p2}, context)__	};convenient,method,to,find,a,single,object,given,two,int,parameters,and,a,context;public,t,find,object,int,p1,int,p2,map,context,throws,data,access,exception,return,find,object,new,object,p1,p2,context
SqlQuery -> public T findObject(int p1, int p2, Map<?, ?> context) throws DataAccessException;1495868221;Convenient method to find a single object given two int parameters_and a context.;public T findObject(int p1, int p2, Map<?, ?> context) throws DataAccessException {_		return findObject(new Object[] {p1, p2}, context)__	};convenient,method,to,find,a,single,object,given,two,int,parameters,and,a,context;public,t,find,object,int,p1,int,p2,map,context,throws,data,access,exception,return,find,object,new,object,p1,p2,context
SqlQuery -> public T findObject(String p1, Map<?, ?> context) throws DataAccessException;1385412762;Convenient method to find a single object given a single String parameter_and a context.;public T findObject(String p1, Map<?, ?> context) throws DataAccessException {_		return findObject(new Object[] {p1}, context)__	};convenient,method,to,find,a,single,object,given,a,single,string,parameter,and,a,context;public,t,find,object,string,p1,map,context,throws,data,access,exception,return,find,object,new,object,p1,context
SqlQuery -> public T findObject(String p1, Map<?, ?> context) throws DataAccessException;1413848647;Convenient method to find a single object given a single String parameter_and a context.;public T findObject(String p1, Map<?, ?> context) throws DataAccessException {_		return findObject(new Object[] {p1}, context)__	};convenient,method,to,find,a,single,object,given,a,single,string,parameter,and,a,context;public,t,find,object,string,p1,map,context,throws,data,access,exception,return,find,object,new,object,p1,context
SqlQuery -> public T findObject(String p1, Map<?, ?> context) throws DataAccessException;1495868221;Convenient method to find a single object given a single String parameter_and a context.;public T findObject(String p1, Map<?, ?> context) throws DataAccessException {_		return findObject(new Object[] {p1}, context)__	};convenient,method,to,find,a,single,object,given,a,single,string,parameter,and,a,context;public,t,find,object,string,p1,map,context,throws,data,access,exception,return,find,object,new,object,p1,context
SqlQuery -> @Nullable 	public T findObjectByNamedParam(Map<String, ?> paramMap, @Nullable Map<?, ?> context) throws DataAccessException;1496837955;Generic object finder method for named parameters._@param paramMap Map of parameter name to parameter object,_matching named parameters specified in the SQL statement._Ordering is not significant._@param context contextual information passed to the {@code mapRow}_callback method. The JDBC operation itself doesn't rely on this parameter,_but it can be useful for creating the objects of the result list._@return a List of objects, one per row of the ResultSet. Normally all these_will be of the same class, although it is possible to use different types.;@Nullable_	public T findObjectByNamedParam(Map<String, ?> paramMap, @Nullable Map<?, ?> context) throws DataAccessException {_		List<T> results = executeByNamedParam(paramMap, context)__		return DataAccessUtils.singleResult(results)__	};generic,object,finder,method,for,named,parameters,param,param,map,map,of,parameter,name,to,parameter,object,matching,named,parameters,specified,in,the,sql,statement,ordering,is,not,significant,param,context,contextual,information,passed,to,the,code,map,row,callback,method,the,jdbc,operation,itself,doesn,t,rely,on,this,parameter,but,it,can,be,useful,for,creating,the,objects,of,the,result,list,return,a,list,of,objects,one,per,row,of,the,result,set,normally,all,these,will,be,of,the,same,class,although,it,is,possible,to,use,different,types;nullable,public,t,find,object,by,named,param,map,string,param,map,nullable,map,context,throws,data,access,exception,list,t,results,execute,by,named,param,param,map,context,return,data,access,utils,single,result,results
SqlQuery -> @Nullable 	public T findObjectByNamedParam(Map<String, ?> paramMap, @Nullable Map<?, ?> context) throws DataAccessException;1530174524;Generic object finder method for named parameters._@param paramMap a Map of parameter name to parameter object,_matching named parameters specified in the SQL statement._Ordering is not significant._@param context contextual information passed to the {@code mapRow}_callback method. The JDBC operation itself doesn't rely on this parameter,_but it can be useful for creating the objects of the result list._@return a List of objects, one per row of the ResultSet. Normally all these_will be of the same class, although it is possible to use different types.;@Nullable_	public T findObjectByNamedParam(Map<String, ?> paramMap, @Nullable Map<?, ?> context) throws DataAccessException {_		List<T> results = executeByNamedParam(paramMap, context)__		return DataAccessUtils.singleResult(results)__	};generic,object,finder,method,for,named,parameters,param,param,map,a,map,of,parameter,name,to,parameter,object,matching,named,parameters,specified,in,the,sql,statement,ordering,is,not,significant,param,context,contextual,information,passed,to,the,code,map,row,callback,method,the,jdbc,operation,itself,doesn,t,rely,on,this,parameter,but,it,can,be,useful,for,creating,the,objects,of,the,result,list,return,a,list,of,objects,one,per,row,of,the,result,set,normally,all,these,will,be,of,the,same,class,although,it,is,possible,to,use,different,types;nullable,public,t,find,object,by,named,param,map,string,param,map,nullable,map,context,throws,data,access,exception,list,t,results,execute,by,named,param,param,map,context,return,data,access,utils,single,result,results
SqlQuery -> @Nullable 	public T findObjectByNamedParam(Map<String, ?> paramMap, @Nullable Map<?, ?> context) throws DataAccessException;1530174524;Generic object finder method for named parameters._@param paramMap a Map of parameter name to parameter object,_matching named parameters specified in the SQL statement._Ordering is not significant._@param context contextual information passed to the {@code mapRow}_callback method. The JDBC operation itself doesn't rely on this parameter,_but it can be useful for creating the objects of the result list._@return a List of objects, one per row of the ResultSet. Normally all these_will be of the same class, although it is possible to use different types.;@Nullable_	public T findObjectByNamedParam(Map<String, ?> paramMap, @Nullable Map<?, ?> context) throws DataAccessException {_		List<T> results = executeByNamedParam(paramMap, context)__		return DataAccessUtils.singleResult(results)__	};generic,object,finder,method,for,named,parameters,param,param,map,a,map,of,parameter,name,to,parameter,object,matching,named,parameters,specified,in,the,sql,statement,ordering,is,not,significant,param,context,contextual,information,passed,to,the,code,map,row,callback,method,the,jdbc,operation,itself,doesn,t,rely,on,this,parameter,but,it,can,be,useful,for,creating,the,objects,of,the,result,list,return,a,list,of,objects,one,per,row,of,the,result,set,normally,all,these,will,be,of,the,same,class,although,it,is,possible,to,use,different,types;nullable,public,t,find,object,by,named,param,map,string,param,map,nullable,map,context,throws,data,access,exception,list,t,results,execute,by,named,param,param,map,context,return,data,access,utils,single,result,results
SqlQuery -> @Nullable 	public T findObjectByNamedParam(Map<String, ?> paramMap, @Nullable Map<?, ?> context) throws DataAccessException;1530174524;Generic object finder method for named parameters._@param paramMap a Map of parameter name to parameter object,_matching named parameters specified in the SQL statement._Ordering is not significant._@param context contextual information passed to the {@code mapRow}_callback method. The JDBC operation itself doesn't rely on this parameter,_but it can be useful for creating the objects of the result list._@return a List of objects, one per row of the ResultSet. Normally all these_will be of the same class, although it is possible to use different types.;@Nullable_	public T findObjectByNamedParam(Map<String, ?> paramMap, @Nullable Map<?, ?> context) throws DataAccessException {_		List<T> results = executeByNamedParam(paramMap, context)__		return DataAccessUtils.singleResult(results)__	};generic,object,finder,method,for,named,parameters,param,param,map,a,map,of,parameter,name,to,parameter,object,matching,named,parameters,specified,in,the,sql,statement,ordering,is,not,significant,param,context,contextual,information,passed,to,the,code,map,row,callback,method,the,jdbc,operation,itself,doesn,t,rely,on,this,parameter,but,it,can,be,useful,for,creating,the,objects,of,the,result,list,return,a,list,of,objects,one,per,row,of,the,result,set,normally,all,these,will,be,of,the,same,class,although,it,is,possible,to,use,different,types;nullable,public,t,find,object,by,named,param,map,string,param,map,nullable,map,context,throws,data,access,exception,list,t,results,execute,by,named,param,param,map,context,return,data,access,utils,single,result,results
SqlQuery -> public List<T> execute(String p1, @Nullable Map<?, ?> context) throws DataAccessException;1496259743;Convenient method to execute with a single String parameter and context._@param p1 single String parameter_@param context the contextual information for object creation;public List<T> execute(String p1, @Nullable Map<?, ?> context) throws DataAccessException {_		return execute(new Object[] {p1}, context)__	};convenient,method,to,execute,with,a,single,string,parameter,and,context,param,p1,single,string,parameter,param,context,the,contextual,information,for,object,creation;public,list,t,execute,string,p1,nullable,map,context,throws,data,access,exception,return,execute,new,object,p1,context
SqlQuery -> public List<T> execute(String p1, @Nullable Map<?, ?> context) throws DataAccessException;1496837955;Convenient method to execute with a single String parameter and context._@param p1 single String parameter_@param context the contextual information for object creation;public List<T> execute(String p1, @Nullable Map<?, ?> context) throws DataAccessException {_		return execute(new Object[] {p1}, context)__	};convenient,method,to,execute,with,a,single,string,parameter,and,context,param,p1,single,string,parameter,param,context,the,contextual,information,for,object,creation;public,list,t,execute,string,p1,nullable,map,context,throws,data,access,exception,return,execute,new,object,p1,context
SqlQuery -> public List<T> execute(String p1, @Nullable Map<?, ?> context) throws DataAccessException;1530174524;Convenient method to execute with a single String parameter and context._@param p1 single String parameter_@param context the contextual information for object creation;public List<T> execute(String p1, @Nullable Map<?, ?> context) throws DataAccessException {_		return execute(new Object[] {p1}, context)__	};convenient,method,to,execute,with,a,single,string,parameter,and,context,param,p1,single,string,parameter,param,context,the,contextual,information,for,object,creation;public,list,t,execute,string,p1,nullable,map,context,throws,data,access,exception,return,execute,new,object,p1,context
SqlQuery -> public List<T> execute(String p1, @Nullable Map<?, ?> context) throws DataAccessException;1530174524;Convenient method to execute with a single String parameter and context._@param p1 single String parameter_@param context the contextual information for object creation;public List<T> execute(String p1, @Nullable Map<?, ?> context) throws DataAccessException {_		return execute(new Object[] {p1}, context)__	};convenient,method,to,execute,with,a,single,string,parameter,and,context,param,p1,single,string,parameter,param,context,the,contextual,information,for,object,creation;public,list,t,execute,string,p1,nullable,map,context,throws,data,access,exception,return,execute,new,object,p1,context
SqlQuery -> public List<T> execute(String p1, @Nullable Map<?, ?> context) throws DataAccessException;1530174524;Convenient method to execute with a single String parameter and context._@param p1 single String parameter_@param context the contextual information for object creation;public List<T> execute(String p1, @Nullable Map<?, ?> context) throws DataAccessException {_		return execute(new Object[] {p1}, context)__	};convenient,method,to,execute,with,a,single,string,parameter,and,context,param,p1,single,string,parameter,param,context,the,contextual,information,for,object,creation;public,list,t,execute,string,p1,nullable,map,context,throws,data,access,exception,return,execute,new,object,p1,context
SqlQuery -> @Nullable 	public T findObject(String p1, @Nullable Map<?, ?> context) throws DataAccessException;1496837955;Convenient method to find a single object given a single String parameter_and a context.;@Nullable_	public T findObject(String p1, @Nullable Map<?, ?> context) throws DataAccessException {_		return findObject(new Object[] {p1}, context)__	};convenient,method,to,find,a,single,object,given,a,single,string,parameter,and,a,context;nullable,public,t,find,object,string,p1,nullable,map,context,throws,data,access,exception,return,find,object,new,object,p1,context
SqlQuery -> @Nullable 	public T findObject(String p1, @Nullable Map<?, ?> context) throws DataAccessException;1530174524;Convenient method to find a single object given a single String parameter_and a context.;@Nullable_	public T findObject(String p1, @Nullable Map<?, ?> context) throws DataAccessException {_		return findObject(new Object[] {p1}, context)__	};convenient,method,to,find,a,single,object,given,a,single,string,parameter,and,a,context;nullable,public,t,find,object,string,p1,nullable,map,context,throws,data,access,exception,return,find,object,new,object,p1,context
SqlQuery -> @Nullable 	public T findObject(String p1, @Nullable Map<?, ?> context) throws DataAccessException;1530174524;Convenient method to find a single object given a single String parameter_and a context.;@Nullable_	public T findObject(String p1, @Nullable Map<?, ?> context) throws DataAccessException {_		return findObject(new Object[] {p1}, context)__	};convenient,method,to,find,a,single,object,given,a,single,string,parameter,and,a,context;nullable,public,t,find,object,string,p1,nullable,map,context,throws,data,access,exception,return,find,object,new,object,p1,context
SqlQuery -> @Nullable 	public T findObject(String p1, @Nullable Map<?, ?> context) throws DataAccessException;1530174524;Convenient method to find a single object given a single String parameter_and a context.;@Nullable_	public T findObject(String p1, @Nullable Map<?, ?> context) throws DataAccessException {_		return findObject(new Object[] {p1}, context)__	};convenient,method,to,find,a,single,object,given,a,single,string,parameter,and,a,context;nullable,public,t,find,object,string,p1,nullable,map,context,throws,data,access,exception,return,find,object,new,object,p1,context
SqlQuery -> public List<T> execute(long p1, @Nullable Map<?, ?> context) throws DataAccessException;1496259743;Convenient method to execute with a single long parameter and context._@param p1 single long parameter_@param context the contextual information for object creation;public List<T> execute(long p1, @Nullable Map<?, ?> context) throws DataAccessException {_		return execute(new Object[] {p1}, context)__	};convenient,method,to,execute,with,a,single,long,parameter,and,context,param,p1,single,long,parameter,param,context,the,contextual,information,for,object,creation;public,list,t,execute,long,p1,nullable,map,context,throws,data,access,exception,return,execute,new,object,p1,context
SqlQuery -> public List<T> execute(long p1, @Nullable Map<?, ?> context) throws DataAccessException;1496837955;Convenient method to execute with a single long parameter and context._@param p1 single long parameter_@param context the contextual information for object creation;public List<T> execute(long p1, @Nullable Map<?, ?> context) throws DataAccessException {_		return execute(new Object[] {p1}, context)__	};convenient,method,to,execute,with,a,single,long,parameter,and,context,param,p1,single,long,parameter,param,context,the,contextual,information,for,object,creation;public,list,t,execute,long,p1,nullable,map,context,throws,data,access,exception,return,execute,new,object,p1,context
SqlQuery -> public List<T> execute(long p1, @Nullable Map<?, ?> context) throws DataAccessException;1530174524;Convenient method to execute with a single long parameter and context._@param p1 single long parameter_@param context the contextual information for object creation;public List<T> execute(long p1, @Nullable Map<?, ?> context) throws DataAccessException {_		return execute(new Object[] {p1}, context)__	};convenient,method,to,execute,with,a,single,long,parameter,and,context,param,p1,single,long,parameter,param,context,the,contextual,information,for,object,creation;public,list,t,execute,long,p1,nullable,map,context,throws,data,access,exception,return,execute,new,object,p1,context
SqlQuery -> public List<T> execute(long p1, @Nullable Map<?, ?> context) throws DataAccessException;1530174524;Convenient method to execute with a single long parameter and context._@param p1 single long parameter_@param context the contextual information for object creation;public List<T> execute(long p1, @Nullable Map<?, ?> context) throws DataAccessException {_		return execute(new Object[] {p1}, context)__	};convenient,method,to,execute,with,a,single,long,parameter,and,context,param,p1,single,long,parameter,param,context,the,contextual,information,for,object,creation;public,list,t,execute,long,p1,nullable,map,context,throws,data,access,exception,return,execute,new,object,p1,context
SqlQuery -> public List<T> execute(long p1, @Nullable Map<?, ?> context) throws DataAccessException;1530174524;Convenient method to execute with a single long parameter and context._@param p1 single long parameter_@param context the contextual information for object creation;public List<T> execute(long p1, @Nullable Map<?, ?> context) throws DataAccessException {_		return execute(new Object[] {p1}, context)__	};convenient,method,to,execute,with,a,single,long,parameter,and,context,param,p1,single,long,parameter,param,context,the,contextual,information,for,object,creation;public,list,t,execute,long,p1,nullable,map,context,throws,data,access,exception,return,execute,new,object,p1,context
SqlQuery -> public void setRowsExpected(int rowsExpected);1328020251;Set the number of rows expected._<p>This can be used to ensure efficient storage of results. The_default behavior is not to expect any specific number of rows.;public void setRowsExpected(int rowsExpected) {_		this.rowsExpected = rowsExpected__	};set,the,number,of,rows,expected,p,this,can,be,used,to,ensure,efficient,storage,of,results,the,default,behavior,is,not,to,expect,any,specific,number,of,rows;public,void,set,rows,expected,int,rows,expected,this,rows,expected,rows,expected
SqlQuery -> public void setRowsExpected(int rowsExpected);1356735495;Set the number of rows expected._<p>This can be used to ensure efficient storage of results. The_default behavior is not to expect any specific number of rows.;public void setRowsExpected(int rowsExpected) {_		this.rowsExpected = rowsExpected__	};set,the,number,of,rows,expected,p,this,can,be,used,to,ensure,efficient,storage,of,results,the,default,behavior,is,not,to,expect,any,specific,number,of,rows;public,void,set,rows,expected,int,rows,expected,this,rows,expected,rows,expected
SqlQuery -> public void setRowsExpected(int rowsExpected);1385412762;Set the number of rows expected._<p>This can be used to ensure efficient storage of results. The_default behavior is not to expect any specific number of rows.;public void setRowsExpected(int rowsExpected) {_		this.rowsExpected = rowsExpected__	};set,the,number,of,rows,expected,p,this,can,be,used,to,ensure,efficient,storage,of,results,the,default,behavior,is,not,to,expect,any,specific,number,of,rows;public,void,set,rows,expected,int,rows,expected,this,rows,expected,rows,expected
SqlQuery -> public void setRowsExpected(int rowsExpected);1413848647;Set the number of rows expected._<p>This can be used to ensure efficient storage of results. The_default behavior is not to expect any specific number of rows.;public void setRowsExpected(int rowsExpected) {_		this.rowsExpected = rowsExpected__	};set,the,number,of,rows,expected,p,this,can,be,used,to,ensure,efficient,storage,of,results,the,default,behavior,is,not,to,expect,any,specific,number,of,rows;public,void,set,rows,expected,int,rows,expected,this,rows,expected,rows,expected
SqlQuery -> public void setRowsExpected(int rowsExpected);1495868221;Set the number of rows expected._<p>This can be used to ensure efficient storage of results. The_default behavior is not to expect any specific number of rows.;public void setRowsExpected(int rowsExpected) {_		this.rowsExpected = rowsExpected__	};set,the,number,of,rows,expected,p,this,can,be,used,to,ensure,efficient,storage,of,results,the,default,behavior,is,not,to,expect,any,specific,number,of,rows;public,void,set,rows,expected,int,rows,expected,this,rows,expected,rows,expected
SqlQuery -> public void setRowsExpected(int rowsExpected);1496259743;Set the number of rows expected._<p>This can be used to ensure efficient storage of results. The_default behavior is not to expect any specific number of rows.;public void setRowsExpected(int rowsExpected) {_		this.rowsExpected = rowsExpected__	};set,the,number,of,rows,expected,p,this,can,be,used,to,ensure,efficient,storage,of,results,the,default,behavior,is,not,to,expect,any,specific,number,of,rows;public,void,set,rows,expected,int,rows,expected,this,rows,expected,rows,expected
SqlQuery -> public void setRowsExpected(int rowsExpected);1496837955;Set the number of rows expected._<p>This can be used to ensure efficient storage of results. The_default behavior is not to expect any specific number of rows.;public void setRowsExpected(int rowsExpected) {_		this.rowsExpected = rowsExpected__	};set,the,number,of,rows,expected,p,this,can,be,used,to,ensure,efficient,storage,of,results,the,default,behavior,is,not,to,expect,any,specific,number,of,rows;public,void,set,rows,expected,int,rows,expected,this,rows,expected,rows,expected
SqlQuery -> public void setRowsExpected(int rowsExpected);1530174524;Set the number of rows expected._<p>This can be used to ensure efficient storage of results. The_default behavior is not to expect any specific number of rows.;public void setRowsExpected(int rowsExpected) {_		this.rowsExpected = rowsExpected__	};set,the,number,of,rows,expected,p,this,can,be,used,to,ensure,efficient,storage,of,results,the,default,behavior,is,not,to,expect,any,specific,number,of,rows;public,void,set,rows,expected,int,rows,expected,this,rows,expected,rows,expected
SqlQuery -> public void setRowsExpected(int rowsExpected);1530174524;Set the number of rows expected._<p>This can be used to ensure efficient storage of results. The_default behavior is not to expect any specific number of rows.;public void setRowsExpected(int rowsExpected) {_		this.rowsExpected = rowsExpected__	};set,the,number,of,rows,expected,p,this,can,be,used,to,ensure,efficient,storage,of,results,the,default,behavior,is,not,to,expect,any,specific,number,of,rows;public,void,set,rows,expected,int,rows,expected,this,rows,expected,rows,expected
SqlQuery -> public void setRowsExpected(int rowsExpected);1530174524;Set the number of rows expected._<p>This can be used to ensure efficient storage of results. The_default behavior is not to expect any specific number of rows.;public void setRowsExpected(int rowsExpected) {_		this.rowsExpected = rowsExpected__	};set,the,number,of,rows,expected,p,this,can,be,used,to,ensure,efficient,storage,of,results,the,default,behavior,is,not,to,expect,any,specific,number,of,rows;public,void,set,rows,expected,int,rows,expected,this,rows,expected,rows,expected
SqlQuery -> public T findObjectByNamedParam(Map<String, ?> paramMap, Map context) throws DataAccessException;1328020251;Generic object finder method for named parameters._@param paramMap Map of parameter name to parameter object,_matching named parameters specified in the SQL statement._Ordering is not significant._@param context contextual information passed to the <code>mapRow</code>_callback method. The JDBC operation itself doesn't rely on this parameter,_but it can be useful for creating the objects of the result list._@return a List of objects, one per row of the ResultSet. Normally all these_will be of the same class, although it is possible to use different types.;public T findObjectByNamedParam(Map<String, ?> paramMap, Map context) throws DataAccessException {_		List<T> results = executeByNamedParam(paramMap, context)__		return DataAccessUtils.singleResult(results)__	};generic,object,finder,method,for,named,parameters,param,param,map,map,of,parameter,name,to,parameter,object,matching,named,parameters,specified,in,the,sql,statement,ordering,is,not,significant,param,context,contextual,information,passed,to,the,code,map,row,code,callback,method,the,jdbc,operation,itself,doesn,t,rely,on,this,parameter,but,it,can,be,useful,for,creating,the,objects,of,the,result,list,return,a,list,of,objects,one,per,row,of,the,result,set,normally,all,these,will,be,of,the,same,class,although,it,is,possible,to,use,different,types;public,t,find,object,by,named,param,map,string,param,map,map,context,throws,data,access,exception,list,t,results,execute,by,named,param,param,map,context,return,data,access,utils,single,result,results
SqlQuery -> public T findObjectByNamedParam(Map<String, ?> paramMap, Map context) throws DataAccessException;1356735495;Generic object finder method for named parameters._@param paramMap Map of parameter name to parameter object,_matching named parameters specified in the SQL statement._Ordering is not significant._@param context contextual information passed to the {@code mapRow}_callback method. The JDBC operation itself doesn't rely on this parameter,_but it can be useful for creating the objects of the result list._@return a List of objects, one per row of the ResultSet. Normally all these_will be of the same class, although it is possible to use different types.;public T findObjectByNamedParam(Map<String, ?> paramMap, Map context) throws DataAccessException {_		List<T> results = executeByNamedParam(paramMap, context)__		return DataAccessUtils.singleResult(results)__	};generic,object,finder,method,for,named,parameters,param,param,map,map,of,parameter,name,to,parameter,object,matching,named,parameters,specified,in,the,sql,statement,ordering,is,not,significant,param,context,contextual,information,passed,to,the,code,map,row,callback,method,the,jdbc,operation,itself,doesn,t,rely,on,this,parameter,but,it,can,be,useful,for,creating,the,objects,of,the,result,list,return,a,list,of,objects,one,per,row,of,the,result,set,normally,all,these,will,be,of,the,same,class,although,it,is,possible,to,use,different,types;public,t,find,object,by,named,param,map,string,param,map,map,context,throws,data,access,exception,list,t,results,execute,by,named,param,param,map,context,return,data,access,utils,single,result,results
SqlQuery -> @Nullable 	public T findObject(String p1) throws DataAccessException;1496837955;Convenient method to find a single object given a single String parameter.;@Nullable_	public T findObject(String p1) throws DataAccessException {_		return findObject(p1, null)__	};convenient,method,to,find,a,single,object,given,a,single,string,parameter;nullable,public,t,find,object,string,p1,throws,data,access,exception,return,find,object,p1,null
SqlQuery -> @Nullable 	public T findObject(String p1) throws DataAccessException;1530174524;Convenient method to find a single object given a single String parameter.;@Nullable_	public T findObject(String p1) throws DataAccessException {_		return findObject(p1, null)__	};convenient,method,to,find,a,single,object,given,a,single,string,parameter;nullable,public,t,find,object,string,p1,throws,data,access,exception,return,find,object,p1,null
SqlQuery -> @Nullable 	public T findObject(String p1) throws DataAccessException;1530174524;Convenient method to find a single object given a single String parameter.;@Nullable_	public T findObject(String p1) throws DataAccessException {_		return findObject(p1, null)__	};convenient,method,to,find,a,single,object,given,a,single,string,parameter;nullable,public,t,find,object,string,p1,throws,data,access,exception,return,find,object,p1,null
SqlQuery -> @Nullable 	public T findObject(String p1) throws DataAccessException;1530174524;Convenient method to find a single object given a single String parameter.;@Nullable_	public T findObject(String p1) throws DataAccessException {_		return findObject(p1, null)__	};convenient,method,to,find,a,single,object,given,a,single,string,parameter;nullable,public,t,find,object,string,p1,throws,data,access,exception,return,find,object,p1,null
SqlQuery -> public List<T> execute(Map<?, ?> context) throws DataAccessException;1385412762;Convenient method to execute without parameters._@param context the contextual information for object creation;public List<T> execute(Map<?, ?> context) throws DataAccessException {_		return execute((Object[]) null, context)__	};convenient,method,to,execute,without,parameters,param,context,the,contextual,information,for,object,creation;public,list,t,execute,map,context,throws,data,access,exception,return,execute,object,null,context
SqlQuery -> public List<T> execute(Map<?, ?> context) throws DataAccessException;1413848647;Convenient method to execute without parameters._@param context the contextual information for object creation;public List<T> execute(Map<?, ?> context) throws DataAccessException {_		return execute((Object[]) null, context)__	};convenient,method,to,execute,without,parameters,param,context,the,contextual,information,for,object,creation;public,list,t,execute,map,context,throws,data,access,exception,return,execute,object,null,context
SqlQuery -> public List<T> execute(Map<?, ?> context) throws DataAccessException;1495868221;Convenient method to execute without parameters._@param context the contextual information for object creation;public List<T> execute(Map<?, ?> context) throws DataAccessException {_		return execute((Object[]) null, context)__	};convenient,method,to,execute,without,parameters,param,context,the,contextual,information,for,object,creation;public,list,t,execute,map,context,throws,data,access,exception,return,execute,object,null,context
SqlQuery -> public List<T> execute(Map<?, ?> context) throws DataAccessException;1496259743;Convenient method to execute without parameters._@param context the contextual information for object creation;public List<T> execute(Map<?, ?> context) throws DataAccessException {_		return execute((Object[]) null, context)__	};convenient,method,to,execute,without,parameters,param,context,the,contextual,information,for,object,creation;public,list,t,execute,map,context,throws,data,access,exception,return,execute,object,null,context
SqlQuery -> public List<T> execute(Map<?, ?> context) throws DataAccessException;1496837955;Convenient method to execute without parameters._@param context the contextual information for object creation;public List<T> execute(Map<?, ?> context) throws DataAccessException {_		return execute((Object[]) null, context)__	};convenient,method,to,execute,without,parameters,param,context,the,contextual,information,for,object,creation;public,list,t,execute,map,context,throws,data,access,exception,return,execute,object,null,context
SqlQuery -> public List<T> execute(Map<?, ?> context) throws DataAccessException;1530174524;Convenient method to execute without parameters._@param context the contextual information for object creation;public List<T> execute(Map<?, ?> context) throws DataAccessException {_		return execute((Object[]) null, context)__	};convenient,method,to,execute,without,parameters,param,context,the,contextual,information,for,object,creation;public,list,t,execute,map,context,throws,data,access,exception,return,execute,object,null,context
SqlQuery -> public List<T> execute(Map<?, ?> context) throws DataAccessException;1530174524;Convenient method to execute without parameters._@param context the contextual information for object creation;public List<T> execute(Map<?, ?> context) throws DataAccessException {_		return execute((Object[]) null, context)__	};convenient,method,to,execute,without,parameters,param,context,the,contextual,information,for,object,creation;public,list,t,execute,map,context,throws,data,access,exception,return,execute,object,null,context
SqlQuery -> public List<T> execute(Map<?, ?> context) throws DataAccessException;1530174524;Convenient method to execute without parameters._@param context the contextual information for object creation;public List<T> execute(Map<?, ?> context) throws DataAccessException {_		return execute((Object[]) null, context)__	};convenient,method,to,execute,without,parameters,param,context,the,contextual,information,for,object,creation;public,list,t,execute,map,context,throws,data,access,exception,return,execute,object,null,context
SqlQuery -> public List<T> execute(Object[] params, Map context) throws DataAccessException;1328020251;Central execution method. All un-named parameter execution goes through this method._@param params parameters, similar to JDO query parameters._Primitive parameters must be represented by their Object wrapper type._The ordering of parameters is significant._@param context contextual information passed to the <code>mapRow</code>_callback method. The JDBC operation itself doesn't rely on this parameter,_but it can be useful for creating the objects of the result list._@return a List of objects, one per row of the ResultSet. Normally all these_will be of the same class, although it is possible to use different types.;public List<T> execute(Object[] params, Map context) throws DataAccessException {_		validateParameters(params)__		RowMapper<T> rowMapper = newRowMapper(params, context)__		return getJdbcTemplate().query(newPreparedStatementCreator(params), rowMapper)__	};central,execution,method,all,un,named,parameter,execution,goes,through,this,method,param,params,parameters,similar,to,jdo,query,parameters,primitive,parameters,must,be,represented,by,their,object,wrapper,type,the,ordering,of,parameters,is,significant,param,context,contextual,information,passed,to,the,code,map,row,code,callback,method,the,jdbc,operation,itself,doesn,t,rely,on,this,parameter,but,it,can,be,useful,for,creating,the,objects,of,the,result,list,return,a,list,of,objects,one,per,row,of,the,result,set,normally,all,these,will,be,of,the,same,class,although,it,is,possible,to,use,different,types;public,list,t,execute,object,params,map,context,throws,data,access,exception,validate,parameters,params,row,mapper,t,row,mapper,new,row,mapper,params,context,return,get,jdbc,template,query,new,prepared,statement,creator,params,row,mapper
SqlQuery -> public List<T> execute(Object[] params, Map context) throws DataAccessException;1356735495;Central execution method. All un-named parameter execution goes through this method._@param params parameters, similar to JDO query parameters._Primitive parameters must be represented by their Object wrapper type._The ordering of parameters is significant._@param context contextual information passed to the {@code mapRow}_callback method. The JDBC operation itself doesn't rely on this parameter,_but it can be useful for creating the objects of the result list._@return a List of objects, one per row of the ResultSet. Normally all these_will be of the same class, although it is possible to use different types.;public List<T> execute(Object[] params, Map context) throws DataAccessException {_		validateParameters(params)__		RowMapper<T> rowMapper = newRowMapper(params, context)__		return getJdbcTemplate().query(newPreparedStatementCreator(params), rowMapper)__	};central,execution,method,all,un,named,parameter,execution,goes,through,this,method,param,params,parameters,similar,to,jdo,query,parameters,primitive,parameters,must,be,represented,by,their,object,wrapper,type,the,ordering,of,parameters,is,significant,param,context,contextual,information,passed,to,the,code,map,row,callback,method,the,jdbc,operation,itself,doesn,t,rely,on,this,parameter,but,it,can,be,useful,for,creating,the,objects,of,the,result,list,return,a,list,of,objects,one,per,row,of,the,result,set,normally,all,these,will,be,of,the,same,class,although,it,is,possible,to,use,different,types;public,list,t,execute,object,params,map,context,throws,data,access,exception,validate,parameters,params,row,mapper,t,row,mapper,new,row,mapper,params,context,return,get,jdbc,template,query,new,prepared,statement,creator,params,row,mapper
SqlQuery -> public List<T> execute(String p1) throws DataAccessException;1328020251;Convenient method to execute with a single String parameter._@param p1 single String parameter;public List<T> execute(String p1) throws DataAccessException {_		return execute(p1, null)__	};convenient,method,to,execute,with,a,single,string,parameter,param,p1,single,string,parameter;public,list,t,execute,string,p1,throws,data,access,exception,return,execute,p1,null
SqlQuery -> public List<T> execute(String p1) throws DataAccessException;1356735495;Convenient method to execute with a single String parameter._@param p1 single String parameter;public List<T> execute(String p1) throws DataAccessException {_		return execute(p1, null)__	};convenient,method,to,execute,with,a,single,string,parameter,param,p1,single,string,parameter;public,list,t,execute,string,p1,throws,data,access,exception,return,execute,p1,null
SqlQuery -> public List<T> execute(String p1) throws DataAccessException;1385412762;Convenient method to execute with a single String parameter._@param p1 single String parameter;public List<T> execute(String p1) throws DataAccessException {_		return execute(p1, null)__	};convenient,method,to,execute,with,a,single,string,parameter,param,p1,single,string,parameter;public,list,t,execute,string,p1,throws,data,access,exception,return,execute,p1,null
SqlQuery -> public List<T> execute(String p1) throws DataAccessException;1413848647;Convenient method to execute with a single String parameter._@param p1 single String parameter;public List<T> execute(String p1) throws DataAccessException {_		return execute(p1, null)__	};convenient,method,to,execute,with,a,single,string,parameter,param,p1,single,string,parameter;public,list,t,execute,string,p1,throws,data,access,exception,return,execute,p1,null
SqlQuery -> public List<T> execute(String p1) throws DataAccessException;1495868221;Convenient method to execute with a single String parameter._@param p1 single String parameter;public List<T> execute(String p1) throws DataAccessException {_		return execute(p1, null)__	};convenient,method,to,execute,with,a,single,string,parameter,param,p1,single,string,parameter;public,list,t,execute,string,p1,throws,data,access,exception,return,execute,p1,null
SqlQuery -> public List<T> execute(String p1) throws DataAccessException;1496259743;Convenient method to execute with a single String parameter._@param p1 single String parameter;public List<T> execute(String p1) throws DataAccessException {_		return execute(p1, null)__	};convenient,method,to,execute,with,a,single,string,parameter,param,p1,single,string,parameter;public,list,t,execute,string,p1,throws,data,access,exception,return,execute,p1,null
SqlQuery -> public List<T> execute(String p1) throws DataAccessException;1496837955;Convenient method to execute with a single String parameter._@param p1 single String parameter;public List<T> execute(String p1) throws DataAccessException {_		return execute(p1, null)__	};convenient,method,to,execute,with,a,single,string,parameter,param,p1,single,string,parameter;public,list,t,execute,string,p1,throws,data,access,exception,return,execute,p1,null
SqlQuery -> public List<T> execute(String p1) throws DataAccessException;1530174524;Convenient method to execute with a single String parameter._@param p1 single String parameter;public List<T> execute(String p1) throws DataAccessException {_		return execute(p1, null)__	};convenient,method,to,execute,with,a,single,string,parameter,param,p1,single,string,parameter;public,list,t,execute,string,p1,throws,data,access,exception,return,execute,p1,null
SqlQuery -> public List<T> execute(String p1) throws DataAccessException;1530174524;Convenient method to execute with a single String parameter._@param p1 single String parameter;public List<T> execute(String p1) throws DataAccessException {_		return execute(p1, null)__	};convenient,method,to,execute,with,a,single,string,parameter,param,p1,single,string,parameter;public,list,t,execute,string,p1,throws,data,access,exception,return,execute,p1,null
SqlQuery -> public List<T> execute(String p1) throws DataAccessException;1530174524;Convenient method to execute with a single String parameter._@param p1 single String parameter;public List<T> execute(String p1) throws DataAccessException {_		return execute(p1, null)__	};convenient,method,to,execute,with,a,single,string,parameter,param,p1,single,string,parameter;public,list,t,execute,string,p1,throws,data,access,exception,return,execute,p1,null
SqlQuery -> public List<T> execute(long p1, Map context) throws DataAccessException;1328020251;Convenient method to execute with a single long parameter and context._@param p1 single long parameter_@param context the contextual information for object creation;public List<T> execute(long p1, Map context) throws DataAccessException {_		return execute(new Object[] {p1}, context)__	};convenient,method,to,execute,with,a,single,long,parameter,and,context,param,p1,single,long,parameter,param,context,the,contextual,information,for,object,creation;public,list,t,execute,long,p1,map,context,throws,data,access,exception,return,execute,new,object,p1,context
SqlQuery -> public List<T> execute(long p1, Map context) throws DataAccessException;1356735495;Convenient method to execute with a single long parameter and context._@param p1 single long parameter_@param context the contextual information for object creation;public List<T> execute(long p1, Map context) throws DataAccessException {_		return execute(new Object[] {p1}, context)__	};convenient,method,to,execute,with,a,single,long,parameter,and,context,param,p1,single,long,parameter,param,context,the,contextual,information,for,object,creation;public,list,t,execute,long,p1,map,context,throws,data,access,exception,return,execute,new,object,p1,context
