# id;timestamp;commentText;codeText;commentWords;codeWords
JdbcTemplateTests -> private void doTestCouldntGetConnectionInOperationWithExceptionTranslatorInitialized(boolean beanProperty) 			throws SQLException;1328020251;If beanProperty is true, initialize via exception translator bean property__if false, use afterPropertiesSet().;private void doTestCouldntGetConnectionInOperationWithExceptionTranslatorInitialized(boolean beanProperty)_			throws SQLException {__		SQLException sex = new SQLException("foo", "07xxx")___		ctrlConnection = MockControl.createControl(Connection.class)__		mockConnection = (Connection) ctrlConnection.getMock()__		_		_		_		_		ctrlConnection.replay()__	_		_		_		ctrlDataSource = MockControl.createControl(DataSource.class)__		mockDataSource = (DataSource) ctrlDataSource.getMock()__		_		_		_		_		mockDataSource.getConnection()__		ctrlDataSource.setThrowable(sex, 2)__		ctrlDataSource.replay()___		try {_			JdbcTemplate template2 = new JdbcTemplate()__			template2.setDataSource(mockDataSource)__			template2.setLazyInit(false)__			if (beanProperty) {_				_				template2.setExceptionTranslator(new SQLErrorCodeSQLExceptionTranslator(mockDataSource))__			}_			else {_				_				_				template2.afterPropertiesSet()__				template2.afterPropertiesSet()__			}_			RowCountCallbackHandler rcch = new RowCountCallbackHandler()__			template2.query(_				"SELECT ID, FORENAME FROM CUSTMR WHERE ID < 3",_				rcch)__			fail("Shouldn't have executed query without a connection")__		} _		catch (CannotGetJdbcConnectionException ex) {_			_			assertTrue("Check root cause", ex.getCause() == sex)__		}__		ctrlDataSource.verify()__		ctrlConnection.verify()__	};if,bean,property,is,true,initialize,via,exception,translator,bean,property,if,false,use,after,properties,set;private,void,do,test,couldnt,get,connection,in,operation,with,exception,translator,initialized,boolean,bean,property,throws,sqlexception,sqlexception,sex,new,sqlexception,foo,07xxx,ctrl,connection,mock,control,create,control,connection,class,mock,connection,connection,ctrl,connection,get,mock,ctrl,connection,replay,ctrl,data,source,mock,control,create,control,data,source,class,mock,data,source,data,source,ctrl,data,source,get,mock,mock,data,source,get,connection,ctrl,data,source,set,throwable,sex,2,ctrl,data,source,replay,try,jdbc,template,template2,new,jdbc,template,template2,set,data,source,mock,data,source,template2,set,lazy,init,false,if,bean,property,template2,set,exception,translator,new,sqlerror,code,sqlexception,translator,mock,data,source,else,template2,after,properties,set,template2,after,properties,set,row,count,callback,handler,rcch,new,row,count,callback,handler,template2,query,select,id,forename,from,custmr,where,id,3,rcch,fail,shouldn,t,have,executed,query,without,a,connection,catch,cannot,get,jdbc,connection,exception,ex,assert,true,check,root,cause,ex,get,cause,sex,ctrl,data,source,verify,ctrl,connection,verify
JdbcTemplateTests -> private void doTestCouldntGetConnectionInOperationWithExceptionTranslatorInitialized(boolean beanProperty) 			throws SQLException;1356735495;If beanProperty is true, initialize via exception translator bean property__if false, use afterPropertiesSet().;private void doTestCouldntGetConnectionInOperationWithExceptionTranslatorInitialized(boolean beanProperty)_			throws SQLException {_		SQLException sqlException = new SQLException("foo", "07xxx")__		this.dataSource = mock(DataSource.class)__		given(this.dataSource.getConnection()).willThrow(sqlException)__		this.template = new JdbcTemplate()__		this.template.setDataSource(this.dataSource)__		this.template.setLazyInit(false)__		if (beanProperty) {_			_			this.template.setExceptionTranslator(new SQLErrorCodeSQLExceptionTranslator(this.dataSource))__		}_		else {_			_			this.template.afterPropertiesSet()__		}_		RowCountCallbackHandler rcch = new RowCountCallbackHandler()__		this.thrown.expect(CannotGetJdbcConnectionException.class)__		this.thrown.expect(exceptionCause(sameInstance(sqlException)))__		this.template.query("SELECT ID, FORENAME FROM CUSTMR WHERE ID < 3", rcch)__	};if,bean,property,is,true,initialize,via,exception,translator,bean,property,if,false,use,after,properties,set;private,void,do,test,couldnt,get,connection,in,operation,with,exception,translator,initialized,boolean,bean,property,throws,sqlexception,sqlexception,sql,exception,new,sqlexception,foo,07xxx,this,data,source,mock,data,source,class,given,this,data,source,get,connection,will,throw,sql,exception,this,template,new,jdbc,template,this,template,set,data,source,this,data,source,this,template,set,lazy,init,false,if,bean,property,this,template,set,exception,translator,new,sqlerror,code,sqlexception,translator,this,data,source,else,this,template,after,properties,set,row,count,callback,handler,rcch,new,row,count,callback,handler,this,thrown,expect,cannot,get,jdbc,connection,exception,class,this,thrown,expect,exception,cause,same,instance,sql,exception,this,template,query,select,id,forename,from,custmr,where,id,3,rcch
JdbcTemplateTests -> private void doTestCouldntGetConnectionInOperationWithExceptionTranslatorInitialized(boolean beanProperty) 			throws SQLException;1357119417;If beanProperty is true, initialize via exception translator bean property__if false, use afterPropertiesSet().;private void doTestCouldntGetConnectionInOperationWithExceptionTranslatorInitialized(boolean beanProperty)_			throws SQLException {_		SQLException sqlException = new SQLException("foo", "07xxx")__		this.dataSource = mock(DataSource.class)__		given(this.dataSource.getConnection()).willThrow(sqlException)__		this.template = new JdbcTemplate()__		this.template.setDataSource(this.dataSource)__		this.template.setLazyInit(false)__		if (beanProperty) {_			_			this.template.setExceptionTranslator(new SQLErrorCodeSQLExceptionTranslator(this.dataSource))__		}_		else {_			_			this.template.afterPropertiesSet()__		}_		RowCountCallbackHandler rcch = new RowCountCallbackHandler()__		this.thrown.expect(CannotGetJdbcConnectionException.class)__		this.thrown.expect(exceptionCause(sameInstance(sqlException)))__		this.template.query("SELECT ID, FORENAME FROM CUSTMR WHERE ID < 3", rcch)__	};if,bean,property,is,true,initialize,via,exception,translator,bean,property,if,false,use,after,properties,set;private,void,do,test,couldnt,get,connection,in,operation,with,exception,translator,initialized,boolean,bean,property,throws,sqlexception,sqlexception,sql,exception,new,sqlexception,foo,07xxx,this,data,source,mock,data,source,class,given,this,data,source,get,connection,will,throw,sql,exception,this,template,new,jdbc,template,this,template,set,data,source,this,data,source,this,template,set,lazy,init,false,if,bean,property,this,template,set,exception,translator,new,sqlerror,code,sqlexception,translator,this,data,source,else,this,template,after,properties,set,row,count,callback,handler,rcch,new,row,count,callback,handler,this,thrown,expect,cannot,get,jdbc,connection,exception,class,this,thrown,expect,exception,cause,same,instance,sql,exception,this,template,query,select,id,forename,from,custmr,where,id,3,rcch
JdbcTemplateTests -> private void doTestCouldntGetConnectionInOperationWithExceptionTranslatorInitialized(boolean beanProperty) 			throws SQLException;1363208506;If beanProperty is true, initialize via exception translator bean property__if false, use afterPropertiesSet().;private void doTestCouldntGetConnectionInOperationWithExceptionTranslatorInitialized(boolean beanProperty)_			throws SQLException {_		SQLException sqlException = new SQLException("foo", "07xxx")__		this.dataSource = mock(DataSource.class)__		given(this.dataSource.getConnection()).willThrow(sqlException)__		this.template = new JdbcTemplate()__		this.template.setDataSource(this.dataSource)__		this.template.setLazyInit(false)__		if (beanProperty) {_			_			this.template.setExceptionTranslator(new SQLErrorCodeSQLExceptionTranslator(this.dataSource))__		}_		else {_			_			this.template.afterPropertiesSet()__		}_		RowCountCallbackHandler rcch = new RowCountCallbackHandler()__		this.thrown.expect(CannotGetJdbcConnectionException.class)__		this.thrown.expect(exceptionCause(sameInstance(sqlException)))__		this.template.query("SELECT ID, FORENAME FROM CUSTMR WHERE ID < 3", rcch)__	};if,bean,property,is,true,initialize,via,exception,translator,bean,property,if,false,use,after,properties,set;private,void,do,test,couldnt,get,connection,in,operation,with,exception,translator,initialized,boolean,bean,property,throws,sqlexception,sqlexception,sql,exception,new,sqlexception,foo,07xxx,this,data,source,mock,data,source,class,given,this,data,source,get,connection,will,throw,sql,exception,this,template,new,jdbc,template,this,template,set,data,source,this,data,source,this,template,set,lazy,init,false,if,bean,property,this,template,set,exception,translator,new,sqlerror,code,sqlexception,translator,this,data,source,else,this,template,after,properties,set,row,count,callback,handler,rcch,new,row,count,callback,handler,this,thrown,expect,cannot,get,jdbc,connection,exception,class,this,thrown,expect,exception,cause,same,instance,sql,exception,this,template,query,select,id,forename,from,custmr,where,id,3,rcch
JdbcTemplateTests -> private void doTestCouldntGetConnectionInOperationWithExceptionTranslatorInitialized(boolean beanProperty) 			throws SQLException;1372363092;If beanProperty is true, initialize via exception translator bean property__if false, use afterPropertiesSet().;private void doTestCouldntGetConnectionInOperationWithExceptionTranslatorInitialized(boolean beanProperty)_			throws SQLException {_		SQLException sqlException = new SQLException("foo", "07xxx")__		this.dataSource = mock(DataSource.class)__		given(this.dataSource.getConnection()).willThrow(sqlException)__		this.template = new JdbcTemplate()__		this.template.setDataSource(this.dataSource)__		this.template.setLazyInit(false)__		if (beanProperty) {_			_			this.template.setExceptionTranslator(new SQLErrorCodeSQLExceptionTranslator(this.dataSource))__		}_		else {_			_			this.template.afterPropertiesSet()__		}_		RowCountCallbackHandler rcch = new RowCountCallbackHandler()__		this.thrown.expect(CannotGetJdbcConnectionException.class)__		this.thrown.expect(exceptionCause(sameInstance(sqlException)))__		this.template.query("SELECT ID, FORENAME FROM CUSTMR WHERE ID < 3", rcch)__	};if,bean,property,is,true,initialize,via,exception,translator,bean,property,if,false,use,after,properties,set;private,void,do,test,couldnt,get,connection,in,operation,with,exception,translator,initialized,boolean,bean,property,throws,sqlexception,sqlexception,sql,exception,new,sqlexception,foo,07xxx,this,data,source,mock,data,source,class,given,this,data,source,get,connection,will,throw,sql,exception,this,template,new,jdbc,template,this,template,set,data,source,this,data,source,this,template,set,lazy,init,false,if,bean,property,this,template,set,exception,translator,new,sqlerror,code,sqlexception,translator,this,data,source,else,this,template,after,properties,set,row,count,callback,handler,rcch,new,row,count,callback,handler,this,thrown,expect,cannot,get,jdbc,connection,exception,class,this,thrown,expect,exception,cause,same,instance,sql,exception,this,template,query,select,id,forename,from,custmr,where,id,3,rcch
JdbcTemplateTests -> private void doTestCouldntGetConnectionInOperationWithExceptionTranslatorInitialized(boolean beanProperty) 			throws SQLException;1398144444;If beanProperty is true, initialize via exception translator bean property__if false, use afterPropertiesSet().;private void doTestCouldntGetConnectionInOperationWithExceptionTranslatorInitialized(boolean beanProperty)_			throws SQLException {_		SQLException sqlException = new SQLException("foo", "07xxx")__		this.dataSource = mock(DataSource.class)__		given(this.dataSource.getConnection()).willThrow(sqlException)__		this.template = new JdbcTemplate()__		this.template.setDataSource(this.dataSource)__		this.template.setLazyInit(false)__		if (beanProperty) {_			_			this.template.setExceptionTranslator(new SQLErrorCodeSQLExceptionTranslator(this.dataSource))__		}_		else {_			_			this.template.afterPropertiesSet()__		}_		RowCountCallbackHandler rcch = new RowCountCallbackHandler()__		this.thrown.expect(CannotGetJdbcConnectionException.class)__		this.thrown.expect(exceptionCause(sameInstance(sqlException)))__		this.template.query("SELECT ID, FORENAME FROM CUSTMR WHERE ID < 3", rcch)__	};if,bean,property,is,true,initialize,via,exception,translator,bean,property,if,false,use,after,properties,set;private,void,do,test,couldnt,get,connection,in,operation,with,exception,translator,initialized,boolean,bean,property,throws,sqlexception,sqlexception,sql,exception,new,sqlexception,foo,07xxx,this,data,source,mock,data,source,class,given,this,data,source,get,connection,will,throw,sql,exception,this,template,new,jdbc,template,this,template,set,data,source,this,data,source,this,template,set,lazy,init,false,if,bean,property,this,template,set,exception,translator,new,sqlerror,code,sqlexception,translator,this,data,source,else,this,template,after,properties,set,row,count,callback,handler,rcch,new,row,count,callback,handler,this,thrown,expect,cannot,get,jdbc,connection,exception,class,this,thrown,expect,exception,cause,same,instance,sql,exception,this,template,query,select,id,forename,from,custmr,where,id,3,rcch
JdbcTemplateTests -> private void doTestCouldntGetConnectionInOperationWithExceptionTranslatorInitialized(boolean beanProperty) 			throws SQLException;1413848647;If beanProperty is true, initialize via exception translator bean property__if false, use afterPropertiesSet().;private void doTestCouldntGetConnectionInOperationWithExceptionTranslatorInitialized(boolean beanProperty)_			throws SQLException {_		SQLException sqlException = new SQLException("foo", "07xxx")__		this.dataSource = mock(DataSource.class)__		given(this.dataSource.getConnection()).willThrow(sqlException)__		this.template = new JdbcTemplate()__		this.template.setDataSource(this.dataSource)__		this.template.setLazyInit(false)__		if (beanProperty) {_			_			this.template.setExceptionTranslator(new SQLErrorCodeSQLExceptionTranslator(this.dataSource))__		}_		else {_			_			this.template.afterPropertiesSet()__		}_		RowCountCallbackHandler rcch = new RowCountCallbackHandler()__		this.thrown.expect(CannotGetJdbcConnectionException.class)__		this.thrown.expect(exceptionCause(sameInstance(sqlException)))__		this.template.query("SELECT ID, FORENAME FROM CUSTMR WHERE ID < 3", rcch)__	};if,bean,property,is,true,initialize,via,exception,translator,bean,property,if,false,use,after,properties,set;private,void,do,test,couldnt,get,connection,in,operation,with,exception,translator,initialized,boolean,bean,property,throws,sqlexception,sqlexception,sql,exception,new,sqlexception,foo,07xxx,this,data,source,mock,data,source,class,given,this,data,source,get,connection,will,throw,sql,exception,this,template,new,jdbc,template,this,template,set,data,source,this,data,source,this,template,set,lazy,init,false,if,bean,property,this,template,set,exception,translator,new,sqlerror,code,sqlexception,translator,this,data,source,else,this,template,after,properties,set,row,count,callback,handler,rcch,new,row,count,callback,handler,this,thrown,expect,cannot,get,jdbc,connection,exception,class,this,thrown,expect,exception,cause,same,instance,sql,exception,this,template,query,select,id,forename,from,custmr,where,id,3,rcch
JdbcTemplateTests -> private void doTestCouldntGetConnectionInOperationWithExceptionTranslatorInitialized(boolean beanProperty) 			throws SQLException;1467730834;If beanProperty is true, initialize via exception translator bean property__if false, use afterPropertiesSet().;private void doTestCouldntGetConnectionInOperationWithExceptionTranslatorInitialized(boolean beanProperty)_			throws SQLException {_		SQLException sqlException = new SQLException("foo", "07xxx")__		this.dataSource = mock(DataSource.class)__		given(this.dataSource.getConnection()).willThrow(sqlException)__		this.template = new JdbcTemplate()__		this.template.setDataSource(this.dataSource)__		this.template.setLazyInit(false)__		if (beanProperty) {_			_			this.template.setExceptionTranslator(new SQLErrorCodeSQLExceptionTranslator(this.dataSource))__		}_		else {_			_			this.template.afterPropertiesSet()__		}_		RowCountCallbackHandler rcch = new RowCountCallbackHandler()__		this.thrown.expect(CannotGetJdbcConnectionException.class)__		this.thrown.expect(exceptionCause(sameInstance(sqlException)))__		this.template.query("SELECT ID, FORENAME FROM CUSTMR WHERE ID < 3", rcch)__	};if,bean,property,is,true,initialize,via,exception,translator,bean,property,if,false,use,after,properties,set;private,void,do,test,couldnt,get,connection,in,operation,with,exception,translator,initialized,boolean,bean,property,throws,sqlexception,sqlexception,sql,exception,new,sqlexception,foo,07xxx,this,data,source,mock,data,source,class,given,this,data,source,get,connection,will,throw,sql,exception,this,template,new,jdbc,template,this,template,set,data,source,this,data,source,this,template,set,lazy,init,false,if,bean,property,this,template,set,exception,translator,new,sqlerror,code,sqlexception,translator,this,data,source,else,this,template,after,properties,set,row,count,callback,handler,rcch,new,row,count,callback,handler,this,thrown,expect,cannot,get,jdbc,connection,exception,class,this,thrown,expect,exception,cause,same,instance,sql,exception,this,template,query,select,id,forename,from,custmr,where,id,3,rcch
JdbcTemplateTests -> private void doTestCouldntGetConnectionInOperationWithExceptionTranslatorInitialized(boolean beanProperty) 			throws SQLException;1487178248;If beanProperty is true, initialize via exception translator bean property__if false, use afterPropertiesSet().;private void doTestCouldntGetConnectionInOperationWithExceptionTranslatorInitialized(boolean beanProperty)_			throws SQLException {_		SQLException sqlException = new SQLException("foo", "07xxx")__		this.dataSource = mock(DataSource.class)__		given(this.dataSource.getConnection()).willThrow(sqlException)__		this.template = new JdbcTemplate()__		this.template.setDataSource(this.dataSource)__		this.template.setLazyInit(false)__		if (beanProperty) {_			_			this.template.setExceptionTranslator(new SQLErrorCodeSQLExceptionTranslator(this.dataSource))__		}_		else {_			_			this.template.afterPropertiesSet()__		}_		RowCountCallbackHandler rcch = new RowCountCallbackHandler()__		this.thrown.expect(CannotGetJdbcConnectionException.class)__		this.thrown.expect(exceptionCause(sameInstance(sqlException)))__		this.template.query("SELECT ID, FORENAME FROM CUSTMR WHERE ID < 3", rcch)__	};if,bean,property,is,true,initialize,via,exception,translator,bean,property,if,false,use,after,properties,set;private,void,do,test,couldnt,get,connection,in,operation,with,exception,translator,initialized,boolean,bean,property,throws,sqlexception,sqlexception,sql,exception,new,sqlexception,foo,07xxx,this,data,source,mock,data,source,class,given,this,data,source,get,connection,will,throw,sql,exception,this,template,new,jdbc,template,this,template,set,data,source,this,data,source,this,template,set,lazy,init,false,if,bean,property,this,template,set,exception,translator,new,sqlerror,code,sqlexception,translator,this,data,source,else,this,template,after,properties,set,row,count,callback,handler,rcch,new,row,count,callback,handler,this,thrown,expect,cannot,get,jdbc,connection,exception,class,this,thrown,expect,exception,cause,same,instance,sql,exception,this,template,query,select,id,forename,from,custmr,where,id,3,rcch
JdbcTemplateTests -> private void doTestCouldntGetConnectionInOperationWithExceptionTranslatorInitialized(boolean beanProperty) 			throws SQLException;1487255851;If beanProperty is true, initialize via exception translator bean property__if false, use afterPropertiesSet().;private void doTestCouldntGetConnectionInOperationWithExceptionTranslatorInitialized(boolean beanProperty)_			throws SQLException {__		SQLException sqlException = new SQLException("foo", "07xxx")__		this.dataSource = mock(DataSource.class)__		given(this.dataSource.getConnection()).willThrow(sqlException)__		this.template = new JdbcTemplate()__		this.template.setDataSource(this.dataSource)__		this.template.setLazyInit(false)__		if (beanProperty) {_			_			this.template.setExceptionTranslator(new SQLErrorCodeSQLExceptionTranslator(this.dataSource))__		}_		else {_			_			this.template.afterPropertiesSet()__		}_		RowCountCallbackHandler rcch = new RowCountCallbackHandler()__		this.thrown.expect(CannotGetJdbcConnectionException.class)__		this.thrown.expect(exceptionCause(sameInstance(sqlException)))__		this.template.query("SELECT ID, FORENAME FROM CUSTMR WHERE ID < 3", rcch)__	};if,bean,property,is,true,initialize,via,exception,translator,bean,property,if,false,use,after,properties,set;private,void,do,test,couldnt,get,connection,in,operation,with,exception,translator,initialized,boolean,bean,property,throws,sqlexception,sqlexception,sql,exception,new,sqlexception,foo,07xxx,this,data,source,mock,data,source,class,given,this,data,source,get,connection,will,throw,sql,exception,this,template,new,jdbc,template,this,template,set,data,source,this,data,source,this,template,set,lazy,init,false,if,bean,property,this,template,set,exception,translator,new,sqlerror,code,sqlexception,translator,this,data,source,else,this,template,after,properties,set,row,count,callback,handler,rcch,new,row,count,callback,handler,this,thrown,expect,cannot,get,jdbc,connection,exception,class,this,thrown,expect,exception,cause,same,instance,sql,exception,this,template,query,select,id,forename,from,custmr,where,id,3,rcch
JdbcTemplateTests -> private void doTestCouldntGetConnectionInOperationWithExceptionTranslatorInitialized(boolean beanProperty) 			throws SQLException;1518810557;If beanProperty is true, initialize via exception translator bean property__if false, use afterPropertiesSet().;private void doTestCouldntGetConnectionInOperationWithExceptionTranslatorInitialized(boolean beanProperty)_			throws SQLException {__		SQLException sqlException = new SQLException("foo", "07xxx")__		this.dataSource = mock(DataSource.class)__		given(this.dataSource.getConnection()).willThrow(sqlException)__		this.template = new JdbcTemplate()__		this.template.setDataSource(this.dataSource)__		this.template.setLazyInit(false)__		if (beanProperty) {_			_			this.template.setExceptionTranslator(new SQLErrorCodeSQLExceptionTranslator(this.dataSource))__		}_		else {_			_			this.template.afterPropertiesSet()__		}_		RowCountCallbackHandler rcch = new RowCountCallbackHandler()__		this.thrown.expect(CannotGetJdbcConnectionException.class)__		this.thrown.expect(exceptionCause(sameInstance(sqlException)))__		this.template.query("SELECT ID, FORENAME FROM CUSTMR WHERE ID < 3", rcch)__	};if,bean,property,is,true,initialize,via,exception,translator,bean,property,if,false,use,after,properties,set;private,void,do,test,couldnt,get,connection,in,operation,with,exception,translator,initialized,boolean,bean,property,throws,sqlexception,sqlexception,sql,exception,new,sqlexception,foo,07xxx,this,data,source,mock,data,source,class,given,this,data,source,get,connection,will,throw,sql,exception,this,template,new,jdbc,template,this,template,set,data,source,this,data,source,this,template,set,lazy,init,false,if,bean,property,this,template,set,exception,translator,new,sqlerror,code,sqlexception,translator,this,data,source,else,this,template,after,properties,set,row,count,callback,handler,rcch,new,row,count,callback,handler,this,thrown,expect,cannot,get,jdbc,connection,exception,class,this,thrown,expect,exception,cause,same,instance,sql,exception,this,template,query,select,id,forename,from,custmr,where,id,3,rcch
JdbcTemplateTests -> private void doTestCouldntGetConnectionInOperationWithExceptionTranslatorInitialized(boolean beanProperty) 			throws SQLException;1528313484;If beanProperty is true, initialize via exception translator bean property__if false, use afterPropertiesSet().;private void doTestCouldntGetConnectionInOperationWithExceptionTranslatorInitialized(boolean beanProperty)_			throws SQLException {__		SQLException sqlException = new SQLException("foo", "07xxx")__		this.dataSource = mock(DataSource.class)__		given(this.dataSource.getConnection()).willThrow(sqlException)__		this.template = new JdbcTemplate()__		this.template.setDataSource(this.dataSource)__		this.template.setLazyInit(false)__		if (beanProperty) {_			_			this.template.setExceptionTranslator(new SQLErrorCodeSQLExceptionTranslator(this.dataSource))__		}_		else {_			_			this.template.afterPropertiesSet()__		}_		RowCountCallbackHandler rcch = new RowCountCallbackHandler()__		this.thrown.expect(CannotGetJdbcConnectionException.class)__		this.thrown.expect(exceptionCause(sameInstance(sqlException)))__		this.template.query("SELECT ID, FORENAME FROM CUSTMR WHERE ID < 3", rcch)__	};if,bean,property,is,true,initialize,via,exception,translator,bean,property,if,false,use,after,properties,set;private,void,do,test,couldnt,get,connection,in,operation,with,exception,translator,initialized,boolean,bean,property,throws,sqlexception,sqlexception,sql,exception,new,sqlexception,foo,07xxx,this,data,source,mock,data,source,class,given,this,data,source,get,connection,will,throw,sql,exception,this,template,new,jdbc,template,this,template,set,data,source,this,data,source,this,template,set,lazy,init,false,if,bean,property,this,template,set,exception,translator,new,sqlerror,code,sqlexception,translator,this,data,source,else,this,template,after,properties,set,row,count,callback,handler,rcch,new,row,count,callback,handler,this,thrown,expect,cannot,get,jdbc,connection,exception,class,this,thrown,expect,exception,cause,same,instance,sql,exception,this,template,query,select,id,forename,from,custmr,where,id,3,rcch
JdbcTemplateTests -> private void doTestCouldntGetConnectionInOperationWithExceptionTranslatorInitialized(boolean beanProperty) 			throws SQLException;1528719423;If beanProperty is true, initialize via exception translator bean property__if false, use afterPropertiesSet().;private void doTestCouldntGetConnectionInOperationWithExceptionTranslatorInitialized(boolean beanProperty)_			throws SQLException {__		SQLException sqlException = new SQLException("foo", "07xxx")__		this.dataSource = mock(DataSource.class)__		given(this.dataSource.getConnection()).willThrow(sqlException)__		this.template = new JdbcTemplate()__		this.template.setDataSource(this.dataSource)__		this.template.setLazyInit(false)__		if (beanProperty) {_			_			this.template.setExceptionTranslator(new SQLErrorCodeSQLExceptionTranslator(this.dataSource))__		}_		else {_			_			this.template.afterPropertiesSet()__		}_		RowCountCallbackHandler rcch = new RowCountCallbackHandler()__		this.thrown.expect(CannotGetJdbcConnectionException.class)__		this.thrown.expect(exceptionCause(sameInstance(sqlException)))__		this.template.query("SELECT ID, FORENAME FROM CUSTMR WHERE ID < 3", rcch)__	};if,bean,property,is,true,initialize,via,exception,translator,bean,property,if,false,use,after,properties,set;private,void,do,test,couldnt,get,connection,in,operation,with,exception,translator,initialized,boolean,bean,property,throws,sqlexception,sqlexception,sql,exception,new,sqlexception,foo,07xxx,this,data,source,mock,data,source,class,given,this,data,source,get,connection,will,throw,sql,exception,this,template,new,jdbc,template,this,template,set,data,source,this,data,source,this,template,set,lazy,init,false,if,bean,property,this,template,set,exception,translator,new,sqlerror,code,sqlexception,translator,this,data,source,else,this,template,after,properties,set,row,count,callback,handler,rcch,new,row,count,callback,handler,this,thrown,expect,cannot,get,jdbc,connection,exception,class,this,thrown,expect,exception,cause,same,instance,sql,exception,this,template,query,select,id,forename,from,custmr,where,id,3,rcch
JdbcTemplateTests -> private void doTestCouldntGetConnectionInOperationWithExceptionTranslatorInitialized(boolean beanProperty) 			throws SQLException;1533741555;If beanProperty is true, initialize via exception translator bean property__if false, use afterPropertiesSet().;private void doTestCouldntGetConnectionInOperationWithExceptionTranslatorInitialized(boolean beanProperty)_			throws SQLException {__		SQLException sqlException = new SQLException("foo", "07xxx")__		this.dataSource = mock(DataSource.class)__		given(this.dataSource.getConnection()).willThrow(sqlException)__		this.template = new JdbcTemplate()__		this.template.setDataSource(this.dataSource)__		this.template.setLazyInit(false)__		if (beanProperty) {_			_			this.template.setExceptionTranslator(new SQLErrorCodeSQLExceptionTranslator(this.dataSource))__		}_		else {_			_			this.template.afterPropertiesSet()__		}_		RowCountCallbackHandler rcch = new RowCountCallbackHandler()__		this.thrown.expect(CannotGetJdbcConnectionException.class)__		this.thrown.expect(exceptionCause(sameInstance(sqlException)))__		this.template.query("SELECT ID, FORENAME FROM CUSTMR WHERE ID < 3", rcch)__	};if,bean,property,is,true,initialize,via,exception,translator,bean,property,if,false,use,after,properties,set;private,void,do,test,couldnt,get,connection,in,operation,with,exception,translator,initialized,boolean,bean,property,throws,sqlexception,sqlexception,sql,exception,new,sqlexception,foo,07xxx,this,data,source,mock,data,source,class,given,this,data,source,get,connection,will,throw,sql,exception,this,template,new,jdbc,template,this,template,set,data,source,this,data,source,this,template,set,lazy,init,false,if,bean,property,this,template,set,exception,translator,new,sqlerror,code,sqlexception,translator,this,data,source,else,this,template,after,properties,set,row,count,callback,handler,rcch,new,row,count,callback,handler,this,thrown,expect,cannot,get,jdbc,connection,exception,class,this,thrown,expect,exception,cause,same,instance,sql,exception,this,template,query,select,id,forename,from,custmr,where,id,3,rcch
JdbcTemplateTests -> private void doTestCouldntGetConnectionInOperationWithExceptionTranslatorInitialized(boolean beanProperty) 			throws SQLException;1533774396;If beanProperty is true, initialize via exception translator bean property__if false, use afterPropertiesSet().;private void doTestCouldntGetConnectionInOperationWithExceptionTranslatorInitialized(boolean beanProperty)_			throws SQLException {__		SQLException sqlException = new SQLException("foo", "07xxx")__		this.dataSource = mock(DataSource.class)__		given(this.dataSource.getConnection()).willThrow(sqlException)__		this.template = new JdbcTemplate()__		this.template.setDataSource(this.dataSource)__		this.template.setLazyInit(false)__		if (beanProperty) {_			_			this.template.setExceptionTranslator(new SQLErrorCodeSQLExceptionTranslator(this.dataSource))__		}_		else {_			_			this.template.afterPropertiesSet()__		}_		RowCountCallbackHandler rcch = new RowCountCallbackHandler()__		this.thrown.expect(CannotGetJdbcConnectionException.class)__		this.thrown.expect(exceptionCause(sameInstance(sqlException)))__		this.template.query("SELECT ID, FORENAME FROM CUSTMR WHERE ID < 3", rcch)__	};if,bean,property,is,true,initialize,via,exception,translator,bean,property,if,false,use,after,properties,set;private,void,do,test,couldnt,get,connection,in,operation,with,exception,translator,initialized,boolean,bean,property,throws,sqlexception,sqlexception,sql,exception,new,sqlexception,foo,07xxx,this,data,source,mock,data,source,class,given,this,data,source,get,connection,will,throw,sql,exception,this,template,new,jdbc,template,this,template,set,data,source,this,data,source,this,template,set,lazy,init,false,if,bean,property,this,template,set,exception,translator,new,sqlerror,code,sqlexception,translator,this,data,source,else,this,template,after,properties,set,row,count,callback,handler,rcch,new,row,count,callback,handler,this,thrown,expect,cannot,get,jdbc,connection,exception,class,this,thrown,expect,exception,cause,same,instance,sql,exception,this,template,query,select,id,forename,from,custmr,where,id,3,rcch
JdbcTemplateTests -> @Test 	public void testExceptionComesBack() throws Exception;1356735495;Test that we see a runtime exception come back.;@Test_	public void testExceptionComesBack() throws Exception {_		final String sql = "SELECT ID FROM CUSTMR"__		final RuntimeException runtimeException = new RuntimeException("Expected")___		given(this.resultSet.next()).willReturn(true)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		this.thrown.expect(sameInstance(runtimeException))__		try {_			this.template.query(sql, new RowCallbackHandler() {_				@Override_				public void processRow(ResultSet rs) {_					throw runtimeException__				}_			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};test,that,we,see,a,runtime,exception,come,back;test,public,void,test,exception,comes,back,throws,exception,final,string,sql,select,id,from,custmr,final,runtime,exception,runtime,exception,new,runtime,exception,expected,given,this,result,set,next,will,return,true,given,this,connection,create,statement,will,return,this,prepared,statement,this,thrown,expect,same,instance,runtime,exception,try,this,template,query,sql,new,row,callback,handler,override,public,void,process,row,result,set,rs,throw,runtime,exception,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testExceptionComesBack() throws Exception;1357119417;Test that we see a runtime exception come back.;@Test_	public void testExceptionComesBack() throws Exception {_		final String sql = "SELECT ID FROM CUSTMR"__		final RuntimeException runtimeException = new RuntimeException("Expected")___		given(this.resultSet.next()).willReturn(true)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		this.thrown.expect(sameInstance(runtimeException))__		try {_			this.template.query(sql, new RowCallbackHandler() {_				@Override_				public void processRow(ResultSet rs) {_					throw runtimeException__				}_			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};test,that,we,see,a,runtime,exception,come,back;test,public,void,test,exception,comes,back,throws,exception,final,string,sql,select,id,from,custmr,final,runtime,exception,runtime,exception,new,runtime,exception,expected,given,this,result,set,next,will,return,true,given,this,connection,create,statement,will,return,this,prepared,statement,this,thrown,expect,same,instance,runtime,exception,try,this,template,query,sql,new,row,callback,handler,override,public,void,process,row,result,set,rs,throw,runtime,exception,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testExceptionComesBack() throws Exception;1363208506;Test that we see a runtime exception come back.;@Test_	public void testExceptionComesBack() throws Exception {_		final String sql = "SELECT ID FROM CUSTMR"__		final RuntimeException runtimeException = new RuntimeException("Expected")___		given(this.resultSet.next()).willReturn(true)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		this.thrown.expect(sameInstance(runtimeException))__		try {_			this.template.query(sql, new RowCallbackHandler() {_				@Override_				public void processRow(ResultSet rs) {_					throw runtimeException__				}_			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};test,that,we,see,a,runtime,exception,come,back;test,public,void,test,exception,comes,back,throws,exception,final,string,sql,select,id,from,custmr,final,runtime,exception,runtime,exception,new,runtime,exception,expected,given,this,result,set,next,will,return,true,given,this,connection,create,statement,will,return,this,prepared,statement,this,thrown,expect,same,instance,runtime,exception,try,this,template,query,sql,new,row,callback,handler,override,public,void,process,row,result,set,rs,throw,runtime,exception,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testExceptionComesBack() throws Exception;1372363092;Test that we see a runtime exception come back.;@Test_	public void testExceptionComesBack() throws Exception {_		final String sql = "SELECT ID FROM CUSTMR"__		final RuntimeException runtimeException = new RuntimeException("Expected")___		given(this.resultSet.next()).willReturn(true)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		this.thrown.expect(sameInstance(runtimeException))__		try {_			this.template.query(sql, new RowCallbackHandler() {_				@Override_				public void processRow(ResultSet rs) {_					throw runtimeException__				}_			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};test,that,we,see,a,runtime,exception,come,back;test,public,void,test,exception,comes,back,throws,exception,final,string,sql,select,id,from,custmr,final,runtime,exception,runtime,exception,new,runtime,exception,expected,given,this,result,set,next,will,return,true,given,this,connection,create,statement,will,return,this,prepared,statement,this,thrown,expect,same,instance,runtime,exception,try,this,template,query,sql,new,row,callback,handler,override,public,void,process,row,result,set,rs,throw,runtime,exception,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testExceptionComesBack() throws Exception;1398144444;Test that we see a runtime exception come back.;@Test_	public void testExceptionComesBack() throws Exception {_		final String sql = "SELECT ID FROM CUSTMR"__		final RuntimeException runtimeException = new RuntimeException("Expected")___		given(this.resultSet.next()).willReturn(true)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		this.thrown.expect(sameInstance(runtimeException))__		try {_			this.template.query(sql, new RowCallbackHandler() {_				@Override_				public void processRow(ResultSet rs) {_					throw runtimeException__				}_			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};test,that,we,see,a,runtime,exception,come,back;test,public,void,test,exception,comes,back,throws,exception,final,string,sql,select,id,from,custmr,final,runtime,exception,runtime,exception,new,runtime,exception,expected,given,this,result,set,next,will,return,true,given,this,connection,create,statement,will,return,this,prepared,statement,this,thrown,expect,same,instance,runtime,exception,try,this,template,query,sql,new,row,callback,handler,override,public,void,process,row,result,set,rs,throw,runtime,exception,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testExceptionComesBack() throws Exception;1413848647;Test that we see a runtime exception come back.;@Test_	public void testExceptionComesBack() throws Exception {_		final String sql = "SELECT ID FROM CUSTMR"__		final RuntimeException runtimeException = new RuntimeException("Expected")___		given(this.resultSet.next()).willReturn(true)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		this.thrown.expect(sameInstance(runtimeException))__		try {_			this.template.query(sql, new RowCallbackHandler() {_				@Override_				public void processRow(ResultSet rs) {_					throw runtimeException__				}_			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};test,that,we,see,a,runtime,exception,come,back;test,public,void,test,exception,comes,back,throws,exception,final,string,sql,select,id,from,custmr,final,runtime,exception,runtime,exception,new,runtime,exception,expected,given,this,result,set,next,will,return,true,given,this,connection,create,statement,will,return,this,prepared,statement,this,thrown,expect,same,instance,runtime,exception,try,this,template,query,sql,new,row,callback,handler,override,public,void,process,row,result,set,rs,throw,runtime,exception,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testExceptionComesBack() throws Exception;1467730834;Test that we see a runtime exception come back.;@Test_	public void testExceptionComesBack() throws Exception {_		final String sql = "SELECT ID FROM CUSTMR"__		final RuntimeException runtimeException = new RuntimeException("Expected")___		given(this.resultSet.next()).willReturn(true)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		this.thrown.expect(sameInstance(runtimeException))__		try {_			this.template.query(sql, new RowCallbackHandler() {_				@Override_				public void processRow(ResultSet rs) {_					throw runtimeException__				}_			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};test,that,we,see,a,runtime,exception,come,back;test,public,void,test,exception,comes,back,throws,exception,final,string,sql,select,id,from,custmr,final,runtime,exception,runtime,exception,new,runtime,exception,expected,given,this,result,set,next,will,return,true,given,this,connection,create,statement,will,return,this,prepared,statement,this,thrown,expect,same,instance,runtime,exception,try,this,template,query,sql,new,row,callback,handler,override,public,void,process,row,result,set,rs,throw,runtime,exception,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testExceptionComesBack() throws Exception;1487178248;Test that we see a runtime exception come back.;@Test_	public void testExceptionComesBack() throws Exception {_		final String sql = "SELECT ID FROM CUSTMR"__		final RuntimeException runtimeException = new RuntimeException("Expected")___		given(this.resultSet.next()).willReturn(true)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		this.thrown.expect(sameInstance(runtimeException))__		try {_			this.template.query(sql, new RowCallbackHandler() {_				@Override_				public void processRow(ResultSet rs) {_					throw runtimeException__				}_			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};test,that,we,see,a,runtime,exception,come,back;test,public,void,test,exception,comes,back,throws,exception,final,string,sql,select,id,from,custmr,final,runtime,exception,runtime,exception,new,runtime,exception,expected,given,this,result,set,next,will,return,true,given,this,connection,create,statement,will,return,this,prepared,statement,this,thrown,expect,same,instance,runtime,exception,try,this,template,query,sql,new,row,callback,handler,override,public,void,process,row,result,set,rs,throw,runtime,exception,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testExceptionComesBack() throws Exception;1487255851;Test that we see a runtime exception come back.;@Test_	public void testExceptionComesBack() throws Exception {_		final String sql = "SELECT ID FROM CUSTMR"__		final RuntimeException runtimeException = new RuntimeException("Expected")___		given(this.resultSet.next()).willReturn(true)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		this.thrown.expect(sameInstance(runtimeException))__		try {_			this.template.query(sql, new RowCallbackHandler() {_				@Override_				public void processRow(ResultSet rs) {_					throw runtimeException__				}_			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};test,that,we,see,a,runtime,exception,come,back;test,public,void,test,exception,comes,back,throws,exception,final,string,sql,select,id,from,custmr,final,runtime,exception,runtime,exception,new,runtime,exception,expected,given,this,result,set,next,will,return,true,given,this,connection,create,statement,will,return,this,prepared,statement,this,thrown,expect,same,instance,runtime,exception,try,this,template,query,sql,new,row,callback,handler,override,public,void,process,row,result,set,rs,throw,runtime,exception,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testExceptionComesBack() throws Exception;1518810557;Test that we see a runtime exception come back.;@Test_	public void testExceptionComesBack() throws Exception {_		final String sql = "SELECT ID FROM CUSTMR"__		final RuntimeException runtimeException = new RuntimeException("Expected")___		given(this.resultSet.next()).willReturn(true)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		this.thrown.expect(sameInstance(runtimeException))__		try {_			this.template.query(sql, new RowCallbackHandler() {_				@Override_				public void processRow(ResultSet rs) {_					throw runtimeException__				}_			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};test,that,we,see,a,runtime,exception,come,back;test,public,void,test,exception,comes,back,throws,exception,final,string,sql,select,id,from,custmr,final,runtime,exception,runtime,exception,new,runtime,exception,expected,given,this,result,set,next,will,return,true,given,this,connection,create,statement,will,return,this,prepared,statement,this,thrown,expect,same,instance,runtime,exception,try,this,template,query,sql,new,row,callback,handler,override,public,void,process,row,result,set,rs,throw,runtime,exception,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testExceptionComesBack() throws Exception;1528313484;Test that we see a runtime exception come back.;@Test_	public void testExceptionComesBack() throws Exception {_		final String sql = "SELECT ID FROM CUSTMR"__		final RuntimeException runtimeException = new RuntimeException("Expected")___		given(this.resultSet.next()).willReturn(true)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		this.thrown.expect(sameInstance(runtimeException))__		try {_			this.template.query(sql, (RowCallbackHandler) rs -> {_				throw runtimeException__			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};test,that,we,see,a,runtime,exception,come,back;test,public,void,test,exception,comes,back,throws,exception,final,string,sql,select,id,from,custmr,final,runtime,exception,runtime,exception,new,runtime,exception,expected,given,this,result,set,next,will,return,true,given,this,connection,create,statement,will,return,this,prepared,statement,this,thrown,expect,same,instance,runtime,exception,try,this,template,query,sql,row,callback,handler,rs,throw,runtime,exception,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testExceptionComesBack() throws Exception;1528719423;Test that we see a runtime exception come back.;@Test_	public void testExceptionComesBack() throws Exception {_		final String sql = "SELECT ID FROM CUSTMR"__		final RuntimeException runtimeException = new RuntimeException("Expected")___		given(this.resultSet.next()).willReturn(true)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		this.thrown.expect(sameInstance(runtimeException))__		try {_			this.template.query(sql, (RowCallbackHandler) rs -> {_				throw runtimeException__			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};test,that,we,see,a,runtime,exception,come,back;test,public,void,test,exception,comes,back,throws,exception,final,string,sql,select,id,from,custmr,final,runtime,exception,runtime,exception,new,runtime,exception,expected,given,this,result,set,next,will,return,true,given,this,connection,create,statement,will,return,this,prepared,statement,this,thrown,expect,same,instance,runtime,exception,try,this,template,query,sql,row,callback,handler,rs,throw,runtime,exception,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testExceptionComesBack() throws Exception;1533741555;Test that we see a runtime exception come back.;@Test_	public void testExceptionComesBack() throws Exception {_		final String sql = "SELECT ID FROM CUSTMR"__		final RuntimeException runtimeException = new RuntimeException("Expected")___		given(this.resultSet.next()).willReturn(true)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		this.thrown.expect(sameInstance(runtimeException))__		try {_			this.template.query(sql, (RowCallbackHandler) rs -> {_				throw runtimeException__			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};test,that,we,see,a,runtime,exception,come,back;test,public,void,test,exception,comes,back,throws,exception,final,string,sql,select,id,from,custmr,final,runtime,exception,runtime,exception,new,runtime,exception,expected,given,this,result,set,next,will,return,true,given,this,connection,create,statement,will,return,this,prepared,statement,this,thrown,expect,same,instance,runtime,exception,try,this,template,query,sql,row,callback,handler,rs,throw,runtime,exception,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testExceptionComesBack() throws Exception;1533774396;Test that we see a runtime exception come back.;@Test_	public void testExceptionComesBack() throws Exception {_		final String sql = "SELECT ID FROM CUSTMR"__		final RuntimeException runtimeException = new RuntimeException("Expected")___		given(this.resultSet.next()).willReturn(true)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		this.thrown.expect(sameInstance(runtimeException))__		try {_			this.template.query(sql, (RowCallbackHandler) rs -> {_				throw runtimeException__			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};test,that,we,see,a,runtime,exception,come,back;test,public,void,test,exception,comes,back,throws,exception,final,string,sql,select,id,from,custmr,final,runtime,exception,runtime,exception,new,runtime,exception,expected,given,this,result,set,next,will,return,true,given,this,connection,create,statement,will,return,this,prepared,statement,this,thrown,expect,same,instance,runtime,exception,try,this,template,query,sql,row,callback,handler,rs,throw,runtime,exception,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testExceptionComesBack() throws Exception;1541680987;Test that we see a runtime exception come back.;@Test_	public void testExceptionComesBack() throws Exception {_		final String sql = "SELECT ID FROM CUSTMR"__		final RuntimeException runtimeException = new RuntimeException("Expected")___		given(this.resultSet.next()).willReturn(true)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		this.thrown.expect(sameInstance(runtimeException))__		try {_			this.template.query(sql, (RowCallbackHandler) rs -> {_				throw runtimeException__			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};test,that,we,see,a,runtime,exception,come,back;test,public,void,test,exception,comes,back,throws,exception,final,string,sql,select,id,from,custmr,final,runtime,exception,runtime,exception,new,runtime,exception,expected,given,this,result,set,next,will,return,true,given,this,connection,create,statement,will,return,this,prepared,statement,this,thrown,expect,same,instance,runtime,exception,try,this,template,query,sql,row,callback,handler,rs,throw,runtime,exception,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testSqlUpdate() throws Exception;1356735495;Test update with static SQL.;@Test_	public void testSqlUpdate() throws Exception {_		final String sql = "UPDATE NOSUCHTABLE SET DATE_DISPATCHED = SYSDATE WHERE ID = 4"__		int rowsAffected = 33___		given(this.statement.executeUpdate(sql)).willReturn(rowsAffected)__		given(this.connection.createStatement()).willReturn(this.statement)___		int actualRowsAffected = this.template.update(sql)__		assertTrue("Actual rows affected is correct", actualRowsAffected == rowsAffected)__		verify(this.statement).close()__		verify(this.connection).close()__	};test,update,with,static,sql;test,public,void,test,sql,update,throws,exception,final,string,sql,update,nosuchtable,set,sysdate,where,id,4,int,rows,affected,33,given,this,statement,execute,update,sql,will,return,rows,affected,given,this,connection,create,statement,will,return,this,statement,int,actual,rows,affected,this,template,update,sql,assert,true,actual,rows,affected,is,correct,actual,rows,affected,rows,affected,verify,this,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testSqlUpdate() throws Exception;1357119417;Test update with static SQL.;@Test_	public void testSqlUpdate() throws Exception {_		final String sql = "UPDATE NOSUCHTABLE SET DATE_DISPATCHED = SYSDATE WHERE ID = 4"__		int rowsAffected = 33___		given(this.statement.executeUpdate(sql)).willReturn(rowsAffected)__		given(this.connection.createStatement()).willReturn(this.statement)___		int actualRowsAffected = this.template.update(sql)__		assertTrue("Actual rows affected is correct", actualRowsAffected == rowsAffected)__		verify(this.statement).close()__		verify(this.connection).close()__	};test,update,with,static,sql;test,public,void,test,sql,update,throws,exception,final,string,sql,update,nosuchtable,set,sysdate,where,id,4,int,rows,affected,33,given,this,statement,execute,update,sql,will,return,rows,affected,given,this,connection,create,statement,will,return,this,statement,int,actual,rows,affected,this,template,update,sql,assert,true,actual,rows,affected,is,correct,actual,rows,affected,rows,affected,verify,this,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testSqlUpdate() throws Exception;1363208506;Test update with static SQL.;@Test_	public void testSqlUpdate() throws Exception {_		final String sql = "UPDATE NOSUCHTABLE SET DATE_DISPATCHED = SYSDATE WHERE ID = 4"__		int rowsAffected = 33___		given(this.statement.executeUpdate(sql)).willReturn(rowsAffected)__		given(this.connection.createStatement()).willReturn(this.statement)___		int actualRowsAffected = this.template.update(sql)__		assertTrue("Actual rows affected is correct", actualRowsAffected == rowsAffected)__		verify(this.statement).close()__		verify(this.connection).close()__	};test,update,with,static,sql;test,public,void,test,sql,update,throws,exception,final,string,sql,update,nosuchtable,set,sysdate,where,id,4,int,rows,affected,33,given,this,statement,execute,update,sql,will,return,rows,affected,given,this,connection,create,statement,will,return,this,statement,int,actual,rows,affected,this,template,update,sql,assert,true,actual,rows,affected,is,correct,actual,rows,affected,rows,affected,verify,this,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testSqlUpdate() throws Exception;1372363092;Test update with static SQL.;@Test_	public void testSqlUpdate() throws Exception {_		final String sql = "UPDATE NOSUCHTABLE SET DATE_DISPATCHED = SYSDATE WHERE ID = 4"__		int rowsAffected = 33___		given(this.statement.executeUpdate(sql)).willReturn(rowsAffected)__		given(this.connection.createStatement()).willReturn(this.statement)___		int actualRowsAffected = this.template.update(sql)__		assertTrue("Actual rows affected is correct", actualRowsAffected == rowsAffected)__		verify(this.statement).close()__		verify(this.connection).close()__	};test,update,with,static,sql;test,public,void,test,sql,update,throws,exception,final,string,sql,update,nosuchtable,set,sysdate,where,id,4,int,rows,affected,33,given,this,statement,execute,update,sql,will,return,rows,affected,given,this,connection,create,statement,will,return,this,statement,int,actual,rows,affected,this,template,update,sql,assert,true,actual,rows,affected,is,correct,actual,rows,affected,rows,affected,verify,this,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testSqlUpdate() throws Exception;1398144444;Test update with static SQL.;@Test_	public void testSqlUpdate() throws Exception {_		final String sql = "UPDATE NOSUCHTABLE SET DATE_DISPATCHED = SYSDATE WHERE ID = 4"__		int rowsAffected = 33___		given(this.statement.executeUpdate(sql)).willReturn(rowsAffected)__		given(this.connection.createStatement()).willReturn(this.statement)___		int actualRowsAffected = this.template.update(sql)__		assertTrue("Actual rows affected is correct", actualRowsAffected == rowsAffected)__		verify(this.statement).close()__		verify(this.connection).close()__	};test,update,with,static,sql;test,public,void,test,sql,update,throws,exception,final,string,sql,update,nosuchtable,set,sysdate,where,id,4,int,rows,affected,33,given,this,statement,execute,update,sql,will,return,rows,affected,given,this,connection,create,statement,will,return,this,statement,int,actual,rows,affected,this,template,update,sql,assert,true,actual,rows,affected,is,correct,actual,rows,affected,rows,affected,verify,this,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testSqlUpdate() throws Exception;1413848647;Test update with static SQL.;@Test_	public void testSqlUpdate() throws Exception {_		final String sql = "UPDATE NOSUCHTABLE SET DATE_DISPATCHED = SYSDATE WHERE ID = 4"__		int rowsAffected = 33___		given(this.statement.executeUpdate(sql)).willReturn(rowsAffected)__		given(this.connection.createStatement()).willReturn(this.statement)___		int actualRowsAffected = this.template.update(sql)__		assertTrue("Actual rows affected is correct", actualRowsAffected == rowsAffected)__		verify(this.statement).close()__		verify(this.connection).close()__	};test,update,with,static,sql;test,public,void,test,sql,update,throws,exception,final,string,sql,update,nosuchtable,set,sysdate,where,id,4,int,rows,affected,33,given,this,statement,execute,update,sql,will,return,rows,affected,given,this,connection,create,statement,will,return,this,statement,int,actual,rows,affected,this,template,update,sql,assert,true,actual,rows,affected,is,correct,actual,rows,affected,rows,affected,verify,this,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testSqlUpdate() throws Exception;1467730834;Test update with static SQL.;@Test_	public void testSqlUpdate() throws Exception {_		final String sql = "UPDATE NOSUCHTABLE SET DATE_DISPATCHED = SYSDATE WHERE ID = 4"__		int rowsAffected = 33___		given(this.statement.executeUpdate(sql)).willReturn(rowsAffected)__		given(this.connection.createStatement()).willReturn(this.statement)___		int actualRowsAffected = this.template.update(sql)__		assertTrue("Actual rows affected is correct", actualRowsAffected == rowsAffected)__		verify(this.statement).close()__		verify(this.connection).close()__	};test,update,with,static,sql;test,public,void,test,sql,update,throws,exception,final,string,sql,update,nosuchtable,set,sysdate,where,id,4,int,rows,affected,33,given,this,statement,execute,update,sql,will,return,rows,affected,given,this,connection,create,statement,will,return,this,statement,int,actual,rows,affected,this,template,update,sql,assert,true,actual,rows,affected,is,correct,actual,rows,affected,rows,affected,verify,this,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testSqlUpdate() throws Exception;1487178248;Test update with static SQL.;@Test_	public void testSqlUpdate() throws Exception {_		final String sql = "UPDATE NOSUCHTABLE SET DATE_DISPATCHED = SYSDATE WHERE ID = 4"__		int rowsAffected = 33___		given(this.statement.executeUpdate(sql)).willReturn(rowsAffected)__		given(this.connection.createStatement()).willReturn(this.statement)___		int actualRowsAffected = this.template.update(sql)__		assertTrue("Actual rows affected is correct", actualRowsAffected == rowsAffected)__		verify(this.statement).close()__		verify(this.connection).close()__	};test,update,with,static,sql;test,public,void,test,sql,update,throws,exception,final,string,sql,update,nosuchtable,set,sysdate,where,id,4,int,rows,affected,33,given,this,statement,execute,update,sql,will,return,rows,affected,given,this,connection,create,statement,will,return,this,statement,int,actual,rows,affected,this,template,update,sql,assert,true,actual,rows,affected,is,correct,actual,rows,affected,rows,affected,verify,this,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testSqlUpdate() throws Exception;1487255851;Test update with static SQL.;@Test_	public void testSqlUpdate() throws Exception {_		final String sql = "UPDATE NOSUCHTABLE SET DATE_DISPATCHED = SYSDATE WHERE ID = 4"__		int rowsAffected = 33___		given(this.statement.executeUpdate(sql)).willReturn(rowsAffected)__		given(this.connection.createStatement()).willReturn(this.statement)___		int actualRowsAffected = this.template.update(sql)__		assertTrue("Actual rows affected is correct", actualRowsAffected == rowsAffected)__		verify(this.statement).close()__		verify(this.connection).close()__	};test,update,with,static,sql;test,public,void,test,sql,update,throws,exception,final,string,sql,update,nosuchtable,set,sysdate,where,id,4,int,rows,affected,33,given,this,statement,execute,update,sql,will,return,rows,affected,given,this,connection,create,statement,will,return,this,statement,int,actual,rows,affected,this,template,update,sql,assert,true,actual,rows,affected,is,correct,actual,rows,affected,rows,affected,verify,this,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testSqlUpdate() throws Exception;1518810557;Test update with static SQL.;@Test_	public void testSqlUpdate() throws Exception {_		final String sql = "UPDATE NOSUCHTABLE SET DATE_DISPATCHED = SYSDATE WHERE ID = 4"__		int rowsAffected = 33___		given(this.statement.executeUpdate(sql)).willReturn(rowsAffected)__		given(this.connection.createStatement()).willReturn(this.statement)___		int actualRowsAffected = this.template.update(sql)__		assertTrue("Actual rows affected is correct", actualRowsAffected == rowsAffected)__		verify(this.statement).close()__		verify(this.connection).close()__	};test,update,with,static,sql;test,public,void,test,sql,update,throws,exception,final,string,sql,update,nosuchtable,set,sysdate,where,id,4,int,rows,affected,33,given,this,statement,execute,update,sql,will,return,rows,affected,given,this,connection,create,statement,will,return,this,statement,int,actual,rows,affected,this,template,update,sql,assert,true,actual,rows,affected,is,correct,actual,rows,affected,rows,affected,verify,this,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testSqlUpdate() throws Exception;1528313484;Test update with static SQL.;@Test_	public void testSqlUpdate() throws Exception {_		final String sql = "UPDATE NOSUCHTABLE SET DATE_DISPATCHED = SYSDATE WHERE ID = 4"__		int rowsAffected = 33___		given(this.statement.executeUpdate(sql)).willReturn(rowsAffected)__		given(this.connection.createStatement()).willReturn(this.statement)___		int actualRowsAffected = this.template.update(sql)__		assertTrue("Actual rows affected is correct", actualRowsAffected == rowsAffected)__		verify(this.statement).close()__		verify(this.connection).close()__	};test,update,with,static,sql;test,public,void,test,sql,update,throws,exception,final,string,sql,update,nosuchtable,set,sysdate,where,id,4,int,rows,affected,33,given,this,statement,execute,update,sql,will,return,rows,affected,given,this,connection,create,statement,will,return,this,statement,int,actual,rows,affected,this,template,update,sql,assert,true,actual,rows,affected,is,correct,actual,rows,affected,rows,affected,verify,this,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testSqlUpdate() throws Exception;1528719423;Test update with static SQL.;@Test_	public void testSqlUpdate() throws Exception {_		final String sql = "UPDATE NOSUCHTABLE SET DATE_DISPATCHED = SYSDATE WHERE ID = 4"__		int rowsAffected = 33___		given(this.statement.executeUpdate(sql)).willReturn(rowsAffected)__		given(this.connection.createStatement()).willReturn(this.statement)___		int actualRowsAffected = this.template.update(sql)__		assertTrue("Actual rows affected is correct", actualRowsAffected == rowsAffected)__		verify(this.statement).close()__		verify(this.connection).close()__	};test,update,with,static,sql;test,public,void,test,sql,update,throws,exception,final,string,sql,update,nosuchtable,set,sysdate,where,id,4,int,rows,affected,33,given,this,statement,execute,update,sql,will,return,rows,affected,given,this,connection,create,statement,will,return,this,statement,int,actual,rows,affected,this,template,update,sql,assert,true,actual,rows,affected,is,correct,actual,rows,affected,rows,affected,verify,this,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testSqlUpdate() throws Exception;1533741555;Test update with static SQL.;@Test_	public void testSqlUpdate() throws Exception {_		final String sql = "UPDATE NOSUCHTABLE SET DATE_DISPATCHED = SYSDATE WHERE ID = 4"__		int rowsAffected = 33___		given(this.statement.executeUpdate(sql)).willReturn(rowsAffected)__		given(this.connection.createStatement()).willReturn(this.statement)___		int actualRowsAffected = this.template.update(sql)__		assertTrue("Actual rows affected is correct", actualRowsAffected == rowsAffected)__		verify(this.statement).close()__		verify(this.connection).close()__	};test,update,with,static,sql;test,public,void,test,sql,update,throws,exception,final,string,sql,update,nosuchtable,set,sysdate,where,id,4,int,rows,affected,33,given,this,statement,execute,update,sql,will,return,rows,affected,given,this,connection,create,statement,will,return,this,statement,int,actual,rows,affected,this,template,update,sql,assert,true,actual,rows,affected,is,correct,actual,rows,affected,rows,affected,verify,this,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testSqlUpdate() throws Exception;1533774396;Test update with static SQL.;@Test_	public void testSqlUpdate() throws Exception {_		final String sql = "UPDATE NOSUCHTABLE SET DATE_DISPATCHED = SYSDATE WHERE ID = 4"__		int rowsAffected = 33___		given(this.statement.executeUpdate(sql)).willReturn(rowsAffected)__		given(this.connection.createStatement()).willReturn(this.statement)___		int actualRowsAffected = this.template.update(sql)__		assertTrue("Actual rows affected is correct", actualRowsAffected == rowsAffected)__		verify(this.statement).close()__		verify(this.connection).close()__	};test,update,with,static,sql;test,public,void,test,sql,update,throws,exception,final,string,sql,update,nosuchtable,set,sysdate,where,id,4,int,rows,affected,33,given,this,statement,execute,update,sql,will,return,rows,affected,given,this,connection,create,statement,will,return,this,statement,int,actual,rows,affected,this,template,update,sql,assert,true,actual,rows,affected,is,correct,actual,rows,affected,rows,affected,verify,this,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testSqlUpdate() throws Exception;1541680987;Test update with static SQL.;@Test_	public void testSqlUpdate() throws Exception {_		final String sql = "UPDATE NOSUCHTABLE SET DATE_DISPATCHED = SYSDATE WHERE ID = 4"__		int rowsAffected = 33___		given(this.statement.executeUpdate(sql)).willReturn(rowsAffected)__		given(this.connection.createStatement()).willReturn(this.statement)___		int actualRowsAffected = this.template.update(sql)__		assertTrue("Actual rows affected is correct", actualRowsAffected == rowsAffected)__		verify(this.statement).close()__		verify(this.connection).close()__	};test,update,with,static,sql;test,public,void,test,sql,update,throws,exception,final,string,sql,update,nosuchtable,set,sysdate,where,id,4,int,rows,affected,33,given,this,statement,execute,update,sql,will,return,rows,affected,given,this,connection,create,statement,will,return,this,statement,int,actual,rows,affected,this,template,update,sql,assert,true,actual,rows,affected,is,correct,actual,rows,affected,rows,affected,verify,this,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testFatalWarning() throws Exception;1356735495;Mock objects allow us to produce warnings at will;@Test_	public void testFatalWarning() throws Exception {_		String sql = "SELECT forename from custmr"__		SQLWarning warnings = new SQLWarning("My warning")___		given(this.resultSet.next()).willReturn(false)__		given(this.preparedStatement.getWarnings()).willReturn(warnings)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		JdbcTemplate t = new JdbcTemplate(this.dataSource)__		t.setIgnoreWarnings(false)__		this.thrown.expect(SQLWarningException.class)__		this.thrown.expect(exceptionCause(sameInstance(warnings)))__		try {_			t.query(sql, new RowCallbackHandler() {_				@Override_				public void processRow(ResultSet rs) throws SQLException {_					rs.getByte(1)__				}_			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};mock,objects,allow,us,to,produce,warnings,at,will;test,public,void,test,fatal,warning,throws,exception,string,sql,select,forename,from,custmr,sqlwarning,warnings,new,sqlwarning,my,warning,given,this,result,set,next,will,return,false,given,this,prepared,statement,get,warnings,will,return,warnings,given,this,connection,create,statement,will,return,this,prepared,statement,jdbc,template,t,new,jdbc,template,this,data,source,t,set,ignore,warnings,false,this,thrown,expect,sqlwarning,exception,class,this,thrown,expect,exception,cause,same,instance,warnings,try,t,query,sql,new,row,callback,handler,override,public,void,process,row,result,set,rs,throws,sqlexception,rs,get,byte,1,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testFatalWarning() throws Exception;1357119417;Mock objects allow us to produce warnings at will;@Test_	public void testFatalWarning() throws Exception {_		String sql = "SELECT forename from custmr"__		SQLWarning warnings = new SQLWarning("My warning")___		given(this.resultSet.next()).willReturn(false)__		given(this.preparedStatement.getWarnings()).willReturn(warnings)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		JdbcTemplate t = new JdbcTemplate(this.dataSource)__		t.setIgnoreWarnings(false)__		this.thrown.expect(SQLWarningException.class)__		this.thrown.expect(exceptionCause(sameInstance(warnings)))__		try {_			t.query(sql, new RowCallbackHandler() {_				@Override_				public void processRow(ResultSet rs) throws SQLException {_					rs.getByte(1)__				}_			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};mock,objects,allow,us,to,produce,warnings,at,will;test,public,void,test,fatal,warning,throws,exception,string,sql,select,forename,from,custmr,sqlwarning,warnings,new,sqlwarning,my,warning,given,this,result,set,next,will,return,false,given,this,prepared,statement,get,warnings,will,return,warnings,given,this,connection,create,statement,will,return,this,prepared,statement,jdbc,template,t,new,jdbc,template,this,data,source,t,set,ignore,warnings,false,this,thrown,expect,sqlwarning,exception,class,this,thrown,expect,exception,cause,same,instance,warnings,try,t,query,sql,new,row,callback,handler,override,public,void,process,row,result,set,rs,throws,sqlexception,rs,get,byte,1,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testFatalWarning() throws Exception;1363208506;Mock objects allow us to produce warnings at will;@Test_	public void testFatalWarning() throws Exception {_		String sql = "SELECT forename from custmr"__		SQLWarning warnings = new SQLWarning("My warning")___		given(this.resultSet.next()).willReturn(false)__		given(this.preparedStatement.getWarnings()).willReturn(warnings)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		JdbcTemplate t = new JdbcTemplate(this.dataSource)__		t.setIgnoreWarnings(false)__		this.thrown.expect(SQLWarningException.class)__		this.thrown.expect(exceptionCause(sameInstance(warnings)))__		try {_			t.query(sql, new RowCallbackHandler() {_				@Override_				public void processRow(ResultSet rs) throws SQLException {_					rs.getByte(1)__				}_			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};mock,objects,allow,us,to,produce,warnings,at,will;test,public,void,test,fatal,warning,throws,exception,string,sql,select,forename,from,custmr,sqlwarning,warnings,new,sqlwarning,my,warning,given,this,result,set,next,will,return,false,given,this,prepared,statement,get,warnings,will,return,warnings,given,this,connection,create,statement,will,return,this,prepared,statement,jdbc,template,t,new,jdbc,template,this,data,source,t,set,ignore,warnings,false,this,thrown,expect,sqlwarning,exception,class,this,thrown,expect,exception,cause,same,instance,warnings,try,t,query,sql,new,row,callback,handler,override,public,void,process,row,result,set,rs,throws,sqlexception,rs,get,byte,1,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testFatalWarning() throws Exception;1372363092;Mock objects allow us to produce warnings at will;@Test_	public void testFatalWarning() throws Exception {_		String sql = "SELECT forename from custmr"__		SQLWarning warnings = new SQLWarning("My warning")___		given(this.resultSet.next()).willReturn(false)__		given(this.preparedStatement.getWarnings()).willReturn(warnings)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		JdbcTemplate t = new JdbcTemplate(this.dataSource)__		t.setIgnoreWarnings(false)__		this.thrown.expect(SQLWarningException.class)__		this.thrown.expect(exceptionCause(sameInstance(warnings)))__		try {_			t.query(sql, new RowCallbackHandler() {_				@Override_				public void processRow(ResultSet rs) throws SQLException {_					rs.getByte(1)__				}_			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};mock,objects,allow,us,to,produce,warnings,at,will;test,public,void,test,fatal,warning,throws,exception,string,sql,select,forename,from,custmr,sqlwarning,warnings,new,sqlwarning,my,warning,given,this,result,set,next,will,return,false,given,this,prepared,statement,get,warnings,will,return,warnings,given,this,connection,create,statement,will,return,this,prepared,statement,jdbc,template,t,new,jdbc,template,this,data,source,t,set,ignore,warnings,false,this,thrown,expect,sqlwarning,exception,class,this,thrown,expect,exception,cause,same,instance,warnings,try,t,query,sql,new,row,callback,handler,override,public,void,process,row,result,set,rs,throws,sqlexception,rs,get,byte,1,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testFatalWarning() throws Exception;1398144444;Mock objects allow us to produce warnings at will;@Test_	public void testFatalWarning() throws Exception {_		String sql = "SELECT forename from custmr"__		SQLWarning warnings = new SQLWarning("My warning")___		given(this.resultSet.next()).willReturn(false)__		given(this.preparedStatement.getWarnings()).willReturn(warnings)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		JdbcTemplate t = new JdbcTemplate(this.dataSource)__		t.setIgnoreWarnings(false)__		this.thrown.expect(SQLWarningException.class)__		this.thrown.expect(exceptionCause(sameInstance(warnings)))__		try {_			t.query(sql, new RowCallbackHandler() {_				@Override_				public void processRow(ResultSet rs) throws SQLException {_					rs.getByte(1)__				}_			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};mock,objects,allow,us,to,produce,warnings,at,will;test,public,void,test,fatal,warning,throws,exception,string,sql,select,forename,from,custmr,sqlwarning,warnings,new,sqlwarning,my,warning,given,this,result,set,next,will,return,false,given,this,prepared,statement,get,warnings,will,return,warnings,given,this,connection,create,statement,will,return,this,prepared,statement,jdbc,template,t,new,jdbc,template,this,data,source,t,set,ignore,warnings,false,this,thrown,expect,sqlwarning,exception,class,this,thrown,expect,exception,cause,same,instance,warnings,try,t,query,sql,new,row,callback,handler,override,public,void,process,row,result,set,rs,throws,sqlexception,rs,get,byte,1,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testFatalWarning() throws Exception;1413848647;Mock objects allow us to produce warnings at will;@Test_	public void testFatalWarning() throws Exception {_		String sql = "SELECT forename from custmr"__		SQLWarning warnings = new SQLWarning("My warning")___		given(this.resultSet.next()).willReturn(false)__		given(this.preparedStatement.getWarnings()).willReturn(warnings)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		JdbcTemplate t = new JdbcTemplate(this.dataSource)__		t.setIgnoreWarnings(false)__		this.thrown.expect(SQLWarningException.class)__		this.thrown.expect(exceptionCause(sameInstance(warnings)))__		try {_			t.query(sql, new RowCallbackHandler() {_				@Override_				public void processRow(ResultSet rs) throws SQLException {_					rs.getByte(1)__				}_			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};mock,objects,allow,us,to,produce,warnings,at,will;test,public,void,test,fatal,warning,throws,exception,string,sql,select,forename,from,custmr,sqlwarning,warnings,new,sqlwarning,my,warning,given,this,result,set,next,will,return,false,given,this,prepared,statement,get,warnings,will,return,warnings,given,this,connection,create,statement,will,return,this,prepared,statement,jdbc,template,t,new,jdbc,template,this,data,source,t,set,ignore,warnings,false,this,thrown,expect,sqlwarning,exception,class,this,thrown,expect,exception,cause,same,instance,warnings,try,t,query,sql,new,row,callback,handler,override,public,void,process,row,result,set,rs,throws,sqlexception,rs,get,byte,1,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testFatalWarning() throws Exception;1467730834;Mock objects allow us to produce warnings at will;@Test_	public void testFatalWarning() throws Exception {_		String sql = "SELECT forename from custmr"__		SQLWarning warnings = new SQLWarning("My warning")___		given(this.resultSet.next()).willReturn(false)__		given(this.preparedStatement.getWarnings()).willReturn(warnings)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		JdbcTemplate t = new JdbcTemplate(this.dataSource)__		t.setIgnoreWarnings(false)__		this.thrown.expect(SQLWarningException.class)__		this.thrown.expect(exceptionCause(sameInstance(warnings)))__		try {_			t.query(sql, new RowCallbackHandler() {_				@Override_				public void processRow(ResultSet rs) throws SQLException {_					rs.getByte(1)__				}_			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};mock,objects,allow,us,to,produce,warnings,at,will;test,public,void,test,fatal,warning,throws,exception,string,sql,select,forename,from,custmr,sqlwarning,warnings,new,sqlwarning,my,warning,given,this,result,set,next,will,return,false,given,this,prepared,statement,get,warnings,will,return,warnings,given,this,connection,create,statement,will,return,this,prepared,statement,jdbc,template,t,new,jdbc,template,this,data,source,t,set,ignore,warnings,false,this,thrown,expect,sqlwarning,exception,class,this,thrown,expect,exception,cause,same,instance,warnings,try,t,query,sql,new,row,callback,handler,override,public,void,process,row,result,set,rs,throws,sqlexception,rs,get,byte,1,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testFatalWarning() throws Exception;1487178248;Mock objects allow us to produce warnings at will;@Test_	public void testFatalWarning() throws Exception {_		String sql = "SELECT forename from custmr"__		SQLWarning warnings = new SQLWarning("My warning")___		given(this.resultSet.next()).willReturn(false)__		given(this.preparedStatement.getWarnings()).willReturn(warnings)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		JdbcTemplate t = new JdbcTemplate(this.dataSource)__		t.setIgnoreWarnings(false)__		this.thrown.expect(SQLWarningException.class)__		this.thrown.expect(exceptionCause(sameInstance(warnings)))__		try {_			t.query(sql, new RowCallbackHandler() {_				@Override_				public void processRow(ResultSet rs) throws SQLException {_					rs.getByte(1)__				}_			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};mock,objects,allow,us,to,produce,warnings,at,will;test,public,void,test,fatal,warning,throws,exception,string,sql,select,forename,from,custmr,sqlwarning,warnings,new,sqlwarning,my,warning,given,this,result,set,next,will,return,false,given,this,prepared,statement,get,warnings,will,return,warnings,given,this,connection,create,statement,will,return,this,prepared,statement,jdbc,template,t,new,jdbc,template,this,data,source,t,set,ignore,warnings,false,this,thrown,expect,sqlwarning,exception,class,this,thrown,expect,exception,cause,same,instance,warnings,try,t,query,sql,new,row,callback,handler,override,public,void,process,row,result,set,rs,throws,sqlexception,rs,get,byte,1,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testFatalWarning() throws Exception;1487255851;Mock objects allow us to produce warnings at will;@Test_	public void testFatalWarning() throws Exception {_		String sql = "SELECT forename from custmr"__		SQLWarning warnings = new SQLWarning("My warning")___		given(this.resultSet.next()).willReturn(false)__		given(this.preparedStatement.getWarnings()).willReturn(warnings)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		JdbcTemplate t = new JdbcTemplate(this.dataSource)__		t.setIgnoreWarnings(false)__		this.thrown.expect(SQLWarningException.class)__		this.thrown.expect(exceptionCause(sameInstance(warnings)))__		try {_			t.query(sql, new RowCallbackHandler() {_				@Override_				public void processRow(ResultSet rs) throws SQLException {_					rs.getByte(1)__				}_			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};mock,objects,allow,us,to,produce,warnings,at,will;test,public,void,test,fatal,warning,throws,exception,string,sql,select,forename,from,custmr,sqlwarning,warnings,new,sqlwarning,my,warning,given,this,result,set,next,will,return,false,given,this,prepared,statement,get,warnings,will,return,warnings,given,this,connection,create,statement,will,return,this,prepared,statement,jdbc,template,t,new,jdbc,template,this,data,source,t,set,ignore,warnings,false,this,thrown,expect,sqlwarning,exception,class,this,thrown,expect,exception,cause,same,instance,warnings,try,t,query,sql,new,row,callback,handler,override,public,void,process,row,result,set,rs,throws,sqlexception,rs,get,byte,1,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testFatalWarning() throws Exception;1518810557;Mock objects allow us to produce warnings at will;@Test_	public void testFatalWarning() throws Exception {_		String sql = "SELECT forename from custmr"__		SQLWarning warnings = new SQLWarning("My warning")___		given(this.resultSet.next()).willReturn(false)__		given(this.preparedStatement.getWarnings()).willReturn(warnings)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		JdbcTemplate t = new JdbcTemplate(this.dataSource)__		t.setIgnoreWarnings(false)__		this.thrown.expect(SQLWarningException.class)__		this.thrown.expect(exceptionCause(sameInstance(warnings)))__		try {_			t.query(sql, new RowCallbackHandler() {_				@Override_				public void processRow(ResultSet rs) throws SQLException {_					rs.getByte(1)__				}_			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};mock,objects,allow,us,to,produce,warnings,at,will;test,public,void,test,fatal,warning,throws,exception,string,sql,select,forename,from,custmr,sqlwarning,warnings,new,sqlwarning,my,warning,given,this,result,set,next,will,return,false,given,this,prepared,statement,get,warnings,will,return,warnings,given,this,connection,create,statement,will,return,this,prepared,statement,jdbc,template,t,new,jdbc,template,this,data,source,t,set,ignore,warnings,false,this,thrown,expect,sqlwarning,exception,class,this,thrown,expect,exception,cause,same,instance,warnings,try,t,query,sql,new,row,callback,handler,override,public,void,process,row,result,set,rs,throws,sqlexception,rs,get,byte,1,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testFatalWarning() throws Exception;1528313484;Mock objects allow us to produce warnings at will;@Test_	public void testFatalWarning() throws Exception {_		String sql = "SELECT forename from custmr"__		SQLWarning warnings = new SQLWarning("My warning")___		given(this.resultSet.next()).willReturn(false)__		given(this.preparedStatement.getWarnings()).willReturn(warnings)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		JdbcTemplate t = new JdbcTemplate(this.dataSource)__		t.setIgnoreWarnings(false)__		this.thrown.expect(SQLWarningException.class)__		this.thrown.expect(exceptionCause(sameInstance(warnings)))__		try {_			t.query(sql, rs -> {_				rs.getByte(1)__			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};mock,objects,allow,us,to,produce,warnings,at,will;test,public,void,test,fatal,warning,throws,exception,string,sql,select,forename,from,custmr,sqlwarning,warnings,new,sqlwarning,my,warning,given,this,result,set,next,will,return,false,given,this,prepared,statement,get,warnings,will,return,warnings,given,this,connection,create,statement,will,return,this,prepared,statement,jdbc,template,t,new,jdbc,template,this,data,source,t,set,ignore,warnings,false,this,thrown,expect,sqlwarning,exception,class,this,thrown,expect,exception,cause,same,instance,warnings,try,t,query,sql,rs,rs,get,byte,1,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testFatalWarning() throws Exception;1528719423;Mock objects allow us to produce warnings at will;@Test_	public void testFatalWarning() throws Exception {_		String sql = "SELECT forename from custmr"__		SQLWarning warnings = new SQLWarning("My warning")___		given(this.resultSet.next()).willReturn(false)__		given(this.preparedStatement.getWarnings()).willReturn(warnings)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		JdbcTemplate t = new JdbcTemplate(this.dataSource)__		t.setIgnoreWarnings(false)__		this.thrown.expect(SQLWarningException.class)__		this.thrown.expect(exceptionCause(sameInstance(warnings)))__		try {_			t.query(sql, rs -> {_				rs.getByte(1)__			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};mock,objects,allow,us,to,produce,warnings,at,will;test,public,void,test,fatal,warning,throws,exception,string,sql,select,forename,from,custmr,sqlwarning,warnings,new,sqlwarning,my,warning,given,this,result,set,next,will,return,false,given,this,prepared,statement,get,warnings,will,return,warnings,given,this,connection,create,statement,will,return,this,prepared,statement,jdbc,template,t,new,jdbc,template,this,data,source,t,set,ignore,warnings,false,this,thrown,expect,sqlwarning,exception,class,this,thrown,expect,exception,cause,same,instance,warnings,try,t,query,sql,rs,rs,get,byte,1,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testFatalWarning() throws Exception;1533741555;Mock objects allow us to produce warnings at will;@Test_	public void testFatalWarning() throws Exception {_		String sql = "SELECT forename from custmr"__		SQLWarning warnings = new SQLWarning("My warning")___		given(this.resultSet.next()).willReturn(false)__		given(this.preparedStatement.getWarnings()).willReturn(warnings)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		JdbcTemplate t = new JdbcTemplate(this.dataSource)__		t.setIgnoreWarnings(false)__		this.thrown.expect(SQLWarningException.class)__		this.thrown.expect(exceptionCause(sameInstance(warnings)))__		try {_			t.query(sql, rs -> {_				rs.getByte(1)__			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};mock,objects,allow,us,to,produce,warnings,at,will;test,public,void,test,fatal,warning,throws,exception,string,sql,select,forename,from,custmr,sqlwarning,warnings,new,sqlwarning,my,warning,given,this,result,set,next,will,return,false,given,this,prepared,statement,get,warnings,will,return,warnings,given,this,connection,create,statement,will,return,this,prepared,statement,jdbc,template,t,new,jdbc,template,this,data,source,t,set,ignore,warnings,false,this,thrown,expect,sqlwarning,exception,class,this,thrown,expect,exception,cause,same,instance,warnings,try,t,query,sql,rs,rs,get,byte,1,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testFatalWarning() throws Exception;1533774396;Mock objects allow us to produce warnings at will;@Test_	public void testFatalWarning() throws Exception {_		String sql = "SELECT forename from custmr"__		SQLWarning warnings = new SQLWarning("My warning")___		given(this.resultSet.next()).willReturn(false)__		given(this.preparedStatement.getWarnings()).willReturn(warnings)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		JdbcTemplate t = new JdbcTemplate(this.dataSource)__		t.setIgnoreWarnings(false)__		this.thrown.expect(SQLWarningException.class)__		this.thrown.expect(exceptionCause(sameInstance(warnings)))__		try {_			t.query(sql, rs -> {_				rs.getByte(1)__			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};mock,objects,allow,us,to,produce,warnings,at,will;test,public,void,test,fatal,warning,throws,exception,string,sql,select,forename,from,custmr,sqlwarning,warnings,new,sqlwarning,my,warning,given,this,result,set,next,will,return,false,given,this,prepared,statement,get,warnings,will,return,warnings,given,this,connection,create,statement,will,return,this,prepared,statement,jdbc,template,t,new,jdbc,template,this,data,source,t,set,ignore,warnings,false,this,thrown,expect,sqlwarning,exception,class,this,thrown,expect,exception,cause,same,instance,warnings,try,t,query,sql,rs,rs,get,byte,1,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testFatalWarning() throws Exception;1541680987;Mock objects allow us to produce warnings at will;@Test_	public void testFatalWarning() throws Exception {_		String sql = "SELECT forename from custmr"__		SQLWarning warnings = new SQLWarning("My warning")___		given(this.resultSet.next()).willReturn(false)__		given(this.preparedStatement.getWarnings()).willReturn(warnings)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		JdbcTemplate t = new JdbcTemplate(this.dataSource)__		t.setIgnoreWarnings(false)__		this.thrown.expect(SQLWarningException.class)__		this.thrown.expect(exceptionCause(sameInstance(warnings)))__		try {_			t.query(sql, rs -> {_				rs.getByte(1)__			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};mock,objects,allow,us,to,produce,warnings,at,will;test,public,void,test,fatal,warning,throws,exception,string,sql,select,forename,from,custmr,sqlwarning,warnings,new,sqlwarning,my,warning,given,this,result,set,next,will,return,false,given,this,prepared,statement,get,warnings,will,return,warnings,given,this,connection,create,statement,will,return,this,prepared,statement,jdbc,template,t,new,jdbc,template,this,data,source,t,set,ignore,warnings,false,this,thrown,expect,sqlwarning,exception,class,this,thrown,expect,exception,cause,same,instance,warnings,try,t,query,sql,rs,rs,get,byte,1,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testUseCustomSQLErrorCodeTranslator() throws Exception;1356735495;Test that we see an SQLException translated using Error Code._If we provide the SQLExceptionTranslator, we shouldn't use a connection_to get the metadata;@Test_	public void testUseCustomSQLErrorCodeTranslator() throws Exception {_		_		final SQLException sqlException = new SQLException("I have a known problem", "07000", 1054)__		final String sql = "SELECT ID FROM CUSTOMER"___		given(this.resultSet.next()).willReturn(true)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		JdbcTemplate template = new JdbcTemplate()__		template.setDataSource(this.dataSource)__		_		template.setExceptionTranslator(new SQLStateSQLExceptionTranslator())__		template.afterPropertiesSet()___		this.thrown.expect(BadSqlGrammarException.class)__		this.thrown.expect(exceptionCause(sameInstance(sqlException)))__		try {_			template.query(sql, new RowCallbackHandler() {_				@Override_				public void processRow(ResultSet rs) throws SQLException {_					throw sqlException__				}_			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};test,that,we,see,an,sqlexception,translated,using,error,code,if,we,provide,the,sqlexception,translator,we,shouldn,t,use,a,connection,to,get,the,metadata;test,public,void,test,use,custom,sqlerror,code,translator,throws,exception,final,sqlexception,sql,exception,new,sqlexception,i,have,a,known,problem,07000,1054,final,string,sql,select,id,from,customer,given,this,result,set,next,will,return,true,given,this,connection,create,statement,will,return,this,prepared,statement,jdbc,template,template,new,jdbc,template,template,set,data,source,this,data,source,template,set,exception,translator,new,sqlstate,sqlexception,translator,template,after,properties,set,this,thrown,expect,bad,sql,grammar,exception,class,this,thrown,expect,exception,cause,same,instance,sql,exception,try,template,query,sql,new,row,callback,handler,override,public,void,process,row,result,set,rs,throws,sqlexception,throw,sql,exception,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testUseCustomSQLErrorCodeTranslator() throws Exception;1357119417;Test that we see an SQLException translated using Error Code._If we provide the SQLExceptionTranslator, we shouldn't use a connection_to get the metadata;@Test_	public void testUseCustomSQLErrorCodeTranslator() throws Exception {_		_		final SQLException sqlException = new SQLException("I have a known problem", "07000", 1054)__		final String sql = "SELECT ID FROM CUSTOMER"___		given(this.resultSet.next()).willReturn(true)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		JdbcTemplate template = new JdbcTemplate()__		template.setDataSource(this.dataSource)__		_		template.setExceptionTranslator(new SQLStateSQLExceptionTranslator())__		template.afterPropertiesSet()___		this.thrown.expect(BadSqlGrammarException.class)__		this.thrown.expect(exceptionCause(sameInstance(sqlException)))__		try {_			template.query(sql, new RowCallbackHandler() {_				@Override_				public void processRow(ResultSet rs) throws SQLException {_					throw sqlException__				}_			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};test,that,we,see,an,sqlexception,translated,using,error,code,if,we,provide,the,sqlexception,translator,we,shouldn,t,use,a,connection,to,get,the,metadata;test,public,void,test,use,custom,sqlerror,code,translator,throws,exception,final,sqlexception,sql,exception,new,sqlexception,i,have,a,known,problem,07000,1054,final,string,sql,select,id,from,customer,given,this,result,set,next,will,return,true,given,this,connection,create,statement,will,return,this,prepared,statement,jdbc,template,template,new,jdbc,template,template,set,data,source,this,data,source,template,set,exception,translator,new,sqlstate,sqlexception,translator,template,after,properties,set,this,thrown,expect,bad,sql,grammar,exception,class,this,thrown,expect,exception,cause,same,instance,sql,exception,try,template,query,sql,new,row,callback,handler,override,public,void,process,row,result,set,rs,throws,sqlexception,throw,sql,exception,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testUseCustomSQLErrorCodeTranslator() throws Exception;1363208506;Test that we see an SQLException translated using Error Code._If we provide the SQLExceptionTranslator, we shouldn't use a connection_to get the metadata;@Test_	public void testUseCustomSQLErrorCodeTranslator() throws Exception {_		_		final SQLException sqlException = new SQLException("I have a known problem", "07000", 1054)__		final String sql = "SELECT ID FROM CUSTOMER"___		given(this.resultSet.next()).willReturn(true)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		JdbcTemplate template = new JdbcTemplate()__		template.setDataSource(this.dataSource)__		_		template.setExceptionTranslator(new SQLStateSQLExceptionTranslator())__		template.afterPropertiesSet()___		this.thrown.expect(BadSqlGrammarException.class)__		this.thrown.expect(exceptionCause(sameInstance(sqlException)))__		try {_			template.query(sql, new RowCallbackHandler() {_				@Override_				public void processRow(ResultSet rs) throws SQLException {_					throw sqlException__				}_			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};test,that,we,see,an,sqlexception,translated,using,error,code,if,we,provide,the,sqlexception,translator,we,shouldn,t,use,a,connection,to,get,the,metadata;test,public,void,test,use,custom,sqlerror,code,translator,throws,exception,final,sqlexception,sql,exception,new,sqlexception,i,have,a,known,problem,07000,1054,final,string,sql,select,id,from,customer,given,this,result,set,next,will,return,true,given,this,connection,create,statement,will,return,this,prepared,statement,jdbc,template,template,new,jdbc,template,template,set,data,source,this,data,source,template,set,exception,translator,new,sqlstate,sqlexception,translator,template,after,properties,set,this,thrown,expect,bad,sql,grammar,exception,class,this,thrown,expect,exception,cause,same,instance,sql,exception,try,template,query,sql,new,row,callback,handler,override,public,void,process,row,result,set,rs,throws,sqlexception,throw,sql,exception,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testUseCustomSQLErrorCodeTranslator() throws Exception;1372363092;Test that we see an SQLException translated using Error Code._If we provide the SQLExceptionTranslator, we shouldn't use a connection_to get the metadata;@Test_	public void testUseCustomSQLErrorCodeTranslator() throws Exception {_		_		final SQLException sqlException = new SQLException("I have a known problem", "07000", 1054)__		final String sql = "SELECT ID FROM CUSTOMER"___		given(this.resultSet.next()).willReturn(true)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		JdbcTemplate template = new JdbcTemplate()__		template.setDataSource(this.dataSource)__		_		template.setExceptionTranslator(new SQLStateSQLExceptionTranslator())__		template.afterPropertiesSet()___		this.thrown.expect(BadSqlGrammarException.class)__		this.thrown.expect(exceptionCause(sameInstance(sqlException)))__		try {_			template.query(sql, new RowCallbackHandler() {_				@Override_				public void processRow(ResultSet rs) throws SQLException {_					throw sqlException__				}_			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};test,that,we,see,an,sqlexception,translated,using,error,code,if,we,provide,the,sqlexception,translator,we,shouldn,t,use,a,connection,to,get,the,metadata;test,public,void,test,use,custom,sqlerror,code,translator,throws,exception,final,sqlexception,sql,exception,new,sqlexception,i,have,a,known,problem,07000,1054,final,string,sql,select,id,from,customer,given,this,result,set,next,will,return,true,given,this,connection,create,statement,will,return,this,prepared,statement,jdbc,template,template,new,jdbc,template,template,set,data,source,this,data,source,template,set,exception,translator,new,sqlstate,sqlexception,translator,template,after,properties,set,this,thrown,expect,bad,sql,grammar,exception,class,this,thrown,expect,exception,cause,same,instance,sql,exception,try,template,query,sql,new,row,callback,handler,override,public,void,process,row,result,set,rs,throws,sqlexception,throw,sql,exception,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testUseCustomSQLErrorCodeTranslator() throws Exception;1398144444;Test that we see an SQLException translated using Error Code._If we provide the SQLExceptionTranslator, we shouldn't use a connection_to get the metadata;@Test_	public void testUseCustomSQLErrorCodeTranslator() throws Exception {_		_		final SQLException sqlException = new SQLException("I have a known problem", "07000", 1054)__		final String sql = "SELECT ID FROM CUSTOMER"___		given(this.resultSet.next()).willReturn(true)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		JdbcTemplate template = new JdbcTemplate()__		template.setDataSource(this.dataSource)__		_		template.setExceptionTranslator(new SQLStateSQLExceptionTranslator())__		template.afterPropertiesSet()___		this.thrown.expect(BadSqlGrammarException.class)__		this.thrown.expect(exceptionCause(sameInstance(sqlException)))__		try {_			template.query(sql, new RowCallbackHandler() {_				@Override_				public void processRow(ResultSet rs) throws SQLException {_					throw sqlException__				}_			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};test,that,we,see,an,sqlexception,translated,using,error,code,if,we,provide,the,sqlexception,translator,we,shouldn,t,use,a,connection,to,get,the,metadata;test,public,void,test,use,custom,sqlerror,code,translator,throws,exception,final,sqlexception,sql,exception,new,sqlexception,i,have,a,known,problem,07000,1054,final,string,sql,select,id,from,customer,given,this,result,set,next,will,return,true,given,this,connection,create,statement,will,return,this,prepared,statement,jdbc,template,template,new,jdbc,template,template,set,data,source,this,data,source,template,set,exception,translator,new,sqlstate,sqlexception,translator,template,after,properties,set,this,thrown,expect,bad,sql,grammar,exception,class,this,thrown,expect,exception,cause,same,instance,sql,exception,try,template,query,sql,new,row,callback,handler,override,public,void,process,row,result,set,rs,throws,sqlexception,throw,sql,exception,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testUseCustomSQLErrorCodeTranslator() throws Exception;1413848647;Test that we see an SQLException translated using Error Code._If we provide the SQLExceptionTranslator, we shouldn't use a connection_to get the metadata;@Test_	public void testUseCustomSQLErrorCodeTranslator() throws Exception {_		_		final SQLException sqlException = new SQLException("I have a known problem", "07000", 1054)__		final String sql = "SELECT ID FROM CUSTOMER"___		given(this.resultSet.next()).willReturn(true)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		JdbcTemplate template = new JdbcTemplate()__		template.setDataSource(this.dataSource)__		_		template.setExceptionTranslator(new SQLStateSQLExceptionTranslator())__		template.afterPropertiesSet()___		this.thrown.expect(BadSqlGrammarException.class)__		this.thrown.expect(exceptionCause(sameInstance(sqlException)))__		try {_			template.query(sql, new RowCallbackHandler() {_				@Override_				public void processRow(ResultSet rs) throws SQLException {_					throw sqlException__				}_			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};test,that,we,see,an,sqlexception,translated,using,error,code,if,we,provide,the,sqlexception,translator,we,shouldn,t,use,a,connection,to,get,the,metadata;test,public,void,test,use,custom,sqlerror,code,translator,throws,exception,final,sqlexception,sql,exception,new,sqlexception,i,have,a,known,problem,07000,1054,final,string,sql,select,id,from,customer,given,this,result,set,next,will,return,true,given,this,connection,create,statement,will,return,this,prepared,statement,jdbc,template,template,new,jdbc,template,template,set,data,source,this,data,source,template,set,exception,translator,new,sqlstate,sqlexception,translator,template,after,properties,set,this,thrown,expect,bad,sql,grammar,exception,class,this,thrown,expect,exception,cause,same,instance,sql,exception,try,template,query,sql,new,row,callback,handler,override,public,void,process,row,result,set,rs,throws,sqlexception,throw,sql,exception,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testUseCustomSQLErrorCodeTranslator() throws Exception;1467730834;Test that we see an SQLException translated using Error Code._If we provide the SQLExceptionTranslator, we shouldn't use a connection_to get the metadata;@Test_	public void testUseCustomSQLErrorCodeTranslator() throws Exception {_		_		final SQLException sqlException = new SQLException("I have a known problem", "07000", 1054)__		final String sql = "SELECT ID FROM CUSTOMER"___		given(this.resultSet.next()).willReturn(true)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		JdbcTemplate template = new JdbcTemplate()__		template.setDataSource(this.dataSource)__		_		template.setExceptionTranslator(new SQLStateSQLExceptionTranslator())__		template.afterPropertiesSet()___		this.thrown.expect(BadSqlGrammarException.class)__		this.thrown.expect(exceptionCause(sameInstance(sqlException)))__		try {_			template.query(sql, new RowCallbackHandler() {_				@Override_				public void processRow(ResultSet rs) throws SQLException {_					throw sqlException__				}_			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};test,that,we,see,an,sqlexception,translated,using,error,code,if,we,provide,the,sqlexception,translator,we,shouldn,t,use,a,connection,to,get,the,metadata;test,public,void,test,use,custom,sqlerror,code,translator,throws,exception,final,sqlexception,sql,exception,new,sqlexception,i,have,a,known,problem,07000,1054,final,string,sql,select,id,from,customer,given,this,result,set,next,will,return,true,given,this,connection,create,statement,will,return,this,prepared,statement,jdbc,template,template,new,jdbc,template,template,set,data,source,this,data,source,template,set,exception,translator,new,sqlstate,sqlexception,translator,template,after,properties,set,this,thrown,expect,bad,sql,grammar,exception,class,this,thrown,expect,exception,cause,same,instance,sql,exception,try,template,query,sql,new,row,callback,handler,override,public,void,process,row,result,set,rs,throws,sqlexception,throw,sql,exception,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testUseCustomSQLErrorCodeTranslator() throws Exception;1487178248;Test that we see an SQLException translated using Error Code._If we provide the SQLExceptionTranslator, we shouldn't use a connection_to get the metadata;@Test_	public void testUseCustomSQLErrorCodeTranslator() throws Exception {_		_		final SQLException sqlException = new SQLException("I have a known problem", "07000", 1054)__		final String sql = "SELECT ID FROM CUSTOMER"___		given(this.resultSet.next()).willReturn(true)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		JdbcTemplate template = new JdbcTemplate()__		template.setDataSource(this.dataSource)__		_		template.setExceptionTranslator(new SQLStateSQLExceptionTranslator())__		template.afterPropertiesSet()___		this.thrown.expect(BadSqlGrammarException.class)__		this.thrown.expect(exceptionCause(sameInstance(sqlException)))__		try {_			template.query(sql, new RowCallbackHandler() {_				@Override_				public void processRow(ResultSet rs) throws SQLException {_					throw sqlException__				}_			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};test,that,we,see,an,sqlexception,translated,using,error,code,if,we,provide,the,sqlexception,translator,we,shouldn,t,use,a,connection,to,get,the,metadata;test,public,void,test,use,custom,sqlerror,code,translator,throws,exception,final,sqlexception,sql,exception,new,sqlexception,i,have,a,known,problem,07000,1054,final,string,sql,select,id,from,customer,given,this,result,set,next,will,return,true,given,this,connection,create,statement,will,return,this,prepared,statement,jdbc,template,template,new,jdbc,template,template,set,data,source,this,data,source,template,set,exception,translator,new,sqlstate,sqlexception,translator,template,after,properties,set,this,thrown,expect,bad,sql,grammar,exception,class,this,thrown,expect,exception,cause,same,instance,sql,exception,try,template,query,sql,new,row,callback,handler,override,public,void,process,row,result,set,rs,throws,sqlexception,throw,sql,exception,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testUseCustomSQLErrorCodeTranslator() throws Exception;1487255851;Test that we see an SQLException translated using Error Code._If we provide the SQLExceptionTranslator, we shouldn't use a connection_to get the metadata;@Test_	public void testUseCustomSQLErrorCodeTranslator() throws Exception {_		_		final SQLException sqlException = new SQLException("I have a known problem", "07000", 1054)__		final String sql = "SELECT ID FROM CUSTOMER"___		given(this.resultSet.next()).willReturn(true)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		JdbcTemplate template = new JdbcTemplate()__		template.setDataSource(this.dataSource)__		_		template.setExceptionTranslator(new SQLStateSQLExceptionTranslator())__		template.afterPropertiesSet()___		this.thrown.expect(BadSqlGrammarException.class)__		this.thrown.expect(exceptionCause(sameInstance(sqlException)))__		try {_			template.query(sql, new RowCallbackHandler() {_				@Override_				public void processRow(ResultSet rs) throws SQLException {_					throw sqlException__				}_			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};test,that,we,see,an,sqlexception,translated,using,error,code,if,we,provide,the,sqlexception,translator,we,shouldn,t,use,a,connection,to,get,the,metadata;test,public,void,test,use,custom,sqlerror,code,translator,throws,exception,final,sqlexception,sql,exception,new,sqlexception,i,have,a,known,problem,07000,1054,final,string,sql,select,id,from,customer,given,this,result,set,next,will,return,true,given,this,connection,create,statement,will,return,this,prepared,statement,jdbc,template,template,new,jdbc,template,template,set,data,source,this,data,source,template,set,exception,translator,new,sqlstate,sqlexception,translator,template,after,properties,set,this,thrown,expect,bad,sql,grammar,exception,class,this,thrown,expect,exception,cause,same,instance,sql,exception,try,template,query,sql,new,row,callback,handler,override,public,void,process,row,result,set,rs,throws,sqlexception,throw,sql,exception,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testUseCustomSQLErrorCodeTranslator() throws Exception;1518810557;Test that we see an SQLException translated using Error Code._If we provide the SQLExceptionTranslator, we shouldn't use a connection_to get the metadata;@Test_	public void testUseCustomSQLErrorCodeTranslator() throws Exception {_		_		final SQLException sqlException = new SQLException("I have a known problem", "07000", 1054)__		final String sql = "SELECT ID FROM CUSTOMER"___		given(this.resultSet.next()).willReturn(true)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		JdbcTemplate template = new JdbcTemplate()__		template.setDataSource(this.dataSource)__		_		template.setExceptionTranslator(new SQLStateSQLExceptionTranslator())__		template.afterPropertiesSet()___		this.thrown.expect(BadSqlGrammarException.class)__		this.thrown.expect(exceptionCause(sameInstance(sqlException)))__		try {_			template.query(sql, new RowCallbackHandler() {_				@Override_				public void processRow(ResultSet rs) throws SQLException {_					throw sqlException__				}_			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};test,that,we,see,an,sqlexception,translated,using,error,code,if,we,provide,the,sqlexception,translator,we,shouldn,t,use,a,connection,to,get,the,metadata;test,public,void,test,use,custom,sqlerror,code,translator,throws,exception,final,sqlexception,sql,exception,new,sqlexception,i,have,a,known,problem,07000,1054,final,string,sql,select,id,from,customer,given,this,result,set,next,will,return,true,given,this,connection,create,statement,will,return,this,prepared,statement,jdbc,template,template,new,jdbc,template,template,set,data,source,this,data,source,template,set,exception,translator,new,sqlstate,sqlexception,translator,template,after,properties,set,this,thrown,expect,bad,sql,grammar,exception,class,this,thrown,expect,exception,cause,same,instance,sql,exception,try,template,query,sql,new,row,callback,handler,override,public,void,process,row,result,set,rs,throws,sqlexception,throw,sql,exception,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testUseCustomSQLErrorCodeTranslator() throws Exception;1528313484;Test that we see an SQLException translated using Error Code._If we provide the SQLExceptionTranslator, we shouldn't use a connection_to get the metadata;@Test_	public void testUseCustomSQLErrorCodeTranslator() throws Exception {_		_		final SQLException sqlException = new SQLException("I have a known problem", "07000", 1054)__		final String sql = "SELECT ID FROM CUSTOMER"___		given(this.resultSet.next()).willReturn(true)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		JdbcTemplate template = new JdbcTemplate()__		template.setDataSource(this.dataSource)__		_		template.setExceptionTranslator(new SQLStateSQLExceptionTranslator())__		template.afterPropertiesSet()___		this.thrown.expect(BadSqlGrammarException.class)__		this.thrown.expect(exceptionCause(sameInstance(sqlException)))__		try {_			template.query(sql, (RowCallbackHandler) rs -> {_				throw sqlException__			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};test,that,we,see,an,sqlexception,translated,using,error,code,if,we,provide,the,sqlexception,translator,we,shouldn,t,use,a,connection,to,get,the,metadata;test,public,void,test,use,custom,sqlerror,code,translator,throws,exception,final,sqlexception,sql,exception,new,sqlexception,i,have,a,known,problem,07000,1054,final,string,sql,select,id,from,customer,given,this,result,set,next,will,return,true,given,this,connection,create,statement,will,return,this,prepared,statement,jdbc,template,template,new,jdbc,template,template,set,data,source,this,data,source,template,set,exception,translator,new,sqlstate,sqlexception,translator,template,after,properties,set,this,thrown,expect,bad,sql,grammar,exception,class,this,thrown,expect,exception,cause,same,instance,sql,exception,try,template,query,sql,row,callback,handler,rs,throw,sql,exception,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testUseCustomSQLErrorCodeTranslator() throws Exception;1528719423;Test that we see an SQLException translated using Error Code._If we provide the SQLExceptionTranslator, we shouldn't use a connection_to get the metadata;@Test_	public void testUseCustomSQLErrorCodeTranslator() throws Exception {_		_		final SQLException sqlException = new SQLException("I have a known problem", "07000", 1054)__		final String sql = "SELECT ID FROM CUSTOMER"___		given(this.resultSet.next()).willReturn(true)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		JdbcTemplate template = new JdbcTemplate()__		template.setDataSource(this.dataSource)__		_		template.setExceptionTranslator(new SQLStateSQLExceptionTranslator())__		template.afterPropertiesSet()___		this.thrown.expect(BadSqlGrammarException.class)__		this.thrown.expect(exceptionCause(sameInstance(sqlException)))__		try {_			template.query(sql, (RowCallbackHandler) rs -> {_				throw sqlException__			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};test,that,we,see,an,sqlexception,translated,using,error,code,if,we,provide,the,sqlexception,translator,we,shouldn,t,use,a,connection,to,get,the,metadata;test,public,void,test,use,custom,sqlerror,code,translator,throws,exception,final,sqlexception,sql,exception,new,sqlexception,i,have,a,known,problem,07000,1054,final,string,sql,select,id,from,customer,given,this,result,set,next,will,return,true,given,this,connection,create,statement,will,return,this,prepared,statement,jdbc,template,template,new,jdbc,template,template,set,data,source,this,data,source,template,set,exception,translator,new,sqlstate,sqlexception,translator,template,after,properties,set,this,thrown,expect,bad,sql,grammar,exception,class,this,thrown,expect,exception,cause,same,instance,sql,exception,try,template,query,sql,row,callback,handler,rs,throw,sql,exception,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testUseCustomSQLErrorCodeTranslator() throws Exception;1533741555;Test that we see an SQLException translated using Error Code._If we provide the SQLExceptionTranslator, we shouldn't use a connection_to get the metadata;@Test_	public void testUseCustomSQLErrorCodeTranslator() throws Exception {_		_		final SQLException sqlException = new SQLException("I have a known problem", "07000", 1054)__		final String sql = "SELECT ID FROM CUSTOMER"___		given(this.resultSet.next()).willReturn(true)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		JdbcTemplate template = new JdbcTemplate()__		template.setDataSource(this.dataSource)__		_		template.setExceptionTranslator(new SQLStateSQLExceptionTranslator())__		template.afterPropertiesSet()___		this.thrown.expect(BadSqlGrammarException.class)__		this.thrown.expect(exceptionCause(sameInstance(sqlException)))__		try {_			template.query(sql, (RowCallbackHandler) rs -> {_				throw sqlException__			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};test,that,we,see,an,sqlexception,translated,using,error,code,if,we,provide,the,sqlexception,translator,we,shouldn,t,use,a,connection,to,get,the,metadata;test,public,void,test,use,custom,sqlerror,code,translator,throws,exception,final,sqlexception,sql,exception,new,sqlexception,i,have,a,known,problem,07000,1054,final,string,sql,select,id,from,customer,given,this,result,set,next,will,return,true,given,this,connection,create,statement,will,return,this,prepared,statement,jdbc,template,template,new,jdbc,template,template,set,data,source,this,data,source,template,set,exception,translator,new,sqlstate,sqlexception,translator,template,after,properties,set,this,thrown,expect,bad,sql,grammar,exception,class,this,thrown,expect,exception,cause,same,instance,sql,exception,try,template,query,sql,row,callback,handler,rs,throw,sql,exception,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testUseCustomSQLErrorCodeTranslator() throws Exception;1533774396;Test that we see an SQLException translated using Error Code._If we provide the SQLExceptionTranslator, we shouldn't use a connection_to get the metadata;@Test_	public void testUseCustomSQLErrorCodeTranslator() throws Exception {_		_		final SQLException sqlException = new SQLException("I have a known problem", "07000", 1054)__		final String sql = "SELECT ID FROM CUSTOMER"___		given(this.resultSet.next()).willReturn(true)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		JdbcTemplate template = new JdbcTemplate()__		template.setDataSource(this.dataSource)__		_		template.setExceptionTranslator(new SQLStateSQLExceptionTranslator())__		template.afterPropertiesSet()___		this.thrown.expect(BadSqlGrammarException.class)__		this.thrown.expect(exceptionCause(sameInstance(sqlException)))__		try {_			template.query(sql, (RowCallbackHandler) rs -> {_				throw sqlException__			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};test,that,we,see,an,sqlexception,translated,using,error,code,if,we,provide,the,sqlexception,translator,we,shouldn,t,use,a,connection,to,get,the,metadata;test,public,void,test,use,custom,sqlerror,code,translator,throws,exception,final,sqlexception,sql,exception,new,sqlexception,i,have,a,known,problem,07000,1054,final,string,sql,select,id,from,customer,given,this,result,set,next,will,return,true,given,this,connection,create,statement,will,return,this,prepared,statement,jdbc,template,template,new,jdbc,template,template,set,data,source,this,data,source,template,set,exception,translator,new,sqlstate,sqlexception,translator,template,after,properties,set,this,thrown,expect,bad,sql,grammar,exception,class,this,thrown,expect,exception,cause,same,instance,sql,exception,try,template,query,sql,row,callback,handler,rs,throw,sql,exception,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testUseCustomSQLErrorCodeTranslator() throws Exception;1541680987;Test that we see an SQLException translated using Error Code._If we provide the SQLExceptionTranslator, we shouldn't use a connection_to get the metadata;@Test_	public void testUseCustomSQLErrorCodeTranslator() throws Exception {_		_		final SQLException sqlException = new SQLException("I have a known problem", "07000", 1054)__		final String sql = "SELECT ID FROM CUSTOMER"___		given(this.resultSet.next()).willReturn(true)__		given(this.connection.createStatement()).willReturn(this.preparedStatement)___		JdbcTemplate template = new JdbcTemplate()__		template.setDataSource(this.dataSource)__		_		template.setExceptionTranslator(new SQLStateSQLExceptionTranslator())__		template.afterPropertiesSet()___		this.thrown.expect(BadSqlGrammarException.class)__		this.thrown.expect(exceptionCause(sameInstance(sqlException)))__		try {_			template.query(sql, (RowCallbackHandler) rs -> {_				throw sqlException__			})__		}_		finally {_			verify(this.resultSet).close()__			verify(this.preparedStatement).close()__			verify(this.connection).close()__		}_	};test,that,we,see,an,sqlexception,translated,using,error,code,if,we,provide,the,sqlexception,translator,we,shouldn,t,use,a,connection,to,get,the,metadata;test,public,void,test,use,custom,sqlerror,code,translator,throws,exception,final,sqlexception,sql,exception,new,sqlexception,i,have,a,known,problem,07000,1054,final,string,sql,select,id,from,customer,given,this,result,set,next,will,return,true,given,this,connection,create,statement,will,return,this,prepared,statement,jdbc,template,template,new,jdbc,template,template,set,data,source,this,data,source,template,set,exception,translator,new,sqlstate,sqlexception,translator,template,after,properties,set,this,thrown,expect,bad,sql,grammar,exception,class,this,thrown,expect,exception,cause,same,instance,sql,exception,try,template,query,sql,row,callback,handler,rs,throw,sql,exception,finally,verify,this,result,set,close,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testSqlUpdateWithArguments() throws Exception;1356735495;Test update with dynamic SQL.;@Test_	public void testSqlUpdateWithArguments() throws Exception {_		final String sql = "UPDATE NOSUCHTABLE SET DATE_DISPATCHED = SYSDATE WHERE ID = ? and PR = ?"__		int rowsAffected = 33__		given(this.preparedStatement.executeUpdate()).willReturn(rowsAffected)___		int actualRowsAffected = this.template.update(sql,_				new Object[] {4, new SqlParameterValue(Types.NUMERIC, 2, new Float(1.4142))})__		assertTrue("Actual rows affected is correct", actualRowsAffected == rowsAffected)__		verify(this.preparedStatement).setObject(1, 4)__		verify(this.preparedStatement).setObject(2, new Float(1.4142), Types.NUMERIC, 2)__		verify(this.preparedStatement).close()__		verify(this.connection).close()__	};test,update,with,dynamic,sql;test,public,void,test,sql,update,with,arguments,throws,exception,final,string,sql,update,nosuchtable,set,sysdate,where,id,and,pr,int,rows,affected,33,given,this,prepared,statement,execute,update,will,return,rows,affected,int,actual,rows,affected,this,template,update,sql,new,object,4,new,sql,parameter,value,types,numeric,2,new,float,1,4142,assert,true,actual,rows,affected,is,correct,actual,rows,affected,rows,affected,verify,this,prepared,statement,set,object,1,4,verify,this,prepared,statement,set,object,2,new,float,1,4142,types,numeric,2,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testSqlUpdateWithArguments() throws Exception;1357119417;Test update with dynamic SQL.;@Test_	public void testSqlUpdateWithArguments() throws Exception {_		final String sql = "UPDATE NOSUCHTABLE SET DATE_DISPATCHED = SYSDATE WHERE ID = ? and PR = ?"__		int rowsAffected = 33__		given(this.preparedStatement.executeUpdate()).willReturn(rowsAffected)___		int actualRowsAffected = this.template.update(sql,_				new Object[] {4, new SqlParameterValue(Types.NUMERIC, 2, new Float(1.4142))})__		assertTrue("Actual rows affected is correct", actualRowsAffected == rowsAffected)__		verify(this.preparedStatement).setObject(1, 4)__		verify(this.preparedStatement).setObject(2, new Float(1.4142), Types.NUMERIC, 2)__		verify(this.preparedStatement).close()__		verify(this.connection).close()__	};test,update,with,dynamic,sql;test,public,void,test,sql,update,with,arguments,throws,exception,final,string,sql,update,nosuchtable,set,sysdate,where,id,and,pr,int,rows,affected,33,given,this,prepared,statement,execute,update,will,return,rows,affected,int,actual,rows,affected,this,template,update,sql,new,object,4,new,sql,parameter,value,types,numeric,2,new,float,1,4142,assert,true,actual,rows,affected,is,correct,actual,rows,affected,rows,affected,verify,this,prepared,statement,set,object,1,4,verify,this,prepared,statement,set,object,2,new,float,1,4142,types,numeric,2,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testSqlUpdateWithArguments() throws Exception;1363208506;Test update with dynamic SQL.;@Test_	public void testSqlUpdateWithArguments() throws Exception {_		final String sql = "UPDATE NOSUCHTABLE SET DATE_DISPATCHED = SYSDATE WHERE ID = ? and PR = ?"__		int rowsAffected = 33__		given(this.preparedStatement.executeUpdate()).willReturn(rowsAffected)___		int actualRowsAffected = this.template.update(sql,_				new Object[] {4, new SqlParameterValue(Types.NUMERIC, 2, new Float(1.4142))})__		assertTrue("Actual rows affected is correct", actualRowsAffected == rowsAffected)__		verify(this.preparedStatement).setObject(1, 4)__		verify(this.preparedStatement).setObject(2, new Float(1.4142), Types.NUMERIC, 2)__		verify(this.preparedStatement).close()__		verify(this.connection).close()__	};test,update,with,dynamic,sql;test,public,void,test,sql,update,with,arguments,throws,exception,final,string,sql,update,nosuchtable,set,sysdate,where,id,and,pr,int,rows,affected,33,given,this,prepared,statement,execute,update,will,return,rows,affected,int,actual,rows,affected,this,template,update,sql,new,object,4,new,sql,parameter,value,types,numeric,2,new,float,1,4142,assert,true,actual,rows,affected,is,correct,actual,rows,affected,rows,affected,verify,this,prepared,statement,set,object,1,4,verify,this,prepared,statement,set,object,2,new,float,1,4142,types,numeric,2,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testSqlUpdateWithArguments() throws Exception;1372363092;Test update with dynamic SQL.;@Test_	public void testSqlUpdateWithArguments() throws Exception {_		final String sql = "UPDATE NOSUCHTABLE SET DATE_DISPATCHED = SYSDATE WHERE ID = ? and PR = ?"__		int rowsAffected = 33__		given(this.preparedStatement.executeUpdate()).willReturn(rowsAffected)___		int actualRowsAffected = this.template.update(sql,_				new Object[] {4, new SqlParameterValue(Types.NUMERIC, 2, new Float(1.4142))})__		assertTrue("Actual rows affected is correct", actualRowsAffected == rowsAffected)__		verify(this.preparedStatement).setObject(1, 4)__		verify(this.preparedStatement).setObject(2, new Float(1.4142), Types.NUMERIC, 2)__		verify(this.preparedStatement).close()__		verify(this.connection).close()__	};test,update,with,dynamic,sql;test,public,void,test,sql,update,with,arguments,throws,exception,final,string,sql,update,nosuchtable,set,sysdate,where,id,and,pr,int,rows,affected,33,given,this,prepared,statement,execute,update,will,return,rows,affected,int,actual,rows,affected,this,template,update,sql,new,object,4,new,sql,parameter,value,types,numeric,2,new,float,1,4142,assert,true,actual,rows,affected,is,correct,actual,rows,affected,rows,affected,verify,this,prepared,statement,set,object,1,4,verify,this,prepared,statement,set,object,2,new,float,1,4142,types,numeric,2,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testSqlUpdateWithArguments() throws Exception;1398144444;Test update with dynamic SQL.;@Test_	public void testSqlUpdateWithArguments() throws Exception {_		final String sql = "UPDATE NOSUCHTABLE SET DATE_DISPATCHED = SYSDATE WHERE ID = ? and PR = ?"__		int rowsAffected = 33__		given(this.preparedStatement.executeUpdate()).willReturn(rowsAffected)___		int actualRowsAffected = this.template.update(sql,_				new Object[] {4, new SqlParameterValue(Types.NUMERIC, 2, new Float(1.4142))})__		assertTrue("Actual rows affected is correct", actualRowsAffected == rowsAffected)__		verify(this.preparedStatement).setObject(1, 4)__		verify(this.preparedStatement).setObject(2, new Float(1.4142), Types.NUMERIC, 2)__		verify(this.preparedStatement).close()__		verify(this.connection).close()__	};test,update,with,dynamic,sql;test,public,void,test,sql,update,with,arguments,throws,exception,final,string,sql,update,nosuchtable,set,sysdate,where,id,and,pr,int,rows,affected,33,given,this,prepared,statement,execute,update,will,return,rows,affected,int,actual,rows,affected,this,template,update,sql,new,object,4,new,sql,parameter,value,types,numeric,2,new,float,1,4142,assert,true,actual,rows,affected,is,correct,actual,rows,affected,rows,affected,verify,this,prepared,statement,set,object,1,4,verify,this,prepared,statement,set,object,2,new,float,1,4142,types,numeric,2,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testSqlUpdateWithArguments() throws Exception;1413848647;Test update with dynamic SQL.;@Test_	public void testSqlUpdateWithArguments() throws Exception {_		final String sql = "UPDATE NOSUCHTABLE SET DATE_DISPATCHED = SYSDATE WHERE ID = ? and PR = ?"__		int rowsAffected = 33__		given(this.preparedStatement.executeUpdate()).willReturn(rowsAffected)___		int actualRowsAffected = this.template.update(sql,_				new Object[] {4, new SqlParameterValue(Types.NUMERIC, 2, new Float(1.4142))})__		assertTrue("Actual rows affected is correct", actualRowsAffected == rowsAffected)__		verify(this.preparedStatement).setObject(1, 4)__		verify(this.preparedStatement).setObject(2, new Float(1.4142), Types.NUMERIC, 2)__		verify(this.preparedStatement).close()__		verify(this.connection).close()__	};test,update,with,dynamic,sql;test,public,void,test,sql,update,with,arguments,throws,exception,final,string,sql,update,nosuchtable,set,sysdate,where,id,and,pr,int,rows,affected,33,given,this,prepared,statement,execute,update,will,return,rows,affected,int,actual,rows,affected,this,template,update,sql,new,object,4,new,sql,parameter,value,types,numeric,2,new,float,1,4142,assert,true,actual,rows,affected,is,correct,actual,rows,affected,rows,affected,verify,this,prepared,statement,set,object,1,4,verify,this,prepared,statement,set,object,2,new,float,1,4142,types,numeric,2,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testSqlUpdateWithArguments() throws Exception;1467730834;Test update with dynamic SQL.;@Test_	public void testSqlUpdateWithArguments() throws Exception {_		final String sql = "UPDATE NOSUCHTABLE SET DATE_DISPATCHED = SYSDATE WHERE ID = ? and PR = ?"__		int rowsAffected = 33__		given(this.preparedStatement.executeUpdate()).willReturn(rowsAffected)___		int actualRowsAffected = this.template.update(sql,_				new Object[] {4, new SqlParameterValue(Types.NUMERIC, 2, new Float(1.4142))})__		assertTrue("Actual rows affected is correct", actualRowsAffected == rowsAffected)__		verify(this.preparedStatement).setObject(1, 4)__		verify(this.preparedStatement).setObject(2, new Float(1.4142), Types.NUMERIC, 2)__		verify(this.preparedStatement).close()__		verify(this.connection).close()__	};test,update,with,dynamic,sql;test,public,void,test,sql,update,with,arguments,throws,exception,final,string,sql,update,nosuchtable,set,sysdate,where,id,and,pr,int,rows,affected,33,given,this,prepared,statement,execute,update,will,return,rows,affected,int,actual,rows,affected,this,template,update,sql,new,object,4,new,sql,parameter,value,types,numeric,2,new,float,1,4142,assert,true,actual,rows,affected,is,correct,actual,rows,affected,rows,affected,verify,this,prepared,statement,set,object,1,4,verify,this,prepared,statement,set,object,2,new,float,1,4142,types,numeric,2,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testSqlUpdateWithArguments() throws Exception;1487178248;Test update with dynamic SQL.;@Test_	public void testSqlUpdateWithArguments() throws Exception {_		final String sql = "UPDATE NOSUCHTABLE SET DATE_DISPATCHED = SYSDATE WHERE ID = ? and PR = ?"__		int rowsAffected = 33__		given(this.preparedStatement.executeUpdate()).willReturn(rowsAffected)___		int actualRowsAffected = this.template.update(sql,_				new Object[] {4, new SqlParameterValue(Types.NUMERIC, 2, new Float(1.4142))})__		assertTrue("Actual rows affected is correct", actualRowsAffected == rowsAffected)__		verify(this.preparedStatement).setObject(1, 4)__		verify(this.preparedStatement).setObject(2, new Float(1.4142), Types.NUMERIC, 2)__		verify(this.preparedStatement).close()__		verify(this.connection).close()__	};test,update,with,dynamic,sql;test,public,void,test,sql,update,with,arguments,throws,exception,final,string,sql,update,nosuchtable,set,sysdate,where,id,and,pr,int,rows,affected,33,given,this,prepared,statement,execute,update,will,return,rows,affected,int,actual,rows,affected,this,template,update,sql,new,object,4,new,sql,parameter,value,types,numeric,2,new,float,1,4142,assert,true,actual,rows,affected,is,correct,actual,rows,affected,rows,affected,verify,this,prepared,statement,set,object,1,4,verify,this,prepared,statement,set,object,2,new,float,1,4142,types,numeric,2,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testSqlUpdateWithArguments() throws Exception;1487255851;Test update with dynamic SQL.;@Test_	public void testSqlUpdateWithArguments() throws Exception {_		final String sql = "UPDATE NOSUCHTABLE SET DATE_DISPATCHED = SYSDATE WHERE ID = ? and PR = ?"__		int rowsAffected = 33__		given(this.preparedStatement.executeUpdate()).willReturn(rowsAffected)___		int actualRowsAffected = this.template.update(sql,_				new Object[] {4, new SqlParameterValue(Types.NUMERIC, 2, new Float(1.4142))})__		assertTrue("Actual rows affected is correct", actualRowsAffected == rowsAffected)__		verify(this.preparedStatement).setObject(1, 4)__		verify(this.preparedStatement).setObject(2, new Float(1.4142), Types.NUMERIC, 2)__		verify(this.preparedStatement).close()__		verify(this.connection).close()__	};test,update,with,dynamic,sql;test,public,void,test,sql,update,with,arguments,throws,exception,final,string,sql,update,nosuchtable,set,sysdate,where,id,and,pr,int,rows,affected,33,given,this,prepared,statement,execute,update,will,return,rows,affected,int,actual,rows,affected,this,template,update,sql,new,object,4,new,sql,parameter,value,types,numeric,2,new,float,1,4142,assert,true,actual,rows,affected,is,correct,actual,rows,affected,rows,affected,verify,this,prepared,statement,set,object,1,4,verify,this,prepared,statement,set,object,2,new,float,1,4142,types,numeric,2,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testSqlUpdateWithArguments() throws Exception;1518810557;Test update with dynamic SQL.;@Test_	public void testSqlUpdateWithArguments() throws Exception {_		final String sql = "UPDATE NOSUCHTABLE SET DATE_DISPATCHED = SYSDATE WHERE ID = ? and PR = ?"__		int rowsAffected = 33__		given(this.preparedStatement.executeUpdate()).willReturn(rowsAffected)___		int actualRowsAffected = this.template.update(sql,_				new Object[] {4, new SqlParameterValue(Types.NUMERIC, 2, new Float(1.4142))})__		assertTrue("Actual rows affected is correct", actualRowsAffected == rowsAffected)__		verify(this.preparedStatement).setObject(1, 4)__		verify(this.preparedStatement).setObject(2, new Float(1.4142), Types.NUMERIC, 2)__		verify(this.preparedStatement).close()__		verify(this.connection).close()__	};test,update,with,dynamic,sql;test,public,void,test,sql,update,with,arguments,throws,exception,final,string,sql,update,nosuchtable,set,sysdate,where,id,and,pr,int,rows,affected,33,given,this,prepared,statement,execute,update,will,return,rows,affected,int,actual,rows,affected,this,template,update,sql,new,object,4,new,sql,parameter,value,types,numeric,2,new,float,1,4142,assert,true,actual,rows,affected,is,correct,actual,rows,affected,rows,affected,verify,this,prepared,statement,set,object,1,4,verify,this,prepared,statement,set,object,2,new,float,1,4142,types,numeric,2,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testSqlUpdateWithArguments() throws Exception;1528313484;Test update with dynamic SQL.;@Test_	public void testSqlUpdateWithArguments() throws Exception {_		final String sql = "UPDATE NOSUCHTABLE SET DATE_DISPATCHED = SYSDATE WHERE ID = ? and PR = ?"__		int rowsAffected = 33__		given(this.preparedStatement.executeUpdate()).willReturn(rowsAffected)___		int actualRowsAffected = this.template.update(sql,_				new Object[] {4, new SqlParameterValue(Types.NUMERIC, 2, new Float(1.4142))})__		assertTrue("Actual rows affected is correct", actualRowsAffected == rowsAffected)__		verify(this.preparedStatement).setObject(1, 4)__		verify(this.preparedStatement).setObject(2, new Float(1.4142), Types.NUMERIC, 2)__		verify(this.preparedStatement).close()__		verify(this.connection).close()__	};test,update,with,dynamic,sql;test,public,void,test,sql,update,with,arguments,throws,exception,final,string,sql,update,nosuchtable,set,sysdate,where,id,and,pr,int,rows,affected,33,given,this,prepared,statement,execute,update,will,return,rows,affected,int,actual,rows,affected,this,template,update,sql,new,object,4,new,sql,parameter,value,types,numeric,2,new,float,1,4142,assert,true,actual,rows,affected,is,correct,actual,rows,affected,rows,affected,verify,this,prepared,statement,set,object,1,4,verify,this,prepared,statement,set,object,2,new,float,1,4142,types,numeric,2,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testSqlUpdateWithArguments() throws Exception;1528719423;Test update with dynamic SQL.;@Test_	public void testSqlUpdateWithArguments() throws Exception {_		final String sql = "UPDATE NOSUCHTABLE SET DATE_DISPATCHED = SYSDATE WHERE ID = ? and PR = ?"__		int rowsAffected = 33__		given(this.preparedStatement.executeUpdate()).willReturn(rowsAffected)___		int actualRowsAffected = this.template.update(sql,_				new Object[] {4, new SqlParameterValue(Types.NUMERIC, 2, new Float(1.4142))})__		assertTrue("Actual rows affected is correct", actualRowsAffected == rowsAffected)__		verify(this.preparedStatement).setObject(1, 4)__		verify(this.preparedStatement).setObject(2, new Float(1.4142), Types.NUMERIC, 2)__		verify(this.preparedStatement).close()__		verify(this.connection).close()__	};test,update,with,dynamic,sql;test,public,void,test,sql,update,with,arguments,throws,exception,final,string,sql,update,nosuchtable,set,sysdate,where,id,and,pr,int,rows,affected,33,given,this,prepared,statement,execute,update,will,return,rows,affected,int,actual,rows,affected,this,template,update,sql,new,object,4,new,sql,parameter,value,types,numeric,2,new,float,1,4142,assert,true,actual,rows,affected,is,correct,actual,rows,affected,rows,affected,verify,this,prepared,statement,set,object,1,4,verify,this,prepared,statement,set,object,2,new,float,1,4142,types,numeric,2,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testSqlUpdateWithArguments() throws Exception;1533741555;Test update with dynamic SQL.;@Test_	public void testSqlUpdateWithArguments() throws Exception {_		final String sql = "UPDATE NOSUCHTABLE SET DATE_DISPATCHED = SYSDATE WHERE ID = ? and PR = ?"__		int rowsAffected = 33__		given(this.preparedStatement.executeUpdate()).willReturn(rowsAffected)___		int actualRowsAffected = this.template.update(sql,_				new Object[] {4, new SqlParameterValue(Types.NUMERIC, 2, Float.valueOf(1.4142f))})__		assertTrue("Actual rows affected is correct", actualRowsAffected == rowsAffected)__		verify(this.preparedStatement).setObject(1, 4)__		verify(this.preparedStatement).setObject(2, Float.valueOf(1.4142f), Types.NUMERIC, 2)__		verify(this.preparedStatement).close()__		verify(this.connection).close()__	};test,update,with,dynamic,sql;test,public,void,test,sql,update,with,arguments,throws,exception,final,string,sql,update,nosuchtable,set,sysdate,where,id,and,pr,int,rows,affected,33,given,this,prepared,statement,execute,update,will,return,rows,affected,int,actual,rows,affected,this,template,update,sql,new,object,4,new,sql,parameter,value,types,numeric,2,float,value,of,1,4142f,assert,true,actual,rows,affected,is,correct,actual,rows,affected,rows,affected,verify,this,prepared,statement,set,object,1,4,verify,this,prepared,statement,set,object,2,float,value,of,1,4142f,types,numeric,2,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testSqlUpdateWithArguments() throws Exception;1533774396;Test update with dynamic SQL.;@Test_	public void testSqlUpdateWithArguments() throws Exception {_		final String sql = "UPDATE NOSUCHTABLE SET DATE_DISPATCHED = SYSDATE WHERE ID = ? and PR = ?"__		int rowsAffected = 33__		given(this.preparedStatement.executeUpdate()).willReturn(rowsAffected)___		int actualRowsAffected = this.template.update(sql,_				4, new SqlParameterValue(Types.NUMERIC, 2, Float.valueOf(1.4142f)))__		assertTrue("Actual rows affected is correct", actualRowsAffected == rowsAffected)__		verify(this.preparedStatement).setObject(1, 4)__		verify(this.preparedStatement).setObject(2, Float.valueOf(1.4142f), Types.NUMERIC, 2)__		verify(this.preparedStatement).close()__		verify(this.connection).close()__	};test,update,with,dynamic,sql;test,public,void,test,sql,update,with,arguments,throws,exception,final,string,sql,update,nosuchtable,set,sysdate,where,id,and,pr,int,rows,affected,33,given,this,prepared,statement,execute,update,will,return,rows,affected,int,actual,rows,affected,this,template,update,sql,4,new,sql,parameter,value,types,numeric,2,float,value,of,1,4142f,assert,true,actual,rows,affected,is,correct,actual,rows,affected,rows,affected,verify,this,prepared,statement,set,object,1,4,verify,this,prepared,statement,set,object,2,float,value,of,1,4142f,types,numeric,2,verify,this,prepared,statement,close,verify,this,connection,close
JdbcTemplateTests -> @Test 	public void testSqlUpdateWithArguments() throws Exception;1541680987;Test update with dynamic SQL.;@Test_	public void testSqlUpdateWithArguments() throws Exception {_		final String sql = "UPDATE NOSUCHTABLE SET DATE_DISPATCHED = SYSDATE WHERE ID = ? and PR = ?"__		int rowsAffected = 33__		given(this.preparedStatement.executeUpdate()).willReturn(rowsAffected)___		int actualRowsAffected = this.template.update(sql,_				4, new SqlParameterValue(Types.NUMERIC, 2, Float.valueOf(1.4142f)))__		assertTrue("Actual rows affected is correct", actualRowsAffected == rowsAffected)__		verify(this.preparedStatement).setObject(1, 4)__		verify(this.preparedStatement).setObject(2, Float.valueOf(1.4142f), Types.NUMERIC, 2)__		verify(this.preparedStatement).close()__		verify(this.connection).close()__	};test,update,with,dynamic,sql;test,public,void,test,sql,update,with,arguments,throws,exception,final,string,sql,update,nosuchtable,set,sysdate,where,id,and,pr,int,rows,affected,33,given,this,prepared,statement,execute,update,will,return,rows,affected,int,actual,rows,affected,this,template,update,sql,4,new,sql,parameter,value,types,numeric,2,float,value,of,1,4142f,assert,true,actual,rows,affected,is,correct,actual,rows,affected,rows,affected,verify,this,prepared,statement,set,object,1,4,verify,this,prepared,statement,set,object,2,float,value,of,1,4142f,types,numeric,2,verify,this,prepared,statement,close,verify,this,connection,close
