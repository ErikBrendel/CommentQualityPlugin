# id;timestamp;commentText;codeText;commentWords;codeWords
DataSourceTransactionManagerTests -> @Test 	public void testTransactionWithExceptionOnBegin() throws Exception;1356735495;Test behavior if the first operation on a connection (getAutoCommit) throws SQLException.;@Test_	public void testTransactionWithExceptionOnBegin() throws Exception {_		willThrow(new SQLException("Cannot begin")).given(con).getAutoCommit()___		TransactionTemplate tt = new TransactionTemplate(tm)__		try {_			tt.execute(new TransactionCallbackWithoutResult() {_				@Override_				protected void doInTransactionWithoutResult(TransactionStatus status) {_					_				}_			})__			fail("Should have thrown CannotCreateTransactionException")__		}_		catch (CannotCreateTransactionException ex) {_			_		}__		assertTrue("Hasn't thread connection", !TransactionSynchronizationManager.hasResource(ds))__		verify(con).close()__	};test,behavior,if,the,first,operation,on,a,connection,get,auto,commit,throws,sqlexception;test,public,void,test,transaction,with,exception,on,begin,throws,exception,will,throw,new,sqlexception,cannot,begin,given,con,get,auto,commit,transaction,template,tt,new,transaction,template,tm,try,tt,execute,new,transaction,callback,without,result,override,protected,void,do,in,transaction,without,result,transaction,status,status,fail,should,have,thrown,cannot,create,transaction,exception,catch,cannot,create,transaction,exception,ex,assert,true,hasn,t,thread,connection,transaction,synchronization,manager,has,resource,ds,verify,con,close
DataSourceTransactionManagerTests -> @Test 	public void testTransactionWithExceptionOnBegin() throws Exception;1357248712;Test behavior if the first operation on a connection (getAutoCommit) throws SQLException.;@Test_	public void testTransactionWithExceptionOnBegin() throws Exception {_		willThrow(new SQLException("Cannot begin")).given(con).getAutoCommit()___		TransactionTemplate tt = new TransactionTemplate(tm)__		try {_			tt.execute(new TransactionCallbackWithoutResult() {_				@Override_				protected void doInTransactionWithoutResult(TransactionStatus status) {_					_				}_			})__			fail("Should have thrown CannotCreateTransactionException")__		}_		catch (CannotCreateTransactionException ex) {_			_		}__		assertTrue("Hasn't thread connection", !TransactionSynchronizationManager.hasResource(ds))__		verify(con).close()__	};test,behavior,if,the,first,operation,on,a,connection,get,auto,commit,throws,sqlexception;test,public,void,test,transaction,with,exception,on,begin,throws,exception,will,throw,new,sqlexception,cannot,begin,given,con,get,auto,commit,transaction,template,tt,new,transaction,template,tm,try,tt,execute,new,transaction,callback,without,result,override,protected,void,do,in,transaction,without,result,transaction,status,status,fail,should,have,thrown,cannot,create,transaction,exception,catch,cannot,create,transaction,exception,ex,assert,true,hasn,t,thread,connection,transaction,synchronization,manager,has,resource,ds,verify,con,close
DataSourceTransactionManagerTests -> @Test 	public void testTransactionWithExceptionOnBegin() throws Exception;1363208506;Test behavior if the first operation on a connection (getAutoCommit) throws SQLException.;@Test_	public void testTransactionWithExceptionOnBegin() throws Exception {_		willThrow(new SQLException("Cannot begin")).given(con).getAutoCommit()___		TransactionTemplate tt = new TransactionTemplate(tm)__		try {_			tt.execute(new TransactionCallbackWithoutResult() {_				@Override_				protected void doInTransactionWithoutResult(TransactionStatus status) {_					_				}_			})__			fail("Should have thrown CannotCreateTransactionException")__		}_		catch (CannotCreateTransactionException ex) {_			_		}__		assertTrue("Hasn't thread connection", !TransactionSynchronizationManager.hasResource(ds))__		verify(con).close()__	};test,behavior,if,the,first,operation,on,a,connection,get,auto,commit,throws,sqlexception;test,public,void,test,transaction,with,exception,on,begin,throws,exception,will,throw,new,sqlexception,cannot,begin,given,con,get,auto,commit,transaction,template,tt,new,transaction,template,tm,try,tt,execute,new,transaction,callback,without,result,override,protected,void,do,in,transaction,without,result,transaction,status,status,fail,should,have,thrown,cannot,create,transaction,exception,catch,cannot,create,transaction,exception,ex,assert,true,hasn,t,thread,connection,transaction,synchronization,manager,has,resource,ds,verify,con,close
DataSourceTransactionManagerTests -> @Test 	public void testTransactionWithExceptionOnBegin() throws Exception;1411390744;Test behavior if the first operation on a connection (getAutoCommit) throws SQLException.;@Test_	public void testTransactionWithExceptionOnBegin() throws Exception {_		willThrow(new SQLException("Cannot begin")).given(con).getAutoCommit()___		TransactionTemplate tt = new TransactionTemplate(tm)__		try {_			tt.execute(new TransactionCallbackWithoutResult() {_				@Override_				protected void doInTransactionWithoutResult(TransactionStatus status) {_					_				}_			})__			fail("Should have thrown CannotCreateTransactionException")__		}_		catch (CannotCreateTransactionException ex) {_			_		}__		assertTrue("Hasn't thread connection", !TransactionSynchronizationManager.hasResource(ds))__		verify(con).close()__	};test,behavior,if,the,first,operation,on,a,connection,get,auto,commit,throws,sqlexception;test,public,void,test,transaction,with,exception,on,begin,throws,exception,will,throw,new,sqlexception,cannot,begin,given,con,get,auto,commit,transaction,template,tt,new,transaction,template,tm,try,tt,execute,new,transaction,callback,without,result,override,protected,void,do,in,transaction,without,result,transaction,status,status,fail,should,have,thrown,cannot,create,transaction,exception,catch,cannot,create,transaction,exception,ex,assert,true,hasn,t,thread,connection,transaction,synchronization,manager,has,resource,ds,verify,con,close
DataSourceTransactionManagerTests -> @Test 	public void testTransactionWithExceptionOnBegin() throws Exception;1458843770;Test behavior if the first operation on a connection (getAutoCommit) throws SQLException.;@Test_	public void testTransactionWithExceptionOnBegin() throws Exception {_		willThrow(new SQLException("Cannot begin")).given(con).getAutoCommit()___		TransactionTemplate tt = new TransactionTemplate(tm)__		try {_			tt.execute(new TransactionCallbackWithoutResult() {_				@Override_				protected void doInTransactionWithoutResult(TransactionStatus status) {_					_				}_			})__			fail("Should have thrown CannotCreateTransactionException")__		}_		catch (CannotCreateTransactionException ex) {_			_		}__		assertTrue("Hasn't thread connection", !TransactionSynchronizationManager.hasResource(ds))__		verify(con).close()__	};test,behavior,if,the,first,operation,on,a,connection,get,auto,commit,throws,sqlexception;test,public,void,test,transaction,with,exception,on,begin,throws,exception,will,throw,new,sqlexception,cannot,begin,given,con,get,auto,commit,transaction,template,tt,new,transaction,template,tm,try,tt,execute,new,transaction,callback,without,result,override,protected,void,do,in,transaction,without,result,transaction,status,status,fail,should,have,thrown,cannot,create,transaction,exception,catch,cannot,create,transaction,exception,ex,assert,true,hasn,t,thread,connection,transaction,synchronization,manager,has,resource,ds,verify,con,close
DataSourceTransactionManagerTests -> @Test 	public void testTransactionWithExceptionOnBegin() throws Exception;1486062388;Test behavior if the first operation on a connection (getAutoCommit) throws SQLException.;@Test_	public void testTransactionWithExceptionOnBegin() throws Exception {_		willThrow(new SQLException("Cannot begin")).given(con).getAutoCommit()___		TransactionTemplate tt = new TransactionTemplate(tm)__		try {_			tt.execute(new TransactionCallbackWithoutResult() {_				@Override_				protected void doInTransactionWithoutResult(TransactionStatus status) {_					_				}_			})__			fail("Should have thrown CannotCreateTransactionException")__		}_		catch (CannotCreateTransactionException ex) {_			_		}__		assertTrue("Hasn't thread connection", !TransactionSynchronizationManager.hasResource(ds))__		verify(con).close()__	};test,behavior,if,the,first,operation,on,a,connection,get,auto,commit,throws,sqlexception;test,public,void,test,transaction,with,exception,on,begin,throws,exception,will,throw,new,sqlexception,cannot,begin,given,con,get,auto,commit,transaction,template,tt,new,transaction,template,tm,try,tt,execute,new,transaction,callback,without,result,override,protected,void,do,in,transaction,without,result,transaction,status,status,fail,should,have,thrown,cannot,create,transaction,exception,catch,cannot,create,transaction,exception,ex,assert,true,hasn,t,thread,connection,transaction,synchronization,manager,has,resource,ds,verify,con,close
DataSourceTransactionManagerTests -> @Test 	public void testTransactionWithExceptionOnBegin() throws Exception;1486719573;Test behavior if the first operation on a connection (getAutoCommit) throws SQLException.;@Test_	public void testTransactionWithExceptionOnBegin() throws Exception {_		willThrow(new SQLException("Cannot begin")).given(con).getAutoCommit()___		TransactionTemplate tt = new TransactionTemplate(tm)__		try {_			tt.execute(new TransactionCallbackWithoutResult() {_				@Override_				protected void doInTransactionWithoutResult(TransactionStatus status) {_					_				}_			})__			fail("Should have thrown CannotCreateTransactionException")__		}_		catch (CannotCreateTransactionException ex) {_			_		}__		assertTrue("Hasn't thread connection", !TransactionSynchronizationManager.hasResource(ds))__		verify(con).close()__	};test,behavior,if,the,first,operation,on,a,connection,get,auto,commit,throws,sqlexception;test,public,void,test,transaction,with,exception,on,begin,throws,exception,will,throw,new,sqlexception,cannot,begin,given,con,get,auto,commit,transaction,template,tt,new,transaction,template,tm,try,tt,execute,new,transaction,callback,without,result,override,protected,void,do,in,transaction,without,result,transaction,status,status,fail,should,have,thrown,cannot,create,transaction,exception,catch,cannot,create,transaction,exception,ex,assert,true,hasn,t,thread,connection,transaction,synchronization,manager,has,resource,ds,verify,con,close
DataSourceTransactionManagerTests -> @Test 	public void testTransactionWithExceptionOnBegin() throws Exception;1487178248;Test behavior if the first operation on a connection (getAutoCommit) throws SQLException.;@Test_	public void testTransactionWithExceptionOnBegin() throws Exception {_		willThrow(new SQLException("Cannot begin")).given(con).getAutoCommit()___		TransactionTemplate tt = new TransactionTemplate(tm)__		try {_			tt.execute(new TransactionCallbackWithoutResult() {_				@Override_				protected void doInTransactionWithoutResult(TransactionStatus status) {_					_				}_			})__			fail("Should have thrown CannotCreateTransactionException")__		}_		catch (CannotCreateTransactionException ex) {_			_		}__		assertTrue("Hasn't thread connection", !TransactionSynchronizationManager.hasResource(ds))__		verify(con).close()__	};test,behavior,if,the,first,operation,on,a,connection,get,auto,commit,throws,sqlexception;test,public,void,test,transaction,with,exception,on,begin,throws,exception,will,throw,new,sqlexception,cannot,begin,given,con,get,auto,commit,transaction,template,tt,new,transaction,template,tm,try,tt,execute,new,transaction,callback,without,result,override,protected,void,do,in,transaction,without,result,transaction,status,status,fail,should,have,thrown,cannot,create,transaction,exception,catch,cannot,create,transaction,exception,ex,assert,true,hasn,t,thread,connection,transaction,synchronization,manager,has,resource,ds,verify,con,close
DataSourceTransactionManagerTests -> @Test 	public void testTransactionWithExceptionOnBegin() throws Exception;1487371244;Test behavior if the first operation on a connection (getAutoCommit) throws SQLException.;@Test_	public void testTransactionWithExceptionOnBegin() throws Exception {_		willThrow(new SQLException("Cannot begin")).given(con).getAutoCommit()___		TransactionTemplate tt = new TransactionTemplate(tm)__		try {_			tt.execute(new TransactionCallbackWithoutResult() {_				@Override_				protected void doInTransactionWithoutResult(TransactionStatus status) {_					_				}_			})__			fail("Should have thrown CannotCreateTransactionException")__		}_		catch (CannotCreateTransactionException ex) {_			_		}__		assertTrue("Hasn't thread connection", !TransactionSynchronizationManager.hasResource(ds))__		verify(con).close()__	};test,behavior,if,the,first,operation,on,a,connection,get,auto,commit,throws,sqlexception;test,public,void,test,transaction,with,exception,on,begin,throws,exception,will,throw,new,sqlexception,cannot,begin,given,con,get,auto,commit,transaction,template,tt,new,transaction,template,tm,try,tt,execute,new,transaction,callback,without,result,override,protected,void,do,in,transaction,without,result,transaction,status,status,fail,should,have,thrown,cannot,create,transaction,exception,catch,cannot,create,transaction,exception,ex,assert,true,hasn,t,thread,connection,transaction,synchronization,manager,has,resource,ds,verify,con,close
DataSourceTransactionManagerTests -> @Test 	public void testTransactionWithExceptionOnBegin() throws Exception;1523313651;Test behavior if the first operation on a connection (getAutoCommit) throws SQLException.;@Test_	public void testTransactionWithExceptionOnBegin() throws Exception {_		willThrow(new SQLException("Cannot begin")).given(con).getAutoCommit()___		TransactionTemplate tt = new TransactionTemplate(tm)__		try {_			tt.execute(new TransactionCallbackWithoutResult() {_				@Override_				protected void doInTransactionWithoutResult(TransactionStatus status) {_					_				}_			})__			fail("Should have thrown CannotCreateTransactionException")__		}_		catch (CannotCreateTransactionException ex) {_			_		}__		assertTrue("Hasn't thread connection", !TransactionSynchronizationManager.hasResource(ds))__		verify(con).close()__	};test,behavior,if,the,first,operation,on,a,connection,get,auto,commit,throws,sqlexception;test,public,void,test,transaction,with,exception,on,begin,throws,exception,will,throw,new,sqlexception,cannot,begin,given,con,get,auto,commit,transaction,template,tt,new,transaction,template,tm,try,tt,execute,new,transaction,callback,without,result,override,protected,void,do,in,transaction,without,result,transaction,status,status,fail,should,have,thrown,cannot,create,transaction,exception,catch,cannot,create,transaction,exception,ex,assert,true,hasn,t,thread,connection,transaction,synchronization,manager,has,resource,ds,verify,con,close
DataSourceTransactionManagerTests -> @Test 	public void testTransactionWithExceptionOnBegin() throws Exception;1530174524;Test behavior if the first operation on a connection (getAutoCommit) throws SQLException.;@Test_	public void testTransactionWithExceptionOnBegin() throws Exception {_		willThrow(new SQLException("Cannot begin")).given(con).getAutoCommit()___		TransactionTemplate tt = new TransactionTemplate(tm)__		try {_			tt.execute(new TransactionCallbackWithoutResult() {_				@Override_				protected void doInTransactionWithoutResult(TransactionStatus status) {_					_				}_			})__			fail("Should have thrown CannotCreateTransactionException")__		}_		catch (CannotCreateTransactionException ex) {_			_		}__		assertTrue("Hasn't thread connection", !TransactionSynchronizationManager.hasResource(ds))__		verify(con).close()__	};test,behavior,if,the,first,operation,on,a,connection,get,auto,commit,throws,sqlexception;test,public,void,test,transaction,with,exception,on,begin,throws,exception,will,throw,new,sqlexception,cannot,begin,given,con,get,auto,commit,transaction,template,tt,new,transaction,template,tm,try,tt,execute,new,transaction,callback,without,result,override,protected,void,do,in,transaction,without,result,transaction,status,status,fail,should,have,thrown,cannot,create,transaction,exception,catch,cannot,create,transaction,exception,ex,assert,true,hasn,t,thread,connection,transaction,synchronization,manager,has,resource,ds,verify,con,close
