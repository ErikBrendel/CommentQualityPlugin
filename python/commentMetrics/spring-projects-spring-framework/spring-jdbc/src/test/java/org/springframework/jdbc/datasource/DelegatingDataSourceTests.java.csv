commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void shouldDelegateGetConnection() throws Exception {     Connection connection = mock(Connection.class).     given(delegate.getConnection()).willReturn(connection).     assertThat(dataSource.getConnection(), is(connection)). }
false;public;0;8;;@Test public void shouldDelegateGetConnectionWithUsernameAndPassword() throws Exception {     Connection connection = mock(Connection.class).     String username = "username".     String password = "password".     given(delegate.getConnection(username, password)).willReturn(connection).     assertThat(dataSource.getConnection(username, password), is(connection)). }
false;public;0;6;;@Test public void shouldDelegateGetLogWriter() throws Exception {     PrintWriter writer = new PrintWriter(new ByteArrayOutputStream()).     given(delegate.getLogWriter()).willReturn(writer).     assertThat(dataSource.getLogWriter(), is(writer)). }
false;public;0;6;;@Test public void shouldDelegateSetLogWriter() throws Exception {     PrintWriter writer = new PrintWriter(new ByteArrayOutputStream()).     dataSource.setLogWriter(writer).     verify(delegate).setLogWriter(writer). }
false;public;0;6;;@Test public void shouldDelegateGetLoginTimeout() throws Exception {     int timeout = 123.     given(delegate.getLoginTimeout()).willReturn(timeout).     assertThat(dataSource.getLoginTimeout(), is(timeout)). }
false;public;0;6;;@Test public void shouldDelegateSetLoginTimeoutWithSeconds() throws Exception {     int timeout = 123.     dataSource.setLoginTimeout(timeout).     verify(delegate).setLoginTimeout(timeout). }
false;public;0;6;;@Test public void shouldDelegateUnwrapWithoutImplementing() throws Exception {     ExampleWrapper wrapper = mock(ExampleWrapper.class).     given(delegate.unwrap(ExampleWrapper.class)).willReturn(wrapper).     assertThat(dataSource.unwrap(ExampleWrapper.class), is(wrapper)). }
false;public;0;6;;@Test public void shouldDelegateUnwrapImplementing() throws Exception {     dataSource = new DelegatingDataSourceWithWrapper().     assertThat(dataSource.unwrap(ExampleWrapper.class), is((ExampleWrapper) dataSource)). }
false;public;0;5;;@Test public void shouldDelegateIsWrapperForWithoutImplementing() throws Exception {     given(delegate.isWrapperFor(ExampleWrapper.class)).willReturn(true).     assertThat(dataSource.isWrapperFor(ExampleWrapper.class), is(true)). }
false;public;0;5;;@Test public void shouldDelegateIsWrapperForImplementing() throws Exception {     dataSource = new DelegatingDataSourceWithWrapper().     assertThat(dataSource.isWrapperFor(ExampleWrapper.class), is(true)). }
