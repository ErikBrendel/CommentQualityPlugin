commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Before public void setUp() throws Exception {     dataSource = mock(DataSource.class).     connection = mock(Connection.class).     preparedStatement = mock(PreparedStatement.class).     resultSet = mock(ResultSet.class).     resultSetMetaData = mock(ResultSetMetaData.class).     given(dataSource.getConnection()).willReturn(connection). }
false;public;0;5;;@After public void verifyClosed() throws Exception {     verify(preparedStatement).close().     verify(connection).close(). }
false;public;0;10;;@Test public void testUpdate() throws SQLException {     given(preparedStatement.executeUpdate()).willReturn(1).     given(connection.prepareStatement(UPDATE)).willReturn(preparedStatement).     Updater pc = new Updater().     int rowsAffected = pc.run().     assertEquals(1, rowsAffected). }
false;public;0;11;;@Test public void testUpdateInt() throws SQLException {     given(preparedStatement.executeUpdate()).willReturn(1).     given(connection.prepareStatement(UPDATE_INT)).willReturn(preparedStatement).     IntUpdater pc = new IntUpdater().     int rowsAffected = pc.run(1).     assertEquals(1, rowsAffected).     verify(preparedStatement).setObject(1, 1, Types.NUMERIC). }
false;public;0;12;;@Test public void testUpdateIntInt() throws SQLException {     given(preparedStatement.executeUpdate()).willReturn(1).     given(connection.prepareStatement(UPDATE_INT_INT)).willReturn(preparedStatement).     IntIntUpdater pc = new IntIntUpdater().     int rowsAffected = pc.run(1, 1).     assertEquals(1, rowsAffected).     verify(preparedStatement).setObject(1, 1, Types.NUMERIC).     verify(preparedStatement).setObject(2, 1, Types.NUMERIC). }
false;public;0;4;;@Test public void testNamedParameterUpdateWithUnnamedDeclarations() throws SQLException {     doTestNamedParameterUpdate(false). }
false;public;0;4;;@Test public void testNamedParameterUpdateWithNamedDeclarations() throws SQLException {     doTestNamedParameterUpdate(true). }
false;public;2;6;;public int run(int performanceId, int type) {     Map<String, Integer> params = new HashMap<>().     params.put("perfId", performanceId).     params.put("priceId", type).     return updateByNamedParam(params). }
false;private;1;34;;private void doTestNamedParameterUpdate(final boolean namedDeclarations) throws SQLException {     given(preparedStatement.executeUpdate()).willReturn(1).     given(connection.prepareStatement(UPDATE_INT_INT)).willReturn(preparedStatement).     class NamedParameterUpdater extends SqlUpdate {          public NamedParameterUpdater() {             setSql(UPDATE_NAMED_PARAMETERS).             setDataSource(dataSource).             if (namedDeclarations) {                 declareParameter(new SqlParameter("priceId", Types.DECIMAL)).                 declareParameter(new SqlParameter("perfId", Types.NUMERIC)).             } else {                 declareParameter(new SqlParameter(Types.NUMERIC)).                 declareParameter(new SqlParameter(Types.DECIMAL)).             }             compile().         }          public int run(int performanceId, int type) {             Map<String, Integer> params = new HashMap<>().             params.put("perfId", performanceId).             params.put("priceId", type).             return updateByNamedParam(params).         }     }     NamedParameterUpdater pc = new NamedParameterUpdater().     int rowsAffected = pc.run(1, 1).     assertEquals(1, rowsAffected).     verify(preparedStatement).setObject(1, 1, Types.NUMERIC).     verify(preparedStatement).setObject(2, 1, Types.DECIMAL). }
false;public;0;11;;@Test public void testUpdateString() throws SQLException {     given(preparedStatement.executeUpdate()).willReturn(1).     given(connection.prepareStatement(UPDATE_STRING)).willReturn(preparedStatement).     StringUpdater pc = new StringUpdater().     int rowsAffected = pc.run("rod").     assertEquals(1, rowsAffected).     verify(preparedStatement).setString(1, "rod"). }
false;public;0;14;;@Test public void testUpdateMixed() throws SQLException {     given(preparedStatement.executeUpdate()).willReturn(1).     given(connection.prepareStatement(UPDATE_OBJECTS)).willReturn(preparedStatement).     MixedUpdater pc = new MixedUpdater().     int rowsAffected = pc.run(1, 1, "rod", true).     assertEquals(1, rowsAffected).     verify(preparedStatement).setObject(1, 1, Types.NUMERIC).     verify(preparedStatement).setObject(2, 1, Types.NUMERIC, 2).     verify(preparedStatement).setString(3, "rod").     verify(preparedStatement).setBoolean(4, Boolean.TRUE). }
false;public;0;23;;@Test public void testUpdateAndGeneratedKeys() throws SQLException {     given(resultSetMetaData.getColumnCount()).willReturn(1).     given(resultSetMetaData.getColumnLabel(1)).willReturn("1").     given(resultSet.getMetaData()).willReturn(resultSetMetaData).     given(resultSet.next()).willReturn(true, false).     given(resultSet.getObject(1)).willReturn(11).     given(preparedStatement.executeUpdate()).willReturn(1).     given(preparedStatement.getGeneratedKeys()).willReturn(resultSet).     given(connection.prepareStatement(INSERT_GENERATE_KEYS, PreparedStatement.RETURN_GENERATED_KEYS)).willReturn(preparedStatement).     GeneratedKeysUpdater pc = new GeneratedKeysUpdater().     KeyHolder generatedKeyHolder = new GeneratedKeyHolder().     int rowsAffected = pc.run("rod", generatedKeyHolder).     assertEquals(1, rowsAffected).     assertEquals(1, generatedKeyHolder.getKeyList().size()).     assertEquals(11, generatedKeyHolder.getKey().intValue()).     verify(preparedStatement).setString(1, "rod").     verify(resultSet).close(). }
false;public;0;14;;@Test public void testUpdateConstructor() throws SQLException {     given(preparedStatement.executeUpdate()).willReturn(1).     given(connection.prepareStatement(UPDATE_OBJECTS)).willReturn(preparedStatement).     ConstructorUpdater pc = new ConstructorUpdater().     int rowsAffected = pc.run(1, 1, "rod", true).     assertEquals(1, rowsAffected).     verify(preparedStatement).setObject(1, 1, Types.NUMERIC).     verify(preparedStatement).setObject(2, 1, Types.NUMERIC).     verify(preparedStatement).setString(3, "rod").     verify(preparedStatement).setBoolean(4, Boolean.TRUE). }
false;public;0;10;;@Test public void testUnderMaxRows() throws SQLException {     given(preparedStatement.executeUpdate()).willReturn(3).     given(connection.prepareStatement(UPDATE)).willReturn(preparedStatement).     MaxRowsUpdater pc = new MaxRowsUpdater().     int rowsAffected = pc.run().     assertEquals(3, rowsAffected). }
false;public;0;10;;@Test public void testMaxRows() throws SQLException {     given(preparedStatement.executeUpdate()).willReturn(5).     given(connection.prepareStatement(UPDATE)).willReturn(preparedStatement).     MaxRowsUpdater pc = new MaxRowsUpdater().     int rowsAffected = pc.run().     assertEquals(5, rowsAffected). }
false;public;0;10;;@Test public void testOverMaxRows() throws SQLException {     given(preparedStatement.executeUpdate()).willReturn(8).     given(connection.prepareStatement(UPDATE)).willReturn(preparedStatement).     MaxRowsUpdater pc = new MaxRowsUpdater().     thrown.expect(JdbcUpdateAffectedIncorrectNumberOfRowsException.class).     pc.run(). }
false;public;0;10;;@Test public void testRequiredRows() throws SQLException {     given(preparedStatement.executeUpdate()).willReturn(3).     given(connection.prepareStatement(UPDATE)).willReturn(preparedStatement).     RequiredRowsUpdater pc = new RequiredRowsUpdater().     int rowsAffected = pc.run().     assertEquals(3, rowsAffected). }
false;public;0;8;;@Test public void testNotRequiredRows() throws SQLException {     given(preparedStatement.executeUpdate()).willReturn(2).     given(connection.prepareStatement(UPDATE)).willReturn(preparedStatement).     thrown.expect(JdbcUpdateAffectedIncorrectNumberOfRowsException.class).     RequiredRowsUpdater pc = new RequiredRowsUpdater().     pc.run(). }
false;public;0;3;;public int run() {     return update(). }
false;public;1;3;;public int run(int performanceId) {     return update(performanceId). }
false;public;2;3;;public int run(int performanceId, int type) {     return update(performanceId, type). }
false;public;1;3;;public int run(String name) {     return update(name). }
false;public;4;3;;public int run(int performanceId, int type, String name, boolean confirmed) {     return update(performanceId, type, name, confirmed). }
false;public;2;3;;public int run(String name, KeyHolder generatedKeyHolder) {     return update(new Object[] { name }, generatedKeyHolder). }
false;public;4;3;;public int run(int performanceId, int type, String name, boolean confirmed) {     return update(performanceId, type, name, confirmed). }
false;public;0;3;;public int run() {     return update(). }
false;public;0;3;;public int run() {     return update(). }
