commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;5;;@Override protected void setValues(PreparedStatement ps, LobCreator lobCreator) throws SQLException, DataAccessException {     svc.b = true. }
false;public;0;30;;@Test public void testCreatingPreparedStatementCallback() throws SQLException {     LobHandler handler = mock(LobHandler.class).     LobCreator creator = mock(LobCreator.class).     PreparedStatement ps = mock(PreparedStatement.class).     given(handler.getLobCreator()).willReturn(creator).     given(ps.executeUpdate()).willReturn(3).     class SetValuesCalled {          boolean b = false.     }     final SetValuesCalled svc = new SetValuesCalled().     AbstractLobCreatingPreparedStatementCallback psc = new AbstractLobCreatingPreparedStatementCallback(handler) {          @Override         protected void setValues(PreparedStatement ps, LobCreator lobCreator) throws SQLException, DataAccessException {             svc.b = true.         }     }.     assertEquals(Integer.valueOf(3), psc.doInPreparedStatement(ps)).     assertTrue(svc.b).     verify(creator).close().     verify(handler).getLobCreator().     verify(ps).executeUpdate(). }
false;public;0;12;;@Test public void testAbstractLobStreamingResultSetExtractorNoRows() throws SQLException {     ResultSet rset = mock(ResultSet.class).     AbstractLobStreamingResultSetExtractor<Void> lobRse = getResultSetExtractor(false).     thrown.expect(IncorrectResultSizeDataAccessException.class).     try {         lobRse.extractData(rset).     } finally {         verify(rset).next().     } }
false;public;0;8;;@Test public void testAbstractLobStreamingResultSetExtractorOneRow() throws SQLException {     ResultSet rset = mock(ResultSet.class).     given(rset.next()).willReturn(true, false).     AbstractLobStreamingResultSetExtractor<Void> lobRse = getResultSetExtractor(false).     lobRse.extractData(rset).     verify(rset).clearWarnings(). }
false;public;0;14;;@Test public void testAbstractLobStreamingResultSetExtractorMultipleRows() throws SQLException {     ResultSet rset = mock(ResultSet.class).     given(rset.next()).willReturn(true, true, false).     AbstractLobStreamingResultSetExtractor<Void> lobRse = getResultSetExtractor(false).     thrown.expect(IncorrectResultSizeDataAccessException.class).     try {         lobRse.extractData(rset).     } finally {         verify(rset).clearWarnings().     } }
false;public;0;9;;@Test public void testAbstractLobStreamingResultSetExtractorCorrectException() throws SQLException {     ResultSet rset = mock(ResultSet.class).     given(rset.next()).willReturn(true).     AbstractLobStreamingResultSetExtractor<Void> lobRse = getResultSetExtractor(true).     thrown.expect(LobRetrievalFailureException.class).     lobRse.extractData(rset). }
false;protected;1;9;;@Override protected void streamData(ResultSet rs) throws SQLException, IOException {     if (ex) {         throw new IOException().     } else {         rs.clearWarnings().     } }
false;private;1;15;;private AbstractLobStreamingResultSetExtractor<Void> getResultSetExtractor(final boolean ex) {     AbstractLobStreamingResultSetExtractor<Void> lobRse = new AbstractLobStreamingResultSetExtractor<Void>() {          @Override         protected void streamData(ResultSet rs) throws SQLException, IOException {             if (ex) {                 throw new IOException().             } else {                 rs.clearWarnings().             }         }     }.     return lobRse. }
