commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;5;;@Override protected <T> T lookup(String jndiName, Class<T> requiredType) {     assertEquals(DATA_SOURCE_NAME, jndiName).     return requiredType.cast(expectedDataSource). }
false;public;0;14;;@Test public void testSunnyDay() throws Exception {     final DataSource expectedDataSource = new StubDataSource().     JndiDataSourceLookup lookup = new JndiDataSourceLookup() {          @Override         protected <T> T lookup(String jndiName, Class<T> requiredType) {             assertEquals(DATA_SOURCE_NAME, jndiName).             return requiredType.cast(expectedDataSource).         }     }.     DataSource dataSource = lookup.getDataSource(DATA_SOURCE_NAME).     assertNotNull("A DataSourceLookup implementation must *never* return null from getDataSource(): this one obviously (and incorrectly) is", dataSource).     assertSame(expectedDataSource, dataSource). }
false;protected;2;5;;@Override protected <T> T lookup(String jndiName, Class<T> requiredType) throws NamingException {     assertEquals(DATA_SOURCE_NAME, jndiName).     throw new NamingException(). }
false;public;0;11;;@Test(expected = DataSourceLookupFailureException.class) public void testNoDataSourceAtJndiLocation() throws Exception {     JndiDataSourceLookup lookup = new JndiDataSourceLookup() {          @Override         protected <T> T lookup(String jndiName, Class<T> requiredType) throws NamingException {             assertEquals(DATA_SOURCE_NAME, jndiName).             throw new NamingException().         }     }.     lookup.getDataSource(DATA_SOURCE_NAME). }
