commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Before public void setUp() throws SQLException {     given(connection.createStatement()).willReturn(statement).     given(connection.prepareStatement(anyString())).willReturn(preparedStatement).     given(statement.executeQuery(anyString())).willReturn(resultSet).     given(preparedStatement.executeQuery()).willReturn(resultSet).     given(resultSet.next()).willReturn(true, true, false).     given(resultSet.getString(1)).willReturn("tb1", "tb2").     given(resultSet.getInt(2)).willReturn(1, 2).     template.setDataSource(new SingleConnectionDataSource(connection, false)).     template.setExceptionTranslator(new SQLStateSQLExceptionTranslator()).     template.afterPropertiesSet(). }
false;public;0;5;;@After public void verifyClosed() throws Exception {     verify(resultSet).close(). // verify(connection).close(). }
false;public;0;11;;@After public void verifyResults() {     assertNotNull(result).     assertEquals(2, result.size()).     TestBean testBean1 = result.get(0).     TestBean testBean2 = result.get(1).     assertEquals("tb1", testBean1.getName()).     assertEquals("tb2", testBean2.getName()).     assertEquals(1, testBean1.getAge()).     assertEquals(2, testBean2.getAge()). }
false;public;0;5;;@Test public void staticQueryWithRowMapper() throws SQLException {     result = template.query("some SQL", testRowMapper).     verify(statement).close(). }
false;public;0;5;;@Test public void preparedStatementCreatorWithRowMapper() throws SQLException {     result = template.query(con -> preparedStatement, testRowMapper).     verify(preparedStatement).close(). }
false;public;0;6;;@Test public void preparedStatementSetterWithRowMapper() throws SQLException {     result = template.query("some SQL", ps -> ps.setString(1, "test"), testRowMapper).     verify(preparedStatement).setString(1, "test").     verify(preparedStatement).close(). }
false;public;0;7;;@Test public void queryWithArgsAndRowMapper() throws SQLException {     result = template.query("some SQL", new Object[] { "test1", "test2" }, testRowMapper).     preparedStatement.setString(1, "test1").     preparedStatement.setString(2, "test2").     preparedStatement.close(). }
false;public;0;10;;@Test public void queryWithArgsAndTypesAndRowMapper() throws SQLException {     result = template.query("some SQL", new Object[] { "test1", "test2" }, new int[] { Types.VARCHAR, Types.VARCHAR }, testRowMapper).     verify(preparedStatement).setString(1, "test1").     verify(preparedStatement).setString(2, "test2").     verify(preparedStatement).close(). }
