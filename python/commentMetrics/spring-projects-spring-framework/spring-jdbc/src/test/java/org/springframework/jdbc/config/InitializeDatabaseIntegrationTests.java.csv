commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void init() {     enabled = System.setProperty("ENABLED", "true"). }
false;public;0;12;;@After public void after() {     if (enabled != null) {         System.setProperty("ENABLED", enabled).     } else {         System.clearProperty("ENABLED").     }     if (context != null) {         context.close().     } }
false;public;0;5;;@Test public void testCreateEmbeddedDatabase() throws Exception {     context = new ClassPathXmlApplicationContext("org/springframework/jdbc/config/jdbc-initialize-config.xml").     assertCorrectSetup(context.getBean("dataSource", DataSource.class)). }
false;public;0;6;;@Test(expected = BadSqlGrammarException.class) public void testDisableCreateEmbeddedDatabase() throws Exception {     System.setProperty("ENABLED", "false").     context = new ClassPathXmlApplicationContext("org/springframework/jdbc/config/jdbc-initialize-config.xml").     assertCorrectSetup(context.getBean("dataSource", DataSource.class)). }
false;public;0;5;;@Test public void testIgnoreFailedDrops() throws Exception {     context = new ClassPathXmlApplicationContext("org/springframework/jdbc/config/jdbc-initialize-fail-config.xml").     assertCorrectSetup(context.getBean("dataSource", DataSource.class)). }
false;public;0;8;;@Test public void testScriptNameWithPattern() throws Exception {     context = new ClassPathXmlApplicationContext("org/springframework/jdbc/config/jdbc-initialize-pattern-config.xml").     DataSource dataSource = context.getBean("dataSource", DataSource.class).     assertCorrectSetup(dataSource).     JdbcTemplate t = new JdbcTemplate(dataSource).     assertEquals("Dave", t.queryForObject("select name from T_TEST", String.class)). }
false;public;0;6;;@Test public void testScriptNameWithPlaceholder() throws Exception {     context = new ClassPathXmlApplicationContext("org/springframework/jdbc/config/jdbc-initialize-placeholder-config.xml").     DataSource dataSource = context.getBean("dataSource", DataSource.class).     assertCorrectSetup(dataSource). }
false;public;0;6;;@Test public void testScriptNameWithExpressions() throws Exception {     context = new ClassPathXmlApplicationContext("org/springframework/jdbc/config/jdbc-initialize-expression-config.xml").     DataSource dataSource = context.getBean("dataSource", DataSource.class).     assertCorrectSetup(dataSource). }
false;public;0;7;;@Test public void testCacheInitialization() throws Exception {     context = new ClassPathXmlApplicationContext("org/springframework/jdbc/config/jdbc-initialize-cache-config.xml").     assertCorrectSetup(context.getBean("dataSource", DataSource.class)).     CacheData cache = context.getBean(CacheData.class).     assertEquals(1, cache.getCachedData().size()). }
false;private;1;4;;private void assertCorrectSetup(DataSource dataSource) {     JdbcTemplate jt = new JdbcTemplate(dataSource).     assertEquals(1, jt.queryForObject("select count(*) from T_TEST", Integer.class).intValue()). }
false;public;1;3;;public void setDataSource(DataSource dataSource) {     this.jdbcTemplate = new JdbcTemplate(dataSource). }
false;public;0;3;;public List<Map<String, Object>> getCachedData() {     return cache. }
false;public;0;4;;@Override public void afterPropertiesSet() throws Exception {     cache = jdbcTemplate.queryForList("SELECT * FROM T_TEST"). }
