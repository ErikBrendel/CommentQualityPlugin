commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void emptySql() {     exception.expect(InvalidDataAccessApiUsageException.class).     operation.compile(). }
false;public;0;8;;@Test public void setTypeAfterCompile() {     operation.setDataSource(new DriverManagerDataSource()).     operation.setSql("select * from mytable").     operation.compile().     exception.expect(InvalidDataAccessApiUsageException.class).     operation.setTypes(new int[] { Types.INTEGER }). }
false;public;0;8;;@Test public void declareParameterAfterCompile() {     operation.setDataSource(new DriverManagerDataSource()).     operation.setSql("select * from mytable").     operation.compile().     exception.expect(InvalidDataAccessApiUsageException.class).     operation.declareParameter(new SqlParameter(Types.INTEGER)). }
false;public;0;7;;@Test public void tooFewParameters() {     operation.setSql("select * from mytable").     operation.setTypes(new int[] { Types.INTEGER }).     exception.expect(InvalidDataAccessApiUsageException.class).     operation.validateParameters((Object[]) null). }
false;public;0;7;;@Test public void tooFewMapParameters() {     operation.setSql("select * from mytable").     operation.setTypes(new int[] { Types.INTEGER }).     exception.expect(InvalidDataAccessApiUsageException.class).     operation.validateNamedParameters((Map<String, String>) null). }
false;public;0;8;;@Test public void operationConfiguredViaJdbcTemplateMustGetDataSource() throws Exception {     operation.setSql("foo").     exception.expect(InvalidDataAccessApiUsageException.class).     exception.expectMessage(containsString("ataSource")).     operation.compile(). }
false;public;0;6;;@Test public void tooManyParameters() {     operation.setSql("select * from mytable").     exception.expect(InvalidDataAccessApiUsageException.class).     operation.validateParameters(new Object[] { 1, 2 }). }
false;public;0;8;;@Test public void unspecifiedMapParameters() {     operation.setSql("select * from mytable").     Map<String, String> params = new HashMap<>().     params.put("col1", "value").     exception.expect(InvalidDataAccessApiUsageException.class).     operation.validateNamedParameters(params). }
false;public;0;8;;@Test public void compileTwice() {     operation.setDataSource(new DriverManagerDataSource()).     operation.setSql("select * from mytable").     operation.setTypes(null).     operation.compile().     operation.compile(). }
false;public;0;7;;@Test public void emptyDataSource() {     SqlOperation operation = new SqlOperation() {     }.     operation.setSql("select * from mytable").     exception.expect(InvalidDataAccessApiUsageException.class).     operation.compile(). }
false;public;0;12;;@Test public void parameterPropagation() {     SqlOperation operation = new SqlOperation() {     }.     DataSource ds = new DriverManagerDataSource().     operation.setDataSource(ds).     operation.setFetchSize(10).     operation.setMaxRows(20).     JdbcTemplate jt = operation.getJdbcTemplate().     assertEquals(ds, jt.getDataSource()).     assertEquals(10, jt.getFetchSize()).     assertEquals(20, jt.getMaxRows()). }
false;public;0;8;;@Test public void validateInOutParameter() {     operation.setDataSource(new DriverManagerDataSource()).     operation.setSql("DUMMY_PROC").     operation.declareParameter(new SqlOutParameter("DUMMY_OUT_PARAM", Types.VARCHAR)).     operation.declareParameter(new SqlInOutParameter("DUMMY_IN_OUT_PARAM", Types.VARCHAR)).     operation.validateParameters(new Object[] { "DUMMY_VALUE1", "DUMMY_VALUE2" }). }
false;public;0;12;;@Test public void parametersSetWithList() {     DataSource ds = new DriverManagerDataSource().     operation.setDataSource(ds).     operation.setSql("select * from mytable where one = ? and two = ?").     operation.setParameters(new SqlParameter[] { new SqlParameter("one", Types.NUMERIC), new SqlParameter("two", Types.NUMERIC) }).     operation.afterPropertiesSet().     operation.validateParameters(new Object[] { 1, "2" }).     assertEquals(2, operation.getDeclaredParameters().size()). }
false;protected;0;3;;@Override protected void compileInternal() { }
