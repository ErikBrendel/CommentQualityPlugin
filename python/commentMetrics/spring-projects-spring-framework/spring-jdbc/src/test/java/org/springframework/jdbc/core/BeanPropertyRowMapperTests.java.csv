commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test @SuppressWarnings({ "unchecked", "rawtypes" }) public void testOverridingDifferentClassDefinedForMapping() {     BeanPropertyRowMapper mapper = new BeanPropertyRowMapper(Person.class).     thrown.expect(InvalidDataAccessApiUsageException.class).     mapper.setMappedClass(Long.class). }
false;public;0;5;;@Test public void testOverridingSameClassDefinedForMapping() {     BeanPropertyRowMapper<Person> mapper = new BeanPropertyRowMapper<>(Person.class).     mapper.setMappedClass(Person.class). }
false;public;0;10;;@Test public void testStaticQueryWithRowMapper() throws Exception {     Mock mock = new Mock().     List<Person> result = mock.getJdbcTemplate().query("select name, age, birth_date, balance from people", new BeanPropertyRowMapper<>(Person.class)).     assertEquals(1, result.size()).     verifyPerson(result.get(0)).     mock.verifyClosed(). }
false;public;0;10;;@Test public void testMappingWithInheritance() throws Exception {     Mock mock = new Mock().     List<ConcretePerson> result = mock.getJdbcTemplate().query("select name, age, birth_date, balance from people", new BeanPropertyRowMapper<>(ConcretePerson.class)).     assertEquals(1, result.size()).     verifyPerson(result.get(0)).     mock.verifyClosed(). }
false;public;0;10;;@Test public void testMappingWithNoUnpopulatedFieldsFound() throws Exception {     Mock mock = new Mock().     List<ConcretePerson> result = mock.getJdbcTemplate().query("select name, age, birth_date, balance from people", new BeanPropertyRowMapper<>(ConcretePerson.class, true)).     assertEquals(1, result.size()).     verifyPerson(result.get(0)).     mock.verifyClosed(). }
false;public;0;11;;@Test public void testMappingWithUnpopulatedFieldsNotChecked() throws Exception {     Mock mock = new Mock().     List<ExtendedPerson> result = mock.getJdbcTemplate().query("select name, age, birth_date, balance from people", new BeanPropertyRowMapper<>(ExtendedPerson.class)).     assertEquals(1, result.size()).     ExtendedPerson bean = result.get(0).     verifyPerson(bean).     mock.verifyClosed(). }
false;public;0;8;;@Test public void testMappingWithUnpopulatedFieldsNotAccepted() throws Exception {     Mock mock = new Mock().     thrown.expect(InvalidDataAccessApiUsageException.class).     mock.getJdbcTemplate().query("select name, age, birth_date, balance from people", new BeanPropertyRowMapper<>(ExtendedPerson.class, true)). }
false;public;0;8;;@Test public void testMappingNullValue() throws Exception {     BeanPropertyRowMapper<Person> mapper = new BeanPropertyRowMapper<>(Person.class).     Mock mock = new Mock(MockType.TWO).     thrown.expect(TypeMismatchException.class).     mock.getJdbcTemplate().query("select name, null as age, birth_date, balance from people", mapper). }
false;public;0;10;;@Test public void testQueryWithSpaceInColumnNameAndLocalDateTime() throws Exception {     Mock mock = new Mock(MockType.THREE).     List<SpacePerson> result = mock.getJdbcTemplate().query("select last_name as \"Last Name\", age, birth_date, balance from people", new BeanPropertyRowMapper<>(SpacePerson.class)).     assertEquals(1, result.size()).     verifyPerson(result.get(0)).     mock.verifyClosed(). }
false;public;0;10;;@Test public void testQueryWithSpaceInColumnNameAndLocalDate() throws Exception {     Mock mock = new Mock(MockType.THREE).     List<DatePerson> result = mock.getJdbcTemplate().query("select last_name as \"Last Name\", age, birth_date, balance from people", new BeanPropertyRowMapper<>(DatePerson.class)).     assertEquals(1, result.size()).     verifyPerson(result.get(0)).     mock.verifyClosed(). }
