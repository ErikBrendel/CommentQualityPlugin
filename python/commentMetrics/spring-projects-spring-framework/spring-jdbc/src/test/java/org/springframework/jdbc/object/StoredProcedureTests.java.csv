# id;timestamp;commentText;codeText;commentWords;codeWords
StoredProcedureTests -> @Test 	public void testStoredProcedureConfiguredViaJdbcTemplate() throws Exception;1356735495;Confirm our JdbcTemplate is used__@throws Exception;@Test_	public void testStoredProcedureConfiguredViaJdbcTemplate() throws Exception {_		given(callableStatement.execute()).willReturn(false)__		given(callableStatement.getUpdateCount()).willReturn(-1)__		given(callableStatement.getObject(2)).willReturn(4)__		given(connection.prepareCall("{call " + StoredProcedureConfiguredViaJdbcTemplate.SQL + "(?, ?)}")_				).willReturn(callableStatement)__		JdbcTemplate t = new JdbcTemplate()__		t.setDataSource(dataSource)__		StoredProcedureConfiguredViaJdbcTemplate sp = new StoredProcedureConfiguredViaJdbcTemplate(t)__		assertEquals(sp.execute(1106), 4)__		verify(callableStatement).setObject(1, 1106, Types.INTEGER)__		verify(callableStatement).registerOutParameter(2, Types.INTEGER)__	};confirm,our,jdbc,template,is,used,throws,exception;test,public,void,test,stored,procedure,configured,via,jdbc,template,throws,exception,given,callable,statement,execute,will,return,false,given,callable,statement,get,update,count,will,return,1,given,callable,statement,get,object,2,will,return,4,given,connection,prepare,call,call,stored,procedure,configured,via,jdbc,template,sql,will,return,callable,statement,jdbc,template,t,new,jdbc,template,t,set,data,source,data,source,stored,procedure,configured,via,jdbc,template,sp,new,stored,procedure,configured,via,jdbc,template,t,assert,equals,sp,execute,1106,4,verify,callable,statement,set,object,1,1106,types,integer,verify,callable,statement,register,out,parameter,2,types,integer
StoredProcedureTests -> @Test 	public void testStoredProcedureConfiguredViaJdbcTemplate() throws Exception;1363208506;Confirm our JdbcTemplate is used__@throws Exception;@Test_	public void testStoredProcedureConfiguredViaJdbcTemplate() throws Exception {_		given(callableStatement.execute()).willReturn(false)__		given(callableStatement.getUpdateCount()).willReturn(-1)__		given(callableStatement.getObject(2)).willReturn(4)__		given(connection.prepareCall("{call " + StoredProcedureConfiguredViaJdbcTemplate.SQL + "(?, ?)}")_				).willReturn(callableStatement)__		JdbcTemplate t = new JdbcTemplate()__		t.setDataSource(dataSource)__		StoredProcedureConfiguredViaJdbcTemplate sp = new StoredProcedureConfiguredViaJdbcTemplate(t)__		assertEquals(sp.execute(1106), 4)__		verify(callableStatement).setObject(1, 1106, Types.INTEGER)__		verify(callableStatement).registerOutParameter(2, Types.INTEGER)__	};confirm,our,jdbc,template,is,used,throws,exception;test,public,void,test,stored,procedure,configured,via,jdbc,template,throws,exception,given,callable,statement,execute,will,return,false,given,callable,statement,get,update,count,will,return,1,given,callable,statement,get,object,2,will,return,4,given,connection,prepare,call,call,stored,procedure,configured,via,jdbc,template,sql,will,return,callable,statement,jdbc,template,t,new,jdbc,template,t,set,data,source,data,source,stored,procedure,configured,via,jdbc,template,sp,new,stored,procedure,configured,via,jdbc,template,t,assert,equals,sp,execute,1106,4,verify,callable,statement,set,object,1,1106,types,integer,verify,callable,statement,register,out,parameter,2,types,integer
StoredProcedureTests -> @Test 	public void testStoredProcedureConfiguredViaJdbcTemplate() throws Exception;1413848647;Confirm our JdbcTemplate is used__@throws Exception;@Test_	public void testStoredProcedureConfiguredViaJdbcTemplate() throws Exception {_		given(callableStatement.execute()).willReturn(false)__		given(callableStatement.getUpdateCount()).willReturn(-1)__		given(callableStatement.getObject(2)).willReturn(4)__		given(connection.prepareCall("{call " + StoredProcedureConfiguredViaJdbcTemplate.SQL + "(?, ?)}")_				).willReturn(callableStatement)__		JdbcTemplate t = new JdbcTemplate()__		t.setDataSource(dataSource)__		StoredProcedureConfiguredViaJdbcTemplate sp = new StoredProcedureConfiguredViaJdbcTemplate(t)__		assertEquals(sp.execute(1106), 4)__		verify(callableStatement).setObject(1, 1106, Types.INTEGER)__		verify(callableStatement).registerOutParameter(2, Types.INTEGER)__	};confirm,our,jdbc,template,is,used,throws,exception;test,public,void,test,stored,procedure,configured,via,jdbc,template,throws,exception,given,callable,statement,execute,will,return,false,given,callable,statement,get,update,count,will,return,1,given,callable,statement,get,object,2,will,return,4,given,connection,prepare,call,call,stored,procedure,configured,via,jdbc,template,sql,will,return,callable,statement,jdbc,template,t,new,jdbc,template,t,set,data,source,data,source,stored,procedure,configured,via,jdbc,template,sp,new,stored,procedure,configured,via,jdbc,template,t,assert,equals,sp,execute,1106,4,verify,callable,statement,set,object,1,1106,types,integer,verify,callable,statement,register,out,parameter,2,types,integer
StoredProcedureTests -> @Test 	public void testStoredProcedureConfiguredViaJdbcTemplate() throws Exception;1458843770;Confirm our JdbcTemplate is used__@throws Exception;@Test_	public void testStoredProcedureConfiguredViaJdbcTemplate() throws Exception {_		given(callableStatement.execute()).willReturn(false)__		given(callableStatement.getUpdateCount()).willReturn(-1)__		given(callableStatement.getObject(2)).willReturn(4)__		given(connection.prepareCall("{call " + StoredProcedureConfiguredViaJdbcTemplate.SQL + "(?, ?)}")_				).willReturn(callableStatement)__		JdbcTemplate t = new JdbcTemplate()__		t.setDataSource(dataSource)__		StoredProcedureConfiguredViaJdbcTemplate sp = new StoredProcedureConfiguredViaJdbcTemplate(t)__		assertEquals(sp.execute(1106), 4)__		verify(callableStatement).setObject(1, 1106, Types.INTEGER)__		verify(callableStatement).registerOutParameter(2, Types.INTEGER)__	};confirm,our,jdbc,template,is,used,throws,exception;test,public,void,test,stored,procedure,configured,via,jdbc,template,throws,exception,given,callable,statement,execute,will,return,false,given,callable,statement,get,update,count,will,return,1,given,callable,statement,get,object,2,will,return,4,given,connection,prepare,call,call,stored,procedure,configured,via,jdbc,template,sql,will,return,callable,statement,jdbc,template,t,new,jdbc,template,t,set,data,source,data,source,stored,procedure,configured,via,jdbc,template,sp,new,stored,procedure,configured,via,jdbc,template,t,assert,equals,sp,execute,1106,4,verify,callable,statement,set,object,1,1106,types,integer,verify,callable,statement,register,out,parameter,2,types,integer
StoredProcedureTests -> @Test 	public void testStoredProcedureConfiguredViaJdbcTemplate() throws Exception;1461047077;Confirm our JdbcTemplate is used__@throws Exception;@Test_	public void testStoredProcedureConfiguredViaJdbcTemplate() throws Exception {_		given(callableStatement.execute()).willReturn(false)__		given(callableStatement.getUpdateCount()).willReturn(-1)__		given(callableStatement.getObject(2)).willReturn(4)__		given(connection.prepareCall("{call " + StoredProcedureConfiguredViaJdbcTemplate.SQL + "(?, ?)}")_				).willReturn(callableStatement)__		JdbcTemplate t = new JdbcTemplate()__		t.setDataSource(dataSource)__		StoredProcedureConfiguredViaJdbcTemplate sp = new StoredProcedureConfiguredViaJdbcTemplate(t)__		assertEquals(sp.execute(1106), 4)__		verify(callableStatement).setObject(1, 1106, Types.INTEGER)__		verify(callableStatement).registerOutParameter(2, Types.INTEGER)__	};confirm,our,jdbc,template,is,used,throws,exception;test,public,void,test,stored,procedure,configured,via,jdbc,template,throws,exception,given,callable,statement,execute,will,return,false,given,callable,statement,get,update,count,will,return,1,given,callable,statement,get,object,2,will,return,4,given,connection,prepare,call,call,stored,procedure,configured,via,jdbc,template,sql,will,return,callable,statement,jdbc,template,t,new,jdbc,template,t,set,data,source,data,source,stored,procedure,configured,via,jdbc,template,sp,new,stored,procedure,configured,via,jdbc,template,t,assert,equals,sp,execute,1106,4,verify,callable,statement,set,object,1,1106,types,integer,verify,callable,statement,register,out,parameter,2,types,integer
StoredProcedureTests -> @Test 	public void testStoredProcedureConfiguredViaJdbcTemplate() throws Exception;1467730834;Confirm our JdbcTemplate is used__@throws Exception;@Test_	public void testStoredProcedureConfiguredViaJdbcTemplate() throws Exception {_		given(callableStatement.execute()).willReturn(false)__		given(callableStatement.getUpdateCount()).willReturn(-1)__		given(callableStatement.getObject(2)).willReturn(4)__		given(connection.prepareCall("{call " + StoredProcedureConfiguredViaJdbcTemplate.SQL + "(?, ?)}")_				).willReturn(callableStatement)__		JdbcTemplate t = new JdbcTemplate()__		t.setDataSource(dataSource)__		StoredProcedureConfiguredViaJdbcTemplate sp = new StoredProcedureConfiguredViaJdbcTemplate(t)__		assertEquals(sp.execute(1106), 4)__		verify(callableStatement).setObject(1, 1106, Types.INTEGER)__		verify(callableStatement).registerOutParameter(2, Types.INTEGER)__	};confirm,our,jdbc,template,is,used,throws,exception;test,public,void,test,stored,procedure,configured,via,jdbc,template,throws,exception,given,callable,statement,execute,will,return,false,given,callable,statement,get,update,count,will,return,1,given,callable,statement,get,object,2,will,return,4,given,connection,prepare,call,call,stored,procedure,configured,via,jdbc,template,sql,will,return,callable,statement,jdbc,template,t,new,jdbc,template,t,set,data,source,data,source,stored,procedure,configured,via,jdbc,template,sp,new,stored,procedure,configured,via,jdbc,template,t,assert,equals,sp,execute,1106,4,verify,callable,statement,set,object,1,1106,types,integer,verify,callable,statement,register,out,parameter,2,types,integer
StoredProcedureTests -> @Test 	public void testStoredProcedureConfiguredViaJdbcTemplate() throws Exception;1496242568;Confirm our JdbcTemplate is used__@throws Exception;@Test_	public void testStoredProcedureConfiguredViaJdbcTemplate() throws Exception {_		given(callableStatement.execute()).willReturn(false)__		given(callableStatement.getUpdateCount()).willReturn(-1)__		given(callableStatement.getObject(2)).willReturn(4)__		given(connection.prepareCall("{call " + StoredProcedureConfiguredViaJdbcTemplate.SQL + "(?, ?)}")_				).willReturn(callableStatement)__		JdbcTemplate t = new JdbcTemplate()__		t.setDataSource(dataSource)__		StoredProcedureConfiguredViaJdbcTemplate sp = new StoredProcedureConfiguredViaJdbcTemplate(t)__		assertEquals(sp.execute(1106), 4)__		verify(callableStatement).setObject(1, 1106, Types.INTEGER)__		verify(callableStatement).registerOutParameter(2, Types.INTEGER)__	};confirm,our,jdbc,template,is,used,throws,exception;test,public,void,test,stored,procedure,configured,via,jdbc,template,throws,exception,given,callable,statement,execute,will,return,false,given,callable,statement,get,update,count,will,return,1,given,callable,statement,get,object,2,will,return,4,given,connection,prepare,call,call,stored,procedure,configured,via,jdbc,template,sql,will,return,callable,statement,jdbc,template,t,new,jdbc,template,t,set,data,source,data,source,stored,procedure,configured,via,jdbc,template,sp,new,stored,procedure,configured,via,jdbc,template,t,assert,equals,sp,execute,1106,4,verify,callable,statement,set,object,1,1106,types,integer,verify,callable,statement,register,out,parameter,2,types,integer
StoredProcedureTests -> @Test 	public void testStoredProcedureConfiguredViaJdbcTemplate() throws Exception;1506097334;Confirm our JdbcTemplate is used__@throws Exception;@Test_	public void testStoredProcedureConfiguredViaJdbcTemplate() throws Exception {_		given(callableStatement.execute()).willReturn(false)__		given(callableStatement.getUpdateCount()).willReturn(-1)__		given(callableStatement.getObject(2)).willReturn(4)__		given(connection.prepareCall("{call " + StoredProcedureConfiguredViaJdbcTemplate.SQL + "(?, ?)}")_				).willReturn(callableStatement)__		JdbcTemplate t = new JdbcTemplate()__		t.setDataSource(dataSource)__		StoredProcedureConfiguredViaJdbcTemplate sp = new StoredProcedureConfiguredViaJdbcTemplate(t)__		assertEquals(sp.execute(1106), 4)__		verify(callableStatement).setObject(1, 1106, Types.INTEGER)__		verify(callableStatement).registerOutParameter(2, Types.INTEGER)__	};confirm,our,jdbc,template,is,used,throws,exception;test,public,void,test,stored,procedure,configured,via,jdbc,template,throws,exception,given,callable,statement,execute,will,return,false,given,callable,statement,get,update,count,will,return,1,given,callable,statement,get,object,2,will,return,4,given,connection,prepare,call,call,stored,procedure,configured,via,jdbc,template,sql,will,return,callable,statement,jdbc,template,t,new,jdbc,template,t,set,data,source,data,source,stored,procedure,configured,via,jdbc,template,sp,new,stored,procedure,configured,via,jdbc,template,t,assert,equals,sp,execute,1106,4,verify,callable,statement,set,object,1,1106,types,integer,verify,callable,statement,register,out,parameter,2,types,integer
StoredProcedureTests -> @Test 	public void testStoredProcedureConfiguredViaJdbcTemplate() throws Exception;1518279448;Confirm our JdbcTemplate is used__@throws Exception;@Test_	public void testStoredProcedureConfiguredViaJdbcTemplate() throws Exception {_		given(callableStatement.execute()).willReturn(false)__		given(callableStatement.getUpdateCount()).willReturn(-1)__		given(callableStatement.getObject(2)).willReturn(4)__		given(connection.prepareCall("{call " + StoredProcedureConfiguredViaJdbcTemplate.SQL + "(?, ?)}")_				).willReturn(callableStatement)__		JdbcTemplate t = new JdbcTemplate()__		t.setDataSource(dataSource)__		StoredProcedureConfiguredViaJdbcTemplate sp = new StoredProcedureConfiguredViaJdbcTemplate(t)__		assertEquals(4, sp.execute(1106))__		verify(callableStatement).setObject(1, 1106, Types.INTEGER)__		verify(callableStatement).registerOutParameter(2, Types.INTEGER)__	};confirm,our,jdbc,template,is,used,throws,exception;test,public,void,test,stored,procedure,configured,via,jdbc,template,throws,exception,given,callable,statement,execute,will,return,false,given,callable,statement,get,update,count,will,return,1,given,callable,statement,get,object,2,will,return,4,given,connection,prepare,call,call,stored,procedure,configured,via,jdbc,template,sql,will,return,callable,statement,jdbc,template,t,new,jdbc,template,t,set,data,source,data,source,stored,procedure,configured,via,jdbc,template,sp,new,stored,procedure,configured,via,jdbc,template,t,assert,equals,4,sp,execute,1106,verify,callable,statement,set,object,1,1106,types,integer,verify,callable,statement,register,out,parameter,2,types,integer
StoredProcedureTests -> @Test 	public void testStoredProcedureConfiguredViaJdbcTemplateWithCustomExceptionTranslator() 			throws Exception;1356735495;Confirm no connection was used to get metadata. Does not use superclass replay_mechanism.__@throws Exception;@Test_	public void testStoredProcedureConfiguredViaJdbcTemplateWithCustomExceptionTranslator()_			throws Exception {_		given(callableStatement.execute()).willReturn(false)__		given(callableStatement.getUpdateCount()).willReturn(-1)__		given(callableStatement.getObject(2)).willReturn(5)__		given(connection.prepareCall("{call " + StoredProcedureConfiguredViaJdbcTemplate.SQL + "(?, ?)}")_				).willReturn(callableStatement)___		class TestJdbcTemplate extends JdbcTemplate {__			int calls___			@Override_			public Map<String, Object> call(CallableStatementCreator csc,_					List<SqlParameter> declaredParameters) throws DataAccessException {_				calls++__				return super.call(csc, declaredParameters)__			}_		}_		TestJdbcTemplate t = new TestJdbcTemplate()__		t.setDataSource(dataSource)__		_		_		t.setExceptionTranslator(new SQLStateSQLExceptionTranslator())__		StoredProcedureConfiguredViaJdbcTemplate sp = new StoredProcedureConfiguredViaJdbcTemplate(t)___		assertEquals(sp.execute(11), 5)__		assertEquals(1, t.calls)___		verify(callableStatement).setObject(1, 11, Types.INTEGER)__		verify(callableStatement).registerOutParameter(2, Types.INTEGER)__	};confirm,no,connection,was,used,to,get,metadata,does,not,use,superclass,replay,mechanism,throws,exception;test,public,void,test,stored,procedure,configured,via,jdbc,template,with,custom,exception,translator,throws,exception,given,callable,statement,execute,will,return,false,given,callable,statement,get,update,count,will,return,1,given,callable,statement,get,object,2,will,return,5,given,connection,prepare,call,call,stored,procedure,configured,via,jdbc,template,sql,will,return,callable,statement,class,test,jdbc,template,extends,jdbc,template,int,calls,override,public,map,string,object,call,callable,statement,creator,csc,list,sql,parameter,declared,parameters,throws,data,access,exception,calls,return,super,call,csc,declared,parameters,test,jdbc,template,t,new,test,jdbc,template,t,set,data,source,data,source,t,set,exception,translator,new,sqlstate,sqlexception,translator,stored,procedure,configured,via,jdbc,template,sp,new,stored,procedure,configured,via,jdbc,template,t,assert,equals,sp,execute,11,5,assert,equals,1,t,calls,verify,callable,statement,set,object,1,11,types,integer,verify,callable,statement,register,out,parameter,2,types,integer
StoredProcedureTests -> @Test 	public void testStoredProcedureConfiguredViaJdbcTemplateWithCustomExceptionTranslator() 			throws Exception;1363208506;Confirm no connection was used to get metadata. Does not use superclass replay_mechanism.__@throws Exception;@Test_	public void testStoredProcedureConfiguredViaJdbcTemplateWithCustomExceptionTranslator()_			throws Exception {_		given(callableStatement.execute()).willReturn(false)__		given(callableStatement.getUpdateCount()).willReturn(-1)__		given(callableStatement.getObject(2)).willReturn(5)__		given(connection.prepareCall("{call " + StoredProcedureConfiguredViaJdbcTemplate.SQL + "(?, ?)}")_				).willReturn(callableStatement)___		class TestJdbcTemplate extends JdbcTemplate {__			int calls___			@Override_			public Map<String, Object> call(CallableStatementCreator csc,_					List<SqlParameter> declaredParameters) throws DataAccessException {_				calls++__				return super.call(csc, declaredParameters)__			}_		}_		TestJdbcTemplate t = new TestJdbcTemplate()__		t.setDataSource(dataSource)__		_		_		t.setExceptionTranslator(new SQLStateSQLExceptionTranslator())__		StoredProcedureConfiguredViaJdbcTemplate sp = new StoredProcedureConfiguredViaJdbcTemplate(t)___		assertEquals(sp.execute(11), 5)__		assertEquals(1, t.calls)___		verify(callableStatement).setObject(1, 11, Types.INTEGER)__		verify(callableStatement).registerOutParameter(2, Types.INTEGER)__	};confirm,no,connection,was,used,to,get,metadata,does,not,use,superclass,replay,mechanism,throws,exception;test,public,void,test,stored,procedure,configured,via,jdbc,template,with,custom,exception,translator,throws,exception,given,callable,statement,execute,will,return,false,given,callable,statement,get,update,count,will,return,1,given,callable,statement,get,object,2,will,return,5,given,connection,prepare,call,call,stored,procedure,configured,via,jdbc,template,sql,will,return,callable,statement,class,test,jdbc,template,extends,jdbc,template,int,calls,override,public,map,string,object,call,callable,statement,creator,csc,list,sql,parameter,declared,parameters,throws,data,access,exception,calls,return,super,call,csc,declared,parameters,test,jdbc,template,t,new,test,jdbc,template,t,set,data,source,data,source,t,set,exception,translator,new,sqlstate,sqlexception,translator,stored,procedure,configured,via,jdbc,template,sp,new,stored,procedure,configured,via,jdbc,template,t,assert,equals,sp,execute,11,5,assert,equals,1,t,calls,verify,callable,statement,set,object,1,11,types,integer,verify,callable,statement,register,out,parameter,2,types,integer
StoredProcedureTests -> @Test 	public void testStoredProcedureConfiguredViaJdbcTemplateWithCustomExceptionTranslator() 			throws Exception;1413848647;Confirm no connection was used to get metadata. Does not use superclass replay_mechanism.__@throws Exception;@Test_	public void testStoredProcedureConfiguredViaJdbcTemplateWithCustomExceptionTranslator()_			throws Exception {_		given(callableStatement.execute()).willReturn(false)__		given(callableStatement.getUpdateCount()).willReturn(-1)__		given(callableStatement.getObject(2)).willReturn(5)__		given(connection.prepareCall("{call " + StoredProcedureConfiguredViaJdbcTemplate.SQL + "(?, ?)}")_				).willReturn(callableStatement)___		class TestJdbcTemplate extends JdbcTemplate {__			int calls___			@Override_			public Map<String, Object> call(CallableStatementCreator csc,_					List<SqlParameter> declaredParameters) throws DataAccessException {_				calls++__				return super.call(csc, declaredParameters)__			}_		}_		TestJdbcTemplate t = new TestJdbcTemplate()__		t.setDataSource(dataSource)__		_		_		t.setExceptionTranslator(new SQLStateSQLExceptionTranslator())__		StoredProcedureConfiguredViaJdbcTemplate sp = new StoredProcedureConfiguredViaJdbcTemplate(t)___		assertEquals(sp.execute(11), 5)__		assertEquals(1, t.calls)___		verify(callableStatement).setObject(1, 11, Types.INTEGER)__		verify(callableStatement).registerOutParameter(2, Types.INTEGER)__	};confirm,no,connection,was,used,to,get,metadata,does,not,use,superclass,replay,mechanism,throws,exception;test,public,void,test,stored,procedure,configured,via,jdbc,template,with,custom,exception,translator,throws,exception,given,callable,statement,execute,will,return,false,given,callable,statement,get,update,count,will,return,1,given,callable,statement,get,object,2,will,return,5,given,connection,prepare,call,call,stored,procedure,configured,via,jdbc,template,sql,will,return,callable,statement,class,test,jdbc,template,extends,jdbc,template,int,calls,override,public,map,string,object,call,callable,statement,creator,csc,list,sql,parameter,declared,parameters,throws,data,access,exception,calls,return,super,call,csc,declared,parameters,test,jdbc,template,t,new,test,jdbc,template,t,set,data,source,data,source,t,set,exception,translator,new,sqlstate,sqlexception,translator,stored,procedure,configured,via,jdbc,template,sp,new,stored,procedure,configured,via,jdbc,template,t,assert,equals,sp,execute,11,5,assert,equals,1,t,calls,verify,callable,statement,set,object,1,11,types,integer,verify,callable,statement,register,out,parameter,2,types,integer
StoredProcedureTests -> @Test 	public void testStoredProcedureConfiguredViaJdbcTemplateWithCustomExceptionTranslator() 			throws Exception;1458843770;Confirm no connection was used to get metadata. Does not use superclass replay_mechanism.__@throws Exception;@Test_	public void testStoredProcedureConfiguredViaJdbcTemplateWithCustomExceptionTranslator()_			throws Exception {_		given(callableStatement.execute()).willReturn(false)__		given(callableStatement.getUpdateCount()).willReturn(-1)__		given(callableStatement.getObject(2)).willReturn(5)__		given(connection.prepareCall("{call " + StoredProcedureConfiguredViaJdbcTemplate.SQL + "(?, ?)}")_				).willReturn(callableStatement)___		class TestJdbcTemplate extends JdbcTemplate {__			int calls___			@Override_			public Map<String, Object> call(CallableStatementCreator csc,_					List<SqlParameter> declaredParameters) throws DataAccessException {_				calls++__				return super.call(csc, declaredParameters)__			}_		}_		TestJdbcTemplate t = new TestJdbcTemplate()__		t.setDataSource(dataSource)__		_		_		t.setExceptionTranslator(new SQLStateSQLExceptionTranslator())__		StoredProcedureConfiguredViaJdbcTemplate sp = new StoredProcedureConfiguredViaJdbcTemplate(t)___		assertEquals(sp.execute(11), 5)__		assertEquals(1, t.calls)___		verify(callableStatement).setObject(1, 11, Types.INTEGER)__		verify(callableStatement).registerOutParameter(2, Types.INTEGER)__	};confirm,no,connection,was,used,to,get,metadata,does,not,use,superclass,replay,mechanism,throws,exception;test,public,void,test,stored,procedure,configured,via,jdbc,template,with,custom,exception,translator,throws,exception,given,callable,statement,execute,will,return,false,given,callable,statement,get,update,count,will,return,1,given,callable,statement,get,object,2,will,return,5,given,connection,prepare,call,call,stored,procedure,configured,via,jdbc,template,sql,will,return,callable,statement,class,test,jdbc,template,extends,jdbc,template,int,calls,override,public,map,string,object,call,callable,statement,creator,csc,list,sql,parameter,declared,parameters,throws,data,access,exception,calls,return,super,call,csc,declared,parameters,test,jdbc,template,t,new,test,jdbc,template,t,set,data,source,data,source,t,set,exception,translator,new,sqlstate,sqlexception,translator,stored,procedure,configured,via,jdbc,template,sp,new,stored,procedure,configured,via,jdbc,template,t,assert,equals,sp,execute,11,5,assert,equals,1,t,calls,verify,callable,statement,set,object,1,11,types,integer,verify,callable,statement,register,out,parameter,2,types,integer
StoredProcedureTests -> @Test 	public void testStoredProcedureConfiguredViaJdbcTemplateWithCustomExceptionTranslator() 			throws Exception;1461047077;Confirm no connection was used to get metadata. Does not use superclass replay_mechanism.__@throws Exception;@Test_	public void testStoredProcedureConfiguredViaJdbcTemplateWithCustomExceptionTranslator()_			throws Exception {_		given(callableStatement.execute()).willReturn(false)__		given(callableStatement.getUpdateCount()).willReturn(-1)__		given(callableStatement.getObject(2)).willReturn(5)__		given(connection.prepareCall("{call " + StoredProcedureConfiguredViaJdbcTemplate.SQL + "(?, ?)}")_				).willReturn(callableStatement)___		class TestJdbcTemplate extends JdbcTemplate {__			int calls___			@Override_			public Map<String, Object> call(CallableStatementCreator csc,_					List<SqlParameter> declaredParameters) throws DataAccessException {_				calls++__				return super.call(csc, declaredParameters)__			}_		}_		TestJdbcTemplate t = new TestJdbcTemplate()__		t.setDataSource(dataSource)__		_		_		t.setExceptionTranslator(new SQLStateSQLExceptionTranslator())__		StoredProcedureConfiguredViaJdbcTemplate sp = new StoredProcedureConfiguredViaJdbcTemplate(t)___		assertEquals(sp.execute(11), 5)__		assertEquals(1, t.calls)___		verify(callableStatement).setObject(1, 11, Types.INTEGER)__		verify(callableStatement).registerOutParameter(2, Types.INTEGER)__	};confirm,no,connection,was,used,to,get,metadata,does,not,use,superclass,replay,mechanism,throws,exception;test,public,void,test,stored,procedure,configured,via,jdbc,template,with,custom,exception,translator,throws,exception,given,callable,statement,execute,will,return,false,given,callable,statement,get,update,count,will,return,1,given,callable,statement,get,object,2,will,return,5,given,connection,prepare,call,call,stored,procedure,configured,via,jdbc,template,sql,will,return,callable,statement,class,test,jdbc,template,extends,jdbc,template,int,calls,override,public,map,string,object,call,callable,statement,creator,csc,list,sql,parameter,declared,parameters,throws,data,access,exception,calls,return,super,call,csc,declared,parameters,test,jdbc,template,t,new,test,jdbc,template,t,set,data,source,data,source,t,set,exception,translator,new,sqlstate,sqlexception,translator,stored,procedure,configured,via,jdbc,template,sp,new,stored,procedure,configured,via,jdbc,template,t,assert,equals,sp,execute,11,5,assert,equals,1,t,calls,verify,callable,statement,set,object,1,11,types,integer,verify,callable,statement,register,out,parameter,2,types,integer
StoredProcedureTests -> @Test 	public void testStoredProcedureConfiguredViaJdbcTemplateWithCustomExceptionTranslator() 			throws Exception;1467730834;Confirm no connection was used to get metadata. Does not use superclass replay_mechanism.__@throws Exception;@Test_	public void testStoredProcedureConfiguredViaJdbcTemplateWithCustomExceptionTranslator()_			throws Exception {_		given(callableStatement.execute()).willReturn(false)__		given(callableStatement.getUpdateCount()).willReturn(-1)__		given(callableStatement.getObject(2)).willReturn(5)__		given(connection.prepareCall("{call " + StoredProcedureConfiguredViaJdbcTemplate.SQL + "(?, ?)}")_				).willReturn(callableStatement)___		class TestJdbcTemplate extends JdbcTemplate {__			int calls___			@Override_			public Map<String, Object> call(CallableStatementCreator csc,_					List<SqlParameter> declaredParameters) throws DataAccessException {_				calls++__				return super.call(csc, declaredParameters)__			}_		}_		TestJdbcTemplate t = new TestJdbcTemplate()__		t.setDataSource(dataSource)__		_		_		t.setExceptionTranslator(new SQLStateSQLExceptionTranslator())__		StoredProcedureConfiguredViaJdbcTemplate sp = new StoredProcedureConfiguredViaJdbcTemplate(t)___		assertEquals(sp.execute(11), 5)__		assertEquals(1, t.calls)___		verify(callableStatement).setObject(1, 11, Types.INTEGER)__		verify(callableStatement).registerOutParameter(2, Types.INTEGER)__	};confirm,no,connection,was,used,to,get,metadata,does,not,use,superclass,replay,mechanism,throws,exception;test,public,void,test,stored,procedure,configured,via,jdbc,template,with,custom,exception,translator,throws,exception,given,callable,statement,execute,will,return,false,given,callable,statement,get,update,count,will,return,1,given,callable,statement,get,object,2,will,return,5,given,connection,prepare,call,call,stored,procedure,configured,via,jdbc,template,sql,will,return,callable,statement,class,test,jdbc,template,extends,jdbc,template,int,calls,override,public,map,string,object,call,callable,statement,creator,csc,list,sql,parameter,declared,parameters,throws,data,access,exception,calls,return,super,call,csc,declared,parameters,test,jdbc,template,t,new,test,jdbc,template,t,set,data,source,data,source,t,set,exception,translator,new,sqlstate,sqlexception,translator,stored,procedure,configured,via,jdbc,template,sp,new,stored,procedure,configured,via,jdbc,template,t,assert,equals,sp,execute,11,5,assert,equals,1,t,calls,verify,callable,statement,set,object,1,11,types,integer,verify,callable,statement,register,out,parameter,2,types,integer
StoredProcedureTests -> @Test 	public void testStoredProcedureConfiguredViaJdbcTemplateWithCustomExceptionTranslator() 			throws Exception;1496242568;Confirm no connection was used to get metadata. Does not use superclass replay_mechanism.__@throws Exception;@Test_	public void testStoredProcedureConfiguredViaJdbcTemplateWithCustomExceptionTranslator()_			throws Exception {_		given(callableStatement.execute()).willReturn(false)__		given(callableStatement.getUpdateCount()).willReturn(-1)__		given(callableStatement.getObject(2)).willReturn(5)__		given(connection.prepareCall("{call " + StoredProcedureConfiguredViaJdbcTemplate.SQL + "(?, ?)}")_				).willReturn(callableStatement)___		class TestJdbcTemplate extends JdbcTemplate {__			int calls___			@Override_			public Map<String, Object> call(CallableStatementCreator csc,_					List<SqlParameter> declaredParameters) throws DataAccessException {_				calls++__				return super.call(csc, declaredParameters)__			}_		}_		TestJdbcTemplate t = new TestJdbcTemplate()__		t.setDataSource(dataSource)__		_		_		t.setExceptionTranslator(new SQLStateSQLExceptionTranslator())__		StoredProcedureConfiguredViaJdbcTemplate sp = new StoredProcedureConfiguredViaJdbcTemplate(t)___		assertEquals(sp.execute(11), 5)__		assertEquals(1, t.calls)___		verify(callableStatement).setObject(1, 11, Types.INTEGER)__		verify(callableStatement).registerOutParameter(2, Types.INTEGER)__	};confirm,no,connection,was,used,to,get,metadata,does,not,use,superclass,replay,mechanism,throws,exception;test,public,void,test,stored,procedure,configured,via,jdbc,template,with,custom,exception,translator,throws,exception,given,callable,statement,execute,will,return,false,given,callable,statement,get,update,count,will,return,1,given,callable,statement,get,object,2,will,return,5,given,connection,prepare,call,call,stored,procedure,configured,via,jdbc,template,sql,will,return,callable,statement,class,test,jdbc,template,extends,jdbc,template,int,calls,override,public,map,string,object,call,callable,statement,creator,csc,list,sql,parameter,declared,parameters,throws,data,access,exception,calls,return,super,call,csc,declared,parameters,test,jdbc,template,t,new,test,jdbc,template,t,set,data,source,data,source,t,set,exception,translator,new,sqlstate,sqlexception,translator,stored,procedure,configured,via,jdbc,template,sp,new,stored,procedure,configured,via,jdbc,template,t,assert,equals,sp,execute,11,5,assert,equals,1,t,calls,verify,callable,statement,set,object,1,11,types,integer,verify,callable,statement,register,out,parameter,2,types,integer
StoredProcedureTests -> @Test 	public void testStoredProcedureConfiguredViaJdbcTemplateWithCustomExceptionTranslator() 			throws Exception;1506097334;Confirm no connection was used to get metadata. Does not use superclass replay_mechanism.__@throws Exception;@Test_	public void testStoredProcedureConfiguredViaJdbcTemplateWithCustomExceptionTranslator()_			throws Exception {_		given(callableStatement.execute()).willReturn(false)__		given(callableStatement.getUpdateCount()).willReturn(-1)__		given(callableStatement.getObject(2)).willReturn(5)__		given(connection.prepareCall("{call " + StoredProcedureConfiguredViaJdbcTemplate.SQL + "(?, ?)}")_				).willReturn(callableStatement)___		class TestJdbcTemplate extends JdbcTemplate {__			int calls___			@Override_			public Map<String, Object> call(CallableStatementCreator csc,_					List<SqlParameter> declaredParameters) throws DataAccessException {_				calls++__				return super.call(csc, declaredParameters)__			}_		}_		TestJdbcTemplate t = new TestJdbcTemplate()__		t.setDataSource(dataSource)__		_		_		t.setExceptionTranslator(new SQLStateSQLExceptionTranslator())__		StoredProcedureConfiguredViaJdbcTemplate sp = new StoredProcedureConfiguredViaJdbcTemplate(t)___		assertEquals(sp.execute(11), 5)__		assertEquals(1, t.calls)___		verify(callableStatement).setObject(1, 11, Types.INTEGER)__		verify(callableStatement).registerOutParameter(2, Types.INTEGER)__	};confirm,no,connection,was,used,to,get,metadata,does,not,use,superclass,replay,mechanism,throws,exception;test,public,void,test,stored,procedure,configured,via,jdbc,template,with,custom,exception,translator,throws,exception,given,callable,statement,execute,will,return,false,given,callable,statement,get,update,count,will,return,1,given,callable,statement,get,object,2,will,return,5,given,connection,prepare,call,call,stored,procedure,configured,via,jdbc,template,sql,will,return,callable,statement,class,test,jdbc,template,extends,jdbc,template,int,calls,override,public,map,string,object,call,callable,statement,creator,csc,list,sql,parameter,declared,parameters,throws,data,access,exception,calls,return,super,call,csc,declared,parameters,test,jdbc,template,t,new,test,jdbc,template,t,set,data,source,data,source,t,set,exception,translator,new,sqlstate,sqlexception,translator,stored,procedure,configured,via,jdbc,template,sp,new,stored,procedure,configured,via,jdbc,template,t,assert,equals,sp,execute,11,5,assert,equals,1,t,calls,verify,callable,statement,set,object,1,11,types,integer,verify,callable,statement,register,out,parameter,2,types,integer
StoredProcedureTests -> @Test 	public void testStoredProcedureConfiguredViaJdbcTemplateWithCustomExceptionTranslator() 			throws Exception;1518279448;Confirm no connection was used to get metadata. Does not use superclass replay_mechanism.__@throws Exception;@Test_	public void testStoredProcedureConfiguredViaJdbcTemplateWithCustomExceptionTranslator()_			throws Exception {_		given(callableStatement.execute()).willReturn(false)__		given(callableStatement.getUpdateCount()).willReturn(-1)__		given(callableStatement.getObject(2)).willReturn(5)__		given(connection.prepareCall("{call " + StoredProcedureConfiguredViaJdbcTemplate.SQL + "(?, ?)}")_				).willReturn(callableStatement)___		class TestJdbcTemplate extends JdbcTemplate {__			int calls___			@Override_			public Map<String, Object> call(CallableStatementCreator csc,_					List<SqlParameter> declaredParameters) throws DataAccessException {_				calls++__				return super.call(csc, declaredParameters)__			}_		}_		TestJdbcTemplate t = new TestJdbcTemplate()__		t.setDataSource(dataSource)__		_		_		t.setExceptionTranslator(new SQLStateSQLExceptionTranslator())__		StoredProcedureConfiguredViaJdbcTemplate sp = new StoredProcedureConfiguredViaJdbcTemplate(t)___		assertEquals(5, sp.execute(11))__		assertEquals(1, t.calls)___		verify(callableStatement).setObject(1, 11, Types.INTEGER)__		verify(callableStatement).registerOutParameter(2, Types.INTEGER)__	};confirm,no,connection,was,used,to,get,metadata,does,not,use,superclass,replay,mechanism,throws,exception;test,public,void,test,stored,procedure,configured,via,jdbc,template,with,custom,exception,translator,throws,exception,given,callable,statement,execute,will,return,false,given,callable,statement,get,update,count,will,return,1,given,callable,statement,get,object,2,will,return,5,given,connection,prepare,call,call,stored,procedure,configured,via,jdbc,template,sql,will,return,callable,statement,class,test,jdbc,template,extends,jdbc,template,int,calls,override,public,map,string,object,call,callable,statement,creator,csc,list,sql,parameter,declared,parameters,throws,data,access,exception,calls,return,super,call,csc,declared,parameters,test,jdbc,template,t,new,test,jdbc,template,t,set,data,source,data,source,t,set,exception,translator,new,sqlstate,sqlexception,translator,stored,procedure,configured,via,jdbc,template,sp,new,stored,procedure,configured,via,jdbc,template,t,assert,equals,5,sp,execute,11,assert,equals,1,t,calls,verify,callable,statement,set,object,1,11,types,integer,verify,callable,statement,register,out,parameter,2,types,integer
