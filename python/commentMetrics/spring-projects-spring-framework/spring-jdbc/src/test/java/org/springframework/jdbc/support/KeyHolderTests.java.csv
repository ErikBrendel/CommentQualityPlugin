commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void singleKey() {     kh.getKeyList().addAll(singletonList(singletonMap("key", 1))).     assertEquals("single key should be returned", 1, kh.getKey().intValue()). }
false;public;0;8;;@Test public void singleKeyNonNumeric() {     kh.getKeyList().addAll(singletonList(singletonMap("key", "1"))).     exception.expect(DataRetrievalFailureException.class).     exception.expectMessage(startsWith("The generated key is not of a supported numeric type.")).     kh.getKey().intValue(). }
false;public;0;8;;@Test public void noKeyReturnedInMap() {     kh.getKeyList().addAll(singletonList(emptyMap())).     exception.expect(DataRetrievalFailureException.class).     exception.expectMessage(startsWith("Unable to retrieve the generated key.")).     kh.getKey(). }
false;public;0;13;;@Test public void multipleKeys() {     Map<String, Object> m = new HashMap<String, Object>() {          {             put("key", 1).             put("seq", 2).         }     }.     kh.getKeyList().addAll(singletonList(m)).     assertEquals("two keys should be in the map", 2, kh.getKeys().size()).     exception.expect(InvalidDataAccessApiUsageException.class).     exception.expectMessage(startsWith("The getKey method should only be used when a single key is returned.")).     kh.getKey(). }
false;public;0;13;;@Test public void multipleKeyRows() {     Map<String, Object> m = new HashMap<String, Object>() {          {             put("key", 1).             put("seq", 2).         }     }.     kh.getKeyList().addAll(asList(m, m)).     assertEquals("two rows should be in the list", 2, kh.getKeyList().size()).     exception.expect(InvalidDataAccessApiUsageException.class).     exception.expectMessage(startsWith("The getKeys method should only be used when keys for a single row are returned.")).     kh.getKeys(). }
