# id;timestamp;commentText;codeText;commentWords;codeWords
SQLErrorCodesFactoryTests -> public void testDefaultInstanceWithNoSuchDatabase();1328020251;Check that a default instance returns empty error codes for an unknown database.;public void testDefaultInstanceWithNoSuchDatabase() {_		SQLErrorCodes sec = SQLErrorCodesFactory.getInstance().getErrorCodes("xx")__		assertTrue(sec.getBadSqlGrammarCodes().length == 0)__		assertTrue(sec.getDataIntegrityViolationCodes().length == 0)__	};check,that,a,default,instance,returns,empty,error,codes,for,an,unknown,database;public,void,test,default,instance,with,no,such,database,sqlerror,codes,sec,sqlerror,codes,factory,get,instance,get,error,codes,xx,assert,true,sec,get,bad,sql,grammar,codes,length,0,assert,true,sec,get,data,integrity,violation,codes,length,0
SQLErrorCodesFactoryTests -> public void testDefaultInstanceWithNoSuchDatabase();1351100222;Check that a default instance returns empty error codes for an unknown database.;public void testDefaultInstanceWithNoSuchDatabase() {_		SQLErrorCodes sec = SQLErrorCodesFactory.getInstance().getErrorCodes("xx")__		assertTrue(sec.getBadSqlGrammarCodes().length == 0)__		assertTrue(sec.getDataIntegrityViolationCodes().length == 0)__	};check,that,a,default,instance,returns,empty,error,codes,for,an,unknown,database;public,void,test,default,instance,with,no,such,database,sqlerror,codes,sec,sqlerror,codes,factory,get,instance,get,error,codes,xx,assert,true,sec,get,bad,sql,grammar,codes,length,0,assert,true,sec,get,data,integrity,violation,codes,length,0
SQLErrorCodesFactoryTests -> public void testDefaultInstanceWithNoSuchDatabase();1351100351;Check that a default instance returns empty error codes for an unknown database.;public void testDefaultInstanceWithNoSuchDatabase() {_		SQLErrorCodes sec = SQLErrorCodesFactory.getInstance().getErrorCodes("xx")__		assertTrue(sec.getBadSqlGrammarCodes().length == 0)__		assertTrue(sec.getDataIntegrityViolationCodes().length == 0)__	};check,that,a,default,instance,returns,empty,error,codes,for,an,unknown,database;public,void,test,default,instance,with,no,such,database,sqlerror,codes,sec,sqlerror,codes,factory,get,instance,get,error,codes,xx,assert,true,sec,get,bad,sql,grammar,codes,length,0,assert,true,sec,get,data,integrity,violation,codes,length,0
SQLErrorCodesFactoryTests -> public void testDefaultInstanceWithNoSuchDatabase();1351149687;Check that a default instance returns empty error codes for an unknown database.;public void testDefaultInstanceWithNoSuchDatabase() {_		SQLErrorCodes sec = SQLErrorCodesFactory.getInstance().getErrorCodes("xx")__		assertTrue(sec.getBadSqlGrammarCodes().length == 0)__		assertTrue(sec.getDataIntegrityViolationCodes().length == 0)__	};check,that,a,default,instance,returns,empty,error,codes,for,an,unknown,database;public,void,test,default,instance,with,no,such,database,sqlerror,codes,sec,sqlerror,codes,factory,get,instance,get,error,codes,xx,assert,true,sec,get,bad,sql,grammar,codes,length,0,assert,true,sec,get,data,integrity,violation,codes,length,0
SQLErrorCodesFactoryTests -> public void testDefaultInstanceWithNoSuchDatabase();1351862317;Check that a default instance returns empty error codes for an unknown database.;public void testDefaultInstanceWithNoSuchDatabase() {_		SQLErrorCodes sec = SQLErrorCodesFactory.getInstance().getErrorCodes("xx")__		assertTrue(sec.getBadSqlGrammarCodes().length == 0)__		assertTrue(sec.getDataIntegrityViolationCodes().length == 0)__	};check,that,a,default,instance,returns,empty,error,codes,for,an,unknown,database;public,void,test,default,instance,with,no,such,database,sqlerror,codes,sec,sqlerror,codes,factory,get,instance,get,error,codes,xx,assert,true,sec,get,bad,sql,grammar,codes,length,0,assert,true,sec,get,data,integrity,violation,codes,length,0
SQLErrorCodesFactoryTests -> @Test 	public void testWildCardNameRecognized() throws Exception;1356735495;Check that wild card database name works.;@Test_	public void testWildCardNameRecognized() throws Exception {_		class WildcardSQLErrorCodesFactory extends SQLErrorCodesFactory {_			@Override_			protected Resource loadResource(String path) {_				if (SQLErrorCodesFactory.SQL_ERROR_CODE_OVERRIDE_PATH.equals(path)) {_					return new ClassPathResource("wildcard-error-codes.xml", SQLErrorCodesFactoryTests.class)__				}_				return null__			}_		}__		WildcardSQLErrorCodesFactory factory = new WildcardSQLErrorCodesFactory()__		SQLErrorCodes sec = getErrorCodesFromDataSource("DB2", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB2 UDB for Xxxxx", factory)__		assertIsDB2(sec)___		sec = getErrorCodesFromDataSource("DB3", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB3/", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB3", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB3", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB3/", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB-3", factory)__		assertIsEmpty(sec)___		sec = getErrorCodesFromDataSource("DB1", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB1/", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB1", factory)__		assertIsEmpty(sec)__		sec = getErrorCodesFromDataSource("/DB1/", factory)__		assertIsEmpty(sec)___		sec = getErrorCodesFromDataSource("DB0", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB0", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB0/", factory)__		assertIsEmpty(sec)__		sec = getErrorCodesFromDataSource("/DB0/", factory)__		assertIsEmpty(sec)__	};check,that,wild,card,database,name,works;test,public,void,test,wild,card,name,recognized,throws,exception,class,wildcard,sqlerror,codes,factory,extends,sqlerror,codes,factory,override,protected,resource,load,resource,string,path,if,sqlerror,codes,factory,equals,path,return,new,class,path,resource,wildcard,error,codes,xml,sqlerror,codes,factory,tests,class,return,null,wildcard,sqlerror,codes,factory,factory,new,wildcard,sqlerror,codes,factory,sqlerror,codes,sec,get,error,codes,from,data,source,db2,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db2,udb,for,xxxxx,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db,3,factory,assert,is,empty,sec,sec,get,error,codes,from,data,source,db1,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db1,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db1,factory,assert,is,empty,sec,sec,get,error,codes,from,data,source,db1,factory,assert,is,empty,sec,sec,get,error,codes,from,data,source,db0,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db0,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db0,factory,assert,is,empty,sec,sec,get,error,codes,from,data,source,db0,factory,assert,is,empty,sec
SQLErrorCodesFactoryTests -> @Test 	public void testWildCardNameRecognized() throws Exception;1363208506;Check that wild card database name works.;@Test_	public void testWildCardNameRecognized() throws Exception {_		class WildcardSQLErrorCodesFactory extends SQLErrorCodesFactory {_			@Override_			protected Resource loadResource(String path) {_				if (SQLErrorCodesFactory.SQL_ERROR_CODE_OVERRIDE_PATH.equals(path)) {_					return new ClassPathResource("wildcard-error-codes.xml", SQLErrorCodesFactoryTests.class)__				}_				return null__			}_		}__		WildcardSQLErrorCodesFactory factory = new WildcardSQLErrorCodesFactory()__		SQLErrorCodes sec = getErrorCodesFromDataSource("DB2", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB2 UDB for Xxxxx", factory)__		assertIsDB2(sec)___		sec = getErrorCodesFromDataSource("DB3", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB3/", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB3", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB3", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB3/", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB-3", factory)__		assertIsEmpty(sec)___		sec = getErrorCodesFromDataSource("DB1", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB1/", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB1", factory)__		assertIsEmpty(sec)__		sec = getErrorCodesFromDataSource("/DB1/", factory)__		assertIsEmpty(sec)___		sec = getErrorCodesFromDataSource("DB0", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB0", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB0/", factory)__		assertIsEmpty(sec)__		sec = getErrorCodesFromDataSource("/DB0/", factory)__		assertIsEmpty(sec)__	};check,that,wild,card,database,name,works;test,public,void,test,wild,card,name,recognized,throws,exception,class,wildcard,sqlerror,codes,factory,extends,sqlerror,codes,factory,override,protected,resource,load,resource,string,path,if,sqlerror,codes,factory,equals,path,return,new,class,path,resource,wildcard,error,codes,xml,sqlerror,codes,factory,tests,class,return,null,wildcard,sqlerror,codes,factory,factory,new,wildcard,sqlerror,codes,factory,sqlerror,codes,sec,get,error,codes,from,data,source,db2,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db2,udb,for,xxxxx,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db,3,factory,assert,is,empty,sec,sec,get,error,codes,from,data,source,db1,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db1,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db1,factory,assert,is,empty,sec,sec,get,error,codes,from,data,source,db1,factory,assert,is,empty,sec,sec,get,error,codes,from,data,source,db0,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db0,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db0,factory,assert,is,empty,sec,sec,get,error,codes,from,data,source,db0,factory,assert,is,empty,sec
SQLErrorCodesFactoryTests -> @Test 	public void testWildCardNameRecognized() throws Exception;1400168215;Check that wild card database name works.;@Test_	public void testWildCardNameRecognized() throws Exception {_		class WildcardSQLErrorCodesFactory extends SQLErrorCodesFactory {_			@Override_			protected Resource loadResource(String path) {_				if (SQLErrorCodesFactory.SQL_ERROR_CODE_OVERRIDE_PATH.equals(path)) {_					return new ClassPathResource("wildcard-error-codes.xml", SQLErrorCodesFactoryTests.class)__				}_				return null__			}_		}__		WildcardSQLErrorCodesFactory factory = new WildcardSQLErrorCodesFactory()__		SQLErrorCodes sec = getErrorCodesFromDataSource("DB2", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB2 UDB for Xxxxx", factory)__		assertIsDB2(sec)___		sec = getErrorCodesFromDataSource("DB3", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB3/", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB3", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB3", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB3/", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB-3", factory)__		assertIsEmpty(sec)___		sec = getErrorCodesFromDataSource("DB1", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB1/", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB1", factory)__		assertIsEmpty(sec)__		sec = getErrorCodesFromDataSource("/DB1/", factory)__		assertIsEmpty(sec)___		sec = getErrorCodesFromDataSource("DB0", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB0", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB0/", factory)__		assertIsEmpty(sec)__		sec = getErrorCodesFromDataSource("/DB0/", factory)__		assertIsEmpty(sec)__	};check,that,wild,card,database,name,works;test,public,void,test,wild,card,name,recognized,throws,exception,class,wildcard,sqlerror,codes,factory,extends,sqlerror,codes,factory,override,protected,resource,load,resource,string,path,if,sqlerror,codes,factory,equals,path,return,new,class,path,resource,wildcard,error,codes,xml,sqlerror,codes,factory,tests,class,return,null,wildcard,sqlerror,codes,factory,factory,new,wildcard,sqlerror,codes,factory,sqlerror,codes,sec,get,error,codes,from,data,source,db2,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db2,udb,for,xxxxx,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db,3,factory,assert,is,empty,sec,sec,get,error,codes,from,data,source,db1,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db1,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db1,factory,assert,is,empty,sec,sec,get,error,codes,from,data,source,db1,factory,assert,is,empty,sec,sec,get,error,codes,from,data,source,db0,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db0,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db0,factory,assert,is,empty,sec,sec,get,error,codes,from,data,source,db0,factory,assert,is,empty,sec
SQLErrorCodesFactoryTests -> @Test 	public void testWildCardNameRecognized() throws Exception;1413848647;Check that wild card database name works.;@Test_	public void testWildCardNameRecognized() throws Exception {_		class WildcardSQLErrorCodesFactory extends SQLErrorCodesFactory {_			@Override_			protected Resource loadResource(String path) {_				if (SQLErrorCodesFactory.SQL_ERROR_CODE_OVERRIDE_PATH.equals(path)) {_					return new ClassPathResource("wildcard-error-codes.xml", SQLErrorCodesFactoryTests.class)__				}_				return null__			}_		}__		WildcardSQLErrorCodesFactory factory = new WildcardSQLErrorCodesFactory()__		SQLErrorCodes sec = getErrorCodesFromDataSource("DB2", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB2 UDB for Xxxxx", factory)__		assertIsDB2(sec)___		sec = getErrorCodesFromDataSource("DB3", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB3/", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB3", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB3", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB3/", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB-3", factory)__		assertIsEmpty(sec)___		sec = getErrorCodesFromDataSource("DB1", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB1/", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB1", factory)__		assertIsEmpty(sec)__		sec = getErrorCodesFromDataSource("/DB1/", factory)__		assertIsEmpty(sec)___		sec = getErrorCodesFromDataSource("DB0", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB0", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB0/", factory)__		assertIsEmpty(sec)__		sec = getErrorCodesFromDataSource("/DB0/", factory)__		assertIsEmpty(sec)__	};check,that,wild,card,database,name,works;test,public,void,test,wild,card,name,recognized,throws,exception,class,wildcard,sqlerror,codes,factory,extends,sqlerror,codes,factory,override,protected,resource,load,resource,string,path,if,sqlerror,codes,factory,equals,path,return,new,class,path,resource,wildcard,error,codes,xml,sqlerror,codes,factory,tests,class,return,null,wildcard,sqlerror,codes,factory,factory,new,wildcard,sqlerror,codes,factory,sqlerror,codes,sec,get,error,codes,from,data,source,db2,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db2,udb,for,xxxxx,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db,3,factory,assert,is,empty,sec,sec,get,error,codes,from,data,source,db1,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db1,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db1,factory,assert,is,empty,sec,sec,get,error,codes,from,data,source,db1,factory,assert,is,empty,sec,sec,get,error,codes,from,data,source,db0,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db0,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db0,factory,assert,is,empty,sec,sec,get,error,codes,from,data,source,db0,factory,assert,is,empty,sec
SQLErrorCodesFactoryTests -> @Test 	public void testFindUserDefinedCodes();1356735495;Check that user defined error codes take precedence.;@Test_	public void testFindUserDefinedCodes() {_		class TestSQLErrorCodesFactory extends SQLErrorCodesFactory {_			@Override_			protected Resource loadResource(String path) {_				if (SQLErrorCodesFactory.SQL_ERROR_CODE_OVERRIDE_PATH.equals(path)) {_					return new ClassPathResource("test-error-codes.xml", SQLErrorCodesFactoryTests.class)__				}_				return null__			}_		}__		_		TestSQLErrorCodesFactory sf = new TestSQLErrorCodesFactory()__		assertTrue(sf.getErrorCodes("XX").getBadSqlGrammarCodes().length == 0)__		assertEquals(2, sf.getErrorCodes("Oracle").getBadSqlGrammarCodes().length)__		assertEquals("1", sf.getErrorCodes("Oracle").getBadSqlGrammarCodes()[0])__		assertEquals("2", sf.getErrorCodes("Oracle").getBadSqlGrammarCodes()[1])__	};check,that,user,defined,error,codes,take,precedence;test,public,void,test,find,user,defined,codes,class,test,sqlerror,codes,factory,extends,sqlerror,codes,factory,override,protected,resource,load,resource,string,path,if,sqlerror,codes,factory,equals,path,return,new,class,path,resource,test,error,codes,xml,sqlerror,codes,factory,tests,class,return,null,test,sqlerror,codes,factory,sf,new,test,sqlerror,codes,factory,assert,true,sf,get,error,codes,xx,get,bad,sql,grammar,codes,length,0,assert,equals,2,sf,get,error,codes,oracle,get,bad,sql,grammar,codes,length,assert,equals,1,sf,get,error,codes,oracle,get,bad,sql,grammar,codes,0,assert,equals,2,sf,get,error,codes,oracle,get,bad,sql,grammar,codes,1
SQLErrorCodesFactoryTests -> @Test 	public void testFindUserDefinedCodes();1363208506;Check that user defined error codes take precedence.;@Test_	public void testFindUserDefinedCodes() {_		class TestSQLErrorCodesFactory extends SQLErrorCodesFactory {_			@Override_			protected Resource loadResource(String path) {_				if (SQLErrorCodesFactory.SQL_ERROR_CODE_OVERRIDE_PATH.equals(path)) {_					return new ClassPathResource("test-error-codes.xml", SQLErrorCodesFactoryTests.class)__				}_				return null__			}_		}__		_		TestSQLErrorCodesFactory sf = new TestSQLErrorCodesFactory()__		assertTrue(sf.getErrorCodes("XX").getBadSqlGrammarCodes().length == 0)__		assertEquals(2, sf.getErrorCodes("Oracle").getBadSqlGrammarCodes().length)__		assertEquals("1", sf.getErrorCodes("Oracle").getBadSqlGrammarCodes()[0])__		assertEquals("2", sf.getErrorCodes("Oracle").getBadSqlGrammarCodes()[1])__	};check,that,user,defined,error,codes,take,precedence;test,public,void,test,find,user,defined,codes,class,test,sqlerror,codes,factory,extends,sqlerror,codes,factory,override,protected,resource,load,resource,string,path,if,sqlerror,codes,factory,equals,path,return,new,class,path,resource,test,error,codes,xml,sqlerror,codes,factory,tests,class,return,null,test,sqlerror,codes,factory,sf,new,test,sqlerror,codes,factory,assert,true,sf,get,error,codes,xx,get,bad,sql,grammar,codes,length,0,assert,equals,2,sf,get,error,codes,oracle,get,bad,sql,grammar,codes,length,assert,equals,1,sf,get,error,codes,oracle,get,bad,sql,grammar,codes,0,assert,equals,2,sf,get,error,codes,oracle,get,bad,sql,grammar,codes,1
SQLErrorCodesFactoryTests -> @Test 	public void testFindUserDefinedCodes();1400168215;Check that user defined error codes take precedence.;@Test_	public void testFindUserDefinedCodes() {_		class TestSQLErrorCodesFactory extends SQLErrorCodesFactory {_			@Override_			protected Resource loadResource(String path) {_				if (SQLErrorCodesFactory.SQL_ERROR_CODE_OVERRIDE_PATH.equals(path)) {_					return new ClassPathResource("test-error-codes.xml", SQLErrorCodesFactoryTests.class)__				}_				return null__			}_		}__		_		TestSQLErrorCodesFactory sf = new TestSQLErrorCodesFactory()__		assertTrue(sf.getErrorCodes("XX").getBadSqlGrammarCodes().length == 0)__		assertEquals(2, sf.getErrorCodes("Oracle").getBadSqlGrammarCodes().length)__		assertEquals("1", sf.getErrorCodes("Oracle").getBadSqlGrammarCodes()[0])__		assertEquals("2", sf.getErrorCodes("Oracle").getBadSqlGrammarCodes()[1])__	};check,that,user,defined,error,codes,take,precedence;test,public,void,test,find,user,defined,codes,class,test,sqlerror,codes,factory,extends,sqlerror,codes,factory,override,protected,resource,load,resource,string,path,if,sqlerror,codes,factory,equals,path,return,new,class,path,resource,test,error,codes,xml,sqlerror,codes,factory,tests,class,return,null,test,sqlerror,codes,factory,sf,new,test,sqlerror,codes,factory,assert,true,sf,get,error,codes,xx,get,bad,sql,grammar,codes,length,0,assert,equals,2,sf,get,error,codes,oracle,get,bad,sql,grammar,codes,length,assert,equals,1,sf,get,error,codes,oracle,get,bad,sql,grammar,codes,0,assert,equals,2,sf,get,error,codes,oracle,get,bad,sql,grammar,codes,1
SQLErrorCodesFactoryTests -> @Test 	public void testFindUserDefinedCodes();1413848647;Check that user defined error codes take precedence.;@Test_	public void testFindUserDefinedCodes() {_		class TestSQLErrorCodesFactory extends SQLErrorCodesFactory {_			@Override_			protected Resource loadResource(String path) {_				if (SQLErrorCodesFactory.SQL_ERROR_CODE_OVERRIDE_PATH.equals(path)) {_					return new ClassPathResource("test-error-codes.xml", SQLErrorCodesFactoryTests.class)__				}_				return null__			}_		}__		_		TestSQLErrorCodesFactory sf = new TestSQLErrorCodesFactory()__		assertTrue(sf.getErrorCodes("XX").getBadSqlGrammarCodes().length == 0)__		assertEquals(2, sf.getErrorCodes("Oracle").getBadSqlGrammarCodes().length)__		assertEquals("1", sf.getErrorCodes("Oracle").getBadSqlGrammarCodes()[0])__		assertEquals("2", sf.getErrorCodes("Oracle").getBadSqlGrammarCodes()[1])__	};check,that,user,defined,error,codes,take,precedence;test,public,void,test,find,user,defined,codes,class,test,sqlerror,codes,factory,extends,sqlerror,codes,factory,override,protected,resource,load,resource,string,path,if,sqlerror,codes,factory,equals,path,return,new,class,path,resource,test,error,codes,xml,sqlerror,codes,factory,tests,class,return,null,test,sqlerror,codes,factory,sf,new,test,sqlerror,codes,factory,assert,true,sf,get,error,codes,xx,get,bad,sql,grammar,codes,length,0,assert,equals,2,sf,get,error,codes,oracle,get,bad,sql,grammar,codes,length,assert,equals,1,sf,get,error,codes,oracle,get,bad,sql,grammar,codes,0,assert,equals,2,sf,get,error,codes,oracle,get,bad,sql,grammar,codes,1
SQLErrorCodesFactoryTests -> public void testFindUserDefinedCodes();1328020251;Check that user defined error codes take precedence.;public void testFindUserDefinedCodes() {_		class TestSQLErrorCodesFactory extends SQLErrorCodesFactory {_			protected Resource loadResource(String path) {_				if (SQLErrorCodesFactory.SQL_ERROR_CODE_OVERRIDE_PATH.equals(path)) {_					return new ClassPathResource("test-error-codes.xml", SQLErrorCodesFactoryTests.class)__				}_				return null__			}_		}_	_		_		TestSQLErrorCodesFactory sf = new TestSQLErrorCodesFactory()__		assertTrue(sf.getErrorCodes("XX").getBadSqlGrammarCodes().length == 0)__		assertEquals(2, sf.getErrorCodes("Oracle").getBadSqlGrammarCodes().length)__		assertEquals("1", sf.getErrorCodes("Oracle").getBadSqlGrammarCodes()[0])__		assertEquals("2", sf.getErrorCodes("Oracle").getBadSqlGrammarCodes()[1])__	};check,that,user,defined,error,codes,take,precedence;public,void,test,find,user,defined,codes,class,test,sqlerror,codes,factory,extends,sqlerror,codes,factory,protected,resource,load,resource,string,path,if,sqlerror,codes,factory,equals,path,return,new,class,path,resource,test,error,codes,xml,sqlerror,codes,factory,tests,class,return,null,test,sqlerror,codes,factory,sf,new,test,sqlerror,codes,factory,assert,true,sf,get,error,codes,xx,get,bad,sql,grammar,codes,length,0,assert,equals,2,sf,get,error,codes,oracle,get,bad,sql,grammar,codes,length,assert,equals,1,sf,get,error,codes,oracle,get,bad,sql,grammar,codes,0,assert,equals,2,sf,get,error,codes,oracle,get,bad,sql,grammar,codes,1
SQLErrorCodesFactoryTests -> public void testFindUserDefinedCodes();1351100222;Check that user defined error codes take precedence.;public void testFindUserDefinedCodes() {_		class TestSQLErrorCodesFactory extends SQLErrorCodesFactory {_			protected Resource loadResource(String path) {_				if (SQLErrorCodesFactory.SQL_ERROR_CODE_OVERRIDE_PATH.equals(path)) {_					return new ClassPathResource("test-error-codes.xml", SQLErrorCodesFactoryTests.class)__				}_				return null__			}_		}__		_		TestSQLErrorCodesFactory sf = new TestSQLErrorCodesFactory()__		assertTrue(sf.getErrorCodes("XX").getBadSqlGrammarCodes().length == 0)__		assertEquals(2, sf.getErrorCodes("Oracle").getBadSqlGrammarCodes().length)__		assertEquals("1", sf.getErrorCodes("Oracle").getBadSqlGrammarCodes()[0])__		assertEquals("2", sf.getErrorCodes("Oracle").getBadSqlGrammarCodes()[1])__	};check,that,user,defined,error,codes,take,precedence;public,void,test,find,user,defined,codes,class,test,sqlerror,codes,factory,extends,sqlerror,codes,factory,protected,resource,load,resource,string,path,if,sqlerror,codes,factory,equals,path,return,new,class,path,resource,test,error,codes,xml,sqlerror,codes,factory,tests,class,return,null,test,sqlerror,codes,factory,sf,new,test,sqlerror,codes,factory,assert,true,sf,get,error,codes,xx,get,bad,sql,grammar,codes,length,0,assert,equals,2,sf,get,error,codes,oracle,get,bad,sql,grammar,codes,length,assert,equals,1,sf,get,error,codes,oracle,get,bad,sql,grammar,codes,0,assert,equals,2,sf,get,error,codes,oracle,get,bad,sql,grammar,codes,1
SQLErrorCodesFactoryTests -> public void testFindUserDefinedCodes();1351100351;Check that user defined error codes take precedence.;public void testFindUserDefinedCodes() {_		class TestSQLErrorCodesFactory extends SQLErrorCodesFactory {_			protected Resource loadResource(String path) {_				if (SQLErrorCodesFactory.SQL_ERROR_CODE_OVERRIDE_PATH.equals(path)) {_					return new ClassPathResource("test-error-codes.xml", SQLErrorCodesFactoryTests.class)__				}_				return null__			}_		}__		_		TestSQLErrorCodesFactory sf = new TestSQLErrorCodesFactory()__		assertTrue(sf.getErrorCodes("XX").getBadSqlGrammarCodes().length == 0)__		assertEquals(2, sf.getErrorCodes("Oracle").getBadSqlGrammarCodes().length)__		assertEquals("1", sf.getErrorCodes("Oracle").getBadSqlGrammarCodes()[0])__		assertEquals("2", sf.getErrorCodes("Oracle").getBadSqlGrammarCodes()[1])__	};check,that,user,defined,error,codes,take,precedence;public,void,test,find,user,defined,codes,class,test,sqlerror,codes,factory,extends,sqlerror,codes,factory,protected,resource,load,resource,string,path,if,sqlerror,codes,factory,equals,path,return,new,class,path,resource,test,error,codes,xml,sqlerror,codes,factory,tests,class,return,null,test,sqlerror,codes,factory,sf,new,test,sqlerror,codes,factory,assert,true,sf,get,error,codes,xx,get,bad,sql,grammar,codes,length,0,assert,equals,2,sf,get,error,codes,oracle,get,bad,sql,grammar,codes,length,assert,equals,1,sf,get,error,codes,oracle,get,bad,sql,grammar,codes,0,assert,equals,2,sf,get,error,codes,oracle,get,bad,sql,grammar,codes,1
SQLErrorCodesFactoryTests -> public void testFindUserDefinedCodes();1351149687;Check that user defined error codes take precedence.;public void testFindUserDefinedCodes() {_		class TestSQLErrorCodesFactory extends SQLErrorCodesFactory {_			protected Resource loadResource(String path) {_				if (SQLErrorCodesFactory.SQL_ERROR_CODE_OVERRIDE_PATH.equals(path)) {_					return new ClassPathResource("test-error-codes.xml", SQLErrorCodesFactoryTests.class)__				}_				return null__			}_		}__		_		TestSQLErrorCodesFactory sf = new TestSQLErrorCodesFactory()__		assertTrue(sf.getErrorCodes("XX").getBadSqlGrammarCodes().length == 0)__		assertEquals(2, sf.getErrorCodes("Oracle").getBadSqlGrammarCodes().length)__		assertEquals("1", sf.getErrorCodes("Oracle").getBadSqlGrammarCodes()[0])__		assertEquals("2", sf.getErrorCodes("Oracle").getBadSqlGrammarCodes()[1])__	};check,that,user,defined,error,codes,take,precedence;public,void,test,find,user,defined,codes,class,test,sqlerror,codes,factory,extends,sqlerror,codes,factory,protected,resource,load,resource,string,path,if,sqlerror,codes,factory,equals,path,return,new,class,path,resource,test,error,codes,xml,sqlerror,codes,factory,tests,class,return,null,test,sqlerror,codes,factory,sf,new,test,sqlerror,codes,factory,assert,true,sf,get,error,codes,xx,get,bad,sql,grammar,codes,length,0,assert,equals,2,sf,get,error,codes,oracle,get,bad,sql,grammar,codes,length,assert,equals,1,sf,get,error,codes,oracle,get,bad,sql,grammar,codes,0,assert,equals,2,sf,get,error,codes,oracle,get,bad,sql,grammar,codes,1
SQLErrorCodesFactoryTests -> public void testFindUserDefinedCodes();1351862317;Check that user defined error codes take precedence.;public void testFindUserDefinedCodes() {_		class TestSQLErrorCodesFactory extends SQLErrorCodesFactory {_			protected Resource loadResource(String path) {_				if (SQLErrorCodesFactory.SQL_ERROR_CODE_OVERRIDE_PATH.equals(path)) {_					return new ClassPathResource("test-error-codes.xml", SQLErrorCodesFactoryTests.class)__				}_				return null__			}_		}__		_		TestSQLErrorCodesFactory sf = new TestSQLErrorCodesFactory()__		assertTrue(sf.getErrorCodes("XX").getBadSqlGrammarCodes().length == 0)__		assertEquals(2, sf.getErrorCodes("Oracle").getBadSqlGrammarCodes().length)__		assertEquals("1", sf.getErrorCodes("Oracle").getBadSqlGrammarCodes()[0])__		assertEquals("2", sf.getErrorCodes("Oracle").getBadSqlGrammarCodes()[1])__	};check,that,user,defined,error,codes,take,precedence;public,void,test,find,user,defined,codes,class,test,sqlerror,codes,factory,extends,sqlerror,codes,factory,protected,resource,load,resource,string,path,if,sqlerror,codes,factory,equals,path,return,new,class,path,resource,test,error,codes,xml,sqlerror,codes,factory,tests,class,return,null,test,sqlerror,codes,factory,sf,new,test,sqlerror,codes,factory,assert,true,sf,get,error,codes,xx,get,bad,sql,grammar,codes,length,0,assert,equals,2,sf,get,error,codes,oracle,get,bad,sql,grammar,codes,length,assert,equals,1,sf,get,error,codes,oracle,get,bad,sql,grammar,codes,0,assert,equals,2,sf,get,error,codes,oracle,get,bad,sql,grammar,codes,1
SQLErrorCodesFactoryTests -> @Test 	public void testDefaultInstanceWithOracle();1356735495;Check that a known database produces recognizable codes.;@Test_	public void testDefaultInstanceWithOracle() {_		SQLErrorCodes sec = SQLErrorCodesFactory.getInstance().getErrorCodes("Oracle")__		assertIsOracle(sec)__	};check,that,a,known,database,produces,recognizable,codes;test,public,void,test,default,instance,with,oracle,sqlerror,codes,sec,sqlerror,codes,factory,get,instance,get,error,codes,oracle,assert,is,oracle,sec
SQLErrorCodesFactoryTests -> @Test 	public void testDefaultInstanceWithOracle();1363208506;Check that a known database produces recognizable codes.;@Test_	public void testDefaultInstanceWithOracle() {_		SQLErrorCodes sec = SQLErrorCodesFactory.getInstance().getErrorCodes("Oracle")__		assertIsOracle(sec)__	};check,that,a,known,database,produces,recognizable,codes;test,public,void,test,default,instance,with,oracle,sqlerror,codes,sec,sqlerror,codes,factory,get,instance,get,error,codes,oracle,assert,is,oracle,sec
SQLErrorCodesFactoryTests -> @Test 	public void testDefaultInstanceWithOracle();1400168215;Check that a known database produces recognizable codes.;@Test_	public void testDefaultInstanceWithOracle() {_		SQLErrorCodes sec = SQLErrorCodesFactory.getInstance().getErrorCodes("Oracle")__		assertIsOracle(sec)__	};check,that,a,known,database,produces,recognizable,codes;test,public,void,test,default,instance,with,oracle,sqlerror,codes,sec,sqlerror,codes,factory,get,instance,get,error,codes,oracle,assert,is,oracle,sec
SQLErrorCodesFactoryTests -> @Test 	public void testDefaultInstanceWithOracle();1413848647;Check that a known database produces recognizable codes.;@Test_	public void testDefaultInstanceWithOracle() {_		SQLErrorCodes sec = SQLErrorCodesFactory.getInstance().getErrorCodes("Oracle")__		assertIsOracle(sec)__	};check,that,a,known,database,produces,recognizable,codes;test,public,void,test,default,instance,with,oracle,sqlerror,codes,sec,sqlerror,codes,factory,get,instance,get,error,codes,oracle,assert,is,oracle,sec
SQLErrorCodesFactoryTests -> @Test 	public void testFindCustomCodes();1356735495;Check that custom error codes take precedence.;@Test_	public void testFindCustomCodes() {_		class TestSQLErrorCodesFactory extends SQLErrorCodesFactory {_			@Override_			protected Resource loadResource(String path) {_				if (SQLErrorCodesFactory.SQL_ERROR_CODE_OVERRIDE_PATH.equals(path)) {_					return new ClassPathResource("custom-error-codes.xml", SQLErrorCodesFactoryTests.class)__				}_				return null__			}_		}__		_		TestSQLErrorCodesFactory sf = new TestSQLErrorCodesFactory()__		assertEquals(1, sf.getErrorCodes("Oracle").getCustomTranslations().length)__		CustomSQLErrorCodesTranslation translation =_				sf.getErrorCodes("Oracle").getCustomTranslations()[0]__		assertEquals(CustomErrorCodeException.class, translation.getExceptionClass())__		assertEquals(1, translation.getErrorCodes().length)__	};check,that,custom,error,codes,take,precedence;test,public,void,test,find,custom,codes,class,test,sqlerror,codes,factory,extends,sqlerror,codes,factory,override,protected,resource,load,resource,string,path,if,sqlerror,codes,factory,equals,path,return,new,class,path,resource,custom,error,codes,xml,sqlerror,codes,factory,tests,class,return,null,test,sqlerror,codes,factory,sf,new,test,sqlerror,codes,factory,assert,equals,1,sf,get,error,codes,oracle,get,custom,translations,length,custom,sqlerror,codes,translation,translation,sf,get,error,codes,oracle,get,custom,translations,0,assert,equals,custom,error,code,exception,class,translation,get,exception,class,assert,equals,1,translation,get,error,codes,length
SQLErrorCodesFactoryTests -> @Test 	public void testFindCustomCodes();1363208506;Check that custom error codes take precedence.;@Test_	public void testFindCustomCodes() {_		class TestSQLErrorCodesFactory extends SQLErrorCodesFactory {_			@Override_			protected Resource loadResource(String path) {_				if (SQLErrorCodesFactory.SQL_ERROR_CODE_OVERRIDE_PATH.equals(path)) {_					return new ClassPathResource("custom-error-codes.xml", SQLErrorCodesFactoryTests.class)__				}_				return null__			}_		}__		_		TestSQLErrorCodesFactory sf = new TestSQLErrorCodesFactory()__		assertEquals(1, sf.getErrorCodes("Oracle").getCustomTranslations().length)__		CustomSQLErrorCodesTranslation translation =_				sf.getErrorCodes("Oracle").getCustomTranslations()[0]__		assertEquals(CustomErrorCodeException.class, translation.getExceptionClass())__		assertEquals(1, translation.getErrorCodes().length)__	};check,that,custom,error,codes,take,precedence;test,public,void,test,find,custom,codes,class,test,sqlerror,codes,factory,extends,sqlerror,codes,factory,override,protected,resource,load,resource,string,path,if,sqlerror,codes,factory,equals,path,return,new,class,path,resource,custom,error,codes,xml,sqlerror,codes,factory,tests,class,return,null,test,sqlerror,codes,factory,sf,new,test,sqlerror,codes,factory,assert,equals,1,sf,get,error,codes,oracle,get,custom,translations,length,custom,sqlerror,codes,translation,translation,sf,get,error,codes,oracle,get,custom,translations,0,assert,equals,custom,error,code,exception,class,translation,get,exception,class,assert,equals,1,translation,get,error,codes,length
SQLErrorCodesFactoryTests -> @Test 	public void testFindCustomCodes();1400168215;Check that custom error codes take precedence.;@Test_	public void testFindCustomCodes() {_		class TestSQLErrorCodesFactory extends SQLErrorCodesFactory {_			@Override_			protected Resource loadResource(String path) {_				if (SQLErrorCodesFactory.SQL_ERROR_CODE_OVERRIDE_PATH.equals(path)) {_					return new ClassPathResource("custom-error-codes.xml", SQLErrorCodesFactoryTests.class)__				}_				return null__			}_		}__		_		TestSQLErrorCodesFactory sf = new TestSQLErrorCodesFactory()__		assertEquals(1, sf.getErrorCodes("Oracle").getCustomTranslations().length)__		CustomSQLErrorCodesTranslation translation =_				sf.getErrorCodes("Oracle").getCustomTranslations()[0]__		assertEquals(CustomErrorCodeException.class, translation.getExceptionClass())__		assertEquals(1, translation.getErrorCodes().length)__	};check,that,custom,error,codes,take,precedence;test,public,void,test,find,custom,codes,class,test,sqlerror,codes,factory,extends,sqlerror,codes,factory,override,protected,resource,load,resource,string,path,if,sqlerror,codes,factory,equals,path,return,new,class,path,resource,custom,error,codes,xml,sqlerror,codes,factory,tests,class,return,null,test,sqlerror,codes,factory,sf,new,test,sqlerror,codes,factory,assert,equals,1,sf,get,error,codes,oracle,get,custom,translations,length,custom,sqlerror,codes,translation,translation,sf,get,error,codes,oracle,get,custom,translations,0,assert,equals,custom,error,code,exception,class,translation,get,exception,class,assert,equals,1,translation,get,error,codes,length
SQLErrorCodesFactoryTests -> @Test 	public void testFindCustomCodes();1413848647;Check that custom error codes take precedence.;@Test_	public void testFindCustomCodes() {_		class TestSQLErrorCodesFactory extends SQLErrorCodesFactory {_			@Override_			protected Resource loadResource(String path) {_				if (SQLErrorCodesFactory.SQL_ERROR_CODE_OVERRIDE_PATH.equals(path)) {_					return new ClassPathResource("custom-error-codes.xml", SQLErrorCodesFactoryTests.class)__				}_				return null__			}_		}__		_		TestSQLErrorCodesFactory sf = new TestSQLErrorCodesFactory()__		assertEquals(1, sf.getErrorCodes("Oracle").getCustomTranslations().length)__		CustomSQLErrorCodesTranslation translation =_				sf.getErrorCodes("Oracle").getCustomTranslations()[0]__		assertEquals(CustomErrorCodeException.class, translation.getExceptionClass())__		assertEquals(1, translation.getErrorCodes().length)__	};check,that,custom,error,codes,take,precedence;test,public,void,test,find,custom,codes,class,test,sqlerror,codes,factory,extends,sqlerror,codes,factory,override,protected,resource,load,resource,string,path,if,sqlerror,codes,factory,equals,path,return,new,class,path,resource,custom,error,codes,xml,sqlerror,codes,factory,tests,class,return,null,test,sqlerror,codes,factory,sf,new,test,sqlerror,codes,factory,assert,equals,1,sf,get,error,codes,oracle,get,custom,translations,length,custom,sqlerror,codes,translation,translation,sf,get,error,codes,oracle,get,custom,translations,0,assert,equals,custom,error,code,exception,class,translation,get,exception,class,assert,equals,1,translation,get,error,codes,length
SQLErrorCodesFactoryTests -> public void testFindCustomCodes();1328020251;Check that custom error codes take precedence.;public void testFindCustomCodes() {_		class TestSQLErrorCodesFactory extends SQLErrorCodesFactory {_			protected Resource loadResource(String path) {_				if (SQLErrorCodesFactory.SQL_ERROR_CODE_OVERRIDE_PATH.equals(path)) {_					return new ClassPathResource("custom-error-codes.xml", SQLErrorCodesFactoryTests.class)__				}_				return null__			}_		}_	_		_		TestSQLErrorCodesFactory sf = new TestSQLErrorCodesFactory()__		assertEquals(1, sf.getErrorCodes("Oracle").getCustomTranslations().length)__		CustomSQLErrorCodesTranslation translation =_				(CustomSQLErrorCodesTranslation) sf.getErrorCodes("Oracle").getCustomTranslations()[0]__		assertEquals(CustomErrorCodeException.class, translation.getExceptionClass())__		assertEquals(1, translation.getErrorCodes().length)__	};check,that,custom,error,codes,take,precedence;public,void,test,find,custom,codes,class,test,sqlerror,codes,factory,extends,sqlerror,codes,factory,protected,resource,load,resource,string,path,if,sqlerror,codes,factory,equals,path,return,new,class,path,resource,custom,error,codes,xml,sqlerror,codes,factory,tests,class,return,null,test,sqlerror,codes,factory,sf,new,test,sqlerror,codes,factory,assert,equals,1,sf,get,error,codes,oracle,get,custom,translations,length,custom,sqlerror,codes,translation,translation,custom,sqlerror,codes,translation,sf,get,error,codes,oracle,get,custom,translations,0,assert,equals,custom,error,code,exception,class,translation,get,exception,class,assert,equals,1,translation,get,error,codes,length
SQLErrorCodesFactoryTests -> public void testFindCustomCodes();1351100222;Check that custom error codes take precedence.;public void testFindCustomCodes() {_		class TestSQLErrorCodesFactory extends SQLErrorCodesFactory {_			protected Resource loadResource(String path) {_				if (SQLErrorCodesFactory.SQL_ERROR_CODE_OVERRIDE_PATH.equals(path)) {_					return new ClassPathResource("custom-error-codes.xml", SQLErrorCodesFactoryTests.class)__				}_				return null__			}_		}__		_		TestSQLErrorCodesFactory sf = new TestSQLErrorCodesFactory()__		assertEquals(1, sf.getErrorCodes("Oracle").getCustomTranslations().length)__		CustomSQLErrorCodesTranslation translation =_				(CustomSQLErrorCodesTranslation) sf.getErrorCodes("Oracle").getCustomTranslations()[0]__		assertEquals(CustomErrorCodeException.class, translation.getExceptionClass())__		assertEquals(1, translation.getErrorCodes().length)__	};check,that,custom,error,codes,take,precedence;public,void,test,find,custom,codes,class,test,sqlerror,codes,factory,extends,sqlerror,codes,factory,protected,resource,load,resource,string,path,if,sqlerror,codes,factory,equals,path,return,new,class,path,resource,custom,error,codes,xml,sqlerror,codes,factory,tests,class,return,null,test,sqlerror,codes,factory,sf,new,test,sqlerror,codes,factory,assert,equals,1,sf,get,error,codes,oracle,get,custom,translations,length,custom,sqlerror,codes,translation,translation,custom,sqlerror,codes,translation,sf,get,error,codes,oracle,get,custom,translations,0,assert,equals,custom,error,code,exception,class,translation,get,exception,class,assert,equals,1,translation,get,error,codes,length
SQLErrorCodesFactoryTests -> public void testFindCustomCodes();1351100351;Check that custom error codes take precedence.;public void testFindCustomCodes() {_		class TestSQLErrorCodesFactory extends SQLErrorCodesFactory {_			protected Resource loadResource(String path) {_				if (SQLErrorCodesFactory.SQL_ERROR_CODE_OVERRIDE_PATH.equals(path)) {_					return new ClassPathResource("custom-error-codes.xml", SQLErrorCodesFactoryTests.class)__				}_				return null__			}_		}__		_		TestSQLErrorCodesFactory sf = new TestSQLErrorCodesFactory()__		assertEquals(1, sf.getErrorCodes("Oracle").getCustomTranslations().length)__		CustomSQLErrorCodesTranslation translation =_				(CustomSQLErrorCodesTranslation) sf.getErrorCodes("Oracle").getCustomTranslations()[0]__		assertEquals(CustomErrorCodeException.class, translation.getExceptionClass())__		assertEquals(1, translation.getErrorCodes().length)__	};check,that,custom,error,codes,take,precedence;public,void,test,find,custom,codes,class,test,sqlerror,codes,factory,extends,sqlerror,codes,factory,protected,resource,load,resource,string,path,if,sqlerror,codes,factory,equals,path,return,new,class,path,resource,custom,error,codes,xml,sqlerror,codes,factory,tests,class,return,null,test,sqlerror,codes,factory,sf,new,test,sqlerror,codes,factory,assert,equals,1,sf,get,error,codes,oracle,get,custom,translations,length,custom,sqlerror,codes,translation,translation,custom,sqlerror,codes,translation,sf,get,error,codes,oracle,get,custom,translations,0,assert,equals,custom,error,code,exception,class,translation,get,exception,class,assert,equals,1,translation,get,error,codes,length
SQLErrorCodesFactoryTests -> public void testFindCustomCodes();1351149687;Check that custom error codes take precedence.;public void testFindCustomCodes() {_		class TestSQLErrorCodesFactory extends SQLErrorCodesFactory {_			protected Resource loadResource(String path) {_				if (SQLErrorCodesFactory.SQL_ERROR_CODE_OVERRIDE_PATH.equals(path)) {_					return new ClassPathResource("custom-error-codes.xml", SQLErrorCodesFactoryTests.class)__				}_				return null__			}_		}__		_		TestSQLErrorCodesFactory sf = new TestSQLErrorCodesFactory()__		assertEquals(1, sf.getErrorCodes("Oracle").getCustomTranslations().length)__		CustomSQLErrorCodesTranslation translation =_				(CustomSQLErrorCodesTranslation) sf.getErrorCodes("Oracle").getCustomTranslations()[0]__		assertEquals(CustomErrorCodeException.class, translation.getExceptionClass())__		assertEquals(1, translation.getErrorCodes().length)__	};check,that,custom,error,codes,take,precedence;public,void,test,find,custom,codes,class,test,sqlerror,codes,factory,extends,sqlerror,codes,factory,protected,resource,load,resource,string,path,if,sqlerror,codes,factory,equals,path,return,new,class,path,resource,custom,error,codes,xml,sqlerror,codes,factory,tests,class,return,null,test,sqlerror,codes,factory,sf,new,test,sqlerror,codes,factory,assert,equals,1,sf,get,error,codes,oracle,get,custom,translations,length,custom,sqlerror,codes,translation,translation,custom,sqlerror,codes,translation,sf,get,error,codes,oracle,get,custom,translations,0,assert,equals,custom,error,code,exception,class,translation,get,exception,class,assert,equals,1,translation,get,error,codes,length
SQLErrorCodesFactoryTests -> public void testFindCustomCodes();1351862317;Check that custom error codes take precedence.;public void testFindCustomCodes() {_		class TestSQLErrorCodesFactory extends SQLErrorCodesFactory {_			protected Resource loadResource(String path) {_				if (SQLErrorCodesFactory.SQL_ERROR_CODE_OVERRIDE_PATH.equals(path)) {_					return new ClassPathResource("custom-error-codes.xml", SQLErrorCodesFactoryTests.class)__				}_				return null__			}_		}__		_		TestSQLErrorCodesFactory sf = new TestSQLErrorCodesFactory()__		assertEquals(1, sf.getErrorCodes("Oracle").getCustomTranslations().length)__		CustomSQLErrorCodesTranslation translation =_				(CustomSQLErrorCodesTranslation) sf.getErrorCodes("Oracle").getCustomTranslations()[0]__		assertEquals(CustomErrorCodeException.class, translation.getExceptionClass())__		assertEquals(1, translation.getErrorCodes().length)__	};check,that,custom,error,codes,take,precedence;public,void,test,find,custom,codes,class,test,sqlerror,codes,factory,extends,sqlerror,codes,factory,protected,resource,load,resource,string,path,if,sqlerror,codes,factory,equals,path,return,new,class,path,resource,custom,error,codes,xml,sqlerror,codes,factory,tests,class,return,null,test,sqlerror,codes,factory,sf,new,test,sqlerror,codes,factory,assert,equals,1,sf,get,error,codes,oracle,get,custom,translations,length,custom,sqlerror,codes,translation,translation,custom,sqlerror,codes,translation,sf,get,error,codes,oracle,get,custom,translations,0,assert,equals,custom,error,code,exception,class,translation,get,exception,class,assert,equals,1,translation,get,error,codes,length
SQLErrorCodesFactoryTests -> public void testDefaultInstanceWithOracle();1328020251;Check that a known database produces recognizable codes.;public void testDefaultInstanceWithOracle() {_		SQLErrorCodes sec = SQLErrorCodesFactory.getInstance().getErrorCodes("Oracle")__		assertIsOracle(sec)__	};check,that,a,known,database,produces,recognizable,codes;public,void,test,default,instance,with,oracle,sqlerror,codes,sec,sqlerror,codes,factory,get,instance,get,error,codes,oracle,assert,is,oracle,sec
SQLErrorCodesFactoryTests -> public void testDefaultInstanceWithOracle();1351100222;Check that a known database produces recognizable codes.;public void testDefaultInstanceWithOracle() {_		SQLErrorCodes sec = SQLErrorCodesFactory.getInstance().getErrorCodes("Oracle")__		assertIsOracle(sec)__	};check,that,a,known,database,produces,recognizable,codes;public,void,test,default,instance,with,oracle,sqlerror,codes,sec,sqlerror,codes,factory,get,instance,get,error,codes,oracle,assert,is,oracle,sec
SQLErrorCodesFactoryTests -> public void testDefaultInstanceWithOracle();1351100351;Check that a known database produces recognizable codes.;public void testDefaultInstanceWithOracle() {_		SQLErrorCodes sec = SQLErrorCodesFactory.getInstance().getErrorCodes("Oracle")__		assertIsOracle(sec)__	};check,that,a,known,database,produces,recognizable,codes;public,void,test,default,instance,with,oracle,sqlerror,codes,sec,sqlerror,codes,factory,get,instance,get,error,codes,oracle,assert,is,oracle,sec
SQLErrorCodesFactoryTests -> public void testDefaultInstanceWithOracle();1351149687;Check that a known database produces recognizable codes.;public void testDefaultInstanceWithOracle() {_		SQLErrorCodes sec = SQLErrorCodesFactory.getInstance().getErrorCodes("Oracle")__		assertIsOracle(sec)__	};check,that,a,known,database,produces,recognizable,codes;public,void,test,default,instance,with,oracle,sqlerror,codes,sec,sqlerror,codes,factory,get,instance,get,error,codes,oracle,assert,is,oracle,sec
SQLErrorCodesFactoryTests -> public void testDefaultInstanceWithOracle();1351862317;Check that a known database produces recognizable codes.;public void testDefaultInstanceWithOracle() {_		SQLErrorCodes sec = SQLErrorCodesFactory.getInstance().getErrorCodes("Oracle")__		assertIsOracle(sec)__	};check,that,a,known,database,produces,recognizable,codes;public,void,test,default,instance,with,oracle,sqlerror,codes,sec,sqlerror,codes,factory,get,instance,get,error,codes,oracle,assert,is,oracle,sec
SQLErrorCodesFactoryTests -> public void testWildCardNameRecognized() throws Exception;1328020251;Check that wild card database name works.;public void testWildCardNameRecognized() throws Exception {_		class WildcardSQLErrorCodesFactory extends SQLErrorCodesFactory {_			protected Resource loadResource(String path) {_				if (SQLErrorCodesFactory.SQL_ERROR_CODE_OVERRIDE_PATH.equals(path)) {_					return new ClassPathResource("wildcard-error-codes.xml", SQLErrorCodesFactoryTests.class)__				}_				return null__			}_		}_	_		WildcardSQLErrorCodesFactory factory = new WildcardSQLErrorCodesFactory()__		SQLErrorCodes sec = getErrorCodesFromDataSource("DB2", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB2 UDB for Xxxxx", factory)__		assertIsDB2(sec)__		_		sec = getErrorCodesFromDataSource("DB3", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB3/", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB3", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB3", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB3/", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB-3", factory)__		assertIsEmpty(sec)___		sec = getErrorCodesFromDataSource("DB1", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB1/", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB1", factory)__		assertIsEmpty(sec)__		sec = getErrorCodesFromDataSource("/DB1/", factory)__		assertIsEmpty(sec)___		sec = getErrorCodesFromDataSource("DB0", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB0", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB0/", factory)__		assertIsEmpty(sec)__		sec = getErrorCodesFromDataSource("/DB0/", factory)__		assertIsEmpty(sec)__	};check,that,wild,card,database,name,works;public,void,test,wild,card,name,recognized,throws,exception,class,wildcard,sqlerror,codes,factory,extends,sqlerror,codes,factory,protected,resource,load,resource,string,path,if,sqlerror,codes,factory,equals,path,return,new,class,path,resource,wildcard,error,codes,xml,sqlerror,codes,factory,tests,class,return,null,wildcard,sqlerror,codes,factory,factory,new,wildcard,sqlerror,codes,factory,sqlerror,codes,sec,get,error,codes,from,data,source,db2,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db2,udb,for,xxxxx,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db,3,factory,assert,is,empty,sec,sec,get,error,codes,from,data,source,db1,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db1,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db1,factory,assert,is,empty,sec,sec,get,error,codes,from,data,source,db1,factory,assert,is,empty,sec,sec,get,error,codes,from,data,source,db0,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db0,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db0,factory,assert,is,empty,sec,sec,get,error,codes,from,data,source,db0,factory,assert,is,empty,sec
SQLErrorCodesFactoryTests -> public void testWildCardNameRecognized() throws Exception;1351100222;Check that wild card database name works.;public void testWildCardNameRecognized() throws Exception {_		class WildcardSQLErrorCodesFactory extends SQLErrorCodesFactory {_			protected Resource loadResource(String path) {_				if (SQLErrorCodesFactory.SQL_ERROR_CODE_OVERRIDE_PATH.equals(path)) {_					return new ClassPathResource("wildcard-error-codes.xml", SQLErrorCodesFactoryTests.class)__				}_				return null__			}_		}__		WildcardSQLErrorCodesFactory factory = new WildcardSQLErrorCodesFactory()__		SQLErrorCodes sec = getErrorCodesFromDataSource("DB2", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB2 UDB for Xxxxx", factory)__		assertIsDB2(sec)___		sec = getErrorCodesFromDataSource("DB3", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB3/", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB3", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB3", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB3/", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB-3", factory)__		assertIsEmpty(sec)___		sec = getErrorCodesFromDataSource("DB1", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB1/", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB1", factory)__		assertIsEmpty(sec)__		sec = getErrorCodesFromDataSource("/DB1/", factory)__		assertIsEmpty(sec)___		sec = getErrorCodesFromDataSource("DB0", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB0", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB0/", factory)__		assertIsEmpty(sec)__		sec = getErrorCodesFromDataSource("/DB0/", factory)__		assertIsEmpty(sec)__	};check,that,wild,card,database,name,works;public,void,test,wild,card,name,recognized,throws,exception,class,wildcard,sqlerror,codes,factory,extends,sqlerror,codes,factory,protected,resource,load,resource,string,path,if,sqlerror,codes,factory,equals,path,return,new,class,path,resource,wildcard,error,codes,xml,sqlerror,codes,factory,tests,class,return,null,wildcard,sqlerror,codes,factory,factory,new,wildcard,sqlerror,codes,factory,sqlerror,codes,sec,get,error,codes,from,data,source,db2,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db2,udb,for,xxxxx,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db,3,factory,assert,is,empty,sec,sec,get,error,codes,from,data,source,db1,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db1,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db1,factory,assert,is,empty,sec,sec,get,error,codes,from,data,source,db1,factory,assert,is,empty,sec,sec,get,error,codes,from,data,source,db0,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db0,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db0,factory,assert,is,empty,sec,sec,get,error,codes,from,data,source,db0,factory,assert,is,empty,sec
SQLErrorCodesFactoryTests -> public void testWildCardNameRecognized() throws Exception;1351100351;Check that wild card database name works.;public void testWildCardNameRecognized() throws Exception {_		class WildcardSQLErrorCodesFactory extends SQLErrorCodesFactory {_			protected Resource loadResource(String path) {_				if (SQLErrorCodesFactory.SQL_ERROR_CODE_OVERRIDE_PATH.equals(path)) {_					return new ClassPathResource("wildcard-error-codes.xml", SQLErrorCodesFactoryTests.class)__				}_				return null__			}_		}__		WildcardSQLErrorCodesFactory factory = new WildcardSQLErrorCodesFactory()__		SQLErrorCodes sec = getErrorCodesFromDataSource("DB2", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB2 UDB for Xxxxx", factory)__		assertIsDB2(sec)___		sec = getErrorCodesFromDataSource("DB3", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB3/", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB3", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB3", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB3/", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB-3", factory)__		assertIsEmpty(sec)___		sec = getErrorCodesFromDataSource("DB1", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB1/", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB1", factory)__		assertIsEmpty(sec)__		sec = getErrorCodesFromDataSource("/DB1/", factory)__		assertIsEmpty(sec)___		sec = getErrorCodesFromDataSource("DB0", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB0", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB0/", factory)__		assertIsEmpty(sec)__		sec = getErrorCodesFromDataSource("/DB0/", factory)__		assertIsEmpty(sec)__	};check,that,wild,card,database,name,works;public,void,test,wild,card,name,recognized,throws,exception,class,wildcard,sqlerror,codes,factory,extends,sqlerror,codes,factory,protected,resource,load,resource,string,path,if,sqlerror,codes,factory,equals,path,return,new,class,path,resource,wildcard,error,codes,xml,sqlerror,codes,factory,tests,class,return,null,wildcard,sqlerror,codes,factory,factory,new,wildcard,sqlerror,codes,factory,sqlerror,codes,sec,get,error,codes,from,data,source,db2,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db2,udb,for,xxxxx,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db,3,factory,assert,is,empty,sec,sec,get,error,codes,from,data,source,db1,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db1,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db1,factory,assert,is,empty,sec,sec,get,error,codes,from,data,source,db1,factory,assert,is,empty,sec,sec,get,error,codes,from,data,source,db0,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db0,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db0,factory,assert,is,empty,sec,sec,get,error,codes,from,data,source,db0,factory,assert,is,empty,sec
SQLErrorCodesFactoryTests -> public void testWildCardNameRecognized() throws Exception;1351149687;Check that wild card database name works.;public void testWildCardNameRecognized() throws Exception {_		class WildcardSQLErrorCodesFactory extends SQLErrorCodesFactory {_			protected Resource loadResource(String path) {_				if (SQLErrorCodesFactory.SQL_ERROR_CODE_OVERRIDE_PATH.equals(path)) {_					return new ClassPathResource("wildcard-error-codes.xml", SQLErrorCodesFactoryTests.class)__				}_				return null__			}_		}__		WildcardSQLErrorCodesFactory factory = new WildcardSQLErrorCodesFactory()__		SQLErrorCodes sec = getErrorCodesFromDataSource("DB2", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB2 UDB for Xxxxx", factory)__		assertIsDB2(sec)___		sec = getErrorCodesFromDataSource("DB3", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB3/", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB3", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB3", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB3/", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB-3", factory)__		assertIsEmpty(sec)___		sec = getErrorCodesFromDataSource("DB1", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB1/", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB1", factory)__		assertIsEmpty(sec)__		sec = getErrorCodesFromDataSource("/DB1/", factory)__		assertIsEmpty(sec)___		sec = getErrorCodesFromDataSource("DB0", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB0", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB0/", factory)__		assertIsEmpty(sec)__		sec = getErrorCodesFromDataSource("/DB0/", factory)__		assertIsEmpty(sec)__	};check,that,wild,card,database,name,works;public,void,test,wild,card,name,recognized,throws,exception,class,wildcard,sqlerror,codes,factory,extends,sqlerror,codes,factory,protected,resource,load,resource,string,path,if,sqlerror,codes,factory,equals,path,return,new,class,path,resource,wildcard,error,codes,xml,sqlerror,codes,factory,tests,class,return,null,wildcard,sqlerror,codes,factory,factory,new,wildcard,sqlerror,codes,factory,sqlerror,codes,sec,get,error,codes,from,data,source,db2,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db2,udb,for,xxxxx,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db,3,factory,assert,is,empty,sec,sec,get,error,codes,from,data,source,db1,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db1,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db1,factory,assert,is,empty,sec,sec,get,error,codes,from,data,source,db1,factory,assert,is,empty,sec,sec,get,error,codes,from,data,source,db0,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db0,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db0,factory,assert,is,empty,sec,sec,get,error,codes,from,data,source,db0,factory,assert,is,empty,sec
SQLErrorCodesFactoryTests -> public void testWildCardNameRecognized() throws Exception;1351862317;Check that wild card database name works.;public void testWildCardNameRecognized() throws Exception {_		class WildcardSQLErrorCodesFactory extends SQLErrorCodesFactory {_			protected Resource loadResource(String path) {_				if (SQLErrorCodesFactory.SQL_ERROR_CODE_OVERRIDE_PATH.equals(path)) {_					return new ClassPathResource("wildcard-error-codes.xml", SQLErrorCodesFactoryTests.class)__				}_				return null__			}_		}__		WildcardSQLErrorCodesFactory factory = new WildcardSQLErrorCodesFactory()__		SQLErrorCodes sec = getErrorCodesFromDataSource("DB2", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB2 UDB for Xxxxx", factory)__		assertIsDB2(sec)___		sec = getErrorCodesFromDataSource("DB3", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB3/", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB3", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB3", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB3/", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB-3", factory)__		assertIsEmpty(sec)___		sec = getErrorCodesFromDataSource("DB1", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB1/", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB1", factory)__		assertIsEmpty(sec)__		sec = getErrorCodesFromDataSource("/DB1/", factory)__		assertIsEmpty(sec)___		sec = getErrorCodesFromDataSource("DB0", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("/DB0", factory)__		assertIsDB2(sec)__		sec = getErrorCodesFromDataSource("DB0/", factory)__		assertIsEmpty(sec)__		sec = getErrorCodesFromDataSource("/DB0/", factory)__		assertIsEmpty(sec)__	};check,that,wild,card,database,name,works;public,void,test,wild,card,name,recognized,throws,exception,class,wildcard,sqlerror,codes,factory,extends,sqlerror,codes,factory,protected,resource,load,resource,string,path,if,sqlerror,codes,factory,equals,path,return,new,class,path,resource,wildcard,error,codes,xml,sqlerror,codes,factory,tests,class,return,null,wildcard,sqlerror,codes,factory,factory,new,wildcard,sqlerror,codes,factory,sqlerror,codes,sec,get,error,codes,from,data,source,db2,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db2,udb,for,xxxxx,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db3,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db,3,factory,assert,is,empty,sec,sec,get,error,codes,from,data,source,db1,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db1,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db1,factory,assert,is,empty,sec,sec,get,error,codes,from,data,source,db1,factory,assert,is,empty,sec,sec,get,error,codes,from,data,source,db0,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db0,factory,assert,is,db2,sec,sec,get,error,codes,from,data,source,db0,factory,assert,is,empty,sec,sec,get,error,codes,from,data,source,db0,factory,assert,is,empty,sec
SQLErrorCodesFactoryTests -> @Test 	public void testDefaultInstanceWithNoSuchDatabase();1356735495;Check that a default instance returns empty error codes for an unknown database.;@Test_	public void testDefaultInstanceWithNoSuchDatabase() {_		SQLErrorCodes sec = SQLErrorCodesFactory.getInstance().getErrorCodes("xx")__		assertTrue(sec.getBadSqlGrammarCodes().length == 0)__		assertTrue(sec.getDataIntegrityViolationCodes().length == 0)__	};check,that,a,default,instance,returns,empty,error,codes,for,an,unknown,database;test,public,void,test,default,instance,with,no,such,database,sqlerror,codes,sec,sqlerror,codes,factory,get,instance,get,error,codes,xx,assert,true,sec,get,bad,sql,grammar,codes,length,0,assert,true,sec,get,data,integrity,violation,codes,length,0
SQLErrorCodesFactoryTests -> @Test 	public void testDefaultInstanceWithNoSuchDatabase();1363208506;Check that a default instance returns empty error codes for an unknown database.;@Test_	public void testDefaultInstanceWithNoSuchDatabase() {_		SQLErrorCodes sec = SQLErrorCodesFactory.getInstance().getErrorCodes("xx")__		assertTrue(sec.getBadSqlGrammarCodes().length == 0)__		assertTrue(sec.getDataIntegrityViolationCodes().length == 0)__	};check,that,a,default,instance,returns,empty,error,codes,for,an,unknown,database;test,public,void,test,default,instance,with,no,such,database,sqlerror,codes,sec,sqlerror,codes,factory,get,instance,get,error,codes,xx,assert,true,sec,get,bad,sql,grammar,codes,length,0,assert,true,sec,get,data,integrity,violation,codes,length,0
SQLErrorCodesFactoryTests -> @Test 	public void testDefaultInstanceWithNoSuchDatabase();1400168215;Check that a default instance returns empty error codes for an unknown database.;@Test_	public void testDefaultInstanceWithNoSuchDatabase() {_		SQLErrorCodes sec = SQLErrorCodesFactory.getInstance().getErrorCodes("xx")__		assertTrue(sec.getBadSqlGrammarCodes().length == 0)__		assertTrue(sec.getDataIntegrityViolationCodes().length == 0)__	};check,that,a,default,instance,returns,empty,error,codes,for,an,unknown,database;test,public,void,test,default,instance,with,no,such,database,sqlerror,codes,sec,sqlerror,codes,factory,get,instance,get,error,codes,xx,assert,true,sec,get,bad,sql,grammar,codes,length,0,assert,true,sec,get,data,integrity,violation,codes,length,0
SQLErrorCodesFactoryTests -> @Test 	public void testDefaultInstanceWithNoSuchDatabase();1413848647;Check that a default instance returns empty error codes for an unknown database.;@Test_	public void testDefaultInstanceWithNoSuchDatabase() {_		SQLErrorCodes sec = SQLErrorCodesFactory.getInstance().getErrorCodes("xx")__		assertTrue(sec.getBadSqlGrammarCodes().length == 0)__		assertTrue(sec.getDataIntegrityViolationCodes().length == 0)__	};check,that,a,default,instance,returns,empty,error,codes,for,an,unknown,database;test,public,void,test,default,instance,with,no,such,database,sqlerror,codes,sec,sqlerror,codes,factory,get,instance,get,error,codes,xx,assert,true,sec,get,bad,sql,grammar,codes,length,0,assert,true,sec,get,data,integrity,violation,codes,length,0
