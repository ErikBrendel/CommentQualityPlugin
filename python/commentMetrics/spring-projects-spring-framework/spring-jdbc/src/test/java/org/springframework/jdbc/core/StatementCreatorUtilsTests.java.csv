commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setUp() {     preparedStatement = mock(PreparedStatement.class). }
false;public;0;5;;@Test public void testSetParameterValueWithNullAndType() throws SQLException {     StatementCreatorUtils.setParameterValue(preparedStatement, 1, Types.VARCHAR, null, null).     verify(preparedStatement).setNull(1, Types.VARCHAR). }
false;public;0;5;;@Test public void testSetParameterValueWithNullAndTypeName() throws SQLException {     StatementCreatorUtils.setParameterValue(preparedStatement, 1, Types.VARCHAR, "mytype", null).     verify(preparedStatement).setNull(1, Types.VARCHAR, "mytype"). }
false;public;0;13;;@Test public void testSetParameterValueWithNullAndUnknownType() throws SQLException {     StatementCreatorUtils.shouldIgnoreGetParameterType = true.     Connection con = mock(Connection.class).     DatabaseMetaData dbmd = mock(DatabaseMetaData.class).     given(preparedStatement.getConnection()).willReturn(con).     given(dbmd.getDatabaseProductName()).willReturn("Oracle").     given(dbmd.getDriverName()).willReturn("Oracle Driver").     given(con.getMetaData()).willReturn(dbmd).     StatementCreatorUtils.setParameterValue(preparedStatement, 1, SqlTypeValue.TYPE_UNKNOWN, null, null).     verify(preparedStatement).setNull(1, Types.NULL).     StatementCreatorUtils.shouldIgnoreGetParameterType = false. }
false;public;0;15;;@Test public void testSetParameterValueWithNullAndUnknownTypeOnInformix() throws SQLException {     StatementCreatorUtils.shouldIgnoreGetParameterType = true.     Connection con = mock(Connection.class).     DatabaseMetaData dbmd = mock(DatabaseMetaData.class).     given(preparedStatement.getConnection()).willReturn(con).     given(con.getMetaData()).willReturn(dbmd).     given(dbmd.getDatabaseProductName()).willReturn("Informix Dynamic Server").     given(dbmd.getDriverName()).willReturn("Informix Driver").     StatementCreatorUtils.setParameterValue(preparedStatement, 1, SqlTypeValue.TYPE_UNKNOWN, null, null).     verify(dbmd).getDatabaseProductName().     verify(dbmd).getDriverName().     verify(preparedStatement).setObject(1, null).     StatementCreatorUtils.shouldIgnoreGetParameterType = false. }
false;public;0;15;;@Test public void testSetParameterValueWithNullAndUnknownTypeOnDerbyEmbedded() throws SQLException {     StatementCreatorUtils.shouldIgnoreGetParameterType = true.     Connection con = mock(Connection.class).     DatabaseMetaData dbmd = mock(DatabaseMetaData.class).     given(preparedStatement.getConnection()).willReturn(con).     given(con.getMetaData()).willReturn(dbmd).     given(dbmd.getDatabaseProductName()).willReturn("Apache Derby").     given(dbmd.getDriverName()).willReturn("Apache Derby Embedded Driver").     StatementCreatorUtils.setParameterValue(preparedStatement, 1, SqlTypeValue.TYPE_UNKNOWN, null, null).     verify(dbmd).getDatabaseProductName().     verify(dbmd).getDriverName().     verify(preparedStatement).setNull(1, Types.VARCHAR).     StatementCreatorUtils.shouldIgnoreGetParameterType = false. }
false;public;0;10;;@Test public void testSetParameterValueWithNullAndGetParameterTypeWorking() throws SQLException {     ParameterMetaData pmd = mock(ParameterMetaData.class).     given(preparedStatement.getParameterMetaData()).willReturn(pmd).     given(pmd.getParameterType(1)).willReturn(Types.SMALLINT).     StatementCreatorUtils.setParameterValue(preparedStatement, 1, SqlTypeValue.TYPE_UNKNOWN, null, null).     verify(pmd).getParameterType(1).     verify(preparedStatement, never()).getConnection().     verify(preparedStatement).setNull(1, Types.SMALLINT). }
false;public;0;5;;@Test public void testSetParameterValueWithString() throws SQLException {     StatementCreatorUtils.setParameterValue(preparedStatement, 1, Types.VARCHAR, null, "test").     verify(preparedStatement).setString(1, "test"). }
false;public;0;5;;@Test public void testSetParameterValueWithStringAndSpecialType() throws SQLException {     StatementCreatorUtils.setParameterValue(preparedStatement, 1, Types.CHAR, null, "test").     verify(preparedStatement).setObject(1, "test", Types.CHAR). }
false;public;0;4;;@Test public void testSetParameterValueWithStringAndUnknownType() throws SQLException {     StatementCreatorUtils.setParameterValue(preparedStatement, 1, SqlTypeValue.TYPE_UNKNOWN, null, "test").     verify(preparedStatement).setString(1, "test"). }
false;public;0;6;;@Test public void testSetParameterValueWithSqlDate() throws SQLException {     java.sql.Date date = new java.sql.Date(1000).     StatementCreatorUtils.setParameterValue(preparedStatement, 1, Types.DATE, null, date).     verify(preparedStatement).setDate(1, date). }
false;public;0;6;;@Test public void testSetParameterValueWithDateAndUtilDate() throws SQLException {     java.util.Date date = new java.util.Date(1000).     StatementCreatorUtils.setParameterValue(preparedStatement, 1, Types.DATE, null, date).     verify(preparedStatement).setDate(1, new java.sql.Date(1000)). }
false;public;0;6;;@Test public void testSetParameterValueWithDateAndCalendar() throws SQLException {     java.util.Calendar cal = new GregorianCalendar().     StatementCreatorUtils.setParameterValue(preparedStatement, 1, Types.DATE, null, cal).     verify(preparedStatement).setDate(1, new java.sql.Date(cal.getTime().getTime()), cal). }
false;public;0;6;;@Test public void testSetParameterValueWithSqlTime() throws SQLException {     java.sql.Time time = new java.sql.Time(1000).     StatementCreatorUtils.setParameterValue(preparedStatement, 1, Types.TIME, null, time).     verify(preparedStatement).setTime(1, time). }
false;public;0;6;;@Test public void testSetParameterValueWithTimeAndUtilDate() throws SQLException {     java.util.Date date = new java.util.Date(1000).     StatementCreatorUtils.setParameterValue(preparedStatement, 1, Types.TIME, null, date).     verify(preparedStatement).setTime(1, new java.sql.Time(1000)). }
false;public;0;6;;@Test public void testSetParameterValueWithTimeAndCalendar() throws SQLException {     java.util.Calendar cal = new GregorianCalendar().     StatementCreatorUtils.setParameterValue(preparedStatement, 1, Types.TIME, null, cal).     verify(preparedStatement).setTime(1, new java.sql.Time(cal.getTime().getTime()), cal). }
false;public;0;6;;@Test public void testSetParameterValueWithSqlTimestamp() throws SQLException {     java.sql.Timestamp timestamp = new java.sql.Timestamp(1000).     StatementCreatorUtils.setParameterValue(preparedStatement, 1, Types.TIMESTAMP, null, timestamp).     verify(preparedStatement).setTimestamp(1, timestamp). }
false;public;0;6;;@Test public void testSetParameterValueWithTimestampAndUtilDate() throws SQLException {     java.util.Date date = new java.util.Date(1000).     StatementCreatorUtils.setParameterValue(preparedStatement, 1, Types.TIMESTAMP, null, date).     verify(preparedStatement).setTimestamp(1, new java.sql.Timestamp(1000)). }
false;public;0;6;;@Test public void testSetParameterValueWithTimestampAndCalendar() throws SQLException {     java.util.Calendar cal = new GregorianCalendar().     StatementCreatorUtils.setParameterValue(preparedStatement, 1, Types.TIMESTAMP, null, cal).     verify(preparedStatement).setTimestamp(1, new java.sql.Timestamp(cal.getTime().getTime()), cal). }
false;public;0;6;;@Test public void testSetParameterValueWithDateAndUnknownType() throws SQLException {     java.util.Date date = new java.util.Date(1000).     StatementCreatorUtils.setParameterValue(preparedStatement, 1, SqlTypeValue.TYPE_UNKNOWN, null, date).     verify(preparedStatement).setTimestamp(1, new java.sql.Timestamp(1000)). }
false;public;0;6;;@Test public void testSetParameterValueWithCalendarAndUnknownType() throws SQLException {     java.util.Calendar cal = new GregorianCalendar().     StatementCreatorUtils.setParameterValue(preparedStatement, 1, SqlTypeValue.TYPE_UNKNOWN, null, cal).     verify(preparedStatement).setTimestamp(1, new java.sql.Timestamp(cal.getTime().getTime()), cal). }
false;public;0;10;;// SPR-8571 @Test public void testSetParameterValueWithStringAndVendorSpecificType() throws SQLException {     Connection con = mock(Connection.class).     DatabaseMetaData dbmd = mock(DatabaseMetaData.class).     given(preparedStatement.getConnection()).willReturn(con).     given(dbmd.getDatabaseProductName()).willReturn("Oracle").     given(con.getMetaData()).willReturn(dbmd).     StatementCreatorUtils.setParameterValue(preparedStatement, 1, Types.OTHER, null, "test").     verify(preparedStatement).setString(1, "test"). }
false;public;0;13;;// SPR-8571 @Test public void testSetParameterValueWithNullAndVendorSpecificType() throws SQLException {     StatementCreatorUtils.shouldIgnoreGetParameterType = true.     Connection con = mock(Connection.class).     DatabaseMetaData dbmd = mock(DatabaseMetaData.class).     given(preparedStatement.getConnection()).willReturn(con).     given(dbmd.getDatabaseProductName()).willReturn("Oracle").     given(dbmd.getDriverName()).willReturn("Oracle Driver").     given(con.getMetaData()).willReturn(dbmd).     StatementCreatorUtils.setParameterValue(preparedStatement, 1, Types.OTHER, null, null).     verify(preparedStatement).setNull(1, Types.NULL).     StatementCreatorUtils.shouldIgnoreGetParameterType = false. }
