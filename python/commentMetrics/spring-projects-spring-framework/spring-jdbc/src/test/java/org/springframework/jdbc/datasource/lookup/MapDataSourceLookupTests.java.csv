commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test @SuppressWarnings({ "unchecked", "rawtypes" }) public void getDataSourcesReturnsUnmodifiableMap() throws Exception {     MapDataSourceLookup lookup = new MapDataSourceLookup().     Map dataSources = lookup.getDataSources().     exception.expect(UnsupportedOperationException.class).     dataSources.put("", ""). }
false;public;0;11;;@Test public void lookupSunnyDay() throws Exception {     Map<String, DataSource> dataSources = new HashMap<>().     StubDataSource expectedDataSource = new StubDataSource().     dataSources.put(DATA_SOURCE_NAME, expectedDataSource).     MapDataSourceLookup lookup = new MapDataSourceLookup().     lookup.setDataSources(dataSources).     DataSource dataSource = lookup.getDataSource(DATA_SOURCE_NAME).     assertNotNull("A DataSourceLookup implementation must *never* return null from getDataSource(): this one obviously (and incorrectly) is", dataSource).     assertSame(expectedDataSource, dataSource). }
false;public;0;12;;@Test public void setDataSourcesIsAnIdempotentOperation() throws Exception {     Map<String, DataSource> dataSources = new HashMap<>().     StubDataSource expectedDataSource = new StubDataSource().     dataSources.put(DATA_SOURCE_NAME, expectedDataSource).     MapDataSourceLookup lookup = new MapDataSourceLookup().     lookup.setDataSources(dataSources).     // must be idempotent (i.e. the following lookup must still work).     lookup.setDataSources(null).     DataSource dataSource = lookup.getDataSource(DATA_SOURCE_NAME).     assertNotNull("A DataSourceLookup implementation must *never* return null from getDataSource(): this one obviously (and incorrectly) is", dataSource).     assertSame(expectedDataSource, dataSource). }
false;public;0;13;;@Test public void addingDataSourcePermitsOverride() throws Exception {     Map<String, DataSource> dataSources = new HashMap<>().     StubDataSource overridenDataSource = new StubDataSource().     StubDataSource expectedDataSource = new StubDataSource().     dataSources.put(DATA_SOURCE_NAME, overridenDataSource).     MapDataSourceLookup lookup = new MapDataSourceLookup().     lookup.setDataSources(dataSources).     // must override existing entry     lookup.addDataSource(DATA_SOURCE_NAME, expectedDataSource).     DataSource dataSource = lookup.getDataSource(DATA_SOURCE_NAME).     assertNotNull("A DataSourceLookup implementation must *never* return null from getDataSource(): this one obviously (and incorrectly) is", dataSource).     assertSame(expectedDataSource, dataSource). }
false;public;0;10;;@Test @SuppressWarnings({ "unchecked", "rawtypes" }) public void getDataSourceWhereSuppliedMapHasNonDataSourceTypeUnderSpecifiedKey() throws Exception {     Map dataSources = new HashMap().     dataSources.put(DATA_SOURCE_NAME, new Object()).     MapDataSourceLookup lookup = new MapDataSourceLookup(dataSources).     exception.expect(ClassCastException.class).     lookup.getDataSource(DATA_SOURCE_NAME). }
false;public;0;7;;@Test public void getDataSourceWhereSuppliedMapHasNoEntryForSpecifiedKey() throws Exception {     MapDataSourceLookup lookup = new MapDataSourceLookup().     exception.expect(DataSourceLookupFailureException.class).     lookup.getDataSource(DATA_SOURCE_NAME). }
