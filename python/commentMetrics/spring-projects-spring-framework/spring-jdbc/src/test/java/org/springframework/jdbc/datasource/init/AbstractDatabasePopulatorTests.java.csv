commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void scriptWithSingleLineCommentsAndFailedDrop() throws Exception {     databasePopulator.addScript(resource("db-schema-failed-drop-comments.sql")).     databasePopulator.addScript(resource("db-test-data.sql")).     databasePopulator.setIgnoreFailedDrops(true).     DatabasePopulatorUtils.execute(databasePopulator, db).     assertTestDatabaseCreated(). }
false;public;0;7;;@Test public void scriptWithStandardEscapedLiteral() throws Exception {     databasePopulator.addScript(defaultSchema()).     databasePopulator.addScript(resource("db-test-data-escaped-literal.sql")).     DatabasePopulatorUtils.execute(databasePopulator, db).     assertTestDatabaseCreated("'Keith'"). }
false;public;0;7;;@Test public void scriptWithMySqlEscapedLiteral() throws Exception {     databasePopulator.addScript(defaultSchema()).     databasePopulator.addScript(resource("db-test-data-mysql-escaped-literal.sql")).     DatabasePopulatorUtils.execute(databasePopulator, db).     assertTestDatabaseCreated("\\$Keith\\$"). }
false;public;0;10;;@Test public void scriptWithMultipleStatements() throws Exception {     databasePopulator.addScript(defaultSchema()).     databasePopulator.addScript(resource("db-test-data-multiple.sql")).     DatabasePopulatorUtils.execute(databasePopulator, db).     assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Keith'", Integer.class), equalTo(1)).     assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Dave'", Integer.class), equalTo(1)). }
false;public;0;11;;@Test public void scriptWithMultipleStatementsAndLongSeparator() throws Exception {     databasePopulator.addScript(defaultSchema()).     databasePopulator.addScript(resource("db-test-data-endings.sql")).     databasePopulator.setSeparator("@@").     DatabasePopulatorUtils.execute(databasePopulator, db).     assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Keith'", Integer.class), equalTo(1)).     assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Dave'", Integer.class), equalTo(1)). }
false;public;0;11;;@Test public void scriptWithMultipleStatementsAndWhitespaceSeparator() throws Exception {     databasePopulator.addScript(defaultSchema()).     databasePopulator.addScript(resource("db-test-data-whitespace.sql")).     databasePopulator.setSeparator("/\n").     DatabasePopulatorUtils.execute(databasePopulator, db).     assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Keith'", Integer.class), equalTo(1)).     assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Dave'", Integer.class), equalTo(1)). }
false;public;0;10;;@Test public void scriptWithMultipleStatementsAndNewlineSeparator() throws Exception {     databasePopulator.addScript(defaultSchema()).     databasePopulator.addScript(resource("db-test-data-newline.sql")).     DatabasePopulatorUtils.execute(databasePopulator, db).     assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Keith'", Integer.class), equalTo(1)).     assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Dave'", Integer.class), equalTo(1)). }
false;public;0;11;;@Test public void scriptWithMultipleStatementsAndMultipleNewlineSeparator() throws Exception {     databasePopulator.addScript(defaultSchema()).     databasePopulator.addScript(resource("db-test-data-multi-newline.sql")).     databasePopulator.setSeparator("\n\n").     DatabasePopulatorUtils.execute(databasePopulator, db).     assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Keith'", Integer.class), equalTo(1)).     assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Dave'", Integer.class), equalTo(1)). }
false;public;0;7;;@Test public void scriptWithEolBetweenTokens() throws Exception {     databasePopulator.addScript(usersSchema()).     databasePopulator.addScript(resource("users-data.sql")).     DatabasePopulatorUtils.execute(databasePopulator, db).     assertUsersDatabaseCreated("Brannen"). }
false;public;0;7;;@Test public void scriptWithCommentsWithinStatements() throws Exception {     databasePopulator.addScript(usersSchema()).     databasePopulator.addScript(resource("users-data-with-comments.sql")).     DatabasePopulatorUtils.execute(databasePopulator, db).     assertUsersDatabaseCreated("Brannen", "Hoeller"). }
false;public;0;10;;@Test public void scriptWithoutStatementSeparator() throws Exception {     databasePopulator.setSeparator(ScriptUtils.EOF_STATEMENT_SEPARATOR).     databasePopulator.addScript(resource("drop-users-schema.sql")).     databasePopulator.addScript(resource("users-schema-without-separator.sql")).     databasePopulator.addScript(resource("users-data-without-separator.sql")).     DatabasePopulatorUtils.execute(databasePopulator, db).     assertUsersDatabaseCreated("Brannen"). }
false;public;0;7;;@Test public void constructorWithMultipleScriptResources() throws Exception {     final ResourceDatabasePopulator populator = new ResourceDatabasePopulator(usersSchema(), resource("users-data-with-comments.sql")).     DatabasePopulatorUtils.execute(populator, db).     assertUsersDatabaseCreated("Brannen", "Hoeller"). }
false;public;0;10;;@Test public void scriptWithSelectStatements() throws Exception {     databasePopulator.addScript(defaultSchema()).     databasePopulator.addScript(resource("db-test-data-select.sql")).     DatabasePopulatorUtils.execute(databasePopulator, db).     assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Keith'", Integer.class), equalTo(1)).     assertThat(jdbcTemplate.queryForObject("select COUNT(NAME) from T_TEST where NAME='Dave'", Integer.class), equalTo(1)). }
true;public;0;8;/**  * See SPR-9457  */ ;/**  * See SPR-9457  */ @Test public void usesBoundConnectionIfAvailable() throws SQLException {     TransactionSynchronizationManager.initSynchronization().     Connection connection = DataSourceUtils.getConnection(db).     DatabasePopulator populator = mock(DatabasePopulator.class).     DatabasePopulatorUtils.execute(populator, db).     verify(populator).populate(connection). }
true;public;0;6;/**  * See SPR-9781  */ ;/**  * See SPR-9781  */ @Test(timeout = 1000) public void executesHugeScriptInReasonableTime() throws SQLException {     databasePopulator.addScript(defaultSchema()).     databasePopulator.addScript(resource("db-test-data-huge.sql")).     DatabasePopulatorUtils.execute(databasePopulator, db). }
false;private;0;3;;private void assertTestDatabaseCreated() {     assertTestDatabaseCreated("Keith"). }
false;private;1;3;;private void assertTestDatabaseCreated(String name) {     assertEquals(name, jdbcTemplate.queryForObject("select NAME from T_TEST", String.class)). }
