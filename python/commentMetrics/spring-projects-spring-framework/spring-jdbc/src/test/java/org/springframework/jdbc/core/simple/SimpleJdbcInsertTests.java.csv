commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Before public void setUp() throws Exception {     connection = mock(Connection.class).     databaseMetaData = mock(DatabaseMetaData.class).     dataSource = mock(DataSource.class).     given(connection.getMetaData()).willReturn(databaseMetaData).     given(dataSource.getConnection()).willReturn(connection). }
false;public;0;4;;@After public void verifyClosed() throws Exception {     verify(connection).close(). }
false;public;0;21;;@Test public void testNoSuchTable() throws Exception {     ResultSet resultSet = mock(ResultSet.class).     given(resultSet.next()).willReturn(false).     given(databaseMetaData.getDatabaseProductName()).willReturn("MyDB").     given(databaseMetaData.getDatabaseProductName()).willReturn("MyDB").     given(databaseMetaData.getDatabaseProductVersion()).willReturn("1.0").     given(databaseMetaData.getUserName()).willReturn("me").     given(databaseMetaData.storesLowerCaseIdentifiers()).willReturn(true).     given(databaseMetaData.getTables(null, null, "x", null)).willReturn(resultSet).     SimpleJdbcInsert insert = new SimpleJdbcInsert(dataSource).withTableName("x").     // Shouldn't succeed in inserting into table which doesn't exist     thrown.expect(InvalidDataAccessApiUsageException.class).     try {         insert.execute(new HashMap<>()).     } finally {         verify(resultSet).close().     } }
