commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test(expected = IllegalArgumentException.class) public void testTranslateNullException() throws Exception {     new SQLStateSQLExceptionTranslator().translate("", "", null). }
false;public;0;4;;@Test public void testTranslateBadSqlGrammar() throws Exception {     doTest("07", BadSqlGrammarException.class). }
false;public;0;4;;@Test public void testTranslateDataIntegrityViolation() throws Exception {     doTest("23", DataIntegrityViolationException.class). }
false;public;0;4;;@Test public void testTranslateDataAccessResourceFailure() throws Exception {     doTest("53", DataAccessResourceFailureException.class). }
false;public;0;4;;@Test public void testTranslateTransientDataAccessResourceFailure() throws Exception {     doTest("S1", TransientDataAccessResourceException.class). }
false;public;0;4;;@Test public void testTranslateConcurrencyFailure() throws Exception {     doTest("40", ConcurrencyFailureException.class). }
false;public;0;4;;@Test public void testTranslateUncategorized() throws Exception {     doTest("00000000", UncategorizedSQLException.class). }
false;private;2;9;;private void doTest(String sqlState, Class<?> dataAccessExceptionType) {     SQLException ex = new SQLException(REASON, sqlState).     SQLExceptionTranslator translator = new SQLStateSQLExceptionTranslator().     DataAccessException dax = translator.translate(TASK, SQL, ex).     assertNotNull("Translation must *never* result in a null DataAccessException being returned.", dax).     assertEquals("Wrong DataAccessException type returned as the result of the translation", dataAccessExceptionType, dax.getClass()).     assertNotNull("The original SQLException must be preserved in the translated DataAccessException", dax.getCause()).     assertSame("The exact same original SQLException must be preserved in the translated DataAccessException", ex, dax.getCause()). }
