commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the name of the bean implementing MethodReplacer.  */ ;/**  * Return the name of the bean implementing MethodReplacer.  */ public String getMethodReplacerBeanName() {     return this.methodReplacerBeanName. }
true;public;1;3;/**  * Add a fragment of a class string, like "Exception"  * or "java.lang.Exc", to identify a parameter type.  * @param identifier a substring of the fully qualified class name  */ ;/**  * Add a fragment of a class string, like "Exception"  * or "java.lang.Exc", to identify a parameter type.  * @param identifier a substring of the fully qualified class name  */ public void addTypeIdentifier(String identifier) {     this.typeIdentifiers.add(identifier). }
false;public;1;22;;@Override public boolean matches(Method method) {     if (!method.getName().equals(getMethodName())) {         return false.     }     if (!isOverloaded()) {         // Not overloaded: don't worry about arg type matching...         return true.     }     // If we get here, we need to insist on precise argument matching...     if (this.typeIdentifiers.size() != method.getParameterCount()) {         return false.     }     Class<?>[] parameterTypes = method.getParameterTypes().     for (int i = 0. i < this.typeIdentifiers.size(). i++) {         String identifier = this.typeIdentifiers.get(i).         if (!parameterTypes[i].getName().contains(identifier)) {             return false.         }     }     return true. }
false;public;1;9;;@Override public boolean equals(Object other) {     if (!(other instanceof ReplaceOverride) || !super.equals(other)) {         return false.     }     ReplaceOverride that = (ReplaceOverride) other.     return (ObjectUtils.nullSafeEquals(this.methodReplacerBeanName, that.methodReplacerBeanName) && ObjectUtils.nullSafeEquals(this.typeIdentifiers, that.typeIdentifiers)). }
false;public;0;7;;@Override public int hashCode() {     int hashCode = super.hashCode().     hashCode = 29 * hashCode + ObjectUtils.nullSafeHashCode(this.methodReplacerBeanName).     hashCode = 29 * hashCode + ObjectUtils.nullSafeHashCode(this.typeIdentifiers).     return hashCode. }
false;public;0;4;;@Override public String toString() {     return "Replace override for method '" + getMethodName() + "'". }
