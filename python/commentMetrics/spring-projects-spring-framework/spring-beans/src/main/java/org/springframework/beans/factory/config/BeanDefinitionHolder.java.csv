commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the wrapped BeanDefinition.  */ ;/**  * Return the wrapped BeanDefinition.  */ public BeanDefinition getBeanDefinition() {     return this.beanDefinition. }
true;public;0;3;/**  * Return the primary name of the bean, as specified for the bean definition.  */ ;/**  * Return the primary name of the bean, as specified for the bean definition.  */ public String getBeanName() {     return this.beanName. }
true;public;0;4;/**  * Return the alias names for the bean, as specified directly for the bean definition.  * @return the array of alias names, or {@code null} if none  */ ;/**  * Return the alias names for the bean, as specified directly for the bean definition.  * @return the array of alias names, or {@code null} if none  */ @Nullable public String[] getAliases() {     return this.aliases. }
true;public;0;5;/**  * Expose the bean definition's source object.  * @see BeanDefinition#getSource()  */ ;/**  * Expose the bean definition's source object.  * @see BeanDefinition#getSource()  */ @Override @Nullable public Object getSource() {     return this.beanDefinition.getSource(). }
true;public;1;5;/**  * Determine whether the given candidate name matches the bean name  * or the aliases stored in this bean definition.  */ ;/**  * Determine whether the given candidate name matches the bean name  * or the aliases stored in this bean definition.  */ public boolean matchesName(@Nullable String candidateName) {     return (candidateName != null && (candidateName.equals(this.beanName) || candidateName.equals(BeanFactoryUtils.transformedBeanName(this.beanName)) || ObjectUtils.containsElement(this.aliases, candidateName))). }
true;public;0;8;/**  * Return a friendly, short description for the bean, stating name and aliases.  * @see #getBeanName()  * @see #getAliases()  */ ;/**  * Return a friendly, short description for the bean, stating name and aliases.  * @see #getBeanName()  * @see #getAliases()  */ public String getShortDescription() {     StringBuilder sb = new StringBuilder().     sb.append("Bean definition with name '").append(this.beanName).append("'").     if (this.aliases != null) {         sb.append(" and aliases [").append(StringUtils.arrayToCommaDelimitedString(this.aliases)).append("]").     }     return sb.toString(). }
true;public;0;5;/**  * Return a long description for the bean, including name and aliases  * as well as a description of the contained {@link BeanDefinition}.  * @see #getShortDescription()  * @see #getBeanDefinition()  */ ;/**  * Return a long description for the bean, including name and aliases  * as well as a description of the contained {@link BeanDefinition}.  * @see #getShortDescription()  * @see #getBeanDefinition()  */ public String getLongDescription() {     StringBuilder sb = new StringBuilder(getShortDescription()).     sb.append(": ").append(this.beanDefinition).     return sb.toString(). }
true;public;0;4;/**  * This implementation returns the long description. Can be overridden  * to return the short description or any kind of custom description instead.  * @see #getLongDescription()  * @see #getShortDescription()  */ ;/**  * This implementation returns the long description. Can be overridden  * to return the short description or any kind of custom description instead.  * @see #getLongDescription()  * @see #getShortDescription()  */ @Override public String toString() {     return getLongDescription(). }
false;public;1;13;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (!(other instanceof BeanDefinitionHolder)) {         return false.     }     BeanDefinitionHolder otherHolder = (BeanDefinitionHolder) other.     return this.beanDefinition.equals(otherHolder.beanDefinition) && this.beanName.equals(otherHolder.beanName) && ObjectUtils.nullSafeEquals(this.aliases, otherHolder.aliases). }
false;public;0;7;;@Override public int hashCode() {     int hashCode = this.beanDefinition.hashCode().     hashCode = 29 * hashCode + this.beanName.hashCode().     hashCode = 29 * hashCode + ObjectUtils.nullSafeHashCode(this.aliases).     return hashCode. }
