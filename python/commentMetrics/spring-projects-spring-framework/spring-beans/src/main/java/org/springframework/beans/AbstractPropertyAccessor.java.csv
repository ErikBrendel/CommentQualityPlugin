# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractPropertyAccessor -> protected AbstractPropertyAccessor(Object object, String nestedPath, Object rootObject);1432208995;Create new accessor for the given object,_registering a nested path that the object is in._@param object object wrapped by this accessor_@param nestedPath the nested path of the object_@param rootObject the root object at the top of the path;protected AbstractPropertyAccessor(Object object, String nestedPath, Object rootObject) {_		registerDefaultEditors()__		setWrappedInstance(object, nestedPath, rootObject)__	};create,new,accessor,for,the,given,object,registering,a,nested,path,that,the,object,is,in,param,object,object,wrapped,by,this,accessor,param,nested,path,the,nested,path,of,the,object,param,root,object,the,root,object,at,the,top,of,the,path;protected,abstract,property,accessor,object,object,string,nested,path,object,root,object,register,default,editors,set,wrapped,instance,object,nested,path,root,object
AbstractPropertyAccessor -> protected AbstractPropertyAccessor(Object object, String nestedPath, Object rootObject);1432223291;Create new accessor for the given object,_registering a nested path that the object is in._@param object object wrapped by this accessor_@param nestedPath the nested path of the object_@param rootObject the root object at the top of the path;protected AbstractPropertyAccessor(Object object, String nestedPath, Object rootObject) {_		registerDefaultEditors()__		setWrappedInstance(object, nestedPath, rootObject)__	};create,new,accessor,for,the,given,object,registering,a,nested,path,that,the,object,is,in,param,object,object,wrapped,by,this,accessor,param,nested,path,the,nested,path,of,the,object,param,root,object,the,root,object,at,the,top,of,the,path;protected,abstract,property,accessor,object,object,string,nested,path,object,root,object,register,default,editors,set,wrapped,instance,object,nested,path,root,object
AbstractPropertyAccessor -> @Override 	public Object getPropertyValue(String propertyName) throws BeansException;1432208995;Actually get the value of a property._@param propertyName name of the property to get the value of_@return the value of the property_@throws InvalidPropertyException if there is no such property or_if the property isn't readable_@throws PropertyAccessException if the property was valid but the_accessor method failed;@Override_	public Object getPropertyValue(String propertyName) throws BeansException {_		AbstractPropertyAccessor nestedPa = getPropertyAccessorForPropertyPath(propertyName)__		PropertyTokenHolder tokens = getPropertyNameTokens(getFinalPath(nestedPa, propertyName))__		return nestedPa.getPropertyValue(tokens)__	};actually,get,the,value,of,a,property,param,property,name,name,of,the,property,to,get,the,value,of,return,the,value,of,the,property,throws,invalid,property,exception,if,there,is,no,such,property,or,if,the,property,isn,t,readable,throws,property,access,exception,if,the,property,was,valid,but,the,accessor,method,failed;override,public,object,get,property,value,string,property,name,throws,beans,exception,abstract,property,accessor,nested,pa,get,property,accessor,for,property,path,property,name,property,token,holder,tokens,get,property,name,tokens,get,final,path,nested,pa,property,name,return,nested,pa,get,property,value,tokens
AbstractPropertyAccessor -> @Override 	public Object getPropertyValue(String propertyName) throws BeansException;1432223291;Actually get the value of a property._@param propertyName name of the property to get the value of_@return the value of the property_@throws InvalidPropertyException if there is no such property or_if the property isn't readable_@throws PropertyAccessException if the property was valid but the_accessor method failed;@Override_	public Object getPropertyValue(String propertyName) throws BeansException {_		AbstractPropertyAccessor nestedPa = getPropertyAccessorForPropertyPath(propertyName)__		PropertyTokenHolder tokens = getPropertyNameTokens(getFinalPath(nestedPa, propertyName))__		return nestedPa.getPropertyValue(tokens)__	};actually,get,the,value,of,a,property,param,property,name,name,of,the,property,to,get,the,value,of,return,the,value,of,the,property,throws,invalid,property,exception,if,there,is,no,such,property,or,if,the,property,isn,t,readable,throws,property,access,exception,if,the,property,was,valid,but,the,accessor,method,failed;override,public,object,get,property,value,string,property,name,throws,beans,exception,abstract,property,accessor,nested,pa,get,property,accessor,for,property,path,property,name,property,token,holder,tokens,get,property,name,tokens,get,final,path,nested,pa,property,name,return,nested,pa,get,property,value,tokens
AbstractPropertyAccessor -> @Override 	public void setPropertyValue(String propertyName, Object value) throws BeansException;1432208995;Actually set a property value._@param propertyName name of the property to set value of_@param value the new value_@throws InvalidPropertyException if there is no such property or_if the property isn't writable_@throws PropertyAccessException if the property was valid but the_accessor method failed or a type mismatch occured;@Override_	public void setPropertyValue(String propertyName, Object value) throws BeansException {_		AbstractPropertyAccessor nestedPa__		try {_			nestedPa = getPropertyAccessorForPropertyPath(propertyName)__		}_		catch (NotReadablePropertyException ex) {_			throw new NotWritablePropertyException(getRootClass(), this.nestedPath + propertyName,_					"Nested property in path '" + propertyName + "' does not exist", ex)__		}_		PropertyTokenHolder tokens = getPropertyNameTokens(getFinalPath(nestedPa, propertyName))__		nestedPa.setPropertyValue(tokens, new PropertyValue(propertyName, value))__	};actually,set,a,property,value,param,property,name,name,of,the,property,to,set,value,of,param,value,the,new,value,throws,invalid,property,exception,if,there,is,no,such,property,or,if,the,property,isn,t,writable,throws,property,access,exception,if,the,property,was,valid,but,the,accessor,method,failed,or,a,type,mismatch,occured;override,public,void,set,property,value,string,property,name,object,value,throws,beans,exception,abstract,property,accessor,nested,pa,try,nested,pa,get,property,accessor,for,property,path,property,name,catch,not,readable,property,exception,ex,throw,new,not,writable,property,exception,get,root,class,this,nested,path,property,name,nested,property,in,path,property,name,does,not,exist,ex,property,token,holder,tokens,get,property,name,tokens,get,final,path,nested,pa,property,name,nested,pa,set,property,value,tokens,new,property,value,property,name,value
AbstractPropertyAccessor -> @Override 	public void setPropertyValue(String propertyName, Object value) throws BeansException;1432223291;Actually set a property value._@param propertyName name of the property to set value of_@param value the new value_@throws InvalidPropertyException if there is no such property or_if the property isn't writable_@throws PropertyAccessException if the property was valid but the_accessor method failed or a type mismatch occured;@Override_	public void setPropertyValue(String propertyName, Object value) throws BeansException {_		AbstractPropertyAccessor nestedPa__		try {_			nestedPa = getPropertyAccessorForPropertyPath(propertyName)__		}_		catch (NotReadablePropertyException ex) {_			throw new NotWritablePropertyException(getRootClass(), this.nestedPath + propertyName,_					"Nested property in path '" + propertyName + "' does not exist", ex)__		}_		PropertyTokenHolder tokens = getPropertyNameTokens(getFinalPath(nestedPa, propertyName))__		nestedPa.setPropertyValue(tokens, new PropertyValue(propertyName, value))__	};actually,set,a,property,value,param,property,name,name,of,the,property,to,set,value,of,param,value,the,new,value,throws,invalid,property,exception,if,there,is,no,such,property,or,if,the,property,isn,t,writable,throws,property,access,exception,if,the,property,was,valid,but,the,accessor,method,failed,or,a,type,mismatch,occured;override,public,void,set,property,value,string,property,name,object,value,throws,beans,exception,abstract,property,accessor,nested,pa,try,nested,pa,get,property,accessor,for,property,path,property,name,catch,not,readable,property,exception,ex,throw,new,not,writable,property,exception,get,root,class,this,nested,path,property,name,nested,property,in,path,property,name,does,not,exist,ex,property,token,holder,tokens,get,property,name,tokens,get,final,path,nested,pa,property,name,nested,pa,set,property,value,tokens,new,property,value,property,name,value
AbstractPropertyAccessor -> @Override 	public abstract void setPropertyValue(String propertyName, @Nullable Object value) throws BeansException_;1496837955;Actually set a property value._@param propertyName name of the property to set value of_@param value the new value_@throws InvalidPropertyException if there is no such property or_if the property isn't writable_@throws PropertyAccessException if the property was valid but the_accessor method failed or a type mismatch occurred;@Override_	public abstract void setPropertyValue(String propertyName, @Nullable Object value) throws BeansException_;actually,set,a,property,value,param,property,name,name,of,the,property,to,set,value,of,param,value,the,new,value,throws,invalid,property,exception,if,there,is,no,such,property,or,if,the,property,isn,t,writable,throws,property,access,exception,if,the,property,was,valid,but,the,accessor,method,failed,or,a,type,mismatch,occurred;override,public,abstract,void,set,property,value,string,property,name,nullable,object,value,throws,beans,exception
AbstractPropertyAccessor -> @Override 	public abstract void setPropertyValue(String propertyName, @Nullable Object value) throws BeansException_;1502974979;Actually set a property value._@param propertyName name of the property to set value of_@param value the new value_@throws InvalidPropertyException if there is no such property or_if the property isn't writable_@throws PropertyAccessException if the property was valid but the_accessor method failed or a type mismatch occurred;@Override_	public abstract void setPropertyValue(String propertyName, @Nullable Object value) throws BeansException_;actually,set,a,property,value,param,property,name,name,of,the,property,to,set,value,of,param,value,the,new,value,throws,invalid,property,exception,if,there,is,no,such,property,or,if,the,property,isn,t,writable,throws,property,access,exception,if,the,property,was,valid,but,the,accessor,method,failed,or,a,type,mismatch,occurred;override,public,abstract,void,set,property,value,string,property,name,nullable,object,value,throws,beans,exception
AbstractPropertyAccessor -> @Override 	public abstract void setPropertyValue(String propertyName, @Nullable Object value) throws BeansException_;1519295386;Actually set a property value._@param propertyName name of the property to set value of_@param value the new value_@throws InvalidPropertyException if there is no such property or_if the property isn't writable_@throws PropertyAccessException if the property was valid but the_accessor method failed or a type mismatch occurred;@Override_	public abstract void setPropertyValue(String propertyName, @Nullable Object value) throws BeansException_;actually,set,a,property,value,param,property,name,name,of,the,property,to,set,value,of,param,value,the,new,value,throws,invalid,property,exception,if,there,is,no,such,property,or,if,the,property,isn,t,writable,throws,property,access,exception,if,the,property,was,valid,but,the,accessor,method,failed,or,a,type,mismatch,occurred;override,public,abstract,void,set,property,value,string,property,name,nullable,object,value,throws,beans,exception
AbstractPropertyAccessor -> @Override 	public abstract void setPropertyValue(String propertyName, @Nullable Object value) throws BeansException_;1531945062;Actually set a property value._@param propertyName name of the property to set value of_@param value the new value_@throws InvalidPropertyException if there is no such property or_if the property isn't writable_@throws PropertyAccessException if the property was valid but the_accessor method failed or a type mismatch occurred;@Override_	public abstract void setPropertyValue(String propertyName, @Nullable Object value) throws BeansException_;actually,set,a,property,value,param,property,name,name,of,the,property,to,set,value,of,param,value,the,new,value,throws,invalid,property,exception,if,there,is,no,such,property,or,if,the,property,isn,t,writable,throws,property,access,exception,if,the,property,was,valid,but,the,accessor,method,failed,or,a,type,mismatch,occurred;override,public,abstract,void,set,property,value,string,property,name,nullable,object,value,throws,beans,exception
AbstractPropertyAccessor -> protected PropertyHandler getPropertyHandler(String propertyName) throws BeansException;1432208995;Return the {@link PropertyHandler} for the specified {@code propertyName}, navigating_if necessary. Return {@code null} if not found rather than throwing an exception._@param propertyName the property to obtain the descriptor for_@return the property descriptor for the specified property,_or {@code null} if not found_@throws BeansException in case of introspection failure;protected PropertyHandler getPropertyHandler(String propertyName) throws BeansException {_		Assert.notNull(propertyName, "Property name must not be null")__		AbstractPropertyAccessor nestedPa = getPropertyAccessorForPropertyPath(propertyName)__		return nestedPa.getLocalPropertyHandler(getFinalPath(nestedPa, propertyName))__	};return,the,link,property,handler,for,the,specified,code,property,name,navigating,if,necessary,return,code,null,if,not,found,rather,than,throwing,an,exception,param,property,name,the,property,to,obtain,the,descriptor,for,return,the,property,descriptor,for,the,specified,property,or,code,null,if,not,found,throws,beans,exception,in,case,of,introspection,failure;protected,property,handler,get,property,handler,string,property,name,throws,beans,exception,assert,not,null,property,name,property,name,must,not,be,null,abstract,property,accessor,nested,pa,get,property,accessor,for,property,path,property,name,return,nested,pa,get,local,property,handler,get,final,path,nested,pa,property,name
AbstractPropertyAccessor -> protected PropertyHandler getPropertyHandler(String propertyName) throws BeansException;1432223291;Return the {@link PropertyHandler} for the specified {@code propertyName}, navigating_if necessary. Return {@code null} if not found rather than throwing an exception._@param propertyName the property to obtain the descriptor for_@return the property descriptor for the specified property,_or {@code null} if not found_@throws BeansException in case of introspection failure;protected PropertyHandler getPropertyHandler(String propertyName) throws BeansException {_		Assert.notNull(propertyName, "Property name must not be null")__		AbstractPropertyAccessor nestedPa = getPropertyAccessorForPropertyPath(propertyName)__		return nestedPa.getLocalPropertyHandler(getFinalPath(nestedPa, propertyName))__	};return,the,link,property,handler,for,the,specified,code,property,name,navigating,if,necessary,return,code,null,if,not,found,rather,than,throwing,an,exception,param,property,name,the,property,to,obtain,the,descriptor,for,return,the,property,descriptor,for,the,specified,property,or,code,null,if,not,found,throws,beans,exception,in,case,of,introspection,failure;protected,property,handler,get,property,handler,string,property,name,throws,beans,exception,assert,not,null,property,name,property,name,must,not,be,null,abstract,property,accessor,nested,pa,get,property,accessor,for,property,path,property,name,return,nested,pa,get,local,property,handler,get,final,path,nested,pa,property,name
AbstractPropertyAccessor -> @Override 	public abstract void setPropertyValue(String propertyName, Object value) throws BeansException_;1356735495;Actually set a property value._@param propertyName name of the property to set value of_@param value the new value_@throws InvalidPropertyException if there is no such property or_if the property isn't writable_@throws PropertyAccessException if the property was valid but the_accessor method failed or a type mismatch occured;@Override_	public abstract void setPropertyValue(String propertyName, Object value) throws BeansException_;actually,set,a,property,value,param,property,name,name,of,the,property,to,set,value,of,param,value,the,new,value,throws,invalid,property,exception,if,there,is,no,such,property,or,if,the,property,isn,t,writable,throws,property,access,exception,if,the,property,was,valid,but,the,accessor,method,failed,or,a,type,mismatch,occured;override,public,abstract,void,set,property,value,string,property,name,object,value,throws,beans,exception
AbstractPropertyAccessor -> @Override 	public abstract void setPropertyValue(String propertyName, Object value) throws BeansException_;1368482696;Actually set a property value._@param propertyName name of the property to set value of_@param value the new value_@throws InvalidPropertyException if there is no such property or_if the property isn't writable_@throws PropertyAccessException if the property was valid but the_accessor method failed or a type mismatch occured;@Override_	public abstract void setPropertyValue(String propertyName, Object value) throws BeansException_;actually,set,a,property,value,param,property,name,name,of,the,property,to,set,value,of,param,value,the,new,value,throws,invalid,property,exception,if,there,is,no,such,property,or,if,the,property,isn,t,writable,throws,property,access,exception,if,the,property,was,valid,but,the,accessor,method,failed,or,a,type,mismatch,occured;override,public,abstract,void,set,property,value,string,property,name,object,value,throws,beans,exception
AbstractPropertyAccessor -> @Override 	public abstract void setPropertyValue(String propertyName, Object value) throws BeansException_;1385412762;Actually set a property value._@param propertyName name of the property to set value of_@param value the new value_@throws InvalidPropertyException if there is no such property or_if the property isn't writable_@throws PropertyAccessException if the property was valid but the_accessor method failed or a type mismatch occured;@Override_	public abstract void setPropertyValue(String propertyName, Object value) throws BeansException_;actually,set,a,property,value,param,property,name,name,of,the,property,to,set,value,of,param,value,the,new,value,throws,invalid,property,exception,if,there,is,no,such,property,or,if,the,property,isn,t,writable,throws,property,access,exception,if,the,property,was,valid,but,the,accessor,method,failed,or,a,type,mismatch,occured;override,public,abstract,void,set,property,value,string,property,name,object,value,throws,beans,exception
AbstractPropertyAccessor -> @Override 	public abstract void setPropertyValue(String propertyName, Object value) throws BeansException_;1403803322;Actually set a property value._@param propertyName name of the property to set value of_@param value the new value_@throws InvalidPropertyException if there is no such property or_if the property isn't writable_@throws PropertyAccessException if the property was valid but the_accessor method failed or a type mismatch occured;@Override_	public abstract void setPropertyValue(String propertyName, Object value) throws BeansException_;actually,set,a,property,value,param,property,name,name,of,the,property,to,set,value,of,param,value,the,new,value,throws,invalid,property,exception,if,there,is,no,such,property,or,if,the,property,isn,t,writable,throws,property,access,exception,if,the,property,was,valid,but,the,accessor,method,failed,or,a,type,mismatch,occured;override,public,abstract,void,set,property,value,string,property,name,object,value,throws,beans,exception
AbstractPropertyAccessor -> @Override 	public abstract void setPropertyValue(String propertyName, Object value) throws BeansException_;1432283608;Actually set a property value._@param propertyName name of the property to set value of_@param value the new value_@throws InvalidPropertyException if there is no such property or_if the property isn't writable_@throws PropertyAccessException if the property was valid but the_accessor method failed or a type mismatch occured;@Override_	public abstract void setPropertyValue(String propertyName, Object value) throws BeansException_;actually,set,a,property,value,param,property,name,name,of,the,property,to,set,value,of,param,value,the,new,value,throws,invalid,property,exception,if,there,is,no,such,property,or,if,the,property,isn,t,writable,throws,property,access,exception,if,the,property,was,valid,but,the,accessor,method,failed,or,a,type,mismatch,occured;override,public,abstract,void,set,property,value,string,property,name,object,value,throws,beans,exception
AbstractPropertyAccessor -> @Override 	public abstract void setPropertyValue(String propertyName, Object value) throws BeansException_;1467730834;Actually set a property value._@param propertyName name of the property to set value of_@param value the new value_@throws InvalidPropertyException if there is no such property or_if the property isn't writable_@throws PropertyAccessException if the property was valid but the_accessor method failed or a type mismatch occured;@Override_	public abstract void setPropertyValue(String propertyName, Object value) throws BeansException_;actually,set,a,property,value,param,property,name,name,of,the,property,to,set,value,of,param,value,the,new,value,throws,invalid,property,exception,if,there,is,no,such,property,or,if,the,property,isn,t,writable,throws,property,access,exception,if,the,property,was,valid,but,the,accessor,method,failed,or,a,type,mismatch,occured;override,public,abstract,void,set,property,value,string,property,name,object,value,throws,beans,exception
AbstractPropertyAccessor -> @Override 	public abstract void setPropertyValue(String propertyName, Object value) throws BeansException_;1467983536;Actually set a property value._@param propertyName name of the property to set value of_@param value the new value_@throws InvalidPropertyException if there is no such property or_if the property isn't writable_@throws PropertyAccessException if the property was valid but the_accessor method failed or a type mismatch occurred;@Override_	public abstract void setPropertyValue(String propertyName, Object value) throws BeansException_;actually,set,a,property,value,param,property,name,name,of,the,property,to,set,value,of,param,value,the,new,value,throws,invalid,property,exception,if,there,is,no,such,property,or,if,the,property,isn,t,writable,throws,property,access,exception,if,the,property,was,valid,but,the,accessor,method,failed,or,a,type,mismatch,occurred;override,public,abstract,void,set,property,value,string,property,name,object,value,throws,beans,exception
AbstractPropertyAccessor -> protected AbstractPropertyAccessor(boolean registerDefaultEditors);1432208995;Create new empty accessor. Wrapped instance needs to be set afterwards._@param registerDefaultEditors whether to register default editors_(can be suppressed if the accessor won't need any type conversion)_@see #setWrappedInstance;protected AbstractPropertyAccessor(boolean registerDefaultEditors) {_		if (registerDefaultEditors) {_			registerDefaultEditors()__		}_		this.typeConverterDelegate = new TypeConverterDelegate(this)__	};create,new,empty,accessor,wrapped,instance,needs,to,be,set,afterwards,param,register,default,editors,whether,to,register,default,editors,can,be,suppressed,if,the,accessor,won,t,need,any,type,conversion,see,set,wrapped,instance;protected,abstract,property,accessor,boolean,register,default,editors,if,register,default,editors,register,default,editors,this,type,converter,delegate,new,type,converter,delegate,this
AbstractPropertyAccessor -> protected AbstractPropertyAccessor(boolean registerDefaultEditors);1432223291;Create new empty accessor. Wrapped instance needs to be set afterwards._@param registerDefaultEditors whether to register default editors_(can be suppressed if the accessor won't need any type conversion)_@see #setWrappedInstance;protected AbstractPropertyAccessor(boolean registerDefaultEditors) {_		if (registerDefaultEditors) {_			registerDefaultEditors()__		}_		this.typeConverterDelegate = new TypeConverterDelegate(this)__	};create,new,empty,accessor,wrapped,instance,needs,to,be,set,afterwards,param,register,default,editors,whether,to,register,default,editors,can,be,suppressed,if,the,accessor,won,t,need,any,type,conversion,see,set,wrapped,instance;protected,abstract,property,accessor,boolean,register,default,editors,if,register,default,editors,register,default,editors,this,type,converter,delegate,new,type,converter,delegate,this
AbstractPropertyAccessor -> public abstract void setPropertyValue(String propertyName, Object value) throws BeansException_;1328020251;Actually set a property value._@param propertyName name of the property to set value of_@param value the new value_@throws InvalidPropertyException if there is no such property or_if the property isn't writable_@throws PropertyAccessException if the property was valid but the_accessor method failed or a type mismatch occured;public abstract void setPropertyValue(String propertyName, Object value) throws BeansException_;actually,set,a,property,value,param,property,name,name,of,the,property,to,set,value,of,param,value,the,new,value,throws,invalid,property,exception,if,there,is,no,such,property,or,if,the,property,isn,t,writable,throws,property,access,exception,if,the,property,was,valid,but,the,accessor,method,failed,or,a,type,mismatch,occured;public,abstract,void,set,property,value,string,property,name,object,value,throws,beans,exception
AbstractPropertyAccessor -> public abstract void setPropertyValue(String propertyName, Object value) throws BeansException_;1346790972;Actually set a property value._@param propertyName name of the property to set value of_@param value the new value_@throws InvalidPropertyException if there is no such property or_if the property isn't writable_@throws PropertyAccessException if the property was valid but the_accessor method failed or a type mismatch occured;public abstract void setPropertyValue(String propertyName, Object value) throws BeansException_;actually,set,a,property,value,param,property,name,name,of,the,property,to,set,value,of,param,value,the,new,value,throws,invalid,property,exception,if,there,is,no,such,property,or,if,the,property,isn,t,writable,throws,property,access,exception,if,the,property,was,valid,but,the,accessor,method,failed,or,a,type,mismatch,occured;public,abstract,void,set,property,value,string,property,name,object,value,throws,beans,exception
AbstractPropertyAccessor -> public abstract void setPropertyValue(String propertyName, Object value) throws BeansException_;1357119239;Actually set a property value._@param propertyName name of the property to set value of_@param value the new value_@throws InvalidPropertyException if there is no such property or_if the property isn't writable_@throws PropertyAccessException if the property was valid but the_accessor method failed or a type mismatch occured;public abstract void setPropertyValue(String propertyName, Object value) throws BeansException_;actually,set,a,property,value,param,property,name,name,of,the,property,to,set,value,of,param,value,the,new,value,throws,invalid,property,exception,if,there,is,no,such,property,or,if,the,property,isn,t,writable,throws,property,access,exception,if,the,property,was,valid,but,the,accessor,method,failed,or,a,type,mismatch,occured;public,abstract,void,set,property,value,string,property,name,object,value,throws,beans,exception
AbstractPropertyAccessor -> @Override 	@Nullable 	public abstract Object getPropertyValue(String propertyName) throws BeansException_;1502974979;Actually get the value of a property._@param propertyName name of the property to get the value of_@return the value of the property_@throws InvalidPropertyException if there is no such property or_if the property isn't readable_@throws PropertyAccessException if the property was valid but the_accessor method failed;@Override_	@Nullable_	public abstract Object getPropertyValue(String propertyName) throws BeansException_;actually,get,the,value,of,a,property,param,property,name,name,of,the,property,to,get,the,value,of,return,the,value,of,the,property,throws,invalid,property,exception,if,there,is,no,such,property,or,if,the,property,isn,t,readable,throws,property,access,exception,if,the,property,was,valid,but,the,accessor,method,failed;override,nullable,public,abstract,object,get,property,value,string,property,name,throws,beans,exception
AbstractPropertyAccessor -> @Override 	@Nullable 	public abstract Object getPropertyValue(String propertyName) throws BeansException_;1519295386;Actually get the value of a property._@param propertyName name of the property to get the value of_@return the value of the property_@throws InvalidPropertyException if there is no such property or_if the property isn't readable_@throws PropertyAccessException if the property was valid but the_accessor method failed;@Override_	@Nullable_	public abstract Object getPropertyValue(String propertyName) throws BeansException_;actually,get,the,value,of,a,property,param,property,name,name,of,the,property,to,get,the,value,of,return,the,value,of,the,property,throws,invalid,property,exception,if,there,is,no,such,property,or,if,the,property,isn,t,readable,throws,property,access,exception,if,the,property,was,valid,but,the,accessor,method,failed;override,nullable,public,abstract,object,get,property,value,string,property,name,throws,beans,exception
AbstractPropertyAccessor -> @Override 	@Nullable 	public abstract Object getPropertyValue(String propertyName) throws BeansException_;1531945062;Actually get the value of a property._@param propertyName name of the property to get the value of_@return the value of the property_@throws InvalidPropertyException if there is no such property or_if the property isn't readable_@throws PropertyAccessException if the property was valid but the_accessor method failed;@Override_	@Nullable_	public abstract Object getPropertyValue(String propertyName) throws BeansException_;actually,get,the,value,of,a,property,param,property,name,name,of,the,property,to,get,the,value,of,return,the,value,of,the,property,throws,invalid,property,exception,if,there,is,no,such,property,or,if,the,property,isn,t,readable,throws,property,access,exception,if,the,property,was,valid,but,the,accessor,method,failed;override,nullable,public,abstract,object,get,property,value,string,property,name,throws,beans,exception
AbstractPropertyAccessor -> @SuppressWarnings("unchecked")  	protected AbstractPropertyAccessor getPropertyAccessorForPropertyPath(String propertyPath);1432208995;Recursively navigate to return a property accessor for the nested property path._@param propertyPath property property path, which may be nested_@return a property accessor for the target bean;@SuppressWarnings("unchecked") _	protected AbstractPropertyAccessor getPropertyAccessorForPropertyPath(String propertyPath) {_		int pos = PropertyAccessorUtils.getFirstNestedPropertySeparatorIndex(propertyPath)__		_		if (pos > -1) {_			String nestedProperty = propertyPath.substring(0, pos)__			String nestedPath = propertyPath.substring(pos + 1)__			AbstractPropertyAccessor nestedPa = getNestedPropertyAccessor(nestedProperty)__			return nestedPa.getPropertyAccessorForPropertyPath(nestedPath)__		}_		else {_			return this__		}_	};recursively,navigate,to,return,a,property,accessor,for,the,nested,property,path,param,property,path,property,property,path,which,may,be,nested,return,a,property,accessor,for,the,target,bean;suppress,warnings,unchecked,protected,abstract,property,accessor,get,property,accessor,for,property,path,string,property,path,int,pos,property,accessor,utils,get,first,nested,property,separator,index,property,path,if,pos,1,string,nested,property,property,path,substring,0,pos,string,nested,path,property,path,substring,pos,1,abstract,property,accessor,nested,pa,get,nested,property,accessor,nested,property,return,nested,pa,get,property,accessor,for,property,path,nested,path,else,return,this
AbstractPropertyAccessor -> @SuppressWarnings("unchecked")  	protected AbstractPropertyAccessor getPropertyAccessorForPropertyPath(String propertyPath);1432223291;Recursively navigate to return a property accessor for the nested property path._@param propertyPath property property path, which may be nested_@return a property accessor for the target bean;@SuppressWarnings("unchecked") _	protected AbstractPropertyAccessor getPropertyAccessorForPropertyPath(String propertyPath) {_		int pos = PropertyAccessorUtils.getFirstNestedPropertySeparatorIndex(propertyPath)__		_		if (pos > -1) {_			String nestedProperty = propertyPath.substring(0, pos)__			String nestedPath = propertyPath.substring(pos + 1)__			AbstractPropertyAccessor nestedPa = getNestedPropertyAccessor(nestedProperty)__			return nestedPa.getPropertyAccessorForPropertyPath(nestedPath)__		}_		else {_			return this__		}_	};recursively,navigate,to,return,a,property,accessor,for,the,nested,property,path,param,property,path,property,property,path,which,may,be,nested,return,a,property,accessor,for,the,target,bean;suppress,warnings,unchecked,protected,abstract,property,accessor,get,property,accessor,for,property,path,string,property,path,int,pos,property,accessor,utils,get,first,nested,property,separator,index,property,path,if,pos,1,string,nested,property,property,path,substring,0,pos,string,nested,path,property,path,substring,pos,1,abstract,property,accessor,nested,pa,get,nested,property,accessor,nested,property,return,nested,pa,get,property,accessor,for,property,path,nested,path,else,return,this
AbstractPropertyAccessor -> public void setWrappedInstance(Object object);1432208995;Switch the target object, replacing the cached introspection results only_if the class of the new object is different to that of the replaced object._@param object the new target object;public void setWrappedInstance(Object object) {_		setWrappedInstance(object, "", null)__	};switch,the,target,object,replacing,the,cached,introspection,results,only,if,the,class,of,the,new,object,is,different,to,that,of,the,replaced,object,param,object,the,new,target,object;public,void,set,wrapped,instance,object,object,set,wrapped,instance,object,null
AbstractPropertyAccessor -> public void setWrappedInstance(Object object);1432223291;Switch the target object, replacing the cached introspection results only_if the class of the new object is different to that of the replaced object._@param object the new target object;public void setWrappedInstance(Object object) {_		setWrappedInstance(object, "", null)__	};switch,the,target,object,replacing,the,cached,introspection,results,only,if,the,class,of,the,new,object,is,different,to,that,of,the,replaced,object,param,object,the,new,target,object;public,void,set,wrapped,instance,object,object,set,wrapped,instance,object,null
AbstractPropertyAccessor -> protected abstract NotWritablePropertyException createNotWritablePropertyException(String propertyName)_;1432208995;Create a {@link NotWritablePropertyException} for the specified property.;protected abstract NotWritablePropertyException createNotWritablePropertyException(String propertyName)_;create,a,link,not,writable,property,exception,for,the,specified,property;protected,abstract,not,writable,property,exception,create,not,writable,property,exception,string,property,name
AbstractPropertyAccessor -> protected abstract NotWritablePropertyException createNotWritablePropertyException(String propertyName)_;1432223291;Create a {@link NotWritablePropertyException} for the specified property.;protected abstract NotWritablePropertyException createNotWritablePropertyException(String propertyName)_;create,a,link,not,writable,property,exception,for,the,specified,property;protected,abstract,not,writable,property,exception,create,not,writable,property,exception,string,property,name
AbstractPropertyAccessor -> protected AbstractPropertyAccessor(Object object, String nestedPath, AbstractPropertyAccessor parent);1432208995;Create new accessor for the given object,_registering a nested path that the object is in._@param object object wrapped by this accessor_@param nestedPath the nested path of the object_@param parent the containing accessor (must not be {@code null});protected AbstractPropertyAccessor(Object object, String nestedPath, AbstractPropertyAccessor parent) {_		setWrappedInstance(object, nestedPath, parent.getWrappedInstance())__		setExtractOldValueForEditor(parent.isExtractOldValueForEditor())__		setAutoGrowNestedPaths(parent.isAutoGrowNestedPaths())__		setAutoGrowCollectionLimit(parent.getAutoGrowCollectionLimit())__		setConversionService(parent.getConversionService())__	};create,new,accessor,for,the,given,object,registering,a,nested,path,that,the,object,is,in,param,object,object,wrapped,by,this,accessor,param,nested,path,the,nested,path,of,the,object,param,parent,the,containing,accessor,must,not,be,code,null;protected,abstract,property,accessor,object,object,string,nested,path,abstract,property,accessor,parent,set,wrapped,instance,object,nested,path,parent,get,wrapped,instance,set,extract,old,value,for,editor,parent,is,extract,old,value,for,editor,set,auto,grow,nested,paths,parent,is,auto,grow,nested,paths,set,auto,grow,collection,limit,parent,get,auto,grow,collection,limit,set,conversion,service,parent,get,conversion,service
AbstractPropertyAccessor -> protected AbstractPropertyAccessor(Object object, String nestedPath, AbstractPropertyAccessor parent);1432223291;Create new accessor for the given object,_registering a nested path that the object is in._@param object object wrapped by this accessor_@param nestedPath the nested path of the object_@param parent the containing accessor (must not be {@code null});protected AbstractPropertyAccessor(Object object, String nestedPath, AbstractPropertyAccessor parent) {_		setWrappedInstance(object, nestedPath, parent.getWrappedInstance())__		setExtractOldValueForEditor(parent.isExtractOldValueForEditor())__		setAutoGrowNestedPaths(parent.isAutoGrowNestedPaths())__		setAutoGrowCollectionLimit(parent.getAutoGrowCollectionLimit())__		setConversionService(parent.getConversionService())__	};create,new,accessor,for,the,given,object,registering,a,nested,path,that,the,object,is,in,param,object,object,wrapped,by,this,accessor,param,nested,path,the,nested,path,of,the,object,param,parent,the,containing,accessor,must,not,be,code,null;protected,abstract,property,accessor,object,object,string,nested,path,abstract,property,accessor,parent,set,wrapped,instance,object,nested,path,parent,get,wrapped,instance,set,extract,old,value,for,editor,parent,is,extract,old,value,for,editor,set,auto,grow,nested,paths,parent,is,auto,grow,nested,paths,set,auto,grow,collection,limit,parent,get,auto,grow,collection,limit,set,conversion,service,parent,get,conversion,service
AbstractPropertyAccessor -> public final String getNestedPath();1432208995;Return the nested path of the object wrapped by this accessor.;public final String getNestedPath() {_		return this.nestedPath__	};return,the,nested,path,of,the,object,wrapped,by,this,accessor;public,final,string,get,nested,path,return,this,nested,path
AbstractPropertyAccessor -> public final String getNestedPath();1432223291;Return the nested path of the object wrapped by this accessor.;public final String getNestedPath() {_		return this.nestedPath__	};return,the,nested,path,of,the,object,wrapped,by,this,accessor;public,final,string,get,nested,path,return,this,nested,path
AbstractPropertyAccessor -> public final Object getRootInstance();1432208995;Return the root object at the top of the path of this accessor._@see #getNestedPath;public final Object getRootInstance() {_		return this.rootObject__	};return,the,root,object,at,the,top,of,the,path,of,this,accessor,see,get,nested,path;public,final,object,get,root,instance,return,this,root,object
AbstractPropertyAccessor -> public final Object getRootInstance();1432223291;Return the root object at the top of the path of this accessor._@see #getNestedPath;public final Object getRootInstance() {_		return this.rootObject__	};return,the,root,object,at,the,top,of,the,path,of,this,accessor,see,get,nested,path;public,final,object,get,root,instance,return,this,root,object
AbstractPropertyAccessor -> protected AbstractPropertyAccessor(Class<?> clazz);1432208995;Create new accessor, wrapping a new instance of the specified class._@param clazz class to instantiate and wrap;protected AbstractPropertyAccessor(Class<?> clazz) {_		registerDefaultEditors()__		setWrappedInstance(BeanUtils.instantiateClass(clazz))__	};create,new,accessor,wrapping,a,new,instance,of,the,specified,class,param,clazz,class,to,instantiate,and,wrap;protected,abstract,property,accessor,class,clazz,register,default,editors,set,wrapped,instance,bean,utils,instantiate,class,clazz
AbstractPropertyAccessor -> protected AbstractPropertyAccessor(Class<?> clazz);1432223291;Create new accessor, wrapping a new instance of the specified class._@param clazz class to instantiate and wrap;protected AbstractPropertyAccessor(Class<?> clazz) {_		registerDefaultEditors()__		setWrappedInstance(BeanUtils.instantiateClass(clazz))__	};create,new,accessor,wrapping,a,new,instance,of,the,specified,class,param,clazz,class,to,instantiate,and,wrap;protected,abstract,property,accessor,class,clazz,register,default,editors,set,wrapped,instance,bean,utils,instantiate,class,clazz
AbstractPropertyAccessor -> public int getAutoGrowCollectionLimit();1432208995;Return the limit for array and collection auto-growing.;public int getAutoGrowCollectionLimit() {_		return this.autoGrowCollectionLimit__	};return,the,limit,for,array,and,collection,auto,growing;public,int,get,auto,grow,collection,limit,return,this,auto,grow,collection,limit
AbstractPropertyAccessor -> public int getAutoGrowCollectionLimit();1432223291;Return the limit for array and collection auto-growing.;public int getAutoGrowCollectionLimit() {_		return this.autoGrowCollectionLimit__	};return,the,limit,for,array,and,collection,auto,growing;public,int,get,auto,grow,collection,limit,return,this,auto,grow,collection,limit
AbstractPropertyAccessor -> protected abstract AbstractPropertyAccessor newNestedPropertyAccessor(Object object, String nestedPath)_;1432208995;Create a new nested property accessor instance._Can be overridden in subclasses to create a PropertyAccessor subclass._@param object object wrapped by this PropertyAccessor_@param nestedPath the nested path of the object_@return the nested PropertyAccessor instance;protected abstract AbstractPropertyAccessor newNestedPropertyAccessor(Object object, String nestedPath)_;create,a,new,nested,property,accessor,instance,can,be,overridden,in,subclasses,to,create,a,property,accessor,subclass,param,object,object,wrapped,by,this,property,accessor,param,nested,path,the,nested,path,of,the,object,return,the,nested,property,accessor,instance;protected,abstract,abstract,property,accessor,new,nested,property,accessor,object,object,string,nested,path
AbstractPropertyAccessor -> protected abstract AbstractPropertyAccessor newNestedPropertyAccessor(Object object, String nestedPath)_;1432223291;Create a new nested property accessor instance._Can be overridden in subclasses to create a PropertyAccessor subclass._@param object object wrapped by this PropertyAccessor_@param nestedPath the nested path of the object_@return the nested PropertyAccessor instance;protected abstract AbstractPropertyAccessor newNestedPropertyAccessor(Object object, String nestedPath)_;create,a,new,nested,property,accessor,instance,can,be,overridden,in,subclasses,to,create,a,property,accessor,subclass,param,object,object,wrapped,by,this,property,accessor,param,nested,path,the,nested,path,of,the,object,return,the,nested,property,accessor,instance;protected,abstract,abstract,property,accessor,new,nested,property,accessor,object,object,string,nested,path
AbstractPropertyAccessor -> public final Class<?> getRootClass();1432208995;Return the class of the root object at the top of the path of this accessor._@see #getNestedPath;public final Class<?> getRootClass() {_		return (this.rootObject != null ? this.rootObject.getClass() : null)__	};return,the,class,of,the,root,object,at,the,top,of,the,path,of,this,accessor,see,get,nested,path;public,final,class,get,root,class,return,this,root,object,null,this,root,object,get,class,null
AbstractPropertyAccessor -> public final Class<?> getRootClass();1432223291;Return the class of the root object at the top of the path of this accessor._@see #getNestedPath;public final Class<?> getRootClass() {_		return (this.rootObject != null ? this.rootObject.getClass() : null)__	};return,the,class,of,the,root,object,at,the,top,of,the,path,of,this,accessor,see,get,nested,path;public,final,class,get,root,class,return,this,root,object,null,this,root,object,get,class,null
AbstractPropertyAccessor -> protected abstract PropertyHandler getLocalPropertyHandler(String propertyName)_;1432208995;Return a {@link PropertyHandler} for the specified local {@code propertyName}. Only_used to reach a property available in the current context._@param propertyName the name of a local property_@return the handler for that property or {@code null} if it has not been found;protected abstract PropertyHandler getLocalPropertyHandler(String propertyName)_;return,a,link,property,handler,for,the,specified,local,code,property,name,only,used,to,reach,a,property,available,in,the,current,context,param,property,name,the,name,of,a,local,property,return,the,handler,for,that,property,or,code,null,if,it,has,not,been,found;protected,abstract,property,handler,get,local,property,handler,string,property,name
AbstractPropertyAccessor -> protected abstract PropertyHandler getLocalPropertyHandler(String propertyName)_;1432223291;Return a {@link PropertyHandler} for the specified local {@code propertyName}. Only_used to reach a property available in the current context._@param propertyName the name of a local property_@return the handler for that property or {@code null} if it has not been found;protected abstract PropertyHandler getLocalPropertyHandler(String propertyName)_;return,a,link,property,handler,for,the,specified,local,code,property,name,only,used,to,reach,a,property,available,in,the,current,context,param,property,name,the,name,of,a,local,property,return,the,handler,for,that,property,or,code,null,if,it,has,not,been,found;protected,abstract,property,handler,get,local,property,handler,string,property,name
AbstractPropertyAccessor -> private PropertyTokenHolder getPropertyNameTokens(String propertyName);1432208995;Parse the given property name into the corresponding property name tokens._@param propertyName the property name to parse_@return representation of the parsed property tokens;private PropertyTokenHolder getPropertyNameTokens(String propertyName) {_		PropertyTokenHolder tokens = new PropertyTokenHolder()__		String actualName = null__		List<String> keys = new ArrayList<String>(2)__		int searchIndex = 0__		while (searchIndex != -1) {_			int keyStart = propertyName.indexOf(PROPERTY_KEY_PREFIX, searchIndex)__			searchIndex = -1__			if (keyStart != -1) {_				int keyEnd = propertyName.indexOf(PROPERTY_KEY_SUFFIX, keyStart + PROPERTY_KEY_PREFIX.length())__				if (keyEnd != -1) {_					if (actualName == null) {_						actualName = propertyName.substring(0, keyStart)__					}_					String key = propertyName.substring(keyStart + PROPERTY_KEY_PREFIX.length(), keyEnd)__					if ((key.startsWith("'") && key.endsWith("'")) || (key.startsWith("\"") && key.endsWith("\""))) {_						key = key.substring(1, key.length() - 1)__					}_					keys.add(key)__					searchIndex = keyEnd + PROPERTY_KEY_SUFFIX.length()__				}_			}_		}_		tokens.actualName = (actualName != null ? actualName : propertyName)__		tokens.canonicalName = tokens.actualName__		if (!keys.isEmpty()) {_			tokens.canonicalName +=_					PROPERTY_KEY_PREFIX +_							StringUtils.collectionToDelimitedString(keys, PROPERTY_KEY_SUFFIX + PROPERTY_KEY_PREFIX) +_							PROPERTY_KEY_SUFFIX__			tokens.keys = StringUtils.toStringArray(keys)__		}_		return tokens__	};parse,the,given,property,name,into,the,corresponding,property,name,tokens,param,property,name,the,property,name,to,parse,return,representation,of,the,parsed,property,tokens;private,property,token,holder,get,property,name,tokens,string,property,name,property,token,holder,tokens,new,property,token,holder,string,actual,name,null,list,string,keys,new,array,list,string,2,int,search,index,0,while,search,index,1,int,key,start,property,name,index,of,search,index,search,index,1,if,key,start,1,int,key,end,property,name,index,of,key,start,length,if,key,end,1,if,actual,name,null,actual,name,property,name,substring,0,key,start,string,key,property,name,substring,key,start,length,key,end,if,key,starts,with,key,ends,with,key,starts,with,key,ends,with,key,key,substring,1,key,length,1,keys,add,key,search,index,key,end,length,tokens,actual,name,actual,name,null,actual,name,property,name,tokens,canonical,name,tokens,actual,name,if,keys,is,empty,tokens,canonical,name,string,utils,collection,to,delimited,string,keys,tokens,keys,string,utils,to,string,array,keys,return,tokens
AbstractPropertyAccessor -> private PropertyTokenHolder getPropertyNameTokens(String propertyName);1432223291;Parse the given property name into the corresponding property name tokens._@param propertyName the property name to parse_@return representation of the parsed property tokens;private PropertyTokenHolder getPropertyNameTokens(String propertyName) {_		PropertyTokenHolder tokens = new PropertyTokenHolder()__		String actualName = null__		List<String> keys = new ArrayList<String>(2)__		int searchIndex = 0__		while (searchIndex != -1) {_			int keyStart = propertyName.indexOf(PROPERTY_KEY_PREFIX, searchIndex)__			searchIndex = -1__			if (keyStart != -1) {_				int keyEnd = propertyName.indexOf(PROPERTY_KEY_SUFFIX, keyStart + PROPERTY_KEY_PREFIX.length())__				if (keyEnd != -1) {_					if (actualName == null) {_						actualName = propertyName.substring(0, keyStart)__					}_					String key = propertyName.substring(keyStart + PROPERTY_KEY_PREFIX.length(), keyEnd)__					if ((key.startsWith("'") && key.endsWith("'")) || (key.startsWith("\"") && key.endsWith("\""))) {_						key = key.substring(1, key.length() - 1)__					}_					keys.add(key)__					searchIndex = keyEnd + PROPERTY_KEY_SUFFIX.length()__				}_			}_		}_		tokens.actualName = (actualName != null ? actualName : propertyName)__		tokens.canonicalName = tokens.actualName__		if (!keys.isEmpty()) {_			tokens.canonicalName +=_					PROPERTY_KEY_PREFIX +_							StringUtils.collectionToDelimitedString(keys, PROPERTY_KEY_SUFFIX + PROPERTY_KEY_PREFIX) +_							PROPERTY_KEY_SUFFIX__			tokens.keys = StringUtils.toStringArray(keys)__		}_		return tokens__	};parse,the,given,property,name,into,the,corresponding,property,name,tokens,param,property,name,the,property,name,to,parse,return,representation,of,the,parsed,property,tokens;private,property,token,holder,get,property,name,tokens,string,property,name,property,token,holder,tokens,new,property,token,holder,string,actual,name,null,list,string,keys,new,array,list,string,2,int,search,index,0,while,search,index,1,int,key,start,property,name,index,of,search,index,search,index,1,if,key,start,1,int,key,end,property,name,index,of,key,start,length,if,key,end,1,if,actual,name,null,actual,name,property,name,substring,0,key,start,string,key,property,name,substring,key,start,length,key,end,if,key,starts,with,key,ends,with,key,starts,with,key,ends,with,key,key,substring,1,key,length,1,keys,add,key,search,index,key,end,length,tokens,actual,name,actual,name,null,actual,name,property,name,tokens,canonical,name,tokens,actual,name,if,keys,is,empty,tokens,canonical,name,string,utils,collection,to,delimited,string,keys,tokens,keys,string,utils,to,string,array,keys,return,tokens
AbstractPropertyAccessor -> @Override 	public abstract Object getPropertyValue(String propertyName) throws BeansException_;1356735495;Actually get the value of a property._@param propertyName name of the property to get the value of_@return the value of the property_@throws InvalidPropertyException if there is no such property or_if the property isn't readable_@throws PropertyAccessException if the property was valid but the_accessor method failed;@Override_	public abstract Object getPropertyValue(String propertyName) throws BeansException_;actually,get,the,value,of,a,property,param,property,name,name,of,the,property,to,get,the,value,of,return,the,value,of,the,property,throws,invalid,property,exception,if,there,is,no,such,property,or,if,the,property,isn,t,readable,throws,property,access,exception,if,the,property,was,valid,but,the,accessor,method,failed;override,public,abstract,object,get,property,value,string,property,name,throws,beans,exception
AbstractPropertyAccessor -> @Override 	public abstract Object getPropertyValue(String propertyName) throws BeansException_;1368482696;Actually get the value of a property._@param propertyName name of the property to get the value of_@return the value of the property_@throws InvalidPropertyException if there is no such property or_if the property isn't readable_@throws PropertyAccessException if the property was valid but the_accessor method failed;@Override_	public abstract Object getPropertyValue(String propertyName) throws BeansException_;actually,get,the,value,of,a,property,param,property,name,name,of,the,property,to,get,the,value,of,return,the,value,of,the,property,throws,invalid,property,exception,if,there,is,no,such,property,or,if,the,property,isn,t,readable,throws,property,access,exception,if,the,property,was,valid,but,the,accessor,method,failed;override,public,abstract,object,get,property,value,string,property,name,throws,beans,exception
AbstractPropertyAccessor -> @Override 	public abstract Object getPropertyValue(String propertyName) throws BeansException_;1385412762;Actually get the value of a property._@param propertyName name of the property to get the value of_@return the value of the property_@throws InvalidPropertyException if there is no such property or_if the property isn't readable_@throws PropertyAccessException if the property was valid but the_accessor method failed;@Override_	public abstract Object getPropertyValue(String propertyName) throws BeansException_;actually,get,the,value,of,a,property,param,property,name,name,of,the,property,to,get,the,value,of,return,the,value,of,the,property,throws,invalid,property,exception,if,there,is,no,such,property,or,if,the,property,isn,t,readable,throws,property,access,exception,if,the,property,was,valid,but,the,accessor,method,failed;override,public,abstract,object,get,property,value,string,property,name,throws,beans,exception
AbstractPropertyAccessor -> @Override 	public abstract Object getPropertyValue(String propertyName) throws BeansException_;1403803322;Actually get the value of a property._@param propertyName name of the property to get the value of_@return the value of the property_@throws InvalidPropertyException if there is no such property or_if the property isn't readable_@throws PropertyAccessException if the property was valid but the_accessor method failed;@Override_	public abstract Object getPropertyValue(String propertyName) throws BeansException_;actually,get,the,value,of,a,property,param,property,name,name,of,the,property,to,get,the,value,of,return,the,value,of,the,property,throws,invalid,property,exception,if,there,is,no,such,property,or,if,the,property,isn,t,readable,throws,property,access,exception,if,the,property,was,valid,but,the,accessor,method,failed;override,public,abstract,object,get,property,value,string,property,name,throws,beans,exception
AbstractPropertyAccessor -> @Override 	public abstract Object getPropertyValue(String propertyName) throws BeansException_;1432283608;Actually get the value of a property._@param propertyName name of the property to get the value of_@return the value of the property_@throws InvalidPropertyException if there is no such property or_if the property isn't readable_@throws PropertyAccessException if the property was valid but the_accessor method failed;@Override_	public abstract Object getPropertyValue(String propertyName) throws BeansException_;actually,get,the,value,of,a,property,param,property,name,name,of,the,property,to,get,the,value,of,return,the,value,of,the,property,throws,invalid,property,exception,if,there,is,no,such,property,or,if,the,property,isn,t,readable,throws,property,access,exception,if,the,property,was,valid,but,the,accessor,method,failed;override,public,abstract,object,get,property,value,string,property,name,throws,beans,exception
AbstractPropertyAccessor -> @Override 	public abstract Object getPropertyValue(String propertyName) throws BeansException_;1467730834;Actually get the value of a property._@param propertyName name of the property to get the value of_@return the value of the property_@throws InvalidPropertyException if there is no such property or_if the property isn't readable_@throws PropertyAccessException if the property was valid but the_accessor method failed;@Override_	public abstract Object getPropertyValue(String propertyName) throws BeansException_;actually,get,the,value,of,a,property,param,property,name,name,of,the,property,to,get,the,value,of,return,the,value,of,the,property,throws,invalid,property,exception,if,there,is,no,such,property,or,if,the,property,isn,t,readable,throws,property,access,exception,if,the,property,was,valid,but,the,accessor,method,failed;override,public,abstract,object,get,property,value,string,property,name,throws,beans,exception
AbstractPropertyAccessor -> @Override 	public abstract Object getPropertyValue(String propertyName) throws BeansException_;1467983536;Actually get the value of a property._@param propertyName name of the property to get the value of_@return the value of the property_@throws InvalidPropertyException if there is no such property or_if the property isn't readable_@throws PropertyAccessException if the property was valid but the_accessor method failed;@Override_	public abstract Object getPropertyValue(String propertyName) throws BeansException_;actually,get,the,value,of,a,property,param,property,name,name,of,the,property,to,get,the,value,of,return,the,value,of,the,property,throws,invalid,property,exception,if,there,is,no,such,property,or,if,the,property,isn,t,readable,throws,property,access,exception,if,the,property,was,valid,but,the,accessor,method,failed;override,public,abstract,object,get,property,value,string,property,name,throws,beans,exception
AbstractPropertyAccessor -> @Override 	public abstract Object getPropertyValue(String propertyName) throws BeansException_;1496837955;Actually get the value of a property._@param propertyName name of the property to get the value of_@return the value of the property_@throws InvalidPropertyException if there is no such property or_if the property isn't readable_@throws PropertyAccessException if the property was valid but the_accessor method failed;@Override_	public abstract Object getPropertyValue(String propertyName) throws BeansException_;actually,get,the,value,of,a,property,param,property,name,name,of,the,property,to,get,the,value,of,return,the,value,of,the,property,throws,invalid,property,exception,if,there,is,no,such,property,or,if,the,property,isn,t,readable,throws,property,access,exception,if,the,property,was,valid,but,the,accessor,method,failed;override,public,abstract,object,get,property,value,string,property,name,throws,beans,exception
AbstractPropertyAccessor -> protected AbstractPropertyAccessor(Object object);1432208995;Create new accessor for the given object._@param object object wrapped by this accessor;protected AbstractPropertyAccessor(Object object) {_		registerDefaultEditors()__		setWrappedInstance(object)__	};create,new,accessor,for,the,given,object,param,object,object,wrapped,by,this,accessor;protected,abstract,property,accessor,object,object,register,default,editors,set,wrapped,instance,object
AbstractPropertyAccessor -> protected AbstractPropertyAccessor(Object object);1432223291;Create new accessor for the given object._@param object object wrapped by this accessor;protected AbstractPropertyAccessor(Object object) {_		registerDefaultEditors()__		setWrappedInstance(object)__	};create,new,accessor,for,the,given,object,param,object,object,wrapped,by,this,accessor;protected,abstract,property,accessor,object,object,register,default,editors,set,wrapped,instance,object
AbstractPropertyAccessor -> private AbstractPropertyAccessor getNestedPropertyAccessor(String nestedProperty);1432208995;Retrieve a Property accessor for the given nested property._Create a new one if not found in the cache._<p>Note: Caching nested PropertyAccessors is necessary now,_to keep registered custom editors for nested properties._@param nestedProperty property to create the PropertyAccessor for_@return the PropertyAccessor instance, either cached or newly created;private AbstractPropertyAccessor getNestedPropertyAccessor(String nestedProperty) {_		if (this.nestedPropertyAccessors == null) {_			this.nestedPropertyAccessors = new HashMap<String, AbstractPropertyAccessor>()__		}_		_		PropertyTokenHolder tokens = getPropertyNameTokens(nestedProperty)__		String canonicalName = tokens.canonicalName__		Object value = getPropertyValue(tokens)__		if (value == null || (value.getClass().equals(javaUtilOptionalClass) && OptionalUnwrapper.isEmpty(value))) {_			if (isAutoGrowNestedPaths()) {_				value = setDefaultValue(tokens)__			}_			else {_				throw new NullValueInNestedPathException(getRootClass(), this.nestedPath + canonicalName)__			}_		}__		_		AbstractPropertyAccessor nestedPa = this.nestedPropertyAccessors.get(canonicalName)__		if (nestedPa == null || nestedPa.getWrappedInstance() !=_				(value.getClass().equals(javaUtilOptionalClass) ? OptionalUnwrapper.unwrap(value) : value)) {_			if (logger.isTraceEnabled()) {_				logger.trace("Creating new nested " + getClass().getSimpleName() + " for property '" + canonicalName + "'")__			}_			nestedPa = newNestedPropertyAccessor(value, this.nestedPath + canonicalName + NESTED_PROPERTY_SEPARATOR)__			_			copyDefaultEditorsTo(nestedPa)__			copyCustomEditorsTo(nestedPa, canonicalName)__			this.nestedPropertyAccessors.put(canonicalName, nestedPa)__		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("Using cached nested property accessor for property '" + canonicalName + "'")__			}_		}_		return nestedPa__	};retrieve,a,property,accessor,for,the,given,nested,property,create,a,new,one,if,not,found,in,the,cache,p,note,caching,nested,property,accessors,is,necessary,now,to,keep,registered,custom,editors,for,nested,properties,param,nested,property,property,to,create,the,property,accessor,for,return,the,property,accessor,instance,either,cached,or,newly,created;private,abstract,property,accessor,get,nested,property,accessor,string,nested,property,if,this,nested,property,accessors,null,this,nested,property,accessors,new,hash,map,string,abstract,property,accessor,property,token,holder,tokens,get,property,name,tokens,nested,property,string,canonical,name,tokens,canonical,name,object,value,get,property,value,tokens,if,value,null,value,get,class,equals,java,util,optional,class,optional,unwrapper,is,empty,value,if,is,auto,grow,nested,paths,value,set,default,value,tokens,else,throw,new,null,value,in,nested,path,exception,get,root,class,this,nested,path,canonical,name,abstract,property,accessor,nested,pa,this,nested,property,accessors,get,canonical,name,if,nested,pa,null,nested,pa,get,wrapped,instance,value,get,class,equals,java,util,optional,class,optional,unwrapper,unwrap,value,value,if,logger,is,trace,enabled,logger,trace,creating,new,nested,get,class,get,simple,name,for,property,canonical,name,nested,pa,new,nested,property,accessor,value,this,nested,path,canonical,name,copy,default,editors,to,nested,pa,copy,custom,editors,to,nested,pa,canonical,name,this,nested,property,accessors,put,canonical,name,nested,pa,else,if,logger,is,trace,enabled,logger,trace,using,cached,nested,property,accessor,for,property,canonical,name,return,nested,pa
AbstractPropertyAccessor -> private AbstractPropertyAccessor getNestedPropertyAccessor(String nestedProperty);1432223291;Retrieve a Property accessor for the given nested property._Create a new one if not found in the cache._<p>Note: Caching nested PropertyAccessors is necessary now,_to keep registered custom editors for nested properties._@param nestedProperty property to create the PropertyAccessor for_@return the PropertyAccessor instance, either cached or newly created;private AbstractPropertyAccessor getNestedPropertyAccessor(String nestedProperty) {_		if (this.nestedPropertyAccessors == null) {_			this.nestedPropertyAccessors = new HashMap<String, AbstractPropertyAccessor>()__		}_		_		PropertyTokenHolder tokens = getPropertyNameTokens(nestedProperty)__		String canonicalName = tokens.canonicalName__		Object value = getPropertyValue(tokens)__		if (value == null || (value.getClass().equals(javaUtilOptionalClass) && OptionalUnwrapper.isEmpty(value))) {_			if (isAutoGrowNestedPaths()) {_				value = setDefaultValue(tokens)__			}_			else {_				throw new NullValueInNestedPathException(getRootClass(), this.nestedPath + canonicalName)__			}_		}__		_		AbstractPropertyAccessor nestedPa = this.nestedPropertyAccessors.get(canonicalName)__		if (nestedPa == null || nestedPa.getWrappedInstance() !=_				(value.getClass().equals(javaUtilOptionalClass) ? OptionalUnwrapper.unwrap(value) : value)) {_			if (logger.isTraceEnabled()) {_				logger.trace("Creating new nested " + getClass().getSimpleName() + " for property '" + canonicalName + "'")__			}_			nestedPa = newNestedPropertyAccessor(value, this.nestedPath + canonicalName + NESTED_PROPERTY_SEPARATOR)__			_			copyDefaultEditorsTo(nestedPa)__			copyCustomEditorsTo(nestedPa, canonicalName)__			this.nestedPropertyAccessors.put(canonicalName, nestedPa)__		}_		else {_			if (logger.isTraceEnabled()) {_				logger.trace("Using cached nested property accessor for property '" + canonicalName + "'")__			}_		}_		return nestedPa__	};retrieve,a,property,accessor,for,the,given,nested,property,create,a,new,one,if,not,found,in,the,cache,p,note,caching,nested,property,accessors,is,necessary,now,to,keep,registered,custom,editors,for,nested,properties,param,nested,property,property,to,create,the,property,accessor,for,return,the,property,accessor,instance,either,cached,or,newly,created;private,abstract,property,accessor,get,nested,property,accessor,string,nested,property,if,this,nested,property,accessors,null,this,nested,property,accessors,new,hash,map,string,abstract,property,accessor,property,token,holder,tokens,get,property,name,tokens,nested,property,string,canonical,name,tokens,canonical,name,object,value,get,property,value,tokens,if,value,null,value,get,class,equals,java,util,optional,class,optional,unwrapper,is,empty,value,if,is,auto,grow,nested,paths,value,set,default,value,tokens,else,throw,new,null,value,in,nested,path,exception,get,root,class,this,nested,path,canonical,name,abstract,property,accessor,nested,pa,this,nested,property,accessors,get,canonical,name,if,nested,pa,null,nested,pa,get,wrapped,instance,value,get,class,equals,java,util,optional,class,optional,unwrapper,unwrap,value,value,if,logger,is,trace,enabled,logger,trace,creating,new,nested,get,class,get,simple,name,for,property,canonical,name,nested,pa,new,nested,property,accessor,value,this,nested,path,canonical,name,copy,default,editors,to,nested,pa,copy,custom,editors,to,nested,pa,canonical,name,this,nested,property,accessors,put,canonical,name,nested,pa,else,if,logger,is,trace,enabled,logger,trace,using,cached,nested,property,accessor,for,property,canonical,name,return,nested,pa
AbstractPropertyAccessor -> private String getFinalPath(AbstractPropertyAccessor pa, String nestedPath);1432208995;Get the last component of the path. Also works if not nested._@param pa property accessor to work on_@param nestedPath property path we know is nested_@return last component of the path (the property on the target bean);private String getFinalPath(AbstractPropertyAccessor pa, String nestedPath) {_		if (pa == this) {_			return nestedPath__		}_		return nestedPath.substring(PropertyAccessorUtils.getLastNestedPropertySeparatorIndex(nestedPath) + 1)__	};get,the,last,component,of,the,path,also,works,if,not,nested,param,pa,property,accessor,to,work,on,param,nested,path,property,path,we,know,is,nested,return,last,component,of,the,path,the,property,on,the,target,bean;private,string,get,final,path,abstract,property,accessor,pa,string,nested,path,if,pa,this,return,nested,path,return,nested,path,substring,property,accessor,utils,get,last,nested,property,separator,index,nested,path,1
AbstractPropertyAccessor -> private String getFinalPath(AbstractPropertyAccessor pa, String nestedPath);1432223291;Get the last component of the path. Also works if not nested._@param pa property accessor to work on_@param nestedPath property path we know is nested_@return last component of the path (the property on the target bean);private String getFinalPath(AbstractPropertyAccessor pa, String nestedPath) {_		if (pa == this) {_			return nestedPath__		}_		return nestedPath.substring(PropertyAccessorUtils.getLastNestedPropertySeparatorIndex(nestedPath) + 1)__	};get,the,last,component,of,the,path,also,works,if,not,nested,param,pa,property,accessor,to,work,on,param,nested,path,property,path,we,know,is,nested,return,last,component,of,the,path,the,property,on,the,target,bean;private,string,get,final,path,abstract,property,accessor,pa,string,nested,path,if,pa,this,return,nested,path,return,nested,path,substring,property,accessor,utils,get,last,nested,property,separator,index,nested,path,1
AbstractPropertyAccessor -> public void setAutoGrowCollectionLimit(int autoGrowCollectionLimit);1432208995;Specify a limit for array and collection auto-growing._<p>Default is unlimited on a plain accessor.;public void setAutoGrowCollectionLimit(int autoGrowCollectionLimit) {_		this.autoGrowCollectionLimit = autoGrowCollectionLimit__	};specify,a,limit,for,array,and,collection,auto,growing,p,default,is,unlimited,on,a,plain,accessor;public,void,set,auto,grow,collection,limit,int,auto,grow,collection,limit,this,auto,grow,collection,limit,auto,grow,collection,limit
AbstractPropertyAccessor -> public void setAutoGrowCollectionLimit(int autoGrowCollectionLimit);1432223291;Specify a limit for array and collection auto-growing._<p>Default is unlimited on a plain accessor.;public void setAutoGrowCollectionLimit(int autoGrowCollectionLimit) {_		this.autoGrowCollectionLimit = autoGrowCollectionLimit__	};specify,a,limit,for,array,and,collection,auto,growing,p,default,is,unlimited,on,a,plain,accessor;public,void,set,auto,grow,collection,limit,int,auto,grow,collection,limit,this,auto,grow,collection,limit,auto,grow,collection,limit
AbstractPropertyAccessor -> protected AbstractPropertyAccessor();1432208995;Create new empty accessor. Wrapped instance needs to be set afterwards._Registers default editors._@see #setWrappedInstance;protected AbstractPropertyAccessor() {_		this(true)__	};create,new,empty,accessor,wrapped,instance,needs,to,be,set,afterwards,registers,default,editors,see,set,wrapped,instance;protected,abstract,property,accessor,this,true
AbstractPropertyAccessor -> protected AbstractPropertyAccessor();1432223291;Create new empty accessor. Wrapped instance needs to be set afterwards._Registers default editors._@see #setWrappedInstance;protected AbstractPropertyAccessor() {_		this(true)__	};create,new,empty,accessor,wrapped,instance,needs,to,be,set,afterwards,registers,default,editors,see,set,wrapped,instance;protected,abstract,property,accessor,this,true
AbstractPropertyAccessor -> public abstract Object getPropertyValue(String propertyName) throws BeansException_;1328020251;Actually get the value of a property._@param propertyName name of the property to get the value of_@return the value of the property_@throws InvalidPropertyException if there is no such property or_if the property isn't readable_@throws PropertyAccessException if the property was valid but the_accessor method failed;public abstract Object getPropertyValue(String propertyName) throws BeansException_;actually,get,the,value,of,a,property,param,property,name,name,of,the,property,to,get,the,value,of,return,the,value,of,the,property,throws,invalid,property,exception,if,there,is,no,such,property,or,if,the,property,isn,t,readable,throws,property,access,exception,if,the,property,was,valid,but,the,accessor,method,failed;public,abstract,object,get,property,value,string,property,name,throws,beans,exception
AbstractPropertyAccessor -> public abstract Object getPropertyValue(String propertyName) throws BeansException_;1346790972;Actually get the value of a property._@param propertyName name of the property to get the value of_@return the value of the property_@throws InvalidPropertyException if there is no such property or_if the property isn't readable_@throws PropertyAccessException if the property was valid but the_accessor method failed;public abstract Object getPropertyValue(String propertyName) throws BeansException_;actually,get,the,value,of,a,property,param,property,name,name,of,the,property,to,get,the,value,of,return,the,value,of,the,property,throws,invalid,property,exception,if,there,is,no,such,property,or,if,the,property,isn,t,readable,throws,property,access,exception,if,the,property,was,valid,but,the,accessor,method,failed;public,abstract,object,get,property,value,string,property,name,throws,beans,exception
AbstractPropertyAccessor -> public abstract Object getPropertyValue(String propertyName) throws BeansException_;1357119239;Actually get the value of a property._@param propertyName name of the property to get the value of_@return the value of the property_@throws InvalidPropertyException if there is no such property or_if the property isn't readable_@throws PropertyAccessException if the property was valid but the_accessor method failed;public abstract Object getPropertyValue(String propertyName) throws BeansException_;actually,get,the,value,of,a,property,param,property,name,name,of,the,property,to,get,the,value,of,return,the,value,of,the,property,throws,invalid,property,exception,if,there,is,no,such,property,or,if,the,property,isn,t,readable,throws,property,access,exception,if,the,property,was,valid,but,the,accessor,method,failed;public,abstract,object,get,property,value,string,property,name,throws,beans,exception
AbstractPropertyAccessor -> public void setWrappedInstance(Object object, String nestedPath, Object rootObject);1432208995;Switch the target object, replacing the cached introspection results only_if the class of the new object is different to that of the replaced object._@param object the new target object_@param nestedPath the nested path of the object_@param rootObject the root object at the top of the path;public void setWrappedInstance(Object object, String nestedPath, Object rootObject) {_		Assert.notNull(object, "Bean object must not be null")__		if (object.getClass().equals(javaUtilOptionalClass)) {_			this.object = OptionalUnwrapper.unwrap(object)__		}_		else {_			this.object = object__		}_		this.nestedPath = (nestedPath != null ? nestedPath : "")__		this.rootObject = (!"".equals(this.nestedPath) ? rootObject : this.object)__		this.nestedPropertyAccessors = null__		this.typeConverterDelegate = new TypeConverterDelegate(this, this.object)__	};switch,the,target,object,replacing,the,cached,introspection,results,only,if,the,class,of,the,new,object,is,different,to,that,of,the,replaced,object,param,object,the,new,target,object,param,nested,path,the,nested,path,of,the,object,param,root,object,the,root,object,at,the,top,of,the,path;public,void,set,wrapped,instance,object,object,string,nested,path,object,root,object,assert,not,null,object,bean,object,must,not,be,null,if,object,get,class,equals,java,util,optional,class,this,object,optional,unwrapper,unwrap,object,else,this,object,object,this,nested,path,nested,path,null,nested,path,this,root,object,equals,this,nested,path,root,object,this,object,this,nested,property,accessors,null,this,type,converter,delegate,new,type,converter,delegate,this,this,object
AbstractPropertyAccessor -> public void setWrappedInstance(Object object, String nestedPath, Object rootObject);1432223291;Switch the target object, replacing the cached introspection results only_if the class of the new object is different to that of the replaced object._@param object the new target object_@param nestedPath the nested path of the object_@param rootObject the root object at the top of the path;public void setWrappedInstance(Object object, String nestedPath, Object rootObject) {_		Assert.notNull(object, "Bean object must not be null")__		if (object.getClass().equals(javaUtilOptionalClass)) {_			this.object = OptionalUnwrapper.unwrap(object)__		}_		else {_			this.object = object__		}_		this.nestedPath = (nestedPath != null ? nestedPath : "")__		this.rootObject = (!"".equals(this.nestedPath) ? rootObject : this.object)__		this.nestedPropertyAccessors = null__		this.typeConverterDelegate = new TypeConverterDelegate(this, this.object)__	};switch,the,target,object,replacing,the,cached,introspection,results,only,if,the,class,of,the,new,object,is,different,to,that,of,the,replaced,object,param,object,the,new,target,object,param,nested,path,the,nested,path,of,the,object,param,root,object,the,root,object,at,the,top,of,the,path;public,void,set,wrapped,instance,object,object,string,nested,path,object,root,object,assert,not,null,object,bean,object,must,not,be,null,if,object,get,class,equals,java,util,optional,class,this,object,optional,unwrapper,unwrap,object,else,this,object,object,this,nested,path,nested,path,null,nested,path,this,root,object,equals,this,nested,path,root,object,this,object,this,nested,property,accessors,null,this,type,converter,delegate,new,type,converter,delegate,this,this,object
