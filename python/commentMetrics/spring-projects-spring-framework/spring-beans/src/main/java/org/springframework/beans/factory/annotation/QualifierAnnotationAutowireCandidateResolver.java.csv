# id;timestamp;commentText;codeText;commentWords;codeWords
QualifierAnnotationAutowireCandidateResolver -> protected Object extractValue(Annotation valueAnnotation);1351681817;Extract the value attribute from the given annotation.;protected Object extractValue(Annotation valueAnnotation) {_		Object value = AnnotationUtils.getValue(valueAnnotation)__		if (value == null) {_			throw new IllegalStateException("Value annotation must have a value attribute")__		}_		return value__	};extract,the,value,attribute,from,the,given,annotation;protected,object,extract,value,annotation,value,annotation,object,value,annotation,utils,get,value,value,annotation,if,value,null,throw,new,illegal,state,exception,value,annotation,must,have,a,value,attribute,return,value
QualifierAnnotationAutowireCandidateResolver -> protected Object extractValue(Annotation valueAnnotation);1356735495;Extract the value attribute from the given annotation.;protected Object extractValue(Annotation valueAnnotation) {_		Object value = AnnotationUtils.getValue(valueAnnotation)__		if (value == null) {_			throw new IllegalStateException("Value annotation must have a value attribute")__		}_		return value__	};extract,the,value,attribute,from,the,given,annotation;protected,object,extract,value,annotation,value,annotation,object,value,annotation,utils,get,value,value,annotation,if,value,null,throw,new,illegal,state,exception,value,annotation,must,have,a,value,attribute,return,value
QualifierAnnotationAutowireCandidateResolver -> protected Object extractValue(Annotation valueAnnotation);1357119239;Extract the value attribute from the given annotation.;protected Object extractValue(Annotation valueAnnotation) {_		Object value = AnnotationUtils.getValue(valueAnnotation)__		if (value == null) {_			throw new IllegalStateException("Value annotation must have a value attribute")__		}_		return value__	};extract,the,value,attribute,from,the,given,annotation;protected,object,extract,value,annotation,value,annotation,object,value,annotation,utils,get,value,value,annotation,if,value,null,throw,new,illegal,state,exception,value,annotation,must,have,a,value,attribute,return,value
QualifierAnnotationAutowireCandidateResolver -> protected Object extractValue(Annotation valueAnnotation);1368482696;Extract the value attribute from the given annotation.;protected Object extractValue(Annotation valueAnnotation) {_		Object value = AnnotationUtils.getValue(valueAnnotation)__		if (value == null) {_			throw new IllegalStateException("Value annotation must have a value attribute")__		}_		return value__	};extract,the,value,attribute,from,the,given,annotation;protected,object,extract,value,annotation,value,annotation,object,value,annotation,utils,get,value,value,annotation,if,value,null,throw,new,illegal,state,exception,value,annotation,must,have,a,value,attribute,return,value
QualifierAnnotationAutowireCandidateResolver -> protected Object extractValue(Annotation valueAnnotation);1377641679;Extract the value attribute from the given annotation.;protected Object extractValue(Annotation valueAnnotation) {_		Object value = AnnotationUtils.getValue(valueAnnotation)__		if (value == null) {_			throw new IllegalStateException("Value annotation must have a value attribute")__		}_		return value__	};extract,the,value,attribute,from,the,given,annotation;protected,object,extract,value,annotation,value,annotation,object,value,annotation,utils,get,value,value,annotation,if,value,null,throw,new,illegal,state,exception,value,annotation,must,have,a,value,attribute,return,value
QualifierAnnotationAutowireCandidateResolver -> protected Object extractValue(Annotation valueAnnotation);1381788683;Extract the value attribute from the given annotation.;protected Object extractValue(Annotation valueAnnotation) {_		Object value = AnnotationUtils.getValue(valueAnnotation)__		if (value == null) {_			throw new IllegalStateException("Value annotation must have a value attribute")__		}_		return value__	};extract,the,value,attribute,from,the,given,annotation;protected,object,extract,value,annotation,value,annotation,object,value,annotation,utils,get,value,value,annotation,if,value,null,throw,new,illegal,state,exception,value,annotation,must,have,a,value,attribute,return,value
QualifierAnnotationAutowireCandidateResolver -> protected Object extractValue(Annotation valueAnnotation);1382826936;Extract the value attribute from the given annotation.;protected Object extractValue(Annotation valueAnnotation) {_		Object value = AnnotationUtils.getValue(valueAnnotation)__		if (value == null) {_			throw new IllegalStateException("Value annotation must have a value attribute")__		}_		return value__	};extract,the,value,attribute,from,the,given,annotation;protected,object,extract,value,annotation,value,annotation,object,value,annotation,utils,get,value,value,annotation,if,value,null,throw,new,illegal,state,exception,value,annotation,must,have,a,value,attribute,return,value
QualifierAnnotationAutowireCandidateResolver -> protected Object extractValue(Annotation valueAnnotation);1386541456;Extract the value attribute from the given annotation.;protected Object extractValue(Annotation valueAnnotation) {_		Object value = AnnotationUtils.getValue(valueAnnotation)__		if (value == null) {_			throw new IllegalStateException("Value annotation must have a value attribute")__		}_		return value__	};extract,the,value,attribute,from,the,given,annotation;protected,object,extract,value,annotation,value,annotation,object,value,annotation,utils,get,value,value,annotation,if,value,null,throw,new,illegal,state,exception,value,annotation,must,have,a,value,attribute,return,value
QualifierAnnotationAutowireCandidateResolver -> protected Object extractValue(Annotation valueAnnotation);1398638841;Extract the value attribute from the given annotation.;protected Object extractValue(Annotation valueAnnotation) {_		Object value = AnnotationUtils.getValue(valueAnnotation)__		if (value == null) {_			throw new IllegalStateException("Value annotation must have a value attribute")__		}_		return value__	};extract,the,value,attribute,from,the,given,annotation;protected,object,extract,value,annotation,value,annotation,object,value,annotation,utils,get,value,value,annotation,if,value,null,throw,new,illegal,state,exception,value,annotation,must,have,a,value,attribute,return,value
QualifierAnnotationAutowireCandidateResolver -> protected Object extractValue(Annotation valueAnnotation);1413990280;Extract the value attribute from the given annotation.;protected Object extractValue(Annotation valueAnnotation) {_		Object value = AnnotationUtils.getValue(valueAnnotation)__		if (value == null) {_			throw new IllegalStateException("Value annotation must have a value attribute")__		}_		return value__	};extract,the,value,attribute,from,the,given,annotation;protected,object,extract,value,annotation,value,annotation,object,value,annotation,utils,get,value,value,annotation,if,value,null,throw,new,illegal,state,exception,value,annotation,must,have,a,value,attribute,return,value
QualifierAnnotationAutowireCandidateResolver -> protected Object extractValue(Annotation valueAnnotation);1432125256;Extract the value attribute from the given annotation.;protected Object extractValue(Annotation valueAnnotation) {_		Object value = AnnotationUtils.getValue(valueAnnotation)__		if (value == null) {_			throw new IllegalStateException("Value annotation must have a value attribute")__		}_		return value__	};extract,the,value,attribute,from,the,given,annotation;protected,object,extract,value,annotation,value,annotation,object,value,annotation,utils,get,value,value,annotation,if,value,null,throw,new,illegal,state,exception,value,annotation,must,have,a,value,attribute,return,value
QualifierAnnotationAutowireCandidateResolver -> protected Object extractValue(AnnotationAttributes attr);1451408536;Extract the value attribute from the given annotation._@since 4.3;protected Object extractValue(AnnotationAttributes attr) {_		Object value = attr.get(AnnotationUtils.VALUE)__		if (value == null) {_			throw new IllegalStateException("Value annotation must have a value attribute")__		}_		return value__	};extract,the,value,attribute,from,the,given,annotation,since,4,3;protected,object,extract,value,annotation,attributes,attr,object,value,attr,get,annotation,utils,value,if,value,null,throw,new,illegal,state,exception,value,annotation,must,have,a,value,attribute,return,value
QualifierAnnotationAutowireCandidateResolver -> protected Object extractValue(AnnotationAttributes attr);1467730834;Extract the value attribute from the given annotation._@since 4.3;protected Object extractValue(AnnotationAttributes attr) {_		Object value = attr.get(AnnotationUtils.VALUE)__		if (value == null) {_			throw new IllegalStateException("Value annotation must have a value attribute")__		}_		return value__	};extract,the,value,attribute,from,the,given,annotation,since,4,3;protected,object,extract,value,annotation,attributes,attr,object,value,attr,get,annotation,utils,value,if,value,null,throw,new,illegal,state,exception,value,annotation,must,have,a,value,attribute,return,value
QualifierAnnotationAutowireCandidateResolver -> protected Object extractValue(AnnotationAttributes attr);1474010431;Extract the value attribute from the given annotation._@since 4.3;protected Object extractValue(AnnotationAttributes attr) {_		Object value = attr.get(AnnotationUtils.VALUE)__		if (value == null) {_			throw new IllegalStateException("Value annotation must have a value attribute")__		}_		return value__	};extract,the,value,attribute,from,the,given,annotation,since,4,3;protected,object,extract,value,annotation,attributes,attr,object,value,attr,get,annotation,utils,value,if,value,null,throw,new,illegal,state,exception,value,annotation,must,have,a,value,attribute,return,value
QualifierAnnotationAutowireCandidateResolver -> protected Object extractValue(AnnotationAttributes attr);1493811736;Extract the value attribute from the given annotation._@since 4.3;protected Object extractValue(AnnotationAttributes attr) {_		Object value = attr.get(AnnotationUtils.VALUE)__		if (value == null) {_			throw new IllegalStateException("Value annotation must have a value attribute")__		}_		return value__	};extract,the,value,attribute,from,the,given,annotation,since,4,3;protected,object,extract,value,annotation,attributes,attr,object,value,attr,get,annotation,utils,value,if,value,null,throw,new,illegal,state,exception,value,annotation,must,have,a,value,attribute,return,value
QualifierAnnotationAutowireCandidateResolver -> protected Object extractValue(AnnotationAttributes attr);1495868221;Extract the value attribute from the given annotation._@since 4.3;protected Object extractValue(AnnotationAttributes attr) {_		Object value = attr.get(AnnotationUtils.VALUE)__		if (value == null) {_			throw new IllegalStateException("Value annotation must have a value attribute")__		}_		return value__	};extract,the,value,attribute,from,the,given,annotation,since,4,3;protected,object,extract,value,annotation,attributes,attr,object,value,attr,get,annotation,utils,value,if,value,null,throw,new,illegal,state,exception,value,annotation,must,have,a,value,attribute,return,value
QualifierAnnotationAutowireCandidateResolver -> protected Object extractValue(AnnotationAttributes attr);1496837955;Extract the value attribute from the given annotation._@since 4.3;protected Object extractValue(AnnotationAttributes attr) {_		Object value = attr.get(AnnotationUtils.VALUE)__		if (value == null) {_			throw new IllegalStateException("Value annotation must have a value attribute")__		}_		return value__	};extract,the,value,attribute,from,the,given,annotation,since,4,3;protected,object,extract,value,annotation,attributes,attr,object,value,attr,get,annotation,utils,value,if,value,null,throw,new,illegal,state,exception,value,annotation,must,have,a,value,attribute,return,value
QualifierAnnotationAutowireCandidateResolver -> protected Object extractValue(AnnotationAttributes attr);1502974979;Extract the value attribute from the given annotation._@since 4.3;protected Object extractValue(AnnotationAttributes attr) {_		Object value = attr.get(AnnotationUtils.VALUE)__		if (value == null) {_			throw new IllegalStateException("Value annotation must have a value attribute")__		}_		return value__	};extract,the,value,attribute,from,the,given,annotation,since,4,3;protected,object,extract,value,annotation,attributes,attr,object,value,attr,get,annotation,utils,value,if,value,null,throw,new,illegal,state,exception,value,annotation,must,have,a,value,attribute,return,value
QualifierAnnotationAutowireCandidateResolver -> protected Object extractValue(AnnotationAttributes attr);1534347014;Extract the value attribute from the given annotation._@since 4.3;protected Object extractValue(AnnotationAttributes attr) {_		Object value = attr.get(AnnotationUtils.VALUE)__		if (value == null) {_			throw new IllegalStateException("Value annotation must have a value attribute")__		}_		return value__	};extract,the,value,attribute,from,the,given,annotation,since,4,3;protected,object,extract,value,annotation,attributes,attr,object,value,attr,get,annotation,utils,value,if,value,null,throw,new,illegal,state,exception,value,annotation,must,have,a,value,attribute,return,value
QualifierAnnotationAutowireCandidateResolver -> protected Object extractValue(AnnotationAttributes attr);1536855799;Extract the value attribute from the given annotation._@since 4.3;protected Object extractValue(AnnotationAttributes attr) {_		Object value = attr.get(AnnotationUtils.VALUE)__		if (value == null) {_			throw new IllegalStateException("Value annotation must have a value attribute")__		}_		return value__	};extract,the,value,attribute,from,the,given,annotation,since,4,3;protected,object,extract,value,annotation,attributes,attr,object,value,attr,get,annotation,utils,value,if,value,null,throw,new,illegal,state,exception,value,annotation,must,have,a,value,attribute,return,value
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch);1328020251;Match the given qualifier annotations against the candidate bean definition.;protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch) {_		if (ObjectUtils.isEmpty(annotationsToSearch)) {_			return true__		}_		SimpleTypeConverter typeConverter = new SimpleTypeConverter()__		for (Annotation annotation : annotationsToSearch) {_			Class<? extends Annotation> type = annotation.annotationType()__			if (isQualifier(type)) {_				if (!checkQualifier(bdHolder, annotation, typeConverter)) {_					return false__				}_			}_		}_		return true__	};match,the,given,qualifier,annotations,against,the,candidate,bean,definition;protected,boolean,check,qualifiers,bean,definition,holder,bd,holder,annotation,annotations,to,search,if,object,utils,is,empty,annotations,to,search,return,true,simple,type,converter,type,converter,new,simple,type,converter,for,annotation,annotation,annotations,to,search,class,extends,annotation,type,annotation,annotation,type,if,is,qualifier,type,if,check,qualifier,bd,holder,annotation,type,converter,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch);1351681817;Match the given qualifier annotations against the candidate bean definition.;protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch) {_		if (ObjectUtils.isEmpty(annotationsToSearch)) {_			return true__		}_		SimpleTypeConverter typeConverter = new SimpleTypeConverter()__		for (Annotation annotation : annotationsToSearch) {_			Class<? extends Annotation> type = annotation.annotationType()__			boolean checkMeta = true__			boolean fallbackToMeta = false__			if (isQualifier(type)) {_				if (!checkQualifier(bdHolder, annotation, typeConverter)) {_					fallbackToMeta = true__				}_				else {_					checkMeta = false__				}_			}_			if (checkMeta) {_				boolean foundMeta = false__				for (Annotation metaAnn : type.getAnnotations()) {_					Class<? extends Annotation> metaType = metaAnn.annotationType()__					if (isQualifier(metaType)) {_						foundMeta = true__						_						_						if ((fallbackToMeta && AnnotationUtils.getValue(metaAnn) == null) ||_								!checkQualifier(bdHolder, metaAnn, typeConverter)) {_							return false__						}_					}_				}_				if (fallbackToMeta && !foundMeta) {_					return false__				}_			}_		}_		return true__	};match,the,given,qualifier,annotations,against,the,candidate,bean,definition;protected,boolean,check,qualifiers,bean,definition,holder,bd,holder,annotation,annotations,to,search,if,object,utils,is,empty,annotations,to,search,return,true,simple,type,converter,type,converter,new,simple,type,converter,for,annotation,annotation,annotations,to,search,class,extends,annotation,type,annotation,annotation,type,boolean,check,meta,true,boolean,fallback,to,meta,false,if,is,qualifier,type,if,check,qualifier,bd,holder,annotation,type,converter,fallback,to,meta,true,else,check,meta,false,if,check,meta,boolean,found,meta,false,for,annotation,meta,ann,type,get,annotations,class,extends,annotation,meta,type,meta,ann,annotation,type,if,is,qualifier,meta,type,found,meta,true,if,fallback,to,meta,annotation,utils,get,value,meta,ann,null,check,qualifier,bd,holder,meta,ann,type,converter,return,false,if,fallback,to,meta,found,meta,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch);1356735495;Match the given qualifier annotations against the candidate bean definition.;protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch) {_		if (ObjectUtils.isEmpty(annotationsToSearch)) {_			return true__		}_		SimpleTypeConverter typeConverter = new SimpleTypeConverter()__		for (Annotation annotation : annotationsToSearch) {_			Class<? extends Annotation> type = annotation.annotationType()__			boolean checkMeta = true__			boolean fallbackToMeta = false__			if (isQualifier(type)) {_				if (!checkQualifier(bdHolder, annotation, typeConverter)) {_					fallbackToMeta = true__				}_				else {_					checkMeta = false__				}_			}_			if (checkMeta) {_				boolean foundMeta = false__				for (Annotation metaAnn : type.getAnnotations()) {_					Class<? extends Annotation> metaType = metaAnn.annotationType()__					if (isQualifier(metaType)) {_						foundMeta = true__						_						_						if ((fallbackToMeta && StringUtils.isEmpty(AnnotationUtils.getValue(metaAnn))) ||_								!checkQualifier(bdHolder, metaAnn, typeConverter)) {_							return false__						}_					}_				}_				if (fallbackToMeta && !foundMeta) {_					return false__				}_			}_		}_		return true__	};match,the,given,qualifier,annotations,against,the,candidate,bean,definition;protected,boolean,check,qualifiers,bean,definition,holder,bd,holder,annotation,annotations,to,search,if,object,utils,is,empty,annotations,to,search,return,true,simple,type,converter,type,converter,new,simple,type,converter,for,annotation,annotation,annotations,to,search,class,extends,annotation,type,annotation,annotation,type,boolean,check,meta,true,boolean,fallback,to,meta,false,if,is,qualifier,type,if,check,qualifier,bd,holder,annotation,type,converter,fallback,to,meta,true,else,check,meta,false,if,check,meta,boolean,found,meta,false,for,annotation,meta,ann,type,get,annotations,class,extends,annotation,meta,type,meta,ann,annotation,type,if,is,qualifier,meta,type,found,meta,true,if,fallback,to,meta,string,utils,is,empty,annotation,utils,get,value,meta,ann,check,qualifier,bd,holder,meta,ann,type,converter,return,false,if,fallback,to,meta,found,meta,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch);1357119239;Match the given qualifier annotations against the candidate bean definition.;protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch) {_		if (ObjectUtils.isEmpty(annotationsToSearch)) {_			return true__		}_		SimpleTypeConverter typeConverter = new SimpleTypeConverter()__		for (Annotation annotation : annotationsToSearch) {_			Class<? extends Annotation> type = annotation.annotationType()__			boolean checkMeta = true__			boolean fallbackToMeta = false__			if (isQualifier(type)) {_				if (!checkQualifier(bdHolder, annotation, typeConverter)) {_					fallbackToMeta = true__				}_				else {_					checkMeta = false__				}_			}_			if (checkMeta) {_				boolean foundMeta = false__				for (Annotation metaAnn : type.getAnnotations()) {_					Class<? extends Annotation> metaType = metaAnn.annotationType()__					if (isQualifier(metaType)) {_						foundMeta = true__						_						_						if ((fallbackToMeta && StringUtils.isEmpty(AnnotationUtils.getValue(metaAnn))) ||_								!checkQualifier(bdHolder, metaAnn, typeConverter)) {_							return false__						}_					}_				}_				if (fallbackToMeta && !foundMeta) {_					return false__				}_			}_		}_		return true__	};match,the,given,qualifier,annotations,against,the,candidate,bean,definition;protected,boolean,check,qualifiers,bean,definition,holder,bd,holder,annotation,annotations,to,search,if,object,utils,is,empty,annotations,to,search,return,true,simple,type,converter,type,converter,new,simple,type,converter,for,annotation,annotation,annotations,to,search,class,extends,annotation,type,annotation,annotation,type,boolean,check,meta,true,boolean,fallback,to,meta,false,if,is,qualifier,type,if,check,qualifier,bd,holder,annotation,type,converter,fallback,to,meta,true,else,check,meta,false,if,check,meta,boolean,found,meta,false,for,annotation,meta,ann,type,get,annotations,class,extends,annotation,meta,type,meta,ann,annotation,type,if,is,qualifier,meta,type,found,meta,true,if,fallback,to,meta,string,utils,is,empty,annotation,utils,get,value,meta,ann,check,qualifier,bd,holder,meta,ann,type,converter,return,false,if,fallback,to,meta,found,meta,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch);1368482696;Match the given qualifier annotations against the candidate bean definition.;protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch) {_		if (ObjectUtils.isEmpty(annotationsToSearch)) {_			return true__		}_		SimpleTypeConverter typeConverter = new SimpleTypeConverter()__		for (Annotation annotation : annotationsToSearch) {_			Class<? extends Annotation> type = annotation.annotationType()__			boolean checkMeta = true__			boolean fallbackToMeta = false__			if (isQualifier(type)) {_				if (!checkQualifier(bdHolder, annotation, typeConverter)) {_					fallbackToMeta = true__				}_				else {_					checkMeta = false__				}_			}_			if (checkMeta) {_				boolean foundMeta = false__				for (Annotation metaAnn : type.getAnnotations()) {_					Class<? extends Annotation> metaType = metaAnn.annotationType()__					if (isQualifier(metaType)) {_						foundMeta = true__						_						_						if ((fallbackToMeta && StringUtils.isEmpty(AnnotationUtils.getValue(metaAnn))) ||_								!checkQualifier(bdHolder, metaAnn, typeConverter)) {_							return false__						}_					}_				}_				if (fallbackToMeta && !foundMeta) {_					return false__				}_			}_		}_		return true__	};match,the,given,qualifier,annotations,against,the,candidate,bean,definition;protected,boolean,check,qualifiers,bean,definition,holder,bd,holder,annotation,annotations,to,search,if,object,utils,is,empty,annotations,to,search,return,true,simple,type,converter,type,converter,new,simple,type,converter,for,annotation,annotation,annotations,to,search,class,extends,annotation,type,annotation,annotation,type,boolean,check,meta,true,boolean,fallback,to,meta,false,if,is,qualifier,type,if,check,qualifier,bd,holder,annotation,type,converter,fallback,to,meta,true,else,check,meta,false,if,check,meta,boolean,found,meta,false,for,annotation,meta,ann,type,get,annotations,class,extends,annotation,meta,type,meta,ann,annotation,type,if,is,qualifier,meta,type,found,meta,true,if,fallback,to,meta,string,utils,is,empty,annotation,utils,get,value,meta,ann,check,qualifier,bd,holder,meta,ann,type,converter,return,false,if,fallback,to,meta,found,meta,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch);1377641679;Match the given qualifier annotations against the candidate bean definition.;protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch) {_		if (ObjectUtils.isEmpty(annotationsToSearch)) {_			return true__		}_		SimpleTypeConverter typeConverter = new SimpleTypeConverter()__		for (Annotation annotation : annotationsToSearch) {_			Class<? extends Annotation> type = annotation.annotationType()__			boolean checkMeta = true__			boolean fallbackToMeta = false__			if (isQualifier(type)) {_				if (!checkQualifier(bdHolder, annotation, typeConverter)) {_					fallbackToMeta = true__				}_				else {_					checkMeta = false__				}_			}_			if (checkMeta) {_				boolean foundMeta = false__				for (Annotation metaAnn : type.getAnnotations()) {_					Class<? extends Annotation> metaType = metaAnn.annotationType()__					if (isQualifier(metaType)) {_						foundMeta = true__						_						_						if ((fallbackToMeta && StringUtils.isEmpty(AnnotationUtils.getValue(metaAnn))) ||_								!checkQualifier(bdHolder, metaAnn, typeConverter)) {_							return false__						}_					}_				}_				if (fallbackToMeta && !foundMeta) {_					return false__				}_			}_		}_		return true__	};match,the,given,qualifier,annotations,against,the,candidate,bean,definition;protected,boolean,check,qualifiers,bean,definition,holder,bd,holder,annotation,annotations,to,search,if,object,utils,is,empty,annotations,to,search,return,true,simple,type,converter,type,converter,new,simple,type,converter,for,annotation,annotation,annotations,to,search,class,extends,annotation,type,annotation,annotation,type,boolean,check,meta,true,boolean,fallback,to,meta,false,if,is,qualifier,type,if,check,qualifier,bd,holder,annotation,type,converter,fallback,to,meta,true,else,check,meta,false,if,check,meta,boolean,found,meta,false,for,annotation,meta,ann,type,get,annotations,class,extends,annotation,meta,type,meta,ann,annotation,type,if,is,qualifier,meta,type,found,meta,true,if,fallback,to,meta,string,utils,is,empty,annotation,utils,get,value,meta,ann,check,qualifier,bd,holder,meta,ann,type,converter,return,false,if,fallback,to,meta,found,meta,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch);1381788683;Match the given qualifier annotations against the candidate bean definition.;protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch) {_		if (ObjectUtils.isEmpty(annotationsToSearch)) {_			return true__		}_		SimpleTypeConverter typeConverter = new SimpleTypeConverter()__		for (Annotation annotation : annotationsToSearch) {_			Class<? extends Annotation> type = annotation.annotationType()__			boolean checkMeta = true__			boolean fallbackToMeta = false__			if (isQualifier(type)) {_				if (!checkQualifier(bdHolder, annotation, typeConverter)) {_					fallbackToMeta = true__				}_				else {_					checkMeta = false__				}_			}_			if (checkMeta) {_				boolean foundMeta = false__				for (Annotation metaAnn : type.getAnnotations()) {_					Class<? extends Annotation> metaType = metaAnn.annotationType()__					if (isQualifier(metaType)) {_						foundMeta = true__						_						_						if ((fallbackToMeta && StringUtils.isEmpty(AnnotationUtils.getValue(metaAnn))) ||_								!checkQualifier(bdHolder, metaAnn, typeConverter)) {_							return false__						}_					}_				}_				if (fallbackToMeta && !foundMeta) {_					return false__				}_			}_		}_		return true__	};match,the,given,qualifier,annotations,against,the,candidate,bean,definition;protected,boolean,check,qualifiers,bean,definition,holder,bd,holder,annotation,annotations,to,search,if,object,utils,is,empty,annotations,to,search,return,true,simple,type,converter,type,converter,new,simple,type,converter,for,annotation,annotation,annotations,to,search,class,extends,annotation,type,annotation,annotation,type,boolean,check,meta,true,boolean,fallback,to,meta,false,if,is,qualifier,type,if,check,qualifier,bd,holder,annotation,type,converter,fallback,to,meta,true,else,check,meta,false,if,check,meta,boolean,found,meta,false,for,annotation,meta,ann,type,get,annotations,class,extends,annotation,meta,type,meta,ann,annotation,type,if,is,qualifier,meta,type,found,meta,true,if,fallback,to,meta,string,utils,is,empty,annotation,utils,get,value,meta,ann,check,qualifier,bd,holder,meta,ann,type,converter,return,false,if,fallback,to,meta,found,meta,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch);1382826936;Match the given qualifier annotations against the candidate bean definition.;protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch) {_		if (ObjectUtils.isEmpty(annotationsToSearch)) {_			return true__		}_		SimpleTypeConverter typeConverter = new SimpleTypeConverter()__		for (Annotation annotation : annotationsToSearch) {_			Class<? extends Annotation> type = annotation.annotationType()__			boolean checkMeta = true__			boolean fallbackToMeta = false__			if (isQualifier(type)) {_				if (!checkQualifier(bdHolder, annotation, typeConverter)) {_					fallbackToMeta = true__				}_				else {_					checkMeta = false__				}_			}_			if (checkMeta) {_				boolean foundMeta = false__				for (Annotation metaAnn : type.getAnnotations()) {_					Class<? extends Annotation> metaType = metaAnn.annotationType()__					if (isQualifier(metaType)) {_						foundMeta = true__						_						_						if ((fallbackToMeta && StringUtils.isEmpty(AnnotationUtils.getValue(metaAnn))) ||_								!checkQualifier(bdHolder, metaAnn, typeConverter)) {_							return false__						}_					}_				}_				if (fallbackToMeta && !foundMeta) {_					return false__				}_			}_		}_		return true__	};match,the,given,qualifier,annotations,against,the,candidate,bean,definition;protected,boolean,check,qualifiers,bean,definition,holder,bd,holder,annotation,annotations,to,search,if,object,utils,is,empty,annotations,to,search,return,true,simple,type,converter,type,converter,new,simple,type,converter,for,annotation,annotation,annotations,to,search,class,extends,annotation,type,annotation,annotation,type,boolean,check,meta,true,boolean,fallback,to,meta,false,if,is,qualifier,type,if,check,qualifier,bd,holder,annotation,type,converter,fallback,to,meta,true,else,check,meta,false,if,check,meta,boolean,found,meta,false,for,annotation,meta,ann,type,get,annotations,class,extends,annotation,meta,type,meta,ann,annotation,type,if,is,qualifier,meta,type,found,meta,true,if,fallback,to,meta,string,utils,is,empty,annotation,utils,get,value,meta,ann,check,qualifier,bd,holder,meta,ann,type,converter,return,false,if,fallback,to,meta,found,meta,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch);1386541456;Match the given qualifier annotations against the candidate bean definition.;protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch) {_		if (ObjectUtils.isEmpty(annotationsToSearch)) {_			return true__		}_		SimpleTypeConverter typeConverter = new SimpleTypeConverter()__		for (Annotation annotation : annotationsToSearch) {_			Class<? extends Annotation> type = annotation.annotationType()__			boolean checkMeta = true__			boolean fallbackToMeta = false__			if (isQualifier(type)) {_				if (!checkQualifier(bdHolder, annotation, typeConverter)) {_					fallbackToMeta = true__				}_				else {_					checkMeta = false__				}_			}_			if (checkMeta) {_				boolean foundMeta = false__				for (Annotation metaAnn : type.getAnnotations()) {_					Class<? extends Annotation> metaType = metaAnn.annotationType()__					if (isQualifier(metaType)) {_						foundMeta = true__						_						_						if ((fallbackToMeta && StringUtils.isEmpty(AnnotationUtils.getValue(metaAnn))) ||_								!checkQualifier(bdHolder, metaAnn, typeConverter)) {_							return false__						}_					}_				}_				if (fallbackToMeta && !foundMeta) {_					return false__				}_			}_		}_		return true__	};match,the,given,qualifier,annotations,against,the,candidate,bean,definition;protected,boolean,check,qualifiers,bean,definition,holder,bd,holder,annotation,annotations,to,search,if,object,utils,is,empty,annotations,to,search,return,true,simple,type,converter,type,converter,new,simple,type,converter,for,annotation,annotation,annotations,to,search,class,extends,annotation,type,annotation,annotation,type,boolean,check,meta,true,boolean,fallback,to,meta,false,if,is,qualifier,type,if,check,qualifier,bd,holder,annotation,type,converter,fallback,to,meta,true,else,check,meta,false,if,check,meta,boolean,found,meta,false,for,annotation,meta,ann,type,get,annotations,class,extends,annotation,meta,type,meta,ann,annotation,type,if,is,qualifier,meta,type,found,meta,true,if,fallback,to,meta,string,utils,is,empty,annotation,utils,get,value,meta,ann,check,qualifier,bd,holder,meta,ann,type,converter,return,false,if,fallback,to,meta,found,meta,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch);1398638841;Match the given qualifier annotations against the candidate bean definition.;protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch) {_		if (ObjectUtils.isEmpty(annotationsToSearch)) {_			return true__		}_		SimpleTypeConverter typeConverter = new SimpleTypeConverter()__		for (Annotation annotation : annotationsToSearch) {_			Class<? extends Annotation> type = annotation.annotationType()__			boolean checkMeta = true__			boolean fallbackToMeta = false__			if (isQualifier(type)) {_				if (!checkQualifier(bdHolder, annotation, typeConverter)) {_					fallbackToMeta = true__				}_				else {_					checkMeta = false__				}_			}_			if (checkMeta) {_				boolean foundMeta = false__				for (Annotation metaAnn : type.getAnnotations()) {_					Class<? extends Annotation> metaType = metaAnn.annotationType()__					if (isQualifier(metaType)) {_						foundMeta = true__						_						_						if ((fallbackToMeta && StringUtils.isEmpty(AnnotationUtils.getValue(metaAnn))) ||_								!checkQualifier(bdHolder, metaAnn, typeConverter)) {_							return false__						}_					}_				}_				if (fallbackToMeta && !foundMeta) {_					return false__				}_			}_		}_		return true__	};match,the,given,qualifier,annotations,against,the,candidate,bean,definition;protected,boolean,check,qualifiers,bean,definition,holder,bd,holder,annotation,annotations,to,search,if,object,utils,is,empty,annotations,to,search,return,true,simple,type,converter,type,converter,new,simple,type,converter,for,annotation,annotation,annotations,to,search,class,extends,annotation,type,annotation,annotation,type,boolean,check,meta,true,boolean,fallback,to,meta,false,if,is,qualifier,type,if,check,qualifier,bd,holder,annotation,type,converter,fallback,to,meta,true,else,check,meta,false,if,check,meta,boolean,found,meta,false,for,annotation,meta,ann,type,get,annotations,class,extends,annotation,meta,type,meta,ann,annotation,type,if,is,qualifier,meta,type,found,meta,true,if,fallback,to,meta,string,utils,is,empty,annotation,utils,get,value,meta,ann,check,qualifier,bd,holder,meta,ann,type,converter,return,false,if,fallback,to,meta,found,meta,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch);1413990280;Match the given qualifier annotations against the candidate bean definition.;protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch) {_		if (ObjectUtils.isEmpty(annotationsToSearch)) {_			return true__		}_		SimpleTypeConverter typeConverter = new SimpleTypeConverter()__		for (Annotation annotation : annotationsToSearch) {_			Class<? extends Annotation> type = annotation.annotationType()__			boolean checkMeta = true__			boolean fallbackToMeta = false__			if (isQualifier(type)) {_				if (!checkQualifier(bdHolder, annotation, typeConverter)) {_					fallbackToMeta = true__				}_				else {_					checkMeta = false__				}_			}_			if (checkMeta) {_				boolean foundMeta = false__				for (Annotation metaAnn : type.getAnnotations()) {_					Class<? extends Annotation> metaType = metaAnn.annotationType()__					if (isQualifier(metaType)) {_						foundMeta = true__						_						_						if ((fallbackToMeta && StringUtils.isEmpty(AnnotationUtils.getValue(metaAnn))) ||_								!checkQualifier(bdHolder, metaAnn, typeConverter)) {_							return false__						}_					}_				}_				if (fallbackToMeta && !foundMeta) {_					return false__				}_			}_		}_		return true__	};match,the,given,qualifier,annotations,against,the,candidate,bean,definition;protected,boolean,check,qualifiers,bean,definition,holder,bd,holder,annotation,annotations,to,search,if,object,utils,is,empty,annotations,to,search,return,true,simple,type,converter,type,converter,new,simple,type,converter,for,annotation,annotation,annotations,to,search,class,extends,annotation,type,annotation,annotation,type,boolean,check,meta,true,boolean,fallback,to,meta,false,if,is,qualifier,type,if,check,qualifier,bd,holder,annotation,type,converter,fallback,to,meta,true,else,check,meta,false,if,check,meta,boolean,found,meta,false,for,annotation,meta,ann,type,get,annotations,class,extends,annotation,meta,type,meta,ann,annotation,type,if,is,qualifier,meta,type,found,meta,true,if,fallback,to,meta,string,utils,is,empty,annotation,utils,get,value,meta,ann,check,qualifier,bd,holder,meta,ann,type,converter,return,false,if,fallback,to,meta,found,meta,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch);1432125256;Match the given qualifier annotations against the candidate bean definition.;protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch) {_		if (ObjectUtils.isEmpty(annotationsToSearch)) {_			return true__		}_		SimpleTypeConverter typeConverter = new SimpleTypeConverter()__		for (Annotation annotation : annotationsToSearch) {_			Class<? extends Annotation> type = annotation.annotationType()__			boolean checkMeta = true__			boolean fallbackToMeta = false__			if (isQualifier(type)) {_				if (!checkQualifier(bdHolder, annotation, typeConverter)) {_					fallbackToMeta = true__				}_				else {_					checkMeta = false__				}_			}_			if (checkMeta) {_				boolean foundMeta = false__				for (Annotation metaAnn : type.getAnnotations()) {_					Class<? extends Annotation> metaType = metaAnn.annotationType()__					if (isQualifier(metaType)) {_						foundMeta = true__						_						_						if ((fallbackToMeta && StringUtils.isEmpty(AnnotationUtils.getValue(metaAnn))) ||_								!checkQualifier(bdHolder, metaAnn, typeConverter)) {_							return false__						}_					}_				}_				if (fallbackToMeta && !foundMeta) {_					return false__				}_			}_		}_		return true__	};match,the,given,qualifier,annotations,against,the,candidate,bean,definition;protected,boolean,check,qualifiers,bean,definition,holder,bd,holder,annotation,annotations,to,search,if,object,utils,is,empty,annotations,to,search,return,true,simple,type,converter,type,converter,new,simple,type,converter,for,annotation,annotation,annotations,to,search,class,extends,annotation,type,annotation,annotation,type,boolean,check,meta,true,boolean,fallback,to,meta,false,if,is,qualifier,type,if,check,qualifier,bd,holder,annotation,type,converter,fallback,to,meta,true,else,check,meta,false,if,check,meta,boolean,found,meta,false,for,annotation,meta,ann,type,get,annotations,class,extends,annotation,meta,type,meta,ann,annotation,type,if,is,qualifier,meta,type,found,meta,true,if,fallback,to,meta,string,utils,is,empty,annotation,utils,get,value,meta,ann,check,qualifier,bd,holder,meta,ann,type,converter,return,false,if,fallback,to,meta,found,meta,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch);1451408536;Match the given qualifier annotations against the candidate bean definition.;protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch) {_		if (ObjectUtils.isEmpty(annotationsToSearch)) {_			return true__		}_		SimpleTypeConverter typeConverter = new SimpleTypeConverter()__		for (Annotation annotation : annotationsToSearch) {_			Class<? extends Annotation> type = annotation.annotationType()__			boolean checkMeta = true__			boolean fallbackToMeta = false__			if (isQualifier(type)) {_				if (!checkQualifier(bdHolder, annotation, typeConverter)) {_					fallbackToMeta = true__				}_				else {_					checkMeta = false__				}_			}_			if (checkMeta) {_				boolean foundMeta = false__				for (Annotation metaAnn : type.getAnnotations()) {_					Class<? extends Annotation> metaType = metaAnn.annotationType()__					if (isQualifier(metaType)) {_						foundMeta = true__						_						_						if ((fallbackToMeta && StringUtils.isEmpty(AnnotationUtils.getValue(metaAnn))) ||_								!checkQualifier(bdHolder, metaAnn, typeConverter)) {_							return false__						}_					}_				}_				if (fallbackToMeta && !foundMeta) {_					return false__				}_			}_		}_		return true__	};match,the,given,qualifier,annotations,against,the,candidate,bean,definition;protected,boolean,check,qualifiers,bean,definition,holder,bd,holder,annotation,annotations,to,search,if,object,utils,is,empty,annotations,to,search,return,true,simple,type,converter,type,converter,new,simple,type,converter,for,annotation,annotation,annotations,to,search,class,extends,annotation,type,annotation,annotation,type,boolean,check,meta,true,boolean,fallback,to,meta,false,if,is,qualifier,type,if,check,qualifier,bd,holder,annotation,type,converter,fallback,to,meta,true,else,check,meta,false,if,check,meta,boolean,found,meta,false,for,annotation,meta,ann,type,get,annotations,class,extends,annotation,meta,type,meta,ann,annotation,type,if,is,qualifier,meta,type,found,meta,true,if,fallback,to,meta,string,utils,is,empty,annotation,utils,get,value,meta,ann,check,qualifier,bd,holder,meta,ann,type,converter,return,false,if,fallback,to,meta,found,meta,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch);1467730834;Match the given qualifier annotations against the candidate bean definition.;protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch) {_		if (ObjectUtils.isEmpty(annotationsToSearch)) {_			return true__		}_		SimpleTypeConverter typeConverter = new SimpleTypeConverter()__		for (Annotation annotation : annotationsToSearch) {_			Class<? extends Annotation> type = annotation.annotationType()__			boolean checkMeta = true__			boolean fallbackToMeta = false__			if (isQualifier(type)) {_				if (!checkQualifier(bdHolder, annotation, typeConverter)) {_					fallbackToMeta = true__				}_				else {_					checkMeta = false__				}_			}_			if (checkMeta) {_				boolean foundMeta = false__				for (Annotation metaAnn : type.getAnnotations()) {_					Class<? extends Annotation> metaType = metaAnn.annotationType()__					if (isQualifier(metaType)) {_						foundMeta = true__						_						_						if ((fallbackToMeta && StringUtils.isEmpty(AnnotationUtils.getValue(metaAnn))) ||_								!checkQualifier(bdHolder, metaAnn, typeConverter)) {_							return false__						}_					}_				}_				if (fallbackToMeta && !foundMeta) {_					return false__				}_			}_		}_		return true__	};match,the,given,qualifier,annotations,against,the,candidate,bean,definition;protected,boolean,check,qualifiers,bean,definition,holder,bd,holder,annotation,annotations,to,search,if,object,utils,is,empty,annotations,to,search,return,true,simple,type,converter,type,converter,new,simple,type,converter,for,annotation,annotation,annotations,to,search,class,extends,annotation,type,annotation,annotation,type,boolean,check,meta,true,boolean,fallback,to,meta,false,if,is,qualifier,type,if,check,qualifier,bd,holder,annotation,type,converter,fallback,to,meta,true,else,check,meta,false,if,check,meta,boolean,found,meta,false,for,annotation,meta,ann,type,get,annotations,class,extends,annotation,meta,type,meta,ann,annotation,type,if,is,qualifier,meta,type,found,meta,true,if,fallback,to,meta,string,utils,is,empty,annotation,utils,get,value,meta,ann,check,qualifier,bd,holder,meta,ann,type,converter,return,false,if,fallback,to,meta,found,meta,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch);1474010431;Match the given qualifier annotations against the candidate bean definition.;protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch) {_		if (ObjectUtils.isEmpty(annotationsToSearch)) {_			return true__		}_		SimpleTypeConverter typeConverter = new SimpleTypeConverter()__		for (Annotation annotation : annotationsToSearch) {_			Class<? extends Annotation> type = annotation.annotationType()__			boolean checkMeta = true__			boolean fallbackToMeta = false__			if (isQualifier(type)) {_				if (!checkQualifier(bdHolder, annotation, typeConverter)) {_					fallbackToMeta = true__				}_				else {_					checkMeta = false__				}_			}_			if (checkMeta) {_				boolean foundMeta = false__				for (Annotation metaAnn : type.getAnnotations()) {_					Class<? extends Annotation> metaType = metaAnn.annotationType()__					if (isQualifier(metaType)) {_						foundMeta = true__						_						_						if ((fallbackToMeta && StringUtils.isEmpty(AnnotationUtils.getValue(metaAnn))) ||_								!checkQualifier(bdHolder, metaAnn, typeConverter)) {_							return false__						}_					}_				}_				if (fallbackToMeta && !foundMeta) {_					return false__				}_			}_		}_		return true__	};match,the,given,qualifier,annotations,against,the,candidate,bean,definition;protected,boolean,check,qualifiers,bean,definition,holder,bd,holder,annotation,annotations,to,search,if,object,utils,is,empty,annotations,to,search,return,true,simple,type,converter,type,converter,new,simple,type,converter,for,annotation,annotation,annotations,to,search,class,extends,annotation,type,annotation,annotation,type,boolean,check,meta,true,boolean,fallback,to,meta,false,if,is,qualifier,type,if,check,qualifier,bd,holder,annotation,type,converter,fallback,to,meta,true,else,check,meta,false,if,check,meta,boolean,found,meta,false,for,annotation,meta,ann,type,get,annotations,class,extends,annotation,meta,type,meta,ann,annotation,type,if,is,qualifier,meta,type,found,meta,true,if,fallback,to,meta,string,utils,is,empty,annotation,utils,get,value,meta,ann,check,qualifier,bd,holder,meta,ann,type,converter,return,false,if,fallback,to,meta,found,meta,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch);1493811736;Match the given qualifier annotations against the candidate bean definition.;protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch) {_		if (ObjectUtils.isEmpty(annotationsToSearch)) {_			return true__		}_		SimpleTypeConverter typeConverter = new SimpleTypeConverter()__		for (Annotation annotation : annotationsToSearch) {_			Class<? extends Annotation> type = annotation.annotationType()__			boolean checkMeta = true__			boolean fallbackToMeta = false__			if (isQualifier(type)) {_				if (!checkQualifier(bdHolder, annotation, typeConverter)) {_					fallbackToMeta = true__				}_				else {_					checkMeta = false__				}_			}_			if (checkMeta) {_				boolean foundMeta = false__				for (Annotation metaAnn : type.getAnnotations()) {_					Class<? extends Annotation> metaType = metaAnn.annotationType()__					if (isQualifier(metaType)) {_						foundMeta = true__						_						_						if ((fallbackToMeta && StringUtils.isEmpty(AnnotationUtils.getValue(metaAnn))) ||_								!checkQualifier(bdHolder, metaAnn, typeConverter)) {_							return false__						}_					}_				}_				if (fallbackToMeta && !foundMeta) {_					return false__				}_			}_		}_		return true__	};match,the,given,qualifier,annotations,against,the,candidate,bean,definition;protected,boolean,check,qualifiers,bean,definition,holder,bd,holder,annotation,annotations,to,search,if,object,utils,is,empty,annotations,to,search,return,true,simple,type,converter,type,converter,new,simple,type,converter,for,annotation,annotation,annotations,to,search,class,extends,annotation,type,annotation,annotation,type,boolean,check,meta,true,boolean,fallback,to,meta,false,if,is,qualifier,type,if,check,qualifier,bd,holder,annotation,type,converter,fallback,to,meta,true,else,check,meta,false,if,check,meta,boolean,found,meta,false,for,annotation,meta,ann,type,get,annotations,class,extends,annotation,meta,type,meta,ann,annotation,type,if,is,qualifier,meta,type,found,meta,true,if,fallback,to,meta,string,utils,is,empty,annotation,utils,get,value,meta,ann,check,qualifier,bd,holder,meta,ann,type,converter,return,false,if,fallback,to,meta,found,meta,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch);1495868221;Match the given qualifier annotations against the candidate bean definition.;protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch) {_		if (ObjectUtils.isEmpty(annotationsToSearch)) {_			return true__		}_		SimpleTypeConverter typeConverter = new SimpleTypeConverter()__		for (Annotation annotation : annotationsToSearch) {_			Class<? extends Annotation> type = annotation.annotationType()__			boolean checkMeta = true__			boolean fallbackToMeta = false__			if (isQualifier(type)) {_				if (!checkQualifier(bdHolder, annotation, typeConverter)) {_					fallbackToMeta = true__				}_				else {_					checkMeta = false__				}_			}_			if (checkMeta) {_				boolean foundMeta = false__				for (Annotation metaAnn : type.getAnnotations()) {_					Class<? extends Annotation> metaType = metaAnn.annotationType()__					if (isQualifier(metaType)) {_						foundMeta = true__						_						_						if ((fallbackToMeta && StringUtils.isEmpty(AnnotationUtils.getValue(metaAnn))) ||_								!checkQualifier(bdHolder, metaAnn, typeConverter)) {_							return false__						}_					}_				}_				if (fallbackToMeta && !foundMeta) {_					return false__				}_			}_		}_		return true__	};match,the,given,qualifier,annotations,against,the,candidate,bean,definition;protected,boolean,check,qualifiers,bean,definition,holder,bd,holder,annotation,annotations,to,search,if,object,utils,is,empty,annotations,to,search,return,true,simple,type,converter,type,converter,new,simple,type,converter,for,annotation,annotation,annotations,to,search,class,extends,annotation,type,annotation,annotation,type,boolean,check,meta,true,boolean,fallback,to,meta,false,if,is,qualifier,type,if,check,qualifier,bd,holder,annotation,type,converter,fallback,to,meta,true,else,check,meta,false,if,check,meta,boolean,found,meta,false,for,annotation,meta,ann,type,get,annotations,class,extends,annotation,meta,type,meta,ann,annotation,type,if,is,qualifier,meta,type,found,meta,true,if,fallback,to,meta,string,utils,is,empty,annotation,utils,get,value,meta,ann,check,qualifier,bd,holder,meta,ann,type,converter,return,false,if,fallback,to,meta,found,meta,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch);1496837955;Match the given qualifier annotations against the candidate bean definition.;protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch) {_		if (ObjectUtils.isEmpty(annotationsToSearch)) {_			return true__		}_		SimpleTypeConverter typeConverter = new SimpleTypeConverter()__		for (Annotation annotation : annotationsToSearch) {_			Class<? extends Annotation> type = annotation.annotationType()__			boolean checkMeta = true__			boolean fallbackToMeta = false__			if (isQualifier(type)) {_				if (!checkQualifier(bdHolder, annotation, typeConverter)) {_					fallbackToMeta = true__				}_				else {_					checkMeta = false__				}_			}_			if (checkMeta) {_				boolean foundMeta = false__				for (Annotation metaAnn : type.getAnnotations()) {_					Class<? extends Annotation> metaType = metaAnn.annotationType()__					if (isQualifier(metaType)) {_						foundMeta = true__						_						_						if ((fallbackToMeta && StringUtils.isEmpty(AnnotationUtils.getValue(metaAnn))) ||_								!checkQualifier(bdHolder, metaAnn, typeConverter)) {_							return false__						}_					}_				}_				if (fallbackToMeta && !foundMeta) {_					return false__				}_			}_		}_		return true__	};match,the,given,qualifier,annotations,against,the,candidate,bean,definition;protected,boolean,check,qualifiers,bean,definition,holder,bd,holder,annotation,annotations,to,search,if,object,utils,is,empty,annotations,to,search,return,true,simple,type,converter,type,converter,new,simple,type,converter,for,annotation,annotation,annotations,to,search,class,extends,annotation,type,annotation,annotation,type,boolean,check,meta,true,boolean,fallback,to,meta,false,if,is,qualifier,type,if,check,qualifier,bd,holder,annotation,type,converter,fallback,to,meta,true,else,check,meta,false,if,check,meta,boolean,found,meta,false,for,annotation,meta,ann,type,get,annotations,class,extends,annotation,meta,type,meta,ann,annotation,type,if,is,qualifier,meta,type,found,meta,true,if,fallback,to,meta,string,utils,is,empty,annotation,utils,get,value,meta,ann,check,qualifier,bd,holder,meta,ann,type,converter,return,false,if,fallback,to,meta,found,meta,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch);1502974979;Match the given qualifier annotations against the candidate bean definition.;protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch) {_		if (ObjectUtils.isEmpty(annotationsToSearch)) {_			return true__		}_		SimpleTypeConverter typeConverter = new SimpleTypeConverter()__		for (Annotation annotation : annotationsToSearch) {_			Class<? extends Annotation> type = annotation.annotationType()__			boolean checkMeta = true__			boolean fallbackToMeta = false__			if (isQualifier(type)) {_				if (!checkQualifier(bdHolder, annotation, typeConverter)) {_					fallbackToMeta = true__				}_				else {_					checkMeta = false__				}_			}_			if (checkMeta) {_				boolean foundMeta = false__				for (Annotation metaAnn : type.getAnnotations()) {_					Class<? extends Annotation> metaType = metaAnn.annotationType()__					if (isQualifier(metaType)) {_						foundMeta = true__						_						_						if ((fallbackToMeta && StringUtils.isEmpty(AnnotationUtils.getValue(metaAnn))) ||_								!checkQualifier(bdHolder, metaAnn, typeConverter)) {_							return false__						}_					}_				}_				if (fallbackToMeta && !foundMeta) {_					return false__				}_			}_		}_		return true__	};match,the,given,qualifier,annotations,against,the,candidate,bean,definition;protected,boolean,check,qualifiers,bean,definition,holder,bd,holder,annotation,annotations,to,search,if,object,utils,is,empty,annotations,to,search,return,true,simple,type,converter,type,converter,new,simple,type,converter,for,annotation,annotation,annotations,to,search,class,extends,annotation,type,annotation,annotation,type,boolean,check,meta,true,boolean,fallback,to,meta,false,if,is,qualifier,type,if,check,qualifier,bd,holder,annotation,type,converter,fallback,to,meta,true,else,check,meta,false,if,check,meta,boolean,found,meta,false,for,annotation,meta,ann,type,get,annotations,class,extends,annotation,meta,type,meta,ann,annotation,type,if,is,qualifier,meta,type,found,meta,true,if,fallback,to,meta,string,utils,is,empty,annotation,utils,get,value,meta,ann,check,qualifier,bd,holder,meta,ann,type,converter,return,false,if,fallback,to,meta,found,meta,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch);1534347014;Match the given qualifier annotations against the candidate bean definition.;protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch) {_		if (ObjectUtils.isEmpty(annotationsToSearch)) {_			return true__		}_		SimpleTypeConverter typeConverter = new SimpleTypeConverter()__		for (Annotation annotation : annotationsToSearch) {_			Class<? extends Annotation> type = annotation.annotationType()__			boolean checkMeta = true__			boolean fallbackToMeta = false__			if (isQualifier(type)) {_				if (!checkQualifier(bdHolder, annotation, typeConverter)) {_					fallbackToMeta = true__				}_				else {_					checkMeta = false__				}_			}_			if (checkMeta) {_				boolean foundMeta = false__				for (Annotation metaAnn : type.getAnnotations()) {_					Class<? extends Annotation> metaType = metaAnn.annotationType()__					if (isQualifier(metaType)) {_						foundMeta = true__						_						_						if ((fallbackToMeta && StringUtils.isEmpty(AnnotationUtils.getValue(metaAnn))) ||_								!checkQualifier(bdHolder, metaAnn, typeConverter)) {_							return false__						}_					}_				}_				if (fallbackToMeta && !foundMeta) {_					return false__				}_			}_		}_		return true__	};match,the,given,qualifier,annotations,against,the,candidate,bean,definition;protected,boolean,check,qualifiers,bean,definition,holder,bd,holder,annotation,annotations,to,search,if,object,utils,is,empty,annotations,to,search,return,true,simple,type,converter,type,converter,new,simple,type,converter,for,annotation,annotation,annotations,to,search,class,extends,annotation,type,annotation,annotation,type,boolean,check,meta,true,boolean,fallback,to,meta,false,if,is,qualifier,type,if,check,qualifier,bd,holder,annotation,type,converter,fallback,to,meta,true,else,check,meta,false,if,check,meta,boolean,found,meta,false,for,annotation,meta,ann,type,get,annotations,class,extends,annotation,meta,type,meta,ann,annotation,type,if,is,qualifier,meta,type,found,meta,true,if,fallback,to,meta,string,utils,is,empty,annotation,utils,get,value,meta,ann,check,qualifier,bd,holder,meta,ann,type,converter,return,false,if,fallback,to,meta,found,meta,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch);1536855799;Match the given qualifier annotations against the candidate bean definition.;protected boolean checkQualifiers(BeanDefinitionHolder bdHolder, Annotation[] annotationsToSearch) {_		if (ObjectUtils.isEmpty(annotationsToSearch)) {_			return true__		}_		SimpleTypeConverter typeConverter = new SimpleTypeConverter()__		for (Annotation annotation : annotationsToSearch) {_			Class<? extends Annotation> type = annotation.annotationType()__			boolean checkMeta = true__			boolean fallbackToMeta = false__			if (isQualifier(type)) {_				if (!checkQualifier(bdHolder, annotation, typeConverter)) {_					fallbackToMeta = true__				}_				else {_					checkMeta = false__				}_			}_			if (checkMeta) {_				boolean foundMeta = false__				for (Annotation metaAnn : type.getAnnotations()) {_					Class<? extends Annotation> metaType = metaAnn.annotationType()__					if (isQualifier(metaType)) {_						foundMeta = true__						_						_						if ((fallbackToMeta && StringUtils.isEmpty(AnnotationUtils.getValue(metaAnn))) ||_								!checkQualifier(bdHolder, metaAnn, typeConverter)) {_							return false__						}_					}_				}_				if (fallbackToMeta && !foundMeta) {_					return false__				}_			}_		}_		return true__	};match,the,given,qualifier,annotations,against,the,candidate,bean,definition;protected,boolean,check,qualifiers,bean,definition,holder,bd,holder,annotation,annotations,to,search,if,object,utils,is,empty,annotations,to,search,return,true,simple,type,converter,type,converter,new,simple,type,converter,for,annotation,annotation,annotations,to,search,class,extends,annotation,type,annotation,annotation,type,boolean,check,meta,true,boolean,fallback,to,meta,false,if,is,qualifier,type,if,check,qualifier,bd,holder,annotation,type,converter,fallback,to,meta,true,else,check,meta,false,if,check,meta,boolean,found,meta,false,for,annotation,meta,ann,type,get,annotations,class,extends,annotation,meta,type,meta,ann,annotation,type,if,is,qualifier,meta,type,found,meta,true,if,fallback,to,meta,string,utils,is,empty,annotation,utils,get,value,meta,ann,check,qualifier,bd,holder,meta,ann,type,converter,return,false,if,fallback,to,meta,found,meta,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> protected Object findValue(Annotation[] annotationsToSearch);1328020251;Determine a suggested value from any of the given candidate annotations.;protected Object findValue(Annotation[] annotationsToSearch) {_		for (Annotation annotation : annotationsToSearch) {_			if (this.valueAnnotationType.isInstance(annotation)) {_				Object value = AnnotationUtils.getValue(annotation)__				if (value == null) {_					throw new IllegalStateException("Value annotation must have a value attribute")__				}_				return value__			}_		}_		return null__	};determine,a,suggested,value,from,any,of,the,given,candidate,annotations;protected,object,find,value,annotation,annotations,to,search,for,annotation,annotation,annotations,to,search,if,this,value,annotation,type,is,instance,annotation,object,value,annotation,utils,get,value,annotation,if,value,null,throw,new,illegal,state,exception,value,annotation,must,have,a,value,attribute,return,value,return,null
QualifierAnnotationAutowireCandidateResolver -> protected Object findValue(Annotation[] annotationsToSearch);1351681817;Determine a suggested value from any of the given candidate annotations.;protected Object findValue(Annotation[] annotationsToSearch) {_		for (Annotation annotation : annotationsToSearch) {_			if (this.valueAnnotationType.isInstance(annotation)) {_				return extractValue(annotation)__			}_		}_		for (Annotation annotation : annotationsToSearch) {_			Annotation metaAnn = annotation.annotationType().getAnnotation(this.valueAnnotationType)__			if (metaAnn != null) {_				return extractValue(metaAnn)__			}_		}_		return null__	};determine,a,suggested,value,from,any,of,the,given,candidate,annotations;protected,object,find,value,annotation,annotations,to,search,for,annotation,annotation,annotations,to,search,if,this,value,annotation,type,is,instance,annotation,return,extract,value,annotation,for,annotation,annotation,annotations,to,search,annotation,meta,ann,annotation,annotation,type,get,annotation,this,value,annotation,type,if,meta,ann,null,return,extract,value,meta,ann,return,null
QualifierAnnotationAutowireCandidateResolver -> protected Object findValue(Annotation[] annotationsToSearch);1356735495;Determine a suggested value from any of the given candidate annotations.;protected Object findValue(Annotation[] annotationsToSearch) {_		for (Annotation annotation : annotationsToSearch) {_			if (this.valueAnnotationType.isInstance(annotation)) {_				return extractValue(annotation)__			}_		}_		for (Annotation annotation : annotationsToSearch) {_			Annotation metaAnn = annotation.annotationType().getAnnotation(this.valueAnnotationType)__			if (metaAnn != null) {_				return extractValue(metaAnn)__			}_		}_		return null__	};determine,a,suggested,value,from,any,of,the,given,candidate,annotations;protected,object,find,value,annotation,annotations,to,search,for,annotation,annotation,annotations,to,search,if,this,value,annotation,type,is,instance,annotation,return,extract,value,annotation,for,annotation,annotation,annotations,to,search,annotation,meta,ann,annotation,annotation,type,get,annotation,this,value,annotation,type,if,meta,ann,null,return,extract,value,meta,ann,return,null
QualifierAnnotationAutowireCandidateResolver -> protected Object findValue(Annotation[] annotationsToSearch);1357119239;Determine a suggested value from any of the given candidate annotations.;protected Object findValue(Annotation[] annotationsToSearch) {_		for (Annotation annotation : annotationsToSearch) {_			if (this.valueAnnotationType.isInstance(annotation)) {_				return extractValue(annotation)__			}_		}_		for (Annotation annotation : annotationsToSearch) {_			Annotation metaAnn = annotation.annotationType().getAnnotation(this.valueAnnotationType)__			if (metaAnn != null) {_				return extractValue(metaAnn)__			}_		}_		return null__	};determine,a,suggested,value,from,any,of,the,given,candidate,annotations;protected,object,find,value,annotation,annotations,to,search,for,annotation,annotation,annotations,to,search,if,this,value,annotation,type,is,instance,annotation,return,extract,value,annotation,for,annotation,annotation,annotations,to,search,annotation,meta,ann,annotation,annotation,type,get,annotation,this,value,annotation,type,if,meta,ann,null,return,extract,value,meta,ann,return,null
QualifierAnnotationAutowireCandidateResolver -> protected Object findValue(Annotation[] annotationsToSearch);1368482696;Determine a suggested value from any of the given candidate annotations.;protected Object findValue(Annotation[] annotationsToSearch) {_		for (Annotation annotation : annotationsToSearch) {_			if (this.valueAnnotationType.isInstance(annotation)) {_				return extractValue(annotation)__			}_		}_		for (Annotation annotation : annotationsToSearch) {_			Annotation metaAnn = annotation.annotationType().getAnnotation(this.valueAnnotationType)__			if (metaAnn != null) {_				return extractValue(metaAnn)__			}_		}_		return null__	};determine,a,suggested,value,from,any,of,the,given,candidate,annotations;protected,object,find,value,annotation,annotations,to,search,for,annotation,annotation,annotations,to,search,if,this,value,annotation,type,is,instance,annotation,return,extract,value,annotation,for,annotation,annotation,annotations,to,search,annotation,meta,ann,annotation,annotation,type,get,annotation,this,value,annotation,type,if,meta,ann,null,return,extract,value,meta,ann,return,null
QualifierAnnotationAutowireCandidateResolver -> protected Object findValue(Annotation[] annotationsToSearch);1377641679;Determine a suggested value from any of the given candidate annotations.;protected Object findValue(Annotation[] annotationsToSearch) {_		for (Annotation annotation : annotationsToSearch) {_			if (this.valueAnnotationType.isInstance(annotation)) {_				return extractValue(annotation)__			}_		}_		for (Annotation annotation : annotationsToSearch) {_			Annotation metaAnn = annotation.annotationType().getAnnotation(this.valueAnnotationType)__			if (metaAnn != null) {_				return extractValue(metaAnn)__			}_		}_		return null__	};determine,a,suggested,value,from,any,of,the,given,candidate,annotations;protected,object,find,value,annotation,annotations,to,search,for,annotation,annotation,annotations,to,search,if,this,value,annotation,type,is,instance,annotation,return,extract,value,annotation,for,annotation,annotation,annotations,to,search,annotation,meta,ann,annotation,annotation,type,get,annotation,this,value,annotation,type,if,meta,ann,null,return,extract,value,meta,ann,return,null
QualifierAnnotationAutowireCandidateResolver -> protected Object findValue(Annotation[] annotationsToSearch);1381788683;Determine a suggested value from any of the given candidate annotations.;protected Object findValue(Annotation[] annotationsToSearch) {_		for (Annotation annotation : annotationsToSearch) {_			if (this.valueAnnotationType.isInstance(annotation)) {_				return extractValue(annotation)__			}_		}_		for (Annotation annotation : annotationsToSearch) {_			Annotation metaAnn = annotation.annotationType().getAnnotation(this.valueAnnotationType)__			if (metaAnn != null) {_				return extractValue(metaAnn)__			}_		}_		return null__	};determine,a,suggested,value,from,any,of,the,given,candidate,annotations;protected,object,find,value,annotation,annotations,to,search,for,annotation,annotation,annotations,to,search,if,this,value,annotation,type,is,instance,annotation,return,extract,value,annotation,for,annotation,annotation,annotations,to,search,annotation,meta,ann,annotation,annotation,type,get,annotation,this,value,annotation,type,if,meta,ann,null,return,extract,value,meta,ann,return,null
QualifierAnnotationAutowireCandidateResolver -> protected Object findValue(Annotation[] annotationsToSearch);1382826936;Determine a suggested value from any of the given candidate annotations.;protected Object findValue(Annotation[] annotationsToSearch) {_		for (Annotation annotation : annotationsToSearch) {_			if (this.valueAnnotationType.isInstance(annotation)) {_				return extractValue(annotation)__			}_		}_		for (Annotation annotation : annotationsToSearch) {_			Annotation metaAnn = annotation.annotationType().getAnnotation(this.valueAnnotationType)__			if (metaAnn != null) {_				return extractValue(metaAnn)__			}_		}_		return null__	};determine,a,suggested,value,from,any,of,the,given,candidate,annotations;protected,object,find,value,annotation,annotations,to,search,for,annotation,annotation,annotations,to,search,if,this,value,annotation,type,is,instance,annotation,return,extract,value,annotation,for,annotation,annotation,annotations,to,search,annotation,meta,ann,annotation,annotation,type,get,annotation,this,value,annotation,type,if,meta,ann,null,return,extract,value,meta,ann,return,null
QualifierAnnotationAutowireCandidateResolver -> protected Object findValue(Annotation[] annotationsToSearch);1386541456;Determine a suggested value from any of the given candidate annotations.;protected Object findValue(Annotation[] annotationsToSearch) {_		for (Annotation annotation : annotationsToSearch) {_			if (this.valueAnnotationType.isInstance(annotation)) {_				return extractValue(annotation)__			}_		}_		for (Annotation annotation : annotationsToSearch) {_			Annotation metaAnn = annotation.annotationType().getAnnotation(this.valueAnnotationType)__			if (metaAnn != null) {_				return extractValue(metaAnn)__			}_		}_		return null__	};determine,a,suggested,value,from,any,of,the,given,candidate,annotations;protected,object,find,value,annotation,annotations,to,search,for,annotation,annotation,annotations,to,search,if,this,value,annotation,type,is,instance,annotation,return,extract,value,annotation,for,annotation,annotation,annotations,to,search,annotation,meta,ann,annotation,annotation,type,get,annotation,this,value,annotation,type,if,meta,ann,null,return,extract,value,meta,ann,return,null
QualifierAnnotationAutowireCandidateResolver -> protected Object findValue(Annotation[] annotationsToSearch);1398638841;Determine a suggested value from any of the given candidate annotations.;protected Object findValue(Annotation[] annotationsToSearch) {_		for (Annotation annotation : annotationsToSearch) {_			if (this.valueAnnotationType.isInstance(annotation)) {_				return extractValue(annotation)__			}_		}_		for (Annotation annotation : annotationsToSearch) {_			Annotation metaAnn = annotation.annotationType().getAnnotation(this.valueAnnotationType)__			if (metaAnn != null) {_				return extractValue(metaAnn)__			}_		}_		return null__	};determine,a,suggested,value,from,any,of,the,given,candidate,annotations;protected,object,find,value,annotation,annotations,to,search,for,annotation,annotation,annotations,to,search,if,this,value,annotation,type,is,instance,annotation,return,extract,value,annotation,for,annotation,annotation,annotations,to,search,annotation,meta,ann,annotation,annotation,type,get,annotation,this,value,annotation,type,if,meta,ann,null,return,extract,value,meta,ann,return,null
QualifierAnnotationAutowireCandidateResolver -> protected Object findValue(Annotation[] annotationsToSearch);1413990280;Determine a suggested value from any of the given candidate annotations.;protected Object findValue(Annotation[] annotationsToSearch) {_		for (Annotation annotation : annotationsToSearch) {_			if (this.valueAnnotationType.isInstance(annotation)) {_				return extractValue(annotation)__			}_		}_		for (Annotation annotation : annotationsToSearch) {_			Annotation metaAnn = annotation.annotationType().getAnnotation(this.valueAnnotationType)__			if (metaAnn != null) {_				return extractValue(metaAnn)__			}_		}_		return null__	};determine,a,suggested,value,from,any,of,the,given,candidate,annotations;protected,object,find,value,annotation,annotations,to,search,for,annotation,annotation,annotations,to,search,if,this,value,annotation,type,is,instance,annotation,return,extract,value,annotation,for,annotation,annotation,annotations,to,search,annotation,meta,ann,annotation,annotation,type,get,annotation,this,value,annotation,type,if,meta,ann,null,return,extract,value,meta,ann,return,null
QualifierAnnotationAutowireCandidateResolver -> protected Object findValue(Annotation[] annotationsToSearch);1432125256;Determine a suggested value from any of the given candidate annotations.;protected Object findValue(Annotation[] annotationsToSearch) {_		for (Annotation annotation : annotationsToSearch) {_			if (this.valueAnnotationType.isInstance(annotation)) {_				return extractValue(annotation)__			}_		}_		for (Annotation annotation : annotationsToSearch) {_			Annotation metaAnn = annotation.annotationType().getAnnotation(this.valueAnnotationType)__			if (metaAnn != null) {_				return extractValue(metaAnn)__			}_		}_		return null__	};determine,a,suggested,value,from,any,of,the,given,candidate,annotations;protected,object,find,value,annotation,annotations,to,search,for,annotation,annotation,annotations,to,search,if,this,value,annotation,type,is,instance,annotation,return,extract,value,annotation,for,annotation,annotation,annotations,to,search,annotation,meta,ann,annotation,annotation,type,get,annotation,this,value,annotation,type,if,meta,ann,null,return,extract,value,meta,ann,return,null
QualifierAnnotationAutowireCandidateResolver -> protected Object findValue(Annotation[] annotationsToSearch);1451408536;Determine a suggested value from any of the given candidate annotations.;protected Object findValue(Annotation[] annotationsToSearch) {_		AnnotationAttributes attr = AnnotatedElementUtils.getMergedAnnotationAttributes(_				AnnotatedElementUtils.forAnnotations(annotationsToSearch), this.valueAnnotationType)__		if (attr != null) {_			return extractValue(attr)__		}_		return null__	};determine,a,suggested,value,from,any,of,the,given,candidate,annotations;protected,object,find,value,annotation,annotations,to,search,annotation,attributes,attr,annotated,element,utils,get,merged,annotation,attributes,annotated,element,utils,for,annotations,annotations,to,search,this,value,annotation,type,if,attr,null,return,extract,value,attr,return,null
QualifierAnnotationAutowireCandidateResolver -> protected Object findValue(Annotation[] annotationsToSearch);1467730834;Determine a suggested value from any of the given candidate annotations.;protected Object findValue(Annotation[] annotationsToSearch) {_		AnnotationAttributes attr = AnnotatedElementUtils.getMergedAnnotationAttributes(_				AnnotatedElementUtils.forAnnotations(annotationsToSearch), this.valueAnnotationType)__		if (attr != null) {_			return extractValue(attr)__		}_		return null__	};determine,a,suggested,value,from,any,of,the,given,candidate,annotations;protected,object,find,value,annotation,annotations,to,search,annotation,attributes,attr,annotated,element,utils,get,merged,annotation,attributes,annotated,element,utils,for,annotations,annotations,to,search,this,value,annotation,type,if,attr,null,return,extract,value,attr,return,null
QualifierAnnotationAutowireCandidateResolver -> protected Object findValue(Annotation[] annotationsToSearch);1474010431;Determine a suggested value from any of the given candidate annotations.;protected Object findValue(Annotation[] annotationsToSearch) {_		AnnotationAttributes attr = AnnotatedElementUtils.getMergedAnnotationAttributes(_				AnnotatedElementUtils.forAnnotations(annotationsToSearch), this.valueAnnotationType)__		if (attr != null) {_			return extractValue(attr)__		}_		return null__	};determine,a,suggested,value,from,any,of,the,given,candidate,annotations;protected,object,find,value,annotation,annotations,to,search,annotation,attributes,attr,annotated,element,utils,get,merged,annotation,attributes,annotated,element,utils,for,annotations,annotations,to,search,this,value,annotation,type,if,attr,null,return,extract,value,attr,return,null
QualifierAnnotationAutowireCandidateResolver -> protected Object findValue(Annotation[] annotationsToSearch);1493811736;Determine a suggested value from any of the given candidate annotations.;protected Object findValue(Annotation[] annotationsToSearch) {_		AnnotationAttributes attr = AnnotatedElementUtils.getMergedAnnotationAttributes(_				AnnotatedElementUtils.forAnnotations(annotationsToSearch), this.valueAnnotationType)__		if (attr != null) {_			return extractValue(attr)__		}_		return null__	};determine,a,suggested,value,from,any,of,the,given,candidate,annotations;protected,object,find,value,annotation,annotations,to,search,annotation,attributes,attr,annotated,element,utils,get,merged,annotation,attributes,annotated,element,utils,for,annotations,annotations,to,search,this,value,annotation,type,if,attr,null,return,extract,value,attr,return,null
QualifierAnnotationAutowireCandidateResolver -> @Override 	public Object getSuggestedValue(DependencyDescriptor descriptor);1356735495;Determine whether the given dependency carries a value annotation._@see Value;@Override_	public Object getSuggestedValue(DependencyDescriptor descriptor) {_		Object value = findValue(descriptor.getAnnotations())__		if (value == null) {_			MethodParameter methodParam = descriptor.getMethodParameter()__			if (methodParam != null) {_				value = findValue(methodParam.getMethodAnnotations())__			}_		}_		return value__	};determine,whether,the,given,dependency,carries,a,value,annotation,see,value;override,public,object,get,suggested,value,dependency,descriptor,descriptor,object,value,find,value,descriptor,get,annotations,if,value,null,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,value,find,value,method,param,get,method,annotations,return,value
QualifierAnnotationAutowireCandidateResolver -> @Override 	public Object getSuggestedValue(DependencyDescriptor descriptor);1368482696;Determine whether the given dependency carries a value annotation._@see Value;@Override_	public Object getSuggestedValue(DependencyDescriptor descriptor) {_		Object value = findValue(descriptor.getAnnotations())__		if (value == null) {_			MethodParameter methodParam = descriptor.getMethodParameter()__			if (methodParam != null) {_				value = findValue(methodParam.getMethodAnnotations())__			}_		}_		return value__	};determine,whether,the,given,dependency,carries,a,value,annotation,see,value;override,public,object,get,suggested,value,dependency,descriptor,descriptor,object,value,find,value,descriptor,get,annotations,if,value,null,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,value,find,value,method,param,get,method,annotations,return,value
QualifierAnnotationAutowireCandidateResolver -> @Override 	public Object getSuggestedValue(DependencyDescriptor descriptor);1377641679;Determine whether the given dependency carries a value annotation._@see Value;@Override_	public Object getSuggestedValue(DependencyDescriptor descriptor) {_		Object value = findValue(descriptor.getAnnotations())__		if (value == null) {_			MethodParameter methodParam = descriptor.getMethodParameter()__			if (methodParam != null) {_				value = findValue(methodParam.getMethodAnnotations())__			}_		}_		return value__	};determine,whether,the,given,dependency,carries,a,value,annotation,see,value;override,public,object,get,suggested,value,dependency,descriptor,descriptor,object,value,find,value,descriptor,get,annotations,if,value,null,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,value,find,value,method,param,get,method,annotations,return,value
QualifierAnnotationAutowireCandidateResolver -> @Override 	public Object getSuggestedValue(DependencyDescriptor descriptor);1381788683;Determine whether the given dependency carries a value annotation._@see Value;@Override_	public Object getSuggestedValue(DependencyDescriptor descriptor) {_		Object value = findValue(descriptor.getAnnotations())__		if (value == null) {_			MethodParameter methodParam = descriptor.getMethodParameter()__			if (methodParam != null) {_				value = findValue(methodParam.getMethodAnnotations())__			}_		}_		return value__	};determine,whether,the,given,dependency,carries,a,value,annotation,see,value;override,public,object,get,suggested,value,dependency,descriptor,descriptor,object,value,find,value,descriptor,get,annotations,if,value,null,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,value,find,value,method,param,get,method,annotations,return,value
QualifierAnnotationAutowireCandidateResolver -> @Override 	public Object getSuggestedValue(DependencyDescriptor descriptor);1382826936;Determine whether the given dependency carries a value annotation._@see Value;@Override_	public Object getSuggestedValue(DependencyDescriptor descriptor) {_		Object value = findValue(descriptor.getAnnotations())__		if (value == null) {_			MethodParameter methodParam = descriptor.getMethodParameter()__			if (methodParam != null) {_				value = findValue(methodParam.getMethodAnnotations())__			}_		}_		return value__	};determine,whether,the,given,dependency,carries,a,value,annotation,see,value;override,public,object,get,suggested,value,dependency,descriptor,descriptor,object,value,find,value,descriptor,get,annotations,if,value,null,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,value,find,value,method,param,get,method,annotations,return,value
QualifierAnnotationAutowireCandidateResolver -> @Override 	public Object getSuggestedValue(DependencyDescriptor descriptor);1386541456;Determine whether the given dependency carries a value annotation._@see Value;@Override_	public Object getSuggestedValue(DependencyDescriptor descriptor) {_		Object value = findValue(descriptor.getAnnotations())__		if (value == null) {_			MethodParameter methodParam = descriptor.getMethodParameter()__			if (methodParam != null) {_				value = findValue(methodParam.getMethodAnnotations())__			}_		}_		return value__	};determine,whether,the,given,dependency,carries,a,value,annotation,see,value;override,public,object,get,suggested,value,dependency,descriptor,descriptor,object,value,find,value,descriptor,get,annotations,if,value,null,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,value,find,value,method,param,get,method,annotations,return,value
QualifierAnnotationAutowireCandidateResolver -> @Override 	public Object getSuggestedValue(DependencyDescriptor descriptor);1398638841;Determine whether the given dependency carries a value annotation._@see Value;@Override_	public Object getSuggestedValue(DependencyDescriptor descriptor) {_		Object value = findValue(descriptor.getAnnotations())__		if (value == null) {_			MethodParameter methodParam = descriptor.getMethodParameter()__			if (methodParam != null) {_				value = findValue(methodParam.getMethodAnnotations())__			}_		}_		return value__	};determine,whether,the,given,dependency,carries,a,value,annotation,see,value;override,public,object,get,suggested,value,dependency,descriptor,descriptor,object,value,find,value,descriptor,get,annotations,if,value,null,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,value,find,value,method,param,get,method,annotations,return,value
QualifierAnnotationAutowireCandidateResolver -> @Override 	public Object getSuggestedValue(DependencyDescriptor descriptor);1413990280;Determine whether the given dependency carries a value annotation._@see Value;@Override_	public Object getSuggestedValue(DependencyDescriptor descriptor) {_		Object value = findValue(descriptor.getAnnotations())__		if (value == null) {_			MethodParameter methodParam = descriptor.getMethodParameter()__			if (methodParam != null) {_				value = findValue(methodParam.getMethodAnnotations())__			}_		}_		return value__	};determine,whether,the,given,dependency,carries,a,value,annotation,see,value;override,public,object,get,suggested,value,dependency,descriptor,descriptor,object,value,find,value,descriptor,get,annotations,if,value,null,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,value,find,value,method,param,get,method,annotations,return,value
QualifierAnnotationAutowireCandidateResolver -> @Override 	public Object getSuggestedValue(DependencyDescriptor descriptor);1432125256;Determine whether the given dependency carries a value annotation._@see Value;@Override_	public Object getSuggestedValue(DependencyDescriptor descriptor) {_		Object value = findValue(descriptor.getAnnotations())__		if (value == null) {_			MethodParameter methodParam = descriptor.getMethodParameter()__			if (methodParam != null) {_				value = findValue(methodParam.getMethodAnnotations())__			}_		}_		return value__	};determine,whether,the,given,dependency,carries,a,value,annotation,see,value;override,public,object,get,suggested,value,dependency,descriptor,descriptor,object,value,find,value,descriptor,get,annotations,if,value,null,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,value,find,value,method,param,get,method,annotations,return,value
QualifierAnnotationAutowireCandidateResolver -> @Override 	public Object getSuggestedValue(DependencyDescriptor descriptor);1451408536;Determine whether the given dependency carries a value annotation._@see Value;@Override_	public Object getSuggestedValue(DependencyDescriptor descriptor) {_		Object value = findValue(descriptor.getAnnotations())__		if (value == null) {_			MethodParameter methodParam = descriptor.getMethodParameter()__			if (methodParam != null) {_				value = findValue(methodParam.getMethodAnnotations())__			}_		}_		return value__	};determine,whether,the,given,dependency,carries,a,value,annotation,see,value;override,public,object,get,suggested,value,dependency,descriptor,descriptor,object,value,find,value,descriptor,get,annotations,if,value,null,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,value,find,value,method,param,get,method,annotations,return,value
QualifierAnnotationAutowireCandidateResolver -> @Override 	public Object getSuggestedValue(DependencyDescriptor descriptor);1467730834;Determine whether the given dependency carries a value annotation._@see Value;@Override_	public Object getSuggestedValue(DependencyDescriptor descriptor) {_		Object value = findValue(descriptor.getAnnotations())__		if (value == null) {_			MethodParameter methodParam = descriptor.getMethodParameter()__			if (methodParam != null) {_				value = findValue(methodParam.getMethodAnnotations())__			}_		}_		return value__	};determine,whether,the,given,dependency,carries,a,value,annotation,see,value;override,public,object,get,suggested,value,dependency,descriptor,descriptor,object,value,find,value,descriptor,get,annotations,if,value,null,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,value,find,value,method,param,get,method,annotations,return,value
QualifierAnnotationAutowireCandidateResolver -> @Override 	public Object getSuggestedValue(DependencyDescriptor descriptor);1474010431;Determine whether the given dependency carries a value annotation._@see Value;@Override_	public Object getSuggestedValue(DependencyDescriptor descriptor) {_		Object value = findValue(descriptor.getAnnotations())__		if (value == null) {_			MethodParameter methodParam = descriptor.getMethodParameter()__			if (methodParam != null) {_				value = findValue(methodParam.getMethodAnnotations())__			}_		}_		return value__	};determine,whether,the,given,dependency,carries,a,value,annotation,see,value;override,public,object,get,suggested,value,dependency,descriptor,descriptor,object,value,find,value,descriptor,get,annotations,if,value,null,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,value,find,value,method,param,get,method,annotations,return,value
QualifierAnnotationAutowireCandidateResolver -> @Override 	public Object getSuggestedValue(DependencyDescriptor descriptor);1493811736;Determine whether the given dependency declares a value annotation._@see Value;@Override_	public Object getSuggestedValue(DependencyDescriptor descriptor) {_		Object value = findValue(descriptor.getAnnotations())__		if (value == null) {_			MethodParameter methodParam = descriptor.getMethodParameter()__			if (methodParam != null) {_				value = findValue(methodParam.getMethodAnnotations())__			}_		}_		return value__	};determine,whether,the,given,dependency,declares,a,value,annotation,see,value;override,public,object,get,suggested,value,dependency,descriptor,descriptor,object,value,find,value,descriptor,get,annotations,if,value,null,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,value,find,value,method,param,get,method,annotations,return,value
QualifierAnnotationAutowireCandidateResolver -> @Override 	public Object getSuggestedValue(DependencyDescriptor descriptor);1495868221;Determine whether the given dependency declares a value annotation._@see Value;@Override_	public Object getSuggestedValue(DependencyDescriptor descriptor) {_		Object value = findValue(descriptor.getAnnotations())__		if (value == null) {_			MethodParameter methodParam = descriptor.getMethodParameter()__			if (methodParam != null) {_				value = findValue(methodParam.getMethodAnnotations())__			}_		}_		return value__	};determine,whether,the,given,dependency,declares,a,value,annotation,see,value;override,public,object,get,suggested,value,dependency,descriptor,descriptor,object,value,find,value,descriptor,get,annotations,if,value,null,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,value,find,value,method,param,get,method,annotations,return,value
QualifierAnnotationAutowireCandidateResolver -> @Override 	public Object getSuggestedValue(DependencyDescriptor descriptor);1496837955;Determine whether the given dependency declares a value annotation._@see Value;@Override_	public Object getSuggestedValue(DependencyDescriptor descriptor) {_		Object value = findValue(descriptor.getAnnotations())__		if (value == null) {_			MethodParameter methodParam = descriptor.getMethodParameter()__			if (methodParam != null) {_				value = findValue(methodParam.getMethodAnnotations())__			}_		}_		return value__	};determine,whether,the,given,dependency,declares,a,value,annotation,see,value;override,public,object,get,suggested,value,dependency,descriptor,descriptor,object,value,find,value,descriptor,get,annotations,if,value,null,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,value,find,value,method,param,get,method,annotations,return,value
QualifierAnnotationAutowireCandidateResolver -> public Object getSuggestedValue(DependencyDescriptor descriptor);1328020251;Determine whether the given dependency carries a value annotation._@see Value;public Object getSuggestedValue(DependencyDescriptor descriptor) {_		Object value = findValue(descriptor.getAnnotations())__		if (value == null) {_			MethodParameter methodParam = descriptor.getMethodParameter()__			if (methodParam != null) {_				value = findValue(methodParam.getMethodAnnotations())__			}_		}_		return value__	};determine,whether,the,given,dependency,carries,a,value,annotation,see,value;public,object,get,suggested,value,dependency,descriptor,descriptor,object,value,find,value,descriptor,get,annotations,if,value,null,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,value,find,value,method,param,get,method,annotations,return,value
QualifierAnnotationAutowireCandidateResolver -> public Object getSuggestedValue(DependencyDescriptor descriptor);1351681817;Determine whether the given dependency carries a value annotation._@see Value;public Object getSuggestedValue(DependencyDescriptor descriptor) {_		Object value = findValue(descriptor.getAnnotations())__		if (value == null) {_			MethodParameter methodParam = descriptor.getMethodParameter()__			if (methodParam != null) {_				value = findValue(methodParam.getMethodAnnotations())__			}_		}_		return value__	};determine,whether,the,given,dependency,carries,a,value,annotation,see,value;public,object,get,suggested,value,dependency,descriptor,descriptor,object,value,find,value,descriptor,get,annotations,if,value,null,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,value,find,value,method,param,get,method,annotations,return,value
QualifierAnnotationAutowireCandidateResolver -> public Object getSuggestedValue(DependencyDescriptor descriptor);1357119239;Determine whether the given dependency carries a value annotation._@see Value;public Object getSuggestedValue(DependencyDescriptor descriptor) {_		Object value = findValue(descriptor.getAnnotations())__		if (value == null) {_			MethodParameter methodParam = descriptor.getMethodParameter()__			if (methodParam != null) {_				value = findValue(methodParam.getMethodAnnotations())__			}_		}_		return value__	};determine,whether,the,given,dependency,carries,a,value,annotation,see,value;public,object,get,suggested,value,dependency,descriptor,descriptor,object,value,find,value,descriptor,get,annotations,if,value,null,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,value,find,value,method,param,get,method,annotations,return,value
QualifierAnnotationAutowireCandidateResolver -> @Override 	public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor);1356735495;Determine whether the provided bean definition is an autowire candidate._<p>To be considered a candidate the bean's <em>autowire-candidate</em>_attribute must not have been set to 'false'. Also, if an annotation on_the field or parameter to be autowired is recognized by this bean factory_as a <em>qualifier</em>, the bean must 'match' against the annotation as_well as any attributes it may contain. The bean definition must contain_the same qualifier or match by meta attributes. A "value" attribute will_fallback to match against the bean name or an alias if a qualifier or_attribute does not match._@see Qualifier;@Override_	public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor) {_		if (!bdHolder.getBeanDefinition().isAutowireCandidate()) {_			_			return false__		}_		if (descriptor == null) {_			_			return true__		}_		boolean match = checkQualifiers(bdHolder, descriptor.getAnnotations())__		if (match) {_			MethodParameter methodParam = descriptor.getMethodParameter()__			if (methodParam != null) {_				Method method = methodParam.getMethod()__				if (method == null || void.class.equals(method.getReturnType())) {_					match = checkQualifiers(bdHolder, methodParam.getMethodAnnotations())__				}_			}_		}_		return match__	};determine,whether,the,provided,bean,definition,is,an,autowire,candidate,p,to,be,considered,a,candidate,the,bean,s,em,autowire,candidate,em,attribute,must,not,have,been,set,to,false,also,if,an,annotation,on,the,field,or,parameter,to,be,autowired,is,recognized,by,this,bean,factory,as,a,em,qualifier,em,the,bean,must,match,against,the,annotation,as,well,as,any,attributes,it,may,contain,the,bean,definition,must,contain,the,same,qualifier,or,match,by,meta,attributes,a,value,attribute,will,fallback,to,match,against,the,bean,name,or,an,alias,if,a,qualifier,or,attribute,does,not,match,see,qualifier;override,public,boolean,is,autowire,candidate,bean,definition,holder,bd,holder,dependency,descriptor,descriptor,if,bd,holder,get,bean,definition,is,autowire,candidate,return,false,if,descriptor,null,return,true,boolean,match,check,qualifiers,bd,holder,descriptor,get,annotations,if,match,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,method,method,method,param,get,method,if,method,null,void,class,equals,method,get,return,type,match,check,qualifiers,bd,holder,method,param,get,method,annotations,return,match
QualifierAnnotationAutowireCandidateResolver -> @Override 	public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor);1368482696;Determine whether the provided bean definition is an autowire candidate._<p>To be considered a candidate the bean's <em>autowire-candidate</em>_attribute must not have been set to 'false'. Also, if an annotation on_the field or parameter to be autowired is recognized by this bean factory_as a <em>qualifier</em>, the bean must 'match' against the annotation as_well as any attributes it may contain. The bean definition must contain_the same qualifier or match by meta attributes. A "value" attribute will_fallback to match against the bean name or an alias if a qualifier or_attribute does not match._@see Qualifier;@Override_	public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor) {_		if (!bdHolder.getBeanDefinition().isAutowireCandidate()) {_			_			return false__		}_		if (descriptor == null) {_			_			return true__		}_		boolean match = checkQualifiers(bdHolder, descriptor.getAnnotations())__		if (match) {_			MethodParameter methodParam = descriptor.getMethodParameter()__			if (methodParam != null) {_				Method method = methodParam.getMethod()__				if (method == null || void.class.equals(method.getReturnType())) {_					match = checkQualifiers(bdHolder, methodParam.getMethodAnnotations())__				}_			}_		}_		return match__	};determine,whether,the,provided,bean,definition,is,an,autowire,candidate,p,to,be,considered,a,candidate,the,bean,s,em,autowire,candidate,em,attribute,must,not,have,been,set,to,false,also,if,an,annotation,on,the,field,or,parameter,to,be,autowired,is,recognized,by,this,bean,factory,as,a,em,qualifier,em,the,bean,must,match,against,the,annotation,as,well,as,any,attributes,it,may,contain,the,bean,definition,must,contain,the,same,qualifier,or,match,by,meta,attributes,a,value,attribute,will,fallback,to,match,against,the,bean,name,or,an,alias,if,a,qualifier,or,attribute,does,not,match,see,qualifier;override,public,boolean,is,autowire,candidate,bean,definition,holder,bd,holder,dependency,descriptor,descriptor,if,bd,holder,get,bean,definition,is,autowire,candidate,return,false,if,descriptor,null,return,true,boolean,match,check,qualifiers,bd,holder,descriptor,get,annotations,if,match,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,method,method,method,param,get,method,if,method,null,void,class,equals,method,get,return,type,match,check,qualifiers,bd,holder,method,param,get,method,annotations,return,match
QualifierAnnotationAutowireCandidateResolver -> @Override 	public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor);1377641679;Determine whether the provided bean definition is an autowire candidate._<p>To be considered a candidate the bean's <em>autowire-candidate</em>_attribute must not have been set to 'false'. Also, if an annotation on_the field or parameter to be autowired is recognized by this bean factory_as a <em>qualifier</em>, the bean must 'match' against the annotation as_well as any attributes it may contain. The bean definition must contain_the same qualifier or match by meta attributes. A "value" attribute will_fallback to match against the bean name or an alias if a qualifier or_attribute does not match._@see Qualifier;@Override_	public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor) {_		if (!bdHolder.getBeanDefinition().isAutowireCandidate()) {_			_			return false__		}_		if (descriptor == null) {_			_			return true__		}_		boolean match = checkQualifiers(bdHolder, descriptor.getAnnotations())__		if (match) {_			MethodParameter methodParam = descriptor.getMethodParameter()__			if (methodParam != null) {_				Method method = methodParam.getMethod()__				if (method == null || void.class.equals(method.getReturnType())) {_					match = checkQualifiers(bdHolder, methodParam.getMethodAnnotations())__				}_			}_		}_		return match__	};determine,whether,the,provided,bean,definition,is,an,autowire,candidate,p,to,be,considered,a,candidate,the,bean,s,em,autowire,candidate,em,attribute,must,not,have,been,set,to,false,also,if,an,annotation,on,the,field,or,parameter,to,be,autowired,is,recognized,by,this,bean,factory,as,a,em,qualifier,em,the,bean,must,match,against,the,annotation,as,well,as,any,attributes,it,may,contain,the,bean,definition,must,contain,the,same,qualifier,or,match,by,meta,attributes,a,value,attribute,will,fallback,to,match,against,the,bean,name,or,an,alias,if,a,qualifier,or,attribute,does,not,match,see,qualifier;override,public,boolean,is,autowire,candidate,bean,definition,holder,bd,holder,dependency,descriptor,descriptor,if,bd,holder,get,bean,definition,is,autowire,candidate,return,false,if,descriptor,null,return,true,boolean,match,check,qualifiers,bd,holder,descriptor,get,annotations,if,match,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,method,method,method,param,get,method,if,method,null,void,class,equals,method,get,return,type,match,check,qualifiers,bd,holder,method,param,get,method,annotations,return,match
QualifierAnnotationAutowireCandidateResolver -> @Override 	public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor);1381788683;Determine whether the provided bean definition is an autowire candidate._<p>To be considered a candidate the bean's <em>autowire-candidate</em>_attribute must not have been set to 'false'. Also, if an annotation on_the field or parameter to be autowired is recognized by this bean factory_as a <em>qualifier</em>, the bean must 'match' against the annotation as_well as any attributes it may contain. The bean definition must contain_the same qualifier or match by meta attributes. A "value" attribute will_fallback to match against the bean name or an alias if a qualifier or_attribute does not match._@see Qualifier;@Override_	public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor) {_		boolean match = super.isAutowireCandidate(bdHolder, descriptor)__		if (match && descriptor != null) {_			match = checkQualifiers(bdHolder, descriptor.getAnnotations())__			if (match) {_				MethodParameter methodParam = descriptor.getMethodParameter()__				if (methodParam != null) {_					Method method = methodParam.getMethod()__					if (method == null || void.class.equals(method.getReturnType())) {_						match = checkQualifiers(bdHolder, methodParam.getMethodAnnotations())__					}_				}_			}_		}_		return match__	};determine,whether,the,provided,bean,definition,is,an,autowire,candidate,p,to,be,considered,a,candidate,the,bean,s,em,autowire,candidate,em,attribute,must,not,have,been,set,to,false,also,if,an,annotation,on,the,field,or,parameter,to,be,autowired,is,recognized,by,this,bean,factory,as,a,em,qualifier,em,the,bean,must,match,against,the,annotation,as,well,as,any,attributes,it,may,contain,the,bean,definition,must,contain,the,same,qualifier,or,match,by,meta,attributes,a,value,attribute,will,fallback,to,match,against,the,bean,name,or,an,alias,if,a,qualifier,or,attribute,does,not,match,see,qualifier;override,public,boolean,is,autowire,candidate,bean,definition,holder,bd,holder,dependency,descriptor,descriptor,boolean,match,super,is,autowire,candidate,bd,holder,descriptor,if,match,descriptor,null,match,check,qualifiers,bd,holder,descriptor,get,annotations,if,match,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,method,method,method,param,get,method,if,method,null,void,class,equals,method,get,return,type,match,check,qualifiers,bd,holder,method,param,get,method,annotations,return,match
QualifierAnnotationAutowireCandidateResolver -> @Override 	public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor);1382826936;Determine whether the provided bean definition is an autowire candidate._<p>To be considered a candidate the bean's <em>autowire-candidate</em>_attribute must not have been set to 'false'. Also, if an annotation on_the field or parameter to be autowired is recognized by this bean factory_as a <em>qualifier</em>, the bean must 'match' against the annotation as_well as any attributes it may contain. The bean definition must contain_the same qualifier or match by meta attributes. A "value" attribute will_fallback to match against the bean name or an alias if a qualifier or_attribute does not match._@see Qualifier;@Override_	public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor) {_		boolean match = super.isAutowireCandidate(bdHolder, descriptor)__		if (match && descriptor != null) {_			match = checkQualifiers(bdHolder, descriptor.getAnnotations())__			if (match) {_				MethodParameter methodParam = descriptor.getMethodParameter()__				if (methodParam != null) {_					Method method = methodParam.getMethod()__					if (method == null || void.class.equals(method.getReturnType())) {_						match = checkQualifiers(bdHolder, methodParam.getMethodAnnotations())__					}_				}_			}_		}_		return match__	};determine,whether,the,provided,bean,definition,is,an,autowire,candidate,p,to,be,considered,a,candidate,the,bean,s,em,autowire,candidate,em,attribute,must,not,have,been,set,to,false,also,if,an,annotation,on,the,field,or,parameter,to,be,autowired,is,recognized,by,this,bean,factory,as,a,em,qualifier,em,the,bean,must,match,against,the,annotation,as,well,as,any,attributes,it,may,contain,the,bean,definition,must,contain,the,same,qualifier,or,match,by,meta,attributes,a,value,attribute,will,fallback,to,match,against,the,bean,name,or,an,alias,if,a,qualifier,or,attribute,does,not,match,see,qualifier;override,public,boolean,is,autowire,candidate,bean,definition,holder,bd,holder,dependency,descriptor,descriptor,boolean,match,super,is,autowire,candidate,bd,holder,descriptor,if,match,descriptor,null,match,check,qualifiers,bd,holder,descriptor,get,annotations,if,match,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,method,method,method,param,get,method,if,method,null,void,class,equals,method,get,return,type,match,check,qualifiers,bd,holder,method,param,get,method,annotations,return,match
QualifierAnnotationAutowireCandidateResolver -> @Override 	public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor);1386541456;Determine whether the provided bean definition is an autowire candidate._<p>To be considered a candidate the bean's <em>autowire-candidate</em>_attribute must not have been set to 'false'. Also, if an annotation on_the field or parameter to be autowired is recognized by this bean factory_as a <em>qualifier</em>, the bean must 'match' against the annotation as_well as any attributes it may contain. The bean definition must contain_the same qualifier or match by meta attributes. A "value" attribute will_fallback to match against the bean name or an alias if a qualifier or_attribute does not match._@see Qualifier;@Override_	public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor) {_		boolean match = super.isAutowireCandidate(bdHolder, descriptor)__		if (match && descriptor != null) {_			match = checkQualifiers(bdHolder, descriptor.getAnnotations())__			if (match) {_				MethodParameter methodParam = descriptor.getMethodParameter()__				if (methodParam != null) {_					Method method = methodParam.getMethod()__					if (method == null || void.class.equals(method.getReturnType())) {_						match = checkQualifiers(bdHolder, methodParam.getMethodAnnotations())__					}_				}_			}_		}_		return match__	};determine,whether,the,provided,bean,definition,is,an,autowire,candidate,p,to,be,considered,a,candidate,the,bean,s,em,autowire,candidate,em,attribute,must,not,have,been,set,to,false,also,if,an,annotation,on,the,field,or,parameter,to,be,autowired,is,recognized,by,this,bean,factory,as,a,em,qualifier,em,the,bean,must,match,against,the,annotation,as,well,as,any,attributes,it,may,contain,the,bean,definition,must,contain,the,same,qualifier,or,match,by,meta,attributes,a,value,attribute,will,fallback,to,match,against,the,bean,name,or,an,alias,if,a,qualifier,or,attribute,does,not,match,see,qualifier;override,public,boolean,is,autowire,candidate,bean,definition,holder,bd,holder,dependency,descriptor,descriptor,boolean,match,super,is,autowire,candidate,bd,holder,descriptor,if,match,descriptor,null,match,check,qualifiers,bd,holder,descriptor,get,annotations,if,match,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,method,method,method,param,get,method,if,method,null,void,class,equals,method,get,return,type,match,check,qualifiers,bd,holder,method,param,get,method,annotations,return,match
QualifierAnnotationAutowireCandidateResolver -> @Override 	public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor);1398638841;Determine whether the provided bean definition is an autowire candidate._<p>To be considered a candidate the bean's <em>autowire-candidate</em>_attribute must not have been set to 'false'. Also, if an annotation on_the field or parameter to be autowired is recognized by this bean factory_as a <em>qualifier</em>, the bean must 'match' against the annotation as_well as any attributes it may contain. The bean definition must contain_the same qualifier or match by meta attributes. A "value" attribute will_fallback to match against the bean name or an alias if a qualifier or_attribute does not match._@see Qualifier;@Override_	public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor) {_		boolean match = super.isAutowireCandidate(bdHolder, descriptor)__		if (match && descriptor != null) {_			match = checkQualifiers(bdHolder, descriptor.getAnnotations())__			if (match) {_				MethodParameter methodParam = descriptor.getMethodParameter()__				if (methodParam != null) {_					Method method = methodParam.getMethod()__					if (method == null || void.class.equals(method.getReturnType())) {_						match = checkQualifiers(bdHolder, methodParam.getMethodAnnotations())__					}_				}_			}_		}_		return match__	};determine,whether,the,provided,bean,definition,is,an,autowire,candidate,p,to,be,considered,a,candidate,the,bean,s,em,autowire,candidate,em,attribute,must,not,have,been,set,to,false,also,if,an,annotation,on,the,field,or,parameter,to,be,autowired,is,recognized,by,this,bean,factory,as,a,em,qualifier,em,the,bean,must,match,against,the,annotation,as,well,as,any,attributes,it,may,contain,the,bean,definition,must,contain,the,same,qualifier,or,match,by,meta,attributes,a,value,attribute,will,fallback,to,match,against,the,bean,name,or,an,alias,if,a,qualifier,or,attribute,does,not,match,see,qualifier;override,public,boolean,is,autowire,candidate,bean,definition,holder,bd,holder,dependency,descriptor,descriptor,boolean,match,super,is,autowire,candidate,bd,holder,descriptor,if,match,descriptor,null,match,check,qualifiers,bd,holder,descriptor,get,annotations,if,match,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,method,method,method,param,get,method,if,method,null,void,class,equals,method,get,return,type,match,check,qualifiers,bd,holder,method,param,get,method,annotations,return,match
QualifierAnnotationAutowireCandidateResolver -> @Override 	public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor);1413990280;Determine whether the provided bean definition is an autowire candidate._<p>To be considered a candidate the bean's <em>autowire-candidate</em>_attribute must not have been set to 'false'. Also, if an annotation on_the field or parameter to be autowired is recognized by this bean factory_as a <em>qualifier</em>, the bean must 'match' against the annotation as_well as any attributes it may contain. The bean definition must contain_the same qualifier or match by meta attributes. A "value" attribute will_fallback to match against the bean name or an alias if a qualifier or_attribute does not match._@see Qualifier;@Override_	public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor) {_		boolean match = super.isAutowireCandidate(bdHolder, descriptor)__		if (match && descriptor != null) {_			match = checkQualifiers(bdHolder, descriptor.getAnnotations())__			if (match) {_				MethodParameter methodParam = descriptor.getMethodParameter()__				if (methodParam != null) {_					Method method = methodParam.getMethod()__					if (method == null || void.class.equals(method.getReturnType())) {_						match = checkQualifiers(bdHolder, methodParam.getMethodAnnotations())__					}_				}_			}_		}_		return match__	};determine,whether,the,provided,bean,definition,is,an,autowire,candidate,p,to,be,considered,a,candidate,the,bean,s,em,autowire,candidate,em,attribute,must,not,have,been,set,to,false,also,if,an,annotation,on,the,field,or,parameter,to,be,autowired,is,recognized,by,this,bean,factory,as,a,em,qualifier,em,the,bean,must,match,against,the,annotation,as,well,as,any,attributes,it,may,contain,the,bean,definition,must,contain,the,same,qualifier,or,match,by,meta,attributes,a,value,attribute,will,fallback,to,match,against,the,bean,name,or,an,alias,if,a,qualifier,or,attribute,does,not,match,see,qualifier;override,public,boolean,is,autowire,candidate,bean,definition,holder,bd,holder,dependency,descriptor,descriptor,boolean,match,super,is,autowire,candidate,bd,holder,descriptor,if,match,descriptor,null,match,check,qualifiers,bd,holder,descriptor,get,annotations,if,match,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,method,method,method,param,get,method,if,method,null,void,class,equals,method,get,return,type,match,check,qualifiers,bd,holder,method,param,get,method,annotations,return,match
QualifierAnnotationAutowireCandidateResolver -> @Override 	public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor);1432125256;Determine whether the provided bean definition is an autowire candidate._<p>To be considered a candidate the bean's <em>autowire-candidate</em>_attribute must not have been set to 'false'. Also, if an annotation on_the field or parameter to be autowired is recognized by this bean factory_as a <em>qualifier</em>, the bean must 'match' against the annotation as_well as any attributes it may contain. The bean definition must contain_the same qualifier or match by meta attributes. A "value" attribute will_fallback to match against the bean name or an alias if a qualifier or_attribute does not match._@see Qualifier;@Override_	public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor) {_		boolean match = super.isAutowireCandidate(bdHolder, descriptor)__		if (match && descriptor != null) {_			match = checkQualifiers(bdHolder, descriptor.getAnnotations())__			if (match) {_				MethodParameter methodParam = descriptor.getMethodParameter()__				if (methodParam != null) {_					Method method = methodParam.getMethod()__					if (method == null || void.class == method.getReturnType()) {_						match = checkQualifiers(bdHolder, methodParam.getMethodAnnotations())__					}_				}_			}_		}_		return match__	};determine,whether,the,provided,bean,definition,is,an,autowire,candidate,p,to,be,considered,a,candidate,the,bean,s,em,autowire,candidate,em,attribute,must,not,have,been,set,to,false,also,if,an,annotation,on,the,field,or,parameter,to,be,autowired,is,recognized,by,this,bean,factory,as,a,em,qualifier,em,the,bean,must,match,against,the,annotation,as,well,as,any,attributes,it,may,contain,the,bean,definition,must,contain,the,same,qualifier,or,match,by,meta,attributes,a,value,attribute,will,fallback,to,match,against,the,bean,name,or,an,alias,if,a,qualifier,or,attribute,does,not,match,see,qualifier;override,public,boolean,is,autowire,candidate,bean,definition,holder,bd,holder,dependency,descriptor,descriptor,boolean,match,super,is,autowire,candidate,bd,holder,descriptor,if,match,descriptor,null,match,check,qualifiers,bd,holder,descriptor,get,annotations,if,match,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,method,method,method,param,get,method,if,method,null,void,class,method,get,return,type,match,check,qualifiers,bd,holder,method,param,get,method,annotations,return,match
QualifierAnnotationAutowireCandidateResolver -> @Override 	public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor);1451408536;Determine whether the provided bean definition is an autowire candidate._<p>To be considered a candidate the bean's <em>autowire-candidate</em>_attribute must not have been set to 'false'. Also, if an annotation on_the field or parameter to be autowired is recognized by this bean factory_as a <em>qualifier</em>, the bean must 'match' against the annotation as_well as any attributes it may contain. The bean definition must contain_the same qualifier or match by meta attributes. A "value" attribute will_fallback to match against the bean name or an alias if a qualifier or_attribute does not match._@see Qualifier;@Override_	public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor) {_		boolean match = super.isAutowireCandidate(bdHolder, descriptor)__		if (match && descriptor != null) {_			match = checkQualifiers(bdHolder, descriptor.getAnnotations())__			if (match) {_				MethodParameter methodParam = descriptor.getMethodParameter()__				if (methodParam != null) {_					Method method = methodParam.getMethod()__					if (method == null || void.class == method.getReturnType()) {_						match = checkQualifiers(bdHolder, methodParam.getMethodAnnotations())__					}_				}_			}_		}_		return match__	};determine,whether,the,provided,bean,definition,is,an,autowire,candidate,p,to,be,considered,a,candidate,the,bean,s,em,autowire,candidate,em,attribute,must,not,have,been,set,to,false,also,if,an,annotation,on,the,field,or,parameter,to,be,autowired,is,recognized,by,this,bean,factory,as,a,em,qualifier,em,the,bean,must,match,against,the,annotation,as,well,as,any,attributes,it,may,contain,the,bean,definition,must,contain,the,same,qualifier,or,match,by,meta,attributes,a,value,attribute,will,fallback,to,match,against,the,bean,name,or,an,alias,if,a,qualifier,or,attribute,does,not,match,see,qualifier;override,public,boolean,is,autowire,candidate,bean,definition,holder,bd,holder,dependency,descriptor,descriptor,boolean,match,super,is,autowire,candidate,bd,holder,descriptor,if,match,descriptor,null,match,check,qualifiers,bd,holder,descriptor,get,annotations,if,match,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,method,method,method,param,get,method,if,method,null,void,class,method,get,return,type,match,check,qualifiers,bd,holder,method,param,get,method,annotations,return,match
QualifierAnnotationAutowireCandidateResolver -> @Override 	public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor);1467730834;Determine whether the provided bean definition is an autowire candidate._<p>To be considered a candidate the bean's <em>autowire-candidate</em>_attribute must not have been set to 'false'. Also, if an annotation on_the field or parameter to be autowired is recognized by this bean factory_as a <em>qualifier</em>, the bean must 'match' against the annotation as_well as any attributes it may contain. The bean definition must contain_the same qualifier or match by meta attributes. A "value" attribute will_fallback to match against the bean name or an alias if a qualifier or_attribute does not match._@see Qualifier;@Override_	public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor) {_		boolean match = super.isAutowireCandidate(bdHolder, descriptor)__		if (match && descriptor != null) {_			match = checkQualifiers(bdHolder, descriptor.getAnnotations())__			if (match) {_				MethodParameter methodParam = descriptor.getMethodParameter()__				if (methodParam != null) {_					Method method = methodParam.getMethod()__					if (method == null || void.class == method.getReturnType()) {_						match = checkQualifiers(bdHolder, methodParam.getMethodAnnotations())__					}_				}_			}_		}_		return match__	};determine,whether,the,provided,bean,definition,is,an,autowire,candidate,p,to,be,considered,a,candidate,the,bean,s,em,autowire,candidate,em,attribute,must,not,have,been,set,to,false,also,if,an,annotation,on,the,field,or,parameter,to,be,autowired,is,recognized,by,this,bean,factory,as,a,em,qualifier,em,the,bean,must,match,against,the,annotation,as,well,as,any,attributes,it,may,contain,the,bean,definition,must,contain,the,same,qualifier,or,match,by,meta,attributes,a,value,attribute,will,fallback,to,match,against,the,bean,name,or,an,alias,if,a,qualifier,or,attribute,does,not,match,see,qualifier;override,public,boolean,is,autowire,candidate,bean,definition,holder,bd,holder,dependency,descriptor,descriptor,boolean,match,super,is,autowire,candidate,bd,holder,descriptor,if,match,descriptor,null,match,check,qualifiers,bd,holder,descriptor,get,annotations,if,match,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,method,method,method,param,get,method,if,method,null,void,class,method,get,return,type,match,check,qualifiers,bd,holder,method,param,get,method,annotations,return,match
QualifierAnnotationAutowireCandidateResolver -> @Override 	public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor);1474010431;Determine whether the provided bean definition is an autowire candidate._<p>To be considered a candidate the bean's <em>autowire-candidate</em>_attribute must not have been set to 'false'. Also, if an annotation on_the field or parameter to be autowired is recognized by this bean factory_as a <em>qualifier</em>, the bean must 'match' against the annotation as_well as any attributes it may contain. The bean definition must contain_the same qualifier or match by meta attributes. A "value" attribute will_fallback to match against the bean name or an alias if a qualifier or_attribute does not match._@see Qualifier;@Override_	public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor) {_		boolean match = super.isAutowireCandidate(bdHolder, descriptor)__		if (match && descriptor != null) {_			match = checkQualifiers(bdHolder, descriptor.getAnnotations())__			if (match) {_				MethodParameter methodParam = descriptor.getMethodParameter()__				if (methodParam != null) {_					Method method = methodParam.getMethod()__					if (method == null || void.class == method.getReturnType()) {_						match = checkQualifiers(bdHolder, methodParam.getMethodAnnotations())__					}_				}_			}_		}_		return match__	};determine,whether,the,provided,bean,definition,is,an,autowire,candidate,p,to,be,considered,a,candidate,the,bean,s,em,autowire,candidate,em,attribute,must,not,have,been,set,to,false,also,if,an,annotation,on,the,field,or,parameter,to,be,autowired,is,recognized,by,this,bean,factory,as,a,em,qualifier,em,the,bean,must,match,against,the,annotation,as,well,as,any,attributes,it,may,contain,the,bean,definition,must,contain,the,same,qualifier,or,match,by,meta,attributes,a,value,attribute,will,fallback,to,match,against,the,bean,name,or,an,alias,if,a,qualifier,or,attribute,does,not,match,see,qualifier;override,public,boolean,is,autowire,candidate,bean,definition,holder,bd,holder,dependency,descriptor,descriptor,boolean,match,super,is,autowire,candidate,bd,holder,descriptor,if,match,descriptor,null,match,check,qualifiers,bd,holder,descriptor,get,annotations,if,match,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,method,method,method,param,get,method,if,method,null,void,class,method,get,return,type,match,check,qualifiers,bd,holder,method,param,get,method,annotations,return,match
QualifierAnnotationAutowireCandidateResolver -> @Override 	public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor);1493811736;Determine whether the provided bean definition is an autowire candidate._<p>To be considered a candidate the bean's <em>autowire-candidate</em>_attribute must not have been set to 'false'. Also, if an annotation on_the field or parameter to be autowired is recognized by this bean factory_as a <em>qualifier</em>, the bean must 'match' against the annotation as_well as any attributes it may contain. The bean definition must contain_the same qualifier or match by meta attributes. A "value" attribute will_fallback to match against the bean name or an alias if a qualifier or_attribute does not match._@see Qualifier;@Override_	public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor) {_		boolean match = super.isAutowireCandidate(bdHolder, descriptor)__		if (match && descriptor != null) {_			match = checkQualifiers(bdHolder, descriptor.getAnnotations())__			if (match) {_				MethodParameter methodParam = descriptor.getMethodParameter()__				if (methodParam != null) {_					Method method = methodParam.getMethod()__					if (method == null || void.class == method.getReturnType()) {_						match = checkQualifiers(bdHolder, methodParam.getMethodAnnotations())__					}_				}_			}_		}_		return match__	};determine,whether,the,provided,bean,definition,is,an,autowire,candidate,p,to,be,considered,a,candidate,the,bean,s,em,autowire,candidate,em,attribute,must,not,have,been,set,to,false,also,if,an,annotation,on,the,field,or,parameter,to,be,autowired,is,recognized,by,this,bean,factory,as,a,em,qualifier,em,the,bean,must,match,against,the,annotation,as,well,as,any,attributes,it,may,contain,the,bean,definition,must,contain,the,same,qualifier,or,match,by,meta,attributes,a,value,attribute,will,fallback,to,match,against,the,bean,name,or,an,alias,if,a,qualifier,or,attribute,does,not,match,see,qualifier;override,public,boolean,is,autowire,candidate,bean,definition,holder,bd,holder,dependency,descriptor,descriptor,boolean,match,super,is,autowire,candidate,bd,holder,descriptor,if,match,descriptor,null,match,check,qualifiers,bd,holder,descriptor,get,annotations,if,match,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,method,method,method,param,get,method,if,method,null,void,class,method,get,return,type,match,check,qualifiers,bd,holder,method,param,get,method,annotations,return,match
QualifierAnnotationAutowireCandidateResolver -> @Override 	public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor);1495868221;Determine whether the provided bean definition is an autowire candidate._<p>To be considered a candidate the bean's <em>autowire-candidate</em>_attribute must not have been set to 'false'. Also, if an annotation on_the field or parameter to be autowired is recognized by this bean factory_as a <em>qualifier</em>, the bean must 'match' against the annotation as_well as any attributes it may contain. The bean definition must contain_the same qualifier or match by meta attributes. A "value" attribute will_fallback to match against the bean name or an alias if a qualifier or_attribute does not match._@see Qualifier;@Override_	public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor) {_		boolean match = super.isAutowireCandidate(bdHolder, descriptor)__		if (match && descriptor != null) {_			match = checkQualifiers(bdHolder, descriptor.getAnnotations())__			if (match) {_				MethodParameter methodParam = descriptor.getMethodParameter()__				if (methodParam != null) {_					Method method = methodParam.getMethod()__					if (method == null || void.class == method.getReturnType()) {_						match = checkQualifiers(bdHolder, methodParam.getMethodAnnotations())__					}_				}_			}_		}_		return match__	};determine,whether,the,provided,bean,definition,is,an,autowire,candidate,p,to,be,considered,a,candidate,the,bean,s,em,autowire,candidate,em,attribute,must,not,have,been,set,to,false,also,if,an,annotation,on,the,field,or,parameter,to,be,autowired,is,recognized,by,this,bean,factory,as,a,em,qualifier,em,the,bean,must,match,against,the,annotation,as,well,as,any,attributes,it,may,contain,the,bean,definition,must,contain,the,same,qualifier,or,match,by,meta,attributes,a,value,attribute,will,fallback,to,match,against,the,bean,name,or,an,alias,if,a,qualifier,or,attribute,does,not,match,see,qualifier;override,public,boolean,is,autowire,candidate,bean,definition,holder,bd,holder,dependency,descriptor,descriptor,boolean,match,super,is,autowire,candidate,bd,holder,descriptor,if,match,descriptor,null,match,check,qualifiers,bd,holder,descriptor,get,annotations,if,match,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,method,method,method,param,get,method,if,method,null,void,class,method,get,return,type,match,check,qualifiers,bd,holder,method,param,get,method,annotations,return,match
QualifierAnnotationAutowireCandidateResolver -> @Override 	public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor);1496837955;Determine whether the provided bean definition is an autowire candidate._<p>To be considered a candidate the bean's <em>autowire-candidate</em>_attribute must not have been set to 'false'. Also, if an annotation on_the field or parameter to be autowired is recognized by this bean factory_as a <em>qualifier</em>, the bean must 'match' against the annotation as_well as any attributes it may contain. The bean definition must contain_the same qualifier or match by meta attributes. A "value" attribute will_fallback to match against the bean name or an alias if a qualifier or_attribute does not match._@see Qualifier;@Override_	public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor) {_		boolean match = super.isAutowireCandidate(bdHolder, descriptor)__		if (match) {_			match = checkQualifiers(bdHolder, descriptor.getAnnotations())__			if (match) {_				MethodParameter methodParam = descriptor.getMethodParameter()__				if (methodParam != null) {_					Method method = methodParam.getMethod()__					if (method == null || void.class == method.getReturnType()) {_						match = checkQualifiers(bdHolder, methodParam.getMethodAnnotations())__					}_				}_			}_		}_		return match__	};determine,whether,the,provided,bean,definition,is,an,autowire,candidate,p,to,be,considered,a,candidate,the,bean,s,em,autowire,candidate,em,attribute,must,not,have,been,set,to,false,also,if,an,annotation,on,the,field,or,parameter,to,be,autowired,is,recognized,by,this,bean,factory,as,a,em,qualifier,em,the,bean,must,match,against,the,annotation,as,well,as,any,attributes,it,may,contain,the,bean,definition,must,contain,the,same,qualifier,or,match,by,meta,attributes,a,value,attribute,will,fallback,to,match,against,the,bean,name,or,an,alias,if,a,qualifier,or,attribute,does,not,match,see,qualifier;override,public,boolean,is,autowire,candidate,bean,definition,holder,bd,holder,dependency,descriptor,descriptor,boolean,match,super,is,autowire,candidate,bd,holder,descriptor,if,match,match,check,qualifiers,bd,holder,descriptor,get,annotations,if,match,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,method,method,method,param,get,method,if,method,null,void,class,method,get,return,type,match,check,qualifiers,bd,holder,method,param,get,method,annotations,return,match
QualifierAnnotationAutowireCandidateResolver -> @Override 	public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor);1502974979;Determine whether the provided bean definition is an autowire candidate._<p>To be considered a candidate the bean's <em>autowire-candidate</em>_attribute must not have been set to 'false'. Also, if an annotation on_the field or parameter to be autowired is recognized by this bean factory_as a <em>qualifier</em>, the bean must 'match' against the annotation as_well as any attributes it may contain. The bean definition must contain_the same qualifier or match by meta attributes. A "value" attribute will_fallback to match against the bean name or an alias if a qualifier or_attribute does not match._@see Qualifier;@Override_	public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor) {_		boolean match = super.isAutowireCandidate(bdHolder, descriptor)__		if (match) {_			match = checkQualifiers(bdHolder, descriptor.getAnnotations())__			if (match) {_				MethodParameter methodParam = descriptor.getMethodParameter()__				if (methodParam != null) {_					Method method = methodParam.getMethod()__					if (method == null || void.class == method.getReturnType()) {_						match = checkQualifiers(bdHolder, methodParam.getMethodAnnotations())__					}_				}_			}_		}_		return match__	};determine,whether,the,provided,bean,definition,is,an,autowire,candidate,p,to,be,considered,a,candidate,the,bean,s,em,autowire,candidate,em,attribute,must,not,have,been,set,to,false,also,if,an,annotation,on,the,field,or,parameter,to,be,autowired,is,recognized,by,this,bean,factory,as,a,em,qualifier,em,the,bean,must,match,against,the,annotation,as,well,as,any,attributes,it,may,contain,the,bean,definition,must,contain,the,same,qualifier,or,match,by,meta,attributes,a,value,attribute,will,fallback,to,match,against,the,bean,name,or,an,alias,if,a,qualifier,or,attribute,does,not,match,see,qualifier;override,public,boolean,is,autowire,candidate,bean,definition,holder,bd,holder,dependency,descriptor,descriptor,boolean,match,super,is,autowire,candidate,bd,holder,descriptor,if,match,match,check,qualifiers,bd,holder,descriptor,get,annotations,if,match,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,method,method,method,param,get,method,if,method,null,void,class,method,get,return,type,match,check,qualifiers,bd,holder,method,param,get,method,annotations,return,match
QualifierAnnotationAutowireCandidateResolver -> @Override 	public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor);1534347014;Determine whether the provided bean definition is an autowire candidate._<p>To be considered a candidate the bean's <em>autowire-candidate</em>_attribute must not have been set to 'false'. Also, if an annotation on_the field or parameter to be autowired is recognized by this bean factory_as a <em>qualifier</em>, the bean must 'match' against the annotation as_well as any attributes it may contain. The bean definition must contain_the same qualifier or match by meta attributes. A "value" attribute will_fallback to match against the bean name or an alias if a qualifier or_attribute does not match._@see Qualifier;@Override_	public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor) {_		boolean match = super.isAutowireCandidate(bdHolder, descriptor)__		if (match) {_			match = checkQualifiers(bdHolder, descriptor.getAnnotations())__			if (match) {_				MethodParameter methodParam = descriptor.getMethodParameter()__				if (methodParam != null) {_					Method method = methodParam.getMethod()__					if (method == null || void.class == method.getReturnType()) {_						match = checkQualifiers(bdHolder, methodParam.getMethodAnnotations())__					}_				}_			}_		}_		return match__	};determine,whether,the,provided,bean,definition,is,an,autowire,candidate,p,to,be,considered,a,candidate,the,bean,s,em,autowire,candidate,em,attribute,must,not,have,been,set,to,false,also,if,an,annotation,on,the,field,or,parameter,to,be,autowired,is,recognized,by,this,bean,factory,as,a,em,qualifier,em,the,bean,must,match,against,the,annotation,as,well,as,any,attributes,it,may,contain,the,bean,definition,must,contain,the,same,qualifier,or,match,by,meta,attributes,a,value,attribute,will,fallback,to,match,against,the,bean,name,or,an,alias,if,a,qualifier,or,attribute,does,not,match,see,qualifier;override,public,boolean,is,autowire,candidate,bean,definition,holder,bd,holder,dependency,descriptor,descriptor,boolean,match,super,is,autowire,candidate,bd,holder,descriptor,if,match,match,check,qualifiers,bd,holder,descriptor,get,annotations,if,match,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,method,method,method,param,get,method,if,method,null,void,class,method,get,return,type,match,check,qualifiers,bd,holder,method,param,get,method,annotations,return,match
QualifierAnnotationAutowireCandidateResolver -> @Override 	public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor);1536855799;Determine whether the provided bean definition is an autowire candidate._<p>To be considered a candidate the bean's <em>autowire-candidate</em>_attribute must not have been set to 'false'. Also, if an annotation on_the field or parameter to be autowired is recognized by this bean factory_as a <em>qualifier</em>, the bean must 'match' against the annotation as_well as any attributes it may contain. The bean definition must contain_the same qualifier or match by meta attributes. A "value" attribute will_fallback to match against the bean name or an alias if a qualifier or_attribute does not match._@see Qualifier;@Override_	public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor) {_		boolean match = super.isAutowireCandidate(bdHolder, descriptor)__		if (match) {_			match = checkQualifiers(bdHolder, descriptor.getAnnotations())__			if (match) {_				MethodParameter methodParam = descriptor.getMethodParameter()__				if (methodParam != null) {_					Method method = methodParam.getMethod()__					if (method == null || void.class == method.getReturnType()) {_						match = checkQualifiers(bdHolder, methodParam.getMethodAnnotations())__					}_				}_			}_		}_		return match__	};determine,whether,the,provided,bean,definition,is,an,autowire,candidate,p,to,be,considered,a,candidate,the,bean,s,em,autowire,candidate,em,attribute,must,not,have,been,set,to,false,also,if,an,annotation,on,the,field,or,parameter,to,be,autowired,is,recognized,by,this,bean,factory,as,a,em,qualifier,em,the,bean,must,match,against,the,annotation,as,well,as,any,attributes,it,may,contain,the,bean,definition,must,contain,the,same,qualifier,or,match,by,meta,attributes,a,value,attribute,will,fallback,to,match,against,the,bean,name,or,an,alias,if,a,qualifier,or,attribute,does,not,match,see,qualifier;override,public,boolean,is,autowire,candidate,bean,definition,holder,bd,holder,dependency,descriptor,descriptor,boolean,match,super,is,autowire,candidate,bd,holder,descriptor,if,match,match,check,qualifiers,bd,holder,descriptor,get,annotations,if,match,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,method,method,method,param,get,method,if,method,null,void,class,method,get,return,type,match,check,qualifiers,bd,holder,method,param,get,method,annotations,return,match
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes);1328020251;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation types._@param qualifierTypes the qualifier annotations to look for;public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes) {_		Assert.notNull(qualifierTypes, "'qualifierTypes' must not be null")__		this.qualifierTypes.addAll(qualifierTypes)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,types,param,qualifier,types,the,qualifier,annotations,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,set,class,extends,annotation,qualifier,types,assert,not,null,qualifier,types,qualifier,types,must,not,be,null,this,qualifier,types,add,all,qualifier,types
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes);1351681817;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation types._@param qualifierTypes the qualifier annotations to look for;public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes) {_		Assert.notNull(qualifierTypes, "'qualifierTypes' must not be null")__		this.qualifierTypes.addAll(qualifierTypes)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,types,param,qualifier,types,the,qualifier,annotations,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,set,class,extends,annotation,qualifier,types,assert,not,null,qualifier,types,qualifier,types,must,not,be,null,this,qualifier,types,add,all,qualifier,types
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes);1356735495;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation types._@param qualifierTypes the qualifier annotations to look for;public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes) {_		Assert.notNull(qualifierTypes, "'qualifierTypes' must not be null")__		this.qualifierTypes.addAll(qualifierTypes)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,types,param,qualifier,types,the,qualifier,annotations,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,set,class,extends,annotation,qualifier,types,assert,not,null,qualifier,types,qualifier,types,must,not,be,null,this,qualifier,types,add,all,qualifier,types
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes);1357119239;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation types._@param qualifierTypes the qualifier annotations to look for;public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes) {_		Assert.notNull(qualifierTypes, "'qualifierTypes' must not be null")__		this.qualifierTypes.addAll(qualifierTypes)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,types,param,qualifier,types,the,qualifier,annotations,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,set,class,extends,annotation,qualifier,types,assert,not,null,qualifier,types,qualifier,types,must,not,be,null,this,qualifier,types,add,all,qualifier,types
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes);1368482696;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation types._@param qualifierTypes the qualifier annotations to look for;public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes) {_		Assert.notNull(qualifierTypes, "'qualifierTypes' must not be null")__		this.qualifierTypes.addAll(qualifierTypes)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,types,param,qualifier,types,the,qualifier,annotations,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,set,class,extends,annotation,qualifier,types,assert,not,null,qualifier,types,qualifier,types,must,not,be,null,this,qualifier,types,add,all,qualifier,types
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes);1377641679;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation types._@param qualifierTypes the qualifier annotations to look for;public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes) {_		Assert.notNull(qualifierTypes, "'qualifierTypes' must not be null")__		this.qualifierTypes.addAll(qualifierTypes)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,types,param,qualifier,types,the,qualifier,annotations,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,set,class,extends,annotation,qualifier,types,assert,not,null,qualifier,types,qualifier,types,must,not,be,null,this,qualifier,types,add,all,qualifier,types
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes);1381788683;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation types._@param qualifierTypes the qualifier annotations to look for;public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes) {_		Assert.notNull(qualifierTypes, "'qualifierTypes' must not be null")__		this.qualifierTypes.addAll(qualifierTypes)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,types,param,qualifier,types,the,qualifier,annotations,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,set,class,extends,annotation,qualifier,types,assert,not,null,qualifier,types,qualifier,types,must,not,be,null,this,qualifier,types,add,all,qualifier,types
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes);1382826936;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation types._@param qualifierTypes the qualifier annotations to look for;public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes) {_		Assert.notNull(qualifierTypes, "'qualifierTypes' must not be null")__		this.qualifierTypes.addAll(qualifierTypes)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,types,param,qualifier,types,the,qualifier,annotations,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,set,class,extends,annotation,qualifier,types,assert,not,null,qualifier,types,qualifier,types,must,not,be,null,this,qualifier,types,add,all,qualifier,types
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes);1386541456;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation types._@param qualifierTypes the qualifier annotations to look for;public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes) {_		Assert.notNull(qualifierTypes, "'qualifierTypes' must not be null")__		this.qualifierTypes.addAll(qualifierTypes)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,types,param,qualifier,types,the,qualifier,annotations,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,set,class,extends,annotation,qualifier,types,assert,not,null,qualifier,types,qualifier,types,must,not,be,null,this,qualifier,types,add,all,qualifier,types
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes);1398638841;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation types._@param qualifierTypes the qualifier annotations to look for;public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes) {_		Assert.notNull(qualifierTypes, "'qualifierTypes' must not be null")__		this.qualifierTypes.addAll(qualifierTypes)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,types,param,qualifier,types,the,qualifier,annotations,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,set,class,extends,annotation,qualifier,types,assert,not,null,qualifier,types,qualifier,types,must,not,be,null,this,qualifier,types,add,all,qualifier,types
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes);1413990280;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation types._@param qualifierTypes the qualifier annotations to look for;public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes) {_		Assert.notNull(qualifierTypes, "'qualifierTypes' must not be null")__		this.qualifierTypes.addAll(qualifierTypes)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,types,param,qualifier,types,the,qualifier,annotations,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,set,class,extends,annotation,qualifier,types,assert,not,null,qualifier,types,qualifier,types,must,not,be,null,this,qualifier,types,add,all,qualifier,types
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes);1432125256;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation types._@param qualifierTypes the qualifier annotations to look for;public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes) {_		Assert.notNull(qualifierTypes, "'qualifierTypes' must not be null")__		this.qualifierTypes.addAll(qualifierTypes)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,types,param,qualifier,types,the,qualifier,annotations,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,set,class,extends,annotation,qualifier,types,assert,not,null,qualifier,types,qualifier,types,must,not,be,null,this,qualifier,types,add,all,qualifier,types
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes);1451408536;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation types._@param qualifierTypes the qualifier annotations to look for;public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes) {_		Assert.notNull(qualifierTypes, "'qualifierTypes' must not be null")__		this.qualifierTypes.addAll(qualifierTypes)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,types,param,qualifier,types,the,qualifier,annotations,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,set,class,extends,annotation,qualifier,types,assert,not,null,qualifier,types,qualifier,types,must,not,be,null,this,qualifier,types,add,all,qualifier,types
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes);1467730834;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation types._@param qualifierTypes the qualifier annotations to look for;public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes) {_		Assert.notNull(qualifierTypes, "'qualifierTypes' must not be null")__		this.qualifierTypes.addAll(qualifierTypes)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,types,param,qualifier,types,the,qualifier,annotations,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,set,class,extends,annotation,qualifier,types,assert,not,null,qualifier,types,qualifier,types,must,not,be,null,this,qualifier,types,add,all,qualifier,types
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes);1474010431;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation types._@param qualifierTypes the qualifier annotations to look for;public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes) {_		Assert.notNull(qualifierTypes, "'qualifierTypes' must not be null")__		this.qualifierTypes.addAll(qualifierTypes)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,types,param,qualifier,types,the,qualifier,annotations,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,set,class,extends,annotation,qualifier,types,assert,not,null,qualifier,types,qualifier,types,must,not,be,null,this,qualifier,types,add,all,qualifier,types
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes);1493811736;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation types._@param qualifierTypes the qualifier annotations to look for;public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes) {_		Assert.notNull(qualifierTypes, "'qualifierTypes' must not be null")__		this.qualifierTypes.addAll(qualifierTypes)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,types,param,qualifier,types,the,qualifier,annotations,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,set,class,extends,annotation,qualifier,types,assert,not,null,qualifier,types,qualifier,types,must,not,be,null,this,qualifier,types,add,all,qualifier,types
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes);1495868221;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation types._@param qualifierTypes the qualifier annotations to look for;public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes) {_		Assert.notNull(qualifierTypes, "'qualifierTypes' must not be null")__		this.qualifierTypes.addAll(qualifierTypes)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,types,param,qualifier,types,the,qualifier,annotations,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,set,class,extends,annotation,qualifier,types,assert,not,null,qualifier,types,qualifier,types,must,not,be,null,this,qualifier,types,add,all,qualifier,types
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes);1496837955;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation types._@param qualifierTypes the qualifier annotations to look for;public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes) {_		Assert.notNull(qualifierTypes, "'qualifierTypes' must not be null")__		this.qualifierTypes.addAll(qualifierTypes)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,types,param,qualifier,types,the,qualifier,annotations,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,set,class,extends,annotation,qualifier,types,assert,not,null,qualifier,types,qualifier,types,must,not,be,null,this,qualifier,types,add,all,qualifier,types
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes);1502974979;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation types._@param qualifierTypes the qualifier annotations to look for;public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes) {_		Assert.notNull(qualifierTypes, "'qualifierTypes' must not be null")__		this.qualifierTypes.addAll(qualifierTypes)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,types,param,qualifier,types,the,qualifier,annotations,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,set,class,extends,annotation,qualifier,types,assert,not,null,qualifier,types,qualifier,types,must,not,be,null,this,qualifier,types,add,all,qualifier,types
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes);1534347014;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation types._@param qualifierTypes the qualifier annotations to look for;public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes) {_		Assert.notNull(qualifierTypes, "'qualifierTypes' must not be null")__		this.qualifierTypes.addAll(qualifierTypes)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,types,param,qualifier,types,the,qualifier,annotations,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,set,class,extends,annotation,qualifier,types,assert,not,null,qualifier,types,qualifier,types,must,not,be,null,this,qualifier,types,add,all,qualifier,types
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes);1536855799;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation types._@param qualifierTypes the qualifier annotations to look for;public QualifierAnnotationAutowireCandidateResolver(Set<Class<? extends Annotation>> qualifierTypes) {_		Assert.notNull(qualifierTypes, "'qualifierTypes' must not be null")__		this.qualifierTypes.addAll(qualifierTypes)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,types,param,qualifier,types,the,qualifier,annotations,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,set,class,extends,annotation,qualifier,types,assert,not,null,qualifier,types,qualifier,types,must,not,be,null,this,qualifier,types,add,all,qualifier,types
QualifierAnnotationAutowireCandidateResolver -> public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType);1328020251;Set the 'value' annotation type, to be used on fields, method parameters_and constructor parameters._<p>The default value annotation type is the Spring-provided_{@link Value} annotation._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate a default value_expression for a specific argument.;public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType) {_		this.valueAnnotationType = valueAnnotationType__	};set,the,value,annotation,type,to,be,used,on,fields,method,parameters,and,constructor,parameters,p,the,default,value,annotation,type,is,the,spring,provided,link,value,annotation,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,a,default,value,expression,for,a,specific,argument;public,void,set,value,annotation,type,class,extends,annotation,value,annotation,type,this,value,annotation,type,value,annotation,type
QualifierAnnotationAutowireCandidateResolver -> public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType);1351681817;Set the 'value' annotation type, to be used on fields, method parameters_and constructor parameters._<p>The default value annotation type is the Spring-provided_{@link Value} annotation._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate a default value_expression for a specific argument.;public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType) {_		this.valueAnnotationType = valueAnnotationType__	};set,the,value,annotation,type,to,be,used,on,fields,method,parameters,and,constructor,parameters,p,the,default,value,annotation,type,is,the,spring,provided,link,value,annotation,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,a,default,value,expression,for,a,specific,argument;public,void,set,value,annotation,type,class,extends,annotation,value,annotation,type,this,value,annotation,type,value,annotation,type
QualifierAnnotationAutowireCandidateResolver -> public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType);1356735495;Set the 'value' annotation type, to be used on fields, method parameters_and constructor parameters._<p>The default value annotation type is the Spring-provided_{@link Value} annotation._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate a default value_expression for a specific argument.;public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType) {_		this.valueAnnotationType = valueAnnotationType__	};set,the,value,annotation,type,to,be,used,on,fields,method,parameters,and,constructor,parameters,p,the,default,value,annotation,type,is,the,spring,provided,link,value,annotation,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,a,default,value,expression,for,a,specific,argument;public,void,set,value,annotation,type,class,extends,annotation,value,annotation,type,this,value,annotation,type,value,annotation,type
QualifierAnnotationAutowireCandidateResolver -> public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType);1357119239;Set the 'value' annotation type, to be used on fields, method parameters_and constructor parameters._<p>The default value annotation type is the Spring-provided_{@link Value} annotation._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate a default value_expression for a specific argument.;public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType) {_		this.valueAnnotationType = valueAnnotationType__	};set,the,value,annotation,type,to,be,used,on,fields,method,parameters,and,constructor,parameters,p,the,default,value,annotation,type,is,the,spring,provided,link,value,annotation,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,a,default,value,expression,for,a,specific,argument;public,void,set,value,annotation,type,class,extends,annotation,value,annotation,type,this,value,annotation,type,value,annotation,type
QualifierAnnotationAutowireCandidateResolver -> public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType);1368482696;Set the 'value' annotation type, to be used on fields, method parameters_and constructor parameters._<p>The default value annotation type is the Spring-provided_{@link Value} annotation._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate a default value_expression for a specific argument.;public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType) {_		this.valueAnnotationType = valueAnnotationType__	};set,the,value,annotation,type,to,be,used,on,fields,method,parameters,and,constructor,parameters,p,the,default,value,annotation,type,is,the,spring,provided,link,value,annotation,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,a,default,value,expression,for,a,specific,argument;public,void,set,value,annotation,type,class,extends,annotation,value,annotation,type,this,value,annotation,type,value,annotation,type
QualifierAnnotationAutowireCandidateResolver -> public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType);1377641679;Set the 'value' annotation type, to be used on fields, method parameters_and constructor parameters._<p>The default value annotation type is the Spring-provided_{@link Value} annotation._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate a default value_expression for a specific argument.;public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType) {_		this.valueAnnotationType = valueAnnotationType__	};set,the,value,annotation,type,to,be,used,on,fields,method,parameters,and,constructor,parameters,p,the,default,value,annotation,type,is,the,spring,provided,link,value,annotation,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,a,default,value,expression,for,a,specific,argument;public,void,set,value,annotation,type,class,extends,annotation,value,annotation,type,this,value,annotation,type,value,annotation,type
QualifierAnnotationAutowireCandidateResolver -> public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType);1381788683;Set the 'value' annotation type, to be used on fields, method parameters_and constructor parameters._<p>The default value annotation type is the Spring-provided_{@link Value} annotation._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate a default value_expression for a specific argument.;public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType) {_		this.valueAnnotationType = valueAnnotationType__	};set,the,value,annotation,type,to,be,used,on,fields,method,parameters,and,constructor,parameters,p,the,default,value,annotation,type,is,the,spring,provided,link,value,annotation,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,a,default,value,expression,for,a,specific,argument;public,void,set,value,annotation,type,class,extends,annotation,value,annotation,type,this,value,annotation,type,value,annotation,type
QualifierAnnotationAutowireCandidateResolver -> public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType);1382826936;Set the 'value' annotation type, to be used on fields, method parameters_and constructor parameters._<p>The default value annotation type is the Spring-provided_{@link Value} annotation._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate a default value_expression for a specific argument.;public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType) {_		this.valueAnnotationType = valueAnnotationType__	};set,the,value,annotation,type,to,be,used,on,fields,method,parameters,and,constructor,parameters,p,the,default,value,annotation,type,is,the,spring,provided,link,value,annotation,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,a,default,value,expression,for,a,specific,argument;public,void,set,value,annotation,type,class,extends,annotation,value,annotation,type,this,value,annotation,type,value,annotation,type
QualifierAnnotationAutowireCandidateResolver -> public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType);1386541456;Set the 'value' annotation type, to be used on fields, method parameters_and constructor parameters._<p>The default value annotation type is the Spring-provided_{@link Value} annotation._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate a default value_expression for a specific argument.;public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType) {_		this.valueAnnotationType = valueAnnotationType__	};set,the,value,annotation,type,to,be,used,on,fields,method,parameters,and,constructor,parameters,p,the,default,value,annotation,type,is,the,spring,provided,link,value,annotation,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,a,default,value,expression,for,a,specific,argument;public,void,set,value,annotation,type,class,extends,annotation,value,annotation,type,this,value,annotation,type,value,annotation,type
QualifierAnnotationAutowireCandidateResolver -> public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType);1398638841;Set the 'value' annotation type, to be used on fields, method parameters_and constructor parameters._<p>The default value annotation type is the Spring-provided_{@link Value} annotation._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate a default value_expression for a specific argument.;public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType) {_		this.valueAnnotationType = valueAnnotationType__	};set,the,value,annotation,type,to,be,used,on,fields,method,parameters,and,constructor,parameters,p,the,default,value,annotation,type,is,the,spring,provided,link,value,annotation,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,a,default,value,expression,for,a,specific,argument;public,void,set,value,annotation,type,class,extends,annotation,value,annotation,type,this,value,annotation,type,value,annotation,type
QualifierAnnotationAutowireCandidateResolver -> public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType);1413990280;Set the 'value' annotation type, to be used on fields, method parameters_and constructor parameters._<p>The default value annotation type is the Spring-provided_{@link Value} annotation._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate a default value_expression for a specific argument.;public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType) {_		this.valueAnnotationType = valueAnnotationType__	};set,the,value,annotation,type,to,be,used,on,fields,method,parameters,and,constructor,parameters,p,the,default,value,annotation,type,is,the,spring,provided,link,value,annotation,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,a,default,value,expression,for,a,specific,argument;public,void,set,value,annotation,type,class,extends,annotation,value,annotation,type,this,value,annotation,type,value,annotation,type
QualifierAnnotationAutowireCandidateResolver -> public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType);1432125256;Set the 'value' annotation type, to be used on fields, method parameters_and constructor parameters._<p>The default value annotation type is the Spring-provided_{@link Value} annotation._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate a default value_expression for a specific argument.;public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType) {_		this.valueAnnotationType = valueAnnotationType__	};set,the,value,annotation,type,to,be,used,on,fields,method,parameters,and,constructor,parameters,p,the,default,value,annotation,type,is,the,spring,provided,link,value,annotation,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,a,default,value,expression,for,a,specific,argument;public,void,set,value,annotation,type,class,extends,annotation,value,annotation,type,this,value,annotation,type,value,annotation,type
QualifierAnnotationAutowireCandidateResolver -> public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType);1451408536;Set the 'value' annotation type, to be used on fields, method parameters_and constructor parameters._<p>The default value annotation type is the Spring-provided_{@link Value} annotation._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate a default value_expression for a specific argument.;public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType) {_		this.valueAnnotationType = valueAnnotationType__	};set,the,value,annotation,type,to,be,used,on,fields,method,parameters,and,constructor,parameters,p,the,default,value,annotation,type,is,the,spring,provided,link,value,annotation,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,a,default,value,expression,for,a,specific,argument;public,void,set,value,annotation,type,class,extends,annotation,value,annotation,type,this,value,annotation,type,value,annotation,type
QualifierAnnotationAutowireCandidateResolver -> public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType);1467730834;Set the 'value' annotation type, to be used on fields, method parameters_and constructor parameters._<p>The default value annotation type is the Spring-provided_{@link Value} annotation._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate a default value_expression for a specific argument.;public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType) {_		this.valueAnnotationType = valueAnnotationType__	};set,the,value,annotation,type,to,be,used,on,fields,method,parameters,and,constructor,parameters,p,the,default,value,annotation,type,is,the,spring,provided,link,value,annotation,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,a,default,value,expression,for,a,specific,argument;public,void,set,value,annotation,type,class,extends,annotation,value,annotation,type,this,value,annotation,type,value,annotation,type
QualifierAnnotationAutowireCandidateResolver -> public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType);1474010431;Set the 'value' annotation type, to be used on fields, method parameters_and constructor parameters._<p>The default value annotation type is the Spring-provided_{@link Value} annotation._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate a default value_expression for a specific argument.;public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType) {_		this.valueAnnotationType = valueAnnotationType__	};set,the,value,annotation,type,to,be,used,on,fields,method,parameters,and,constructor,parameters,p,the,default,value,annotation,type,is,the,spring,provided,link,value,annotation,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,a,default,value,expression,for,a,specific,argument;public,void,set,value,annotation,type,class,extends,annotation,value,annotation,type,this,value,annotation,type,value,annotation,type
QualifierAnnotationAutowireCandidateResolver -> public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType);1493811736;Set the 'value' annotation type, to be used on fields, method parameters_and constructor parameters._<p>The default value annotation type is the Spring-provided_{@link Value} annotation._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate a default value_expression for a specific argument.;public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType) {_		this.valueAnnotationType = valueAnnotationType__	};set,the,value,annotation,type,to,be,used,on,fields,method,parameters,and,constructor,parameters,p,the,default,value,annotation,type,is,the,spring,provided,link,value,annotation,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,a,default,value,expression,for,a,specific,argument;public,void,set,value,annotation,type,class,extends,annotation,value,annotation,type,this,value,annotation,type,value,annotation,type
QualifierAnnotationAutowireCandidateResolver -> public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType);1495868221;Set the 'value' annotation type, to be used on fields, method parameters_and constructor parameters._<p>The default value annotation type is the Spring-provided_{@link Value} annotation._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate a default value_expression for a specific argument.;public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType) {_		this.valueAnnotationType = valueAnnotationType__	};set,the,value,annotation,type,to,be,used,on,fields,method,parameters,and,constructor,parameters,p,the,default,value,annotation,type,is,the,spring,provided,link,value,annotation,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,a,default,value,expression,for,a,specific,argument;public,void,set,value,annotation,type,class,extends,annotation,value,annotation,type,this,value,annotation,type,value,annotation,type
QualifierAnnotationAutowireCandidateResolver -> public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType);1496837955;Set the 'value' annotation type, to be used on fields, method parameters_and constructor parameters._<p>The default value annotation type is the Spring-provided_{@link Value} annotation._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate a default value_expression for a specific argument.;public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType) {_		this.valueAnnotationType = valueAnnotationType__	};set,the,value,annotation,type,to,be,used,on,fields,method,parameters,and,constructor,parameters,p,the,default,value,annotation,type,is,the,spring,provided,link,value,annotation,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,a,default,value,expression,for,a,specific,argument;public,void,set,value,annotation,type,class,extends,annotation,value,annotation,type,this,value,annotation,type,value,annotation,type
QualifierAnnotationAutowireCandidateResolver -> public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType);1502974979;Set the 'value' annotation type, to be used on fields, method parameters_and constructor parameters._<p>The default value annotation type is the Spring-provided_{@link Value} annotation._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate a default value_expression for a specific argument.;public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType) {_		this.valueAnnotationType = valueAnnotationType__	};set,the,value,annotation,type,to,be,used,on,fields,method,parameters,and,constructor,parameters,p,the,default,value,annotation,type,is,the,spring,provided,link,value,annotation,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,a,default,value,expression,for,a,specific,argument;public,void,set,value,annotation,type,class,extends,annotation,value,annotation,type,this,value,annotation,type,value,annotation,type
QualifierAnnotationAutowireCandidateResolver -> public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType);1534347014;Set the 'value' annotation type, to be used on fields, method parameters_and constructor parameters._<p>The default value annotation type is the Spring-provided_{@link Value} annotation._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate a default value_expression for a specific argument.;public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType) {_		this.valueAnnotationType = valueAnnotationType__	};set,the,value,annotation,type,to,be,used,on,fields,method,parameters,and,constructor,parameters,p,the,default,value,annotation,type,is,the,spring,provided,link,value,annotation,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,a,default,value,expression,for,a,specific,argument;public,void,set,value,annotation,type,class,extends,annotation,value,annotation,type,this,value,annotation,type,value,annotation,type
QualifierAnnotationAutowireCandidateResolver -> public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType);1536855799;Set the 'value' annotation type, to be used on fields, method parameters_and constructor parameters._<p>The default value annotation type is the Spring-provided_{@link Value} annotation._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate a default value_expression for a specific argument.;public void setValueAnnotationType(Class<? extends Annotation> valueAnnotationType) {_		this.valueAnnotationType = valueAnnotationType__	};set,the,value,annotation,type,to,be,used,on,fields,method,parameters,and,constructor,parameters,p,the,default,value,annotation,type,is,the,spring,provided,link,value,annotation,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,a,default,value,expression,for,a,specific,argument;public,void,set,value,annotation,type,class,extends,annotation,value,annotation,type,this,value,annotation,type,value,annotation,type
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifier( 			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter);1328020251;Match the given qualifier annotation against the candidate bean definition.;protected boolean checkQualifier(_			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter) {__		Class<? extends Annotation> type = annotation.annotationType()__		RootBeanDefinition bd = (RootBeanDefinition) bdHolder.getBeanDefinition()__		AutowireCandidateQualifier qualifier = bd.getQualifier(type.getName())__		if (qualifier == null) {_			qualifier = bd.getQualifier(ClassUtils.getShortName(type))__		}_		if (qualifier == null) {_			Annotation targetAnnotation = null__			if (bd.getResolvedFactoryMethod() != null) {_				targetAnnotation = bd.getResolvedFactoryMethod().getAnnotation(type)__			}_			if (targetAnnotation == null) {_				_				if (this.beanFactory != null) {_					Class<?> beanType = this.beanFactory.getType(bdHolder.getBeanName())__					if (beanType != null) {_						targetAnnotation = ClassUtils.getUserClass(beanType).getAnnotation(type)__					}_				}_				if (targetAnnotation == null && bd.hasBeanClass()) {_					targetAnnotation = ClassUtils.getUserClass(bd.getBeanClass()).getAnnotation(type)__				}_			}_			if (targetAnnotation != null && targetAnnotation.equals(annotation)) {_				return true__			}_		}_		Map<String, Object> attributes = AnnotationUtils.getAnnotationAttributes(annotation)__		if (attributes.isEmpty() && qualifier == null) {_			_			return false__		}_		for (Map.Entry<String, Object> entry : attributes.entrySet()) {_			String attributeName = entry.getKey()__			Object expectedValue = entry.getValue()__			Object actualValue = null__			_			if (qualifier != null) {_				actualValue = qualifier.getAttribute(attributeName)__			}_			if (actualValue == null) {_				_				actualValue = bd.getAttribute(attributeName)__			}_			if (actualValue == null && attributeName.equals(AutowireCandidateQualifier.VALUE_KEY) &&_					expectedValue instanceof String && bdHolder.matchesName((String) expectedValue)) {_				_				continue__			}_			if (actualValue == null && qualifier != null) {_				_				actualValue = AnnotationUtils.getDefaultValue(annotation, attributeName)__			}_			if (actualValue != null) {_				actualValue = typeConverter.convertIfNecessary(actualValue, expectedValue.getClass())__			}_			if (!expectedValue.equals(actualValue)) {_				return false__			}_		}_		return true__	};match,the,given,qualifier,annotation,against,the,candidate,bean,definition;protected,boolean,check,qualifier,bean,definition,holder,bd,holder,annotation,annotation,type,converter,type,converter,class,extends,annotation,type,annotation,annotation,type,root,bean,definition,bd,root,bean,definition,bd,holder,get,bean,definition,autowire,candidate,qualifier,qualifier,bd,get,qualifier,type,get,name,if,qualifier,null,qualifier,bd,get,qualifier,class,utils,get,short,name,type,if,qualifier,null,annotation,target,annotation,null,if,bd,get,resolved,factory,method,null,target,annotation,bd,get,resolved,factory,method,get,annotation,type,if,target,annotation,null,if,this,bean,factory,null,class,bean,type,this,bean,factory,get,type,bd,holder,get,bean,name,if,bean,type,null,target,annotation,class,utils,get,user,class,bean,type,get,annotation,type,if,target,annotation,null,bd,has,bean,class,target,annotation,class,utils,get,user,class,bd,get,bean,class,get,annotation,type,if,target,annotation,null,target,annotation,equals,annotation,return,true,map,string,object,attributes,annotation,utils,get,annotation,attributes,annotation,if,attributes,is,empty,qualifier,null,return,false,for,map,entry,string,object,entry,attributes,entry,set,string,attribute,name,entry,get,key,object,expected,value,entry,get,value,object,actual,value,null,if,qualifier,null,actual,value,qualifier,get,attribute,attribute,name,if,actual,value,null,actual,value,bd,get,attribute,attribute,name,if,actual,value,null,attribute,name,equals,autowire,candidate,qualifier,expected,value,instanceof,string,bd,holder,matches,name,string,expected,value,continue,if,actual,value,null,qualifier,null,actual,value,annotation,utils,get,default,value,annotation,attribute,name,if,actual,value,null,actual,value,type,converter,convert,if,necessary,actual,value,expected,value,get,class,if,expected,value,equals,actual,value,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifier( 			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter);1351681817;Match the given qualifier annotation against the candidate bean definition.;protected boolean checkQualifier(_			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter) {__		Class<? extends Annotation> type = annotation.annotationType()__		RootBeanDefinition bd = (RootBeanDefinition) bdHolder.getBeanDefinition()__		AutowireCandidateQualifier qualifier = bd.getQualifier(type.getName())__		if (qualifier == null) {_			qualifier = bd.getQualifier(ClassUtils.getShortName(type))__		}_		if (qualifier == null) {_			Annotation targetAnnotation = null__			if (bd.getResolvedFactoryMethod() != null) {_				targetAnnotation = AnnotationUtils.getAnnotation(bd.getResolvedFactoryMethod(), type)__			}_			if (targetAnnotation == null) {_				_				if (this.beanFactory != null) {_					Class<?> beanType = this.beanFactory.getType(bdHolder.getBeanName())__					if (beanType != null) {_						targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(beanType), type)__					}_				}_				if (targetAnnotation == null && bd.hasBeanClass()) {_					targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(bd.getBeanClass()), type)__				}_			}_			if (targetAnnotation != null && targetAnnotation.equals(annotation)) {_				return true__			}_		}_		Map<String, Object> attributes = AnnotationUtils.getAnnotationAttributes(annotation)__		if (attributes.isEmpty() && qualifier == null) {_			_			return false__		}_		for (Map.Entry<String, Object> entry : attributes.entrySet()) {_			String attributeName = entry.getKey()__			Object expectedValue = entry.getValue()__			Object actualValue = null__			_			if (qualifier != null) {_				actualValue = qualifier.getAttribute(attributeName)__			}_			if (actualValue == null) {_				_				actualValue = bd.getAttribute(attributeName)__			}_			if (actualValue == null && attributeName.equals(AutowireCandidateQualifier.VALUE_KEY) &&_					expectedValue instanceof String && bdHolder.matchesName((String) expectedValue)) {_				_				continue__			}_			if (actualValue == null && qualifier != null) {_				_				actualValue = AnnotationUtils.getDefaultValue(annotation, attributeName)__			}_			if (actualValue != null) {_				actualValue = typeConverter.convertIfNecessary(actualValue, expectedValue.getClass())__			}_			if (!expectedValue.equals(actualValue)) {_				return false__			}_		}_		return true__	};match,the,given,qualifier,annotation,against,the,candidate,bean,definition;protected,boolean,check,qualifier,bean,definition,holder,bd,holder,annotation,annotation,type,converter,type,converter,class,extends,annotation,type,annotation,annotation,type,root,bean,definition,bd,root,bean,definition,bd,holder,get,bean,definition,autowire,candidate,qualifier,qualifier,bd,get,qualifier,type,get,name,if,qualifier,null,qualifier,bd,get,qualifier,class,utils,get,short,name,type,if,qualifier,null,annotation,target,annotation,null,if,bd,get,resolved,factory,method,null,target,annotation,annotation,utils,get,annotation,bd,get,resolved,factory,method,type,if,target,annotation,null,if,this,bean,factory,null,class,bean,type,this,bean,factory,get,type,bd,holder,get,bean,name,if,bean,type,null,target,annotation,annotation,utils,get,annotation,class,utils,get,user,class,bean,type,type,if,target,annotation,null,bd,has,bean,class,target,annotation,annotation,utils,get,annotation,class,utils,get,user,class,bd,get,bean,class,type,if,target,annotation,null,target,annotation,equals,annotation,return,true,map,string,object,attributes,annotation,utils,get,annotation,attributes,annotation,if,attributes,is,empty,qualifier,null,return,false,for,map,entry,string,object,entry,attributes,entry,set,string,attribute,name,entry,get,key,object,expected,value,entry,get,value,object,actual,value,null,if,qualifier,null,actual,value,qualifier,get,attribute,attribute,name,if,actual,value,null,actual,value,bd,get,attribute,attribute,name,if,actual,value,null,attribute,name,equals,autowire,candidate,qualifier,expected,value,instanceof,string,bd,holder,matches,name,string,expected,value,continue,if,actual,value,null,qualifier,null,actual,value,annotation,utils,get,default,value,annotation,attribute,name,if,actual,value,null,actual,value,type,converter,convert,if,necessary,actual,value,expected,value,get,class,if,expected,value,equals,actual,value,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifier( 			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter);1356735495;Match the given qualifier annotation against the candidate bean definition.;protected boolean checkQualifier(_			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter) {__		Class<? extends Annotation> type = annotation.annotationType()__		RootBeanDefinition bd = (RootBeanDefinition) bdHolder.getBeanDefinition()__		AutowireCandidateQualifier qualifier = bd.getQualifier(type.getName())__		if (qualifier == null) {_			qualifier = bd.getQualifier(ClassUtils.getShortName(type))__		}_		if (qualifier == null) {_			Annotation targetAnnotation = null__			if (bd.getResolvedFactoryMethod() != null) {_				targetAnnotation = AnnotationUtils.getAnnotation(bd.getResolvedFactoryMethod(), type)__			}_			if (targetAnnotation == null) {_				_				if (this.beanFactory != null) {_					Class<?> beanType = this.beanFactory.getType(bdHolder.getBeanName())__					if (beanType != null) {_						targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(beanType), type)__					}_				}_				if (targetAnnotation == null && bd.hasBeanClass()) {_					targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(bd.getBeanClass()), type)__				}_			}_			if (targetAnnotation != null && targetAnnotation.equals(annotation)) {_				return true__			}_		}_		Map<String, Object> attributes = AnnotationUtils.getAnnotationAttributes(annotation)__		if (attributes.isEmpty() && qualifier == null) {_			_			return false__		}_		for (Map.Entry<String, Object> entry : attributes.entrySet()) {_			String attributeName = entry.getKey()__			Object expectedValue = entry.getValue()__			Object actualValue = null__			_			if (qualifier != null) {_				actualValue = qualifier.getAttribute(attributeName)__			}_			if (actualValue == null) {_				_				actualValue = bd.getAttribute(attributeName)__			}_			if (actualValue == null && attributeName.equals(AutowireCandidateQualifier.VALUE_KEY) &&_					expectedValue instanceof String && bdHolder.matchesName((String) expectedValue)) {_				_				continue__			}_			if (actualValue == null && qualifier != null) {_				_				actualValue = AnnotationUtils.getDefaultValue(annotation, attributeName)__			}_			if (actualValue != null) {_				actualValue = typeConverter.convertIfNecessary(actualValue, expectedValue.getClass())__			}_			if (!expectedValue.equals(actualValue)) {_				return false__			}_		}_		return true__	};match,the,given,qualifier,annotation,against,the,candidate,bean,definition;protected,boolean,check,qualifier,bean,definition,holder,bd,holder,annotation,annotation,type,converter,type,converter,class,extends,annotation,type,annotation,annotation,type,root,bean,definition,bd,root,bean,definition,bd,holder,get,bean,definition,autowire,candidate,qualifier,qualifier,bd,get,qualifier,type,get,name,if,qualifier,null,qualifier,bd,get,qualifier,class,utils,get,short,name,type,if,qualifier,null,annotation,target,annotation,null,if,bd,get,resolved,factory,method,null,target,annotation,annotation,utils,get,annotation,bd,get,resolved,factory,method,type,if,target,annotation,null,if,this,bean,factory,null,class,bean,type,this,bean,factory,get,type,bd,holder,get,bean,name,if,bean,type,null,target,annotation,annotation,utils,get,annotation,class,utils,get,user,class,bean,type,type,if,target,annotation,null,bd,has,bean,class,target,annotation,annotation,utils,get,annotation,class,utils,get,user,class,bd,get,bean,class,type,if,target,annotation,null,target,annotation,equals,annotation,return,true,map,string,object,attributes,annotation,utils,get,annotation,attributes,annotation,if,attributes,is,empty,qualifier,null,return,false,for,map,entry,string,object,entry,attributes,entry,set,string,attribute,name,entry,get,key,object,expected,value,entry,get,value,object,actual,value,null,if,qualifier,null,actual,value,qualifier,get,attribute,attribute,name,if,actual,value,null,actual,value,bd,get,attribute,attribute,name,if,actual,value,null,attribute,name,equals,autowire,candidate,qualifier,expected,value,instanceof,string,bd,holder,matches,name,string,expected,value,continue,if,actual,value,null,qualifier,null,actual,value,annotation,utils,get,default,value,annotation,attribute,name,if,actual,value,null,actual,value,type,converter,convert,if,necessary,actual,value,expected,value,get,class,if,expected,value,equals,actual,value,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifier( 			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter);1357119239;Match the given qualifier annotation against the candidate bean definition.;protected boolean checkQualifier(_			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter) {__		Class<? extends Annotation> type = annotation.annotationType()__		RootBeanDefinition bd = (RootBeanDefinition) bdHolder.getBeanDefinition()__		AutowireCandidateQualifier qualifier = bd.getQualifier(type.getName())__		if (qualifier == null) {_			qualifier = bd.getQualifier(ClassUtils.getShortName(type))__		}_		if (qualifier == null) {_			Annotation targetAnnotation = null__			if (bd.getResolvedFactoryMethod() != null) {_				targetAnnotation = AnnotationUtils.getAnnotation(bd.getResolvedFactoryMethod(), type)__			}_			if (targetAnnotation == null) {_				_				if (this.beanFactory != null) {_					Class<?> beanType = this.beanFactory.getType(bdHolder.getBeanName())__					if (beanType != null) {_						targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(beanType), type)__					}_				}_				if (targetAnnotation == null && bd.hasBeanClass()) {_					targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(bd.getBeanClass()), type)__				}_			}_			if (targetAnnotation != null && targetAnnotation.equals(annotation)) {_				return true__			}_		}_		Map<String, Object> attributes = AnnotationUtils.getAnnotationAttributes(annotation)__		if (attributes.isEmpty() && qualifier == null) {_			_			return false__		}_		for (Map.Entry<String, Object> entry : attributes.entrySet()) {_			String attributeName = entry.getKey()__			Object expectedValue = entry.getValue()__			Object actualValue = null__			_			if (qualifier != null) {_				actualValue = qualifier.getAttribute(attributeName)__			}_			if (actualValue == null) {_				_				actualValue = bd.getAttribute(attributeName)__			}_			if (actualValue == null && attributeName.equals(AutowireCandidateQualifier.VALUE_KEY) &&_					expectedValue instanceof String && bdHolder.matchesName((String) expectedValue)) {_				_				continue__			}_			if (actualValue == null && qualifier != null) {_				_				actualValue = AnnotationUtils.getDefaultValue(annotation, attributeName)__			}_			if (actualValue != null) {_				actualValue = typeConverter.convertIfNecessary(actualValue, expectedValue.getClass())__			}_			if (!expectedValue.equals(actualValue)) {_				return false__			}_		}_		return true__	};match,the,given,qualifier,annotation,against,the,candidate,bean,definition;protected,boolean,check,qualifier,bean,definition,holder,bd,holder,annotation,annotation,type,converter,type,converter,class,extends,annotation,type,annotation,annotation,type,root,bean,definition,bd,root,bean,definition,bd,holder,get,bean,definition,autowire,candidate,qualifier,qualifier,bd,get,qualifier,type,get,name,if,qualifier,null,qualifier,bd,get,qualifier,class,utils,get,short,name,type,if,qualifier,null,annotation,target,annotation,null,if,bd,get,resolved,factory,method,null,target,annotation,annotation,utils,get,annotation,bd,get,resolved,factory,method,type,if,target,annotation,null,if,this,bean,factory,null,class,bean,type,this,bean,factory,get,type,bd,holder,get,bean,name,if,bean,type,null,target,annotation,annotation,utils,get,annotation,class,utils,get,user,class,bean,type,type,if,target,annotation,null,bd,has,bean,class,target,annotation,annotation,utils,get,annotation,class,utils,get,user,class,bd,get,bean,class,type,if,target,annotation,null,target,annotation,equals,annotation,return,true,map,string,object,attributes,annotation,utils,get,annotation,attributes,annotation,if,attributes,is,empty,qualifier,null,return,false,for,map,entry,string,object,entry,attributes,entry,set,string,attribute,name,entry,get,key,object,expected,value,entry,get,value,object,actual,value,null,if,qualifier,null,actual,value,qualifier,get,attribute,attribute,name,if,actual,value,null,actual,value,bd,get,attribute,attribute,name,if,actual,value,null,attribute,name,equals,autowire,candidate,qualifier,expected,value,instanceof,string,bd,holder,matches,name,string,expected,value,continue,if,actual,value,null,qualifier,null,actual,value,annotation,utils,get,default,value,annotation,attribute,name,if,actual,value,null,actual,value,type,converter,convert,if,necessary,actual,value,expected,value,get,class,if,expected,value,equals,actual,value,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifier( 			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter);1368482696;Match the given qualifier annotation against the candidate bean definition.;protected boolean checkQualifier(_			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter) {__		Class<? extends Annotation> type = annotation.annotationType()__		RootBeanDefinition bd = (RootBeanDefinition) bdHolder.getBeanDefinition()__		AutowireCandidateQualifier qualifier = bd.getQualifier(type.getName())__		if (qualifier == null) {_			qualifier = bd.getQualifier(ClassUtils.getShortName(type))__		}_		if (qualifier == null) {_			Annotation targetAnnotation = null__			if (bd.getResolvedFactoryMethod() != null) {_				targetAnnotation = AnnotationUtils.getAnnotation(bd.getResolvedFactoryMethod(), type)__			}_			if (targetAnnotation == null) {_				_				if (this.beanFactory != null) {_					Class<?> beanType = this.beanFactory.getType(bdHolder.getBeanName())__					if (beanType != null) {_						targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(beanType), type)__					}_				}_				if (targetAnnotation == null && bd.hasBeanClass()) {_					targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(bd.getBeanClass()), type)__				}_			}_			if (targetAnnotation != null && targetAnnotation.equals(annotation)) {_				return true__			}_		}_		Map<String, Object> attributes = AnnotationUtils.getAnnotationAttributes(annotation)__		if (attributes.isEmpty() && qualifier == null) {_			_			return false__		}_		for (Map.Entry<String, Object> entry : attributes.entrySet()) {_			String attributeName = entry.getKey()__			Object expectedValue = entry.getValue()__			Object actualValue = null__			_			if (qualifier != null) {_				actualValue = qualifier.getAttribute(attributeName)__			}_			if (actualValue == null) {_				_				actualValue = bd.getAttribute(attributeName)__			}_			if (actualValue == null && attributeName.equals(AutowireCandidateQualifier.VALUE_KEY) &&_					expectedValue instanceof String && bdHolder.matchesName((String) expectedValue)) {_				_				continue__			}_			if (actualValue == null && qualifier != null) {_				_				actualValue = AnnotationUtils.getDefaultValue(annotation, attributeName)__			}_			if (actualValue != null) {_				actualValue = typeConverter.convertIfNecessary(actualValue, expectedValue.getClass())__			}_			if (!expectedValue.equals(actualValue)) {_				return false__			}_		}_		return true__	};match,the,given,qualifier,annotation,against,the,candidate,bean,definition;protected,boolean,check,qualifier,bean,definition,holder,bd,holder,annotation,annotation,type,converter,type,converter,class,extends,annotation,type,annotation,annotation,type,root,bean,definition,bd,root,bean,definition,bd,holder,get,bean,definition,autowire,candidate,qualifier,qualifier,bd,get,qualifier,type,get,name,if,qualifier,null,qualifier,bd,get,qualifier,class,utils,get,short,name,type,if,qualifier,null,annotation,target,annotation,null,if,bd,get,resolved,factory,method,null,target,annotation,annotation,utils,get,annotation,bd,get,resolved,factory,method,type,if,target,annotation,null,if,this,bean,factory,null,class,bean,type,this,bean,factory,get,type,bd,holder,get,bean,name,if,bean,type,null,target,annotation,annotation,utils,get,annotation,class,utils,get,user,class,bean,type,type,if,target,annotation,null,bd,has,bean,class,target,annotation,annotation,utils,get,annotation,class,utils,get,user,class,bd,get,bean,class,type,if,target,annotation,null,target,annotation,equals,annotation,return,true,map,string,object,attributes,annotation,utils,get,annotation,attributes,annotation,if,attributes,is,empty,qualifier,null,return,false,for,map,entry,string,object,entry,attributes,entry,set,string,attribute,name,entry,get,key,object,expected,value,entry,get,value,object,actual,value,null,if,qualifier,null,actual,value,qualifier,get,attribute,attribute,name,if,actual,value,null,actual,value,bd,get,attribute,attribute,name,if,actual,value,null,attribute,name,equals,autowire,candidate,qualifier,expected,value,instanceof,string,bd,holder,matches,name,string,expected,value,continue,if,actual,value,null,qualifier,null,actual,value,annotation,utils,get,default,value,annotation,attribute,name,if,actual,value,null,actual,value,type,converter,convert,if,necessary,actual,value,expected,value,get,class,if,expected,value,equals,actual,value,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifier( 			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter);1377641679;Match the given qualifier annotation against the candidate bean definition.;protected boolean checkQualifier(_			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter) {__		Class<? extends Annotation> type = annotation.annotationType()__		RootBeanDefinition bd = (RootBeanDefinition) bdHolder.getBeanDefinition()__		AutowireCandidateQualifier qualifier = bd.getQualifier(type.getName())__		if (qualifier == null) {_			qualifier = bd.getQualifier(ClassUtils.getShortName(type))__		}_		if (qualifier == null) {_			Annotation targetAnnotation = null__			if (bd.getResolvedFactoryMethod() != null) {_				targetAnnotation = AnnotationUtils.getAnnotation(bd.getResolvedFactoryMethod(), type)__			}_			if (targetAnnotation == null) {_				_				if (this.beanFactory != null) {_					Class<?> beanType = this.beanFactory.getType(bdHolder.getBeanName())__					if (beanType != null) {_						targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(beanType), type)__					}_				}_				if (targetAnnotation == null && bd.hasBeanClass()) {_					targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(bd.getBeanClass()), type)__				}_			}_			if (targetAnnotation != null && targetAnnotation.equals(annotation)) {_				return true__			}_		}_		Map<String, Object> attributes = AnnotationUtils.getAnnotationAttributes(annotation)__		if (attributes.isEmpty() && qualifier == null) {_			_			return false__		}_		for (Map.Entry<String, Object> entry : attributes.entrySet()) {_			String attributeName = entry.getKey()__			Object expectedValue = entry.getValue()__			Object actualValue = null__			_			if (qualifier != null) {_				actualValue = qualifier.getAttribute(attributeName)__			}_			if (actualValue == null) {_				_				actualValue = bd.getAttribute(attributeName)__			}_			if (actualValue == null && attributeName.equals(AutowireCandidateQualifier.VALUE_KEY) &&_					expectedValue instanceof String && bdHolder.matchesName((String) expectedValue)) {_				_				continue__			}_			if (actualValue == null && qualifier != null) {_				_				actualValue = AnnotationUtils.getDefaultValue(annotation, attributeName)__			}_			if (actualValue != null) {_				actualValue = typeConverter.convertIfNecessary(actualValue, expectedValue.getClass())__			}_			if (!expectedValue.equals(actualValue)) {_				return false__			}_		}_		return true__	};match,the,given,qualifier,annotation,against,the,candidate,bean,definition;protected,boolean,check,qualifier,bean,definition,holder,bd,holder,annotation,annotation,type,converter,type,converter,class,extends,annotation,type,annotation,annotation,type,root,bean,definition,bd,root,bean,definition,bd,holder,get,bean,definition,autowire,candidate,qualifier,qualifier,bd,get,qualifier,type,get,name,if,qualifier,null,qualifier,bd,get,qualifier,class,utils,get,short,name,type,if,qualifier,null,annotation,target,annotation,null,if,bd,get,resolved,factory,method,null,target,annotation,annotation,utils,get,annotation,bd,get,resolved,factory,method,type,if,target,annotation,null,if,this,bean,factory,null,class,bean,type,this,bean,factory,get,type,bd,holder,get,bean,name,if,bean,type,null,target,annotation,annotation,utils,get,annotation,class,utils,get,user,class,bean,type,type,if,target,annotation,null,bd,has,bean,class,target,annotation,annotation,utils,get,annotation,class,utils,get,user,class,bd,get,bean,class,type,if,target,annotation,null,target,annotation,equals,annotation,return,true,map,string,object,attributes,annotation,utils,get,annotation,attributes,annotation,if,attributes,is,empty,qualifier,null,return,false,for,map,entry,string,object,entry,attributes,entry,set,string,attribute,name,entry,get,key,object,expected,value,entry,get,value,object,actual,value,null,if,qualifier,null,actual,value,qualifier,get,attribute,attribute,name,if,actual,value,null,actual,value,bd,get,attribute,attribute,name,if,actual,value,null,attribute,name,equals,autowire,candidate,qualifier,expected,value,instanceof,string,bd,holder,matches,name,string,expected,value,continue,if,actual,value,null,qualifier,null,actual,value,annotation,utils,get,default,value,annotation,attribute,name,if,actual,value,null,actual,value,type,converter,convert,if,necessary,actual,value,expected,value,get,class,if,expected,value,equals,actual,value,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifier( 			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter);1381788683;Match the given qualifier annotation against the candidate bean definition.;protected boolean checkQualifier(_			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter) {__		Class<? extends Annotation> type = annotation.annotationType()__		RootBeanDefinition bd = (RootBeanDefinition) bdHolder.getBeanDefinition()__		AutowireCandidateQualifier qualifier = bd.getQualifier(type.getName())__		if (qualifier == null) {_			qualifier = bd.getQualifier(ClassUtils.getShortName(type))__		}_		if (qualifier == null) {_			Annotation targetAnnotation = null__			if (bd.getResolvedFactoryMethod() != null) {_				targetAnnotation = AnnotationUtils.getAnnotation(bd.getResolvedFactoryMethod(), type)__			}_			if (targetAnnotation == null) {_				_				if (getBeanFactory() != null) {_					Class<?> beanType = getBeanFactory().getType(bdHolder.getBeanName())__					if (beanType != null) {_						targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(beanType), type)__					}_				}_				if (targetAnnotation == null && bd.hasBeanClass()) {_					targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(bd.getBeanClass()), type)__				}_			}_			if (targetAnnotation != null && targetAnnotation.equals(annotation)) {_				return true__			}_		}_		Map<String, Object> attributes = AnnotationUtils.getAnnotationAttributes(annotation)__		if (attributes.isEmpty() && qualifier == null) {_			_			return false__		}_		for (Map.Entry<String, Object> entry : attributes.entrySet()) {_			String attributeName = entry.getKey()__			Object expectedValue = entry.getValue()__			Object actualValue = null__			_			if (qualifier != null) {_				actualValue = qualifier.getAttribute(attributeName)__			}_			if (actualValue == null) {_				_				actualValue = bd.getAttribute(attributeName)__			}_			if (actualValue == null && attributeName.equals(AutowireCandidateQualifier.VALUE_KEY) &&_					expectedValue instanceof String && bdHolder.matchesName((String) expectedValue)) {_				_				continue__			}_			if (actualValue == null && qualifier != null) {_				_				actualValue = AnnotationUtils.getDefaultValue(annotation, attributeName)__			}_			if (actualValue != null) {_				actualValue = typeConverter.convertIfNecessary(actualValue, expectedValue.getClass())__			}_			if (!expectedValue.equals(actualValue)) {_				return false__			}_		}_		return true__	};match,the,given,qualifier,annotation,against,the,candidate,bean,definition;protected,boolean,check,qualifier,bean,definition,holder,bd,holder,annotation,annotation,type,converter,type,converter,class,extends,annotation,type,annotation,annotation,type,root,bean,definition,bd,root,bean,definition,bd,holder,get,bean,definition,autowire,candidate,qualifier,qualifier,bd,get,qualifier,type,get,name,if,qualifier,null,qualifier,bd,get,qualifier,class,utils,get,short,name,type,if,qualifier,null,annotation,target,annotation,null,if,bd,get,resolved,factory,method,null,target,annotation,annotation,utils,get,annotation,bd,get,resolved,factory,method,type,if,target,annotation,null,if,get,bean,factory,null,class,bean,type,get,bean,factory,get,type,bd,holder,get,bean,name,if,bean,type,null,target,annotation,annotation,utils,get,annotation,class,utils,get,user,class,bean,type,type,if,target,annotation,null,bd,has,bean,class,target,annotation,annotation,utils,get,annotation,class,utils,get,user,class,bd,get,bean,class,type,if,target,annotation,null,target,annotation,equals,annotation,return,true,map,string,object,attributes,annotation,utils,get,annotation,attributes,annotation,if,attributes,is,empty,qualifier,null,return,false,for,map,entry,string,object,entry,attributes,entry,set,string,attribute,name,entry,get,key,object,expected,value,entry,get,value,object,actual,value,null,if,qualifier,null,actual,value,qualifier,get,attribute,attribute,name,if,actual,value,null,actual,value,bd,get,attribute,attribute,name,if,actual,value,null,attribute,name,equals,autowire,candidate,qualifier,expected,value,instanceof,string,bd,holder,matches,name,string,expected,value,continue,if,actual,value,null,qualifier,null,actual,value,annotation,utils,get,default,value,annotation,attribute,name,if,actual,value,null,actual,value,type,converter,convert,if,necessary,actual,value,expected,value,get,class,if,expected,value,equals,actual,value,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifier( 			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter);1382826936;Match the given qualifier annotation against the candidate bean definition.;protected boolean checkQualifier(_			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter) {__		Class<? extends Annotation> type = annotation.annotationType()__		RootBeanDefinition bd = (RootBeanDefinition) bdHolder.getBeanDefinition()__		AutowireCandidateQualifier qualifier = bd.getQualifier(type.getName())__		if (qualifier == null) {_			qualifier = bd.getQualifier(ClassUtils.getShortName(type))__		}_		if (qualifier == null) {_			Annotation targetAnnotation = null__			Method resolvedFactoryMethod = bd.getResolvedFactoryMethod()__			if (resolvedFactoryMethod != null) {_				targetAnnotation = AnnotationUtils.getAnnotation(resolvedFactoryMethod, type)__			}_			if (targetAnnotation == null) {_				_				if (getBeanFactory() != null) {_					Class<?> beanType = getBeanFactory().getType(bdHolder.getBeanName())__					if (beanType != null) {_						targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(beanType), type)__					}_				}_				if (targetAnnotation == null && bd.hasBeanClass()) {_					targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(bd.getBeanClass()), type)__				}_			}_			if (targetAnnotation != null && targetAnnotation.equals(annotation)) {_				return true__			}_		}_		Map<String, Object> attributes = AnnotationUtils.getAnnotationAttributes(annotation)__		if (attributes.isEmpty() && qualifier == null) {_			_			return false__		}_		for (Map.Entry<String, Object> entry : attributes.entrySet()) {_			String attributeName = entry.getKey()__			Object expectedValue = entry.getValue()__			Object actualValue = null__			_			if (qualifier != null) {_				actualValue = qualifier.getAttribute(attributeName)__			}_			if (actualValue == null) {_				_				actualValue = bd.getAttribute(attributeName)__			}_			if (actualValue == null && attributeName.equals(AutowireCandidateQualifier.VALUE_KEY) &&_					expectedValue instanceof String && bdHolder.matchesName((String) expectedValue)) {_				_				continue__			}_			if (actualValue == null && qualifier != null) {_				_				actualValue = AnnotationUtils.getDefaultValue(annotation, attributeName)__			}_			if (actualValue != null) {_				actualValue = typeConverter.convertIfNecessary(actualValue, expectedValue.getClass())__			}_			if (!expectedValue.equals(actualValue)) {_				return false__			}_		}_		return true__	};match,the,given,qualifier,annotation,against,the,candidate,bean,definition;protected,boolean,check,qualifier,bean,definition,holder,bd,holder,annotation,annotation,type,converter,type,converter,class,extends,annotation,type,annotation,annotation,type,root,bean,definition,bd,root,bean,definition,bd,holder,get,bean,definition,autowire,candidate,qualifier,qualifier,bd,get,qualifier,type,get,name,if,qualifier,null,qualifier,bd,get,qualifier,class,utils,get,short,name,type,if,qualifier,null,annotation,target,annotation,null,method,resolved,factory,method,bd,get,resolved,factory,method,if,resolved,factory,method,null,target,annotation,annotation,utils,get,annotation,resolved,factory,method,type,if,target,annotation,null,if,get,bean,factory,null,class,bean,type,get,bean,factory,get,type,bd,holder,get,bean,name,if,bean,type,null,target,annotation,annotation,utils,get,annotation,class,utils,get,user,class,bean,type,type,if,target,annotation,null,bd,has,bean,class,target,annotation,annotation,utils,get,annotation,class,utils,get,user,class,bd,get,bean,class,type,if,target,annotation,null,target,annotation,equals,annotation,return,true,map,string,object,attributes,annotation,utils,get,annotation,attributes,annotation,if,attributes,is,empty,qualifier,null,return,false,for,map,entry,string,object,entry,attributes,entry,set,string,attribute,name,entry,get,key,object,expected,value,entry,get,value,object,actual,value,null,if,qualifier,null,actual,value,qualifier,get,attribute,attribute,name,if,actual,value,null,actual,value,bd,get,attribute,attribute,name,if,actual,value,null,attribute,name,equals,autowire,candidate,qualifier,expected,value,instanceof,string,bd,holder,matches,name,string,expected,value,continue,if,actual,value,null,qualifier,null,actual,value,annotation,utils,get,default,value,annotation,attribute,name,if,actual,value,null,actual,value,type,converter,convert,if,necessary,actual,value,expected,value,get,class,if,expected,value,equals,actual,value,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifier( 			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter);1386541456;Match the given qualifier annotation against the candidate bean definition.;protected boolean checkQualifier(_			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter) {__		Class<? extends Annotation> type = annotation.annotationType()__		RootBeanDefinition bd = (RootBeanDefinition) bdHolder.getBeanDefinition()___		AutowireCandidateQualifier qualifier = bd.getQualifier(type.getName())__		if (qualifier == null) {_			qualifier = bd.getQualifier(ClassUtils.getShortName(type))__		}_		if (qualifier == null) {_			_			Annotation targetAnnotation = getFactoryMethodAnnotation(bd, type)__			if (targetAnnotation == null) {_				RootBeanDefinition dbd = getResolvedDecoratedDefinition(bd)__				if (dbd != null) {_					targetAnnotation = getFactoryMethodAnnotation(dbd, type)__				}_			}_			if (targetAnnotation == null) {_				_				if (getBeanFactory() != null) {_					Class<?> beanType = getBeanFactory().getType(bdHolder.getBeanName())__					if (beanType != null) {_						targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(beanType), type)__					}_				}_				if (targetAnnotation == null && bd.hasBeanClass()) {_					targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(bd.getBeanClass()), type)__				}_			}_			if (targetAnnotation != null && targetAnnotation.equals(annotation)) {_				return true__			}_		}__		Map<String, Object> attributes = AnnotationUtils.getAnnotationAttributes(annotation)__		if (attributes.isEmpty() && qualifier == null) {_			_			return false__		}_		for (Map.Entry<String, Object> entry : attributes.entrySet()) {_			String attributeName = entry.getKey()__			Object expectedValue = entry.getValue()__			Object actualValue = null__			_			if (qualifier != null) {_				actualValue = qualifier.getAttribute(attributeName)__			}_			if (actualValue == null) {_				_				actualValue = bd.getAttribute(attributeName)__			}_			if (actualValue == null && attributeName.equals(AutowireCandidateQualifier.VALUE_KEY) &&_					expectedValue instanceof String && bdHolder.matchesName((String) expectedValue)) {_				_				continue__			}_			if (actualValue == null && qualifier != null) {_				_				actualValue = AnnotationUtils.getDefaultValue(annotation, attributeName)__			}_			if (actualValue != null) {_				actualValue = typeConverter.convertIfNecessary(actualValue, expectedValue.getClass())__			}_			if (!expectedValue.equals(actualValue)) {_				return false__			}_		}_		return true__	};match,the,given,qualifier,annotation,against,the,candidate,bean,definition;protected,boolean,check,qualifier,bean,definition,holder,bd,holder,annotation,annotation,type,converter,type,converter,class,extends,annotation,type,annotation,annotation,type,root,bean,definition,bd,root,bean,definition,bd,holder,get,bean,definition,autowire,candidate,qualifier,qualifier,bd,get,qualifier,type,get,name,if,qualifier,null,qualifier,bd,get,qualifier,class,utils,get,short,name,type,if,qualifier,null,annotation,target,annotation,get,factory,method,annotation,bd,type,if,target,annotation,null,root,bean,definition,dbd,get,resolved,decorated,definition,bd,if,dbd,null,target,annotation,get,factory,method,annotation,dbd,type,if,target,annotation,null,if,get,bean,factory,null,class,bean,type,get,bean,factory,get,type,bd,holder,get,bean,name,if,bean,type,null,target,annotation,annotation,utils,get,annotation,class,utils,get,user,class,bean,type,type,if,target,annotation,null,bd,has,bean,class,target,annotation,annotation,utils,get,annotation,class,utils,get,user,class,bd,get,bean,class,type,if,target,annotation,null,target,annotation,equals,annotation,return,true,map,string,object,attributes,annotation,utils,get,annotation,attributes,annotation,if,attributes,is,empty,qualifier,null,return,false,for,map,entry,string,object,entry,attributes,entry,set,string,attribute,name,entry,get,key,object,expected,value,entry,get,value,object,actual,value,null,if,qualifier,null,actual,value,qualifier,get,attribute,attribute,name,if,actual,value,null,actual,value,bd,get,attribute,attribute,name,if,actual,value,null,attribute,name,equals,autowire,candidate,qualifier,expected,value,instanceof,string,bd,holder,matches,name,string,expected,value,continue,if,actual,value,null,qualifier,null,actual,value,annotation,utils,get,default,value,annotation,attribute,name,if,actual,value,null,actual,value,type,converter,convert,if,necessary,actual,value,expected,value,get,class,if,expected,value,equals,actual,value,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifier( 			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter);1398638841;Match the given qualifier annotation against the candidate bean definition.;protected boolean checkQualifier(_			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter) {__		Class<? extends Annotation> type = annotation.annotationType()__		RootBeanDefinition bd = (RootBeanDefinition) bdHolder.getBeanDefinition()___		AutowireCandidateQualifier qualifier = bd.getQualifier(type.getName())__		if (qualifier == null) {_			qualifier = bd.getQualifier(ClassUtils.getShortName(type))__		}_		if (qualifier == null) {_			_			Annotation targetAnnotation = getFactoryMethodAnnotation(bd, type)__			if (targetAnnotation == null) {_				RootBeanDefinition dbd = getResolvedDecoratedDefinition(bd)__				if (dbd != null) {_					targetAnnotation = getFactoryMethodAnnotation(dbd, type)__				}_			}_			if (targetAnnotation == null) {_				_				if (getBeanFactory() != null) {_					Class<?> beanType = getBeanFactory().getType(bdHolder.getBeanName())__					if (beanType != null) {_						targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(beanType), type)__					}_				}_				if (targetAnnotation == null && bd.hasBeanClass()) {_					targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(bd.getBeanClass()), type)__				}_			}_			if (targetAnnotation != null && targetAnnotation.equals(annotation)) {_				return true__			}_		}__		Map<String, Object> attributes = AnnotationUtils.getAnnotationAttributes(annotation)__		if (attributes.isEmpty() && qualifier == null) {_			_			return false__		}_		for (Map.Entry<String, Object> entry : attributes.entrySet()) {_			String attributeName = entry.getKey()__			Object expectedValue = entry.getValue()__			Object actualValue = null__			_			if (qualifier != null) {_				actualValue = qualifier.getAttribute(attributeName)__			}_			if (actualValue == null) {_				_				actualValue = bd.getAttribute(attributeName)__			}_			if (actualValue == null && attributeName.equals(AutowireCandidateQualifier.VALUE_KEY) &&_					expectedValue instanceof String && bdHolder.matchesName((String) expectedValue)) {_				_				continue__			}_			if (actualValue == null && qualifier != null) {_				_				actualValue = AnnotationUtils.getDefaultValue(annotation, attributeName)__			}_			if (actualValue != null) {_				actualValue = typeConverter.convertIfNecessary(actualValue, expectedValue.getClass())__			}_			if (!expectedValue.equals(actualValue)) {_				return false__			}_		}_		return true__	};match,the,given,qualifier,annotation,against,the,candidate,bean,definition;protected,boolean,check,qualifier,bean,definition,holder,bd,holder,annotation,annotation,type,converter,type,converter,class,extends,annotation,type,annotation,annotation,type,root,bean,definition,bd,root,bean,definition,bd,holder,get,bean,definition,autowire,candidate,qualifier,qualifier,bd,get,qualifier,type,get,name,if,qualifier,null,qualifier,bd,get,qualifier,class,utils,get,short,name,type,if,qualifier,null,annotation,target,annotation,get,factory,method,annotation,bd,type,if,target,annotation,null,root,bean,definition,dbd,get,resolved,decorated,definition,bd,if,dbd,null,target,annotation,get,factory,method,annotation,dbd,type,if,target,annotation,null,if,get,bean,factory,null,class,bean,type,get,bean,factory,get,type,bd,holder,get,bean,name,if,bean,type,null,target,annotation,annotation,utils,get,annotation,class,utils,get,user,class,bean,type,type,if,target,annotation,null,bd,has,bean,class,target,annotation,annotation,utils,get,annotation,class,utils,get,user,class,bd,get,bean,class,type,if,target,annotation,null,target,annotation,equals,annotation,return,true,map,string,object,attributes,annotation,utils,get,annotation,attributes,annotation,if,attributes,is,empty,qualifier,null,return,false,for,map,entry,string,object,entry,attributes,entry,set,string,attribute,name,entry,get,key,object,expected,value,entry,get,value,object,actual,value,null,if,qualifier,null,actual,value,qualifier,get,attribute,attribute,name,if,actual,value,null,actual,value,bd,get,attribute,attribute,name,if,actual,value,null,attribute,name,equals,autowire,candidate,qualifier,expected,value,instanceof,string,bd,holder,matches,name,string,expected,value,continue,if,actual,value,null,qualifier,null,actual,value,annotation,utils,get,default,value,annotation,attribute,name,if,actual,value,null,actual,value,type,converter,convert,if,necessary,actual,value,expected,value,get,class,if,expected,value,equals,actual,value,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifier( 			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter);1413990280;Match the given qualifier annotation against the candidate bean definition.;protected boolean checkQualifier(_			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter) {__		Class<? extends Annotation> type = annotation.annotationType()__		RootBeanDefinition bd = (RootBeanDefinition) bdHolder.getBeanDefinition()___		AutowireCandidateQualifier qualifier = bd.getQualifier(type.getName())__		if (qualifier == null) {_			qualifier = bd.getQualifier(ClassUtils.getShortName(type))__		}_		if (qualifier == null) {_			_			Annotation targetAnnotation = getFactoryMethodAnnotation(bd, type)__			if (targetAnnotation == null) {_				RootBeanDefinition dbd = getResolvedDecoratedDefinition(bd)__				if (dbd != null) {_					targetAnnotation = getFactoryMethodAnnotation(dbd, type)__				}_			}_			if (targetAnnotation == null) {_				_				if (getBeanFactory() != null) {_					try {_						Class<?> beanType = getBeanFactory().getType(bdHolder.getBeanName())__						if (beanType != null) {_							targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(beanType), type)__						}_					}_					catch (NoSuchBeanDefinitionException ex) {_						_					}_				}_				if (targetAnnotation == null && bd.hasBeanClass()) {_					targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(bd.getBeanClass()), type)__				}_			}_			if (targetAnnotation != null && targetAnnotation.equals(annotation)) {_				return true__			}_		}__		Map<String, Object> attributes = AnnotationUtils.getAnnotationAttributes(annotation)__		if (attributes.isEmpty() && qualifier == null) {_			_			return false__		}_		for (Map.Entry<String, Object> entry : attributes.entrySet()) {_			String attributeName = entry.getKey()__			Object expectedValue = entry.getValue()__			Object actualValue = null__			_			if (qualifier != null) {_				actualValue = qualifier.getAttribute(attributeName)__			}_			if (actualValue == null) {_				_				actualValue = bd.getAttribute(attributeName)__			}_			if (actualValue == null && attributeName.equals(AutowireCandidateQualifier.VALUE_KEY) &&_					expectedValue instanceof String && bdHolder.matchesName((String) expectedValue)) {_				_				continue__			}_			if (actualValue == null && qualifier != null) {_				_				actualValue = AnnotationUtils.getDefaultValue(annotation, attributeName)__			}_			if (actualValue != null) {_				actualValue = typeConverter.convertIfNecessary(actualValue, expectedValue.getClass())__			}_			if (!expectedValue.equals(actualValue)) {_				return false__			}_		}_		return true__	};match,the,given,qualifier,annotation,against,the,candidate,bean,definition;protected,boolean,check,qualifier,bean,definition,holder,bd,holder,annotation,annotation,type,converter,type,converter,class,extends,annotation,type,annotation,annotation,type,root,bean,definition,bd,root,bean,definition,bd,holder,get,bean,definition,autowire,candidate,qualifier,qualifier,bd,get,qualifier,type,get,name,if,qualifier,null,qualifier,bd,get,qualifier,class,utils,get,short,name,type,if,qualifier,null,annotation,target,annotation,get,factory,method,annotation,bd,type,if,target,annotation,null,root,bean,definition,dbd,get,resolved,decorated,definition,bd,if,dbd,null,target,annotation,get,factory,method,annotation,dbd,type,if,target,annotation,null,if,get,bean,factory,null,try,class,bean,type,get,bean,factory,get,type,bd,holder,get,bean,name,if,bean,type,null,target,annotation,annotation,utils,get,annotation,class,utils,get,user,class,bean,type,type,catch,no,such,bean,definition,exception,ex,if,target,annotation,null,bd,has,bean,class,target,annotation,annotation,utils,get,annotation,class,utils,get,user,class,bd,get,bean,class,type,if,target,annotation,null,target,annotation,equals,annotation,return,true,map,string,object,attributes,annotation,utils,get,annotation,attributes,annotation,if,attributes,is,empty,qualifier,null,return,false,for,map,entry,string,object,entry,attributes,entry,set,string,attribute,name,entry,get,key,object,expected,value,entry,get,value,object,actual,value,null,if,qualifier,null,actual,value,qualifier,get,attribute,attribute,name,if,actual,value,null,actual,value,bd,get,attribute,attribute,name,if,actual,value,null,attribute,name,equals,autowire,candidate,qualifier,expected,value,instanceof,string,bd,holder,matches,name,string,expected,value,continue,if,actual,value,null,qualifier,null,actual,value,annotation,utils,get,default,value,annotation,attribute,name,if,actual,value,null,actual,value,type,converter,convert,if,necessary,actual,value,expected,value,get,class,if,expected,value,equals,actual,value,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifier( 			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter);1432125256;Match the given qualifier annotation against the candidate bean definition.;protected boolean checkQualifier(_			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter) {__		Class<? extends Annotation> type = annotation.annotationType()__		RootBeanDefinition bd = (RootBeanDefinition) bdHolder.getBeanDefinition()___		AutowireCandidateQualifier qualifier = bd.getQualifier(type.getName())__		if (qualifier == null) {_			qualifier = bd.getQualifier(ClassUtils.getShortName(type))__		}_		if (qualifier == null) {_			_			Annotation targetAnnotation = getFactoryMethodAnnotation(bd, type)__			if (targetAnnotation == null) {_				RootBeanDefinition dbd = getResolvedDecoratedDefinition(bd)__				if (dbd != null) {_					targetAnnotation = getFactoryMethodAnnotation(dbd, type)__				}_			}_			if (targetAnnotation == null) {_				_				if (getBeanFactory() != null) {_					try {_						Class<?> beanType = getBeanFactory().getType(bdHolder.getBeanName())__						if (beanType != null) {_							targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(beanType), type)__						}_					}_					catch (NoSuchBeanDefinitionException ex) {_						_					}_				}_				if (targetAnnotation == null && bd.hasBeanClass()) {_					targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(bd.getBeanClass()), type)__				}_			}_			if (targetAnnotation != null && targetAnnotation.equals(annotation)) {_				return true__			}_		}__		Map<String, Object> attributes = AnnotationUtils.getAnnotationAttributes(annotation)__		if (attributes.isEmpty() && qualifier == null) {_			_			return false__		}_		for (Map.Entry<String, Object> entry : attributes.entrySet()) {_			String attributeName = entry.getKey()__			Object expectedValue = entry.getValue()__			Object actualValue = null__			_			if (qualifier != null) {_				actualValue = qualifier.getAttribute(attributeName)__			}_			if (actualValue == null) {_				_				actualValue = bd.getAttribute(attributeName)__			}_			if (actualValue == null && attributeName.equals(AutowireCandidateQualifier.VALUE_KEY) &&_					expectedValue instanceof String && bdHolder.matchesName((String) expectedValue)) {_				_				continue__			}_			if (actualValue == null && qualifier != null) {_				_				actualValue = AnnotationUtils.getDefaultValue(annotation, attributeName)__			}_			if (actualValue != null) {_				actualValue = typeConverter.convertIfNecessary(actualValue, expectedValue.getClass())__			}_			if (!expectedValue.equals(actualValue)) {_				return false__			}_		}_		return true__	};match,the,given,qualifier,annotation,against,the,candidate,bean,definition;protected,boolean,check,qualifier,bean,definition,holder,bd,holder,annotation,annotation,type,converter,type,converter,class,extends,annotation,type,annotation,annotation,type,root,bean,definition,bd,root,bean,definition,bd,holder,get,bean,definition,autowire,candidate,qualifier,qualifier,bd,get,qualifier,type,get,name,if,qualifier,null,qualifier,bd,get,qualifier,class,utils,get,short,name,type,if,qualifier,null,annotation,target,annotation,get,factory,method,annotation,bd,type,if,target,annotation,null,root,bean,definition,dbd,get,resolved,decorated,definition,bd,if,dbd,null,target,annotation,get,factory,method,annotation,dbd,type,if,target,annotation,null,if,get,bean,factory,null,try,class,bean,type,get,bean,factory,get,type,bd,holder,get,bean,name,if,bean,type,null,target,annotation,annotation,utils,get,annotation,class,utils,get,user,class,bean,type,type,catch,no,such,bean,definition,exception,ex,if,target,annotation,null,bd,has,bean,class,target,annotation,annotation,utils,get,annotation,class,utils,get,user,class,bd,get,bean,class,type,if,target,annotation,null,target,annotation,equals,annotation,return,true,map,string,object,attributes,annotation,utils,get,annotation,attributes,annotation,if,attributes,is,empty,qualifier,null,return,false,for,map,entry,string,object,entry,attributes,entry,set,string,attribute,name,entry,get,key,object,expected,value,entry,get,value,object,actual,value,null,if,qualifier,null,actual,value,qualifier,get,attribute,attribute,name,if,actual,value,null,actual,value,bd,get,attribute,attribute,name,if,actual,value,null,attribute,name,equals,autowire,candidate,qualifier,expected,value,instanceof,string,bd,holder,matches,name,string,expected,value,continue,if,actual,value,null,qualifier,null,actual,value,annotation,utils,get,default,value,annotation,attribute,name,if,actual,value,null,actual,value,type,converter,convert,if,necessary,actual,value,expected,value,get,class,if,expected,value,equals,actual,value,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifier( 			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter);1451408536;Match the given qualifier annotation against the candidate bean definition.;protected boolean checkQualifier(_			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter) {__		Class<? extends Annotation> type = annotation.annotationType()__		RootBeanDefinition bd = (RootBeanDefinition) bdHolder.getBeanDefinition()___		AutowireCandidateQualifier qualifier = bd.getQualifier(type.getName())__		if (qualifier == null) {_			qualifier = bd.getQualifier(ClassUtils.getShortName(type))__		}_		if (qualifier == null) {_			_			Annotation targetAnnotation = getFactoryMethodAnnotation(bd, type)__			if (targetAnnotation == null) {_				RootBeanDefinition dbd = getResolvedDecoratedDefinition(bd)__				if (dbd != null) {_					targetAnnotation = getFactoryMethodAnnotation(dbd, type)__				}_			}_			if (targetAnnotation == null) {_				_				if (getBeanFactory() != null) {_					try {_						Class<?> beanType = getBeanFactory().getType(bdHolder.getBeanName())__						if (beanType != null) {_							targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(beanType), type)__						}_					}_					catch (NoSuchBeanDefinitionException ex) {_						_					}_				}_				if (targetAnnotation == null && bd.hasBeanClass()) {_					targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(bd.getBeanClass()), type)__				}_			}_			if (targetAnnotation != null && targetAnnotation.equals(annotation)) {_				return true__			}_		}__		Map<String, Object> attributes = AnnotationUtils.getAnnotationAttributes(annotation)__		if (attributes.isEmpty() && qualifier == null) {_			_			return false__		}_		for (Map.Entry<String, Object> entry : attributes.entrySet()) {_			String attributeName = entry.getKey()__			Object expectedValue = entry.getValue()__			Object actualValue = null__			_			if (qualifier != null) {_				actualValue = qualifier.getAttribute(attributeName)__			}_			if (actualValue == null) {_				_				actualValue = bd.getAttribute(attributeName)__			}_			if (actualValue == null && attributeName.equals(AutowireCandidateQualifier.VALUE_KEY) &&_					expectedValue instanceof String && bdHolder.matchesName((String) expectedValue)) {_				_				continue__			}_			if (actualValue == null && qualifier != null) {_				_				actualValue = AnnotationUtils.getDefaultValue(annotation, attributeName)__			}_			if (actualValue != null) {_				actualValue = typeConverter.convertIfNecessary(actualValue, expectedValue.getClass())__			}_			if (!expectedValue.equals(actualValue)) {_				return false__			}_		}_		return true__	};match,the,given,qualifier,annotation,against,the,candidate,bean,definition;protected,boolean,check,qualifier,bean,definition,holder,bd,holder,annotation,annotation,type,converter,type,converter,class,extends,annotation,type,annotation,annotation,type,root,bean,definition,bd,root,bean,definition,bd,holder,get,bean,definition,autowire,candidate,qualifier,qualifier,bd,get,qualifier,type,get,name,if,qualifier,null,qualifier,bd,get,qualifier,class,utils,get,short,name,type,if,qualifier,null,annotation,target,annotation,get,factory,method,annotation,bd,type,if,target,annotation,null,root,bean,definition,dbd,get,resolved,decorated,definition,bd,if,dbd,null,target,annotation,get,factory,method,annotation,dbd,type,if,target,annotation,null,if,get,bean,factory,null,try,class,bean,type,get,bean,factory,get,type,bd,holder,get,bean,name,if,bean,type,null,target,annotation,annotation,utils,get,annotation,class,utils,get,user,class,bean,type,type,catch,no,such,bean,definition,exception,ex,if,target,annotation,null,bd,has,bean,class,target,annotation,annotation,utils,get,annotation,class,utils,get,user,class,bd,get,bean,class,type,if,target,annotation,null,target,annotation,equals,annotation,return,true,map,string,object,attributes,annotation,utils,get,annotation,attributes,annotation,if,attributes,is,empty,qualifier,null,return,false,for,map,entry,string,object,entry,attributes,entry,set,string,attribute,name,entry,get,key,object,expected,value,entry,get,value,object,actual,value,null,if,qualifier,null,actual,value,qualifier,get,attribute,attribute,name,if,actual,value,null,actual,value,bd,get,attribute,attribute,name,if,actual,value,null,attribute,name,equals,autowire,candidate,qualifier,expected,value,instanceof,string,bd,holder,matches,name,string,expected,value,continue,if,actual,value,null,qualifier,null,actual,value,annotation,utils,get,default,value,annotation,attribute,name,if,actual,value,null,actual,value,type,converter,convert,if,necessary,actual,value,expected,value,get,class,if,expected,value,equals,actual,value,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifier( 			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter);1467730834;Match the given qualifier annotation against the candidate bean definition.;protected boolean checkQualifier(_			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter) {__		Class<? extends Annotation> type = annotation.annotationType()__		RootBeanDefinition bd = (RootBeanDefinition) bdHolder.getBeanDefinition()___		AutowireCandidateQualifier qualifier = bd.getQualifier(type.getName())__		if (qualifier == null) {_			qualifier = bd.getQualifier(ClassUtils.getShortName(type))__		}_		if (qualifier == null) {_			_			Annotation targetAnnotation = getFactoryMethodAnnotation(bd, type)__			if (targetAnnotation == null) {_				RootBeanDefinition dbd = getResolvedDecoratedDefinition(bd)__				if (dbd != null) {_					targetAnnotation = getFactoryMethodAnnotation(dbd, type)__				}_			}_			if (targetAnnotation == null) {_				_				if (getBeanFactory() != null) {_					try {_						Class<?> beanType = getBeanFactory().getType(bdHolder.getBeanName())__						if (beanType != null) {_							targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(beanType), type)__						}_					}_					catch (NoSuchBeanDefinitionException ex) {_						_					}_				}_				if (targetAnnotation == null && bd.hasBeanClass()) {_					targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(bd.getBeanClass()), type)__				}_			}_			if (targetAnnotation != null && targetAnnotation.equals(annotation)) {_				return true__			}_		}__		Map<String, Object> attributes = AnnotationUtils.getAnnotationAttributes(annotation)__		if (attributes.isEmpty() && qualifier == null) {_			_			return false__		}_		for (Map.Entry<String, Object> entry : attributes.entrySet()) {_			String attributeName = entry.getKey()__			Object expectedValue = entry.getValue()__			Object actualValue = null__			_			if (qualifier != null) {_				actualValue = qualifier.getAttribute(attributeName)__			}_			if (actualValue == null) {_				_				actualValue = bd.getAttribute(attributeName)__			}_			if (actualValue == null && attributeName.equals(AutowireCandidateQualifier.VALUE_KEY) &&_					expectedValue instanceof String && bdHolder.matchesName((String) expectedValue)) {_				_				continue__			}_			if (actualValue == null && qualifier != null) {_				_				actualValue = AnnotationUtils.getDefaultValue(annotation, attributeName)__			}_			if (actualValue != null) {_				actualValue = typeConverter.convertIfNecessary(actualValue, expectedValue.getClass())__			}_			if (!expectedValue.equals(actualValue)) {_				return false__			}_		}_		return true__	};match,the,given,qualifier,annotation,against,the,candidate,bean,definition;protected,boolean,check,qualifier,bean,definition,holder,bd,holder,annotation,annotation,type,converter,type,converter,class,extends,annotation,type,annotation,annotation,type,root,bean,definition,bd,root,bean,definition,bd,holder,get,bean,definition,autowire,candidate,qualifier,qualifier,bd,get,qualifier,type,get,name,if,qualifier,null,qualifier,bd,get,qualifier,class,utils,get,short,name,type,if,qualifier,null,annotation,target,annotation,get,factory,method,annotation,bd,type,if,target,annotation,null,root,bean,definition,dbd,get,resolved,decorated,definition,bd,if,dbd,null,target,annotation,get,factory,method,annotation,dbd,type,if,target,annotation,null,if,get,bean,factory,null,try,class,bean,type,get,bean,factory,get,type,bd,holder,get,bean,name,if,bean,type,null,target,annotation,annotation,utils,get,annotation,class,utils,get,user,class,bean,type,type,catch,no,such,bean,definition,exception,ex,if,target,annotation,null,bd,has,bean,class,target,annotation,annotation,utils,get,annotation,class,utils,get,user,class,bd,get,bean,class,type,if,target,annotation,null,target,annotation,equals,annotation,return,true,map,string,object,attributes,annotation,utils,get,annotation,attributes,annotation,if,attributes,is,empty,qualifier,null,return,false,for,map,entry,string,object,entry,attributes,entry,set,string,attribute,name,entry,get,key,object,expected,value,entry,get,value,object,actual,value,null,if,qualifier,null,actual,value,qualifier,get,attribute,attribute,name,if,actual,value,null,actual,value,bd,get,attribute,attribute,name,if,actual,value,null,attribute,name,equals,autowire,candidate,qualifier,expected,value,instanceof,string,bd,holder,matches,name,string,expected,value,continue,if,actual,value,null,qualifier,null,actual,value,annotation,utils,get,default,value,annotation,attribute,name,if,actual,value,null,actual,value,type,converter,convert,if,necessary,actual,value,expected,value,get,class,if,expected,value,equals,actual,value,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifier( 			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter);1474010431;Match the given qualifier annotation against the candidate bean definition.;protected boolean checkQualifier(_			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter) {__		Class<? extends Annotation> type = annotation.annotationType()__		RootBeanDefinition bd = (RootBeanDefinition) bdHolder.getBeanDefinition()___		AutowireCandidateQualifier qualifier = bd.getQualifier(type.getName())__		if (qualifier == null) {_			qualifier = bd.getQualifier(ClassUtils.getShortName(type))__		}_		if (qualifier == null) {_			_			Annotation targetAnnotation = getQualifiedElementAnnotation(bd, type)__			_			if (targetAnnotation == null) {_				targetAnnotation = getFactoryMethodAnnotation(bd, type)__			}_			if (targetAnnotation == null) {_				RootBeanDefinition dbd = getResolvedDecoratedDefinition(bd)__				if (dbd != null) {_					targetAnnotation = getFactoryMethodAnnotation(dbd, type)__				}_			}_			if (targetAnnotation == null) {_				_				if (getBeanFactory() != null) {_					try {_						Class<?> beanType = getBeanFactory().getType(bdHolder.getBeanName())__						if (beanType != null) {_							targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(beanType), type)__						}_					}_					catch (NoSuchBeanDefinitionException ex) {_						_					}_				}_				if (targetAnnotation == null && bd.hasBeanClass()) {_					targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(bd.getBeanClass()), type)__				}_			}_			if (targetAnnotation != null && targetAnnotation.equals(annotation)) {_				return true__			}_		}__		Map<String, Object> attributes = AnnotationUtils.getAnnotationAttributes(annotation)__		if (attributes.isEmpty() && qualifier == null) {_			_			return false__		}_		for (Map.Entry<String, Object> entry : attributes.entrySet()) {_			String attributeName = entry.getKey()__			Object expectedValue = entry.getValue()__			Object actualValue = null__			_			if (qualifier != null) {_				actualValue = qualifier.getAttribute(attributeName)__			}_			if (actualValue == null) {_				_				actualValue = bd.getAttribute(attributeName)__			}_			if (actualValue == null && attributeName.equals(AutowireCandidateQualifier.VALUE_KEY) &&_					expectedValue instanceof String && bdHolder.matchesName((String) expectedValue)) {_				_				continue__			}_			if (actualValue == null && qualifier != null) {_				_				actualValue = AnnotationUtils.getDefaultValue(annotation, attributeName)__			}_			if (actualValue != null) {_				actualValue = typeConverter.convertIfNecessary(actualValue, expectedValue.getClass())__			}_			if (!expectedValue.equals(actualValue)) {_				return false__			}_		}_		return true__	};match,the,given,qualifier,annotation,against,the,candidate,bean,definition;protected,boolean,check,qualifier,bean,definition,holder,bd,holder,annotation,annotation,type,converter,type,converter,class,extends,annotation,type,annotation,annotation,type,root,bean,definition,bd,root,bean,definition,bd,holder,get,bean,definition,autowire,candidate,qualifier,qualifier,bd,get,qualifier,type,get,name,if,qualifier,null,qualifier,bd,get,qualifier,class,utils,get,short,name,type,if,qualifier,null,annotation,target,annotation,get,qualified,element,annotation,bd,type,if,target,annotation,null,target,annotation,get,factory,method,annotation,bd,type,if,target,annotation,null,root,bean,definition,dbd,get,resolved,decorated,definition,bd,if,dbd,null,target,annotation,get,factory,method,annotation,dbd,type,if,target,annotation,null,if,get,bean,factory,null,try,class,bean,type,get,bean,factory,get,type,bd,holder,get,bean,name,if,bean,type,null,target,annotation,annotation,utils,get,annotation,class,utils,get,user,class,bean,type,type,catch,no,such,bean,definition,exception,ex,if,target,annotation,null,bd,has,bean,class,target,annotation,annotation,utils,get,annotation,class,utils,get,user,class,bd,get,bean,class,type,if,target,annotation,null,target,annotation,equals,annotation,return,true,map,string,object,attributes,annotation,utils,get,annotation,attributes,annotation,if,attributes,is,empty,qualifier,null,return,false,for,map,entry,string,object,entry,attributes,entry,set,string,attribute,name,entry,get,key,object,expected,value,entry,get,value,object,actual,value,null,if,qualifier,null,actual,value,qualifier,get,attribute,attribute,name,if,actual,value,null,actual,value,bd,get,attribute,attribute,name,if,actual,value,null,attribute,name,equals,autowire,candidate,qualifier,expected,value,instanceof,string,bd,holder,matches,name,string,expected,value,continue,if,actual,value,null,qualifier,null,actual,value,annotation,utils,get,default,value,annotation,attribute,name,if,actual,value,null,actual,value,type,converter,convert,if,necessary,actual,value,expected,value,get,class,if,expected,value,equals,actual,value,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifier( 			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter);1493811736;Match the given qualifier annotation against the candidate bean definition.;protected boolean checkQualifier(_			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter) {__		Class<? extends Annotation> type = annotation.annotationType()__		RootBeanDefinition bd = (RootBeanDefinition) bdHolder.getBeanDefinition()___		AutowireCandidateQualifier qualifier = bd.getQualifier(type.getName())__		if (qualifier == null) {_			qualifier = bd.getQualifier(ClassUtils.getShortName(type))__		}_		if (qualifier == null) {_			_			Annotation targetAnnotation = getQualifiedElementAnnotation(bd, type)__			_			if (targetAnnotation == null) {_				targetAnnotation = getFactoryMethodAnnotation(bd, type)__			}_			if (targetAnnotation == null) {_				RootBeanDefinition dbd = getResolvedDecoratedDefinition(bd)__				if (dbd != null) {_					targetAnnotation = getFactoryMethodAnnotation(dbd, type)__				}_			}_			if (targetAnnotation == null) {_				_				if (getBeanFactory() != null) {_					try {_						Class<?> beanType = getBeanFactory().getType(bdHolder.getBeanName())__						if (beanType != null) {_							targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(beanType), type)__						}_					}_					catch (NoSuchBeanDefinitionException ex) {_						_					}_				}_				if (targetAnnotation == null && bd.hasBeanClass()) {_					targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(bd.getBeanClass()), type)__				}_			}_			if (targetAnnotation != null && targetAnnotation.equals(annotation)) {_				return true__			}_		}__		Map<String, Object> attributes = AnnotationUtils.getAnnotationAttributes(annotation)__		if (attributes.isEmpty() && qualifier == null) {_			_			return false__		}_		for (Map.Entry<String, Object> entry : attributes.entrySet()) {_			String attributeName = entry.getKey()__			Object expectedValue = entry.getValue()__			Object actualValue = null__			_			if (qualifier != null) {_				actualValue = qualifier.getAttribute(attributeName)__			}_			if (actualValue == null) {_				_				actualValue = bd.getAttribute(attributeName)__			}_			if (actualValue == null && attributeName.equals(AutowireCandidateQualifier.VALUE_KEY) &&_					expectedValue instanceof String && bdHolder.matchesName((String) expectedValue)) {_				_				continue__			}_			if (actualValue == null && qualifier != null) {_				_				actualValue = AnnotationUtils.getDefaultValue(annotation, attributeName)__			}_			if (actualValue != null) {_				actualValue = typeConverter.convertIfNecessary(actualValue, expectedValue.getClass())__			}_			if (!expectedValue.equals(actualValue)) {_				return false__			}_		}_		return true__	};match,the,given,qualifier,annotation,against,the,candidate,bean,definition;protected,boolean,check,qualifier,bean,definition,holder,bd,holder,annotation,annotation,type,converter,type,converter,class,extends,annotation,type,annotation,annotation,type,root,bean,definition,bd,root,bean,definition,bd,holder,get,bean,definition,autowire,candidate,qualifier,qualifier,bd,get,qualifier,type,get,name,if,qualifier,null,qualifier,bd,get,qualifier,class,utils,get,short,name,type,if,qualifier,null,annotation,target,annotation,get,qualified,element,annotation,bd,type,if,target,annotation,null,target,annotation,get,factory,method,annotation,bd,type,if,target,annotation,null,root,bean,definition,dbd,get,resolved,decorated,definition,bd,if,dbd,null,target,annotation,get,factory,method,annotation,dbd,type,if,target,annotation,null,if,get,bean,factory,null,try,class,bean,type,get,bean,factory,get,type,bd,holder,get,bean,name,if,bean,type,null,target,annotation,annotation,utils,get,annotation,class,utils,get,user,class,bean,type,type,catch,no,such,bean,definition,exception,ex,if,target,annotation,null,bd,has,bean,class,target,annotation,annotation,utils,get,annotation,class,utils,get,user,class,bd,get,bean,class,type,if,target,annotation,null,target,annotation,equals,annotation,return,true,map,string,object,attributes,annotation,utils,get,annotation,attributes,annotation,if,attributes,is,empty,qualifier,null,return,false,for,map,entry,string,object,entry,attributes,entry,set,string,attribute,name,entry,get,key,object,expected,value,entry,get,value,object,actual,value,null,if,qualifier,null,actual,value,qualifier,get,attribute,attribute,name,if,actual,value,null,actual,value,bd,get,attribute,attribute,name,if,actual,value,null,attribute,name,equals,autowire,candidate,qualifier,expected,value,instanceof,string,bd,holder,matches,name,string,expected,value,continue,if,actual,value,null,qualifier,null,actual,value,annotation,utils,get,default,value,annotation,attribute,name,if,actual,value,null,actual,value,type,converter,convert,if,necessary,actual,value,expected,value,get,class,if,expected,value,equals,actual,value,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifier( 			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter);1495868221;Match the given qualifier annotation against the candidate bean definition.;protected boolean checkQualifier(_			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter) {__		Class<? extends Annotation> type = annotation.annotationType()__		RootBeanDefinition bd = (RootBeanDefinition) bdHolder.getBeanDefinition()___		AutowireCandidateQualifier qualifier = bd.getQualifier(type.getName())__		if (qualifier == null) {_			qualifier = bd.getQualifier(ClassUtils.getShortName(type))__		}_		if (qualifier == null) {_			_			Annotation targetAnnotation = getQualifiedElementAnnotation(bd, type)__			_			if (targetAnnotation == null) {_				targetAnnotation = getFactoryMethodAnnotation(bd, type)__			}_			if (targetAnnotation == null) {_				RootBeanDefinition dbd = getResolvedDecoratedDefinition(bd)__				if (dbd != null) {_					targetAnnotation = getFactoryMethodAnnotation(dbd, type)__				}_			}_			if (targetAnnotation == null) {_				_				if (getBeanFactory() != null) {_					try {_						Class<?> beanType = getBeanFactory().getType(bdHolder.getBeanName())__						if (beanType != null) {_							targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(beanType), type)__						}_					}_					catch (NoSuchBeanDefinitionException ex) {_						_					}_				}_				if (targetAnnotation == null && bd.hasBeanClass()) {_					targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(bd.getBeanClass()), type)__				}_			}_			if (targetAnnotation != null && targetAnnotation.equals(annotation)) {_				return true__			}_		}__		Map<String, Object> attributes = AnnotationUtils.getAnnotationAttributes(annotation)__		if (attributes.isEmpty() && qualifier == null) {_			_			return false__		}_		for (Map.Entry<String, Object> entry : attributes.entrySet()) {_			String attributeName = entry.getKey()__			Object expectedValue = entry.getValue()__			Object actualValue = null__			_			if (qualifier != null) {_				actualValue = qualifier.getAttribute(attributeName)__			}_			if (actualValue == null) {_				_				actualValue = bd.getAttribute(attributeName)__			}_			if (actualValue == null && attributeName.equals(AutowireCandidateQualifier.VALUE_KEY) &&_					expectedValue instanceof String && bdHolder.matchesName((String) expectedValue)) {_				_				continue__			}_			if (actualValue == null && qualifier != null) {_				_				actualValue = AnnotationUtils.getDefaultValue(annotation, attributeName)__			}_			if (actualValue != null) {_				actualValue = typeConverter.convertIfNecessary(actualValue, expectedValue.getClass())__			}_			if (!expectedValue.equals(actualValue)) {_				return false__			}_		}_		return true__	};match,the,given,qualifier,annotation,against,the,candidate,bean,definition;protected,boolean,check,qualifier,bean,definition,holder,bd,holder,annotation,annotation,type,converter,type,converter,class,extends,annotation,type,annotation,annotation,type,root,bean,definition,bd,root,bean,definition,bd,holder,get,bean,definition,autowire,candidate,qualifier,qualifier,bd,get,qualifier,type,get,name,if,qualifier,null,qualifier,bd,get,qualifier,class,utils,get,short,name,type,if,qualifier,null,annotation,target,annotation,get,qualified,element,annotation,bd,type,if,target,annotation,null,target,annotation,get,factory,method,annotation,bd,type,if,target,annotation,null,root,bean,definition,dbd,get,resolved,decorated,definition,bd,if,dbd,null,target,annotation,get,factory,method,annotation,dbd,type,if,target,annotation,null,if,get,bean,factory,null,try,class,bean,type,get,bean,factory,get,type,bd,holder,get,bean,name,if,bean,type,null,target,annotation,annotation,utils,get,annotation,class,utils,get,user,class,bean,type,type,catch,no,such,bean,definition,exception,ex,if,target,annotation,null,bd,has,bean,class,target,annotation,annotation,utils,get,annotation,class,utils,get,user,class,bd,get,bean,class,type,if,target,annotation,null,target,annotation,equals,annotation,return,true,map,string,object,attributes,annotation,utils,get,annotation,attributes,annotation,if,attributes,is,empty,qualifier,null,return,false,for,map,entry,string,object,entry,attributes,entry,set,string,attribute,name,entry,get,key,object,expected,value,entry,get,value,object,actual,value,null,if,qualifier,null,actual,value,qualifier,get,attribute,attribute,name,if,actual,value,null,actual,value,bd,get,attribute,attribute,name,if,actual,value,null,attribute,name,equals,autowire,candidate,qualifier,expected,value,instanceof,string,bd,holder,matches,name,string,expected,value,continue,if,actual,value,null,qualifier,null,actual,value,annotation,utils,get,default,value,annotation,attribute,name,if,actual,value,null,actual,value,type,converter,convert,if,necessary,actual,value,expected,value,get,class,if,expected,value,equals,actual,value,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifier( 			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter);1496837955;Match the given qualifier annotation against the candidate bean definition.;protected boolean checkQualifier(_			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter) {__		Class<? extends Annotation> type = annotation.annotationType()__		RootBeanDefinition bd = (RootBeanDefinition) bdHolder.getBeanDefinition()___		AutowireCandidateQualifier qualifier = bd.getQualifier(type.getName())__		if (qualifier == null) {_			qualifier = bd.getQualifier(ClassUtils.getShortName(type))__		}_		if (qualifier == null) {_			_			Annotation targetAnnotation = getQualifiedElementAnnotation(bd, type)__			_			if (targetAnnotation == null) {_				targetAnnotation = getFactoryMethodAnnotation(bd, type)__			}_			if (targetAnnotation == null) {_				RootBeanDefinition dbd = getResolvedDecoratedDefinition(bd)__				if (dbd != null) {_					targetAnnotation = getFactoryMethodAnnotation(dbd, type)__				}_			}_			if (targetAnnotation == null) {_				_				if (getBeanFactory() != null) {_					try {_						Class<?> beanType = getBeanFactory().getType(bdHolder.getBeanName())__						if (beanType != null) {_							targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(beanType), type)__						}_					}_					catch (NoSuchBeanDefinitionException ex) {_						_					}_				}_				if (targetAnnotation == null && bd.hasBeanClass()) {_					targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(bd.getBeanClass()), type)__				}_			}_			if (targetAnnotation != null && targetAnnotation.equals(annotation)) {_				return true__			}_		}__		Map<String, Object> attributes = AnnotationUtils.getAnnotationAttributes(annotation)__		if (attributes.isEmpty() && qualifier == null) {_			_			return false__		}_		for (Map.Entry<String, Object> entry : attributes.entrySet()) {_			String attributeName = entry.getKey()__			Object expectedValue = entry.getValue()__			Object actualValue = null__			_			if (qualifier != null) {_				actualValue = qualifier.getAttribute(attributeName)__			}_			if (actualValue == null) {_				_				actualValue = bd.getAttribute(attributeName)__			}_			if (actualValue == null && attributeName.equals(AutowireCandidateQualifier.VALUE_KEY) &&_					expectedValue instanceof String && bdHolder.matchesName((String) expectedValue)) {_				_				continue__			}_			if (actualValue == null && qualifier != null) {_				_				actualValue = AnnotationUtils.getDefaultValue(annotation, attributeName)__			}_			if (actualValue != null) {_				actualValue = typeConverter.convertIfNecessary(actualValue, expectedValue.getClass())__			}_			if (!expectedValue.equals(actualValue)) {_				return false__			}_		}_		return true__	};match,the,given,qualifier,annotation,against,the,candidate,bean,definition;protected,boolean,check,qualifier,bean,definition,holder,bd,holder,annotation,annotation,type,converter,type,converter,class,extends,annotation,type,annotation,annotation,type,root,bean,definition,bd,root,bean,definition,bd,holder,get,bean,definition,autowire,candidate,qualifier,qualifier,bd,get,qualifier,type,get,name,if,qualifier,null,qualifier,bd,get,qualifier,class,utils,get,short,name,type,if,qualifier,null,annotation,target,annotation,get,qualified,element,annotation,bd,type,if,target,annotation,null,target,annotation,get,factory,method,annotation,bd,type,if,target,annotation,null,root,bean,definition,dbd,get,resolved,decorated,definition,bd,if,dbd,null,target,annotation,get,factory,method,annotation,dbd,type,if,target,annotation,null,if,get,bean,factory,null,try,class,bean,type,get,bean,factory,get,type,bd,holder,get,bean,name,if,bean,type,null,target,annotation,annotation,utils,get,annotation,class,utils,get,user,class,bean,type,type,catch,no,such,bean,definition,exception,ex,if,target,annotation,null,bd,has,bean,class,target,annotation,annotation,utils,get,annotation,class,utils,get,user,class,bd,get,bean,class,type,if,target,annotation,null,target,annotation,equals,annotation,return,true,map,string,object,attributes,annotation,utils,get,annotation,attributes,annotation,if,attributes,is,empty,qualifier,null,return,false,for,map,entry,string,object,entry,attributes,entry,set,string,attribute,name,entry,get,key,object,expected,value,entry,get,value,object,actual,value,null,if,qualifier,null,actual,value,qualifier,get,attribute,attribute,name,if,actual,value,null,actual,value,bd,get,attribute,attribute,name,if,actual,value,null,attribute,name,equals,autowire,candidate,qualifier,expected,value,instanceof,string,bd,holder,matches,name,string,expected,value,continue,if,actual,value,null,qualifier,null,actual,value,annotation,utils,get,default,value,annotation,attribute,name,if,actual,value,null,actual,value,type,converter,convert,if,necessary,actual,value,expected,value,get,class,if,expected,value,equals,actual,value,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifier( 			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter);1502974979;Match the given qualifier annotation against the candidate bean definition.;protected boolean checkQualifier(_			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter) {__		Class<? extends Annotation> type = annotation.annotationType()__		RootBeanDefinition bd = (RootBeanDefinition) bdHolder.getBeanDefinition()___		AutowireCandidateQualifier qualifier = bd.getQualifier(type.getName())__		if (qualifier == null) {_			qualifier = bd.getQualifier(ClassUtils.getShortName(type))__		}_		if (qualifier == null) {_			_			Annotation targetAnnotation = getQualifiedElementAnnotation(bd, type)__			_			if (targetAnnotation == null) {_				targetAnnotation = getFactoryMethodAnnotation(bd, type)__			}_			if (targetAnnotation == null) {_				RootBeanDefinition dbd = getResolvedDecoratedDefinition(bd)__				if (dbd != null) {_					targetAnnotation = getFactoryMethodAnnotation(dbd, type)__				}_			}_			if (targetAnnotation == null) {_				_				if (getBeanFactory() != null) {_					try {_						Class<?> beanType = getBeanFactory().getType(bdHolder.getBeanName())__						if (beanType != null) {_							targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(beanType), type)__						}_					}_					catch (NoSuchBeanDefinitionException ex) {_						_					}_				}_				if (targetAnnotation == null && bd.hasBeanClass()) {_					targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(bd.getBeanClass()), type)__				}_			}_			if (targetAnnotation != null && targetAnnotation.equals(annotation)) {_				return true__			}_		}__		Map<String, Object> attributes = AnnotationUtils.getAnnotationAttributes(annotation)__		if (attributes.isEmpty() && qualifier == null) {_			_			return false__		}_		for (Map.Entry<String, Object> entry : attributes.entrySet()) {_			String attributeName = entry.getKey()__			Object expectedValue = entry.getValue()__			Object actualValue = null__			_			if (qualifier != null) {_				actualValue = qualifier.getAttribute(attributeName)__			}_			if (actualValue == null) {_				_				actualValue = bd.getAttribute(attributeName)__			}_			if (actualValue == null && attributeName.equals(AutowireCandidateQualifier.VALUE_KEY) &&_					expectedValue instanceof String && bdHolder.matchesName((String) expectedValue)) {_				_				continue__			}_			if (actualValue == null && qualifier != null) {_				_				actualValue = AnnotationUtils.getDefaultValue(annotation, attributeName)__			}_			if (actualValue != null) {_				actualValue = typeConverter.convertIfNecessary(actualValue, expectedValue.getClass())__			}_			if (!expectedValue.equals(actualValue)) {_				return false__			}_		}_		return true__	};match,the,given,qualifier,annotation,against,the,candidate,bean,definition;protected,boolean,check,qualifier,bean,definition,holder,bd,holder,annotation,annotation,type,converter,type,converter,class,extends,annotation,type,annotation,annotation,type,root,bean,definition,bd,root,bean,definition,bd,holder,get,bean,definition,autowire,candidate,qualifier,qualifier,bd,get,qualifier,type,get,name,if,qualifier,null,qualifier,bd,get,qualifier,class,utils,get,short,name,type,if,qualifier,null,annotation,target,annotation,get,qualified,element,annotation,bd,type,if,target,annotation,null,target,annotation,get,factory,method,annotation,bd,type,if,target,annotation,null,root,bean,definition,dbd,get,resolved,decorated,definition,bd,if,dbd,null,target,annotation,get,factory,method,annotation,dbd,type,if,target,annotation,null,if,get,bean,factory,null,try,class,bean,type,get,bean,factory,get,type,bd,holder,get,bean,name,if,bean,type,null,target,annotation,annotation,utils,get,annotation,class,utils,get,user,class,bean,type,type,catch,no,such,bean,definition,exception,ex,if,target,annotation,null,bd,has,bean,class,target,annotation,annotation,utils,get,annotation,class,utils,get,user,class,bd,get,bean,class,type,if,target,annotation,null,target,annotation,equals,annotation,return,true,map,string,object,attributes,annotation,utils,get,annotation,attributes,annotation,if,attributes,is,empty,qualifier,null,return,false,for,map,entry,string,object,entry,attributes,entry,set,string,attribute,name,entry,get,key,object,expected,value,entry,get,value,object,actual,value,null,if,qualifier,null,actual,value,qualifier,get,attribute,attribute,name,if,actual,value,null,actual,value,bd,get,attribute,attribute,name,if,actual,value,null,attribute,name,equals,autowire,candidate,qualifier,expected,value,instanceof,string,bd,holder,matches,name,string,expected,value,continue,if,actual,value,null,qualifier,null,actual,value,annotation,utils,get,default,value,annotation,attribute,name,if,actual,value,null,actual,value,type,converter,convert,if,necessary,actual,value,expected,value,get,class,if,expected,value,equals,actual,value,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifier( 			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter);1534347014;Match the given qualifier annotation against the candidate bean definition.;protected boolean checkQualifier(_			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter) {__		Class<? extends Annotation> type = annotation.annotationType()__		RootBeanDefinition bd = (RootBeanDefinition) bdHolder.getBeanDefinition()___		AutowireCandidateQualifier qualifier = bd.getQualifier(type.getName())__		if (qualifier == null) {_			qualifier = bd.getQualifier(ClassUtils.getShortName(type))__		}_		if (qualifier == null) {_			_			Annotation targetAnnotation = getQualifiedElementAnnotation(bd, type)__			_			if (targetAnnotation == null) {_				targetAnnotation = getFactoryMethodAnnotation(bd, type)__			}_			if (targetAnnotation == null) {_				RootBeanDefinition dbd = getResolvedDecoratedDefinition(bd)__				if (dbd != null) {_					targetAnnotation = getFactoryMethodAnnotation(dbd, type)__				}_			}_			if (targetAnnotation == null) {_				_				if (getBeanFactory() != null) {_					try {_						Class<?> beanType = getBeanFactory().getType(bdHolder.getBeanName())__						if (beanType != null) {_							targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(beanType), type)__						}_					}_					catch (NoSuchBeanDefinitionException ex) {_						_					}_				}_				if (targetAnnotation == null && bd.hasBeanClass()) {_					targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(bd.getBeanClass()), type)__				}_			}_			if (targetAnnotation != null && targetAnnotation.equals(annotation)) {_				return true__			}_		}__		Map<String, Object> attributes = AnnotationUtils.getAnnotationAttributes(annotation)__		if (attributes.isEmpty() && qualifier == null) {_			_			return false__		}_		for (Map.Entry<String, Object> entry : attributes.entrySet()) {_			String attributeName = entry.getKey()__			Object expectedValue = entry.getValue()__			Object actualValue = null__			_			if (qualifier != null) {_				actualValue = qualifier.getAttribute(attributeName)__			}_			if (actualValue == null) {_				_				actualValue = bd.getAttribute(attributeName)__			}_			if (actualValue == null && attributeName.equals(AutowireCandidateQualifier.VALUE_KEY) &&_					expectedValue instanceof String && bdHolder.matchesName((String) expectedValue)) {_				_				continue__			}_			if (actualValue == null && qualifier != null) {_				_				actualValue = AnnotationUtils.getDefaultValue(annotation, attributeName)__			}_			if (actualValue != null) {_				actualValue = typeConverter.convertIfNecessary(actualValue, expectedValue.getClass())__			}_			if (!expectedValue.equals(actualValue)) {_				return false__			}_		}_		return true__	};match,the,given,qualifier,annotation,against,the,candidate,bean,definition;protected,boolean,check,qualifier,bean,definition,holder,bd,holder,annotation,annotation,type,converter,type,converter,class,extends,annotation,type,annotation,annotation,type,root,bean,definition,bd,root,bean,definition,bd,holder,get,bean,definition,autowire,candidate,qualifier,qualifier,bd,get,qualifier,type,get,name,if,qualifier,null,qualifier,bd,get,qualifier,class,utils,get,short,name,type,if,qualifier,null,annotation,target,annotation,get,qualified,element,annotation,bd,type,if,target,annotation,null,target,annotation,get,factory,method,annotation,bd,type,if,target,annotation,null,root,bean,definition,dbd,get,resolved,decorated,definition,bd,if,dbd,null,target,annotation,get,factory,method,annotation,dbd,type,if,target,annotation,null,if,get,bean,factory,null,try,class,bean,type,get,bean,factory,get,type,bd,holder,get,bean,name,if,bean,type,null,target,annotation,annotation,utils,get,annotation,class,utils,get,user,class,bean,type,type,catch,no,such,bean,definition,exception,ex,if,target,annotation,null,bd,has,bean,class,target,annotation,annotation,utils,get,annotation,class,utils,get,user,class,bd,get,bean,class,type,if,target,annotation,null,target,annotation,equals,annotation,return,true,map,string,object,attributes,annotation,utils,get,annotation,attributes,annotation,if,attributes,is,empty,qualifier,null,return,false,for,map,entry,string,object,entry,attributes,entry,set,string,attribute,name,entry,get,key,object,expected,value,entry,get,value,object,actual,value,null,if,qualifier,null,actual,value,qualifier,get,attribute,attribute,name,if,actual,value,null,actual,value,bd,get,attribute,attribute,name,if,actual,value,null,attribute,name,equals,autowire,candidate,qualifier,expected,value,instanceof,string,bd,holder,matches,name,string,expected,value,continue,if,actual,value,null,qualifier,null,actual,value,annotation,utils,get,default,value,annotation,attribute,name,if,actual,value,null,actual,value,type,converter,convert,if,necessary,actual,value,expected,value,get,class,if,expected,value,equals,actual,value,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> protected boolean checkQualifier( 			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter);1536855799;Match the given qualifier annotation against the candidate bean definition.;protected boolean checkQualifier(_			BeanDefinitionHolder bdHolder, Annotation annotation, TypeConverter typeConverter) {__		Class<? extends Annotation> type = annotation.annotationType()__		RootBeanDefinition bd = (RootBeanDefinition) bdHolder.getBeanDefinition()___		AutowireCandidateQualifier qualifier = bd.getQualifier(type.getName())__		if (qualifier == null) {_			qualifier = bd.getQualifier(ClassUtils.getShortName(type))__		}_		if (qualifier == null) {_			_			Annotation targetAnnotation = getQualifiedElementAnnotation(bd, type)__			_			if (targetAnnotation == null) {_				targetAnnotation = getFactoryMethodAnnotation(bd, type)__			}_			if (targetAnnotation == null) {_				RootBeanDefinition dbd = getResolvedDecoratedDefinition(bd)__				if (dbd != null) {_					targetAnnotation = getFactoryMethodAnnotation(dbd, type)__				}_			}_			if (targetAnnotation == null) {_				_				if (getBeanFactory() != null) {_					try {_						Class<?> beanType = getBeanFactory().getType(bdHolder.getBeanName())__						if (beanType != null) {_							targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(beanType), type)__						}_					}_					catch (NoSuchBeanDefinitionException ex) {_						_					}_				}_				if (targetAnnotation == null && bd.hasBeanClass()) {_					targetAnnotation = AnnotationUtils.getAnnotation(ClassUtils.getUserClass(bd.getBeanClass()), type)__				}_			}_			if (targetAnnotation != null && targetAnnotation.equals(annotation)) {_				return true__			}_		}__		Map<String, Object> attributes = AnnotationUtils.getAnnotationAttributes(annotation)__		if (attributes.isEmpty() && qualifier == null) {_			_			return false__		}_		for (Map.Entry<String, Object> entry : attributes.entrySet()) {_			String attributeName = entry.getKey()__			Object expectedValue = entry.getValue()__			Object actualValue = null__			_			if (qualifier != null) {_				actualValue = qualifier.getAttribute(attributeName)__			}_			if (actualValue == null) {_				_				actualValue = bd.getAttribute(attributeName)__			}_			if (actualValue == null && attributeName.equals(AutowireCandidateQualifier.VALUE_KEY) &&_					expectedValue instanceof String && bdHolder.matchesName((String) expectedValue)) {_				_				continue__			}_			if (actualValue == null && qualifier != null) {_				_				actualValue = AnnotationUtils.getDefaultValue(annotation, attributeName)__			}_			if (actualValue != null) {_				actualValue = typeConverter.convertIfNecessary(actualValue, expectedValue.getClass())__			}_			if (!expectedValue.equals(actualValue)) {_				return false__			}_		}_		return true__	};match,the,given,qualifier,annotation,against,the,candidate,bean,definition;protected,boolean,check,qualifier,bean,definition,holder,bd,holder,annotation,annotation,type,converter,type,converter,class,extends,annotation,type,annotation,annotation,type,root,bean,definition,bd,root,bean,definition,bd,holder,get,bean,definition,autowire,candidate,qualifier,qualifier,bd,get,qualifier,type,get,name,if,qualifier,null,qualifier,bd,get,qualifier,class,utils,get,short,name,type,if,qualifier,null,annotation,target,annotation,get,qualified,element,annotation,bd,type,if,target,annotation,null,target,annotation,get,factory,method,annotation,bd,type,if,target,annotation,null,root,bean,definition,dbd,get,resolved,decorated,definition,bd,if,dbd,null,target,annotation,get,factory,method,annotation,dbd,type,if,target,annotation,null,if,get,bean,factory,null,try,class,bean,type,get,bean,factory,get,type,bd,holder,get,bean,name,if,bean,type,null,target,annotation,annotation,utils,get,annotation,class,utils,get,user,class,bean,type,type,catch,no,such,bean,definition,exception,ex,if,target,annotation,null,bd,has,bean,class,target,annotation,annotation,utils,get,annotation,class,utils,get,user,class,bd,get,bean,class,type,if,target,annotation,null,target,annotation,equals,annotation,return,true,map,string,object,attributes,annotation,utils,get,annotation,attributes,annotation,if,attributes,is,empty,qualifier,null,return,false,for,map,entry,string,object,entry,attributes,entry,set,string,attribute,name,entry,get,key,object,expected,value,entry,get,value,object,actual,value,null,if,qualifier,null,actual,value,qualifier,get,attribute,attribute,name,if,actual,value,null,actual,value,bd,get,attribute,attribute,name,if,actual,value,null,attribute,name,equals,autowire,candidate,qualifier,expected,value,instanceof,string,bd,holder,matches,name,string,expected,value,continue,if,actual,value,null,qualifier,null,actual,value,annotation,utils,get,default,value,annotation,attribute,name,if,actual,value,null,actual,value,type,converter,convert,if,necessary,actual,value,expected,value,get,class,if,expected,value,equals,actual,value,return,false,return,true
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType);1328020251;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation type._@param qualifierType the qualifier annotation to look for;public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType) {_		Assert.notNull(qualifierType, "'qualifierType' must not be null")__		this.qualifierTypes.add(qualifierType)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,type,param,qualifier,type,the,qualifier,annotation,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,class,extends,annotation,qualifier,type,assert,not,null,qualifier,type,qualifier,type,must,not,be,null,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType);1351681817;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation type._@param qualifierType the qualifier annotation to look for;public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType) {_		Assert.notNull(qualifierType, "'qualifierType' must not be null")__		this.qualifierTypes.add(qualifierType)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,type,param,qualifier,type,the,qualifier,annotation,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,class,extends,annotation,qualifier,type,assert,not,null,qualifier,type,qualifier,type,must,not,be,null,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType);1356735495;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation type._@param qualifierType the qualifier annotation to look for;public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType) {_		Assert.notNull(qualifierType, "'qualifierType' must not be null")__		this.qualifierTypes.add(qualifierType)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,type,param,qualifier,type,the,qualifier,annotation,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,class,extends,annotation,qualifier,type,assert,not,null,qualifier,type,qualifier,type,must,not,be,null,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType);1357119239;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation type._@param qualifierType the qualifier annotation to look for;public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType) {_		Assert.notNull(qualifierType, "'qualifierType' must not be null")__		this.qualifierTypes.add(qualifierType)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,type,param,qualifier,type,the,qualifier,annotation,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,class,extends,annotation,qualifier,type,assert,not,null,qualifier,type,qualifier,type,must,not,be,null,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType);1368482696;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation type._@param qualifierType the qualifier annotation to look for;public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType) {_		Assert.notNull(qualifierType, "'qualifierType' must not be null")__		this.qualifierTypes.add(qualifierType)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,type,param,qualifier,type,the,qualifier,annotation,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,class,extends,annotation,qualifier,type,assert,not,null,qualifier,type,qualifier,type,must,not,be,null,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType);1377641679;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation type._@param qualifierType the qualifier annotation to look for;public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType) {_		Assert.notNull(qualifierType, "'qualifierType' must not be null")__		this.qualifierTypes.add(qualifierType)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,type,param,qualifier,type,the,qualifier,annotation,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,class,extends,annotation,qualifier,type,assert,not,null,qualifier,type,qualifier,type,must,not,be,null,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType);1381788683;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation type._@param qualifierType the qualifier annotation to look for;public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType) {_		Assert.notNull(qualifierType, "'qualifierType' must not be null")__		this.qualifierTypes.add(qualifierType)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,type,param,qualifier,type,the,qualifier,annotation,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,class,extends,annotation,qualifier,type,assert,not,null,qualifier,type,qualifier,type,must,not,be,null,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType);1382826936;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation type._@param qualifierType the qualifier annotation to look for;public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType) {_		Assert.notNull(qualifierType, "'qualifierType' must not be null")__		this.qualifierTypes.add(qualifierType)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,type,param,qualifier,type,the,qualifier,annotation,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,class,extends,annotation,qualifier,type,assert,not,null,qualifier,type,qualifier,type,must,not,be,null,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType);1386541456;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation type._@param qualifierType the qualifier annotation to look for;public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType) {_		Assert.notNull(qualifierType, "'qualifierType' must not be null")__		this.qualifierTypes.add(qualifierType)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,type,param,qualifier,type,the,qualifier,annotation,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,class,extends,annotation,qualifier,type,assert,not,null,qualifier,type,qualifier,type,must,not,be,null,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType);1398638841;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation type._@param qualifierType the qualifier annotation to look for;public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType) {_		Assert.notNull(qualifierType, "'qualifierType' must not be null")__		this.qualifierTypes.add(qualifierType)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,type,param,qualifier,type,the,qualifier,annotation,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,class,extends,annotation,qualifier,type,assert,not,null,qualifier,type,qualifier,type,must,not,be,null,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType);1413990280;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation type._@param qualifierType the qualifier annotation to look for;public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType) {_		Assert.notNull(qualifierType, "'qualifierType' must not be null")__		this.qualifierTypes.add(qualifierType)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,type,param,qualifier,type,the,qualifier,annotation,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,class,extends,annotation,qualifier,type,assert,not,null,qualifier,type,qualifier,type,must,not,be,null,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType);1432125256;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation type._@param qualifierType the qualifier annotation to look for;public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType) {_		Assert.notNull(qualifierType, "'qualifierType' must not be null")__		this.qualifierTypes.add(qualifierType)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,type,param,qualifier,type,the,qualifier,annotation,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,class,extends,annotation,qualifier,type,assert,not,null,qualifier,type,qualifier,type,must,not,be,null,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType);1451408536;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation type._@param qualifierType the qualifier annotation to look for;public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType) {_		Assert.notNull(qualifierType, "'qualifierType' must not be null")__		this.qualifierTypes.add(qualifierType)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,type,param,qualifier,type,the,qualifier,annotation,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,class,extends,annotation,qualifier,type,assert,not,null,qualifier,type,qualifier,type,must,not,be,null,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType);1467730834;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation type._@param qualifierType the qualifier annotation to look for;public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType) {_		Assert.notNull(qualifierType, "'qualifierType' must not be null")__		this.qualifierTypes.add(qualifierType)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,type,param,qualifier,type,the,qualifier,annotation,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,class,extends,annotation,qualifier,type,assert,not,null,qualifier,type,qualifier,type,must,not,be,null,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType);1474010431;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation type._@param qualifierType the qualifier annotation to look for;public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType) {_		Assert.notNull(qualifierType, "'qualifierType' must not be null")__		this.qualifierTypes.add(qualifierType)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,type,param,qualifier,type,the,qualifier,annotation,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,class,extends,annotation,qualifier,type,assert,not,null,qualifier,type,qualifier,type,must,not,be,null,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType);1493811736;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation type._@param qualifierType the qualifier annotation to look for;public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType) {_		Assert.notNull(qualifierType, "'qualifierType' must not be null")__		this.qualifierTypes.add(qualifierType)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,type,param,qualifier,type,the,qualifier,annotation,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,class,extends,annotation,qualifier,type,assert,not,null,qualifier,type,qualifier,type,must,not,be,null,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType);1495868221;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation type._@param qualifierType the qualifier annotation to look for;public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType) {_		Assert.notNull(qualifierType, "'qualifierType' must not be null")__		this.qualifierTypes.add(qualifierType)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,type,param,qualifier,type,the,qualifier,annotation,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,class,extends,annotation,qualifier,type,assert,not,null,qualifier,type,qualifier,type,must,not,be,null,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType);1496837955;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation type._@param qualifierType the qualifier annotation to look for;public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType) {_		Assert.notNull(qualifierType, "'qualifierType' must not be null")__		this.qualifierTypes.add(qualifierType)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,type,param,qualifier,type,the,qualifier,annotation,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,class,extends,annotation,qualifier,type,assert,not,null,qualifier,type,qualifier,type,must,not,be,null,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType);1502974979;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation type._@param qualifierType the qualifier annotation to look for;public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType) {_		Assert.notNull(qualifierType, "'qualifierType' must not be null")__		this.qualifierTypes.add(qualifierType)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,type,param,qualifier,type,the,qualifier,annotation,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,class,extends,annotation,qualifier,type,assert,not,null,qualifier,type,qualifier,type,must,not,be,null,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType);1534347014;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation type._@param qualifierType the qualifier annotation to look for;public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType) {_		Assert.notNull(qualifierType, "'qualifierType' must not be null")__		this.qualifierTypes.add(qualifierType)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,type,param,qualifier,type,the,qualifier,annotation,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,class,extends,annotation,qualifier,type,assert,not,null,qualifier,type,qualifier,type,must,not,be,null,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType);1536855799;Create a new QualifierAnnotationAutowireCandidateResolver_for the given qualifier annotation type._@param qualifierType the qualifier annotation to look for;public QualifierAnnotationAutowireCandidateResolver(Class<? extends Annotation> qualifierType) {_		Assert.notNull(qualifierType, "'qualifierType' must not be null")__		this.qualifierTypes.add(qualifierType)__	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,the,given,qualifier,annotation,type,param,qualifier,type,the,qualifier,annotation,to,look,for;public,qualifier,annotation,autowire,candidate,resolver,class,extends,annotation,qualifier,type,assert,not,null,qualifier,type,qualifier,type,must,not,be,null,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> @Override 	public boolean isRequired(DependencyDescriptor descriptor);1493811736;Determine whether the given dependency declares an autowired annotation,_checking its required flag._@see Autowired#required();@Override_	public boolean isRequired(DependencyDescriptor descriptor) {_		if (!super.isRequired(descriptor)) {_			return false__		}_		Autowired autowired = descriptor.getAnnotation(Autowired.class)__		return (autowired == null || autowired.required())__	};determine,whether,the,given,dependency,declares,an,autowired,annotation,checking,its,required,flag,see,autowired,required;override,public,boolean,is,required,dependency,descriptor,descriptor,if,super,is,required,descriptor,return,false,autowired,autowired,descriptor,get,annotation,autowired,class,return,autowired,null,autowired,required
QualifierAnnotationAutowireCandidateResolver -> @Override 	public boolean isRequired(DependencyDescriptor descriptor);1495868221;Determine whether the given dependency declares an autowired annotation,_checking its required flag._@see Autowired#required();@Override_	public boolean isRequired(DependencyDescriptor descriptor) {_		if (!super.isRequired(descriptor)) {_			return false__		}_		Autowired autowired = descriptor.getAnnotation(Autowired.class)__		return (autowired == null || autowired.required())__	};determine,whether,the,given,dependency,declares,an,autowired,annotation,checking,its,required,flag,see,autowired,required;override,public,boolean,is,required,dependency,descriptor,descriptor,if,super,is,required,descriptor,return,false,autowired,autowired,descriptor,get,annotation,autowired,class,return,autowired,null,autowired,required
QualifierAnnotationAutowireCandidateResolver -> @Override 	public boolean isRequired(DependencyDescriptor descriptor);1496837955;Determine whether the given dependency declares an autowired annotation,_checking its required flag._@see Autowired#required();@Override_	public boolean isRequired(DependencyDescriptor descriptor) {_		if (!super.isRequired(descriptor)) {_			return false__		}_		Autowired autowired = descriptor.getAnnotation(Autowired.class)__		return (autowired == null || autowired.required())__	};determine,whether,the,given,dependency,declares,an,autowired,annotation,checking,its,required,flag,see,autowired,required;override,public,boolean,is,required,dependency,descriptor,descriptor,if,super,is,required,descriptor,return,false,autowired,autowired,descriptor,get,annotation,autowired,class,return,autowired,null,autowired,required
QualifierAnnotationAutowireCandidateResolver -> @Override 	public boolean isRequired(DependencyDescriptor descriptor);1502974979;Determine whether the given dependency declares an autowired annotation,_checking its required flag._@see Autowired#required();@Override_	public boolean isRequired(DependencyDescriptor descriptor) {_		if (!super.isRequired(descriptor)) {_			return false__		}_		Autowired autowired = descriptor.getAnnotation(Autowired.class)__		return (autowired == null || autowired.required())__	};determine,whether,the,given,dependency,declares,an,autowired,annotation,checking,its,required,flag,see,autowired,required;override,public,boolean,is,required,dependency,descriptor,descriptor,if,super,is,required,descriptor,return,false,autowired,autowired,descriptor,get,annotation,autowired,class,return,autowired,null,autowired,required
QualifierAnnotationAutowireCandidateResolver -> @Override 	public boolean isRequired(DependencyDescriptor descriptor);1534347014;Determine whether the given dependency declares an autowired annotation,_checking its required flag._@see Autowired#required();@Override_	public boolean isRequired(DependencyDescriptor descriptor) {_		if (!super.isRequired(descriptor)) {_			return false__		}_		Autowired autowired = descriptor.getAnnotation(Autowired.class)__		return (autowired == null || autowired.required())__	};determine,whether,the,given,dependency,declares,an,autowired,annotation,checking,its,required,flag,see,autowired,required;override,public,boolean,is,required,dependency,descriptor,descriptor,if,super,is,required,descriptor,return,false,autowired,autowired,descriptor,get,annotation,autowired,class,return,autowired,null,autowired,required
QualifierAnnotationAutowireCandidateResolver -> @Override 	public boolean isRequired(DependencyDescriptor descriptor);1536855799;Determine whether the given dependency declares an autowired annotation,_checking its required flag._@see Autowired#required();@Override_	public boolean isRequired(DependencyDescriptor descriptor) {_		if (!super.isRequired(descriptor)) {_			return false__		}_		Autowired autowired = descriptor.getAnnotation(Autowired.class)__		return (autowired == null || autowired.required())__	};determine,whether,the,given,dependency,declares,an,autowired,annotation,checking,its,required,flag,see,autowired,required;override,public,boolean,is,required,dependency,descriptor,descriptor,if,super,is,required,descriptor,return,false,autowired,autowired,descriptor,get,annotation,autowired,class,return,autowired,null,autowired,required
QualifierAnnotationAutowireCandidateResolver -> public void addQualifierType(Class<? extends Annotation> qualifierType);1328020251;Register the given type to be used as a qualifier when autowiring._<p>This identifies qualifier annotations for direct use (on fields,_method parameters and constructor parameters) as well as meta_annotations that in turn identify actual qualifier annotations._<p>This implementation only supports annotations as qualifier types._The default is Spring's {@link Qualifier} annotation which serves_as a qualifier for direct use and also as a meta annotation._@param qualifierType the annotation type to register;public void addQualifierType(Class<? extends Annotation> qualifierType) {_		this.qualifierTypes.add(qualifierType)__	};register,the,given,type,to,be,used,as,a,qualifier,when,autowiring,p,this,identifies,qualifier,annotations,for,direct,use,on,fields,method,parameters,and,constructor,parameters,as,well,as,meta,annotations,that,in,turn,identify,actual,qualifier,annotations,p,this,implementation,only,supports,annotations,as,qualifier,types,the,default,is,spring,s,link,qualifier,annotation,which,serves,as,a,qualifier,for,direct,use,and,also,as,a,meta,annotation,param,qualifier,type,the,annotation,type,to,register;public,void,add,qualifier,type,class,extends,annotation,qualifier,type,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> public void addQualifierType(Class<? extends Annotation> qualifierType);1351681817;Register the given type to be used as a qualifier when autowiring._<p>This identifies qualifier annotations for direct use (on fields,_method parameters and constructor parameters) as well as meta_annotations that in turn identify actual qualifier annotations._<p>This implementation only supports annotations as qualifier types._The default is Spring's {@link Qualifier} annotation which serves_as a qualifier for direct use and also as a meta annotation._@param qualifierType the annotation type to register;public void addQualifierType(Class<? extends Annotation> qualifierType) {_		this.qualifierTypes.add(qualifierType)__	};register,the,given,type,to,be,used,as,a,qualifier,when,autowiring,p,this,identifies,qualifier,annotations,for,direct,use,on,fields,method,parameters,and,constructor,parameters,as,well,as,meta,annotations,that,in,turn,identify,actual,qualifier,annotations,p,this,implementation,only,supports,annotations,as,qualifier,types,the,default,is,spring,s,link,qualifier,annotation,which,serves,as,a,qualifier,for,direct,use,and,also,as,a,meta,annotation,param,qualifier,type,the,annotation,type,to,register;public,void,add,qualifier,type,class,extends,annotation,qualifier,type,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> public void addQualifierType(Class<? extends Annotation> qualifierType);1356735495;Register the given type to be used as a qualifier when autowiring._<p>This identifies qualifier annotations for direct use (on fields,_method parameters and constructor parameters) as well as meta_annotations that in turn identify actual qualifier annotations._<p>This implementation only supports annotations as qualifier types._The default is Spring's {@link Qualifier} annotation which serves_as a qualifier for direct use and also as a meta annotation._@param qualifierType the annotation type to register;public void addQualifierType(Class<? extends Annotation> qualifierType) {_		this.qualifierTypes.add(qualifierType)__	};register,the,given,type,to,be,used,as,a,qualifier,when,autowiring,p,this,identifies,qualifier,annotations,for,direct,use,on,fields,method,parameters,and,constructor,parameters,as,well,as,meta,annotations,that,in,turn,identify,actual,qualifier,annotations,p,this,implementation,only,supports,annotations,as,qualifier,types,the,default,is,spring,s,link,qualifier,annotation,which,serves,as,a,qualifier,for,direct,use,and,also,as,a,meta,annotation,param,qualifier,type,the,annotation,type,to,register;public,void,add,qualifier,type,class,extends,annotation,qualifier,type,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> public void addQualifierType(Class<? extends Annotation> qualifierType);1357119239;Register the given type to be used as a qualifier when autowiring._<p>This identifies qualifier annotations for direct use (on fields,_method parameters and constructor parameters) as well as meta_annotations that in turn identify actual qualifier annotations._<p>This implementation only supports annotations as qualifier types._The default is Spring's {@link Qualifier} annotation which serves_as a qualifier for direct use and also as a meta annotation._@param qualifierType the annotation type to register;public void addQualifierType(Class<? extends Annotation> qualifierType) {_		this.qualifierTypes.add(qualifierType)__	};register,the,given,type,to,be,used,as,a,qualifier,when,autowiring,p,this,identifies,qualifier,annotations,for,direct,use,on,fields,method,parameters,and,constructor,parameters,as,well,as,meta,annotations,that,in,turn,identify,actual,qualifier,annotations,p,this,implementation,only,supports,annotations,as,qualifier,types,the,default,is,spring,s,link,qualifier,annotation,which,serves,as,a,qualifier,for,direct,use,and,also,as,a,meta,annotation,param,qualifier,type,the,annotation,type,to,register;public,void,add,qualifier,type,class,extends,annotation,qualifier,type,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> public void addQualifierType(Class<? extends Annotation> qualifierType);1368482696;Register the given type to be used as a qualifier when autowiring._<p>This identifies qualifier annotations for direct use (on fields,_method parameters and constructor parameters) as well as meta_annotations that in turn identify actual qualifier annotations._<p>This implementation only supports annotations as qualifier types._The default is Spring's {@link Qualifier} annotation which serves_as a qualifier for direct use and also as a meta annotation._@param qualifierType the annotation type to register;public void addQualifierType(Class<? extends Annotation> qualifierType) {_		this.qualifierTypes.add(qualifierType)__	};register,the,given,type,to,be,used,as,a,qualifier,when,autowiring,p,this,identifies,qualifier,annotations,for,direct,use,on,fields,method,parameters,and,constructor,parameters,as,well,as,meta,annotations,that,in,turn,identify,actual,qualifier,annotations,p,this,implementation,only,supports,annotations,as,qualifier,types,the,default,is,spring,s,link,qualifier,annotation,which,serves,as,a,qualifier,for,direct,use,and,also,as,a,meta,annotation,param,qualifier,type,the,annotation,type,to,register;public,void,add,qualifier,type,class,extends,annotation,qualifier,type,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> public void addQualifierType(Class<? extends Annotation> qualifierType);1377641679;Register the given type to be used as a qualifier when autowiring._<p>This identifies qualifier annotations for direct use (on fields,_method parameters and constructor parameters) as well as meta_annotations that in turn identify actual qualifier annotations._<p>This implementation only supports annotations as qualifier types._The default is Spring's {@link Qualifier} annotation which serves_as a qualifier for direct use and also as a meta annotation._@param qualifierType the annotation type to register;public void addQualifierType(Class<? extends Annotation> qualifierType) {_		this.qualifierTypes.add(qualifierType)__	};register,the,given,type,to,be,used,as,a,qualifier,when,autowiring,p,this,identifies,qualifier,annotations,for,direct,use,on,fields,method,parameters,and,constructor,parameters,as,well,as,meta,annotations,that,in,turn,identify,actual,qualifier,annotations,p,this,implementation,only,supports,annotations,as,qualifier,types,the,default,is,spring,s,link,qualifier,annotation,which,serves,as,a,qualifier,for,direct,use,and,also,as,a,meta,annotation,param,qualifier,type,the,annotation,type,to,register;public,void,add,qualifier,type,class,extends,annotation,qualifier,type,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> public void addQualifierType(Class<? extends Annotation> qualifierType);1381788683;Register the given type to be used as a qualifier when autowiring._<p>This identifies qualifier annotations for direct use (on fields,_method parameters and constructor parameters) as well as meta_annotations that in turn identify actual qualifier annotations._<p>This implementation only supports annotations as qualifier types._The default is Spring's {@link Qualifier} annotation which serves_as a qualifier for direct use and also as a meta annotation._@param qualifierType the annotation type to register;public void addQualifierType(Class<? extends Annotation> qualifierType) {_		this.qualifierTypes.add(qualifierType)__	};register,the,given,type,to,be,used,as,a,qualifier,when,autowiring,p,this,identifies,qualifier,annotations,for,direct,use,on,fields,method,parameters,and,constructor,parameters,as,well,as,meta,annotations,that,in,turn,identify,actual,qualifier,annotations,p,this,implementation,only,supports,annotations,as,qualifier,types,the,default,is,spring,s,link,qualifier,annotation,which,serves,as,a,qualifier,for,direct,use,and,also,as,a,meta,annotation,param,qualifier,type,the,annotation,type,to,register;public,void,add,qualifier,type,class,extends,annotation,qualifier,type,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> public void addQualifierType(Class<? extends Annotation> qualifierType);1382826936;Register the given type to be used as a qualifier when autowiring._<p>This identifies qualifier annotations for direct use (on fields,_method parameters and constructor parameters) as well as meta_annotations that in turn identify actual qualifier annotations._<p>This implementation only supports annotations as qualifier types._The default is Spring's {@link Qualifier} annotation which serves_as a qualifier for direct use and also as a meta annotation._@param qualifierType the annotation type to register;public void addQualifierType(Class<? extends Annotation> qualifierType) {_		this.qualifierTypes.add(qualifierType)__	};register,the,given,type,to,be,used,as,a,qualifier,when,autowiring,p,this,identifies,qualifier,annotations,for,direct,use,on,fields,method,parameters,and,constructor,parameters,as,well,as,meta,annotations,that,in,turn,identify,actual,qualifier,annotations,p,this,implementation,only,supports,annotations,as,qualifier,types,the,default,is,spring,s,link,qualifier,annotation,which,serves,as,a,qualifier,for,direct,use,and,also,as,a,meta,annotation,param,qualifier,type,the,annotation,type,to,register;public,void,add,qualifier,type,class,extends,annotation,qualifier,type,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> public void addQualifierType(Class<? extends Annotation> qualifierType);1386541456;Register the given type to be used as a qualifier when autowiring._<p>This identifies qualifier annotations for direct use (on fields,_method parameters and constructor parameters) as well as meta_annotations that in turn identify actual qualifier annotations._<p>This implementation only supports annotations as qualifier types._The default is Spring's {@link Qualifier} annotation which serves_as a qualifier for direct use and also as a meta annotation._@param qualifierType the annotation type to register;public void addQualifierType(Class<? extends Annotation> qualifierType) {_		this.qualifierTypes.add(qualifierType)__	};register,the,given,type,to,be,used,as,a,qualifier,when,autowiring,p,this,identifies,qualifier,annotations,for,direct,use,on,fields,method,parameters,and,constructor,parameters,as,well,as,meta,annotations,that,in,turn,identify,actual,qualifier,annotations,p,this,implementation,only,supports,annotations,as,qualifier,types,the,default,is,spring,s,link,qualifier,annotation,which,serves,as,a,qualifier,for,direct,use,and,also,as,a,meta,annotation,param,qualifier,type,the,annotation,type,to,register;public,void,add,qualifier,type,class,extends,annotation,qualifier,type,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> public void addQualifierType(Class<? extends Annotation> qualifierType);1398638841;Register the given type to be used as a qualifier when autowiring._<p>This identifies qualifier annotations for direct use (on fields,_method parameters and constructor parameters) as well as meta_annotations that in turn identify actual qualifier annotations._<p>This implementation only supports annotations as qualifier types._The default is Spring's {@link Qualifier} annotation which serves_as a qualifier for direct use and also as a meta annotation._@param qualifierType the annotation type to register;public void addQualifierType(Class<? extends Annotation> qualifierType) {_		this.qualifierTypes.add(qualifierType)__	};register,the,given,type,to,be,used,as,a,qualifier,when,autowiring,p,this,identifies,qualifier,annotations,for,direct,use,on,fields,method,parameters,and,constructor,parameters,as,well,as,meta,annotations,that,in,turn,identify,actual,qualifier,annotations,p,this,implementation,only,supports,annotations,as,qualifier,types,the,default,is,spring,s,link,qualifier,annotation,which,serves,as,a,qualifier,for,direct,use,and,also,as,a,meta,annotation,param,qualifier,type,the,annotation,type,to,register;public,void,add,qualifier,type,class,extends,annotation,qualifier,type,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> public void addQualifierType(Class<? extends Annotation> qualifierType);1413990280;Register the given type to be used as a qualifier when autowiring._<p>This identifies qualifier annotations for direct use (on fields,_method parameters and constructor parameters) as well as meta_annotations that in turn identify actual qualifier annotations._<p>This implementation only supports annotations as qualifier types._The default is Spring's {@link Qualifier} annotation which serves_as a qualifier for direct use and also as a meta annotation._@param qualifierType the annotation type to register;public void addQualifierType(Class<? extends Annotation> qualifierType) {_		this.qualifierTypes.add(qualifierType)__	};register,the,given,type,to,be,used,as,a,qualifier,when,autowiring,p,this,identifies,qualifier,annotations,for,direct,use,on,fields,method,parameters,and,constructor,parameters,as,well,as,meta,annotations,that,in,turn,identify,actual,qualifier,annotations,p,this,implementation,only,supports,annotations,as,qualifier,types,the,default,is,spring,s,link,qualifier,annotation,which,serves,as,a,qualifier,for,direct,use,and,also,as,a,meta,annotation,param,qualifier,type,the,annotation,type,to,register;public,void,add,qualifier,type,class,extends,annotation,qualifier,type,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> public void addQualifierType(Class<? extends Annotation> qualifierType);1432125256;Register the given type to be used as a qualifier when autowiring._<p>This identifies qualifier annotations for direct use (on fields,_method parameters and constructor parameters) as well as meta_annotations that in turn identify actual qualifier annotations._<p>This implementation only supports annotations as qualifier types._The default is Spring's {@link Qualifier} annotation which serves_as a qualifier for direct use and also as a meta annotation._@param qualifierType the annotation type to register;public void addQualifierType(Class<? extends Annotation> qualifierType) {_		this.qualifierTypes.add(qualifierType)__	};register,the,given,type,to,be,used,as,a,qualifier,when,autowiring,p,this,identifies,qualifier,annotations,for,direct,use,on,fields,method,parameters,and,constructor,parameters,as,well,as,meta,annotations,that,in,turn,identify,actual,qualifier,annotations,p,this,implementation,only,supports,annotations,as,qualifier,types,the,default,is,spring,s,link,qualifier,annotation,which,serves,as,a,qualifier,for,direct,use,and,also,as,a,meta,annotation,param,qualifier,type,the,annotation,type,to,register;public,void,add,qualifier,type,class,extends,annotation,qualifier,type,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> public void addQualifierType(Class<? extends Annotation> qualifierType);1451408536;Register the given type to be used as a qualifier when autowiring._<p>This identifies qualifier annotations for direct use (on fields,_method parameters and constructor parameters) as well as meta_annotations that in turn identify actual qualifier annotations._<p>This implementation only supports annotations as qualifier types._The default is Spring's {@link Qualifier} annotation which serves_as a qualifier for direct use and also as a meta annotation._@param qualifierType the annotation type to register;public void addQualifierType(Class<? extends Annotation> qualifierType) {_		this.qualifierTypes.add(qualifierType)__	};register,the,given,type,to,be,used,as,a,qualifier,when,autowiring,p,this,identifies,qualifier,annotations,for,direct,use,on,fields,method,parameters,and,constructor,parameters,as,well,as,meta,annotations,that,in,turn,identify,actual,qualifier,annotations,p,this,implementation,only,supports,annotations,as,qualifier,types,the,default,is,spring,s,link,qualifier,annotation,which,serves,as,a,qualifier,for,direct,use,and,also,as,a,meta,annotation,param,qualifier,type,the,annotation,type,to,register;public,void,add,qualifier,type,class,extends,annotation,qualifier,type,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> public void addQualifierType(Class<? extends Annotation> qualifierType);1467730834;Register the given type to be used as a qualifier when autowiring._<p>This identifies qualifier annotations for direct use (on fields,_method parameters and constructor parameters) as well as meta_annotations that in turn identify actual qualifier annotations._<p>This implementation only supports annotations as qualifier types._The default is Spring's {@link Qualifier} annotation which serves_as a qualifier for direct use and also as a meta annotation._@param qualifierType the annotation type to register;public void addQualifierType(Class<? extends Annotation> qualifierType) {_		this.qualifierTypes.add(qualifierType)__	};register,the,given,type,to,be,used,as,a,qualifier,when,autowiring,p,this,identifies,qualifier,annotations,for,direct,use,on,fields,method,parameters,and,constructor,parameters,as,well,as,meta,annotations,that,in,turn,identify,actual,qualifier,annotations,p,this,implementation,only,supports,annotations,as,qualifier,types,the,default,is,spring,s,link,qualifier,annotation,which,serves,as,a,qualifier,for,direct,use,and,also,as,a,meta,annotation,param,qualifier,type,the,annotation,type,to,register;public,void,add,qualifier,type,class,extends,annotation,qualifier,type,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> public void addQualifierType(Class<? extends Annotation> qualifierType);1474010431;Register the given type to be used as a qualifier when autowiring._<p>This identifies qualifier annotations for direct use (on fields,_method parameters and constructor parameters) as well as meta_annotations that in turn identify actual qualifier annotations._<p>This implementation only supports annotations as qualifier types._The default is Spring's {@link Qualifier} annotation which serves_as a qualifier for direct use and also as a meta annotation._@param qualifierType the annotation type to register;public void addQualifierType(Class<? extends Annotation> qualifierType) {_		this.qualifierTypes.add(qualifierType)__	};register,the,given,type,to,be,used,as,a,qualifier,when,autowiring,p,this,identifies,qualifier,annotations,for,direct,use,on,fields,method,parameters,and,constructor,parameters,as,well,as,meta,annotations,that,in,turn,identify,actual,qualifier,annotations,p,this,implementation,only,supports,annotations,as,qualifier,types,the,default,is,spring,s,link,qualifier,annotation,which,serves,as,a,qualifier,for,direct,use,and,also,as,a,meta,annotation,param,qualifier,type,the,annotation,type,to,register;public,void,add,qualifier,type,class,extends,annotation,qualifier,type,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> public void addQualifierType(Class<? extends Annotation> qualifierType);1493811736;Register the given type to be used as a qualifier when autowiring._<p>This identifies qualifier annotations for direct use (on fields,_method parameters and constructor parameters) as well as meta_annotations that in turn identify actual qualifier annotations._<p>This implementation only supports annotations as qualifier types._The default is Spring's {@link Qualifier} annotation which serves_as a qualifier for direct use and also as a meta annotation._@param qualifierType the annotation type to register;public void addQualifierType(Class<? extends Annotation> qualifierType) {_		this.qualifierTypes.add(qualifierType)__	};register,the,given,type,to,be,used,as,a,qualifier,when,autowiring,p,this,identifies,qualifier,annotations,for,direct,use,on,fields,method,parameters,and,constructor,parameters,as,well,as,meta,annotations,that,in,turn,identify,actual,qualifier,annotations,p,this,implementation,only,supports,annotations,as,qualifier,types,the,default,is,spring,s,link,qualifier,annotation,which,serves,as,a,qualifier,for,direct,use,and,also,as,a,meta,annotation,param,qualifier,type,the,annotation,type,to,register;public,void,add,qualifier,type,class,extends,annotation,qualifier,type,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> public void addQualifierType(Class<? extends Annotation> qualifierType);1495868221;Register the given type to be used as a qualifier when autowiring._<p>This identifies qualifier annotations for direct use (on fields,_method parameters and constructor parameters) as well as meta_annotations that in turn identify actual qualifier annotations._<p>This implementation only supports annotations as qualifier types._The default is Spring's {@link Qualifier} annotation which serves_as a qualifier for direct use and also as a meta annotation._@param qualifierType the annotation type to register;public void addQualifierType(Class<? extends Annotation> qualifierType) {_		this.qualifierTypes.add(qualifierType)__	};register,the,given,type,to,be,used,as,a,qualifier,when,autowiring,p,this,identifies,qualifier,annotations,for,direct,use,on,fields,method,parameters,and,constructor,parameters,as,well,as,meta,annotations,that,in,turn,identify,actual,qualifier,annotations,p,this,implementation,only,supports,annotations,as,qualifier,types,the,default,is,spring,s,link,qualifier,annotation,which,serves,as,a,qualifier,for,direct,use,and,also,as,a,meta,annotation,param,qualifier,type,the,annotation,type,to,register;public,void,add,qualifier,type,class,extends,annotation,qualifier,type,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> public void addQualifierType(Class<? extends Annotation> qualifierType);1496837955;Register the given type to be used as a qualifier when autowiring._<p>This identifies qualifier annotations for direct use (on fields,_method parameters and constructor parameters) as well as meta_annotations that in turn identify actual qualifier annotations._<p>This implementation only supports annotations as qualifier types._The default is Spring's {@link Qualifier} annotation which serves_as a qualifier for direct use and also as a meta annotation._@param qualifierType the annotation type to register;public void addQualifierType(Class<? extends Annotation> qualifierType) {_		this.qualifierTypes.add(qualifierType)__	};register,the,given,type,to,be,used,as,a,qualifier,when,autowiring,p,this,identifies,qualifier,annotations,for,direct,use,on,fields,method,parameters,and,constructor,parameters,as,well,as,meta,annotations,that,in,turn,identify,actual,qualifier,annotations,p,this,implementation,only,supports,annotations,as,qualifier,types,the,default,is,spring,s,link,qualifier,annotation,which,serves,as,a,qualifier,for,direct,use,and,also,as,a,meta,annotation,param,qualifier,type,the,annotation,type,to,register;public,void,add,qualifier,type,class,extends,annotation,qualifier,type,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> public void addQualifierType(Class<? extends Annotation> qualifierType);1502974979;Register the given type to be used as a qualifier when autowiring._<p>This identifies qualifier annotations for direct use (on fields,_method parameters and constructor parameters) as well as meta_annotations that in turn identify actual qualifier annotations._<p>This implementation only supports annotations as qualifier types._The default is Spring's {@link Qualifier} annotation which serves_as a qualifier for direct use and also as a meta annotation._@param qualifierType the annotation type to register;public void addQualifierType(Class<? extends Annotation> qualifierType) {_		this.qualifierTypes.add(qualifierType)__	};register,the,given,type,to,be,used,as,a,qualifier,when,autowiring,p,this,identifies,qualifier,annotations,for,direct,use,on,fields,method,parameters,and,constructor,parameters,as,well,as,meta,annotations,that,in,turn,identify,actual,qualifier,annotations,p,this,implementation,only,supports,annotations,as,qualifier,types,the,default,is,spring,s,link,qualifier,annotation,which,serves,as,a,qualifier,for,direct,use,and,also,as,a,meta,annotation,param,qualifier,type,the,annotation,type,to,register;public,void,add,qualifier,type,class,extends,annotation,qualifier,type,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> public void addQualifierType(Class<? extends Annotation> qualifierType);1534347014;Register the given type to be used as a qualifier when autowiring._<p>This identifies qualifier annotations for direct use (on fields,_method parameters and constructor parameters) as well as meta_annotations that in turn identify actual qualifier annotations._<p>This implementation only supports annotations as qualifier types._The default is Spring's {@link Qualifier} annotation which serves_as a qualifier for direct use and also as a meta annotation._@param qualifierType the annotation type to register;public void addQualifierType(Class<? extends Annotation> qualifierType) {_		this.qualifierTypes.add(qualifierType)__	};register,the,given,type,to,be,used,as,a,qualifier,when,autowiring,p,this,identifies,qualifier,annotations,for,direct,use,on,fields,method,parameters,and,constructor,parameters,as,well,as,meta,annotations,that,in,turn,identify,actual,qualifier,annotations,p,this,implementation,only,supports,annotations,as,qualifier,types,the,default,is,spring,s,link,qualifier,annotation,which,serves,as,a,qualifier,for,direct,use,and,also,as,a,meta,annotation,param,qualifier,type,the,annotation,type,to,register;public,void,add,qualifier,type,class,extends,annotation,qualifier,type,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> public void addQualifierType(Class<? extends Annotation> qualifierType);1536855799;Register the given type to be used as a qualifier when autowiring._<p>This identifies qualifier annotations for direct use (on fields,_method parameters and constructor parameters) as well as meta_annotations that in turn identify actual qualifier annotations._<p>This implementation only supports annotations as qualifier types._The default is Spring's {@link Qualifier} annotation which serves_as a qualifier for direct use and also as a meta annotation._@param qualifierType the annotation type to register;public void addQualifierType(Class<? extends Annotation> qualifierType) {_		this.qualifierTypes.add(qualifierType)__	};register,the,given,type,to,be,used,as,a,qualifier,when,autowiring,p,this,identifies,qualifier,annotations,for,direct,use,on,fields,method,parameters,and,constructor,parameters,as,well,as,meta,annotations,that,in,turn,identify,actual,qualifier,annotations,p,this,implementation,only,supports,annotations,as,qualifier,types,the,default,is,spring,s,link,qualifier,annotation,which,serves,as,a,qualifier,for,direct,use,and,also,as,a,meta,annotation,param,qualifier,type,the,annotation,type,to,register;public,void,add,qualifier,type,class,extends,annotation,qualifier,type,this,qualifier,types,add,qualifier,type
QualifierAnnotationAutowireCandidateResolver -> protected boolean isQualifier(Class<? extends Annotation> annotationType);1328020251;Checks whether the given annotation type is a recognized qualifier type.;protected boolean isQualifier(Class<? extends Annotation> annotationType) {_		for (Class<? extends Annotation> qualifierType : this.qualifierTypes) {_			if (annotationType.equals(qualifierType) || annotationType.isAnnotationPresent(qualifierType)) {_				return true__			}_		}_		return false__	};checks,whether,the,given,annotation,type,is,a,recognized,qualifier,type;protected,boolean,is,qualifier,class,extends,annotation,annotation,type,for,class,extends,annotation,qualifier,type,this,qualifier,types,if,annotation,type,equals,qualifier,type,annotation,type,is,annotation,present,qualifier,type,return,true,return,false
QualifierAnnotationAutowireCandidateResolver -> protected boolean isQualifier(Class<? extends Annotation> annotationType);1351681817;Checks whether the given annotation type is a recognized qualifier type.;protected boolean isQualifier(Class<? extends Annotation> annotationType) {_		for (Class<? extends Annotation> qualifierType : this.qualifierTypes) {_			if (annotationType.equals(qualifierType) || annotationType.isAnnotationPresent(qualifierType)) {_				return true__			}_		}_		return false__	};checks,whether,the,given,annotation,type,is,a,recognized,qualifier,type;protected,boolean,is,qualifier,class,extends,annotation,annotation,type,for,class,extends,annotation,qualifier,type,this,qualifier,types,if,annotation,type,equals,qualifier,type,annotation,type,is,annotation,present,qualifier,type,return,true,return,false
QualifierAnnotationAutowireCandidateResolver -> protected boolean isQualifier(Class<? extends Annotation> annotationType);1356735495;Checks whether the given annotation type is a recognized qualifier type.;protected boolean isQualifier(Class<? extends Annotation> annotationType) {_		for (Class<? extends Annotation> qualifierType : this.qualifierTypes) {_			if (annotationType.equals(qualifierType) || annotationType.isAnnotationPresent(qualifierType)) {_				return true__			}_		}_		return false__	};checks,whether,the,given,annotation,type,is,a,recognized,qualifier,type;protected,boolean,is,qualifier,class,extends,annotation,annotation,type,for,class,extends,annotation,qualifier,type,this,qualifier,types,if,annotation,type,equals,qualifier,type,annotation,type,is,annotation,present,qualifier,type,return,true,return,false
QualifierAnnotationAutowireCandidateResolver -> protected boolean isQualifier(Class<? extends Annotation> annotationType);1357119239;Checks whether the given annotation type is a recognized qualifier type.;protected boolean isQualifier(Class<? extends Annotation> annotationType) {_		for (Class<? extends Annotation> qualifierType : this.qualifierTypes) {_			if (annotationType.equals(qualifierType) || annotationType.isAnnotationPresent(qualifierType)) {_				return true__			}_		}_		return false__	};checks,whether,the,given,annotation,type,is,a,recognized,qualifier,type;protected,boolean,is,qualifier,class,extends,annotation,annotation,type,for,class,extends,annotation,qualifier,type,this,qualifier,types,if,annotation,type,equals,qualifier,type,annotation,type,is,annotation,present,qualifier,type,return,true,return,false
QualifierAnnotationAutowireCandidateResolver -> protected boolean isQualifier(Class<? extends Annotation> annotationType);1368482696;Checks whether the given annotation type is a recognized qualifier type.;protected boolean isQualifier(Class<? extends Annotation> annotationType) {_		for (Class<? extends Annotation> qualifierType : this.qualifierTypes) {_			if (annotationType.equals(qualifierType) || annotationType.isAnnotationPresent(qualifierType)) {_				return true__			}_		}_		return false__	};checks,whether,the,given,annotation,type,is,a,recognized,qualifier,type;protected,boolean,is,qualifier,class,extends,annotation,annotation,type,for,class,extends,annotation,qualifier,type,this,qualifier,types,if,annotation,type,equals,qualifier,type,annotation,type,is,annotation,present,qualifier,type,return,true,return,false
QualifierAnnotationAutowireCandidateResolver -> protected boolean isQualifier(Class<? extends Annotation> annotationType);1377641679;Checks whether the given annotation type is a recognized qualifier type.;protected boolean isQualifier(Class<? extends Annotation> annotationType) {_		for (Class<? extends Annotation> qualifierType : this.qualifierTypes) {_			if (annotationType.equals(qualifierType) || annotationType.isAnnotationPresent(qualifierType)) {_				return true__			}_		}_		return false__	};checks,whether,the,given,annotation,type,is,a,recognized,qualifier,type;protected,boolean,is,qualifier,class,extends,annotation,annotation,type,for,class,extends,annotation,qualifier,type,this,qualifier,types,if,annotation,type,equals,qualifier,type,annotation,type,is,annotation,present,qualifier,type,return,true,return,false
QualifierAnnotationAutowireCandidateResolver -> protected boolean isQualifier(Class<? extends Annotation> annotationType);1381788683;Checks whether the given annotation type is a recognized qualifier type.;protected boolean isQualifier(Class<? extends Annotation> annotationType) {_		for (Class<? extends Annotation> qualifierType : this.qualifierTypes) {_			if (annotationType.equals(qualifierType) || annotationType.isAnnotationPresent(qualifierType)) {_				return true__			}_		}_		return false__	};checks,whether,the,given,annotation,type,is,a,recognized,qualifier,type;protected,boolean,is,qualifier,class,extends,annotation,annotation,type,for,class,extends,annotation,qualifier,type,this,qualifier,types,if,annotation,type,equals,qualifier,type,annotation,type,is,annotation,present,qualifier,type,return,true,return,false
QualifierAnnotationAutowireCandidateResolver -> protected boolean isQualifier(Class<? extends Annotation> annotationType);1382826936;Checks whether the given annotation type is a recognized qualifier type.;protected boolean isQualifier(Class<? extends Annotation> annotationType) {_		for (Class<? extends Annotation> qualifierType : this.qualifierTypes) {_			if (annotationType.equals(qualifierType) || annotationType.isAnnotationPresent(qualifierType)) {_				return true__			}_		}_		return false__	};checks,whether,the,given,annotation,type,is,a,recognized,qualifier,type;protected,boolean,is,qualifier,class,extends,annotation,annotation,type,for,class,extends,annotation,qualifier,type,this,qualifier,types,if,annotation,type,equals,qualifier,type,annotation,type,is,annotation,present,qualifier,type,return,true,return,false
QualifierAnnotationAutowireCandidateResolver -> protected boolean isQualifier(Class<? extends Annotation> annotationType);1386541456;Checks whether the given annotation type is a recognized qualifier type.;protected boolean isQualifier(Class<? extends Annotation> annotationType) {_		for (Class<? extends Annotation> qualifierType : this.qualifierTypes) {_			if (annotationType.equals(qualifierType) || annotationType.isAnnotationPresent(qualifierType)) {_				return true__			}_		}_		return false__	};checks,whether,the,given,annotation,type,is,a,recognized,qualifier,type;protected,boolean,is,qualifier,class,extends,annotation,annotation,type,for,class,extends,annotation,qualifier,type,this,qualifier,types,if,annotation,type,equals,qualifier,type,annotation,type,is,annotation,present,qualifier,type,return,true,return,false
QualifierAnnotationAutowireCandidateResolver -> protected boolean isQualifier(Class<? extends Annotation> annotationType);1398638841;Checks whether the given annotation type is a recognized qualifier type.;protected boolean isQualifier(Class<? extends Annotation> annotationType) {_		for (Class<? extends Annotation> qualifierType : this.qualifierTypes) {_			if (annotationType.equals(qualifierType) || annotationType.isAnnotationPresent(qualifierType)) {_				return true__			}_		}_		return false__	};checks,whether,the,given,annotation,type,is,a,recognized,qualifier,type;protected,boolean,is,qualifier,class,extends,annotation,annotation,type,for,class,extends,annotation,qualifier,type,this,qualifier,types,if,annotation,type,equals,qualifier,type,annotation,type,is,annotation,present,qualifier,type,return,true,return,false
QualifierAnnotationAutowireCandidateResolver -> protected boolean isQualifier(Class<? extends Annotation> annotationType);1413990280;Checks whether the given annotation type is a recognized qualifier type.;protected boolean isQualifier(Class<? extends Annotation> annotationType) {_		for (Class<? extends Annotation> qualifierType : this.qualifierTypes) {_			if (annotationType.equals(qualifierType) || annotationType.isAnnotationPresent(qualifierType)) {_				return true__			}_		}_		return false__	};checks,whether,the,given,annotation,type,is,a,recognized,qualifier,type;protected,boolean,is,qualifier,class,extends,annotation,annotation,type,for,class,extends,annotation,qualifier,type,this,qualifier,types,if,annotation,type,equals,qualifier,type,annotation,type,is,annotation,present,qualifier,type,return,true,return,false
QualifierAnnotationAutowireCandidateResolver -> protected boolean isQualifier(Class<? extends Annotation> annotationType);1432125256;Checks whether the given annotation type is a recognized qualifier type.;protected boolean isQualifier(Class<? extends Annotation> annotationType) {_		for (Class<? extends Annotation> qualifierType : this.qualifierTypes) {_			if (annotationType.equals(qualifierType) || annotationType.isAnnotationPresent(qualifierType)) {_				return true__			}_		}_		return false__	};checks,whether,the,given,annotation,type,is,a,recognized,qualifier,type;protected,boolean,is,qualifier,class,extends,annotation,annotation,type,for,class,extends,annotation,qualifier,type,this,qualifier,types,if,annotation,type,equals,qualifier,type,annotation,type,is,annotation,present,qualifier,type,return,true,return,false
QualifierAnnotationAutowireCandidateResolver -> protected boolean isQualifier(Class<? extends Annotation> annotationType);1451408536;Checks whether the given annotation type is a recognized qualifier type.;protected boolean isQualifier(Class<? extends Annotation> annotationType) {_		for (Class<? extends Annotation> qualifierType : this.qualifierTypes) {_			if (annotationType.equals(qualifierType) || annotationType.isAnnotationPresent(qualifierType)) {_				return true__			}_		}_		return false__	};checks,whether,the,given,annotation,type,is,a,recognized,qualifier,type;protected,boolean,is,qualifier,class,extends,annotation,annotation,type,for,class,extends,annotation,qualifier,type,this,qualifier,types,if,annotation,type,equals,qualifier,type,annotation,type,is,annotation,present,qualifier,type,return,true,return,false
QualifierAnnotationAutowireCandidateResolver -> protected boolean isQualifier(Class<? extends Annotation> annotationType);1467730834;Checks whether the given annotation type is a recognized qualifier type.;protected boolean isQualifier(Class<? extends Annotation> annotationType) {_		for (Class<? extends Annotation> qualifierType : this.qualifierTypes) {_			if (annotationType.equals(qualifierType) || annotationType.isAnnotationPresent(qualifierType)) {_				return true__			}_		}_		return false__	};checks,whether,the,given,annotation,type,is,a,recognized,qualifier,type;protected,boolean,is,qualifier,class,extends,annotation,annotation,type,for,class,extends,annotation,qualifier,type,this,qualifier,types,if,annotation,type,equals,qualifier,type,annotation,type,is,annotation,present,qualifier,type,return,true,return,false
QualifierAnnotationAutowireCandidateResolver -> protected boolean isQualifier(Class<? extends Annotation> annotationType);1474010431;Checks whether the given annotation type is a recognized qualifier type.;protected boolean isQualifier(Class<? extends Annotation> annotationType) {_		for (Class<? extends Annotation> qualifierType : this.qualifierTypes) {_			if (annotationType.equals(qualifierType) || annotationType.isAnnotationPresent(qualifierType)) {_				return true__			}_		}_		return false__	};checks,whether,the,given,annotation,type,is,a,recognized,qualifier,type;protected,boolean,is,qualifier,class,extends,annotation,annotation,type,for,class,extends,annotation,qualifier,type,this,qualifier,types,if,annotation,type,equals,qualifier,type,annotation,type,is,annotation,present,qualifier,type,return,true,return,false
QualifierAnnotationAutowireCandidateResolver -> protected boolean isQualifier(Class<? extends Annotation> annotationType);1493811736;Checks whether the given annotation type is a recognized qualifier type.;protected boolean isQualifier(Class<? extends Annotation> annotationType) {_		for (Class<? extends Annotation> qualifierType : this.qualifierTypes) {_			if (annotationType.equals(qualifierType) || annotationType.isAnnotationPresent(qualifierType)) {_				return true__			}_		}_		return false__	};checks,whether,the,given,annotation,type,is,a,recognized,qualifier,type;protected,boolean,is,qualifier,class,extends,annotation,annotation,type,for,class,extends,annotation,qualifier,type,this,qualifier,types,if,annotation,type,equals,qualifier,type,annotation,type,is,annotation,present,qualifier,type,return,true,return,false
QualifierAnnotationAutowireCandidateResolver -> protected boolean isQualifier(Class<? extends Annotation> annotationType);1495868221;Checks whether the given annotation type is a recognized qualifier type.;protected boolean isQualifier(Class<? extends Annotation> annotationType) {_		for (Class<? extends Annotation> qualifierType : this.qualifierTypes) {_			if (annotationType.equals(qualifierType) || annotationType.isAnnotationPresent(qualifierType)) {_				return true__			}_		}_		return false__	};checks,whether,the,given,annotation,type,is,a,recognized,qualifier,type;protected,boolean,is,qualifier,class,extends,annotation,annotation,type,for,class,extends,annotation,qualifier,type,this,qualifier,types,if,annotation,type,equals,qualifier,type,annotation,type,is,annotation,present,qualifier,type,return,true,return,false
QualifierAnnotationAutowireCandidateResolver -> protected boolean isQualifier(Class<? extends Annotation> annotationType);1496837955;Checks whether the given annotation type is a recognized qualifier type.;protected boolean isQualifier(Class<? extends Annotation> annotationType) {_		for (Class<? extends Annotation> qualifierType : this.qualifierTypes) {_			if (annotationType.equals(qualifierType) || annotationType.isAnnotationPresent(qualifierType)) {_				return true__			}_		}_		return false__	};checks,whether,the,given,annotation,type,is,a,recognized,qualifier,type;protected,boolean,is,qualifier,class,extends,annotation,annotation,type,for,class,extends,annotation,qualifier,type,this,qualifier,types,if,annotation,type,equals,qualifier,type,annotation,type,is,annotation,present,qualifier,type,return,true,return,false
QualifierAnnotationAutowireCandidateResolver -> protected boolean isQualifier(Class<? extends Annotation> annotationType);1502974979;Checks whether the given annotation type is a recognized qualifier type.;protected boolean isQualifier(Class<? extends Annotation> annotationType) {_		for (Class<? extends Annotation> qualifierType : this.qualifierTypes) {_			if (annotationType.equals(qualifierType) || annotationType.isAnnotationPresent(qualifierType)) {_				return true__			}_		}_		return false__	};checks,whether,the,given,annotation,type,is,a,recognized,qualifier,type;protected,boolean,is,qualifier,class,extends,annotation,annotation,type,for,class,extends,annotation,qualifier,type,this,qualifier,types,if,annotation,type,equals,qualifier,type,annotation,type,is,annotation,present,qualifier,type,return,true,return,false
QualifierAnnotationAutowireCandidateResolver -> protected boolean isQualifier(Class<? extends Annotation> annotationType);1534347014;Checks whether the given annotation type is a recognized qualifier type.;protected boolean isQualifier(Class<? extends Annotation> annotationType) {_		for (Class<? extends Annotation> qualifierType : this.qualifierTypes) {_			if (annotationType.equals(qualifierType) || annotationType.isAnnotationPresent(qualifierType)) {_				return true__			}_		}_		return false__	};checks,whether,the,given,annotation,type,is,a,recognized,qualifier,type;protected,boolean,is,qualifier,class,extends,annotation,annotation,type,for,class,extends,annotation,qualifier,type,this,qualifier,types,if,annotation,type,equals,qualifier,type,annotation,type,is,annotation,present,qualifier,type,return,true,return,false
QualifierAnnotationAutowireCandidateResolver -> protected boolean isQualifier(Class<? extends Annotation> annotationType);1536855799;Checks whether the given annotation type is a recognized qualifier type.;protected boolean isQualifier(Class<? extends Annotation> annotationType) {_		for (Class<? extends Annotation> qualifierType : this.qualifierTypes) {_			if (annotationType.equals(qualifierType) || annotationType.isAnnotationPresent(qualifierType)) {_				return true__			}_		}_		return false__	};checks,whether,the,given,annotation,type,is,a,recognized,qualifier,type;protected,boolean,is,qualifier,class,extends,annotation,annotation,type,for,class,extends,annotation,qualifier,type,this,qualifier,types,if,annotation,type,equals,qualifier,type,annotation,type,is,annotation,present,qualifier,type,return,true,return,false
QualifierAnnotationAutowireCandidateResolver -> @Override 	@Nullable 	public Object getSuggestedValue(DependencyDescriptor descriptor);1502974979;Determine whether the given dependency declares a value annotation._@see Value;@Override_	@Nullable_	public Object getSuggestedValue(DependencyDescriptor descriptor) {_		Object value = findValue(descriptor.getAnnotations())__		if (value == null) {_			MethodParameter methodParam = descriptor.getMethodParameter()__			if (methodParam != null) {_				value = findValue(methodParam.getMethodAnnotations())__			}_		}_		return value__	};determine,whether,the,given,dependency,declares,a,value,annotation,see,value;override,nullable,public,object,get,suggested,value,dependency,descriptor,descriptor,object,value,find,value,descriptor,get,annotations,if,value,null,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,value,find,value,method,param,get,method,annotations,return,value
QualifierAnnotationAutowireCandidateResolver -> @Override 	@Nullable 	public Object getSuggestedValue(DependencyDescriptor descriptor);1534347014;Determine whether the given dependency declares a value annotation._@see Value;@Override_	@Nullable_	public Object getSuggestedValue(DependencyDescriptor descriptor) {_		Object value = findValue(descriptor.getAnnotations())__		if (value == null) {_			MethodParameter methodParam = descriptor.getMethodParameter()__			if (methodParam != null) {_				value = findValue(methodParam.getMethodAnnotations())__			}_		}_		return value__	};determine,whether,the,given,dependency,declares,a,value,annotation,see,value;override,nullable,public,object,get,suggested,value,dependency,descriptor,descriptor,object,value,find,value,descriptor,get,annotations,if,value,null,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,value,find,value,method,param,get,method,annotations,return,value
QualifierAnnotationAutowireCandidateResolver -> @Override 	@Nullable 	public Object getSuggestedValue(DependencyDescriptor descriptor);1536855799;Determine whether the given dependency declares a value annotation._@see Value;@Override_	@Nullable_	public Object getSuggestedValue(DependencyDescriptor descriptor) {_		Object value = findValue(descriptor.getAnnotations())__		if (value == null) {_			MethodParameter methodParam = descriptor.getMethodParameter()__			if (methodParam != null) {_				value = findValue(methodParam.getMethodAnnotations())__			}_		}_		return value__	};determine,whether,the,given,dependency,declares,a,value,annotation,see,value;override,nullable,public,object,get,suggested,value,dependency,descriptor,descriptor,object,value,find,value,descriptor,get,annotations,if,value,null,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,value,find,value,method,param,get,method,annotations,return,value
QualifierAnnotationAutowireCandidateResolver -> @SuppressWarnings("unchecked") 	public QualifierAnnotationAutowireCandidateResolver();1328020251;Create a new QualifierAnnotationAutowireCandidateResolver_for Spring's standard {@link Qualifier} annotation._<p>Also supports JSR-330's {@link javax.inject.Qualifier} annotation, if available.;@SuppressWarnings("unchecked")_	public QualifierAnnotationAutowireCandidateResolver() {_		this.qualifierTypes.add(Qualifier.class)__		ClassLoader cl = QualifierAnnotationAutowireCandidateResolver.class.getClassLoader()__		try {_			this.qualifierTypes.add((Class<? extends Annotation>) cl.loadClass("javax.inject.Qualifier"))__		}_		catch (ClassNotFoundException ex) {_			_		}_	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,spring,s,standard,link,qualifier,annotation,p,also,supports,jsr,330,s,link,javax,inject,qualifier,annotation,if,available;suppress,warnings,unchecked,public,qualifier,annotation,autowire,candidate,resolver,this,qualifier,types,add,qualifier,class,class,loader,cl,qualifier,annotation,autowire,candidate,resolver,class,get,class,loader,try,this,qualifier,types,add,class,extends,annotation,cl,load,class,javax,inject,qualifier,catch,class,not,found,exception,ex
QualifierAnnotationAutowireCandidateResolver -> @SuppressWarnings("unchecked") 	public QualifierAnnotationAutowireCandidateResolver();1351681817;Create a new QualifierAnnotationAutowireCandidateResolver_for Spring's standard {@link Qualifier} annotation._<p>Also supports JSR-330's {@link javax.inject.Qualifier} annotation, if available.;@SuppressWarnings("unchecked")_	public QualifierAnnotationAutowireCandidateResolver() {_		this.qualifierTypes.add(Qualifier.class)__		ClassLoader cl = QualifierAnnotationAutowireCandidateResolver.class.getClassLoader()__		try {_			this.qualifierTypes.add((Class<? extends Annotation>) cl.loadClass("javax.inject.Qualifier"))__		}_		catch (ClassNotFoundException ex) {_			_		}_	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,spring,s,standard,link,qualifier,annotation,p,also,supports,jsr,330,s,link,javax,inject,qualifier,annotation,if,available;suppress,warnings,unchecked,public,qualifier,annotation,autowire,candidate,resolver,this,qualifier,types,add,qualifier,class,class,loader,cl,qualifier,annotation,autowire,candidate,resolver,class,get,class,loader,try,this,qualifier,types,add,class,extends,annotation,cl,load,class,javax,inject,qualifier,catch,class,not,found,exception,ex
QualifierAnnotationAutowireCandidateResolver -> @SuppressWarnings("unchecked") 	public QualifierAnnotationAutowireCandidateResolver();1356735495;Create a new QualifierAnnotationAutowireCandidateResolver_for Spring's standard {@link Qualifier} annotation._<p>Also supports JSR-330's {@link javax.inject.Qualifier} annotation, if available.;@SuppressWarnings("unchecked")_	public QualifierAnnotationAutowireCandidateResolver() {_		this.qualifierTypes.add(Qualifier.class)__		ClassLoader cl = QualifierAnnotationAutowireCandidateResolver.class.getClassLoader()__		try {_			this.qualifierTypes.add((Class<? extends Annotation>) cl.loadClass("javax.inject.Qualifier"))__		}_		catch (ClassNotFoundException ex) {_			_		}_	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,spring,s,standard,link,qualifier,annotation,p,also,supports,jsr,330,s,link,javax,inject,qualifier,annotation,if,available;suppress,warnings,unchecked,public,qualifier,annotation,autowire,candidate,resolver,this,qualifier,types,add,qualifier,class,class,loader,cl,qualifier,annotation,autowire,candidate,resolver,class,get,class,loader,try,this,qualifier,types,add,class,extends,annotation,cl,load,class,javax,inject,qualifier,catch,class,not,found,exception,ex
QualifierAnnotationAutowireCandidateResolver -> @SuppressWarnings("unchecked") 	public QualifierAnnotationAutowireCandidateResolver();1357119239;Create a new QualifierAnnotationAutowireCandidateResolver_for Spring's standard {@link Qualifier} annotation._<p>Also supports JSR-330's {@link javax.inject.Qualifier} annotation, if available.;@SuppressWarnings("unchecked")_	public QualifierAnnotationAutowireCandidateResolver() {_		this.qualifierTypes.add(Qualifier.class)__		ClassLoader cl = QualifierAnnotationAutowireCandidateResolver.class.getClassLoader()__		try {_			this.qualifierTypes.add((Class<? extends Annotation>) cl.loadClass("javax.inject.Qualifier"))__		}_		catch (ClassNotFoundException ex) {_			_		}_	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,spring,s,standard,link,qualifier,annotation,p,also,supports,jsr,330,s,link,javax,inject,qualifier,annotation,if,available;suppress,warnings,unchecked,public,qualifier,annotation,autowire,candidate,resolver,this,qualifier,types,add,qualifier,class,class,loader,cl,qualifier,annotation,autowire,candidate,resolver,class,get,class,loader,try,this,qualifier,types,add,class,extends,annotation,cl,load,class,javax,inject,qualifier,catch,class,not,found,exception,ex
QualifierAnnotationAutowireCandidateResolver -> @SuppressWarnings("unchecked") 	public QualifierAnnotationAutowireCandidateResolver();1368482696;Create a new QualifierAnnotationAutowireCandidateResolver_for Spring's standard {@link Qualifier} annotation._<p>Also supports JSR-330's {@link javax.inject.Qualifier} annotation, if available.;@SuppressWarnings("unchecked")_	public QualifierAnnotationAutowireCandidateResolver() {_		this.qualifierTypes.add(Qualifier.class)__		ClassLoader cl = QualifierAnnotationAutowireCandidateResolver.class.getClassLoader()__		try {_			this.qualifierTypes.add((Class<? extends Annotation>) cl.loadClass("javax.inject.Qualifier"))__		}_		catch (ClassNotFoundException ex) {_			_		}_	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,spring,s,standard,link,qualifier,annotation,p,also,supports,jsr,330,s,link,javax,inject,qualifier,annotation,if,available;suppress,warnings,unchecked,public,qualifier,annotation,autowire,candidate,resolver,this,qualifier,types,add,qualifier,class,class,loader,cl,qualifier,annotation,autowire,candidate,resolver,class,get,class,loader,try,this,qualifier,types,add,class,extends,annotation,cl,load,class,javax,inject,qualifier,catch,class,not,found,exception,ex
QualifierAnnotationAutowireCandidateResolver -> @SuppressWarnings("unchecked") 	public QualifierAnnotationAutowireCandidateResolver();1377641679;Create a new QualifierAnnotationAutowireCandidateResolver_for Spring's standard {@link Qualifier} annotation._<p>Also supports JSR-330's {@link javax.inject.Qualifier} annotation, if available.;@SuppressWarnings("unchecked")_	public QualifierAnnotationAutowireCandidateResolver() {_		this.qualifierTypes.add(Qualifier.class)__		ClassLoader cl = QualifierAnnotationAutowireCandidateResolver.class.getClassLoader()__		try {_			this.qualifierTypes.add((Class<? extends Annotation>) cl.loadClass("javax.inject.Qualifier"))__		}_		catch (ClassNotFoundException ex) {_			_		}_	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,spring,s,standard,link,qualifier,annotation,p,also,supports,jsr,330,s,link,javax,inject,qualifier,annotation,if,available;suppress,warnings,unchecked,public,qualifier,annotation,autowire,candidate,resolver,this,qualifier,types,add,qualifier,class,class,loader,cl,qualifier,annotation,autowire,candidate,resolver,class,get,class,loader,try,this,qualifier,types,add,class,extends,annotation,cl,load,class,javax,inject,qualifier,catch,class,not,found,exception,ex
QualifierAnnotationAutowireCandidateResolver -> @SuppressWarnings("unchecked") 	public QualifierAnnotationAutowireCandidateResolver();1381788683;Create a new QualifierAnnotationAutowireCandidateResolver_for Spring's standard {@link Qualifier} annotation._<p>Also supports JSR-330's {@link javax.inject.Qualifier} annotation, if available.;@SuppressWarnings("unchecked")_	public QualifierAnnotationAutowireCandidateResolver() {_		this.qualifierTypes.add(Qualifier.class)__		ClassLoader cl = QualifierAnnotationAutowireCandidateResolver.class.getClassLoader()__		try {_			this.qualifierTypes.add((Class<? extends Annotation>) cl.loadClass("javax.inject.Qualifier"))__		}_		catch (ClassNotFoundException ex) {_			_		}_	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,spring,s,standard,link,qualifier,annotation,p,also,supports,jsr,330,s,link,javax,inject,qualifier,annotation,if,available;suppress,warnings,unchecked,public,qualifier,annotation,autowire,candidate,resolver,this,qualifier,types,add,qualifier,class,class,loader,cl,qualifier,annotation,autowire,candidate,resolver,class,get,class,loader,try,this,qualifier,types,add,class,extends,annotation,cl,load,class,javax,inject,qualifier,catch,class,not,found,exception,ex
QualifierAnnotationAutowireCandidateResolver -> @SuppressWarnings("unchecked") 	public QualifierAnnotationAutowireCandidateResolver();1382826936;Create a new QualifierAnnotationAutowireCandidateResolver_for Spring's standard {@link Qualifier} annotation._<p>Also supports JSR-330's {@link javax.inject.Qualifier} annotation, if available.;@SuppressWarnings("unchecked")_	public QualifierAnnotationAutowireCandidateResolver() {_		this.qualifierTypes.add(Qualifier.class)__		ClassLoader cl = QualifierAnnotationAutowireCandidateResolver.class.getClassLoader()__		try {_			this.qualifierTypes.add((Class<? extends Annotation>) cl.loadClass("javax.inject.Qualifier"))__		}_		catch (ClassNotFoundException ex) {_			_		}_	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,spring,s,standard,link,qualifier,annotation,p,also,supports,jsr,330,s,link,javax,inject,qualifier,annotation,if,available;suppress,warnings,unchecked,public,qualifier,annotation,autowire,candidate,resolver,this,qualifier,types,add,qualifier,class,class,loader,cl,qualifier,annotation,autowire,candidate,resolver,class,get,class,loader,try,this,qualifier,types,add,class,extends,annotation,cl,load,class,javax,inject,qualifier,catch,class,not,found,exception,ex
QualifierAnnotationAutowireCandidateResolver -> @SuppressWarnings("unchecked") 	public QualifierAnnotationAutowireCandidateResolver();1386541456;Create a new QualifierAnnotationAutowireCandidateResolver_for Spring's standard {@link Qualifier} annotation._<p>Also supports JSR-330's {@link javax.inject.Qualifier} annotation, if available.;@SuppressWarnings("unchecked")_	public QualifierAnnotationAutowireCandidateResolver() {_		this.qualifierTypes.add(Qualifier.class)__		ClassLoader cl = QualifierAnnotationAutowireCandidateResolver.class.getClassLoader()__		try {_			this.qualifierTypes.add((Class<? extends Annotation>) cl.loadClass("javax.inject.Qualifier"))__		}_		catch (ClassNotFoundException ex) {_			_		}_	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,spring,s,standard,link,qualifier,annotation,p,also,supports,jsr,330,s,link,javax,inject,qualifier,annotation,if,available;suppress,warnings,unchecked,public,qualifier,annotation,autowire,candidate,resolver,this,qualifier,types,add,qualifier,class,class,loader,cl,qualifier,annotation,autowire,candidate,resolver,class,get,class,loader,try,this,qualifier,types,add,class,extends,annotation,cl,load,class,javax,inject,qualifier,catch,class,not,found,exception,ex
QualifierAnnotationAutowireCandidateResolver -> @SuppressWarnings("unchecked") 	public QualifierAnnotationAutowireCandidateResolver();1398638841;Create a new QualifierAnnotationAutowireCandidateResolver_for Spring's standard {@link Qualifier} annotation._<p>Also supports JSR-330's {@link javax.inject.Qualifier} annotation, if available.;@SuppressWarnings("unchecked")_	public QualifierAnnotationAutowireCandidateResolver() {_		this.qualifierTypes.add(Qualifier.class)__		try {_			this.qualifierTypes.add((Class<? extends Annotation>)_					ClassUtils.forName("javax.inject.Qualifier", QualifierAnnotationAutowireCandidateResolver.class.getClassLoader()))__		}_		catch (ClassNotFoundException ex) {_			_		}_	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,spring,s,standard,link,qualifier,annotation,p,also,supports,jsr,330,s,link,javax,inject,qualifier,annotation,if,available;suppress,warnings,unchecked,public,qualifier,annotation,autowire,candidate,resolver,this,qualifier,types,add,qualifier,class,try,this,qualifier,types,add,class,extends,annotation,class,utils,for,name,javax,inject,qualifier,qualifier,annotation,autowire,candidate,resolver,class,get,class,loader,catch,class,not,found,exception,ex
QualifierAnnotationAutowireCandidateResolver -> @SuppressWarnings("unchecked") 	public QualifierAnnotationAutowireCandidateResolver();1413990280;Create a new QualifierAnnotationAutowireCandidateResolver_for Spring's standard {@link Qualifier} annotation._<p>Also supports JSR-330's {@link javax.inject.Qualifier} annotation, if available.;@SuppressWarnings("unchecked")_	public QualifierAnnotationAutowireCandidateResolver() {_		this.qualifierTypes.add(Qualifier.class)__		try {_			this.qualifierTypes.add((Class<? extends Annotation>) ClassUtils.forName("javax.inject.Qualifier",_							QualifierAnnotationAutowireCandidateResolver.class.getClassLoader()))__		}_		catch (ClassNotFoundException ex) {_			_		}_	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,spring,s,standard,link,qualifier,annotation,p,also,supports,jsr,330,s,link,javax,inject,qualifier,annotation,if,available;suppress,warnings,unchecked,public,qualifier,annotation,autowire,candidate,resolver,this,qualifier,types,add,qualifier,class,try,this,qualifier,types,add,class,extends,annotation,class,utils,for,name,javax,inject,qualifier,qualifier,annotation,autowire,candidate,resolver,class,get,class,loader,catch,class,not,found,exception,ex
QualifierAnnotationAutowireCandidateResolver -> @SuppressWarnings("unchecked") 	public QualifierAnnotationAutowireCandidateResolver();1432125256;Create a new QualifierAnnotationAutowireCandidateResolver_for Spring's standard {@link Qualifier} annotation._<p>Also supports JSR-330's {@link javax.inject.Qualifier} annotation, if available.;@SuppressWarnings("unchecked")_	public QualifierAnnotationAutowireCandidateResolver() {_		this.qualifierTypes.add(Qualifier.class)__		try {_			this.qualifierTypes.add((Class<? extends Annotation>) ClassUtils.forName("javax.inject.Qualifier",_							QualifierAnnotationAutowireCandidateResolver.class.getClassLoader()))__		}_		catch (ClassNotFoundException ex) {_			_		}_	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,spring,s,standard,link,qualifier,annotation,p,also,supports,jsr,330,s,link,javax,inject,qualifier,annotation,if,available;suppress,warnings,unchecked,public,qualifier,annotation,autowire,candidate,resolver,this,qualifier,types,add,qualifier,class,try,this,qualifier,types,add,class,extends,annotation,class,utils,for,name,javax,inject,qualifier,qualifier,annotation,autowire,candidate,resolver,class,get,class,loader,catch,class,not,found,exception,ex
QualifierAnnotationAutowireCandidateResolver -> @SuppressWarnings("unchecked") 	public QualifierAnnotationAutowireCandidateResolver();1451408536;Create a new QualifierAnnotationAutowireCandidateResolver_for Spring's standard {@link Qualifier} annotation._<p>Also supports JSR-330's {@link javax.inject.Qualifier} annotation, if available.;@SuppressWarnings("unchecked")_	public QualifierAnnotationAutowireCandidateResolver() {_		this.qualifierTypes.add(Qualifier.class)__		try {_			this.qualifierTypes.add((Class<? extends Annotation>) ClassUtils.forName("javax.inject.Qualifier",_							QualifierAnnotationAutowireCandidateResolver.class.getClassLoader()))__		}_		catch (ClassNotFoundException ex) {_			_		}_	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,spring,s,standard,link,qualifier,annotation,p,also,supports,jsr,330,s,link,javax,inject,qualifier,annotation,if,available;suppress,warnings,unchecked,public,qualifier,annotation,autowire,candidate,resolver,this,qualifier,types,add,qualifier,class,try,this,qualifier,types,add,class,extends,annotation,class,utils,for,name,javax,inject,qualifier,qualifier,annotation,autowire,candidate,resolver,class,get,class,loader,catch,class,not,found,exception,ex
QualifierAnnotationAutowireCandidateResolver -> @SuppressWarnings("unchecked") 	public QualifierAnnotationAutowireCandidateResolver();1467730834;Create a new QualifierAnnotationAutowireCandidateResolver_for Spring's standard {@link Qualifier} annotation._<p>Also supports JSR-330's {@link javax.inject.Qualifier} annotation, if available.;@SuppressWarnings("unchecked")_	public QualifierAnnotationAutowireCandidateResolver() {_		this.qualifierTypes.add(Qualifier.class)__		try {_			this.qualifierTypes.add((Class<? extends Annotation>) ClassUtils.forName("javax.inject.Qualifier",_							QualifierAnnotationAutowireCandidateResolver.class.getClassLoader()))__		}_		catch (ClassNotFoundException ex) {_			_		}_	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,spring,s,standard,link,qualifier,annotation,p,also,supports,jsr,330,s,link,javax,inject,qualifier,annotation,if,available;suppress,warnings,unchecked,public,qualifier,annotation,autowire,candidate,resolver,this,qualifier,types,add,qualifier,class,try,this,qualifier,types,add,class,extends,annotation,class,utils,for,name,javax,inject,qualifier,qualifier,annotation,autowire,candidate,resolver,class,get,class,loader,catch,class,not,found,exception,ex
QualifierAnnotationAutowireCandidateResolver -> @SuppressWarnings("unchecked") 	public QualifierAnnotationAutowireCandidateResolver();1474010431;Create a new QualifierAnnotationAutowireCandidateResolver_for Spring's standard {@link Qualifier} annotation._<p>Also supports JSR-330's {@link javax.inject.Qualifier} annotation, if available.;@SuppressWarnings("unchecked")_	public QualifierAnnotationAutowireCandidateResolver() {_		this.qualifierTypes.add(Qualifier.class)__		try {_			this.qualifierTypes.add((Class<? extends Annotation>) ClassUtils.forName("javax.inject.Qualifier",_							QualifierAnnotationAutowireCandidateResolver.class.getClassLoader()))__		}_		catch (ClassNotFoundException ex) {_			_		}_	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,spring,s,standard,link,qualifier,annotation,p,also,supports,jsr,330,s,link,javax,inject,qualifier,annotation,if,available;suppress,warnings,unchecked,public,qualifier,annotation,autowire,candidate,resolver,this,qualifier,types,add,qualifier,class,try,this,qualifier,types,add,class,extends,annotation,class,utils,for,name,javax,inject,qualifier,qualifier,annotation,autowire,candidate,resolver,class,get,class,loader,catch,class,not,found,exception,ex
QualifierAnnotationAutowireCandidateResolver -> @SuppressWarnings("unchecked") 	public QualifierAnnotationAutowireCandidateResolver();1493811736;Create a new QualifierAnnotationAutowireCandidateResolver_for Spring's standard {@link Qualifier} annotation._<p>Also supports JSR-330's {@link javax.inject.Qualifier} annotation, if available.;@SuppressWarnings("unchecked")_	public QualifierAnnotationAutowireCandidateResolver() {_		this.qualifierTypes.add(Qualifier.class)__		try {_			this.qualifierTypes.add((Class<? extends Annotation>) ClassUtils.forName("javax.inject.Qualifier",_							QualifierAnnotationAutowireCandidateResolver.class.getClassLoader()))__		}_		catch (ClassNotFoundException ex) {_			_		}_	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,spring,s,standard,link,qualifier,annotation,p,also,supports,jsr,330,s,link,javax,inject,qualifier,annotation,if,available;suppress,warnings,unchecked,public,qualifier,annotation,autowire,candidate,resolver,this,qualifier,types,add,qualifier,class,try,this,qualifier,types,add,class,extends,annotation,class,utils,for,name,javax,inject,qualifier,qualifier,annotation,autowire,candidate,resolver,class,get,class,loader,catch,class,not,found,exception,ex
QualifierAnnotationAutowireCandidateResolver -> @SuppressWarnings("unchecked") 	public QualifierAnnotationAutowireCandidateResolver();1495868221;Create a new QualifierAnnotationAutowireCandidateResolver_for Spring's standard {@link Qualifier} annotation._<p>Also supports JSR-330's {@link javax.inject.Qualifier} annotation, if available.;@SuppressWarnings("unchecked")_	public QualifierAnnotationAutowireCandidateResolver() {_		this.qualifierTypes.add(Qualifier.class)__		try {_			this.qualifierTypes.add((Class<? extends Annotation>) ClassUtils.forName("javax.inject.Qualifier",_							QualifierAnnotationAutowireCandidateResolver.class.getClassLoader()))__		}_		catch (ClassNotFoundException ex) {_			_		}_	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,spring,s,standard,link,qualifier,annotation,p,also,supports,jsr,330,s,link,javax,inject,qualifier,annotation,if,available;suppress,warnings,unchecked,public,qualifier,annotation,autowire,candidate,resolver,this,qualifier,types,add,qualifier,class,try,this,qualifier,types,add,class,extends,annotation,class,utils,for,name,javax,inject,qualifier,qualifier,annotation,autowire,candidate,resolver,class,get,class,loader,catch,class,not,found,exception,ex
QualifierAnnotationAutowireCandidateResolver -> @SuppressWarnings("unchecked") 	public QualifierAnnotationAutowireCandidateResolver();1496837955;Create a new QualifierAnnotationAutowireCandidateResolver_for Spring's standard {@link Qualifier} annotation._<p>Also supports JSR-330's {@link javax.inject.Qualifier} annotation, if available.;@SuppressWarnings("unchecked")_	public QualifierAnnotationAutowireCandidateResolver() {_		this.qualifierTypes.add(Qualifier.class)__		try {_			this.qualifierTypes.add((Class<? extends Annotation>) ClassUtils.forName("javax.inject.Qualifier",_							QualifierAnnotationAutowireCandidateResolver.class.getClassLoader()))__		}_		catch (ClassNotFoundException ex) {_			_		}_	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,spring,s,standard,link,qualifier,annotation,p,also,supports,jsr,330,s,link,javax,inject,qualifier,annotation,if,available;suppress,warnings,unchecked,public,qualifier,annotation,autowire,candidate,resolver,this,qualifier,types,add,qualifier,class,try,this,qualifier,types,add,class,extends,annotation,class,utils,for,name,javax,inject,qualifier,qualifier,annotation,autowire,candidate,resolver,class,get,class,loader,catch,class,not,found,exception,ex
QualifierAnnotationAutowireCandidateResolver -> @SuppressWarnings("unchecked") 	public QualifierAnnotationAutowireCandidateResolver();1502974979;Create a new QualifierAnnotationAutowireCandidateResolver_for Spring's standard {@link Qualifier} annotation._<p>Also supports JSR-330's {@link javax.inject.Qualifier} annotation, if available.;@SuppressWarnings("unchecked")_	public QualifierAnnotationAutowireCandidateResolver() {_		this.qualifierTypes.add(Qualifier.class)__		try {_			this.qualifierTypes.add((Class<? extends Annotation>) ClassUtils.forName("javax.inject.Qualifier",_							QualifierAnnotationAutowireCandidateResolver.class.getClassLoader()))__		}_		catch (ClassNotFoundException ex) {_			_		}_	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,spring,s,standard,link,qualifier,annotation,p,also,supports,jsr,330,s,link,javax,inject,qualifier,annotation,if,available;suppress,warnings,unchecked,public,qualifier,annotation,autowire,candidate,resolver,this,qualifier,types,add,qualifier,class,try,this,qualifier,types,add,class,extends,annotation,class,utils,for,name,javax,inject,qualifier,qualifier,annotation,autowire,candidate,resolver,class,get,class,loader,catch,class,not,found,exception,ex
QualifierAnnotationAutowireCandidateResolver -> @SuppressWarnings("unchecked") 	public QualifierAnnotationAutowireCandidateResolver();1534347014;Create a new QualifierAnnotationAutowireCandidateResolver_for Spring's standard {@link Qualifier} annotation._<p>Also supports JSR-330's {@link javax.inject.Qualifier} annotation, if available.;@SuppressWarnings("unchecked")_	public QualifierAnnotationAutowireCandidateResolver() {_		this.qualifierTypes.add(Qualifier.class)__		try {_			this.qualifierTypes.add((Class<? extends Annotation>) ClassUtils.forName("javax.inject.Qualifier",_							QualifierAnnotationAutowireCandidateResolver.class.getClassLoader()))__		}_		catch (ClassNotFoundException ex) {_			_		}_	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,spring,s,standard,link,qualifier,annotation,p,also,supports,jsr,330,s,link,javax,inject,qualifier,annotation,if,available;suppress,warnings,unchecked,public,qualifier,annotation,autowire,candidate,resolver,this,qualifier,types,add,qualifier,class,try,this,qualifier,types,add,class,extends,annotation,class,utils,for,name,javax,inject,qualifier,qualifier,annotation,autowire,candidate,resolver,class,get,class,loader,catch,class,not,found,exception,ex
QualifierAnnotationAutowireCandidateResolver -> @SuppressWarnings("unchecked") 	public QualifierAnnotationAutowireCandidateResolver();1536855799;Create a new QualifierAnnotationAutowireCandidateResolver_for Spring's standard {@link Qualifier} annotation._<p>Also supports JSR-330's {@link javax.inject.Qualifier} annotation, if available.;@SuppressWarnings("unchecked")_	public QualifierAnnotationAutowireCandidateResolver() {_		this.qualifierTypes.add(Qualifier.class)__		try {_			this.qualifierTypes.add((Class<? extends Annotation>) ClassUtils.forName("javax.inject.Qualifier",_							QualifierAnnotationAutowireCandidateResolver.class.getClassLoader()))__		}_		catch (ClassNotFoundException ex) {_			_		}_	};create,a,new,qualifier,annotation,autowire,candidate,resolver,for,spring,s,standard,link,qualifier,annotation,p,also,supports,jsr,330,s,link,javax,inject,qualifier,annotation,if,available;suppress,warnings,unchecked,public,qualifier,annotation,autowire,candidate,resolver,this,qualifier,types,add,qualifier,class,try,this,qualifier,types,add,class,extends,annotation,class,utils,for,name,javax,inject,qualifier,qualifier,annotation,autowire,candidate,resolver,class,get,class,loader,catch,class,not,found,exception,ex
QualifierAnnotationAutowireCandidateResolver -> @Nullable 	protected Object findValue(Annotation[] annotationsToSearch);1495868221;Determine a suggested value from any of the given candidate annotations.;@Nullable_	protected Object findValue(Annotation[] annotationsToSearch) {_		AnnotationAttributes attr = AnnotatedElementUtils.getMergedAnnotationAttributes(_				AnnotatedElementUtils.forAnnotations(annotationsToSearch), this.valueAnnotationType)__		if (attr != null) {_			return extractValue(attr)__		}_		return null__	};determine,a,suggested,value,from,any,of,the,given,candidate,annotations;nullable,protected,object,find,value,annotation,annotations,to,search,annotation,attributes,attr,annotated,element,utils,get,merged,annotation,attributes,annotated,element,utils,for,annotations,annotations,to,search,this,value,annotation,type,if,attr,null,return,extract,value,attr,return,null
QualifierAnnotationAutowireCandidateResolver -> @Nullable 	protected Object findValue(Annotation[] annotationsToSearch);1496837955;Determine a suggested value from any of the given candidate annotations.;@Nullable_	protected Object findValue(Annotation[] annotationsToSearch) {_		AnnotationAttributes attr = AnnotatedElementUtils.getMergedAnnotationAttributes(_				AnnotatedElementUtils.forAnnotations(annotationsToSearch), this.valueAnnotationType)__		if (attr != null) {_			return extractValue(attr)__		}_		return null__	};determine,a,suggested,value,from,any,of,the,given,candidate,annotations;nullable,protected,object,find,value,annotation,annotations,to,search,annotation,attributes,attr,annotated,element,utils,get,merged,annotation,attributes,annotated,element,utils,for,annotations,annotations,to,search,this,value,annotation,type,if,attr,null,return,extract,value,attr,return,null
QualifierAnnotationAutowireCandidateResolver -> @Nullable 	protected Object findValue(Annotation[] annotationsToSearch);1502974979;Determine a suggested value from any of the given candidate annotations.;@Nullable_	protected Object findValue(Annotation[] annotationsToSearch) {_		AnnotationAttributes attr = AnnotatedElementUtils.getMergedAnnotationAttributes(_				AnnotatedElementUtils.forAnnotations(annotationsToSearch), this.valueAnnotationType)__		if (attr != null) {_			return extractValue(attr)__		}_		return null__	};determine,a,suggested,value,from,any,of,the,given,candidate,annotations;nullable,protected,object,find,value,annotation,annotations,to,search,annotation,attributes,attr,annotated,element,utils,get,merged,annotation,attributes,annotated,element,utils,for,annotations,annotations,to,search,this,value,annotation,type,if,attr,null,return,extract,value,attr,return,null
QualifierAnnotationAutowireCandidateResolver -> @Nullable 	protected Object findValue(Annotation[] annotationsToSearch);1534347014;Determine a suggested value from any of the given candidate annotations.;@Nullable_	protected Object findValue(Annotation[] annotationsToSearch) {_		if (annotationsToSearch.length > 0) {   _			AnnotationAttributes attr = AnnotatedElementUtils.getMergedAnnotationAttributes(_					AnnotatedElementUtils.forAnnotations(annotationsToSearch), this.valueAnnotationType)__			if (attr != null) {_				return extractValue(attr)__			}_		}_		return null__	};determine,a,suggested,value,from,any,of,the,given,candidate,annotations;nullable,protected,object,find,value,annotation,annotations,to,search,if,annotations,to,search,length,0,annotation,attributes,attr,annotated,element,utils,get,merged,annotation,attributes,annotated,element,utils,for,annotations,annotations,to,search,this,value,annotation,type,if,attr,null,return,extract,value,attr,return,null
QualifierAnnotationAutowireCandidateResolver -> @Nullable 	protected Object findValue(Annotation[] annotationsToSearch);1536855799;Determine a suggested value from any of the given candidate annotations.;@Nullable_	protected Object findValue(Annotation[] annotationsToSearch) {_		if (annotationsToSearch.length > 0) {   _			AnnotationAttributes attr = AnnotatedElementUtils.getMergedAnnotationAttributes(_					AnnotatedElementUtils.forAnnotations(annotationsToSearch), this.valueAnnotationType)__			if (attr != null) {_				return extractValue(attr)__			}_		}_		return null__	};determine,a,suggested,value,from,any,of,the,given,candidate,annotations;nullable,protected,object,find,value,annotation,annotations,to,search,if,annotations,to,search,length,0,annotation,attributes,attr,annotated,element,utils,get,merged,annotation,attributes,annotated,element,utils,for,annotations,annotations,to,search,this,value,annotation,type,if,attr,null,return,extract,value,attr,return,null
QualifierAnnotationAutowireCandidateResolver -> public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor);1328020251;Determine whether the provided bean definition is an autowire candidate._<p>To be considered a candidate the bean's <em>autowire-candidate</em>_attribute must not have been set to 'false'. Also, if an annotation on_the field or parameter to be autowired is recognized by this bean factory_as a <em>qualifier</em>, the bean must 'match' against the annotation as_well as any attributes it may contain. The bean definition must contain_the same qualifier or match by meta attributes. A "value" attribute will_fallback to match against the bean name or an alias if a qualifier or_attribute does not match._@see Qualifier;public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor) {_		if (!bdHolder.getBeanDefinition().isAutowireCandidate()) {_			_			return false__		}_		if (descriptor == null) {_			_			return true__		}_		boolean match = checkQualifiers(bdHolder, descriptor.getAnnotations())__		if (match) {_			MethodParameter methodParam = descriptor.getMethodParameter()__			if (methodParam != null) {_				Method method = methodParam.getMethod()__				if (method == null || void.class.equals(method.getReturnType())) {_					match = checkQualifiers(bdHolder, methodParam.getMethodAnnotations())__				}_			}_		}_		return match__	};determine,whether,the,provided,bean,definition,is,an,autowire,candidate,p,to,be,considered,a,candidate,the,bean,s,em,autowire,candidate,em,attribute,must,not,have,been,set,to,false,also,if,an,annotation,on,the,field,or,parameter,to,be,autowired,is,recognized,by,this,bean,factory,as,a,em,qualifier,em,the,bean,must,match,against,the,annotation,as,well,as,any,attributes,it,may,contain,the,bean,definition,must,contain,the,same,qualifier,or,match,by,meta,attributes,a,value,attribute,will,fallback,to,match,against,the,bean,name,or,an,alias,if,a,qualifier,or,attribute,does,not,match,see,qualifier;public,boolean,is,autowire,candidate,bean,definition,holder,bd,holder,dependency,descriptor,descriptor,if,bd,holder,get,bean,definition,is,autowire,candidate,return,false,if,descriptor,null,return,true,boolean,match,check,qualifiers,bd,holder,descriptor,get,annotations,if,match,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,method,method,method,param,get,method,if,method,null,void,class,equals,method,get,return,type,match,check,qualifiers,bd,holder,method,param,get,method,annotations,return,match
QualifierAnnotationAutowireCandidateResolver -> public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor);1351681817;Determine whether the provided bean definition is an autowire candidate._<p>To be considered a candidate the bean's <em>autowire-candidate</em>_attribute must not have been set to 'false'. Also, if an annotation on_the field or parameter to be autowired is recognized by this bean factory_as a <em>qualifier</em>, the bean must 'match' against the annotation as_well as any attributes it may contain. The bean definition must contain_the same qualifier or match by meta attributes. A "value" attribute will_fallback to match against the bean name or an alias if a qualifier or_attribute does not match._@see Qualifier;public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor) {_		if (!bdHolder.getBeanDefinition().isAutowireCandidate()) {_			_			return false__		}_		if (descriptor == null) {_			_			return true__		}_		boolean match = checkQualifiers(bdHolder, descriptor.getAnnotations())__		if (match) {_			MethodParameter methodParam = descriptor.getMethodParameter()__			if (methodParam != null) {_				Method method = methodParam.getMethod()__				if (method == null || void.class.equals(method.getReturnType())) {_					match = checkQualifiers(bdHolder, methodParam.getMethodAnnotations())__				}_			}_		}_		return match__	};determine,whether,the,provided,bean,definition,is,an,autowire,candidate,p,to,be,considered,a,candidate,the,bean,s,em,autowire,candidate,em,attribute,must,not,have,been,set,to,false,also,if,an,annotation,on,the,field,or,parameter,to,be,autowired,is,recognized,by,this,bean,factory,as,a,em,qualifier,em,the,bean,must,match,against,the,annotation,as,well,as,any,attributes,it,may,contain,the,bean,definition,must,contain,the,same,qualifier,or,match,by,meta,attributes,a,value,attribute,will,fallback,to,match,against,the,bean,name,or,an,alias,if,a,qualifier,or,attribute,does,not,match,see,qualifier;public,boolean,is,autowire,candidate,bean,definition,holder,bd,holder,dependency,descriptor,descriptor,if,bd,holder,get,bean,definition,is,autowire,candidate,return,false,if,descriptor,null,return,true,boolean,match,check,qualifiers,bd,holder,descriptor,get,annotations,if,match,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,method,method,method,param,get,method,if,method,null,void,class,equals,method,get,return,type,match,check,qualifiers,bd,holder,method,param,get,method,annotations,return,match
QualifierAnnotationAutowireCandidateResolver -> public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor);1357119239;Determine whether the provided bean definition is an autowire candidate._<p>To be considered a candidate the bean's <em>autowire-candidate</em>_attribute must not have been set to 'false'. Also, if an annotation on_the field or parameter to be autowired is recognized by this bean factory_as a <em>qualifier</em>, the bean must 'match' against the annotation as_well as any attributes it may contain. The bean definition must contain_the same qualifier or match by meta attributes. A "value" attribute will_fallback to match against the bean name or an alias if a qualifier or_attribute does not match._@see Qualifier;public boolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor) {_		if (!bdHolder.getBeanDefinition().isAutowireCandidate()) {_			_			return false__		}_		if (descriptor == null) {_			_			return true__		}_		boolean match = checkQualifiers(bdHolder, descriptor.getAnnotations())__		if (match) {_			MethodParameter methodParam = descriptor.getMethodParameter()__			if (methodParam != null) {_				Method method = methodParam.getMethod()__				if (method == null || void.class.equals(method.getReturnType())) {_					match = checkQualifiers(bdHolder, methodParam.getMethodAnnotations())__				}_			}_		}_		return match__	};determine,whether,the,provided,bean,definition,is,an,autowire,candidate,p,to,be,considered,a,candidate,the,bean,s,em,autowire,candidate,em,attribute,must,not,have,been,set,to,false,also,if,an,annotation,on,the,field,or,parameter,to,be,autowired,is,recognized,by,this,bean,factory,as,a,em,qualifier,em,the,bean,must,match,against,the,annotation,as,well,as,any,attributes,it,may,contain,the,bean,definition,must,contain,the,same,qualifier,or,match,by,meta,attributes,a,value,attribute,will,fallback,to,match,against,the,bean,name,or,an,alias,if,a,qualifier,or,attribute,does,not,match,see,qualifier;public,boolean,is,autowire,candidate,bean,definition,holder,bd,holder,dependency,descriptor,descriptor,if,bd,holder,get,bean,definition,is,autowire,candidate,return,false,if,descriptor,null,return,true,boolean,match,check,qualifiers,bd,holder,descriptor,get,annotations,if,match,method,parameter,method,param,descriptor,get,method,parameter,if,method,param,null,method,method,method,param,get,method,if,method,null,void,class,equals,method,get,return,type,match,check,qualifiers,bd,holder,method,param,get,method,annotations,return,match
