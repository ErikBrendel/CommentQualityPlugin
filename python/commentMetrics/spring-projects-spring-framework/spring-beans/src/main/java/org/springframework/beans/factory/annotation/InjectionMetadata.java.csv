commented;modifiers;parameterAmount;loc;comment;code
false;public;1;14;;public void checkConfigMembers(RootBeanDefinition beanDefinition) {     Set<InjectedElement> checkedElements = new LinkedHashSet<>(this.injectedElements.size()).     for (InjectedElement element : this.injectedElements) {         Member member = element.getMember().         if (!beanDefinition.isExternallyManagedConfigMember(member)) {             beanDefinition.registerExternallyManagedConfigMember(member).             checkedElements.add(element).             if (logger.isTraceEnabled()) {                 logger.trace("Registered injected element on class [" + this.targetClass.getName() + "]: " + element).             }         }     }     this.checkedElements = checkedElements. }
false;public;3;13;;public void inject(Object target, @Nullable String beanName, @Nullable PropertyValues pvs) throws Throwable {     Collection<InjectedElement> checkedElements = this.checkedElements.     Collection<InjectedElement> elementsToIterate = (checkedElements != null ? checkedElements : this.injectedElements).     if (!elementsToIterate.isEmpty()) {         for (InjectedElement element : elementsToIterate) {             if (logger.isTraceEnabled()) {                 logger.trace("Processing injected element of bean '" + beanName + "': " + element).             }             element.inject(target, beanName, pvs).         }     } }
true;public;1;10;/**  * Clear property skipping for the contained elements.  * @since 3.2.13  */ ;/**  * Clear property skipping for the contained elements.  * @since 3.2.13  */ public void clear(@Nullable PropertyValues pvs) {     Collection<InjectedElement> checkedElements = this.checkedElements.     Collection<InjectedElement> elementsToIterate = (checkedElements != null ? checkedElements : this.injectedElements).     if (!elementsToIterate.isEmpty()) {         for (InjectedElement element : elementsToIterate) {             element.clearPropertySkipping(pvs).         }     } }
false;public,static;2;3;;public static boolean needsRefresh(@Nullable InjectionMetadata metadata, Class<?> clazz) {     return (metadata == null || metadata.targetClass != clazz). }
false;public,final;0;3;;public final Member getMember() {     return this.member. }
false;protected,final;0;11;;protected final Class<?> getResourceType() {     if (this.isField) {         return ((Field) this.member).getType().     } else if (this.pd != null) {         return this.pd.getPropertyType().     } else {         return ((Method) this.member).getParameterTypes()[0].     } }
false;protected,final;1;17;;protected final void checkResourceType(Class<?> resourceType) {     if (this.isField) {         Class<?> fieldType = ((Field) this.member).getType().         if (!(resourceType.isAssignableFrom(fieldType) || fieldType.isAssignableFrom(resourceType))) {             throw new IllegalStateException("Specified field type [" + fieldType + "] is incompatible with resource type [" + resourceType.getName() + "]").         }     } else {         Class<?> paramType = (this.pd != null ? this.pd.getPropertyType() : ((Method) this.member).getParameterTypes()[0]).         if (!(resourceType.isAssignableFrom(paramType) || paramType.isAssignableFrom(resourceType))) {             throw new IllegalStateException("Specified parameter type [" + paramType + "] is incompatible with resource type [" + resourceType.getName() + "]").         }     } }
true;protected;3;22;/**  * Either this or {@link #getResourceToInject} needs to be overridden.  */ ;/**  * Either this or {@link #getResourceToInject} needs to be overridden.  */ protected void inject(Object target, @Nullable String requestingBeanName, @Nullable PropertyValues pvs) throws Throwable {     if (this.isField) {         Field field = (Field) this.member.         ReflectionUtils.makeAccessible(field).         field.set(target, getResourceToInject(target, requestingBeanName)).     } else {         if (checkPropertySkipping(pvs)) {             return.         }         try {             Method method = (Method) this.member.             ReflectionUtils.makeAccessible(method).             method.invoke(target, getResourceToInject(target, requestingBeanName)).         } catch (InvocationTargetException ex) {             throw ex.getTargetException().         }     } }
true;protected;1;28;/**  * Check whether this injector's property needs to be skipped due to  * an explicit property value having been specified. Also marks the  * affected property as processed for other processors to ignore it.  */ ;/**  * Check whether this injector's property needs to be skipped due to  * an explicit property value having been specified. Also marks the  * affected property as processed for other processors to ignore it.  */ protected boolean checkPropertySkipping(@Nullable PropertyValues pvs) {     Boolean skip = this.skip.     if (skip != null) {         return skip.     }     if (pvs == null) {         this.skip = false.         return false.     }     synchronized (pvs) {         skip = this.skip.         if (skip != null) {             return skip.         }         if (this.pd != null) {             if (pvs.contains(this.pd.getName())) {                 // Explicit value provided as part of the bean definition.                 this.skip = true.                 return true.             } else if (pvs instanceof MutablePropertyValues) {                 ((MutablePropertyValues) pvs).registerProcessedProperty(this.pd.getName()).             }         }         this.skip = false.         return false.     } }
true;protected;1;10;/**  * Clear property skipping for this element.  * @since 3.2.13  */ ;/**  * Clear property skipping for this element.  * @since 3.2.13  */ protected void clearPropertySkipping(@Nullable PropertyValues pvs) {     if (pvs == null) {         return.     }     synchronized (pvs) {         if (Boolean.FALSE.equals(this.skip) && this.pd != null && pvs instanceof MutablePropertyValues) {             ((MutablePropertyValues) pvs).clearProcessedProperty(this.pd.getName()).         }     } }
true;protected;2;4;/**  * Either this or {@link #inject} needs to be overridden.  */ ;/**  * Either this or {@link #inject} needs to be overridden.  */ @Nullable protected Object getResourceToInject(Object target, @Nullable String requestingBeanName) {     return null. }
false;public;1;11;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (!(other instanceof InjectedElement)) {         return false.     }     InjectedElement otherElement = (InjectedElement) other.     return this.member.equals(otherElement.member). }
false;public;0;4;;@Override public int hashCode() {     return this.member.getClass().hashCode() * 29 + this.member.getName().hashCode(). }
false;public;0;4;;@Override public String toString() {     return getClass().getSimpleName() + " for " + this.member. }
