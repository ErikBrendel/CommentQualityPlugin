# id;timestamp;commentText;codeText;commentWords;codeWords
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs);1328020251;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or <code>null</code> if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) {_		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (factoryBean == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"factory-bean '" + factoryBeanName + "' returned null")__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)__			Method[] rawCandidates___			final Class factoryClazz = factoryClass__			if (System.getSecurityManager() != null) {_				rawCandidates = AccessController.doPrivileged(new PrivilegedAction<Method[]>() {_					public Method[] run() {_						return (mbd.isNonPublicAccessAllowed() ?_								ReflectionUtils.getAllDeclaredMethods(factoryClazz) : factoryClazz.getMethods())__					}_				})__			}_			else {_				rawCandidates = (mbd.isNonPublicAccessAllowed() ?_						ReflectionUtils.getAllDeclaredMethods(factoryClazz) : factoryClazz.getMethods())__			}_			_			List<Method> candidateSet = new ArrayList<Method>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic &&_						candidate.getName().equals(mbd.getFactoryMethodName()) &&_						mbd.isFactoryMethod(candidate)) {_					candidateSet.add(candidate)__				}_			}_			Method[] candidates = candidateSet.toArray(new Method[candidateSet.size()])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			List<Exception> causes = null___			for (int i = 0_ i < candidates.length_ i++) {_				Method candidate = candidates[i]__				Class[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (resolvedValues != null) {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(_									beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (this.beanFactory.logger.isTraceEnabled()) {_								this.beanFactory.logger.trace("Ignoring factory method [" + candidate +_										"] of bean '" + beanName + "': " + ex)__							}_							if (i == candidates.length - 1 && argsHolderToUse == null) {_								if (causes != null) {_									for (Exception cause : causes) {_										this.beanFactory.onSuppressedException(cause)__									}_								}_								throw ex__							}_							else {_								_								if (causes == null) {_									causes = new LinkedList<Exception>()__								}_								causes.add(ex)__								continue__							}_						}_					}__					else {_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<Method>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				boolean hasArgs = (resolvedValues.getArgumentCount() > 0)__				String argDesc = ""__				if (hasArgs) {_					List<String> argTypes = new ArrayList<String>()__					for (ValueHolder value : resolvedValues.getIndexedArgumentValues().values()) {_						String argType = (value.getType() != null ?_								ClassUtils.getShortName(value.getType()) : value.getValue().getClass().getSimpleName())__						argTypes.add(argType)__					}_					argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				}_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(hasArgs ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class.equals(factoryMethodToUse.getReturnType())) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Object fb = factoryBean__				final Method factoryMethod = factoryMethodToUse__				final Object[] args = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, fb, factoryMethod, args)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, beanFactory, factoryBean, factoryMethodToUse, argsToUse)__			}_			_			if (beanInstance == null) {_				return null__			}_			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Instantiation of bean failed", ex)__		}_	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,code,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,final,string,bean,name,final,root,bean,definition,mbd,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,factory,bean,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,factory,bean,factory,bean,name,returned,null,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,final,class,factory,clazz,factory,class,if,system,get,security,manager,null,raw,candidates,access,controller,do,privileged,new,privileged,action,method,public,method,run,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,clazz,factory,clazz,get,methods,else,raw,candidates,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,clazz,factory,clazz,get,methods,list,method,candidate,set,new,array,list,method,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,candidate,get,name,equals,mbd,get,factory,method,name,mbd,is,factory,method,candidate,candidate,set,add,candidate,method,candidates,candidate,set,to,array,new,method,candidate,set,size,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,list,exception,causes,null,for,int,i,0,i,candidates,length,i,method,candidate,candidates,i,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,i,candidates,length,1,args,holder,to,use,null,if,causes,null,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,else,if,causes,null,causes,new,linked,list,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,method,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,boolean,has,args,resolved,values,get,argument,count,0,string,arg,desc,if,has,args,list,string,arg,types,new,array,list,string,for,value,holder,value,resolved,values,get,indexed,argument,values,values,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,get,class,get,simple,name,arg,types,add,arg,type,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,has,args,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,equals,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,object,fb,factory,bean,final,method,factory,method,factory,method,to,use,final,object,args,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,fb,factory,method,args,bean,factory,get,access,control,context,else,bean,instance,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,factory,bean,factory,method,to,use,args,to,use,if,bean,instance,null,return,null,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,instantiation,of,bean,failed,ex
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs);1356735495;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) {_		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (factoryBean == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"factory-bean '" + factoryBeanName + "' returned null")__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)__			Method[] rawCandidates___			final Class factoryClazz = factoryClass__			if (System.getSecurityManager() != null) {_				rawCandidates = AccessController.doPrivileged(new PrivilegedAction<Method[]>() {_					@Override_					public Method[] run() {_						return (mbd.isNonPublicAccessAllowed() ?_								ReflectionUtils.getAllDeclaredMethods(factoryClazz) : factoryClazz.getMethods())__					}_				})__			}_			else {_				rawCandidates = (mbd.isNonPublicAccessAllowed() ?_						ReflectionUtils.getAllDeclaredMethods(factoryClazz) : factoryClazz.getMethods())__			}__			List<Method> candidateSet = new ArrayList<Method>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic &&_						candidate.getName().equals(mbd.getFactoryMethodName()) &&_						mbd.isFactoryMethod(candidate)) {_					candidateSet.add(candidate)__				}_			}_			Method[] candidates = candidateSet.toArray(new Method[candidateSet.size()])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			List<Exception> causes = null___			for (int i = 0_ i < candidates.length_ i++) {_				Method candidate = candidates[i]__				Class[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (resolvedValues != null) {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(_									beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (this.beanFactory.logger.isTraceEnabled()) {_								this.beanFactory.logger.trace("Ignoring factory method [" + candidate +_										"] of bean '" + beanName + "': " + ex)__							}_							if (i == candidates.length - 1 && argsHolderToUse == null) {_								if (causes != null) {_									for (Exception cause : causes) {_										this.beanFactory.onSuppressedException(cause)__									}_								}_								throw ex__							}_							else {_								_								if (causes == null) {_									causes = new LinkedList<Exception>()__								}_								causes.add(ex)__								continue__							}_						}_					}__					else {_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<Method>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				boolean hasArgs = (resolvedValues.getArgumentCount() > 0)__				String argDesc = ""__				if (hasArgs) {_					List<String> argTypes = new ArrayList<String>()__					for (ValueHolder value : resolvedValues.getIndexedArgumentValues().values()) {_						String argType = (value.getType() != null ?_								ClassUtils.getShortName(value.getType()) : value.getValue().getClass().getSimpleName())__						argTypes.add(argType)__					}_					argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				}_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(hasArgs ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class.equals(factoryMethodToUse.getReturnType())) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Object fb = factoryBean__				final Method factoryMethod = factoryMethodToUse__				final Object[] args = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, fb, factoryMethod, args)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, beanFactory, factoryBean, factoryMethodToUse, argsToUse)__			}__			if (beanInstance == null) {_				return null__			}_			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Instantiation of bean failed", ex)__		}_	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,final,string,bean,name,final,root,bean,definition,mbd,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,factory,bean,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,factory,bean,factory,bean,name,returned,null,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,final,class,factory,clazz,factory,class,if,system,get,security,manager,null,raw,candidates,access,controller,do,privileged,new,privileged,action,method,override,public,method,run,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,clazz,factory,clazz,get,methods,else,raw,candidates,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,clazz,factory,clazz,get,methods,list,method,candidate,set,new,array,list,method,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,candidate,get,name,equals,mbd,get,factory,method,name,mbd,is,factory,method,candidate,candidate,set,add,candidate,method,candidates,candidate,set,to,array,new,method,candidate,set,size,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,list,exception,causes,null,for,int,i,0,i,candidates,length,i,method,candidate,candidates,i,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,i,candidates,length,1,args,holder,to,use,null,if,causes,null,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,else,if,causes,null,causes,new,linked,list,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,method,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,boolean,has,args,resolved,values,get,argument,count,0,string,arg,desc,if,has,args,list,string,arg,types,new,array,list,string,for,value,holder,value,resolved,values,get,indexed,argument,values,values,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,get,class,get,simple,name,arg,types,add,arg,type,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,has,args,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,equals,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,object,fb,factory,bean,final,method,factory,method,factory,method,to,use,final,object,args,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,fb,factory,method,args,bean,factory,get,access,control,context,else,bean,instance,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,factory,bean,factory,method,to,use,args,to,use,if,bean,instance,null,return,null,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,instantiation,of,bean,failed,ex
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs);1357119239;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) {_		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (factoryBean == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"factory-bean '" + factoryBeanName + "' returned null")__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)__			Method[] rawCandidates___			final Class factoryClazz = factoryClass__			if (System.getSecurityManager() != null) {_				rawCandidates = AccessController.doPrivileged(new PrivilegedAction<Method[]>() {_					public Method[] run() {_						return (mbd.isNonPublicAccessAllowed() ?_								ReflectionUtils.getAllDeclaredMethods(factoryClazz) : factoryClazz.getMethods())__					}_				})__			}_			else {_				rawCandidates = (mbd.isNonPublicAccessAllowed() ?_						ReflectionUtils.getAllDeclaredMethods(factoryClazz) : factoryClazz.getMethods())__			}__			List<Method> candidateSet = new ArrayList<Method>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic &&_						candidate.getName().equals(mbd.getFactoryMethodName()) &&_						mbd.isFactoryMethod(candidate)) {_					candidateSet.add(candidate)__				}_			}_			Method[] candidates = candidateSet.toArray(new Method[candidateSet.size()])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			List<Exception> causes = null___			for (int i = 0_ i < candidates.length_ i++) {_				Method candidate = candidates[i]__				Class[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (resolvedValues != null) {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(_									beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (this.beanFactory.logger.isTraceEnabled()) {_								this.beanFactory.logger.trace("Ignoring factory method [" + candidate +_										"] of bean '" + beanName + "': " + ex)__							}_							if (i == candidates.length - 1 && argsHolderToUse == null) {_								if (causes != null) {_									for (Exception cause : causes) {_										this.beanFactory.onSuppressedException(cause)__									}_								}_								throw ex__							}_							else {_								_								if (causes == null) {_									causes = new LinkedList<Exception>()__								}_								causes.add(ex)__								continue__							}_						}_					}__					else {_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<Method>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				boolean hasArgs = (resolvedValues.getArgumentCount() > 0)__				String argDesc = ""__				if (hasArgs) {_					List<String> argTypes = new ArrayList<String>()__					for (ValueHolder value : resolvedValues.getIndexedArgumentValues().values()) {_						String argType = (value.getType() != null ?_								ClassUtils.getShortName(value.getType()) : value.getValue().getClass().getSimpleName())__						argTypes.add(argType)__					}_					argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				}_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(hasArgs ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class.equals(factoryMethodToUse.getReturnType())) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Object fb = factoryBean__				final Method factoryMethod = factoryMethodToUse__				final Object[] args = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, fb, factoryMethod, args)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, beanFactory, factoryBean, factoryMethodToUse, argsToUse)__			}__			if (beanInstance == null) {_				return null__			}_			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Instantiation of bean failed", ex)__		}_	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,final,string,bean,name,final,root,bean,definition,mbd,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,factory,bean,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,factory,bean,factory,bean,name,returned,null,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,final,class,factory,clazz,factory,class,if,system,get,security,manager,null,raw,candidates,access,controller,do,privileged,new,privileged,action,method,public,method,run,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,clazz,factory,clazz,get,methods,else,raw,candidates,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,clazz,factory,clazz,get,methods,list,method,candidate,set,new,array,list,method,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,candidate,get,name,equals,mbd,get,factory,method,name,mbd,is,factory,method,candidate,candidate,set,add,candidate,method,candidates,candidate,set,to,array,new,method,candidate,set,size,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,list,exception,causes,null,for,int,i,0,i,candidates,length,i,method,candidate,candidates,i,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,i,candidates,length,1,args,holder,to,use,null,if,causes,null,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,else,if,causes,null,causes,new,linked,list,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,method,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,boolean,has,args,resolved,values,get,argument,count,0,string,arg,desc,if,has,args,list,string,arg,types,new,array,list,string,for,value,holder,value,resolved,values,get,indexed,argument,values,values,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,get,class,get,simple,name,arg,types,add,arg,type,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,has,args,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,equals,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,object,fb,factory,bean,final,method,factory,method,factory,method,to,use,final,object,args,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,fb,factory,method,args,bean,factory,get,access,control,context,else,bean,instance,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,factory,bean,factory,method,to,use,args,to,use,if,bean,instance,null,return,null,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,instantiation,of,bean,failed,ex
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs);1362408075;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) {_		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (factoryBean == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"factory-bean '" + factoryBeanName + "' returned null")__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)__			Method[] rawCandidates___			final Class factoryClazz = factoryClass__			if (System.getSecurityManager() != null) {_				rawCandidates = AccessController.doPrivileged(new PrivilegedAction<Method[]>() {_					public Method[] run() {_						return (mbd.isNonPublicAccessAllowed() ?_								ReflectionUtils.getAllDeclaredMethods(factoryClazz) : factoryClazz.getMethods())__					}_				})__			}_			else {_				rawCandidates = (mbd.isNonPublicAccessAllowed() ?_						ReflectionUtils.getAllDeclaredMethods(factoryClazz) : factoryClazz.getMethods())__			}__			List<Method> candidateSet = new ArrayList<Method>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic &&_						candidate.getName().equals(mbd.getFactoryMethodName()) &&_						mbd.isFactoryMethod(candidate)) {_					candidateSet.add(candidate)__				}_			}_			Method[] candidates = candidateSet.toArray(new Method[candidateSet.size()])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			List<Exception> causes = null___			for (int i = 0_ i < candidates.length_ i++) {_				Method candidate = candidates[i]__				Class[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (resolvedValues != null) {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(_									beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (this.beanFactory.logger.isTraceEnabled()) {_								this.beanFactory.logger.trace("Ignoring factory method [" + candidate +_										"] of bean '" + beanName + "': " + ex)__							}_							if (i == candidates.length - 1 && argsHolderToUse == null) {_								if (causes != null) {_									for (Exception cause : causes) {_										this.beanFactory.onSuppressedException(cause)__									}_								}_								throw ex__							}_							else {_								_								if (causes == null) {_									causes = new LinkedList<Exception>()__								}_								causes.add(ex)__								continue__							}_						}_					}__					else {_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<Method>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				boolean hasArgs = (resolvedValues.getArgumentCount() > 0)__				String argDesc = ""__				if (hasArgs) {_					List<String> argTypes = new ArrayList<String>()__					for (ValueHolder value : resolvedValues.getIndexedArgumentValues().values()) {_						String argType = (value.getType() != null ?_								ClassUtils.getShortName(value.getType()) : value.getValue().getClass().getSimpleName())__						argTypes.add(argType)__					}_					argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				}_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(hasArgs ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class.equals(factoryMethodToUse.getReturnType())) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Object fb = factoryBean__				final Method factoryMethod = factoryMethodToUse__				final Object[] args = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, fb, factoryMethod, args)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, beanFactory, factoryBean, factoryMethodToUse, argsToUse)__			}__			if (beanInstance == null) {_				return null__			}_			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Instantiation of bean failed", ex)__		}_	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,final,string,bean,name,final,root,bean,definition,mbd,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,factory,bean,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,factory,bean,factory,bean,name,returned,null,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,final,class,factory,clazz,factory,class,if,system,get,security,manager,null,raw,candidates,access,controller,do,privileged,new,privileged,action,method,public,method,run,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,clazz,factory,clazz,get,methods,else,raw,candidates,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,clazz,factory,clazz,get,methods,list,method,candidate,set,new,array,list,method,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,candidate,get,name,equals,mbd,get,factory,method,name,mbd,is,factory,method,candidate,candidate,set,add,candidate,method,candidates,candidate,set,to,array,new,method,candidate,set,size,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,list,exception,causes,null,for,int,i,0,i,candidates,length,i,method,candidate,candidates,i,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,i,candidates,length,1,args,holder,to,use,null,if,causes,null,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,else,if,causes,null,causes,new,linked,list,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,method,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,boolean,has,args,resolved,values,get,argument,count,0,string,arg,desc,if,has,args,list,string,arg,types,new,array,list,string,for,value,holder,value,resolved,values,get,indexed,argument,values,values,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,get,class,get,simple,name,arg,types,add,arg,type,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,has,args,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,equals,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,object,fb,factory,bean,final,method,factory,method,factory,method,to,use,final,object,args,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,fb,factory,method,args,bean,factory,get,access,control,context,else,bean,instance,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,factory,bean,factory,method,to,use,args,to,use,if,bean,instance,null,return,null,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,instantiation,of,bean,failed,ex
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs);1368482696;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) {_		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (factoryBean == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"factory-bean '" + factoryBeanName + "' returned null")__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)__			Method[] rawCandidates___			final Class factoryClazz = factoryClass__			if (System.getSecurityManager() != null) {_				rawCandidates = AccessController.doPrivileged(new PrivilegedAction<Method[]>() {_					@Override_					public Method[] run() {_						return (mbd.isNonPublicAccessAllowed() ?_								ReflectionUtils.getAllDeclaredMethods(factoryClazz) : factoryClazz.getMethods())__					}_				})__			}_			else {_				rawCandidates = (mbd.isNonPublicAccessAllowed() ?_						ReflectionUtils.getAllDeclaredMethods(factoryClazz) : factoryClazz.getMethods())__			}__			List<Method> candidateSet = new ArrayList<Method>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic &&_						candidate.getName().equals(mbd.getFactoryMethodName()) &&_						mbd.isFactoryMethod(candidate)) {_					candidateSet.add(candidate)__				}_			}_			Method[] candidates = candidateSet.toArray(new Method[candidateSet.size()])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			List<Exception> causes = null___			for (int i = 0_ i < candidates.length_ i++) {_				Method candidate = candidates[i]__				Class[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (resolvedValues != null) {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(_									beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (this.beanFactory.logger.isTraceEnabled()) {_								this.beanFactory.logger.trace("Ignoring factory method [" + candidate +_										"] of bean '" + beanName + "': " + ex)__							}_							if (i == candidates.length - 1 && argsHolderToUse == null) {_								if (causes != null) {_									for (Exception cause : causes) {_										this.beanFactory.onSuppressedException(cause)__									}_								}_								throw ex__							}_							else {_								_								if (causes == null) {_									causes = new LinkedList<Exception>()__								}_								causes.add(ex)__								continue__							}_						}_					}__					else {_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<Method>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				boolean hasArgs = (resolvedValues.getArgumentCount() > 0)__				String argDesc = ""__				if (hasArgs) {_					List<String> argTypes = new ArrayList<String>()__					for (ValueHolder value : resolvedValues.getIndexedArgumentValues().values()) {_						String argType = (value.getType() != null ?_								ClassUtils.getShortName(value.getType()) : value.getValue().getClass().getSimpleName())__						argTypes.add(argType)__					}_					argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				}_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(hasArgs ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class.equals(factoryMethodToUse.getReturnType())) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Object fb = factoryBean__				final Method factoryMethod = factoryMethodToUse__				final Object[] args = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, fb, factoryMethod, args)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, beanFactory, factoryBean, factoryMethodToUse, argsToUse)__			}__			if (beanInstance == null) {_				return null__			}_			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Instantiation of bean failed", ex)__		}_	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,final,string,bean,name,final,root,bean,definition,mbd,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,factory,bean,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,factory,bean,factory,bean,name,returned,null,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,final,class,factory,clazz,factory,class,if,system,get,security,manager,null,raw,candidates,access,controller,do,privileged,new,privileged,action,method,override,public,method,run,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,clazz,factory,clazz,get,methods,else,raw,candidates,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,clazz,factory,clazz,get,methods,list,method,candidate,set,new,array,list,method,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,candidate,get,name,equals,mbd,get,factory,method,name,mbd,is,factory,method,candidate,candidate,set,add,candidate,method,candidates,candidate,set,to,array,new,method,candidate,set,size,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,list,exception,causes,null,for,int,i,0,i,candidates,length,i,method,candidate,candidates,i,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,i,candidates,length,1,args,holder,to,use,null,if,causes,null,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,else,if,causes,null,causes,new,linked,list,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,method,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,boolean,has,args,resolved,values,get,argument,count,0,string,arg,desc,if,has,args,list,string,arg,types,new,array,list,string,for,value,holder,value,resolved,values,get,indexed,argument,values,values,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,get,class,get,simple,name,arg,types,add,arg,type,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,has,args,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,equals,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,object,fb,factory,bean,final,method,factory,method,factory,method,to,use,final,object,args,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,fb,factory,method,args,bean,factory,get,access,control,context,else,bean,instance,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,factory,bean,factory,method,to,use,args,to,use,if,bean,instance,null,return,null,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,instantiation,of,bean,failed,ex
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs);1383520795;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) {_		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class<?> factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (factoryBean == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"factory-bean '" + factoryBeanName + "' returned null")__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)__			Method[] rawCandidates___			final Class<?> factoryClazz = factoryClass__			if (System.getSecurityManager() != null) {_				rawCandidates = AccessController.doPrivileged(new PrivilegedAction<Method[]>() {_					@Override_					public Method[] run() {_						return (mbd.isNonPublicAccessAllowed() ?_								ReflectionUtils.getAllDeclaredMethods(factoryClazz) : factoryClazz.getMethods())__					}_				})__			}_			else {_				rawCandidates = (mbd.isNonPublicAccessAllowed() ?_						ReflectionUtils.getAllDeclaredMethods(factoryClazz) : factoryClazz.getMethods())__			}__			List<Method> candidateSet = new ArrayList<Method>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic &&_						candidate.getName().equals(mbd.getFactoryMethodName()) &&_						mbd.isFactoryMethod(candidate)) {_					candidateSet.add(candidate)__				}_			}_			Method[] candidates = candidateSet.toArray(new Method[candidateSet.size()])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			List<Exception> causes = null___			for (int i = 0_ i < candidates.length_ i++) {_				Method candidate = candidates[i]__				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (resolvedValues != null) {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(_									beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (this.beanFactory.logger.isTraceEnabled()) {_								this.beanFactory.logger.trace("Ignoring factory method [" + candidate +_										"] of bean '" + beanName + "': " + ex)__							}_							if (i == candidates.length - 1 && argsHolderToUse == null) {_								if (causes != null) {_									for (Exception cause : causes) {_										this.beanFactory.onSuppressedException(cause)__									}_								}_								throw ex__							}_							else {_								_								if (causes == null) {_									causes = new LinkedList<Exception>()__								}_								causes.add(ex)__								continue__							}_						}_					}__					else {_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					_					_					_					_					_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&_							!mbd.isLenientConstructorResolution() &&_							paramTypes.length == factoryMethodToUse.getParameterTypes().length &&_							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<Method>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				boolean hasArgs = (resolvedValues.getArgumentCount() > 0)__				String argDesc = ""__				if (hasArgs) {_					List<String> argTypes = new ArrayList<String>()__					for (ValueHolder value : resolvedValues.getIndexedArgumentValues().values()) {_						String argType = (value.getType() != null ?_								ClassUtils.getShortName(value.getType()) : value.getValue().getClass().getSimpleName())__						argTypes.add(argType)__					}_					argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				}_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(hasArgs ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class.equals(factoryMethodToUse.getReturnType())) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Object fb = factoryBean__				final Method factoryMethod = factoryMethodToUse__				final Object[] args = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, fb, factoryMethod, args)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, beanFactory, factoryBean, factoryMethodToUse, argsToUse)__			}__			if (beanInstance == null) {_				return null__			}_			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Instantiation of bean failed", ex)__		}_	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,final,string,bean,name,final,root,bean,definition,mbd,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,factory,bean,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,factory,bean,factory,bean,name,returned,null,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,final,class,factory,clazz,factory,class,if,system,get,security,manager,null,raw,candidates,access,controller,do,privileged,new,privileged,action,method,override,public,method,run,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,clazz,factory,clazz,get,methods,else,raw,candidates,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,clazz,factory,clazz,get,methods,list,method,candidate,set,new,array,list,method,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,candidate,get,name,equals,mbd,get,factory,method,name,mbd,is,factory,method,candidate,candidate,set,add,candidate,method,candidates,candidate,set,to,array,new,method,candidate,set,size,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,list,exception,causes,null,for,int,i,0,i,candidates,length,i,method,candidate,candidates,i,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,i,candidates,length,1,args,holder,to,use,null,if,causes,null,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,else,if,causes,null,causes,new,linked,list,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,mbd,is,lenient,constructor,resolution,param,types,length,factory,method,to,use,get,parameter,types,length,arrays,equals,param,types,factory,method,to,use,get,parameter,types,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,method,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,boolean,has,args,resolved,values,get,argument,count,0,string,arg,desc,if,has,args,list,string,arg,types,new,array,list,string,for,value,holder,value,resolved,values,get,indexed,argument,values,values,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,get,class,get,simple,name,arg,types,add,arg,type,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,has,args,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,equals,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,object,fb,factory,bean,final,method,factory,method,factory,method,to,use,final,object,args,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,fb,factory,method,args,bean,factory,get,access,control,context,else,bean,instance,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,factory,bean,factory,method,to,use,args,to,use,if,bean,instance,null,return,null,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,instantiation,of,bean,failed,ex
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs);1385412762;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) {_		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class<?> factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (factoryBean == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"factory-bean '" + factoryBeanName + "' returned null")__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)__			Method[] rawCandidates___			final Class<?> factoryClazz = factoryClass__			if (System.getSecurityManager() != null) {_				rawCandidates = AccessController.doPrivileged(new PrivilegedAction<Method[]>() {_					@Override_					public Method[] run() {_						return (mbd.isNonPublicAccessAllowed() ?_								ReflectionUtils.getAllDeclaredMethods(factoryClazz) : factoryClazz.getMethods())__					}_				})__			}_			else {_				rawCandidates = (mbd.isNonPublicAccessAllowed() ?_						ReflectionUtils.getAllDeclaredMethods(factoryClazz) : factoryClazz.getMethods())__			}__			List<Method> candidateSet = new ArrayList<Method>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic &&_						candidate.getName().equals(mbd.getFactoryMethodName()) &&_						mbd.isFactoryMethod(candidate)) {_					candidateSet.add(candidate)__				}_			}_			Method[] candidates = candidateSet.toArray(new Method[candidateSet.size()])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			List<Exception> causes = null___			for (int i = 0_ i < candidates.length_ i++) {_				Method candidate = candidates[i]__				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (resolvedValues != null) {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(_									beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (this.beanFactory.logger.isTraceEnabled()) {_								this.beanFactory.logger.trace("Ignoring factory method [" + candidate +_										"] of bean '" + beanName + "': " + ex)__							}_							if (i == candidates.length - 1 && argsHolderToUse == null) {_								if (causes != null) {_									for (Exception cause : causes) {_										this.beanFactory.onSuppressedException(cause)__									}_								}_								throw ex__							}_							else {_								_								if (causes == null) {_									causes = new LinkedList<Exception>()__								}_								causes.add(ex)__								continue__							}_						}_					}__					else {_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					_					_					_					_					_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&_							!mbd.isLenientConstructorResolution() &&_							paramTypes.length == factoryMethodToUse.getParameterTypes().length &&_							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<Method>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				boolean hasArgs = (resolvedValues.getArgumentCount() > 0)__				String argDesc = ""__				if (hasArgs) {_					List<String> argTypes = new ArrayList<String>()__					for (ValueHolder value : resolvedValues.getIndexedArgumentValues().values()) {_						String argType = (value.getType() != null ?_								ClassUtils.getShortName(value.getType()) : value.getValue().getClass().getSimpleName())__						argTypes.add(argType)__					}_					argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				}_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(hasArgs ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class.equals(factoryMethodToUse.getReturnType())) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Object fb = factoryBean__				final Method factoryMethod = factoryMethodToUse__				final Object[] args = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, fb, factoryMethod, args)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, beanFactory, factoryBean, factoryMethodToUse, argsToUse)__			}__			if (beanInstance == null) {_				return null__			}_			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Instantiation of bean failed", ex)__		}_	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,final,string,bean,name,final,root,bean,definition,mbd,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,factory,bean,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,factory,bean,factory,bean,name,returned,null,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,final,class,factory,clazz,factory,class,if,system,get,security,manager,null,raw,candidates,access,controller,do,privileged,new,privileged,action,method,override,public,method,run,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,clazz,factory,clazz,get,methods,else,raw,candidates,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,clazz,factory,clazz,get,methods,list,method,candidate,set,new,array,list,method,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,candidate,get,name,equals,mbd,get,factory,method,name,mbd,is,factory,method,candidate,candidate,set,add,candidate,method,candidates,candidate,set,to,array,new,method,candidate,set,size,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,list,exception,causes,null,for,int,i,0,i,candidates,length,i,method,candidate,candidates,i,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,i,candidates,length,1,args,holder,to,use,null,if,causes,null,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,else,if,causes,null,causes,new,linked,list,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,mbd,is,lenient,constructor,resolution,param,types,length,factory,method,to,use,get,parameter,types,length,arrays,equals,param,types,factory,method,to,use,get,parameter,types,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,method,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,boolean,has,args,resolved,values,get,argument,count,0,string,arg,desc,if,has,args,list,string,arg,types,new,array,list,string,for,value,holder,value,resolved,values,get,indexed,argument,values,values,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,get,class,get,simple,name,arg,types,add,arg,type,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,has,args,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,equals,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,object,fb,factory,bean,final,method,factory,method,factory,method,to,use,final,object,args,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,fb,factory,method,args,bean,factory,get,access,control,context,else,bean,instance,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,factory,bean,factory,method,to,use,args,to,use,if,bean,instance,null,return,null,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,instantiation,of,bean,failed,ex
ConstructorResolver -> public BeanWrapper autowireConstructor( 			final String beanName, final RootBeanDefinition mbd, Constructor[] chosenCtors, final Object[] explicitArgs);1328020251;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or <code>null</code> if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or <code>null</code> if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(_			final String beanName, final RootBeanDefinition mbd, Constructor[] chosenCtors, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)__			}_		}__		if (constructorToUse == null) {_			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			_			Constructor[] candidates = chosenCtors__			if (candidates == null) {_				Class beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_									"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}_			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor> ambiguousConstructors = null__			List<Exception> causes = null___			for (int i = 0_ i < candidates.length_ i++) {_				Constructor<?> candidate = candidates[i]__				Class[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = null__						if (constructorPropertiesAnnotationAvailable) {_							paramNames = ConstructorPropertiesChecker.evaluateAnnotation(candidate, paramTypes.length)__						}_						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(_								beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (this.beanFactory.logger.isTraceEnabled()) {_							this.beanFactory.logger.trace(_									"Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						if (i == candidates.length - 1 && constructorToUse == null) {_							if (causes != null) {_								for (Exception cause : causes) {_									this.beanFactory.onSuppressedException(cause)__								}_							}_							throw ex__						}_						else {_							_							if (causes == null) {_								causes = new LinkedList<Exception>()__							}_							causes.add(ex)__							continue__						}_					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<Constructor>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Constructor ctorToUse = constructorToUse__				final Object[] argumentsToUse = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, ctorToUse, argumentsToUse)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, constructorToUse, argsToUse)__			}_			_			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Instantiation of bean failed", ex)__		}_	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,code,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,code,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,final,string,bean,name,final,root,bean,definition,mbd,constructor,chosen,ctors,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,if,constructor,to,use,null,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,list,exception,causes,null,for,int,i,0,i,candidates,length,i,constructor,candidate,candidates,i,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,null,if,constructor,properties,annotation,available,param,names,constructor,properties,checker,evaluate,annotation,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,i,candidates,length,1,constructor,to,use,null,if,causes,null,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,else,if,causes,null,causes,new,linked,list,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,constructor,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,constructor,ctor,to,use,constructor,to,use,final,object,arguments,to,use,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,ctor,to,use,arguments,to,use,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,constructor,to,use,args,to,use,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,instantiation,of,bean,failed,ex
ConstructorResolver -> public BeanWrapper autowireConstructor( 			final String beanName, final RootBeanDefinition mbd, Constructor[] chosenCtors, final Object[] explicitArgs);1356735495;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(_			final String beanName, final RootBeanDefinition mbd, Constructor[] chosenCtors, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)__			}_		}__		if (constructorToUse == null) {_			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			_			Constructor[] candidates = chosenCtors__			if (candidates == null) {_				Class beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_									"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}_			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor> ambiguousConstructors = null__			List<Exception> causes = null___			for (int i = 0_ i < candidates.length_ i++) {_				Constructor<?> candidate = candidates[i]__				Class[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = null__						if (constructorPropertiesAnnotationAvailable) {_							paramNames = ConstructorPropertiesChecker.evaluateAnnotation(candidate, paramTypes.length)__						}_						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(_								beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (this.beanFactory.logger.isTraceEnabled()) {_							this.beanFactory.logger.trace(_									"Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						if (i == candidates.length - 1 && constructorToUse == null) {_							if (causes != null) {_								for (Exception cause : causes) {_									this.beanFactory.onSuppressedException(cause)__								}_							}_							throw ex__						}_						else {_							_							if (causes == null) {_								causes = new LinkedList<Exception>()__							}_							causes.add(ex)__							continue__						}_					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<Constructor>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Constructor ctorToUse = constructorToUse__				final Object[] argumentsToUse = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, ctorToUse, argumentsToUse)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, constructorToUse, argsToUse)__			}__			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Instantiation of bean failed", ex)__		}_	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,final,string,bean,name,final,root,bean,definition,mbd,constructor,chosen,ctors,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,if,constructor,to,use,null,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,list,exception,causes,null,for,int,i,0,i,candidates,length,i,constructor,candidate,candidates,i,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,null,if,constructor,properties,annotation,available,param,names,constructor,properties,checker,evaluate,annotation,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,i,candidates,length,1,constructor,to,use,null,if,causes,null,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,else,if,causes,null,causes,new,linked,list,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,constructor,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,constructor,ctor,to,use,constructor,to,use,final,object,arguments,to,use,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,ctor,to,use,arguments,to,use,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,constructor,to,use,args,to,use,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,instantiation,of,bean,failed,ex
ConstructorResolver -> public BeanWrapper autowireConstructor( 			final String beanName, final RootBeanDefinition mbd, Constructor[] chosenCtors, final Object[] explicitArgs);1357119239;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(_			final String beanName, final RootBeanDefinition mbd, Constructor[] chosenCtors, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)__			}_		}__		if (constructorToUse == null) {_			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			_			Constructor[] candidates = chosenCtors__			if (candidates == null) {_				Class beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_									"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}_			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor> ambiguousConstructors = null__			List<Exception> causes = null___			for (int i = 0_ i < candidates.length_ i++) {_				Constructor<?> candidate = candidates[i]__				Class[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = null__						if (constructorPropertiesAnnotationAvailable) {_							paramNames = ConstructorPropertiesChecker.evaluateAnnotation(candidate, paramTypes.length)__						}_						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(_								beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (this.beanFactory.logger.isTraceEnabled()) {_							this.beanFactory.logger.trace(_									"Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						if (i == candidates.length - 1 && constructorToUse == null) {_							if (causes != null) {_								for (Exception cause : causes) {_									this.beanFactory.onSuppressedException(cause)__								}_							}_							throw ex__						}_						else {_							_							if (causes == null) {_								causes = new LinkedList<Exception>()__							}_							causes.add(ex)__							continue__						}_					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<Constructor>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Constructor ctorToUse = constructorToUse__				final Object[] argumentsToUse = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, ctorToUse, argumentsToUse)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, constructorToUse, argsToUse)__			}__			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Instantiation of bean failed", ex)__		}_	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,final,string,bean,name,final,root,bean,definition,mbd,constructor,chosen,ctors,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,if,constructor,to,use,null,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,list,exception,causes,null,for,int,i,0,i,candidates,length,i,constructor,candidate,candidates,i,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,null,if,constructor,properties,annotation,available,param,names,constructor,properties,checker,evaluate,annotation,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,i,candidates,length,1,constructor,to,use,null,if,causes,null,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,else,if,causes,null,causes,new,linked,list,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,constructor,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,constructor,ctor,to,use,constructor,to,use,final,object,arguments,to,use,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,ctor,to,use,arguments,to,use,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,constructor,to,use,args,to,use,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,instantiation,of,bean,failed,ex
ConstructorResolver -> public BeanWrapper autowireConstructor( 			final String beanName, final RootBeanDefinition mbd, Constructor[] chosenCtors, final Object[] explicitArgs);1362408075;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(_			final String beanName, final RootBeanDefinition mbd, Constructor[] chosenCtors, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)__			}_		}__		if (constructorToUse == null) {_			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			_			Constructor[] candidates = chosenCtors__			if (candidates == null) {_				Class beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_									"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}_			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor> ambiguousConstructors = null__			List<Exception> causes = null___			for (int i = 0_ i < candidates.length_ i++) {_				Constructor<?> candidate = candidates[i]__				Class[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = null__						if (constructorPropertiesAnnotationAvailable) {_							paramNames = ConstructorPropertiesChecker.evaluateAnnotation(candidate, paramTypes.length)__						}_						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(_								beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (this.beanFactory.logger.isTraceEnabled()) {_							this.beanFactory.logger.trace(_									"Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						if (i == candidates.length - 1 && constructorToUse == null) {_							if (causes != null) {_								for (Exception cause : causes) {_									this.beanFactory.onSuppressedException(cause)__								}_							}_							throw ex__						}_						else {_							_							if (causes == null) {_								causes = new LinkedList<Exception>()__							}_							causes.add(ex)__							continue__						}_					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<Constructor>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Constructor ctorToUse = constructorToUse__				final Object[] argumentsToUse = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, ctorToUse, argumentsToUse)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, constructorToUse, argsToUse)__			}__			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Instantiation of bean failed", ex)__		}_	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,final,string,bean,name,final,root,bean,definition,mbd,constructor,chosen,ctors,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,if,constructor,to,use,null,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,list,exception,causes,null,for,int,i,0,i,candidates,length,i,constructor,candidate,candidates,i,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,null,if,constructor,properties,annotation,available,param,names,constructor,properties,checker,evaluate,annotation,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,i,candidates,length,1,constructor,to,use,null,if,causes,null,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,else,if,causes,null,causes,new,linked,list,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,constructor,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,constructor,ctor,to,use,constructor,to,use,final,object,arguments,to,use,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,ctor,to,use,arguments,to,use,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,constructor,to,use,args,to,use,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,instantiation,of,bean,failed,ex
ConstructorResolver -> public BeanWrapper autowireConstructor( 			final String beanName, final RootBeanDefinition mbd, Constructor[] chosenCtors, final Object[] explicitArgs);1368482696;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(_			final String beanName, final RootBeanDefinition mbd, Constructor[] chosenCtors, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)__			}_		}__		if (constructorToUse == null) {_			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			_			Constructor[] candidates = chosenCtors__			if (candidates == null) {_				Class beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_									"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}_			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor> ambiguousConstructors = null__			List<Exception> causes = null___			for (int i = 0_ i < candidates.length_ i++) {_				Constructor<?> candidate = candidates[i]__				Class[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = null__						if (constructorPropertiesAnnotationAvailable) {_							paramNames = ConstructorPropertiesChecker.evaluateAnnotation(candidate, paramTypes.length)__						}_						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(_								beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (this.beanFactory.logger.isTraceEnabled()) {_							this.beanFactory.logger.trace(_									"Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						if (i == candidates.length - 1 && constructorToUse == null) {_							if (causes != null) {_								for (Exception cause : causes) {_									this.beanFactory.onSuppressedException(cause)__								}_							}_							throw ex__						}_						else {_							_							if (causes == null) {_								causes = new LinkedList<Exception>()__							}_							causes.add(ex)__							continue__						}_					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<Constructor>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Constructor ctorToUse = constructorToUse__				final Object[] argumentsToUse = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, ctorToUse, argumentsToUse)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, constructorToUse, argsToUse)__			}__			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Instantiation of bean failed", ex)__		}_	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,final,string,bean,name,final,root,bean,definition,mbd,constructor,chosen,ctors,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,if,constructor,to,use,null,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,list,exception,causes,null,for,int,i,0,i,candidates,length,i,constructor,candidate,candidates,i,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,null,if,constructor,properties,annotation,available,param,names,constructor,properties,checker,evaluate,annotation,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,i,candidates,length,1,constructor,to,use,null,if,causes,null,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,else,if,causes,null,causes,new,linked,list,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,constructor,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,constructor,ctor,to,use,constructor,to,use,final,object,arguments,to,use,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,ctor,to,use,arguments,to,use,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,constructor,to,use,args,to,use,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,instantiation,of,bean,failed,ex
ConstructorResolver -> public BeanWrapper autowireConstructor( 			final String beanName, final RootBeanDefinition mbd, Constructor[] chosenCtors, final Object[] explicitArgs);1383520795;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(_			final String beanName, final RootBeanDefinition mbd, Constructor[] chosenCtors, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)__			}_		}__		if (constructorToUse == null) {_			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			_			Constructor[] candidates = chosenCtors__			if (candidates == null) {_				Class<?> beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_									"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}_			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor> ambiguousConstructors = null__			List<Exception> causes = null___			for (int i = 0_ i < candidates.length_ i++) {_				Constructor<?> candidate = candidates[i]__				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = null__						if (constructorPropertiesAnnotationAvailable) {_							paramNames = ConstructorPropertiesChecker.evaluateAnnotation(candidate, paramTypes.length)__						}_						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(_								beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (this.beanFactory.logger.isTraceEnabled()) {_							this.beanFactory.logger.trace(_									"Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						if (i == candidates.length - 1 && constructorToUse == null) {_							if (causes != null) {_								for (Exception cause : causes) {_									this.beanFactory.onSuppressedException(cause)__								}_							}_							throw ex__						}_						else {_							_							if (causes == null) {_								causes = new LinkedList<Exception>()__							}_							causes.add(ex)__							continue__						}_					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<Constructor>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Constructor ctorToUse = constructorToUse__				final Object[] argumentsToUse = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, ctorToUse, argumentsToUse)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, constructorToUse, argsToUse)__			}__			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Instantiation of bean failed", ex)__		}_	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,final,string,bean,name,final,root,bean,definition,mbd,constructor,chosen,ctors,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,if,constructor,to,use,null,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,list,exception,causes,null,for,int,i,0,i,candidates,length,i,constructor,candidate,candidates,i,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,null,if,constructor,properties,annotation,available,param,names,constructor,properties,checker,evaluate,annotation,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,i,candidates,length,1,constructor,to,use,null,if,causes,null,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,else,if,causes,null,causes,new,linked,list,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,constructor,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,constructor,ctor,to,use,constructor,to,use,final,object,arguments,to,use,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,ctor,to,use,arguments,to,use,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,constructor,to,use,args,to,use,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,instantiation,of,bean,failed,ex
ConstructorResolver -> private int resolveConstructorArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1328020251;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1356735495;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1357119239;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1362408075;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1368482696;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1383520795;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1385412762;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1392245296;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1392250115;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1394032589;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1404505819;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1409688815;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> public BeanWrapper autowireConstructor( 			final String beanName, final RootBeanDefinition mbd, Constructor<?>[] chosenCtors, final Object[] explicitArgs);1385412762;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(_			final String beanName, final RootBeanDefinition mbd, Constructor<?>[] chosenCtors, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor<?> constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)__			}_		}__		if (constructorToUse == null) {_			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			_			Constructor<?>[] candidates = chosenCtors__			if (candidates == null) {_				Class<?> beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_									"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}_			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor<?>> ambiguousConstructors = null__			List<Exception> causes = null___			for (int i = 0_ i < candidates.length_ i++) {_				Constructor<?> candidate = candidates[i]__				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = null__						if (constructorPropertiesAnnotationAvailable) {_							paramNames = ConstructorPropertiesChecker.evaluateAnnotation(candidate, paramTypes.length)__						}_						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(_								beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (this.beanFactory.logger.isTraceEnabled()) {_							this.beanFactory.logger.trace(_									"Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						if (i == candidates.length - 1 && constructorToUse == null) {_							if (causes != null) {_								for (Exception cause : causes) {_									this.beanFactory.onSuppressedException(cause)__								}_							}_							throw ex__						}_						else {_							_							if (causes == null) {_								causes = new LinkedList<Exception>()__							}_							causes.add(ex)__							continue__						}_					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<Constructor<?>>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Constructor<?> ctorToUse = constructorToUse__				final Object[] argumentsToUse = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, ctorToUse, argumentsToUse)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, constructorToUse, argsToUse)__			}__			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Instantiation of bean failed", ex)__		}_	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,final,string,bean,name,final,root,bean,definition,mbd,constructor,chosen,ctors,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,if,constructor,to,use,null,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,list,exception,causes,null,for,int,i,0,i,candidates,length,i,constructor,candidate,candidates,i,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,null,if,constructor,properties,annotation,available,param,names,constructor,properties,checker,evaluate,annotation,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,i,candidates,length,1,constructor,to,use,null,if,causes,null,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,else,if,causes,null,causes,new,linked,list,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,constructor,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,constructor,ctor,to,use,constructor,to,use,final,object,arguments,to,use,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,ctor,to,use,arguments,to,use,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,constructor,to,use,args,to,use,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,instantiation,of,bean,failed,ex
ConstructorResolver -> public BeanWrapper autowireConstructor( 			final String beanName, final RootBeanDefinition mbd, Constructor<?>[] chosenCtors, final Object[] explicitArgs);1392245296;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(_			final String beanName, final RootBeanDefinition mbd, Constructor<?>[] chosenCtors, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor<?> constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)__			}_		}__		if (constructorToUse == null) {_			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			_			Constructor<?>[] candidates = chosenCtors__			if (candidates == null) {_				Class<?> beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_									"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}_			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor<?>> ambiguousConstructors = null__			List<Exception> causes = null___			for (int i = 0_ i < candidates.length_ i++) {_				Constructor<?> candidate = candidates[i]__				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)__						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(_								beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (this.beanFactory.logger.isTraceEnabled()) {_							this.beanFactory.logger.trace(_									"Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						if (i == candidates.length - 1 && constructorToUse == null) {_							if (causes != null) {_								for (Exception cause : causes) {_									this.beanFactory.onSuppressedException(cause)__								}_							}_							throw ex__						}_						else {_							_							if (causes == null) {_								causes = new LinkedList<Exception>()__							}_							causes.add(ex)__							continue__						}_					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<Constructor<?>>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Constructor<?> ctorToUse = constructorToUse__				final Object[] argumentsToUse = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, ctorToUse, argumentsToUse)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, constructorToUse, argsToUse)__			}__			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Instantiation of bean failed", ex)__		}_	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,final,string,bean,name,final,root,bean,definition,mbd,constructor,chosen,ctors,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,if,constructor,to,use,null,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,list,exception,causes,null,for,int,i,0,i,candidates,length,i,constructor,candidate,candidates,i,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,constructor,properties,checker,evaluate,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,i,candidates,length,1,constructor,to,use,null,if,causes,null,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,else,if,causes,null,causes,new,linked,list,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,constructor,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,constructor,ctor,to,use,constructor,to,use,final,object,arguments,to,use,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,ctor,to,use,arguments,to,use,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,constructor,to,use,args,to,use,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,instantiation,of,bean,failed,ex
ConstructorResolver -> public BeanWrapper autowireConstructor( 			final String beanName, final RootBeanDefinition mbd, Constructor<?>[] chosenCtors, final Object[] explicitArgs);1392250115;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(_			final String beanName, final RootBeanDefinition mbd, Constructor<?>[] chosenCtors, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor<?> constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)__			}_		}__		if (constructorToUse == null) {_			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			_			Constructor<?>[] candidates = chosenCtors__			if (candidates == null) {_				Class<?> beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_									"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}_			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor<?>> ambiguousConstructors = null__			List<Exception> causes = null___			for (int i = 0_ i < candidates.length_ i++) {_				Constructor<?> candidate = candidates[i]__				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)__						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(_								beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (this.beanFactory.logger.isTraceEnabled()) {_							this.beanFactory.logger.trace(_									"Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						if (i == candidates.length - 1 && constructorToUse == null) {_							if (causes != null) {_								for (Exception cause : causes) {_									this.beanFactory.onSuppressedException(cause)__								}_							}_							throw ex__						}_						else {_							_							if (causes == null) {_								causes = new LinkedList<Exception>()__							}_							causes.add(ex)__							continue__						}_					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<Constructor<?>>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Constructor<?> ctorToUse = constructorToUse__				final Object[] argumentsToUse = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, ctorToUse, argumentsToUse)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, constructorToUse, argsToUse)__			}__			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Instantiation of bean failed", ex)__		}_	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,final,string,bean,name,final,root,bean,definition,mbd,constructor,chosen,ctors,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,if,constructor,to,use,null,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,list,exception,causes,null,for,int,i,0,i,candidates,length,i,constructor,candidate,candidates,i,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,constructor,properties,checker,evaluate,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,i,candidates,length,1,constructor,to,use,null,if,causes,null,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,else,if,causes,null,causes,new,linked,list,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,constructor,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,constructor,ctor,to,use,constructor,to,use,final,object,arguments,to,use,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,ctor,to,use,arguments,to,use,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,constructor,to,use,args,to,use,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,instantiation,of,bean,failed,ex
ConstructorResolver -> public BeanWrapper autowireConstructor( 			final String beanName, final RootBeanDefinition mbd, Constructor<?>[] chosenCtors, final Object[] explicitArgs);1394032589;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(_			final String beanName, final RootBeanDefinition mbd, Constructor<?>[] chosenCtors, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor<?> constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)__			}_		}__		if (constructorToUse == null) {_			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			_			Constructor<?>[] candidates = chosenCtors__			if (candidates == null) {_				Class<?> beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_									"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}_			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor<?>> ambiguousConstructors = null__			List<Exception> causes = null___			for (int i = 0_ i < candidates.length_ i++) {_				Constructor<?> candidate = candidates[i]__				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)__						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(_								beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (this.beanFactory.logger.isTraceEnabled()) {_							this.beanFactory.logger.trace(_									"Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						if (i == candidates.length - 1 && constructorToUse == null) {_							if (causes != null) {_								for (Exception cause : causes) {_									this.beanFactory.onSuppressedException(cause)__								}_							}_							throw ex__						}_						else {_							_							if (causes == null) {_								causes = new LinkedList<Exception>()__							}_							causes.add(ex)__							continue__						}_					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<Constructor<?>>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Constructor<?> ctorToUse = constructorToUse__				final Object[] argumentsToUse = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, ctorToUse, argumentsToUse)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, constructorToUse, argsToUse)__			}__			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Instantiation of bean failed", ex)__		}_	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,final,string,bean,name,final,root,bean,definition,mbd,constructor,chosen,ctors,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,if,constructor,to,use,null,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,list,exception,causes,null,for,int,i,0,i,candidates,length,i,constructor,candidate,candidates,i,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,constructor,properties,checker,evaluate,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,i,candidates,length,1,constructor,to,use,null,if,causes,null,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,else,if,causes,null,causes,new,linked,list,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,constructor,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,constructor,ctor,to,use,constructor,to,use,final,object,arguments,to,use,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,ctor,to,use,arguments,to,use,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,constructor,to,use,args,to,use,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,instantiation,of,bean,failed,ex
ConstructorResolver -> public BeanWrapper autowireConstructor( 			final String beanName, final RootBeanDefinition mbd, Constructor<?>[] chosenCtors, final Object[] explicitArgs);1404505819;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(_			final String beanName, final RootBeanDefinition mbd, Constructor<?>[] chosenCtors, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor<?> constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)__			}_		}__		if (constructorToUse == null) {_			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			_			Constructor<?>[] candidates = chosenCtors__			if (candidates == null) {_				Class<?> beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_									"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}_			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor<?>> ambiguousConstructors = null__			List<Exception> causes = null___			for (int i = 0_ i < candidates.length_ i++) {_				Constructor<?> candidate = candidates[i]__				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)__						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(_								beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (this.beanFactory.logger.isTraceEnabled()) {_							this.beanFactory.logger.trace(_									"Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						if (i == candidates.length - 1 && constructorToUse == null) {_							if (causes != null) {_								for (Exception cause : causes) {_									this.beanFactory.onSuppressedException(cause)__								}_							}_							throw ex__						}_						else {_							_							if (causes == null) {_								causes = new LinkedList<Exception>()__							}_							causes.add(ex)__							continue__						}_					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<Constructor<?>>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Constructor<?> ctorToUse = constructorToUse__				final Object[] argumentsToUse = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, ctorToUse, argumentsToUse)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, constructorToUse, argsToUse)__			}__			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Instantiation of bean failed", ex)__		}_	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,final,string,bean,name,final,root,bean,definition,mbd,constructor,chosen,ctors,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,if,constructor,to,use,null,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,list,exception,causes,null,for,int,i,0,i,candidates,length,i,constructor,candidate,candidates,i,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,constructor,properties,checker,evaluate,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,i,candidates,length,1,constructor,to,use,null,if,causes,null,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,else,if,causes,null,causes,new,linked,list,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,constructor,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,constructor,ctor,to,use,constructor,to,use,final,object,arguments,to,use,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,ctor,to,use,arguments,to,use,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,constructor,to,use,args,to,use,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,instantiation,of,bean,failed,ex
ConstructorResolver -> public BeanWrapper autowireConstructor( 			final String beanName, final RootBeanDefinition mbd, Constructor<?>[] chosenCtors, final Object[] explicitArgs);1409688815;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(_			final String beanName, final RootBeanDefinition mbd, Constructor<?>[] chosenCtors, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor<?> constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)__			}_		}__		if (constructorToUse == null) {_			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			_			Constructor<?>[] candidates = chosenCtors__			if (candidates == null) {_				Class<?> beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_									"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}_			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor<?>> ambiguousConstructors = null__			List<Exception> causes = null___			for (int i = 0_ i < candidates.length_ i++) {_				Constructor<?> candidate = candidates[i]__				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)__						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(_								beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (this.beanFactory.logger.isTraceEnabled()) {_							this.beanFactory.logger.trace(_									"Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						if (i == candidates.length - 1 && constructorToUse == null) {_							if (causes != null) {_								for (Exception cause : causes) {_									this.beanFactory.onSuppressedException(cause)__								}_							}_							throw ex__						}_						else {_							_							if (causes == null) {_								causes = new LinkedList<Exception>()__							}_							causes.add(ex)__							continue__						}_					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<Constructor<?>>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Constructor<?> ctorToUse = constructorToUse__				final Object[] argumentsToUse = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, ctorToUse, argumentsToUse)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, constructorToUse, argsToUse)__			}__			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Instantiation of bean failed", ex)__		}_	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,final,string,bean,name,final,root,bean,definition,mbd,constructor,chosen,ctors,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,if,constructor,to,use,null,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,list,exception,causes,null,for,int,i,0,i,candidates,length,i,constructor,candidate,candidates,i,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,constructor,properties,checker,evaluate,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,i,candidates,length,1,constructor,to,use,null,if,causes,null,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,else,if,causes,null,causes,new,linked,list,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,constructor,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,constructor,ctor,to,use,constructor,to,use,final,object,arguments,to,use,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,ctor,to,use,arguments,to,use,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,constructor,to,use,args,to,use,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,instantiation,of,bean,failed,ex
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class<?>[] paramTypes, @Nullable String[] paramNames, Executable executable, 			boolean autowiring) throws UnsatisfiedDependencyException;1496837955;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class<?>[] paramTypes, @Nullable String[] paramNames, Executable executable,_			boolean autowiring) throws UnsatisfiedDependencyException {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders = new HashSet<>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : "")__			_			ConstructorArgumentValues.ValueHolder valueHolder =_					resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__			_			_			_			if (valueHolder == null && (!autowiring || paramTypes.length == resolvedValues.getArgumentCount())) {_				valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType, methodParam)__					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_								"Could not convert argument value of type [" +_										ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_										"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_					Object sourceHolder = valueHolder.getSource()__					if (sourceHolder instanceof ConstructorArgumentValues.ValueHolder) {_						Object sourceValue = ((ConstructorArgumentValues.ValueHolder) sourceHolder).getValue()__						args.resolveNecessary = true__						args.preparedArguments[paramIndex] = sourceValue__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_							"Ambiguous argument values for parameter of type [" + paramType.getName() +_							"] - did you specify the correct bean references as arguments?")__				}_				try {_					Object autowiredArgument =_							resolveAutowiredArgument(methodParam, beanName, autowiredBeanNames, converter)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam), ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (this.beanFactory.logger.isDebugEnabled()) {_				this.beanFactory.logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + (executable instanceof Constructor ? "constructor" : "factory method") +_						" to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,nullable,string,param,names,executable,executable,boolean,autowiring,throws,unsatisfied,dependency,exception,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,constructor,argument,values,value,holder,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,param,types,length,resolved,values,get,argument,count,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,method,parameter,method,param,method,parameter,for,executable,executable,param,index,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,object,source,holder,value,holder,get,source,if,source,holder,instanceof,constructor,argument,values,value,holder,object,source,value,constructor,argument,values,value,holder,source,holder,get,value,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,method,parameter,method,param,method,parameter,for,executable,executable,param,index,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ambiguous,argument,values,for,parameter,of,type,param,type,get,name,did,you,specify,the,correct,bean,references,as,arguments,try,object,autowired,argument,resolve,autowired,argument,method,param,bean,name,autowired,bean,names,converter,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,this,bean,factory,logger,is,debug,enabled,this,bean,factory,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,executable,instanceof,constructor,constructor,factory,method,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class<?>[] paramTypes, @Nullable String[] paramNames, Executable executable, 			boolean autowiring) throws UnsatisfiedDependencyException;1503007895;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class<?>[] paramTypes, @Nullable String[] paramNames, Executable executable,_			boolean autowiring) throws UnsatisfiedDependencyException {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders = new HashSet<>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : "")__			_			ConstructorArgumentValues.ValueHolder valueHolder =_					resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__			_			_			_			if (valueHolder == null && (!autowiring || paramTypes.length == resolvedValues.getArgumentCount())) {_				valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType, methodParam)__					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_								"Could not convert argument value of type [" +_										ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_										"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_					Object sourceHolder = valueHolder.getSource()__					if (sourceHolder instanceof ConstructorArgumentValues.ValueHolder) {_						Object sourceValue = ((ConstructorArgumentValues.ValueHolder) sourceHolder).getValue()__						args.resolveNecessary = true__						args.preparedArguments[paramIndex] = sourceValue__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_							"Ambiguous argument values for parameter of type [" + paramType.getName() +_							"] - did you specify the correct bean references as arguments?")__				}_				try {_					Object autowiredArgument =_							resolveAutowiredArgument(methodParam, beanName, autowiredBeanNames, converter)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam), ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (this.beanFactory.logger.isDebugEnabled()) {_				this.beanFactory.logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + (executable instanceof Constructor ? "constructor" : "factory method") +_						" to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,nullable,string,param,names,executable,executable,boolean,autowiring,throws,unsatisfied,dependency,exception,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,constructor,argument,values,value,holder,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,param,types,length,resolved,values,get,argument,count,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,method,parameter,method,param,method,parameter,for,executable,executable,param,index,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,object,source,holder,value,holder,get,source,if,source,holder,instanceof,constructor,argument,values,value,holder,object,source,value,constructor,argument,values,value,holder,source,holder,get,value,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,method,parameter,method,param,method,parameter,for,executable,executable,param,index,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ambiguous,argument,values,for,parameter,of,type,param,type,get,name,did,you,specify,the,correct,bean,references,as,arguments,try,object,autowired,argument,resolve,autowired,argument,method,param,bean,name,autowired,bean,names,converter,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,this,bean,factory,logger,is,debug,enabled,this,bean,factory,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,executable,instanceof,constructor,constructor,factory,method,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class<?>[] paramTypes, @Nullable String[] paramNames, Executable executable, 			boolean autowiring) throws UnsatisfiedDependencyException;1503414318;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class<?>[] paramTypes, @Nullable String[] paramNames, Executable executable,_			boolean autowiring) throws UnsatisfiedDependencyException {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders = new HashSet<>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : "")__			_			ConstructorArgumentValues.ValueHolder valueHolder =_					resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__			_			_			_			if (valueHolder == null && (!autowiring || paramTypes.length == resolvedValues.getArgumentCount())) {_				valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType, methodParam)__					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_								"Could not convert argument value of type [" +_										ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_										"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_					Object sourceHolder = valueHolder.getSource()__					if (sourceHolder instanceof ConstructorArgumentValues.ValueHolder) {_						Object sourceValue = ((ConstructorArgumentValues.ValueHolder) sourceHolder).getValue()__						args.resolveNecessary = true__						args.preparedArguments[paramIndex] = sourceValue__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_							"Ambiguous argument values for parameter of type [" + paramType.getName() +_							"] - did you specify the correct bean references as arguments?")__				}_				try {_					Object autowiredArgument =_							resolveAutowiredArgument(methodParam, beanName, autowiredBeanNames, converter)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam), ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (this.beanFactory.logger.isDebugEnabled()) {_				this.beanFactory.logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + (executable instanceof Constructor ? "constructor" : "factory method") +_						" to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,nullable,string,param,names,executable,executable,boolean,autowiring,throws,unsatisfied,dependency,exception,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,constructor,argument,values,value,holder,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,param,types,length,resolved,values,get,argument,count,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,method,parameter,method,param,method,parameter,for,executable,executable,param,index,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,object,source,holder,value,holder,get,source,if,source,holder,instanceof,constructor,argument,values,value,holder,object,source,value,constructor,argument,values,value,holder,source,holder,get,value,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,method,parameter,method,param,method,parameter,for,executable,executable,param,index,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ambiguous,argument,values,for,parameter,of,type,param,type,get,name,did,you,specify,the,correct,bean,references,as,arguments,try,object,autowired,argument,resolve,autowired,argument,method,param,bean,name,autowired,bean,names,converter,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,this,bean,factory,logger,is,debug,enabled,this,bean,factory,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,executable,instanceof,constructor,constructor,factory,method,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class<?>[] paramTypes, @Nullable String[] paramNames, Executable executable, 			boolean autowiring) throws UnsatisfiedDependencyException;1506551472;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class<?>[] paramTypes, @Nullable String[] paramNames, Executable executable,_			boolean autowiring) throws UnsatisfiedDependencyException {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders = new HashSet<>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : "")__			_			ConstructorArgumentValues.ValueHolder valueHolder =_					resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__			_			_			_			if (valueHolder == null && (!autowiring || paramTypes.length == resolvedValues.getArgumentCount())) {_				valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType, methodParam)__					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_								"Could not convert argument value of type [" +_										ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_										"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_					Object sourceHolder = valueHolder.getSource()__					if (sourceHolder instanceof ConstructorArgumentValues.ValueHolder) {_						Object sourceValue = ((ConstructorArgumentValues.ValueHolder) sourceHolder).getValue()__						args.resolveNecessary = true__						args.preparedArguments[paramIndex] = sourceValue__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_							"Ambiguous argument values for parameter of type [" + paramType.getName() +_							"] - did you specify the correct bean references as arguments?")__				}_				try {_					Object autowiredArgument =_							resolveAutowiredArgument(methodParam, beanName, autowiredBeanNames, converter)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam), ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (this.beanFactory.logger.isDebugEnabled()) {_				this.beanFactory.logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + (executable instanceof Constructor ? "constructor" : "factory method") +_						" to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,nullable,string,param,names,executable,executable,boolean,autowiring,throws,unsatisfied,dependency,exception,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,constructor,argument,values,value,holder,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,param,types,length,resolved,values,get,argument,count,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,method,parameter,method,param,method,parameter,for,executable,executable,param,index,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,object,source,holder,value,holder,get,source,if,source,holder,instanceof,constructor,argument,values,value,holder,object,source,value,constructor,argument,values,value,holder,source,holder,get,value,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,method,parameter,method,param,method,parameter,for,executable,executable,param,index,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ambiguous,argument,values,for,parameter,of,type,param,type,get,name,did,you,specify,the,correct,bean,references,as,arguments,try,object,autowired,argument,resolve,autowired,argument,method,param,bean,name,autowired,bean,names,converter,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,this,bean,factory,logger,is,debug,enabled,this,bean,factory,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,executable,instanceof,constructor,constructor,factory,method,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> protected Object resolveAutowiredArgument( 			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter);1328020251;Template method for resolving the specified argument which is supposed to be autowired.;protected Object resolveAutowiredArgument(_			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) {__		return this.beanFactory.resolveDependency(_				new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,set,string,autowired,bean,names,type,converter,type,converter,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter
ConstructorResolver -> protected Object resolveAutowiredArgument( 			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter);1356735495;Template method for resolving the specified argument which is supposed to be autowired.;protected Object resolveAutowiredArgument(_			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) {__		return this.beanFactory.resolveDependency(_				new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,set,string,autowired,bean,names,type,converter,type,converter,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter
ConstructorResolver -> protected Object resolveAutowiredArgument( 			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter);1357119239;Template method for resolving the specified argument which is supposed to be autowired.;protected Object resolveAutowiredArgument(_			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) {__		return this.beanFactory.resolveDependency(_				new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,set,string,autowired,bean,names,type,converter,type,converter,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter
ConstructorResolver -> protected Object resolveAutowiredArgument( 			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter);1362408075;Template method for resolving the specified argument which is supposed to be autowired.;protected Object resolveAutowiredArgument(_			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) {__		return this.beanFactory.resolveDependency(_				new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,set,string,autowired,bean,names,type,converter,type,converter,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter
ConstructorResolver -> protected Object resolveAutowiredArgument( 			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter);1368482696;Template method for resolving the specified argument which is supposed to be autowired.;protected Object resolveAutowiredArgument(_			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) {__		return this.beanFactory.resolveDependency(_				new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,set,string,autowired,bean,names,type,converter,type,converter,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter
ConstructorResolver -> protected Object resolveAutowiredArgument( 			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter);1383520795;Template method for resolving the specified argument which is supposed to be autowired.;protected Object resolveAutowiredArgument(_			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) {__		return this.beanFactory.resolveDependency(_				new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,set,string,autowired,bean,names,type,converter,type,converter,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter
ConstructorResolver -> protected Object resolveAutowiredArgument( 			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter);1385412762;Template method for resolving the specified argument which is supposed to be autowired.;protected Object resolveAutowiredArgument(_			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) {__		return this.beanFactory.resolveDependency(_				new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,set,string,autowired,bean,names,type,converter,type,converter,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter
ConstructorResolver -> protected Object resolveAutowiredArgument( 			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter);1392245296;Template method for resolving the specified argument which is supposed to be autowired.;protected Object resolveAutowiredArgument(_			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) {__		return this.beanFactory.resolveDependency(_				new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,set,string,autowired,bean,names,type,converter,type,converter,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter
ConstructorResolver -> protected Object resolveAutowiredArgument( 			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter);1392250115;Template method for resolving the specified argument which is supposed to be autowired.;protected Object resolveAutowiredArgument(_			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) {__		return this.beanFactory.resolveDependency(_				new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,set,string,autowired,bean,names,type,converter,type,converter,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter
ConstructorResolver -> protected Object resolveAutowiredArgument( 			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter);1394032589;Template method for resolving the specified argument which is supposed to be autowired.;protected Object resolveAutowiredArgument(_			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) {__		return this.beanFactory.resolveDependency(_				new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,set,string,autowired,bean,names,type,converter,type,converter,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter
ConstructorResolver -> protected Object resolveAutowiredArgument( 			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter);1404505819;Template method for resolving the specified argument which is supposed to be autowired.;protected Object resolveAutowiredArgument(_			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) {__		return this.beanFactory.resolveDependency(_				new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,set,string,autowired,bean,names,type,converter,type,converter,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter
ConstructorResolver -> protected Object resolveAutowiredArgument( 			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter);1409688815;Template method for resolving the specified argument which is supposed to be autowired.;protected Object resolveAutowiredArgument(_			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) {__		return this.beanFactory.resolveDependency(_				new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,set,string,autowired,bean,names,type,converter,type,converter,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter
ConstructorResolver -> protected Object resolveAutowiredArgument( 			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter);1413920443;Template method for resolving the specified argument which is supposed to be autowired.;protected Object resolveAutowiredArgument(_			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) {__		return this.beanFactory.resolveDependency(_				new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,set,string,autowired,bean,names,type,converter,type,converter,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter
ConstructorResolver -> protected Object resolveAutowiredArgument( 			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter);1419352511;Template method for resolving the specified argument which is supposed to be autowired.;protected Object resolveAutowiredArgument(_			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) {__		return this.beanFactory.resolveDependency(_				new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,set,string,autowired,bean,names,type,converter,type,converter,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter
ConstructorResolver -> protected Object resolveAutowiredArgument( 			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter);1432125256;Template method for resolving the specified argument which is supposed to be autowired.;protected Object resolveAutowiredArgument(_			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) {__		return this.beanFactory.resolveDependency(_				new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,set,string,autowired,bean,names,type,converter,type,converter,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter
ConstructorResolver -> protected Object resolveAutowiredArgument( 			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter);1450707100;Template method for resolving the specified argument which is supposed to be autowired.;protected Object resolveAutowiredArgument(_			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) {__		return this.beanFactory.resolveDependency(_				new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,set,string,autowired,bean,names,type,converter,type,converter,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter
ConstructorResolver -> protected Object resolveAutowiredArgument( 			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter);1456432609;Template method for resolving the specified argument which is supposed to be autowired.;protected Object resolveAutowiredArgument(_			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) {__		return this.beanFactory.resolveDependency(_				new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,set,string,autowired,bean,names,type,converter,type,converter,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter
ConstructorResolver -> protected Object resolveAutowiredArgument( 			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter);1456486263;Template method for resolving the specified argument which is supposed to be autowired.;protected Object resolveAutowiredArgument(_			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) {__		return this.beanFactory.resolveDependency(_				new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,set,string,autowired,bean,names,type,converter,type,converter,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter
ConstructorResolver -> protected Object resolveAutowiredArgument( 			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter);1457697160;Template method for resolving the specified argument which is supposed to be autowired.;protected Object resolveAutowiredArgument(_			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) {__		return this.beanFactory.resolveDependency(_				new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,set,string,autowired,bean,names,type,converter,type,converter,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter
ConstructorResolver -> protected Object resolveAutowiredArgument( 			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter);1458311433;Template method for resolving the specified argument which is supposed to be autowired.;protected Object resolveAutowiredArgument(_			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) {__		if (InjectionPoint.class.isAssignableFrom(param.getParameterType())) {_			InjectionPoint injectionPoint = currentInjectionPoint.get()__			if (injectionPoint == null) {_				throw new IllegalStateException("No current InjectionPoint available for " + param)__			}_			return injectionPoint__		}_		return this.beanFactory.resolveDependency(_				new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,set,string,autowired,bean,names,type,converter,type,converter,if,injection,point,class,is,assignable,from,param,get,parameter,type,injection,point,injection,point,current,injection,point,get,if,injection,point,null,throw,new,illegal,state,exception,no,current,injection,point,available,for,param,return,injection,point,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter
ConstructorResolver -> protected Object resolveAutowiredArgument( 			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter);1458323493;Template method for resolving the specified argument which is supposed to be autowired.;protected Object resolveAutowiredArgument(_			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) {__		if (InjectionPoint.class.isAssignableFrom(param.getParameterType())) {_			InjectionPoint injectionPoint = currentInjectionPoint.get()__			if (injectionPoint == null) {_				throw new IllegalStateException("No current InjectionPoint available for " + param)__			}_			return injectionPoint__		}_		return this.beanFactory.resolveDependency(_				new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,set,string,autowired,bean,names,type,converter,type,converter,if,injection,point,class,is,assignable,from,param,get,parameter,type,injection,point,injection,point,current,injection,point,get,if,injection,point,null,throw,new,illegal,state,exception,no,current,injection,point,available,for,param,return,injection,point,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter
ConstructorResolver -> protected Object resolveAutowiredArgument( 			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter);1460031510;Template method for resolving the specified argument which is supposed to be autowired.;protected Object resolveAutowiredArgument(_			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) {__		if (InjectionPoint.class.isAssignableFrom(param.getParameterType())) {_			InjectionPoint injectionPoint = currentInjectionPoint.get()__			if (injectionPoint == null) {_				throw new IllegalStateException("No current InjectionPoint available for " + param)__			}_			return injectionPoint__		}_		return this.beanFactory.resolveDependency(_				new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,set,string,autowired,bean,names,type,converter,type,converter,if,injection,point,class,is,assignable,from,param,get,parameter,type,injection,point,injection,point,current,injection,point,get,if,injection,point,null,throw,new,illegal,state,exception,no,current,injection,point,available,for,param,return,injection,point,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter
ConstructorResolver -> protected Object resolveAutowiredArgument( 			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter);1467730834;Template method for resolving the specified argument which is supposed to be autowired.;protected Object resolveAutowiredArgument(_			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) {__		if (InjectionPoint.class.isAssignableFrom(param.getParameterType())) {_			InjectionPoint injectionPoint = currentInjectionPoint.get()__			if (injectionPoint == null) {_				throw new IllegalStateException("No current InjectionPoint available for " + param)__			}_			return injectionPoint__		}_		return this.beanFactory.resolveDependency(_				new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,set,string,autowired,bean,names,type,converter,type,converter,if,injection,point,class,is,assignable,from,param,get,parameter,type,injection,point,injection,point,current,injection,point,get,if,injection,point,null,throw,new,illegal,state,exception,no,current,injection,point,available,for,param,return,injection,point,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter
ConstructorResolver -> protected Object resolveAutowiredArgument( 			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter);1467844672;Template method for resolving the specified argument which is supposed to be autowired.;protected Object resolveAutowiredArgument(_			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) {__		if (InjectionPoint.class.isAssignableFrom(param.getParameterType())) {_			InjectionPoint injectionPoint = currentInjectionPoint.get()__			if (injectionPoint == null) {_				throw new IllegalStateException("No current InjectionPoint available for " + param)__			}_			return injectionPoint__		}_		return this.beanFactory.resolveDependency(_				new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,set,string,autowired,bean,names,type,converter,type,converter,if,injection,point,class,is,assignable,from,param,get,parameter,type,injection,point,injection,point,current,injection,point,get,if,injection,point,null,throw,new,illegal,state,exception,no,current,injection,point,available,for,param,return,injection,point,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter
ConstructorResolver -> protected Object resolveAutowiredArgument( 			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter);1469030791;Template method for resolving the specified argument which is supposed to be autowired.;protected Object resolveAutowiredArgument(_			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) {__		if (InjectionPoint.class.isAssignableFrom(param.getParameterType())) {_			InjectionPoint injectionPoint = currentInjectionPoint.get()__			if (injectionPoint == null) {_				throw new IllegalStateException("No current InjectionPoint available for " + param)__			}_			return injectionPoint__		}_		return this.beanFactory.resolveDependency(_				new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,set,string,autowired,bean,names,type,converter,type,converter,if,injection,point,class,is,assignable,from,param,get,parameter,type,injection,point,injection,point,current,injection,point,get,if,injection,point,null,throw,new,illegal,state,exception,no,current,injection,point,available,for,param,return,injection,point,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter
ConstructorResolver -> protected Object resolveAutowiredArgument( 			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter);1469367243;Template method for resolving the specified argument which is supposed to be autowired.;protected Object resolveAutowiredArgument(_			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) {__		if (InjectionPoint.class.isAssignableFrom(param.getParameterType())) {_			InjectionPoint injectionPoint = currentInjectionPoint.get()__			if (injectionPoint == null) {_				throw new IllegalStateException("No current InjectionPoint available for " + param)__			}_			return injectionPoint__		}_		return this.beanFactory.resolveDependency(_				new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,set,string,autowired,bean,names,type,converter,type,converter,if,injection,point,class,is,assignable,from,param,get,parameter,type,injection,point,injection,point,current,injection,point,get,if,injection,point,null,throw,new,illegal,state,exception,no,current,injection,point,available,for,param,return,injection,point,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter
ConstructorResolver -> protected Object resolveAutowiredArgument( 			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter);1478538021;Template method for resolving the specified argument which is supposed to be autowired.;protected Object resolveAutowiredArgument(_			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) {__		if (InjectionPoint.class.isAssignableFrom(param.getParameterType())) {_			InjectionPoint injectionPoint = currentInjectionPoint.get()__			if (injectionPoint == null) {_				throw new IllegalStateException("No current InjectionPoint available for " + param)__			}_			return injectionPoint__		}_		return this.beanFactory.resolveDependency(_				new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,set,string,autowired,bean,names,type,converter,type,converter,if,injection,point,class,is,assignable,from,param,get,parameter,type,injection,point,injection,point,current,injection,point,get,if,injection,point,null,throw,new,illegal,state,exception,no,current,injection,point,available,for,param,return,injection,point,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter
ConstructorResolver -> protected Object resolveAutowiredArgument( 			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter);1495868221;Template method for resolving the specified argument which is supposed to be autowired.;protected Object resolveAutowiredArgument(_			MethodParameter param, String beanName, Set<String> autowiredBeanNames, TypeConverter typeConverter) {__		if (InjectionPoint.class.isAssignableFrom(param.getParameterType())) {_			InjectionPoint injectionPoint = currentInjectionPoint.get()__			if (injectionPoint == null) {_				throw new IllegalStateException("No current InjectionPoint available for " + param)__			}_			return injectionPoint__		}_		return this.beanFactory.resolveDependency(_				new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,set,string,autowired,bean,names,type,converter,type,converter,if,injection,point,class,is,assignable,from,param,get,parameter,type,injection,point,injection,point,current,injection,point,get,if,injection,point,null,throw,new,illegal,state,exception,no,current,injection,point,available,for,param,return,injection,point,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter
ConstructorResolver -> private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1413920443;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._<p>This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,p,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1419352511;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._<p>This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,p,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1432125256;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._<p>This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,p,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1450707100;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._<p>This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,p,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1456432609;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._<p>This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,p,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1456486263;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._<p>This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,p,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1457697160;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._<p>This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,p,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1458311433;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._<p>This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,p,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1458323493;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._<p>This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,p,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1460031510;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._<p>This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,p,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1467730834;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._<p>This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,p,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1467844672;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._<p>This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,p,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1469030791;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._<p>This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,p,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1469367243;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._<p>This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,p,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1478538021;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._<p>This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,p,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1495868221;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._<p>This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,p,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1496259743;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._<p>This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,p,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1496837955;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._<p>This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder = new ConstructorArgumentValues.ValueHolder(_						resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,p,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1503007895;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._<p>This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder = new ConstructorArgumentValues.ValueHolder(_						resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,p,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1503414318;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._<p>This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder = new ConstructorArgumentValues.ValueHolder(_						resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,p,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1506551472;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._<p>This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder = new ConstructorArgumentValues.ValueHolder(_						resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,p,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1510606271;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._<p>This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder = new ConstructorArgumentValues.ValueHolder(_						resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,p,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1519295386;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._<p>This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder = new ConstructorArgumentValues.ValueHolder(_						resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,p,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1519560860;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._<p>This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder = new ConstructorArgumentValues.ValueHolder(_						resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,p,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1527623493;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._<p>This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder = new ConstructorArgumentValues.ValueHolder(_						resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,p,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1530174524;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._<p>This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder = new ConstructorArgumentValues.ValueHolder(_						resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,p,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1532385723;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._<p>This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder = new ConstructorArgumentValues.ValueHolder(_						resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,p,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1532430234;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._<p>This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder = new ConstructorArgumentValues.ValueHolder(_						resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,p,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1532577558;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._<p>This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder = new ConstructorArgumentValues.ValueHolder(_						resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,p,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1534157021;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._<p>This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder = new ConstructorArgumentValues.ValueHolder(_						resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,p,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1537388389;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._<p>This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder = new ConstructorArgumentValues.ValueHolder(_						resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,p,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1539377630;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._<p>This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder = new ConstructorArgumentValues.ValueHolder(_						resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,p,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues);1542899558;Resolve the constructor arguments for this bean into the resolvedValues object._This may involve looking up other beans._<p>This method is also used for handling invocations of static factory methods.;private int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			ConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)___		int minNrOfArgs = cargs.getArgumentCount()___		for (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {_			int index = entry.getKey()__			if (index < 0) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid constructor argument index: " + index)__			}_			if (index > minNrOfArgs) {_				minNrOfArgs = index + 1__			}_			ConstructorArgumentValues.ValueHolder valueHolder = entry.getValue()__			if (valueHolder.isConverted()) {_				resolvedValues.addIndexedArgumentValue(index, valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder =_						new ConstructorArgumentValues.ValueHolder(resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addIndexedArgumentValue(index, resolvedValueHolder)__			}_		}__		for (ConstructorArgumentValues.ValueHolder valueHolder : cargs.getGenericArgumentValues()) {_			if (valueHolder.isConverted()) {_				resolvedValues.addGenericArgumentValue(valueHolder)__			}_			else {_				Object resolvedValue =_						valueResolver.resolveValueIfNecessary("constructor argument", valueHolder.getValue())__				ConstructorArgumentValues.ValueHolder resolvedValueHolder = new ConstructorArgumentValues.ValueHolder(_						resolvedValue, valueHolder.getType(), valueHolder.getName())__				resolvedValueHolder.setSource(valueHolder)__				resolvedValues.addGenericArgumentValue(resolvedValueHolder)__			}_		}__		return minNrOfArgs__	};resolve,the,constructor,arguments,for,this,bean,into,the,resolved,values,object,this,may,involve,looking,up,other,beans,p,this,method,is,also,used,for,handling,invocations,of,static,factory,methods;private,int,resolve,constructor,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,constructor,argument,values,cargs,constructor,argument,values,resolved,values,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,int,min,nr,of,args,cargs,get,argument,count,for,map,entry,integer,constructor,argument,values,value,holder,entry,cargs,get,indexed,argument,values,entry,set,int,index,entry,get,key,if,index,0,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,constructor,argument,index,index,if,index,min,nr,of,args,min,nr,of,args,index,1,constructor,argument,values,value,holder,value,holder,entry,get,value,if,value,holder,is,converted,resolved,values,add,indexed,argument,value,index,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,indexed,argument,value,index,resolved,value,holder,for,constructor,argument,values,value,holder,value,holder,cargs,get,generic,argument,values,if,value,holder,is,converted,resolved,values,add,generic,argument,value,value,holder,else,object,resolved,value,value,resolver,resolve,value,if,necessary,constructor,argument,value,holder,get,value,constructor,argument,values,value,holder,resolved,value,holder,new,constructor,argument,values,value,holder,resolved,value,value,holder,get,type,value,holder,get,name,resolved,value,holder,set,source,value,holder,resolved,values,add,generic,argument,value,resolved,value,holder,return,min,nr,of,args
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class[] paramTypes, String[] paramNames, Object methodOrCtor, 			boolean autowiring) throws UnsatisfiedDependencyException;1328020251;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class[] paramTypes, String[] paramNames, Object methodOrCtor,_			boolean autowiring) throws UnsatisfiedDependencyException {__		String methodType = (methodOrCtor instanceof Constructor ? "constructor" : "factory method")__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders =_				new HashSet<ConstructorArgumentValues.ValueHolder>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<String>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : null)__			_			ConstructorArgumentValues.ValueHolder valueHolder =_					resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__			_			_			_			if (valueHolder == null && !autowiring) {_				valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					ConstructorArgumentValues.ValueHolder sourceHolder =_							(ConstructorArgumentValues.ValueHolder) valueHolder.getSource()__					Object sourceValue = sourceHolder.getValue()__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType,_								MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex))__						_						_							args.resolveNecessary = true__							args.preparedArguments[paramIndex] = sourceValue__						_					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, paramIndex, paramType,_								"Could not convert " + methodType + " argument value of type [" +_								ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_								"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, paramIndex, paramType,_							"Ambiguous " + methodType + " argument types - " +_							"did you specify the correct bean references as " + methodType + " arguments?")__				}_				try {_					MethodParameter param = MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex)__					Object autowiredArgument = resolveAutowiredArgument(param, beanName, autowiredBeanNames, converter)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, paramIndex, paramType, ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (this.beanFactory.logger.isDebugEnabled()) {_				this.beanFactory.logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + methodType + " to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,string,param,names,object,method,or,ctor,boolean,autowiring,throws,unsatisfied,dependency,exception,string,method,type,method,or,ctor,instanceof,constructor,constructor,factory,method,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,constructor,argument,values,value,holder,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,string,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,null,constructor,argument,values,value,holder,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,constructor,argument,values,value,holder,source,holder,constructor,argument,values,value,holder,value,holder,get,source,object,source,value,source,holder,get,value,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,parameter,for,method,or,constructor,method,or,ctor,param,index,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,could,not,convert,method,type,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,ambiguous,method,type,argument,types,did,you,specify,the,correct,bean,references,as,method,type,arguments,try,method,parameter,param,method,parameter,for,method,or,constructor,method,or,ctor,param,index,object,autowired,argument,resolve,autowired,argument,param,bean,name,autowired,bean,names,converter,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,this,bean,factory,logger,is,debug,enabled,this,bean,factory,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,method,type,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class[] paramTypes, String[] paramNames, Object methodOrCtor, 			boolean autowiring) throws UnsatisfiedDependencyException;1356735495;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class[] paramTypes, String[] paramNames, Object methodOrCtor,_			boolean autowiring) throws UnsatisfiedDependencyException {__		String methodType = (methodOrCtor instanceof Constructor ? "constructor" : "factory method")__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders =_				new HashSet<ConstructorArgumentValues.ValueHolder>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<String>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : null)__			_			ConstructorArgumentValues.ValueHolder valueHolder =_					resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__			_			_			_			if (valueHolder == null && !autowiring) {_				valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					ConstructorArgumentValues.ValueHolder sourceHolder =_							(ConstructorArgumentValues.ValueHolder) valueHolder.getSource()__					Object sourceValue = sourceHolder.getValue()__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType,_								MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex))__						_						_							args.resolveNecessary = true__							args.preparedArguments[paramIndex] = sourceValue__						_					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, paramIndex, paramType,_								"Could not convert " + methodType + " argument value of type [" +_								ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_								"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, paramIndex, paramType,_							"Ambiguous " + methodType + " argument types - " +_							"did you specify the correct bean references as " + methodType + " arguments?")__				}_				try {_					MethodParameter param = MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex)__					Object autowiredArgument = resolveAutowiredArgument(param, beanName, autowiredBeanNames, converter)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, paramIndex, paramType, ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (this.beanFactory.logger.isDebugEnabled()) {_				this.beanFactory.logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + methodType + " to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,string,param,names,object,method,or,ctor,boolean,autowiring,throws,unsatisfied,dependency,exception,string,method,type,method,or,ctor,instanceof,constructor,constructor,factory,method,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,constructor,argument,values,value,holder,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,string,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,null,constructor,argument,values,value,holder,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,constructor,argument,values,value,holder,source,holder,constructor,argument,values,value,holder,value,holder,get,source,object,source,value,source,holder,get,value,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,parameter,for,method,or,constructor,method,or,ctor,param,index,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,could,not,convert,method,type,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,ambiguous,method,type,argument,types,did,you,specify,the,correct,bean,references,as,method,type,arguments,try,method,parameter,param,method,parameter,for,method,or,constructor,method,or,ctor,param,index,object,autowired,argument,resolve,autowired,argument,param,bean,name,autowired,bean,names,converter,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,this,bean,factory,logger,is,debug,enabled,this,bean,factory,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,method,type,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class[] paramTypes, String[] paramNames, Object methodOrCtor, 			boolean autowiring) throws UnsatisfiedDependencyException;1357119239;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class[] paramTypes, String[] paramNames, Object methodOrCtor,_			boolean autowiring) throws UnsatisfiedDependencyException {__		String methodType = (methodOrCtor instanceof Constructor ? "constructor" : "factory method")__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders =_				new HashSet<ConstructorArgumentValues.ValueHolder>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<String>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : null)__			_			ConstructorArgumentValues.ValueHolder valueHolder =_					resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__			_			_			_			if (valueHolder == null && !autowiring) {_				valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					ConstructorArgumentValues.ValueHolder sourceHolder =_							(ConstructorArgumentValues.ValueHolder) valueHolder.getSource()__					Object sourceValue = sourceHolder.getValue()__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType,_								MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex))__						_						_							args.resolveNecessary = true__							args.preparedArguments[paramIndex] = sourceValue__						_					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, paramIndex, paramType,_								"Could not convert " + methodType + " argument value of type [" +_								ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_								"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, paramIndex, paramType,_							"Ambiguous " + methodType + " argument types - " +_							"did you specify the correct bean references as " + methodType + " arguments?")__				}_				try {_					MethodParameter param = MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex)__					Object autowiredArgument = resolveAutowiredArgument(param, beanName, autowiredBeanNames, converter)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, paramIndex, paramType, ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (this.beanFactory.logger.isDebugEnabled()) {_				this.beanFactory.logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + methodType + " to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,string,param,names,object,method,or,ctor,boolean,autowiring,throws,unsatisfied,dependency,exception,string,method,type,method,or,ctor,instanceof,constructor,constructor,factory,method,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,constructor,argument,values,value,holder,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,string,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,null,constructor,argument,values,value,holder,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,constructor,argument,values,value,holder,source,holder,constructor,argument,values,value,holder,value,holder,get,source,object,source,value,source,holder,get,value,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,parameter,for,method,or,constructor,method,or,ctor,param,index,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,could,not,convert,method,type,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,ambiguous,method,type,argument,types,did,you,specify,the,correct,bean,references,as,method,type,arguments,try,method,parameter,param,method,parameter,for,method,or,constructor,method,or,ctor,param,index,object,autowired,argument,resolve,autowired,argument,param,bean,name,autowired,bean,names,converter,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,this,bean,factory,logger,is,debug,enabled,this,bean,factory,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,method,type,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class[] paramTypes, String[] paramNames, Object methodOrCtor, 			boolean autowiring) throws UnsatisfiedDependencyException;1362408075;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class[] paramTypes, String[] paramNames, Object methodOrCtor,_			boolean autowiring) throws UnsatisfiedDependencyException {__		String methodType = (methodOrCtor instanceof Constructor ? "constructor" : "factory method")__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders =_				new HashSet<ConstructorArgumentValues.ValueHolder>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<String>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : null)__			_			ConstructorArgumentValues.ValueHolder valueHolder =_					resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__			_			_			_			if (valueHolder == null && !autowiring) {_				valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					ConstructorArgumentValues.ValueHolder sourceHolder =_							(ConstructorArgumentValues.ValueHolder) valueHolder.getSource()__					Object sourceValue = sourceHolder.getValue()__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType,_								MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex))__						_						_							args.resolveNecessary = true__							args.preparedArguments[paramIndex] = sourceValue__						_					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, paramIndex, paramType,_								"Could not convert " + methodType + " argument value of type [" +_								ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_								"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, paramIndex, paramType,_							"Ambiguous " + methodType + " argument types - " +_							"did you specify the correct bean references as " + methodType + " arguments?")__				}_				try {_					MethodParameter param = MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex)__					Object autowiredArgument = resolveAutowiredArgument(param, beanName, autowiredBeanNames, converter)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, paramIndex, paramType, ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (this.beanFactory.logger.isDebugEnabled()) {_				this.beanFactory.logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + methodType + " to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,string,param,names,object,method,or,ctor,boolean,autowiring,throws,unsatisfied,dependency,exception,string,method,type,method,or,ctor,instanceof,constructor,constructor,factory,method,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,constructor,argument,values,value,holder,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,string,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,null,constructor,argument,values,value,holder,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,constructor,argument,values,value,holder,source,holder,constructor,argument,values,value,holder,value,holder,get,source,object,source,value,source,holder,get,value,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,parameter,for,method,or,constructor,method,or,ctor,param,index,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,could,not,convert,method,type,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,ambiguous,method,type,argument,types,did,you,specify,the,correct,bean,references,as,method,type,arguments,try,method,parameter,param,method,parameter,for,method,or,constructor,method,or,ctor,param,index,object,autowired,argument,resolve,autowired,argument,param,bean,name,autowired,bean,names,converter,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,this,bean,factory,logger,is,debug,enabled,this,bean,factory,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,method,type,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class[] paramTypes, String[] paramNames, Object methodOrCtor, 			boolean autowiring) throws UnsatisfiedDependencyException;1368482696;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class[] paramTypes, String[] paramNames, Object methodOrCtor,_			boolean autowiring) throws UnsatisfiedDependencyException {__		String methodType = (methodOrCtor instanceof Constructor ? "constructor" : "factory method")__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders =_				new HashSet<ConstructorArgumentValues.ValueHolder>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<String>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : null)__			_			ConstructorArgumentValues.ValueHolder valueHolder =_					resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__			_			_			_			if (valueHolder == null && !autowiring) {_				valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					ConstructorArgumentValues.ValueHolder sourceHolder =_							(ConstructorArgumentValues.ValueHolder) valueHolder.getSource()__					Object sourceValue = sourceHolder.getValue()__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType,_								MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex))__						_						_							args.resolveNecessary = true__							args.preparedArguments[paramIndex] = sourceValue__						_					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, paramIndex, paramType,_								"Could not convert " + methodType + " argument value of type [" +_								ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_								"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, paramIndex, paramType,_							"Ambiguous " + methodType + " argument types - " +_							"did you specify the correct bean references as " + methodType + " arguments?")__				}_				try {_					MethodParameter param = MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex)__					Object autowiredArgument = resolveAutowiredArgument(param, beanName, autowiredBeanNames, converter)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, paramIndex, paramType, ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (this.beanFactory.logger.isDebugEnabled()) {_				this.beanFactory.logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + methodType + " to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,string,param,names,object,method,or,ctor,boolean,autowiring,throws,unsatisfied,dependency,exception,string,method,type,method,or,ctor,instanceof,constructor,constructor,factory,method,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,constructor,argument,values,value,holder,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,string,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,null,constructor,argument,values,value,holder,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,constructor,argument,values,value,holder,source,holder,constructor,argument,values,value,holder,value,holder,get,source,object,source,value,source,holder,get,value,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,parameter,for,method,or,constructor,method,or,ctor,param,index,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,could,not,convert,method,type,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,ambiguous,method,type,argument,types,did,you,specify,the,correct,bean,references,as,method,type,arguments,try,method,parameter,param,method,parameter,for,method,or,constructor,method,or,ctor,param,index,object,autowired,argument,resolve,autowired,argument,param,bean,name,autowired,bean,names,converter,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,this,bean,factory,logger,is,debug,enabled,this,bean,factory,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,method,type,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> @Nullable 	protected Object resolveAutowiredArgument( 			MethodParameter param, String beanName, @Nullable Set<String> autowiredBeanNames, TypeConverter typeConverter);1496837955;Template method for resolving the specified argument which is supposed to be autowired.;@Nullable_	protected Object resolveAutowiredArgument(_			MethodParameter param, String beanName, @Nullable Set<String> autowiredBeanNames, TypeConverter typeConverter) {__		if (InjectionPoint.class.isAssignableFrom(param.getParameterType())) {_			InjectionPoint injectionPoint = currentInjectionPoint.get()__			if (injectionPoint == null) {_				throw new IllegalStateException("No current InjectionPoint available for " + param)__			}_			return injectionPoint__		}_		return this.beanFactory.resolveDependency(_				new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;nullable,protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,nullable,set,string,autowired,bean,names,type,converter,type,converter,if,injection,point,class,is,assignable,from,param,get,parameter,type,injection,point,injection,point,current,injection,point,get,if,injection,point,null,throw,new,illegal,state,exception,no,current,injection,point,available,for,param,return,injection,point,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter
ConstructorResolver -> @Nullable 	protected Object resolveAutowiredArgument( 			MethodParameter param, String beanName, @Nullable Set<String> autowiredBeanNames, TypeConverter typeConverter);1503007895;Template method for resolving the specified argument which is supposed to be autowired.;@Nullable_	protected Object resolveAutowiredArgument(_			MethodParameter param, String beanName, @Nullable Set<String> autowiredBeanNames, TypeConverter typeConverter) {__		if (InjectionPoint.class.isAssignableFrom(param.getParameterType())) {_			InjectionPoint injectionPoint = currentInjectionPoint.get()__			if (injectionPoint == null) {_				throw new IllegalStateException("No current InjectionPoint available for " + param)__			}_			return injectionPoint__		}_		return this.beanFactory.resolveDependency(_				new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;nullable,protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,nullable,set,string,autowired,bean,names,type,converter,type,converter,if,injection,point,class,is,assignable,from,param,get,parameter,type,injection,point,injection,point,current,injection,point,get,if,injection,point,null,throw,new,illegal,state,exception,no,current,injection,point,available,for,param,return,injection,point,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter
ConstructorResolver -> @Nullable 	protected Object resolveAutowiredArgument( 			MethodParameter param, String beanName, @Nullable Set<String> autowiredBeanNames, TypeConverter typeConverter);1503414318;Template method for resolving the specified argument which is supposed to be autowired.;@Nullable_	protected Object resolveAutowiredArgument(_			MethodParameter param, String beanName, @Nullable Set<String> autowiredBeanNames, TypeConverter typeConverter) {__		if (InjectionPoint.class.isAssignableFrom(param.getParameterType())) {_			InjectionPoint injectionPoint = currentInjectionPoint.get()__			if (injectionPoint == null) {_				throw new IllegalStateException("No current InjectionPoint available for " + param)__			}_			return injectionPoint__		}_		boolean required = !(useKotlinSupport(param.getContainingClass()) && KotlinDelegate.isOptional(param))__		return this.beanFactory.resolveDependency(_				new DependencyDescriptor(param, required), beanName, autowiredBeanNames, typeConverter)__	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;nullable,protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,nullable,set,string,autowired,bean,names,type,converter,type,converter,if,injection,point,class,is,assignable,from,param,get,parameter,type,injection,point,injection,point,current,injection,point,get,if,injection,point,null,throw,new,illegal,state,exception,no,current,injection,point,available,for,param,return,injection,point,boolean,required,use,kotlin,support,param,get,containing,class,kotlin,delegate,is,optional,param,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,required,bean,name,autowired,bean,names,type,converter
ConstructorResolver -> public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, 			Constructor<?>[] chosenCtors, final Object[] explicitArgs);1413920443;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd,_			Constructor<?>[] chosenCtors, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor<?> constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)__			}_		}__		if (constructorToUse == null) {_			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			_			Constructor<?>[] candidates = chosenCtors__			if (candidates == null) {_				Class<?> beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_									"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}_			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor<?>> ambiguousConstructors = null__			List<Exception> causes = null___			for (int i = 0_ i < candidates.length_ i++) {_				Constructor<?> candidate = candidates[i]__				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)__						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(_								beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (this.beanFactory.logger.isTraceEnabled()) {_							this.beanFactory.logger.trace(_									"Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						if (i == candidates.length - 1 && constructorToUse == null) {_							if (causes != null) {_								for (Exception cause : causes) {_									this.beanFactory.onSuppressedException(cause)__								}_							}_							throw ex__						}_						else {_							_							if (causes == null) {_								causes = new LinkedList<Exception>()__							}_							causes.add(ex)__							continue__						}_					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<Constructor<?>>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Constructor<?> ctorToUse = constructorToUse__				final Object[] argumentsToUse = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, ctorToUse, argumentsToUse)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, constructorToUse, argsToUse)__			}__			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via constructor failed", ex)__		}_	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,final,string,bean,name,final,root,bean,definition,mbd,constructor,chosen,ctors,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,if,constructor,to,use,null,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,list,exception,causes,null,for,int,i,0,i,candidates,length,i,constructor,candidate,candidates,i,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,constructor,properties,checker,evaluate,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,i,candidates,length,1,constructor,to,use,null,if,causes,null,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,else,if,causes,null,causes,new,linked,list,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,constructor,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,constructor,ctor,to,use,constructor,to,use,final,object,arguments,to,use,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,ctor,to,use,arguments,to,use,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,constructor,to,use,args,to,use,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,constructor,failed,ex
ConstructorResolver -> public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, 			Constructor<?>[] chosenCtors, final Object[] explicitArgs);1419352511;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd,_			Constructor<?>[] chosenCtors, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor<?> constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)__			}_		}__		if (constructorToUse == null) {_			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			_			Constructor<?>[] candidates = chosenCtors__			if (candidates == null) {_				Class<?> beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_									"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}_			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor<?>> ambiguousConstructors = null__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (int i = 0_ i < candidates.length_ i++) {_				Constructor<?> candidate = candidates[i]__				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)__						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(_								beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (this.beanFactory.logger.isTraceEnabled()) {_							this.beanFactory.logger.trace(_									"Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						_						if (causes == null) {_							causes = new LinkedList<UnsatisfiedDependencyException>()__						}_						causes.add(ex)__						continue__					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<Constructor<?>>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Constructor<?> ctorToUse = constructorToUse__				final Object[] argumentsToUse = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, ctorToUse, argumentsToUse)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, constructorToUse, argsToUse)__			}__			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via constructor failed", ex)__		}_	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,final,string,bean,name,final,root,bean,definition,mbd,constructor,chosen,ctors,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,if,constructor,to,use,null,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,linked,list,unsatisfied,dependency,exception,causes,null,for,int,i,0,i,candidates,length,i,constructor,candidate,candidates,i,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,constructor,properties,checker,evaluate,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,unsatisfied,dependency,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,constructor,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,constructor,ctor,to,use,constructor,to,use,final,object,arguments,to,use,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,ctor,to,use,arguments,to,use,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,constructor,to,use,args,to,use,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,constructor,failed,ex
ConstructorResolver -> public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, 			Constructor<?>[] chosenCtors, final Object[] explicitArgs);1432125256;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd,_			Constructor<?>[] chosenCtors, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor<?> constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)__			}_		}__		if (constructorToUse == null) {_			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			_			Constructor<?>[] candidates = chosenCtors__			if (candidates == null) {_				Class<?> beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_									"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}_			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor<?>> ambiguousConstructors = null__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (int i = 0_ i < candidates.length_ i++) {_				Constructor<?> candidate = candidates[i]__				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)__						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(_								beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (this.beanFactory.logger.isTraceEnabled()) {_							this.beanFactory.logger.trace(_									"Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						_						if (causes == null) {_							causes = new LinkedList<UnsatisfiedDependencyException>()__						}_						causes.add(ex)__						continue__					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<Constructor<?>>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Constructor<?> ctorToUse = constructorToUse__				final Object[] argumentsToUse = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, ctorToUse, argumentsToUse)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, constructorToUse, argsToUse)__			}__			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via constructor failed", ex)__		}_	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,final,string,bean,name,final,root,bean,definition,mbd,constructor,chosen,ctors,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,if,constructor,to,use,null,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,linked,list,unsatisfied,dependency,exception,causes,null,for,int,i,0,i,candidates,length,i,constructor,candidate,candidates,i,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,constructor,properties,checker,evaluate,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,unsatisfied,dependency,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,constructor,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,constructor,ctor,to,use,constructor,to,use,final,object,arguments,to,use,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,ctor,to,use,arguments,to,use,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,constructor,to,use,args,to,use,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,constructor,failed,ex
ConstructorResolver -> public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, 			Constructor<?>[] chosenCtors, final Object[] explicitArgs);1450707100;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd,_			Constructor<?>[] chosenCtors, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor<?> constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)__			}_		}__		if (constructorToUse == null) {_			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			_			Constructor<?>[] candidates = chosenCtors__			if (candidates == null) {_				Class<?> beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_									"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}_			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor<?>> ambiguousConstructors = null__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (int i = 0_ i < candidates.length_ i++) {_				Constructor<?> candidate = candidates[i]__				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)__						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(_								beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (this.beanFactory.logger.isTraceEnabled()) {_							this.beanFactory.logger.trace(_									"Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						_						if (causes == null) {_							causes = new LinkedList<UnsatisfiedDependencyException>()__						}_						causes.add(ex)__						continue__					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<Constructor<?>>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Constructor<?> ctorToUse = constructorToUse__				final Object[] argumentsToUse = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, ctorToUse, argumentsToUse)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, constructorToUse, argsToUse)__			}__			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via constructor failed", ex)__		}_	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,final,string,bean,name,final,root,bean,definition,mbd,constructor,chosen,ctors,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,if,constructor,to,use,null,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,linked,list,unsatisfied,dependency,exception,causes,null,for,int,i,0,i,candidates,length,i,constructor,candidate,candidates,i,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,constructor,properties,checker,evaluate,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,unsatisfied,dependency,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,constructor,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,constructor,ctor,to,use,constructor,to,use,final,object,arguments,to,use,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,ctor,to,use,arguments,to,use,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,constructor,to,use,args,to,use,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,constructor,failed,ex
ConstructorResolver -> public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, 			Constructor<?>[] chosenCtors, final Object[] explicitArgs);1456432609;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd,_			Constructor<?>[] chosenCtors, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor<?> constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)__			}_		}__		if (constructorToUse == null) {_			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			_			Constructor<?>[] candidates = chosenCtors__			if (candidates == null) {_				Class<?> beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_							"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}_			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor<?>> ambiguousConstructors = null__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Constructor<?> candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)__						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(_								beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (this.beanFactory.logger.isTraceEnabled()) {_							this.beanFactory.logger.trace(_									"Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						_						if (causes == null) {_							causes = new LinkedList<UnsatisfiedDependencyException>()__						}_						causes.add(ex)__						continue__					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<Constructor<?>>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Constructor<?> ctorToUse = constructorToUse__				final Object[] argumentsToUse = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, ctorToUse, argumentsToUse)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, constructorToUse, argsToUse)__			}__			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via constructor failed", ex)__		}_	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,final,string,bean,name,final,root,bean,definition,mbd,constructor,chosen,ctors,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,if,constructor,to,use,null,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,linked,list,unsatisfied,dependency,exception,causes,null,for,constructor,candidate,candidates,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,constructor,properties,checker,evaluate,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,unsatisfied,dependency,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,constructor,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,constructor,ctor,to,use,constructor,to,use,final,object,arguments,to,use,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,ctor,to,use,arguments,to,use,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,constructor,to,use,args,to,use,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,constructor,failed,ex
ConstructorResolver -> public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, 			Constructor<?>[] chosenCtors, final Object[] explicitArgs);1456486263;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd,_			Constructor<?>[] chosenCtors, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor<?> constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)__			}_		}__		if (constructorToUse == null) {_			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			_			Constructor<?>[] candidates = chosenCtors__			if (candidates == null) {_				Class<?> beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_							"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}_			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor<?>> ambiguousConstructors = null__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Constructor<?> candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)__						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(_								beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (this.beanFactory.logger.isTraceEnabled()) {_							this.beanFactory.logger.trace(_									"Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						_						if (causes == null) {_							causes = new LinkedList<UnsatisfiedDependencyException>()__						}_						causes.add(ex)__						continue__					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<Constructor<?>>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Constructor<?> ctorToUse = constructorToUse__				final Object[] argumentsToUse = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, ctorToUse, argumentsToUse)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, constructorToUse, argsToUse)__			}__			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via constructor failed", ex)__		}_	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,final,string,bean,name,final,root,bean,definition,mbd,constructor,chosen,ctors,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,if,constructor,to,use,null,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,linked,list,unsatisfied,dependency,exception,causes,null,for,constructor,candidate,candidates,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,constructor,properties,checker,evaluate,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,unsatisfied,dependency,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,constructor,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,constructor,ctor,to,use,constructor,to,use,final,object,arguments,to,use,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,ctor,to,use,arguments,to,use,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,constructor,to,use,args,to,use,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,constructor,failed,ex
ConstructorResolver -> public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, 			Constructor<?>[] chosenCtors, final Object[] explicitArgs);1457697160;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd,_			Constructor<?>[] chosenCtors, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor<?> constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)__			}_		}__		if (constructorToUse == null) {_			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			_			Constructor<?>[] candidates = chosenCtors__			if (candidates == null) {_				Class<?> beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_							"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}_			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor<?>> ambiguousConstructors = null__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Constructor<?> candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)__						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames,_								getUserDeclaredConstructor(candidate), autowiring)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (this.beanFactory.logger.isTraceEnabled()) {_							this.beanFactory.logger.trace(_									"Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						_						if (causes == null) {_							causes = new LinkedList<UnsatisfiedDependencyException>()__						}_						causes.add(ex)__						continue__					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<Constructor<?>>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Constructor<?> ctorToUse = constructorToUse__				final Object[] argumentsToUse = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, ctorToUse, argumentsToUse)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, constructorToUse, argsToUse)__			}__			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via constructor failed", ex)__		}_	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,final,string,bean,name,final,root,bean,definition,mbd,constructor,chosen,ctors,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,if,constructor,to,use,null,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,linked,list,unsatisfied,dependency,exception,causes,null,for,constructor,candidate,candidates,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,constructor,properties,checker,evaluate,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,get,user,declared,constructor,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,unsatisfied,dependency,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,constructor,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,constructor,ctor,to,use,constructor,to,use,final,object,arguments,to,use,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,ctor,to,use,arguments,to,use,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,constructor,to,use,args,to,use,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,constructor,failed,ex
ConstructorResolver -> public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, 			Constructor<?>[] chosenCtors, final Object[] explicitArgs);1458311433;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd,_			Constructor<?>[] chosenCtors, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor<?> constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)__			}_		}__		if (constructorToUse == null) {_			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			_			Constructor<?>[] candidates = chosenCtors__			if (candidates == null) {_				Class<?> beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_							"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}_			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor<?>> ambiguousConstructors = null__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Constructor<?> candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)__						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames,_								getUserDeclaredConstructor(candidate), autowiring)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (this.beanFactory.logger.isTraceEnabled()) {_							this.beanFactory.logger.trace(_									"Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						_						if (causes == null) {_							causes = new LinkedList<UnsatisfiedDependencyException>()__						}_						causes.add(ex)__						continue__					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<Constructor<?>>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Constructor<?> ctorToUse = constructorToUse__				final Object[] argumentsToUse = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, ctorToUse, argumentsToUse)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, constructorToUse, argsToUse)__			}__			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via constructor failed", ex)__		}_	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,final,string,bean,name,final,root,bean,definition,mbd,constructor,chosen,ctors,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,if,constructor,to,use,null,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,linked,list,unsatisfied,dependency,exception,causes,null,for,constructor,candidate,candidates,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,constructor,properties,checker,evaluate,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,get,user,declared,constructor,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,unsatisfied,dependency,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,constructor,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,constructor,ctor,to,use,constructor,to,use,final,object,arguments,to,use,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,ctor,to,use,arguments,to,use,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,constructor,to,use,args,to,use,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,constructor,failed,ex
ConstructorResolver -> public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, 			Constructor<?>[] chosenCtors, final Object[] explicitArgs);1458323493;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd,_			Constructor<?>[] chosenCtors, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor<?> constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)__			}_		}__		if (constructorToUse == null) {_			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			_			Constructor<?>[] candidates = chosenCtors__			if (candidates == null) {_				Class<?> beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_							"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}_			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor<?>> ambiguousConstructors = null__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Constructor<?> candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)__						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames,_								getUserDeclaredConstructor(candidate), autowiring)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (this.beanFactory.logger.isTraceEnabled()) {_							this.beanFactory.logger.trace(_									"Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						_						if (causes == null) {_							causes = new LinkedList<UnsatisfiedDependencyException>()__						}_						causes.add(ex)__						continue__					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<Constructor<?>>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Constructor<?> ctorToUse = constructorToUse__				final Object[] argumentsToUse = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, ctorToUse, argumentsToUse)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, constructorToUse, argsToUse)__			}__			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via constructor failed", ex)__		}_	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,final,string,bean,name,final,root,bean,definition,mbd,constructor,chosen,ctors,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,if,constructor,to,use,null,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,linked,list,unsatisfied,dependency,exception,causes,null,for,constructor,candidate,candidates,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,constructor,properties,checker,evaluate,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,get,user,declared,constructor,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,unsatisfied,dependency,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,constructor,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,constructor,ctor,to,use,constructor,to,use,final,object,arguments,to,use,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,ctor,to,use,arguments,to,use,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,constructor,to,use,args,to,use,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,constructor,failed,ex
ConstructorResolver -> public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, 			Constructor<?>[] chosenCtors, final Object[] explicitArgs);1460031510;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd,_			Constructor<?>[] chosenCtors, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor<?> constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)__			}_		}__		if (constructorToUse == null) {_			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			_			Constructor<?>[] candidates = chosenCtors__			if (candidates == null) {_				Class<?> beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_							"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}_			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor<?>> ambiguousConstructors = null__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Constructor<?> candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)__						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames,_								getUserDeclaredConstructor(candidate), autowiring)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (this.beanFactory.logger.isTraceEnabled()) {_							this.beanFactory.logger.trace(_									"Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						_						if (causes == null) {_							causes = new LinkedList<UnsatisfiedDependencyException>()__						}_						causes.add(ex)__						continue__					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<Constructor<?>>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Constructor<?> ctorToUse = constructorToUse__				final Object[] argumentsToUse = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, ctorToUse, argumentsToUse)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, constructorToUse, argsToUse)__			}__			bw.setBeanInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via constructor failed", ex)__		}_	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,final,string,bean,name,final,root,bean,definition,mbd,constructor,chosen,ctors,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,if,constructor,to,use,null,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,linked,list,unsatisfied,dependency,exception,causes,null,for,constructor,candidate,candidates,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,constructor,properties,checker,evaluate,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,get,user,declared,constructor,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,unsatisfied,dependency,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,constructor,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,constructor,ctor,to,use,constructor,to,use,final,object,arguments,to,use,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,ctor,to,use,arguments,to,use,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,constructor,to,use,args,to,use,bw,set,bean,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,constructor,failed,ex
ConstructorResolver -> public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, 			Constructor<?>[] chosenCtors, final Object[] explicitArgs);1467730834;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd,_			Constructor<?>[] chosenCtors, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor<?> constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)__			}_		}__		if (constructorToUse == null) {_			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			_			Constructor<?>[] candidates = chosenCtors__			if (candidates == null) {_				Class<?> beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_							"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}_			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor<?>> ambiguousConstructors = null__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Constructor<?> candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)__						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames,_								getUserDeclaredConstructor(candidate), autowiring)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (this.beanFactory.logger.isTraceEnabled()) {_							this.beanFactory.logger.trace(_									"Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						_						if (causes == null) {_							causes = new LinkedList<>()__						}_						causes.add(ex)__						continue__					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Constructor<?> ctorToUse = constructorToUse__				final Object[] argumentsToUse = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, ctorToUse, argumentsToUse)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, constructorToUse, argsToUse)__			}__			bw.setBeanInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via constructor failed", ex)__		}_	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,final,string,bean,name,final,root,bean,definition,mbd,constructor,chosen,ctors,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,if,constructor,to,use,null,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,linked,list,unsatisfied,dependency,exception,causes,null,for,constructor,candidate,candidates,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,constructor,properties,checker,evaluate,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,get,user,declared,constructor,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,constructor,ctor,to,use,constructor,to,use,final,object,arguments,to,use,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,ctor,to,use,arguments,to,use,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,constructor,to,use,args,to,use,bw,set,bean,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,constructor,failed,ex
ConstructorResolver -> public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, 			Constructor<?>[] chosenCtors, final Object[] explicitArgs);1467844672;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd,_			Constructor<?>[] chosenCtors, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor<?> constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)__			}_		}__		if (constructorToUse == null) {_			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			_			Constructor<?>[] candidates = chosenCtors__			if (candidates == null) {_				Class<?> beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_							"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}_			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor<?>> ambiguousConstructors = null__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Constructor<?> candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)__						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames,_								getUserDeclaredConstructor(candidate), autowiring)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (this.beanFactory.logger.isTraceEnabled()) {_							this.beanFactory.logger.trace(_									"Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						_						if (causes == null) {_							causes = new LinkedList<>()__						}_						causes.add(ex)__						continue__					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Constructor<?> ctorToUse = constructorToUse__				final Object[] argumentsToUse = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, ctorToUse, argumentsToUse)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, constructorToUse, argsToUse)__			}__			bw.setBeanInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via constructor failed", ex)__		}_	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,final,string,bean,name,final,root,bean,definition,mbd,constructor,chosen,ctors,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,if,constructor,to,use,null,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,linked,list,unsatisfied,dependency,exception,causes,null,for,constructor,candidate,candidates,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,constructor,properties,checker,evaluate,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,get,user,declared,constructor,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,constructor,ctor,to,use,constructor,to,use,final,object,arguments,to,use,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,ctor,to,use,arguments,to,use,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,constructor,to,use,args,to,use,bw,set,bean,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,constructor,failed,ex
ConstructorResolver -> public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, 			Constructor<?>[] chosenCtors, final Object[] explicitArgs);1469030791;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd,_			Constructor<?>[] chosenCtors, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor<?> constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)__			}_		}__		if (constructorToUse == null) {_			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			_			Constructor<?>[] candidates = chosenCtors__			if (candidates == null) {_				Class<?> beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_							"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}_			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor<?>> ambiguousConstructors = null__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Constructor<?> candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)__						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames,_								getUserDeclaredConstructor(candidate), autowiring)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (this.beanFactory.logger.isTraceEnabled()) {_							this.beanFactory.logger.trace(_									"Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						_						if (causes == null) {_							causes = new LinkedList<>()__						}_						causes.add(ex)__						continue__					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Constructor<?> ctorToUse = constructorToUse__				final Object[] argumentsToUse = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, ctorToUse, argumentsToUse)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, constructorToUse, argsToUse)__			}__			bw.setBeanInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via constructor failed", ex)__		}_	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,final,string,bean,name,final,root,bean,definition,mbd,constructor,chosen,ctors,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,if,constructor,to,use,null,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,linked,list,unsatisfied,dependency,exception,causes,null,for,constructor,candidate,candidates,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,constructor,properties,checker,evaluate,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,get,user,declared,constructor,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,constructor,ctor,to,use,constructor,to,use,final,object,arguments,to,use,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,ctor,to,use,arguments,to,use,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,constructor,to,use,args,to,use,bw,set,bean,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,constructor,failed,ex
ConstructorResolver -> public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, 			Constructor<?>[] chosenCtors, final Object[] explicitArgs);1469367243;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd,_			Constructor<?>[] chosenCtors, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor<?> constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)__			}_		}__		if (constructorToUse == null) {_			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			_			Constructor<?>[] candidates = chosenCtors__			if (candidates == null) {_				Class<?> beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_							"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}_			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor<?>> ambiguousConstructors = null__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Constructor<?> candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)__						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames,_								getUserDeclaredConstructor(candidate), autowiring)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (this.beanFactory.logger.isTraceEnabled()) {_							this.beanFactory.logger.trace(_									"Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						_						if (causes == null) {_							causes = new LinkedList<>()__						}_						causes.add(ex)__						continue__					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Constructor<?> ctorToUse = constructorToUse__				final Object[] argumentsToUse = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, ctorToUse, argumentsToUse)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, constructorToUse, argsToUse)__			}__			bw.setBeanInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via constructor failed", ex)__		}_	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,final,string,bean,name,final,root,bean,definition,mbd,constructor,chosen,ctors,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,if,constructor,to,use,null,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,linked,list,unsatisfied,dependency,exception,causes,null,for,constructor,candidate,candidates,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,constructor,properties,checker,evaluate,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,get,user,declared,constructor,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,constructor,ctor,to,use,constructor,to,use,final,object,arguments,to,use,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,ctor,to,use,arguments,to,use,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,constructor,to,use,args,to,use,bw,set,bean,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,constructor,failed,ex
ConstructorResolver -> public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, 			Constructor<?>[] chosenCtors, final Object[] explicitArgs);1478538021;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd,_			Constructor<?>[] chosenCtors, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor<?> constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)__			}_		}__		if (constructorToUse == null) {_			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			_			Constructor<?>[] candidates = chosenCtors__			if (candidates == null) {_				Class<?> beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_							"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}_			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor<?>> ambiguousConstructors = null__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Constructor<?> candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)__						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames,_								getUserDeclaredConstructor(candidate), autowiring)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (this.beanFactory.logger.isTraceEnabled()) {_							this.beanFactory.logger.trace(_									"Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						_						if (causes == null) {_							causes = new LinkedList<>()__						}_						causes.add(ex)__						continue__					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Constructor<?> ctorToUse = constructorToUse__				final Object[] argumentsToUse = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, ctorToUse, argumentsToUse)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, constructorToUse, argsToUse)__			}__			bw.setBeanInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via constructor failed", ex)__		}_	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,final,string,bean,name,final,root,bean,definition,mbd,constructor,chosen,ctors,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,if,constructor,to,use,null,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,linked,list,unsatisfied,dependency,exception,causes,null,for,constructor,candidate,candidates,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,constructor,properties,checker,evaluate,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,get,user,declared,constructor,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,constructor,ctor,to,use,constructor,to,use,final,object,arguments,to,use,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,ctor,to,use,arguments,to,use,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,constructor,to,use,args,to,use,bw,set,bean,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,constructor,failed,ex
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, @Nullable ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class<?>[] paramTypes, @Nullable String[] paramNames, Executable executable, 			boolean autowiring, boolean fallback) throws UnsatisfiedDependencyException;1532385723;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, @Nullable ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class<?>[] paramTypes, @Nullable String[] paramNames, Executable executable,_			boolean autowiring, boolean fallback) throws UnsatisfiedDependencyException {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders = new HashSet<>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : "")__			_			ConstructorArgumentValues.ValueHolder valueHolder = null__			if (resolvedValues != null) {_				valueHolder = resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__				_				_				_				if (valueHolder == null && (!autowiring || paramTypes.length == resolvedValues.getArgumentCount())) {_					valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__				}_			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType, methodParam)__					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_								"Could not convert argument value of type [" +_										ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_										"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_					Object sourceHolder = valueHolder.getSource()__					if (sourceHolder instanceof ConstructorArgumentValues.ValueHolder) {_						Object sourceValue = ((ConstructorArgumentValues.ValueHolder) sourceHolder).getValue()__						args.resolveNecessary = true__						args.preparedArguments[paramIndex] = sourceValue__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_							"Ambiguous argument values for parameter of type [" + paramType.getName() +_							"] - did you specify the correct bean references as arguments?")__				}_				try {_					Object autowiredArgument = resolveAutowiredArgument(_							methodParam, beanName, autowiredBeanNames, converter, fallback)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam), ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (logger.isDebugEnabled()) {_				logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + (executable instanceof Constructor ? "constructor" : "factory method") +_						" to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,nullable,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,nullable,string,param,names,executable,executable,boolean,autowiring,boolean,fallback,throws,unsatisfied,dependency,exception,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,constructor,argument,values,value,holder,value,holder,null,if,resolved,values,null,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,param,types,length,resolved,values,get,argument,count,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,method,parameter,method,param,method,parameter,for,executable,executable,param,index,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,object,source,holder,value,holder,get,source,if,source,holder,instanceof,constructor,argument,values,value,holder,object,source,value,constructor,argument,values,value,holder,source,holder,get,value,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,method,parameter,method,param,method,parameter,for,executable,executable,param,index,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ambiguous,argument,values,for,parameter,of,type,param,type,get,name,did,you,specify,the,correct,bean,references,as,arguments,try,object,autowired,argument,resolve,autowired,argument,method,param,bean,name,autowired,bean,names,converter,fallback,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,logger,is,debug,enabled,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,executable,instanceof,constructor,constructor,factory,method,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, @Nullable ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class<?>[] paramTypes, @Nullable String[] paramNames, Executable executable, 			boolean autowiring, boolean fallback) throws UnsatisfiedDependencyException;1532430234;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, @Nullable ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class<?>[] paramTypes, @Nullable String[] paramNames, Executable executable,_			boolean autowiring, boolean fallback) throws UnsatisfiedDependencyException {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders = new HashSet<>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : "")__			_			ConstructorArgumentValues.ValueHolder valueHolder = null__			if (resolvedValues != null) {_				valueHolder = resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__				_				_				_				if (valueHolder == null && (!autowiring || paramTypes.length == resolvedValues.getArgumentCount())) {_					valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__				}_			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType, methodParam)__					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_								"Could not convert argument value of type [" +_										ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_										"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_					Object sourceHolder = valueHolder.getSource()__					if (sourceHolder instanceof ConstructorArgumentValues.ValueHolder) {_						Object sourceValue = ((ConstructorArgumentValues.ValueHolder) sourceHolder).getValue()__						args.resolveNecessary = true__						args.preparedArguments[paramIndex] = sourceValue__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_							"Ambiguous argument values for parameter of type [" + paramType.getName() +_							"] - did you specify the correct bean references as arguments?")__				}_				try {_					Object autowiredArgument = resolveAutowiredArgument(_							methodParam, beanName, autowiredBeanNames, converter, fallback)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam), ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (logger.isDebugEnabled()) {_				logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + (executable instanceof Constructor ? "constructor" : "factory method") +_						" to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,nullable,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,nullable,string,param,names,executable,executable,boolean,autowiring,boolean,fallback,throws,unsatisfied,dependency,exception,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,constructor,argument,values,value,holder,value,holder,null,if,resolved,values,null,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,param,types,length,resolved,values,get,argument,count,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,method,parameter,method,param,method,parameter,for,executable,executable,param,index,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,object,source,holder,value,holder,get,source,if,source,holder,instanceof,constructor,argument,values,value,holder,object,source,value,constructor,argument,values,value,holder,source,holder,get,value,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,method,parameter,method,param,method,parameter,for,executable,executable,param,index,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ambiguous,argument,values,for,parameter,of,type,param,type,get,name,did,you,specify,the,correct,bean,references,as,arguments,try,object,autowired,argument,resolve,autowired,argument,method,param,bean,name,autowired,bean,names,converter,fallback,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,logger,is,debug,enabled,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,executable,instanceof,constructor,constructor,factory,method,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, @Nullable ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class<?>[] paramTypes, @Nullable String[] paramNames, Executable executable, 			boolean autowiring, boolean fallback) throws UnsatisfiedDependencyException;1532577558;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, @Nullable ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class<?>[] paramTypes, @Nullable String[] paramNames, Executable executable,_			boolean autowiring, boolean fallback) throws UnsatisfiedDependencyException {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders = new HashSet<>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : "")__			_			ConstructorArgumentValues.ValueHolder valueHolder = null__			if (resolvedValues != null) {_				valueHolder = resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__				_				_				_				if (valueHolder == null && (!autowiring || paramTypes.length == resolvedValues.getArgumentCount())) {_					valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__				}_			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType, methodParam)__					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_								"Could not convert argument value of type [" +_										ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_										"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_					Object sourceHolder = valueHolder.getSource()__					if (sourceHolder instanceof ConstructorArgumentValues.ValueHolder) {_						Object sourceValue = ((ConstructorArgumentValues.ValueHolder) sourceHolder).getValue()__						args.resolveNecessary = true__						args.preparedArguments[paramIndex] = sourceValue__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_							"Ambiguous argument values for parameter of type [" + paramType.getName() +_							"] - did you specify the correct bean references as arguments?")__				}_				try {_					Object autowiredArgument = resolveAutowiredArgument(_							methodParam, beanName, autowiredBeanNames, converter, fallback)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam), ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (logger.isDebugEnabled()) {_				logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + (executable instanceof Constructor ? "constructor" : "factory method") +_						" to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,nullable,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,nullable,string,param,names,executable,executable,boolean,autowiring,boolean,fallback,throws,unsatisfied,dependency,exception,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,constructor,argument,values,value,holder,value,holder,null,if,resolved,values,null,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,param,types,length,resolved,values,get,argument,count,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,method,parameter,method,param,method,parameter,for,executable,executable,param,index,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,object,source,holder,value,holder,get,source,if,source,holder,instanceof,constructor,argument,values,value,holder,object,source,value,constructor,argument,values,value,holder,source,holder,get,value,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,method,parameter,method,param,method,parameter,for,executable,executable,param,index,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ambiguous,argument,values,for,parameter,of,type,param,type,get,name,did,you,specify,the,correct,bean,references,as,arguments,try,object,autowired,argument,resolve,autowired,argument,method,param,bean,name,autowired,bean,names,converter,fallback,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,logger,is,debug,enabled,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,executable,instanceof,constructor,constructor,factory,method,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, @Nullable ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class<?>[] paramTypes, @Nullable String[] paramNames, Executable executable, 			boolean autowiring, boolean fallback) throws UnsatisfiedDependencyException;1534157021;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, @Nullable ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class<?>[] paramTypes, @Nullable String[] paramNames, Executable executable,_			boolean autowiring, boolean fallback) throws UnsatisfiedDependencyException {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders = new HashSet<>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : "")__			_			ConstructorArgumentValues.ValueHolder valueHolder = null__			if (resolvedValues != null) {_				valueHolder = resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__				_				_				_				if (valueHolder == null && (!autowiring || paramTypes.length == resolvedValues.getArgumentCount())) {_					valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__				}_			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType, methodParam)__					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_								"Could not convert argument value of type [" +_										ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_										"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_					Object sourceHolder = valueHolder.getSource()__					if (sourceHolder instanceof ConstructorArgumentValues.ValueHolder) {_						Object sourceValue = ((ConstructorArgumentValues.ValueHolder) sourceHolder).getValue()__						args.resolveNecessary = true__						args.preparedArguments[paramIndex] = sourceValue__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_							"Ambiguous argument values for parameter of type [" + paramType.getName() +_							"] - did you specify the correct bean references as arguments?")__				}_				try {_					Object autowiredArgument = resolveAutowiredArgument(_							methodParam, beanName, autowiredBeanNames, converter, fallback)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam), ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (logger.isDebugEnabled()) {_				logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + (executable instanceof Constructor ? "constructor" : "factory method") +_						" to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,nullable,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,nullable,string,param,names,executable,executable,boolean,autowiring,boolean,fallback,throws,unsatisfied,dependency,exception,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,constructor,argument,values,value,holder,value,holder,null,if,resolved,values,null,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,param,types,length,resolved,values,get,argument,count,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,method,parameter,method,param,method,parameter,for,executable,executable,param,index,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,object,source,holder,value,holder,get,source,if,source,holder,instanceof,constructor,argument,values,value,holder,object,source,value,constructor,argument,values,value,holder,source,holder,get,value,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,method,parameter,method,param,method,parameter,for,executable,executable,param,index,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ambiguous,argument,values,for,parameter,of,type,param,type,get,name,did,you,specify,the,correct,bean,references,as,arguments,try,object,autowired,argument,resolve,autowired,argument,method,param,bean,name,autowired,bean,names,converter,fallback,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,logger,is,debug,enabled,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,executable,instanceof,constructor,constructor,factory,method,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, @Nullable ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class<?>[] paramTypes, @Nullable String[] paramNames, Executable executable, 			boolean autowiring, boolean fallback) throws UnsatisfiedDependencyException;1537388389;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, @Nullable ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class<?>[] paramTypes, @Nullable String[] paramNames, Executable executable,_			boolean autowiring, boolean fallback) throws UnsatisfiedDependencyException {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders = new HashSet<>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : "")__			_			ConstructorArgumentValues.ValueHolder valueHolder = null__			if (resolvedValues != null) {_				valueHolder = resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__				_				_				_				if (valueHolder == null && (!autowiring || paramTypes.length == resolvedValues.getArgumentCount())) {_					valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__				}_			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType, methodParam)__					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_								"Could not convert argument value of type [" +_										ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_										"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_					Object sourceHolder = valueHolder.getSource()__					if (sourceHolder instanceof ConstructorArgumentValues.ValueHolder) {_						Object sourceValue = ((ConstructorArgumentValues.ValueHolder) sourceHolder).getValue()__						args.resolveNecessary = true__						args.preparedArguments[paramIndex] = sourceValue__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_							"Ambiguous argument values for parameter of type [" + paramType.getName() +_							"] - did you specify the correct bean references as arguments?")__				}_				try {_					Object autowiredArgument = resolveAutowiredArgument(_							methodParam, beanName, autowiredBeanNames, converter, fallback)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam), ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (logger.isDebugEnabled()) {_				logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + (executable instanceof Constructor ? "constructor" : "factory method") +_						" to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,nullable,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,nullable,string,param,names,executable,executable,boolean,autowiring,boolean,fallback,throws,unsatisfied,dependency,exception,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,constructor,argument,values,value,holder,value,holder,null,if,resolved,values,null,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,param,types,length,resolved,values,get,argument,count,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,method,parameter,method,param,method,parameter,for,executable,executable,param,index,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,object,source,holder,value,holder,get,source,if,source,holder,instanceof,constructor,argument,values,value,holder,object,source,value,constructor,argument,values,value,holder,source,holder,get,value,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,method,parameter,method,param,method,parameter,for,executable,executable,param,index,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ambiguous,argument,values,for,parameter,of,type,param,type,get,name,did,you,specify,the,correct,bean,references,as,arguments,try,object,autowired,argument,resolve,autowired,argument,method,param,bean,name,autowired,bean,names,converter,fallback,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,logger,is,debug,enabled,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,executable,instanceof,constructor,constructor,factory,method,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, @Nullable ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class<?>[] paramTypes, @Nullable String[] paramNames, Executable executable, 			boolean autowiring, boolean fallback) throws UnsatisfiedDependencyException;1539377630;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, @Nullable ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class<?>[] paramTypes, @Nullable String[] paramNames, Executable executable,_			boolean autowiring, boolean fallback) throws UnsatisfiedDependencyException {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders = new HashSet<>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : "")__			_			ConstructorArgumentValues.ValueHolder valueHolder = null__			if (resolvedValues != null) {_				valueHolder = resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__				_				_				_				if (valueHolder == null && (!autowiring || paramTypes.length == resolvedValues.getArgumentCount())) {_					valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__				}_			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType, methodParam)__					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_								"Could not convert argument value of type [" +_										ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_										"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_					Object sourceHolder = valueHolder.getSource()__					if (sourceHolder instanceof ConstructorArgumentValues.ValueHolder) {_						Object sourceValue = ((ConstructorArgumentValues.ValueHolder) sourceHolder).getValue()__						args.resolveNecessary = true__						args.preparedArguments[paramIndex] = sourceValue__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_							"Ambiguous argument values for parameter of type [" + paramType.getName() +_							"] - did you specify the correct bean references as arguments?")__				}_				try {_					Object autowiredArgument = resolveAutowiredArgument(_							methodParam, beanName, autowiredBeanNames, converter, fallback)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam), ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (logger.isDebugEnabled()) {_				logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + (executable instanceof Constructor ? "constructor" : "factory method") +_						" to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,nullable,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,nullable,string,param,names,executable,executable,boolean,autowiring,boolean,fallback,throws,unsatisfied,dependency,exception,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,constructor,argument,values,value,holder,value,holder,null,if,resolved,values,null,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,param,types,length,resolved,values,get,argument,count,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,method,parameter,method,param,method,parameter,for,executable,executable,param,index,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,object,source,holder,value,holder,get,source,if,source,holder,instanceof,constructor,argument,values,value,holder,object,source,value,constructor,argument,values,value,holder,source,holder,get,value,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,method,parameter,method,param,method,parameter,for,executable,executable,param,index,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ambiguous,argument,values,for,parameter,of,type,param,type,get,name,did,you,specify,the,correct,bean,references,as,arguments,try,object,autowired,argument,resolve,autowired,argument,method,param,bean,name,autowired,bean,names,converter,fallback,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,logger,is,debug,enabled,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,executable,instanceof,constructor,constructor,factory,method,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, @Nullable ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class<?>[] paramTypes, @Nullable String[] paramNames, Executable executable, 			boolean autowiring, boolean fallback) throws UnsatisfiedDependencyException;1542899558;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, @Nullable ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class<?>[] paramTypes, @Nullable String[] paramNames, Executable executable,_			boolean autowiring, boolean fallback) throws UnsatisfiedDependencyException {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders = new HashSet<>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : "")__			_			ConstructorArgumentValues.ValueHolder valueHolder = null__			if (resolvedValues != null) {_				valueHolder = resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__				_				_				_				if (valueHolder == null && (!autowiring || paramTypes.length == resolvedValues.getArgumentCount())) {_					valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__				}_			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType, methodParam)__					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_								"Could not convert argument value of type [" +_										ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_										"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_					Object sourceHolder = valueHolder.getSource()__					if (sourceHolder instanceof ConstructorArgumentValues.ValueHolder) {_						Object sourceValue = ((ConstructorArgumentValues.ValueHolder) sourceHolder).getValue()__						args.resolveNecessary = true__						args.preparedArguments[paramIndex] = sourceValue__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_							"Ambiguous argument values for parameter of type [" + paramType.getName() +_							"] - did you specify the correct bean references as arguments?")__				}_				try {_					Object autowiredArgument = resolveAutowiredArgument(_							methodParam, beanName, autowiredBeanNames, converter, fallback)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam), ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (logger.isDebugEnabled()) {_				logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + (executable instanceof Constructor ? "constructor" : "factory method") +_						" to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,nullable,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,nullable,string,param,names,executable,executable,boolean,autowiring,boolean,fallback,throws,unsatisfied,dependency,exception,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,constructor,argument,values,value,holder,value,holder,null,if,resolved,values,null,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,param,types,length,resolved,values,get,argument,count,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,method,parameter,method,param,method,parameter,for,executable,executable,param,index,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,object,source,holder,value,holder,get,source,if,source,holder,instanceof,constructor,argument,values,value,holder,object,source,value,constructor,argument,values,value,holder,source,holder,get,value,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,method,parameter,method,param,method,parameter,for,executable,executable,param,index,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ambiguous,argument,values,for,parameter,of,type,param,type,get,name,did,you,specify,the,correct,bean,references,as,arguments,try,object,autowired,argument,resolve,autowired,argument,method,param,bean,name,autowired,bean,names,converter,fallback,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,logger,is,debug,enabled,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,executable,instanceof,constructor,constructor,factory,method,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> @Nullable 	protected Object resolveAutowiredArgument(MethodParameter param, String beanName, 			@Nullable Set<String> autowiredBeanNames, TypeConverter typeConverter);1506551472;Template method for resolving the specified argument which is supposed to be autowired.;@Nullable_	protected Object resolveAutowiredArgument(MethodParameter param, String beanName,_			@Nullable Set<String> autowiredBeanNames, TypeConverter typeConverter) {__		if (InjectionPoint.class.isAssignableFrom(param.getParameterType())) {_			InjectionPoint injectionPoint = currentInjectionPoint.get()__			if (injectionPoint == null) {_				throw new IllegalStateException("No current InjectionPoint available for " + param)__			}_			return injectionPoint__		}_		return this.beanFactory.resolveDependency(_				new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;nullable,protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,nullable,set,string,autowired,bean,names,type,converter,type,converter,if,injection,point,class,is,assignable,from,param,get,parameter,type,injection,point,injection,point,current,injection,point,get,if,injection,point,null,throw,new,illegal,state,exception,no,current,injection,point,available,for,param,return,injection,point,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter
ConstructorResolver -> @Nullable 	protected Object resolveAutowiredArgument(MethodParameter param, String beanName, 			@Nullable Set<String> autowiredBeanNames, TypeConverter typeConverter);1510606271;Template method for resolving the specified argument which is supposed to be autowired.;@Nullable_	protected Object resolveAutowiredArgument(MethodParameter param, String beanName,_			@Nullable Set<String> autowiredBeanNames, TypeConverter typeConverter) {__		if (InjectionPoint.class.isAssignableFrom(param.getParameterType())) {_			InjectionPoint injectionPoint = currentInjectionPoint.get()__			if (injectionPoint == null) {_				throw new IllegalStateException("No current InjectionPoint available for " + param)__			}_			return injectionPoint__		}_		return this.beanFactory.resolveDependency(_				new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;nullable,protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,nullable,set,string,autowired,bean,names,type,converter,type,converter,if,injection,point,class,is,assignable,from,param,get,parameter,type,injection,point,injection,point,current,injection,point,get,if,injection,point,null,throw,new,illegal,state,exception,no,current,injection,point,available,for,param,return,injection,point,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter
ConstructorResolver -> @Nullable 	protected Object resolveAutowiredArgument(MethodParameter param, String beanName, 			@Nullable Set<String> autowiredBeanNames, TypeConverter typeConverter);1519295386;Template method for resolving the specified argument which is supposed to be autowired.;@Nullable_	protected Object resolveAutowiredArgument(MethodParameter param, String beanName,_			@Nullable Set<String> autowiredBeanNames, TypeConverter typeConverter) {__		if (InjectionPoint.class.isAssignableFrom(param.getParameterType())) {_			InjectionPoint injectionPoint = currentInjectionPoint.get()__			if (injectionPoint == null) {_				throw new IllegalStateException("No current InjectionPoint available for " + param)__			}_			return injectionPoint__		}_		return this.beanFactory.resolveDependency(_				new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;nullable,protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,nullable,set,string,autowired,bean,names,type,converter,type,converter,if,injection,point,class,is,assignable,from,param,get,parameter,type,injection,point,injection,point,current,injection,point,get,if,injection,point,null,throw,new,illegal,state,exception,no,current,injection,point,available,for,param,return,injection,point,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter
ConstructorResolver -> @Nullable 	protected Object resolveAutowiredArgument(MethodParameter param, String beanName, 			@Nullable Set<String> autowiredBeanNames, TypeConverter typeConverter);1519560860;Template method for resolving the specified argument which is supposed to be autowired.;@Nullable_	protected Object resolveAutowiredArgument(MethodParameter param, String beanName,_			@Nullable Set<String> autowiredBeanNames, TypeConverter typeConverter) {__		if (InjectionPoint.class.isAssignableFrom(param.getParameterType())) {_			InjectionPoint injectionPoint = currentInjectionPoint.get()__			if (injectionPoint == null) {_				throw new IllegalStateException("No current InjectionPoint available for " + param)__			}_			return injectionPoint__		}_		return this.beanFactory.resolveDependency(_				new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;nullable,protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,nullable,set,string,autowired,bean,names,type,converter,type,converter,if,injection,point,class,is,assignable,from,param,get,parameter,type,injection,point,injection,point,current,injection,point,get,if,injection,point,null,throw,new,illegal,state,exception,no,current,injection,point,available,for,param,return,injection,point,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter
ConstructorResolver -> @Nullable 	protected Object resolveAutowiredArgument(MethodParameter param, String beanName, 			@Nullable Set<String> autowiredBeanNames, TypeConverter typeConverter);1527623493;Template method for resolving the specified argument which is supposed to be autowired.;@Nullable_	protected Object resolveAutowiredArgument(MethodParameter param, String beanName,_			@Nullable Set<String> autowiredBeanNames, TypeConverter typeConverter) {__		if (InjectionPoint.class.isAssignableFrom(param.getParameterType())) {_			InjectionPoint injectionPoint = currentInjectionPoint.get()__			if (injectionPoint == null) {_				throw new IllegalStateException("No current InjectionPoint available for " + param)__			}_			return injectionPoint__		}_		return this.beanFactory.resolveDependency(_				new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;nullable,protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,nullable,set,string,autowired,bean,names,type,converter,type,converter,if,injection,point,class,is,assignable,from,param,get,parameter,type,injection,point,injection,point,current,injection,point,get,if,injection,point,null,throw,new,illegal,state,exception,no,current,injection,point,available,for,param,return,injection,point,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter
ConstructorResolver -> @Nullable 	protected Object resolveAutowiredArgument(MethodParameter param, String beanName, 			@Nullable Set<String> autowiredBeanNames, TypeConverter typeConverter);1530174524;Template method for resolving the specified argument which is supposed to be autowired.;@Nullable_	protected Object resolveAutowiredArgument(MethodParameter param, String beanName,_			@Nullable Set<String> autowiredBeanNames, TypeConverter typeConverter) {__		if (InjectionPoint.class.isAssignableFrom(param.getParameterType())) {_			InjectionPoint injectionPoint = currentInjectionPoint.get()__			if (injectionPoint == null) {_				throw new IllegalStateException("No current InjectionPoint available for " + param)__			}_			return injectionPoint__		}_		return this.beanFactory.resolveDependency(_				new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;nullable,protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,nullable,set,string,autowired,bean,names,type,converter,type,converter,if,injection,point,class,is,assignable,from,param,get,parameter,type,injection,point,injection,point,current,injection,point,get,if,injection,point,null,throw,new,illegal,state,exception,no,current,injection,point,available,for,param,return,injection,point,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter
ConstructorResolver -> @Nullable 	public BeanWrapper instantiateUsingFactoryMethod( 			final String beanName, final RootBeanDefinition mbd, @Nullable final Object[] explicitArgs);1495868221;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;@Nullable_	public BeanWrapper instantiateUsingFactoryMethod(_			final String beanName, final RootBeanDefinition mbd, @Nullable final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class<?> factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (factoryBean == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"factory-bean '" + factoryBeanName + "' (or a BeanPostProcessor involved) returned null")__			}_			if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) {_				throw new ImplicitlyAppearedSingletonException()__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)___			Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)__			List<Method> candidateSet = new ArrayList<>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_					candidateSet.add(candidate)__				}_			}_			Method[] candidates = candidateSet.toArray(new Method[candidateSet.size()])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Method candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (resolvedValues != null) {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(_									beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (this.beanFactory.logger.isTraceEnabled()) {_								this.beanFactory.logger.trace("Ignoring factory method [" + candidate +_										"] of bean '" + beanName + "': " + ex)__							}_							_							if (causes == null) {_								causes = new LinkedList<>()__							}_							causes.add(ex)__							continue__						}_					}__					else {_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					_					_					_					_					_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&_							!mbd.isLenientConstructorResolution() &&_							paramTypes.length == factoryMethodToUse.getParameterCount() &&_							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				List<String> argTypes = new ArrayList<>(minNrOfArgs)__				if (explicitArgs != null) {_					for (Object arg : explicitArgs) {_						argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null")__					}_				}_				else {_					Set<ValueHolder> valueHolders = new LinkedHashSet<>(resolvedValues.getArgumentCount())__					valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())__					valueHolders.addAll(resolvedValues.getGenericArgumentValues())__					for (ValueHolder value : valueHolders) {_						String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) :_								(value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"))__						argTypes.add(argType)__					}_				}_				String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(minNrOfArgs > 0 ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class == factoryMethodToUse.getReturnType()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Object fb = factoryBean__				final Method factoryMethod = factoryMethodToUse__				final Object[] args = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, fb, factoryMethod, args)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)__			}__			if (beanInstance == null) {_				return null__			}_			bw.setBeanInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via factory method failed", ex)__		}_	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;nullable,public,bean,wrapper,instantiate,using,factory,method,final,string,bean,name,final,root,bean,definition,mbd,nullable,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,factory,bean,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,factory,bean,factory,bean,name,or,a,bean,post,processor,involved,returned,null,if,mbd,is,singleton,this,bean,factory,contains,singleton,bean,name,throw,new,implicitly,appeared,singleton,exception,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,get,candidate,methods,factory,class,mbd,list,method,candidate,set,new,array,list,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,candidate,set,add,candidate,method,candidates,candidate,set,to,array,new,method,candidate,set,size,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,linked,list,unsatisfied,dependency,exception,causes,null,for,method,candidate,candidates,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,mbd,is,lenient,constructor,resolution,param,types,length,factory,method,to,use,get,parameter,count,arrays,equals,param,types,factory,method,to,use,get,parameter,types,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,list,string,arg,types,new,array,list,min,nr,of,args,if,explicit,args,null,for,object,arg,explicit,args,arg,types,add,arg,null,arg,get,class,get,simple,name,null,else,set,value,holder,value,holders,new,linked,hash,set,resolved,values,get,argument,count,value,holders,add,all,resolved,values,get,indexed,argument,values,values,value,holders,add,all,resolved,values,get,generic,argument,values,for,value,holder,value,value,holders,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,null,value,get,value,get,class,get,simple,name,null,arg,types,add,arg,type,string,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,min,nr,of,args,0,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,object,fb,factory,bean,final,method,factory,method,factory,method,to,use,final,object,args,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,fb,factory,method,args,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,factory,bean,factory,method,to,use,args,to,use,if,bean,instance,null,return,null,bw,set,bean,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,factory,method,failed,ex
ConstructorResolver -> @Nullable 	public BeanWrapper instantiateUsingFactoryMethod( 			final String beanName, final RootBeanDefinition mbd, @Nullable final Object[] explicitArgs);1496259743;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;@Nullable_	public BeanWrapper instantiateUsingFactoryMethod(_			final String beanName, final RootBeanDefinition mbd, @Nullable final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class<?> factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (factoryBean == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"factory-bean '" + factoryBeanName + "' (or a BeanPostProcessor involved) returned null")__			}_			if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) {_				throw new ImplicitlyAppearedSingletonException()__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)___			Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)__			List<Method> candidateSet = new ArrayList<>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_					candidateSet.add(candidate)__				}_			}_			Method[] candidates = candidateSet.toArray(new Method[candidateSet.size()])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Method candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (resolvedValues != null) {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(_									beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (this.beanFactory.logger.isTraceEnabled()) {_								this.beanFactory.logger.trace("Ignoring factory method [" + candidate +_										"] of bean '" + beanName + "': " + ex)__							}_							_							if (causes == null) {_								causes = new LinkedList<>()__							}_							causes.add(ex)__							continue__						}_					}__					else {_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					_					_					_					_					_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&_							!mbd.isLenientConstructorResolution() &&_							paramTypes.length == factoryMethodToUse.getParameterCount() &&_							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				List<String> argTypes = new ArrayList<>(minNrOfArgs)__				if (explicitArgs != null) {_					for (Object arg : explicitArgs) {_						argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null")__					}_				}_				else {_					Set<ValueHolder> valueHolders = new LinkedHashSet<>(resolvedValues.getArgumentCount())__					valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())__					valueHolders.addAll(resolvedValues.getGenericArgumentValues())__					for (ValueHolder value : valueHolders) {_						String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) :_								(value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"))__						argTypes.add(argType)__					}_				}_				String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(minNrOfArgs > 0 ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class == factoryMethodToUse.getReturnType()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Object fb = factoryBean__				final Method factoryMethod = factoryMethodToUse__				final Object[] args = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, fb, factoryMethod, args)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)__			}__			if (beanInstance == null) {_				return null__			}_			bw.setBeanInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via factory method failed", ex)__		}_	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;nullable,public,bean,wrapper,instantiate,using,factory,method,final,string,bean,name,final,root,bean,definition,mbd,nullable,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,factory,bean,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,factory,bean,factory,bean,name,or,a,bean,post,processor,involved,returned,null,if,mbd,is,singleton,this,bean,factory,contains,singleton,bean,name,throw,new,implicitly,appeared,singleton,exception,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,get,candidate,methods,factory,class,mbd,list,method,candidate,set,new,array,list,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,candidate,set,add,candidate,method,candidates,candidate,set,to,array,new,method,candidate,set,size,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,linked,list,unsatisfied,dependency,exception,causes,null,for,method,candidate,candidates,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,mbd,is,lenient,constructor,resolution,param,types,length,factory,method,to,use,get,parameter,count,arrays,equals,param,types,factory,method,to,use,get,parameter,types,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,list,string,arg,types,new,array,list,min,nr,of,args,if,explicit,args,null,for,object,arg,explicit,args,arg,types,add,arg,null,arg,get,class,get,simple,name,null,else,set,value,holder,value,holders,new,linked,hash,set,resolved,values,get,argument,count,value,holders,add,all,resolved,values,get,indexed,argument,values,values,value,holders,add,all,resolved,values,get,generic,argument,values,for,value,holder,value,value,holders,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,null,value,get,value,get,class,get,simple,name,null,arg,types,add,arg,type,string,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,min,nr,of,args,0,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,object,fb,factory,bean,final,method,factory,method,factory,method,to,use,final,object,args,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,fb,factory,method,args,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,factory,bean,factory,method,to,use,args,to,use,if,bean,instance,null,return,null,bw,set,bean,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,factory,method,failed,ex
ConstructorResolver -> @Nullable 	public BeanWrapper instantiateUsingFactoryMethod( 			final String beanName, final RootBeanDefinition mbd, @Nullable final Object[] explicitArgs);1496837955;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;@Nullable_	public BeanWrapper instantiateUsingFactoryMethod(_			final String beanName, final RootBeanDefinition mbd, @Nullable final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class<?> factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) {_				throw new ImplicitlyAppearedSingletonException()__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)___			Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)__			List<Method> candidateSet = new ArrayList<>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_					candidateSet.add(candidate)__				}_			}_			Method[] candidates = candidateSet.toArray(new Method[candidateSet.size()])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Method candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (resolvedValues != null) {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(_									beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (this.beanFactory.logger.isTraceEnabled()) {_								this.beanFactory.logger.trace("Ignoring factory method [" + candidate +_										"] of bean '" + beanName + "': " + ex)__							}_							_							if (causes == null) {_								causes = new LinkedList<>()__							}_							causes.add(ex)__							continue__						}_					}__					else {_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					_					_					_					_					_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&_							!mbd.isLenientConstructorResolution() &&_							paramTypes.length == factoryMethodToUse.getParameterCount() &&_							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				List<String> argTypes = new ArrayList<>(minNrOfArgs)__				if (explicitArgs != null) {_					for (Object arg : explicitArgs) {_						argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null")__					}_				}_				else {_					Set<ValueHolder> valueHolders = new LinkedHashSet<>(resolvedValues.getArgumentCount())__					valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())__					valueHolders.addAll(resolvedValues.getGenericArgumentValues())__					for (ValueHolder value : valueHolders) {_						String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) :_								(value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"))__						argTypes.add(argType)__					}_				}_				String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(minNrOfArgs > 0 ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class == factoryMethodToUse.getReturnType()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Object fb = factoryBean__				final Method factoryMethod = factoryMethodToUse__				final Object[] args = argsToUse__				beanInstance = AccessController.doPrivileged((PrivilegedAction<Object>) () ->_						beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, beanFactory, fb, factoryMethod, args),_						beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)__			}__			if (beanInstance == null) {_				return null__			}_			bw.setBeanInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via factory method failed", ex)__		}_	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;nullable,public,bean,wrapper,instantiate,using,factory,method,final,string,bean,name,final,root,bean,definition,mbd,nullable,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,mbd,is,singleton,this,bean,factory,contains,singleton,bean,name,throw,new,implicitly,appeared,singleton,exception,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,get,candidate,methods,factory,class,mbd,list,method,candidate,set,new,array,list,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,candidate,set,add,candidate,method,candidates,candidate,set,to,array,new,method,candidate,set,size,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,linked,list,unsatisfied,dependency,exception,causes,null,for,method,candidate,candidates,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,mbd,is,lenient,constructor,resolution,param,types,length,factory,method,to,use,get,parameter,count,arrays,equals,param,types,factory,method,to,use,get,parameter,types,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,list,string,arg,types,new,array,list,min,nr,of,args,if,explicit,args,null,for,object,arg,explicit,args,arg,types,add,arg,null,arg,get,class,get,simple,name,null,else,set,value,holder,value,holders,new,linked,hash,set,resolved,values,get,argument,count,value,holders,add,all,resolved,values,get,indexed,argument,values,values,value,holders,add,all,resolved,values,get,generic,argument,values,for,value,holder,value,value,holders,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,null,value,get,value,get,class,get,simple,name,null,arg,types,add,arg,type,string,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,min,nr,of,args,0,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,object,fb,factory,bean,final,method,factory,method,factory,method,to,use,final,object,args,args,to,use,bean,instance,access,controller,do,privileged,privileged,action,object,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,fb,factory,method,args,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,factory,bean,factory,method,to,use,args,to,use,if,bean,instance,null,return,null,bw,set,bean,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,factory,method,failed,ex
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod( 			String beanName, RootBeanDefinition mbd, @Nullable Object[] explicitArgs);1534157021;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(_			String beanName, RootBeanDefinition mbd, @Nullable Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class<?> factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) {_				throw new ImplicitlyAppearedSingletonException()__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve, true)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)___			Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)__			List<Method> candidateList = new ArrayList<>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_					candidateList.add(candidate)__				}_			}__			if (candidateList.size() == 1 && explicitArgs == null && !mbd.hasConstructorArgumentValues()) {_				Method uniqueCandidate = candidateList.get(0)__				if (uniqueCandidate.getParameterCount() == 0) {_					synchronized (mbd.constructorArgumentLock) {_						mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__						mbd.constructorArgumentsResolved = true__						mbd.resolvedConstructorArguments = EMPTY_ARGS__					}_					bw.setBeanInstance(instantiate(beanName, mbd, factoryBean, uniqueCandidate, EMPTY_ARGS))__					return bw__				}_			}__			Method[] candidates = candidateList.toArray(new Method[0])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				if (mbd.hasConstructorArgumentValues()) {_					ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__					resolvedValues = new ConstructorArgumentValues()__					minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__				}_				else {_					minNrOfArgs = 0__				}_			}__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Method candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (explicitArgs != null) {_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}_					else {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw,_									paramTypes, paramNames, candidate, autowiring, candidates.length == 1)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (logger.isTraceEnabled()) {_								logger.trace("Ignoring factory method [" + candidate + "] of bean '" + beanName + "': " + ex)__							}_							_							if (causes == null) {_								causes = new LinkedList<>()__							}_							causes.add(ex)__							continue__						}_					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					_					_					_					_					_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&_							!mbd.isLenientConstructorResolution() &&_							paramTypes.length == factoryMethodToUse.getParameterCount() &&_							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				List<String> argTypes = new ArrayList<>(minNrOfArgs)__				if (explicitArgs != null) {_					for (Object arg : explicitArgs) {_						argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null")__					}_				}_				else if (resolvedValues != null) {_					Set<ValueHolder> valueHolders = new LinkedHashSet<>(resolvedValues.getArgumentCount())__					valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())__					valueHolders.addAll(resolvedValues.getGenericArgumentValues())__					for (ValueHolder value : valueHolders) {_						String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) :_								(value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"))__						argTypes.add(argType)__					}_				}_				String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(minNrOfArgs > 0 ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class == factoryMethodToUse.getReturnType()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		bw.setBeanInstance(instantiate(beanName, mbd, factoryBean, factoryMethodToUse, argsToUse))__		return bw__	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,string,bean,name,root,bean,definition,mbd,nullable,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,mbd,is,singleton,this,bean,factory,contains,singleton,bean,name,throw,new,implicitly,appeared,singleton,exception,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,true,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,get,candidate,methods,factory,class,mbd,list,method,candidate,list,new,array,list,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,candidate,list,add,candidate,if,candidate,list,size,1,explicit,args,null,mbd,has,constructor,argument,values,method,unique,candidate,candidate,list,get,0,if,unique,candidate,get,parameter,count,0,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate,mbd,constructor,arguments,resolved,true,mbd,resolved,constructor,arguments,bw,set,bean,instance,instantiate,bean,name,mbd,factory,bean,unique,candidate,return,bw,method,candidates,candidate,list,to,array,new,method,0,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,if,mbd,has,constructor,argument,values,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,else,min,nr,of,args,0,linked,list,unsatisfied,dependency,exception,causes,null,for,method,candidate,candidates,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,explicit,args,null,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,else,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,candidates,length,1,catch,unsatisfied,dependency,exception,ex,if,logger,is,trace,enabled,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,mbd,is,lenient,constructor,resolution,param,types,length,factory,method,to,use,get,parameter,count,arrays,equals,param,types,factory,method,to,use,get,parameter,types,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,list,string,arg,types,new,array,list,min,nr,of,args,if,explicit,args,null,for,object,arg,explicit,args,arg,types,add,arg,null,arg,get,class,get,simple,name,null,else,if,resolved,values,null,set,value,holder,value,holders,new,linked,hash,set,resolved,values,get,argument,count,value,holders,add,all,resolved,values,get,indexed,argument,values,values,value,holders,add,all,resolved,values,get,generic,argument,values,for,value,holder,value,value,holders,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,null,value,get,value,get,class,get,simple,name,null,arg,types,add,arg,type,string,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,min,nr,of,args,0,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,bw,set,bean,instance,instantiate,bean,name,mbd,factory,bean,factory,method,to,use,args,to,use,return,bw
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod( 			String beanName, RootBeanDefinition mbd, @Nullable Object[] explicitArgs);1537388389;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(_			String beanName, RootBeanDefinition mbd, @Nullable Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class<?> factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) {_				throw new ImplicitlyAppearedSingletonException()__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve, true)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)___			Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)__			List<Method> candidateList = new ArrayList<>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_					candidateList.add(candidate)__				}_			}__			if (candidateList.size() == 1 && explicitArgs == null && !mbd.hasConstructorArgumentValues()) {_				Method uniqueCandidate = candidateList.get(0)__				if (uniqueCandidate.getParameterCount() == 0) {_					synchronized (mbd.constructorArgumentLock) {_						mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__						mbd.constructorArgumentsResolved = true__						mbd.resolvedConstructorArguments = EMPTY_ARGS__					}_					bw.setBeanInstance(instantiate(beanName, mbd, factoryBean, uniqueCandidate, EMPTY_ARGS))__					return bw__				}_			}__			Method[] candidates = candidateList.toArray(new Method[0])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == AutowireCapableBeanFactory.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				if (mbd.hasConstructorArgumentValues()) {_					ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__					resolvedValues = new ConstructorArgumentValues()__					minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__				}_				else {_					minNrOfArgs = 0__				}_			}__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Method candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (explicitArgs != null) {_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}_					else {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw,_									paramTypes, paramNames, candidate, autowiring, candidates.length == 1)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (logger.isTraceEnabled()) {_								logger.trace("Ignoring factory method [" + candidate + "] of bean '" + beanName + "': " + ex)__							}_							_							if (causes == null) {_								causes = new LinkedList<>()__							}_							causes.add(ex)__							continue__						}_					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					_					_					_					_					_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&_							!mbd.isLenientConstructorResolution() &&_							paramTypes.length == factoryMethodToUse.getParameterCount() &&_							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				List<String> argTypes = new ArrayList<>(minNrOfArgs)__				if (explicitArgs != null) {_					for (Object arg : explicitArgs) {_						argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null")__					}_				}_				else if (resolvedValues != null) {_					Set<ValueHolder> valueHolders = new LinkedHashSet<>(resolvedValues.getArgumentCount())__					valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())__					valueHolders.addAll(resolvedValues.getGenericArgumentValues())__					for (ValueHolder value : valueHolders) {_						String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) :_								(value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"))__						argTypes.add(argType)__					}_				}_				String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(minNrOfArgs > 0 ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class == factoryMethodToUse.getReturnType()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		bw.setBeanInstance(instantiate(beanName, mbd, factoryBean, factoryMethodToUse, argsToUse))__		return bw__	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,string,bean,name,root,bean,definition,mbd,nullable,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,mbd,is,singleton,this,bean,factory,contains,singleton,bean,name,throw,new,implicitly,appeared,singleton,exception,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,true,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,get,candidate,methods,factory,class,mbd,list,method,candidate,list,new,array,list,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,candidate,list,add,candidate,if,candidate,list,size,1,explicit,args,null,mbd,has,constructor,argument,values,method,unique,candidate,candidate,list,get,0,if,unique,candidate,get,parameter,count,0,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate,mbd,constructor,arguments,resolved,true,mbd,resolved,constructor,arguments,bw,set,bean,instance,instantiate,bean,name,mbd,factory,bean,unique,candidate,return,bw,method,candidates,candidate,list,to,array,new,method,0,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,autowire,capable,bean,factory,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,if,mbd,has,constructor,argument,values,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,else,min,nr,of,args,0,linked,list,unsatisfied,dependency,exception,causes,null,for,method,candidate,candidates,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,explicit,args,null,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,else,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,candidates,length,1,catch,unsatisfied,dependency,exception,ex,if,logger,is,trace,enabled,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,mbd,is,lenient,constructor,resolution,param,types,length,factory,method,to,use,get,parameter,count,arrays,equals,param,types,factory,method,to,use,get,parameter,types,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,list,string,arg,types,new,array,list,min,nr,of,args,if,explicit,args,null,for,object,arg,explicit,args,arg,types,add,arg,null,arg,get,class,get,simple,name,null,else,if,resolved,values,null,set,value,holder,value,holders,new,linked,hash,set,resolved,values,get,argument,count,value,holders,add,all,resolved,values,get,indexed,argument,values,values,value,holders,add,all,resolved,values,get,generic,argument,values,for,value,holder,value,value,holders,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,null,value,get,value,get,class,get,simple,name,null,arg,types,add,arg,type,string,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,min,nr,of,args,0,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,bw,set,bean,instance,instantiate,bean,name,mbd,factory,bean,factory,method,to,use,args,to,use,return,bw
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod( 			String beanName, RootBeanDefinition mbd, @Nullable Object[] explicitArgs);1539377630;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(_			String beanName, RootBeanDefinition mbd, @Nullable Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class<?> factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) {_				throw new ImplicitlyAppearedSingletonException()__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve, true)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)___			Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)__			List<Method> candidateList = new ArrayList<>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_					candidateList.add(candidate)__				}_			}__			if (candidateList.size() == 1 && explicitArgs == null && !mbd.hasConstructorArgumentValues()) {_				Method uniqueCandidate = candidateList.get(0)__				if (uniqueCandidate.getParameterCount() == 0) {_					mbd.factoryMethodToIntrospect = uniqueCandidate__					synchronized (mbd.constructorArgumentLock) {_						mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__						mbd.constructorArgumentsResolved = true__						mbd.resolvedConstructorArguments = EMPTY_ARGS__					}_					bw.setBeanInstance(instantiate(beanName, mbd, factoryBean, uniqueCandidate, EMPTY_ARGS))__					return bw__				}_			}__			Method[] candidates = candidateList.toArray(new Method[0])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == AutowireCapableBeanFactory.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				if (mbd.hasConstructorArgumentValues()) {_					ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__					resolvedValues = new ConstructorArgumentValues()__					minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__				}_				else {_					minNrOfArgs = 0__				}_			}__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Method candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (explicitArgs != null) {_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}_					else {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw,_									paramTypes, paramNames, candidate, autowiring, candidates.length == 1)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (logger.isTraceEnabled()) {_								logger.trace("Ignoring factory method [" + candidate + "] of bean '" + beanName + "': " + ex)__							}_							_							if (causes == null) {_								causes = new LinkedList<>()__							}_							causes.add(ex)__							continue__						}_					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					_					_					_					_					_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&_							!mbd.isLenientConstructorResolution() &&_							paramTypes.length == factoryMethodToUse.getParameterCount() &&_							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				List<String> argTypes = new ArrayList<>(minNrOfArgs)__				if (explicitArgs != null) {_					for (Object arg : explicitArgs) {_						argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null")__					}_				}_				else if (resolvedValues != null) {_					Set<ValueHolder> valueHolders = new LinkedHashSet<>(resolvedValues.getArgumentCount())__					valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())__					valueHolders.addAll(resolvedValues.getGenericArgumentValues())__					for (ValueHolder value : valueHolders) {_						String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) :_								(value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"))__						argTypes.add(argType)__					}_				}_				String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(minNrOfArgs > 0 ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class == factoryMethodToUse.getReturnType()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				mbd.factoryMethodToIntrospect = factoryMethodToUse__				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		bw.setBeanInstance(instantiate(beanName, mbd, factoryBean, factoryMethodToUse, argsToUse))__		return bw__	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,string,bean,name,root,bean,definition,mbd,nullable,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,mbd,is,singleton,this,bean,factory,contains,singleton,bean,name,throw,new,implicitly,appeared,singleton,exception,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,true,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,get,candidate,methods,factory,class,mbd,list,method,candidate,list,new,array,list,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,candidate,list,add,candidate,if,candidate,list,size,1,explicit,args,null,mbd,has,constructor,argument,values,method,unique,candidate,candidate,list,get,0,if,unique,candidate,get,parameter,count,0,mbd,factory,method,to,introspect,unique,candidate,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate,mbd,constructor,arguments,resolved,true,mbd,resolved,constructor,arguments,bw,set,bean,instance,instantiate,bean,name,mbd,factory,bean,unique,candidate,return,bw,method,candidates,candidate,list,to,array,new,method,0,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,autowire,capable,bean,factory,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,if,mbd,has,constructor,argument,values,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,else,min,nr,of,args,0,linked,list,unsatisfied,dependency,exception,causes,null,for,method,candidate,candidates,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,explicit,args,null,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,else,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,candidates,length,1,catch,unsatisfied,dependency,exception,ex,if,logger,is,trace,enabled,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,mbd,is,lenient,constructor,resolution,param,types,length,factory,method,to,use,get,parameter,count,arrays,equals,param,types,factory,method,to,use,get,parameter,types,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,list,string,arg,types,new,array,list,min,nr,of,args,if,explicit,args,null,for,object,arg,explicit,args,arg,types,add,arg,null,arg,get,class,get,simple,name,null,else,if,resolved,values,null,set,value,holder,value,holders,new,linked,hash,set,resolved,values,get,argument,count,value,holders,add,all,resolved,values,get,indexed,argument,values,values,value,holders,add,all,resolved,values,get,generic,argument,values,for,value,holder,value,value,holders,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,null,value,get,value,get,class,get,simple,name,null,arg,types,add,arg,type,string,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,min,nr,of,args,0,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,mbd,factory,method,to,introspect,factory,method,to,use,args,holder,to,use,store,cache,mbd,factory,method,to,use,bw,set,bean,instance,instantiate,bean,name,mbd,factory,bean,factory,method,to,use,args,to,use,return,bw
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod( 			String beanName, RootBeanDefinition mbd, @Nullable Object[] explicitArgs);1542899558;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(_			String beanName, RootBeanDefinition mbd, @Nullable Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class<?> factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) {_				throw new ImplicitlyAppearedSingletonException()__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve, true)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)___			Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)__			List<Method> candidateList = new ArrayList<>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_					candidateList.add(candidate)__				}_			}__			if (candidateList.size() == 1 && explicitArgs == null && !mbd.hasConstructorArgumentValues()) {_				Method uniqueCandidate = candidateList.get(0)__				if (uniqueCandidate.getParameterCount() == 0) {_					mbd.factoryMethodToIntrospect = uniqueCandidate__					synchronized (mbd.constructorArgumentLock) {_						mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__						mbd.constructorArgumentsResolved = true__						mbd.resolvedConstructorArguments = EMPTY_ARGS__					}_					bw.setBeanInstance(instantiate(beanName, mbd, factoryBean, uniqueCandidate, EMPTY_ARGS))__					return bw__				}_			}__			Method[] candidates = candidateList.toArray(new Method[0])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == AutowireCapableBeanFactory.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				if (mbd.hasConstructorArgumentValues()) {_					ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__					resolvedValues = new ConstructorArgumentValues()__					minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__				}_				else {_					minNrOfArgs = 0__				}_			}__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Method candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (explicitArgs != null) {_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}_					else {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw,_									paramTypes, paramNames, candidate, autowiring, candidates.length == 1)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (logger.isTraceEnabled()) {_								logger.trace("Ignoring factory method [" + candidate + "] of bean '" + beanName + "': " + ex)__							}_							_							if (causes == null) {_								causes = new LinkedList<>()__							}_							causes.add(ex)__							continue__						}_					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					_					_					_					_					_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&_							!mbd.isLenientConstructorResolution() &&_							paramTypes.length == factoryMethodToUse.getParameterCount() &&_							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				List<String> argTypes = new ArrayList<>(minNrOfArgs)__				if (explicitArgs != null) {_					for (Object arg : explicitArgs) {_						argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null")__					}_				}_				else if (resolvedValues != null) {_					Set<ValueHolder> valueHolders = new LinkedHashSet<>(resolvedValues.getArgumentCount())__					valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())__					valueHolders.addAll(resolvedValues.getGenericArgumentValues())__					for (ValueHolder value : valueHolders) {_						String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) :_								(value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"))__						argTypes.add(argType)__					}_				}_				String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(minNrOfArgs > 0 ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class == factoryMethodToUse.getReturnType()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				mbd.factoryMethodToIntrospect = factoryMethodToUse__				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		Assert.state(argsToUse != null, "Unresolved factory method arguments")__		bw.setBeanInstance(instantiate(beanName, mbd, factoryBean, factoryMethodToUse, argsToUse))__		return bw__	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,string,bean,name,root,bean,definition,mbd,nullable,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,mbd,is,singleton,this,bean,factory,contains,singleton,bean,name,throw,new,implicitly,appeared,singleton,exception,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,true,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,get,candidate,methods,factory,class,mbd,list,method,candidate,list,new,array,list,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,candidate,list,add,candidate,if,candidate,list,size,1,explicit,args,null,mbd,has,constructor,argument,values,method,unique,candidate,candidate,list,get,0,if,unique,candidate,get,parameter,count,0,mbd,factory,method,to,introspect,unique,candidate,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate,mbd,constructor,arguments,resolved,true,mbd,resolved,constructor,arguments,bw,set,bean,instance,instantiate,bean,name,mbd,factory,bean,unique,candidate,return,bw,method,candidates,candidate,list,to,array,new,method,0,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,autowire,capable,bean,factory,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,if,mbd,has,constructor,argument,values,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,else,min,nr,of,args,0,linked,list,unsatisfied,dependency,exception,causes,null,for,method,candidate,candidates,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,explicit,args,null,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,else,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,candidates,length,1,catch,unsatisfied,dependency,exception,ex,if,logger,is,trace,enabled,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,mbd,is,lenient,constructor,resolution,param,types,length,factory,method,to,use,get,parameter,count,arrays,equals,param,types,factory,method,to,use,get,parameter,types,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,list,string,arg,types,new,array,list,min,nr,of,args,if,explicit,args,null,for,object,arg,explicit,args,arg,types,add,arg,null,arg,get,class,get,simple,name,null,else,if,resolved,values,null,set,value,holder,value,holders,new,linked,hash,set,resolved,values,get,argument,count,value,holders,add,all,resolved,values,get,indexed,argument,values,values,value,holders,add,all,resolved,values,get,generic,argument,values,for,value,holder,value,value,holders,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,null,value,get,value,get,class,get,simple,name,null,arg,types,add,arg,type,string,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,min,nr,of,args,0,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,mbd,factory,method,to,introspect,factory,method,to,use,args,holder,to,use,store,cache,mbd,factory,method,to,use,assert,state,args,to,use,null,unresolved,factory,method,arguments,bw,set,bean,instance,instantiate,bean,name,mbd,factory,bean,factory,method,to,use,args,to,use,return,bw
ConstructorResolver -> public BeanWrapper autowireConstructor(String beanName, RootBeanDefinition mbd, 			@Nullable Constructor<?>[] chosenCtors, @Nullable Object[] explicitArgs);1534157021;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(String beanName, RootBeanDefinition mbd,_			@Nullable Constructor<?>[] chosenCtors, @Nullable Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor<?> constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve, true)__			}_		}__		if (constructorToUse == null || argsToUse == null) {_			_			Constructor<?>[] candidates = chosenCtors__			if (candidates == null) {_				Class<?> beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_							"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}__			if (candidates.length == 1 && explicitArgs == null && !mbd.hasConstructorArgumentValues()) {_				Constructor<?> uniqueCandidate = candidates[0]__				if (uniqueCandidate.getParameterCount() == 0) {_					synchronized (mbd.constructorArgumentLock) {_						mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__						mbd.constructorArgumentsResolved = true__						mbd.resolvedConstructorArguments = EMPTY_ARGS__					}_					bw.setBeanInstance(instantiate(beanName, mbd, uniqueCandidate, EMPTY_ARGS))__					return bw__				}_			}__			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor<?>> ambiguousConstructors = null__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Constructor<?> candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)__						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames,_								getUserDeclaredConstructor(candidate), autowiring, candidates.length == 1)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (logger.isTraceEnabled()) {_							logger.trace("Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						_						if (causes == null) {_							causes = new LinkedList<>()__						}_						causes.add(ex)__						continue__					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		bw.setBeanInstance(instantiate(beanName, mbd, constructorToUse, argsToUse))__		return bw__	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,string,bean,name,root,bean,definition,mbd,nullable,constructor,chosen,ctors,nullable,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,true,if,constructor,to,use,null,args,to,use,null,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,if,candidates,length,1,explicit,args,null,mbd,has,constructor,argument,values,constructor,unique,candidate,candidates,0,if,unique,candidate,get,parameter,count,0,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate,mbd,constructor,arguments,resolved,true,mbd,resolved,constructor,arguments,bw,set,bean,instance,instantiate,bean,name,mbd,unique,candidate,return,bw,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,linked,list,unsatisfied,dependency,exception,causes,null,for,constructor,candidate,candidates,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,constructor,properties,checker,evaluate,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,get,user,declared,constructor,candidate,autowiring,candidates,length,1,catch,unsatisfied,dependency,exception,ex,if,logger,is,trace,enabled,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,bw,set,bean,instance,instantiate,bean,name,mbd,constructor,to,use,args,to,use,return,bw
ConstructorResolver -> public BeanWrapper autowireConstructor(String beanName, RootBeanDefinition mbd, 			@Nullable Constructor<?>[] chosenCtors, @Nullable Object[] explicitArgs);1537388389;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(String beanName, RootBeanDefinition mbd,_			@Nullable Constructor<?>[] chosenCtors, @Nullable Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor<?> constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve, true)__			}_		}__		if (constructorToUse == null || argsToUse == null) {_			_			Constructor<?>[] candidates = chosenCtors__			if (candidates == null) {_				Class<?> beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_							"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}__			if (candidates.length == 1 && explicitArgs == null && !mbd.hasConstructorArgumentValues()) {_				Constructor<?> uniqueCandidate = candidates[0]__				if (uniqueCandidate.getParameterCount() == 0) {_					synchronized (mbd.constructorArgumentLock) {_						mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__						mbd.constructorArgumentsResolved = true__						mbd.resolvedConstructorArguments = EMPTY_ARGS__					}_					bw.setBeanInstance(instantiate(beanName, mbd, uniqueCandidate, EMPTY_ARGS))__					return bw__				}_			}__			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == AutowireCapableBeanFactory.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor<?>> ambiguousConstructors = null__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Constructor<?> candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)__						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames,_								getUserDeclaredConstructor(candidate), autowiring, candidates.length == 1)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (logger.isTraceEnabled()) {_							logger.trace("Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						_						if (causes == null) {_							causes = new LinkedList<>()__						}_						causes.add(ex)__						continue__					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		bw.setBeanInstance(instantiate(beanName, mbd, constructorToUse, argsToUse))__		return bw__	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,string,bean,name,root,bean,definition,mbd,nullable,constructor,chosen,ctors,nullable,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,true,if,constructor,to,use,null,args,to,use,null,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,if,candidates,length,1,explicit,args,null,mbd,has,constructor,argument,values,constructor,unique,candidate,candidates,0,if,unique,candidate,get,parameter,count,0,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate,mbd,constructor,arguments,resolved,true,mbd,resolved,constructor,arguments,bw,set,bean,instance,instantiate,bean,name,mbd,unique,candidate,return,bw,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,autowire,capable,bean,factory,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,linked,list,unsatisfied,dependency,exception,causes,null,for,constructor,candidate,candidates,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,constructor,properties,checker,evaluate,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,get,user,declared,constructor,candidate,autowiring,candidates,length,1,catch,unsatisfied,dependency,exception,ex,if,logger,is,trace,enabled,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,bw,set,bean,instance,instantiate,bean,name,mbd,constructor,to,use,args,to,use,return,bw
ConstructorResolver -> public BeanWrapper autowireConstructor(String beanName, RootBeanDefinition mbd, 			@Nullable Constructor<?>[] chosenCtors, @Nullable Object[] explicitArgs);1539377630;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(String beanName, RootBeanDefinition mbd,_			@Nullable Constructor<?>[] chosenCtors, @Nullable Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor<?> constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve, true)__			}_		}__		if (constructorToUse == null || argsToUse == null) {_			_			Constructor<?>[] candidates = chosenCtors__			if (candidates == null) {_				Class<?> beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_							"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}__			if (candidates.length == 1 && explicitArgs == null && !mbd.hasConstructorArgumentValues()) {_				Constructor<?> uniqueCandidate = candidates[0]__				if (uniqueCandidate.getParameterCount() == 0) {_					synchronized (mbd.constructorArgumentLock) {_						mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__						mbd.constructorArgumentsResolved = true__						mbd.resolvedConstructorArguments = EMPTY_ARGS__					}_					bw.setBeanInstance(instantiate(beanName, mbd, uniqueCandidate, EMPTY_ARGS))__					return bw__				}_			}__			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == AutowireCapableBeanFactory.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor<?>> ambiguousConstructors = null__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Constructor<?> candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)__						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames,_								getUserDeclaredConstructor(candidate), autowiring, candidates.length == 1)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (logger.isTraceEnabled()) {_							logger.trace("Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						_						if (causes == null) {_							causes = new LinkedList<>()__						}_						causes.add(ex)__						continue__					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		bw.setBeanInstance(instantiate(beanName, mbd, constructorToUse, argsToUse))__		return bw__	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,string,bean,name,root,bean,definition,mbd,nullable,constructor,chosen,ctors,nullable,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,true,if,constructor,to,use,null,args,to,use,null,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,if,candidates,length,1,explicit,args,null,mbd,has,constructor,argument,values,constructor,unique,candidate,candidates,0,if,unique,candidate,get,parameter,count,0,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate,mbd,constructor,arguments,resolved,true,mbd,resolved,constructor,arguments,bw,set,bean,instance,instantiate,bean,name,mbd,unique,candidate,return,bw,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,autowire,capable,bean,factory,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,linked,list,unsatisfied,dependency,exception,causes,null,for,constructor,candidate,candidates,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,constructor,properties,checker,evaluate,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,get,user,declared,constructor,candidate,autowiring,candidates,length,1,catch,unsatisfied,dependency,exception,ex,if,logger,is,trace,enabled,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,bw,set,bean,instance,instantiate,bean,name,mbd,constructor,to,use,args,to,use,return,bw
ConstructorResolver -> public BeanWrapper autowireConstructor(String beanName, RootBeanDefinition mbd, 			@Nullable Constructor<?>[] chosenCtors, @Nullable Object[] explicitArgs);1542899558;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(String beanName, RootBeanDefinition mbd,_			@Nullable Constructor<?>[] chosenCtors, @Nullable Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor<?> constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve, true)__			}_		}__		if (constructorToUse == null || argsToUse == null) {_			_			Constructor<?>[] candidates = chosenCtors__			if (candidates == null) {_				Class<?> beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_							"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}__			if (candidates.length == 1 && explicitArgs == null && !mbd.hasConstructorArgumentValues()) {_				Constructor<?> uniqueCandidate = candidates[0]__				if (uniqueCandidate.getParameterCount() == 0) {_					synchronized (mbd.constructorArgumentLock) {_						mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__						mbd.constructorArgumentsResolved = true__						mbd.resolvedConstructorArguments = EMPTY_ARGS__					}_					bw.setBeanInstance(instantiate(beanName, mbd, uniqueCandidate, EMPTY_ARGS))__					return bw__				}_			}__			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == AutowireCapableBeanFactory.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor<?>> ambiguousConstructors = null__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Constructor<?> candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)__						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames,_								getUserDeclaredConstructor(candidate), autowiring, candidates.length == 1)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (logger.isTraceEnabled()) {_							logger.trace("Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						_						if (causes == null) {_							causes = new LinkedList<>()__						}_						causes.add(ex)__						continue__					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		Assert.state(argsToUse != null, "Unresolved constructor arguments")__		bw.setBeanInstance(instantiate(beanName, mbd, constructorToUse, argsToUse))__		return bw__	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,string,bean,name,root,bean,definition,mbd,nullable,constructor,chosen,ctors,nullable,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,true,if,constructor,to,use,null,args,to,use,null,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,if,candidates,length,1,explicit,args,null,mbd,has,constructor,argument,values,constructor,unique,candidate,candidates,0,if,unique,candidate,get,parameter,count,0,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate,mbd,constructor,arguments,resolved,true,mbd,resolved,constructor,arguments,bw,set,bean,instance,instantiate,bean,name,mbd,unique,candidate,return,bw,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,autowire,capable,bean,factory,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,linked,list,unsatisfied,dependency,exception,causes,null,for,constructor,candidate,candidates,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,constructor,properties,checker,evaluate,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,get,user,declared,constructor,candidate,autowiring,candidates,length,1,catch,unsatisfied,dependency,exception,ex,if,logger,is,trace,enabled,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,constructor,to,use,assert,state,args,to,use,null,unresolved,constructor,arguments,bw,set,bean,instance,instantiate,bean,name,mbd,constructor,to,use,args,to,use,return,bw
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1328020251;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1356735495;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1357119239;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1362408075;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1368482696;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1383520795;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1385412762;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1392245296;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1392250115;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1394032589;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1404505819;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1409688815;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1413920443;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1419352511;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1432125256;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1450707100;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1456432609;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1456486263;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1457697160;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1458311433;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1458323493;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1460031510;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1467730834;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1467844672;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1469030791;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1469367243;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1478538021;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1495868221;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1496259743;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1496837955;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1503007895;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1503414318;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1506551472;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1510606271;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1519295386;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1519560860;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1527623493;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__		this.logger = beanFactory.getLogger()__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory,this,logger,bean,factory,get,logger
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1530174524;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__		this.logger = beanFactory.getLogger()__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory,this,logger,bean,factory,get,logger
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1532385723;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__		this.logger = beanFactory.getLogger()__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory,this,logger,bean,factory,get,logger
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1532430234;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__		this.logger = beanFactory.getLogger()__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory,this,logger,bean,factory,get,logger
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1532577558;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__		this.logger = beanFactory.getLogger()__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory,this,logger,bean,factory,get,logger
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1534157021;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__		this.logger = beanFactory.getLogger()__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory,this,logger,bean,factory,get,logger
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1537388389;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__		this.logger = beanFactory.getLogger()__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory,this,logger,bean,factory,get,logger
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1539377630;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__		this.logger = beanFactory.getLogger()__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory,this,logger,bean,factory,get,logger
ConstructorResolver -> public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory);1542899558;Create a new ConstructorResolver for the given factory and instantiation strategy._@param beanFactory the BeanFactory to work with;public ConstructorResolver(AbstractAutowireCapableBeanFactory beanFactory) {_		this.beanFactory = beanFactory__		this.logger = beanFactory.getLogger()__	};create,a,new,constructor,resolver,for,the,given,factory,and,instantiation,strategy,param,bean,factory,the,bean,factory,to,work,with;public,constructor,resolver,abstract,autowire,capable,bean,factory,bean,factory,this,bean,factory,bean,factory,this,logger,bean,factory,get,logger
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod( 			final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs);1392245296;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(_			final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class<?> factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (factoryBean == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"factory-bean '" + factoryBeanName + "' returned null")__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)___			Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)__			List<Method> candidateSet = new ArrayList<Method>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_					candidateSet.add(candidate)__				}_			}_			Method[] candidates = candidateSet.toArray(new Method[candidateSet.size()])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			List<Exception> causes = null___			for (int i = 0_ i < candidates.length_ i++) {_				Method candidate = candidates[i]__				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (resolvedValues != null) {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(_									beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (this.beanFactory.logger.isTraceEnabled()) {_								this.beanFactory.logger.trace("Ignoring factory method [" + candidate +_										"] of bean '" + beanName + "': " + ex)__							}_							if (i == candidates.length - 1 && argsHolderToUse == null) {_								if (causes != null) {_									for (Exception cause : causes) {_										this.beanFactory.onSuppressedException(cause)__									}_								}_								throw ex__							}_							else {_								_								if (causes == null) {_									causes = new LinkedList<Exception>()__								}_								causes.add(ex)__								continue__							}_						}_					}__					else {_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					_					_					_					_					_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&_							!mbd.isLenientConstructorResolution() &&_							paramTypes.length == factoryMethodToUse.getParameterTypes().length &&_							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<Method>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				boolean hasArgs = (resolvedValues.getArgumentCount() > 0)__				String argDesc = ""__				if (hasArgs) {_					List<String> argTypes = new ArrayList<String>()__					for (ValueHolder value : resolvedValues.getIndexedArgumentValues().values()) {_						String argType = (value.getType() != null ?_								ClassUtils.getShortName(value.getType()) : value.getValue().getClass().getSimpleName())__						argTypes.add(argType)__					}_					argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				}_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(hasArgs ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class.equals(factoryMethodToUse.getReturnType())) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Object fb = factoryBean__				final Method factoryMethod = factoryMethodToUse__				final Object[] args = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, fb, factoryMethod, args)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, beanFactory, factoryBean, factoryMethodToUse, argsToUse)__			}__			if (beanInstance == null) {_				return null__			}_			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Instantiation of bean failed", ex)__		}_	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,final,string,bean,name,final,root,bean,definition,mbd,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,factory,bean,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,factory,bean,factory,bean,name,returned,null,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,get,candidate,methods,factory,class,mbd,list,method,candidate,set,new,array,list,method,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,candidate,set,add,candidate,method,candidates,candidate,set,to,array,new,method,candidate,set,size,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,list,exception,causes,null,for,int,i,0,i,candidates,length,i,method,candidate,candidates,i,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,i,candidates,length,1,args,holder,to,use,null,if,causes,null,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,else,if,causes,null,causes,new,linked,list,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,mbd,is,lenient,constructor,resolution,param,types,length,factory,method,to,use,get,parameter,types,length,arrays,equals,param,types,factory,method,to,use,get,parameter,types,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,method,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,boolean,has,args,resolved,values,get,argument,count,0,string,arg,desc,if,has,args,list,string,arg,types,new,array,list,string,for,value,holder,value,resolved,values,get,indexed,argument,values,values,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,get,class,get,simple,name,arg,types,add,arg,type,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,has,args,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,equals,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,object,fb,factory,bean,final,method,factory,method,factory,method,to,use,final,object,args,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,fb,factory,method,args,bean,factory,get,access,control,context,else,bean,instance,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,factory,bean,factory,method,to,use,args,to,use,if,bean,instance,null,return,null,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,instantiation,of,bean,failed,ex
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod( 			final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs);1392250115;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(_			final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class<?> factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (factoryBean == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"factory-bean '" + factoryBeanName + "' returned null")__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)___			Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)__			List<Method> candidateSet = new ArrayList<Method>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_					candidateSet.add(candidate)__				}_			}_			Method[] candidates = candidateSet.toArray(new Method[candidateSet.size()])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			List<Exception> causes = null___			for (int i = 0_ i < candidates.length_ i++) {_				Method candidate = candidates[i]__				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (resolvedValues != null) {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(_									beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (this.beanFactory.logger.isTraceEnabled()) {_								this.beanFactory.logger.trace("Ignoring factory method [" + candidate +_										"] of bean '" + beanName + "': " + ex)__							}_							if (i == candidates.length - 1 && argsHolderToUse == null) {_								if (causes != null) {_									for (Exception cause : causes) {_										this.beanFactory.onSuppressedException(cause)__									}_								}_								throw ex__							}_							else {_								_								if (causes == null) {_									causes = new LinkedList<Exception>()__								}_								causes.add(ex)__								continue__							}_						}_					}__					else {_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					_					_					_					_					_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&_							!mbd.isLenientConstructorResolution() &&_							paramTypes.length == factoryMethodToUse.getParameterTypes().length &&_							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<Method>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				boolean hasArgs = (resolvedValues.getArgumentCount() > 0)__				String argDesc = ""__				if (hasArgs) {_					List<String> argTypes = new ArrayList<String>()__					for (ValueHolder value : resolvedValues.getIndexedArgumentValues().values()) {_						String argType = (value.getType() != null ?_								ClassUtils.getShortName(value.getType()) : value.getValue().getClass().getSimpleName())__						argTypes.add(argType)__					}_					argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				}_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(hasArgs ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class.equals(factoryMethodToUse.getReturnType())) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Object fb = factoryBean__				final Method factoryMethod = factoryMethodToUse__				final Object[] args = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, fb, factoryMethod, args)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, beanFactory, factoryBean, factoryMethodToUse, argsToUse)__			}__			if (beanInstance == null) {_				return null__			}_			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Instantiation of bean failed", ex)__		}_	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,final,string,bean,name,final,root,bean,definition,mbd,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,factory,bean,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,factory,bean,factory,bean,name,returned,null,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,get,candidate,methods,factory,class,mbd,list,method,candidate,set,new,array,list,method,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,candidate,set,add,candidate,method,candidates,candidate,set,to,array,new,method,candidate,set,size,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,list,exception,causes,null,for,int,i,0,i,candidates,length,i,method,candidate,candidates,i,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,i,candidates,length,1,args,holder,to,use,null,if,causes,null,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,else,if,causes,null,causes,new,linked,list,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,mbd,is,lenient,constructor,resolution,param,types,length,factory,method,to,use,get,parameter,types,length,arrays,equals,param,types,factory,method,to,use,get,parameter,types,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,method,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,boolean,has,args,resolved,values,get,argument,count,0,string,arg,desc,if,has,args,list,string,arg,types,new,array,list,string,for,value,holder,value,resolved,values,get,indexed,argument,values,values,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,get,class,get,simple,name,arg,types,add,arg,type,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,has,args,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,equals,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,object,fb,factory,bean,final,method,factory,method,factory,method,to,use,final,object,args,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,fb,factory,method,args,bean,factory,get,access,control,context,else,bean,instance,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,factory,bean,factory,method,to,use,args,to,use,if,bean,instance,null,return,null,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,instantiation,of,bean,failed,ex
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod( 			final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs);1394032589;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(_			final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class<?> factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (factoryBean == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"factory-bean '" + factoryBeanName + "' returned null")__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)___			Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)__			List<Method> candidateSet = new ArrayList<Method>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_					candidateSet.add(candidate)__				}_			}_			Method[] candidates = candidateSet.toArray(new Method[candidateSet.size()])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			List<Exception> causes = null___			for (int i = 0_ i < candidates.length_ i++) {_				Method candidate = candidates[i]__				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (resolvedValues != null) {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(_									beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (this.beanFactory.logger.isTraceEnabled()) {_								this.beanFactory.logger.trace("Ignoring factory method [" + candidate +_										"] of bean '" + beanName + "': " + ex)__							}_							if (i == candidates.length - 1 && argsHolderToUse == null) {_								if (causes != null) {_									for (Exception cause : causes) {_										this.beanFactory.onSuppressedException(cause)__									}_								}_								throw ex__							}_							else {_								_								if (causes == null) {_									causes = new LinkedList<Exception>()__								}_								causes.add(ex)__								continue__							}_						}_					}__					else {_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					_					_					_					_					_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&_							!mbd.isLenientConstructorResolution() &&_							paramTypes.length == factoryMethodToUse.getParameterTypes().length &&_							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<Method>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				List<String> argTypes = new ArrayList<String>(minNrOfArgs)__				if (explicitArgs != null) {_					for (Object arg : explicitArgs) {_						argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null")__					}_				}_				else {_					Set<ValueHolder> valueHolders = new LinkedHashSet<ValueHolder>(resolvedValues.getArgumentCount())__					valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())__					valueHolders.addAll(resolvedValues.getGenericArgumentValues())__					for (ValueHolder value : valueHolders) {_						String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) :_								(value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"))__						argTypes.add(argType)__					}_				}_				String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(minNrOfArgs > 0 ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class.equals(factoryMethodToUse.getReturnType())) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Object fb = factoryBean__				final Method factoryMethod = factoryMethodToUse__				final Object[] args = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, fb, factoryMethod, args)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, beanFactory, factoryBean, factoryMethodToUse, argsToUse)__			}__			if (beanInstance == null) {_				return null__			}_			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Instantiation of bean failed", ex)__		}_	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,final,string,bean,name,final,root,bean,definition,mbd,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,factory,bean,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,factory,bean,factory,bean,name,returned,null,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,get,candidate,methods,factory,class,mbd,list,method,candidate,set,new,array,list,method,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,candidate,set,add,candidate,method,candidates,candidate,set,to,array,new,method,candidate,set,size,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,list,exception,causes,null,for,int,i,0,i,candidates,length,i,method,candidate,candidates,i,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,i,candidates,length,1,args,holder,to,use,null,if,causes,null,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,else,if,causes,null,causes,new,linked,list,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,mbd,is,lenient,constructor,resolution,param,types,length,factory,method,to,use,get,parameter,types,length,arrays,equals,param,types,factory,method,to,use,get,parameter,types,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,method,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,list,string,arg,types,new,array,list,string,min,nr,of,args,if,explicit,args,null,for,object,arg,explicit,args,arg,types,add,arg,null,arg,get,class,get,simple,name,null,else,set,value,holder,value,holders,new,linked,hash,set,value,holder,resolved,values,get,argument,count,value,holders,add,all,resolved,values,get,indexed,argument,values,values,value,holders,add,all,resolved,values,get,generic,argument,values,for,value,holder,value,value,holders,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,null,value,get,value,get,class,get,simple,name,null,arg,types,add,arg,type,string,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,min,nr,of,args,0,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,equals,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,object,fb,factory,bean,final,method,factory,method,factory,method,to,use,final,object,args,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,fb,factory,method,args,bean,factory,get,access,control,context,else,bean,instance,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,factory,bean,factory,method,to,use,args,to,use,if,bean,instance,null,return,null,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,instantiation,of,bean,failed,ex
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod( 			final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs);1404505819;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(_			final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class<?> factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (factoryBean == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"factory-bean '" + factoryBeanName + "' (or a BeanPostProcessor involved) returned null")__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)___			Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)__			List<Method> candidateSet = new ArrayList<Method>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_					candidateSet.add(candidate)__				}_			}_			Method[] candidates = candidateSet.toArray(new Method[candidateSet.size()])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			List<Exception> causes = null___			for (int i = 0_ i < candidates.length_ i++) {_				Method candidate = candidates[i]__				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (resolvedValues != null) {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(_									beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (this.beanFactory.logger.isTraceEnabled()) {_								this.beanFactory.logger.trace("Ignoring factory method [" + candidate +_										"] of bean '" + beanName + "': " + ex)__							}_							if (i == candidates.length - 1 && argsHolderToUse == null) {_								if (causes != null) {_									for (Exception cause : causes) {_										this.beanFactory.onSuppressedException(cause)__									}_								}_								throw ex__							}_							else {_								_								if (causes == null) {_									causes = new LinkedList<Exception>()__								}_								causes.add(ex)__								continue__							}_						}_					}__					else {_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					_					_					_					_					_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&_							!mbd.isLenientConstructorResolution() &&_							paramTypes.length == factoryMethodToUse.getParameterTypes().length &&_							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<Method>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				List<String> argTypes = new ArrayList<String>(minNrOfArgs)__				if (explicitArgs != null) {_					for (Object arg : explicitArgs) {_						argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null")__					}_				}_				else {_					Set<ValueHolder> valueHolders = new LinkedHashSet<ValueHolder>(resolvedValues.getArgumentCount())__					valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())__					valueHolders.addAll(resolvedValues.getGenericArgumentValues())__					for (ValueHolder value : valueHolders) {_						String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) :_								(value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"))__						argTypes.add(argType)__					}_				}_				String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(minNrOfArgs > 0 ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class.equals(factoryMethodToUse.getReturnType())) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Object fb = factoryBean__				final Method factoryMethod = factoryMethodToUse__				final Object[] args = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, fb, factoryMethod, args)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, beanFactory, factoryBean, factoryMethodToUse, argsToUse)__			}__			if (beanInstance == null) {_				return null__			}_			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Instantiation of bean failed", ex)__		}_	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,final,string,bean,name,final,root,bean,definition,mbd,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,factory,bean,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,factory,bean,factory,bean,name,or,a,bean,post,processor,involved,returned,null,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,get,candidate,methods,factory,class,mbd,list,method,candidate,set,new,array,list,method,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,candidate,set,add,candidate,method,candidates,candidate,set,to,array,new,method,candidate,set,size,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,list,exception,causes,null,for,int,i,0,i,candidates,length,i,method,candidate,candidates,i,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,i,candidates,length,1,args,holder,to,use,null,if,causes,null,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,else,if,causes,null,causes,new,linked,list,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,mbd,is,lenient,constructor,resolution,param,types,length,factory,method,to,use,get,parameter,types,length,arrays,equals,param,types,factory,method,to,use,get,parameter,types,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,method,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,list,string,arg,types,new,array,list,string,min,nr,of,args,if,explicit,args,null,for,object,arg,explicit,args,arg,types,add,arg,null,arg,get,class,get,simple,name,null,else,set,value,holder,value,holders,new,linked,hash,set,value,holder,resolved,values,get,argument,count,value,holders,add,all,resolved,values,get,indexed,argument,values,values,value,holders,add,all,resolved,values,get,generic,argument,values,for,value,holder,value,value,holders,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,null,value,get,value,get,class,get,simple,name,null,arg,types,add,arg,type,string,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,min,nr,of,args,0,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,equals,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,object,fb,factory,bean,final,method,factory,method,factory,method,to,use,final,object,args,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,fb,factory,method,args,bean,factory,get,access,control,context,else,bean,instance,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,factory,bean,factory,method,to,use,args,to,use,if,bean,instance,null,return,null,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,instantiation,of,bean,failed,ex
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod( 			final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs);1409688815;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(_			final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class<?> factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (factoryBean == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"factory-bean '" + factoryBeanName + "' (or a BeanPostProcessor involved) returned null")__			}_			if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) {_				throw new IllegalStateException("About-to-be-created singleton instance implicitly appeared " +_						"through the creation of the factory bean that its bean definition points to")__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)___			Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)__			List<Method> candidateSet = new ArrayList<Method>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_					candidateSet.add(candidate)__				}_			}_			Method[] candidates = candidateSet.toArray(new Method[candidateSet.size()])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			List<Exception> causes = null___			for (int i = 0_ i < candidates.length_ i++) {_				Method candidate = candidates[i]__				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (resolvedValues != null) {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(_									beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (this.beanFactory.logger.isTraceEnabled()) {_								this.beanFactory.logger.trace("Ignoring factory method [" + candidate +_										"] of bean '" + beanName + "': " + ex)__							}_							if (i == candidates.length - 1 && argsHolderToUse == null) {_								if (causes != null) {_									for (Exception cause : causes) {_										this.beanFactory.onSuppressedException(cause)__									}_								}_								throw ex__							}_							else {_								_								if (causes == null) {_									causes = new LinkedList<Exception>()__								}_								causes.add(ex)__								continue__							}_						}_					}__					else {_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					_					_					_					_					_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&_							!mbd.isLenientConstructorResolution() &&_							paramTypes.length == factoryMethodToUse.getParameterTypes().length &&_							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<Method>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				List<String> argTypes = new ArrayList<String>(minNrOfArgs)__				if (explicitArgs != null) {_					for (Object arg : explicitArgs) {_						argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null")__					}_				}_				else {_					Set<ValueHolder> valueHolders = new LinkedHashSet<ValueHolder>(resolvedValues.getArgumentCount())__					valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())__					valueHolders.addAll(resolvedValues.getGenericArgumentValues())__					for (ValueHolder value : valueHolders) {_						String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) :_								(value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"))__						argTypes.add(argType)__					}_				}_				String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(minNrOfArgs > 0 ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class.equals(factoryMethodToUse.getReturnType())) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Object fb = factoryBean__				final Method factoryMethod = factoryMethodToUse__				final Object[] args = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, fb, factoryMethod, args)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, beanFactory, factoryBean, factoryMethodToUse, argsToUse)__			}__			if (beanInstance == null) {_				return null__			}_			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Instantiation of bean failed", ex)__		}_	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,final,string,bean,name,final,root,bean,definition,mbd,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,factory,bean,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,factory,bean,factory,bean,name,or,a,bean,post,processor,involved,returned,null,if,mbd,is,singleton,this,bean,factory,contains,singleton,bean,name,throw,new,illegal,state,exception,about,to,be,created,singleton,instance,implicitly,appeared,through,the,creation,of,the,factory,bean,that,its,bean,definition,points,to,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,get,candidate,methods,factory,class,mbd,list,method,candidate,set,new,array,list,method,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,candidate,set,add,candidate,method,candidates,candidate,set,to,array,new,method,candidate,set,size,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,list,exception,causes,null,for,int,i,0,i,candidates,length,i,method,candidate,candidates,i,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,i,candidates,length,1,args,holder,to,use,null,if,causes,null,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,else,if,causes,null,causes,new,linked,list,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,mbd,is,lenient,constructor,resolution,param,types,length,factory,method,to,use,get,parameter,types,length,arrays,equals,param,types,factory,method,to,use,get,parameter,types,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,method,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,list,string,arg,types,new,array,list,string,min,nr,of,args,if,explicit,args,null,for,object,arg,explicit,args,arg,types,add,arg,null,arg,get,class,get,simple,name,null,else,set,value,holder,value,holders,new,linked,hash,set,value,holder,resolved,values,get,argument,count,value,holders,add,all,resolved,values,get,indexed,argument,values,values,value,holders,add,all,resolved,values,get,generic,argument,values,for,value,holder,value,value,holders,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,null,value,get,value,get,class,get,simple,name,null,arg,types,add,arg,type,string,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,min,nr,of,args,0,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,equals,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,object,fb,factory,bean,final,method,factory,method,factory,method,to,use,final,object,args,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,fb,factory,method,args,bean,factory,get,access,control,context,else,bean,instance,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,factory,bean,factory,method,to,use,args,to,use,if,bean,instance,null,return,null,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,instantiation,of,bean,failed,ex
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod( 			final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs);1413920443;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(_			final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class<?> factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (factoryBean == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"factory-bean '" + factoryBeanName + "' (or a BeanPostProcessor involved) returned null")__			}_			if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) {_				throw new IllegalStateException("About-to-be-created singleton instance implicitly appeared " +_						"through the creation of the factory bean that its bean definition points to")__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)___			Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)__			List<Method> candidateSet = new ArrayList<Method>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_					candidateSet.add(candidate)__				}_			}_			Method[] candidates = candidateSet.toArray(new Method[candidateSet.size()])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			List<Exception> causes = null___			for (int i = 0_ i < candidates.length_ i++) {_				Method candidate = candidates[i]__				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (resolvedValues != null) {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(_									beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (this.beanFactory.logger.isTraceEnabled()) {_								this.beanFactory.logger.trace("Ignoring factory method [" + candidate +_										"] of bean '" + beanName + "': " + ex)__							}_							if (i == candidates.length - 1 && argsHolderToUse == null) {_								if (causes != null) {_									for (Exception cause : causes) {_										this.beanFactory.onSuppressedException(cause)__									}_								}_								throw ex__							}_							else {_								_								if (causes == null) {_									causes = new LinkedList<Exception>()__								}_								causes.add(ex)__								continue__							}_						}_					}__					else {_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					_					_					_					_					_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&_							!mbd.isLenientConstructorResolution() &&_							paramTypes.length == factoryMethodToUse.getParameterTypes().length &&_							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<Method>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				List<String> argTypes = new ArrayList<String>(minNrOfArgs)__				if (explicitArgs != null) {_					for (Object arg : explicitArgs) {_						argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null")__					}_				}_				else {_					Set<ValueHolder> valueHolders = new LinkedHashSet<ValueHolder>(resolvedValues.getArgumentCount())__					valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())__					valueHolders.addAll(resolvedValues.getGenericArgumentValues())__					for (ValueHolder value : valueHolders) {_						String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) :_								(value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"))__						argTypes.add(argType)__					}_				}_				String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(minNrOfArgs > 0 ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class.equals(factoryMethodToUse.getReturnType())) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Object fb = factoryBean__				final Method factoryMethod = factoryMethodToUse__				final Object[] args = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, fb, factoryMethod, args)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)__			}__			if (beanInstance == null) {_				return null__			}_			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via factory method failed", ex)__		}_	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,final,string,bean,name,final,root,bean,definition,mbd,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,factory,bean,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,factory,bean,factory,bean,name,or,a,bean,post,processor,involved,returned,null,if,mbd,is,singleton,this,bean,factory,contains,singleton,bean,name,throw,new,illegal,state,exception,about,to,be,created,singleton,instance,implicitly,appeared,through,the,creation,of,the,factory,bean,that,its,bean,definition,points,to,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,get,candidate,methods,factory,class,mbd,list,method,candidate,set,new,array,list,method,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,candidate,set,add,candidate,method,candidates,candidate,set,to,array,new,method,candidate,set,size,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,list,exception,causes,null,for,int,i,0,i,candidates,length,i,method,candidate,candidates,i,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,i,candidates,length,1,args,holder,to,use,null,if,causes,null,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,else,if,causes,null,causes,new,linked,list,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,mbd,is,lenient,constructor,resolution,param,types,length,factory,method,to,use,get,parameter,types,length,arrays,equals,param,types,factory,method,to,use,get,parameter,types,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,method,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,list,string,arg,types,new,array,list,string,min,nr,of,args,if,explicit,args,null,for,object,arg,explicit,args,arg,types,add,arg,null,arg,get,class,get,simple,name,null,else,set,value,holder,value,holders,new,linked,hash,set,value,holder,resolved,values,get,argument,count,value,holders,add,all,resolved,values,get,indexed,argument,values,values,value,holders,add,all,resolved,values,get,generic,argument,values,for,value,holder,value,value,holders,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,null,value,get,value,get,class,get,simple,name,null,arg,types,add,arg,type,string,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,min,nr,of,args,0,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,equals,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,object,fb,factory,bean,final,method,factory,method,factory,method,to,use,final,object,args,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,fb,factory,method,args,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,factory,bean,factory,method,to,use,args,to,use,if,bean,instance,null,return,null,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,factory,method,failed,ex
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod( 			final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs);1419352511;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(_			final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class<?> factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (factoryBean == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"factory-bean '" + factoryBeanName + "' (or a BeanPostProcessor involved) returned null")__			}_			if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) {_				throw new IllegalStateException("About-to-be-created singleton instance implicitly appeared " +_						"through the creation of the factory bean that its bean definition points to")__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)___			Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)__			List<Method> candidateSet = new ArrayList<Method>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_					candidateSet.add(candidate)__				}_			}_			Method[] candidates = candidateSet.toArray(new Method[candidateSet.size()])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			List<Exception> causes = null___			for (int i = 0_ i < candidates.length_ i++) {_				Method candidate = candidates[i]__				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (resolvedValues != null) {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(_									beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (this.beanFactory.logger.isTraceEnabled()) {_								this.beanFactory.logger.trace("Ignoring factory method [" + candidate +_										"] of bean '" + beanName + "': " + ex)__							}_							if (i == candidates.length - 1 && argsHolderToUse == null) {_								if (causes != null) {_									for (Exception cause : causes) {_										this.beanFactory.onSuppressedException(cause)__									}_								}_								throw ex__							}_							else {_								_								if (causes == null) {_									causes = new LinkedList<Exception>()__								}_								causes.add(ex)__								continue__							}_						}_					}__					else {_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					_					_					_					_					_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&_							!mbd.isLenientConstructorResolution() &&_							paramTypes.length == factoryMethodToUse.getParameterTypes().length &&_							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<Method>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				List<String> argTypes = new ArrayList<String>(minNrOfArgs)__				if (explicitArgs != null) {_					for (Object arg : explicitArgs) {_						argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null")__					}_				}_				else {_					Set<ValueHolder> valueHolders = new LinkedHashSet<ValueHolder>(resolvedValues.getArgumentCount())__					valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())__					valueHolders.addAll(resolvedValues.getGenericArgumentValues())__					for (ValueHolder value : valueHolders) {_						String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) :_								(value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"))__						argTypes.add(argType)__					}_				}_				String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(minNrOfArgs > 0 ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class.equals(factoryMethodToUse.getReturnType())) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Object fb = factoryBean__				final Method factoryMethod = factoryMethodToUse__				final Object[] args = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, fb, factoryMethod, args)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)__			}__			if (beanInstance == null) {_				return null__			}_			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via factory method failed", ex)__		}_	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,final,string,bean,name,final,root,bean,definition,mbd,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,factory,bean,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,factory,bean,factory,bean,name,or,a,bean,post,processor,involved,returned,null,if,mbd,is,singleton,this,bean,factory,contains,singleton,bean,name,throw,new,illegal,state,exception,about,to,be,created,singleton,instance,implicitly,appeared,through,the,creation,of,the,factory,bean,that,its,bean,definition,points,to,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,get,candidate,methods,factory,class,mbd,list,method,candidate,set,new,array,list,method,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,candidate,set,add,candidate,method,candidates,candidate,set,to,array,new,method,candidate,set,size,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,list,exception,causes,null,for,int,i,0,i,candidates,length,i,method,candidate,candidates,i,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,i,candidates,length,1,args,holder,to,use,null,if,causes,null,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,else,if,causes,null,causes,new,linked,list,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,mbd,is,lenient,constructor,resolution,param,types,length,factory,method,to,use,get,parameter,types,length,arrays,equals,param,types,factory,method,to,use,get,parameter,types,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,method,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,list,string,arg,types,new,array,list,string,min,nr,of,args,if,explicit,args,null,for,object,arg,explicit,args,arg,types,add,arg,null,arg,get,class,get,simple,name,null,else,set,value,holder,value,holders,new,linked,hash,set,value,holder,resolved,values,get,argument,count,value,holders,add,all,resolved,values,get,indexed,argument,values,values,value,holders,add,all,resolved,values,get,generic,argument,values,for,value,holder,value,value,holders,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,null,value,get,value,get,class,get,simple,name,null,arg,types,add,arg,type,string,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,min,nr,of,args,0,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,equals,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,object,fb,factory,bean,final,method,factory,method,factory,method,to,use,final,object,args,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,fb,factory,method,args,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,factory,bean,factory,method,to,use,args,to,use,if,bean,instance,null,return,null,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,factory,method,failed,ex
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod( 			final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs);1432125256;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(_			final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class<?> factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (factoryBean == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"factory-bean '" + factoryBeanName + "' (or a BeanPostProcessor involved) returned null")__			}_			if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) {_				throw new IllegalStateException("About-to-be-created singleton instance implicitly appeared " +_						"through the creation of the factory bean that its bean definition points to")__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)___			Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)__			List<Method> candidateSet = new ArrayList<Method>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_					candidateSet.add(candidate)__				}_			}_			Method[] candidates = candidateSet.toArray(new Method[candidateSet.size()])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			List<Exception> causes = null___			for (int i = 0_ i < candidates.length_ i++) {_				Method candidate = candidates[i]__				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (resolvedValues != null) {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(_									beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (this.beanFactory.logger.isTraceEnabled()) {_								this.beanFactory.logger.trace("Ignoring factory method [" + candidate +_										"] of bean '" + beanName + "': " + ex)__							}_							if (i == candidates.length - 1 && argsHolderToUse == null) {_								if (causes != null) {_									for (Exception cause : causes) {_										this.beanFactory.onSuppressedException(cause)__									}_								}_								throw ex__							}_							else {_								_								if (causes == null) {_									causes = new LinkedList<Exception>()__								}_								causes.add(ex)__								continue__							}_						}_					}__					else {_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					_					_					_					_					_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&_							!mbd.isLenientConstructorResolution() &&_							paramTypes.length == factoryMethodToUse.getParameterTypes().length &&_							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<Method>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				List<String> argTypes = new ArrayList<String>(minNrOfArgs)__				if (explicitArgs != null) {_					for (Object arg : explicitArgs) {_						argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null")__					}_				}_				else {_					Set<ValueHolder> valueHolders = new LinkedHashSet<ValueHolder>(resolvedValues.getArgumentCount())__					valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())__					valueHolders.addAll(resolvedValues.getGenericArgumentValues())__					for (ValueHolder value : valueHolders) {_						String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) :_								(value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"))__						argTypes.add(argType)__					}_				}_				String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(minNrOfArgs > 0 ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class == factoryMethodToUse.getReturnType()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Object fb = factoryBean__				final Method factoryMethod = factoryMethodToUse__				final Object[] args = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, fb, factoryMethod, args)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)__			}__			if (beanInstance == null) {_				return null__			}_			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via factory method failed", ex)__		}_	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,final,string,bean,name,final,root,bean,definition,mbd,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,factory,bean,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,factory,bean,factory,bean,name,or,a,bean,post,processor,involved,returned,null,if,mbd,is,singleton,this,bean,factory,contains,singleton,bean,name,throw,new,illegal,state,exception,about,to,be,created,singleton,instance,implicitly,appeared,through,the,creation,of,the,factory,bean,that,its,bean,definition,points,to,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,get,candidate,methods,factory,class,mbd,list,method,candidate,set,new,array,list,method,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,candidate,set,add,candidate,method,candidates,candidate,set,to,array,new,method,candidate,set,size,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,list,exception,causes,null,for,int,i,0,i,candidates,length,i,method,candidate,candidates,i,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,i,candidates,length,1,args,holder,to,use,null,if,causes,null,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,else,if,causes,null,causes,new,linked,list,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,mbd,is,lenient,constructor,resolution,param,types,length,factory,method,to,use,get,parameter,types,length,arrays,equals,param,types,factory,method,to,use,get,parameter,types,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,method,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,list,string,arg,types,new,array,list,string,min,nr,of,args,if,explicit,args,null,for,object,arg,explicit,args,arg,types,add,arg,null,arg,get,class,get,simple,name,null,else,set,value,holder,value,holders,new,linked,hash,set,value,holder,resolved,values,get,argument,count,value,holders,add,all,resolved,values,get,indexed,argument,values,values,value,holders,add,all,resolved,values,get,generic,argument,values,for,value,holder,value,value,holders,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,null,value,get,value,get,class,get,simple,name,null,arg,types,add,arg,type,string,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,min,nr,of,args,0,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,object,fb,factory,bean,final,method,factory,method,factory,method,to,use,final,object,args,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,fb,factory,method,args,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,factory,bean,factory,method,to,use,args,to,use,if,bean,instance,null,return,null,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,factory,method,failed,ex
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod( 			final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs);1450707100;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(_			final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class<?> factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (factoryBean == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"factory-bean '" + factoryBeanName + "' (or a BeanPostProcessor involved) returned null")__			}_			if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) {_				throw new IllegalStateException("About-to-be-created singleton instance implicitly appeared " +_						"through the creation of the factory bean that its bean definition points to")__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)___			Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)__			List<Method> candidateSet = new ArrayList<Method>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_					candidateSet.add(candidate)__				}_			}_			Method[] candidates = candidateSet.toArray(new Method[candidateSet.size()])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			List<Exception> causes = null___			for (int i = 0_ i < candidates.length_ i++) {_				Method candidate = candidates[i]__				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (resolvedValues != null) {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(_									beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (this.beanFactory.logger.isTraceEnabled()) {_								this.beanFactory.logger.trace("Ignoring factory method [" + candidate +_										"] of bean '" + beanName + "': " + ex)__							}_							if (i == candidates.length - 1 && argsHolderToUse == null) {_								if (causes != null) {_									for (Exception cause : causes) {_										this.beanFactory.onSuppressedException(cause)__									}_								}_								throw ex__							}_							else {_								_								if (causes == null) {_									causes = new LinkedList<Exception>()__								}_								causes.add(ex)__								continue__							}_						}_					}__					else {_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					_					_					_					_					_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&_							!mbd.isLenientConstructorResolution() &&_							paramTypes.length == factoryMethodToUse.getParameterTypes().length &&_							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<Method>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				List<String> argTypes = new ArrayList<String>(minNrOfArgs)__				if (explicitArgs != null) {_					for (Object arg : explicitArgs) {_						argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null")__					}_				}_				else {_					Set<ValueHolder> valueHolders = new LinkedHashSet<ValueHolder>(resolvedValues.getArgumentCount())__					valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())__					valueHolders.addAll(resolvedValues.getGenericArgumentValues())__					for (ValueHolder value : valueHolders) {_						String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) :_								(value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"))__						argTypes.add(argType)__					}_				}_				String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(minNrOfArgs > 0 ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class == factoryMethodToUse.getReturnType()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Object fb = factoryBean__				final Method factoryMethod = factoryMethodToUse__				final Object[] args = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, fb, factoryMethod, args)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)__			}__			if (beanInstance == null) {_				return null__			}_			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via factory method failed", ex)__		}_	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,final,string,bean,name,final,root,bean,definition,mbd,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,factory,bean,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,factory,bean,factory,bean,name,or,a,bean,post,processor,involved,returned,null,if,mbd,is,singleton,this,bean,factory,contains,singleton,bean,name,throw,new,illegal,state,exception,about,to,be,created,singleton,instance,implicitly,appeared,through,the,creation,of,the,factory,bean,that,its,bean,definition,points,to,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,get,candidate,methods,factory,class,mbd,list,method,candidate,set,new,array,list,method,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,candidate,set,add,candidate,method,candidates,candidate,set,to,array,new,method,candidate,set,size,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,list,exception,causes,null,for,int,i,0,i,candidates,length,i,method,candidate,candidates,i,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,i,candidates,length,1,args,holder,to,use,null,if,causes,null,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,else,if,causes,null,causes,new,linked,list,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,mbd,is,lenient,constructor,resolution,param,types,length,factory,method,to,use,get,parameter,types,length,arrays,equals,param,types,factory,method,to,use,get,parameter,types,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,method,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,list,string,arg,types,new,array,list,string,min,nr,of,args,if,explicit,args,null,for,object,arg,explicit,args,arg,types,add,arg,null,arg,get,class,get,simple,name,null,else,set,value,holder,value,holders,new,linked,hash,set,value,holder,resolved,values,get,argument,count,value,holders,add,all,resolved,values,get,indexed,argument,values,values,value,holders,add,all,resolved,values,get,generic,argument,values,for,value,holder,value,value,holders,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,null,value,get,value,get,class,get,simple,name,null,arg,types,add,arg,type,string,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,min,nr,of,args,0,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,object,fb,factory,bean,final,method,factory,method,factory,method,to,use,final,object,args,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,fb,factory,method,args,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,factory,bean,factory,method,to,use,args,to,use,if,bean,instance,null,return,null,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,factory,method,failed,ex
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod( 			final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs);1456432609;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(_			final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class<?> factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (factoryBean == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"factory-bean '" + factoryBeanName + "' (or a BeanPostProcessor involved) returned null")__			}_			if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) {_				throw new IllegalStateException("About-to-be-created singleton instance implicitly appeared " +_						"through the creation of the factory bean that its bean definition points to")__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)___			Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)__			List<Method> candidateSet = new ArrayList<Method>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_					candidateSet.add(candidate)__				}_			}_			Method[] candidates = candidateSet.toArray(new Method[candidateSet.size()])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			List<Exception> causes = null___			for (int i = 0_ i < candidates.length_ i++) {_				Method candidate = candidates[i]__				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (resolvedValues != null) {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(_									beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (this.beanFactory.logger.isTraceEnabled()) {_								this.beanFactory.logger.trace("Ignoring factory method [" + candidate +_										"] of bean '" + beanName + "': " + ex)__							}_							if (i == candidates.length - 1 && argsHolderToUse == null) {_								if (causes != null) {_									for (Exception cause : causes) {_										this.beanFactory.onSuppressedException(cause)__									}_								}_								throw ex__							}_							else {_								_								if (causes == null) {_									causes = new LinkedList<Exception>()__								}_								causes.add(ex)__								continue__							}_						}_					}__					else {_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					_					_					_					_					_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&_							!mbd.isLenientConstructorResolution() &&_							paramTypes.length == factoryMethodToUse.getParameterTypes().length &&_							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<Method>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				List<String> argTypes = new ArrayList<String>(minNrOfArgs)__				if (explicitArgs != null) {_					for (Object arg : explicitArgs) {_						argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null")__					}_				}_				else {_					Set<ValueHolder> valueHolders = new LinkedHashSet<ValueHolder>(resolvedValues.getArgumentCount())__					valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())__					valueHolders.addAll(resolvedValues.getGenericArgumentValues())__					for (ValueHolder value : valueHolders) {_						String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) :_								(value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"))__						argTypes.add(argType)__					}_				}_				String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(minNrOfArgs > 0 ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class == factoryMethodToUse.getReturnType()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Object fb = factoryBean__				final Method factoryMethod = factoryMethodToUse__				final Object[] args = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, fb, factoryMethod, args)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)__			}__			if (beanInstance == null) {_				return null__			}_			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via factory method failed", ex)__		}_	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,final,string,bean,name,final,root,bean,definition,mbd,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,factory,bean,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,factory,bean,factory,bean,name,or,a,bean,post,processor,involved,returned,null,if,mbd,is,singleton,this,bean,factory,contains,singleton,bean,name,throw,new,illegal,state,exception,about,to,be,created,singleton,instance,implicitly,appeared,through,the,creation,of,the,factory,bean,that,its,bean,definition,points,to,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,get,candidate,methods,factory,class,mbd,list,method,candidate,set,new,array,list,method,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,candidate,set,add,candidate,method,candidates,candidate,set,to,array,new,method,candidate,set,size,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,list,exception,causes,null,for,int,i,0,i,candidates,length,i,method,candidate,candidates,i,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,i,candidates,length,1,args,holder,to,use,null,if,causes,null,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,else,if,causes,null,causes,new,linked,list,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,mbd,is,lenient,constructor,resolution,param,types,length,factory,method,to,use,get,parameter,types,length,arrays,equals,param,types,factory,method,to,use,get,parameter,types,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,method,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,list,string,arg,types,new,array,list,string,min,nr,of,args,if,explicit,args,null,for,object,arg,explicit,args,arg,types,add,arg,null,arg,get,class,get,simple,name,null,else,set,value,holder,value,holders,new,linked,hash,set,value,holder,resolved,values,get,argument,count,value,holders,add,all,resolved,values,get,indexed,argument,values,values,value,holders,add,all,resolved,values,get,generic,argument,values,for,value,holder,value,value,holders,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,null,value,get,value,get,class,get,simple,name,null,arg,types,add,arg,type,string,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,min,nr,of,args,0,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,object,fb,factory,bean,final,method,factory,method,factory,method,to,use,final,object,args,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,fb,factory,method,args,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,factory,bean,factory,method,to,use,args,to,use,if,bean,instance,null,return,null,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,factory,method,failed,ex
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod( 			final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs);1456486263;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(_			final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class<?> factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (factoryBean == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"factory-bean '" + factoryBeanName + "' (or a BeanPostProcessor involved) returned null")__			}_			if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) {_				throw new IllegalStateException("About-to-be-created singleton instance implicitly appeared " +_						"through the creation of the factory bean that its bean definition points to")__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)___			Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)__			List<Method> candidateSet = new ArrayList<Method>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_					candidateSet.add(candidate)__				}_			}_			Method[] candidates = candidateSet.toArray(new Method[candidateSet.size()])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (int i = 0_ i < candidates.length_ i++) {_				Method candidate = candidates[i]__				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (resolvedValues != null) {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(_									beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (this.beanFactory.logger.isTraceEnabled()) {_								this.beanFactory.logger.trace("Ignoring factory method [" + candidate +_										"] of bean '" + beanName + "': " + ex)__							}_							_							if (causes == null) {_								causes = new LinkedList<UnsatisfiedDependencyException>()__							}_							causes.add(ex)__							continue__						}_					}__					else {_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					_					_					_					_					_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&_							!mbd.isLenientConstructorResolution() &&_							paramTypes.length == factoryMethodToUse.getParameterTypes().length &&_							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<Method>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				List<String> argTypes = new ArrayList<String>(minNrOfArgs)__				if (explicitArgs != null) {_					for (Object arg : explicitArgs) {_						argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null")__					}_				}_				else {_					Set<ValueHolder> valueHolders = new LinkedHashSet<ValueHolder>(resolvedValues.getArgumentCount())__					valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())__					valueHolders.addAll(resolvedValues.getGenericArgumentValues())__					for (ValueHolder value : valueHolders) {_						String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) :_								(value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"))__						argTypes.add(argType)__					}_				}_				String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(minNrOfArgs > 0 ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class == factoryMethodToUse.getReturnType()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Object fb = factoryBean__				final Method factoryMethod = factoryMethodToUse__				final Object[] args = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, fb, factoryMethod, args)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)__			}__			if (beanInstance == null) {_				return null__			}_			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via factory method failed", ex)__		}_	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,final,string,bean,name,final,root,bean,definition,mbd,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,factory,bean,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,factory,bean,factory,bean,name,or,a,bean,post,processor,involved,returned,null,if,mbd,is,singleton,this,bean,factory,contains,singleton,bean,name,throw,new,illegal,state,exception,about,to,be,created,singleton,instance,implicitly,appeared,through,the,creation,of,the,factory,bean,that,its,bean,definition,points,to,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,get,candidate,methods,factory,class,mbd,list,method,candidate,set,new,array,list,method,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,candidate,set,add,candidate,method,candidates,candidate,set,to,array,new,method,candidate,set,size,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,linked,list,unsatisfied,dependency,exception,causes,null,for,int,i,0,i,candidates,length,i,method,candidate,candidates,i,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,unsatisfied,dependency,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,mbd,is,lenient,constructor,resolution,param,types,length,factory,method,to,use,get,parameter,types,length,arrays,equals,param,types,factory,method,to,use,get,parameter,types,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,method,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,list,string,arg,types,new,array,list,string,min,nr,of,args,if,explicit,args,null,for,object,arg,explicit,args,arg,types,add,arg,null,arg,get,class,get,simple,name,null,else,set,value,holder,value,holders,new,linked,hash,set,value,holder,resolved,values,get,argument,count,value,holders,add,all,resolved,values,get,indexed,argument,values,values,value,holders,add,all,resolved,values,get,generic,argument,values,for,value,holder,value,value,holders,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,null,value,get,value,get,class,get,simple,name,null,arg,types,add,arg,type,string,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,min,nr,of,args,0,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,object,fb,factory,bean,final,method,factory,method,factory,method,to,use,final,object,args,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,fb,factory,method,args,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,factory,bean,factory,method,to,use,args,to,use,if,bean,instance,null,return,null,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,factory,method,failed,ex
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod( 			final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs);1457697160;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(_			final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class<?> factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (factoryBean == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"factory-bean '" + factoryBeanName + "' (or a BeanPostProcessor involved) returned null")__			}_			if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) {_				throw new IllegalStateException("About-to-be-created singleton instance implicitly appeared " +_						"through the creation of the factory bean that its bean definition points to")__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)___			Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)__			List<Method> candidateSet = new ArrayList<Method>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_					candidateSet.add(candidate)__				}_			}_			Method[] candidates = candidateSet.toArray(new Method[candidateSet.size()])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Method candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (resolvedValues != null) {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(_									beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (this.beanFactory.logger.isTraceEnabled()) {_								this.beanFactory.logger.trace("Ignoring factory method [" + candidate +_										"] of bean '" + beanName + "': " + ex)__							}_							_							if (causes == null) {_								causes = new LinkedList<UnsatisfiedDependencyException>()__							}_							causes.add(ex)__							continue__						}_					}__					else {_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					_					_					_					_					_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&_							!mbd.isLenientConstructorResolution() &&_							paramTypes.length == factoryMethodToUse.getParameterTypes().length &&_							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<Method>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				List<String> argTypes = new ArrayList<String>(minNrOfArgs)__				if (explicitArgs != null) {_					for (Object arg : explicitArgs) {_						argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null")__					}_				}_				else {_					Set<ValueHolder> valueHolders = new LinkedHashSet<ValueHolder>(resolvedValues.getArgumentCount())__					valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())__					valueHolders.addAll(resolvedValues.getGenericArgumentValues())__					for (ValueHolder value : valueHolders) {_						String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) :_								(value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"))__						argTypes.add(argType)__					}_				}_				String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(minNrOfArgs > 0 ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class == factoryMethodToUse.getReturnType()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Object fb = factoryBean__				final Method factoryMethod = factoryMethodToUse__				final Object[] args = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, fb, factoryMethod, args)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)__			}__			if (beanInstance == null) {_				return null__			}_			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via factory method failed", ex)__		}_	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,final,string,bean,name,final,root,bean,definition,mbd,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,factory,bean,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,factory,bean,factory,bean,name,or,a,bean,post,processor,involved,returned,null,if,mbd,is,singleton,this,bean,factory,contains,singleton,bean,name,throw,new,illegal,state,exception,about,to,be,created,singleton,instance,implicitly,appeared,through,the,creation,of,the,factory,bean,that,its,bean,definition,points,to,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,get,candidate,methods,factory,class,mbd,list,method,candidate,set,new,array,list,method,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,candidate,set,add,candidate,method,candidates,candidate,set,to,array,new,method,candidate,set,size,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,linked,list,unsatisfied,dependency,exception,causes,null,for,method,candidate,candidates,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,unsatisfied,dependency,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,mbd,is,lenient,constructor,resolution,param,types,length,factory,method,to,use,get,parameter,types,length,arrays,equals,param,types,factory,method,to,use,get,parameter,types,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,method,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,list,string,arg,types,new,array,list,string,min,nr,of,args,if,explicit,args,null,for,object,arg,explicit,args,arg,types,add,arg,null,arg,get,class,get,simple,name,null,else,set,value,holder,value,holders,new,linked,hash,set,value,holder,resolved,values,get,argument,count,value,holders,add,all,resolved,values,get,indexed,argument,values,values,value,holders,add,all,resolved,values,get,generic,argument,values,for,value,holder,value,value,holders,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,null,value,get,value,get,class,get,simple,name,null,arg,types,add,arg,type,string,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,min,nr,of,args,0,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,object,fb,factory,bean,final,method,factory,method,factory,method,to,use,final,object,args,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,fb,factory,method,args,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,factory,bean,factory,method,to,use,args,to,use,if,bean,instance,null,return,null,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,factory,method,failed,ex
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod( 			final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs);1458311433;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(_			final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class<?> factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (factoryBean == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"factory-bean '" + factoryBeanName + "' (or a BeanPostProcessor involved) returned null")__			}_			if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) {_				throw new IllegalStateException("About-to-be-created singleton instance implicitly appeared " +_						"through the creation of the factory bean that its bean definition points to")__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)___			Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)__			List<Method> candidateSet = new ArrayList<Method>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_					candidateSet.add(candidate)__				}_			}_			Method[] candidates = candidateSet.toArray(new Method[candidateSet.size()])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Method candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (resolvedValues != null) {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(_									beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (this.beanFactory.logger.isTraceEnabled()) {_								this.beanFactory.logger.trace("Ignoring factory method [" + candidate +_										"] of bean '" + beanName + "': " + ex)__							}_							_							if (causes == null) {_								causes = new LinkedList<UnsatisfiedDependencyException>()__							}_							causes.add(ex)__							continue__						}_					}__					else {_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					_					_					_					_					_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&_							!mbd.isLenientConstructorResolution() &&_							paramTypes.length == factoryMethodToUse.getParameterTypes().length &&_							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<Method>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				List<String> argTypes = new ArrayList<String>(minNrOfArgs)__				if (explicitArgs != null) {_					for (Object arg : explicitArgs) {_						argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null")__					}_				}_				else {_					Set<ValueHolder> valueHolders = new LinkedHashSet<ValueHolder>(resolvedValues.getArgumentCount())__					valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())__					valueHolders.addAll(resolvedValues.getGenericArgumentValues())__					for (ValueHolder value : valueHolders) {_						String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) :_								(value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"))__						argTypes.add(argType)__					}_				}_				String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(minNrOfArgs > 0 ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class == factoryMethodToUse.getReturnType()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Object fb = factoryBean__				final Method factoryMethod = factoryMethodToUse__				final Object[] args = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, fb, factoryMethod, args)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)__			}__			if (beanInstance == null) {_				return null__			}_			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via factory method failed", ex)__		}_	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,final,string,bean,name,final,root,bean,definition,mbd,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,factory,bean,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,factory,bean,factory,bean,name,or,a,bean,post,processor,involved,returned,null,if,mbd,is,singleton,this,bean,factory,contains,singleton,bean,name,throw,new,illegal,state,exception,about,to,be,created,singleton,instance,implicitly,appeared,through,the,creation,of,the,factory,bean,that,its,bean,definition,points,to,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,get,candidate,methods,factory,class,mbd,list,method,candidate,set,new,array,list,method,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,candidate,set,add,candidate,method,candidates,candidate,set,to,array,new,method,candidate,set,size,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,linked,list,unsatisfied,dependency,exception,causes,null,for,method,candidate,candidates,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,unsatisfied,dependency,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,mbd,is,lenient,constructor,resolution,param,types,length,factory,method,to,use,get,parameter,types,length,arrays,equals,param,types,factory,method,to,use,get,parameter,types,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,method,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,list,string,arg,types,new,array,list,string,min,nr,of,args,if,explicit,args,null,for,object,arg,explicit,args,arg,types,add,arg,null,arg,get,class,get,simple,name,null,else,set,value,holder,value,holders,new,linked,hash,set,value,holder,resolved,values,get,argument,count,value,holders,add,all,resolved,values,get,indexed,argument,values,values,value,holders,add,all,resolved,values,get,generic,argument,values,for,value,holder,value,value,holders,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,null,value,get,value,get,class,get,simple,name,null,arg,types,add,arg,type,string,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,min,nr,of,args,0,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,object,fb,factory,bean,final,method,factory,method,factory,method,to,use,final,object,args,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,fb,factory,method,args,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,factory,bean,factory,method,to,use,args,to,use,if,bean,instance,null,return,null,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,factory,method,failed,ex
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod( 			final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs);1458323493;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(_			final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class<?> factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (factoryBean == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"factory-bean '" + factoryBeanName + "' (or a BeanPostProcessor involved) returned null")__			}_			if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) {_				throw new IllegalStateException("About-to-be-created singleton instance implicitly appeared " +_						"through the creation of the factory bean that its bean definition points to")__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)___			Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)__			List<Method> candidateSet = new ArrayList<Method>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_					candidateSet.add(candidate)__				}_			}_			Method[] candidates = candidateSet.toArray(new Method[candidateSet.size()])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Method candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (resolvedValues != null) {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(_									beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (this.beanFactory.logger.isTraceEnabled()) {_								this.beanFactory.logger.trace("Ignoring factory method [" + candidate +_										"] of bean '" + beanName + "': " + ex)__							}_							_							if (causes == null) {_								causes = new LinkedList<UnsatisfiedDependencyException>()__							}_							causes.add(ex)__							continue__						}_					}__					else {_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					_					_					_					_					_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&_							!mbd.isLenientConstructorResolution() &&_							paramTypes.length == factoryMethodToUse.getParameterTypes().length &&_							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<Method>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				List<String> argTypes = new ArrayList<String>(minNrOfArgs)__				if (explicitArgs != null) {_					for (Object arg : explicitArgs) {_						argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null")__					}_				}_				else {_					Set<ValueHolder> valueHolders = new LinkedHashSet<ValueHolder>(resolvedValues.getArgumentCount())__					valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())__					valueHolders.addAll(resolvedValues.getGenericArgumentValues())__					for (ValueHolder value : valueHolders) {_						String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) :_								(value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"))__						argTypes.add(argType)__					}_				}_				String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(minNrOfArgs > 0 ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class == factoryMethodToUse.getReturnType()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Object fb = factoryBean__				final Method factoryMethod = factoryMethodToUse__				final Object[] args = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, fb, factoryMethod, args)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)__			}__			if (beanInstance == null) {_				return null__			}_			bw.setWrappedInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via factory method failed", ex)__		}_	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,final,string,bean,name,final,root,bean,definition,mbd,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,factory,bean,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,factory,bean,factory,bean,name,or,a,bean,post,processor,involved,returned,null,if,mbd,is,singleton,this,bean,factory,contains,singleton,bean,name,throw,new,illegal,state,exception,about,to,be,created,singleton,instance,implicitly,appeared,through,the,creation,of,the,factory,bean,that,its,bean,definition,points,to,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,get,candidate,methods,factory,class,mbd,list,method,candidate,set,new,array,list,method,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,candidate,set,add,candidate,method,candidates,candidate,set,to,array,new,method,candidate,set,size,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,linked,list,unsatisfied,dependency,exception,causes,null,for,method,candidate,candidates,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,unsatisfied,dependency,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,mbd,is,lenient,constructor,resolution,param,types,length,factory,method,to,use,get,parameter,types,length,arrays,equals,param,types,factory,method,to,use,get,parameter,types,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,method,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,list,string,arg,types,new,array,list,string,min,nr,of,args,if,explicit,args,null,for,object,arg,explicit,args,arg,types,add,arg,null,arg,get,class,get,simple,name,null,else,set,value,holder,value,holders,new,linked,hash,set,value,holder,resolved,values,get,argument,count,value,holders,add,all,resolved,values,get,indexed,argument,values,values,value,holders,add,all,resolved,values,get,generic,argument,values,for,value,holder,value,value,holders,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,null,value,get,value,get,class,get,simple,name,null,arg,types,add,arg,type,string,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,min,nr,of,args,0,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,object,fb,factory,bean,final,method,factory,method,factory,method,to,use,final,object,args,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,fb,factory,method,args,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,factory,bean,factory,method,to,use,args,to,use,if,bean,instance,null,return,null,bw,set,wrapped,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,factory,method,failed,ex
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod( 			final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs);1460031510;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(_			final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class<?> factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (factoryBean == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"factory-bean '" + factoryBeanName + "' (or a BeanPostProcessor involved) returned null")__			}_			if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) {_				throw new IllegalStateException("About-to-be-created singleton instance implicitly appeared " +_						"through the creation of the factory bean that its bean definition points to")__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)___			Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)__			List<Method> candidateSet = new ArrayList<Method>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_					candidateSet.add(candidate)__				}_			}_			Method[] candidates = candidateSet.toArray(new Method[candidateSet.size()])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Method candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (resolvedValues != null) {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(_									beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (this.beanFactory.logger.isTraceEnabled()) {_								this.beanFactory.logger.trace("Ignoring factory method [" + candidate +_										"] of bean '" + beanName + "': " + ex)__							}_							_							if (causes == null) {_								causes = new LinkedList<UnsatisfiedDependencyException>()__							}_							causes.add(ex)__							continue__						}_					}__					else {_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					_					_					_					_					_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&_							!mbd.isLenientConstructorResolution() &&_							paramTypes.length == factoryMethodToUse.getParameterTypes().length &&_							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<Method>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				List<String> argTypes = new ArrayList<String>(minNrOfArgs)__				if (explicitArgs != null) {_					for (Object arg : explicitArgs) {_						argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null")__					}_				}_				else {_					Set<ValueHolder> valueHolders = new LinkedHashSet<ValueHolder>(resolvedValues.getArgumentCount())__					valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())__					valueHolders.addAll(resolvedValues.getGenericArgumentValues())__					for (ValueHolder value : valueHolders) {_						String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) :_								(value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"))__						argTypes.add(argType)__					}_				}_				String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(minNrOfArgs > 0 ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class == factoryMethodToUse.getReturnType()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Object fb = factoryBean__				final Method factoryMethod = factoryMethodToUse__				final Object[] args = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, fb, factoryMethod, args)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)__			}__			if (beanInstance == null) {_				return null__			}_			bw.setBeanInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via factory method failed", ex)__		}_	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,final,string,bean,name,final,root,bean,definition,mbd,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,factory,bean,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,factory,bean,factory,bean,name,or,a,bean,post,processor,involved,returned,null,if,mbd,is,singleton,this,bean,factory,contains,singleton,bean,name,throw,new,illegal,state,exception,about,to,be,created,singleton,instance,implicitly,appeared,through,the,creation,of,the,factory,bean,that,its,bean,definition,points,to,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,get,candidate,methods,factory,class,mbd,list,method,candidate,set,new,array,list,method,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,candidate,set,add,candidate,method,candidates,candidate,set,to,array,new,method,candidate,set,size,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,linked,list,unsatisfied,dependency,exception,causes,null,for,method,candidate,candidates,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,unsatisfied,dependency,exception,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,mbd,is,lenient,constructor,resolution,param,types,length,factory,method,to,use,get,parameter,types,length,arrays,equals,param,types,factory,method,to,use,get,parameter,types,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,method,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,list,string,arg,types,new,array,list,string,min,nr,of,args,if,explicit,args,null,for,object,arg,explicit,args,arg,types,add,arg,null,arg,get,class,get,simple,name,null,else,set,value,holder,value,holders,new,linked,hash,set,value,holder,resolved,values,get,argument,count,value,holders,add,all,resolved,values,get,indexed,argument,values,values,value,holders,add,all,resolved,values,get,generic,argument,values,for,value,holder,value,value,holders,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,null,value,get,value,get,class,get,simple,name,null,arg,types,add,arg,type,string,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,min,nr,of,args,0,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,object,fb,factory,bean,final,method,factory,method,factory,method,to,use,final,object,args,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,fb,factory,method,args,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,factory,bean,factory,method,to,use,args,to,use,if,bean,instance,null,return,null,bw,set,bean,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,factory,method,failed,ex
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod( 			final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs);1467730834;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(_			final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class<?> factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (factoryBean == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"factory-bean '" + factoryBeanName + "' (or a BeanPostProcessor involved) returned null")__			}_			if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) {_				throw new IllegalStateException("About-to-be-created singleton instance implicitly appeared " +_						"through the creation of the factory bean that its bean definition points to")__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)___			Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)__			List<Method> candidateSet = new ArrayList<>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_					candidateSet.add(candidate)__				}_			}_			Method[] candidates = candidateSet.toArray(new Method[candidateSet.size()])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Method candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (resolvedValues != null) {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(_									beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (this.beanFactory.logger.isTraceEnabled()) {_								this.beanFactory.logger.trace("Ignoring factory method [" + candidate +_										"] of bean '" + beanName + "': " + ex)__							}_							_							if (causes == null) {_								causes = new LinkedList<>()__							}_							causes.add(ex)__							continue__						}_					}__					else {_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					_					_					_					_					_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&_							!mbd.isLenientConstructorResolution() &&_							paramTypes.length == factoryMethodToUse.getParameterTypes().length &&_							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				List<String> argTypes = new ArrayList<>(minNrOfArgs)__				if (explicitArgs != null) {_					for (Object arg : explicitArgs) {_						argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null")__					}_				}_				else {_					Set<ValueHolder> valueHolders = new LinkedHashSet<>(resolvedValues.getArgumentCount())__					valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())__					valueHolders.addAll(resolvedValues.getGenericArgumentValues())__					for (ValueHolder value : valueHolders) {_						String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) :_								(value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"))__						argTypes.add(argType)__					}_				}_				String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(minNrOfArgs > 0 ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class == factoryMethodToUse.getReturnType()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Object fb = factoryBean__				final Method factoryMethod = factoryMethodToUse__				final Object[] args = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, fb, factoryMethod, args)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)__			}__			if (beanInstance == null) {_				return null__			}_			bw.setBeanInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via factory method failed", ex)__		}_	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,final,string,bean,name,final,root,bean,definition,mbd,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,factory,bean,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,factory,bean,factory,bean,name,or,a,bean,post,processor,involved,returned,null,if,mbd,is,singleton,this,bean,factory,contains,singleton,bean,name,throw,new,illegal,state,exception,about,to,be,created,singleton,instance,implicitly,appeared,through,the,creation,of,the,factory,bean,that,its,bean,definition,points,to,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,get,candidate,methods,factory,class,mbd,list,method,candidate,set,new,array,list,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,candidate,set,add,candidate,method,candidates,candidate,set,to,array,new,method,candidate,set,size,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,linked,list,unsatisfied,dependency,exception,causes,null,for,method,candidate,candidates,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,mbd,is,lenient,constructor,resolution,param,types,length,factory,method,to,use,get,parameter,types,length,arrays,equals,param,types,factory,method,to,use,get,parameter,types,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,list,string,arg,types,new,array,list,min,nr,of,args,if,explicit,args,null,for,object,arg,explicit,args,arg,types,add,arg,null,arg,get,class,get,simple,name,null,else,set,value,holder,value,holders,new,linked,hash,set,resolved,values,get,argument,count,value,holders,add,all,resolved,values,get,indexed,argument,values,values,value,holders,add,all,resolved,values,get,generic,argument,values,for,value,holder,value,value,holders,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,null,value,get,value,get,class,get,simple,name,null,arg,types,add,arg,type,string,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,min,nr,of,args,0,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,object,fb,factory,bean,final,method,factory,method,factory,method,to,use,final,object,args,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,fb,factory,method,args,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,factory,bean,factory,method,to,use,args,to,use,if,bean,instance,null,return,null,bw,set,bean,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,factory,method,failed,ex
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod( 			final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs);1467844672;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(_			final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class<?> factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (factoryBean == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"factory-bean '" + factoryBeanName + "' (or a BeanPostProcessor involved) returned null")__			}_			if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) {_				throw new IllegalStateException("About-to-be-created singleton instance implicitly appeared " +_						"through the creation of the factory bean that its bean definition points to")__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)___			Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)__			List<Method> candidateSet = new ArrayList<>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_					candidateSet.add(candidate)__				}_			}_			Method[] candidates = candidateSet.toArray(new Method[candidateSet.size()])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Method candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (resolvedValues != null) {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(_									beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (this.beanFactory.logger.isTraceEnabled()) {_								this.beanFactory.logger.trace("Ignoring factory method [" + candidate +_										"] of bean '" + beanName + "': " + ex)__							}_							_							if (causes == null) {_								causes = new LinkedList<>()__							}_							causes.add(ex)__							continue__						}_					}__					else {_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					_					_					_					_					_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&_							!mbd.isLenientConstructorResolution() &&_							paramTypes.length == factoryMethodToUse.getParameterCount() &&_							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				List<String> argTypes = new ArrayList<>(minNrOfArgs)__				if (explicitArgs != null) {_					for (Object arg : explicitArgs) {_						argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null")__					}_				}_				else {_					Set<ValueHolder> valueHolders = new LinkedHashSet<>(resolvedValues.getArgumentCount())__					valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())__					valueHolders.addAll(resolvedValues.getGenericArgumentValues())__					for (ValueHolder value : valueHolders) {_						String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) :_								(value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"))__						argTypes.add(argType)__					}_				}_				String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(minNrOfArgs > 0 ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class == factoryMethodToUse.getReturnType()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Object fb = factoryBean__				final Method factoryMethod = factoryMethodToUse__				final Object[] args = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, fb, factoryMethod, args)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)__			}__			if (beanInstance == null) {_				return null__			}_			bw.setBeanInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via factory method failed", ex)__		}_	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,final,string,bean,name,final,root,bean,definition,mbd,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,factory,bean,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,factory,bean,factory,bean,name,or,a,bean,post,processor,involved,returned,null,if,mbd,is,singleton,this,bean,factory,contains,singleton,bean,name,throw,new,illegal,state,exception,about,to,be,created,singleton,instance,implicitly,appeared,through,the,creation,of,the,factory,bean,that,its,bean,definition,points,to,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,get,candidate,methods,factory,class,mbd,list,method,candidate,set,new,array,list,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,candidate,set,add,candidate,method,candidates,candidate,set,to,array,new,method,candidate,set,size,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,linked,list,unsatisfied,dependency,exception,causes,null,for,method,candidate,candidates,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,mbd,is,lenient,constructor,resolution,param,types,length,factory,method,to,use,get,parameter,count,arrays,equals,param,types,factory,method,to,use,get,parameter,types,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,list,string,arg,types,new,array,list,min,nr,of,args,if,explicit,args,null,for,object,arg,explicit,args,arg,types,add,arg,null,arg,get,class,get,simple,name,null,else,set,value,holder,value,holders,new,linked,hash,set,resolved,values,get,argument,count,value,holders,add,all,resolved,values,get,indexed,argument,values,values,value,holders,add,all,resolved,values,get,generic,argument,values,for,value,holder,value,value,holders,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,null,value,get,value,get,class,get,simple,name,null,arg,types,add,arg,type,string,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,min,nr,of,args,0,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,object,fb,factory,bean,final,method,factory,method,factory,method,to,use,final,object,args,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,fb,factory,method,args,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,factory,bean,factory,method,to,use,args,to,use,if,bean,instance,null,return,null,bw,set,bean,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,factory,method,failed,ex
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod( 			final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs);1469030791;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(_			final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class<?> factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (factoryBean == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"factory-bean '" + factoryBeanName + "' (or a BeanPostProcessor involved) returned null")__			}_			if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) {_				throw new IllegalStateException("About-to-be-created singleton instance implicitly appeared " +_						"through the creation of the factory bean that its bean definition points to")__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)___			Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)__			List<Method> candidateSet = new ArrayList<>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_					candidateSet.add(candidate)__				}_			}_			Method[] candidates = candidateSet.toArray(new Method[candidateSet.size()])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Method candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (resolvedValues != null) {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(_									beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (this.beanFactory.logger.isTraceEnabled()) {_								this.beanFactory.logger.trace("Ignoring factory method [" + candidate +_										"] of bean '" + beanName + "': " + ex)__							}_							_							if (causes == null) {_								causes = new LinkedList<>()__							}_							causes.add(ex)__							continue__						}_					}__					else {_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					_					_					_					_					_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&_							!mbd.isLenientConstructorResolution() &&_							paramTypes.length == factoryMethodToUse.getParameterCount() &&_							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				List<String> argTypes = new ArrayList<>(minNrOfArgs)__				if (explicitArgs != null) {_					for (Object arg : explicitArgs) {_						argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null")__					}_				}_				else {_					Set<ValueHolder> valueHolders = new LinkedHashSet<>(resolvedValues.getArgumentCount())__					valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())__					valueHolders.addAll(resolvedValues.getGenericArgumentValues())__					for (ValueHolder value : valueHolders) {_						String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) :_								(value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"))__						argTypes.add(argType)__					}_				}_				String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(minNrOfArgs > 0 ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class == factoryMethodToUse.getReturnType()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Object fb = factoryBean__				final Method factoryMethod = factoryMethodToUse__				final Object[] args = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, fb, factoryMethod, args)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)__			}__			if (beanInstance == null) {_				return null__			}_			bw.setBeanInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via factory method failed", ex)__		}_	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,final,string,bean,name,final,root,bean,definition,mbd,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,factory,bean,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,factory,bean,factory,bean,name,or,a,bean,post,processor,involved,returned,null,if,mbd,is,singleton,this,bean,factory,contains,singleton,bean,name,throw,new,illegal,state,exception,about,to,be,created,singleton,instance,implicitly,appeared,through,the,creation,of,the,factory,bean,that,its,bean,definition,points,to,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,get,candidate,methods,factory,class,mbd,list,method,candidate,set,new,array,list,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,candidate,set,add,candidate,method,candidates,candidate,set,to,array,new,method,candidate,set,size,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,linked,list,unsatisfied,dependency,exception,causes,null,for,method,candidate,candidates,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,mbd,is,lenient,constructor,resolution,param,types,length,factory,method,to,use,get,parameter,count,arrays,equals,param,types,factory,method,to,use,get,parameter,types,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,list,string,arg,types,new,array,list,min,nr,of,args,if,explicit,args,null,for,object,arg,explicit,args,arg,types,add,arg,null,arg,get,class,get,simple,name,null,else,set,value,holder,value,holders,new,linked,hash,set,resolved,values,get,argument,count,value,holders,add,all,resolved,values,get,indexed,argument,values,values,value,holders,add,all,resolved,values,get,generic,argument,values,for,value,holder,value,value,holders,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,null,value,get,value,get,class,get,simple,name,null,arg,types,add,arg,type,string,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,min,nr,of,args,0,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,object,fb,factory,bean,final,method,factory,method,factory,method,to,use,final,object,args,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,fb,factory,method,args,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,factory,bean,factory,method,to,use,args,to,use,if,bean,instance,null,return,null,bw,set,bean,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,factory,method,failed,ex
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod( 			final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs);1469367243;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(_			final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class<?> factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (factoryBean == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"factory-bean '" + factoryBeanName + "' (or a BeanPostProcessor involved) returned null")__			}_			if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) {_				throw new IllegalStateException("About-to-be-created singleton instance implicitly appeared " +_						"through the creation of the factory bean that its bean definition points to")__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)___			Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)__			List<Method> candidateSet = new ArrayList<>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_					candidateSet.add(candidate)__				}_			}_			Method[] candidates = candidateSet.toArray(new Method[candidateSet.size()])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Method candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (resolvedValues != null) {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(_									beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (this.beanFactory.logger.isTraceEnabled()) {_								this.beanFactory.logger.trace("Ignoring factory method [" + candidate +_										"] of bean '" + beanName + "': " + ex)__							}_							_							if (causes == null) {_								causes = new LinkedList<>()__							}_							causes.add(ex)__							continue__						}_					}__					else {_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					_					_					_					_					_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&_							!mbd.isLenientConstructorResolution() &&_							paramTypes.length == factoryMethodToUse.getParameterCount() &&_							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				List<String> argTypes = new ArrayList<>(minNrOfArgs)__				if (explicitArgs != null) {_					for (Object arg : explicitArgs) {_						argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null")__					}_				}_				else {_					Set<ValueHolder> valueHolders = new LinkedHashSet<>(resolvedValues.getArgumentCount())__					valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())__					valueHolders.addAll(resolvedValues.getGenericArgumentValues())__					for (ValueHolder value : valueHolders) {_						String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) :_								(value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"))__						argTypes.add(argType)__					}_				}_				String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(minNrOfArgs > 0 ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class == factoryMethodToUse.getReturnType()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Object fb = factoryBean__				final Method factoryMethod = factoryMethodToUse__				final Object[] args = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, fb, factoryMethod, args)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)__			}__			if (beanInstance == null) {_				return null__			}_			bw.setBeanInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via factory method failed", ex)__		}_	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,final,string,bean,name,final,root,bean,definition,mbd,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,factory,bean,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,factory,bean,factory,bean,name,or,a,bean,post,processor,involved,returned,null,if,mbd,is,singleton,this,bean,factory,contains,singleton,bean,name,throw,new,illegal,state,exception,about,to,be,created,singleton,instance,implicitly,appeared,through,the,creation,of,the,factory,bean,that,its,bean,definition,points,to,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,get,candidate,methods,factory,class,mbd,list,method,candidate,set,new,array,list,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,candidate,set,add,candidate,method,candidates,candidate,set,to,array,new,method,candidate,set,size,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,linked,list,unsatisfied,dependency,exception,causes,null,for,method,candidate,candidates,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,mbd,is,lenient,constructor,resolution,param,types,length,factory,method,to,use,get,parameter,count,arrays,equals,param,types,factory,method,to,use,get,parameter,types,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,list,string,arg,types,new,array,list,min,nr,of,args,if,explicit,args,null,for,object,arg,explicit,args,arg,types,add,arg,null,arg,get,class,get,simple,name,null,else,set,value,holder,value,holders,new,linked,hash,set,resolved,values,get,argument,count,value,holders,add,all,resolved,values,get,indexed,argument,values,values,value,holders,add,all,resolved,values,get,generic,argument,values,for,value,holder,value,value,holders,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,null,value,get,value,get,class,get,simple,name,null,arg,types,add,arg,type,string,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,min,nr,of,args,0,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,object,fb,factory,bean,final,method,factory,method,factory,method,to,use,final,object,args,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,fb,factory,method,args,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,factory,bean,factory,method,to,use,args,to,use,if,bean,instance,null,return,null,bw,set,bean,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,factory,method,failed,ex
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod( 			final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs);1478538021;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(_			final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class<?> factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (factoryBean == null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"factory-bean '" + factoryBeanName + "' (or a BeanPostProcessor involved) returned null")__			}_			if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) {_				throw new ImplicitlyAppearedSingletonException()__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)___			Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)__			List<Method> candidateSet = new ArrayList<>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_					candidateSet.add(candidate)__				}_			}_			Method[] candidates = candidateSet.toArray(new Method[candidateSet.size()])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Method candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (resolvedValues != null) {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(_									beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (this.beanFactory.logger.isTraceEnabled()) {_								this.beanFactory.logger.trace("Ignoring factory method [" + candidate +_										"] of bean '" + beanName + "': " + ex)__							}_							_							if (causes == null) {_								causes = new LinkedList<>()__							}_							causes.add(ex)__							continue__						}_					}__					else {_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					_					_					_					_					_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&_							!mbd.isLenientConstructorResolution() &&_							paramTypes.length == factoryMethodToUse.getParameterCount() &&_							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				List<String> argTypes = new ArrayList<>(minNrOfArgs)__				if (explicitArgs != null) {_					for (Object arg : explicitArgs) {_						argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null")__					}_				}_				else {_					Set<ValueHolder> valueHolders = new LinkedHashSet<>(resolvedValues.getArgumentCount())__					valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())__					valueHolders.addAll(resolvedValues.getGenericArgumentValues())__					for (ValueHolder value : valueHolders) {_						String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) :_								(value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"))__						argTypes.add(argType)__					}_				}_				String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(minNrOfArgs > 0 ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class == factoryMethodToUse.getReturnType()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Object fb = factoryBean__				final Method factoryMethod = factoryMethodToUse__				final Object[] args = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, fb, factoryMethod, args)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)__			}__			if (beanInstance == null) {_				return null__			}_			bw.setBeanInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via factory method failed", ex)__		}_	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,final,string,bean,name,final,root,bean,definition,mbd,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,factory,bean,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,factory,bean,factory,bean,name,or,a,bean,post,processor,involved,returned,null,if,mbd,is,singleton,this,bean,factory,contains,singleton,bean,name,throw,new,implicitly,appeared,singleton,exception,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,get,candidate,methods,factory,class,mbd,list,method,candidate,set,new,array,list,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,candidate,set,add,candidate,method,candidates,candidate,set,to,array,new,method,candidate,set,size,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,linked,list,unsatisfied,dependency,exception,causes,null,for,method,candidate,candidates,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,mbd,is,lenient,constructor,resolution,param,types,length,factory,method,to,use,get,parameter,count,arrays,equals,param,types,factory,method,to,use,get,parameter,types,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,list,string,arg,types,new,array,list,min,nr,of,args,if,explicit,args,null,for,object,arg,explicit,args,arg,types,add,arg,null,arg,get,class,get,simple,name,null,else,set,value,holder,value,holders,new,linked,hash,set,resolved,values,get,argument,count,value,holders,add,all,resolved,values,get,indexed,argument,values,values,value,holders,add,all,resolved,values,get,generic,argument,values,for,value,holder,value,value,holders,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,null,value,get,value,get,class,get,simple,name,null,arg,types,add,arg,type,string,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,min,nr,of,args,0,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,object,fb,factory,bean,final,method,factory,method,factory,method,to,use,final,object,args,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,fb,factory,method,args,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,factory,bean,factory,method,to,use,args,to,use,if,bean,instance,null,return,null,bw,set,bean,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,factory,method,failed,ex
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Executable executable, 			boolean autowiring) throws UnsatisfiedDependencyException;1467844672;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Executable executable,_			boolean autowiring) throws UnsatisfiedDependencyException {__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders =_				new HashSet<>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : "")__			_			ConstructorArgumentValues.ValueHolder valueHolder =_					resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__			_			_			_			if (valueHolder == null && (!autowiring || paramTypes.length == resolvedValues.getArgumentCount())) {_				valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					ConstructorArgumentValues.ValueHolder sourceHolder =_							(ConstructorArgumentValues.ValueHolder) valueHolder.getSource()__					Object sourceValue = sourceHolder.getValue()__					MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType, methodParam)__						_						_							args.resolveNecessary = true__							args.preparedArguments[paramIndex] = sourceValue__						_					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_								"Could not convert argument value of type [" +_								ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_								"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_							"Ambiguous argument values for parameter of type [" + paramType.getName() +_							"] - did you specify the correct bean references as arguments?")__				}_				try {_					Object autowiredArgument =_							resolveAutowiredArgument(methodParam, beanName, autowiredBeanNames, converter)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam), ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (this.beanFactory.logger.isDebugEnabled()) {_				this.beanFactory.logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + (executable instanceof Constructor ? "constructor" : "factory method") +_						" to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,string,param,names,executable,executable,boolean,autowiring,throws,unsatisfied,dependency,exception,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,constructor,argument,values,value,holder,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,param,types,length,resolved,values,get,argument,count,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,constructor,argument,values,value,holder,source,holder,constructor,argument,values,value,holder,value,holder,get,source,object,source,value,source,holder,get,value,method,parameter,method,param,method,parameter,for,executable,executable,param,index,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,param,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,method,parameter,method,param,method,parameter,for,executable,executable,param,index,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ambiguous,argument,values,for,parameter,of,type,param,type,get,name,did,you,specify,the,correct,bean,references,as,arguments,try,object,autowired,argument,resolve,autowired,argument,method,param,bean,name,autowired,bean,names,converter,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,this,bean,factory,logger,is,debug,enabled,this,bean,factory,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,executable,instanceof,constructor,constructor,factory,method,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Executable executable, 			boolean autowiring) throws UnsatisfiedDependencyException;1469030791;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Executable executable,_			boolean autowiring) throws UnsatisfiedDependencyException {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders =_				new HashSet<>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : "")__			_			ConstructorArgumentValues.ValueHolder valueHolder =_					resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__			_			_			_			if (valueHolder == null && (!autowiring || paramTypes.length == resolvedValues.getArgumentCount())) {_				valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					ConstructorArgumentValues.ValueHolder sourceHolder =_							(ConstructorArgumentValues.ValueHolder) valueHolder.getSource()__					Object sourceValue = sourceHolder.getValue()__					MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType, methodParam)__						_						_							args.resolveNecessary = true__							args.preparedArguments[paramIndex] = sourceValue__						_					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_								"Could not convert argument value of type [" +_								ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_								"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_							"Ambiguous argument values for parameter of type [" + paramType.getName() +_							"] - did you specify the correct bean references as arguments?")__				}_				try {_					Object autowiredArgument =_							resolveAutowiredArgument(methodParam, beanName, autowiredBeanNames, converter)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam), ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (this.beanFactory.logger.isDebugEnabled()) {_				this.beanFactory.logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + (executable instanceof Constructor ? "constructor" : "factory method") +_						" to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,string,param,names,executable,executable,boolean,autowiring,throws,unsatisfied,dependency,exception,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,constructor,argument,values,value,holder,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,param,types,length,resolved,values,get,argument,count,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,constructor,argument,values,value,holder,source,holder,constructor,argument,values,value,holder,value,holder,get,source,object,source,value,source,holder,get,value,method,parameter,method,param,method,parameter,for,executable,executable,param,index,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,param,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,method,parameter,method,param,method,parameter,for,executable,executable,param,index,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ambiguous,argument,values,for,parameter,of,type,param,type,get,name,did,you,specify,the,correct,bean,references,as,arguments,try,object,autowired,argument,resolve,autowired,argument,method,param,bean,name,autowired,bean,names,converter,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,this,bean,factory,logger,is,debug,enabled,this,bean,factory,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,executable,instanceof,constructor,constructor,factory,method,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Executable executable, 			boolean autowiring) throws UnsatisfiedDependencyException;1469367243;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Executable executable,_			boolean autowiring) throws UnsatisfiedDependencyException {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders =_				new HashSet<>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : "")__			_			ConstructorArgumentValues.ValueHolder valueHolder =_					resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__			_			_			_			if (valueHolder == null && (!autowiring || paramTypes.length == resolvedValues.getArgumentCount())) {_				valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					ConstructorArgumentValues.ValueHolder sourceHolder =_							(ConstructorArgumentValues.ValueHolder) valueHolder.getSource()__					Object sourceValue = sourceHolder.getValue()__					MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType, methodParam)__						_						_							args.resolveNecessary = true__							args.preparedArguments[paramIndex] = sourceValue__						_					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_								"Could not convert argument value of type [" +_								ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_								"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_							"Ambiguous argument values for parameter of type [" + paramType.getName() +_							"] - did you specify the correct bean references as arguments?")__				}_				try {_					Object autowiredArgument =_							resolveAutowiredArgument(methodParam, beanName, autowiredBeanNames, converter)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam), ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (this.beanFactory.logger.isDebugEnabled()) {_				this.beanFactory.logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + (executable instanceof Constructor ? "constructor" : "factory method") +_						" to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,string,param,names,executable,executable,boolean,autowiring,throws,unsatisfied,dependency,exception,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,constructor,argument,values,value,holder,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,param,types,length,resolved,values,get,argument,count,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,constructor,argument,values,value,holder,source,holder,constructor,argument,values,value,holder,value,holder,get,source,object,source,value,source,holder,get,value,method,parameter,method,param,method,parameter,for,executable,executable,param,index,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,param,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,method,parameter,method,param,method,parameter,for,executable,executable,param,index,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ambiguous,argument,values,for,parameter,of,type,param,type,get,name,did,you,specify,the,correct,bean,references,as,arguments,try,object,autowired,argument,resolve,autowired,argument,method,param,bean,name,autowired,bean,names,converter,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,this,bean,factory,logger,is,debug,enabled,this,bean,factory,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,executable,instanceof,constructor,constructor,factory,method,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Executable executable, 			boolean autowiring) throws UnsatisfiedDependencyException;1478538021;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Executable executable,_			boolean autowiring) throws UnsatisfiedDependencyException {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders =_				new HashSet<>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : "")__			_			ConstructorArgumentValues.ValueHolder valueHolder =_					resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__			_			_			_			if (valueHolder == null && (!autowiring || paramTypes.length == resolvedValues.getArgumentCount())) {_				valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					ConstructorArgumentValues.ValueHolder sourceHolder =_							(ConstructorArgumentValues.ValueHolder) valueHolder.getSource()__					Object sourceValue = sourceHolder.getValue()__					MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType, methodParam)__						_						_							args.resolveNecessary = true__							args.preparedArguments[paramIndex] = sourceValue__						_					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_								"Could not convert argument value of type [" +_								ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_								"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_							"Ambiguous argument values for parameter of type [" + paramType.getName() +_							"] - did you specify the correct bean references as arguments?")__				}_				try {_					Object autowiredArgument =_							resolveAutowiredArgument(methodParam, beanName, autowiredBeanNames, converter)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam), ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (this.beanFactory.logger.isDebugEnabled()) {_				this.beanFactory.logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + (executable instanceof Constructor ? "constructor" : "factory method") +_						" to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,string,param,names,executable,executable,boolean,autowiring,throws,unsatisfied,dependency,exception,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,constructor,argument,values,value,holder,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,param,types,length,resolved,values,get,argument,count,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,constructor,argument,values,value,holder,source,holder,constructor,argument,values,value,holder,value,holder,get,source,object,source,value,source,holder,get,value,method,parameter,method,param,method,parameter,for,executable,executable,param,index,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,param,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,method,parameter,method,param,method,parameter,for,executable,executable,param,index,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ambiguous,argument,values,for,parameter,of,type,param,type,get,name,did,you,specify,the,correct,bean,references,as,arguments,try,object,autowired,argument,resolve,autowired,argument,method,param,bean,name,autowired,bean,names,converter,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,this,bean,factory,logger,is,debug,enabled,this,bean,factory,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,executable,instanceof,constructor,constructor,factory,method,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Executable executable, 			boolean autowiring) throws UnsatisfiedDependencyException;1495868221;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Executable executable,_			boolean autowiring) throws UnsatisfiedDependencyException {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders =_				new HashSet<>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : "")__			_			ConstructorArgumentValues.ValueHolder valueHolder =_					resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__			_			_			_			if (valueHolder == null && (!autowiring || paramTypes.length == resolvedValues.getArgumentCount())) {_				valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					ConstructorArgumentValues.ValueHolder sourceHolder =_							(ConstructorArgumentValues.ValueHolder) valueHolder.getSource()__					Object sourceValue = sourceHolder.getValue()__					MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType, methodParam)__						_						_							args.resolveNecessary = true__							args.preparedArguments[paramIndex] = sourceValue__						_					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_								"Could not convert argument value of type [" +_								ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_								"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_							"Ambiguous argument values for parameter of type [" + paramType.getName() +_							"] - did you specify the correct bean references as arguments?")__				}_				try {_					Object autowiredArgument =_							resolveAutowiredArgument(methodParam, beanName, autowiredBeanNames, converter)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam), ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (this.beanFactory.logger.isDebugEnabled()) {_				this.beanFactory.logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + (executable instanceof Constructor ? "constructor" : "factory method") +_						" to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,string,param,names,executable,executable,boolean,autowiring,throws,unsatisfied,dependency,exception,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,constructor,argument,values,value,holder,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,param,types,length,resolved,values,get,argument,count,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,constructor,argument,values,value,holder,source,holder,constructor,argument,values,value,holder,value,holder,get,source,object,source,value,source,holder,get,value,method,parameter,method,param,method,parameter,for,executable,executable,param,index,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,param,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,method,parameter,method,param,method,parameter,for,executable,executable,param,index,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ambiguous,argument,values,for,parameter,of,type,param,type,get,name,did,you,specify,the,correct,bean,references,as,arguments,try,object,autowired,argument,resolve,autowired,argument,method,param,bean,name,autowired,bean,names,converter,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,this,bean,factory,logger,is,debug,enabled,this,bean,factory,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,executable,instanceof,constructor,constructor,factory,method,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Executable executable, 			boolean autowiring) throws UnsatisfiedDependencyException;1496259743;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Executable executable,_			boolean autowiring) throws UnsatisfiedDependencyException {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders =_				new HashSet<>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : "")__			_			ConstructorArgumentValues.ValueHolder valueHolder =_					resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__			_			_			_			if (valueHolder == null && (!autowiring || paramTypes.length == resolvedValues.getArgumentCount())) {_				valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					ConstructorArgumentValues.ValueHolder sourceHolder =_							(ConstructorArgumentValues.ValueHolder) valueHolder.getSource()__					Object sourceValue = sourceHolder.getValue()__					MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType, methodParam)__						_						_							args.resolveNecessary = true__							args.preparedArguments[paramIndex] = sourceValue__						_					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_								"Could not convert argument value of type [" +_								ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_								"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_							"Ambiguous argument values for parameter of type [" + paramType.getName() +_							"] - did you specify the correct bean references as arguments?")__				}_				try {_					Object autowiredArgument =_							resolveAutowiredArgument(methodParam, beanName, autowiredBeanNames, converter)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam), ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (this.beanFactory.logger.isDebugEnabled()) {_				this.beanFactory.logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + (executable instanceof Constructor ? "constructor" : "factory method") +_						" to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,string,param,names,executable,executable,boolean,autowiring,throws,unsatisfied,dependency,exception,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,constructor,argument,values,value,holder,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,param,types,length,resolved,values,get,argument,count,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,constructor,argument,values,value,holder,source,holder,constructor,argument,values,value,holder,value,holder,get,source,object,source,value,source,holder,get,value,method,parameter,method,param,method,parameter,for,executable,executable,param,index,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,param,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,method,parameter,method,param,method,parameter,for,executable,executable,param,index,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ambiguous,argument,values,for,parameter,of,type,param,type,get,name,did,you,specify,the,correct,bean,references,as,arguments,try,object,autowired,argument,resolve,autowired,argument,method,param,bean,name,autowired,bean,names,converter,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,this,bean,factory,logger,is,debug,enabled,this,bean,factory,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,executable,instanceof,constructor,constructor,factory,method,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> private Object[] resolvePreparedArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			Executable executable, Object[] argsToResolve, boolean fallback);1532385723;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			Executable executable, Object[] argsToResolve, boolean fallback) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Class<?>[] paramTypes = executable.getParameterTypes()___		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forExecutable(executable, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, executable.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter, fallback)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_						"Could not convert argument value of type [" + ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,executable,executable,object,args,to,resolve,boolean,fallback,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,class,param,types,executable,get,parameter,types,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,executable,executable,arg,index,generic,type,resolver,resolve,parameter,type,method,param,executable,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,fallback,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			Executable executable, Object[] argsToResolve, boolean fallback);1532430234;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			Executable executable, Object[] argsToResolve, boolean fallback) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Class<?>[] paramTypes = executable.getParameterTypes()___		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forExecutable(executable, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, executable.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter, fallback)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_						"Could not convert argument value of type [" + ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,executable,executable,object,args,to,resolve,boolean,fallback,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,class,param,types,executable,get,parameter,types,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,executable,executable,arg,index,generic,type,resolver,resolve,parameter,type,method,param,executable,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,fallback,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			Executable executable, Object[] argsToResolve, boolean fallback);1532577558;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			Executable executable, Object[] argsToResolve, boolean fallback) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Class<?>[] paramTypes = executable.getParameterTypes()___		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forExecutable(executable, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, executable.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter, fallback)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_						"Could not convert argument value of type [" + ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,executable,executable,object,args,to,resolve,boolean,fallback,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,class,param,types,executable,get,parameter,types,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,executable,executable,arg,index,generic,type,resolver,resolve,parameter,type,method,param,executable,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,fallback,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			Executable executable, Object[] argsToResolve, boolean fallback);1534157021;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			Executable executable, Object[] argsToResolve, boolean fallback) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Class<?>[] paramTypes = executable.getParameterTypes()___		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forExecutable(executable, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, executable.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter, fallback)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_						"Could not convert argument value of type [" + ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,executable,executable,object,args,to,resolve,boolean,fallback,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,class,param,types,executable,get,parameter,types,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,executable,executable,arg,index,generic,type,resolver,resolve,parameter,type,method,param,executable,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,fallback,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			Executable executable, Object[] argsToResolve, boolean fallback);1537388389;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			Executable executable, Object[] argsToResolve, boolean fallback) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Class<?>[] paramTypes = executable.getParameterTypes()___		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forExecutable(executable, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, executable.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter, fallback)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_						"Could not convert argument value of type [" + ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,executable,executable,object,args,to,resolve,boolean,fallback,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,class,param,types,executable,get,parameter,types,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,executable,executable,arg,index,generic,type,resolver,resolve,parameter,type,method,param,executable,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,fallback,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			Executable executable, Object[] argsToResolve, boolean fallback);1539377630;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			Executable executable, Object[] argsToResolve, boolean fallback) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Class<?>[] paramTypes = executable.getParameterTypes()___		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forExecutable(executable, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, executable.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter, fallback)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_						"Could not convert argument value of type [" + ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,executable,executable,object,args,to,resolve,boolean,fallback,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,class,param,types,executable,get,parameter,types,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,executable,executable,arg,index,generic,type,resolver,resolve,parameter,type,method,param,executable,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,fallback,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw, 			Executable executable, Object[] argsToResolve, boolean fallback);1542899558;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,_			Executable executable, Object[] argsToResolve, boolean fallback) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Class<?>[] paramTypes = executable.getParameterTypes()___		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forExecutable(executable, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, executable.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter, fallback)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_						"Could not convert argument value of type [" + ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,executable,executable,object,args,to,resolve,boolean,fallback,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,class,param,types,executable,get,parameter,types,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,executable,executable,arg,index,generic,type,resolver,resolve,parameter,type,method,param,executable,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,fallback,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1328020251;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class factoryClass__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__		}_		else {_			factoryClass = mbd.getBeanClass()__		}_		factoryClass = ClassUtils.getUserClass(factoryClass)__		Method[] candidates = ReflectionUtils.getAllDeclaredMethods(factoryClass)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,else,factory,class,mbd,get,bean,class,factory,class,class,utils,get,user,class,factory,class,method,candidates,reflection,utils,get,all,declared,methods,factory,class,method,unique,candidate,null,for,method,candidate,candidates,if,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1356735495;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class factoryClass__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__		}_		else {_			factoryClass = mbd.getBeanClass()__		}_		factoryClass = ClassUtils.getUserClass(factoryClass)__		Method[] candidates = ReflectionUtils.getAllDeclaredMethods(factoryClass)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,else,factory,class,mbd,get,bean,class,factory,class,class,utils,get,user,class,factory,class,method,candidates,reflection,utils,get,all,declared,methods,factory,class,method,unique,candidate,null,for,method,candidate,candidates,if,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1357119239;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class factoryClass__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__		}_		else {_			factoryClass = mbd.getBeanClass()__		}_		factoryClass = ClassUtils.getUserClass(factoryClass)__		Method[] candidates = ReflectionUtils.getAllDeclaredMethods(factoryClass)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,else,factory,class,mbd,get,bean,class,factory,class,class,utils,get,user,class,factory,class,method,candidates,reflection,utils,get,all,declared,methods,factory,class,method,unique,candidate,null,for,method,candidate,candidates,if,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1362408075;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class factoryClass__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__		}_		else {_			factoryClass = mbd.getBeanClass()__		}_		factoryClass = ClassUtils.getUserClass(factoryClass)__		Method[] candidates = ReflectionUtils.getAllDeclaredMethods(factoryClass)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,else,factory,class,mbd,get,bean,class,factory,class,class,utils,get,user,class,factory,class,method,candidates,reflection,utils,get,all,declared,methods,factory,class,method,unique,candidate,null,for,method,candidate,candidates,if,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1368482696;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class factoryClass__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__		}_		else {_			factoryClass = mbd.getBeanClass()__		}_		factoryClass = ClassUtils.getUserClass(factoryClass)__		Method[] candidates = ReflectionUtils.getAllDeclaredMethods(factoryClass)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,else,factory,class,mbd,get,bean,class,factory,class,class,utils,get,user,class,factory,class,method,candidates,reflection,utils,get,all,declared,methods,factory,class,method,unique,candidate,null,for,method,candidate,candidates,if,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1383520795;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class factoryClass__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__		}_		else {_			factoryClass = mbd.getBeanClass()__		}_		factoryClass = ClassUtils.getUserClass(factoryClass)__		Method[] candidates = ReflectionUtils.getAllDeclaredMethods(factoryClass)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,else,factory,class,mbd,get,bean,class,factory,class,class,utils,get,user,class,factory,class,method,candidates,reflection,utils,get,all,declared,methods,factory,class,method,unique,candidate,null,for,method,candidate,candidates,if,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1385412762;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class<?> factoryClass__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__		}_		else {_			factoryClass = mbd.getBeanClass()__		}_		factoryClass = ClassUtils.getUserClass(factoryClass)__		Method[] candidates = ReflectionUtils.getAllDeclaredMethods(factoryClass)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,else,factory,class,mbd,get,bean,class,factory,class,class,utils,get,user,class,factory,class,method,candidates,reflection,utils,get,all,declared,methods,factory,class,method,unique,candidate,null,for,method,candidate,candidates,if,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1392245296;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class<?> factoryClass__		boolean isStatic__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__			isStatic = false__		}_		else {_			factoryClass = mbd.getBeanClass()__			isStatic = true__		}_		factoryClass = ClassUtils.getUserClass(factoryClass)___		Method[] candidates = getCandidateMethods(factoryClass, mbd)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,boolean,is,static,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,is,static,false,else,factory,class,mbd,get,bean,class,is,static,true,factory,class,class,utils,get,user,class,factory,class,method,candidates,get,candidate,methods,factory,class,mbd,method,unique,candidate,null,for,method,candidate,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1392250115;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class<?> factoryClass__		boolean isStatic__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__			isStatic = false__		}_		else {_			factoryClass = mbd.getBeanClass()__			isStatic = true__		}_		factoryClass = ClassUtils.getUserClass(factoryClass)___		Method[] candidates = getCandidateMethods(factoryClass, mbd)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,boolean,is,static,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,is,static,false,else,factory,class,mbd,get,bean,class,is,static,true,factory,class,class,utils,get,user,class,factory,class,method,candidates,get,candidate,methods,factory,class,mbd,method,unique,candidate,null,for,method,candidate,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1394032589;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class<?> factoryClass__		boolean isStatic__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__			isStatic = false__		}_		else {_			factoryClass = mbd.getBeanClass()__			isStatic = true__		}_		factoryClass = ClassUtils.getUserClass(factoryClass)___		Method[] candidates = getCandidateMethods(factoryClass, mbd)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,boolean,is,static,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,is,static,false,else,factory,class,mbd,get,bean,class,is,static,true,factory,class,class,utils,get,user,class,factory,class,method,candidates,get,candidate,methods,factory,class,mbd,method,unique,candidate,null,for,method,candidate,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1404505819;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class<?> factoryClass__		boolean isStatic__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__			isStatic = false__		}_		else {_			factoryClass = mbd.getBeanClass()__			isStatic = true__		}_		factoryClass = ClassUtils.getUserClass(factoryClass)___		Method[] candidates = getCandidateMethods(factoryClass, mbd)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,boolean,is,static,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,is,static,false,else,factory,class,mbd,get,bean,class,is,static,true,factory,class,class,utils,get,user,class,factory,class,method,candidates,get,candidate,methods,factory,class,mbd,method,unique,candidate,null,for,method,candidate,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1409688815;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class<?> factoryClass__		boolean isStatic__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__			isStatic = false__		}_		else {_			factoryClass = mbd.getBeanClass()__			isStatic = true__		}_		factoryClass = ClassUtils.getUserClass(factoryClass)___		Method[] candidates = getCandidateMethods(factoryClass, mbd)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,boolean,is,static,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,is,static,false,else,factory,class,mbd,get,bean,class,is,static,true,factory,class,class,utils,get,user,class,factory,class,method,candidates,get,candidate,methods,factory,class,mbd,method,unique,candidate,null,for,method,candidate,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1413920443;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class<?> factoryClass__		boolean isStatic__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__			isStatic = false__		}_		else {_			factoryClass = mbd.getBeanClass()__			isStatic = true__		}_		factoryClass = ClassUtils.getUserClass(factoryClass)___		Method[] candidates = getCandidateMethods(factoryClass, mbd)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,boolean,is,static,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,is,static,false,else,factory,class,mbd,get,bean,class,is,static,true,factory,class,class,utils,get,user,class,factory,class,method,candidates,get,candidate,methods,factory,class,mbd,method,unique,candidate,null,for,method,candidate,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1419352511;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class<?> factoryClass__		boolean isStatic__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__			isStatic = false__		}_		else {_			factoryClass = mbd.getBeanClass()__			isStatic = true__		}_		factoryClass = ClassUtils.getUserClass(factoryClass)___		Method[] candidates = getCandidateMethods(factoryClass, mbd)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,boolean,is,static,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,is,static,false,else,factory,class,mbd,get,bean,class,is,static,true,factory,class,class,utils,get,user,class,factory,class,method,candidates,get,candidate,methods,factory,class,mbd,method,unique,candidate,null,for,method,candidate,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1432125256;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class<?> factoryClass__		boolean isStatic__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__			isStatic = false__		}_		else {_			factoryClass = mbd.getBeanClass()__			isStatic = true__		}_		factoryClass = ClassUtils.getUserClass(factoryClass)___		Method[] candidates = getCandidateMethods(factoryClass, mbd)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,boolean,is,static,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,is,static,false,else,factory,class,mbd,get,bean,class,is,static,true,factory,class,class,utils,get,user,class,factory,class,method,candidates,get,candidate,methods,factory,class,mbd,method,unique,candidate,null,for,method,candidate,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1450707100;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class<?> factoryClass__		boolean isStatic__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__			isStatic = false__		}_		else {_			factoryClass = mbd.getBeanClass()__			isStatic = true__		}_		factoryClass = ClassUtils.getUserClass(factoryClass)___		Method[] candidates = getCandidateMethods(factoryClass, mbd)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,boolean,is,static,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,is,static,false,else,factory,class,mbd,get,bean,class,is,static,true,factory,class,class,utils,get,user,class,factory,class,method,candidates,get,candidate,methods,factory,class,mbd,method,unique,candidate,null,for,method,candidate,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1456432609;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class<?> factoryClass__		boolean isStatic__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__			isStatic = false__		}_		else {_			factoryClass = mbd.getBeanClass()__			isStatic = true__		}_		factoryClass = ClassUtils.getUserClass(factoryClass)___		Method[] candidates = getCandidateMethods(factoryClass, mbd)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,boolean,is,static,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,is,static,false,else,factory,class,mbd,get,bean,class,is,static,true,factory,class,class,utils,get,user,class,factory,class,method,candidates,get,candidate,methods,factory,class,mbd,method,unique,candidate,null,for,method,candidate,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1456486263;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class<?> factoryClass__		boolean isStatic__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__			isStatic = false__		}_		else {_			factoryClass = mbd.getBeanClass()__			isStatic = true__		}_		factoryClass = ClassUtils.getUserClass(factoryClass)___		Method[] candidates = getCandidateMethods(factoryClass, mbd)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,boolean,is,static,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,is,static,false,else,factory,class,mbd,get,bean,class,is,static,true,factory,class,class,utils,get,user,class,factory,class,method,candidates,get,candidate,methods,factory,class,mbd,method,unique,candidate,null,for,method,candidate,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1457697160;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class<?> factoryClass__		boolean isStatic__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__			isStatic = false__		}_		else {_			factoryClass = mbd.getBeanClass()__			isStatic = true__		}_		factoryClass = ClassUtils.getUserClass(factoryClass)___		Method[] candidates = getCandidateMethods(factoryClass, mbd)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,boolean,is,static,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,is,static,false,else,factory,class,mbd,get,bean,class,is,static,true,factory,class,class,utils,get,user,class,factory,class,method,candidates,get,candidate,methods,factory,class,mbd,method,unique,candidate,null,for,method,candidate,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1458311433;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class<?> factoryClass__		boolean isStatic__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__			isStatic = false__		}_		else {_			factoryClass = mbd.getBeanClass()__			isStatic = true__		}_		factoryClass = ClassUtils.getUserClass(factoryClass)___		Method[] candidates = getCandidateMethods(factoryClass, mbd)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,boolean,is,static,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,is,static,false,else,factory,class,mbd,get,bean,class,is,static,true,factory,class,class,utils,get,user,class,factory,class,method,candidates,get,candidate,methods,factory,class,mbd,method,unique,candidate,null,for,method,candidate,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1458323493;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class<?> factoryClass__		boolean isStatic__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__			isStatic = false__		}_		else {_			factoryClass = mbd.getBeanClass()__			isStatic = true__		}_		factoryClass = ClassUtils.getUserClass(factoryClass)___		Method[] candidates = getCandidateMethods(factoryClass, mbd)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,boolean,is,static,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,is,static,false,else,factory,class,mbd,get,bean,class,is,static,true,factory,class,class,utils,get,user,class,factory,class,method,candidates,get,candidate,methods,factory,class,mbd,method,unique,candidate,null,for,method,candidate,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1460031510;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class<?> factoryClass__		boolean isStatic__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__			isStatic = false__		}_		else {_			factoryClass = mbd.getBeanClass()__			isStatic = true__		}_		factoryClass = ClassUtils.getUserClass(factoryClass)___		Method[] candidates = getCandidateMethods(factoryClass, mbd)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,boolean,is,static,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,is,static,false,else,factory,class,mbd,get,bean,class,is,static,true,factory,class,class,utils,get,user,class,factory,class,method,candidates,get,candidate,methods,factory,class,mbd,method,unique,candidate,null,for,method,candidate,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1467730834;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class<?> factoryClass__		boolean isStatic__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__			isStatic = false__		}_		else {_			factoryClass = mbd.getBeanClass()__			isStatic = true__		}_		factoryClass = ClassUtils.getUserClass(factoryClass)___		Method[] candidates = getCandidateMethods(factoryClass, mbd)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,boolean,is,static,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,is,static,false,else,factory,class,mbd,get,bean,class,is,static,true,factory,class,class,utils,get,user,class,factory,class,method,candidates,get,candidate,methods,factory,class,mbd,method,unique,candidate,null,for,method,candidate,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1467844672;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class<?> factoryClass__		boolean isStatic__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__			isStatic = false__		}_		else {_			factoryClass = mbd.getBeanClass()__			isStatic = true__		}_		factoryClass = ClassUtils.getUserClass(factoryClass)___		Method[] candidates = getCandidateMethods(factoryClass, mbd)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,boolean,is,static,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,is,static,false,else,factory,class,mbd,get,bean,class,is,static,true,factory,class,class,utils,get,user,class,factory,class,method,candidates,get,candidate,methods,factory,class,mbd,method,unique,candidate,null,for,method,candidate,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1469030791;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class<?> factoryClass__		boolean isStatic__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__			isStatic = false__		}_		else {_			factoryClass = mbd.getBeanClass()__			isStatic = true__		}_		factoryClass = ClassUtils.getUserClass(factoryClass)___		Method[] candidates = getCandidateMethods(factoryClass, mbd)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,boolean,is,static,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,is,static,false,else,factory,class,mbd,get,bean,class,is,static,true,factory,class,class,utils,get,user,class,factory,class,method,candidates,get,candidate,methods,factory,class,mbd,method,unique,candidate,null,for,method,candidate,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1469367243;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class<?> factoryClass__		boolean isStatic__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__			isStatic = false__		}_		else {_			factoryClass = mbd.getBeanClass()__			isStatic = true__		}_		factoryClass = ClassUtils.getUserClass(factoryClass)___		Method[] candidates = getCandidateMethods(factoryClass, mbd)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,boolean,is,static,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,is,static,false,else,factory,class,mbd,get,bean,class,is,static,true,factory,class,class,utils,get,user,class,factory,class,method,candidates,get,candidate,methods,factory,class,mbd,method,unique,candidate,null,for,method,candidate,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1478538021;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class<?> factoryClass__		boolean isStatic__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__			isStatic = false__		}_		else {_			factoryClass = mbd.getBeanClass()__			isStatic = true__		}_		factoryClass = ClassUtils.getUserClass(factoryClass)___		Method[] candidates = getCandidateMethods(factoryClass, mbd)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,boolean,is,static,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,is,static,false,else,factory,class,mbd,get,bean,class,is,static,true,factory,class,class,utils,get,user,class,factory,class,method,candidates,get,candidate,methods,factory,class,mbd,method,unique,candidate,null,for,method,candidate,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1495868221;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class<?> factoryClass__		boolean isStatic__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__			isStatic = false__		}_		else {_			factoryClass = mbd.getBeanClass()__			isStatic = true__		}_		factoryClass = ClassUtils.getUserClass(factoryClass)___		Method[] candidates = getCandidateMethods(factoryClass, mbd)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,boolean,is,static,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,is,static,false,else,factory,class,mbd,get,bean,class,is,static,true,factory,class,class,utils,get,user,class,factory,class,method,candidates,get,candidate,methods,factory,class,mbd,method,unique,candidate,null,for,method,candidate,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1496259743;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class<?> factoryClass__		boolean isStatic__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__			isStatic = false__		}_		else {_			factoryClass = mbd.getBeanClass()__			isStatic = true__		}_		factoryClass = ClassUtils.getUserClass(factoryClass)___		Method[] candidates = getCandidateMethods(factoryClass, mbd)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,boolean,is,static,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,is,static,false,else,factory,class,mbd,get,bean,class,is,static,true,factory,class,class,utils,get,user,class,factory,class,method,candidates,get,candidate,methods,factory,class,mbd,method,unique,candidate,null,for,method,candidate,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1496837955;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class<?> factoryClass__		boolean isStatic__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__			isStatic = false__		}_		else {_			factoryClass = mbd.getBeanClass()__			isStatic = true__		}_		Assert.state(factoryClass != null, "Unresolvable factory class")__		factoryClass = ClassUtils.getUserClass(factoryClass)___		Method[] candidates = getCandidateMethods(factoryClass, mbd)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,boolean,is,static,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,is,static,false,else,factory,class,mbd,get,bean,class,is,static,true,assert,state,factory,class,null,unresolvable,factory,class,factory,class,class,utils,get,user,class,factory,class,method,candidates,get,candidate,methods,factory,class,mbd,method,unique,candidate,null,for,method,candidate,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1503007895;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class<?> factoryClass__		boolean isStatic__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__			isStatic = false__		}_		else {_			factoryClass = mbd.getBeanClass()__			isStatic = true__		}_		Assert.state(factoryClass != null, "Unresolvable factory class")__		factoryClass = ClassUtils.getUserClass(factoryClass)___		Method[] candidates = getCandidateMethods(factoryClass, mbd)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,boolean,is,static,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,is,static,false,else,factory,class,mbd,get,bean,class,is,static,true,assert,state,factory,class,null,unresolvable,factory,class,factory,class,class,utils,get,user,class,factory,class,method,candidates,get,candidate,methods,factory,class,mbd,method,unique,candidate,null,for,method,candidate,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1503414318;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class<?> factoryClass__		boolean isStatic__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__			isStatic = false__		}_		else {_			factoryClass = mbd.getBeanClass()__			isStatic = true__		}_		Assert.state(factoryClass != null, "Unresolvable factory class")__		factoryClass = ClassUtils.getUserClass(factoryClass)___		Method[] candidates = getCandidateMethods(factoryClass, mbd)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,boolean,is,static,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,is,static,false,else,factory,class,mbd,get,bean,class,is,static,true,assert,state,factory,class,null,unresolvable,factory,class,factory,class,class,utils,get,user,class,factory,class,method,candidates,get,candidate,methods,factory,class,mbd,method,unique,candidate,null,for,method,candidate,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1506551472;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class<?> factoryClass__		boolean isStatic__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__			isStatic = false__		}_		else {_			factoryClass = mbd.getBeanClass()__			isStatic = true__		}_		Assert.state(factoryClass != null, "Unresolvable factory class")__		factoryClass = ClassUtils.getUserClass(factoryClass)___		Method[] candidates = getCandidateMethods(factoryClass, mbd)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,boolean,is,static,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,is,static,false,else,factory,class,mbd,get,bean,class,is,static,true,assert,state,factory,class,null,unresolvable,factory,class,factory,class,class,utils,get,user,class,factory,class,method,candidates,get,candidate,methods,factory,class,mbd,method,unique,candidate,null,for,method,candidate,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1510606271;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class<?> factoryClass__		boolean isStatic__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__			isStatic = false__		}_		else {_			factoryClass = mbd.getBeanClass()__			isStatic = true__		}_		Assert.state(factoryClass != null, "Unresolvable factory class")__		factoryClass = ClassUtils.getUserClass(factoryClass)___		Method[] candidates = getCandidateMethods(factoryClass, mbd)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,boolean,is,static,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,is,static,false,else,factory,class,mbd,get,bean,class,is,static,true,assert,state,factory,class,null,unresolvable,factory,class,factory,class,class,utils,get,user,class,factory,class,method,candidates,get,candidate,methods,factory,class,mbd,method,unique,candidate,null,for,method,candidate,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1519295386;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class<?> factoryClass__		boolean isStatic__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__			isStatic = false__		}_		else {_			factoryClass = mbd.getBeanClass()__			isStatic = true__		}_		Assert.state(factoryClass != null, "Unresolvable factory class")__		factoryClass = ClassUtils.getUserClass(factoryClass)___		Method[] candidates = getCandidateMethods(factoryClass, mbd)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,boolean,is,static,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,is,static,false,else,factory,class,mbd,get,bean,class,is,static,true,assert,state,factory,class,null,unresolvable,factory,class,factory,class,class,utils,get,user,class,factory,class,method,candidates,get,candidate,methods,factory,class,mbd,method,unique,candidate,null,for,method,candidate,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1519560860;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class<?> factoryClass__		boolean isStatic__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__			isStatic = false__		}_		else {_			factoryClass = mbd.getBeanClass()__			isStatic = true__		}_		Assert.state(factoryClass != null, "Unresolvable factory class")__		factoryClass = ClassUtils.getUserClass(factoryClass)___		Method[] candidates = getCandidateMethods(factoryClass, mbd)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,boolean,is,static,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,is,static,false,else,factory,class,mbd,get,bean,class,is,static,true,assert,state,factory,class,null,unresolvable,factory,class,factory,class,class,utils,get,user,class,factory,class,method,candidates,get,candidate,methods,factory,class,mbd,method,unique,candidate,null,for,method,candidate,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1527623493;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class<?> factoryClass__		boolean isStatic__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__			isStatic = false__		}_		else {_			factoryClass = mbd.getBeanClass()__			isStatic = true__		}_		Assert.state(factoryClass != null, "Unresolvable factory class")__		factoryClass = ClassUtils.getUserClass(factoryClass)___		Method[] candidates = getCandidateMethods(factoryClass, mbd)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,boolean,is,static,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,is,static,false,else,factory,class,mbd,get,bean,class,is,static,true,assert,state,factory,class,null,unresolvable,factory,class,factory,class,class,utils,get,user,class,factory,class,method,candidates,get,candidate,methods,factory,class,mbd,method,unique,candidate,null,for,method,candidate,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1530174524;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class<?> factoryClass__		boolean isStatic__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__			isStatic = false__		}_		else {_			factoryClass = mbd.getBeanClass()__			isStatic = true__		}_		Assert.state(factoryClass != null, "Unresolvable factory class")__		factoryClass = ClassUtils.getUserClass(factoryClass)___		Method[] candidates = getCandidateMethods(factoryClass, mbd)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,boolean,is,static,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,is,static,false,else,factory,class,mbd,get,bean,class,is,static,true,assert,state,factory,class,null,unresolvable,factory,class,factory,class,class,utils,get,user,class,factory,class,method,candidates,get,candidate,methods,factory,class,mbd,method,unique,candidate,null,for,method,candidate,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1532385723;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class<?> factoryClass__		boolean isStatic__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__			isStatic = false__		}_		else {_			factoryClass = mbd.getBeanClass()__			isStatic = true__		}_		Assert.state(factoryClass != null, "Unresolvable factory class")__		factoryClass = ClassUtils.getUserClass(factoryClass)___		Method[] candidates = getCandidateMethods(factoryClass, mbd)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,boolean,is,static,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,is,static,false,else,factory,class,mbd,get,bean,class,is,static,true,assert,state,factory,class,null,unresolvable,factory,class,factory,class,class,utils,get,user,class,factory,class,method,candidates,get,candidate,methods,factory,class,mbd,method,unique,candidate,null,for,method,candidate,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1532430234;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class<?> factoryClass__		boolean isStatic__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__			isStatic = false__		}_		else {_			factoryClass = mbd.getBeanClass()__			isStatic = true__		}_		Assert.state(factoryClass != null, "Unresolvable factory class")__		factoryClass = ClassUtils.getUserClass(factoryClass)___		Method[] candidates = getCandidateMethods(factoryClass, mbd)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,boolean,is,static,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,is,static,false,else,factory,class,mbd,get,bean,class,is,static,true,assert,state,factory,class,null,unresolvable,factory,class,factory,class,class,utils,get,user,class,factory,class,method,candidates,get,candidate,methods,factory,class,mbd,method,unique,candidate,null,for,method,candidate,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1532577558;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class<?> factoryClass__		boolean isStatic__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__			isStatic = false__		}_		else {_			factoryClass = mbd.getBeanClass()__			isStatic = true__		}_		Assert.state(factoryClass != null, "Unresolvable factory class")__		factoryClass = ClassUtils.getUserClass(factoryClass)___		Method[] candidates = getCandidateMethods(factoryClass, mbd)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,boolean,is,static,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,is,static,false,else,factory,class,mbd,get,bean,class,is,static,true,assert,state,factory,class,null,unresolvable,factory,class,factory,class,class,utils,get,user,class,factory,class,method,candidates,get,candidate,methods,factory,class,mbd,method,unique,candidate,null,for,method,candidate,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1534157021;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class<?> factoryClass__		boolean isStatic__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__			isStatic = false__		}_		else {_			factoryClass = mbd.getBeanClass()__			isStatic = true__		}_		Assert.state(factoryClass != null, "Unresolvable factory class")__		factoryClass = ClassUtils.getUserClass(factoryClass)___		Method[] candidates = getCandidateMethods(factoryClass, mbd)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,boolean,is,static,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,is,static,false,else,factory,class,mbd,get,bean,class,is,static,true,assert,state,factory,class,null,unresolvable,factory,class,factory,class,class,utils,get,user,class,factory,class,method,candidates,get,candidate,methods,factory,class,mbd,method,unique,candidate,null,for,method,candidate,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1537388389;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class<?> factoryClass__		boolean isStatic__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__			isStatic = false__		}_		else {_			factoryClass = mbd.getBeanClass()__			isStatic = true__		}_		Assert.state(factoryClass != null, "Unresolvable factory class")__		factoryClass = ClassUtils.getUserClass(factoryClass)___		Method[] candidates = getCandidateMethods(factoryClass, mbd)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		synchronized (mbd.constructorArgumentLock) {_			mbd.resolvedConstructorOrFactoryMethod = uniqueCandidate__		}_	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,boolean,is,static,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,is,static,false,else,factory,class,mbd,get,bean,class,is,static,true,assert,state,factory,class,null,unresolvable,factory,class,factory,class,class,utils,get,user,class,factory,class,method,candidates,get,candidate,methods,factory,class,mbd,method,unique,candidate,null,for,method,candidate,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,synchronized,mbd,constructor,argument,lock,mbd,resolved,constructor,or,factory,method,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1539377630;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class<?> factoryClass__		boolean isStatic__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__			isStatic = false__		}_		else {_			factoryClass = mbd.getBeanClass()__			isStatic = true__		}_		Assert.state(factoryClass != null, "Unresolvable factory class")__		factoryClass = ClassUtils.getUserClass(factoryClass)___		Method[] candidates = getCandidateMethods(factoryClass, mbd)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		mbd.factoryMethodToIntrospect = uniqueCandidate__	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,boolean,is,static,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,is,static,false,else,factory,class,mbd,get,bean,class,is,static,true,assert,state,factory,class,null,unresolvable,factory,class,factory,class,class,utils,get,user,class,factory,class,method,candidates,get,candidate,methods,factory,class,mbd,method,unique,candidate,null,for,method,candidate,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,mbd,factory,method,to,introspect,unique,candidate
ConstructorResolver -> public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd);1542899558;Resolve the factory method in the specified bean definition, if possible._{@link RootBeanDefinition#getResolvedFactoryMethod()} can be checked for the result._@param mbd the bean definition to check;public void resolveFactoryMethodIfPossible(RootBeanDefinition mbd) {_		Class<?> factoryClass__		boolean isStatic__		if (mbd.getFactoryBeanName() != null) {_			factoryClass = this.beanFactory.getType(mbd.getFactoryBeanName())__			isStatic = false__		}_		else {_			factoryClass = mbd.getBeanClass()__			isStatic = true__		}_		Assert.state(factoryClass != null, "Unresolvable factory class")__		factoryClass = ClassUtils.getUserClass(factoryClass)___		Method[] candidates = getCandidateMethods(factoryClass, mbd)__		Method uniqueCandidate = null__		for (Method candidate : candidates) {_			if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_				if (uniqueCandidate == null) {_					uniqueCandidate = candidate__				}_				else if (!Arrays.equals(uniqueCandidate.getParameterTypes(), candidate.getParameterTypes())) {_					uniqueCandidate = null__					break__				}_			}_		}_		mbd.factoryMethodToIntrospect = uniqueCandidate__	};resolve,the,factory,method,in,the,specified,bean,definition,if,possible,link,root,bean,definition,get,resolved,factory,method,can,be,checked,for,the,result,param,mbd,the,bean,definition,to,check;public,void,resolve,factory,method,if,possible,root,bean,definition,mbd,class,factory,class,boolean,is,static,if,mbd,get,factory,bean,name,null,factory,class,this,bean,factory,get,type,mbd,get,factory,bean,name,is,static,false,else,factory,class,mbd,get,bean,class,is,static,true,assert,state,factory,class,null,unresolvable,factory,class,factory,class,class,utils,get,user,class,factory,class,method,candidates,get,candidate,methods,factory,class,mbd,method,unique,candidate,null,for,method,candidate,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,if,unique,candidate,null,unique,candidate,candidate,else,if,arrays,equals,unique,candidate,get,parameter,types,candidate,get,parameter,types,unique,candidate,null,break,mbd,factory,method,to,introspect,unique,candidate
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, @Nullable ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class<?>[] paramTypes, @Nullable String[] paramNames, Executable executable, 			boolean autowiring) throws UnsatisfiedDependencyException;1510606271;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, @Nullable ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class<?>[] paramTypes, @Nullable String[] paramNames, Executable executable,_			boolean autowiring) throws UnsatisfiedDependencyException {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders = new HashSet<>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : "")__			_			ConstructorArgumentValues.ValueHolder valueHolder = null__			if (resolvedValues != null) {_				valueHolder = resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__				_				_				_				if (valueHolder == null && (!autowiring || paramTypes.length == resolvedValues.getArgumentCount())) {_					valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__				}_			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType, methodParam)__					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_								"Could not convert argument value of type [" +_										ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_										"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_					Object sourceHolder = valueHolder.getSource()__					if (sourceHolder instanceof ConstructorArgumentValues.ValueHolder) {_						Object sourceValue = ((ConstructorArgumentValues.ValueHolder) sourceHolder).getValue()__						args.resolveNecessary = true__						args.preparedArguments[paramIndex] = sourceValue__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_							"Ambiguous argument values for parameter of type [" + paramType.getName() +_							"] - did you specify the correct bean references as arguments?")__				}_				try {_					Object autowiredArgument =_							resolveAutowiredArgument(methodParam, beanName, autowiredBeanNames, converter)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam), ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (this.beanFactory.logger.isDebugEnabled()) {_				this.beanFactory.logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + (executable instanceof Constructor ? "constructor" : "factory method") +_						" to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,nullable,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,nullable,string,param,names,executable,executable,boolean,autowiring,throws,unsatisfied,dependency,exception,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,constructor,argument,values,value,holder,value,holder,null,if,resolved,values,null,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,param,types,length,resolved,values,get,argument,count,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,method,parameter,method,param,method,parameter,for,executable,executable,param,index,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,object,source,holder,value,holder,get,source,if,source,holder,instanceof,constructor,argument,values,value,holder,object,source,value,constructor,argument,values,value,holder,source,holder,get,value,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,method,parameter,method,param,method,parameter,for,executable,executable,param,index,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ambiguous,argument,values,for,parameter,of,type,param,type,get,name,did,you,specify,the,correct,bean,references,as,arguments,try,object,autowired,argument,resolve,autowired,argument,method,param,bean,name,autowired,bean,names,converter,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,this,bean,factory,logger,is,debug,enabled,this,bean,factory,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,executable,instanceof,constructor,constructor,factory,method,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, @Nullable ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class<?>[] paramTypes, @Nullable String[] paramNames, Executable executable, 			boolean autowiring) throws UnsatisfiedDependencyException;1519295386;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, @Nullable ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class<?>[] paramTypes, @Nullable String[] paramNames, Executable executable,_			boolean autowiring) throws UnsatisfiedDependencyException {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders = new HashSet<>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : "")__			_			ConstructorArgumentValues.ValueHolder valueHolder = null__			if (resolvedValues != null) {_				valueHolder = resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__				_				_				_				if (valueHolder == null && (!autowiring || paramTypes.length == resolvedValues.getArgumentCount())) {_					valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__				}_			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType, methodParam)__					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_								"Could not convert argument value of type [" +_										ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_										"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_					Object sourceHolder = valueHolder.getSource()__					if (sourceHolder instanceof ConstructorArgumentValues.ValueHolder) {_						Object sourceValue = ((ConstructorArgumentValues.ValueHolder) sourceHolder).getValue()__						args.resolveNecessary = true__						args.preparedArguments[paramIndex] = sourceValue__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_							"Ambiguous argument values for parameter of type [" + paramType.getName() +_							"] - did you specify the correct bean references as arguments?")__				}_				try {_					Object autowiredArgument =_							resolveAutowiredArgument(methodParam, beanName, autowiredBeanNames, converter)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam), ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (this.beanFactory.logger.isDebugEnabled()) {_				this.beanFactory.logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + (executable instanceof Constructor ? "constructor" : "factory method") +_						" to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,nullable,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,nullable,string,param,names,executable,executable,boolean,autowiring,throws,unsatisfied,dependency,exception,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,constructor,argument,values,value,holder,value,holder,null,if,resolved,values,null,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,param,types,length,resolved,values,get,argument,count,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,method,parameter,method,param,method,parameter,for,executable,executable,param,index,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,object,source,holder,value,holder,get,source,if,source,holder,instanceof,constructor,argument,values,value,holder,object,source,value,constructor,argument,values,value,holder,source,holder,get,value,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,method,parameter,method,param,method,parameter,for,executable,executable,param,index,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ambiguous,argument,values,for,parameter,of,type,param,type,get,name,did,you,specify,the,correct,bean,references,as,arguments,try,object,autowired,argument,resolve,autowired,argument,method,param,bean,name,autowired,bean,names,converter,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,this,bean,factory,logger,is,debug,enabled,this,bean,factory,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,executable,instanceof,constructor,constructor,factory,method,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, @Nullable ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class<?>[] paramTypes, @Nullable String[] paramNames, Executable executable, 			boolean autowiring) throws UnsatisfiedDependencyException;1519560860;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, @Nullable ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class<?>[] paramTypes, @Nullable String[] paramNames, Executable executable,_			boolean autowiring) throws UnsatisfiedDependencyException {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders = new HashSet<>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : "")__			_			ConstructorArgumentValues.ValueHolder valueHolder = null__			if (resolvedValues != null) {_				valueHolder = resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__				_				_				_				if (valueHolder == null && (!autowiring || paramTypes.length == resolvedValues.getArgumentCount())) {_					valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__				}_			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType, methodParam)__					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_								"Could not convert argument value of type [" +_										ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_										"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_					Object sourceHolder = valueHolder.getSource()__					if (sourceHolder instanceof ConstructorArgumentValues.ValueHolder) {_						Object sourceValue = ((ConstructorArgumentValues.ValueHolder) sourceHolder).getValue()__						args.resolveNecessary = true__						args.preparedArguments[paramIndex] = sourceValue__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_							"Ambiguous argument values for parameter of type [" + paramType.getName() +_							"] - did you specify the correct bean references as arguments?")__				}_				try {_					Object autowiredArgument =_							resolveAutowiredArgument(methodParam, beanName, autowiredBeanNames, converter)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam), ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (this.beanFactory.logger.isDebugEnabled()) {_				this.beanFactory.logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + (executable instanceof Constructor ? "constructor" : "factory method") +_						" to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,nullable,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,nullable,string,param,names,executable,executable,boolean,autowiring,throws,unsatisfied,dependency,exception,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,constructor,argument,values,value,holder,value,holder,null,if,resolved,values,null,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,param,types,length,resolved,values,get,argument,count,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,method,parameter,method,param,method,parameter,for,executable,executable,param,index,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,object,source,holder,value,holder,get,source,if,source,holder,instanceof,constructor,argument,values,value,holder,object,source,value,constructor,argument,values,value,holder,source,holder,get,value,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,method,parameter,method,param,method,parameter,for,executable,executable,param,index,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ambiguous,argument,values,for,parameter,of,type,param,type,get,name,did,you,specify,the,correct,bean,references,as,arguments,try,object,autowired,argument,resolve,autowired,argument,method,param,bean,name,autowired,bean,names,converter,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,this,bean,factory,logger,is,debug,enabled,this,bean,factory,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,executable,instanceof,constructor,constructor,factory,method,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, @Nullable ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class<?>[] paramTypes, @Nullable String[] paramNames, Executable executable, 			boolean autowiring) throws UnsatisfiedDependencyException;1527623493;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, @Nullable ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class<?>[] paramTypes, @Nullable String[] paramNames, Executable executable,_			boolean autowiring) throws UnsatisfiedDependencyException {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders = new HashSet<>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : "")__			_			ConstructorArgumentValues.ValueHolder valueHolder = null__			if (resolvedValues != null) {_				valueHolder = resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__				_				_				_				if (valueHolder == null && (!autowiring || paramTypes.length == resolvedValues.getArgumentCount())) {_					valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__				}_			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType, methodParam)__					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_								"Could not convert argument value of type [" +_										ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_										"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_					Object sourceHolder = valueHolder.getSource()__					if (sourceHolder instanceof ConstructorArgumentValues.ValueHolder) {_						Object sourceValue = ((ConstructorArgumentValues.ValueHolder) sourceHolder).getValue()__						args.resolveNecessary = true__						args.preparedArguments[paramIndex] = sourceValue__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_							"Ambiguous argument values for parameter of type [" + paramType.getName() +_							"] - did you specify the correct bean references as arguments?")__				}_				try {_					Object autowiredArgument =_							resolveAutowiredArgument(methodParam, beanName, autowiredBeanNames, converter)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam), ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (logger.isDebugEnabled()) {_				logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + (executable instanceof Constructor ? "constructor" : "factory method") +_						" to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,nullable,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,nullable,string,param,names,executable,executable,boolean,autowiring,throws,unsatisfied,dependency,exception,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,constructor,argument,values,value,holder,value,holder,null,if,resolved,values,null,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,param,types,length,resolved,values,get,argument,count,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,method,parameter,method,param,method,parameter,for,executable,executable,param,index,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,object,source,holder,value,holder,get,source,if,source,holder,instanceof,constructor,argument,values,value,holder,object,source,value,constructor,argument,values,value,holder,source,holder,get,value,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,method,parameter,method,param,method,parameter,for,executable,executable,param,index,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ambiguous,argument,values,for,parameter,of,type,param,type,get,name,did,you,specify,the,correct,bean,references,as,arguments,try,object,autowired,argument,resolve,autowired,argument,method,param,bean,name,autowired,bean,names,converter,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,logger,is,debug,enabled,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,executable,instanceof,constructor,constructor,factory,method,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, @Nullable ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class<?>[] paramTypes, @Nullable String[] paramNames, Executable executable, 			boolean autowiring) throws UnsatisfiedDependencyException;1530174524;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, @Nullable ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class<?>[] paramTypes, @Nullable String[] paramNames, Executable executable,_			boolean autowiring) throws UnsatisfiedDependencyException {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders = new HashSet<>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : "")__			_			ConstructorArgumentValues.ValueHolder valueHolder = null__			if (resolvedValues != null) {_				valueHolder = resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__				_				_				_				if (valueHolder == null && (!autowiring || paramTypes.length == resolvedValues.getArgumentCount())) {_					valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__				}_			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType, methodParam)__					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_								"Could not convert argument value of type [" +_										ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_										"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_					Object sourceHolder = valueHolder.getSource()__					if (sourceHolder instanceof ConstructorArgumentValues.ValueHolder) {_						Object sourceValue = ((ConstructorArgumentValues.ValueHolder) sourceHolder).getValue()__						args.resolveNecessary = true__						args.preparedArguments[paramIndex] = sourceValue__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				MethodParameter methodParam = MethodParameter.forExecutable(executable, paramIndex)__				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_							"Ambiguous argument values for parameter of type [" + paramType.getName() +_							"] - did you specify the correct bean references as arguments?")__				}_				try {_					Object autowiredArgument =_							resolveAutowiredArgument(methodParam, beanName, autowiredBeanNames, converter)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam), ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (logger.isDebugEnabled()) {_				logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + (executable instanceof Constructor ? "constructor" : "factory method") +_						" to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,nullable,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,nullable,string,param,names,executable,executable,boolean,autowiring,throws,unsatisfied,dependency,exception,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,constructor,argument,values,value,holder,value,holder,null,if,resolved,values,null,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,param,types,length,resolved,values,get,argument,count,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,method,parameter,method,param,method,parameter,for,executable,executable,param,index,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,object,source,holder,value,holder,get,source,if,source,holder,instanceof,constructor,argument,values,value,holder,object,source,value,constructor,argument,values,value,holder,source,holder,get,value,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,method,parameter,method,param,method,parameter,for,executable,executable,param,index,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ambiguous,argument,values,for,parameter,of,type,param,type,get,name,did,you,specify,the,correct,bean,references,as,arguments,try,object,autowired,argument,resolve,autowired,argument,method,param,bean,name,autowired,bean,names,converter,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,logger,is,debug,enabled,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,executable,instanceof,constructor,constructor,factory,method,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> private Object[] resolvePreparedArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Executable executable, Object[] argsToResolve);1467844672;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Executable executable, Object[] argsToResolve) {__		Class<?>[] paramTypes = executable.getParameterTypes()__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forExecutable(executable, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, executable.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_						"Could not convert argument value of type [" + ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,executable,executable,object,args,to,resolve,class,param,types,executable,get,parameter,types,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,executable,executable,arg,index,generic,type,resolver,resolve,parameter,type,method,param,executable,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Executable executable, Object[] argsToResolve);1469030791;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Executable executable, Object[] argsToResolve) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Class<?>[] paramTypes = executable.getParameterTypes()___		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forExecutable(executable, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, executable.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_						"Could not convert argument value of type [" + ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,executable,executable,object,args,to,resolve,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,class,param,types,executable,get,parameter,types,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,executable,executable,arg,index,generic,type,resolver,resolve,parameter,type,method,param,executable,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Executable executable, Object[] argsToResolve);1469367243;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Executable executable, Object[] argsToResolve) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Class<?>[] paramTypes = executable.getParameterTypes()___		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forExecutable(executable, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, executable.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_						"Could not convert argument value of type [" + ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,executable,executable,object,args,to,resolve,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,class,param,types,executable,get,parameter,types,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,executable,executable,arg,index,generic,type,resolver,resolve,parameter,type,method,param,executable,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Executable executable, Object[] argsToResolve);1478538021;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Executable executable, Object[] argsToResolve) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Class<?>[] paramTypes = executable.getParameterTypes()___		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forExecutable(executable, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, executable.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_						"Could not convert argument value of type [" + ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,executable,executable,object,args,to,resolve,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,class,param,types,executable,get,parameter,types,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,executable,executable,arg,index,generic,type,resolver,resolve,parameter,type,method,param,executable,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Executable executable, Object[] argsToResolve);1495868221;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Executable executable, Object[] argsToResolve) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Class<?>[] paramTypes = executable.getParameterTypes()___		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forExecutable(executable, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, executable.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_						"Could not convert argument value of type [" + ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,executable,executable,object,args,to,resolve,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,class,param,types,executable,get,parameter,types,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,executable,executable,arg,index,generic,type,resolver,resolve,parameter,type,method,param,executable,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Executable executable, Object[] argsToResolve);1496259743;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Executable executable, Object[] argsToResolve) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Class<?>[] paramTypes = executable.getParameterTypes()___		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forExecutable(executable, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, executable.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_						"Could not convert argument value of type [" + ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,executable,executable,object,args,to,resolve,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,class,param,types,executable,get,parameter,types,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,executable,executable,arg,index,generic,type,resolver,resolve,parameter,type,method,param,executable,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Executable executable, Object[] argsToResolve);1496837955;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Executable executable, Object[] argsToResolve) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Class<?>[] paramTypes = executable.getParameterTypes()___		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forExecutable(executable, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, executable.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_						"Could not convert argument value of type [" + ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,executable,executable,object,args,to,resolve,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,class,param,types,executable,get,parameter,types,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,executable,executable,arg,index,generic,type,resolver,resolve,parameter,type,method,param,executable,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Executable executable, Object[] argsToResolve);1503007895;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Executable executable, Object[] argsToResolve) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Class<?>[] paramTypes = executable.getParameterTypes()___		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forExecutable(executable, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, executable.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_						"Could not convert argument value of type [" + ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,executable,executable,object,args,to,resolve,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,class,param,types,executable,get,parameter,types,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,executable,executable,arg,index,generic,type,resolver,resolve,parameter,type,method,param,executable,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Executable executable, Object[] argsToResolve);1503414318;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Executable executable, Object[] argsToResolve) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Class<?>[] paramTypes = executable.getParameterTypes()___		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forExecutable(executable, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, executable.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_						"Could not convert argument value of type [" + ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,executable,executable,object,args,to,resolve,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,class,param,types,executable,get,parameter,types,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,executable,executable,arg,index,generic,type,resolver,resolve,parameter,type,method,param,executable,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Executable executable, Object[] argsToResolve);1506551472;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Executable executable, Object[] argsToResolve) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Class<?>[] paramTypes = executable.getParameterTypes()___		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forExecutable(executable, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, executable.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_						"Could not convert argument value of type [" + ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,executable,executable,object,args,to,resolve,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,class,param,types,executable,get,parameter,types,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,executable,executable,arg,index,generic,type,resolver,resolve,parameter,type,method,param,executable,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Executable executable, Object[] argsToResolve);1510606271;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Executable executable, Object[] argsToResolve) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Class<?>[] paramTypes = executable.getParameterTypes()___		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forExecutable(executable, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, executable.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_						"Could not convert argument value of type [" + ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,executable,executable,object,args,to,resolve,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,class,param,types,executable,get,parameter,types,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,executable,executable,arg,index,generic,type,resolver,resolve,parameter,type,method,param,executable,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Executable executable, Object[] argsToResolve);1519295386;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Executable executable, Object[] argsToResolve) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Class<?>[] paramTypes = executable.getParameterTypes()___		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forExecutable(executable, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, executable.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_						"Could not convert argument value of type [" + ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,executable,executable,object,args,to,resolve,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,class,param,types,executable,get,parameter,types,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,executable,executable,arg,index,generic,type,resolver,resolve,parameter,type,method,param,executable,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Executable executable, Object[] argsToResolve);1519560860;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Executable executable, Object[] argsToResolve) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Class<?>[] paramTypes = executable.getParameterTypes()___		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forExecutable(executable, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, executable.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_						"Could not convert argument value of type [" + ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,executable,executable,object,args,to,resolve,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,class,param,types,executable,get,parameter,types,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,executable,executable,arg,index,generic,type,resolver,resolve,parameter,type,method,param,executable,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Executable executable, Object[] argsToResolve);1527623493;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Executable executable, Object[] argsToResolve) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Class<?>[] paramTypes = executable.getParameterTypes()___		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forExecutable(executable, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, executable.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_						"Could not convert argument value of type [" + ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,executable,executable,object,args,to,resolve,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,class,param,types,executable,get,parameter,types,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,executable,executable,arg,index,generic,type,resolver,resolve,parameter,type,method,param,executable,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Executable executable, Object[] argsToResolve);1530174524;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Executable executable, Object[] argsToResolve) {__		TypeConverter customConverter = this.beanFactory.getCustomTypeConverter()__		TypeConverter converter = (customConverter != null ? customConverter : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Class<?>[] paramTypes = executable.getParameterTypes()___		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forExecutable(executable, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, executable.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_						"Could not convert argument value of type [" + ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,executable,executable,object,args,to,resolve,type,converter,custom,converter,this,bean,factory,get,custom,type,converter,type,converter,converter,custom,converter,null,custom,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,class,param,types,executable,get,parameter,types,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,executable,executable,arg,index,generic,type,resolver,resolve,parameter,type,method,param,executable,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Method[] getCandidateMethods(Class<?> factoryClass, RootBeanDefinition mbd);1534157021;Retrieve all candidate methods for the given class, considering_the {@link RootBeanDefinition#isNonPublicAccessAllowed()} flag._Called as the starting point for factory method determination.;private Method[] getCandidateMethods(Class<?> factoryClass, RootBeanDefinition mbd) {_		if (System.getSecurityManager() != null) {_			return AccessController.doPrivileged((PrivilegedAction<Method[]>) () ->_					(mbd.isNonPublicAccessAllowed() ?_						ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods()))__		}_		else {_			return (mbd.isNonPublicAccessAllowed() ?_					ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__		}_	};retrieve,all,candidate,methods,for,the,given,class,considering,the,link,root,bean,definition,is,non,public,access,allowed,flag,called,as,the,starting,point,for,factory,method,determination;private,method,get,candidate,methods,class,factory,class,root,bean,definition,mbd,if,system,get,security,manager,null,return,access,controller,do,privileged,privileged,action,method,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods,else,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods
ConstructorResolver -> private Method[] getCandidateMethods(Class<?> factoryClass, RootBeanDefinition mbd);1537388389;Retrieve all candidate methods for the given class, considering_the {@link RootBeanDefinition#isNonPublicAccessAllowed()} flag._Called as the starting point for factory method determination.;private Method[] getCandidateMethods(Class<?> factoryClass, RootBeanDefinition mbd) {_		if (System.getSecurityManager() != null) {_			return AccessController.doPrivileged((PrivilegedAction<Method[]>) () ->_					(mbd.isNonPublicAccessAllowed() ?_						ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods()))__		}_		else {_			return (mbd.isNonPublicAccessAllowed() ?_					ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__		}_	};retrieve,all,candidate,methods,for,the,given,class,considering,the,link,root,bean,definition,is,non,public,access,allowed,flag,called,as,the,starting,point,for,factory,method,determination;private,method,get,candidate,methods,class,factory,class,root,bean,definition,mbd,if,system,get,security,manager,null,return,access,controller,do,privileged,privileged,action,method,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods,else,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods
ConstructorResolver -> private Method[] getCandidateMethods(Class<?> factoryClass, RootBeanDefinition mbd);1539377630;Retrieve all candidate methods for the given class, considering_the {@link RootBeanDefinition#isNonPublicAccessAllowed()} flag._Called as the starting point for factory method determination.;private Method[] getCandidateMethods(Class<?> factoryClass, RootBeanDefinition mbd) {_		if (System.getSecurityManager() != null) {_			return AccessController.doPrivileged((PrivilegedAction<Method[]>) () ->_					(mbd.isNonPublicAccessAllowed() ?_						ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods()))__		}_		else {_			return (mbd.isNonPublicAccessAllowed() ?_					ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__		}_	};retrieve,all,candidate,methods,for,the,given,class,considering,the,link,root,bean,definition,is,non,public,access,allowed,flag,called,as,the,starting,point,for,factory,method,determination;private,method,get,candidate,methods,class,factory,class,root,bean,definition,mbd,if,system,get,security,manager,null,return,access,controller,do,privileged,privileged,action,method,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods,else,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods
ConstructorResolver -> private Method[] getCandidateMethods(Class<?> factoryClass, RootBeanDefinition mbd);1542899558;Retrieve all candidate methods for the given class, considering_the {@link RootBeanDefinition#isNonPublicAccessAllowed()} flag._Called as the starting point for factory method determination.;private Method[] getCandidateMethods(Class<?> factoryClass, RootBeanDefinition mbd) {_		if (System.getSecurityManager() != null) {_			return AccessController.doPrivileged((PrivilegedAction<Method[]>) () ->_					(mbd.isNonPublicAccessAllowed() ?_						ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods()))__		}_		else {_			return (mbd.isNonPublicAccessAllowed() ?_					ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__		}_	};retrieve,all,candidate,methods,for,the,given,class,considering,the,link,root,bean,definition,is,non,public,access,allowed,flag,called,as,the,starting,point,for,factory,method,determination;private,method,get,candidate,methods,class,factory,class,root,bean,definition,mbd,if,system,get,security,manager,null,return,access,controller,do,privileged,privileged,action,method,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods,else,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods
ConstructorResolver -> private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd);1392245296;Retrieve all candidate methods for the given class, considering_the {@link RootBeanDefinition#isNonPublicAccessAllowed()} flag._Called as the starting point for factory method determination.;private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd) {_		if (System.getSecurityManager() != null) {_			return AccessController.doPrivileged(new PrivilegedAction<Method[]>() {_				@Override_				public Method[] run() {_					return (mbd.isNonPublicAccessAllowed() ?_							ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__				}_			})__		}_		else {_			return (mbd.isNonPublicAccessAllowed() ?_					ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__		}_	};retrieve,all,candidate,methods,for,the,given,class,considering,the,link,root,bean,definition,is,non,public,access,allowed,flag,called,as,the,starting,point,for,factory,method,determination;private,method,get,candidate,methods,final,class,factory,class,final,root,bean,definition,mbd,if,system,get,security,manager,null,return,access,controller,do,privileged,new,privileged,action,method,override,public,method,run,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods,else,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods
ConstructorResolver -> private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd);1392250115;Retrieve all candidate methods for the given class, considering_the {@link RootBeanDefinition#isNonPublicAccessAllowed()} flag._Called as the starting point for factory method determination.;private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd) {_		if (System.getSecurityManager() != null) {_			return AccessController.doPrivileged(new PrivilegedAction<Method[]>() {_				@Override_				public Method[] run() {_					return (mbd.isNonPublicAccessAllowed() ?_							ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__				}_			})__		}_		else {_			return (mbd.isNonPublicAccessAllowed() ?_					ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__		}_	};retrieve,all,candidate,methods,for,the,given,class,considering,the,link,root,bean,definition,is,non,public,access,allowed,flag,called,as,the,starting,point,for,factory,method,determination;private,method,get,candidate,methods,final,class,factory,class,final,root,bean,definition,mbd,if,system,get,security,manager,null,return,access,controller,do,privileged,new,privileged,action,method,override,public,method,run,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods,else,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods
ConstructorResolver -> private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd);1394032589;Retrieve all candidate methods for the given class, considering_the {@link RootBeanDefinition#isNonPublicAccessAllowed()} flag._Called as the starting point for factory method determination.;private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd) {_		if (System.getSecurityManager() != null) {_			return AccessController.doPrivileged(new PrivilegedAction<Method[]>() {_				@Override_				public Method[] run() {_					return (mbd.isNonPublicAccessAllowed() ?_							ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__				}_			})__		}_		else {_			return (mbd.isNonPublicAccessAllowed() ?_					ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__		}_	};retrieve,all,candidate,methods,for,the,given,class,considering,the,link,root,bean,definition,is,non,public,access,allowed,flag,called,as,the,starting,point,for,factory,method,determination;private,method,get,candidate,methods,final,class,factory,class,final,root,bean,definition,mbd,if,system,get,security,manager,null,return,access,controller,do,privileged,new,privileged,action,method,override,public,method,run,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods,else,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods
ConstructorResolver -> private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd);1404505819;Retrieve all candidate methods for the given class, considering_the {@link RootBeanDefinition#isNonPublicAccessAllowed()} flag._Called as the starting point for factory method determination.;private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd) {_		if (System.getSecurityManager() != null) {_			return AccessController.doPrivileged(new PrivilegedAction<Method[]>() {_				@Override_				public Method[] run() {_					return (mbd.isNonPublicAccessAllowed() ?_							ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__				}_			})__		}_		else {_			return (mbd.isNonPublicAccessAllowed() ?_					ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__		}_	};retrieve,all,candidate,methods,for,the,given,class,considering,the,link,root,bean,definition,is,non,public,access,allowed,flag,called,as,the,starting,point,for,factory,method,determination;private,method,get,candidate,methods,final,class,factory,class,final,root,bean,definition,mbd,if,system,get,security,manager,null,return,access,controller,do,privileged,new,privileged,action,method,override,public,method,run,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods,else,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods
ConstructorResolver -> private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd);1409688815;Retrieve all candidate methods for the given class, considering_the {@link RootBeanDefinition#isNonPublicAccessAllowed()} flag._Called as the starting point for factory method determination.;private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd) {_		if (System.getSecurityManager() != null) {_			return AccessController.doPrivileged(new PrivilegedAction<Method[]>() {_				@Override_				public Method[] run() {_					return (mbd.isNonPublicAccessAllowed() ?_							ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__				}_			})__		}_		else {_			return (mbd.isNonPublicAccessAllowed() ?_					ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__		}_	};retrieve,all,candidate,methods,for,the,given,class,considering,the,link,root,bean,definition,is,non,public,access,allowed,flag,called,as,the,starting,point,for,factory,method,determination;private,method,get,candidate,methods,final,class,factory,class,final,root,bean,definition,mbd,if,system,get,security,manager,null,return,access,controller,do,privileged,new,privileged,action,method,override,public,method,run,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods,else,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods
ConstructorResolver -> private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd);1413920443;Retrieve all candidate methods for the given class, considering_the {@link RootBeanDefinition#isNonPublicAccessAllowed()} flag._Called as the starting point for factory method determination.;private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd) {_		if (System.getSecurityManager() != null) {_			return AccessController.doPrivileged(new PrivilegedAction<Method[]>() {_				@Override_				public Method[] run() {_					return (mbd.isNonPublicAccessAllowed() ?_							ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__				}_			})__		}_		else {_			return (mbd.isNonPublicAccessAllowed() ?_					ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__		}_	};retrieve,all,candidate,methods,for,the,given,class,considering,the,link,root,bean,definition,is,non,public,access,allowed,flag,called,as,the,starting,point,for,factory,method,determination;private,method,get,candidate,methods,final,class,factory,class,final,root,bean,definition,mbd,if,system,get,security,manager,null,return,access,controller,do,privileged,new,privileged,action,method,override,public,method,run,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods,else,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods
ConstructorResolver -> private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd);1419352511;Retrieve all candidate methods for the given class, considering_the {@link RootBeanDefinition#isNonPublicAccessAllowed()} flag._Called as the starting point for factory method determination.;private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd) {_		if (System.getSecurityManager() != null) {_			return AccessController.doPrivileged(new PrivilegedAction<Method[]>() {_				@Override_				public Method[] run() {_					return (mbd.isNonPublicAccessAllowed() ?_							ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__				}_			})__		}_		else {_			return (mbd.isNonPublicAccessAllowed() ?_					ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__		}_	};retrieve,all,candidate,methods,for,the,given,class,considering,the,link,root,bean,definition,is,non,public,access,allowed,flag,called,as,the,starting,point,for,factory,method,determination;private,method,get,candidate,methods,final,class,factory,class,final,root,bean,definition,mbd,if,system,get,security,manager,null,return,access,controller,do,privileged,new,privileged,action,method,override,public,method,run,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods,else,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods
ConstructorResolver -> private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd);1432125256;Retrieve all candidate methods for the given class, considering_the {@link RootBeanDefinition#isNonPublicAccessAllowed()} flag._Called as the starting point for factory method determination.;private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd) {_		if (System.getSecurityManager() != null) {_			return AccessController.doPrivileged(new PrivilegedAction<Method[]>() {_				@Override_				public Method[] run() {_					return (mbd.isNonPublicAccessAllowed() ?_							ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__				}_			})__		}_		else {_			return (mbd.isNonPublicAccessAllowed() ?_					ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__		}_	};retrieve,all,candidate,methods,for,the,given,class,considering,the,link,root,bean,definition,is,non,public,access,allowed,flag,called,as,the,starting,point,for,factory,method,determination;private,method,get,candidate,methods,final,class,factory,class,final,root,bean,definition,mbd,if,system,get,security,manager,null,return,access,controller,do,privileged,new,privileged,action,method,override,public,method,run,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods,else,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods
ConstructorResolver -> private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd);1450707100;Retrieve all candidate methods for the given class, considering_the {@link RootBeanDefinition#isNonPublicAccessAllowed()} flag._Called as the starting point for factory method determination.;private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd) {_		if (System.getSecurityManager() != null) {_			return AccessController.doPrivileged(new PrivilegedAction<Method[]>() {_				@Override_				public Method[] run() {_					return (mbd.isNonPublicAccessAllowed() ?_							ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__				}_			})__		}_		else {_			return (mbd.isNonPublicAccessAllowed() ?_					ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__		}_	};retrieve,all,candidate,methods,for,the,given,class,considering,the,link,root,bean,definition,is,non,public,access,allowed,flag,called,as,the,starting,point,for,factory,method,determination;private,method,get,candidate,methods,final,class,factory,class,final,root,bean,definition,mbd,if,system,get,security,manager,null,return,access,controller,do,privileged,new,privileged,action,method,override,public,method,run,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods,else,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods
ConstructorResolver -> private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd);1456432609;Retrieve all candidate methods for the given class, considering_the {@link RootBeanDefinition#isNonPublicAccessAllowed()} flag._Called as the starting point for factory method determination.;private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd) {_		if (System.getSecurityManager() != null) {_			return AccessController.doPrivileged(new PrivilegedAction<Method[]>() {_				@Override_				public Method[] run() {_					return (mbd.isNonPublicAccessAllowed() ?_							ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__				}_			})__		}_		else {_			return (mbd.isNonPublicAccessAllowed() ?_					ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__		}_	};retrieve,all,candidate,methods,for,the,given,class,considering,the,link,root,bean,definition,is,non,public,access,allowed,flag,called,as,the,starting,point,for,factory,method,determination;private,method,get,candidate,methods,final,class,factory,class,final,root,bean,definition,mbd,if,system,get,security,manager,null,return,access,controller,do,privileged,new,privileged,action,method,override,public,method,run,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods,else,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods
ConstructorResolver -> private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd);1456486263;Retrieve all candidate methods for the given class, considering_the {@link RootBeanDefinition#isNonPublicAccessAllowed()} flag._Called as the starting point for factory method determination.;private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd) {_		if (System.getSecurityManager() != null) {_			return AccessController.doPrivileged(new PrivilegedAction<Method[]>() {_				@Override_				public Method[] run() {_					return (mbd.isNonPublicAccessAllowed() ?_							ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__				}_			})__		}_		else {_			return (mbd.isNonPublicAccessAllowed() ?_					ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__		}_	};retrieve,all,candidate,methods,for,the,given,class,considering,the,link,root,bean,definition,is,non,public,access,allowed,flag,called,as,the,starting,point,for,factory,method,determination;private,method,get,candidate,methods,final,class,factory,class,final,root,bean,definition,mbd,if,system,get,security,manager,null,return,access,controller,do,privileged,new,privileged,action,method,override,public,method,run,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods,else,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods
ConstructorResolver -> private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd);1457697160;Retrieve all candidate methods for the given class, considering_the {@link RootBeanDefinition#isNonPublicAccessAllowed()} flag._Called as the starting point for factory method determination.;private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd) {_		if (System.getSecurityManager() != null) {_			return AccessController.doPrivileged(new PrivilegedAction<Method[]>() {_				@Override_				public Method[] run() {_					return (mbd.isNonPublicAccessAllowed() ?_							ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__				}_			})__		}_		else {_			return (mbd.isNonPublicAccessAllowed() ?_					ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__		}_	};retrieve,all,candidate,methods,for,the,given,class,considering,the,link,root,bean,definition,is,non,public,access,allowed,flag,called,as,the,starting,point,for,factory,method,determination;private,method,get,candidate,methods,final,class,factory,class,final,root,bean,definition,mbd,if,system,get,security,manager,null,return,access,controller,do,privileged,new,privileged,action,method,override,public,method,run,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods,else,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods
ConstructorResolver -> private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd);1458311433;Retrieve all candidate methods for the given class, considering_the {@link RootBeanDefinition#isNonPublicAccessAllowed()} flag._Called as the starting point for factory method determination.;private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd) {_		if (System.getSecurityManager() != null) {_			return AccessController.doPrivileged(new PrivilegedAction<Method[]>() {_				@Override_				public Method[] run() {_					return (mbd.isNonPublicAccessAllowed() ?_							ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__				}_			})__		}_		else {_			return (mbd.isNonPublicAccessAllowed() ?_					ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__		}_	};retrieve,all,candidate,methods,for,the,given,class,considering,the,link,root,bean,definition,is,non,public,access,allowed,flag,called,as,the,starting,point,for,factory,method,determination;private,method,get,candidate,methods,final,class,factory,class,final,root,bean,definition,mbd,if,system,get,security,manager,null,return,access,controller,do,privileged,new,privileged,action,method,override,public,method,run,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods,else,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods
ConstructorResolver -> private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd);1458323493;Retrieve all candidate methods for the given class, considering_the {@link RootBeanDefinition#isNonPublicAccessAllowed()} flag._Called as the starting point for factory method determination.;private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd) {_		if (System.getSecurityManager() != null) {_			return AccessController.doPrivileged(new PrivilegedAction<Method[]>() {_				@Override_				public Method[] run() {_					return (mbd.isNonPublicAccessAllowed() ?_							ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__				}_			})__		}_		else {_			return (mbd.isNonPublicAccessAllowed() ?_					ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__		}_	};retrieve,all,candidate,methods,for,the,given,class,considering,the,link,root,bean,definition,is,non,public,access,allowed,flag,called,as,the,starting,point,for,factory,method,determination;private,method,get,candidate,methods,final,class,factory,class,final,root,bean,definition,mbd,if,system,get,security,manager,null,return,access,controller,do,privileged,new,privileged,action,method,override,public,method,run,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods,else,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods
ConstructorResolver -> private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd);1460031510;Retrieve all candidate methods for the given class, considering_the {@link RootBeanDefinition#isNonPublicAccessAllowed()} flag._Called as the starting point for factory method determination.;private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd) {_		if (System.getSecurityManager() != null) {_			return AccessController.doPrivileged(new PrivilegedAction<Method[]>() {_				@Override_				public Method[] run() {_					return (mbd.isNonPublicAccessAllowed() ?_							ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__				}_			})__		}_		else {_			return (mbd.isNonPublicAccessAllowed() ?_					ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__		}_	};retrieve,all,candidate,methods,for,the,given,class,considering,the,link,root,bean,definition,is,non,public,access,allowed,flag,called,as,the,starting,point,for,factory,method,determination;private,method,get,candidate,methods,final,class,factory,class,final,root,bean,definition,mbd,if,system,get,security,manager,null,return,access,controller,do,privileged,new,privileged,action,method,override,public,method,run,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods,else,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods
ConstructorResolver -> private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd);1467730834;Retrieve all candidate methods for the given class, considering_the {@link RootBeanDefinition#isNonPublicAccessAllowed()} flag._Called as the starting point for factory method determination.;private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd) {_		if (System.getSecurityManager() != null) {_			return AccessController.doPrivileged(new PrivilegedAction<Method[]>() {_				@Override_				public Method[] run() {_					return (mbd.isNonPublicAccessAllowed() ?_							ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__				}_			})__		}_		else {_			return (mbd.isNonPublicAccessAllowed() ?_					ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__		}_	};retrieve,all,candidate,methods,for,the,given,class,considering,the,link,root,bean,definition,is,non,public,access,allowed,flag,called,as,the,starting,point,for,factory,method,determination;private,method,get,candidate,methods,final,class,factory,class,final,root,bean,definition,mbd,if,system,get,security,manager,null,return,access,controller,do,privileged,new,privileged,action,method,override,public,method,run,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods,else,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods
ConstructorResolver -> private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd);1467844672;Retrieve all candidate methods for the given class, considering_the {@link RootBeanDefinition#isNonPublicAccessAllowed()} flag._Called as the starting point for factory method determination.;private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd) {_		if (System.getSecurityManager() != null) {_			return AccessController.doPrivileged(new PrivilegedAction<Method[]>() {_				@Override_				public Method[] run() {_					return (mbd.isNonPublicAccessAllowed() ?_							ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__				}_			})__		}_		else {_			return (mbd.isNonPublicAccessAllowed() ?_					ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__		}_	};retrieve,all,candidate,methods,for,the,given,class,considering,the,link,root,bean,definition,is,non,public,access,allowed,flag,called,as,the,starting,point,for,factory,method,determination;private,method,get,candidate,methods,final,class,factory,class,final,root,bean,definition,mbd,if,system,get,security,manager,null,return,access,controller,do,privileged,new,privileged,action,method,override,public,method,run,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods,else,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods
ConstructorResolver -> private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd);1469030791;Retrieve all candidate methods for the given class, considering_the {@link RootBeanDefinition#isNonPublicAccessAllowed()} flag._Called as the starting point for factory method determination.;private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd) {_		if (System.getSecurityManager() != null) {_			return AccessController.doPrivileged(new PrivilegedAction<Method[]>() {_				@Override_				public Method[] run() {_					return (mbd.isNonPublicAccessAllowed() ?_							ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__				}_			})__		}_		else {_			return (mbd.isNonPublicAccessAllowed() ?_					ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__		}_	};retrieve,all,candidate,methods,for,the,given,class,considering,the,link,root,bean,definition,is,non,public,access,allowed,flag,called,as,the,starting,point,for,factory,method,determination;private,method,get,candidate,methods,final,class,factory,class,final,root,bean,definition,mbd,if,system,get,security,manager,null,return,access,controller,do,privileged,new,privileged,action,method,override,public,method,run,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods,else,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods
ConstructorResolver -> private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd);1469367243;Retrieve all candidate methods for the given class, considering_the {@link RootBeanDefinition#isNonPublicAccessAllowed()} flag._Called as the starting point for factory method determination.;private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd) {_		if (System.getSecurityManager() != null) {_			return AccessController.doPrivileged(new PrivilegedAction<Method[]>() {_				@Override_				public Method[] run() {_					return (mbd.isNonPublicAccessAllowed() ?_							ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__				}_			})__		}_		else {_			return (mbd.isNonPublicAccessAllowed() ?_					ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__		}_	};retrieve,all,candidate,methods,for,the,given,class,considering,the,link,root,bean,definition,is,non,public,access,allowed,flag,called,as,the,starting,point,for,factory,method,determination;private,method,get,candidate,methods,final,class,factory,class,final,root,bean,definition,mbd,if,system,get,security,manager,null,return,access,controller,do,privileged,new,privileged,action,method,override,public,method,run,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods,else,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods
ConstructorResolver -> private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd);1478538021;Retrieve all candidate methods for the given class, considering_the {@link RootBeanDefinition#isNonPublicAccessAllowed()} flag._Called as the starting point for factory method determination.;private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd) {_		if (System.getSecurityManager() != null) {_			return AccessController.doPrivileged(new PrivilegedAction<Method[]>() {_				@Override_				public Method[] run() {_					return (mbd.isNonPublicAccessAllowed() ?_							ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__				}_			})__		}_		else {_			return (mbd.isNonPublicAccessAllowed() ?_					ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__		}_	};retrieve,all,candidate,methods,for,the,given,class,considering,the,link,root,bean,definition,is,non,public,access,allowed,flag,called,as,the,starting,point,for,factory,method,determination;private,method,get,candidate,methods,final,class,factory,class,final,root,bean,definition,mbd,if,system,get,security,manager,null,return,access,controller,do,privileged,new,privileged,action,method,override,public,method,run,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods,else,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods
ConstructorResolver -> private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd);1495868221;Retrieve all candidate methods for the given class, considering_the {@link RootBeanDefinition#isNonPublicAccessAllowed()} flag._Called as the starting point for factory method determination.;private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd) {_		if (System.getSecurityManager() != null) {_			return AccessController.doPrivileged(new PrivilegedAction<Method[]>() {_				@Override_				public Method[] run() {_					return (mbd.isNonPublicAccessAllowed() ?_							ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__				}_			})__		}_		else {_			return (mbd.isNonPublicAccessAllowed() ?_					ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__		}_	};retrieve,all,candidate,methods,for,the,given,class,considering,the,link,root,bean,definition,is,non,public,access,allowed,flag,called,as,the,starting,point,for,factory,method,determination;private,method,get,candidate,methods,final,class,factory,class,final,root,bean,definition,mbd,if,system,get,security,manager,null,return,access,controller,do,privileged,new,privileged,action,method,override,public,method,run,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods,else,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods
ConstructorResolver -> private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd);1496259743;Retrieve all candidate methods for the given class, considering_the {@link RootBeanDefinition#isNonPublicAccessAllowed()} flag._Called as the starting point for factory method determination.;private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd) {_		if (System.getSecurityManager() != null) {_			return AccessController.doPrivileged(new PrivilegedAction<Method[]>() {_				@Override_				public Method[] run() {_					return (mbd.isNonPublicAccessAllowed() ?_							ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__				}_			})__		}_		else {_			return (mbd.isNonPublicAccessAllowed() ?_					ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__		}_	};retrieve,all,candidate,methods,for,the,given,class,considering,the,link,root,bean,definition,is,non,public,access,allowed,flag,called,as,the,starting,point,for,factory,method,determination;private,method,get,candidate,methods,final,class,factory,class,final,root,bean,definition,mbd,if,system,get,security,manager,null,return,access,controller,do,privileged,new,privileged,action,method,override,public,method,run,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods,else,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods
ConstructorResolver -> private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd);1496837955;Retrieve all candidate methods for the given class, considering_the {@link RootBeanDefinition#isNonPublicAccessAllowed()} flag._Called as the starting point for factory method determination.;private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd) {_		if (System.getSecurityManager() != null) {_			return AccessController.doPrivileged((PrivilegedAction<Method[]>) () ->_					(mbd.isNonPublicAccessAllowed() ?_						ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods()))__		}_		else {_			return (mbd.isNonPublicAccessAllowed() ?_					ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__		}_	};retrieve,all,candidate,methods,for,the,given,class,considering,the,link,root,bean,definition,is,non,public,access,allowed,flag,called,as,the,starting,point,for,factory,method,determination;private,method,get,candidate,methods,final,class,factory,class,final,root,bean,definition,mbd,if,system,get,security,manager,null,return,access,controller,do,privileged,privileged,action,method,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods,else,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods
ConstructorResolver -> private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd);1503007895;Retrieve all candidate methods for the given class, considering_the {@link RootBeanDefinition#isNonPublicAccessAllowed()} flag._Called as the starting point for factory method determination.;private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd) {_		if (System.getSecurityManager() != null) {_			return AccessController.doPrivileged((PrivilegedAction<Method[]>) () ->_					(mbd.isNonPublicAccessAllowed() ?_						ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods()))__		}_		else {_			return (mbd.isNonPublicAccessAllowed() ?_					ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__		}_	};retrieve,all,candidate,methods,for,the,given,class,considering,the,link,root,bean,definition,is,non,public,access,allowed,flag,called,as,the,starting,point,for,factory,method,determination;private,method,get,candidate,methods,final,class,factory,class,final,root,bean,definition,mbd,if,system,get,security,manager,null,return,access,controller,do,privileged,privileged,action,method,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods,else,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods
ConstructorResolver -> private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd);1503414318;Retrieve all candidate methods for the given class, considering_the {@link RootBeanDefinition#isNonPublicAccessAllowed()} flag._Called as the starting point for factory method determination.;private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd) {_		if (System.getSecurityManager() != null) {_			return AccessController.doPrivileged((PrivilegedAction<Method[]>) () ->_					(mbd.isNonPublicAccessAllowed() ?_						ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods()))__		}_		else {_			return (mbd.isNonPublicAccessAllowed() ?_					ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__		}_	};retrieve,all,candidate,methods,for,the,given,class,considering,the,link,root,bean,definition,is,non,public,access,allowed,flag,called,as,the,starting,point,for,factory,method,determination;private,method,get,candidate,methods,final,class,factory,class,final,root,bean,definition,mbd,if,system,get,security,manager,null,return,access,controller,do,privileged,privileged,action,method,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods,else,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods
ConstructorResolver -> private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd);1506551472;Retrieve all candidate methods for the given class, considering_the {@link RootBeanDefinition#isNonPublicAccessAllowed()} flag._Called as the starting point for factory method determination.;private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd) {_		if (System.getSecurityManager() != null) {_			return AccessController.doPrivileged((PrivilegedAction<Method[]>) () ->_					(mbd.isNonPublicAccessAllowed() ?_						ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods()))__		}_		else {_			return (mbd.isNonPublicAccessAllowed() ?_					ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__		}_	};retrieve,all,candidate,methods,for,the,given,class,considering,the,link,root,bean,definition,is,non,public,access,allowed,flag,called,as,the,starting,point,for,factory,method,determination;private,method,get,candidate,methods,final,class,factory,class,final,root,bean,definition,mbd,if,system,get,security,manager,null,return,access,controller,do,privileged,privileged,action,method,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods,else,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods
ConstructorResolver -> private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd);1510606271;Retrieve all candidate methods for the given class, considering_the {@link RootBeanDefinition#isNonPublicAccessAllowed()} flag._Called as the starting point for factory method determination.;private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd) {_		if (System.getSecurityManager() != null) {_			return AccessController.doPrivileged((PrivilegedAction<Method[]>) () ->_					(mbd.isNonPublicAccessAllowed() ?_						ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods()))__		}_		else {_			return (mbd.isNonPublicAccessAllowed() ?_					ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__		}_	};retrieve,all,candidate,methods,for,the,given,class,considering,the,link,root,bean,definition,is,non,public,access,allowed,flag,called,as,the,starting,point,for,factory,method,determination;private,method,get,candidate,methods,final,class,factory,class,final,root,bean,definition,mbd,if,system,get,security,manager,null,return,access,controller,do,privileged,privileged,action,method,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods,else,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods
ConstructorResolver -> private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd);1519295386;Retrieve all candidate methods for the given class, considering_the {@link RootBeanDefinition#isNonPublicAccessAllowed()} flag._Called as the starting point for factory method determination.;private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd) {_		if (System.getSecurityManager() != null) {_			return AccessController.doPrivileged((PrivilegedAction<Method[]>) () ->_					(mbd.isNonPublicAccessAllowed() ?_						ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods()))__		}_		else {_			return (mbd.isNonPublicAccessAllowed() ?_					ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__		}_	};retrieve,all,candidate,methods,for,the,given,class,considering,the,link,root,bean,definition,is,non,public,access,allowed,flag,called,as,the,starting,point,for,factory,method,determination;private,method,get,candidate,methods,final,class,factory,class,final,root,bean,definition,mbd,if,system,get,security,manager,null,return,access,controller,do,privileged,privileged,action,method,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods,else,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods
ConstructorResolver -> private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd);1519560860;Retrieve all candidate methods for the given class, considering_the {@link RootBeanDefinition#isNonPublicAccessAllowed()} flag._Called as the starting point for factory method determination.;private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd) {_		if (System.getSecurityManager() != null) {_			return AccessController.doPrivileged((PrivilegedAction<Method[]>) () ->_					(mbd.isNonPublicAccessAllowed() ?_						ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods()))__		}_		else {_			return (mbd.isNonPublicAccessAllowed() ?_					ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__		}_	};retrieve,all,candidate,methods,for,the,given,class,considering,the,link,root,bean,definition,is,non,public,access,allowed,flag,called,as,the,starting,point,for,factory,method,determination;private,method,get,candidate,methods,final,class,factory,class,final,root,bean,definition,mbd,if,system,get,security,manager,null,return,access,controller,do,privileged,privileged,action,method,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods,else,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods
ConstructorResolver -> private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd);1527623493;Retrieve all candidate methods for the given class, considering_the {@link RootBeanDefinition#isNonPublicAccessAllowed()} flag._Called as the starting point for factory method determination.;private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd) {_		if (System.getSecurityManager() != null) {_			return AccessController.doPrivileged((PrivilegedAction<Method[]>) () ->_					(mbd.isNonPublicAccessAllowed() ?_						ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods()))__		}_		else {_			return (mbd.isNonPublicAccessAllowed() ?_					ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__		}_	};retrieve,all,candidate,methods,for,the,given,class,considering,the,link,root,bean,definition,is,non,public,access,allowed,flag,called,as,the,starting,point,for,factory,method,determination;private,method,get,candidate,methods,final,class,factory,class,final,root,bean,definition,mbd,if,system,get,security,manager,null,return,access,controller,do,privileged,privileged,action,method,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods,else,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods
ConstructorResolver -> private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd);1530174524;Retrieve all candidate methods for the given class, considering_the {@link RootBeanDefinition#isNonPublicAccessAllowed()} flag._Called as the starting point for factory method determination.;private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd) {_		if (System.getSecurityManager() != null) {_			return AccessController.doPrivileged((PrivilegedAction<Method[]>) () ->_					(mbd.isNonPublicAccessAllowed() ?_						ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods()))__		}_		else {_			return (mbd.isNonPublicAccessAllowed() ?_					ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__		}_	};retrieve,all,candidate,methods,for,the,given,class,considering,the,link,root,bean,definition,is,non,public,access,allowed,flag,called,as,the,starting,point,for,factory,method,determination;private,method,get,candidate,methods,final,class,factory,class,final,root,bean,definition,mbd,if,system,get,security,manager,null,return,access,controller,do,privileged,privileged,action,method,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods,else,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods
ConstructorResolver -> private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd);1532385723;Retrieve all candidate methods for the given class, considering_the {@link RootBeanDefinition#isNonPublicAccessAllowed()} flag._Called as the starting point for factory method determination.;private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd) {_		if (System.getSecurityManager() != null) {_			return AccessController.doPrivileged((PrivilegedAction<Method[]>) () ->_					(mbd.isNonPublicAccessAllowed() ?_						ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods()))__		}_		else {_			return (mbd.isNonPublicAccessAllowed() ?_					ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__		}_	};retrieve,all,candidate,methods,for,the,given,class,considering,the,link,root,bean,definition,is,non,public,access,allowed,flag,called,as,the,starting,point,for,factory,method,determination;private,method,get,candidate,methods,final,class,factory,class,final,root,bean,definition,mbd,if,system,get,security,manager,null,return,access,controller,do,privileged,privileged,action,method,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods,else,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods
ConstructorResolver -> private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd);1532430234;Retrieve all candidate methods for the given class, considering_the {@link RootBeanDefinition#isNonPublicAccessAllowed()} flag._Called as the starting point for factory method determination.;private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd) {_		if (System.getSecurityManager() != null) {_			return AccessController.doPrivileged((PrivilegedAction<Method[]>) () ->_					(mbd.isNonPublicAccessAllowed() ?_						ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods()))__		}_		else {_			return (mbd.isNonPublicAccessAllowed() ?_					ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__		}_	};retrieve,all,candidate,methods,for,the,given,class,considering,the,link,root,bean,definition,is,non,public,access,allowed,flag,called,as,the,starting,point,for,factory,method,determination;private,method,get,candidate,methods,final,class,factory,class,final,root,bean,definition,mbd,if,system,get,security,manager,null,return,access,controller,do,privileged,privileged,action,method,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods,else,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods
ConstructorResolver -> private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd);1532577558;Retrieve all candidate methods for the given class, considering_the {@link RootBeanDefinition#isNonPublicAccessAllowed()} flag._Called as the starting point for factory method determination.;private Method[] getCandidateMethods(final Class<?> factoryClass, final RootBeanDefinition mbd) {_		if (System.getSecurityManager() != null) {_			return AccessController.doPrivileged((PrivilegedAction<Method[]>) () ->_					(mbd.isNonPublicAccessAllowed() ?_						ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods()))__		}_		else {_			return (mbd.isNonPublicAccessAllowed() ?_					ReflectionUtils.getAllDeclaredMethods(factoryClass) : factoryClass.getMethods())__		}_	};retrieve,all,candidate,methods,for,the,given,class,considering,the,link,root,bean,definition,is,non,public,access,allowed,flag,called,as,the,starting,point,for,factory,method,determination;private,method,get,candidate,methods,final,class,factory,class,final,root,bean,definition,mbd,if,system,get,security,manager,null,return,access,controller,do,privileged,privileged,action,method,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods,else,return,mbd,is,non,public,access,allowed,reflection,utils,get,all,declared,methods,factory,class,factory,class,get,methods
ConstructorResolver -> private Object[] resolvePreparedArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve);1328020251;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve) {__		Class[] paramTypes = (methodOrCtor instanceof Method ?_				((Method) methodOrCtor).getParameterTypes() : ((Constructor) methodOrCtor).getParameterTypes())__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forMethodOrConstructor(methodOrCtor, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, methodOrCtor.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				String methodType = (methodOrCtor instanceof Constructor ? "constructor" : "factory method")__				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, argIndex, paramType,_						"Could not convert " + methodType + " argument value of type [" +_						ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,member,method,or,ctor,object,args,to,resolve,class,param,types,method,or,ctor,instanceof,method,method,method,or,ctor,get,parameter,types,constructor,method,or,ctor,get,parameter,types,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,method,or,constructor,method,or,ctor,arg,index,generic,type,resolver,resolve,parameter,type,method,param,method,or,ctor,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,string,method,type,method,or,ctor,instanceof,constructor,constructor,factory,method,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,arg,index,param,type,could,not,convert,method,type,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve);1356735495;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve) {__		Class[] paramTypes = (methodOrCtor instanceof Method ?_				((Method) methodOrCtor).getParameterTypes() : ((Constructor) methodOrCtor).getParameterTypes())__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forMethodOrConstructor(methodOrCtor, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, methodOrCtor.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				String methodType = (methodOrCtor instanceof Constructor ? "constructor" : "factory method")__				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, argIndex, paramType,_						"Could not convert " + methodType + " argument value of type [" +_						ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,member,method,or,ctor,object,args,to,resolve,class,param,types,method,or,ctor,instanceof,method,method,method,or,ctor,get,parameter,types,constructor,method,or,ctor,get,parameter,types,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,method,or,constructor,method,or,ctor,arg,index,generic,type,resolver,resolve,parameter,type,method,param,method,or,ctor,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,string,method,type,method,or,ctor,instanceof,constructor,constructor,factory,method,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,arg,index,param,type,could,not,convert,method,type,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve);1357119239;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve) {__		Class[] paramTypes = (methodOrCtor instanceof Method ?_				((Method) methodOrCtor).getParameterTypes() : ((Constructor) methodOrCtor).getParameterTypes())__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forMethodOrConstructor(methodOrCtor, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, methodOrCtor.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				String methodType = (methodOrCtor instanceof Constructor ? "constructor" : "factory method")__				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, argIndex, paramType,_						"Could not convert " + methodType + " argument value of type [" +_						ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,member,method,or,ctor,object,args,to,resolve,class,param,types,method,or,ctor,instanceof,method,method,method,or,ctor,get,parameter,types,constructor,method,or,ctor,get,parameter,types,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,method,or,constructor,method,or,ctor,arg,index,generic,type,resolver,resolve,parameter,type,method,param,method,or,ctor,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,string,method,type,method,or,ctor,instanceof,constructor,constructor,factory,method,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,arg,index,param,type,could,not,convert,method,type,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve);1362408075;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve) {__		Class[] paramTypes = (methodOrCtor instanceof Method ?_				((Method) methodOrCtor).getParameterTypes() : ((Constructor) methodOrCtor).getParameterTypes())__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forMethodOrConstructor(methodOrCtor, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, methodOrCtor.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				String methodType = (methodOrCtor instanceof Constructor ? "constructor" : "factory method")__				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, argIndex, paramType,_						"Could not convert " + methodType + " argument value of type [" +_						ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,member,method,or,ctor,object,args,to,resolve,class,param,types,method,or,ctor,instanceof,method,method,method,or,ctor,get,parameter,types,constructor,method,or,ctor,get,parameter,types,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,method,or,constructor,method,or,ctor,arg,index,generic,type,resolver,resolve,parameter,type,method,param,method,or,ctor,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,string,method,type,method,or,ctor,instanceof,constructor,constructor,factory,method,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,arg,index,param,type,could,not,convert,method,type,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve);1368482696;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve) {__		Class[] paramTypes = (methodOrCtor instanceof Method ?_				((Method) methodOrCtor).getParameterTypes() : ((Constructor) methodOrCtor).getParameterTypes())__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forMethodOrConstructor(methodOrCtor, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, methodOrCtor.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				String methodType = (methodOrCtor instanceof Constructor ? "constructor" : "factory method")__				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, argIndex, paramType,_						"Could not convert " + methodType + " argument value of type [" +_						ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,member,method,or,ctor,object,args,to,resolve,class,param,types,method,or,ctor,instanceof,method,method,method,or,ctor,get,parameter,types,constructor,method,or,ctor,get,parameter,types,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,method,or,constructor,method,or,ctor,arg,index,generic,type,resolver,resolve,parameter,type,method,param,method,or,ctor,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,string,method,type,method,or,ctor,instanceof,constructor,constructor,factory,method,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,arg,index,param,type,could,not,convert,method,type,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve);1383520795;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve) {__		Class<?>[] paramTypes = (methodOrCtor instanceof Method ?_				((Method) methodOrCtor).getParameterTypes() : ((Constructor) methodOrCtor).getParameterTypes())__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forMethodOrConstructor(methodOrCtor, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, methodOrCtor.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				String methodType = (methodOrCtor instanceof Constructor ? "constructor" : "factory method")__				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, argIndex, paramType,_						"Could not convert " + methodType + " argument value of type [" +_						ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,member,method,or,ctor,object,args,to,resolve,class,param,types,method,or,ctor,instanceof,method,method,method,or,ctor,get,parameter,types,constructor,method,or,ctor,get,parameter,types,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,method,or,constructor,method,or,ctor,arg,index,generic,type,resolver,resolve,parameter,type,method,param,method,or,ctor,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,string,method,type,method,or,ctor,instanceof,constructor,constructor,factory,method,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,arg,index,param,type,could,not,convert,method,type,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve);1385412762;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve) {__		Class<?>[] paramTypes = (methodOrCtor instanceof Method ?_				((Method) methodOrCtor).getParameterTypes() : ((Constructor<?>) methodOrCtor).getParameterTypes())__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forMethodOrConstructor(methodOrCtor, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, methodOrCtor.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				String methodType = (methodOrCtor instanceof Constructor ? "constructor" : "factory method")__				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, argIndex, paramType,_						"Could not convert " + methodType + " argument value of type [" +_						ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,member,method,or,ctor,object,args,to,resolve,class,param,types,method,or,ctor,instanceof,method,method,method,or,ctor,get,parameter,types,constructor,method,or,ctor,get,parameter,types,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,method,or,constructor,method,or,ctor,arg,index,generic,type,resolver,resolve,parameter,type,method,param,method,or,ctor,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,string,method,type,method,or,ctor,instanceof,constructor,constructor,factory,method,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,arg,index,param,type,could,not,convert,method,type,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve);1392245296;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve) {__		Class<?>[] paramTypes = (methodOrCtor instanceof Method ?_				((Method) methodOrCtor).getParameterTypes() : ((Constructor<?>) methodOrCtor).getParameterTypes())__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forMethodOrConstructor(methodOrCtor, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, methodOrCtor.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				String methodType = (methodOrCtor instanceof Constructor ? "constructor" : "factory method")__				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, argIndex, paramType,_						"Could not convert " + methodType + " argument value of type [" +_						ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,member,method,or,ctor,object,args,to,resolve,class,param,types,method,or,ctor,instanceof,method,method,method,or,ctor,get,parameter,types,constructor,method,or,ctor,get,parameter,types,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,method,or,constructor,method,or,ctor,arg,index,generic,type,resolver,resolve,parameter,type,method,param,method,or,ctor,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,string,method,type,method,or,ctor,instanceof,constructor,constructor,factory,method,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,arg,index,param,type,could,not,convert,method,type,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve);1392250115;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve) {__		Class<?>[] paramTypes = (methodOrCtor instanceof Method ?_				((Method) methodOrCtor).getParameterTypes() : ((Constructor<?>) methodOrCtor).getParameterTypes())__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forMethodOrConstructor(methodOrCtor, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, methodOrCtor.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				String methodType = (methodOrCtor instanceof Constructor ? "constructor" : "factory method")__				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, argIndex, paramType,_						"Could not convert " + methodType + " argument value of type [" +_						ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,member,method,or,ctor,object,args,to,resolve,class,param,types,method,or,ctor,instanceof,method,method,method,or,ctor,get,parameter,types,constructor,method,or,ctor,get,parameter,types,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,method,or,constructor,method,or,ctor,arg,index,generic,type,resolver,resolve,parameter,type,method,param,method,or,ctor,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,string,method,type,method,or,ctor,instanceof,constructor,constructor,factory,method,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,arg,index,param,type,could,not,convert,method,type,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve);1394032589;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve) {__		Class<?>[] paramTypes = (methodOrCtor instanceof Method ?_				((Method) methodOrCtor).getParameterTypes() : ((Constructor<?>) methodOrCtor).getParameterTypes())__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forMethodOrConstructor(methodOrCtor, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, methodOrCtor.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				String methodType = (methodOrCtor instanceof Constructor ? "constructor" : "factory method")__				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, argIndex, paramType,_						"Could not convert " + methodType + " argument value of type [" +_						ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,member,method,or,ctor,object,args,to,resolve,class,param,types,method,or,ctor,instanceof,method,method,method,or,ctor,get,parameter,types,constructor,method,or,ctor,get,parameter,types,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,method,or,constructor,method,or,ctor,arg,index,generic,type,resolver,resolve,parameter,type,method,param,method,or,ctor,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,string,method,type,method,or,ctor,instanceof,constructor,constructor,factory,method,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,arg,index,param,type,could,not,convert,method,type,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve);1404505819;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve) {__		Class<?>[] paramTypes = (methodOrCtor instanceof Method ?_				((Method) methodOrCtor).getParameterTypes() : ((Constructor<?>) methodOrCtor).getParameterTypes())__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forMethodOrConstructor(methodOrCtor, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, methodOrCtor.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				String methodType = (methodOrCtor instanceof Constructor ? "constructor" : "factory method")__				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, argIndex, paramType,_						"Could not convert " + methodType + " argument value of type [" +_						ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,member,method,or,ctor,object,args,to,resolve,class,param,types,method,or,ctor,instanceof,method,method,method,or,ctor,get,parameter,types,constructor,method,or,ctor,get,parameter,types,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,method,or,constructor,method,or,ctor,arg,index,generic,type,resolver,resolve,parameter,type,method,param,method,or,ctor,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,string,method,type,method,or,ctor,instanceof,constructor,constructor,factory,method,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,arg,index,param,type,could,not,convert,method,type,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve);1409688815;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve) {__		Class<?>[] paramTypes = (methodOrCtor instanceof Method ?_				((Method) methodOrCtor).getParameterTypes() : ((Constructor<?>) methodOrCtor).getParameterTypes())__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forMethodOrConstructor(methodOrCtor, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, methodOrCtor.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				String methodType = (methodOrCtor instanceof Constructor ? "constructor" : "factory method")__				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, argIndex, paramType,_						"Could not convert " + methodType + " argument value of type [" +_						ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,member,method,or,ctor,object,args,to,resolve,class,param,types,method,or,ctor,instanceof,method,method,method,or,ctor,get,parameter,types,constructor,method,or,ctor,get,parameter,types,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,method,or,constructor,method,or,ctor,arg,index,generic,type,resolver,resolve,parameter,type,method,param,method,or,ctor,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,string,method,type,method,or,ctor,instanceof,constructor,constructor,factory,method,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,arg,index,param,type,could,not,convert,method,type,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve);1413920443;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve) {__		Class<?>[] paramTypes = (methodOrCtor instanceof Method ?_				((Method) methodOrCtor).getParameterTypes() : ((Constructor<?>) methodOrCtor).getParameterTypes())__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forMethodOrConstructor(methodOrCtor, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, methodOrCtor.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				String methodType = (methodOrCtor instanceof Constructor ? "constructor" : "factory method")__				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, argIndex, paramType,_						"Could not convert " + methodType + " argument value of type [" +_						ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,member,method,or,ctor,object,args,to,resolve,class,param,types,method,or,ctor,instanceof,method,method,method,or,ctor,get,parameter,types,constructor,method,or,ctor,get,parameter,types,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,method,or,constructor,method,or,ctor,arg,index,generic,type,resolver,resolve,parameter,type,method,param,method,or,ctor,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,string,method,type,method,or,ctor,instanceof,constructor,constructor,factory,method,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,arg,index,param,type,could,not,convert,method,type,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve);1419352511;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve) {__		Class<?>[] paramTypes = (methodOrCtor instanceof Method ?_				((Method) methodOrCtor).getParameterTypes() : ((Constructor<?>) methodOrCtor).getParameterTypes())__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forMethodOrConstructor(methodOrCtor, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, methodOrCtor.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				String methodType = (methodOrCtor instanceof Constructor ? "constructor" : "factory method")__				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, argIndex, paramType,_						"Could not convert " + methodType + " argument value of type [" +_						ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,member,method,or,ctor,object,args,to,resolve,class,param,types,method,or,ctor,instanceof,method,method,method,or,ctor,get,parameter,types,constructor,method,or,ctor,get,parameter,types,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,method,or,constructor,method,or,ctor,arg,index,generic,type,resolver,resolve,parameter,type,method,param,method,or,ctor,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,string,method,type,method,or,ctor,instanceof,constructor,constructor,factory,method,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,arg,index,param,type,could,not,convert,method,type,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve);1432125256;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve) {__		Class<?>[] paramTypes = (methodOrCtor instanceof Method ?_				((Method) methodOrCtor).getParameterTypes() : ((Constructor<?>) methodOrCtor).getParameterTypes())__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forMethodOrConstructor(methodOrCtor, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, methodOrCtor.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				String methodType = (methodOrCtor instanceof Constructor ? "constructor" : "factory method")__				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, argIndex, paramType,_						"Could not convert " + methodType + " argument value of type [" +_						ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,member,method,or,ctor,object,args,to,resolve,class,param,types,method,or,ctor,instanceof,method,method,method,or,ctor,get,parameter,types,constructor,method,or,ctor,get,parameter,types,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,method,or,constructor,method,or,ctor,arg,index,generic,type,resolver,resolve,parameter,type,method,param,method,or,ctor,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,string,method,type,method,or,ctor,instanceof,constructor,constructor,factory,method,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,arg,index,param,type,could,not,convert,method,type,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve);1450707100;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve) {__		Class<?>[] paramTypes = (methodOrCtor instanceof Method ?_				((Method) methodOrCtor).getParameterTypes() : ((Constructor<?>) methodOrCtor).getParameterTypes())__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forMethodOrConstructor(methodOrCtor, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, methodOrCtor.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				String methodType = (methodOrCtor instanceof Constructor ? "constructor" : "factory method")__				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, argIndex, paramType,_						"Could not convert " + methodType + " argument value of type [" +_						ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,member,method,or,ctor,object,args,to,resolve,class,param,types,method,or,ctor,instanceof,method,method,method,or,ctor,get,parameter,types,constructor,method,or,ctor,get,parameter,types,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,method,or,constructor,method,or,ctor,arg,index,generic,type,resolver,resolve,parameter,type,method,param,method,or,ctor,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,string,method,type,method,or,ctor,instanceof,constructor,constructor,factory,method,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,arg,index,param,type,could,not,convert,method,type,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve);1456432609;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve) {__		Class<?>[] paramTypes = (methodOrCtor instanceof Method ?_				((Method) methodOrCtor).getParameterTypes() : ((Constructor<?>) methodOrCtor).getParameterTypes())__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forMethodOrConstructor(methodOrCtor, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, methodOrCtor.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_						"Could not convert argument value of type [" + ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,member,method,or,ctor,object,args,to,resolve,class,param,types,method,or,ctor,instanceof,method,method,method,or,ctor,get,parameter,types,constructor,method,or,ctor,get,parameter,types,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,method,or,constructor,method,or,ctor,arg,index,generic,type,resolver,resolve,parameter,type,method,param,method,or,ctor,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve);1456486263;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve) {__		Class<?>[] paramTypes = (methodOrCtor instanceof Method ?_				((Method) methodOrCtor).getParameterTypes() : ((Constructor<?>) methodOrCtor).getParameterTypes())__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forMethodOrConstructor(methodOrCtor, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, methodOrCtor.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_						"Could not convert argument value of type [" + ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,member,method,or,ctor,object,args,to,resolve,class,param,types,method,or,ctor,instanceof,method,method,method,or,ctor,get,parameter,types,constructor,method,or,ctor,get,parameter,types,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,method,or,constructor,method,or,ctor,arg,index,generic,type,resolver,resolve,parameter,type,method,param,method,or,ctor,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve);1457697160;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve) {__		Class<?>[] paramTypes = (methodOrCtor instanceof Method ?_				((Method) methodOrCtor).getParameterTypes() : ((Constructor<?>) methodOrCtor).getParameterTypes())__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forMethodOrConstructor(methodOrCtor, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, methodOrCtor.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_						"Could not convert argument value of type [" + ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,member,method,or,ctor,object,args,to,resolve,class,param,types,method,or,ctor,instanceof,method,method,method,or,ctor,get,parameter,types,constructor,method,or,ctor,get,parameter,types,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,method,or,constructor,method,or,ctor,arg,index,generic,type,resolver,resolve,parameter,type,method,param,method,or,ctor,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve);1458311433;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve) {__		Class<?>[] paramTypes = (methodOrCtor instanceof Method ?_				((Method) methodOrCtor).getParameterTypes() : ((Constructor<?>) methodOrCtor).getParameterTypes())__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forMethodOrConstructor(methodOrCtor, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, methodOrCtor.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_						"Could not convert argument value of type [" + ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,member,method,or,ctor,object,args,to,resolve,class,param,types,method,or,ctor,instanceof,method,method,method,or,ctor,get,parameter,types,constructor,method,or,ctor,get,parameter,types,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,method,or,constructor,method,or,ctor,arg,index,generic,type,resolver,resolve,parameter,type,method,param,method,or,ctor,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve);1458323493;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve) {__		Class<?>[] paramTypes = (methodOrCtor instanceof Method ?_				((Method) methodOrCtor).getParameterTypes() : ((Constructor<?>) methodOrCtor).getParameterTypes())__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forMethodOrConstructor(methodOrCtor, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, methodOrCtor.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_						"Could not convert argument value of type [" + ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,member,method,or,ctor,object,args,to,resolve,class,param,types,method,or,ctor,instanceof,method,method,method,or,ctor,get,parameter,types,constructor,method,or,ctor,get,parameter,types,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,method,or,constructor,method,or,ctor,arg,index,generic,type,resolver,resolve,parameter,type,method,param,method,or,ctor,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve);1460031510;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve) {__		Class<?>[] paramTypes = (methodOrCtor instanceof Method ?_				((Method) methodOrCtor).getParameterTypes() : ((Constructor<?>) methodOrCtor).getParameterTypes())__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forMethodOrConstructor(methodOrCtor, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, methodOrCtor.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_						"Could not convert argument value of type [" + ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,member,method,or,ctor,object,args,to,resolve,class,param,types,method,or,ctor,instanceof,method,method,method,or,ctor,get,parameter,types,constructor,method,or,ctor,get,parameter,types,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,method,or,constructor,method,or,ctor,arg,index,generic,type,resolver,resolve,parameter,type,method,param,method,or,ctor,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private Object[] resolvePreparedArguments( 			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve);1467730834;Resolve the prepared arguments stored in the given bean definition.;private Object[] resolvePreparedArguments(_			String beanName, RootBeanDefinition mbd, BeanWrapper bw, Member methodOrCtor, Object[] argsToResolve) {__		Class<?>[] paramTypes = (methodOrCtor instanceof Method ?_				((Method) methodOrCtor).getParameterTypes() : ((Constructor<?>) methodOrCtor).getParameterTypes())__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)__		BeanDefinitionValueResolver valueResolver =_				new BeanDefinitionValueResolver(this.beanFactory, beanName, mbd, converter)__		Object[] resolvedArgs = new Object[argsToResolve.length]__		for (int argIndex = 0_ argIndex < argsToResolve.length_ argIndex++) {_			Object argValue = argsToResolve[argIndex]__			MethodParameter methodParam = MethodParameter.forMethodOrConstructor(methodOrCtor, argIndex)__			GenericTypeResolver.resolveParameterType(methodParam, methodOrCtor.getDeclaringClass())__			if (argValue instanceof AutowiredArgumentMarker) {_				argValue = resolveAutowiredArgument(methodParam, beanName, null, converter)__			}_			else if (argValue instanceof BeanMetadataElement) {_				argValue = valueResolver.resolveValueIfNecessary("constructor argument", argValue)__			}_			else if (argValue instanceof String) {_				argValue = this.beanFactory.evaluateBeanDefinitionString((String) argValue, mbd)__			}_			Class<?> paramType = paramTypes[argIndex]__			try {_				resolvedArgs[argIndex] = converter.convertIfNecessary(argValue, paramType, methodParam)__			}_			catch (TypeMismatchException ex) {_				throw new UnsatisfiedDependencyException(_						mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_						"Could not convert argument value of type [" + ObjectUtils.nullSafeClassName(argValue) +_						"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__			}_		}_		return resolvedArgs__	};resolve,the,prepared,arguments,stored,in,the,given,bean,definition;private,object,resolve,prepared,arguments,string,bean,name,root,bean,definition,mbd,bean,wrapper,bw,member,method,or,ctor,object,args,to,resolve,class,param,types,method,or,ctor,instanceof,method,method,method,or,ctor,get,parameter,types,constructor,method,or,ctor,get,parameter,types,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,bean,definition,value,resolver,value,resolver,new,bean,definition,value,resolver,this,bean,factory,bean,name,mbd,converter,object,resolved,args,new,object,args,to,resolve,length,for,int,arg,index,0,arg,index,args,to,resolve,length,arg,index,object,arg,value,args,to,resolve,arg,index,method,parameter,method,param,method,parameter,for,method,or,constructor,method,or,ctor,arg,index,generic,type,resolver,resolve,parameter,type,method,param,method,or,ctor,get,declaring,class,if,arg,value,instanceof,autowired,argument,marker,arg,value,resolve,autowired,argument,method,param,bean,name,null,converter,else,if,arg,value,instanceof,bean,metadata,element,arg,value,value,resolver,resolve,value,if,necessary,constructor,argument,arg,value,else,if,arg,value,instanceof,string,arg,value,this,bean,factory,evaluate,bean,definition,string,string,arg,value,mbd,class,param,type,param,types,arg,index,try,resolved,args,arg,index,converter,convert,if,necessary,arg,value,param,type,method,param,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,arg,value,to,required,type,param,type,get,name,ex,get,message,return,resolved,args
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Object methodOrCtor, 			boolean autowiring) throws UnsatisfiedDependencyException;1383520795;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Object methodOrCtor,_			boolean autowiring) throws UnsatisfiedDependencyException {__		String methodType = (methodOrCtor instanceof Constructor ? "constructor" : "factory method")__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders =_				new HashSet<ConstructorArgumentValues.ValueHolder>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<String>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : null)__			_			ConstructorArgumentValues.ValueHolder valueHolder =_					resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__			_			_			_			if (valueHolder == null && !autowiring) {_				valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					ConstructorArgumentValues.ValueHolder sourceHolder =_							(ConstructorArgumentValues.ValueHolder) valueHolder.getSource()__					Object sourceValue = sourceHolder.getValue()__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType,_								MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex))__						_						_							args.resolveNecessary = true__							args.preparedArguments[paramIndex] = sourceValue__						_					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, paramIndex, paramType,_								"Could not convert " + methodType + " argument value of type [" +_								ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_								"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, paramIndex, paramType,_							"Ambiguous " + methodType + " argument types - " +_							"did you specify the correct bean references as " + methodType + " arguments?")__				}_				try {_					MethodParameter param = MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex)__					Object autowiredArgument = resolveAutowiredArgument(param, beanName, autowiredBeanNames, converter)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, paramIndex, paramType, ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (this.beanFactory.logger.isDebugEnabled()) {_				this.beanFactory.logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + methodType + " to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,string,param,names,object,method,or,ctor,boolean,autowiring,throws,unsatisfied,dependency,exception,string,method,type,method,or,ctor,instanceof,constructor,constructor,factory,method,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,constructor,argument,values,value,holder,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,string,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,null,constructor,argument,values,value,holder,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,constructor,argument,values,value,holder,source,holder,constructor,argument,values,value,holder,value,holder,get,source,object,source,value,source,holder,get,value,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,parameter,for,method,or,constructor,method,or,ctor,param,index,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,could,not,convert,method,type,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,ambiguous,method,type,argument,types,did,you,specify,the,correct,bean,references,as,method,type,arguments,try,method,parameter,param,method,parameter,for,method,or,constructor,method,or,ctor,param,index,object,autowired,argument,resolve,autowired,argument,param,bean,name,autowired,bean,names,converter,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,this,bean,factory,logger,is,debug,enabled,this,bean,factory,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,method,type,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Object methodOrCtor, 			boolean autowiring) throws UnsatisfiedDependencyException;1385412762;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Object methodOrCtor,_			boolean autowiring) throws UnsatisfiedDependencyException {__		String methodType = (methodOrCtor instanceof Constructor ? "constructor" : "factory method")__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders =_				new HashSet<ConstructorArgumentValues.ValueHolder>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<String>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : null)__			_			ConstructorArgumentValues.ValueHolder valueHolder =_					resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__			_			_			_			if (valueHolder == null && !autowiring) {_				valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					ConstructorArgumentValues.ValueHolder sourceHolder =_							(ConstructorArgumentValues.ValueHolder) valueHolder.getSource()__					Object sourceValue = sourceHolder.getValue()__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType,_								MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex))__						_						_							args.resolveNecessary = true__							args.preparedArguments[paramIndex] = sourceValue__						_					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, paramIndex, paramType,_								"Could not convert " + methodType + " argument value of type [" +_								ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_								"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, paramIndex, paramType,_							"Ambiguous " + methodType + " argument types - " +_							"did you specify the correct bean references as " + methodType + " arguments?")__				}_				try {_					MethodParameter param = MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex)__					Object autowiredArgument = resolveAutowiredArgument(param, beanName, autowiredBeanNames, converter)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, paramIndex, paramType, ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (this.beanFactory.logger.isDebugEnabled()) {_				this.beanFactory.logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + methodType + " to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,string,param,names,object,method,or,ctor,boolean,autowiring,throws,unsatisfied,dependency,exception,string,method,type,method,or,ctor,instanceof,constructor,constructor,factory,method,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,constructor,argument,values,value,holder,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,string,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,null,constructor,argument,values,value,holder,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,constructor,argument,values,value,holder,source,holder,constructor,argument,values,value,holder,value,holder,get,source,object,source,value,source,holder,get,value,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,parameter,for,method,or,constructor,method,or,ctor,param,index,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,could,not,convert,method,type,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,ambiguous,method,type,argument,types,did,you,specify,the,correct,bean,references,as,method,type,arguments,try,method,parameter,param,method,parameter,for,method,or,constructor,method,or,ctor,param,index,object,autowired,argument,resolve,autowired,argument,param,bean,name,autowired,bean,names,converter,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,this,bean,factory,logger,is,debug,enabled,this,bean,factory,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,method,type,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Object methodOrCtor, 			boolean autowiring) throws UnsatisfiedDependencyException;1392245296;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Object methodOrCtor,_			boolean autowiring) throws UnsatisfiedDependencyException {__		String methodType = (methodOrCtor instanceof Constructor ? "constructor" : "factory method")__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders =_				new HashSet<ConstructorArgumentValues.ValueHolder>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<String>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : null)__			_			ConstructorArgumentValues.ValueHolder valueHolder =_					resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__			_			_			_			if (valueHolder == null && !autowiring) {_				valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					ConstructorArgumentValues.ValueHolder sourceHolder =_							(ConstructorArgumentValues.ValueHolder) valueHolder.getSource()__					Object sourceValue = sourceHolder.getValue()__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType,_								MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex))__						_						_							args.resolveNecessary = true__							args.preparedArguments[paramIndex] = sourceValue__						_					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, paramIndex, paramType,_								"Could not convert " + methodType + " argument value of type [" +_								ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_								"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, paramIndex, paramType,_							"Ambiguous " + methodType + " argument types - " +_							"did you specify the correct bean references as " + methodType + " arguments?")__				}_				try {_					MethodParameter param = MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex)__					Object autowiredArgument = resolveAutowiredArgument(param, beanName, autowiredBeanNames, converter)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, paramIndex, paramType, ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (this.beanFactory.logger.isDebugEnabled()) {_				this.beanFactory.logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + methodType + " to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,string,param,names,object,method,or,ctor,boolean,autowiring,throws,unsatisfied,dependency,exception,string,method,type,method,or,ctor,instanceof,constructor,constructor,factory,method,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,constructor,argument,values,value,holder,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,string,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,null,constructor,argument,values,value,holder,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,constructor,argument,values,value,holder,source,holder,constructor,argument,values,value,holder,value,holder,get,source,object,source,value,source,holder,get,value,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,parameter,for,method,or,constructor,method,or,ctor,param,index,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,could,not,convert,method,type,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,ambiguous,method,type,argument,types,did,you,specify,the,correct,bean,references,as,method,type,arguments,try,method,parameter,param,method,parameter,for,method,or,constructor,method,or,ctor,param,index,object,autowired,argument,resolve,autowired,argument,param,bean,name,autowired,bean,names,converter,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,this,bean,factory,logger,is,debug,enabled,this,bean,factory,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,method,type,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Object methodOrCtor, 			boolean autowiring) throws UnsatisfiedDependencyException;1392250115;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Object methodOrCtor,_			boolean autowiring) throws UnsatisfiedDependencyException {__		String methodType = (methodOrCtor instanceof Constructor ? "constructor" : "factory method")__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders =_				new HashSet<ConstructorArgumentValues.ValueHolder>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<String>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : null)__			_			ConstructorArgumentValues.ValueHolder valueHolder =_					resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__			_			_			_			if (valueHolder == null && !autowiring) {_				valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					ConstructorArgumentValues.ValueHolder sourceHolder =_							(ConstructorArgumentValues.ValueHolder) valueHolder.getSource()__					Object sourceValue = sourceHolder.getValue()__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType,_								MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex))__						_						_							args.resolveNecessary = true__							args.preparedArguments[paramIndex] = sourceValue__						_					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, paramIndex, paramType,_								"Could not convert " + methodType + " argument value of type [" +_								ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_								"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, paramIndex, paramType,_							"Ambiguous " + methodType + " argument types - " +_							"did you specify the correct bean references as " + methodType + " arguments?")__				}_				try {_					MethodParameter param = MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex)__					Object autowiredArgument = resolveAutowiredArgument(param, beanName, autowiredBeanNames, converter)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, paramIndex, paramType, ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (this.beanFactory.logger.isDebugEnabled()) {_				this.beanFactory.logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + methodType + " to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,string,param,names,object,method,or,ctor,boolean,autowiring,throws,unsatisfied,dependency,exception,string,method,type,method,or,ctor,instanceof,constructor,constructor,factory,method,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,constructor,argument,values,value,holder,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,string,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,null,constructor,argument,values,value,holder,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,constructor,argument,values,value,holder,source,holder,constructor,argument,values,value,holder,value,holder,get,source,object,source,value,source,holder,get,value,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,parameter,for,method,or,constructor,method,or,ctor,param,index,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,could,not,convert,method,type,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,ambiguous,method,type,argument,types,did,you,specify,the,correct,bean,references,as,method,type,arguments,try,method,parameter,param,method,parameter,for,method,or,constructor,method,or,ctor,param,index,object,autowired,argument,resolve,autowired,argument,param,bean,name,autowired,bean,names,converter,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,this,bean,factory,logger,is,debug,enabled,this,bean,factory,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,method,type,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Object methodOrCtor, 			boolean autowiring) throws UnsatisfiedDependencyException;1394032589;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Object methodOrCtor,_			boolean autowiring) throws UnsatisfiedDependencyException {__		String methodType = (methodOrCtor instanceof Constructor ? "constructor" : "factory method")__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders =_				new HashSet<ConstructorArgumentValues.ValueHolder>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<String>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : null)__			_			ConstructorArgumentValues.ValueHolder valueHolder =_					resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__			_			_			_			if (valueHolder == null && !autowiring) {_				valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					ConstructorArgumentValues.ValueHolder sourceHolder =_							(ConstructorArgumentValues.ValueHolder) valueHolder.getSource()__					Object sourceValue = sourceHolder.getValue()__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType,_								MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex))__						_						_							args.resolveNecessary = true__							args.preparedArguments[paramIndex] = sourceValue__						_					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, paramIndex, paramType,_								"Could not convert " + methodType + " argument value of type [" +_								ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_								"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, paramIndex, paramType,_							"Ambiguous " + methodType + " argument types - " +_							"did you specify the correct bean references as " + methodType + " arguments?")__				}_				try {_					MethodParameter param = MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex)__					Object autowiredArgument = resolveAutowiredArgument(param, beanName, autowiredBeanNames, converter)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, paramIndex, paramType, ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (this.beanFactory.logger.isDebugEnabled()) {_				this.beanFactory.logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + methodType + " to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,string,param,names,object,method,or,ctor,boolean,autowiring,throws,unsatisfied,dependency,exception,string,method,type,method,or,ctor,instanceof,constructor,constructor,factory,method,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,constructor,argument,values,value,holder,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,string,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,null,constructor,argument,values,value,holder,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,constructor,argument,values,value,holder,source,holder,constructor,argument,values,value,holder,value,holder,get,source,object,source,value,source,holder,get,value,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,parameter,for,method,or,constructor,method,or,ctor,param,index,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,could,not,convert,method,type,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,ambiguous,method,type,argument,types,did,you,specify,the,correct,bean,references,as,method,type,arguments,try,method,parameter,param,method,parameter,for,method,or,constructor,method,or,ctor,param,index,object,autowired,argument,resolve,autowired,argument,param,bean,name,autowired,bean,names,converter,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,this,bean,factory,logger,is,debug,enabled,this,bean,factory,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,method,type,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Object methodOrCtor, 			boolean autowiring) throws UnsatisfiedDependencyException;1404505819;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Object methodOrCtor,_			boolean autowiring) throws UnsatisfiedDependencyException {__		String methodType = (methodOrCtor instanceof Constructor ? "constructor" : "factory method")__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders =_				new HashSet<ConstructorArgumentValues.ValueHolder>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<String>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : null)__			_			ConstructorArgumentValues.ValueHolder valueHolder =_					resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__			_			_			_			if (valueHolder == null && !autowiring) {_				valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					ConstructorArgumentValues.ValueHolder sourceHolder =_							(ConstructorArgumentValues.ValueHolder) valueHolder.getSource()__					Object sourceValue = sourceHolder.getValue()__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType,_								MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex))__						_						_							args.resolveNecessary = true__							args.preparedArguments[paramIndex] = sourceValue__						_					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, paramIndex, paramType,_								"Could not convert " + methodType + " argument value of type [" +_								ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_								"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, paramIndex, paramType,_							"Ambiguous " + methodType + " argument types - " +_							"did you specify the correct bean references as " + methodType + " arguments?")__				}_				try {_					MethodParameter param = MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex)__					Object autowiredArgument = resolveAutowiredArgument(param, beanName, autowiredBeanNames, converter)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, paramIndex, paramType, ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (this.beanFactory.logger.isDebugEnabled()) {_				this.beanFactory.logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + methodType + " to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,string,param,names,object,method,or,ctor,boolean,autowiring,throws,unsatisfied,dependency,exception,string,method,type,method,or,ctor,instanceof,constructor,constructor,factory,method,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,constructor,argument,values,value,holder,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,string,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,null,constructor,argument,values,value,holder,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,constructor,argument,values,value,holder,source,holder,constructor,argument,values,value,holder,value,holder,get,source,object,source,value,source,holder,get,value,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,parameter,for,method,or,constructor,method,or,ctor,param,index,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,could,not,convert,method,type,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,ambiguous,method,type,argument,types,did,you,specify,the,correct,bean,references,as,method,type,arguments,try,method,parameter,param,method,parameter,for,method,or,constructor,method,or,ctor,param,index,object,autowired,argument,resolve,autowired,argument,param,bean,name,autowired,bean,names,converter,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,this,bean,factory,logger,is,debug,enabled,this,bean,factory,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,method,type,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Object methodOrCtor, 			boolean autowiring) throws UnsatisfiedDependencyException;1409688815;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Object methodOrCtor,_			boolean autowiring) throws UnsatisfiedDependencyException {__		String methodType = (methodOrCtor instanceof Constructor ? "constructor" : "factory method")__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders =_				new HashSet<ConstructorArgumentValues.ValueHolder>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<String>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : null)__			_			ConstructorArgumentValues.ValueHolder valueHolder =_					resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__			_			_			_			if (valueHolder == null && !autowiring) {_				valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					ConstructorArgumentValues.ValueHolder sourceHolder =_							(ConstructorArgumentValues.ValueHolder) valueHolder.getSource()__					Object sourceValue = sourceHolder.getValue()__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType,_								MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex))__						_						_							args.resolveNecessary = true__							args.preparedArguments[paramIndex] = sourceValue__						_					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, paramIndex, paramType,_								"Could not convert " + methodType + " argument value of type [" +_								ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_								"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, paramIndex, paramType,_							"Ambiguous " + methodType + " argument types - " +_							"did you specify the correct bean references as " + methodType + " arguments?")__				}_				try {_					MethodParameter param = MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex)__					Object autowiredArgument = resolveAutowiredArgument(param, beanName, autowiredBeanNames, converter)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, paramIndex, paramType, ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (this.beanFactory.logger.isDebugEnabled()) {_				this.beanFactory.logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + methodType + " to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,string,param,names,object,method,or,ctor,boolean,autowiring,throws,unsatisfied,dependency,exception,string,method,type,method,or,ctor,instanceof,constructor,constructor,factory,method,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,constructor,argument,values,value,holder,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,string,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,null,constructor,argument,values,value,holder,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,constructor,argument,values,value,holder,source,holder,constructor,argument,values,value,holder,value,holder,get,source,object,source,value,source,holder,get,value,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,parameter,for,method,or,constructor,method,or,ctor,param,index,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,could,not,convert,method,type,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,ambiguous,method,type,argument,types,did,you,specify,the,correct,bean,references,as,method,type,arguments,try,method,parameter,param,method,parameter,for,method,or,constructor,method,or,ctor,param,index,object,autowired,argument,resolve,autowired,argument,param,bean,name,autowired,bean,names,converter,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,this,bean,factory,logger,is,debug,enabled,this,bean,factory,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,method,type,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Object methodOrCtor, 			boolean autowiring) throws UnsatisfiedDependencyException;1413920443;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Object methodOrCtor,_			boolean autowiring) throws UnsatisfiedDependencyException {__		String methodType = (methodOrCtor instanceof Constructor ? "constructor" : "factory method")__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders =_				new HashSet<ConstructorArgumentValues.ValueHolder>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<String>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : null)__			_			ConstructorArgumentValues.ValueHolder valueHolder =_					resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__			_			_			_			if (valueHolder == null && !autowiring) {_				valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					ConstructorArgumentValues.ValueHolder sourceHolder =_							(ConstructorArgumentValues.ValueHolder) valueHolder.getSource()__					Object sourceValue = sourceHolder.getValue()__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType,_								MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex))__						_						_							args.resolveNecessary = true__							args.preparedArguments[paramIndex] = sourceValue__						_					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, paramIndex, paramType,_								"Could not convert " + methodType + " argument value of type [" +_								ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_								"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, paramIndex, paramType,_							"Ambiguous " + methodType + " argument types - " +_							"did you specify the correct bean references as " + methodType + " arguments?")__				}_				try {_					MethodParameter param = MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex)__					Object autowiredArgument = resolveAutowiredArgument(param, beanName, autowiredBeanNames, converter)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, paramIndex, paramType, ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (this.beanFactory.logger.isDebugEnabled()) {_				this.beanFactory.logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + methodType + " to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,string,param,names,object,method,or,ctor,boolean,autowiring,throws,unsatisfied,dependency,exception,string,method,type,method,or,ctor,instanceof,constructor,constructor,factory,method,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,constructor,argument,values,value,holder,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,string,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,null,constructor,argument,values,value,holder,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,constructor,argument,values,value,holder,source,holder,constructor,argument,values,value,holder,value,holder,get,source,object,source,value,source,holder,get,value,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,parameter,for,method,or,constructor,method,or,ctor,param,index,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,could,not,convert,method,type,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,ambiguous,method,type,argument,types,did,you,specify,the,correct,bean,references,as,method,type,arguments,try,method,parameter,param,method,parameter,for,method,or,constructor,method,or,ctor,param,index,object,autowired,argument,resolve,autowired,argument,param,bean,name,autowired,bean,names,converter,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,this,bean,factory,logger,is,debug,enabled,this,bean,factory,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,method,type,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Object methodOrCtor, 			boolean autowiring) throws UnsatisfiedDependencyException;1419352511;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Object methodOrCtor,_			boolean autowiring) throws UnsatisfiedDependencyException {__		String methodType = (methodOrCtor instanceof Constructor ? "constructor" : "factory method")__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders =_				new HashSet<ConstructorArgumentValues.ValueHolder>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<String>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : null)__			_			ConstructorArgumentValues.ValueHolder valueHolder =_					resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__			_			_			_			if (valueHolder == null && !autowiring) {_				valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					ConstructorArgumentValues.ValueHolder sourceHolder =_							(ConstructorArgumentValues.ValueHolder) valueHolder.getSource()__					Object sourceValue = sourceHolder.getValue()__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType,_								MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex))__						_						_							args.resolveNecessary = true__							args.preparedArguments[paramIndex] = sourceValue__						_					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, paramIndex, paramType,_								"Could not convert " + methodType + " argument value of type [" +_								ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_								"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, paramIndex, paramType,_							"Ambiguous " + methodType + " argument types - " +_							"did you specify the correct bean references as " + methodType + " arguments?")__				}_				try {_					MethodParameter param = MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex)__					Object autowiredArgument = resolveAutowiredArgument(param, beanName, autowiredBeanNames, converter)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, paramIndex, paramType, ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (this.beanFactory.logger.isDebugEnabled()) {_				this.beanFactory.logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + methodType + " to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,string,param,names,object,method,or,ctor,boolean,autowiring,throws,unsatisfied,dependency,exception,string,method,type,method,or,ctor,instanceof,constructor,constructor,factory,method,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,constructor,argument,values,value,holder,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,string,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,null,constructor,argument,values,value,holder,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,constructor,argument,values,value,holder,source,holder,constructor,argument,values,value,holder,value,holder,get,source,object,source,value,source,holder,get,value,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,parameter,for,method,or,constructor,method,or,ctor,param,index,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,could,not,convert,method,type,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,ambiguous,method,type,argument,types,did,you,specify,the,correct,bean,references,as,method,type,arguments,try,method,parameter,param,method,parameter,for,method,or,constructor,method,or,ctor,param,index,object,autowired,argument,resolve,autowired,argument,param,bean,name,autowired,bean,names,converter,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,this,bean,factory,logger,is,debug,enabled,this,bean,factory,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,method,type,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Object methodOrCtor, 			boolean autowiring) throws UnsatisfiedDependencyException;1432125256;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Object methodOrCtor,_			boolean autowiring) throws UnsatisfiedDependencyException {__		String methodType = (methodOrCtor instanceof Constructor ? "constructor" : "factory method")__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders =_				new HashSet<ConstructorArgumentValues.ValueHolder>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<String>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : null)__			_			ConstructorArgumentValues.ValueHolder valueHolder =_					resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__			_			_			_			if (valueHolder == null && !autowiring) {_				valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					ConstructorArgumentValues.ValueHolder sourceHolder =_							(ConstructorArgumentValues.ValueHolder) valueHolder.getSource()__					Object sourceValue = sourceHolder.getValue()__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType,_								MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex))__						_						_							args.resolveNecessary = true__							args.preparedArguments[paramIndex] = sourceValue__						_					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, paramIndex, paramType,_								"Could not convert " + methodType + " argument value of type [" +_								ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_								"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, paramIndex, paramType,_							"Ambiguous " + methodType + " argument types - " +_							"did you specify the correct bean references as " + methodType + " arguments?")__				}_				try {_					MethodParameter param = MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex)__					Object autowiredArgument = resolveAutowiredArgument(param, beanName, autowiredBeanNames, converter)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, paramIndex, paramType, ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (this.beanFactory.logger.isDebugEnabled()) {_				this.beanFactory.logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + methodType + " to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,string,param,names,object,method,or,ctor,boolean,autowiring,throws,unsatisfied,dependency,exception,string,method,type,method,or,ctor,instanceof,constructor,constructor,factory,method,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,constructor,argument,values,value,holder,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,string,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,null,constructor,argument,values,value,holder,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,constructor,argument,values,value,holder,source,holder,constructor,argument,values,value,holder,value,holder,get,source,object,source,value,source,holder,get,value,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,parameter,for,method,or,constructor,method,or,ctor,param,index,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,could,not,convert,method,type,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,ambiguous,method,type,argument,types,did,you,specify,the,correct,bean,references,as,method,type,arguments,try,method,parameter,param,method,parameter,for,method,or,constructor,method,or,ctor,param,index,object,autowired,argument,resolve,autowired,argument,param,bean,name,autowired,bean,names,converter,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,this,bean,factory,logger,is,debug,enabled,this,bean,factory,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,method,type,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Object methodOrCtor, 			boolean autowiring) throws UnsatisfiedDependencyException;1450707100;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Object methodOrCtor,_			boolean autowiring) throws UnsatisfiedDependencyException {__		String methodType = (methodOrCtor instanceof Constructor ? "constructor" : "factory method")__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders =_				new HashSet<ConstructorArgumentValues.ValueHolder>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<String>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : null)__			_			ConstructorArgumentValues.ValueHolder valueHolder =_					resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__			_			_			_			if (valueHolder == null && (!autowiring || paramTypes.length == resolvedValues.getArgumentCount())) {_				valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					ConstructorArgumentValues.ValueHolder sourceHolder =_							(ConstructorArgumentValues.ValueHolder) valueHolder.getSource()__					Object sourceValue = sourceHolder.getValue()__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType,_								MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex))__						_						_							args.resolveNecessary = true__							args.preparedArguments[paramIndex] = sourceValue__						_					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, paramIndex, paramType,_								"Could not convert " + methodType + " argument value of type [" +_								ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_								"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, paramIndex, paramType,_							"Ambiguous " + methodType + " argument types - " +_							"did you specify the correct bean references as " + methodType + " arguments?")__				}_				try {_					MethodParameter param = MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex)__					Object autowiredArgument = resolveAutowiredArgument(param, beanName, autowiredBeanNames, converter)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, paramIndex, paramType, ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (this.beanFactory.logger.isDebugEnabled()) {_				this.beanFactory.logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + methodType + " to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,string,param,names,object,method,or,ctor,boolean,autowiring,throws,unsatisfied,dependency,exception,string,method,type,method,or,ctor,instanceof,constructor,constructor,factory,method,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,constructor,argument,values,value,holder,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,string,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,null,constructor,argument,values,value,holder,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,param,types,length,resolved,values,get,argument,count,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,constructor,argument,values,value,holder,source,holder,constructor,argument,values,value,holder,value,holder,get,source,object,source,value,source,holder,get,value,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,parameter,for,method,or,constructor,method,or,ctor,param,index,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,could,not,convert,method,type,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,ambiguous,method,type,argument,types,did,you,specify,the,correct,bean,references,as,method,type,arguments,try,method,parameter,param,method,parameter,for,method,or,constructor,method,or,ctor,param,index,object,autowired,argument,resolve,autowired,argument,param,bean,name,autowired,bean,names,converter,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,param,index,param,type,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,this,bean,factory,logger,is,debug,enabled,this,bean,factory,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,method,type,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Object methodOrCtor, 			boolean autowiring) throws UnsatisfiedDependencyException;1456432609;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Object methodOrCtor,_			boolean autowiring) throws UnsatisfiedDependencyException {__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders =_				new HashSet<ConstructorArgumentValues.ValueHolder>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<String>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : null)__			_			ConstructorArgumentValues.ValueHolder valueHolder =_					resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__			_			_			_			if (valueHolder == null && (!autowiring || paramTypes.length == resolvedValues.getArgumentCount())) {_				valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					ConstructorArgumentValues.ValueHolder sourceHolder =_							(ConstructorArgumentValues.ValueHolder) valueHolder.getSource()__					Object sourceValue = sourceHolder.getValue()__					MethodParameter methodParam = MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex)__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType, methodParam)__						_						_							args.resolveNecessary = true__							args.preparedArguments[paramIndex] = sourceValue__						_					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_								"Could not convert argument value of type [" +_								ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_								"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				MethodParameter methodParam = MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex)__				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_							"Ambiguous argument values for parameter of type [" + paramType.getName() +_							"] - did you specify the correct bean references as arguments?")__				}_				try {_					Object autowiredArgument =_							resolveAutowiredArgument(methodParam, beanName, autowiredBeanNames, converter)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam), ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (this.beanFactory.logger.isDebugEnabled()) {_				this.beanFactory.logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + (methodOrCtor instanceof Constructor ? "constructor" : "factory method") +_						" to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,string,param,names,object,method,or,ctor,boolean,autowiring,throws,unsatisfied,dependency,exception,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,constructor,argument,values,value,holder,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,string,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,null,constructor,argument,values,value,holder,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,param,types,length,resolved,values,get,argument,count,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,constructor,argument,values,value,holder,source,holder,constructor,argument,values,value,holder,value,holder,get,source,object,source,value,source,holder,get,value,method,parameter,method,param,method,parameter,for,method,or,constructor,method,or,ctor,param,index,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,param,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,method,parameter,method,param,method,parameter,for,method,or,constructor,method,or,ctor,param,index,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ambiguous,argument,values,for,parameter,of,type,param,type,get,name,did,you,specify,the,correct,bean,references,as,arguments,try,object,autowired,argument,resolve,autowired,argument,method,param,bean,name,autowired,bean,names,converter,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,this,bean,factory,logger,is,debug,enabled,this,bean,factory,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,method,or,ctor,instanceof,constructor,constructor,factory,method,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Object methodOrCtor, 			boolean autowiring) throws UnsatisfiedDependencyException;1456486263;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Object methodOrCtor,_			boolean autowiring) throws UnsatisfiedDependencyException {__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders =_				new HashSet<ConstructorArgumentValues.ValueHolder>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<String>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : null)__			_			ConstructorArgumentValues.ValueHolder valueHolder =_					resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__			_			_			_			if (valueHolder == null && (!autowiring || paramTypes.length == resolvedValues.getArgumentCount())) {_				valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					ConstructorArgumentValues.ValueHolder sourceHolder =_							(ConstructorArgumentValues.ValueHolder) valueHolder.getSource()__					Object sourceValue = sourceHolder.getValue()__					MethodParameter methodParam = MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex)__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType, methodParam)__						_						_							args.resolveNecessary = true__							args.preparedArguments[paramIndex] = sourceValue__						_					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_								"Could not convert argument value of type [" +_								ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_								"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				MethodParameter methodParam = MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex)__				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_							"Ambiguous argument values for parameter of type [" + paramType.getName() +_							"] - did you specify the correct bean references as arguments?")__				}_				try {_					Object autowiredArgument =_							resolveAutowiredArgument(methodParam, beanName, autowiredBeanNames, converter)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam), ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (this.beanFactory.logger.isDebugEnabled()) {_				this.beanFactory.logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + (methodOrCtor instanceof Constructor ? "constructor" : "factory method") +_						" to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,string,param,names,object,method,or,ctor,boolean,autowiring,throws,unsatisfied,dependency,exception,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,constructor,argument,values,value,holder,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,string,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,null,constructor,argument,values,value,holder,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,param,types,length,resolved,values,get,argument,count,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,constructor,argument,values,value,holder,source,holder,constructor,argument,values,value,holder,value,holder,get,source,object,source,value,source,holder,get,value,method,parameter,method,param,method,parameter,for,method,or,constructor,method,or,ctor,param,index,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,param,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,method,parameter,method,param,method,parameter,for,method,or,constructor,method,or,ctor,param,index,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ambiguous,argument,values,for,parameter,of,type,param,type,get,name,did,you,specify,the,correct,bean,references,as,arguments,try,object,autowired,argument,resolve,autowired,argument,method,param,bean,name,autowired,bean,names,converter,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,this,bean,factory,logger,is,debug,enabled,this,bean,factory,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,method,or,ctor,instanceof,constructor,constructor,factory,method,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Object methodOrCtor, 			boolean autowiring) throws UnsatisfiedDependencyException;1457697160;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Object methodOrCtor,_			boolean autowiring) throws UnsatisfiedDependencyException {__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders =_				new HashSet<ConstructorArgumentValues.ValueHolder>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<String>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : null)__			_			ConstructorArgumentValues.ValueHolder valueHolder =_					resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__			_			_			_			if (valueHolder == null && (!autowiring || paramTypes.length == resolvedValues.getArgumentCount())) {_				valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					ConstructorArgumentValues.ValueHolder sourceHolder =_							(ConstructorArgumentValues.ValueHolder) valueHolder.getSource()__					Object sourceValue = sourceHolder.getValue()__					MethodParameter methodParam = MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex)__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType, methodParam)__						_						_							args.resolveNecessary = true__							args.preparedArguments[paramIndex] = sourceValue__						_					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_								"Could not convert argument value of type [" +_								ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_								"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				MethodParameter methodParam = MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex)__				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_							"Ambiguous argument values for parameter of type [" + paramType.getName() +_							"] - did you specify the correct bean references as arguments?")__				}_				try {_					Object autowiredArgument =_							resolveAutowiredArgument(methodParam, beanName, autowiredBeanNames, converter)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam), ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (this.beanFactory.logger.isDebugEnabled()) {_				this.beanFactory.logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + (methodOrCtor instanceof Constructor ? "constructor" : "factory method") +_						" to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,string,param,names,object,method,or,ctor,boolean,autowiring,throws,unsatisfied,dependency,exception,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,constructor,argument,values,value,holder,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,string,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,null,constructor,argument,values,value,holder,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,param,types,length,resolved,values,get,argument,count,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,constructor,argument,values,value,holder,source,holder,constructor,argument,values,value,holder,value,holder,get,source,object,source,value,source,holder,get,value,method,parameter,method,param,method,parameter,for,method,or,constructor,method,or,ctor,param,index,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,param,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,method,parameter,method,param,method,parameter,for,method,or,constructor,method,or,ctor,param,index,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ambiguous,argument,values,for,parameter,of,type,param,type,get,name,did,you,specify,the,correct,bean,references,as,arguments,try,object,autowired,argument,resolve,autowired,argument,method,param,bean,name,autowired,bean,names,converter,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,this,bean,factory,logger,is,debug,enabled,this,bean,factory,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,method,or,ctor,instanceof,constructor,constructor,factory,method,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Object methodOrCtor, 			boolean autowiring) throws UnsatisfiedDependencyException;1458311433;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Object methodOrCtor,_			boolean autowiring) throws UnsatisfiedDependencyException {__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders =_				new HashSet<ConstructorArgumentValues.ValueHolder>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<String>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : null)__			_			ConstructorArgumentValues.ValueHolder valueHolder =_					resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__			_			_			_			if (valueHolder == null && (!autowiring || paramTypes.length == resolvedValues.getArgumentCount())) {_				valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					ConstructorArgumentValues.ValueHolder sourceHolder =_							(ConstructorArgumentValues.ValueHolder) valueHolder.getSource()__					Object sourceValue = sourceHolder.getValue()__					MethodParameter methodParam = MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex)__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType, methodParam)__						_						_							args.resolveNecessary = true__							args.preparedArguments[paramIndex] = sourceValue__						_					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_								"Could not convert argument value of type [" +_								ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_								"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				MethodParameter methodParam = MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex)__				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_							"Ambiguous argument values for parameter of type [" + paramType.getName() +_							"] - did you specify the correct bean references as arguments?")__				}_				try {_					Object autowiredArgument =_							resolveAutowiredArgument(methodParam, beanName, autowiredBeanNames, converter)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam), ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (this.beanFactory.logger.isDebugEnabled()) {_				this.beanFactory.logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + (methodOrCtor instanceof Constructor ? "constructor" : "factory method") +_						" to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,string,param,names,object,method,or,ctor,boolean,autowiring,throws,unsatisfied,dependency,exception,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,constructor,argument,values,value,holder,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,string,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,null,constructor,argument,values,value,holder,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,param,types,length,resolved,values,get,argument,count,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,constructor,argument,values,value,holder,source,holder,constructor,argument,values,value,holder,value,holder,get,source,object,source,value,source,holder,get,value,method,parameter,method,param,method,parameter,for,method,or,constructor,method,or,ctor,param,index,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,param,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,method,parameter,method,param,method,parameter,for,method,or,constructor,method,or,ctor,param,index,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ambiguous,argument,values,for,parameter,of,type,param,type,get,name,did,you,specify,the,correct,bean,references,as,arguments,try,object,autowired,argument,resolve,autowired,argument,method,param,bean,name,autowired,bean,names,converter,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,this,bean,factory,logger,is,debug,enabled,this,bean,factory,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,method,or,ctor,instanceof,constructor,constructor,factory,method,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Object methodOrCtor, 			boolean autowiring) throws UnsatisfiedDependencyException;1458323493;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Object methodOrCtor,_			boolean autowiring) throws UnsatisfiedDependencyException {__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders =_				new HashSet<ConstructorArgumentValues.ValueHolder>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<String>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : "")__			_			ConstructorArgumentValues.ValueHolder valueHolder =_					resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__			_			_			_			if (valueHolder == null && (!autowiring || paramTypes.length == resolvedValues.getArgumentCount())) {_				valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					ConstructorArgumentValues.ValueHolder sourceHolder =_							(ConstructorArgumentValues.ValueHolder) valueHolder.getSource()__					Object sourceValue = sourceHolder.getValue()__					MethodParameter methodParam = MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex)__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType, methodParam)__						_						_							args.resolveNecessary = true__							args.preparedArguments[paramIndex] = sourceValue__						_					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_								"Could not convert argument value of type [" +_								ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_								"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				MethodParameter methodParam = MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex)__				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_							"Ambiguous argument values for parameter of type [" + paramType.getName() +_							"] - did you specify the correct bean references as arguments?")__				}_				try {_					Object autowiredArgument =_							resolveAutowiredArgument(methodParam, beanName, autowiredBeanNames, converter)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam), ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (this.beanFactory.logger.isDebugEnabled()) {_				this.beanFactory.logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + (methodOrCtor instanceof Constructor ? "constructor" : "factory method") +_						" to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,string,param,names,object,method,or,ctor,boolean,autowiring,throws,unsatisfied,dependency,exception,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,constructor,argument,values,value,holder,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,string,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,constructor,argument,values,value,holder,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,param,types,length,resolved,values,get,argument,count,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,constructor,argument,values,value,holder,source,holder,constructor,argument,values,value,holder,value,holder,get,source,object,source,value,source,holder,get,value,method,parameter,method,param,method,parameter,for,method,or,constructor,method,or,ctor,param,index,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,param,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,method,parameter,method,param,method,parameter,for,method,or,constructor,method,or,ctor,param,index,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ambiguous,argument,values,for,parameter,of,type,param,type,get,name,did,you,specify,the,correct,bean,references,as,arguments,try,object,autowired,argument,resolve,autowired,argument,method,param,bean,name,autowired,bean,names,converter,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,this,bean,factory,logger,is,debug,enabled,this,bean,factory,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,method,or,ctor,instanceof,constructor,constructor,factory,method,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Object methodOrCtor, 			boolean autowiring) throws UnsatisfiedDependencyException;1460031510;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Object methodOrCtor,_			boolean autowiring) throws UnsatisfiedDependencyException {__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders =_				new HashSet<ConstructorArgumentValues.ValueHolder>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<String>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : "")__			_			ConstructorArgumentValues.ValueHolder valueHolder =_					resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__			_			_			_			if (valueHolder == null && (!autowiring || paramTypes.length == resolvedValues.getArgumentCount())) {_				valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					ConstructorArgumentValues.ValueHolder sourceHolder =_							(ConstructorArgumentValues.ValueHolder) valueHolder.getSource()__					Object sourceValue = sourceHolder.getValue()__					MethodParameter methodParam = MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex)__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType, methodParam)__						_						_							args.resolveNecessary = true__							args.preparedArguments[paramIndex] = sourceValue__						_					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_								"Could not convert argument value of type [" +_								ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_								"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				MethodParameter methodParam = MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex)__				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_							"Ambiguous argument values for parameter of type [" + paramType.getName() +_							"] - did you specify the correct bean references as arguments?")__				}_				try {_					Object autowiredArgument =_							resolveAutowiredArgument(methodParam, beanName, autowiredBeanNames, converter)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam), ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (this.beanFactory.logger.isDebugEnabled()) {_				this.beanFactory.logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + (methodOrCtor instanceof Constructor ? "constructor" : "factory method") +_						" to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,string,param,names,object,method,or,ctor,boolean,autowiring,throws,unsatisfied,dependency,exception,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,constructor,argument,values,value,holder,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,string,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,constructor,argument,values,value,holder,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,param,types,length,resolved,values,get,argument,count,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,constructor,argument,values,value,holder,source,holder,constructor,argument,values,value,holder,value,holder,get,source,object,source,value,source,holder,get,value,method,parameter,method,param,method,parameter,for,method,or,constructor,method,or,ctor,param,index,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,param,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,method,parameter,method,param,method,parameter,for,method,or,constructor,method,or,ctor,param,index,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ambiguous,argument,values,for,parameter,of,type,param,type,get,name,did,you,specify,the,correct,bean,references,as,arguments,try,object,autowired,argument,resolve,autowired,argument,method,param,bean,name,autowired,bean,names,converter,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,this,bean,factory,logger,is,debug,enabled,this,bean,factory,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,method,or,ctor,instanceof,constructor,constructor,factory,method,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> private ArgumentsHolder createArgumentArray( 			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues, 			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Object methodOrCtor, 			boolean autowiring) throws UnsatisfiedDependencyException;1467730834;Create an array of arguments to invoke a constructor or factory method,_given the resolved constructor argument values.;private ArgumentsHolder createArgumentArray(_			String beanName, RootBeanDefinition mbd, ConstructorArgumentValues resolvedValues,_			BeanWrapper bw, Class<?>[] paramTypes, String[] paramNames, Object methodOrCtor,_			boolean autowiring) throws UnsatisfiedDependencyException {__		TypeConverter converter = (this.beanFactory.getCustomTypeConverter() != null ?_				this.beanFactory.getCustomTypeConverter() : bw)___		ArgumentsHolder args = new ArgumentsHolder(paramTypes.length)__		Set<ConstructorArgumentValues.ValueHolder> usedValueHolders =_				new HashSet<>(paramTypes.length)__		Set<String> autowiredBeanNames = new LinkedHashSet<>(4)___		for (int paramIndex = 0_ paramIndex < paramTypes.length_ paramIndex++) {_			Class<?> paramType = paramTypes[paramIndex]__			String paramName = (paramNames != null ? paramNames[paramIndex] : "")__			_			ConstructorArgumentValues.ValueHolder valueHolder =_					resolvedValues.getArgumentValue(paramIndex, paramType, paramName, usedValueHolders)__			_			_			_			if (valueHolder == null && (!autowiring || paramTypes.length == resolvedValues.getArgumentCount())) {_				valueHolder = resolvedValues.getGenericArgumentValue(null, null, usedValueHolders)__			}_			if (valueHolder != null) {_				_				_				usedValueHolders.add(valueHolder)__				Object originalValue = valueHolder.getValue()__				Object convertedValue__				if (valueHolder.isConverted()) {_					convertedValue = valueHolder.getConvertedValue()__					args.preparedArguments[paramIndex] = convertedValue__				}_				else {_					ConstructorArgumentValues.ValueHolder sourceHolder =_							(ConstructorArgumentValues.ValueHolder) valueHolder.getSource()__					Object sourceValue = sourceHolder.getValue()__					MethodParameter methodParam = MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex)__					try {_						convertedValue = converter.convertIfNecessary(originalValue, paramType, methodParam)__						_						_							args.resolveNecessary = true__							args.preparedArguments[paramIndex] = sourceValue__						_					}_					catch (TypeMismatchException ex) {_						throw new UnsatisfiedDependencyException(_								mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_								"Could not convert argument value of type [" +_								ObjectUtils.nullSafeClassName(valueHolder.getValue()) +_								"] to required type [" + paramType.getName() + "]: " + ex.getMessage())__					}_				}_				args.arguments[paramIndex] = convertedValue__				args.rawArguments[paramIndex] = originalValue__			}_			else {_				MethodParameter methodParam = MethodParameter.forMethodOrConstructor(methodOrCtor, paramIndex)__				_				_				if (!autowiring) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam),_							"Ambiguous argument values for parameter of type [" + paramType.getName() +_							"] - did you specify the correct bean references as arguments?")__				}_				try {_					Object autowiredArgument =_							resolveAutowiredArgument(methodParam, beanName, autowiredBeanNames, converter)__					args.rawArguments[paramIndex] = autowiredArgument__					args.arguments[paramIndex] = autowiredArgument__					args.preparedArguments[paramIndex] = new AutowiredArgumentMarker()__					args.resolveNecessary = true__				}_				catch (BeansException ex) {_					throw new UnsatisfiedDependencyException(_							mbd.getResourceDescription(), beanName, new InjectionPoint(methodParam), ex)__				}_			}_		}__		for (String autowiredBeanName : autowiredBeanNames) {_			this.beanFactory.registerDependentBean(autowiredBeanName, beanName)__			if (this.beanFactory.logger.isDebugEnabled()) {_				this.beanFactory.logger.debug("Autowiring by type from bean name '" + beanName +_						"' via " + (methodOrCtor instanceof Constructor ? "constructor" : "factory method") +_						" to bean named '" + autowiredBeanName + "'")__			}_		}__		return args__	};create,an,array,of,arguments,to,invoke,a,constructor,or,factory,method,given,the,resolved,constructor,argument,values;private,arguments,holder,create,argument,array,string,bean,name,root,bean,definition,mbd,constructor,argument,values,resolved,values,bean,wrapper,bw,class,param,types,string,param,names,object,method,or,ctor,boolean,autowiring,throws,unsatisfied,dependency,exception,type,converter,converter,this,bean,factory,get,custom,type,converter,null,this,bean,factory,get,custom,type,converter,bw,arguments,holder,args,new,arguments,holder,param,types,length,set,constructor,argument,values,value,holder,used,value,holders,new,hash,set,param,types,length,set,string,autowired,bean,names,new,linked,hash,set,4,for,int,param,index,0,param,index,param,types,length,param,index,class,param,type,param,types,param,index,string,param,name,param,names,null,param,names,param,index,constructor,argument,values,value,holder,value,holder,resolved,values,get,argument,value,param,index,param,type,param,name,used,value,holders,if,value,holder,null,autowiring,param,types,length,resolved,values,get,argument,count,value,holder,resolved,values,get,generic,argument,value,null,null,used,value,holders,if,value,holder,null,used,value,holders,add,value,holder,object,original,value,value,holder,get,value,object,converted,value,if,value,holder,is,converted,converted,value,value,holder,get,converted,value,args,prepared,arguments,param,index,converted,value,else,constructor,argument,values,value,holder,source,holder,constructor,argument,values,value,holder,value,holder,get,source,object,source,value,source,holder,get,value,method,parameter,method,param,method,parameter,for,method,or,constructor,method,or,ctor,param,index,try,converted,value,converter,convert,if,necessary,original,value,param,type,method,param,args,resolve,necessary,true,args,prepared,arguments,param,index,source,value,catch,type,mismatch,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,could,not,convert,argument,value,of,type,object,utils,null,safe,class,name,value,holder,get,value,to,required,type,param,type,get,name,ex,get,message,args,arguments,param,index,converted,value,args,raw,arguments,param,index,original,value,else,method,parameter,method,param,method,parameter,for,method,or,constructor,method,or,ctor,param,index,if,autowiring,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ambiguous,argument,values,for,parameter,of,type,param,type,get,name,did,you,specify,the,correct,bean,references,as,arguments,try,object,autowired,argument,resolve,autowired,argument,method,param,bean,name,autowired,bean,names,converter,args,raw,arguments,param,index,autowired,argument,args,arguments,param,index,autowired,argument,args,prepared,arguments,param,index,new,autowired,argument,marker,args,resolve,necessary,true,catch,beans,exception,ex,throw,new,unsatisfied,dependency,exception,mbd,get,resource,description,bean,name,new,injection,point,method,param,ex,for,string,autowired,bean,name,autowired,bean,names,this,bean,factory,register,dependent,bean,autowired,bean,name,bean,name,if,this,bean,factory,logger,is,debug,enabled,this,bean,factory,logger,debug,autowiring,by,type,from,bean,name,bean,name,via,method,or,ctor,instanceof,constructor,constructor,factory,method,to,bean,named,autowired,bean,name,return,args
ConstructorResolver -> @Nullable 	protected Object resolveAutowiredArgument(MethodParameter param, String beanName, 			@Nullable Set<String> autowiredBeanNames, TypeConverter typeConverter, boolean fallback);1532385723;Template method for resolving the specified argument which is supposed to be autowired.;@Nullable_	protected Object resolveAutowiredArgument(MethodParameter param, String beanName,_			@Nullable Set<String> autowiredBeanNames, TypeConverter typeConverter, boolean fallback) {__		Class<?> paramType = param.getParameterType()__		if (InjectionPoint.class.isAssignableFrom(paramType)) {_			InjectionPoint injectionPoint = currentInjectionPoint.get()__			if (injectionPoint == null) {_				throw new IllegalStateException("No current InjectionPoint available for " + param)__			}_			return injectionPoint__		}_		try {_			return this.beanFactory.resolveDependency(_					new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__		}_		catch (NoSuchBeanDefinitionException ex) {_			if (fallback) {_				_				_				if (CollectionFactory.isApproximableCollectionType(paramType)) {_					return CollectionFactory.createCollection(paramType, 0)__				}_				else if (CollectionFactory.isApproximableMapType(paramType)) {_					return CollectionFactory.createMap(paramType, 0)__				}_			}_			throw ex__		}_	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;nullable,protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,nullable,set,string,autowired,bean,names,type,converter,type,converter,boolean,fallback,class,param,type,param,get,parameter,type,if,injection,point,class,is,assignable,from,param,type,injection,point,injection,point,current,injection,point,get,if,injection,point,null,throw,new,illegal,state,exception,no,current,injection,point,available,for,param,return,injection,point,try,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter,catch,no,such,bean,definition,exception,ex,if,fallback,if,collection,factory,is,approximable,collection,type,param,type,return,collection,factory,create,collection,param,type,0,else,if,collection,factory,is,approximable,map,type,param,type,return,collection,factory,create,map,param,type,0,throw,ex
ConstructorResolver -> @Nullable 	protected Object resolveAutowiredArgument(MethodParameter param, String beanName, 			@Nullable Set<String> autowiredBeanNames, TypeConverter typeConverter, boolean fallback);1532430234;Template method for resolving the specified argument which is supposed to be autowired.;@Nullable_	protected Object resolveAutowiredArgument(MethodParameter param, String beanName,_			@Nullable Set<String> autowiredBeanNames, TypeConverter typeConverter, boolean fallback) {__		Class<?> paramType = param.getParameterType()__		if (InjectionPoint.class.isAssignableFrom(paramType)) {_			InjectionPoint injectionPoint = currentInjectionPoint.get()__			if (injectionPoint == null) {_				throw new IllegalStateException("No current InjectionPoint available for " + param)__			}_			return injectionPoint__		}_		try {_			return this.beanFactory.resolveDependency(_					new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__		}_		catch (NoSuchBeanDefinitionException ex) {_			if (fallback) {_				_				_				if (paramType.isArray()) {_					return Array.newInstance(paramType.getComponentType(), 0)__				}_				else if (CollectionFactory.isApproximableCollectionType(paramType)) {_					return CollectionFactory.createCollection(paramType, 0)__				}_				else if (CollectionFactory.isApproximableMapType(paramType)) {_					return CollectionFactory.createMap(paramType, 0)__				}_			}_			throw ex__		}_	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;nullable,protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,nullable,set,string,autowired,bean,names,type,converter,type,converter,boolean,fallback,class,param,type,param,get,parameter,type,if,injection,point,class,is,assignable,from,param,type,injection,point,injection,point,current,injection,point,get,if,injection,point,null,throw,new,illegal,state,exception,no,current,injection,point,available,for,param,return,injection,point,try,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter,catch,no,such,bean,definition,exception,ex,if,fallback,if,param,type,is,array,return,array,new,instance,param,type,get,component,type,0,else,if,collection,factory,is,approximable,collection,type,param,type,return,collection,factory,create,collection,param,type,0,else,if,collection,factory,is,approximable,map,type,param,type,return,collection,factory,create,map,param,type,0,throw,ex
ConstructorResolver -> @Nullable 	protected Object resolveAutowiredArgument(MethodParameter param, String beanName, 			@Nullable Set<String> autowiredBeanNames, TypeConverter typeConverter, boolean fallback);1532577558;Template method for resolving the specified argument which is supposed to be autowired.;@Nullable_	protected Object resolveAutowiredArgument(MethodParameter param, String beanName,_			@Nullable Set<String> autowiredBeanNames, TypeConverter typeConverter, boolean fallback) {__		Class<?> paramType = param.getParameterType()__		if (InjectionPoint.class.isAssignableFrom(paramType)) {_			InjectionPoint injectionPoint = currentInjectionPoint.get()__			if (injectionPoint == null) {_				throw new IllegalStateException("No current InjectionPoint available for " + param)__			}_			return injectionPoint__		}_		try {_			return this.beanFactory.resolveDependency(_					new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__		}_		catch (NoUniqueBeanDefinitionException ex) {_			throw ex__		}_		catch (NoSuchBeanDefinitionException ex) {_			if (fallback) {_				_				_				if (paramType.isArray()) {_					return Array.newInstance(paramType.getComponentType(), 0)__				}_				else if (CollectionFactory.isApproximableCollectionType(paramType)) {_					return CollectionFactory.createCollection(paramType, 0)__				}_				else if (CollectionFactory.isApproximableMapType(paramType)) {_					return CollectionFactory.createMap(paramType, 0)__				}_			}_			throw ex__		}_	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;nullable,protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,nullable,set,string,autowired,bean,names,type,converter,type,converter,boolean,fallback,class,param,type,param,get,parameter,type,if,injection,point,class,is,assignable,from,param,type,injection,point,injection,point,current,injection,point,get,if,injection,point,null,throw,new,illegal,state,exception,no,current,injection,point,available,for,param,return,injection,point,try,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter,catch,no,unique,bean,definition,exception,ex,throw,ex,catch,no,such,bean,definition,exception,ex,if,fallback,if,param,type,is,array,return,array,new,instance,param,type,get,component,type,0,else,if,collection,factory,is,approximable,collection,type,param,type,return,collection,factory,create,collection,param,type,0,else,if,collection,factory,is,approximable,map,type,param,type,return,collection,factory,create,map,param,type,0,throw,ex
ConstructorResolver -> @Nullable 	protected Object resolveAutowiredArgument(MethodParameter param, String beanName, 			@Nullable Set<String> autowiredBeanNames, TypeConverter typeConverter, boolean fallback);1534157021;Template method for resolving the specified argument which is supposed to be autowired.;@Nullable_	protected Object resolveAutowiredArgument(MethodParameter param, String beanName,_			@Nullable Set<String> autowiredBeanNames, TypeConverter typeConverter, boolean fallback) {__		Class<?> paramType = param.getParameterType()__		if (InjectionPoint.class.isAssignableFrom(paramType)) {_			InjectionPoint injectionPoint = currentInjectionPoint.get()__			if (injectionPoint == null) {_				throw new IllegalStateException("No current InjectionPoint available for " + param)__			}_			return injectionPoint__		}_		try {_			return this.beanFactory.resolveDependency(_					new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__		}_		catch (NoUniqueBeanDefinitionException ex) {_			throw ex__		}_		catch (NoSuchBeanDefinitionException ex) {_			if (fallback) {_				_				_				if (paramType.isArray()) {_					return Array.newInstance(paramType.getComponentType(), 0)__				}_				else if (CollectionFactory.isApproximableCollectionType(paramType)) {_					return CollectionFactory.createCollection(paramType, 0)__				}_				else if (CollectionFactory.isApproximableMapType(paramType)) {_					return CollectionFactory.createMap(paramType, 0)__				}_			}_			throw ex__		}_	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;nullable,protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,nullable,set,string,autowired,bean,names,type,converter,type,converter,boolean,fallback,class,param,type,param,get,parameter,type,if,injection,point,class,is,assignable,from,param,type,injection,point,injection,point,current,injection,point,get,if,injection,point,null,throw,new,illegal,state,exception,no,current,injection,point,available,for,param,return,injection,point,try,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter,catch,no,unique,bean,definition,exception,ex,throw,ex,catch,no,such,bean,definition,exception,ex,if,fallback,if,param,type,is,array,return,array,new,instance,param,type,get,component,type,0,else,if,collection,factory,is,approximable,collection,type,param,type,return,collection,factory,create,collection,param,type,0,else,if,collection,factory,is,approximable,map,type,param,type,return,collection,factory,create,map,param,type,0,throw,ex
ConstructorResolver -> @Nullable 	protected Object resolveAutowiredArgument(MethodParameter param, String beanName, 			@Nullable Set<String> autowiredBeanNames, TypeConverter typeConverter, boolean fallback);1537388389;Template method for resolving the specified argument which is supposed to be autowired.;@Nullable_	protected Object resolveAutowiredArgument(MethodParameter param, String beanName,_			@Nullable Set<String> autowiredBeanNames, TypeConverter typeConverter, boolean fallback) {__		Class<?> paramType = param.getParameterType()__		if (InjectionPoint.class.isAssignableFrom(paramType)) {_			InjectionPoint injectionPoint = currentInjectionPoint.get()__			if (injectionPoint == null) {_				throw new IllegalStateException("No current InjectionPoint available for " + param)__			}_			return injectionPoint__		}_		try {_			return this.beanFactory.resolveDependency(_					new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__		}_		catch (NoUniqueBeanDefinitionException ex) {_			throw ex__		}_		catch (NoSuchBeanDefinitionException ex) {_			if (fallback) {_				_				_				if (paramType.isArray()) {_					return Array.newInstance(paramType.getComponentType(), 0)__				}_				else if (CollectionFactory.isApproximableCollectionType(paramType)) {_					return CollectionFactory.createCollection(paramType, 0)__				}_				else if (CollectionFactory.isApproximableMapType(paramType)) {_					return CollectionFactory.createMap(paramType, 0)__				}_			}_			throw ex__		}_	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;nullable,protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,nullable,set,string,autowired,bean,names,type,converter,type,converter,boolean,fallback,class,param,type,param,get,parameter,type,if,injection,point,class,is,assignable,from,param,type,injection,point,injection,point,current,injection,point,get,if,injection,point,null,throw,new,illegal,state,exception,no,current,injection,point,available,for,param,return,injection,point,try,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter,catch,no,unique,bean,definition,exception,ex,throw,ex,catch,no,such,bean,definition,exception,ex,if,fallback,if,param,type,is,array,return,array,new,instance,param,type,get,component,type,0,else,if,collection,factory,is,approximable,collection,type,param,type,return,collection,factory,create,collection,param,type,0,else,if,collection,factory,is,approximable,map,type,param,type,return,collection,factory,create,map,param,type,0,throw,ex
ConstructorResolver -> @Nullable 	protected Object resolveAutowiredArgument(MethodParameter param, String beanName, 			@Nullable Set<String> autowiredBeanNames, TypeConverter typeConverter, boolean fallback);1539377630;Template method for resolving the specified argument which is supposed to be autowired.;@Nullable_	protected Object resolveAutowiredArgument(MethodParameter param, String beanName,_			@Nullable Set<String> autowiredBeanNames, TypeConverter typeConverter, boolean fallback) {__		Class<?> paramType = param.getParameterType()__		if (InjectionPoint.class.isAssignableFrom(paramType)) {_			InjectionPoint injectionPoint = currentInjectionPoint.get()__			if (injectionPoint == null) {_				throw new IllegalStateException("No current InjectionPoint available for " + param)__			}_			return injectionPoint__		}_		try {_			return this.beanFactory.resolveDependency(_					new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__		}_		catch (NoUniqueBeanDefinitionException ex) {_			throw ex__		}_		catch (NoSuchBeanDefinitionException ex) {_			if (fallback) {_				_				_				if (paramType.isArray()) {_					return Array.newInstance(paramType.getComponentType(), 0)__				}_				else if (CollectionFactory.isApproximableCollectionType(paramType)) {_					return CollectionFactory.createCollection(paramType, 0)__				}_				else if (CollectionFactory.isApproximableMapType(paramType)) {_					return CollectionFactory.createMap(paramType, 0)__				}_			}_			throw ex__		}_	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;nullable,protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,nullable,set,string,autowired,bean,names,type,converter,type,converter,boolean,fallback,class,param,type,param,get,parameter,type,if,injection,point,class,is,assignable,from,param,type,injection,point,injection,point,current,injection,point,get,if,injection,point,null,throw,new,illegal,state,exception,no,current,injection,point,available,for,param,return,injection,point,try,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter,catch,no,unique,bean,definition,exception,ex,throw,ex,catch,no,such,bean,definition,exception,ex,if,fallback,if,param,type,is,array,return,array,new,instance,param,type,get,component,type,0,else,if,collection,factory,is,approximable,collection,type,param,type,return,collection,factory,create,collection,param,type,0,else,if,collection,factory,is,approximable,map,type,param,type,return,collection,factory,create,map,param,type,0,throw,ex
ConstructorResolver -> @Nullable 	protected Object resolveAutowiredArgument(MethodParameter param, String beanName, 			@Nullable Set<String> autowiredBeanNames, TypeConverter typeConverter, boolean fallback);1542899558;Template method for resolving the specified argument which is supposed to be autowired.;@Nullable_	protected Object resolveAutowiredArgument(MethodParameter param, String beanName,_			@Nullable Set<String> autowiredBeanNames, TypeConverter typeConverter, boolean fallback) {__		Class<?> paramType = param.getParameterType()__		if (InjectionPoint.class.isAssignableFrom(paramType)) {_			InjectionPoint injectionPoint = currentInjectionPoint.get()__			if (injectionPoint == null) {_				throw new IllegalStateException("No current InjectionPoint available for " + param)__			}_			return injectionPoint__		}_		try {_			return this.beanFactory.resolveDependency(_					new DependencyDescriptor(param, true), beanName, autowiredBeanNames, typeConverter)__		}_		catch (NoUniqueBeanDefinitionException ex) {_			throw ex__		}_		catch (NoSuchBeanDefinitionException ex) {_			if (fallback) {_				_				_				if (paramType.isArray()) {_					return Array.newInstance(paramType.getComponentType(), 0)__				}_				else if (CollectionFactory.isApproximableCollectionType(paramType)) {_					return CollectionFactory.createCollection(paramType, 0)__				}_				else if (CollectionFactory.isApproximableMapType(paramType)) {_					return CollectionFactory.createMap(paramType, 0)__				}_			}_			throw ex__		}_	};template,method,for,resolving,the,specified,argument,which,is,supposed,to,be,autowired;nullable,protected,object,resolve,autowired,argument,method,parameter,param,string,bean,name,nullable,set,string,autowired,bean,names,type,converter,type,converter,boolean,fallback,class,param,type,param,get,parameter,type,if,injection,point,class,is,assignable,from,param,type,injection,point,injection,point,current,injection,point,get,if,injection,point,null,throw,new,illegal,state,exception,no,current,injection,point,available,for,param,return,injection,point,try,return,this,bean,factory,resolve,dependency,new,dependency,descriptor,param,true,bean,name,autowired,bean,names,type,converter,catch,no,unique,bean,definition,exception,ex,throw,ex,catch,no,such,bean,definition,exception,ex,if,fallback,if,param,type,is,array,return,array,new,instance,param,type,get,component,type,0,else,if,collection,factory,is,approximable,collection,type,param,type,return,collection,factory,create,collection,param,type,0,else,if,collection,factory,is,approximable,map,type,param,type,return,collection,factory,create,map,param,type,0,throw,ex
ConstructorResolver -> public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, 			@Nullable Constructor<?>[] chosenCtors, @Nullable final Object[] explicitArgs);1495868221;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd,_			@Nullable Constructor<?>[] chosenCtors, @Nullable final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor<?> constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)__			}_		}__		if (constructorToUse == null) {_			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			_			Constructor<?>[] candidates = chosenCtors__			if (candidates == null) {_				Class<?> beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_							"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}_			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor<?>> ambiguousConstructors = null__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Constructor<?> candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)__						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames,_								getUserDeclaredConstructor(candidate), autowiring)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (this.beanFactory.logger.isTraceEnabled()) {_							this.beanFactory.logger.trace(_									"Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						_						if (causes == null) {_							causes = new LinkedList<>()__						}_						causes.add(ex)__						continue__					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Constructor<?> ctorToUse = constructorToUse__				final Object[] argumentsToUse = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, ctorToUse, argumentsToUse)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, constructorToUse, argsToUse)__			}__			bw.setBeanInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via constructor failed", ex)__		}_	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,final,string,bean,name,final,root,bean,definition,mbd,nullable,constructor,chosen,ctors,nullable,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,if,constructor,to,use,null,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,linked,list,unsatisfied,dependency,exception,causes,null,for,constructor,candidate,candidates,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,constructor,properties,checker,evaluate,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,get,user,declared,constructor,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,constructor,ctor,to,use,constructor,to,use,final,object,arguments,to,use,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,ctor,to,use,arguments,to,use,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,constructor,to,use,args,to,use,bw,set,bean,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,constructor,failed,ex
ConstructorResolver -> public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, 			@Nullable Constructor<?>[] chosenCtors, @Nullable final Object[] explicitArgs);1496259743;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd,_			@Nullable Constructor<?>[] chosenCtors, @Nullable final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor<?> constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)__			}_		}__		if (constructorToUse == null) {_			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			_			Constructor<?>[] candidates = chosenCtors__			if (candidates == null) {_				Class<?> beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_							"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}_			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor<?>> ambiguousConstructors = null__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Constructor<?> candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)__						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames,_								getUserDeclaredConstructor(candidate), autowiring)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (this.beanFactory.logger.isTraceEnabled()) {_							this.beanFactory.logger.trace(_									"Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						_						if (causes == null) {_							causes = new LinkedList<>()__						}_						causes.add(ex)__						continue__					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Constructor<?> ctorToUse = constructorToUse__				final Object[] argumentsToUse = argsToUse__				beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() {_					@Override_					public Object run() {_						return beanFactory.getInstantiationStrategy().instantiate(_								mbd, beanName, beanFactory, ctorToUse, argumentsToUse)__					}_				}, beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, constructorToUse, argsToUse)__			}__			bw.setBeanInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via constructor failed", ex)__		}_	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,final,string,bean,name,final,root,bean,definition,mbd,nullable,constructor,chosen,ctors,nullable,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,if,constructor,to,use,null,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,linked,list,unsatisfied,dependency,exception,causes,null,for,constructor,candidate,candidates,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,constructor,properties,checker,evaluate,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,get,user,declared,constructor,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,constructor,ctor,to,use,constructor,to,use,final,object,arguments,to,use,args,to,use,bean,instance,access,controller,do,privileged,new,privileged,action,object,override,public,object,run,return,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,ctor,to,use,arguments,to,use,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,constructor,to,use,args,to,use,bw,set,bean,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,constructor,failed,ex
ConstructorResolver -> public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, 			@Nullable Constructor<?>[] chosenCtors, @Nullable final Object[] explicitArgs);1496837955;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd,_			@Nullable Constructor<?>[] chosenCtors, @Nullable final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor<?> constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)__			}_		}__		if (constructorToUse == null) {_			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			_			Constructor<?>[] candidates = chosenCtors__			if (candidates == null) {_				Class<?> beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_							"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}_			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor<?>> ambiguousConstructors = null__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Constructor<?> candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)__						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames,_								getUserDeclaredConstructor(candidate), autowiring)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (this.beanFactory.logger.isTraceEnabled()) {_							this.beanFactory.logger.trace(_									"Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						_						if (causes == null) {_							causes = new LinkedList<>()__						}_						causes.add(ex)__						continue__					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		try {_			final InstantiationStrategy strategy = beanFactory.getInstantiationStrategy()__			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Constructor<?> ctorToUse = constructorToUse__				final Object[] argumentsToUse = argsToUse__				beanInstance = AccessController.doPrivileged((PrivilegedAction<Object>) () ->_						strategy.instantiate(mbd, beanName, beanFactory, ctorToUse, argumentsToUse),_						beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = strategy.instantiate(mbd, beanName, this.beanFactory, constructorToUse, argsToUse)__			}__			bw.setBeanInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via constructor failed", ex)__		}_	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,final,string,bean,name,final,root,bean,definition,mbd,nullable,constructor,chosen,ctors,nullable,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,if,constructor,to,use,null,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,linked,list,unsatisfied,dependency,exception,causes,null,for,constructor,candidate,candidates,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,constructor,properties,checker,evaluate,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,get,user,declared,constructor,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,try,final,instantiation,strategy,strategy,bean,factory,get,instantiation,strategy,object,bean,instance,if,system,get,security,manager,null,final,constructor,ctor,to,use,constructor,to,use,final,object,arguments,to,use,args,to,use,bean,instance,access,controller,do,privileged,privileged,action,object,strategy,instantiate,mbd,bean,name,bean,factory,ctor,to,use,arguments,to,use,bean,factory,get,access,control,context,else,bean,instance,strategy,instantiate,mbd,bean,name,this,bean,factory,constructor,to,use,args,to,use,bw,set,bean,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,constructor,failed,ex
ConstructorResolver -> public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, 			@Nullable Constructor<?>[] chosenCtors, @Nullable final Object[] explicitArgs);1503007895;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd,_			@Nullable Constructor<?>[] chosenCtors, @Nullable final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor<?> constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)__			}_		}__		if (constructorToUse == null) {_			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			_			Constructor<?>[] candidates = chosenCtors__			if (candidates == null) {_				Class<?> beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_							"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}_			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor<?>> ambiguousConstructors = null__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Constructor<?> candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)__						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames,_								getUserDeclaredConstructor(candidate), autowiring)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (this.beanFactory.logger.isTraceEnabled()) {_							this.beanFactory.logger.trace(_									"Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						_						if (causes == null) {_							causes = new LinkedList<>()__						}_						causes.add(ex)__						continue__					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		try {_			final InstantiationStrategy strategy = beanFactory.getInstantiationStrategy()__			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Constructor<?> ctorToUse = constructorToUse__				final Object[] argumentsToUse = argsToUse__				beanInstance = AccessController.doPrivileged((PrivilegedAction<Object>) () ->_						strategy.instantiate(mbd, beanName, beanFactory, ctorToUse, argumentsToUse),_						beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = strategy.instantiate(mbd, beanName, this.beanFactory, constructorToUse, argsToUse)__			}__			bw.setBeanInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via constructor failed", ex)__		}_	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,final,string,bean,name,final,root,bean,definition,mbd,nullable,constructor,chosen,ctors,nullable,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,if,constructor,to,use,null,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,linked,list,unsatisfied,dependency,exception,causes,null,for,constructor,candidate,candidates,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,constructor,properties,checker,evaluate,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,get,user,declared,constructor,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,try,final,instantiation,strategy,strategy,bean,factory,get,instantiation,strategy,object,bean,instance,if,system,get,security,manager,null,final,constructor,ctor,to,use,constructor,to,use,final,object,arguments,to,use,args,to,use,bean,instance,access,controller,do,privileged,privileged,action,object,strategy,instantiate,mbd,bean,name,bean,factory,ctor,to,use,arguments,to,use,bean,factory,get,access,control,context,else,bean,instance,strategy,instantiate,mbd,bean,name,this,bean,factory,constructor,to,use,args,to,use,bw,set,bean,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,constructor,failed,ex
ConstructorResolver -> public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, 			@Nullable Constructor<?>[] chosenCtors, @Nullable final Object[] explicitArgs);1503414318;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd,_			@Nullable Constructor<?>[] chosenCtors, @Nullable final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor<?> constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)__			}_		}__		if (constructorToUse == null) {_			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			_			Constructor<?>[] candidates = chosenCtors__			if (candidates == null) {_				Class<?> beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_							"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}_			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor<?>> ambiguousConstructors = null__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Constructor<?> candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)__						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames,_								getUserDeclaredConstructor(candidate), autowiring)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (this.beanFactory.logger.isTraceEnabled()) {_							this.beanFactory.logger.trace(_									"Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						_						if (causes == null) {_							causes = new LinkedList<>()__						}_						causes.add(ex)__						continue__					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		try {_			final InstantiationStrategy strategy = beanFactory.getInstantiationStrategy()__			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Constructor<?> ctorToUse = constructorToUse__				final Object[] argumentsToUse = argsToUse__				beanInstance = AccessController.doPrivileged((PrivilegedAction<Object>) () ->_						strategy.instantiate(mbd, beanName, beanFactory, ctorToUse, argumentsToUse),_						beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = strategy.instantiate(mbd, beanName, this.beanFactory, constructorToUse, argsToUse)__			}__			bw.setBeanInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via constructor failed", ex)__		}_	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,final,string,bean,name,final,root,bean,definition,mbd,nullable,constructor,chosen,ctors,nullable,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,if,constructor,to,use,null,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,linked,list,unsatisfied,dependency,exception,causes,null,for,constructor,candidate,candidates,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,constructor,properties,checker,evaluate,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,get,user,declared,constructor,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,try,final,instantiation,strategy,strategy,bean,factory,get,instantiation,strategy,object,bean,instance,if,system,get,security,manager,null,final,constructor,ctor,to,use,constructor,to,use,final,object,arguments,to,use,args,to,use,bean,instance,access,controller,do,privileged,privileged,action,object,strategy,instantiate,mbd,bean,name,bean,factory,ctor,to,use,arguments,to,use,bean,factory,get,access,control,context,else,bean,instance,strategy,instantiate,mbd,bean,name,this,bean,factory,constructor,to,use,args,to,use,bw,set,bean,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,constructor,failed,ex
ConstructorResolver -> public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, 			@Nullable Constructor<?>[] chosenCtors, @Nullable final Object[] explicitArgs);1506551472;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd,_			@Nullable Constructor<?>[] chosenCtors, @Nullable final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor<?> constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)__			}_		}__		if (constructorToUse == null) {_			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			_			Constructor<?>[] candidates = chosenCtors__			if (candidates == null) {_				Class<?> beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_							"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}_			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor<?>> ambiguousConstructors = null__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Constructor<?> candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)__						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames,_								getUserDeclaredConstructor(candidate), autowiring)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (this.beanFactory.logger.isTraceEnabled()) {_							this.beanFactory.logger.trace(_									"Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						_						if (causes == null) {_							causes = new LinkedList<>()__						}_						causes.add(ex)__						continue__					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		try {_			final InstantiationStrategy strategy = beanFactory.getInstantiationStrategy()__			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Constructor<?> ctorToUse = constructorToUse__				final Object[] argumentsToUse = argsToUse__				beanInstance = AccessController.doPrivileged((PrivilegedAction<Object>) () ->_						strategy.instantiate(mbd, beanName, beanFactory, ctorToUse, argumentsToUse),_						beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = strategy.instantiate(mbd, beanName, this.beanFactory, constructorToUse, argsToUse)__			}__			bw.setBeanInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via constructor failed", ex)__		}_	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,final,string,bean,name,final,root,bean,definition,mbd,nullable,constructor,chosen,ctors,nullable,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,if,constructor,to,use,null,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,linked,list,unsatisfied,dependency,exception,causes,null,for,constructor,candidate,candidates,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,constructor,properties,checker,evaluate,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,get,user,declared,constructor,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,try,final,instantiation,strategy,strategy,bean,factory,get,instantiation,strategy,object,bean,instance,if,system,get,security,manager,null,final,constructor,ctor,to,use,constructor,to,use,final,object,arguments,to,use,args,to,use,bean,instance,access,controller,do,privileged,privileged,action,object,strategy,instantiate,mbd,bean,name,bean,factory,ctor,to,use,arguments,to,use,bean,factory,get,access,control,context,else,bean,instance,strategy,instantiate,mbd,bean,name,this,bean,factory,constructor,to,use,args,to,use,bw,set,bean,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,constructor,failed,ex
ConstructorResolver -> public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, 			@Nullable Constructor<?>[] chosenCtors, @Nullable final Object[] explicitArgs);1510606271;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd,_			@Nullable Constructor<?>[] chosenCtors, @Nullable final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor<?> constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)__			}_		}__		if (constructorToUse == null) {_			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			_			Constructor<?>[] candidates = chosenCtors__			if (candidates == null) {_				Class<?> beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_							"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}_			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor<?>> ambiguousConstructors = null__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Constructor<?> candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)__						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames,_								getUserDeclaredConstructor(candidate), autowiring)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (this.beanFactory.logger.isTraceEnabled()) {_							this.beanFactory.logger.trace(_									"Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						_						if (causes == null) {_							causes = new LinkedList<>()__						}_						causes.add(ex)__						continue__					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		try {_			final InstantiationStrategy strategy = beanFactory.getInstantiationStrategy()__			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Constructor<?> ctorToUse = constructorToUse__				final Object[] argumentsToUse = argsToUse__				beanInstance = AccessController.doPrivileged((PrivilegedAction<Object>) () ->_						strategy.instantiate(mbd, beanName, beanFactory, ctorToUse, argumentsToUse),_						beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = strategy.instantiate(mbd, beanName, this.beanFactory, constructorToUse, argsToUse)__			}__			bw.setBeanInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via constructor failed", ex)__		}_	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,final,string,bean,name,final,root,bean,definition,mbd,nullable,constructor,chosen,ctors,nullable,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,if,constructor,to,use,null,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,linked,list,unsatisfied,dependency,exception,causes,null,for,constructor,candidate,candidates,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,constructor,properties,checker,evaluate,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,get,user,declared,constructor,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,try,final,instantiation,strategy,strategy,bean,factory,get,instantiation,strategy,object,bean,instance,if,system,get,security,manager,null,final,constructor,ctor,to,use,constructor,to,use,final,object,arguments,to,use,args,to,use,bean,instance,access,controller,do,privileged,privileged,action,object,strategy,instantiate,mbd,bean,name,bean,factory,ctor,to,use,arguments,to,use,bean,factory,get,access,control,context,else,bean,instance,strategy,instantiate,mbd,bean,name,this,bean,factory,constructor,to,use,args,to,use,bw,set,bean,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,constructor,failed,ex
ConstructorResolver -> public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, 			@Nullable Constructor<?>[] chosenCtors, @Nullable final Object[] explicitArgs);1519295386;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd,_			@Nullable Constructor<?>[] chosenCtors, @Nullable final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor<?> constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)__			}_		}__		if (constructorToUse == null) {_			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			_			Constructor<?>[] candidates = chosenCtors__			if (candidates == null) {_				Class<?> beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_							"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}_			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor<?>> ambiguousConstructors = null__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Constructor<?> candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)__						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames,_								getUserDeclaredConstructor(candidate), autowiring)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (this.beanFactory.logger.isTraceEnabled()) {_							this.beanFactory.logger.trace(_									"Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						_						if (causes == null) {_							causes = new LinkedList<>()__						}_						causes.add(ex)__						continue__					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		try {_			final InstantiationStrategy strategy = beanFactory.getInstantiationStrategy()__			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Constructor<?> ctorToUse = constructorToUse__				final Object[] argumentsToUse = argsToUse__				beanInstance = AccessController.doPrivileged((PrivilegedAction<Object>) () ->_						strategy.instantiate(mbd, beanName, beanFactory, ctorToUse, argumentsToUse),_						beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = strategy.instantiate(mbd, beanName, this.beanFactory, constructorToUse, argsToUse)__			}__			bw.setBeanInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via constructor failed", ex)__		}_	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,final,string,bean,name,final,root,bean,definition,mbd,nullable,constructor,chosen,ctors,nullable,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,if,constructor,to,use,null,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,linked,list,unsatisfied,dependency,exception,causes,null,for,constructor,candidate,candidates,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,constructor,properties,checker,evaluate,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,get,user,declared,constructor,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,try,final,instantiation,strategy,strategy,bean,factory,get,instantiation,strategy,object,bean,instance,if,system,get,security,manager,null,final,constructor,ctor,to,use,constructor,to,use,final,object,arguments,to,use,args,to,use,bean,instance,access,controller,do,privileged,privileged,action,object,strategy,instantiate,mbd,bean,name,bean,factory,ctor,to,use,arguments,to,use,bean,factory,get,access,control,context,else,bean,instance,strategy,instantiate,mbd,bean,name,this,bean,factory,constructor,to,use,args,to,use,bw,set,bean,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,constructor,failed,ex
ConstructorResolver -> public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, 			@Nullable Constructor<?>[] chosenCtors, @Nullable final Object[] explicitArgs);1519560860;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd,_			@Nullable Constructor<?>[] chosenCtors, @Nullable final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor<?> constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)__			}_		}__		if (constructorToUse == null) {_			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			_			Constructor<?>[] candidates = chosenCtors__			if (candidates == null) {_				Class<?> beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_							"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}_			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor<?>> ambiguousConstructors = null__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Constructor<?> candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)__						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames,_								getUserDeclaredConstructor(candidate), autowiring)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (this.beanFactory.logger.isTraceEnabled()) {_							this.beanFactory.logger.trace(_									"Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						_						if (causes == null) {_							causes = new LinkedList<>()__						}_						causes.add(ex)__						continue__					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		try {_			final InstantiationStrategy strategy = beanFactory.getInstantiationStrategy()__			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Constructor<?> ctorToUse = constructorToUse__				final Object[] argumentsToUse = argsToUse__				beanInstance = AccessController.doPrivileged((PrivilegedAction<Object>) () ->_						strategy.instantiate(mbd, beanName, beanFactory, ctorToUse, argumentsToUse),_						beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = strategy.instantiate(mbd, beanName, this.beanFactory, constructorToUse, argsToUse)__			}__			bw.setBeanInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via constructor failed", ex)__		}_	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,final,string,bean,name,final,root,bean,definition,mbd,nullable,constructor,chosen,ctors,nullable,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,if,constructor,to,use,null,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,linked,list,unsatisfied,dependency,exception,causes,null,for,constructor,candidate,candidates,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,constructor,properties,checker,evaluate,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,get,user,declared,constructor,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,try,final,instantiation,strategy,strategy,bean,factory,get,instantiation,strategy,object,bean,instance,if,system,get,security,manager,null,final,constructor,ctor,to,use,constructor,to,use,final,object,arguments,to,use,args,to,use,bean,instance,access,controller,do,privileged,privileged,action,object,strategy,instantiate,mbd,bean,name,bean,factory,ctor,to,use,arguments,to,use,bean,factory,get,access,control,context,else,bean,instance,strategy,instantiate,mbd,bean,name,this,bean,factory,constructor,to,use,args,to,use,bw,set,bean,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,constructor,failed,ex
ConstructorResolver -> public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, 			@Nullable Constructor<?>[] chosenCtors, @Nullable final Object[] explicitArgs);1527623493;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd,_			@Nullable Constructor<?>[] chosenCtors, @Nullable final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor<?> constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)__			}_		}__		if (constructorToUse == null) {_			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			_			Constructor<?>[] candidates = chosenCtors__			if (candidates == null) {_				Class<?> beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_							"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}_			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor<?>> ambiguousConstructors = null__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Constructor<?> candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)__						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames,_								getUserDeclaredConstructor(candidate), autowiring)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (logger.isTraceEnabled()) {_							logger.trace("Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						_						if (causes == null) {_							causes = new LinkedList<>()__						}_						causes.add(ex)__						continue__					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		try {_			final InstantiationStrategy strategy = beanFactory.getInstantiationStrategy()__			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Constructor<?> ctorToUse = constructorToUse__				final Object[] argumentsToUse = argsToUse__				beanInstance = AccessController.doPrivileged((PrivilegedAction<Object>) () ->_						strategy.instantiate(mbd, beanName, beanFactory, ctorToUse, argumentsToUse),_						beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = strategy.instantiate(mbd, beanName, this.beanFactory, constructorToUse, argsToUse)__			}__			bw.setBeanInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via constructor failed", ex)__		}_	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,final,string,bean,name,final,root,bean,definition,mbd,nullable,constructor,chosen,ctors,nullable,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,if,constructor,to,use,null,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,linked,list,unsatisfied,dependency,exception,causes,null,for,constructor,candidate,candidates,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,constructor,properties,checker,evaluate,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,get,user,declared,constructor,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,logger,is,trace,enabled,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,try,final,instantiation,strategy,strategy,bean,factory,get,instantiation,strategy,object,bean,instance,if,system,get,security,manager,null,final,constructor,ctor,to,use,constructor,to,use,final,object,arguments,to,use,args,to,use,bean,instance,access,controller,do,privileged,privileged,action,object,strategy,instantiate,mbd,bean,name,bean,factory,ctor,to,use,arguments,to,use,bean,factory,get,access,control,context,else,bean,instance,strategy,instantiate,mbd,bean,name,this,bean,factory,constructor,to,use,args,to,use,bw,set,bean,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,constructor,failed,ex
ConstructorResolver -> public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, 			@Nullable Constructor<?>[] chosenCtors, @Nullable final Object[] explicitArgs);1530174524;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd,_			@Nullable Constructor<?>[] chosenCtors, @Nullable final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor<?> constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve)__			}_		}__		if (constructorToUse == null) {_			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			_			Constructor<?>[] candidates = chosenCtors__			if (candidates == null) {_				Class<?> beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_							"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}_			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor<?>> ambiguousConstructors = null__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Constructor<?> candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)__						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames,_								getUserDeclaredConstructor(candidate), autowiring)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (logger.isTraceEnabled()) {_							logger.trace("Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						_						if (causes == null) {_							causes = new LinkedList<>()__						}_						causes.add(ex)__						continue__					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		try {_			final InstantiationStrategy strategy = this.beanFactory.getInstantiationStrategy()__			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Constructor<?> ctorToUse = constructorToUse__				final Object[] argumentsToUse = argsToUse__				beanInstance = AccessController.doPrivileged((PrivilegedAction<Object>) () ->_						strategy.instantiate(mbd, beanName, this.beanFactory, ctorToUse, argumentsToUse),_						this.beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = strategy.instantiate(mbd, beanName, this.beanFactory, constructorToUse, argsToUse)__			}__			bw.setBeanInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via constructor failed", ex)__		}_	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,final,string,bean,name,final,root,bean,definition,mbd,nullable,constructor,chosen,ctors,nullable,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,if,constructor,to,use,null,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,linked,list,unsatisfied,dependency,exception,causes,null,for,constructor,candidate,candidates,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,constructor,properties,checker,evaluate,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,get,user,declared,constructor,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,logger,is,trace,enabled,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,try,final,instantiation,strategy,strategy,this,bean,factory,get,instantiation,strategy,object,bean,instance,if,system,get,security,manager,null,final,constructor,ctor,to,use,constructor,to,use,final,object,arguments,to,use,args,to,use,bean,instance,access,controller,do,privileged,privileged,action,object,strategy,instantiate,mbd,bean,name,this,bean,factory,ctor,to,use,arguments,to,use,this,bean,factory,get,access,control,context,else,bean,instance,strategy,instantiate,mbd,bean,name,this,bean,factory,constructor,to,use,args,to,use,bw,set,bean,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,constructor,failed,ex
ConstructorResolver -> public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, 			@Nullable Constructor<?>[] chosenCtors, @Nullable final Object[] explicitArgs);1532385723;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd,_			@Nullable Constructor<?>[] chosenCtors, @Nullable final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor<?> constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve, true)__			}_		}__		if (constructorToUse == null) {_			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			_			Constructor<?>[] candidates = chosenCtors__			if (candidates == null) {_				Class<?> beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_							"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}_			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor<?>> ambiguousConstructors = null__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Constructor<?> candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)__						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames,_								getUserDeclaredConstructor(candidate), autowiring, candidates.length == 1)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (logger.isTraceEnabled()) {_							logger.trace("Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						_						if (causes == null) {_							causes = new LinkedList<>()__						}_						causes.add(ex)__						continue__					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		try {_			final InstantiationStrategy strategy = this.beanFactory.getInstantiationStrategy()__			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Constructor<?> ctorToUse = constructorToUse__				final Object[] argumentsToUse = argsToUse__				beanInstance = AccessController.doPrivileged((PrivilegedAction<Object>) () ->_						strategy.instantiate(mbd, beanName, this.beanFactory, ctorToUse, argumentsToUse),_						this.beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = strategy.instantiate(mbd, beanName, this.beanFactory, constructorToUse, argsToUse)__			}__			bw.setBeanInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via constructor failed", ex)__		}_	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,final,string,bean,name,final,root,bean,definition,mbd,nullable,constructor,chosen,ctors,nullable,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,true,if,constructor,to,use,null,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,linked,list,unsatisfied,dependency,exception,causes,null,for,constructor,candidate,candidates,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,constructor,properties,checker,evaluate,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,get,user,declared,constructor,candidate,autowiring,candidates,length,1,catch,unsatisfied,dependency,exception,ex,if,logger,is,trace,enabled,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,try,final,instantiation,strategy,strategy,this,bean,factory,get,instantiation,strategy,object,bean,instance,if,system,get,security,manager,null,final,constructor,ctor,to,use,constructor,to,use,final,object,arguments,to,use,args,to,use,bean,instance,access,controller,do,privileged,privileged,action,object,strategy,instantiate,mbd,bean,name,this,bean,factory,ctor,to,use,arguments,to,use,this,bean,factory,get,access,control,context,else,bean,instance,strategy,instantiate,mbd,bean,name,this,bean,factory,constructor,to,use,args,to,use,bw,set,bean,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,constructor,failed,ex
ConstructorResolver -> public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, 			@Nullable Constructor<?>[] chosenCtors, @Nullable final Object[] explicitArgs);1532430234;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd,_			@Nullable Constructor<?>[] chosenCtors, @Nullable final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor<?> constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve, true)__			}_		}__		if (constructorToUse == null) {_			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			_			Constructor<?>[] candidates = chosenCtors__			if (candidates == null) {_				Class<?> beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_							"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}_			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor<?>> ambiguousConstructors = null__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Constructor<?> candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)__						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames,_								getUserDeclaredConstructor(candidate), autowiring, candidates.length == 1)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (logger.isTraceEnabled()) {_							logger.trace("Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						_						if (causes == null) {_							causes = new LinkedList<>()__						}_						causes.add(ex)__						continue__					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		try {_			final InstantiationStrategy strategy = this.beanFactory.getInstantiationStrategy()__			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Constructor<?> ctorToUse = constructorToUse__				final Object[] argumentsToUse = argsToUse__				beanInstance = AccessController.doPrivileged((PrivilegedAction<Object>) () ->_						strategy.instantiate(mbd, beanName, this.beanFactory, ctorToUse, argumentsToUse),_						this.beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = strategy.instantiate(mbd, beanName, this.beanFactory, constructorToUse, argsToUse)__			}__			bw.setBeanInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via constructor failed", ex)__		}_	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,final,string,bean,name,final,root,bean,definition,mbd,nullable,constructor,chosen,ctors,nullable,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,true,if,constructor,to,use,null,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,linked,list,unsatisfied,dependency,exception,causes,null,for,constructor,candidate,candidates,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,constructor,properties,checker,evaluate,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,get,user,declared,constructor,candidate,autowiring,candidates,length,1,catch,unsatisfied,dependency,exception,ex,if,logger,is,trace,enabled,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,try,final,instantiation,strategy,strategy,this,bean,factory,get,instantiation,strategy,object,bean,instance,if,system,get,security,manager,null,final,constructor,ctor,to,use,constructor,to,use,final,object,arguments,to,use,args,to,use,bean,instance,access,controller,do,privileged,privileged,action,object,strategy,instantiate,mbd,bean,name,this,bean,factory,ctor,to,use,arguments,to,use,this,bean,factory,get,access,control,context,else,bean,instance,strategy,instantiate,mbd,bean,name,this,bean,factory,constructor,to,use,args,to,use,bw,set,bean,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,constructor,failed,ex
ConstructorResolver -> public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd, 			@Nullable Constructor<?>[] chosenCtors, @Nullable final Object[] explicitArgs);1532577558;"autowire constructor" (with constructor arguments by type) behavior._Also applied if explicit constructor argument values are specified,_matching all remaining arguments with beans from the bean factory._<p>This corresponds to constructor injection: In this mode, a Spring_bean factory is able to host components that expect constructor-based_dependency resolution._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param chosenCtors chosen candidate constructors (or {@code null} if none)_@param explicitArgs argument values passed in programmatically via the getBean method,_or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper autowireConstructor(final String beanName, final RootBeanDefinition mbd,_			@Nullable Constructor<?>[] chosenCtors, @Nullable final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Constructor<?> constructorToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				constructorToUse = (Constructor<?>) mbd.resolvedConstructorOrFactoryMethod__				if (constructorToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, constructorToUse, argsToResolve, true)__			}_		}__		if (constructorToUse == null) {_			_			boolean autowiring = (chosenCtors != null ||_					mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			ConstructorArgumentValues resolvedValues = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			_			Constructor<?>[] candidates = chosenCtors__			if (candidates == null) {_				Class<?> beanClass = mbd.getBeanClass()__				try {_					candidates = (mbd.isNonPublicAccessAllowed() ?_							beanClass.getDeclaredConstructors() : beanClass.getConstructors())__				}_				catch (Throwable ex) {_					throw new BeanCreationException(mbd.getResourceDescription(), beanName,_							"Resolution of declared constructors on bean Class [" + beanClass.getName() +_							"] from ClassLoader [" + beanClass.getClassLoader() + "] failed", ex)__				}_			}_			AutowireUtils.sortConstructors(candidates)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Constructor<?>> ambiguousConstructors = null__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Constructor<?> candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (constructorToUse != null && argsToUse.length > paramTypes.length) {_					_					_					break__				}_				if (paramTypes.length < minNrOfArgs) {_					continue__				}__				ArgumentsHolder argsHolder__				if (resolvedValues != null) {_					try {_						String[] paramNames = ConstructorPropertiesChecker.evaluate(candidate, paramTypes.length)__						if (paramNames == null) {_							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_						}_						argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames,_								getUserDeclaredConstructor(candidate), autowiring, candidates.length == 1)__					}_					catch (UnsatisfiedDependencyException ex) {_						if (logger.isTraceEnabled()) {_							logger.trace("Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex)__						}_						_						if (causes == null) {_							causes = new LinkedList<>()__						}_						causes.add(ex)__						continue__					}_				}_				else {_					_					if (paramTypes.length != explicitArgs.length) {_						continue__					}_					argsHolder = new ArgumentsHolder(explicitArgs)__				}__				int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_						argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__				_				if (typeDiffWeight < minTypeDiffWeight) {_					constructorToUse = candidate__					argsHolderToUse = argsHolder__					argsToUse = argsHolder.arguments__					minTypeDiffWeight = typeDiffWeight__					ambiguousConstructors = null__				}_				else if (constructorToUse != null && typeDiffWeight == minTypeDiffWeight) {_					if (ambiguousConstructors == null) {_						ambiguousConstructors = new LinkedHashSet<>()__						ambiguousConstructors.add(constructorToUse)__					}_					ambiguousConstructors.add(candidate)__				}_			}__			if (constructorToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Could not resolve matching constructor " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)")__			}_			else if (ambiguousConstructors != null && !mbd.isLenientConstructorResolution()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous constructor matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousConstructors)__			}__			if (explicitArgs == null) {_				argsHolderToUse.storeCache(mbd, constructorToUse)__			}_		}__		try {_			final InstantiationStrategy strategy = this.beanFactory.getInstantiationStrategy()__			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Constructor<?> ctorToUse = constructorToUse__				final Object[] argumentsToUse = argsToUse__				beanInstance = AccessController.doPrivileged((PrivilegedAction<Object>) () ->_						strategy.instantiate(mbd, beanName, this.beanFactory, ctorToUse, argumentsToUse),_						this.beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = strategy.instantiate(mbd, beanName, this.beanFactory, constructorToUse, argsToUse)__			}__			bw.setBeanInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via constructor failed", ex)__		}_	};autowire,constructor,with,constructor,arguments,by,type,behavior,also,applied,if,explicit,constructor,argument,values,are,specified,matching,all,remaining,arguments,with,beans,from,the,bean,factory,p,this,corresponds,to,constructor,injection,in,this,mode,a,spring,bean,factory,is,able,to,host,components,that,expect,constructor,based,dependency,resolution,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,chosen,ctors,chosen,candidate,constructors,or,code,null,if,none,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,autowire,constructor,final,string,bean,name,final,root,bean,definition,mbd,nullable,constructor,chosen,ctors,nullable,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,constructor,constructor,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,constructor,to,use,constructor,mbd,resolved,constructor,or,factory,method,if,constructor,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,constructor,to,use,args,to,resolve,true,if,constructor,to,use,null,boolean,autowiring,chosen,ctors,null,mbd,get,resolved,autowire,mode,root,bean,definition,constructor,argument,values,resolved,values,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,constructor,candidates,chosen,ctors,if,candidates,null,class,bean,class,mbd,get,bean,class,try,candidates,mbd,is,non,public,access,allowed,bean,class,get,declared,constructors,bean,class,get,constructors,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,resolution,of,declared,constructors,on,bean,class,bean,class,get,name,from,class,loader,bean,class,get,class,loader,failed,ex,autowire,utils,sort,constructors,candidates,int,min,type,diff,weight,integer,set,constructor,ambiguous,constructors,null,linked,list,unsatisfied,dependency,exception,causes,null,for,constructor,candidate,candidates,class,param,types,candidate,get,parameter,types,if,constructor,to,use,null,args,to,use,length,param,types,length,break,if,param,types,length,min,nr,of,args,continue,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,constructor,properties,checker,evaluate,candidate,param,types,length,if,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,get,user,declared,constructor,candidate,autowiring,candidates,length,1,catch,unsatisfied,dependency,exception,ex,if,logger,is,trace,enabled,logger,trace,ignoring,constructor,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,constructor,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,constructors,null,else,if,constructor,to,use,null,type,diff,weight,min,type,diff,weight,if,ambiguous,constructors,null,ambiguous,constructors,new,linked,hash,set,ambiguous,constructors,add,constructor,to,use,ambiguous,constructors,add,candidate,if,constructor,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,could,not,resolve,matching,constructor,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,else,if,ambiguous,constructors,null,mbd,is,lenient,constructor,resolution,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,constructor,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,constructors,if,explicit,args,null,args,holder,to,use,store,cache,mbd,constructor,to,use,try,final,instantiation,strategy,strategy,this,bean,factory,get,instantiation,strategy,object,bean,instance,if,system,get,security,manager,null,final,constructor,ctor,to,use,constructor,to,use,final,object,arguments,to,use,args,to,use,bean,instance,access,controller,do,privileged,privileged,action,object,strategy,instantiate,mbd,bean,name,this,bean,factory,ctor,to,use,arguments,to,use,this,bean,factory,get,access,control,context,else,bean,instance,strategy,instantiate,mbd,bean,name,this,bean,factory,constructor,to,use,args,to,use,bw,set,bean,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,constructor,failed,ex
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod( 			final String beanName, final RootBeanDefinition mbd, @Nullable final Object[] explicitArgs);1503007895;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(_			final String beanName, final RootBeanDefinition mbd, @Nullable final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class<?> factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) {_				throw new ImplicitlyAppearedSingletonException()__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)___			Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)__			List<Method> candidateSet = new ArrayList<>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_					candidateSet.add(candidate)__				}_			}_			Method[] candidates = candidateSet.toArray(new Method[candidateSet.size()])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Method candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (resolvedValues != null) {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(_									beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (this.beanFactory.logger.isTraceEnabled()) {_								this.beanFactory.logger.trace("Ignoring factory method [" + candidate +_										"] of bean '" + beanName + "': " + ex)__							}_							_							if (causes == null) {_								causes = new LinkedList<>()__							}_							causes.add(ex)__							continue__						}_					}__					else {_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					_					_					_					_					_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&_							!mbd.isLenientConstructorResolution() &&_							paramTypes.length == factoryMethodToUse.getParameterCount() &&_							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				List<String> argTypes = new ArrayList<>(minNrOfArgs)__				if (explicitArgs != null) {_					for (Object arg : explicitArgs) {_						argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null")__					}_				}_				else {_					Set<ValueHolder> valueHolders = new LinkedHashSet<>(resolvedValues.getArgumentCount())__					valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())__					valueHolders.addAll(resolvedValues.getGenericArgumentValues())__					for (ValueHolder value : valueHolders) {_						String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) :_								(value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"))__						argTypes.add(argType)__					}_				}_				String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(minNrOfArgs > 0 ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class == factoryMethodToUse.getReturnType()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Object fb = factoryBean__				final Method factoryMethod = factoryMethodToUse__				final Object[] args = argsToUse__				beanInstance = AccessController.doPrivileged((PrivilegedAction<Object>) () ->_						beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, beanFactory, fb, factoryMethod, args),_						beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)__			}__			bw.setBeanInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via factory method failed", ex)__		}_	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,final,string,bean,name,final,root,bean,definition,mbd,nullable,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,mbd,is,singleton,this,bean,factory,contains,singleton,bean,name,throw,new,implicitly,appeared,singleton,exception,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,get,candidate,methods,factory,class,mbd,list,method,candidate,set,new,array,list,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,candidate,set,add,candidate,method,candidates,candidate,set,to,array,new,method,candidate,set,size,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,linked,list,unsatisfied,dependency,exception,causes,null,for,method,candidate,candidates,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,mbd,is,lenient,constructor,resolution,param,types,length,factory,method,to,use,get,parameter,count,arrays,equals,param,types,factory,method,to,use,get,parameter,types,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,list,string,arg,types,new,array,list,min,nr,of,args,if,explicit,args,null,for,object,arg,explicit,args,arg,types,add,arg,null,arg,get,class,get,simple,name,null,else,set,value,holder,value,holders,new,linked,hash,set,resolved,values,get,argument,count,value,holders,add,all,resolved,values,get,indexed,argument,values,values,value,holders,add,all,resolved,values,get,generic,argument,values,for,value,holder,value,value,holders,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,null,value,get,value,get,class,get,simple,name,null,arg,types,add,arg,type,string,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,min,nr,of,args,0,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,object,fb,factory,bean,final,method,factory,method,factory,method,to,use,final,object,args,args,to,use,bean,instance,access,controller,do,privileged,privileged,action,object,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,fb,factory,method,args,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,factory,bean,factory,method,to,use,args,to,use,bw,set,bean,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,factory,method,failed,ex
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod( 			final String beanName, final RootBeanDefinition mbd, @Nullable final Object[] explicitArgs);1503414318;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(_			final String beanName, final RootBeanDefinition mbd, @Nullable final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class<?> factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) {_				throw new ImplicitlyAppearedSingletonException()__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)___			Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)__			List<Method> candidateSet = new ArrayList<>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_					candidateSet.add(candidate)__				}_			}_			Method[] candidates = candidateSet.toArray(new Method[candidateSet.size()])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Method candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (resolvedValues != null) {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(_									beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (this.beanFactory.logger.isTraceEnabled()) {_								this.beanFactory.logger.trace("Ignoring factory method [" + candidate +_										"] of bean '" + beanName + "': " + ex)__							}_							_							if (causes == null) {_								causes = new LinkedList<>()__							}_							causes.add(ex)__							continue__						}_					}__					else {_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					_					_					_					_					_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&_							!mbd.isLenientConstructorResolution() &&_							paramTypes.length == factoryMethodToUse.getParameterCount() &&_							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				List<String> argTypes = new ArrayList<>(minNrOfArgs)__				if (explicitArgs != null) {_					for (Object arg : explicitArgs) {_						argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null")__					}_				}_				else {_					Set<ValueHolder> valueHolders = new LinkedHashSet<>(resolvedValues.getArgumentCount())__					valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())__					valueHolders.addAll(resolvedValues.getGenericArgumentValues())__					for (ValueHolder value : valueHolders) {_						String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) :_								(value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"))__						argTypes.add(argType)__					}_				}_				String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(minNrOfArgs > 0 ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class == factoryMethodToUse.getReturnType()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Object fb = factoryBean__				final Method factoryMethod = factoryMethodToUse__				final Object[] args = argsToUse__				beanInstance = AccessController.doPrivileged((PrivilegedAction<Object>) () ->_						beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, beanFactory, fb, factoryMethod, args),_						beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)__			}__			bw.setBeanInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via factory method failed", ex)__		}_	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,final,string,bean,name,final,root,bean,definition,mbd,nullable,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,mbd,is,singleton,this,bean,factory,contains,singleton,bean,name,throw,new,implicitly,appeared,singleton,exception,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,get,candidate,methods,factory,class,mbd,list,method,candidate,set,new,array,list,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,candidate,set,add,candidate,method,candidates,candidate,set,to,array,new,method,candidate,set,size,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,linked,list,unsatisfied,dependency,exception,causes,null,for,method,candidate,candidates,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,mbd,is,lenient,constructor,resolution,param,types,length,factory,method,to,use,get,parameter,count,arrays,equals,param,types,factory,method,to,use,get,parameter,types,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,list,string,arg,types,new,array,list,min,nr,of,args,if,explicit,args,null,for,object,arg,explicit,args,arg,types,add,arg,null,arg,get,class,get,simple,name,null,else,set,value,holder,value,holders,new,linked,hash,set,resolved,values,get,argument,count,value,holders,add,all,resolved,values,get,indexed,argument,values,values,value,holders,add,all,resolved,values,get,generic,argument,values,for,value,holder,value,value,holders,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,null,value,get,value,get,class,get,simple,name,null,arg,types,add,arg,type,string,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,min,nr,of,args,0,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,object,fb,factory,bean,final,method,factory,method,factory,method,to,use,final,object,args,args,to,use,bean,instance,access,controller,do,privileged,privileged,action,object,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,fb,factory,method,args,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,factory,bean,factory,method,to,use,args,to,use,bw,set,bean,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,factory,method,failed,ex
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod( 			final String beanName, final RootBeanDefinition mbd, @Nullable final Object[] explicitArgs);1506551472;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(_			final String beanName, final RootBeanDefinition mbd, @Nullable final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class<?> factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) {_				throw new ImplicitlyAppearedSingletonException()__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)___			Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)__			List<Method> candidateSet = new ArrayList<>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_					candidateSet.add(candidate)__				}_			}_			Method[] candidates = candidateSet.toArray(new Method[candidateSet.size()])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__				resolvedValues = new ConstructorArgumentValues()__				minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__			}__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Method candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (resolvedValues != null) {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(_									beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (this.beanFactory.logger.isTraceEnabled()) {_								this.beanFactory.logger.trace("Ignoring factory method [" + candidate +_										"] of bean '" + beanName + "': " + ex)__							}_							_							if (causes == null) {_								causes = new LinkedList<>()__							}_							causes.add(ex)__							continue__						}_					}__					else {_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					_					_					_					_					_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&_							!mbd.isLenientConstructorResolution() &&_							paramTypes.length == factoryMethodToUse.getParameterCount() &&_							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				List<String> argTypes = new ArrayList<>(minNrOfArgs)__				if (explicitArgs != null) {_					for (Object arg : explicitArgs) {_						argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null")__					}_				}_				else {_					Set<ValueHolder> valueHolders = new LinkedHashSet<>(resolvedValues.getArgumentCount())__					valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())__					valueHolders.addAll(resolvedValues.getGenericArgumentValues())__					for (ValueHolder value : valueHolders) {_						String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) :_								(value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"))__						argTypes.add(argType)__					}_				}_				String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(minNrOfArgs > 0 ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class == factoryMethodToUse.getReturnType()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Object fb = factoryBean__				final Method factoryMethod = factoryMethodToUse__				final Object[] args = argsToUse__				beanInstance = AccessController.doPrivileged((PrivilegedAction<Object>) () ->_						beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, beanFactory, fb, factoryMethod, args),_						beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)__			}__			bw.setBeanInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via factory method failed", ex)__		}_	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,final,string,bean,name,final,root,bean,definition,mbd,nullable,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,mbd,is,singleton,this,bean,factory,contains,singleton,bean,name,throw,new,implicitly,appeared,singleton,exception,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,get,candidate,methods,factory,class,mbd,list,method,candidate,set,new,array,list,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,candidate,set,add,candidate,method,candidates,candidate,set,to,array,new,method,candidate,set,size,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,linked,list,unsatisfied,dependency,exception,causes,null,for,method,candidate,candidates,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,resolved,values,null,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,else,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,mbd,is,lenient,constructor,resolution,param,types,length,factory,method,to,use,get,parameter,count,arrays,equals,param,types,factory,method,to,use,get,parameter,types,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,list,string,arg,types,new,array,list,min,nr,of,args,if,explicit,args,null,for,object,arg,explicit,args,arg,types,add,arg,null,arg,get,class,get,simple,name,null,else,set,value,holder,value,holders,new,linked,hash,set,resolved,values,get,argument,count,value,holders,add,all,resolved,values,get,indexed,argument,values,values,value,holders,add,all,resolved,values,get,generic,argument,values,for,value,holder,value,value,holders,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,null,value,get,value,get,class,get,simple,name,null,arg,types,add,arg,type,string,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,min,nr,of,args,0,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,object,fb,factory,bean,final,method,factory,method,factory,method,to,use,final,object,args,args,to,use,bean,instance,access,controller,do,privileged,privileged,action,object,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,fb,factory,method,args,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,factory,bean,factory,method,to,use,args,to,use,bw,set,bean,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,factory,method,failed,ex
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod( 			final String beanName, final RootBeanDefinition mbd, @Nullable final Object[] explicitArgs);1510606271;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(_			final String beanName, final RootBeanDefinition mbd, @Nullable final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class<?> factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) {_				throw new ImplicitlyAppearedSingletonException()__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)___			Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)__			List<Method> candidateSet = new ArrayList<>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_					candidateSet.add(candidate)__				}_			}_			Method[] candidates = candidateSet.toArray(new Method[candidateSet.size()])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				if (mbd.hasConstructorArgumentValues()) {_					ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__					resolvedValues = new ConstructorArgumentValues()__					minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__				}_				else {_					minNrOfArgs = 0__				}_			}__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Method candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (explicitArgs != null){_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}_					else {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(_									beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (this.beanFactory.logger.isTraceEnabled()) {_								this.beanFactory.logger.trace("Ignoring factory method [" + candidate +_										"] of bean '" + beanName + "': " + ex)__							}_							_							if (causes == null) {_								causes = new LinkedList<>()__							}_							causes.add(ex)__							continue__						}_					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					_					_					_					_					_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&_							!mbd.isLenientConstructorResolution() &&_							paramTypes.length == factoryMethodToUse.getParameterCount() &&_							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				List<String> argTypes = new ArrayList<>(minNrOfArgs)__				if (explicitArgs != null) {_					for (Object arg : explicitArgs) {_						argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null")__					}_				}_				else if (resolvedValues != null){_					Set<ValueHolder> valueHolders = new LinkedHashSet<>(resolvedValues.getArgumentCount())__					valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())__					valueHolders.addAll(resolvedValues.getGenericArgumentValues())__					for (ValueHolder value : valueHolders) {_						String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) :_								(value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"))__						argTypes.add(argType)__					}_				}_				String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(minNrOfArgs > 0 ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class == factoryMethodToUse.getReturnType()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Object fb = factoryBean__				final Method factoryMethod = factoryMethodToUse__				final Object[] args = argsToUse__				beanInstance = AccessController.doPrivileged((PrivilegedAction<Object>) () ->_						beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, beanFactory, fb, factoryMethod, args),_						beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)__			}__			bw.setBeanInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via factory method failed", ex)__		}_	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,final,string,bean,name,final,root,bean,definition,mbd,nullable,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,mbd,is,singleton,this,bean,factory,contains,singleton,bean,name,throw,new,implicitly,appeared,singleton,exception,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,get,candidate,methods,factory,class,mbd,list,method,candidate,set,new,array,list,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,candidate,set,add,candidate,method,candidates,candidate,set,to,array,new,method,candidate,set,size,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,if,mbd,has,constructor,argument,values,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,else,min,nr,of,args,0,linked,list,unsatisfied,dependency,exception,causes,null,for,method,candidate,candidates,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,explicit,args,null,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,else,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,mbd,is,lenient,constructor,resolution,param,types,length,factory,method,to,use,get,parameter,count,arrays,equals,param,types,factory,method,to,use,get,parameter,types,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,list,string,arg,types,new,array,list,min,nr,of,args,if,explicit,args,null,for,object,arg,explicit,args,arg,types,add,arg,null,arg,get,class,get,simple,name,null,else,if,resolved,values,null,set,value,holder,value,holders,new,linked,hash,set,resolved,values,get,argument,count,value,holders,add,all,resolved,values,get,indexed,argument,values,values,value,holders,add,all,resolved,values,get,generic,argument,values,for,value,holder,value,value,holders,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,null,value,get,value,get,class,get,simple,name,null,arg,types,add,arg,type,string,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,min,nr,of,args,0,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,object,fb,factory,bean,final,method,factory,method,factory,method,to,use,final,object,args,args,to,use,bean,instance,access,controller,do,privileged,privileged,action,object,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,fb,factory,method,args,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,factory,bean,factory,method,to,use,args,to,use,bw,set,bean,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,factory,method,failed,ex
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod( 			final String beanName, final RootBeanDefinition mbd, @Nullable final Object[] explicitArgs);1519295386;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(_			final String beanName, final RootBeanDefinition mbd, @Nullable final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class<?> factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) {_				throw new ImplicitlyAppearedSingletonException()__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)___			Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)__			List<Method> candidateSet = new ArrayList<>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_					candidateSet.add(candidate)__				}_			}_			Method[] candidates = candidateSet.toArray(new Method[0])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				if (mbd.hasConstructorArgumentValues()) {_					ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__					resolvedValues = new ConstructorArgumentValues()__					minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__				}_				else {_					minNrOfArgs = 0__				}_			}__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Method candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (explicitArgs != null){_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}_					else {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(_									beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (this.beanFactory.logger.isTraceEnabled()) {_								this.beanFactory.logger.trace("Ignoring factory method [" + candidate +_										"] of bean '" + beanName + "': " + ex)__							}_							_							if (causes == null) {_								causes = new LinkedList<>()__							}_							causes.add(ex)__							continue__						}_					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					_					_					_					_					_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&_							!mbd.isLenientConstructorResolution() &&_							paramTypes.length == factoryMethodToUse.getParameterCount() &&_							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				List<String> argTypes = new ArrayList<>(minNrOfArgs)__				if (explicitArgs != null) {_					for (Object arg : explicitArgs) {_						argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null")__					}_				}_				else if (resolvedValues != null){_					Set<ValueHolder> valueHolders = new LinkedHashSet<>(resolvedValues.getArgumentCount())__					valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())__					valueHolders.addAll(resolvedValues.getGenericArgumentValues())__					for (ValueHolder value : valueHolders) {_						String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) :_								(value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"))__						argTypes.add(argType)__					}_				}_				String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(minNrOfArgs > 0 ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class == factoryMethodToUse.getReturnType()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Object fb = factoryBean__				final Method factoryMethod = factoryMethodToUse__				final Object[] args = argsToUse__				beanInstance = AccessController.doPrivileged((PrivilegedAction<Object>) () ->_						beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, beanFactory, fb, factoryMethod, args),_						beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)__			}__			bw.setBeanInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via factory method failed", ex)__		}_	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,final,string,bean,name,final,root,bean,definition,mbd,nullable,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,mbd,is,singleton,this,bean,factory,contains,singleton,bean,name,throw,new,implicitly,appeared,singleton,exception,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,get,candidate,methods,factory,class,mbd,list,method,candidate,set,new,array,list,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,candidate,set,add,candidate,method,candidates,candidate,set,to,array,new,method,0,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,if,mbd,has,constructor,argument,values,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,else,min,nr,of,args,0,linked,list,unsatisfied,dependency,exception,causes,null,for,method,candidate,candidates,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,explicit,args,null,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,else,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,mbd,is,lenient,constructor,resolution,param,types,length,factory,method,to,use,get,parameter,count,arrays,equals,param,types,factory,method,to,use,get,parameter,types,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,list,string,arg,types,new,array,list,min,nr,of,args,if,explicit,args,null,for,object,arg,explicit,args,arg,types,add,arg,null,arg,get,class,get,simple,name,null,else,if,resolved,values,null,set,value,holder,value,holders,new,linked,hash,set,resolved,values,get,argument,count,value,holders,add,all,resolved,values,get,indexed,argument,values,values,value,holders,add,all,resolved,values,get,generic,argument,values,for,value,holder,value,value,holders,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,null,value,get,value,get,class,get,simple,name,null,arg,types,add,arg,type,string,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,min,nr,of,args,0,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,object,fb,factory,bean,final,method,factory,method,factory,method,to,use,final,object,args,args,to,use,bean,instance,access,controller,do,privileged,privileged,action,object,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,fb,factory,method,args,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,factory,bean,factory,method,to,use,args,to,use,bw,set,bean,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,factory,method,failed,ex
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod( 			final String beanName, final RootBeanDefinition mbd, @Nullable final Object[] explicitArgs);1519560860;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(_			final String beanName, final RootBeanDefinition mbd, @Nullable final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class<?> factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) {_				throw new ImplicitlyAppearedSingletonException()__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)___			Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)__			List<Method> candidateSet = new ArrayList<>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_					candidateSet.add(candidate)__				}_			}_			Method[] candidates = candidateSet.toArray(new Method[0])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				if (mbd.hasConstructorArgumentValues()) {_					ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__					resolvedValues = new ConstructorArgumentValues()__					minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__				}_				else {_					minNrOfArgs = 0__				}_			}__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Method candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (explicitArgs != null){_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}_					else {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(_									beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (this.beanFactory.logger.isTraceEnabled()) {_								this.beanFactory.logger.trace("Ignoring factory method [" + candidate +_										"] of bean '" + beanName + "': " + ex)__							}_							_							if (causes == null) {_								causes = new LinkedList<>()__							}_							causes.add(ex)__							continue__						}_					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					_					_					_					_					_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&_							!mbd.isLenientConstructorResolution() &&_							paramTypes.length == factoryMethodToUse.getParameterCount() &&_							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				List<String> argTypes = new ArrayList<>(minNrOfArgs)__				if (explicitArgs != null) {_					for (Object arg : explicitArgs) {_						argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null")__					}_				}_				else if (resolvedValues != null){_					Set<ValueHolder> valueHolders = new LinkedHashSet<>(resolvedValues.getArgumentCount())__					valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())__					valueHolders.addAll(resolvedValues.getGenericArgumentValues())__					for (ValueHolder value : valueHolders) {_						String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) :_								(value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"))__						argTypes.add(argType)__					}_				}_				String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(minNrOfArgs > 0 ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class == factoryMethodToUse.getReturnType()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Object fb = factoryBean__				final Method factoryMethod = factoryMethodToUse__				final Object[] args = argsToUse__				beanInstance = AccessController.doPrivileged((PrivilegedAction<Object>) () ->_						beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, beanFactory, fb, factoryMethod, args),_						beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)__			}__			bw.setBeanInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via factory method failed", ex)__		}_	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,final,string,bean,name,final,root,bean,definition,mbd,nullable,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,mbd,is,singleton,this,bean,factory,contains,singleton,bean,name,throw,new,implicitly,appeared,singleton,exception,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,get,candidate,methods,factory,class,mbd,list,method,candidate,set,new,array,list,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,candidate,set,add,candidate,method,candidates,candidate,set,to,array,new,method,0,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,if,mbd,has,constructor,argument,values,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,else,min,nr,of,args,0,linked,list,unsatisfied,dependency,exception,causes,null,for,method,candidate,candidates,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,explicit,args,null,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,else,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,this,bean,factory,logger,is,trace,enabled,this,bean,factory,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,mbd,is,lenient,constructor,resolution,param,types,length,factory,method,to,use,get,parameter,count,arrays,equals,param,types,factory,method,to,use,get,parameter,types,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,list,string,arg,types,new,array,list,min,nr,of,args,if,explicit,args,null,for,object,arg,explicit,args,arg,types,add,arg,null,arg,get,class,get,simple,name,null,else,if,resolved,values,null,set,value,holder,value,holders,new,linked,hash,set,resolved,values,get,argument,count,value,holders,add,all,resolved,values,get,indexed,argument,values,values,value,holders,add,all,resolved,values,get,generic,argument,values,for,value,holder,value,value,holders,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,null,value,get,value,get,class,get,simple,name,null,arg,types,add,arg,type,string,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,min,nr,of,args,0,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,object,fb,factory,bean,final,method,factory,method,factory,method,to,use,final,object,args,args,to,use,bean,instance,access,controller,do,privileged,privileged,action,object,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,fb,factory,method,args,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,factory,bean,factory,method,to,use,args,to,use,bw,set,bean,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,factory,method,failed,ex
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod( 			final String beanName, final RootBeanDefinition mbd, @Nullable final Object[] explicitArgs);1527623493;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(_			final String beanName, final RootBeanDefinition mbd, @Nullable final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class<?> factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) {_				throw new ImplicitlyAppearedSingletonException()__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)___			Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)__			List<Method> candidateSet = new ArrayList<>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_					candidateSet.add(candidate)__				}_			}_			Method[] candidates = candidateSet.toArray(new Method[0])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				if (mbd.hasConstructorArgumentValues()) {_					ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__					resolvedValues = new ConstructorArgumentValues()__					minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__				}_				else {_					minNrOfArgs = 0__				}_			}__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Method candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (explicitArgs != null){_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}_					else {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(_									beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (logger.isTraceEnabled()) {_								logger.trace("Ignoring factory method [" + candidate + "] of bean '" + beanName + "': " + ex)__							}_							_							if (causes == null) {_								causes = new LinkedList<>()__							}_							causes.add(ex)__							continue__						}_					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					_					_					_					_					_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&_							!mbd.isLenientConstructorResolution() &&_							paramTypes.length == factoryMethodToUse.getParameterCount() &&_							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				List<String> argTypes = new ArrayList<>(minNrOfArgs)__				if (explicitArgs != null) {_					for (Object arg : explicitArgs) {_						argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null")__					}_				}_				else if (resolvedValues != null){_					Set<ValueHolder> valueHolders = new LinkedHashSet<>(resolvedValues.getArgumentCount())__					valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())__					valueHolders.addAll(resolvedValues.getGenericArgumentValues())__					for (ValueHolder value : valueHolders) {_						String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) :_								(value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"))__						argTypes.add(argType)__					}_				}_				String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(minNrOfArgs > 0 ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class == factoryMethodToUse.getReturnType()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Object fb = factoryBean__				final Method factoryMethod = factoryMethodToUse__				final Object[] args = argsToUse__				beanInstance = AccessController.doPrivileged((PrivilegedAction<Object>) () ->_						beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, beanFactory, fb, factoryMethod, args),_						beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)__			}__			bw.setBeanInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via factory method failed", ex)__		}_	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,final,string,bean,name,final,root,bean,definition,mbd,nullable,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,mbd,is,singleton,this,bean,factory,contains,singleton,bean,name,throw,new,implicitly,appeared,singleton,exception,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,get,candidate,methods,factory,class,mbd,list,method,candidate,set,new,array,list,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,candidate,set,add,candidate,method,candidates,candidate,set,to,array,new,method,0,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,if,mbd,has,constructor,argument,values,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,else,min,nr,of,args,0,linked,list,unsatisfied,dependency,exception,causes,null,for,method,candidate,candidates,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,explicit,args,null,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,else,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,logger,is,trace,enabled,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,mbd,is,lenient,constructor,resolution,param,types,length,factory,method,to,use,get,parameter,count,arrays,equals,param,types,factory,method,to,use,get,parameter,types,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,list,string,arg,types,new,array,list,min,nr,of,args,if,explicit,args,null,for,object,arg,explicit,args,arg,types,add,arg,null,arg,get,class,get,simple,name,null,else,if,resolved,values,null,set,value,holder,value,holders,new,linked,hash,set,resolved,values,get,argument,count,value,holders,add,all,resolved,values,get,indexed,argument,values,values,value,holders,add,all,resolved,values,get,generic,argument,values,for,value,holder,value,value,holders,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,null,value,get,value,get,class,get,simple,name,null,arg,types,add,arg,type,string,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,min,nr,of,args,0,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,object,fb,factory,bean,final,method,factory,method,factory,method,to,use,final,object,args,args,to,use,bean,instance,access,controller,do,privileged,privileged,action,object,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,bean,factory,fb,factory,method,args,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,factory,bean,factory,method,to,use,args,to,use,bw,set,bean,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,factory,method,failed,ex
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod( 			final String beanName, final RootBeanDefinition mbd, @Nullable final Object[] explicitArgs);1530174524;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(_			final String beanName, final RootBeanDefinition mbd, @Nullable final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class<?> factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) {_				throw new ImplicitlyAppearedSingletonException()__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)___			Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)__			List<Method> candidateSet = new ArrayList<>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_					candidateSet.add(candidate)__				}_			}_			Method[] candidates = candidateSet.toArray(new Method[0])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				if (mbd.hasConstructorArgumentValues()) {_					ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__					resolvedValues = new ConstructorArgumentValues()__					minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__				}_				else {_					minNrOfArgs = 0__				}_			}__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Method candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (explicitArgs != null){_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}_					else {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(_									beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (logger.isTraceEnabled()) {_								logger.trace("Ignoring factory method [" + candidate + "] of bean '" + beanName + "': " + ex)__							}_							_							if (causes == null) {_								causes = new LinkedList<>()__							}_							causes.add(ex)__							continue__						}_					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					_					_					_					_					_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&_							!mbd.isLenientConstructorResolution() &&_							paramTypes.length == factoryMethodToUse.getParameterCount() &&_							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				List<String> argTypes = new ArrayList<>(minNrOfArgs)__				if (explicitArgs != null) {_					for (Object arg : explicitArgs) {_						argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null")__					}_				}_				else if (resolvedValues != null){_					Set<ValueHolder> valueHolders = new LinkedHashSet<>(resolvedValues.getArgumentCount())__					valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())__					valueHolders.addAll(resolvedValues.getGenericArgumentValues())__					for (ValueHolder value : valueHolders) {_						String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) :_								(value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"))__						argTypes.add(argType)__					}_				}_				String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(minNrOfArgs > 0 ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class == factoryMethodToUse.getReturnType()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Object fb = factoryBean__				final Method factoryMethod = factoryMethodToUse__				final Object[] args = argsToUse__				beanInstance = AccessController.doPrivileged((PrivilegedAction<Object>) () ->_						this.beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, this.beanFactory, fb, factoryMethod, args),_						this.beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)__			}__			bw.setBeanInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via factory method failed", ex)__		}_	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,final,string,bean,name,final,root,bean,definition,mbd,nullable,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,mbd,is,singleton,this,bean,factory,contains,singleton,bean,name,throw,new,implicitly,appeared,singleton,exception,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,get,candidate,methods,factory,class,mbd,list,method,candidate,set,new,array,list,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,candidate,set,add,candidate,method,candidates,candidate,set,to,array,new,method,0,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,if,mbd,has,constructor,argument,values,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,else,min,nr,of,args,0,linked,list,unsatisfied,dependency,exception,causes,null,for,method,candidate,candidates,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,explicit,args,null,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,else,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,catch,unsatisfied,dependency,exception,ex,if,logger,is,trace,enabled,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,mbd,is,lenient,constructor,resolution,param,types,length,factory,method,to,use,get,parameter,count,arrays,equals,param,types,factory,method,to,use,get,parameter,types,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,list,string,arg,types,new,array,list,min,nr,of,args,if,explicit,args,null,for,object,arg,explicit,args,arg,types,add,arg,null,arg,get,class,get,simple,name,null,else,if,resolved,values,null,set,value,holder,value,holders,new,linked,hash,set,resolved,values,get,argument,count,value,holders,add,all,resolved,values,get,indexed,argument,values,values,value,holders,add,all,resolved,values,get,generic,argument,values,for,value,holder,value,value,holders,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,null,value,get,value,get,class,get,simple,name,null,arg,types,add,arg,type,string,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,min,nr,of,args,0,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,object,fb,factory,bean,final,method,factory,method,factory,method,to,use,final,object,args,args,to,use,bean,instance,access,controller,do,privileged,privileged,action,object,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,fb,factory,method,args,this,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,factory,bean,factory,method,to,use,args,to,use,bw,set,bean,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,factory,method,failed,ex
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod( 			final String beanName, final RootBeanDefinition mbd, @Nullable final Object[] explicitArgs);1532385723;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(_			final String beanName, final RootBeanDefinition mbd, @Nullable final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class<?> factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) {_				throw new ImplicitlyAppearedSingletonException()__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve, true)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)___			Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)__			List<Method> candidateSet = new ArrayList<>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_					candidateSet.add(candidate)__				}_			}_			Method[] candidates = candidateSet.toArray(new Method[0])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				if (mbd.hasConstructorArgumentValues()) {_					ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__					resolvedValues = new ConstructorArgumentValues()__					minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__				}_				else {_					minNrOfArgs = 0__				}_			}__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Method candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (explicitArgs != null){_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}_					else {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw,_									paramTypes, paramNames, candidate, autowiring, candidates.length == 1)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (logger.isTraceEnabled()) {_								logger.trace("Ignoring factory method [" + candidate + "] of bean '" + beanName + "': " + ex)__							}_							_							if (causes == null) {_								causes = new LinkedList<>()__							}_							causes.add(ex)__							continue__						}_					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					_					_					_					_					_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&_							!mbd.isLenientConstructorResolution() &&_							paramTypes.length == factoryMethodToUse.getParameterCount() &&_							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				List<String> argTypes = new ArrayList<>(minNrOfArgs)__				if (explicitArgs != null) {_					for (Object arg : explicitArgs) {_						argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null")__					}_				}_				else if (resolvedValues != null){_					Set<ValueHolder> valueHolders = new LinkedHashSet<>(resolvedValues.getArgumentCount())__					valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())__					valueHolders.addAll(resolvedValues.getGenericArgumentValues())__					for (ValueHolder value : valueHolders) {_						String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) :_								(value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"))__						argTypes.add(argType)__					}_				}_				String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(minNrOfArgs > 0 ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class == factoryMethodToUse.getReturnType()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Object fb = factoryBean__				final Method factoryMethod = factoryMethodToUse__				final Object[] args = argsToUse__				beanInstance = AccessController.doPrivileged((PrivilegedAction<Object>) () ->_						this.beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, this.beanFactory, fb, factoryMethod, args),_						this.beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)__			}__			bw.setBeanInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via factory method failed", ex)__		}_	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,final,string,bean,name,final,root,bean,definition,mbd,nullable,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,mbd,is,singleton,this,bean,factory,contains,singleton,bean,name,throw,new,implicitly,appeared,singleton,exception,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,true,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,get,candidate,methods,factory,class,mbd,list,method,candidate,set,new,array,list,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,candidate,set,add,candidate,method,candidates,candidate,set,to,array,new,method,0,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,if,mbd,has,constructor,argument,values,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,else,min,nr,of,args,0,linked,list,unsatisfied,dependency,exception,causes,null,for,method,candidate,candidates,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,explicit,args,null,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,else,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,candidates,length,1,catch,unsatisfied,dependency,exception,ex,if,logger,is,trace,enabled,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,mbd,is,lenient,constructor,resolution,param,types,length,factory,method,to,use,get,parameter,count,arrays,equals,param,types,factory,method,to,use,get,parameter,types,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,list,string,arg,types,new,array,list,min,nr,of,args,if,explicit,args,null,for,object,arg,explicit,args,arg,types,add,arg,null,arg,get,class,get,simple,name,null,else,if,resolved,values,null,set,value,holder,value,holders,new,linked,hash,set,resolved,values,get,argument,count,value,holders,add,all,resolved,values,get,indexed,argument,values,values,value,holders,add,all,resolved,values,get,generic,argument,values,for,value,holder,value,value,holders,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,null,value,get,value,get,class,get,simple,name,null,arg,types,add,arg,type,string,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,min,nr,of,args,0,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,object,fb,factory,bean,final,method,factory,method,factory,method,to,use,final,object,args,args,to,use,bean,instance,access,controller,do,privileged,privileged,action,object,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,fb,factory,method,args,this,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,factory,bean,factory,method,to,use,args,to,use,bw,set,bean,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,factory,method,failed,ex
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod( 			final String beanName, final RootBeanDefinition mbd, @Nullable final Object[] explicitArgs);1532430234;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(_			final String beanName, final RootBeanDefinition mbd, @Nullable final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class<?> factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) {_				throw new ImplicitlyAppearedSingletonException()__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve, true)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)___			Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)__			List<Method> candidateSet = new ArrayList<>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_					candidateSet.add(candidate)__				}_			}_			Method[] candidates = candidateSet.toArray(new Method[0])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				if (mbd.hasConstructorArgumentValues()) {_					ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__					resolvedValues = new ConstructorArgumentValues()__					minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__				}_				else {_					minNrOfArgs = 0__				}_			}__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Method candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (explicitArgs != null){_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}_					else {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw,_									paramTypes, paramNames, candidate, autowiring, candidates.length == 1)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (logger.isTraceEnabled()) {_								logger.trace("Ignoring factory method [" + candidate + "] of bean '" + beanName + "': " + ex)__							}_							_							if (causes == null) {_								causes = new LinkedList<>()__							}_							causes.add(ex)__							continue__						}_					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					_					_					_					_					_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&_							!mbd.isLenientConstructorResolution() &&_							paramTypes.length == factoryMethodToUse.getParameterCount() &&_							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				List<String> argTypes = new ArrayList<>(minNrOfArgs)__				if (explicitArgs != null) {_					for (Object arg : explicitArgs) {_						argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null")__					}_				}_				else if (resolvedValues != null){_					Set<ValueHolder> valueHolders = new LinkedHashSet<>(resolvedValues.getArgumentCount())__					valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())__					valueHolders.addAll(resolvedValues.getGenericArgumentValues())__					for (ValueHolder value : valueHolders) {_						String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) :_								(value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"))__						argTypes.add(argType)__					}_				}_				String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(minNrOfArgs > 0 ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class == factoryMethodToUse.getReturnType()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Object fb = factoryBean__				final Method factoryMethod = factoryMethodToUse__				final Object[] args = argsToUse__				beanInstance = AccessController.doPrivileged((PrivilegedAction<Object>) () ->_						this.beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, this.beanFactory, fb, factoryMethod, args),_						this.beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)__			}__			bw.setBeanInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via factory method failed", ex)__		}_	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,final,string,bean,name,final,root,bean,definition,mbd,nullable,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,mbd,is,singleton,this,bean,factory,contains,singleton,bean,name,throw,new,implicitly,appeared,singleton,exception,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,true,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,get,candidate,methods,factory,class,mbd,list,method,candidate,set,new,array,list,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,candidate,set,add,candidate,method,candidates,candidate,set,to,array,new,method,0,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,if,mbd,has,constructor,argument,values,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,else,min,nr,of,args,0,linked,list,unsatisfied,dependency,exception,causes,null,for,method,candidate,candidates,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,explicit,args,null,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,else,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,candidates,length,1,catch,unsatisfied,dependency,exception,ex,if,logger,is,trace,enabled,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,mbd,is,lenient,constructor,resolution,param,types,length,factory,method,to,use,get,parameter,count,arrays,equals,param,types,factory,method,to,use,get,parameter,types,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,list,string,arg,types,new,array,list,min,nr,of,args,if,explicit,args,null,for,object,arg,explicit,args,arg,types,add,arg,null,arg,get,class,get,simple,name,null,else,if,resolved,values,null,set,value,holder,value,holders,new,linked,hash,set,resolved,values,get,argument,count,value,holders,add,all,resolved,values,get,indexed,argument,values,values,value,holders,add,all,resolved,values,get,generic,argument,values,for,value,holder,value,value,holders,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,null,value,get,value,get,class,get,simple,name,null,arg,types,add,arg,type,string,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,min,nr,of,args,0,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,object,fb,factory,bean,final,method,factory,method,factory,method,to,use,final,object,args,args,to,use,bean,instance,access,controller,do,privileged,privileged,action,object,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,fb,factory,method,args,this,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,factory,bean,factory,method,to,use,args,to,use,bw,set,bean,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,factory,method,failed,ex
ConstructorResolver -> public BeanWrapper instantiateUsingFactoryMethod( 			final String beanName, final RootBeanDefinition mbd, @Nullable final Object[] explicitArgs);1532577558;Instantiate the bean using a named factory method. The method may be static, if the_bean definition parameter specifies a class, rather than a "factory-bean", or_an instance variable on a factory object itself configured using Dependency Injection._<p>Implementation requires iterating over the static or instance methods with the_name specified in the RootBeanDefinition (the method may be overloaded) and trying_to match with the parameters. We don't have the types attached to constructor args,_so trial and error is the only way to go here. The explicitArgs array may contain_argument values passed in programmatically via the corresponding getBean method._@param beanName the name of the bean_@param mbd the merged bean definition for the bean_@param explicitArgs argument values passed in programmatically via the getBean_method, or {@code null} if none (-> use constructor argument values from bean definition)_@return a BeanWrapper for the new instance;public BeanWrapper instantiateUsingFactoryMethod(_			final String beanName, final RootBeanDefinition mbd, @Nullable final Object[] explicitArgs) {__		BeanWrapperImpl bw = new BeanWrapperImpl()__		this.beanFactory.initBeanWrapper(bw)___		Object factoryBean__		Class<?> factoryClass__		boolean isStatic___		String factoryBeanName = mbd.getFactoryBeanName()__		if (factoryBeanName != null) {_			if (factoryBeanName.equals(beanName)) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"factory-bean reference points back to the same bean definition")__			}_			factoryBean = this.beanFactory.getBean(factoryBeanName)__			if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) {_				throw new ImplicitlyAppearedSingletonException()__			}_			factoryClass = factoryBean.getClass()__			isStatic = false__		}_		else {_			_			if (!mbd.hasBeanClass()) {_				throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName,_						"bean definition declares neither a bean class nor a factory-bean reference")__			}_			factoryBean = null__			factoryClass = mbd.getBeanClass()__			isStatic = true__		}__		Method factoryMethodToUse = null__		ArgumentsHolder argsHolderToUse = null__		Object[] argsToUse = null___		if (explicitArgs != null) {_			argsToUse = explicitArgs__		}_		else {_			Object[] argsToResolve = null__			synchronized (mbd.constructorArgumentLock) {_				factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod__				if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) {_					_					argsToUse = mbd.resolvedConstructorArguments__					if (argsToUse == null) {_						argsToResolve = mbd.preparedConstructorArguments__					}_				}_			}_			if (argsToResolve != null) {_				argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve, true)__			}_		}__		if (factoryMethodToUse == null || argsToUse == null) {_			_			_			factoryClass = ClassUtils.getUserClass(factoryClass)___			Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)__			List<Method> candidateSet = new ArrayList<>()__			for (Method candidate : rawCandidates) {_				if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) {_					candidateSet.add(candidate)__				}_			}_			Method[] candidates = candidateSet.toArray(new Method[0])__			AutowireUtils.sortFactoryMethods(candidates)___			ConstructorArgumentValues resolvedValues = null__			boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)__			int minTypeDiffWeight = Integer.MAX_VALUE__			Set<Method> ambiguousFactoryMethods = null___			int minNrOfArgs__			if (explicitArgs != null) {_				minNrOfArgs = explicitArgs.length__			}_			else {_				_				_				if (mbd.hasConstructorArgumentValues()) {_					ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()__					resolvedValues = new ConstructorArgumentValues()__					minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)__				}_				else {_					minNrOfArgs = 0__				}_			}__			LinkedList<UnsatisfiedDependencyException> causes = null___			for (Method candidate : candidates) {_				Class<?>[] paramTypes = candidate.getParameterTypes()___				if (paramTypes.length >= minNrOfArgs) {_					ArgumentsHolder argsHolder___					if (explicitArgs != null){_						_						if (paramTypes.length != explicitArgs.length) {_							continue__						}_						argsHolder = new ArgumentsHolder(explicitArgs)__					}_					else {_						_						try {_							String[] paramNames = null__							ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()__							if (pnd != null) {_								paramNames = pnd.getParameterNames(candidate)__							}_							argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw,_									paramTypes, paramNames, candidate, autowiring, candidates.length == 1)__						}_						catch (UnsatisfiedDependencyException ex) {_							if (logger.isTraceEnabled()) {_								logger.trace("Ignoring factory method [" + candidate + "] of bean '" + beanName + "': " + ex)__							}_							_							if (causes == null) {_								causes = new LinkedList<>()__							}_							causes.add(ex)__							continue__						}_					}__					int typeDiffWeight = (mbd.isLenientConstructorResolution() ?_							argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))__					_					if (typeDiffWeight < minTypeDiffWeight) {_						factoryMethodToUse = candidate__						argsHolderToUse = argsHolder__						argsToUse = argsHolder.arguments__						minTypeDiffWeight = typeDiffWeight__						ambiguousFactoryMethods = null__					}_					_					_					_					_					_					else if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight &&_							!mbd.isLenientConstructorResolution() &&_							paramTypes.length == factoryMethodToUse.getParameterCount() &&_							!Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) {_						if (ambiguousFactoryMethods == null) {_							ambiguousFactoryMethods = new LinkedHashSet<>()__							ambiguousFactoryMethods.add(factoryMethodToUse)__						}_						ambiguousFactoryMethods.add(candidate)__					}_				}_			}__			if (factoryMethodToUse == null) {_				if (causes != null) {_					UnsatisfiedDependencyException ex = causes.removeLast()__					for (Exception cause : causes) {_						this.beanFactory.onSuppressedException(cause)__					}_					throw ex__				}_				List<String> argTypes = new ArrayList<>(minNrOfArgs)__				if (explicitArgs != null) {_					for (Object arg : explicitArgs) {_						argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null")__					}_				}_				else if (resolvedValues != null){_					Set<ValueHolder> valueHolders = new LinkedHashSet<>(resolvedValues.getArgumentCount())__					valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())__					valueHolders.addAll(resolvedValues.getGenericArgumentValues())__					for (ValueHolder value : valueHolders) {_						String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) :_								(value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"))__						argTypes.add(argType)__					}_				}_				String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)__				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"No matching factory method found: " +_						(mbd.getFactoryBeanName() != null ?_							"factory bean '" + mbd.getFactoryBeanName() + "'_ " : "") +_						"factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " +_						"Check that a method with the specified name " +_						(minNrOfArgs > 0 ? "and arguments " : "") +_						"exists and that it is " +_						(isStatic ? "static" : "non-static") + ".")__			}_			else if (void.class == factoryMethodToUse.getReturnType()) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Invalid factory method '" + mbd.getFactoryMethodName() +_						"': needs to have a non-void return type!")__			}_			else if (ambiguousFactoryMethods != null) {_				throw new BeanCreationException(mbd.getResourceDescription(), beanName,_						"Ambiguous factory method matches found in bean '" + beanName + "' " +_						"(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " +_						ambiguousFactoryMethods)__			}__			if (explicitArgs == null && argsHolderToUse != null) {_				argsHolderToUse.storeCache(mbd, factoryMethodToUse)__			}_		}__		try {_			Object beanInstance___			if (System.getSecurityManager() != null) {_				final Object fb = factoryBean__				final Method factoryMethod = factoryMethodToUse__				final Object[] args = argsToUse__				beanInstance = AccessController.doPrivileged((PrivilegedAction<Object>) () ->_						this.beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, this.beanFactory, fb, factoryMethod, args),_						this.beanFactory.getAccessControlContext())__			}_			else {_				beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(_						mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)__			}__			bw.setBeanInstance(beanInstance)__			return bw__		}_		catch (Throwable ex) {_			throw new BeanCreationException(mbd.getResourceDescription(), beanName,_					"Bean instantiation via factory method failed", ex)__		}_	};instantiate,the,bean,using,a,named,factory,method,the,method,may,be,static,if,the,bean,definition,parameter,specifies,a,class,rather,than,a,factory,bean,or,an,instance,variable,on,a,factory,object,itself,configured,using,dependency,injection,p,implementation,requires,iterating,over,the,static,or,instance,methods,with,the,name,specified,in,the,root,bean,definition,the,method,may,be,overloaded,and,trying,to,match,with,the,parameters,we,don,t,have,the,types,attached,to,constructor,args,so,trial,and,error,is,the,only,way,to,go,here,the,explicit,args,array,may,contain,argument,values,passed,in,programmatically,via,the,corresponding,get,bean,method,param,bean,name,the,name,of,the,bean,param,mbd,the,merged,bean,definition,for,the,bean,param,explicit,args,argument,values,passed,in,programmatically,via,the,get,bean,method,or,code,null,if,none,use,constructor,argument,values,from,bean,definition,return,a,bean,wrapper,for,the,new,instance;public,bean,wrapper,instantiate,using,factory,method,final,string,bean,name,final,root,bean,definition,mbd,nullable,final,object,explicit,args,bean,wrapper,impl,bw,new,bean,wrapper,impl,this,bean,factory,init,bean,wrapper,bw,object,factory,bean,class,factory,class,boolean,is,static,string,factory,bean,name,mbd,get,factory,bean,name,if,factory,bean,name,null,if,factory,bean,name,equals,bean,name,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,factory,bean,reference,points,back,to,the,same,bean,definition,factory,bean,this,bean,factory,get,bean,factory,bean,name,if,mbd,is,singleton,this,bean,factory,contains,singleton,bean,name,throw,new,implicitly,appeared,singleton,exception,factory,class,factory,bean,get,class,is,static,false,else,if,mbd,has,bean,class,throw,new,bean,definition,store,exception,mbd,get,resource,description,bean,name,bean,definition,declares,neither,a,bean,class,nor,a,factory,bean,reference,factory,bean,null,factory,class,mbd,get,bean,class,is,static,true,method,factory,method,to,use,null,arguments,holder,args,holder,to,use,null,object,args,to,use,null,if,explicit,args,null,args,to,use,explicit,args,else,object,args,to,resolve,null,synchronized,mbd,constructor,argument,lock,factory,method,to,use,method,mbd,resolved,constructor,or,factory,method,if,factory,method,to,use,null,mbd,constructor,arguments,resolved,args,to,use,mbd,resolved,constructor,arguments,if,args,to,use,null,args,to,resolve,mbd,prepared,constructor,arguments,if,args,to,resolve,null,args,to,use,resolve,prepared,arguments,bean,name,mbd,bw,factory,method,to,use,args,to,resolve,true,if,factory,method,to,use,null,args,to,use,null,factory,class,class,utils,get,user,class,factory,class,method,raw,candidates,get,candidate,methods,factory,class,mbd,list,method,candidate,set,new,array,list,for,method,candidate,raw,candidates,if,modifier,is,static,candidate,get,modifiers,is,static,mbd,is,factory,method,candidate,candidate,set,add,candidate,method,candidates,candidate,set,to,array,new,method,0,autowire,utils,sort,factory,methods,candidates,constructor,argument,values,resolved,values,null,boolean,autowiring,mbd,get,resolved,autowire,mode,root,bean,definition,int,min,type,diff,weight,integer,set,method,ambiguous,factory,methods,null,int,min,nr,of,args,if,explicit,args,null,min,nr,of,args,explicit,args,length,else,if,mbd,has,constructor,argument,values,constructor,argument,values,cargs,mbd,get,constructor,argument,values,resolved,values,new,constructor,argument,values,min,nr,of,args,resolve,constructor,arguments,bean,name,mbd,bw,cargs,resolved,values,else,min,nr,of,args,0,linked,list,unsatisfied,dependency,exception,causes,null,for,method,candidate,candidates,class,param,types,candidate,get,parameter,types,if,param,types,length,min,nr,of,args,arguments,holder,args,holder,if,explicit,args,null,if,param,types,length,explicit,args,length,continue,args,holder,new,arguments,holder,explicit,args,else,try,string,param,names,null,parameter,name,discoverer,pnd,this,bean,factory,get,parameter,name,discoverer,if,pnd,null,param,names,pnd,get,parameter,names,candidate,args,holder,create,argument,array,bean,name,mbd,resolved,values,bw,param,types,param,names,candidate,autowiring,candidates,length,1,catch,unsatisfied,dependency,exception,ex,if,logger,is,trace,enabled,logger,trace,ignoring,factory,method,candidate,of,bean,bean,name,ex,if,causes,null,causes,new,linked,list,causes,add,ex,continue,int,type,diff,weight,mbd,is,lenient,constructor,resolution,args,holder,get,type,difference,weight,param,types,args,holder,get,assignability,weight,param,types,if,type,diff,weight,min,type,diff,weight,factory,method,to,use,candidate,args,holder,to,use,args,holder,args,to,use,args,holder,arguments,min,type,diff,weight,type,diff,weight,ambiguous,factory,methods,null,else,if,factory,method,to,use,null,type,diff,weight,min,type,diff,weight,mbd,is,lenient,constructor,resolution,param,types,length,factory,method,to,use,get,parameter,count,arrays,equals,param,types,factory,method,to,use,get,parameter,types,if,ambiguous,factory,methods,null,ambiguous,factory,methods,new,linked,hash,set,ambiguous,factory,methods,add,factory,method,to,use,ambiguous,factory,methods,add,candidate,if,factory,method,to,use,null,if,causes,null,unsatisfied,dependency,exception,ex,causes,remove,last,for,exception,cause,causes,this,bean,factory,on,suppressed,exception,cause,throw,ex,list,string,arg,types,new,array,list,min,nr,of,args,if,explicit,args,null,for,object,arg,explicit,args,arg,types,add,arg,null,arg,get,class,get,simple,name,null,else,if,resolved,values,null,set,value,holder,value,holders,new,linked,hash,set,resolved,values,get,argument,count,value,holders,add,all,resolved,values,get,indexed,argument,values,values,value,holders,add,all,resolved,values,get,generic,argument,values,for,value,holder,value,value,holders,string,arg,type,value,get,type,null,class,utils,get,short,name,value,get,type,value,get,value,null,value,get,value,get,class,get,simple,name,null,arg,types,add,arg,type,string,arg,desc,string,utils,collection,to,comma,delimited,string,arg,types,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,no,matching,factory,method,found,mbd,get,factory,bean,name,null,factory,bean,mbd,get,factory,bean,name,factory,method,mbd,get,factory,method,name,arg,desc,check,that,a,method,with,the,specified,name,min,nr,of,args,0,and,arguments,exists,and,that,it,is,is,static,static,non,static,else,if,void,class,factory,method,to,use,get,return,type,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,invalid,factory,method,mbd,get,factory,method,name,needs,to,have,a,non,void,return,type,else,if,ambiguous,factory,methods,null,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,ambiguous,factory,method,matches,found,in,bean,bean,name,hint,specify,index,type,name,arguments,for,simple,parameters,to,avoid,type,ambiguities,ambiguous,factory,methods,if,explicit,args,null,args,holder,to,use,null,args,holder,to,use,store,cache,mbd,factory,method,to,use,try,object,bean,instance,if,system,get,security,manager,null,final,object,fb,factory,bean,final,method,factory,method,factory,method,to,use,final,object,args,args,to,use,bean,instance,access,controller,do,privileged,privileged,action,object,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,fb,factory,method,args,this,bean,factory,get,access,control,context,else,bean,instance,this,bean,factory,get,instantiation,strategy,instantiate,mbd,bean,name,this,bean,factory,factory,bean,factory,method,to,use,args,to,use,bw,set,bean,instance,bean,instance,return,bw,catch,throwable,ex,throw,new,bean,creation,exception,mbd,get,resource,description,bean,name,bean,instantiation,via,factory,method,failed,ex
