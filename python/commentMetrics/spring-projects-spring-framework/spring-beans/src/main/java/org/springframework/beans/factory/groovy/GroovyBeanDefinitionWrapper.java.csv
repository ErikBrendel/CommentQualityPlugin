commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getBeanName() {     return this.beanName. }
false;public;1;3;;public void setBeanDefinition(AbstractBeanDefinition definition) {     this.definition = definition. }
false;public;0;6;;public AbstractBeanDefinition getBeanDefinition() {     if (this.definition == null) {         this.definition = createBeanDefinition().     }     return this.definition. }
false;protected;0;16;;protected AbstractBeanDefinition createBeanDefinition() {     AbstractBeanDefinition bd = new GenericBeanDefinition().     bd.setBeanClass(this.clazz).     if (!CollectionUtils.isEmpty(this.constructorArgs)) {         ConstructorArgumentValues cav = new ConstructorArgumentValues().         for (Object constructorArg : this.constructorArgs) {             cav.addGenericArgumentValue(constructorArg).         }         bd.setConstructorArgumentValues(cav).     }     if (this.parentName != null) {         bd.setParentName(this.parentName).     }     this.definitionWrapper = new BeanWrapperImpl(bd).     return bd. }
false;public;1;4;;public void setBeanDefinitionHolder(BeanDefinitionHolder holder) {     this.definition = (AbstractBeanDefinition) holder.getBeanDefinition().     this.beanName = holder.getBeanName(). }
false;public;0;3;;public BeanDefinitionHolder getBeanDefinitionHolder() {     return new BeanDefinitionHolder(getBeanDefinition(), getBeanName()). }
false;public;1;16;;public void setParent(Object obj) {     if (obj == null) {         throw new IllegalArgumentException("Parent bean cannot be set to a null runtime bean reference!").     }     if (obj instanceof String) {         this.parentName = (String) obj.     } else if (obj instanceof RuntimeBeanReference) {         this.parentName = ((RuntimeBeanReference) obj).getBeanName().     } else if (obj instanceof GroovyBeanDefinitionWrapper) {         this.parentName = ((GroovyBeanDefinitionWrapper) obj).getBeanName().     }     getBeanDefinition().setParentName(this.parentName).     getBeanDefinition().setAbstract(false). }
false;public;2;7;;public GroovyBeanDefinitionWrapper addProperty(String propertyName, Object propertyValue) {     if (propertyValue instanceof GroovyBeanDefinitionWrapper) {         propertyValue = ((GroovyBeanDefinitionWrapper) propertyValue).getBeanDefinition().     }     getBeanDefinition().getPropertyValues().add(propertyName, propertyValue).     return this. }
false;public;1;10;;@Override public Object getProperty(String property) {     if (this.definitionWrapper.isReadableProperty(property)) {         return this.definitionWrapper.getPropertyValue(property).     } else if (dynamicProperties.contains(property)) {         return null.     }     return super.getProperty(property). }
false;public;2;67;;@Override public void setProperty(String property, Object newValue) {     if (PARENT.equals(property)) {         setParent(newValue).     } else {         AbstractBeanDefinition bd = getBeanDefinition().         if (AUTOWIRE.equals(property)) {             if ("byName".equals(newValue)) {                 bd.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_NAME).             } else if ("byType".equals(newValue)) {                 bd.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE).             } else if ("constructor".equals(newValue)) {                 bd.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_CONSTRUCTOR).             } else if (Boolean.TRUE.equals(newValue)) {                 bd.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_NAME).             }         } else // constructorArgs         if (CONSTRUCTOR_ARGS.equals(property) && newValue instanceof List) {             ConstructorArgumentValues cav = new ConstructorArgumentValues().             List args = (List) newValue.             for (Object arg : args) {                 cav.addGenericArgumentValue(arg).             }             bd.setConstructorArgumentValues(cav).         } else // factoryBean         if (FACTORY_BEAN.equals(property)) {             if (newValue != null) {                 bd.setFactoryBeanName(newValue.toString()).             }         } else // factoryMethod         if (FACTORY_METHOD.equals(property)) {             if (newValue != null) {                 bd.setFactoryMethodName(newValue.toString()).             }         } else // initMethod         if (INIT_METHOD.equals(property)) {             if (newValue != null) {                 bd.setInitMethodName(newValue.toString()).             }         } else // destroyMethod         if (DESTROY_METHOD.equals(property)) {             if (newValue != null) {                 bd.setDestroyMethodName(newValue.toString()).             }         } else // singleton property         if (SINGLETON.equals(property)) {             bd.setScope(Boolean.TRUE.equals(newValue) ? BeanDefinition.SCOPE_SINGLETON : BeanDefinition.SCOPE_PROTOTYPE).         } else if (this.definitionWrapper.isWritableProperty(property)) {             this.definitionWrapper.setPropertyValue(property, newValue).         } else {             super.setProperty(property, newValue).         }     } }
