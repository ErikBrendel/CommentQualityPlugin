# id;timestamp;commentText;codeText;commentWords;codeWords
ServiceLocatorFactoryBean -> public void setServiceLocatorInterface(Class interfaceType);1328020251;Set the service locator interface to use, which must have one or more methods with_the signatures <code>MyType xxx()</code> or <code>MyType xxx(MyIdType id)</code>_(typically, <code>MyService getService()</code> or <code>MyService getService(String id)</code>)._See the {@link ServiceLocatorFactoryBean class-level Javadoc} for_information on the semantics of such methods.;public void setServiceLocatorInterface(Class interfaceType) {_		this.serviceLocatorInterface = interfaceType__	};set,the,service,locator,interface,to,use,which,must,have,one,or,more,methods,with,the,signatures,code,my,type,xxx,code,or,code,my,type,xxx,my,id,type,id,code,typically,code,my,service,get,service,code,or,code,my,service,get,service,string,id,code,see,the,link,service,locator,factory,bean,class,level,javadoc,for,information,on,the,semantics,of,such,methods;public,void,set,service,locator,interface,class,interface,type,this,service,locator,interface,interface,type
ServiceLocatorFactoryBean -> public void setServiceLocatorInterface(Class interfaceType);1356735495;Set the service locator interface to use, which must have one or more methods with_the signatures {@code MyType xxx()} or {@code MyType xxx(MyIdType id)}_(typically, {@code MyService getService()} or {@code MyService getService(String id)})._See the {@link ServiceLocatorFactoryBean class-level Javadoc} for_information on the semantics of such methods.;public void setServiceLocatorInterface(Class interfaceType) {_		this.serviceLocatorInterface = interfaceType__	};set,the,service,locator,interface,to,use,which,must,have,one,or,more,methods,with,the,signatures,code,my,type,xxx,or,code,my,type,xxx,my,id,type,id,typically,code,my,service,get,service,or,code,my,service,get,service,string,id,see,the,link,service,locator,factory,bean,class,level,javadoc,for,information,on,the,semantics,of,such,methods;public,void,set,service,locator,interface,class,interface,type,this,service,locator,interface,interface,type
ServiceLocatorFactoryBean -> public void setServiceLocatorInterface(Class interfaceType);1357119239;Set the service locator interface to use, which must have one or more methods with_the signatures {@code MyType xxx()} or {@code MyType xxx(MyIdType id)}_(typically, {@code MyService getService()} or {@code MyService getService(String id)})._See the {@link ServiceLocatorFactoryBean class-level Javadoc} for_information on the semantics of such methods.;public void setServiceLocatorInterface(Class interfaceType) {_		this.serviceLocatorInterface = interfaceType__	};set,the,service,locator,interface,to,use,which,must,have,one,or,more,methods,with,the,signatures,code,my,type,xxx,or,code,my,type,xxx,my,id,type,id,typically,code,my,service,get,service,or,code,my,service,get,service,string,id,see,the,link,service,locator,factory,bean,class,level,javadoc,for,information,on,the,semantics,of,such,methods;public,void,set,service,locator,interface,class,interface,type,this,service,locator,interface,interface,type
ServiceLocatorFactoryBean -> public void setServiceLocatorInterface(Class interfaceType);1362408075;Set the service locator interface to use, which must have one or more methods with_the signatures {@code MyType xxx()} or {@code MyType xxx(MyIdType id)}_(typically, {@code MyService getService()} or {@code MyService getService(String id)})._See the {@link ServiceLocatorFactoryBean class-level Javadoc} for_information on the semantics of such methods.;public void setServiceLocatorInterface(Class interfaceType) {_		this.serviceLocatorInterface = interfaceType__	};set,the,service,locator,interface,to,use,which,must,have,one,or,more,methods,with,the,signatures,code,my,type,xxx,or,code,my,type,xxx,my,id,type,id,typically,code,my,service,get,service,or,code,my,service,get,service,string,id,see,the,link,service,locator,factory,bean,class,level,javadoc,for,information,on,the,semantics,of,such,methods;public,void,set,service,locator,interface,class,interface,type,this,service,locator,interface,interface,type
ServiceLocatorFactoryBean -> public void setServiceLocatorInterface(Class interfaceType);1365769284;Set the service locator interface to use, which must have one or more methods with_the signatures {@code MyType xxx()} or {@code MyType xxx(MyIdType id)}_(typically, {@code MyService getService()} or {@code MyService getService(String id)})._See the {@link ServiceLocatorFactoryBean class-level Javadoc} for_information on the semantics of such methods.;public void setServiceLocatorInterface(Class interfaceType) {_		this.serviceLocatorInterface = interfaceType__	};set,the,service,locator,interface,to,use,which,must,have,one,or,more,methods,with,the,signatures,code,my,type,xxx,or,code,my,type,xxx,my,id,type,id,typically,code,my,service,get,service,or,code,my,service,get,service,string,id,see,the,link,service,locator,factory,bean,class,level,javadoc,for,information,on,the,semantics,of,such,methods;public,void,set,service,locator,interface,class,interface,type,this,service,locator,interface,interface,type
ServiceLocatorFactoryBean -> public void setServiceLocatorInterface(Class interfaceType);1368482696;Set the service locator interface to use, which must have one or more methods with_the signatures {@code MyType xxx()} or {@code MyType xxx(MyIdType id)}_(typically, {@code MyService getService()} or {@code MyService getService(String id)})._See the {@link ServiceLocatorFactoryBean class-level Javadoc} for_information on the semantics of such methods.;public void setServiceLocatorInterface(Class interfaceType) {_		this.serviceLocatorInterface = interfaceType__	};set,the,service,locator,interface,to,use,which,must,have,one,or,more,methods,with,the,signatures,code,my,type,xxx,or,code,my,type,xxx,my,id,type,id,typically,code,my,service,get,service,or,code,my,service,get,service,string,id,see,the,link,service,locator,factory,bean,class,level,javadoc,for,information,on,the,semantics,of,such,methods;public,void,set,service,locator,interface,class,interface,type,this,service,locator,interface,interface,type
ServiceLocatorFactoryBean -> public void setServiceLocatorInterface(Class<?> interfaceType);1385412762;Set the service locator interface to use, which must have one or more methods with_the signatures {@code MyType xxx()} or {@code MyType xxx(MyIdType id)}_(typically, {@code MyService getService()} or {@code MyService getService(String id)})._See the {@link ServiceLocatorFactoryBean class-level Javadoc} for_information on the semantics of such methods.;public void setServiceLocatorInterface(Class<?> interfaceType) {_		this.serviceLocatorInterface = interfaceType__	};set,the,service,locator,interface,to,use,which,must,have,one,or,more,methods,with,the,signatures,code,my,type,xxx,or,code,my,type,xxx,my,id,type,id,typically,code,my,service,get,service,or,code,my,service,get,service,string,id,see,the,link,service,locator,factory,bean,class,level,javadoc,for,information,on,the,semantics,of,such,methods;public,void,set,service,locator,interface,class,interface,type,this,service,locator,interface,interface,type
ServiceLocatorFactoryBean -> public void setServiceLocatorInterface(Class<?> interfaceType);1432125256;Set the service locator interface to use, which must have one or more methods with_the signatures {@code MyType xxx()} or {@code MyType xxx(MyIdType id)}_(typically, {@code MyService getService()} or {@code MyService getService(String id)})._See the {@link ServiceLocatorFactoryBean class-level Javadoc} for_information on the semantics of such methods.;public void setServiceLocatorInterface(Class<?> interfaceType) {_		this.serviceLocatorInterface = interfaceType__	};set,the,service,locator,interface,to,use,which,must,have,one,or,more,methods,with,the,signatures,code,my,type,xxx,or,code,my,type,xxx,my,id,type,id,typically,code,my,service,get,service,or,code,my,service,get,service,string,id,see,the,link,service,locator,factory,bean,class,level,javadoc,for,information,on,the,semantics,of,such,methods;public,void,set,service,locator,interface,class,interface,type,this,service,locator,interface,interface,type
ServiceLocatorFactoryBean -> public void setServiceLocatorInterface(Class<?> interfaceType);1496837955;Set the service locator interface to use, which must have one or more methods with_the signatures {@code MyType xxx()} or {@code MyType xxx(MyIdType id)}_(typically, {@code MyService getService()} or {@code MyService getService(String id)})._See the {@link ServiceLocatorFactoryBean class-level Javadoc} for_information on the semantics of such methods.;public void setServiceLocatorInterface(Class<?> interfaceType) {_		this.serviceLocatorInterface = interfaceType__	};set,the,service,locator,interface,to,use,which,must,have,one,or,more,methods,with,the,signatures,code,my,type,xxx,or,code,my,type,xxx,my,id,type,id,typically,code,my,service,get,service,or,code,my,service,get,service,string,id,see,the,link,service,locator,factory,bean,class,level,javadoc,for,information,on,the,semantics,of,such,methods;public,void,set,service,locator,interface,class,interface,type,this,service,locator,interface,interface,type
ServiceLocatorFactoryBean -> public void setServiceLocatorInterface(Class<?> interfaceType);1498780456;Set the service locator interface to use, which must have one or more methods with_the signatures {@code MyType xxx()} or {@code MyType xxx(MyIdType id)}_(typically, {@code MyService getService()} or {@code MyService getService(String id)})._See the {@link ServiceLocatorFactoryBean class-level Javadoc} for_information on the semantics of such methods.;public void setServiceLocatorInterface(Class<?> interfaceType) {_		this.serviceLocatorInterface = interfaceType__	};set,the,service,locator,interface,to,use,which,must,have,one,or,more,methods,with,the,signatures,code,my,type,xxx,or,code,my,type,xxx,my,id,type,id,typically,code,my,service,get,service,or,code,my,service,get,service,string,id,see,the,link,service,locator,factory,bean,class,level,javadoc,for,information,on,the,semantics,of,such,methods;public,void,set,service,locator,interface,class,interface,type,this,service,locator,interface,interface,type
ServiceLocatorFactoryBean -> public void setServiceLocatorInterface(Class<?> interfaceType);1502974979;Set the service locator interface to use, which must have one or more methods with_the signatures {@code MyType xxx()} or {@code MyType xxx(MyIdType id)}_(typically, {@code MyService getService()} or {@code MyService getService(String id)})._See the {@link ServiceLocatorFactoryBean class-level Javadoc} for_information on the semantics of such methods.;public void setServiceLocatorInterface(Class<?> interfaceType) {_		this.serviceLocatorInterface = interfaceType__	};set,the,service,locator,interface,to,use,which,must,have,one,or,more,methods,with,the,signatures,code,my,type,xxx,or,code,my,type,xxx,my,id,type,id,typically,code,my,service,get,service,or,code,my,service,get,service,string,id,see,the,link,service,locator,factory,bean,class,level,javadoc,for,information,on,the,semantics,of,such,methods;public,void,set,service,locator,interface,class,interface,type,this,service,locator,interface,interface,type
ServiceLocatorFactoryBean -> protected Constructor determineServiceLocatorExceptionConstructor(Class exceptionClass);1328020251;Determine the constructor to use for the given service locator exception_class. Only called in case of a custom service locator exception._<p>The default implementation looks for a constructor with one of the_following parameter types: <code>(String, Throwable)</code>_or <code>(Throwable)</code> or <code>(String)</code>._@param exceptionClass the exception class_@return the constructor to use_@see #setServiceLocatorExceptionClass;protected Constructor determineServiceLocatorExceptionConstructor(Class exceptionClass) {_		try {_			return exceptionClass.getConstructor(new Class[] {String.class, Throwable.class})__		}_		catch (NoSuchMethodException ex) {_			try {_				return exceptionClass.getConstructor(new Class[] {Throwable.class})__			}_			catch (NoSuchMethodException ex2) {_				try {_					return exceptionClass.getConstructor(new Class[] {String.class})__				}_				catch (NoSuchMethodException ex3) {_					throw new IllegalArgumentException(_							"Service locator exception [" + exceptionClass.getName() +_							"] neither has a (String, Throwable) constructor nor a (String) constructor")__				}_			}_		}_	};determine,the,constructor,to,use,for,the,given,service,locator,exception,class,only,called,in,case,of,a,custom,service,locator,exception,p,the,default,implementation,looks,for,a,constructor,with,one,of,the,following,parameter,types,code,string,throwable,code,or,code,throwable,code,or,code,string,code,param,exception,class,the,exception,class,return,the,constructor,to,use,see,set,service,locator,exception,class;protected,constructor,determine,service,locator,exception,constructor,class,exception,class,try,return,exception,class,get,constructor,new,class,string,class,throwable,class,catch,no,such,method,exception,ex,try,return,exception,class,get,constructor,new,class,throwable,class,catch,no,such,method,exception,ex2,try,return,exception,class,get,constructor,new,class,string,class,catch,no,such,method,exception,ex3,throw,new,illegal,argument,exception,service,locator,exception,exception,class,get,name,neither,has,a,string,throwable,constructor,nor,a,string,constructor
ServiceLocatorFactoryBean -> protected Constructor determineServiceLocatorExceptionConstructor(Class exceptionClass);1356735495;Determine the constructor to use for the given service locator exception_class. Only called in case of a custom service locator exception._<p>The default implementation looks for a constructor with one of the_following parameter types: {@code (String, Throwable)}_or {@code (Throwable)} or {@code (String)}._@param exceptionClass the exception class_@return the constructor to use_@see #setServiceLocatorExceptionClass;protected Constructor determineServiceLocatorExceptionConstructor(Class exceptionClass) {_		try {_			return exceptionClass.getConstructor(new Class[] {String.class, Throwable.class})__		}_		catch (NoSuchMethodException ex) {_			try {_				return exceptionClass.getConstructor(new Class[] {Throwable.class})__			}_			catch (NoSuchMethodException ex2) {_				try {_					return exceptionClass.getConstructor(new Class[] {String.class})__				}_				catch (NoSuchMethodException ex3) {_					throw new IllegalArgumentException(_							"Service locator exception [" + exceptionClass.getName() +_							"] neither has a (String, Throwable) constructor nor a (String) constructor")__				}_			}_		}_	};determine,the,constructor,to,use,for,the,given,service,locator,exception,class,only,called,in,case,of,a,custom,service,locator,exception,p,the,default,implementation,looks,for,a,constructor,with,one,of,the,following,parameter,types,code,string,throwable,or,code,throwable,or,code,string,param,exception,class,the,exception,class,return,the,constructor,to,use,see,set,service,locator,exception,class;protected,constructor,determine,service,locator,exception,constructor,class,exception,class,try,return,exception,class,get,constructor,new,class,string,class,throwable,class,catch,no,such,method,exception,ex,try,return,exception,class,get,constructor,new,class,throwable,class,catch,no,such,method,exception,ex2,try,return,exception,class,get,constructor,new,class,string,class,catch,no,such,method,exception,ex3,throw,new,illegal,argument,exception,service,locator,exception,exception,class,get,name,neither,has,a,string,throwable,constructor,nor,a,string,constructor
ServiceLocatorFactoryBean -> protected Constructor determineServiceLocatorExceptionConstructor(Class exceptionClass);1357119239;Determine the constructor to use for the given service locator exception_class. Only called in case of a custom service locator exception._<p>The default implementation looks for a constructor with one of the_following parameter types: {@code (String, Throwable)}_or {@code (Throwable)} or {@code (String)}._@param exceptionClass the exception class_@return the constructor to use_@see #setServiceLocatorExceptionClass;protected Constructor determineServiceLocatorExceptionConstructor(Class exceptionClass) {_		try {_			return exceptionClass.getConstructor(new Class[] {String.class, Throwable.class})__		}_		catch (NoSuchMethodException ex) {_			try {_				return exceptionClass.getConstructor(new Class[] {Throwable.class})__			}_			catch (NoSuchMethodException ex2) {_				try {_					return exceptionClass.getConstructor(new Class[] {String.class})__				}_				catch (NoSuchMethodException ex3) {_					throw new IllegalArgumentException(_							"Service locator exception [" + exceptionClass.getName() +_							"] neither has a (String, Throwable) constructor nor a (String) constructor")__				}_			}_		}_	};determine,the,constructor,to,use,for,the,given,service,locator,exception,class,only,called,in,case,of,a,custom,service,locator,exception,p,the,default,implementation,looks,for,a,constructor,with,one,of,the,following,parameter,types,code,string,throwable,or,code,throwable,or,code,string,param,exception,class,the,exception,class,return,the,constructor,to,use,see,set,service,locator,exception,class;protected,constructor,determine,service,locator,exception,constructor,class,exception,class,try,return,exception,class,get,constructor,new,class,string,class,throwable,class,catch,no,such,method,exception,ex,try,return,exception,class,get,constructor,new,class,throwable,class,catch,no,such,method,exception,ex2,try,return,exception,class,get,constructor,new,class,string,class,catch,no,such,method,exception,ex3,throw,new,illegal,argument,exception,service,locator,exception,exception,class,get,name,neither,has,a,string,throwable,constructor,nor,a,string,constructor
ServiceLocatorFactoryBean -> protected Constructor determineServiceLocatorExceptionConstructor(Class exceptionClass);1362408075;Determine the constructor to use for the given service locator exception_class. Only called in case of a custom service locator exception._<p>The default implementation looks for a constructor with one of the_following parameter types: {@code (String, Throwable)}_or {@code (Throwable)} or {@code (String)}._@param exceptionClass the exception class_@return the constructor to use_@see #setServiceLocatorExceptionClass;protected Constructor determineServiceLocatorExceptionConstructor(Class exceptionClass) {_		try {_			return exceptionClass.getConstructor(new Class[] {String.class, Throwable.class})__		}_		catch (NoSuchMethodException ex) {_			try {_				return exceptionClass.getConstructor(new Class[] {Throwable.class})__			}_			catch (NoSuchMethodException ex2) {_				try {_					return exceptionClass.getConstructor(new Class[] {String.class})__				}_				catch (NoSuchMethodException ex3) {_					throw new IllegalArgumentException(_							"Service locator exception [" + exceptionClass.getName() +_							"] neither has a (String, Throwable) constructor nor a (String) constructor")__				}_			}_		}_	};determine,the,constructor,to,use,for,the,given,service,locator,exception,class,only,called,in,case,of,a,custom,service,locator,exception,p,the,default,implementation,looks,for,a,constructor,with,one,of,the,following,parameter,types,code,string,throwable,or,code,throwable,or,code,string,param,exception,class,the,exception,class,return,the,constructor,to,use,see,set,service,locator,exception,class;protected,constructor,determine,service,locator,exception,constructor,class,exception,class,try,return,exception,class,get,constructor,new,class,string,class,throwable,class,catch,no,such,method,exception,ex,try,return,exception,class,get,constructor,new,class,throwable,class,catch,no,such,method,exception,ex2,try,return,exception,class,get,constructor,new,class,string,class,catch,no,such,method,exception,ex3,throw,new,illegal,argument,exception,service,locator,exception,exception,class,get,name,neither,has,a,string,throwable,constructor,nor,a,string,constructor
ServiceLocatorFactoryBean -> protected Constructor determineServiceLocatorExceptionConstructor(Class exceptionClass);1365769284;Determine the constructor to use for the given service locator exception_class. Only called in case of a custom service locator exception._<p>The default implementation looks for a constructor with one of the_following parameter types: {@code (String, Throwable)}_or {@code (Throwable)} or {@code (String)}._@param exceptionClass the exception class_@return the constructor to use_@see #setServiceLocatorExceptionClass;protected Constructor determineServiceLocatorExceptionConstructor(Class exceptionClass) {_		try {_			return exceptionClass.getConstructor(new Class[] {String.class, Throwable.class})__		}_		catch (NoSuchMethodException ex) {_			try {_				return exceptionClass.getConstructor(new Class[] {Throwable.class})__			}_			catch (NoSuchMethodException ex2) {_				try {_					return exceptionClass.getConstructor(new Class[] {String.class})__				}_				catch (NoSuchMethodException ex3) {_					throw new IllegalArgumentException(_							"Service locator exception [" + exceptionClass.getName() +_							"] neither has a (String, Throwable) constructor nor a (String) constructor")__				}_			}_		}_	};determine,the,constructor,to,use,for,the,given,service,locator,exception,class,only,called,in,case,of,a,custom,service,locator,exception,p,the,default,implementation,looks,for,a,constructor,with,one,of,the,following,parameter,types,code,string,throwable,or,code,throwable,or,code,string,param,exception,class,the,exception,class,return,the,constructor,to,use,see,set,service,locator,exception,class;protected,constructor,determine,service,locator,exception,constructor,class,exception,class,try,return,exception,class,get,constructor,new,class,string,class,throwable,class,catch,no,such,method,exception,ex,try,return,exception,class,get,constructor,new,class,throwable,class,catch,no,such,method,exception,ex2,try,return,exception,class,get,constructor,new,class,string,class,catch,no,such,method,exception,ex3,throw,new,illegal,argument,exception,service,locator,exception,exception,class,get,name,neither,has,a,string,throwable,constructor,nor,a,string,constructor
ServiceLocatorFactoryBean -> protected Constructor determineServiceLocatorExceptionConstructor(Class exceptionClass);1368482696;Determine the constructor to use for the given service locator exception_class. Only called in case of a custom service locator exception._<p>The default implementation looks for a constructor with one of the_following parameter types: {@code (String, Throwable)}_or {@code (Throwable)} or {@code (String)}._@param exceptionClass the exception class_@return the constructor to use_@see #setServiceLocatorExceptionClass;protected Constructor determineServiceLocatorExceptionConstructor(Class exceptionClass) {_		try {_			return exceptionClass.getConstructor(new Class[] {String.class, Throwable.class})__		}_		catch (NoSuchMethodException ex) {_			try {_				return exceptionClass.getConstructor(new Class[] {Throwable.class})__			}_			catch (NoSuchMethodException ex2) {_				try {_					return exceptionClass.getConstructor(new Class[] {String.class})__				}_				catch (NoSuchMethodException ex3) {_					throw new IllegalArgumentException(_							"Service locator exception [" + exceptionClass.getName() +_							"] neither has a (String, Throwable) constructor nor a (String) constructor")__				}_			}_		}_	};determine,the,constructor,to,use,for,the,given,service,locator,exception,class,only,called,in,case,of,a,custom,service,locator,exception,p,the,default,implementation,looks,for,a,constructor,with,one,of,the,following,parameter,types,code,string,throwable,or,code,throwable,or,code,string,param,exception,class,the,exception,class,return,the,constructor,to,use,see,set,service,locator,exception,class;protected,constructor,determine,service,locator,exception,constructor,class,exception,class,try,return,exception,class,get,constructor,new,class,string,class,throwable,class,catch,no,such,method,exception,ex,try,return,exception,class,get,constructor,new,class,throwable,class,catch,no,such,method,exception,ex2,try,return,exception,class,get,constructor,new,class,string,class,catch,no,such,method,exception,ex3,throw,new,illegal,argument,exception,service,locator,exception,exception,class,get,name,neither,has,a,string,throwable,constructor,nor,a,string,constructor
ServiceLocatorFactoryBean -> ServiceLocatorInvocationHandler -> private String tryGetBeanName(@Nullable Object[] args);1496837955;Check whether a service id was passed in.;private String tryGetBeanName(@Nullable Object[] args) {_			String beanName = ""__			if (args != null && args.length == 1 && args[0] != null) {_				beanName = args[0].toString()__			}_			_			if (serviceMappings != null) {_				String mappedName = serviceMappings.getProperty(beanName)__				if (mappedName != null) {_					beanName = mappedName__				}_			}_			return beanName__		};check,whether,a,service,id,was,passed,in;private,string,try,get,bean,name,nullable,object,args,string,bean,name,if,args,null,args,length,1,args,0,null,bean,name,args,0,to,string,if,service,mappings,null,string,mapped,name,service,mappings,get,property,bean,name,if,mapped,name,null,bean,name,mapped,name,return,bean,name
ServiceLocatorFactoryBean -> ServiceLocatorInvocationHandler -> private String tryGetBeanName(@Nullable Object[] args);1498780456;Check whether a service id was passed in.;private String tryGetBeanName(@Nullable Object[] args) {_			String beanName = ""__			if (args != null && args.length == 1 && args[0] != null) {_				beanName = args[0].toString()__			}_			_			if (serviceMappings != null) {_				String mappedName = serviceMappings.getProperty(beanName)__				if (mappedName != null) {_					beanName = mappedName__				}_			}_			return beanName__		};check,whether,a,service,id,was,passed,in;private,string,try,get,bean,name,nullable,object,args,string,bean,name,if,args,null,args,length,1,args,0,null,bean,name,args,0,to,string,if,service,mappings,null,string,mapped,name,service,mappings,get,property,bean,name,if,mapped,name,null,bean,name,mapped,name,return,bean,name
ServiceLocatorFactoryBean -> ServiceLocatorInvocationHandler -> private String tryGetBeanName(@Nullable Object[] args);1502974979;Check whether a service id was passed in.;private String tryGetBeanName(@Nullable Object[] args) {_			String beanName = ""__			if (args != null && args.length == 1 && args[0] != null) {_				beanName = args[0].toString()__			}_			_			if (serviceMappings != null) {_				String mappedName = serviceMappings.getProperty(beanName)__				if (mappedName != null) {_					beanName = mappedName__				}_			}_			return beanName__		};check,whether,a,service,id,was,passed,in;private,string,try,get,bean,name,nullable,object,args,string,bean,name,if,args,null,args,length,1,args,0,null,bean,name,args,0,to,string,if,service,mappings,null,string,mapped,name,service,mappings,get,property,bean,name,if,mapped,name,null,bean,name,mapped,name,return,bean,name
ServiceLocatorFactoryBean -> @SuppressWarnings("unchecked") 	protected Constructor<Exception> determineServiceLocatorExceptionConstructor(Class<? extends Exception> exceptionClass);1385412762;Determine the constructor to use for the given service locator exception_class. Only called in case of a custom service locator exception._<p>The default implementation looks for a constructor with one of the_following parameter types: {@code (String, Throwable)}_or {@code (Throwable)} or {@code (String)}._@param exceptionClass the exception class_@return the constructor to use_@see #setServiceLocatorExceptionClass;@SuppressWarnings("unchecked")_	protected Constructor<Exception> determineServiceLocatorExceptionConstructor(Class<? extends Exception> exceptionClass) {_		try {_			return (Constructor<Exception>) exceptionClass.getConstructor(new Class<?>[] {String.class, Throwable.class})__		}_		catch (NoSuchMethodException ex) {_			try {_				return (Constructor<Exception>) exceptionClass.getConstructor(new Class<?>[] {Throwable.class})__			}_			catch (NoSuchMethodException ex2) {_				try {_					return (Constructor<Exception>) exceptionClass.getConstructor(new Class<?>[] {String.class})__				}_				catch (NoSuchMethodException ex3) {_					throw new IllegalArgumentException(_							"Service locator exception [" + exceptionClass.getName() +_							"] neither has a (String, Throwable) constructor nor a (String) constructor")__				}_			}_		}_	};determine,the,constructor,to,use,for,the,given,service,locator,exception,class,only,called,in,case,of,a,custom,service,locator,exception,p,the,default,implementation,looks,for,a,constructor,with,one,of,the,following,parameter,types,code,string,throwable,or,code,throwable,or,code,string,param,exception,class,the,exception,class,return,the,constructor,to,use,see,set,service,locator,exception,class;suppress,warnings,unchecked,protected,constructor,exception,determine,service,locator,exception,constructor,class,extends,exception,exception,class,try,return,constructor,exception,exception,class,get,constructor,new,class,string,class,throwable,class,catch,no,such,method,exception,ex,try,return,constructor,exception,exception,class,get,constructor,new,class,throwable,class,catch,no,such,method,exception,ex2,try,return,constructor,exception,exception,class,get,constructor,new,class,string,class,catch,no,such,method,exception,ex3,throw,new,illegal,argument,exception,service,locator,exception,exception,class,get,name,neither,has,a,string,throwable,constructor,nor,a,string,constructor
ServiceLocatorFactoryBean -> @SuppressWarnings("unchecked") 	protected Constructor<Exception> determineServiceLocatorExceptionConstructor(Class<? extends Exception> exceptionClass);1432125256;Determine the constructor to use for the given service locator exception_class. Only called in case of a custom service locator exception._<p>The default implementation looks for a constructor with one of the_following parameter types: {@code (String, Throwable)}_or {@code (Throwable)} or {@code (String)}._@param exceptionClass the exception class_@return the constructor to use_@see #setServiceLocatorExceptionClass;@SuppressWarnings("unchecked")_	protected Constructor<Exception> determineServiceLocatorExceptionConstructor(Class<? extends Exception> exceptionClass) {_		try {_			return (Constructor<Exception>) exceptionClass.getConstructor(new Class<?>[] {String.class, Throwable.class})__		}_		catch (NoSuchMethodException ex) {_			try {_				return (Constructor<Exception>) exceptionClass.getConstructor(new Class<?>[] {Throwable.class})__			}_			catch (NoSuchMethodException ex2) {_				try {_					return (Constructor<Exception>) exceptionClass.getConstructor(new Class<?>[] {String.class})__				}_				catch (NoSuchMethodException ex3) {_					throw new IllegalArgumentException(_							"Service locator exception [" + exceptionClass.getName() +_							"] neither has a (String, Throwable) constructor nor a (String) constructor")__				}_			}_		}_	};determine,the,constructor,to,use,for,the,given,service,locator,exception,class,only,called,in,case,of,a,custom,service,locator,exception,p,the,default,implementation,looks,for,a,constructor,with,one,of,the,following,parameter,types,code,string,throwable,or,code,throwable,or,code,string,param,exception,class,the,exception,class,return,the,constructor,to,use,see,set,service,locator,exception,class;suppress,warnings,unchecked,protected,constructor,exception,determine,service,locator,exception,constructor,class,extends,exception,exception,class,try,return,constructor,exception,exception,class,get,constructor,new,class,string,class,throwable,class,catch,no,such,method,exception,ex,try,return,constructor,exception,exception,class,get,constructor,new,class,throwable,class,catch,no,such,method,exception,ex2,try,return,constructor,exception,exception,class,get,constructor,new,class,string,class,catch,no,such,method,exception,ex3,throw,new,illegal,argument,exception,service,locator,exception,exception,class,get,name,neither,has,a,string,throwable,constructor,nor,a,string,constructor
ServiceLocatorFactoryBean -> @SuppressWarnings("unchecked") 	protected Constructor<Exception> determineServiceLocatorExceptionConstructor(Class<? extends Exception> exceptionClass);1496837955;Determine the constructor to use for the given service locator exception_class. Only called in case of a custom service locator exception._<p>The default implementation looks for a constructor with one of the_following parameter types: {@code (String, Throwable)}_or {@code (Throwable)} or {@code (String)}._@param exceptionClass the exception class_@return the constructor to use_@see #setServiceLocatorExceptionClass;@SuppressWarnings("unchecked")_	protected Constructor<Exception> determineServiceLocatorExceptionConstructor(Class<? extends Exception> exceptionClass) {_		try {_			return (Constructor<Exception>) exceptionClass.getConstructor(new Class<?>[] {String.class, Throwable.class})__		}_		catch (NoSuchMethodException ex) {_			try {_				return (Constructor<Exception>) exceptionClass.getConstructor(new Class<?>[] {Throwable.class})__			}_			catch (NoSuchMethodException ex2) {_				try {_					return (Constructor<Exception>) exceptionClass.getConstructor(new Class<?>[] {String.class})__				}_				catch (NoSuchMethodException ex3) {_					throw new IllegalArgumentException(_							"Service locator exception [" + exceptionClass.getName() +_							"] neither has a (String, Throwable) constructor nor a (String) constructor")__				}_			}_		}_	};determine,the,constructor,to,use,for,the,given,service,locator,exception,class,only,called,in,case,of,a,custom,service,locator,exception,p,the,default,implementation,looks,for,a,constructor,with,one,of,the,following,parameter,types,code,string,throwable,or,code,throwable,or,code,string,param,exception,class,the,exception,class,return,the,constructor,to,use,see,set,service,locator,exception,class;suppress,warnings,unchecked,protected,constructor,exception,determine,service,locator,exception,constructor,class,extends,exception,exception,class,try,return,constructor,exception,exception,class,get,constructor,new,class,string,class,throwable,class,catch,no,such,method,exception,ex,try,return,constructor,exception,exception,class,get,constructor,new,class,throwable,class,catch,no,such,method,exception,ex2,try,return,constructor,exception,exception,class,get,constructor,new,class,string,class,catch,no,such,method,exception,ex3,throw,new,illegal,argument,exception,service,locator,exception,exception,class,get,name,neither,has,a,string,throwable,constructor,nor,a,string,constructor
ServiceLocatorFactoryBean -> @SuppressWarnings("unchecked") 	protected Constructor<Exception> determineServiceLocatorExceptionConstructor(Class<? extends Exception> exceptionClass);1498780456;Determine the constructor to use for the given service locator exception_class. Only called in case of a custom service locator exception._<p>The default implementation looks for a constructor with one of the_following parameter types: {@code (String, Throwable)}_or {@code (Throwable)} or {@code (String)}._@param exceptionClass the exception class_@return the constructor to use_@see #setServiceLocatorExceptionClass;@SuppressWarnings("unchecked")_	protected Constructor<Exception> determineServiceLocatorExceptionConstructor(Class<? extends Exception> exceptionClass) {_		try {_			return (Constructor<Exception>) exceptionClass.getConstructor(String.class, Throwable.class)__		}_		catch (NoSuchMethodException ex) {_			try {_				return (Constructor<Exception>) exceptionClass.getConstructor(Throwable.class)__			}_			catch (NoSuchMethodException ex2) {_				try {_					return (Constructor<Exception>) exceptionClass.getConstructor(String.class)__				}_				catch (NoSuchMethodException ex3) {_					throw new IllegalArgumentException(_							"Service locator exception [" + exceptionClass.getName() +_							"] neither has a (String, Throwable) constructor nor a (String) constructor")__				}_			}_		}_	};determine,the,constructor,to,use,for,the,given,service,locator,exception,class,only,called,in,case,of,a,custom,service,locator,exception,p,the,default,implementation,looks,for,a,constructor,with,one,of,the,following,parameter,types,code,string,throwable,or,code,throwable,or,code,string,param,exception,class,the,exception,class,return,the,constructor,to,use,see,set,service,locator,exception,class;suppress,warnings,unchecked,protected,constructor,exception,determine,service,locator,exception,constructor,class,extends,exception,exception,class,try,return,constructor,exception,exception,class,get,constructor,string,class,throwable,class,catch,no,such,method,exception,ex,try,return,constructor,exception,exception,class,get,constructor,throwable,class,catch,no,such,method,exception,ex2,try,return,constructor,exception,exception,class,get,constructor,string,class,catch,no,such,method,exception,ex3,throw,new,illegal,argument,exception,service,locator,exception,exception,class,get,name,neither,has,a,string,throwable,constructor,nor,a,string,constructor
ServiceLocatorFactoryBean -> @SuppressWarnings("unchecked") 	protected Constructor<Exception> determineServiceLocatorExceptionConstructor(Class<? extends Exception> exceptionClass);1502974979;Determine the constructor to use for the given service locator exception_class. Only called in case of a custom service locator exception._<p>The default implementation looks for a constructor with one of the_following parameter types: {@code (String, Throwable)}_or {@code (Throwable)} or {@code (String)}._@param exceptionClass the exception class_@return the constructor to use_@see #setServiceLocatorExceptionClass;@SuppressWarnings("unchecked")_	protected Constructor<Exception> determineServiceLocatorExceptionConstructor(Class<? extends Exception> exceptionClass) {_		try {_			return (Constructor<Exception>) exceptionClass.getConstructor(String.class, Throwable.class)__		}_		catch (NoSuchMethodException ex) {_			try {_				return (Constructor<Exception>) exceptionClass.getConstructor(Throwable.class)__			}_			catch (NoSuchMethodException ex2) {_				try {_					return (Constructor<Exception>) exceptionClass.getConstructor(String.class)__				}_				catch (NoSuchMethodException ex3) {_					throw new IllegalArgumentException(_							"Service locator exception [" + exceptionClass.getName() +_							"] neither has a (String, Throwable) constructor nor a (String) constructor")__				}_			}_		}_	};determine,the,constructor,to,use,for,the,given,service,locator,exception,class,only,called,in,case,of,a,custom,service,locator,exception,p,the,default,implementation,looks,for,a,constructor,with,one,of,the,following,parameter,types,code,string,throwable,or,code,throwable,or,code,string,param,exception,class,the,exception,class,return,the,constructor,to,use,see,set,service,locator,exception,class;suppress,warnings,unchecked,protected,constructor,exception,determine,service,locator,exception,constructor,class,extends,exception,exception,class,try,return,constructor,exception,exception,class,get,constructor,string,class,throwable,class,catch,no,such,method,exception,ex,try,return,constructor,exception,exception,class,get,constructor,throwable,class,catch,no,such,method,exception,ex2,try,return,constructor,exception,exception,class,get,constructor,string,class,catch,no,such,method,exception,ex3,throw,new,illegal,argument,exception,service,locator,exception,exception,class,get,name,neither,has,a,string,throwable,constructor,nor,a,string,constructor
ServiceLocatorFactoryBean -> ServiceLocatorInvocationHandler -> private String tryGetBeanName(Object[] args);1328020251;Check whether a service id was passed in.;private String tryGetBeanName(Object[] args) {_			String beanName = ""__			if (args != null && args.length == 1 && args[0] != null) {_				beanName = args[0].toString()__			}_			_			if (serviceMappings != null) {_				String mappedName = serviceMappings.getProperty(beanName)__				if (mappedName != null) {_					beanName = mappedName__				}_			}_			return beanName__		};check,whether,a,service,id,was,passed,in;private,string,try,get,bean,name,object,args,string,bean,name,if,args,null,args,length,1,args,0,null,bean,name,args,0,to,string,if,service,mappings,null,string,mapped,name,service,mappings,get,property,bean,name,if,mapped,name,null,bean,name,mapped,name,return,bean,name
ServiceLocatorFactoryBean -> ServiceLocatorInvocationHandler -> private String tryGetBeanName(Object[] args);1356735495;Check whether a service id was passed in.;private String tryGetBeanName(Object[] args) {_			String beanName = ""__			if (args != null && args.length == 1 && args[0] != null) {_				beanName = args[0].toString()__			}_			_			if (serviceMappings != null) {_				String mappedName = serviceMappings.getProperty(beanName)__				if (mappedName != null) {_					beanName = mappedName__				}_			}_			return beanName__		};check,whether,a,service,id,was,passed,in;private,string,try,get,bean,name,object,args,string,bean,name,if,args,null,args,length,1,args,0,null,bean,name,args,0,to,string,if,service,mappings,null,string,mapped,name,service,mappings,get,property,bean,name,if,mapped,name,null,bean,name,mapped,name,return,bean,name
ServiceLocatorFactoryBean -> ServiceLocatorInvocationHandler -> private String tryGetBeanName(Object[] args);1357119239;Check whether a service id was passed in.;private String tryGetBeanName(Object[] args) {_			String beanName = ""__			if (args != null && args.length == 1 && args[0] != null) {_				beanName = args[0].toString()__			}_			_			if (serviceMappings != null) {_				String mappedName = serviceMappings.getProperty(beanName)__				if (mappedName != null) {_					beanName = mappedName__				}_			}_			return beanName__		};check,whether,a,service,id,was,passed,in;private,string,try,get,bean,name,object,args,string,bean,name,if,args,null,args,length,1,args,0,null,bean,name,args,0,to,string,if,service,mappings,null,string,mapped,name,service,mappings,get,property,bean,name,if,mapped,name,null,bean,name,mapped,name,return,bean,name
ServiceLocatorFactoryBean -> ServiceLocatorInvocationHandler -> private String tryGetBeanName(Object[] args);1362408075;Check whether a service id was passed in.;private String tryGetBeanName(Object[] args) {_			String beanName = ""__			if (args != null && args.length == 1 && args[0] != null) {_				beanName = args[0].toString()__			}_			_			if (serviceMappings != null) {_				String mappedName = serviceMappings.getProperty(beanName)__				if (mappedName != null) {_					beanName = mappedName__				}_			}_			return beanName__		};check,whether,a,service,id,was,passed,in;private,string,try,get,bean,name,object,args,string,bean,name,if,args,null,args,length,1,args,0,null,bean,name,args,0,to,string,if,service,mappings,null,string,mapped,name,service,mappings,get,property,bean,name,if,mapped,name,null,bean,name,mapped,name,return,bean,name
ServiceLocatorFactoryBean -> ServiceLocatorInvocationHandler -> private String tryGetBeanName(Object[] args);1365769284;Check whether a service id was passed in.;private String tryGetBeanName(Object[] args) {_			String beanName = ""__			if (args != null && args.length == 1 && args[0] != null) {_				beanName = args[0].toString()__			}_			_			if (serviceMappings != null) {_				String mappedName = serviceMappings.getProperty(beanName)__				if (mappedName != null) {_					beanName = mappedName__				}_			}_			return beanName__		};check,whether,a,service,id,was,passed,in;private,string,try,get,bean,name,object,args,string,bean,name,if,args,null,args,length,1,args,0,null,bean,name,args,0,to,string,if,service,mappings,null,string,mapped,name,service,mappings,get,property,bean,name,if,mapped,name,null,bean,name,mapped,name,return,bean,name
ServiceLocatorFactoryBean -> ServiceLocatorInvocationHandler -> private String tryGetBeanName(Object[] args);1368482696;Check whether a service id was passed in.;private String tryGetBeanName(Object[] args) {_			String beanName = ""__			if (args != null && args.length == 1 && args[0] != null) {_				beanName = args[0].toString()__			}_			_			if (serviceMappings != null) {_				String mappedName = serviceMappings.getProperty(beanName)__				if (mappedName != null) {_					beanName = mappedName__				}_			}_			return beanName__		};check,whether,a,service,id,was,passed,in;private,string,try,get,bean,name,object,args,string,bean,name,if,args,null,args,length,1,args,0,null,bean,name,args,0,to,string,if,service,mappings,null,string,mapped,name,service,mappings,get,property,bean,name,if,mapped,name,null,bean,name,mapped,name,return,bean,name
ServiceLocatorFactoryBean -> ServiceLocatorInvocationHandler -> private String tryGetBeanName(Object[] args);1385412762;Check whether a service id was passed in.;private String tryGetBeanName(Object[] args) {_			String beanName = ""__			if (args != null && args.length == 1 && args[0] != null) {_				beanName = args[0].toString()__			}_			_			if (serviceMappings != null) {_				String mappedName = serviceMappings.getProperty(beanName)__				if (mappedName != null) {_					beanName = mappedName__				}_			}_			return beanName__		};check,whether,a,service,id,was,passed,in;private,string,try,get,bean,name,object,args,string,bean,name,if,args,null,args,length,1,args,0,null,bean,name,args,0,to,string,if,service,mappings,null,string,mapped,name,service,mappings,get,property,bean,name,if,mapped,name,null,bean,name,mapped,name,return,bean,name
ServiceLocatorFactoryBean -> ServiceLocatorInvocationHandler -> private String tryGetBeanName(Object[] args);1432125256;Check whether a service id was passed in.;private String tryGetBeanName(Object[] args) {_			String beanName = ""__			if (args != null && args.length == 1 && args[0] != null) {_				beanName = args[0].toString()__			}_			_			if (serviceMappings != null) {_				String mappedName = serviceMappings.getProperty(beanName)__				if (mappedName != null) {_					beanName = mappedName__				}_			}_			return beanName__		};check,whether,a,service,id,was,passed,in;private,string,try,get,bean,name,object,args,string,bean,name,if,args,null,args,length,1,args,0,null,bean,name,args,0,to,string,if,service,mappings,null,string,mapped,name,service,mappings,get,property,bean,name,if,mapped,name,null,bean,name,mapped,name,return,bean,name
ServiceLocatorFactoryBean -> public void setServiceMappings(Properties serviceMappings);1328020251;Set mappings between service ids (passed into the service locator)_and bean names (in the bean factory). Service ids that are not defined_here will be treated as bean names as-is._<p>The empty string as service id key defines the mapping for <code>null</code> and_empty string, and for factory methods without parameter. If not defined,_a single matching bean will be retrieved from the bean factory._@param serviceMappings mappings between service ids and bean names,_with service ids as keys as bean names as values;public void setServiceMappings(Properties serviceMappings) {_		this.serviceMappings = serviceMappings__	};set,mappings,between,service,ids,passed,into,the,service,locator,and,bean,names,in,the,bean,factory,service,ids,that,are,not,defined,here,will,be,treated,as,bean,names,as,is,p,the,empty,string,as,service,id,key,defines,the,mapping,for,code,null,code,and,empty,string,and,for,factory,methods,without,parameter,if,not,defined,a,single,matching,bean,will,be,retrieved,from,the,bean,factory,param,service,mappings,mappings,between,service,ids,and,bean,names,with,service,ids,as,keys,as,bean,names,as,values;public,void,set,service,mappings,properties,service,mappings,this,service,mappings,service,mappings
ServiceLocatorFactoryBean -> public void setServiceMappings(Properties serviceMappings);1356735495;Set mappings between service ids (passed into the service locator)_and bean names (in the bean factory). Service ids that are not defined_here will be treated as bean names as-is._<p>The empty string as service id key defines the mapping for {@code null} and_empty string, and for factory methods without parameter. If not defined,_a single matching bean will be retrieved from the bean factory._@param serviceMappings mappings between service ids and bean names,_with service ids as keys as bean names as values;public void setServiceMappings(Properties serviceMappings) {_		this.serviceMappings = serviceMappings__	};set,mappings,between,service,ids,passed,into,the,service,locator,and,bean,names,in,the,bean,factory,service,ids,that,are,not,defined,here,will,be,treated,as,bean,names,as,is,p,the,empty,string,as,service,id,key,defines,the,mapping,for,code,null,and,empty,string,and,for,factory,methods,without,parameter,if,not,defined,a,single,matching,bean,will,be,retrieved,from,the,bean,factory,param,service,mappings,mappings,between,service,ids,and,bean,names,with,service,ids,as,keys,as,bean,names,as,values;public,void,set,service,mappings,properties,service,mappings,this,service,mappings,service,mappings
ServiceLocatorFactoryBean -> public void setServiceMappings(Properties serviceMappings);1357119239;Set mappings between service ids (passed into the service locator)_and bean names (in the bean factory). Service ids that are not defined_here will be treated as bean names as-is._<p>The empty string as service id key defines the mapping for {@code null} and_empty string, and for factory methods without parameter. If not defined,_a single matching bean will be retrieved from the bean factory._@param serviceMappings mappings between service ids and bean names,_with service ids as keys as bean names as values;public void setServiceMappings(Properties serviceMappings) {_		this.serviceMappings = serviceMappings__	};set,mappings,between,service,ids,passed,into,the,service,locator,and,bean,names,in,the,bean,factory,service,ids,that,are,not,defined,here,will,be,treated,as,bean,names,as,is,p,the,empty,string,as,service,id,key,defines,the,mapping,for,code,null,and,empty,string,and,for,factory,methods,without,parameter,if,not,defined,a,single,matching,bean,will,be,retrieved,from,the,bean,factory,param,service,mappings,mappings,between,service,ids,and,bean,names,with,service,ids,as,keys,as,bean,names,as,values;public,void,set,service,mappings,properties,service,mappings,this,service,mappings,service,mappings
ServiceLocatorFactoryBean -> public void setServiceMappings(Properties serviceMappings);1362408075;Set mappings between service ids (passed into the service locator)_and bean names (in the bean factory). Service ids that are not defined_here will be treated as bean names as-is._<p>The empty string as service id key defines the mapping for {@code null} and_empty string, and for factory methods without parameter. If not defined,_a single matching bean will be retrieved from the bean factory._@param serviceMappings mappings between service ids and bean names,_with service ids as keys as bean names as values;public void setServiceMappings(Properties serviceMappings) {_		this.serviceMappings = serviceMappings__	};set,mappings,between,service,ids,passed,into,the,service,locator,and,bean,names,in,the,bean,factory,service,ids,that,are,not,defined,here,will,be,treated,as,bean,names,as,is,p,the,empty,string,as,service,id,key,defines,the,mapping,for,code,null,and,empty,string,and,for,factory,methods,without,parameter,if,not,defined,a,single,matching,bean,will,be,retrieved,from,the,bean,factory,param,service,mappings,mappings,between,service,ids,and,bean,names,with,service,ids,as,keys,as,bean,names,as,values;public,void,set,service,mappings,properties,service,mappings,this,service,mappings,service,mappings
ServiceLocatorFactoryBean -> public void setServiceMappings(Properties serviceMappings);1365769284;Set mappings between service ids (passed into the service locator)_and bean names (in the bean factory). Service ids that are not defined_here will be treated as bean names as-is._<p>The empty string as service id key defines the mapping for {@code null} and_empty string, and for factory methods without parameter. If not defined,_a single matching bean will be retrieved from the bean factory._@param serviceMappings mappings between service ids and bean names,_with service ids as keys as bean names as values;public void setServiceMappings(Properties serviceMappings) {_		this.serviceMappings = serviceMappings__	};set,mappings,between,service,ids,passed,into,the,service,locator,and,bean,names,in,the,bean,factory,service,ids,that,are,not,defined,here,will,be,treated,as,bean,names,as,is,p,the,empty,string,as,service,id,key,defines,the,mapping,for,code,null,and,empty,string,and,for,factory,methods,without,parameter,if,not,defined,a,single,matching,bean,will,be,retrieved,from,the,bean,factory,param,service,mappings,mappings,between,service,ids,and,bean,names,with,service,ids,as,keys,as,bean,names,as,values;public,void,set,service,mappings,properties,service,mappings,this,service,mappings,service,mappings
ServiceLocatorFactoryBean -> public void setServiceMappings(Properties serviceMappings);1368482696;Set mappings between service ids (passed into the service locator)_and bean names (in the bean factory). Service ids that are not defined_here will be treated as bean names as-is._<p>The empty string as service id key defines the mapping for {@code null} and_empty string, and for factory methods without parameter. If not defined,_a single matching bean will be retrieved from the bean factory._@param serviceMappings mappings between service ids and bean names,_with service ids as keys as bean names as values;public void setServiceMappings(Properties serviceMappings) {_		this.serviceMappings = serviceMappings__	};set,mappings,between,service,ids,passed,into,the,service,locator,and,bean,names,in,the,bean,factory,service,ids,that,are,not,defined,here,will,be,treated,as,bean,names,as,is,p,the,empty,string,as,service,id,key,defines,the,mapping,for,code,null,and,empty,string,and,for,factory,methods,without,parameter,if,not,defined,a,single,matching,bean,will,be,retrieved,from,the,bean,factory,param,service,mappings,mappings,between,service,ids,and,bean,names,with,service,ids,as,keys,as,bean,names,as,values;public,void,set,service,mappings,properties,service,mappings,this,service,mappings,service,mappings
ServiceLocatorFactoryBean -> public void setServiceMappings(Properties serviceMappings);1385412762;Set mappings between service ids (passed into the service locator)_and bean names (in the bean factory). Service ids that are not defined_here will be treated as bean names as-is._<p>The empty string as service id key defines the mapping for {@code null} and_empty string, and for factory methods without parameter. If not defined,_a single matching bean will be retrieved from the bean factory._@param serviceMappings mappings between service ids and bean names,_with service ids as keys as bean names as values;public void setServiceMappings(Properties serviceMappings) {_		this.serviceMappings = serviceMappings__	};set,mappings,between,service,ids,passed,into,the,service,locator,and,bean,names,in,the,bean,factory,service,ids,that,are,not,defined,here,will,be,treated,as,bean,names,as,is,p,the,empty,string,as,service,id,key,defines,the,mapping,for,code,null,and,empty,string,and,for,factory,methods,without,parameter,if,not,defined,a,single,matching,bean,will,be,retrieved,from,the,bean,factory,param,service,mappings,mappings,between,service,ids,and,bean,names,with,service,ids,as,keys,as,bean,names,as,values;public,void,set,service,mappings,properties,service,mappings,this,service,mappings,service,mappings
ServiceLocatorFactoryBean -> public void setServiceMappings(Properties serviceMappings);1432125256;Set mappings between service ids (passed into the service locator)_and bean names (in the bean factory). Service ids that are not defined_here will be treated as bean names as-is._<p>The empty string as service id key defines the mapping for {@code null} and_empty string, and for factory methods without parameter. If not defined,_a single matching bean will be retrieved from the bean factory._@param serviceMappings mappings between service ids and bean names,_with service ids as keys as bean names as values;public void setServiceMappings(Properties serviceMappings) {_		this.serviceMappings = serviceMappings__	};set,mappings,between,service,ids,passed,into,the,service,locator,and,bean,names,in,the,bean,factory,service,ids,that,are,not,defined,here,will,be,treated,as,bean,names,as,is,p,the,empty,string,as,service,id,key,defines,the,mapping,for,code,null,and,empty,string,and,for,factory,methods,without,parameter,if,not,defined,a,single,matching,bean,will,be,retrieved,from,the,bean,factory,param,service,mappings,mappings,between,service,ids,and,bean,names,with,service,ids,as,keys,as,bean,names,as,values;public,void,set,service,mappings,properties,service,mappings,this,service,mappings,service,mappings
ServiceLocatorFactoryBean -> public void setServiceMappings(Properties serviceMappings);1496837955;Set mappings between service ids (passed into the service locator)_and bean names (in the bean factory). Service ids that are not defined_here will be treated as bean names as-is._<p>The empty string as service id key defines the mapping for {@code null} and_empty string, and for factory methods without parameter. If not defined,_a single matching bean will be retrieved from the bean factory._@param serviceMappings mappings between service ids and bean names,_with service ids as keys as bean names as values;public void setServiceMappings(Properties serviceMappings) {_		this.serviceMappings = serviceMappings__	};set,mappings,between,service,ids,passed,into,the,service,locator,and,bean,names,in,the,bean,factory,service,ids,that,are,not,defined,here,will,be,treated,as,bean,names,as,is,p,the,empty,string,as,service,id,key,defines,the,mapping,for,code,null,and,empty,string,and,for,factory,methods,without,parameter,if,not,defined,a,single,matching,bean,will,be,retrieved,from,the,bean,factory,param,service,mappings,mappings,between,service,ids,and,bean,names,with,service,ids,as,keys,as,bean,names,as,values;public,void,set,service,mappings,properties,service,mappings,this,service,mappings,service,mappings
ServiceLocatorFactoryBean -> public void setServiceMappings(Properties serviceMappings);1498780456;Set mappings between service ids (passed into the service locator)_and bean names (in the bean factory). Service ids that are not defined_here will be treated as bean names as-is._<p>The empty string as service id key defines the mapping for {@code null} and_empty string, and for factory methods without parameter. If not defined,_a single matching bean will be retrieved from the bean factory._@param serviceMappings mappings between service ids and bean names,_with service ids as keys as bean names as values;public void setServiceMappings(Properties serviceMappings) {_		this.serviceMappings = serviceMappings__	};set,mappings,between,service,ids,passed,into,the,service,locator,and,bean,names,in,the,bean,factory,service,ids,that,are,not,defined,here,will,be,treated,as,bean,names,as,is,p,the,empty,string,as,service,id,key,defines,the,mapping,for,code,null,and,empty,string,and,for,factory,methods,without,parameter,if,not,defined,a,single,matching,bean,will,be,retrieved,from,the,bean,factory,param,service,mappings,mappings,between,service,ids,and,bean,names,with,service,ids,as,keys,as,bean,names,as,values;public,void,set,service,mappings,properties,service,mappings,this,service,mappings,service,mappings
ServiceLocatorFactoryBean -> public void setServiceMappings(Properties serviceMappings);1502974979;Set mappings between service ids (passed into the service locator)_and bean names (in the bean factory). Service ids that are not defined_here will be treated as bean names as-is._<p>The empty string as service id key defines the mapping for {@code null} and_empty string, and for factory methods without parameter. If not defined,_a single matching bean will be retrieved from the bean factory._@param serviceMappings mappings between service ids and bean names,_with service ids as keys as bean names as values;public void setServiceMappings(Properties serviceMappings) {_		this.serviceMappings = serviceMappings__	};set,mappings,between,service,ids,passed,into,the,service,locator,and,bean,names,in,the,bean,factory,service,ids,that,are,not,defined,here,will,be,treated,as,bean,names,as,is,p,the,empty,string,as,service,id,key,defines,the,mapping,for,code,null,and,empty,string,and,for,factory,methods,without,parameter,if,not,defined,a,single,matching,bean,will,be,retrieved,from,the,bean,factory,param,service,mappings,mappings,between,service,ids,and,bean,names,with,service,ids,as,keys,as,bean,names,as,values;public,void,set,service,mappings,properties,service,mappings,this,service,mappings,service,mappings
ServiceLocatorFactoryBean -> public void setServiceLocatorExceptionClass(Class<? extends Exception> serviceLocatorExceptionClass);1385412762;Set the exception class that the service locator should throw if service_lookup failed. The specified exception class must have a constructor_with one of the following parameter types: {@code (String, Throwable)}_or {@code (Throwable)} or {@code (String)}._<p>If not specified, subclasses of Spring's BeansException will be thrown,_for example NoSuchBeanDefinitionException. As those are unchecked, the_caller does not need to handle them, so it might be acceptable that_Spring exceptions get thrown as long as they are just handled generically._@see #determineServiceLocatorExceptionConstructor_@see #createServiceLocatorException;public void setServiceLocatorExceptionClass(Class<? extends Exception> serviceLocatorExceptionClass) {_		if (serviceLocatorExceptionClass != null && !Exception.class.isAssignableFrom(serviceLocatorExceptionClass)) {_			throw new IllegalArgumentException(_					"serviceLocatorException [" + serviceLocatorExceptionClass.getName() + "] is not a subclass of Exception")__		}_		this.serviceLocatorExceptionConstructor =_				determineServiceLocatorExceptionConstructor(serviceLocatorExceptionClass)__	};set,the,exception,class,that,the,service,locator,should,throw,if,service,lookup,failed,the,specified,exception,class,must,have,a,constructor,with,one,of,the,following,parameter,types,code,string,throwable,or,code,throwable,or,code,string,p,if,not,specified,subclasses,of,spring,s,beans,exception,will,be,thrown,for,example,no,such,bean,definition,exception,as,those,are,unchecked,the,caller,does,not,need,to,handle,them,so,it,might,be,acceptable,that,spring,exceptions,get,thrown,as,long,as,they,are,just,handled,generically,see,determine,service,locator,exception,constructor,see,create,service,locator,exception;public,void,set,service,locator,exception,class,class,extends,exception,service,locator,exception,class,if,service,locator,exception,class,null,exception,class,is,assignable,from,service,locator,exception,class,throw,new,illegal,argument,exception,service,locator,exception,service,locator,exception,class,get,name,is,not,a,subclass,of,exception,this,service,locator,exception,constructor,determine,service,locator,exception,constructor,service,locator,exception,class
ServiceLocatorFactoryBean -> public void setServiceLocatorExceptionClass(Class<? extends Exception> serviceLocatorExceptionClass);1432125256;Set the exception class that the service locator should throw if service_lookup failed. The specified exception class must have a constructor_with one of the following parameter types: {@code (String, Throwable)}_or {@code (Throwable)} or {@code (String)}._<p>If not specified, subclasses of Spring's BeansException will be thrown,_for example NoSuchBeanDefinitionException. As those are unchecked, the_caller does not need to handle them, so it might be acceptable that_Spring exceptions get thrown as long as they are just handled generically._@see #determineServiceLocatorExceptionConstructor_@see #createServiceLocatorException;public void setServiceLocatorExceptionClass(Class<? extends Exception> serviceLocatorExceptionClass) {_		if (serviceLocatorExceptionClass != null && !Exception.class.isAssignableFrom(serviceLocatorExceptionClass)) {_			throw new IllegalArgumentException(_					"serviceLocatorException [" + serviceLocatorExceptionClass.getName() + "] is not a subclass of Exception")__		}_		this.serviceLocatorExceptionConstructor =_				determineServiceLocatorExceptionConstructor(serviceLocatorExceptionClass)__	};set,the,exception,class,that,the,service,locator,should,throw,if,service,lookup,failed,the,specified,exception,class,must,have,a,constructor,with,one,of,the,following,parameter,types,code,string,throwable,or,code,throwable,or,code,string,p,if,not,specified,subclasses,of,spring,s,beans,exception,will,be,thrown,for,example,no,such,bean,definition,exception,as,those,are,unchecked,the,caller,does,not,need,to,handle,them,so,it,might,be,acceptable,that,spring,exceptions,get,thrown,as,long,as,they,are,just,handled,generically,see,determine,service,locator,exception,constructor,see,create,service,locator,exception;public,void,set,service,locator,exception,class,class,extends,exception,service,locator,exception,class,if,service,locator,exception,class,null,exception,class,is,assignable,from,service,locator,exception,class,throw,new,illegal,argument,exception,service,locator,exception,service,locator,exception,class,get,name,is,not,a,subclass,of,exception,this,service,locator,exception,constructor,determine,service,locator,exception,constructor,service,locator,exception,class
ServiceLocatorFactoryBean -> public void setServiceLocatorExceptionClass(Class<? extends Exception> serviceLocatorExceptionClass);1496837955;Set the exception class that the service locator should throw if service_lookup failed. The specified exception class must have a constructor_with one of the following parameter types: {@code (String, Throwable)}_or {@code (Throwable)} or {@code (String)}._<p>If not specified, subclasses of Spring's BeansException will be thrown,_for example NoSuchBeanDefinitionException. As those are unchecked, the_caller does not need to handle them, so it might be acceptable that_Spring exceptions get thrown as long as they are just handled generically._@see #determineServiceLocatorExceptionConstructor_@see #createServiceLocatorException;public void setServiceLocatorExceptionClass(Class<? extends Exception> serviceLocatorExceptionClass) {_		this.serviceLocatorExceptionConstructor =_				determineServiceLocatorExceptionConstructor(serviceLocatorExceptionClass)__	};set,the,exception,class,that,the,service,locator,should,throw,if,service,lookup,failed,the,specified,exception,class,must,have,a,constructor,with,one,of,the,following,parameter,types,code,string,throwable,or,code,throwable,or,code,string,p,if,not,specified,subclasses,of,spring,s,beans,exception,will,be,thrown,for,example,no,such,bean,definition,exception,as,those,are,unchecked,the,caller,does,not,need,to,handle,them,so,it,might,be,acceptable,that,spring,exceptions,get,thrown,as,long,as,they,are,just,handled,generically,see,determine,service,locator,exception,constructor,see,create,service,locator,exception;public,void,set,service,locator,exception,class,class,extends,exception,service,locator,exception,class,this,service,locator,exception,constructor,determine,service,locator,exception,constructor,service,locator,exception,class
ServiceLocatorFactoryBean -> public void setServiceLocatorExceptionClass(Class<? extends Exception> serviceLocatorExceptionClass);1498780456;Set the exception class that the service locator should throw if service_lookup failed. The specified exception class must have a constructor_with one of the following parameter types: {@code (String, Throwable)}_or {@code (Throwable)} or {@code (String)}._<p>If not specified, subclasses of Spring's BeansException will be thrown,_for example NoSuchBeanDefinitionException. As those are unchecked, the_caller does not need to handle them, so it might be acceptable that_Spring exceptions get thrown as long as they are just handled generically._@see #determineServiceLocatorExceptionConstructor_@see #createServiceLocatorException;public void setServiceLocatorExceptionClass(Class<? extends Exception> serviceLocatorExceptionClass) {_		this.serviceLocatorExceptionConstructor =_				determineServiceLocatorExceptionConstructor(serviceLocatorExceptionClass)__	};set,the,exception,class,that,the,service,locator,should,throw,if,service,lookup,failed,the,specified,exception,class,must,have,a,constructor,with,one,of,the,following,parameter,types,code,string,throwable,or,code,throwable,or,code,string,p,if,not,specified,subclasses,of,spring,s,beans,exception,will,be,thrown,for,example,no,such,bean,definition,exception,as,those,are,unchecked,the,caller,does,not,need,to,handle,them,so,it,might,be,acceptable,that,spring,exceptions,get,thrown,as,long,as,they,are,just,handled,generically,see,determine,service,locator,exception,constructor,see,create,service,locator,exception;public,void,set,service,locator,exception,class,class,extends,exception,service,locator,exception,class,this,service,locator,exception,constructor,determine,service,locator,exception,constructor,service,locator,exception,class
ServiceLocatorFactoryBean -> public void setServiceLocatorExceptionClass(Class<? extends Exception> serviceLocatorExceptionClass);1502974979;Set the exception class that the service locator should throw if service_lookup failed. The specified exception class must have a constructor_with one of the following parameter types: {@code (String, Throwable)}_or {@code (Throwable)} or {@code (String)}._<p>If not specified, subclasses of Spring's BeansException will be thrown,_for example NoSuchBeanDefinitionException. As those are unchecked, the_caller does not need to handle them, so it might be acceptable that_Spring exceptions get thrown as long as they are just handled generically._@see #determineServiceLocatorExceptionConstructor_@see #createServiceLocatorException;public void setServiceLocatorExceptionClass(Class<? extends Exception> serviceLocatorExceptionClass) {_		this.serviceLocatorExceptionConstructor =_				determineServiceLocatorExceptionConstructor(serviceLocatorExceptionClass)__	};set,the,exception,class,that,the,service,locator,should,throw,if,service,lookup,failed,the,specified,exception,class,must,have,a,constructor,with,one,of,the,following,parameter,types,code,string,throwable,or,code,throwable,or,code,string,p,if,not,specified,subclasses,of,spring,s,beans,exception,will,be,thrown,for,example,no,such,bean,definition,exception,as,those,are,unchecked,the,caller,does,not,need,to,handle,them,so,it,might,be,acceptable,that,spring,exceptions,get,thrown,as,long,as,they,are,just,handled,generically,see,determine,service,locator,exception,constructor,see,create,service,locator,exception;public,void,set,service,locator,exception,class,class,extends,exception,service,locator,exception,class,this,service,locator,exception,constructor,determine,service,locator,exception,constructor,service,locator,exception,class
ServiceLocatorFactoryBean -> public void setServiceLocatorExceptionClass(Class serviceLocatorExceptionClass);1328020251;Set the exception class that the service locator should throw if service_lookup failed. The specified exception class must have a constructor_with one of the following parameter types: <code>(String, Throwable)</code>_or <code>(Throwable)</code> or <code>(String)</code>._<p>If not specified, subclasses of Spring's BeansException will be thrown,_for example NoSuchBeanDefinitionException. As those are unchecked, the_caller does not need to handle them, so it might be acceptable that_Spring exceptions get thrown as long as they are just handled generically._@see #determineServiceLocatorExceptionConstructor_@see #createServiceLocatorException;public void setServiceLocatorExceptionClass(Class serviceLocatorExceptionClass) {_		if (serviceLocatorExceptionClass != null && !Exception.class.isAssignableFrom(serviceLocatorExceptionClass)) {_			throw new IllegalArgumentException(_					"serviceLocatorException [" + serviceLocatorExceptionClass.getName() + "] is not a subclass of Exception")__		}_		this.serviceLocatorExceptionConstructor =_				determineServiceLocatorExceptionConstructor(serviceLocatorExceptionClass)__	};set,the,exception,class,that,the,service,locator,should,throw,if,service,lookup,failed,the,specified,exception,class,must,have,a,constructor,with,one,of,the,following,parameter,types,code,string,throwable,code,or,code,throwable,code,or,code,string,code,p,if,not,specified,subclasses,of,spring,s,beans,exception,will,be,thrown,for,example,no,such,bean,definition,exception,as,those,are,unchecked,the,caller,does,not,need,to,handle,them,so,it,might,be,acceptable,that,spring,exceptions,get,thrown,as,long,as,they,are,just,handled,generically,see,determine,service,locator,exception,constructor,see,create,service,locator,exception;public,void,set,service,locator,exception,class,class,service,locator,exception,class,if,service,locator,exception,class,null,exception,class,is,assignable,from,service,locator,exception,class,throw,new,illegal,argument,exception,service,locator,exception,service,locator,exception,class,get,name,is,not,a,subclass,of,exception,this,service,locator,exception,constructor,determine,service,locator,exception,constructor,service,locator,exception,class
ServiceLocatorFactoryBean -> public void setServiceLocatorExceptionClass(Class serviceLocatorExceptionClass);1356735495;Set the exception class that the service locator should throw if service_lookup failed. The specified exception class must have a constructor_with one of the following parameter types: {@code (String, Throwable)}_or {@code (Throwable)} or {@code (String)}._<p>If not specified, subclasses of Spring's BeansException will be thrown,_for example NoSuchBeanDefinitionException. As those are unchecked, the_caller does not need to handle them, so it might be acceptable that_Spring exceptions get thrown as long as they are just handled generically._@see #determineServiceLocatorExceptionConstructor_@see #createServiceLocatorException;public void setServiceLocatorExceptionClass(Class serviceLocatorExceptionClass) {_		if (serviceLocatorExceptionClass != null && !Exception.class.isAssignableFrom(serviceLocatorExceptionClass)) {_			throw new IllegalArgumentException(_					"serviceLocatorException [" + serviceLocatorExceptionClass.getName() + "] is not a subclass of Exception")__		}_		this.serviceLocatorExceptionConstructor =_				determineServiceLocatorExceptionConstructor(serviceLocatorExceptionClass)__	};set,the,exception,class,that,the,service,locator,should,throw,if,service,lookup,failed,the,specified,exception,class,must,have,a,constructor,with,one,of,the,following,parameter,types,code,string,throwable,or,code,throwable,or,code,string,p,if,not,specified,subclasses,of,spring,s,beans,exception,will,be,thrown,for,example,no,such,bean,definition,exception,as,those,are,unchecked,the,caller,does,not,need,to,handle,them,so,it,might,be,acceptable,that,spring,exceptions,get,thrown,as,long,as,they,are,just,handled,generically,see,determine,service,locator,exception,constructor,see,create,service,locator,exception;public,void,set,service,locator,exception,class,class,service,locator,exception,class,if,service,locator,exception,class,null,exception,class,is,assignable,from,service,locator,exception,class,throw,new,illegal,argument,exception,service,locator,exception,service,locator,exception,class,get,name,is,not,a,subclass,of,exception,this,service,locator,exception,constructor,determine,service,locator,exception,constructor,service,locator,exception,class
ServiceLocatorFactoryBean -> public void setServiceLocatorExceptionClass(Class serviceLocatorExceptionClass);1357119239;Set the exception class that the service locator should throw if service_lookup failed. The specified exception class must have a constructor_with one of the following parameter types: {@code (String, Throwable)}_or {@code (Throwable)} or {@code (String)}._<p>If not specified, subclasses of Spring's BeansException will be thrown,_for example NoSuchBeanDefinitionException. As those are unchecked, the_caller does not need to handle them, so it might be acceptable that_Spring exceptions get thrown as long as they are just handled generically._@see #determineServiceLocatorExceptionConstructor_@see #createServiceLocatorException;public void setServiceLocatorExceptionClass(Class serviceLocatorExceptionClass) {_		if (serviceLocatorExceptionClass != null && !Exception.class.isAssignableFrom(serviceLocatorExceptionClass)) {_			throw new IllegalArgumentException(_					"serviceLocatorException [" + serviceLocatorExceptionClass.getName() + "] is not a subclass of Exception")__		}_		this.serviceLocatorExceptionConstructor =_				determineServiceLocatorExceptionConstructor(serviceLocatorExceptionClass)__	};set,the,exception,class,that,the,service,locator,should,throw,if,service,lookup,failed,the,specified,exception,class,must,have,a,constructor,with,one,of,the,following,parameter,types,code,string,throwable,or,code,throwable,or,code,string,p,if,not,specified,subclasses,of,spring,s,beans,exception,will,be,thrown,for,example,no,such,bean,definition,exception,as,those,are,unchecked,the,caller,does,not,need,to,handle,them,so,it,might,be,acceptable,that,spring,exceptions,get,thrown,as,long,as,they,are,just,handled,generically,see,determine,service,locator,exception,constructor,see,create,service,locator,exception;public,void,set,service,locator,exception,class,class,service,locator,exception,class,if,service,locator,exception,class,null,exception,class,is,assignable,from,service,locator,exception,class,throw,new,illegal,argument,exception,service,locator,exception,service,locator,exception,class,get,name,is,not,a,subclass,of,exception,this,service,locator,exception,constructor,determine,service,locator,exception,constructor,service,locator,exception,class
ServiceLocatorFactoryBean -> public void setServiceLocatorExceptionClass(Class serviceLocatorExceptionClass);1362408075;Set the exception class that the service locator should throw if service_lookup failed. The specified exception class must have a constructor_with one of the following parameter types: {@code (String, Throwable)}_or {@code (Throwable)} or {@code (String)}._<p>If not specified, subclasses of Spring's BeansException will be thrown,_for example NoSuchBeanDefinitionException. As those are unchecked, the_caller does not need to handle them, so it might be acceptable that_Spring exceptions get thrown as long as they are just handled generically._@see #determineServiceLocatorExceptionConstructor_@see #createServiceLocatorException;public void setServiceLocatorExceptionClass(Class serviceLocatorExceptionClass) {_		if (serviceLocatorExceptionClass != null && !Exception.class.isAssignableFrom(serviceLocatorExceptionClass)) {_			throw new IllegalArgumentException(_					"serviceLocatorException [" + serviceLocatorExceptionClass.getName() + "] is not a subclass of Exception")__		}_		this.serviceLocatorExceptionConstructor =_				determineServiceLocatorExceptionConstructor(serviceLocatorExceptionClass)__	};set,the,exception,class,that,the,service,locator,should,throw,if,service,lookup,failed,the,specified,exception,class,must,have,a,constructor,with,one,of,the,following,parameter,types,code,string,throwable,or,code,throwable,or,code,string,p,if,not,specified,subclasses,of,spring,s,beans,exception,will,be,thrown,for,example,no,such,bean,definition,exception,as,those,are,unchecked,the,caller,does,not,need,to,handle,them,so,it,might,be,acceptable,that,spring,exceptions,get,thrown,as,long,as,they,are,just,handled,generically,see,determine,service,locator,exception,constructor,see,create,service,locator,exception;public,void,set,service,locator,exception,class,class,service,locator,exception,class,if,service,locator,exception,class,null,exception,class,is,assignable,from,service,locator,exception,class,throw,new,illegal,argument,exception,service,locator,exception,service,locator,exception,class,get,name,is,not,a,subclass,of,exception,this,service,locator,exception,constructor,determine,service,locator,exception,constructor,service,locator,exception,class
ServiceLocatorFactoryBean -> public void setServiceLocatorExceptionClass(Class serviceLocatorExceptionClass);1365769284;Set the exception class that the service locator should throw if service_lookup failed. The specified exception class must have a constructor_with one of the following parameter types: {@code (String, Throwable)}_or {@code (Throwable)} or {@code (String)}._<p>If not specified, subclasses of Spring's BeansException will be thrown,_for example NoSuchBeanDefinitionException. As those are unchecked, the_caller does not need to handle them, so it might be acceptable that_Spring exceptions get thrown as long as they are just handled generically._@see #determineServiceLocatorExceptionConstructor_@see #createServiceLocatorException;public void setServiceLocatorExceptionClass(Class serviceLocatorExceptionClass) {_		if (serviceLocatorExceptionClass != null && !Exception.class.isAssignableFrom(serviceLocatorExceptionClass)) {_			throw new IllegalArgumentException(_					"serviceLocatorException [" + serviceLocatorExceptionClass.getName() + "] is not a subclass of Exception")__		}_		this.serviceLocatorExceptionConstructor =_				determineServiceLocatorExceptionConstructor(serviceLocatorExceptionClass)__	};set,the,exception,class,that,the,service,locator,should,throw,if,service,lookup,failed,the,specified,exception,class,must,have,a,constructor,with,one,of,the,following,parameter,types,code,string,throwable,or,code,throwable,or,code,string,p,if,not,specified,subclasses,of,spring,s,beans,exception,will,be,thrown,for,example,no,such,bean,definition,exception,as,those,are,unchecked,the,caller,does,not,need,to,handle,them,so,it,might,be,acceptable,that,spring,exceptions,get,thrown,as,long,as,they,are,just,handled,generically,see,determine,service,locator,exception,constructor,see,create,service,locator,exception;public,void,set,service,locator,exception,class,class,service,locator,exception,class,if,service,locator,exception,class,null,exception,class,is,assignable,from,service,locator,exception,class,throw,new,illegal,argument,exception,service,locator,exception,service,locator,exception,class,get,name,is,not,a,subclass,of,exception,this,service,locator,exception,constructor,determine,service,locator,exception,constructor,service,locator,exception,class
ServiceLocatorFactoryBean -> public void setServiceLocatorExceptionClass(Class serviceLocatorExceptionClass);1368482696;Set the exception class that the service locator should throw if service_lookup failed. The specified exception class must have a constructor_with one of the following parameter types: {@code (String, Throwable)}_or {@code (Throwable)} or {@code (String)}._<p>If not specified, subclasses of Spring's BeansException will be thrown,_for example NoSuchBeanDefinitionException. As those are unchecked, the_caller does not need to handle them, so it might be acceptable that_Spring exceptions get thrown as long as they are just handled generically._@see #determineServiceLocatorExceptionConstructor_@see #createServiceLocatorException;public void setServiceLocatorExceptionClass(Class serviceLocatorExceptionClass) {_		if (serviceLocatorExceptionClass != null && !Exception.class.isAssignableFrom(serviceLocatorExceptionClass)) {_			throw new IllegalArgumentException(_					"serviceLocatorException [" + serviceLocatorExceptionClass.getName() + "] is not a subclass of Exception")__		}_		this.serviceLocatorExceptionConstructor =_				determineServiceLocatorExceptionConstructor(serviceLocatorExceptionClass)__	};set,the,exception,class,that,the,service,locator,should,throw,if,service,lookup,failed,the,specified,exception,class,must,have,a,constructor,with,one,of,the,following,parameter,types,code,string,throwable,or,code,throwable,or,code,string,p,if,not,specified,subclasses,of,spring,s,beans,exception,will,be,thrown,for,example,no,such,bean,definition,exception,as,those,are,unchecked,the,caller,does,not,need,to,handle,them,so,it,might,be,acceptable,that,spring,exceptions,get,thrown,as,long,as,they,are,just,handled,generically,see,determine,service,locator,exception,constructor,see,create,service,locator,exception;public,void,set,service,locator,exception,class,class,service,locator,exception,class,if,service,locator,exception,class,null,exception,class,is,assignable,from,service,locator,exception,class,throw,new,illegal,argument,exception,service,locator,exception,service,locator,exception,class,get,name,is,not,a,subclass,of,exception,this,service,locator,exception,constructor,determine,service,locator,exception,constructor,service,locator,exception,class
ServiceLocatorFactoryBean -> protected Exception createServiceLocatorException(Constructor exceptionConstructor, BeansException cause);1328020251;Create a service locator exception for the given cause._Only called in case of a custom service locator exception._<p>The default implementation can handle all variations of_message and exception arguments._@param exceptionConstructor the constructor to use_@param cause the cause of the service lookup failure_@return the service locator exception to throw_@see #setServiceLocatorExceptionClass;protected Exception createServiceLocatorException(Constructor exceptionConstructor, BeansException cause) {_		Class[] paramTypes = exceptionConstructor.getParameterTypes()__		Object[] args = new Object[paramTypes.length]__		for (int i = 0_ i < paramTypes.length_ i++) {_			if (paramTypes[i].equals(String.class)) {_				args[i] = cause.getMessage()__			}_			else if (paramTypes[i].isInstance(cause)) {_				args[i] = cause__			}_		}_		return (Exception) BeanUtils.instantiateClass(exceptionConstructor, args)__	};create,a,service,locator,exception,for,the,given,cause,only,called,in,case,of,a,custom,service,locator,exception,p,the,default,implementation,can,handle,all,variations,of,message,and,exception,arguments,param,exception,constructor,the,constructor,to,use,param,cause,the,cause,of,the,service,lookup,failure,return,the,service,locator,exception,to,throw,see,set,service,locator,exception,class;protected,exception,create,service,locator,exception,constructor,exception,constructor,beans,exception,cause,class,param,types,exception,constructor,get,parameter,types,object,args,new,object,param,types,length,for,int,i,0,i,param,types,length,i,if,param,types,i,equals,string,class,args,i,cause,get,message,else,if,param,types,i,is,instance,cause,args,i,cause,return,exception,bean,utils,instantiate,class,exception,constructor,args
ServiceLocatorFactoryBean -> protected Exception createServiceLocatorException(Constructor exceptionConstructor, BeansException cause);1356735495;Create a service locator exception for the given cause._Only called in case of a custom service locator exception._<p>The default implementation can handle all variations of_message and exception arguments._@param exceptionConstructor the constructor to use_@param cause the cause of the service lookup failure_@return the service locator exception to throw_@see #setServiceLocatorExceptionClass;protected Exception createServiceLocatorException(Constructor exceptionConstructor, BeansException cause) {_		Class[] paramTypes = exceptionConstructor.getParameterTypes()__		Object[] args = new Object[paramTypes.length]__		for (int i = 0_ i < paramTypes.length_ i++) {_			if (paramTypes[i].equals(String.class)) {_				args[i] = cause.getMessage()__			}_			else if (paramTypes[i].isInstance(cause)) {_				args[i] = cause__			}_		}_		return (Exception) BeanUtils.instantiateClass(exceptionConstructor, args)__	};create,a,service,locator,exception,for,the,given,cause,only,called,in,case,of,a,custom,service,locator,exception,p,the,default,implementation,can,handle,all,variations,of,message,and,exception,arguments,param,exception,constructor,the,constructor,to,use,param,cause,the,cause,of,the,service,lookup,failure,return,the,service,locator,exception,to,throw,see,set,service,locator,exception,class;protected,exception,create,service,locator,exception,constructor,exception,constructor,beans,exception,cause,class,param,types,exception,constructor,get,parameter,types,object,args,new,object,param,types,length,for,int,i,0,i,param,types,length,i,if,param,types,i,equals,string,class,args,i,cause,get,message,else,if,param,types,i,is,instance,cause,args,i,cause,return,exception,bean,utils,instantiate,class,exception,constructor,args
ServiceLocatorFactoryBean -> protected Exception createServiceLocatorException(Constructor exceptionConstructor, BeansException cause);1357119239;Create a service locator exception for the given cause._Only called in case of a custom service locator exception._<p>The default implementation can handle all variations of_message and exception arguments._@param exceptionConstructor the constructor to use_@param cause the cause of the service lookup failure_@return the service locator exception to throw_@see #setServiceLocatorExceptionClass;protected Exception createServiceLocatorException(Constructor exceptionConstructor, BeansException cause) {_		Class[] paramTypes = exceptionConstructor.getParameterTypes()__		Object[] args = new Object[paramTypes.length]__		for (int i = 0_ i < paramTypes.length_ i++) {_			if (paramTypes[i].equals(String.class)) {_				args[i] = cause.getMessage()__			}_			else if (paramTypes[i].isInstance(cause)) {_				args[i] = cause__			}_		}_		return (Exception) BeanUtils.instantiateClass(exceptionConstructor, args)__	};create,a,service,locator,exception,for,the,given,cause,only,called,in,case,of,a,custom,service,locator,exception,p,the,default,implementation,can,handle,all,variations,of,message,and,exception,arguments,param,exception,constructor,the,constructor,to,use,param,cause,the,cause,of,the,service,lookup,failure,return,the,service,locator,exception,to,throw,see,set,service,locator,exception,class;protected,exception,create,service,locator,exception,constructor,exception,constructor,beans,exception,cause,class,param,types,exception,constructor,get,parameter,types,object,args,new,object,param,types,length,for,int,i,0,i,param,types,length,i,if,param,types,i,equals,string,class,args,i,cause,get,message,else,if,param,types,i,is,instance,cause,args,i,cause,return,exception,bean,utils,instantiate,class,exception,constructor,args
ServiceLocatorFactoryBean -> protected Exception createServiceLocatorException(Constructor exceptionConstructor, BeansException cause);1362408075;Create a service locator exception for the given cause._Only called in case of a custom service locator exception._<p>The default implementation can handle all variations of_message and exception arguments._@param exceptionConstructor the constructor to use_@param cause the cause of the service lookup failure_@return the service locator exception to throw_@see #setServiceLocatorExceptionClass;protected Exception createServiceLocatorException(Constructor exceptionConstructor, BeansException cause) {_		Class[] paramTypes = exceptionConstructor.getParameterTypes()__		Object[] args = new Object[paramTypes.length]__		for (int i = 0_ i < paramTypes.length_ i++) {_			if (paramTypes[i].equals(String.class)) {_				args[i] = cause.getMessage()__			}_			else if (paramTypes[i].isInstance(cause)) {_				args[i] = cause__			}_		}_		return (Exception) BeanUtils.instantiateClass(exceptionConstructor, args)__	};create,a,service,locator,exception,for,the,given,cause,only,called,in,case,of,a,custom,service,locator,exception,p,the,default,implementation,can,handle,all,variations,of,message,and,exception,arguments,param,exception,constructor,the,constructor,to,use,param,cause,the,cause,of,the,service,lookup,failure,return,the,service,locator,exception,to,throw,see,set,service,locator,exception,class;protected,exception,create,service,locator,exception,constructor,exception,constructor,beans,exception,cause,class,param,types,exception,constructor,get,parameter,types,object,args,new,object,param,types,length,for,int,i,0,i,param,types,length,i,if,param,types,i,equals,string,class,args,i,cause,get,message,else,if,param,types,i,is,instance,cause,args,i,cause,return,exception,bean,utils,instantiate,class,exception,constructor,args
ServiceLocatorFactoryBean -> protected Exception createServiceLocatorException(Constructor exceptionConstructor, BeansException cause);1365769284;Create a service locator exception for the given cause._Only called in case of a custom service locator exception._<p>The default implementation can handle all variations of_message and exception arguments._@param exceptionConstructor the constructor to use_@param cause the cause of the service lookup failure_@return the service locator exception to throw_@see #setServiceLocatorExceptionClass;protected Exception createServiceLocatorException(Constructor exceptionConstructor, BeansException cause) {_		Class[] paramTypes = exceptionConstructor.getParameterTypes()__		Object[] args = new Object[paramTypes.length]__		for (int i = 0_ i < paramTypes.length_ i++) {_			if (paramTypes[i].equals(String.class)) {_				args[i] = cause.getMessage()__			}_			else if (paramTypes[i].isInstance(cause)) {_				args[i] = cause__			}_		}_		return (Exception) BeanUtils.instantiateClass(exceptionConstructor, args)__	};create,a,service,locator,exception,for,the,given,cause,only,called,in,case,of,a,custom,service,locator,exception,p,the,default,implementation,can,handle,all,variations,of,message,and,exception,arguments,param,exception,constructor,the,constructor,to,use,param,cause,the,cause,of,the,service,lookup,failure,return,the,service,locator,exception,to,throw,see,set,service,locator,exception,class;protected,exception,create,service,locator,exception,constructor,exception,constructor,beans,exception,cause,class,param,types,exception,constructor,get,parameter,types,object,args,new,object,param,types,length,for,int,i,0,i,param,types,length,i,if,param,types,i,equals,string,class,args,i,cause,get,message,else,if,param,types,i,is,instance,cause,args,i,cause,return,exception,bean,utils,instantiate,class,exception,constructor,args
ServiceLocatorFactoryBean -> protected Exception createServiceLocatorException(Constructor exceptionConstructor, BeansException cause);1368482696;Create a service locator exception for the given cause._Only called in case of a custom service locator exception._<p>The default implementation can handle all variations of_message and exception arguments._@param exceptionConstructor the constructor to use_@param cause the cause of the service lookup failure_@return the service locator exception to throw_@see #setServiceLocatorExceptionClass;protected Exception createServiceLocatorException(Constructor exceptionConstructor, BeansException cause) {_		Class[] paramTypes = exceptionConstructor.getParameterTypes()__		Object[] args = new Object[paramTypes.length]__		for (int i = 0_ i < paramTypes.length_ i++) {_			if (paramTypes[i].equals(String.class)) {_				args[i] = cause.getMessage()__			}_			else if (paramTypes[i].isInstance(cause)) {_				args[i] = cause__			}_		}_		return (Exception) BeanUtils.instantiateClass(exceptionConstructor, args)__	};create,a,service,locator,exception,for,the,given,cause,only,called,in,case,of,a,custom,service,locator,exception,p,the,default,implementation,can,handle,all,variations,of,message,and,exception,arguments,param,exception,constructor,the,constructor,to,use,param,cause,the,cause,of,the,service,lookup,failure,return,the,service,locator,exception,to,throw,see,set,service,locator,exception,class;protected,exception,create,service,locator,exception,constructor,exception,constructor,beans,exception,cause,class,param,types,exception,constructor,get,parameter,types,object,args,new,object,param,types,length,for,int,i,0,i,param,types,length,i,if,param,types,i,equals,string,class,args,i,cause,get,message,else,if,param,types,i,is,instance,cause,args,i,cause,return,exception,bean,utils,instantiate,class,exception,constructor,args
ServiceLocatorFactoryBean -> protected Exception createServiceLocatorException(Constructor<Exception> exceptionConstructor, BeansException cause);1385412762;Create a service locator exception for the given cause._Only called in case of a custom service locator exception._<p>The default implementation can handle all variations of_message and exception arguments._@param exceptionConstructor the constructor to use_@param cause the cause of the service lookup failure_@return the service locator exception to throw_@see #setServiceLocatorExceptionClass;protected Exception createServiceLocatorException(Constructor<Exception> exceptionConstructor, BeansException cause) {_		Class<?>[] paramTypes = exceptionConstructor.getParameterTypes()__		Object[] args = new Object[paramTypes.length]__		for (int i = 0_ i < paramTypes.length_ i++) {_			if (paramTypes[i].equals(String.class)) {_				args[i] = cause.getMessage()__			}_			else if (paramTypes[i].isInstance(cause)) {_				args[i] = cause__			}_		}_		return BeanUtils.instantiateClass(exceptionConstructor, args)__	};create,a,service,locator,exception,for,the,given,cause,only,called,in,case,of,a,custom,service,locator,exception,p,the,default,implementation,can,handle,all,variations,of,message,and,exception,arguments,param,exception,constructor,the,constructor,to,use,param,cause,the,cause,of,the,service,lookup,failure,return,the,service,locator,exception,to,throw,see,set,service,locator,exception,class;protected,exception,create,service,locator,exception,constructor,exception,exception,constructor,beans,exception,cause,class,param,types,exception,constructor,get,parameter,types,object,args,new,object,param,types,length,for,int,i,0,i,param,types,length,i,if,param,types,i,equals,string,class,args,i,cause,get,message,else,if,param,types,i,is,instance,cause,args,i,cause,return,bean,utils,instantiate,class,exception,constructor,args
ServiceLocatorFactoryBean -> protected Exception createServiceLocatorException(Constructor<Exception> exceptionConstructor, BeansException cause);1432125256;Create a service locator exception for the given cause._Only called in case of a custom service locator exception._<p>The default implementation can handle all variations of_message and exception arguments._@param exceptionConstructor the constructor to use_@param cause the cause of the service lookup failure_@return the service locator exception to throw_@see #setServiceLocatorExceptionClass;protected Exception createServiceLocatorException(Constructor<Exception> exceptionConstructor, BeansException cause) {_		Class<?>[] paramTypes = exceptionConstructor.getParameterTypes()__		Object[] args = new Object[paramTypes.length]__		for (int i = 0_ i < paramTypes.length_ i++) {_			if (String.class == paramTypes[i]) {_				args[i] = cause.getMessage()__			}_			else if (paramTypes[i].isInstance(cause)) {_				args[i] = cause__			}_		}_		return BeanUtils.instantiateClass(exceptionConstructor, args)__	};create,a,service,locator,exception,for,the,given,cause,only,called,in,case,of,a,custom,service,locator,exception,p,the,default,implementation,can,handle,all,variations,of,message,and,exception,arguments,param,exception,constructor,the,constructor,to,use,param,cause,the,cause,of,the,service,lookup,failure,return,the,service,locator,exception,to,throw,see,set,service,locator,exception,class;protected,exception,create,service,locator,exception,constructor,exception,exception,constructor,beans,exception,cause,class,param,types,exception,constructor,get,parameter,types,object,args,new,object,param,types,length,for,int,i,0,i,param,types,length,i,if,string,class,param,types,i,args,i,cause,get,message,else,if,param,types,i,is,instance,cause,args,i,cause,return,bean,utils,instantiate,class,exception,constructor,args
ServiceLocatorFactoryBean -> protected Exception createServiceLocatorException(Constructor<Exception> exceptionConstructor, BeansException cause);1496837955;Create a service locator exception for the given cause._Only called in case of a custom service locator exception._<p>The default implementation can handle all variations of_message and exception arguments._@param exceptionConstructor the constructor to use_@param cause the cause of the service lookup failure_@return the service locator exception to throw_@see #setServiceLocatorExceptionClass;protected Exception createServiceLocatorException(Constructor<Exception> exceptionConstructor, BeansException cause) {_		Class<?>[] paramTypes = exceptionConstructor.getParameterTypes()__		Object[] args = new Object[paramTypes.length]__		for (int i = 0_ i < paramTypes.length_ i++) {_			if (String.class == paramTypes[i]) {_				args[i] = cause.getMessage()__			}_			else if (paramTypes[i].isInstance(cause)) {_				args[i] = cause__			}_		}_		return BeanUtils.instantiateClass(exceptionConstructor, args)__	};create,a,service,locator,exception,for,the,given,cause,only,called,in,case,of,a,custom,service,locator,exception,p,the,default,implementation,can,handle,all,variations,of,message,and,exception,arguments,param,exception,constructor,the,constructor,to,use,param,cause,the,cause,of,the,service,lookup,failure,return,the,service,locator,exception,to,throw,see,set,service,locator,exception,class;protected,exception,create,service,locator,exception,constructor,exception,exception,constructor,beans,exception,cause,class,param,types,exception,constructor,get,parameter,types,object,args,new,object,param,types,length,for,int,i,0,i,param,types,length,i,if,string,class,param,types,i,args,i,cause,get,message,else,if,param,types,i,is,instance,cause,args,i,cause,return,bean,utils,instantiate,class,exception,constructor,args
ServiceLocatorFactoryBean -> protected Exception createServiceLocatorException(Constructor<Exception> exceptionConstructor, BeansException cause);1498780456;Create a service locator exception for the given cause._Only called in case of a custom service locator exception._<p>The default implementation can handle all variations of_message and exception arguments._@param exceptionConstructor the constructor to use_@param cause the cause of the service lookup failure_@return the service locator exception to throw_@see #setServiceLocatorExceptionClass;protected Exception createServiceLocatorException(Constructor<Exception> exceptionConstructor, BeansException cause) {_		Class<?>[] paramTypes = exceptionConstructor.getParameterTypes()__		Object[] args = new Object[paramTypes.length]__		for (int i = 0_ i < paramTypes.length_ i++) {_			if (String.class == paramTypes[i]) {_				args[i] = cause.getMessage()__			}_			else if (paramTypes[i].isInstance(cause)) {_				args[i] = cause__			}_		}_		return BeanUtils.instantiateClass(exceptionConstructor, args)__	};create,a,service,locator,exception,for,the,given,cause,only,called,in,case,of,a,custom,service,locator,exception,p,the,default,implementation,can,handle,all,variations,of,message,and,exception,arguments,param,exception,constructor,the,constructor,to,use,param,cause,the,cause,of,the,service,lookup,failure,return,the,service,locator,exception,to,throw,see,set,service,locator,exception,class;protected,exception,create,service,locator,exception,constructor,exception,exception,constructor,beans,exception,cause,class,param,types,exception,constructor,get,parameter,types,object,args,new,object,param,types,length,for,int,i,0,i,param,types,length,i,if,string,class,param,types,i,args,i,cause,get,message,else,if,param,types,i,is,instance,cause,args,i,cause,return,bean,utils,instantiate,class,exception,constructor,args
ServiceLocatorFactoryBean -> protected Exception createServiceLocatorException(Constructor<Exception> exceptionConstructor, BeansException cause);1502974979;Create a service locator exception for the given cause._Only called in case of a custom service locator exception._<p>The default implementation can handle all variations of_message and exception arguments._@param exceptionConstructor the constructor to use_@param cause the cause of the service lookup failure_@return the service locator exception to throw_@see #setServiceLocatorExceptionClass;protected Exception createServiceLocatorException(Constructor<Exception> exceptionConstructor, BeansException cause) {_		Class<?>[] paramTypes = exceptionConstructor.getParameterTypes()__		Object[] args = new Object[paramTypes.length]__		for (int i = 0_ i < paramTypes.length_ i++) {_			if (String.class == paramTypes[i]) {_				args[i] = cause.getMessage()__			}_			else if (paramTypes[i].isInstance(cause)) {_				args[i] = cause__			}_		}_		return BeanUtils.instantiateClass(exceptionConstructor, args)__	};create,a,service,locator,exception,for,the,given,cause,only,called,in,case,of,a,custom,service,locator,exception,p,the,default,implementation,can,handle,all,variations,of,message,and,exception,arguments,param,exception,constructor,the,constructor,to,use,param,cause,the,cause,of,the,service,lookup,failure,return,the,service,locator,exception,to,throw,see,set,service,locator,exception,class;protected,exception,create,service,locator,exception,constructor,exception,exception,constructor,beans,exception,cause,class,param,types,exception,constructor,get,parameter,types,object,args,new,object,param,types,length,for,int,i,0,i,param,types,length,i,if,string,class,param,types,i,args,i,cause,get,message,else,if,param,types,i,is,instance,cause,args,i,cause,return,bean,utils,instantiate,class,exception,constructor,args
