# id;timestamp;commentText;codeText;commentWords;codeWords
PropertyComparator -> @Nullable 	private Object getPropertyValue(Object obj);1495868221;Get the SortDefinition's property value for the given object._@param obj the object to get the property value for_@return the property value;@Nullable_	private Object getPropertyValue(Object obj) {_		_		_		_		try {_			this.beanWrapper.setWrappedInstance(obj)__			return this.beanWrapper.getPropertyValue(this.sortDefinition.getProperty())__		}_		catch (BeansException ex) {_			logger.info("PropertyComparator could not access property - treating as null for sorting", ex)__			return null__		}_	};get,the,sort,definition,s,property,value,for,the,given,object,param,obj,the,object,to,get,the,property,value,for,return,the,property,value;nullable,private,object,get,property,value,object,obj,try,this,bean,wrapper,set,wrapped,instance,obj,return,this,bean,wrapper,get,property,value,this,sort,definition,get,property,catch,beans,exception,ex,logger,info,property,comparator,could,not,access,property,treating,as,null,for,sorting,ex,return,null
PropertyComparator -> @Nullable 	private Object getPropertyValue(Object obj);1498780456;Get the SortDefinition's property value for the given object._@param obj the object to get the property value for_@return the property value;@Nullable_	private Object getPropertyValue(Object obj) {_		_		_		_		try {_			this.beanWrapper.setWrappedInstance(obj)__			return this.beanWrapper.getPropertyValue(this.sortDefinition.getProperty())__		}_		catch (BeansException ex) {_			logger.info("PropertyComparator could not access property - treating as null for sorting", ex)__			return null__		}_	};get,the,sort,definition,s,property,value,for,the,given,object,param,obj,the,object,to,get,the,property,value,for,return,the,property,value;nullable,private,object,get,property,value,object,obj,try,this,bean,wrapper,set,wrapped,instance,obj,return,this,bean,wrapper,get,property,value,this,sort,definition,get,property,catch,beans,exception,ex,logger,info,property,comparator,could,not,access,property,treating,as,null,for,sorting,ex,return,null
PropertyComparator -> @Nullable 	private Object getPropertyValue(Object obj);1518772998;Get the SortDefinition's property value for the given object._@param obj the object to get the property value for_@return the property value;@Nullable_	private Object getPropertyValue(Object obj) {_		_		_		_		try {_			this.beanWrapper.setWrappedInstance(obj)__			return this.beanWrapper.getPropertyValue(this.sortDefinition.getProperty())__		}_		catch (BeansException ex) {_			logger.info("PropertyComparator could not access property - treating as null for sorting", ex)__			return null__		}_	};get,the,sort,definition,s,property,value,for,the,given,object,param,obj,the,object,to,get,the,property,value,for,return,the,property,value;nullable,private,object,get,property,value,object,obj,try,this,bean,wrapper,set,wrapped,instance,obj,return,this,bean,wrapper,get,property,value,this,sort,definition,get,property,catch,beans,exception,ex,logger,info,property,comparator,could,not,access,property,treating,as,null,for,sorting,ex,return,null
PropertyComparator -> @Nullable 	private Object getPropertyValue(Object obj);1530174524;Get the SortDefinition's property value for the given object._@param obj the object to get the property value for_@return the property value;@Nullable_	private Object getPropertyValue(Object obj) {_		_		_		_		try {_			this.beanWrapper.setWrappedInstance(obj)__			return this.beanWrapper.getPropertyValue(this.sortDefinition.getProperty())__		}_		catch (BeansException ex) {_			logger.info("PropertyComparator could not access property - treating as null for sorting", ex)__			return null__		}_	};get,the,sort,definition,s,property,value,for,the,given,object,param,obj,the,object,to,get,the,property,value,for,return,the,property,value;nullable,private,object,get,property,value,object,obj,try,this,bean,wrapper,set,wrapped,instance,obj,return,this,bean,wrapper,get,property,value,this,sort,definition,get,property,catch,beans,exception,ex,logger,info,property,comparator,could,not,access,property,treating,as,null,for,sorting,ex,return,null
PropertyComparator -> @Nullable 	private Object getPropertyValue(Object obj);1532091916;Get the SortDefinition's property value for the given object._@param obj the object to get the property value for_@return the property value;@Nullable_	private Object getPropertyValue(Object obj) {_		_		_		_		try {_			this.beanWrapper.setWrappedInstance(obj)__			return this.beanWrapper.getPropertyValue(this.sortDefinition.getProperty())__		}_		catch (BeansException ex) {_			logger.debug("PropertyComparator could not access property - treating as null for sorting", ex)__			return null__		}_	};get,the,sort,definition,s,property,value,for,the,given,object,param,obj,the,object,to,get,the,property,value,for,return,the,property,value;nullable,private,object,get,property,value,object,obj,try,this,bean,wrapper,set,wrapped,instance,obj,return,this,bean,wrapper,get,property,value,this,sort,definition,get,property,catch,beans,exception,ex,logger,debug,property,comparator,could,not,access,property,treating,as,null,for,sorting,ex,return,null
PropertyComparator -> public static void sort(Object[] source, SortDefinition sortDefinition) throws BeansException;1328020251;Sort the given source according to the given sort definition._<p>Note: Contained objects have to provide the given property_in the form of a bean property, i.e. a getXXX method._@param source input source_@param sortDefinition the parameters to sort by_@throws java.lang.IllegalArgumentException in case of a missing propertyName;public static void sort(Object[] source, SortDefinition sortDefinition) throws BeansException {_		if (StringUtils.hasText(sortDefinition.getProperty())) {_			Arrays.sort(source, new PropertyComparator(sortDefinition))__		}_	};sort,the,given,source,according,to,the,given,sort,definition,p,note,contained,objects,have,to,provide,the,given,property,in,the,form,of,a,bean,property,i,e,a,get,xxx,method,param,source,input,source,param,sort,definition,the,parameters,to,sort,by,throws,java,lang,illegal,argument,exception,in,case,of,a,missing,property,name;public,static,void,sort,object,source,sort,definition,sort,definition,throws,beans,exception,if,string,utils,has,text,sort,definition,get,property,arrays,sort,source,new,property,comparator,sort,definition
PropertyComparator -> public static void sort(Object[] source, SortDefinition sortDefinition) throws BeansException;1356735495;Sort the given source according to the given sort definition._<p>Note: Contained objects have to provide the given property_in the form of a bean property, i.e. a getXXX method._@param source input source_@param sortDefinition the parameters to sort by_@throws java.lang.IllegalArgumentException in case of a missing propertyName;public static void sort(Object[] source, SortDefinition sortDefinition) throws BeansException {_		if (StringUtils.hasText(sortDefinition.getProperty())) {_			Arrays.sort(source, new PropertyComparator(sortDefinition))__		}_	};sort,the,given,source,according,to,the,given,sort,definition,p,note,contained,objects,have,to,provide,the,given,property,in,the,form,of,a,bean,property,i,e,a,get,xxx,method,param,source,input,source,param,sort,definition,the,parameters,to,sort,by,throws,java,lang,illegal,argument,exception,in,case,of,a,missing,property,name;public,static,void,sort,object,source,sort,definition,sort,definition,throws,beans,exception,if,string,utils,has,text,sort,definition,get,property,arrays,sort,source,new,property,comparator,sort,definition
PropertyComparator -> public static void sort(Object[] source, SortDefinition sortDefinition) throws BeansException;1357119239;Sort the given source according to the given sort definition._<p>Note: Contained objects have to provide the given property_in the form of a bean property, i.e. a getXXX method._@param source input source_@param sortDefinition the parameters to sort by_@throws java.lang.IllegalArgumentException in case of a missing propertyName;public static void sort(Object[] source, SortDefinition sortDefinition) throws BeansException {_		if (StringUtils.hasText(sortDefinition.getProperty())) {_			Arrays.sort(source, new PropertyComparator(sortDefinition))__		}_	};sort,the,given,source,according,to,the,given,sort,definition,p,note,contained,objects,have,to,provide,the,given,property,in,the,form,of,a,bean,property,i,e,a,get,xxx,method,param,source,input,source,param,sort,definition,the,parameters,to,sort,by,throws,java,lang,illegal,argument,exception,in,case,of,a,missing,property,name;public,static,void,sort,object,source,sort,definition,sort,definition,throws,beans,exception,if,string,utils,has,text,sort,definition,get,property,arrays,sort,source,new,property,comparator,sort,definition
PropertyComparator -> public static void sort(Object[] source, SortDefinition sortDefinition) throws BeansException;1368482696;Sort the given source according to the given sort definition._<p>Note: Contained objects have to provide the given property_in the form of a bean property, i.e. a getXXX method._@param source input source_@param sortDefinition the parameters to sort by_@throws java.lang.IllegalArgumentException in case of a missing propertyName;public static void sort(Object[] source, SortDefinition sortDefinition) throws BeansException {_		if (StringUtils.hasText(sortDefinition.getProperty())) {_			Arrays.sort(source, new PropertyComparator(sortDefinition))__		}_	};sort,the,given,source,according,to,the,given,sort,definition,p,note,contained,objects,have,to,provide,the,given,property,in,the,form,of,a,bean,property,i,e,a,get,xxx,method,param,source,input,source,param,sort,definition,the,parameters,to,sort,by,throws,java,lang,illegal,argument,exception,in,case,of,a,missing,property,name;public,static,void,sort,object,source,sort,definition,sort,definition,throws,beans,exception,if,string,utils,has,text,sort,definition,get,property,arrays,sort,source,new,property,comparator,sort,definition
PropertyComparator -> public static void sort(Object[] source, SortDefinition sortDefinition) throws BeansException;1385412762;Sort the given source according to the given sort definition._<p>Note: Contained objects have to provide the given property_in the form of a bean property, i.e. a getXXX method._@param source input source_@param sortDefinition the parameters to sort by_@throws java.lang.IllegalArgumentException in case of a missing propertyName;public static void sort(Object[] source, SortDefinition sortDefinition) throws BeansException {_		if (StringUtils.hasText(sortDefinition.getProperty())) {_			Arrays.sort(source, new PropertyComparator<Object>(sortDefinition))__		}_	};sort,the,given,source,according,to,the,given,sort,definition,p,note,contained,objects,have,to,provide,the,given,property,in,the,form,of,a,bean,property,i,e,a,get,xxx,method,param,source,input,source,param,sort,definition,the,parameters,to,sort,by,throws,java,lang,illegal,argument,exception,in,case,of,a,missing,property,name;public,static,void,sort,object,source,sort,definition,sort,definition,throws,beans,exception,if,string,utils,has,text,sort,definition,get,property,arrays,sort,source,new,property,comparator,object,sort,definition
PropertyComparator -> public static void sort(Object[] source, SortDefinition sortDefinition) throws BeansException;1413848647;Sort the given source according to the given sort definition._<p>Note: Contained objects have to provide the given property_in the form of a bean property, i.e. a getXXX method._@param source input source_@param sortDefinition the parameters to sort by_@throws java.lang.IllegalArgumentException in case of a missing propertyName;public static void sort(Object[] source, SortDefinition sortDefinition) throws BeansException {_		if (StringUtils.hasText(sortDefinition.getProperty())) {_			Arrays.sort(source, new PropertyComparator<Object>(sortDefinition))__		}_	};sort,the,given,source,according,to,the,given,sort,definition,p,note,contained,objects,have,to,provide,the,given,property,in,the,form,of,a,bean,property,i,e,a,get,xxx,method,param,source,input,source,param,sort,definition,the,parameters,to,sort,by,throws,java,lang,illegal,argument,exception,in,case,of,a,missing,property,name;public,static,void,sort,object,source,sort,definition,sort,definition,throws,beans,exception,if,string,utils,has,text,sort,definition,get,property,arrays,sort,source,new,property,comparator,object,sort,definition
PropertyComparator -> public static void sort(Object[] source, SortDefinition sortDefinition) throws BeansException;1467730834;Sort the given source according to the given sort definition._<p>Note: Contained objects have to provide the given property_in the form of a bean property, i.e. a getXXX method._@param source input source_@param sortDefinition the parameters to sort by_@throws java.lang.IllegalArgumentException in case of a missing propertyName;public static void sort(Object[] source, SortDefinition sortDefinition) throws BeansException {_		if (StringUtils.hasText(sortDefinition.getProperty())) {_			Arrays.sort(source, new PropertyComparator<>(sortDefinition))__		}_	};sort,the,given,source,according,to,the,given,sort,definition,p,note,contained,objects,have,to,provide,the,given,property,in,the,form,of,a,bean,property,i,e,a,get,xxx,method,param,source,input,source,param,sort,definition,the,parameters,to,sort,by,throws,java,lang,illegal,argument,exception,in,case,of,a,missing,property,name;public,static,void,sort,object,source,sort,definition,sort,definition,throws,beans,exception,if,string,utils,has,text,sort,definition,get,property,arrays,sort,source,new,property,comparator,sort,definition
PropertyComparator -> public static void sort(Object[] source, SortDefinition sortDefinition) throws BeansException;1495868221;Sort the given source according to the given sort definition._<p>Note: Contained objects have to provide the given property_in the form of a bean property, i.e. a getXXX method._@param source input source_@param sortDefinition the parameters to sort by_@throws java.lang.IllegalArgumentException in case of a missing propertyName;public static void sort(Object[] source, SortDefinition sortDefinition) throws BeansException {_		if (StringUtils.hasText(sortDefinition.getProperty())) {_			Arrays.sort(source, new PropertyComparator<>(sortDefinition))__		}_	};sort,the,given,source,according,to,the,given,sort,definition,p,note,contained,objects,have,to,provide,the,given,property,in,the,form,of,a,bean,property,i,e,a,get,xxx,method,param,source,input,source,param,sort,definition,the,parameters,to,sort,by,throws,java,lang,illegal,argument,exception,in,case,of,a,missing,property,name;public,static,void,sort,object,source,sort,definition,sort,definition,throws,beans,exception,if,string,utils,has,text,sort,definition,get,property,arrays,sort,source,new,property,comparator,sort,definition
PropertyComparator -> public static void sort(Object[] source, SortDefinition sortDefinition) throws BeansException;1498780456;Sort the given source according to the given sort definition._<p>Note: Contained objects have to provide the given property_in the form of a bean property, i.e. a getXXX method._@param source input source_@param sortDefinition the parameters to sort by_@throws java.lang.IllegalArgumentException in case of a missing propertyName;public static void sort(Object[] source, SortDefinition sortDefinition) throws BeansException {_		if (StringUtils.hasText(sortDefinition.getProperty())) {_			Arrays.sort(source, new PropertyComparator<>(sortDefinition))__		}_	};sort,the,given,source,according,to,the,given,sort,definition,p,note,contained,objects,have,to,provide,the,given,property,in,the,form,of,a,bean,property,i,e,a,get,xxx,method,param,source,input,source,param,sort,definition,the,parameters,to,sort,by,throws,java,lang,illegal,argument,exception,in,case,of,a,missing,property,name;public,static,void,sort,object,source,sort,definition,sort,definition,throws,beans,exception,if,string,utils,has,text,sort,definition,get,property,arrays,sort,source,new,property,comparator,sort,definition
PropertyComparator -> public static void sort(Object[] source, SortDefinition sortDefinition) throws BeansException;1518772998;Sort the given source according to the given sort definition._<p>Note: Contained objects have to provide the given property_in the form of a bean property, i.e. a getXXX method._@param source input source_@param sortDefinition the parameters to sort by_@throws java.lang.IllegalArgumentException in case of a missing propertyName;public static void sort(Object[] source, SortDefinition sortDefinition) throws BeansException {_		if (StringUtils.hasText(sortDefinition.getProperty())) {_			Arrays.sort(source, new PropertyComparator<>(sortDefinition))__		}_	};sort,the,given,source,according,to,the,given,sort,definition,p,note,contained,objects,have,to,provide,the,given,property,in,the,form,of,a,bean,property,i,e,a,get,xxx,method,param,source,input,source,param,sort,definition,the,parameters,to,sort,by,throws,java,lang,illegal,argument,exception,in,case,of,a,missing,property,name;public,static,void,sort,object,source,sort,definition,sort,definition,throws,beans,exception,if,string,utils,has,text,sort,definition,get,property,arrays,sort,source,new,property,comparator,sort,definition
PropertyComparator -> public static void sort(Object[] source, SortDefinition sortDefinition) throws BeansException;1530174524;Sort the given source according to the given sort definition._<p>Note: Contained objects have to provide the given property_in the form of a bean property, i.e. a getXXX method._@param source input source_@param sortDefinition the parameters to sort by_@throws java.lang.IllegalArgumentException in case of a missing propertyName;public static void sort(Object[] source, SortDefinition sortDefinition) throws BeansException {_		if (StringUtils.hasText(sortDefinition.getProperty())) {_			Arrays.sort(source, new PropertyComparator<>(sortDefinition))__		}_	};sort,the,given,source,according,to,the,given,sort,definition,p,note,contained,objects,have,to,provide,the,given,property,in,the,form,of,a,bean,property,i,e,a,get,xxx,method,param,source,input,source,param,sort,definition,the,parameters,to,sort,by,throws,java,lang,illegal,argument,exception,in,case,of,a,missing,property,name;public,static,void,sort,object,source,sort,definition,sort,definition,throws,beans,exception,if,string,utils,has,text,sort,definition,get,property,arrays,sort,source,new,property,comparator,sort,definition
PropertyComparator -> public static void sort(Object[] source, SortDefinition sortDefinition) throws BeansException;1532091916;Sort the given source according to the given sort definition._<p>Note: Contained objects have to provide the given property_in the form of a bean property, i.e. a getXXX method._@param source input source_@param sortDefinition the parameters to sort by_@throws java.lang.IllegalArgumentException in case of a missing propertyName;public static void sort(Object[] source, SortDefinition sortDefinition) throws BeansException {_		if (StringUtils.hasText(sortDefinition.getProperty())) {_			Arrays.sort(source, new PropertyComparator<>(sortDefinition))__		}_	};sort,the,given,source,according,to,the,given,sort,definition,p,note,contained,objects,have,to,provide,the,given,property,in,the,form,of,a,bean,property,i,e,a,get,xxx,method,param,source,input,source,param,sort,definition,the,parameters,to,sort,by,throws,java,lang,illegal,argument,exception,in,case,of,a,missing,property,name;public,static,void,sort,object,source,sort,definition,sort,definition,throws,beans,exception,if,string,utils,has,text,sort,definition,get,property,arrays,sort,source,new,property,comparator,sort,definition
PropertyComparator -> public PropertyComparator(SortDefinition sortDefinition);1328020251;Create a new PropertyComparator for the given SortDefinition._@see MutableSortDefinition;public PropertyComparator(SortDefinition sortDefinition) {_		this.sortDefinition = sortDefinition__	};create,a,new,property,comparator,for,the,given,sort,definition,see,mutable,sort,definition;public,property,comparator,sort,definition,sort,definition,this,sort,definition,sort,definition
PropertyComparator -> public PropertyComparator(SortDefinition sortDefinition);1356735495;Create a new PropertyComparator for the given SortDefinition._@see MutableSortDefinition;public PropertyComparator(SortDefinition sortDefinition) {_		this.sortDefinition = sortDefinition__	};create,a,new,property,comparator,for,the,given,sort,definition,see,mutable,sort,definition;public,property,comparator,sort,definition,sort,definition,this,sort,definition,sort,definition
PropertyComparator -> public PropertyComparator(SortDefinition sortDefinition);1357119239;Create a new PropertyComparator for the given SortDefinition._@see MutableSortDefinition;public PropertyComparator(SortDefinition sortDefinition) {_		this.sortDefinition = sortDefinition__	};create,a,new,property,comparator,for,the,given,sort,definition,see,mutable,sort,definition;public,property,comparator,sort,definition,sort,definition,this,sort,definition,sort,definition
PropertyComparator -> public PropertyComparator(SortDefinition sortDefinition);1368482696;Create a new PropertyComparator for the given SortDefinition._@see MutableSortDefinition;public PropertyComparator(SortDefinition sortDefinition) {_		this.sortDefinition = sortDefinition__	};create,a,new,property,comparator,for,the,given,sort,definition,see,mutable,sort,definition;public,property,comparator,sort,definition,sort,definition,this,sort,definition,sort,definition
PropertyComparator -> public PropertyComparator(SortDefinition sortDefinition);1385412762;Create a new PropertyComparator for the given SortDefinition._@see MutableSortDefinition;public PropertyComparator(SortDefinition sortDefinition) {_		this.sortDefinition = sortDefinition__	};create,a,new,property,comparator,for,the,given,sort,definition,see,mutable,sort,definition;public,property,comparator,sort,definition,sort,definition,this,sort,definition,sort,definition
PropertyComparator -> public PropertyComparator(SortDefinition sortDefinition);1413848647;Create a new PropertyComparator for the given SortDefinition._@see MutableSortDefinition;public PropertyComparator(SortDefinition sortDefinition) {_		this.sortDefinition = sortDefinition__	};create,a,new,property,comparator,for,the,given,sort,definition,see,mutable,sort,definition;public,property,comparator,sort,definition,sort,definition,this,sort,definition,sort,definition
PropertyComparator -> public PropertyComparator(SortDefinition sortDefinition);1467730834;Create a new PropertyComparator for the given SortDefinition._@see MutableSortDefinition;public PropertyComparator(SortDefinition sortDefinition) {_		this.sortDefinition = sortDefinition__	};create,a,new,property,comparator,for,the,given,sort,definition,see,mutable,sort,definition;public,property,comparator,sort,definition,sort,definition,this,sort,definition,sort,definition
PropertyComparator -> public PropertyComparator(SortDefinition sortDefinition);1495868221;Create a new PropertyComparator for the given SortDefinition._@see MutableSortDefinition;public PropertyComparator(SortDefinition sortDefinition) {_		this.sortDefinition = sortDefinition__	};create,a,new,property,comparator,for,the,given,sort,definition,see,mutable,sort,definition;public,property,comparator,sort,definition,sort,definition,this,sort,definition,sort,definition
PropertyComparator -> public PropertyComparator(SortDefinition sortDefinition);1498780456;Create a new PropertyComparator for the given SortDefinition._@see MutableSortDefinition;public PropertyComparator(SortDefinition sortDefinition) {_		this.sortDefinition = sortDefinition__	};create,a,new,property,comparator,for,the,given,sort,definition,see,mutable,sort,definition;public,property,comparator,sort,definition,sort,definition,this,sort,definition,sort,definition
PropertyComparator -> public PropertyComparator(SortDefinition sortDefinition);1518772998;Create a new PropertyComparator for the given SortDefinition._@see MutableSortDefinition;public PropertyComparator(SortDefinition sortDefinition) {_		this.sortDefinition = sortDefinition__	};create,a,new,property,comparator,for,the,given,sort,definition,see,mutable,sort,definition;public,property,comparator,sort,definition,sort,definition,this,sort,definition,sort,definition
PropertyComparator -> public PropertyComparator(SortDefinition sortDefinition);1530174524;Create a new PropertyComparator for the given SortDefinition._@see MutableSortDefinition;public PropertyComparator(SortDefinition sortDefinition) {_		this.sortDefinition = sortDefinition__	};create,a,new,property,comparator,for,the,given,sort,definition,see,mutable,sort,definition;public,property,comparator,sort,definition,sort,definition,this,sort,definition,sort,definition
PropertyComparator -> public PropertyComparator(SortDefinition sortDefinition);1532091916;Create a new PropertyComparator for the given SortDefinition._@see MutableSortDefinition;public PropertyComparator(SortDefinition sortDefinition) {_		this.sortDefinition = sortDefinition__	};create,a,new,property,comparator,for,the,given,sort,definition,see,mutable,sort,definition;public,property,comparator,sort,definition,sort,definition,this,sort,definition,sort,definition
PropertyComparator -> public PropertyComparator(String property, boolean ignoreCase, boolean ascending);1328020251;Create a PropertyComparator for the given settings._@param property the property to compare_@param ignoreCase whether upper and lower case in String values should be ignored_@param ascending whether to sort ascending (true) or descending (false);public PropertyComparator(String property, boolean ignoreCase, boolean ascending) {_		this.sortDefinition = new MutableSortDefinition(property, ignoreCase, ascending)__	};create,a,property,comparator,for,the,given,settings,param,property,the,property,to,compare,param,ignore,case,whether,upper,and,lower,case,in,string,values,should,be,ignored,param,ascending,whether,to,sort,ascending,true,or,descending,false;public,property,comparator,string,property,boolean,ignore,case,boolean,ascending,this,sort,definition,new,mutable,sort,definition,property,ignore,case,ascending
PropertyComparator -> public PropertyComparator(String property, boolean ignoreCase, boolean ascending);1356735495;Create a PropertyComparator for the given settings._@param property the property to compare_@param ignoreCase whether upper and lower case in String values should be ignored_@param ascending whether to sort ascending (true) or descending (false);public PropertyComparator(String property, boolean ignoreCase, boolean ascending) {_		this.sortDefinition = new MutableSortDefinition(property, ignoreCase, ascending)__	};create,a,property,comparator,for,the,given,settings,param,property,the,property,to,compare,param,ignore,case,whether,upper,and,lower,case,in,string,values,should,be,ignored,param,ascending,whether,to,sort,ascending,true,or,descending,false;public,property,comparator,string,property,boolean,ignore,case,boolean,ascending,this,sort,definition,new,mutable,sort,definition,property,ignore,case,ascending
PropertyComparator -> public PropertyComparator(String property, boolean ignoreCase, boolean ascending);1357119239;Create a PropertyComparator for the given settings._@param property the property to compare_@param ignoreCase whether upper and lower case in String values should be ignored_@param ascending whether to sort ascending (true) or descending (false);public PropertyComparator(String property, boolean ignoreCase, boolean ascending) {_		this.sortDefinition = new MutableSortDefinition(property, ignoreCase, ascending)__	};create,a,property,comparator,for,the,given,settings,param,property,the,property,to,compare,param,ignore,case,whether,upper,and,lower,case,in,string,values,should,be,ignored,param,ascending,whether,to,sort,ascending,true,or,descending,false;public,property,comparator,string,property,boolean,ignore,case,boolean,ascending,this,sort,definition,new,mutable,sort,definition,property,ignore,case,ascending
PropertyComparator -> public PropertyComparator(String property, boolean ignoreCase, boolean ascending);1368482696;Create a PropertyComparator for the given settings._@param property the property to compare_@param ignoreCase whether upper and lower case in String values should be ignored_@param ascending whether to sort ascending (true) or descending (false);public PropertyComparator(String property, boolean ignoreCase, boolean ascending) {_		this.sortDefinition = new MutableSortDefinition(property, ignoreCase, ascending)__	};create,a,property,comparator,for,the,given,settings,param,property,the,property,to,compare,param,ignore,case,whether,upper,and,lower,case,in,string,values,should,be,ignored,param,ascending,whether,to,sort,ascending,true,or,descending,false;public,property,comparator,string,property,boolean,ignore,case,boolean,ascending,this,sort,definition,new,mutable,sort,definition,property,ignore,case,ascending
PropertyComparator -> public PropertyComparator(String property, boolean ignoreCase, boolean ascending);1385412762;Create a PropertyComparator for the given settings._@param property the property to compare_@param ignoreCase whether upper and lower case in String values should be ignored_@param ascending whether to sort ascending (true) or descending (false);public PropertyComparator(String property, boolean ignoreCase, boolean ascending) {_		this.sortDefinition = new MutableSortDefinition(property, ignoreCase, ascending)__	};create,a,property,comparator,for,the,given,settings,param,property,the,property,to,compare,param,ignore,case,whether,upper,and,lower,case,in,string,values,should,be,ignored,param,ascending,whether,to,sort,ascending,true,or,descending,false;public,property,comparator,string,property,boolean,ignore,case,boolean,ascending,this,sort,definition,new,mutable,sort,definition,property,ignore,case,ascending
PropertyComparator -> public PropertyComparator(String property, boolean ignoreCase, boolean ascending);1413848647;Create a PropertyComparator for the given settings._@param property the property to compare_@param ignoreCase whether upper and lower case in String values should be ignored_@param ascending whether to sort ascending (true) or descending (false);public PropertyComparator(String property, boolean ignoreCase, boolean ascending) {_		this.sortDefinition = new MutableSortDefinition(property, ignoreCase, ascending)__	};create,a,property,comparator,for,the,given,settings,param,property,the,property,to,compare,param,ignore,case,whether,upper,and,lower,case,in,string,values,should,be,ignored,param,ascending,whether,to,sort,ascending,true,or,descending,false;public,property,comparator,string,property,boolean,ignore,case,boolean,ascending,this,sort,definition,new,mutable,sort,definition,property,ignore,case,ascending
PropertyComparator -> public PropertyComparator(String property, boolean ignoreCase, boolean ascending);1467730834;Create a PropertyComparator for the given settings._@param property the property to compare_@param ignoreCase whether upper and lower case in String values should be ignored_@param ascending whether to sort ascending (true) or descending (false);public PropertyComparator(String property, boolean ignoreCase, boolean ascending) {_		this.sortDefinition = new MutableSortDefinition(property, ignoreCase, ascending)__	};create,a,property,comparator,for,the,given,settings,param,property,the,property,to,compare,param,ignore,case,whether,upper,and,lower,case,in,string,values,should,be,ignored,param,ascending,whether,to,sort,ascending,true,or,descending,false;public,property,comparator,string,property,boolean,ignore,case,boolean,ascending,this,sort,definition,new,mutable,sort,definition,property,ignore,case,ascending
PropertyComparator -> public PropertyComparator(String property, boolean ignoreCase, boolean ascending);1495868221;Create a PropertyComparator for the given settings._@param property the property to compare_@param ignoreCase whether upper and lower case in String values should be ignored_@param ascending whether to sort ascending (true) or descending (false);public PropertyComparator(String property, boolean ignoreCase, boolean ascending) {_		this.sortDefinition = new MutableSortDefinition(property, ignoreCase, ascending)__	};create,a,property,comparator,for,the,given,settings,param,property,the,property,to,compare,param,ignore,case,whether,upper,and,lower,case,in,string,values,should,be,ignored,param,ascending,whether,to,sort,ascending,true,or,descending,false;public,property,comparator,string,property,boolean,ignore,case,boolean,ascending,this,sort,definition,new,mutable,sort,definition,property,ignore,case,ascending
PropertyComparator -> public PropertyComparator(String property, boolean ignoreCase, boolean ascending);1498780456;Create a PropertyComparator for the given settings._@param property the property to compare_@param ignoreCase whether upper and lower case in String values should be ignored_@param ascending whether to sort ascending (true) or descending (false);public PropertyComparator(String property, boolean ignoreCase, boolean ascending) {_		this.sortDefinition = new MutableSortDefinition(property, ignoreCase, ascending)__	};create,a,property,comparator,for,the,given,settings,param,property,the,property,to,compare,param,ignore,case,whether,upper,and,lower,case,in,string,values,should,be,ignored,param,ascending,whether,to,sort,ascending,true,or,descending,false;public,property,comparator,string,property,boolean,ignore,case,boolean,ascending,this,sort,definition,new,mutable,sort,definition,property,ignore,case,ascending
PropertyComparator -> public PropertyComparator(String property, boolean ignoreCase, boolean ascending);1518772998;Create a PropertyComparator for the given settings._@param property the property to compare_@param ignoreCase whether upper and lower case in String values should be ignored_@param ascending whether to sort ascending (true) or descending (false);public PropertyComparator(String property, boolean ignoreCase, boolean ascending) {_		this.sortDefinition = new MutableSortDefinition(property, ignoreCase, ascending)__	};create,a,property,comparator,for,the,given,settings,param,property,the,property,to,compare,param,ignore,case,whether,upper,and,lower,case,in,string,values,should,be,ignored,param,ascending,whether,to,sort,ascending,true,or,descending,false;public,property,comparator,string,property,boolean,ignore,case,boolean,ascending,this,sort,definition,new,mutable,sort,definition,property,ignore,case,ascending
PropertyComparator -> public PropertyComparator(String property, boolean ignoreCase, boolean ascending);1530174524;Create a PropertyComparator for the given settings._@param property the property to compare_@param ignoreCase whether upper and lower case in String values should be ignored_@param ascending whether to sort ascending (true) or descending (false);public PropertyComparator(String property, boolean ignoreCase, boolean ascending) {_		this.sortDefinition = new MutableSortDefinition(property, ignoreCase, ascending)__	};create,a,property,comparator,for,the,given,settings,param,property,the,property,to,compare,param,ignore,case,whether,upper,and,lower,case,in,string,values,should,be,ignored,param,ascending,whether,to,sort,ascending,true,or,descending,false;public,property,comparator,string,property,boolean,ignore,case,boolean,ascending,this,sort,definition,new,mutable,sort,definition,property,ignore,case,ascending
PropertyComparator -> public PropertyComparator(String property, boolean ignoreCase, boolean ascending);1532091916;Create a PropertyComparator for the given settings._@param property the property to compare_@param ignoreCase whether upper and lower case in String values should be ignored_@param ascending whether to sort ascending (true) or descending (false);public PropertyComparator(String property, boolean ignoreCase, boolean ascending) {_		this.sortDefinition = new MutableSortDefinition(property, ignoreCase, ascending)__	};create,a,property,comparator,for,the,given,settings,param,property,the,property,to,compare,param,ignore,case,whether,upper,and,lower,case,in,string,values,should,be,ignored,param,ascending,whether,to,sort,ascending,true,or,descending,false;public,property,comparator,string,property,boolean,ignore,case,boolean,ascending,this,sort,definition,new,mutable,sort,definition,property,ignore,case,ascending
PropertyComparator -> public final SortDefinition getSortDefinition();1328020251;Return the SortDefinition that this comparator uses.;public final SortDefinition getSortDefinition() {_		return this.sortDefinition__	};return,the,sort,definition,that,this,comparator,uses;public,final,sort,definition,get,sort,definition,return,this,sort,definition
PropertyComparator -> public final SortDefinition getSortDefinition();1356735495;Return the SortDefinition that this comparator uses.;public final SortDefinition getSortDefinition() {_		return this.sortDefinition__	};return,the,sort,definition,that,this,comparator,uses;public,final,sort,definition,get,sort,definition,return,this,sort,definition
PropertyComparator -> public final SortDefinition getSortDefinition();1357119239;Return the SortDefinition that this comparator uses.;public final SortDefinition getSortDefinition() {_		return this.sortDefinition__	};return,the,sort,definition,that,this,comparator,uses;public,final,sort,definition,get,sort,definition,return,this,sort,definition
PropertyComparator -> public final SortDefinition getSortDefinition();1368482696;Return the SortDefinition that this comparator uses.;public final SortDefinition getSortDefinition() {_		return this.sortDefinition__	};return,the,sort,definition,that,this,comparator,uses;public,final,sort,definition,get,sort,definition,return,this,sort,definition
PropertyComparator -> public final SortDefinition getSortDefinition();1385412762;Return the SortDefinition that this comparator uses.;public final SortDefinition getSortDefinition() {_		return this.sortDefinition__	};return,the,sort,definition,that,this,comparator,uses;public,final,sort,definition,get,sort,definition,return,this,sort,definition
PropertyComparator -> public final SortDefinition getSortDefinition();1413848647;Return the SortDefinition that this comparator uses.;public final SortDefinition getSortDefinition() {_		return this.sortDefinition__	};return,the,sort,definition,that,this,comparator,uses;public,final,sort,definition,get,sort,definition,return,this,sort,definition
PropertyComparator -> public final SortDefinition getSortDefinition();1467730834;Return the SortDefinition that this comparator uses.;public final SortDefinition getSortDefinition() {_		return this.sortDefinition__	};return,the,sort,definition,that,this,comparator,uses;public,final,sort,definition,get,sort,definition,return,this,sort,definition
PropertyComparator -> public final SortDefinition getSortDefinition();1495868221;Return the SortDefinition that this comparator uses.;public final SortDefinition getSortDefinition() {_		return this.sortDefinition__	};return,the,sort,definition,that,this,comparator,uses;public,final,sort,definition,get,sort,definition,return,this,sort,definition
PropertyComparator -> public final SortDefinition getSortDefinition();1498780456;Return the SortDefinition that this comparator uses.;public final SortDefinition getSortDefinition() {_		return this.sortDefinition__	};return,the,sort,definition,that,this,comparator,uses;public,final,sort,definition,get,sort,definition,return,this,sort,definition
PropertyComparator -> public final SortDefinition getSortDefinition();1518772998;Return the SortDefinition that this comparator uses.;public final SortDefinition getSortDefinition() {_		return this.sortDefinition__	};return,the,sort,definition,that,this,comparator,uses;public,final,sort,definition,get,sort,definition,return,this,sort,definition
PropertyComparator -> public final SortDefinition getSortDefinition();1530174524;Return the SortDefinition that this comparator uses.;public final SortDefinition getSortDefinition() {_		return this.sortDefinition__	};return,the,sort,definition,that,this,comparator,uses;public,final,sort,definition,get,sort,definition,return,this,sort,definition
PropertyComparator -> public final SortDefinition getSortDefinition();1532091916;Return the SortDefinition that this comparator uses.;public final SortDefinition getSortDefinition() {_		return this.sortDefinition__	};return,the,sort,definition,that,this,comparator,uses;public,final,sort,definition,get,sort,definition,return,this,sort,definition
PropertyComparator -> public static void sort(List<?> source, SortDefinition sortDefinition) throws BeansException;1385412762;Sort the given List according to the given sort definition._<p>Note: Contained objects have to provide the given property_in the form of a bean property, i.e. a getXXX method._@param source the input List_@param sortDefinition the parameters to sort by_@throws java.lang.IllegalArgumentException in case of a missing propertyName;public static void sort(List<?> source, SortDefinition sortDefinition) throws BeansException {_		if (StringUtils.hasText(sortDefinition.getProperty())) {_			Collections.sort(source, new PropertyComparator<Object>(sortDefinition))__		}_	};sort,the,given,list,according,to,the,given,sort,definition,p,note,contained,objects,have,to,provide,the,given,property,in,the,form,of,a,bean,property,i,e,a,get,xxx,method,param,source,the,input,list,param,sort,definition,the,parameters,to,sort,by,throws,java,lang,illegal,argument,exception,in,case,of,a,missing,property,name;public,static,void,sort,list,source,sort,definition,sort,definition,throws,beans,exception,if,string,utils,has,text,sort,definition,get,property,collections,sort,source,new,property,comparator,object,sort,definition
PropertyComparator -> public static void sort(List<?> source, SortDefinition sortDefinition) throws BeansException;1413848647;Sort the given List according to the given sort definition._<p>Note: Contained objects have to provide the given property_in the form of a bean property, i.e. a getXXX method._@param source the input List_@param sortDefinition the parameters to sort by_@throws java.lang.IllegalArgumentException in case of a missing propertyName;public static void sort(List<?> source, SortDefinition sortDefinition) throws BeansException {_		if (StringUtils.hasText(sortDefinition.getProperty())) {_			Collections.sort(source, new PropertyComparator<Object>(sortDefinition))__		}_	};sort,the,given,list,according,to,the,given,sort,definition,p,note,contained,objects,have,to,provide,the,given,property,in,the,form,of,a,bean,property,i,e,a,get,xxx,method,param,source,the,input,list,param,sort,definition,the,parameters,to,sort,by,throws,java,lang,illegal,argument,exception,in,case,of,a,missing,property,name;public,static,void,sort,list,source,sort,definition,sort,definition,throws,beans,exception,if,string,utils,has,text,sort,definition,get,property,collections,sort,source,new,property,comparator,object,sort,definition
PropertyComparator -> public static void sort(List<?> source, SortDefinition sortDefinition) throws BeansException;1467730834;Sort the given List according to the given sort definition._<p>Note: Contained objects have to provide the given property_in the form of a bean property, i.e. a getXXX method._@param source the input List_@param sortDefinition the parameters to sort by_@throws java.lang.IllegalArgumentException in case of a missing propertyName;public static void sort(List<?> source, SortDefinition sortDefinition) throws BeansException {_		if (StringUtils.hasText(sortDefinition.getProperty())) {_			Collections.sort(source, new PropertyComparator<Object>(sortDefinition))__		}_	};sort,the,given,list,according,to,the,given,sort,definition,p,note,contained,objects,have,to,provide,the,given,property,in,the,form,of,a,bean,property,i,e,a,get,xxx,method,param,source,the,input,list,param,sort,definition,the,parameters,to,sort,by,throws,java,lang,illegal,argument,exception,in,case,of,a,missing,property,name;public,static,void,sort,list,source,sort,definition,sort,definition,throws,beans,exception,if,string,utils,has,text,sort,definition,get,property,collections,sort,source,new,property,comparator,object,sort,definition
PropertyComparator -> public static void sort(List<?> source, SortDefinition sortDefinition) throws BeansException;1495868221;Sort the given List according to the given sort definition._<p>Note: Contained objects have to provide the given property_in the form of a bean property, i.e. a getXXX method._@param source the input List_@param sortDefinition the parameters to sort by_@throws java.lang.IllegalArgumentException in case of a missing propertyName;public static void sort(List<?> source, SortDefinition sortDefinition) throws BeansException {_		if (StringUtils.hasText(sortDefinition.getProperty())) {_			Collections.sort(source, new PropertyComparator<Object>(sortDefinition))__		}_	};sort,the,given,list,according,to,the,given,sort,definition,p,note,contained,objects,have,to,provide,the,given,property,in,the,form,of,a,bean,property,i,e,a,get,xxx,method,param,source,the,input,list,param,sort,definition,the,parameters,to,sort,by,throws,java,lang,illegal,argument,exception,in,case,of,a,missing,property,name;public,static,void,sort,list,source,sort,definition,sort,definition,throws,beans,exception,if,string,utils,has,text,sort,definition,get,property,collections,sort,source,new,property,comparator,object,sort,definition
PropertyComparator -> public static void sort(List<?> source, SortDefinition sortDefinition) throws BeansException;1498780456;Sort the given List according to the given sort definition._<p>Note: Contained objects have to provide the given property_in the form of a bean property, i.e. a getXXX method._@param source the input List_@param sortDefinition the parameters to sort by_@throws java.lang.IllegalArgumentException in case of a missing propertyName;public static void sort(List<?> source, SortDefinition sortDefinition) throws BeansException {_		if (StringUtils.hasText(sortDefinition.getProperty())) {_			Collections.sort(source, new PropertyComparator<>(sortDefinition))__		}_	};sort,the,given,list,according,to,the,given,sort,definition,p,note,contained,objects,have,to,provide,the,given,property,in,the,form,of,a,bean,property,i,e,a,get,xxx,method,param,source,the,input,list,param,sort,definition,the,parameters,to,sort,by,throws,java,lang,illegal,argument,exception,in,case,of,a,missing,property,name;public,static,void,sort,list,source,sort,definition,sort,definition,throws,beans,exception,if,string,utils,has,text,sort,definition,get,property,collections,sort,source,new,property,comparator,sort,definition
PropertyComparator -> public static void sort(List<?> source, SortDefinition sortDefinition) throws BeansException;1518772998;Sort the given List according to the given sort definition._<p>Note: Contained objects have to provide the given property_in the form of a bean property, i.e. a getXXX method._@param source the input List_@param sortDefinition the parameters to sort by_@throws java.lang.IllegalArgumentException in case of a missing propertyName;public static void sort(List<?> source, SortDefinition sortDefinition) throws BeansException {_		if (StringUtils.hasText(sortDefinition.getProperty())) {_			source.sort(new PropertyComparator<>(sortDefinition))__		}_	};sort,the,given,list,according,to,the,given,sort,definition,p,note,contained,objects,have,to,provide,the,given,property,in,the,form,of,a,bean,property,i,e,a,get,xxx,method,param,source,the,input,list,param,sort,definition,the,parameters,to,sort,by,throws,java,lang,illegal,argument,exception,in,case,of,a,missing,property,name;public,static,void,sort,list,source,sort,definition,sort,definition,throws,beans,exception,if,string,utils,has,text,sort,definition,get,property,source,sort,new,property,comparator,sort,definition
PropertyComparator -> public static void sort(List<?> source, SortDefinition sortDefinition) throws BeansException;1530174524;Sort the given List according to the given sort definition._<p>Note: Contained objects have to provide the given property_in the form of a bean property, i.e. a getXXX method._@param source the input List_@param sortDefinition the parameters to sort by_@throws java.lang.IllegalArgumentException in case of a missing propertyName;public static void sort(List<?> source, SortDefinition sortDefinition) throws BeansException {_		if (StringUtils.hasText(sortDefinition.getProperty())) {_			source.sort(new PropertyComparator<>(sortDefinition))__		}_	};sort,the,given,list,according,to,the,given,sort,definition,p,note,contained,objects,have,to,provide,the,given,property,in,the,form,of,a,bean,property,i,e,a,get,xxx,method,param,source,the,input,list,param,sort,definition,the,parameters,to,sort,by,throws,java,lang,illegal,argument,exception,in,case,of,a,missing,property,name;public,static,void,sort,list,source,sort,definition,sort,definition,throws,beans,exception,if,string,utils,has,text,sort,definition,get,property,source,sort,new,property,comparator,sort,definition
PropertyComparator -> public static void sort(List<?> source, SortDefinition sortDefinition) throws BeansException;1532091916;Sort the given List according to the given sort definition._<p>Note: Contained objects have to provide the given property_in the form of a bean property, i.e. a getXXX method._@param source the input List_@param sortDefinition the parameters to sort by_@throws java.lang.IllegalArgumentException in case of a missing propertyName;public static void sort(List<?> source, SortDefinition sortDefinition) throws BeansException {_		if (StringUtils.hasText(sortDefinition.getProperty())) {_			source.sort(new PropertyComparator<>(sortDefinition))__		}_	};sort,the,given,list,according,to,the,given,sort,definition,p,note,contained,objects,have,to,provide,the,given,property,in,the,form,of,a,bean,property,i,e,a,get,xxx,method,param,source,the,input,list,param,sort,definition,the,parameters,to,sort,by,throws,java,lang,illegal,argument,exception,in,case,of,a,missing,property,name;public,static,void,sort,list,source,sort,definition,sort,definition,throws,beans,exception,if,string,utils,has,text,sort,definition,get,property,source,sort,new,property,comparator,sort,definition
PropertyComparator -> public static void sort(List source, SortDefinition sortDefinition) throws BeansException;1328020251;Sort the given List according to the given sort definition._<p>Note: Contained objects have to provide the given property_in the form of a bean property, i.e. a getXXX method._@param source the input List_@param sortDefinition the parameters to sort by_@throws java.lang.IllegalArgumentException in case of a missing propertyName;public static void sort(List source, SortDefinition sortDefinition) throws BeansException {_		if (StringUtils.hasText(sortDefinition.getProperty())) {_			Collections.sort(source, new PropertyComparator(sortDefinition))__		}_	};sort,the,given,list,according,to,the,given,sort,definition,p,note,contained,objects,have,to,provide,the,given,property,in,the,form,of,a,bean,property,i,e,a,get,xxx,method,param,source,the,input,list,param,sort,definition,the,parameters,to,sort,by,throws,java,lang,illegal,argument,exception,in,case,of,a,missing,property,name;public,static,void,sort,list,source,sort,definition,sort,definition,throws,beans,exception,if,string,utils,has,text,sort,definition,get,property,collections,sort,source,new,property,comparator,sort,definition
PropertyComparator -> public static void sort(List source, SortDefinition sortDefinition) throws BeansException;1356735495;Sort the given List according to the given sort definition._<p>Note: Contained objects have to provide the given property_in the form of a bean property, i.e. a getXXX method._@param source the input List_@param sortDefinition the parameters to sort by_@throws java.lang.IllegalArgumentException in case of a missing propertyName;public static void sort(List source, SortDefinition sortDefinition) throws BeansException {_		if (StringUtils.hasText(sortDefinition.getProperty())) {_			Collections.sort(source, new PropertyComparator(sortDefinition))__		}_	};sort,the,given,list,according,to,the,given,sort,definition,p,note,contained,objects,have,to,provide,the,given,property,in,the,form,of,a,bean,property,i,e,a,get,xxx,method,param,source,the,input,list,param,sort,definition,the,parameters,to,sort,by,throws,java,lang,illegal,argument,exception,in,case,of,a,missing,property,name;public,static,void,sort,list,source,sort,definition,sort,definition,throws,beans,exception,if,string,utils,has,text,sort,definition,get,property,collections,sort,source,new,property,comparator,sort,definition
PropertyComparator -> public static void sort(List source, SortDefinition sortDefinition) throws BeansException;1357119239;Sort the given List according to the given sort definition._<p>Note: Contained objects have to provide the given property_in the form of a bean property, i.e. a getXXX method._@param source the input List_@param sortDefinition the parameters to sort by_@throws java.lang.IllegalArgumentException in case of a missing propertyName;public static void sort(List source, SortDefinition sortDefinition) throws BeansException {_		if (StringUtils.hasText(sortDefinition.getProperty())) {_			Collections.sort(source, new PropertyComparator(sortDefinition))__		}_	};sort,the,given,list,according,to,the,given,sort,definition,p,note,contained,objects,have,to,provide,the,given,property,in,the,form,of,a,bean,property,i,e,a,get,xxx,method,param,source,the,input,list,param,sort,definition,the,parameters,to,sort,by,throws,java,lang,illegal,argument,exception,in,case,of,a,missing,property,name;public,static,void,sort,list,source,sort,definition,sort,definition,throws,beans,exception,if,string,utils,has,text,sort,definition,get,property,collections,sort,source,new,property,comparator,sort,definition
PropertyComparator -> public static void sort(List source, SortDefinition sortDefinition) throws BeansException;1368482696;Sort the given List according to the given sort definition._<p>Note: Contained objects have to provide the given property_in the form of a bean property, i.e. a getXXX method._@param source the input List_@param sortDefinition the parameters to sort by_@throws java.lang.IllegalArgumentException in case of a missing propertyName;public static void sort(List source, SortDefinition sortDefinition) throws BeansException {_		if (StringUtils.hasText(sortDefinition.getProperty())) {_			Collections.sort(source, new PropertyComparator(sortDefinition))__		}_	};sort,the,given,list,according,to,the,given,sort,definition,p,note,contained,objects,have,to,provide,the,given,property,in,the,form,of,a,bean,property,i,e,a,get,xxx,method,param,source,the,input,list,param,sort,definition,the,parameters,to,sort,by,throws,java,lang,illegal,argument,exception,in,case,of,a,missing,property,name;public,static,void,sort,list,source,sort,definition,sort,definition,throws,beans,exception,if,string,utils,has,text,sort,definition,get,property,collections,sort,source,new,property,comparator,sort,definition
PropertyComparator -> private Object getPropertyValue(Object obj);1328020251;Get the SortDefinition's property value for the given object._@param obj the object to get the property value for_@return the property value;private Object getPropertyValue(Object obj) {_		_		_		_		try {_			this.beanWrapper.setWrappedInstance(obj)__			return this.beanWrapper.getPropertyValue(this.sortDefinition.getProperty())__		}_		catch (BeansException ex) {_			logger.info("PropertyComparator could not access property - treating as null for sorting", ex)__			return null__		}_	};get,the,sort,definition,s,property,value,for,the,given,object,param,obj,the,object,to,get,the,property,value,for,return,the,property,value;private,object,get,property,value,object,obj,try,this,bean,wrapper,set,wrapped,instance,obj,return,this,bean,wrapper,get,property,value,this,sort,definition,get,property,catch,beans,exception,ex,logger,info,property,comparator,could,not,access,property,treating,as,null,for,sorting,ex,return,null
PropertyComparator -> private Object getPropertyValue(Object obj);1356735495;Get the SortDefinition's property value for the given object._@param obj the object to get the property value for_@return the property value;private Object getPropertyValue(Object obj) {_		_		_		_		try {_			this.beanWrapper.setWrappedInstance(obj)__			return this.beanWrapper.getPropertyValue(this.sortDefinition.getProperty())__		}_		catch (BeansException ex) {_			logger.info("PropertyComparator could not access property - treating as null for sorting", ex)__			return null__		}_	};get,the,sort,definition,s,property,value,for,the,given,object,param,obj,the,object,to,get,the,property,value,for,return,the,property,value;private,object,get,property,value,object,obj,try,this,bean,wrapper,set,wrapped,instance,obj,return,this,bean,wrapper,get,property,value,this,sort,definition,get,property,catch,beans,exception,ex,logger,info,property,comparator,could,not,access,property,treating,as,null,for,sorting,ex,return,null
PropertyComparator -> private Object getPropertyValue(Object obj);1357119239;Get the SortDefinition's property value for the given object._@param obj the object to get the property value for_@return the property value;private Object getPropertyValue(Object obj) {_		_		_		_		try {_			this.beanWrapper.setWrappedInstance(obj)__			return this.beanWrapper.getPropertyValue(this.sortDefinition.getProperty())__		}_		catch (BeansException ex) {_			logger.info("PropertyComparator could not access property - treating as null for sorting", ex)__			return null__		}_	};get,the,sort,definition,s,property,value,for,the,given,object,param,obj,the,object,to,get,the,property,value,for,return,the,property,value;private,object,get,property,value,object,obj,try,this,bean,wrapper,set,wrapped,instance,obj,return,this,bean,wrapper,get,property,value,this,sort,definition,get,property,catch,beans,exception,ex,logger,info,property,comparator,could,not,access,property,treating,as,null,for,sorting,ex,return,null
PropertyComparator -> private Object getPropertyValue(Object obj);1368482696;Get the SortDefinition's property value for the given object._@param obj the object to get the property value for_@return the property value;private Object getPropertyValue(Object obj) {_		_		_		_		try {_			this.beanWrapper.setWrappedInstance(obj)__			return this.beanWrapper.getPropertyValue(this.sortDefinition.getProperty())__		}_		catch (BeansException ex) {_			logger.info("PropertyComparator could not access property - treating as null for sorting", ex)__			return null__		}_	};get,the,sort,definition,s,property,value,for,the,given,object,param,obj,the,object,to,get,the,property,value,for,return,the,property,value;private,object,get,property,value,object,obj,try,this,bean,wrapper,set,wrapped,instance,obj,return,this,bean,wrapper,get,property,value,this,sort,definition,get,property,catch,beans,exception,ex,logger,info,property,comparator,could,not,access,property,treating,as,null,for,sorting,ex,return,null
PropertyComparator -> private Object getPropertyValue(Object obj);1385412762;Get the SortDefinition's property value for the given object._@param obj the object to get the property value for_@return the property value;private Object getPropertyValue(Object obj) {_		_		_		_		try {_			this.beanWrapper.setWrappedInstance(obj)__			return this.beanWrapper.getPropertyValue(this.sortDefinition.getProperty())__		}_		catch (BeansException ex) {_			logger.info("PropertyComparator could not access property - treating as null for sorting", ex)__			return null__		}_	};get,the,sort,definition,s,property,value,for,the,given,object,param,obj,the,object,to,get,the,property,value,for,return,the,property,value;private,object,get,property,value,object,obj,try,this,bean,wrapper,set,wrapped,instance,obj,return,this,bean,wrapper,get,property,value,this,sort,definition,get,property,catch,beans,exception,ex,logger,info,property,comparator,could,not,access,property,treating,as,null,for,sorting,ex,return,null
PropertyComparator -> private Object getPropertyValue(Object obj);1413848647;Get the SortDefinition's property value for the given object._@param obj the object to get the property value for_@return the property value;private Object getPropertyValue(Object obj) {_		_		_		_		try {_			this.beanWrapper.setWrappedInstance(obj)__			return this.beanWrapper.getPropertyValue(this.sortDefinition.getProperty())__		}_		catch (BeansException ex) {_			logger.info("PropertyComparator could not access property - treating as null for sorting", ex)__			return null__		}_	};get,the,sort,definition,s,property,value,for,the,given,object,param,obj,the,object,to,get,the,property,value,for,return,the,property,value;private,object,get,property,value,object,obj,try,this,bean,wrapper,set,wrapped,instance,obj,return,this,bean,wrapper,get,property,value,this,sort,definition,get,property,catch,beans,exception,ex,logger,info,property,comparator,could,not,access,property,treating,as,null,for,sorting,ex,return,null
PropertyComparator -> private Object getPropertyValue(Object obj);1467730834;Get the SortDefinition's property value for the given object._@param obj the object to get the property value for_@return the property value;private Object getPropertyValue(Object obj) {_		_		_		_		try {_			this.beanWrapper.setWrappedInstance(obj)__			return this.beanWrapper.getPropertyValue(this.sortDefinition.getProperty())__		}_		catch (BeansException ex) {_			logger.info("PropertyComparator could not access property - treating as null for sorting", ex)__			return null__		}_	};get,the,sort,definition,s,property,value,for,the,given,object,param,obj,the,object,to,get,the,property,value,for,return,the,property,value;private,object,get,property,value,object,obj,try,this,bean,wrapper,set,wrapped,instance,obj,return,this,bean,wrapper,get,property,value,this,sort,definition,get,property,catch,beans,exception,ex,logger,info,property,comparator,could,not,access,property,treating,as,null,for,sorting,ex,return,null
