# id;timestamp;commentText;codeText;commentWords;codeWords
PropertyPathFactoryBean -> public void setResultType(Class<?> resultType);1385412762;Specify the type of the result from evaluating the property path._<p>Note: This is not necessary for directly specified target objects_or singleton target beans, where the type can be determined through_introspection. Just specify this in case of a prototype target,_provided that you need matching by type (for example, for autowiring)._@param resultType the result type, for example "java.lang.Integer";public void setResultType(Class<?> resultType) {_		this.resultType = resultType__	};specify,the,type,of,the,result,from,evaluating,the,property,path,p,note,this,is,not,necessary,for,directly,specified,target,objects,or,singleton,target,beans,where,the,type,can,be,determined,through,introspection,just,specify,this,in,case,of,a,prototype,target,provided,that,you,need,matching,by,type,for,example,for,autowiring,param,result,type,the,result,type,for,example,java,lang,integer;public,void,set,result,type,class,result,type,this,result,type,result,type
PropertyPathFactoryBean -> public void setResultType(Class<?> resultType);1498780456;Specify the type of the result from evaluating the property path._<p>Note: This is not necessary for directly specified target objects_or singleton target beans, where the type can be determined through_introspection. Just specify this in case of a prototype target,_provided that you need matching by type (for example, for autowiring)._@param resultType the result type, for example "java.lang.Integer";public void setResultType(Class<?> resultType) {_		this.resultType = resultType__	};specify,the,type,of,the,result,from,evaluating,the,property,path,p,note,this,is,not,necessary,for,directly,specified,target,objects,or,singleton,target,beans,where,the,type,can,be,determined,through,introspection,just,specify,this,in,case,of,a,prototype,target,provided,that,you,need,matching,by,type,for,example,for,autowiring,param,result,type,the,result,type,for,example,java,lang,integer;public,void,set,result,type,class,result,type,this,result,type,result,type
PropertyPathFactoryBean -> public void setResultType(Class<?> resultType);1502974979;Specify the type of the result from evaluating the property path._<p>Note: This is not necessary for directly specified target objects_or singleton target beans, where the type can be determined through_introspection. Just specify this in case of a prototype target,_provided that you need matching by type (for example, for autowiring)._@param resultType the result type, for example "java.lang.Integer";public void setResultType(Class<?> resultType) {_		this.resultType = resultType__	};specify,the,type,of,the,result,from,evaluating,the,property,path,p,note,this,is,not,necessary,for,directly,specified,target,objects,or,singleton,target,beans,where,the,type,can,be,determined,through,introspection,just,specify,this,in,case,of,a,prototype,target,provided,that,you,need,matching,by,type,for,example,for,autowiring,param,result,type,the,result,type,for,example,java,lang,integer;public,void,set,result,type,class,result,type,this,result,type,result,type
PropertyPathFactoryBean -> public void setResultType(Class resultType);1328020251;Specify the type of the result from evaluating the property path._<p>Note: This is not necessary for directly specified target objects_or singleton target beans, where the type can be determined through_introspection. Just specify this in case of a prototype target,_provided that you need matching by type (for example, for autowiring)._@param resultType the result type, for example "java.lang.Integer";public void setResultType(Class resultType) {_		this.resultType = resultType__	};specify,the,type,of,the,result,from,evaluating,the,property,path,p,note,this,is,not,necessary,for,directly,specified,target,objects,or,singleton,target,beans,where,the,type,can,be,determined,through,introspection,just,specify,this,in,case,of,a,prototype,target,provided,that,you,need,matching,by,type,for,example,for,autowiring,param,result,type,the,result,type,for,example,java,lang,integer;public,void,set,result,type,class,result,type,this,result,type,result,type
PropertyPathFactoryBean -> public void setResultType(Class resultType);1356735495;Specify the type of the result from evaluating the property path._<p>Note: This is not necessary for directly specified target objects_or singleton target beans, where the type can be determined through_introspection. Just specify this in case of a prototype target,_provided that you need matching by type (for example, for autowiring)._@param resultType the result type, for example "java.lang.Integer";public void setResultType(Class resultType) {_		this.resultType = resultType__	};specify,the,type,of,the,result,from,evaluating,the,property,path,p,note,this,is,not,necessary,for,directly,specified,target,objects,or,singleton,target,beans,where,the,type,can,be,determined,through,introspection,just,specify,this,in,case,of,a,prototype,target,provided,that,you,need,matching,by,type,for,example,for,autowiring,param,result,type,the,result,type,for,example,java,lang,integer;public,void,set,result,type,class,result,type,this,result,type,result,type
PropertyPathFactoryBean -> public void setResultType(Class resultType);1357119239;Specify the type of the result from evaluating the property path._<p>Note: This is not necessary for directly specified target objects_or singleton target beans, where the type can be determined through_introspection. Just specify this in case of a prototype target,_provided that you need matching by type (for example, for autowiring)._@param resultType the result type, for example "java.lang.Integer";public void setResultType(Class resultType) {_		this.resultType = resultType__	};specify,the,type,of,the,result,from,evaluating,the,property,path,p,note,this,is,not,necessary,for,directly,specified,target,objects,or,singleton,target,beans,where,the,type,can,be,determined,through,introspection,just,specify,this,in,case,of,a,prototype,target,provided,that,you,need,matching,by,type,for,example,for,autowiring,param,result,type,the,result,type,for,example,java,lang,integer;public,void,set,result,type,class,result,type,this,result,type,result,type
PropertyPathFactoryBean -> public void setResultType(Class resultType);1368482696;Specify the type of the result from evaluating the property path._<p>Note: This is not necessary for directly specified target objects_or singleton target beans, where the type can be determined through_introspection. Just specify this in case of a prototype target,_provided that you need matching by type (for example, for autowiring)._@param resultType the result type, for example "java.lang.Integer";public void setResultType(Class resultType) {_		this.resultType = resultType__	};specify,the,type,of,the,result,from,evaluating,the,property,path,p,note,this,is,not,necessary,for,directly,specified,target,objects,or,singleton,target,beans,where,the,type,can,be,determined,through,introspection,just,specify,this,in,case,of,a,prototype,target,provided,that,you,need,matching,by,type,for,example,for,autowiring,param,result,type,the,result,type,for,example,java,lang,integer;public,void,set,result,type,class,result,type,this,result,type,result,type
PropertyPathFactoryBean -> public void setTargetObject(Object targetObject);1328020251;Specify a target object to apply the property path to._Alternatively, specify a target bean name._@param targetObject a target object, for example a bean reference_or an inner bean_@see #setTargetBeanName;public void setTargetObject(Object targetObject) {_		this.targetBeanWrapper = PropertyAccessorFactory.forBeanPropertyAccess(targetObject)__	};specify,a,target,object,to,apply,the,property,path,to,alternatively,specify,a,target,bean,name,param,target,object,a,target,object,for,example,a,bean,reference,or,an,inner,bean,see,set,target,bean,name;public,void,set,target,object,object,target,object,this,target,bean,wrapper,property,accessor,factory,for,bean,property,access,target,object
PropertyPathFactoryBean -> public void setTargetObject(Object targetObject);1356735495;Specify a target object to apply the property path to._Alternatively, specify a target bean name._@param targetObject a target object, for example a bean reference_or an inner bean_@see #setTargetBeanName;public void setTargetObject(Object targetObject) {_		this.targetBeanWrapper = PropertyAccessorFactory.forBeanPropertyAccess(targetObject)__	};specify,a,target,object,to,apply,the,property,path,to,alternatively,specify,a,target,bean,name,param,target,object,a,target,object,for,example,a,bean,reference,or,an,inner,bean,see,set,target,bean,name;public,void,set,target,object,object,target,object,this,target,bean,wrapper,property,accessor,factory,for,bean,property,access,target,object
PropertyPathFactoryBean -> public void setTargetObject(Object targetObject);1357119239;Specify a target object to apply the property path to._Alternatively, specify a target bean name._@param targetObject a target object, for example a bean reference_or an inner bean_@see #setTargetBeanName;public void setTargetObject(Object targetObject) {_		this.targetBeanWrapper = PropertyAccessorFactory.forBeanPropertyAccess(targetObject)__	};specify,a,target,object,to,apply,the,property,path,to,alternatively,specify,a,target,bean,name,param,target,object,a,target,object,for,example,a,bean,reference,or,an,inner,bean,see,set,target,bean,name;public,void,set,target,object,object,target,object,this,target,bean,wrapper,property,accessor,factory,for,bean,property,access,target,object
PropertyPathFactoryBean -> public void setTargetObject(Object targetObject);1368482696;Specify a target object to apply the property path to._Alternatively, specify a target bean name._@param targetObject a target object, for example a bean reference_or an inner bean_@see #setTargetBeanName;public void setTargetObject(Object targetObject) {_		this.targetBeanWrapper = PropertyAccessorFactory.forBeanPropertyAccess(targetObject)__	};specify,a,target,object,to,apply,the,property,path,to,alternatively,specify,a,target,bean,name,param,target,object,a,target,object,for,example,a,bean,reference,or,an,inner,bean,see,set,target,bean,name;public,void,set,target,object,object,target,object,this,target,bean,wrapper,property,accessor,factory,for,bean,property,access,target,object
PropertyPathFactoryBean -> public void setTargetObject(Object targetObject);1385412762;Specify a target object to apply the property path to._Alternatively, specify a target bean name._@param targetObject a target object, for example a bean reference_or an inner bean_@see #setTargetBeanName;public void setTargetObject(Object targetObject) {_		this.targetBeanWrapper = PropertyAccessorFactory.forBeanPropertyAccess(targetObject)__	};specify,a,target,object,to,apply,the,property,path,to,alternatively,specify,a,target,bean,name,param,target,object,a,target,object,for,example,a,bean,reference,or,an,inner,bean,see,set,target,bean,name;public,void,set,target,object,object,target,object,this,target,bean,wrapper,property,accessor,factory,for,bean,property,access,target,object
PropertyPathFactoryBean -> public void setTargetObject(Object targetObject);1498780456;Specify a target object to apply the property path to._Alternatively, specify a target bean name._@param targetObject a target object, for example a bean reference_or an inner bean_@see #setTargetBeanName;public void setTargetObject(Object targetObject) {_		this.targetBeanWrapper = PropertyAccessorFactory.forBeanPropertyAccess(targetObject)__	};specify,a,target,object,to,apply,the,property,path,to,alternatively,specify,a,target,bean,name,param,target,object,a,target,object,for,example,a,bean,reference,or,an,inner,bean,see,set,target,bean,name;public,void,set,target,object,object,target,object,this,target,bean,wrapper,property,accessor,factory,for,bean,property,access,target,object
PropertyPathFactoryBean -> public void setTargetObject(Object targetObject);1502974979;Specify a target object to apply the property path to._Alternatively, specify a target bean name._@param targetObject a target object, for example a bean reference_or an inner bean_@see #setTargetBeanName;public void setTargetObject(Object targetObject) {_		this.targetBeanWrapper = PropertyAccessorFactory.forBeanPropertyAccess(targetObject)__	};specify,a,target,object,to,apply,the,property,path,to,alternatively,specify,a,target,bean,name,param,target,object,a,target,object,for,example,a,bean,reference,or,an,inner,bean,see,set,target,bean,name;public,void,set,target,object,object,target,object,this,target,bean,wrapper,property,accessor,factory,for,bean,property,access,target,object
PropertyPathFactoryBean -> public void setTargetBeanName(String targetBeanName);1328020251;Specify the name of a target bean to apply the property path to._Alternatively, specify a target object directly._@param targetBeanName the bean name to be looked up in the_containing bean factory (e.g. "testBean")_@see #setTargetObject;public void setTargetBeanName(String targetBeanName) {_		this.targetBeanName = StringUtils.trimAllWhitespace(targetBeanName)__	};specify,the,name,of,a,target,bean,to,apply,the,property,path,to,alternatively,specify,a,target,object,directly,param,target,bean,name,the,bean,name,to,be,looked,up,in,the,containing,bean,factory,e,g,test,bean,see,set,target,object;public,void,set,target,bean,name,string,target,bean,name,this,target,bean,name,string,utils,trim,all,whitespace,target,bean,name
PropertyPathFactoryBean -> public void setTargetBeanName(String targetBeanName);1356735495;Specify the name of a target bean to apply the property path to._Alternatively, specify a target object directly._@param targetBeanName the bean name to be looked up in the_containing bean factory (e.g. "testBean")_@see #setTargetObject;public void setTargetBeanName(String targetBeanName) {_		this.targetBeanName = StringUtils.trimAllWhitespace(targetBeanName)__	};specify,the,name,of,a,target,bean,to,apply,the,property,path,to,alternatively,specify,a,target,object,directly,param,target,bean,name,the,bean,name,to,be,looked,up,in,the,containing,bean,factory,e,g,test,bean,see,set,target,object;public,void,set,target,bean,name,string,target,bean,name,this,target,bean,name,string,utils,trim,all,whitespace,target,bean,name
PropertyPathFactoryBean -> public void setTargetBeanName(String targetBeanName);1357119239;Specify the name of a target bean to apply the property path to._Alternatively, specify a target object directly._@param targetBeanName the bean name to be looked up in the_containing bean factory (e.g. "testBean")_@see #setTargetObject;public void setTargetBeanName(String targetBeanName) {_		this.targetBeanName = StringUtils.trimAllWhitespace(targetBeanName)__	};specify,the,name,of,a,target,bean,to,apply,the,property,path,to,alternatively,specify,a,target,object,directly,param,target,bean,name,the,bean,name,to,be,looked,up,in,the,containing,bean,factory,e,g,test,bean,see,set,target,object;public,void,set,target,bean,name,string,target,bean,name,this,target,bean,name,string,utils,trim,all,whitespace,target,bean,name
PropertyPathFactoryBean -> public void setTargetBeanName(String targetBeanName);1368482696;Specify the name of a target bean to apply the property path to._Alternatively, specify a target object directly._@param targetBeanName the bean name to be looked up in the_containing bean factory (e.g. "testBean")_@see #setTargetObject;public void setTargetBeanName(String targetBeanName) {_		this.targetBeanName = StringUtils.trimAllWhitespace(targetBeanName)__	};specify,the,name,of,a,target,bean,to,apply,the,property,path,to,alternatively,specify,a,target,object,directly,param,target,bean,name,the,bean,name,to,be,looked,up,in,the,containing,bean,factory,e,g,test,bean,see,set,target,object;public,void,set,target,bean,name,string,target,bean,name,this,target,bean,name,string,utils,trim,all,whitespace,target,bean,name
PropertyPathFactoryBean -> public void setTargetBeanName(String targetBeanName);1385412762;Specify the name of a target bean to apply the property path to._Alternatively, specify a target object directly._@param targetBeanName the bean name to be looked up in the_containing bean factory (e.g. "testBean")_@see #setTargetObject;public void setTargetBeanName(String targetBeanName) {_		this.targetBeanName = StringUtils.trimAllWhitespace(targetBeanName)__	};specify,the,name,of,a,target,bean,to,apply,the,property,path,to,alternatively,specify,a,target,object,directly,param,target,bean,name,the,bean,name,to,be,looked,up,in,the,containing,bean,factory,e,g,test,bean,see,set,target,object;public,void,set,target,bean,name,string,target,bean,name,this,target,bean,name,string,utils,trim,all,whitespace,target,bean,name
PropertyPathFactoryBean -> public void setTargetBeanName(String targetBeanName);1498780456;Specify the name of a target bean to apply the property path to._Alternatively, specify a target object directly._@param targetBeanName the bean name to be looked up in the_containing bean factory (e.g. "testBean")_@see #setTargetObject;public void setTargetBeanName(String targetBeanName) {_		this.targetBeanName = StringUtils.trimAllWhitespace(targetBeanName)__	};specify,the,name,of,a,target,bean,to,apply,the,property,path,to,alternatively,specify,a,target,object,directly,param,target,bean,name,the,bean,name,to,be,looked,up,in,the,containing,bean,factory,e,g,test,bean,see,set,target,object;public,void,set,target,bean,name,string,target,bean,name,this,target,bean,name,string,utils,trim,all,whitespace,target,bean,name
PropertyPathFactoryBean -> public void setTargetBeanName(String targetBeanName);1502974979;Specify the name of a target bean to apply the property path to._Alternatively, specify a target object directly._@param targetBeanName the bean name to be looked up in the_containing bean factory (e.g. "testBean")_@see #setTargetObject;public void setTargetBeanName(String targetBeanName) {_		this.targetBeanName = StringUtils.trimAllWhitespace(targetBeanName)__	};specify,the,name,of,a,target,bean,to,apply,the,property,path,to,alternatively,specify,a,target,object,directly,param,target,bean,name,the,bean,name,to,be,looked,up,in,the,containing,bean,factory,e,g,test,bean,see,set,target,object;public,void,set,target,bean,name,string,target,bean,name,this,target,bean,name,string,utils,trim,all,whitespace,target,bean,name
PropertyPathFactoryBean -> public void setPropertyPath(String propertyPath);1328020251;Specify the property path to apply to the target._@param propertyPath the property path, potentially nested_(e.g. "age" or "spouse.age");public void setPropertyPath(String propertyPath) {_		this.propertyPath = StringUtils.trimAllWhitespace(propertyPath)__	};specify,the,property,path,to,apply,to,the,target,param,property,path,the,property,path,potentially,nested,e,g,age,or,spouse,age;public,void,set,property,path,string,property,path,this,property,path,string,utils,trim,all,whitespace,property,path
PropertyPathFactoryBean -> public void setPropertyPath(String propertyPath);1356735495;Specify the property path to apply to the target._@param propertyPath the property path, potentially nested_(e.g. "age" or "spouse.age");public void setPropertyPath(String propertyPath) {_		this.propertyPath = StringUtils.trimAllWhitespace(propertyPath)__	};specify,the,property,path,to,apply,to,the,target,param,property,path,the,property,path,potentially,nested,e,g,age,or,spouse,age;public,void,set,property,path,string,property,path,this,property,path,string,utils,trim,all,whitespace,property,path
PropertyPathFactoryBean -> public void setPropertyPath(String propertyPath);1357119239;Specify the property path to apply to the target._@param propertyPath the property path, potentially nested_(e.g. "age" or "spouse.age");public void setPropertyPath(String propertyPath) {_		this.propertyPath = StringUtils.trimAllWhitespace(propertyPath)__	};specify,the,property,path,to,apply,to,the,target,param,property,path,the,property,path,potentially,nested,e,g,age,or,spouse,age;public,void,set,property,path,string,property,path,this,property,path,string,utils,trim,all,whitespace,property,path
PropertyPathFactoryBean -> public void setPropertyPath(String propertyPath);1368482696;Specify the property path to apply to the target._@param propertyPath the property path, potentially nested_(e.g. "age" or "spouse.age");public void setPropertyPath(String propertyPath) {_		this.propertyPath = StringUtils.trimAllWhitespace(propertyPath)__	};specify,the,property,path,to,apply,to,the,target,param,property,path,the,property,path,potentially,nested,e,g,age,or,spouse,age;public,void,set,property,path,string,property,path,this,property,path,string,utils,trim,all,whitespace,property,path
PropertyPathFactoryBean -> public void setPropertyPath(String propertyPath);1385412762;Specify the property path to apply to the target._@param propertyPath the property path, potentially nested_(e.g. "age" or "spouse.age");public void setPropertyPath(String propertyPath) {_		this.propertyPath = StringUtils.trimAllWhitespace(propertyPath)__	};specify,the,property,path,to,apply,to,the,target,param,property,path,the,property,path,potentially,nested,e,g,age,or,spouse,age;public,void,set,property,path,string,property,path,this,property,path,string,utils,trim,all,whitespace,property,path
PropertyPathFactoryBean -> public void setPropertyPath(String propertyPath);1498780456;Specify the property path to apply to the target._@param propertyPath the property path, potentially nested_(e.g. "age" or "spouse.age");public void setPropertyPath(String propertyPath) {_		this.propertyPath = StringUtils.trimAllWhitespace(propertyPath)__	};specify,the,property,path,to,apply,to,the,target,param,property,path,the,property,path,potentially,nested,e,g,age,or,spouse,age;public,void,set,property,path,string,property,path,this,property,path,string,utils,trim,all,whitespace,property,path
PropertyPathFactoryBean -> public void setPropertyPath(String propertyPath);1502974979;Specify the property path to apply to the target._@param propertyPath the property path, potentially nested_(e.g. "age" or "spouse.age");public void setPropertyPath(String propertyPath) {_		this.propertyPath = StringUtils.trimAllWhitespace(propertyPath)__	};specify,the,property,path,to,apply,to,the,target,param,property,path,the,property,path,potentially,nested,e,g,age,or,spouse,age;public,void,set,property,path,string,property,path,this,property,path,string,utils,trim,all,whitespace,property,path
PropertyPathFactoryBean -> public boolean isSingleton();1328020251;While this FactoryBean will often be used for singleton targets,_the invoked getters for the property path might return a new object_for each call, so we have to assume that we're not returning the_same object for each {@link #getObject()} call.;public boolean isSingleton() {_		return false__	};while,this,factory,bean,will,often,be,used,for,singleton,targets,the,invoked,getters,for,the,property,path,might,return,a,new,object,for,each,call,so,we,have,to,assume,that,we,re,not,returning,the,same,object,for,each,link,get,object,call;public,boolean,is,singleton,return,false
PropertyPathFactoryBean -> public boolean isSingleton();1357119239;While this FactoryBean will often be used for singleton targets,_the invoked getters for the property path might return a new object_for each call, so we have to assume that we're not returning the_same object for each {@link #getObject()} call.;public boolean isSingleton() {_		return false__	};while,this,factory,bean,will,often,be,used,for,singleton,targets,the,invoked,getters,for,the,property,path,might,return,a,new,object,for,each,call,so,we,have,to,assume,that,we,re,not,returning,the,same,object,for,each,link,get,object,call;public,boolean,is,singleton,return,false
PropertyPathFactoryBean -> @Override 	public void setBeanName(String beanName);1356735495;The bean name of this PropertyPathFactoryBean will be interpreted_as "beanName.property" pattern, if neither "targetObject" nor_"targetBeanName" nor "propertyPath" have been specified._This allows for concise bean definitions with just an id/name.;@Override_	public void setBeanName(String beanName) {_		this.beanName = StringUtils.trimAllWhitespace(BeanFactoryUtils.originalBeanName(beanName))__	};the,bean,name,of,this,property,path,factory,bean,will,be,interpreted,as,bean,name,property,pattern,if,neither,target,object,nor,target,bean,name,nor,property,path,have,been,specified,this,allows,for,concise,bean,definitions,with,just,an,id,name;override,public,void,set,bean,name,string,bean,name,this,bean,name,string,utils,trim,all,whitespace,bean,factory,utils,original,bean,name,bean,name
PropertyPathFactoryBean -> @Override 	public void setBeanName(String beanName);1368482696;The bean name of this PropertyPathFactoryBean will be interpreted_as "beanName.property" pattern, if neither "targetObject" nor_"targetBeanName" nor "propertyPath" have been specified._This allows for concise bean definitions with just an id/name.;@Override_	public void setBeanName(String beanName) {_		this.beanName = StringUtils.trimAllWhitespace(BeanFactoryUtils.originalBeanName(beanName))__	};the,bean,name,of,this,property,path,factory,bean,will,be,interpreted,as,bean,name,property,pattern,if,neither,target,object,nor,target,bean,name,nor,property,path,have,been,specified,this,allows,for,concise,bean,definitions,with,just,an,id,name;override,public,void,set,bean,name,string,bean,name,this,bean,name,string,utils,trim,all,whitespace,bean,factory,utils,original,bean,name,bean,name
PropertyPathFactoryBean -> @Override 	public void setBeanName(String beanName);1385412762;The bean name of this PropertyPathFactoryBean will be interpreted_as "beanName.property" pattern, if neither "targetObject" nor_"targetBeanName" nor "propertyPath" have been specified._This allows for concise bean definitions with just an id/name.;@Override_	public void setBeanName(String beanName) {_		this.beanName = StringUtils.trimAllWhitespace(BeanFactoryUtils.originalBeanName(beanName))__	};the,bean,name,of,this,property,path,factory,bean,will,be,interpreted,as,bean,name,property,pattern,if,neither,target,object,nor,target,bean,name,nor,property,path,have,been,specified,this,allows,for,concise,bean,definitions,with,just,an,id,name;override,public,void,set,bean,name,string,bean,name,this,bean,name,string,utils,trim,all,whitespace,bean,factory,utils,original,bean,name,bean,name
PropertyPathFactoryBean -> @Override 	public void setBeanName(String beanName);1498780456;The bean name of this PropertyPathFactoryBean will be interpreted_as "beanName.property" pattern, if neither "targetObject" nor_"targetBeanName" nor "propertyPath" have been specified._This allows for concise bean definitions with just an id/name.;@Override_	public void setBeanName(String beanName) {_		this.beanName = StringUtils.trimAllWhitespace(BeanFactoryUtils.originalBeanName(beanName))__	};the,bean,name,of,this,property,path,factory,bean,will,be,interpreted,as,bean,name,property,pattern,if,neither,target,object,nor,target,bean,name,nor,property,path,have,been,specified,this,allows,for,concise,bean,definitions,with,just,an,id,name;override,public,void,set,bean,name,string,bean,name,this,bean,name,string,utils,trim,all,whitespace,bean,factory,utils,original,bean,name,bean,name
PropertyPathFactoryBean -> @Override 	public void setBeanName(String beanName);1502974979;The bean name of this PropertyPathFactoryBean will be interpreted_as "beanName.property" pattern, if neither "targetObject" nor_"targetBeanName" nor "propertyPath" have been specified._This allows for concise bean definitions with just an id/name.;@Override_	public void setBeanName(String beanName) {_		this.beanName = StringUtils.trimAllWhitespace(BeanFactoryUtils.originalBeanName(beanName))__	};the,bean,name,of,this,property,path,factory,bean,will,be,interpreted,as,bean,name,property,pattern,if,neither,target,object,nor,target,bean,name,nor,property,path,have,been,specified,this,allows,for,concise,bean,definitions,with,just,an,id,name;override,public,void,set,bean,name,string,bean,name,this,bean,name,string,utils,trim,all,whitespace,bean,factory,utils,original,bean,name,bean,name
PropertyPathFactoryBean -> public void setBeanName(String beanName);1328020251;The bean name of this PropertyPathFactoryBean will be interpreted_as "beanName.property" pattern, if neither "targetObject" nor_"targetBeanName" nor "propertyPath" have been specified._This allows for concise bean definitions with just an id/name.;public void setBeanName(String beanName) {_		this.beanName = StringUtils.trimAllWhitespace(BeanFactoryUtils.originalBeanName(beanName))__	};the,bean,name,of,this,property,path,factory,bean,will,be,interpreted,as,bean,name,property,pattern,if,neither,target,object,nor,target,bean,name,nor,property,path,have,been,specified,this,allows,for,concise,bean,definitions,with,just,an,id,name;public,void,set,bean,name,string,bean,name,this,bean,name,string,utils,trim,all,whitespace,bean,factory,utils,original,bean,name,bean,name
PropertyPathFactoryBean -> public void setBeanName(String beanName);1357119239;The bean name of this PropertyPathFactoryBean will be interpreted_as "beanName.property" pattern, if neither "targetObject" nor_"targetBeanName" nor "propertyPath" have been specified._This allows for concise bean definitions with just an id/name.;public void setBeanName(String beanName) {_		this.beanName = StringUtils.trimAllWhitespace(BeanFactoryUtils.originalBeanName(beanName))__	};the,bean,name,of,this,property,path,factory,bean,will,be,interpreted,as,bean,name,property,pattern,if,neither,target,object,nor,target,bean,name,nor,property,path,have,been,specified,this,allows,for,concise,bean,definitions,with,just,an,id,name;public,void,set,bean,name,string,bean,name,this,bean,name,string,utils,trim,all,whitespace,bean,factory,utils,original,bean,name,bean,name
PropertyPathFactoryBean -> @Override 	public boolean isSingleton();1356735495;While this FactoryBean will often be used for singleton targets,_the invoked getters for the property path might return a new object_for each call, so we have to assume that we're not returning the_same object for each {@link #getObject()} call.;@Override_	public boolean isSingleton() {_		return false__	};while,this,factory,bean,will,often,be,used,for,singleton,targets,the,invoked,getters,for,the,property,path,might,return,a,new,object,for,each,call,so,we,have,to,assume,that,we,re,not,returning,the,same,object,for,each,link,get,object,call;override,public,boolean,is,singleton,return,false
PropertyPathFactoryBean -> @Override 	public boolean isSingleton();1368482696;While this FactoryBean will often be used for singleton targets,_the invoked getters for the property path might return a new object_for each call, so we have to assume that we're not returning the_same object for each {@link #getObject()} call.;@Override_	public boolean isSingleton() {_		return false__	};while,this,factory,bean,will,often,be,used,for,singleton,targets,the,invoked,getters,for,the,property,path,might,return,a,new,object,for,each,call,so,we,have,to,assume,that,we,re,not,returning,the,same,object,for,each,link,get,object,call;override,public,boolean,is,singleton,return,false
PropertyPathFactoryBean -> @Override 	public boolean isSingleton();1385412762;While this FactoryBean will often be used for singleton targets,_the invoked getters for the property path might return a new object_for each call, so we have to assume that we're not returning the_same object for each {@link #getObject()} call.;@Override_	public boolean isSingleton() {_		return false__	};while,this,factory,bean,will,often,be,used,for,singleton,targets,the,invoked,getters,for,the,property,path,might,return,a,new,object,for,each,call,so,we,have,to,assume,that,we,re,not,returning,the,same,object,for,each,link,get,object,call;override,public,boolean,is,singleton,return,false
PropertyPathFactoryBean -> @Override 	public boolean isSingleton();1498780456;While this FactoryBean will often be used for singleton targets,_the invoked getters for the property path might return a new object_for each call, so we have to assume that we're not returning the_same object for each {@link #getObject()} call.;@Override_	public boolean isSingleton() {_		return false__	};while,this,factory,bean,will,often,be,used,for,singleton,targets,the,invoked,getters,for,the,property,path,might,return,a,new,object,for,each,call,so,we,have,to,assume,that,we,re,not,returning,the,same,object,for,each,link,get,object,call;override,public,boolean,is,singleton,return,false
PropertyPathFactoryBean -> @Override 	public boolean isSingleton();1502974979;While this FactoryBean will often be used for singleton targets,_the invoked getters for the property path might return a new object_for each call, so we have to assume that we're not returning the_same object for each {@link #getObject()} call.;@Override_	public boolean isSingleton() {_		return false__	};while,this,factory,bean,will,often,be,used,for,singleton,targets,the,invoked,getters,for,the,property,path,might,return,a,new,object,for,each,call,so,we,have,to,assume,that,we,re,not,returning,the,same,object,for,each,link,get,object,call;override,public,boolean,is,singleton,return,false
