commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;@Override public void init() { }
false;public;2;7;;@Override @Nullable public BeanDefinition parse(Element element, ParserContext parserContext) {     parserContext.getReaderContext().error("Class [" + getClass().getName() + "] does not support custom elements.", element).     return null. }
false;public;3;21;;@Override public BeanDefinitionHolder decorate(Node node, BeanDefinitionHolder definition, ParserContext parserContext) {     if (node instanceof Attr) {         Attr attr = (Attr) node.         String propertyName = parserContext.getDelegate().getLocalName(attr).         String propertyValue = attr.getValue().         MutablePropertyValues pvs = definition.getBeanDefinition().getPropertyValues().         if (pvs.contains(propertyName)) {             parserContext.getReaderContext().error("Property '" + propertyName + "' is already defined using " + "both <property> and inline syntax. Only one approach may be used per property.", attr).         }         if (propertyName.endsWith(REF_SUFFIX)) {             propertyName = propertyName.substring(0, propertyName.length() - REF_SUFFIX.length()).             pvs.add(Conventions.attributeNameToPropertyName(propertyName), new RuntimeBeanReference(propertyValue)).         } else {             pvs.add(Conventions.attributeNameToPropertyName(propertyName), propertyValue).         }     }     return definition. }
