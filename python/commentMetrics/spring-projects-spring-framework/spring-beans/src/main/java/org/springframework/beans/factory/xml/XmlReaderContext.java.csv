commented;modifiers;parameterAmount;loc;comment;code
true;public,final;0;3;/**  * Return the XML bean definition reader in use.  */ ;/**  * Return the XML bean definition reader in use.  */ public final XmlBeanDefinitionReader getReader() {     return this.reader. }
true;public,final;0;3;/**  * Return the bean definition registry to use.  * @see XmlBeanDefinitionReader#XmlBeanDefinitionReader(BeanDefinitionRegistry)  */ ;/**  * Return the bean definition registry to use.  * @see XmlBeanDefinitionReader#XmlBeanDefinitionReader(BeanDefinitionRegistry)  */ public final BeanDefinitionRegistry getRegistry() {     return this.reader.getRegistry(). }
true;public,final;0;4;/**  * Return the resource loader to use, if any.  * <p>This will be non-null in regular scenarios,  * also allowing access to the resource class loader.  * @see XmlBeanDefinitionReader#setResourceLoader  * @see ResourceLoader#getClassLoader()  */ ;/**  * Return the resource loader to use, if any.  * <p>This will be non-null in regular scenarios,  * also allowing access to the resource class loader.  * @see XmlBeanDefinitionReader#setResourceLoader  * @see ResourceLoader#getClassLoader()  */ @Nullable public final ResourceLoader getResourceLoader() {     return this.reader.getResourceLoader(). }
true;public,final;0;4;/**  * Return the bean class loader to use, if any.  * <p>Note that this will be null in regular scenarios,  * as an indication to lazily resolve bean classes.  * @see XmlBeanDefinitionReader#setBeanClassLoader  */ ;/**  * Return the bean class loader to use, if any.  * <p>Note that this will be null in regular scenarios,  * as an indication to lazily resolve bean classes.  * @see XmlBeanDefinitionReader#setBeanClassLoader  */ @Nullable public final ClassLoader getBeanClassLoader() {     return this.reader.getBeanClassLoader(). }
true;public,final;0;3;/**  * Return the environment to use.  * @see XmlBeanDefinitionReader#setEnvironment  */ ;/**  * Return the environment to use.  * @see XmlBeanDefinitionReader#setEnvironment  */ public final Environment getEnvironment() {     return this.reader.getEnvironment(). }
true;public,final;0;3;/**  * Return the namespace resolver.  * @see XmlBeanDefinitionReader#setNamespaceHandlerResolver  */ ;/**  * Return the namespace resolver.  * @see XmlBeanDefinitionReader#setNamespaceHandlerResolver  */ public final NamespaceHandlerResolver getNamespaceHandlerResolver() {     return this.namespaceHandlerResolver. }
true;public;1;3;/**  * Call the bean name generator for the given bean definition.  * @see XmlBeanDefinitionReader#getBeanNameGenerator()  * @see org.springframework.beans.factory.support.BeanNameGenerator#generateBeanName  */ ;// Convenience methods to delegate to /**  * Call the bean name generator for the given bean definition.  * @see XmlBeanDefinitionReader#getBeanNameGenerator()  * @see org.springframework.beans.factory.support.BeanNameGenerator#generateBeanName  */ public String generateBeanName(BeanDefinition beanDefinition) {     return this.reader.getBeanNameGenerator().generateBeanName(beanDefinition, getRegistry()). }
true;public;1;5;/**  * Call the bean name generator for the given bean definition  * and register the bean definition under the generated name.  * @see XmlBeanDefinitionReader#getBeanNameGenerator()  * @see org.springframework.beans.factory.support.BeanNameGenerator#generateBeanName  * @see BeanDefinitionRegistry#registerBeanDefinition  */ ;/**  * Call the bean name generator for the given bean definition  * and register the bean definition under the generated name.  * @see XmlBeanDefinitionReader#getBeanNameGenerator()  * @see org.springframework.beans.factory.support.BeanNameGenerator#generateBeanName  * @see BeanDefinitionRegistry#registerBeanDefinition  */ public String registerWithGeneratedName(BeanDefinition beanDefinition) {     String generatedName = generateBeanName(beanDefinition).     getRegistry().registerBeanDefinition(generatedName, beanDefinition).     return generatedName. }
true;public;1;9;/**  * Read an XML document from the given String.  * @see #getReader()  */ ;/**  * Read an XML document from the given String.  * @see #getReader()  */ public Document readDocumentFromString(String documentContent) {     InputSource is = new InputSource(new StringReader(documentContent)).     try {         return this.reader.doLoadDocument(is, getResource()).     } catch (Exception ex) {         throw new BeanDefinitionStoreException("Failed to read XML document", ex).     } }
