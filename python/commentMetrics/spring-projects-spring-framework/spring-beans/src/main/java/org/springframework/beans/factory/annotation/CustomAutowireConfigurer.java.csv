commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setOrder(int order) {     this.order = order. }
false;public;0;4;;@Override public int getOrder() {     return this.order. }
false;public;1;4;;@Override public void setBeanClassLoader(@Nullable ClassLoader beanClassLoader) {     this.beanClassLoader = beanClassLoader. }
true;public;1;3;/**  * Register custom qualifier annotation types to be considered  * when autowiring beans. Each element of the provided set may  * be either a Class instance or a String representation of the  * fully-qualified class name of the custom annotation.  * <p>Note that any annotation that is itself annotated with Spring's  * {@link org.springframework.beans.factory.annotation.Qualifier}  * does not require explicit registration.  * @param customQualifierTypes the custom types to register  */ ;/**  * Register custom qualifier annotation types to be considered  * when autowiring beans. Each element of the provided set may  * be either a Class instance or a String representation of the  * fully-qualified class name of the custom annotation.  * <p>Note that any annotation that is itself annotated with Spring's  * {@link org.springframework.beans.factory.annotation.Qualifier}  * does not require explicit registration.  * @param customQualifierTypes the custom types to register  */ public void setCustomQualifierTypes(Set<?> customQualifierTypes) {     this.customQualifierTypes = customQualifierTypes. }
false;public;1;35;;@Override @SuppressWarnings("unchecked") public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {     if (this.customQualifierTypes != null) {         if (!(beanFactory instanceof DefaultListableBeanFactory)) {             throw new IllegalStateException("CustomAutowireConfigurer needs to operate on a DefaultListableBeanFactory").         }         DefaultListableBeanFactory dlbf = (DefaultListableBeanFactory) beanFactory.         if (!(dlbf.getAutowireCandidateResolver() instanceof QualifierAnnotationAutowireCandidateResolver)) {             dlbf.setAutowireCandidateResolver(new QualifierAnnotationAutowireCandidateResolver()).         }         QualifierAnnotationAutowireCandidateResolver resolver = (QualifierAnnotationAutowireCandidateResolver) dlbf.getAutowireCandidateResolver().         for (Object value : this.customQualifierTypes) {             Class<? extends Annotation> customType = null.             if (value instanceof Class) {                 customType = (Class<? extends Annotation>) value.             } else if (value instanceof String) {                 String className = (String) value.                 customType = (Class<? extends Annotation>) ClassUtils.resolveClassName(className, this.beanClassLoader).             } else {                 throw new IllegalArgumentException("Invalid value [" + value + "] for custom qualifier type: needs to be Class or String.").             }             if (!Annotation.class.isAssignableFrom(customType)) {                 throw new IllegalArgumentException("Qualifier type [" + customType.getName() + "] needs to be annotation type").             }             resolver.addQualifierType(customType).         }     } }
