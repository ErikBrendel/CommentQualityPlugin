# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractBeanDefinition -> @Override 	public void setDependsOn(String... dependsOn);1407511029;Set the names of the beans that this bean depends on being initialized._The bean factory will guarantee that these beans get initialized first._<p>Note that dependencies are normally expressed through bean properties or_constructor arguments. This property should just be necessary for other kinds_of dependencies like statics (*ugh*) or database preparation on startup.;@Override_	public void setDependsOn(String... dependsOn) {_		this.dependsOn = dependsOn__	};set,the,names,of,the,beans,that,this,bean,depends,on,being,initialized,the,bean,factory,will,guarantee,that,these,beans,get,initialized,first,p,note,that,dependencies,are,normally,expressed,through,bean,properties,or,constructor,arguments,this,property,should,just,be,necessary,for,other,kinds,of,dependencies,like,statics,ugh,or,database,preparation,on,startup;override,public,void,set,depends,on,string,depends,on,this,depends,on,depends,on
AbstractBeanDefinition -> @Override 	public void setDependsOn(String... dependsOn);1432135182;Set the names of the beans that this bean depends on being initialized._The bean factory will guarantee that these beans get initialized first._<p>Note that dependencies are normally expressed through bean properties or_constructor arguments. This property should just be necessary for other kinds_of dependencies like statics (*ugh*) or database preparation on startup.;@Override_	public void setDependsOn(String... dependsOn) {_		this.dependsOn = dependsOn__	};set,the,names,of,the,beans,that,this,bean,depends,on,being,initialized,the,bean,factory,will,guarantee,that,these,beans,get,initialized,first,p,note,that,dependencies,are,normally,expressed,through,bean,properties,or,constructor,arguments,this,property,should,just,be,necessary,for,other,kinds,of,dependencies,like,statics,ugh,or,database,preparation,on,startup;override,public,void,set,depends,on,string,depends,on,this,depends,on,depends,on
AbstractBeanDefinition -> @Override 	public void setDependsOn(String... dependsOn);1434204509;Set the names of the beans that this bean depends on being initialized._The bean factory will guarantee that these beans get initialized first._<p>Note that dependencies are normally expressed through bean properties or_constructor arguments. This property should just be necessary for other kinds_of dependencies like statics (*ugh*) or database preparation on startup.;@Override_	public void setDependsOn(String... dependsOn) {_		this.dependsOn = dependsOn__	};set,the,names,of,the,beans,that,this,bean,depends,on,being,initialized,the,bean,factory,will,guarantee,that,these,beans,get,initialized,first,p,note,that,dependencies,are,normally,expressed,through,bean,properties,or,constructor,arguments,this,property,should,just,be,necessary,for,other,kinds,of,dependencies,like,statics,ugh,or,database,preparation,on,startup;override,public,void,set,depends,on,string,depends,on,this,depends,on,depends,on
AbstractBeanDefinition -> @Override 	public void setDependsOn(String... dependsOn);1447323728;Set the names of the beans that this bean depends on being initialized._The bean factory will guarantee that these beans get initialized first._<p>Note that dependencies are normally expressed through bean properties or_constructor arguments. This property should just be necessary for other kinds_of dependencies like statics (*ugh*) or database preparation on startup.;@Override_	public void setDependsOn(String... dependsOn) {_		this.dependsOn = dependsOn__	};set,the,names,of,the,beans,that,this,bean,depends,on,being,initialized,the,bean,factory,will,guarantee,that,these,beans,get,initialized,first,p,note,that,dependencies,are,normally,expressed,through,bean,properties,or,constructor,arguments,this,property,should,just,be,necessary,for,other,kinds,of,dependencies,like,statics,ugh,or,database,preparation,on,startup;override,public,void,set,depends,on,string,depends,on,this,depends,on,depends,on
AbstractBeanDefinition -> @Override 	public void setDependsOn(String... dependsOn);1465226156;Set the names of the beans that this bean depends on being initialized._The bean factory will guarantee that these beans get initialized first._<p>Note that dependencies are normally expressed through bean properties or_constructor arguments. This property should just be necessary for other kinds_of dependencies like statics (*ugh*) or database preparation on startup.;@Override_	public void setDependsOn(String... dependsOn) {_		this.dependsOn = dependsOn__	};set,the,names,of,the,beans,that,this,bean,depends,on,being,initialized,the,bean,factory,will,guarantee,that,these,beans,get,initialized,first,p,note,that,dependencies,are,normally,expressed,through,bean,properties,or,constructor,arguments,this,property,should,just,be,necessary,for,other,kinds,of,dependencies,like,statics,ugh,or,database,preparation,on,startup;override,public,void,set,depends,on,string,depends,on,this,depends,on,depends,on
AbstractBeanDefinition -> @Override 	public void setDependsOn(String... dependsOn);1467730834;Set the names of the beans that this bean depends on being initialized._The bean factory will guarantee that these beans get initialized first._<p>Note that dependencies are normally expressed through bean properties or_constructor arguments. This property should just be necessary for other kinds_of dependencies like statics (*ugh*) or database preparation on startup.;@Override_	public void setDependsOn(String... dependsOn) {_		this.dependsOn = dependsOn__	};set,the,names,of,the,beans,that,this,bean,depends,on,being,initialized,the,bean,factory,will,guarantee,that,these,beans,get,initialized,first,p,note,that,dependencies,are,normally,expressed,through,bean,properties,or,constructor,arguments,this,property,should,just,be,necessary,for,other,kinds,of,dependencies,like,statics,ugh,or,database,preparation,on,startup;override,public,void,set,depends,on,string,depends,on,this,depends,on,depends,on
AbstractBeanDefinition -> @Override 	public void setDependsOn(String... dependsOn);1467846264;Set the names of the beans that this bean depends on being initialized._The bean factory will guarantee that these beans get initialized first._<p>Note that dependencies are normally expressed through bean properties or_constructor arguments. This property should just be necessary for other kinds_of dependencies like statics (*ugh*) or database preparation on startup.;@Override_	public void setDependsOn(String... dependsOn) {_		this.dependsOn = dependsOn__	};set,the,names,of,the,beans,that,this,bean,depends,on,being,initialized,the,bean,factory,will,guarantee,that,these,beans,get,initialized,first,p,note,that,dependencies,are,normally,expressed,through,bean,properties,or,constructor,arguments,this,property,should,just,be,necessary,for,other,kinds,of,dependencies,like,statics,ugh,or,database,preparation,on,startup;override,public,void,set,depends,on,string,depends,on,this,depends,on,depends,on
AbstractBeanDefinition -> @Override 	public void setDependsOn(String... dependsOn);1482091545;Set the names of the beans that this bean depends on being initialized._The bean factory will guarantee that these beans get initialized first._<p>Note that dependencies are normally expressed through bean properties or_constructor arguments. This property should just be necessary for other kinds_of dependencies like statics (*ugh*) or database preparation on startup.;@Override_	public void setDependsOn(String... dependsOn) {_		this.dependsOn = dependsOn__	};set,the,names,of,the,beans,that,this,bean,depends,on,being,initialized,the,bean,factory,will,guarantee,that,these,beans,get,initialized,first,p,note,that,dependencies,are,normally,expressed,through,bean,properties,or,constructor,arguments,this,property,should,just,be,necessary,for,other,kinds,of,dependencies,like,statics,ugh,or,database,preparation,on,startup;override,public,void,set,depends,on,string,depends,on,this,depends,on,depends,on
AbstractBeanDefinition -> @Override 	public void setDependsOn(String... dependsOn);1483093818;Set the names of the beans that this bean depends on being initialized._The bean factory will guarantee that these beans get initialized first._<p>Note that dependencies are normally expressed through bean properties or_constructor arguments. This property should just be necessary for other kinds_of dependencies like statics (*ugh*) or database preparation on startup.;@Override_	public void setDependsOn(String... dependsOn) {_		this.dependsOn = dependsOn__	};set,the,names,of,the,beans,that,this,bean,depends,on,being,initialized,the,bean,factory,will,guarantee,that,these,beans,get,initialized,first,p,note,that,dependencies,are,normally,expressed,through,bean,properties,or,constructor,arguments,this,property,should,just,be,necessary,for,other,kinds,of,dependencies,like,statics,ugh,or,database,preparation,on,startup;override,public,void,set,depends,on,string,depends,on,this,depends,on,depends,on
AbstractBeanDefinition -> @Override 	public void setDependsOn(String... dependsOn);1495868221;Set the names of the beans that this bean depends on being initialized._The bean factory will guarantee that these beans get initialized first._<p>Note that dependencies are normally expressed through bean properties or_constructor arguments. This property should just be necessary for other kinds_of dependencies like statics (*ugh*) or database preparation on startup.;@Override_	public void setDependsOn(String... dependsOn) {_		this.dependsOn = dependsOn__	};set,the,names,of,the,beans,that,this,bean,depends,on,being,initialized,the,bean,factory,will,guarantee,that,these,beans,get,initialized,first,p,note,that,dependencies,are,normally,expressed,through,bean,properties,or,constructor,arguments,this,property,should,just,be,necessary,for,other,kinds,of,dependencies,like,statics,ugh,or,database,preparation,on,startup;override,public,void,set,depends,on,string,depends,on,this,depends,on,depends,on
AbstractBeanDefinition -> public void setSynthetic(boolean synthetic);1328020251;Set whether this bean definition is 'synthetic', that is, not defined_by the application itself (for example, an infrastructure bean such_as a helper for auto-proxying, created through <code>&ltaop:config&gt_</code>).;public void setSynthetic(boolean synthetic) {_		this.synthetic = synthetic__	};set,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself,for,example,an,infrastructure,bean,such,as,a,helper,for,auto,proxying,created,through,code,ltaop,config,gt,code;public,void,set,synthetic,boolean,synthetic,this,synthetic,synthetic
AbstractBeanDefinition -> public void setSynthetic(boolean synthetic);1337202589;Set whether this bean definition is 'synthetic', that is, not defined_by the application itself (for example, an infrastructure bean such_as a helper for auto-proxying, created through <code>&ltaop:config&gt_</code>).;public void setSynthetic(boolean synthetic) {_		this.synthetic = synthetic__	};set,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself,for,example,an,infrastructure,bean,such,as,a,helper,for,auto,proxying,created,through,code,ltaop,config,gt,code;public,void,set,synthetic,boolean,synthetic,this,synthetic,synthetic
AbstractBeanDefinition -> public void setSynthetic(boolean synthetic);1356735495;Set whether this bean definition is 'synthetic', that is, not defined_by the application itself (for example, an infrastructure bean such_as a helper for auto-proxying, created through {@code &ltaop:config&gt_}).;public void setSynthetic(boolean synthetic) {_		this.synthetic = synthetic__	};set,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself,for,example,an,infrastructure,bean,such,as,a,helper,for,auto,proxying,created,through,code,ltaop,config,gt;public,void,set,synthetic,boolean,synthetic,this,synthetic,synthetic
AbstractBeanDefinition -> public void setSynthetic(boolean synthetic);1357119239;Set whether this bean definition is 'synthetic', that is, not defined_by the application itself (for example, an infrastructure bean such_as a helper for auto-proxying, created through {@code &ltaop:config&gt_}).;public void setSynthetic(boolean synthetic) {_		this.synthetic = synthetic__	};set,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself,for,example,an,infrastructure,bean,such,as,a,helper,for,auto,proxying,created,through,code,ltaop,config,gt;public,void,set,synthetic,boolean,synthetic,this,synthetic,synthetic
AbstractBeanDefinition -> public void setSynthetic(boolean synthetic);1367508310;Set whether this bean definition is 'synthetic', that is, not defined_by the application itself (for example, an infrastructure bean such_as a helper for auto-proxying, created through {@code &ltaop:config&gt_}).;public void setSynthetic(boolean synthetic) {_		this.synthetic = synthetic__	};set,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself,for,example,an,infrastructure,bean,such,as,a,helper,for,auto,proxying,created,through,code,ltaop,config,gt;public,void,set,synthetic,boolean,synthetic,this,synthetic,synthetic
AbstractBeanDefinition -> public void setSynthetic(boolean synthetic);1367943112;Set whether this bean definition is 'synthetic', that is, not defined_by the application itself (for example, an infrastructure bean such_as a helper for auto-proxying, created through {@code &ltaop:config&gt_}).;public void setSynthetic(boolean synthetic) {_		this.synthetic = synthetic__	};set,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself,for,example,an,infrastructure,bean,such,as,a,helper,for,auto,proxying,created,through,code,ltaop,config,gt;public,void,set,synthetic,boolean,synthetic,this,synthetic,synthetic
AbstractBeanDefinition -> public void setSynthetic(boolean synthetic);1368482696;Set whether this bean definition is 'synthetic', that is, not defined_by the application itself (for example, an infrastructure bean such_as a helper for auto-proxying, created through {@code &ltaop:config&gt_}).;public void setSynthetic(boolean synthetic) {_		this.synthetic = synthetic__	};set,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself,for,example,an,infrastructure,bean,such,as,a,helper,for,auto,proxying,created,through,code,ltaop,config,gt;public,void,set,synthetic,boolean,synthetic,this,synthetic,synthetic
AbstractBeanDefinition -> public void setSynthetic(boolean synthetic);1385412762;Set whether this bean definition is 'synthetic', that is, not defined_by the application itself (for example, an infrastructure bean such_as a helper for auto-proxying, created through {@code &ltaop:config&gt_}).;public void setSynthetic(boolean synthetic) {_		this.synthetic = synthetic__	};set,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself,for,example,an,infrastructure,bean,such,as,a,helper,for,auto,proxying,created,through,code,ltaop,config,gt;public,void,set,synthetic,boolean,synthetic,this,synthetic,synthetic
AbstractBeanDefinition -> public void setSynthetic(boolean synthetic);1392245317;Set whether this bean definition is 'synthetic', that is, not defined_by the application itself (for example, an infrastructure bean such_as a helper for auto-proxying, created through {@code &ltaop:config&gt_}).;public void setSynthetic(boolean synthetic) {_		this.synthetic = synthetic__	};set,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself,for,example,an,infrastructure,bean,such,as,a,helper,for,auto,proxying,created,through,code,ltaop,config,gt;public,void,set,synthetic,boolean,synthetic,this,synthetic,synthetic
AbstractBeanDefinition -> public void setSynthetic(boolean synthetic);1397163142;Set whether this bean definition is 'synthetic', that is, not defined_by the application itself (for example, an infrastructure bean such_as a helper for auto-proxying, created through {@code &ltaop:config&gt_}).;public void setSynthetic(boolean synthetic) {_		this.synthetic = synthetic__	};set,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself,for,example,an,infrastructure,bean,such,as,a,helper,for,auto,proxying,created,through,code,ltaop,config,gt;public,void,set,synthetic,boolean,synthetic,this,synthetic,synthetic
AbstractBeanDefinition -> public void setSynthetic(boolean synthetic);1398898390;Set whether this bean definition is 'synthetic', that is, not defined_by the application itself (for example, an infrastructure bean such_as a helper for auto-proxying, created through {@code &ltaop:config&gt_}).;public void setSynthetic(boolean synthetic) {_		this.synthetic = synthetic__	};set,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself,for,example,an,infrastructure,bean,such,as,a,helper,for,auto,proxying,created,through,code,ltaop,config,gt;public,void,set,synthetic,boolean,synthetic,this,synthetic,synthetic
AbstractBeanDefinition -> public void setSynthetic(boolean synthetic);1407511029;Set whether this bean definition is 'synthetic', that is, not defined_by the application itself (for example, an infrastructure bean such_as a helper for auto-proxying, created through {@code &ltaop:config&gt_}).;public void setSynthetic(boolean synthetic) {_		this.synthetic = synthetic__	};set,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself,for,example,an,infrastructure,bean,such,as,a,helper,for,auto,proxying,created,through,code,ltaop,config,gt;public,void,set,synthetic,boolean,synthetic,this,synthetic,synthetic
AbstractBeanDefinition -> public void setSynthetic(boolean synthetic);1432135182;Set whether this bean definition is 'synthetic', that is, not defined_by the application itself (for example, an infrastructure bean such_as a helper for auto-proxying, created through {@code &ltaop:config&gt_}).;public void setSynthetic(boolean synthetic) {_		this.synthetic = synthetic__	};set,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself,for,example,an,infrastructure,bean,such,as,a,helper,for,auto,proxying,created,through,code,ltaop,config,gt;public,void,set,synthetic,boolean,synthetic,this,synthetic,synthetic
AbstractBeanDefinition -> public void setSynthetic(boolean synthetic);1434204509;Set whether this bean definition is 'synthetic', that is, not defined_by the application itself (for example, an infrastructure bean such_as a helper for auto-proxying, created through {@code &ltaop:config&gt_}).;public void setSynthetic(boolean synthetic) {_		this.synthetic = synthetic__	};set,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself,for,example,an,infrastructure,bean,such,as,a,helper,for,auto,proxying,created,through,code,ltaop,config,gt;public,void,set,synthetic,boolean,synthetic,this,synthetic,synthetic
AbstractBeanDefinition -> public void setSynthetic(boolean synthetic);1447323728;Set whether this bean definition is 'synthetic', that is, not defined_by the application itself (for example, an infrastructure bean such_as a helper for auto-proxying, created through {@code <aop:config>}).;public void setSynthetic(boolean synthetic) {_		this.synthetic = synthetic__	};set,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself,for,example,an,infrastructure,bean,such,as,a,helper,for,auto,proxying,created,through,code,aop,config;public,void,set,synthetic,boolean,synthetic,this,synthetic,synthetic
AbstractBeanDefinition -> public void setSynthetic(boolean synthetic);1465226156;Set whether this bean definition is 'synthetic', that is, not defined_by the application itself (for example, an infrastructure bean such_as a helper for auto-proxying, created through {@code <aop:config>}).;public void setSynthetic(boolean synthetic) {_		this.synthetic = synthetic__	};set,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself,for,example,an,infrastructure,bean,such,as,a,helper,for,auto,proxying,created,through,code,aop,config;public,void,set,synthetic,boolean,synthetic,this,synthetic,synthetic
AbstractBeanDefinition -> public void setSynthetic(boolean synthetic);1467730834;Set whether this bean definition is 'synthetic', that is, not defined_by the application itself (for example, an infrastructure bean such_as a helper for auto-proxying, created through {@code <aop:config>}).;public void setSynthetic(boolean synthetic) {_		this.synthetic = synthetic__	};set,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself,for,example,an,infrastructure,bean,such,as,a,helper,for,auto,proxying,created,through,code,aop,config;public,void,set,synthetic,boolean,synthetic,this,synthetic,synthetic
AbstractBeanDefinition -> public void setSynthetic(boolean synthetic);1467846264;Set whether this bean definition is 'synthetic', that is, not defined_by the application itself (for example, an infrastructure bean such_as a helper for auto-proxying, created through {@code <aop:config>}).;public void setSynthetic(boolean synthetic) {_		this.synthetic = synthetic__	};set,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself,for,example,an,infrastructure,bean,such,as,a,helper,for,auto,proxying,created,through,code,aop,config;public,void,set,synthetic,boolean,synthetic,this,synthetic,synthetic
AbstractBeanDefinition -> public void setSynthetic(boolean synthetic);1482091545;Set whether this bean definition is 'synthetic', that is, not defined_by the application itself (for example, an infrastructure bean such_as a helper for auto-proxying, created through {@code <aop:config>}).;public void setSynthetic(boolean synthetic) {_		this.synthetic = synthetic__	};set,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself,for,example,an,infrastructure,bean,such,as,a,helper,for,auto,proxying,created,through,code,aop,config;public,void,set,synthetic,boolean,synthetic,this,synthetic,synthetic
AbstractBeanDefinition -> public void setSynthetic(boolean synthetic);1483093818;Set whether this bean definition is 'synthetic', that is, not defined_by the application itself (for example, an infrastructure bean such_as a helper for auto-proxying, created through {@code <aop:config>}).;public void setSynthetic(boolean synthetic) {_		this.synthetic = synthetic__	};set,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself,for,example,an,infrastructure,bean,such,as,a,helper,for,auto,proxying,created,through,code,aop,config;public,void,set,synthetic,boolean,synthetic,this,synthetic,synthetic
AbstractBeanDefinition -> public void setSynthetic(boolean synthetic);1495868221;Set whether this bean definition is 'synthetic', that is, not defined_by the application itself (for example, an infrastructure bean such_as a helper for auto-proxying, created through {@code <aop:config>}).;public void setSynthetic(boolean synthetic) {_		this.synthetic = synthetic__	};set,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself,for,example,an,infrastructure,bean,such,as,a,helper,for,auto,proxying,created,through,code,aop,config;public,void,set,synthetic,boolean,synthetic,this,synthetic,synthetic
AbstractBeanDefinition -> public void setSynthetic(boolean synthetic);1496837955;Set whether this bean definition is 'synthetic', that is, not defined_by the application itself (for example, an infrastructure bean such_as a helper for auto-proxying, created through {@code <aop:config>}).;public void setSynthetic(boolean synthetic) {_		this.synthetic = synthetic__	};set,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself,for,example,an,infrastructure,bean,such,as,a,helper,for,auto,proxying,created,through,code,aop,config;public,void,set,synthetic,boolean,synthetic,this,synthetic,synthetic
AbstractBeanDefinition -> public void setSynthetic(boolean synthetic);1498780456;Set whether this bean definition is 'synthetic', that is, not defined_by the application itself (for example, an infrastructure bean such_as a helper for auto-proxying, created through {@code <aop:config>}).;public void setSynthetic(boolean synthetic) {_		this.synthetic = synthetic__	};set,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself,for,example,an,infrastructure,bean,such,as,a,helper,for,auto,proxying,created,through,code,aop,config;public,void,set,synthetic,boolean,synthetic,this,synthetic,synthetic
AbstractBeanDefinition -> public void setSynthetic(boolean synthetic);1502974979;Set whether this bean definition is 'synthetic', that is, not defined_by the application itself (for example, an infrastructure bean such_as a helper for auto-proxying, created through {@code <aop:config>}).;public void setSynthetic(boolean synthetic) {_		this.synthetic = synthetic__	};set,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself,for,example,an,infrastructure,bean,such,as,a,helper,for,auto,proxying,created,through,code,aop,config;public,void,set,synthetic,boolean,synthetic,this,synthetic,synthetic
AbstractBeanDefinition -> public void setSynthetic(boolean synthetic);1503008029;Set whether this bean definition is 'synthetic', that is, not defined_by the application itself (for example, an infrastructure bean such_as a helper for auto-proxying, created through {@code <aop:config>}).;public void setSynthetic(boolean synthetic) {_		this.synthetic = synthetic__	};set,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself,for,example,an,infrastructure,bean,such,as,a,helper,for,auto,proxying,created,through,code,aop,config;public,void,set,synthetic,boolean,synthetic,this,synthetic,synthetic
AbstractBeanDefinition -> public void setSynthetic(boolean synthetic);1510606271;Set whether this bean definition is 'synthetic', that is, not defined_by the application itself (for example, an infrastructure bean such_as a helper for auto-proxying, created through {@code <aop:config>}).;public void setSynthetic(boolean synthetic) {_		this.synthetic = synthetic__	};set,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself,for,example,an,infrastructure,bean,such,as,a,helper,for,auto,proxying,created,through,code,aop,config;public,void,set,synthetic,boolean,synthetic,this,synthetic,synthetic
AbstractBeanDefinition -> public void setSynthetic(boolean synthetic);1510675876;Set whether this bean definition is 'synthetic', that is, not defined_by the application itself (for example, an infrastructure bean such_as a helper for auto-proxying, created through {@code <aop:config>}).;public void setSynthetic(boolean synthetic) {_		this.synthetic = synthetic__	};set,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself,for,example,an,infrastructure,bean,such,as,a,helper,for,auto,proxying,created,through,code,aop,config;public,void,set,synthetic,boolean,synthetic,this,synthetic,synthetic
AbstractBeanDefinition -> public void setSynthetic(boolean synthetic);1530174524;Set whether this bean definition is 'synthetic', that is, not defined_by the application itself (for example, an infrastructure bean such_as a helper for auto-proxying, created through {@code <aop:config>}).;public void setSynthetic(boolean synthetic) {_		this.synthetic = synthetic__	};set,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself,for,example,an,infrastructure,bean,such,as,a,helper,for,auto,proxying,created,through,code,aop,config;public,void,set,synthetic,boolean,synthetic,this,synthetic,synthetic
AbstractBeanDefinition -> public void setSynthetic(boolean synthetic);1530174524;Set whether this bean definition is 'synthetic', that is, not defined_by the application itself (for example, an infrastructure bean such_as a helper for auto-proxying, created through {@code <aop:config>}).;public void setSynthetic(boolean synthetic) {_		this.synthetic = synthetic__	};set,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself,for,example,an,infrastructure,bean,such,as,a,helper,for,auto,proxying,created,through,code,aop,config;public,void,set,synthetic,boolean,synthetic,this,synthetic,synthetic
AbstractBeanDefinition -> public void setSynthetic(boolean synthetic);1530174524;Set whether this bean definition is 'synthetic', that is, not defined_by the application itself (for example, an infrastructure bean such_as a helper for auto-proxying, created through {@code <aop:config>}).;public void setSynthetic(boolean synthetic) {_		this.synthetic = synthetic__	};set,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself,for,example,an,infrastructure,bean,such,as,a,helper,for,auto,proxying,created,through,code,aop,config;public,void,set,synthetic,boolean,synthetic,this,synthetic,synthetic
AbstractBeanDefinition -> public void setSynthetic(boolean synthetic);1530190293;Set whether this bean definition is 'synthetic', that is, not defined_by the application itself (for example, an infrastructure bean such_as a helper for auto-proxying, created through {@code <aop:config>}).;public void setSynthetic(boolean synthetic) {_		this.synthetic = synthetic__	};set,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself,for,example,an,infrastructure,bean,such,as,a,helper,for,auto,proxying,created,through,code,aop,config;public,void,set,synthetic,boolean,synthetic,this,synthetic,synthetic
AbstractBeanDefinition -> public void setSynthetic(boolean synthetic);1532981251;Set whether this bean definition is 'synthetic', that is, not defined_by the application itself (for example, an infrastructure bean such_as a helper for auto-proxying, created through {@code <aop:config>}).;public void setSynthetic(boolean synthetic) {_		this.synthetic = synthetic__	};set,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself,for,example,an,infrastructure,bean,such,as,a,helper,for,auto,proxying,created,through,code,aop,config;public,void,set,synthetic,boolean,synthetic,this,synthetic,synthetic
AbstractBeanDefinition -> public void setSynthetic(boolean synthetic);1536863076;Set whether this bean definition is 'synthetic', that is, not defined_by the application itself (for example, an infrastructure bean such_as a helper for auto-proxying, created through {@code <aop:config>}).;public void setSynthetic(boolean synthetic) {_		this.synthetic = synthetic__	};set,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself,for,example,an,infrastructure,bean,such,as,a,helper,for,auto,proxying,created,through,code,aop,config;public,void,set,synthetic,boolean,synthetic,this,synthetic,synthetic
AbstractBeanDefinition -> @Override 	public String[] getDependsOn();1356735495;Return the bean names that this bean depends on.;@Override_	public String[] getDependsOn() {_		return this.dependsOn__	};return,the,bean,names,that,this,bean,depends,on;override,public,string,get,depends,on,return,this,depends,on
AbstractBeanDefinition -> @Override 	public String[] getDependsOn();1368482696;Return the bean names that this bean depends on.;@Override_	public String[] getDependsOn() {_		return this.dependsOn__	};return,the,bean,names,that,this,bean,depends,on;override,public,string,get,depends,on,return,this,depends,on
AbstractBeanDefinition -> @Override 	public String[] getDependsOn();1385412762;Return the bean names that this bean depends on.;@Override_	public String[] getDependsOn() {_		return this.dependsOn__	};return,the,bean,names,that,this,bean,depends,on;override,public,string,get,depends,on,return,this,depends,on
AbstractBeanDefinition -> @Override 	public String[] getDependsOn();1392245317;Return the bean names that this bean depends on.;@Override_	public String[] getDependsOn() {_		return this.dependsOn__	};return,the,bean,names,that,this,bean,depends,on;override,public,string,get,depends,on,return,this,depends,on
AbstractBeanDefinition -> @Override 	public String[] getDependsOn();1397163142;Return the bean names that this bean depends on.;@Override_	public String[] getDependsOn() {_		return this.dependsOn__	};return,the,bean,names,that,this,bean,depends,on;override,public,string,get,depends,on,return,this,depends,on
AbstractBeanDefinition -> @Override 	public String[] getDependsOn();1398898390;Return the bean names that this bean depends on.;@Override_	public String[] getDependsOn() {_		return this.dependsOn__	};return,the,bean,names,that,this,bean,depends,on;override,public,string,get,depends,on,return,this,depends,on
AbstractBeanDefinition -> @Override 	public String[] getDependsOn();1407511029;Return the bean names that this bean depends on.;@Override_	public String[] getDependsOn() {_		return this.dependsOn__	};return,the,bean,names,that,this,bean,depends,on;override,public,string,get,depends,on,return,this,depends,on
AbstractBeanDefinition -> @Override 	public String[] getDependsOn();1432135182;Return the bean names that this bean depends on.;@Override_	public String[] getDependsOn() {_		return this.dependsOn__	};return,the,bean,names,that,this,bean,depends,on;override,public,string,get,depends,on,return,this,depends,on
AbstractBeanDefinition -> @Override 	public String[] getDependsOn();1434204509;Return the bean names that this bean depends on.;@Override_	public String[] getDependsOn() {_		return this.dependsOn__	};return,the,bean,names,that,this,bean,depends,on;override,public,string,get,depends,on,return,this,depends,on
AbstractBeanDefinition -> @Override 	public String[] getDependsOn();1447323728;Return the bean names that this bean depends on.;@Override_	public String[] getDependsOn() {_		return this.dependsOn__	};return,the,bean,names,that,this,bean,depends,on;override,public,string,get,depends,on,return,this,depends,on
AbstractBeanDefinition -> @Override 	public String[] getDependsOn();1465226156;Return the bean names that this bean depends on.;@Override_	public String[] getDependsOn() {_		return this.dependsOn__	};return,the,bean,names,that,this,bean,depends,on;override,public,string,get,depends,on,return,this,depends,on
AbstractBeanDefinition -> @Override 	public String[] getDependsOn();1467730834;Return the bean names that this bean depends on.;@Override_	public String[] getDependsOn() {_		return this.dependsOn__	};return,the,bean,names,that,this,bean,depends,on;override,public,string,get,depends,on,return,this,depends,on
AbstractBeanDefinition -> @Override 	public String[] getDependsOn();1467846264;Return the bean names that this bean depends on.;@Override_	public String[] getDependsOn() {_		return this.dependsOn__	};return,the,bean,names,that,this,bean,depends,on;override,public,string,get,depends,on,return,this,depends,on
AbstractBeanDefinition -> @Override 	public String[] getDependsOn();1482091545;Return the bean names that this bean depends on.;@Override_	public String[] getDependsOn() {_		return this.dependsOn__	};return,the,bean,names,that,this,bean,depends,on;override,public,string,get,depends,on,return,this,depends,on
AbstractBeanDefinition -> @Override 	public String[] getDependsOn();1483093818;Return the bean names that this bean depends on.;@Override_	public String[] getDependsOn() {_		return this.dependsOn__	};return,the,bean,names,that,this,bean,depends,on;override,public,string,get,depends,on,return,this,depends,on
AbstractBeanDefinition -> @Override 	public String[] getDependsOn();1495868221;Return the bean names that this bean depends on.;@Override_	public String[] getDependsOn() {_		return this.dependsOn__	};return,the,bean,names,that,this,bean,depends,on;override,public,string,get,depends,on,return,this,depends,on
AbstractBeanDefinition -> @Override 	public String[] getDependsOn();1496837955;Return the bean names that this bean depends on.;@Override_	public String[] getDependsOn() {_		return this.dependsOn__	};return,the,bean,names,that,this,bean,depends,on;override,public,string,get,depends,on,return,this,depends,on
AbstractBeanDefinition -> @Override 	public void setPrimary(boolean primary);1356735495;Set whether this bean is a primary autowire candidate._If this value is true for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public void setPrimary(boolean primary) {_		this.primary = primary__	};set,whether,this,bean,is,a,primary,autowire,candidate,if,this,value,is,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,void,set,primary,boolean,primary,this,primary,primary
AbstractBeanDefinition -> @Override 	public void setPrimary(boolean primary);1368482696;Set whether this bean is a primary autowire candidate._If this value is true for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public void setPrimary(boolean primary) {_		this.primary = primary__	};set,whether,this,bean,is,a,primary,autowire,candidate,if,this,value,is,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,void,set,primary,boolean,primary,this,primary,primary
AbstractBeanDefinition -> @Override 	public void setPrimary(boolean primary);1385412762;Set whether this bean is a primary autowire candidate._If this value is true for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public void setPrimary(boolean primary) {_		this.primary = primary__	};set,whether,this,bean,is,a,primary,autowire,candidate,if,this,value,is,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,void,set,primary,boolean,primary,this,primary,primary
AbstractBeanDefinition -> @Override 	public void setPrimary(boolean primary);1392245317;Set whether this bean is a primary autowire candidate._If this value is true for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public void setPrimary(boolean primary) {_		this.primary = primary__	};set,whether,this,bean,is,a,primary,autowire,candidate,if,this,value,is,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,void,set,primary,boolean,primary,this,primary,primary
AbstractBeanDefinition -> @Override 	public void setPrimary(boolean primary);1397163142;Set whether this bean is a primary autowire candidate._If this value is true for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public void setPrimary(boolean primary) {_		this.primary = primary__	};set,whether,this,bean,is,a,primary,autowire,candidate,if,this,value,is,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,void,set,primary,boolean,primary,this,primary,primary
AbstractBeanDefinition -> @Override 	public void setPrimary(boolean primary);1398898390;Set whether this bean is a primary autowire candidate._If this value is true for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public void setPrimary(boolean primary) {_		this.primary = primary__	};set,whether,this,bean,is,a,primary,autowire,candidate,if,this,value,is,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,void,set,primary,boolean,primary,this,primary,primary
AbstractBeanDefinition -> @Override 	public void setPrimary(boolean primary);1407511029;Set whether this bean is a primary autowire candidate._If this value is true for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public void setPrimary(boolean primary) {_		this.primary = primary__	};set,whether,this,bean,is,a,primary,autowire,candidate,if,this,value,is,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,void,set,primary,boolean,primary,this,primary,primary
AbstractBeanDefinition -> @Override 	public void setPrimary(boolean primary);1432135182;Set whether this bean is a primary autowire candidate._If this value is true for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public void setPrimary(boolean primary) {_		this.primary = primary__	};set,whether,this,bean,is,a,primary,autowire,candidate,if,this,value,is,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,void,set,primary,boolean,primary,this,primary,primary
AbstractBeanDefinition -> @Override 	public void setPrimary(boolean primary);1434204509;Set whether this bean is a primary autowire candidate._If this value is true for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public void setPrimary(boolean primary) {_		this.primary = primary__	};set,whether,this,bean,is,a,primary,autowire,candidate,if,this,value,is,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,void,set,primary,boolean,primary,this,primary,primary
AbstractBeanDefinition -> @Override 	public void setPrimary(boolean primary);1447323728;Set whether this bean is a primary autowire candidate._If this value is true for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public void setPrimary(boolean primary) {_		this.primary = primary__	};set,whether,this,bean,is,a,primary,autowire,candidate,if,this,value,is,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,void,set,primary,boolean,primary,this,primary,primary
AbstractBeanDefinition -> @Override 	public void setPrimary(boolean primary);1465226156;Set whether this bean is a primary autowire candidate._If this value is true for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public void setPrimary(boolean primary) {_		this.primary = primary__	};set,whether,this,bean,is,a,primary,autowire,candidate,if,this,value,is,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,void,set,primary,boolean,primary,this,primary,primary
AbstractBeanDefinition -> @Override 	public void setPrimary(boolean primary);1467730834;Set whether this bean is a primary autowire candidate._If this value is true for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public void setPrimary(boolean primary) {_		this.primary = primary__	};set,whether,this,bean,is,a,primary,autowire,candidate,if,this,value,is,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,void,set,primary,boolean,primary,this,primary,primary
AbstractBeanDefinition -> @Override 	public void setPrimary(boolean primary);1467846264;Set whether this bean is a primary autowire candidate._If this value is true for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public void setPrimary(boolean primary) {_		this.primary = primary__	};set,whether,this,bean,is,a,primary,autowire,candidate,if,this,value,is,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,void,set,primary,boolean,primary,this,primary,primary
AbstractBeanDefinition -> @Override 	public void setPrimary(boolean primary);1482091545;Set whether this bean is a primary autowire candidate._If this value is true for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public void setPrimary(boolean primary) {_		this.primary = primary__	};set,whether,this,bean,is,a,primary,autowire,candidate,if,this,value,is,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,void,set,primary,boolean,primary,this,primary,primary
AbstractBeanDefinition -> @Override 	public void setPrimary(boolean primary);1483093818;Set whether this bean is a primary autowire candidate._<p>If this value is {@code true} for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public void setPrimary(boolean primary) {_		this.primary = primary__	};set,whether,this,bean,is,a,primary,autowire,candidate,p,if,this,value,is,code,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,void,set,primary,boolean,primary,this,primary,primary
AbstractBeanDefinition -> @Override 	public void setPrimary(boolean primary);1495868221;Set whether this bean is a primary autowire candidate._<p>If this value is {@code true} for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public void setPrimary(boolean primary) {_		this.primary = primary__	};set,whether,this,bean,is,a,primary,autowire,candidate,p,if,this,value,is,code,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,void,set,primary,boolean,primary,this,primary,primary
AbstractBeanDefinition -> @Override 	public void setPrimary(boolean primary);1496837955;Set whether this bean is a primary autowire candidate._<p>If this value is {@code true} for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public void setPrimary(boolean primary) {_		this.primary = primary__	};set,whether,this,bean,is,a,primary,autowire,candidate,p,if,this,value,is,code,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,void,set,primary,boolean,primary,this,primary,primary
AbstractBeanDefinition -> @Override 	public void setPrimary(boolean primary);1498780456;Set whether this bean is a primary autowire candidate._<p>If this value is {@code true} for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public void setPrimary(boolean primary) {_		this.primary = primary__	};set,whether,this,bean,is,a,primary,autowire,candidate,p,if,this,value,is,code,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,void,set,primary,boolean,primary,this,primary,primary
AbstractBeanDefinition -> @Override 	public void setPrimary(boolean primary);1502974979;Set whether this bean is a primary autowire candidate._<p>If this value is {@code true} for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public void setPrimary(boolean primary) {_		this.primary = primary__	};set,whether,this,bean,is,a,primary,autowire,candidate,p,if,this,value,is,code,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,void,set,primary,boolean,primary,this,primary,primary
AbstractBeanDefinition -> @Override 	public void setPrimary(boolean primary);1503008029;Set whether this bean is a primary autowire candidate._<p>If this value is {@code true} for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public void setPrimary(boolean primary) {_		this.primary = primary__	};set,whether,this,bean,is,a,primary,autowire,candidate,p,if,this,value,is,code,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,void,set,primary,boolean,primary,this,primary,primary
AbstractBeanDefinition -> @Override 	public void setPrimary(boolean primary);1510606271;Set whether this bean is a primary autowire candidate._<p>If this value is {@code true} for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public void setPrimary(boolean primary) {_		this.primary = primary__	};set,whether,this,bean,is,a,primary,autowire,candidate,p,if,this,value,is,code,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,void,set,primary,boolean,primary,this,primary,primary
AbstractBeanDefinition -> @Override 	public void setPrimary(boolean primary);1510675876;Set whether this bean is a primary autowire candidate._<p>If this value is {@code true} for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public void setPrimary(boolean primary) {_		this.primary = primary__	};set,whether,this,bean,is,a,primary,autowire,candidate,p,if,this,value,is,code,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,void,set,primary,boolean,primary,this,primary,primary
AbstractBeanDefinition -> @Override 	public void setPrimary(boolean primary);1530174524;Set whether this bean is a primary autowire candidate._<p>If this value is {@code true} for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public void setPrimary(boolean primary) {_		this.primary = primary__	};set,whether,this,bean,is,a,primary,autowire,candidate,p,if,this,value,is,code,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,void,set,primary,boolean,primary,this,primary,primary
AbstractBeanDefinition -> @Override 	public void setPrimary(boolean primary);1530174524;Set whether this bean is a primary autowire candidate._<p>If this value is {@code true} for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public void setPrimary(boolean primary) {_		this.primary = primary__	};set,whether,this,bean,is,a,primary,autowire,candidate,p,if,this,value,is,code,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,void,set,primary,boolean,primary,this,primary,primary
AbstractBeanDefinition -> @Override 	public void setPrimary(boolean primary);1530174524;Set whether this bean is a primary autowire candidate._<p>If this value is {@code true} for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public void setPrimary(boolean primary) {_		this.primary = primary__	};set,whether,this,bean,is,a,primary,autowire,candidate,p,if,this,value,is,code,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,void,set,primary,boolean,primary,this,primary,primary
AbstractBeanDefinition -> @Override 	public void setPrimary(boolean primary);1530190293;Set whether this bean is a primary autowire candidate._<p>If this value is {@code true} for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public void setPrimary(boolean primary) {_		this.primary = primary__	};set,whether,this,bean,is,a,primary,autowire,candidate,p,if,this,value,is,code,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,void,set,primary,boolean,primary,this,primary,primary
AbstractBeanDefinition -> @Override 	public void setPrimary(boolean primary);1532981251;Set whether this bean is a primary autowire candidate._<p>If this value is {@code true} for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public void setPrimary(boolean primary) {_		this.primary = primary__	};set,whether,this,bean,is,a,primary,autowire,candidate,p,if,this,value,is,code,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,void,set,primary,boolean,primary,this,primary,primary
AbstractBeanDefinition -> @Override 	public void setPrimary(boolean primary);1536863076;Set whether this bean is a primary autowire candidate._<p>If this value is {@code true} for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public void setPrimary(boolean primary) {_		this.primary = primary__	};set,whether,this,bean,is,a,primary,autowire,candidate,p,if,this,value,is,code,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,void,set,primary,boolean,primary,this,primary,primary
AbstractBeanDefinition -> @Override 	public void setAutowireCandidate(boolean autowireCandidate);1356735495;Set whether this bean is a candidate for getting autowired into some other bean.;@Override_	public void setAutowireCandidate(boolean autowireCandidate) {_		this.autowireCandidate = autowireCandidate__	};set,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,void,set,autowire,candidate,boolean,autowire,candidate,this,autowire,candidate,autowire,candidate
AbstractBeanDefinition -> @Override 	public void setAutowireCandidate(boolean autowireCandidate);1368482696;Set whether this bean is a candidate for getting autowired into some other bean.;@Override_	public void setAutowireCandidate(boolean autowireCandidate) {_		this.autowireCandidate = autowireCandidate__	};set,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,void,set,autowire,candidate,boolean,autowire,candidate,this,autowire,candidate,autowire,candidate
AbstractBeanDefinition -> @Override 	public void setAutowireCandidate(boolean autowireCandidate);1385412762;Set whether this bean is a candidate for getting autowired into some other bean.;@Override_	public void setAutowireCandidate(boolean autowireCandidate) {_		this.autowireCandidate = autowireCandidate__	};set,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,void,set,autowire,candidate,boolean,autowire,candidate,this,autowire,candidate,autowire,candidate
AbstractBeanDefinition -> @Override 	public void setAutowireCandidate(boolean autowireCandidate);1392245317;Set whether this bean is a candidate for getting autowired into some other bean.;@Override_	public void setAutowireCandidate(boolean autowireCandidate) {_		this.autowireCandidate = autowireCandidate__	};set,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,void,set,autowire,candidate,boolean,autowire,candidate,this,autowire,candidate,autowire,candidate
AbstractBeanDefinition -> @Override 	public void setAutowireCandidate(boolean autowireCandidate);1397163142;Set whether this bean is a candidate for getting autowired into some other bean.;@Override_	public void setAutowireCandidate(boolean autowireCandidate) {_		this.autowireCandidate = autowireCandidate__	};set,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,void,set,autowire,candidate,boolean,autowire,candidate,this,autowire,candidate,autowire,candidate
AbstractBeanDefinition -> @Override 	public void setAutowireCandidate(boolean autowireCandidate);1398898390;Set whether this bean is a candidate for getting autowired into some other bean.;@Override_	public void setAutowireCandidate(boolean autowireCandidate) {_		this.autowireCandidate = autowireCandidate__	};set,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,void,set,autowire,candidate,boolean,autowire,candidate,this,autowire,candidate,autowire,candidate
AbstractBeanDefinition -> @Override 	public void setAutowireCandidate(boolean autowireCandidate);1407511029;Set whether this bean is a candidate for getting autowired into some other bean.;@Override_	public void setAutowireCandidate(boolean autowireCandidate) {_		this.autowireCandidate = autowireCandidate__	};set,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,void,set,autowire,candidate,boolean,autowire,candidate,this,autowire,candidate,autowire,candidate
AbstractBeanDefinition -> @Override 	public void setAutowireCandidate(boolean autowireCandidate);1432135182;Set whether this bean is a candidate for getting autowired into some other bean.;@Override_	public void setAutowireCandidate(boolean autowireCandidate) {_		this.autowireCandidate = autowireCandidate__	};set,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,void,set,autowire,candidate,boolean,autowire,candidate,this,autowire,candidate,autowire,candidate
AbstractBeanDefinition -> @Override 	public void setAutowireCandidate(boolean autowireCandidate);1434204509;Set whether this bean is a candidate for getting autowired into some other bean.;@Override_	public void setAutowireCandidate(boolean autowireCandidate) {_		this.autowireCandidate = autowireCandidate__	};set,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,void,set,autowire,candidate,boolean,autowire,candidate,this,autowire,candidate,autowire,candidate
AbstractBeanDefinition -> @Override 	public void setAutowireCandidate(boolean autowireCandidate);1447323728;Set whether this bean is a candidate for getting autowired into some other bean.;@Override_	public void setAutowireCandidate(boolean autowireCandidate) {_		this.autowireCandidate = autowireCandidate__	};set,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,void,set,autowire,candidate,boolean,autowire,candidate,this,autowire,candidate,autowire,candidate
AbstractBeanDefinition -> @Override 	public void setAutowireCandidate(boolean autowireCandidate);1465226156;Set whether this bean is a candidate for getting autowired into some other bean.;@Override_	public void setAutowireCandidate(boolean autowireCandidate) {_		this.autowireCandidate = autowireCandidate__	};set,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,void,set,autowire,candidate,boolean,autowire,candidate,this,autowire,candidate,autowire,candidate
AbstractBeanDefinition -> @Override 	public void setAutowireCandidate(boolean autowireCandidate);1467730834;Set whether this bean is a candidate for getting autowired into some other bean.;@Override_	public void setAutowireCandidate(boolean autowireCandidate) {_		this.autowireCandidate = autowireCandidate__	};set,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,void,set,autowire,candidate,boolean,autowire,candidate,this,autowire,candidate,autowire,candidate
AbstractBeanDefinition -> @Override 	public void setAutowireCandidate(boolean autowireCandidate);1467846264;Set whether this bean is a candidate for getting autowired into some other bean.;@Override_	public void setAutowireCandidate(boolean autowireCandidate) {_		this.autowireCandidate = autowireCandidate__	};set,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,void,set,autowire,candidate,boolean,autowire,candidate,this,autowire,candidate,autowire,candidate
AbstractBeanDefinition -> @Override 	public void setAutowireCandidate(boolean autowireCandidate);1482091545;Set whether this bean is a candidate for getting autowired into some other bean.;@Override_	public void setAutowireCandidate(boolean autowireCandidate) {_		this.autowireCandidate = autowireCandidate__	};set,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,void,set,autowire,candidate,boolean,autowire,candidate,this,autowire,candidate,autowire,candidate
AbstractBeanDefinition -> @Override 	public void setAutowireCandidate(boolean autowireCandidate);1483093818;Set whether this bean is a candidate for getting autowired into some other bean._<p>Note that this flag is designed to only affect type-based autowiring._It does not affect explicit references by name, which will get resolved even_if the specified bean is not marked as an autowire candidate. As a consequence,_autowiring by name will nevertheless inject a bean if the name matches._@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_BY_NAME;@Override_	public void setAutowireCandidate(boolean autowireCandidate) {_		this.autowireCandidate = autowireCandidate__	};set,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean,p,note,that,this,flag,is,designed,to,only,affect,type,based,autowiring,it,does,not,affect,explicit,references,by,name,which,will,get,resolved,even,if,the,specified,bean,is,not,marked,as,an,autowire,candidate,as,a,consequence,autowiring,by,name,will,nevertheless,inject,a,bean,if,the,name,matches,see,see;override,public,void,set,autowire,candidate,boolean,autowire,candidate,this,autowire,candidate,autowire,candidate
AbstractBeanDefinition -> @Override 	public void setAutowireCandidate(boolean autowireCandidate);1495868221;Set whether this bean is a candidate for getting autowired into some other bean._<p>Note that this flag is designed to only affect type-based autowiring._It does not affect explicit references by name, which will get resolved even_if the specified bean is not marked as an autowire candidate. As a consequence,_autowiring by name will nevertheless inject a bean if the name matches._@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_BY_NAME;@Override_	public void setAutowireCandidate(boolean autowireCandidate) {_		this.autowireCandidate = autowireCandidate__	};set,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean,p,note,that,this,flag,is,designed,to,only,affect,type,based,autowiring,it,does,not,affect,explicit,references,by,name,which,will,get,resolved,even,if,the,specified,bean,is,not,marked,as,an,autowire,candidate,as,a,consequence,autowiring,by,name,will,nevertheless,inject,a,bean,if,the,name,matches,see,see;override,public,void,set,autowire,candidate,boolean,autowire,candidate,this,autowire,candidate,autowire,candidate
AbstractBeanDefinition -> @Override 	public void setAutowireCandidate(boolean autowireCandidate);1496837955;Set whether this bean is a candidate for getting autowired into some other bean._<p>Note that this flag is designed to only affect type-based autowiring._It does not affect explicit references by name, which will get resolved even_if the specified bean is not marked as an autowire candidate. As a consequence,_autowiring by name will nevertheless inject a bean if the name matches._@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_BY_NAME;@Override_	public void setAutowireCandidate(boolean autowireCandidate) {_		this.autowireCandidate = autowireCandidate__	};set,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean,p,note,that,this,flag,is,designed,to,only,affect,type,based,autowiring,it,does,not,affect,explicit,references,by,name,which,will,get,resolved,even,if,the,specified,bean,is,not,marked,as,an,autowire,candidate,as,a,consequence,autowiring,by,name,will,nevertheless,inject,a,bean,if,the,name,matches,see,see;override,public,void,set,autowire,candidate,boolean,autowire,candidate,this,autowire,candidate,autowire,candidate
AbstractBeanDefinition -> @Override 	public void setAutowireCandidate(boolean autowireCandidate);1498780456;Set whether this bean is a candidate for getting autowired into some other bean._<p>Note that this flag is designed to only affect type-based autowiring._It does not affect explicit references by name, which will get resolved even_if the specified bean is not marked as an autowire candidate. As a consequence,_autowiring by name will nevertheless inject a bean if the name matches._@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_BY_NAME;@Override_	public void setAutowireCandidate(boolean autowireCandidate) {_		this.autowireCandidate = autowireCandidate__	};set,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean,p,note,that,this,flag,is,designed,to,only,affect,type,based,autowiring,it,does,not,affect,explicit,references,by,name,which,will,get,resolved,even,if,the,specified,bean,is,not,marked,as,an,autowire,candidate,as,a,consequence,autowiring,by,name,will,nevertheless,inject,a,bean,if,the,name,matches,see,see;override,public,void,set,autowire,candidate,boolean,autowire,candidate,this,autowire,candidate,autowire,candidate
AbstractBeanDefinition -> @Override 	public void setAutowireCandidate(boolean autowireCandidate);1502974979;Set whether this bean is a candidate for getting autowired into some other bean._<p>Note that this flag is designed to only affect type-based autowiring._It does not affect explicit references by name, which will get resolved even_if the specified bean is not marked as an autowire candidate. As a consequence,_autowiring by name will nevertheless inject a bean if the name matches._@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_BY_NAME;@Override_	public void setAutowireCandidate(boolean autowireCandidate) {_		this.autowireCandidate = autowireCandidate__	};set,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean,p,note,that,this,flag,is,designed,to,only,affect,type,based,autowiring,it,does,not,affect,explicit,references,by,name,which,will,get,resolved,even,if,the,specified,bean,is,not,marked,as,an,autowire,candidate,as,a,consequence,autowiring,by,name,will,nevertheless,inject,a,bean,if,the,name,matches,see,see;override,public,void,set,autowire,candidate,boolean,autowire,candidate,this,autowire,candidate,autowire,candidate
AbstractBeanDefinition -> @Override 	public void setAutowireCandidate(boolean autowireCandidate);1503008029;Set whether this bean is a candidate for getting autowired into some other bean._<p>Note that this flag is designed to only affect type-based autowiring._It does not affect explicit references by name, which will get resolved even_if the specified bean is not marked as an autowire candidate. As a consequence,_autowiring by name will nevertheless inject a bean if the name matches._@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_BY_NAME;@Override_	public void setAutowireCandidate(boolean autowireCandidate) {_		this.autowireCandidate = autowireCandidate__	};set,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean,p,note,that,this,flag,is,designed,to,only,affect,type,based,autowiring,it,does,not,affect,explicit,references,by,name,which,will,get,resolved,even,if,the,specified,bean,is,not,marked,as,an,autowire,candidate,as,a,consequence,autowiring,by,name,will,nevertheless,inject,a,bean,if,the,name,matches,see,see;override,public,void,set,autowire,candidate,boolean,autowire,candidate,this,autowire,candidate,autowire,candidate
AbstractBeanDefinition -> @Override 	public void setAutowireCandidate(boolean autowireCandidate);1510606271;Set whether this bean is a candidate for getting autowired into some other bean._<p>Note that this flag is designed to only affect type-based autowiring._It does not affect explicit references by name, which will get resolved even_if the specified bean is not marked as an autowire candidate. As a consequence,_autowiring by name will nevertheless inject a bean if the name matches._@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_BY_NAME;@Override_	public void setAutowireCandidate(boolean autowireCandidate) {_		this.autowireCandidate = autowireCandidate__	};set,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean,p,note,that,this,flag,is,designed,to,only,affect,type,based,autowiring,it,does,not,affect,explicit,references,by,name,which,will,get,resolved,even,if,the,specified,bean,is,not,marked,as,an,autowire,candidate,as,a,consequence,autowiring,by,name,will,nevertheless,inject,a,bean,if,the,name,matches,see,see;override,public,void,set,autowire,candidate,boolean,autowire,candidate,this,autowire,candidate,autowire,candidate
AbstractBeanDefinition -> @Override 	public void setAutowireCandidate(boolean autowireCandidate);1510675876;Set whether this bean is a candidate for getting autowired into some other bean._<p>Note that this flag is designed to only affect type-based autowiring._It does not affect explicit references by name, which will get resolved even_if the specified bean is not marked as an autowire candidate. As a consequence,_autowiring by name will nevertheless inject a bean if the name matches._@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_BY_NAME;@Override_	public void setAutowireCandidate(boolean autowireCandidate) {_		this.autowireCandidate = autowireCandidate__	};set,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean,p,note,that,this,flag,is,designed,to,only,affect,type,based,autowiring,it,does,not,affect,explicit,references,by,name,which,will,get,resolved,even,if,the,specified,bean,is,not,marked,as,an,autowire,candidate,as,a,consequence,autowiring,by,name,will,nevertheless,inject,a,bean,if,the,name,matches,see,see;override,public,void,set,autowire,candidate,boolean,autowire,candidate,this,autowire,candidate,autowire,candidate
AbstractBeanDefinition -> @Override 	public void setAutowireCandidate(boolean autowireCandidate);1530174524;Set whether this bean is a candidate for getting autowired into some other bean._<p>Note that this flag is designed to only affect type-based autowiring._It does not affect explicit references by name, which will get resolved even_if the specified bean is not marked as an autowire candidate. As a consequence,_autowiring by name will nevertheless inject a bean if the name matches._@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_BY_NAME;@Override_	public void setAutowireCandidate(boolean autowireCandidate) {_		this.autowireCandidate = autowireCandidate__	};set,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean,p,note,that,this,flag,is,designed,to,only,affect,type,based,autowiring,it,does,not,affect,explicit,references,by,name,which,will,get,resolved,even,if,the,specified,bean,is,not,marked,as,an,autowire,candidate,as,a,consequence,autowiring,by,name,will,nevertheless,inject,a,bean,if,the,name,matches,see,see;override,public,void,set,autowire,candidate,boolean,autowire,candidate,this,autowire,candidate,autowire,candidate
AbstractBeanDefinition -> @Override 	public void setAutowireCandidate(boolean autowireCandidate);1530174524;Set whether this bean is a candidate for getting autowired into some other bean._<p>Note that this flag is designed to only affect type-based autowiring._It does not affect explicit references by name, which will get resolved even_if the specified bean is not marked as an autowire candidate. As a consequence,_autowiring by name will nevertheless inject a bean if the name matches._@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_BY_NAME;@Override_	public void setAutowireCandidate(boolean autowireCandidate) {_		this.autowireCandidate = autowireCandidate__	};set,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean,p,note,that,this,flag,is,designed,to,only,affect,type,based,autowiring,it,does,not,affect,explicit,references,by,name,which,will,get,resolved,even,if,the,specified,bean,is,not,marked,as,an,autowire,candidate,as,a,consequence,autowiring,by,name,will,nevertheless,inject,a,bean,if,the,name,matches,see,see;override,public,void,set,autowire,candidate,boolean,autowire,candidate,this,autowire,candidate,autowire,candidate
AbstractBeanDefinition -> @Override 	public void setAutowireCandidate(boolean autowireCandidate);1530174524;Set whether this bean is a candidate for getting autowired into some other bean._<p>Note that this flag is designed to only affect type-based autowiring._It does not affect explicit references by name, which will get resolved even_if the specified bean is not marked as an autowire candidate. As a consequence,_autowiring by name will nevertheless inject a bean if the name matches._@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_BY_NAME;@Override_	public void setAutowireCandidate(boolean autowireCandidate) {_		this.autowireCandidate = autowireCandidate__	};set,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean,p,note,that,this,flag,is,designed,to,only,affect,type,based,autowiring,it,does,not,affect,explicit,references,by,name,which,will,get,resolved,even,if,the,specified,bean,is,not,marked,as,an,autowire,candidate,as,a,consequence,autowiring,by,name,will,nevertheless,inject,a,bean,if,the,name,matches,see,see;override,public,void,set,autowire,candidate,boolean,autowire,candidate,this,autowire,candidate,autowire,candidate
AbstractBeanDefinition -> @Override 	public void setAutowireCandidate(boolean autowireCandidate);1530190293;Set whether this bean is a candidate for getting autowired into some other bean._<p>Note that this flag is designed to only affect type-based autowiring._It does not affect explicit references by name, which will get resolved even_if the specified bean is not marked as an autowire candidate. As a consequence,_autowiring by name will nevertheless inject a bean if the name matches._@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_BY_NAME;@Override_	public void setAutowireCandidate(boolean autowireCandidate) {_		this.autowireCandidate = autowireCandidate__	};set,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean,p,note,that,this,flag,is,designed,to,only,affect,type,based,autowiring,it,does,not,affect,explicit,references,by,name,which,will,get,resolved,even,if,the,specified,bean,is,not,marked,as,an,autowire,candidate,as,a,consequence,autowiring,by,name,will,nevertheless,inject,a,bean,if,the,name,matches,see,see;override,public,void,set,autowire,candidate,boolean,autowire,candidate,this,autowire,candidate,autowire,candidate
AbstractBeanDefinition -> @Override 	public void setAutowireCandidate(boolean autowireCandidate);1532981251;Set whether this bean is a candidate for getting autowired into some other bean._<p>Note that this flag is designed to only affect type-based autowiring._It does not affect explicit references by name, which will get resolved even_if the specified bean is not marked as an autowire candidate. As a consequence,_autowiring by name will nevertheless inject a bean if the name matches._@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_BY_NAME;@Override_	public void setAutowireCandidate(boolean autowireCandidate) {_		this.autowireCandidate = autowireCandidate__	};set,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean,p,note,that,this,flag,is,designed,to,only,affect,type,based,autowiring,it,does,not,affect,explicit,references,by,name,which,will,get,resolved,even,if,the,specified,bean,is,not,marked,as,an,autowire,candidate,as,a,consequence,autowiring,by,name,will,nevertheless,inject,a,bean,if,the,name,matches,see,see;override,public,void,set,autowire,candidate,boolean,autowire,candidate,this,autowire,candidate,autowire,candidate
AbstractBeanDefinition -> @Override 	public void setAutowireCandidate(boolean autowireCandidate);1536863076;Set whether this bean is a candidate for getting autowired into some other bean._<p>Note that this flag is designed to only affect type-based autowiring._It does not affect explicit references by name, which will get resolved even_if the specified bean is not marked as an autowire candidate. As a consequence,_autowiring by name will nevertheless inject a bean if the name matches._@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_BY_NAME;@Override_	public void setAutowireCandidate(boolean autowireCandidate) {_		this.autowireCandidate = autowireCandidate__	};set,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean,p,note,that,this,flag,is,designed,to,only,affect,type,based,autowiring,it,does,not,affect,explicit,references,by,name,which,will,get,resolved,even,if,the,specified,bean,is,not,marked,as,an,autowire,candidate,as,a,consequence,autowiring,by,name,will,nevertheless,inject,a,bean,if,the,name,matches,see,see;override,public,void,set,autowire,candidate,boolean,autowire,candidate,this,autowire,candidate,autowire,candidate
AbstractBeanDefinition -> @Override 	@Nullable 	public String[] getDependsOn();1498780456;Return the bean names that this bean depends on.;@Override_	@Nullable_	public String[] getDependsOn() {_		return this.dependsOn__	};return,the,bean,names,that,this,bean,depends,on;override,nullable,public,string,get,depends,on,return,this,depends,on
AbstractBeanDefinition -> @Override 	@Nullable 	public String[] getDependsOn();1502974979;Return the bean names that this bean depends on.;@Override_	@Nullable_	public String[] getDependsOn() {_		return this.dependsOn__	};return,the,bean,names,that,this,bean,depends,on;override,nullable,public,string,get,depends,on,return,this,depends,on
AbstractBeanDefinition -> @Override 	@Nullable 	public String[] getDependsOn();1503008029;Return the bean names that this bean depends on.;@Override_	@Nullable_	public String[] getDependsOn() {_		return this.dependsOn__	};return,the,bean,names,that,this,bean,depends,on;override,nullable,public,string,get,depends,on,return,this,depends,on
AbstractBeanDefinition -> @Override 	@Nullable 	public String[] getDependsOn();1510606271;Return the bean names that this bean depends on.;@Override_	@Nullable_	public String[] getDependsOn() {_		return this.dependsOn__	};return,the,bean,names,that,this,bean,depends,on;override,nullable,public,string,get,depends,on,return,this,depends,on
AbstractBeanDefinition -> @Override 	@Nullable 	public String[] getDependsOn();1510675876;Return the bean names that this bean depends on.;@Override_	@Nullable_	public String[] getDependsOn() {_		return this.dependsOn__	};return,the,bean,names,that,this,bean,depends,on;override,nullable,public,string,get,depends,on,return,this,depends,on
AbstractBeanDefinition -> @Override 	@Nullable 	public String[] getDependsOn();1530174524;Return the bean names that this bean depends on.;@Override_	@Nullable_	public String[] getDependsOn() {_		return this.dependsOn__	};return,the,bean,names,that,this,bean,depends,on;override,nullable,public,string,get,depends,on,return,this,depends,on
AbstractBeanDefinition -> @Override 	@Nullable 	public String[] getDependsOn();1530174524;Return the bean names that this bean depends on.;@Override_	@Nullable_	public String[] getDependsOn() {_		return this.dependsOn__	};return,the,bean,names,that,this,bean,depends,on;override,nullable,public,string,get,depends,on,return,this,depends,on
AbstractBeanDefinition -> @Override 	@Nullable 	public String[] getDependsOn();1530174524;Return the bean names that this bean depends on.;@Override_	@Nullable_	public String[] getDependsOn() {_		return this.dependsOn__	};return,the,bean,names,that,this,bean,depends,on;override,nullable,public,string,get,depends,on,return,this,depends,on
AbstractBeanDefinition -> @Override 	@Nullable 	public String[] getDependsOn();1530190293;Return the bean names that this bean depends on.;@Override_	@Nullable_	public String[] getDependsOn() {_		return this.dependsOn__	};return,the,bean,names,that,this,bean,depends,on;override,nullable,public,string,get,depends,on,return,this,depends,on
AbstractBeanDefinition -> @Override 	@Nullable 	public String[] getDependsOn();1532981251;Return the bean names that this bean depends on.;@Override_	@Nullable_	public String[] getDependsOn() {_		return this.dependsOn__	};return,the,bean,names,that,this,bean,depends,on;override,nullable,public,string,get,depends,on,return,this,depends,on
AbstractBeanDefinition -> @Override 	@Nullable 	public String[] getDependsOn();1536863076;Return the bean names that this bean depends on.;@Override_	@Nullable_	public String[] getDependsOn() {_		return this.dependsOn__	};return,the,bean,names,that,this,bean,depends,on;override,nullable,public,string,get,depends,on,return,this,depends,on
AbstractBeanDefinition -> public boolean isEnforceDestroyMethod();1328020251;Indicate whether the configured destroy method is the default._@see #getDestroyMethodName;public boolean isEnforceDestroyMethod() {_		return this.enforceDestroyMethod__	};indicate,whether,the,configured,destroy,method,is,the,default,see,get,destroy,method,name;public,boolean,is,enforce,destroy,method,return,this,enforce,destroy,method
AbstractBeanDefinition -> public boolean isEnforceDestroyMethod();1337202589;Indicate whether the configured destroy method is the default._@see #getDestroyMethodName;public boolean isEnforceDestroyMethod() {_		return this.enforceDestroyMethod__	};indicate,whether,the,configured,destroy,method,is,the,default,see,get,destroy,method,name;public,boolean,is,enforce,destroy,method,return,this,enforce,destroy,method
AbstractBeanDefinition -> public boolean isEnforceDestroyMethod();1356735495;Indicate whether the configured destroy method is the default._@see #getDestroyMethodName;public boolean isEnforceDestroyMethod() {_		return this.enforceDestroyMethod__	};indicate,whether,the,configured,destroy,method,is,the,default,see,get,destroy,method,name;public,boolean,is,enforce,destroy,method,return,this,enforce,destroy,method
AbstractBeanDefinition -> public boolean isEnforceDestroyMethod();1357119239;Indicate whether the configured destroy method is the default._@see #getDestroyMethodName;public boolean isEnforceDestroyMethod() {_		return this.enforceDestroyMethod__	};indicate,whether,the,configured,destroy,method,is,the,default,see,get,destroy,method,name;public,boolean,is,enforce,destroy,method,return,this,enforce,destroy,method
AbstractBeanDefinition -> public boolean isEnforceDestroyMethod();1367508310;Indicate whether the configured destroy method is the default._@see #getDestroyMethodName;public boolean isEnforceDestroyMethod() {_		return this.enforceDestroyMethod__	};indicate,whether,the,configured,destroy,method,is,the,default,see,get,destroy,method,name;public,boolean,is,enforce,destroy,method,return,this,enforce,destroy,method
AbstractBeanDefinition -> public boolean isEnforceDestroyMethod();1367943112;Indicate whether the configured destroy method is the default._@see #getDestroyMethodName;public boolean isEnforceDestroyMethod() {_		return this.enforceDestroyMethod__	};indicate,whether,the,configured,destroy,method,is,the,default,see,get,destroy,method,name;public,boolean,is,enforce,destroy,method,return,this,enforce,destroy,method
AbstractBeanDefinition -> public boolean isEnforceDestroyMethod();1368482696;Indicate whether the configured destroy method is the default._@see #getDestroyMethodName;public boolean isEnforceDestroyMethod() {_		return this.enforceDestroyMethod__	};indicate,whether,the,configured,destroy,method,is,the,default,see,get,destroy,method,name;public,boolean,is,enforce,destroy,method,return,this,enforce,destroy,method
AbstractBeanDefinition -> public boolean isEnforceDestroyMethod();1385412762;Indicate whether the configured destroy method is the default._@see #getDestroyMethodName;public boolean isEnforceDestroyMethod() {_		return this.enforceDestroyMethod__	};indicate,whether,the,configured,destroy,method,is,the,default,see,get,destroy,method,name;public,boolean,is,enforce,destroy,method,return,this,enforce,destroy,method
AbstractBeanDefinition -> public boolean isEnforceDestroyMethod();1392245317;Indicate whether the configured destroy method is the default._@see #getDestroyMethodName;public boolean isEnforceDestroyMethod() {_		return this.enforceDestroyMethod__	};indicate,whether,the,configured,destroy,method,is,the,default,see,get,destroy,method,name;public,boolean,is,enforce,destroy,method,return,this,enforce,destroy,method
AbstractBeanDefinition -> public boolean isEnforceDestroyMethod();1397163142;Indicate whether the configured destroy method is the default._@see #getDestroyMethodName;public boolean isEnforceDestroyMethod() {_		return this.enforceDestroyMethod__	};indicate,whether,the,configured,destroy,method,is,the,default,see,get,destroy,method,name;public,boolean,is,enforce,destroy,method,return,this,enforce,destroy,method
AbstractBeanDefinition -> public boolean isEnforceDestroyMethod();1398898390;Indicate whether the configured destroy method is the default._@see #getDestroyMethodName;public boolean isEnforceDestroyMethod() {_		return this.enforceDestroyMethod__	};indicate,whether,the,configured,destroy,method,is,the,default,see,get,destroy,method,name;public,boolean,is,enforce,destroy,method,return,this,enforce,destroy,method
AbstractBeanDefinition -> public boolean isEnforceDestroyMethod();1407511029;Indicate whether the configured destroy method is the default._@see #getDestroyMethodName;public boolean isEnforceDestroyMethod() {_		return this.enforceDestroyMethod__	};indicate,whether,the,configured,destroy,method,is,the,default,see,get,destroy,method,name;public,boolean,is,enforce,destroy,method,return,this,enforce,destroy,method
AbstractBeanDefinition -> public boolean isEnforceDestroyMethod();1432135182;Indicate whether the configured destroy method is the default._@see #getDestroyMethodName;public boolean isEnforceDestroyMethod() {_		return this.enforceDestroyMethod__	};indicate,whether,the,configured,destroy,method,is,the,default,see,get,destroy,method,name;public,boolean,is,enforce,destroy,method,return,this,enforce,destroy,method
AbstractBeanDefinition -> public boolean isEnforceDestroyMethod();1434204509;Indicate whether the configured destroy method is the default._@see #getDestroyMethodName;public boolean isEnforceDestroyMethod() {_		return this.enforceDestroyMethod__	};indicate,whether,the,configured,destroy,method,is,the,default,see,get,destroy,method,name;public,boolean,is,enforce,destroy,method,return,this,enforce,destroy,method
AbstractBeanDefinition -> public boolean isEnforceDestroyMethod();1447323728;Indicate whether the configured destroy method is the default._@see #getDestroyMethodName;public boolean isEnforceDestroyMethod() {_		return this.enforceDestroyMethod__	};indicate,whether,the,configured,destroy,method,is,the,default,see,get,destroy,method,name;public,boolean,is,enforce,destroy,method,return,this,enforce,destroy,method
AbstractBeanDefinition -> public boolean isEnforceDestroyMethod();1465226156;Indicate whether the configured destroy method is the default._@see #getDestroyMethodName;public boolean isEnforceDestroyMethod() {_		return this.enforceDestroyMethod__	};indicate,whether,the,configured,destroy,method,is,the,default,see,get,destroy,method,name;public,boolean,is,enforce,destroy,method,return,this,enforce,destroy,method
AbstractBeanDefinition -> public boolean isEnforceDestroyMethod();1467730834;Indicate whether the configured destroy method is the default._@see #getDestroyMethodName;public boolean isEnforceDestroyMethod() {_		return this.enforceDestroyMethod__	};indicate,whether,the,configured,destroy,method,is,the,default,see,get,destroy,method,name;public,boolean,is,enforce,destroy,method,return,this,enforce,destroy,method
AbstractBeanDefinition -> public boolean isEnforceDestroyMethod();1467846264;Indicate whether the configured destroy method is the default._@see #getDestroyMethodName;public boolean isEnforceDestroyMethod() {_		return this.enforceDestroyMethod__	};indicate,whether,the,configured,destroy,method,is,the,default,see,get,destroy,method,name;public,boolean,is,enforce,destroy,method,return,this,enforce,destroy,method
AbstractBeanDefinition -> public boolean isEnforceDestroyMethod();1482091545;Indicate whether the configured destroy method is the default._@see #getDestroyMethodName;public boolean isEnforceDestroyMethod() {_		return this.enforceDestroyMethod__	};indicate,whether,the,configured,destroy,method,is,the,default,see,get,destroy,method,name;public,boolean,is,enforce,destroy,method,return,this,enforce,destroy,method
AbstractBeanDefinition -> public boolean isEnforceDestroyMethod();1483093818;Indicate whether the configured destroy method is the default._@see #getDestroyMethodName;public boolean isEnforceDestroyMethod() {_		return this.enforceDestroyMethod__	};indicate,whether,the,configured,destroy,method,is,the,default,see,get,destroy,method,name;public,boolean,is,enforce,destroy,method,return,this,enforce,destroy,method
AbstractBeanDefinition -> public boolean isEnforceDestroyMethod();1495868221;Indicate whether the configured destroy method is the default._@see #getDestroyMethodName;public boolean isEnforceDestroyMethod() {_		return this.enforceDestroyMethod__	};indicate,whether,the,configured,destroy,method,is,the,default,see,get,destroy,method,name;public,boolean,is,enforce,destroy,method,return,this,enforce,destroy,method
AbstractBeanDefinition -> public boolean isEnforceDestroyMethod();1496837955;Indicate whether the configured destroy method is the default._@see #getDestroyMethodName;public boolean isEnforceDestroyMethod() {_		return this.enforceDestroyMethod__	};indicate,whether,the,configured,destroy,method,is,the,default,see,get,destroy,method,name;public,boolean,is,enforce,destroy,method,return,this,enforce,destroy,method
AbstractBeanDefinition -> public boolean isEnforceDestroyMethod();1498780456;Indicate whether the configured destroy method is the default._@see #getDestroyMethodName;public boolean isEnforceDestroyMethod() {_		return this.enforceDestroyMethod__	};indicate,whether,the,configured,destroy,method,is,the,default,see,get,destroy,method,name;public,boolean,is,enforce,destroy,method,return,this,enforce,destroy,method
AbstractBeanDefinition -> public boolean isEnforceDestroyMethod();1502974979;Indicate whether the configured destroy method is the default._@see #getDestroyMethodName;public boolean isEnforceDestroyMethod() {_		return this.enforceDestroyMethod__	};indicate,whether,the,configured,destroy,method,is,the,default,see,get,destroy,method,name;public,boolean,is,enforce,destroy,method,return,this,enforce,destroy,method
AbstractBeanDefinition -> public boolean isEnforceDestroyMethod();1503008029;Indicate whether the configured destroy method is the default._@see #getDestroyMethodName;public boolean isEnforceDestroyMethod() {_		return this.enforceDestroyMethod__	};indicate,whether,the,configured,destroy,method,is,the,default,see,get,destroy,method,name;public,boolean,is,enforce,destroy,method,return,this,enforce,destroy,method
AbstractBeanDefinition -> public boolean isEnforceDestroyMethod();1510606271;Indicate whether the configured destroy method is the default._@see #getDestroyMethodName;public boolean isEnforceDestroyMethod() {_		return this.enforceDestroyMethod__	};indicate,whether,the,configured,destroy,method,is,the,default,see,get,destroy,method,name;public,boolean,is,enforce,destroy,method,return,this,enforce,destroy,method
AbstractBeanDefinition -> public boolean isEnforceDestroyMethod();1510675876;Indicate whether the configured destroy method is the default._@see #getDestroyMethodName;public boolean isEnforceDestroyMethod() {_		return this.enforceDestroyMethod__	};indicate,whether,the,configured,destroy,method,is,the,default,see,get,destroy,method,name;public,boolean,is,enforce,destroy,method,return,this,enforce,destroy,method
AbstractBeanDefinition -> public boolean isEnforceDestroyMethod();1530174524;Indicate whether the configured destroy method is the default._@see #getDestroyMethodName;public boolean isEnforceDestroyMethod() {_		return this.enforceDestroyMethod__	};indicate,whether,the,configured,destroy,method,is,the,default,see,get,destroy,method,name;public,boolean,is,enforce,destroy,method,return,this,enforce,destroy,method
AbstractBeanDefinition -> public boolean isEnforceDestroyMethod();1530174524;Indicate whether the configured destroy method is the default._@see #getDestroyMethodName;public boolean isEnforceDestroyMethod() {_		return this.enforceDestroyMethod__	};indicate,whether,the,configured,destroy,method,is,the,default,see,get,destroy,method,name;public,boolean,is,enforce,destroy,method,return,this,enforce,destroy,method
AbstractBeanDefinition -> public boolean isEnforceDestroyMethod();1530174524;Indicate whether the configured destroy method is the default._@see #getDestroyMethodName;public boolean isEnforceDestroyMethod() {_		return this.enforceDestroyMethod__	};indicate,whether,the,configured,destroy,method,is,the,default,see,get,destroy,method,name;public,boolean,is,enforce,destroy,method,return,this,enforce,destroy,method
AbstractBeanDefinition -> public boolean isEnforceDestroyMethod();1530190293;Indicate whether the configured destroy method is the default._@see #getDestroyMethodName;public boolean isEnforceDestroyMethod() {_		return this.enforceDestroyMethod__	};indicate,whether,the,configured,destroy,method,is,the,default,see,get,destroy,method,name;public,boolean,is,enforce,destroy,method,return,this,enforce,destroy,method
AbstractBeanDefinition -> public boolean isEnforceDestroyMethod();1532981251;Indicate whether the configured destroy method is the default._@see #getDestroyMethodName;public boolean isEnforceDestroyMethod() {_		return this.enforceDestroyMethod__	};indicate,whether,the,configured,destroy,method,is,the,default,see,get,destroy,method,name;public,boolean,is,enforce,destroy,method,return,this,enforce,destroy,method
AbstractBeanDefinition -> public boolean isEnforceDestroyMethod();1536863076;Indicate whether the configured destroy method is the default._@see #getDestroyMethodName;public boolean isEnforceDestroyMethod() {_		return this.enforceDestroyMethod__	};indicate,whether,the,configured,destroy,method,is,the,default,see,get,destroy,method,name;public,boolean,is,enforce,destroy,method,return,this,enforce,destroy,method
AbstractBeanDefinition -> @Override 	public int getRole();1356735495;Return the role hint for this {@code BeanDefinition}.;@Override_	public int getRole() {_		return this.role__	};return,the,role,hint,for,this,code,bean,definition;override,public,int,get,role,return,this,role
AbstractBeanDefinition -> @Override 	public int getRole();1368482696;Return the role hint for this {@code BeanDefinition}.;@Override_	public int getRole() {_		return this.role__	};return,the,role,hint,for,this,code,bean,definition;override,public,int,get,role,return,this,role
AbstractBeanDefinition -> @Override 	public int getRole();1385412762;Return the role hint for this {@code BeanDefinition}.;@Override_	public int getRole() {_		return this.role__	};return,the,role,hint,for,this,code,bean,definition;override,public,int,get,role,return,this,role
AbstractBeanDefinition -> @Override 	public int getRole();1392245317;Return the role hint for this {@code BeanDefinition}.;@Override_	public int getRole() {_		return this.role__	};return,the,role,hint,for,this,code,bean,definition;override,public,int,get,role,return,this,role
AbstractBeanDefinition -> @Override 	public int getRole();1397163142;Return the role hint for this {@code BeanDefinition}.;@Override_	public int getRole() {_		return this.role__	};return,the,role,hint,for,this,code,bean,definition;override,public,int,get,role,return,this,role
AbstractBeanDefinition -> @Override 	public int getRole();1398898390;Return the role hint for this {@code BeanDefinition}.;@Override_	public int getRole() {_		return this.role__	};return,the,role,hint,for,this,code,bean,definition;override,public,int,get,role,return,this,role
AbstractBeanDefinition -> @Override 	public int getRole();1407511029;Return the role hint for this {@code BeanDefinition}.;@Override_	public int getRole() {_		return this.role__	};return,the,role,hint,for,this,code,bean,definition;override,public,int,get,role,return,this,role
AbstractBeanDefinition -> @Override 	public int getRole();1432135182;Return the role hint for this {@code BeanDefinition}.;@Override_	public int getRole() {_		return this.role__	};return,the,role,hint,for,this,code,bean,definition;override,public,int,get,role,return,this,role
AbstractBeanDefinition -> @Override 	public int getRole();1434204509;Return the role hint for this {@code BeanDefinition}.;@Override_	public int getRole() {_		return this.role__	};return,the,role,hint,for,this,code,bean,definition;override,public,int,get,role,return,this,role
AbstractBeanDefinition -> @Override 	public int getRole();1447323728;Return the role hint for this {@code BeanDefinition}.;@Override_	public int getRole() {_		return this.role__	};return,the,role,hint,for,this,code,bean,definition;override,public,int,get,role,return,this,role
AbstractBeanDefinition -> @Override 	public int getRole();1465226156;Return the role hint for this {@code BeanDefinition}.;@Override_	public int getRole() {_		return this.role__	};return,the,role,hint,for,this,code,bean,definition;override,public,int,get,role,return,this,role
AbstractBeanDefinition -> @Override 	public int getRole();1467730834;Return the role hint for this {@code BeanDefinition}.;@Override_	public int getRole() {_		return this.role__	};return,the,role,hint,for,this,code,bean,definition;override,public,int,get,role,return,this,role
AbstractBeanDefinition -> @Override 	public int getRole();1467846264;Return the role hint for this {@code BeanDefinition}.;@Override_	public int getRole() {_		return this.role__	};return,the,role,hint,for,this,code,bean,definition;override,public,int,get,role,return,this,role
AbstractBeanDefinition -> @Override 	public int getRole();1482091545;Return the role hint for this {@code BeanDefinition}.;@Override_	public int getRole() {_		return this.role__	};return,the,role,hint,for,this,code,bean,definition;override,public,int,get,role,return,this,role
AbstractBeanDefinition -> @Override 	public int getRole();1483093818;Return the role hint for this {@code BeanDefinition}.;@Override_	public int getRole() {_		return this.role__	};return,the,role,hint,for,this,code,bean,definition;override,public,int,get,role,return,this,role
AbstractBeanDefinition -> @Override 	public int getRole();1495868221;Return the role hint for this {@code BeanDefinition}.;@Override_	public int getRole() {_		return this.role__	};return,the,role,hint,for,this,code,bean,definition;override,public,int,get,role,return,this,role
AbstractBeanDefinition -> @Override 	public int getRole();1496837955;Return the role hint for this {@code BeanDefinition}.;@Override_	public int getRole() {_		return this.role__	};return,the,role,hint,for,this,code,bean,definition;override,public,int,get,role,return,this,role
AbstractBeanDefinition -> @Override 	public int getRole();1498780456;Return the role hint for this {@code BeanDefinition}.;@Override_	public int getRole() {_		return this.role__	};return,the,role,hint,for,this,code,bean,definition;override,public,int,get,role,return,this,role
AbstractBeanDefinition -> @Override 	public int getRole();1502974979;Return the role hint for this {@code BeanDefinition}.;@Override_	public int getRole() {_		return this.role__	};return,the,role,hint,for,this,code,bean,definition;override,public,int,get,role,return,this,role
AbstractBeanDefinition -> @Override 	public int getRole();1503008029;Return the role hint for this {@code BeanDefinition}.;@Override_	public int getRole() {_		return this.role__	};return,the,role,hint,for,this,code,bean,definition;override,public,int,get,role,return,this,role
AbstractBeanDefinition -> @Override 	public int getRole();1510606271;Return the role hint for this {@code BeanDefinition}.;@Override_	public int getRole() {_		return this.role__	};return,the,role,hint,for,this,code,bean,definition;override,public,int,get,role,return,this,role
AbstractBeanDefinition -> @Override 	public int getRole();1510675876;Return the role hint for this {@code BeanDefinition}.;@Override_	public int getRole() {_		return this.role__	};return,the,role,hint,for,this,code,bean,definition;override,public,int,get,role,return,this,role
AbstractBeanDefinition -> @Override 	public int getRole();1530174524;Return the role hint for this {@code BeanDefinition}.;@Override_	public int getRole() {_		return this.role__	};return,the,role,hint,for,this,code,bean,definition;override,public,int,get,role,return,this,role
AbstractBeanDefinition -> @Override 	public int getRole();1530174524;Return the role hint for this {@code BeanDefinition}.;@Override_	public int getRole() {_		return this.role__	};return,the,role,hint,for,this,code,bean,definition;override,public,int,get,role,return,this,role
AbstractBeanDefinition -> @Override 	public int getRole();1530174524;Return the role hint for this {@code BeanDefinition}.;@Override_	public int getRole() {_		return this.role__	};return,the,role,hint,for,this,code,bean,definition;override,public,int,get,role,return,this,role
AbstractBeanDefinition -> @Override 	public int getRole();1530190293;Return the role hint for this {@code BeanDefinition}.;@Override_	public int getRole() {_		return this.role__	};return,the,role,hint,for,this,code,bean,definition;override,public,int,get,role,return,this,role
AbstractBeanDefinition -> @Override 	public int getRole();1532981251;Return the role hint for this {@code BeanDefinition}.;@Override_	public int getRole() {_		return this.role__	};return,the,role,hint,for,this,code,bean,definition;override,public,int,get,role,return,this,role
AbstractBeanDefinition -> @Override 	public int getRole();1536863076;Return the role hint for this {@code BeanDefinition}.;@Override_	public int getRole() {_		return this.role__	};return,the,role,hint,for,this,code,bean,definition;override,public,int,get,role,return,this,role
AbstractBeanDefinition -> @Override 	public String getBeanClassName();1483093818;Return the current bean class name of this bean definition.;@Override_	public String getBeanClassName() {_		Object beanClassObject = this.beanClass__		if (beanClassObject instanceof Class) {_			return ((Class<?>) beanClassObject).getName()__		}_		else {_			return (String) beanClassObject__		}_	};return,the,current,bean,class,name,of,this,bean,definition;override,public,string,get,bean,class,name,object,bean,class,object,this,bean,class,if,bean,class,object,instanceof,class,return,class,bean,class,object,get,name,else,return,string,bean,class,object
AbstractBeanDefinition -> @Override 	public String getBeanClassName();1495868221;Return the current bean class name of this bean definition.;@Override_	public String getBeanClassName() {_		Object beanClassObject = this.beanClass__		if (beanClassObject instanceof Class) {_			return ((Class<?>) beanClassObject).getName()__		}_		else {_			return (String) beanClassObject__		}_	};return,the,current,bean,class,name,of,this,bean,definition;override,public,string,get,bean,class,name,object,bean,class,object,this,bean,class,if,bean,class,object,instanceof,class,return,class,bean,class,object,get,name,else,return,string,bean,class,object
AbstractBeanDefinition -> @Override 	public String getBeanClassName();1496837955;Return the current bean class name of this bean definition.;@Override_	public String getBeanClassName() {_		Object beanClassObject = this.beanClass__		if (beanClassObject instanceof Class) {_			return ((Class<?>) beanClassObject).getName()__		}_		else {_			return (String) beanClassObject__		}_	};return,the,current,bean,class,name,of,this,bean,definition;override,public,string,get,bean,class,name,object,bean,class,object,this,bean,class,if,bean,class,object,instanceof,class,return,class,bean,class,object,get,name,else,return,string,bean,class,object
AbstractBeanDefinition -> @Override 	public String getBeanClassName();1498780456;Return the current bean class name of this bean definition.;@Override_	public String getBeanClassName() {_		Object beanClassObject = this.beanClass__		if (beanClassObject instanceof Class) {_			return ((Class<?>) beanClassObject).getName()__		}_		else {_			return (String) beanClassObject__		}_	};return,the,current,bean,class,name,of,this,bean,definition;override,public,string,get,bean,class,name,object,bean,class,object,this,bean,class,if,bean,class,object,instanceof,class,return,class,bean,class,object,get,name,else,return,string,bean,class,object
AbstractBeanDefinition -> public Resource getResource();1328020251;Return the resource that this bean definition came from.;public Resource getResource() {_		return this.resource__	};return,the,resource,that,this,bean,definition,came,from;public,resource,get,resource,return,this,resource
AbstractBeanDefinition -> public Resource getResource();1337202589;Return the resource that this bean definition came from.;public Resource getResource() {_		return this.resource__	};return,the,resource,that,this,bean,definition,came,from;public,resource,get,resource,return,this,resource
AbstractBeanDefinition -> public Resource getResource();1356735495;Return the resource that this bean definition came from.;public Resource getResource() {_		return this.resource__	};return,the,resource,that,this,bean,definition,came,from;public,resource,get,resource,return,this,resource
AbstractBeanDefinition -> public Resource getResource();1357119239;Return the resource that this bean definition came from.;public Resource getResource() {_		return this.resource__	};return,the,resource,that,this,bean,definition,came,from;public,resource,get,resource,return,this,resource
AbstractBeanDefinition -> public Resource getResource();1367508310;Return the resource that this bean definition came from.;public Resource getResource() {_		return this.resource__	};return,the,resource,that,this,bean,definition,came,from;public,resource,get,resource,return,this,resource
AbstractBeanDefinition -> public Resource getResource();1367943112;Return the resource that this bean definition came from.;public Resource getResource() {_		return this.resource__	};return,the,resource,that,this,bean,definition,came,from;public,resource,get,resource,return,this,resource
AbstractBeanDefinition -> public Resource getResource();1368482696;Return the resource that this bean definition came from.;public Resource getResource() {_		return this.resource__	};return,the,resource,that,this,bean,definition,came,from;public,resource,get,resource,return,this,resource
AbstractBeanDefinition -> public Resource getResource();1385412762;Return the resource that this bean definition came from.;public Resource getResource() {_		return this.resource__	};return,the,resource,that,this,bean,definition,came,from;public,resource,get,resource,return,this,resource
AbstractBeanDefinition -> public Resource getResource();1392245317;Return the resource that this bean definition came from.;public Resource getResource() {_		return this.resource__	};return,the,resource,that,this,bean,definition,came,from;public,resource,get,resource,return,this,resource
AbstractBeanDefinition -> public Resource getResource();1397163142;Return the resource that this bean definition came from.;public Resource getResource() {_		return this.resource__	};return,the,resource,that,this,bean,definition,came,from;public,resource,get,resource,return,this,resource
AbstractBeanDefinition -> public Resource getResource();1398898390;Return the resource that this bean definition came from.;public Resource getResource() {_		return this.resource__	};return,the,resource,that,this,bean,definition,came,from;public,resource,get,resource,return,this,resource
AbstractBeanDefinition -> public Resource getResource();1407511029;Return the resource that this bean definition came from.;public Resource getResource() {_		return this.resource__	};return,the,resource,that,this,bean,definition,came,from;public,resource,get,resource,return,this,resource
AbstractBeanDefinition -> public Resource getResource();1432135182;Return the resource that this bean definition came from.;public Resource getResource() {_		return this.resource__	};return,the,resource,that,this,bean,definition,came,from;public,resource,get,resource,return,this,resource
AbstractBeanDefinition -> public Resource getResource();1434204509;Return the resource that this bean definition came from.;public Resource getResource() {_		return this.resource__	};return,the,resource,that,this,bean,definition,came,from;public,resource,get,resource,return,this,resource
AbstractBeanDefinition -> public Resource getResource();1447323728;Return the resource that this bean definition came from.;public Resource getResource() {_		return this.resource__	};return,the,resource,that,this,bean,definition,came,from;public,resource,get,resource,return,this,resource
AbstractBeanDefinition -> public Resource getResource();1465226156;Return the resource that this bean definition came from.;public Resource getResource() {_		return this.resource__	};return,the,resource,that,this,bean,definition,came,from;public,resource,get,resource,return,this,resource
AbstractBeanDefinition -> public Resource getResource();1467730834;Return the resource that this bean definition came from.;public Resource getResource() {_		return this.resource__	};return,the,resource,that,this,bean,definition,came,from;public,resource,get,resource,return,this,resource
AbstractBeanDefinition -> public Resource getResource();1467846264;Return the resource that this bean definition came from.;public Resource getResource() {_		return this.resource__	};return,the,resource,that,this,bean,definition,came,from;public,resource,get,resource,return,this,resource
AbstractBeanDefinition -> public Resource getResource();1482091545;Return the resource that this bean definition came from.;public Resource getResource() {_		return this.resource__	};return,the,resource,that,this,bean,definition,came,from;public,resource,get,resource,return,this,resource
AbstractBeanDefinition -> public Resource getResource();1483093818;Return the resource that this bean definition came from.;public Resource getResource() {_		return this.resource__	};return,the,resource,that,this,bean,definition,came,from;public,resource,get,resource,return,this,resource
AbstractBeanDefinition -> public Resource getResource();1495868221;Return the resource that this bean definition came from.;public Resource getResource() {_		return this.resource__	};return,the,resource,that,this,bean,definition,came,from;public,resource,get,resource,return,this,resource
AbstractBeanDefinition -> public Resource getResource();1496837955;Return the resource that this bean definition came from.;public Resource getResource() {_		return this.resource__	};return,the,resource,that,this,bean,definition,came,from;public,resource,get,resource,return,this,resource
AbstractBeanDefinition -> public String getDestroyMethodName();1328020251;Return the name of the destroy method.;public String getDestroyMethodName() {_		return this.destroyMethodName__	};return,the,name,of,the,destroy,method;public,string,get,destroy,method,name,return,this,destroy,method,name
AbstractBeanDefinition -> public String getDestroyMethodName();1337202589;Return the name of the destroy method.;public String getDestroyMethodName() {_		return this.destroyMethodName__	};return,the,name,of,the,destroy,method;public,string,get,destroy,method,name,return,this,destroy,method,name
AbstractBeanDefinition -> public String getDestroyMethodName();1356735495;Return the name of the destroy method.;public String getDestroyMethodName() {_		return this.destroyMethodName__	};return,the,name,of,the,destroy,method;public,string,get,destroy,method,name,return,this,destroy,method,name
AbstractBeanDefinition -> public String getDestroyMethodName();1357119239;Return the name of the destroy method.;public String getDestroyMethodName() {_		return this.destroyMethodName__	};return,the,name,of,the,destroy,method;public,string,get,destroy,method,name,return,this,destroy,method,name
AbstractBeanDefinition -> public String getDestroyMethodName();1367508310;Return the name of the destroy method.;public String getDestroyMethodName() {_		return this.destroyMethodName__	};return,the,name,of,the,destroy,method;public,string,get,destroy,method,name,return,this,destroy,method,name
AbstractBeanDefinition -> public String getDestroyMethodName();1367943112;Return the name of the destroy method.;public String getDestroyMethodName() {_		return this.destroyMethodName__	};return,the,name,of,the,destroy,method;public,string,get,destroy,method,name,return,this,destroy,method,name
AbstractBeanDefinition -> public String getDestroyMethodName();1368482696;Return the name of the destroy method.;public String getDestroyMethodName() {_		return this.destroyMethodName__	};return,the,name,of,the,destroy,method;public,string,get,destroy,method,name,return,this,destroy,method,name
AbstractBeanDefinition -> public String getDestroyMethodName();1385412762;Return the name of the destroy method.;public String getDestroyMethodName() {_		return this.destroyMethodName__	};return,the,name,of,the,destroy,method;public,string,get,destroy,method,name,return,this,destroy,method,name
AbstractBeanDefinition -> public String getDestroyMethodName();1392245317;Return the name of the destroy method.;public String getDestroyMethodName() {_		return this.destroyMethodName__	};return,the,name,of,the,destroy,method;public,string,get,destroy,method,name,return,this,destroy,method,name
AbstractBeanDefinition -> public String getDestroyMethodName();1397163142;Return the name of the destroy method.;public String getDestroyMethodName() {_		return this.destroyMethodName__	};return,the,name,of,the,destroy,method;public,string,get,destroy,method,name,return,this,destroy,method,name
AbstractBeanDefinition -> public String getDestroyMethodName();1398898390;Return the name of the destroy method.;public String getDestroyMethodName() {_		return this.destroyMethodName__	};return,the,name,of,the,destroy,method;public,string,get,destroy,method,name,return,this,destroy,method,name
AbstractBeanDefinition -> public String getDestroyMethodName();1407511029;Return the name of the destroy method.;public String getDestroyMethodName() {_		return this.destroyMethodName__	};return,the,name,of,the,destroy,method;public,string,get,destroy,method,name,return,this,destroy,method,name
AbstractBeanDefinition -> public String getDestroyMethodName();1432135182;Return the name of the destroy method.;public String getDestroyMethodName() {_		return this.destroyMethodName__	};return,the,name,of,the,destroy,method;public,string,get,destroy,method,name,return,this,destroy,method,name
AbstractBeanDefinition -> public String getDestroyMethodName();1434204509;Return the name of the destroy method.;public String getDestroyMethodName() {_		return this.destroyMethodName__	};return,the,name,of,the,destroy,method;public,string,get,destroy,method,name,return,this,destroy,method,name
AbstractBeanDefinition -> public String getDestroyMethodName();1447323728;Return the name of the destroy method.;public String getDestroyMethodName() {_		return this.destroyMethodName__	};return,the,name,of,the,destroy,method;public,string,get,destroy,method,name,return,this,destroy,method,name
AbstractBeanDefinition -> public String getDestroyMethodName();1465226156;Return the name of the destroy method.;public String getDestroyMethodName() {_		return this.destroyMethodName__	};return,the,name,of,the,destroy,method;public,string,get,destroy,method,name,return,this,destroy,method,name
AbstractBeanDefinition -> public String getDestroyMethodName();1467730834;Return the name of the destroy method.;public String getDestroyMethodName() {_		return this.destroyMethodName__	};return,the,name,of,the,destroy,method;public,string,get,destroy,method,name,return,this,destroy,method,name
AbstractBeanDefinition -> public String getDestroyMethodName();1467846264;Return the name of the destroy method.;public String getDestroyMethodName() {_		return this.destroyMethodName__	};return,the,name,of,the,destroy,method;public,string,get,destroy,method,name,return,this,destroy,method,name
AbstractBeanDefinition -> public String getDestroyMethodName();1482091545;Return the name of the destroy method.;public String getDestroyMethodName() {_		return this.destroyMethodName__	};return,the,name,of,the,destroy,method;public,string,get,destroy,method,name,return,this,destroy,method,name
AbstractBeanDefinition -> public String getDestroyMethodName();1483093818;Return the name of the destroy method.;public String getDestroyMethodName() {_		return this.destroyMethodName__	};return,the,name,of,the,destroy,method;public,string,get,destroy,method,name,return,this,destroy,method,name
AbstractBeanDefinition -> public boolean isLazyInit();1328020251;Return whether this bean should be lazily initialized, i.e. not_eagerly instantiated on startup. Only applicable to a singleton bean.;public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,this,bean,should,be,lazily,initialized,i,e,not,eagerly,instantiated,on,startup,only,applicable,to,a,singleton,bean;public,boolean,is,lazy,init,return,this,lazy,init
AbstractBeanDefinition -> public boolean isLazyInit();1337202589;Return whether this bean should be lazily initialized, i.e. not_eagerly instantiated on startup. Only applicable to a singleton bean.;public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,this,bean,should,be,lazily,initialized,i,e,not,eagerly,instantiated,on,startup,only,applicable,to,a,singleton,bean;public,boolean,is,lazy,init,return,this,lazy,init
AbstractBeanDefinition -> public boolean isLazyInit();1357119239;Return whether this bean should be lazily initialized, i.e. not_eagerly instantiated on startup. Only applicable to a singleton bean.;public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,this,bean,should,be,lazily,initialized,i,e,not,eagerly,instantiated,on,startup,only,applicable,to,a,singleton,bean;public,boolean,is,lazy,init,return,this,lazy,init
AbstractBeanDefinition -> public boolean isLazyInit();1367508310;Return whether this bean should be lazily initialized, i.e. not_eagerly instantiated on startup. Only applicable to a singleton bean.;public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,this,bean,should,be,lazily,initialized,i,e,not,eagerly,instantiated,on,startup,only,applicable,to,a,singleton,bean;public,boolean,is,lazy,init,return,this,lazy,init
AbstractBeanDefinition -> public boolean isLazyInit();1367943112;Return whether this bean should be lazily initialized, i.e. not_eagerly instantiated on startup. Only applicable to a singleton bean.;public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,this,bean,should,be,lazily,initialized,i,e,not,eagerly,instantiated,on,startup,only,applicable,to,a,singleton,bean;public,boolean,is,lazy,init,return,this,lazy,init
AbstractBeanDefinition -> public void addQualifier(AutowireCandidateQualifier qualifier);1328020251;Register a qualifier to be used for autowire candidate resolution,_keyed by the qualifier's type name._@see AutowireCandidateQualifier#getTypeName();public void addQualifier(AutowireCandidateQualifier qualifier) {_		this.qualifiers.put(qualifier.getTypeName(), qualifier)__	};register,a,qualifier,to,be,used,for,autowire,candidate,resolution,keyed,by,the,qualifier,s,type,name,see,autowire,candidate,qualifier,get,type,name;public,void,add,qualifier,autowire,candidate,qualifier,qualifier,this,qualifiers,put,qualifier,get,type,name,qualifier
AbstractBeanDefinition -> public void addQualifier(AutowireCandidateQualifier qualifier);1337202589;Register a qualifier to be used for autowire candidate resolution,_keyed by the qualifier's type name._@see AutowireCandidateQualifier#getTypeName();public void addQualifier(AutowireCandidateQualifier qualifier) {_		this.qualifiers.put(qualifier.getTypeName(), qualifier)__	};register,a,qualifier,to,be,used,for,autowire,candidate,resolution,keyed,by,the,qualifier,s,type,name,see,autowire,candidate,qualifier,get,type,name;public,void,add,qualifier,autowire,candidate,qualifier,qualifier,this,qualifiers,put,qualifier,get,type,name,qualifier
AbstractBeanDefinition -> public void addQualifier(AutowireCandidateQualifier qualifier);1356735495;Register a qualifier to be used for autowire candidate resolution,_keyed by the qualifier's type name._@see AutowireCandidateQualifier#getTypeName();public void addQualifier(AutowireCandidateQualifier qualifier) {_		this.qualifiers.put(qualifier.getTypeName(), qualifier)__	};register,a,qualifier,to,be,used,for,autowire,candidate,resolution,keyed,by,the,qualifier,s,type,name,see,autowire,candidate,qualifier,get,type,name;public,void,add,qualifier,autowire,candidate,qualifier,qualifier,this,qualifiers,put,qualifier,get,type,name,qualifier
AbstractBeanDefinition -> public void addQualifier(AutowireCandidateQualifier qualifier);1357119239;Register a qualifier to be used for autowire candidate resolution,_keyed by the qualifier's type name._@see AutowireCandidateQualifier#getTypeName();public void addQualifier(AutowireCandidateQualifier qualifier) {_		this.qualifiers.put(qualifier.getTypeName(), qualifier)__	};register,a,qualifier,to,be,used,for,autowire,candidate,resolution,keyed,by,the,qualifier,s,type,name,see,autowire,candidate,qualifier,get,type,name;public,void,add,qualifier,autowire,candidate,qualifier,qualifier,this,qualifiers,put,qualifier,get,type,name,qualifier
AbstractBeanDefinition -> public void addQualifier(AutowireCandidateQualifier qualifier);1367508310;Register a qualifier to be used for autowire candidate resolution,_keyed by the qualifier's type name._@see AutowireCandidateQualifier#getTypeName();public void addQualifier(AutowireCandidateQualifier qualifier) {_		this.qualifiers.put(qualifier.getTypeName(), qualifier)__	};register,a,qualifier,to,be,used,for,autowire,candidate,resolution,keyed,by,the,qualifier,s,type,name,see,autowire,candidate,qualifier,get,type,name;public,void,add,qualifier,autowire,candidate,qualifier,qualifier,this,qualifiers,put,qualifier,get,type,name,qualifier
AbstractBeanDefinition -> public void addQualifier(AutowireCandidateQualifier qualifier);1367943112;Register a qualifier to be used for autowire candidate resolution,_keyed by the qualifier's type name._@see AutowireCandidateQualifier#getTypeName();public void addQualifier(AutowireCandidateQualifier qualifier) {_		this.qualifiers.put(qualifier.getTypeName(), qualifier)__	};register,a,qualifier,to,be,used,for,autowire,candidate,resolution,keyed,by,the,qualifier,s,type,name,see,autowire,candidate,qualifier,get,type,name;public,void,add,qualifier,autowire,candidate,qualifier,qualifier,this,qualifiers,put,qualifier,get,type,name,qualifier
AbstractBeanDefinition -> public void addQualifier(AutowireCandidateQualifier qualifier);1368482696;Register a qualifier to be used for autowire candidate resolution,_keyed by the qualifier's type name._@see AutowireCandidateQualifier#getTypeName();public void addQualifier(AutowireCandidateQualifier qualifier) {_		this.qualifiers.put(qualifier.getTypeName(), qualifier)__	};register,a,qualifier,to,be,used,for,autowire,candidate,resolution,keyed,by,the,qualifier,s,type,name,see,autowire,candidate,qualifier,get,type,name;public,void,add,qualifier,autowire,candidate,qualifier,qualifier,this,qualifiers,put,qualifier,get,type,name,qualifier
AbstractBeanDefinition -> public void addQualifier(AutowireCandidateQualifier qualifier);1385412762;Register a qualifier to be used for autowire candidate resolution,_keyed by the qualifier's type name._@see AutowireCandidateQualifier#getTypeName();public void addQualifier(AutowireCandidateQualifier qualifier) {_		this.qualifiers.put(qualifier.getTypeName(), qualifier)__	};register,a,qualifier,to,be,used,for,autowire,candidate,resolution,keyed,by,the,qualifier,s,type,name,see,autowire,candidate,qualifier,get,type,name;public,void,add,qualifier,autowire,candidate,qualifier,qualifier,this,qualifiers,put,qualifier,get,type,name,qualifier
AbstractBeanDefinition -> public void addQualifier(AutowireCandidateQualifier qualifier);1392245317;Register a qualifier to be used for autowire candidate resolution,_keyed by the qualifier's type name._@see AutowireCandidateQualifier#getTypeName();public void addQualifier(AutowireCandidateQualifier qualifier) {_		this.qualifiers.put(qualifier.getTypeName(), qualifier)__	};register,a,qualifier,to,be,used,for,autowire,candidate,resolution,keyed,by,the,qualifier,s,type,name,see,autowire,candidate,qualifier,get,type,name;public,void,add,qualifier,autowire,candidate,qualifier,qualifier,this,qualifiers,put,qualifier,get,type,name,qualifier
AbstractBeanDefinition -> public void addQualifier(AutowireCandidateQualifier qualifier);1397163142;Register a qualifier to be used for autowire candidate resolution,_keyed by the qualifier's type name._@see AutowireCandidateQualifier#getTypeName();public void addQualifier(AutowireCandidateQualifier qualifier) {_		this.qualifiers.put(qualifier.getTypeName(), qualifier)__	};register,a,qualifier,to,be,used,for,autowire,candidate,resolution,keyed,by,the,qualifier,s,type,name,see,autowire,candidate,qualifier,get,type,name;public,void,add,qualifier,autowire,candidate,qualifier,qualifier,this,qualifiers,put,qualifier,get,type,name,qualifier
AbstractBeanDefinition -> public void addQualifier(AutowireCandidateQualifier qualifier);1398898390;Register a qualifier to be used for autowire candidate resolution,_keyed by the qualifier's type name._@see AutowireCandidateQualifier#getTypeName();public void addQualifier(AutowireCandidateQualifier qualifier) {_		this.qualifiers.put(qualifier.getTypeName(), qualifier)__	};register,a,qualifier,to,be,used,for,autowire,candidate,resolution,keyed,by,the,qualifier,s,type,name,see,autowire,candidate,qualifier,get,type,name;public,void,add,qualifier,autowire,candidate,qualifier,qualifier,this,qualifiers,put,qualifier,get,type,name,qualifier
AbstractBeanDefinition -> public void addQualifier(AutowireCandidateQualifier qualifier);1407511029;Register a qualifier to be used for autowire candidate resolution,_keyed by the qualifier's type name._@see AutowireCandidateQualifier#getTypeName();public void addQualifier(AutowireCandidateQualifier qualifier) {_		this.qualifiers.put(qualifier.getTypeName(), qualifier)__	};register,a,qualifier,to,be,used,for,autowire,candidate,resolution,keyed,by,the,qualifier,s,type,name,see,autowire,candidate,qualifier,get,type,name;public,void,add,qualifier,autowire,candidate,qualifier,qualifier,this,qualifiers,put,qualifier,get,type,name,qualifier
AbstractBeanDefinition -> public void addQualifier(AutowireCandidateQualifier qualifier);1432135182;Register a qualifier to be used for autowire candidate resolution,_keyed by the qualifier's type name._@see AutowireCandidateQualifier#getTypeName();public void addQualifier(AutowireCandidateQualifier qualifier) {_		this.qualifiers.put(qualifier.getTypeName(), qualifier)__	};register,a,qualifier,to,be,used,for,autowire,candidate,resolution,keyed,by,the,qualifier,s,type,name,see,autowire,candidate,qualifier,get,type,name;public,void,add,qualifier,autowire,candidate,qualifier,qualifier,this,qualifiers,put,qualifier,get,type,name,qualifier
AbstractBeanDefinition -> public void addQualifier(AutowireCandidateQualifier qualifier);1434204509;Register a qualifier to be used for autowire candidate resolution,_keyed by the qualifier's type name._@see AutowireCandidateQualifier#getTypeName();public void addQualifier(AutowireCandidateQualifier qualifier) {_		this.qualifiers.put(qualifier.getTypeName(), qualifier)__	};register,a,qualifier,to,be,used,for,autowire,candidate,resolution,keyed,by,the,qualifier,s,type,name,see,autowire,candidate,qualifier,get,type,name;public,void,add,qualifier,autowire,candidate,qualifier,qualifier,this,qualifiers,put,qualifier,get,type,name,qualifier
AbstractBeanDefinition -> public void addQualifier(AutowireCandidateQualifier qualifier);1447323728;Register a qualifier to be used for autowire candidate resolution,_keyed by the qualifier's type name._@see AutowireCandidateQualifier#getTypeName();public void addQualifier(AutowireCandidateQualifier qualifier) {_		this.qualifiers.put(qualifier.getTypeName(), qualifier)__	};register,a,qualifier,to,be,used,for,autowire,candidate,resolution,keyed,by,the,qualifier,s,type,name,see,autowire,candidate,qualifier,get,type,name;public,void,add,qualifier,autowire,candidate,qualifier,qualifier,this,qualifiers,put,qualifier,get,type,name,qualifier
AbstractBeanDefinition -> public void addQualifier(AutowireCandidateQualifier qualifier);1465226156;Register a qualifier to be used for autowire candidate resolution,_keyed by the qualifier's type name._@see AutowireCandidateQualifier#getTypeName();public void addQualifier(AutowireCandidateQualifier qualifier) {_		this.qualifiers.put(qualifier.getTypeName(), qualifier)__	};register,a,qualifier,to,be,used,for,autowire,candidate,resolution,keyed,by,the,qualifier,s,type,name,see,autowire,candidate,qualifier,get,type,name;public,void,add,qualifier,autowire,candidate,qualifier,qualifier,this,qualifiers,put,qualifier,get,type,name,qualifier
AbstractBeanDefinition -> public void addQualifier(AutowireCandidateQualifier qualifier);1467730834;Register a qualifier to be used for autowire candidate resolution,_keyed by the qualifier's type name._@see AutowireCandidateQualifier#getTypeName();public void addQualifier(AutowireCandidateQualifier qualifier) {_		this.qualifiers.put(qualifier.getTypeName(), qualifier)__	};register,a,qualifier,to,be,used,for,autowire,candidate,resolution,keyed,by,the,qualifier,s,type,name,see,autowire,candidate,qualifier,get,type,name;public,void,add,qualifier,autowire,candidate,qualifier,qualifier,this,qualifiers,put,qualifier,get,type,name,qualifier
AbstractBeanDefinition -> public void addQualifier(AutowireCandidateQualifier qualifier);1467846264;Register a qualifier to be used for autowire candidate resolution,_keyed by the qualifier's type name._@see AutowireCandidateQualifier#getTypeName();public void addQualifier(AutowireCandidateQualifier qualifier) {_		this.qualifiers.put(qualifier.getTypeName(), qualifier)__	};register,a,qualifier,to,be,used,for,autowire,candidate,resolution,keyed,by,the,qualifier,s,type,name,see,autowire,candidate,qualifier,get,type,name;public,void,add,qualifier,autowire,candidate,qualifier,qualifier,this,qualifiers,put,qualifier,get,type,name,qualifier
AbstractBeanDefinition -> public void addQualifier(AutowireCandidateQualifier qualifier);1482091545;Register a qualifier to be used for autowire candidate resolution,_keyed by the qualifier's type name._@see AutowireCandidateQualifier#getTypeName();public void addQualifier(AutowireCandidateQualifier qualifier) {_		this.qualifiers.put(qualifier.getTypeName(), qualifier)__	};register,a,qualifier,to,be,used,for,autowire,candidate,resolution,keyed,by,the,qualifier,s,type,name,see,autowire,candidate,qualifier,get,type,name;public,void,add,qualifier,autowire,candidate,qualifier,qualifier,this,qualifiers,put,qualifier,get,type,name,qualifier
AbstractBeanDefinition -> public void addQualifier(AutowireCandidateQualifier qualifier);1483093818;Register a qualifier to be used for autowire candidate resolution,_keyed by the qualifier's type name._@see AutowireCandidateQualifier#getTypeName();public void addQualifier(AutowireCandidateQualifier qualifier) {_		this.qualifiers.put(qualifier.getTypeName(), qualifier)__	};register,a,qualifier,to,be,used,for,autowire,candidate,resolution,keyed,by,the,qualifier,s,type,name,see,autowire,candidate,qualifier,get,type,name;public,void,add,qualifier,autowire,candidate,qualifier,qualifier,this,qualifiers,put,qualifier,get,type,name,qualifier
AbstractBeanDefinition -> public void addQualifier(AutowireCandidateQualifier qualifier);1495868221;Register a qualifier to be used for autowire candidate resolution,_keyed by the qualifier's type name._@see AutowireCandidateQualifier#getTypeName();public void addQualifier(AutowireCandidateQualifier qualifier) {_		this.qualifiers.put(qualifier.getTypeName(), qualifier)__	};register,a,qualifier,to,be,used,for,autowire,candidate,resolution,keyed,by,the,qualifier,s,type,name,see,autowire,candidate,qualifier,get,type,name;public,void,add,qualifier,autowire,candidate,qualifier,qualifier,this,qualifiers,put,qualifier,get,type,name,qualifier
AbstractBeanDefinition -> public void addQualifier(AutowireCandidateQualifier qualifier);1496837955;Register a qualifier to be used for autowire candidate resolution,_keyed by the qualifier's type name._@see AutowireCandidateQualifier#getTypeName();public void addQualifier(AutowireCandidateQualifier qualifier) {_		this.qualifiers.put(qualifier.getTypeName(), qualifier)__	};register,a,qualifier,to,be,used,for,autowire,candidate,resolution,keyed,by,the,qualifier,s,type,name,see,autowire,candidate,qualifier,get,type,name;public,void,add,qualifier,autowire,candidate,qualifier,qualifier,this,qualifiers,put,qualifier,get,type,name,qualifier
AbstractBeanDefinition -> public void addQualifier(AutowireCandidateQualifier qualifier);1498780456;Register a qualifier to be used for autowire candidate resolution,_keyed by the qualifier's type name._@see AutowireCandidateQualifier#getTypeName();public void addQualifier(AutowireCandidateQualifier qualifier) {_		this.qualifiers.put(qualifier.getTypeName(), qualifier)__	};register,a,qualifier,to,be,used,for,autowire,candidate,resolution,keyed,by,the,qualifier,s,type,name,see,autowire,candidate,qualifier,get,type,name;public,void,add,qualifier,autowire,candidate,qualifier,qualifier,this,qualifiers,put,qualifier,get,type,name,qualifier
AbstractBeanDefinition -> public void addQualifier(AutowireCandidateQualifier qualifier);1502974979;Register a qualifier to be used for autowire candidate resolution,_keyed by the qualifier's type name._@see AutowireCandidateQualifier#getTypeName();public void addQualifier(AutowireCandidateQualifier qualifier) {_		this.qualifiers.put(qualifier.getTypeName(), qualifier)__	};register,a,qualifier,to,be,used,for,autowire,candidate,resolution,keyed,by,the,qualifier,s,type,name,see,autowire,candidate,qualifier,get,type,name;public,void,add,qualifier,autowire,candidate,qualifier,qualifier,this,qualifiers,put,qualifier,get,type,name,qualifier
AbstractBeanDefinition -> public void addQualifier(AutowireCandidateQualifier qualifier);1503008029;Register a qualifier to be used for autowire candidate resolution,_keyed by the qualifier's type name._@see AutowireCandidateQualifier#getTypeName();public void addQualifier(AutowireCandidateQualifier qualifier) {_		this.qualifiers.put(qualifier.getTypeName(), qualifier)__	};register,a,qualifier,to,be,used,for,autowire,candidate,resolution,keyed,by,the,qualifier,s,type,name,see,autowire,candidate,qualifier,get,type,name;public,void,add,qualifier,autowire,candidate,qualifier,qualifier,this,qualifiers,put,qualifier,get,type,name,qualifier
AbstractBeanDefinition -> public void addQualifier(AutowireCandidateQualifier qualifier);1510606271;Register a qualifier to be used for autowire candidate resolution,_keyed by the qualifier's type name._@see AutowireCandidateQualifier#getTypeName();public void addQualifier(AutowireCandidateQualifier qualifier) {_		this.qualifiers.put(qualifier.getTypeName(), qualifier)__	};register,a,qualifier,to,be,used,for,autowire,candidate,resolution,keyed,by,the,qualifier,s,type,name,see,autowire,candidate,qualifier,get,type,name;public,void,add,qualifier,autowire,candidate,qualifier,qualifier,this,qualifiers,put,qualifier,get,type,name,qualifier
AbstractBeanDefinition -> public void addQualifier(AutowireCandidateQualifier qualifier);1510675876;Register a qualifier to be used for autowire candidate resolution,_keyed by the qualifier's type name._@see AutowireCandidateQualifier#getTypeName();public void addQualifier(AutowireCandidateQualifier qualifier) {_		this.qualifiers.put(qualifier.getTypeName(), qualifier)__	};register,a,qualifier,to,be,used,for,autowire,candidate,resolution,keyed,by,the,qualifier,s,type,name,see,autowire,candidate,qualifier,get,type,name;public,void,add,qualifier,autowire,candidate,qualifier,qualifier,this,qualifiers,put,qualifier,get,type,name,qualifier
AbstractBeanDefinition -> public void addQualifier(AutowireCandidateQualifier qualifier);1530174524;Register a qualifier to be used for autowire candidate resolution,_keyed by the qualifier's type name._@see AutowireCandidateQualifier#getTypeName();public void addQualifier(AutowireCandidateQualifier qualifier) {_		this.qualifiers.put(qualifier.getTypeName(), qualifier)__	};register,a,qualifier,to,be,used,for,autowire,candidate,resolution,keyed,by,the,qualifier,s,type,name,see,autowire,candidate,qualifier,get,type,name;public,void,add,qualifier,autowire,candidate,qualifier,qualifier,this,qualifiers,put,qualifier,get,type,name,qualifier
AbstractBeanDefinition -> public void addQualifier(AutowireCandidateQualifier qualifier);1530174524;Register a qualifier to be used for autowire candidate resolution,_keyed by the qualifier's type name._@see AutowireCandidateQualifier#getTypeName();public void addQualifier(AutowireCandidateQualifier qualifier) {_		this.qualifiers.put(qualifier.getTypeName(), qualifier)__	};register,a,qualifier,to,be,used,for,autowire,candidate,resolution,keyed,by,the,qualifier,s,type,name,see,autowire,candidate,qualifier,get,type,name;public,void,add,qualifier,autowire,candidate,qualifier,qualifier,this,qualifiers,put,qualifier,get,type,name,qualifier
AbstractBeanDefinition -> public void addQualifier(AutowireCandidateQualifier qualifier);1530174524;Register a qualifier to be used for autowire candidate resolution,_keyed by the qualifier's type name._@see AutowireCandidateQualifier#getTypeName();public void addQualifier(AutowireCandidateQualifier qualifier) {_		this.qualifiers.put(qualifier.getTypeName(), qualifier)__	};register,a,qualifier,to,be,used,for,autowire,candidate,resolution,keyed,by,the,qualifier,s,type,name,see,autowire,candidate,qualifier,get,type,name;public,void,add,qualifier,autowire,candidate,qualifier,qualifier,this,qualifiers,put,qualifier,get,type,name,qualifier
AbstractBeanDefinition -> public void addQualifier(AutowireCandidateQualifier qualifier);1530190293;Register a qualifier to be used for autowire candidate resolution,_keyed by the qualifier's type name._@see AutowireCandidateQualifier#getTypeName();public void addQualifier(AutowireCandidateQualifier qualifier) {_		this.qualifiers.put(qualifier.getTypeName(), qualifier)__	};register,a,qualifier,to,be,used,for,autowire,candidate,resolution,keyed,by,the,qualifier,s,type,name,see,autowire,candidate,qualifier,get,type,name;public,void,add,qualifier,autowire,candidate,qualifier,qualifier,this,qualifiers,put,qualifier,get,type,name,qualifier
AbstractBeanDefinition -> public void addQualifier(AutowireCandidateQualifier qualifier);1532981251;Register a qualifier to be used for autowire candidate resolution,_keyed by the qualifier's type name._@see AutowireCandidateQualifier#getTypeName();public void addQualifier(AutowireCandidateQualifier qualifier) {_		this.qualifiers.put(qualifier.getTypeName(), qualifier)__	};register,a,qualifier,to,be,used,for,autowire,candidate,resolution,keyed,by,the,qualifier,s,type,name,see,autowire,candidate,qualifier,get,type,name;public,void,add,qualifier,autowire,candidate,qualifier,qualifier,this,qualifiers,put,qualifier,get,type,name,qualifier
AbstractBeanDefinition -> public void addQualifier(AutowireCandidateQualifier qualifier);1536863076;Register a qualifier to be used for autowire candidate resolution,_keyed by the qualifier's type name._@see AutowireCandidateQualifier#getTypeName();public void addQualifier(AutowireCandidateQualifier qualifier) {_		this.qualifiers.put(qualifier.getTypeName(), qualifier)__	};register,a,qualifier,to,be,used,for,autowire,candidate,resolution,keyed,by,the,qualifier,s,type,name,see,autowire,candidate,qualifier,get,type,name;public,void,add,qualifier,autowire,candidate,qualifier,qualifier,this,qualifiers,put,qualifier,get,type,name,qualifier
AbstractBeanDefinition -> public void setInitMethodName(@Nullable String initMethodName);1496837955;Set the name of the initializer method._<p>The default is {@code null} in which case there is no initializer method.;public void setInitMethodName(@Nullable String initMethodName) {_		this.initMethodName = initMethodName__	};set,the,name,of,the,initializer,method,p,the,default,is,code,null,in,which,case,there,is,no,initializer,method;public,void,set,init,method,name,nullable,string,init,method,name,this,init,method,name,init,method,name
AbstractBeanDefinition -> public void setInitMethodName(@Nullable String initMethodName);1498780456;Set the name of the initializer method._<p>The default is {@code null} in which case there is no initializer method.;public void setInitMethodName(@Nullable String initMethodName) {_		this.initMethodName = initMethodName__	};set,the,name,of,the,initializer,method,p,the,default,is,code,null,in,which,case,there,is,no,initializer,method;public,void,set,init,method,name,nullable,string,init,method,name,this,init,method,name,init,method,name
AbstractBeanDefinition -> public void setInitMethodName(@Nullable String initMethodName);1502974979;Set the name of the initializer method._<p>The default is {@code null} in which case there is no initializer method.;public void setInitMethodName(@Nullable String initMethodName) {_		this.initMethodName = initMethodName__	};set,the,name,of,the,initializer,method,p,the,default,is,code,null,in,which,case,there,is,no,initializer,method;public,void,set,init,method,name,nullable,string,init,method,name,this,init,method,name,init,method,name
AbstractBeanDefinition -> public void setInitMethodName(@Nullable String initMethodName);1503008029;Set the name of the initializer method._<p>The default is {@code null} in which case there is no initializer method.;public void setInitMethodName(@Nullable String initMethodName) {_		this.initMethodName = initMethodName__	};set,the,name,of,the,initializer,method,p,the,default,is,code,null,in,which,case,there,is,no,initializer,method;public,void,set,init,method,name,nullable,string,init,method,name,this,init,method,name,init,method,name
AbstractBeanDefinition -> public void setInitMethodName(@Nullable String initMethodName);1510606271;Set the name of the initializer method._<p>The default is {@code null} in which case there is no initializer method.;public void setInitMethodName(@Nullable String initMethodName) {_		this.initMethodName = initMethodName__	};set,the,name,of,the,initializer,method,p,the,default,is,code,null,in,which,case,there,is,no,initializer,method;public,void,set,init,method,name,nullable,string,init,method,name,this,init,method,name,init,method,name
AbstractBeanDefinition -> public void setInitMethodName(@Nullable String initMethodName);1510675876;Set the name of the initializer method._<p>The default is {@code null} in which case there is no initializer method.;public void setInitMethodName(@Nullable String initMethodName) {_		this.initMethodName = initMethodName__	};set,the,name,of,the,initializer,method,p,the,default,is,code,null,in,which,case,there,is,no,initializer,method;public,void,set,init,method,name,nullable,string,init,method,name,this,init,method,name,init,method,name
AbstractBeanDefinition -> public void setInitMethodName(@Nullable String initMethodName);1530174524;Set the name of the initializer method._<p>The default is {@code null} in which case there is no initializer method.;public void setInitMethodName(@Nullable String initMethodName) {_		this.initMethodName = initMethodName__	};set,the,name,of,the,initializer,method,p,the,default,is,code,null,in,which,case,there,is,no,initializer,method;public,void,set,init,method,name,nullable,string,init,method,name,this,init,method,name,init,method,name
AbstractBeanDefinition -> public void setInitMethodName(@Nullable String initMethodName);1530174524;Set the name of the initializer method._<p>The default is {@code null} in which case there is no initializer method.;public void setInitMethodName(@Nullable String initMethodName) {_		this.initMethodName = initMethodName__	};set,the,name,of,the,initializer,method,p,the,default,is,code,null,in,which,case,there,is,no,initializer,method;public,void,set,init,method,name,nullable,string,init,method,name,this,init,method,name,init,method,name
AbstractBeanDefinition -> public void setInitMethodName(@Nullable String initMethodName);1530174524;Set the name of the initializer method._<p>The default is {@code null} in which case there is no initializer method.;public void setInitMethodName(@Nullable String initMethodName) {_		this.initMethodName = initMethodName__	};set,the,name,of,the,initializer,method,p,the,default,is,code,null,in,which,case,there,is,no,initializer,method;public,void,set,init,method,name,nullable,string,init,method,name,this,init,method,name,init,method,name
AbstractBeanDefinition -> public void setInitMethodName(@Nullable String initMethodName);1530190293;Set the name of the initializer method._<p>The default is {@code null} in which case there is no initializer method.;public void setInitMethodName(@Nullable String initMethodName) {_		this.initMethodName = initMethodName__	};set,the,name,of,the,initializer,method,p,the,default,is,code,null,in,which,case,there,is,no,initializer,method;public,void,set,init,method,name,nullable,string,init,method,name,this,init,method,name,init,method,name
AbstractBeanDefinition -> public void setInitMethodName(@Nullable String initMethodName);1532981251;Set the name of the initializer method._<p>The default is {@code null} in which case there is no initializer method.;public void setInitMethodName(@Nullable String initMethodName) {_		this.initMethodName = initMethodName__	};set,the,name,of,the,initializer,method,p,the,default,is,code,null,in,which,case,there,is,no,initializer,method;public,void,set,init,method,name,nullable,string,init,method,name,this,init,method,name,init,method,name
AbstractBeanDefinition -> public void setResourceDescription(@Nullable String resourceDescription);1496837955;Set a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;public void setResourceDescription(@Nullable String resourceDescription) {_		this.resource = (resourceDescription != null ? new DescriptiveResource(resourceDescription) : null)__	};set,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,description,nullable,string,resource,description,this,resource,resource,description,null,new,descriptive,resource,resource,description,null
AbstractBeanDefinition -> public void setResourceDescription(@Nullable String resourceDescription);1498780456;Set a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;public void setResourceDescription(@Nullable String resourceDescription) {_		this.resource = (resourceDescription != null ? new DescriptiveResource(resourceDescription) : null)__	};set,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,description,nullable,string,resource,description,this,resource,resource,description,null,new,descriptive,resource,resource,description,null
AbstractBeanDefinition -> public void setResourceDescription(@Nullable String resourceDescription);1502974979;Set a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;public void setResourceDescription(@Nullable String resourceDescription) {_		this.resource = (resourceDescription != null ? new DescriptiveResource(resourceDescription) : null)__	};set,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,description,nullable,string,resource,description,this,resource,resource,description,null,new,descriptive,resource,resource,description,null
AbstractBeanDefinition -> public void setResourceDescription(@Nullable String resourceDescription);1503008029;Set a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;public void setResourceDescription(@Nullable String resourceDescription) {_		this.resource = (resourceDescription != null ? new DescriptiveResource(resourceDescription) : null)__	};set,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,description,nullable,string,resource,description,this,resource,resource,description,null,new,descriptive,resource,resource,description,null
AbstractBeanDefinition -> public void setResourceDescription(@Nullable String resourceDescription);1510606271;Set a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;public void setResourceDescription(@Nullable String resourceDescription) {_		this.resource = (resourceDescription != null ? new DescriptiveResource(resourceDescription) : null)__	};set,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,description,nullable,string,resource,description,this,resource,resource,description,null,new,descriptive,resource,resource,description,null
AbstractBeanDefinition -> public void setResourceDescription(@Nullable String resourceDescription);1510675876;Set a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;public void setResourceDescription(@Nullable String resourceDescription) {_		this.resource = (resourceDescription != null ? new DescriptiveResource(resourceDescription) : null)__	};set,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,description,nullable,string,resource,description,this,resource,resource,description,null,new,descriptive,resource,resource,description,null
AbstractBeanDefinition -> public void setResourceDescription(@Nullable String resourceDescription);1530174524;Set a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;public void setResourceDescription(@Nullable String resourceDescription) {_		this.resource = (resourceDescription != null ? new DescriptiveResource(resourceDescription) : null)__	};set,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,description,nullable,string,resource,description,this,resource,resource,description,null,new,descriptive,resource,resource,description,null
AbstractBeanDefinition -> public void setResourceDescription(@Nullable String resourceDescription);1530174524;Set a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;public void setResourceDescription(@Nullable String resourceDescription) {_		this.resource = (resourceDescription != null ? new DescriptiveResource(resourceDescription) : null)__	};set,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,description,nullable,string,resource,description,this,resource,resource,description,null,new,descriptive,resource,resource,description,null
AbstractBeanDefinition -> public void setResourceDescription(@Nullable String resourceDescription);1530174524;Set a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;public void setResourceDescription(@Nullable String resourceDescription) {_		this.resource = (resourceDescription != null ? new DescriptiveResource(resourceDescription) : null)__	};set,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,description,nullable,string,resource,description,this,resource,resource,description,null,new,descriptive,resource,resource,description,null
AbstractBeanDefinition -> public void setResourceDescription(@Nullable String resourceDescription);1530190293;Set a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;public void setResourceDescription(@Nullable String resourceDescription) {_		this.resource = (resourceDescription != null ? new DescriptiveResource(resourceDescription) : null)__	};set,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,description,nullable,string,resource,description,this,resource,resource,description,null,new,descriptive,resource,resource,description,null
AbstractBeanDefinition -> public void setResourceDescription(@Nullable String resourceDescription);1532981251;Set a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;public void setResourceDescription(@Nullable String resourceDescription) {_		this.resource = (resourceDescription != null ? new DescriptiveResource(resourceDescription) : null)__	};set,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,description,nullable,string,resource,description,this,resource,resource,description,null,new,descriptive,resource,resource,description,null
AbstractBeanDefinition -> public void setResourceDescription(@Nullable String resourceDescription);1536863076;Set a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;public void setResourceDescription(@Nullable String resourceDescription) {_		this.resource = (resourceDescription != null ? new DescriptiveResource(resourceDescription) : null)__	};set,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,description,nullable,string,resource,description,this,resource,resource,description,null,new,descriptive,resource,resource,description,null
AbstractBeanDefinition -> @Nullable 	public String getDestroyMethodName();1495868221;Return the name of the destroy method.;@Nullable_	public String getDestroyMethodName() {_		return this.destroyMethodName__	};return,the,name,of,the,destroy,method;nullable,public,string,get,destroy,method,name,return,this,destroy,method,name
AbstractBeanDefinition -> @Nullable 	public String getDestroyMethodName();1496837955;Return the name of the destroy method.;@Nullable_	public String getDestroyMethodName() {_		return this.destroyMethodName__	};return,the,name,of,the,destroy,method;nullable,public,string,get,destroy,method,name,return,this,destroy,method,name
AbstractBeanDefinition -> @Nullable 	public String getDestroyMethodName();1498780456;Return the name of the destroy method.;@Nullable_	public String getDestroyMethodName() {_		return this.destroyMethodName__	};return,the,name,of,the,destroy,method;nullable,public,string,get,destroy,method,name,return,this,destroy,method,name
AbstractBeanDefinition -> @Nullable 	public String getDestroyMethodName();1502974979;Return the name of the destroy method.;@Nullable_	public String getDestroyMethodName() {_		return this.destroyMethodName__	};return,the,name,of,the,destroy,method;nullable,public,string,get,destroy,method,name,return,this,destroy,method,name
AbstractBeanDefinition -> @Nullable 	public String getDestroyMethodName();1503008029;Return the name of the destroy method.;@Nullable_	public String getDestroyMethodName() {_		return this.destroyMethodName__	};return,the,name,of,the,destroy,method;nullable,public,string,get,destroy,method,name,return,this,destroy,method,name
AbstractBeanDefinition -> @Nullable 	public String getDestroyMethodName();1510606271;Return the name of the destroy method.;@Nullable_	public String getDestroyMethodName() {_		return this.destroyMethodName__	};return,the,name,of,the,destroy,method;nullable,public,string,get,destroy,method,name,return,this,destroy,method,name
AbstractBeanDefinition -> @Nullable 	public String getDestroyMethodName();1510675876;Return the name of the destroy method.;@Nullable_	public String getDestroyMethodName() {_		return this.destroyMethodName__	};return,the,name,of,the,destroy,method;nullable,public,string,get,destroy,method,name,return,this,destroy,method,name
AbstractBeanDefinition -> @Nullable 	public String getDestroyMethodName();1530174524;Return the name of the destroy method.;@Nullable_	public String getDestroyMethodName() {_		return this.destroyMethodName__	};return,the,name,of,the,destroy,method;nullable,public,string,get,destroy,method,name,return,this,destroy,method,name
AbstractBeanDefinition -> @Nullable 	public String getDestroyMethodName();1530174524;Return the name of the destroy method.;@Nullable_	public String getDestroyMethodName() {_		return this.destroyMethodName__	};return,the,name,of,the,destroy,method;nullable,public,string,get,destroy,method,name,return,this,destroy,method,name
AbstractBeanDefinition -> @Nullable 	public String getDestroyMethodName();1530174524;Return the name of the destroy method.;@Nullable_	public String getDestroyMethodName() {_		return this.destroyMethodName__	};return,the,name,of,the,destroy,method;nullable,public,string,get,destroy,method,name,return,this,destroy,method,name
AbstractBeanDefinition -> @Nullable 	public String getDestroyMethodName();1530190293;Return the name of the destroy method.;@Nullable_	public String getDestroyMethodName() {_		return this.destroyMethodName__	};return,the,name,of,the,destroy,method;nullable,public,string,get,destroy,method,name,return,this,destroy,method,name
AbstractBeanDefinition -> @Nullable 	public String getDestroyMethodName();1532981251;Return the name of the destroy method.;@Nullable_	public String getDestroyMethodName() {_		return this.destroyMethodName__	};return,the,name,of,the,destroy,method;nullable,public,string,get,destroy,method,name,return,this,destroy,method,name
AbstractBeanDefinition -> public void setConstructorArgumentValues(@Nullable ConstructorArgumentValues constructorArgumentValues);1496837955;Specify constructor argument values for this bean.;public void setConstructorArgumentValues(@Nullable ConstructorArgumentValues constructorArgumentValues) {_		this.constructorArgumentValues =_				(constructorArgumentValues != null ? constructorArgumentValues : new ConstructorArgumentValues())__	};specify,constructor,argument,values,for,this,bean;public,void,set,constructor,argument,values,nullable,constructor,argument,values,constructor,argument,values,this,constructor,argument,values,constructor,argument,values,null,constructor,argument,values,new,constructor,argument,values
AbstractBeanDefinition -> public void setConstructorArgumentValues(@Nullable ConstructorArgumentValues constructorArgumentValues);1498780456;Specify constructor argument values for this bean.;public void setConstructorArgumentValues(@Nullable ConstructorArgumentValues constructorArgumentValues) {_		this.constructorArgumentValues =_				(constructorArgumentValues != null ? constructorArgumentValues : new ConstructorArgumentValues())__	};specify,constructor,argument,values,for,this,bean;public,void,set,constructor,argument,values,nullable,constructor,argument,values,constructor,argument,values,this,constructor,argument,values,constructor,argument,values,null,constructor,argument,values,new,constructor,argument,values
AbstractBeanDefinition -> public void setConstructorArgumentValues(@Nullable ConstructorArgumentValues constructorArgumentValues);1502974979;Specify constructor argument values for this bean.;public void setConstructorArgumentValues(@Nullable ConstructorArgumentValues constructorArgumentValues) {_		this.constructorArgumentValues =_				(constructorArgumentValues != null ? constructorArgumentValues : new ConstructorArgumentValues())__	};specify,constructor,argument,values,for,this,bean;public,void,set,constructor,argument,values,nullable,constructor,argument,values,constructor,argument,values,this,constructor,argument,values,constructor,argument,values,null,constructor,argument,values,new,constructor,argument,values
AbstractBeanDefinition -> public void setConstructorArgumentValues(@Nullable ConstructorArgumentValues constructorArgumentValues);1503008029;Specify constructor argument values for this bean.;public void setConstructorArgumentValues(@Nullable ConstructorArgumentValues constructorArgumentValues) {_		this.constructorArgumentValues =_				(constructorArgumentValues != null ? constructorArgumentValues : new ConstructorArgumentValues())__	};specify,constructor,argument,values,for,this,bean;public,void,set,constructor,argument,values,nullable,constructor,argument,values,constructor,argument,values,this,constructor,argument,values,constructor,argument,values,null,constructor,argument,values,new,constructor,argument,values
AbstractBeanDefinition -> public void prepareMethodOverrides() throws BeanDefinitionValidationException;1328020251;Validate and prepare the method overrides defined for this bean._Checks for existence of a method with the specified name._@throws BeanDefinitionValidationException in case of validation failure;public void prepareMethodOverrides() throws BeanDefinitionValidationException {_		_		MethodOverrides methodOverrides = getMethodOverrides()__		if (!methodOverrides.isEmpty()) {_			for (MethodOverride mo : methodOverrides.getOverrides()) {_				prepareMethodOverride(mo)__			}_		}_	};validate,and,prepare,the,method,overrides,defined,for,this,bean,checks,for,existence,of,a,method,with,the,specified,name,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,prepare,method,overrides,throws,bean,definition,validation,exception,method,overrides,method,overrides,get,method,overrides,if,method,overrides,is,empty,for,method,override,mo,method,overrides,get,overrides,prepare,method,override,mo
AbstractBeanDefinition -> public void prepareMethodOverrides() throws BeanDefinitionValidationException;1337202589;Validate and prepare the method overrides defined for this bean._Checks for existence of a method with the specified name._@throws BeanDefinitionValidationException in case of validation failure;public void prepareMethodOverrides() throws BeanDefinitionValidationException {_		_		MethodOverrides methodOverrides = getMethodOverrides()__		if (!methodOverrides.isEmpty()) {_			for (MethodOverride mo : methodOverrides.getOverrides()) {_				prepareMethodOverride(mo)__			}_		}_	};validate,and,prepare,the,method,overrides,defined,for,this,bean,checks,for,existence,of,a,method,with,the,specified,name,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,prepare,method,overrides,throws,bean,definition,validation,exception,method,overrides,method,overrides,get,method,overrides,if,method,overrides,is,empty,for,method,override,mo,method,overrides,get,overrides,prepare,method,override,mo
AbstractBeanDefinition -> public void prepareMethodOverrides() throws BeanDefinitionValidationException;1356735495;Validate and prepare the method overrides defined for this bean._Checks for existence of a method with the specified name._@throws BeanDefinitionValidationException in case of validation failure;public void prepareMethodOverrides() throws BeanDefinitionValidationException {_		_		MethodOverrides methodOverrides = getMethodOverrides()__		if (!methodOverrides.isEmpty()) {_			for (MethodOverride mo : methodOverrides.getOverrides()) {_				prepareMethodOverride(mo)__			}_		}_	};validate,and,prepare,the,method,overrides,defined,for,this,bean,checks,for,existence,of,a,method,with,the,specified,name,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,prepare,method,overrides,throws,bean,definition,validation,exception,method,overrides,method,overrides,get,method,overrides,if,method,overrides,is,empty,for,method,override,mo,method,overrides,get,overrides,prepare,method,override,mo
AbstractBeanDefinition -> public void prepareMethodOverrides() throws BeanDefinitionValidationException;1357119239;Validate and prepare the method overrides defined for this bean._Checks for existence of a method with the specified name._@throws BeanDefinitionValidationException in case of validation failure;public void prepareMethodOverrides() throws BeanDefinitionValidationException {_		_		MethodOverrides methodOverrides = getMethodOverrides()__		if (!methodOverrides.isEmpty()) {_			for (MethodOverride mo : methodOverrides.getOverrides()) {_				prepareMethodOverride(mo)__			}_		}_	};validate,and,prepare,the,method,overrides,defined,for,this,bean,checks,for,existence,of,a,method,with,the,specified,name,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,prepare,method,overrides,throws,bean,definition,validation,exception,method,overrides,method,overrides,get,method,overrides,if,method,overrides,is,empty,for,method,override,mo,method,overrides,get,overrides,prepare,method,override,mo
AbstractBeanDefinition -> public void prepareMethodOverrides() throws BeanDefinitionValidationException;1367508310;Validate and prepare the method overrides defined for this bean._Checks for existence of a method with the specified name._@throws BeanDefinitionValidationException in case of validation failure;public void prepareMethodOverrides() throws BeanDefinitionValidationException {_		_		MethodOverrides methodOverrides = getMethodOverrides()__		if (!methodOverrides.isEmpty()) {_			for (MethodOverride mo : methodOverrides.getOverrides()) {_				prepareMethodOverride(mo)__			}_		}_	};validate,and,prepare,the,method,overrides,defined,for,this,bean,checks,for,existence,of,a,method,with,the,specified,name,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,prepare,method,overrides,throws,bean,definition,validation,exception,method,overrides,method,overrides,get,method,overrides,if,method,overrides,is,empty,for,method,override,mo,method,overrides,get,overrides,prepare,method,override,mo
AbstractBeanDefinition -> public void prepareMethodOverrides() throws BeanDefinitionValidationException;1367943112;Validate and prepare the method overrides defined for this bean._Checks for existence of a method with the specified name._@throws BeanDefinitionValidationException in case of validation failure;public void prepareMethodOverrides() throws BeanDefinitionValidationException {_		_		MethodOverrides methodOverrides = getMethodOverrides()__		if (!methodOverrides.isEmpty()) {_			for (MethodOverride mo : methodOverrides.getOverrides()) {_				prepareMethodOverride(mo)__			}_		}_	};validate,and,prepare,the,method,overrides,defined,for,this,bean,checks,for,existence,of,a,method,with,the,specified,name,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,prepare,method,overrides,throws,bean,definition,validation,exception,method,overrides,method,overrides,get,method,overrides,if,method,overrides,is,empty,for,method,override,mo,method,overrides,get,overrides,prepare,method,override,mo
AbstractBeanDefinition -> public void prepareMethodOverrides() throws BeanDefinitionValidationException;1368482696;Validate and prepare the method overrides defined for this bean._Checks for existence of a method with the specified name._@throws BeanDefinitionValidationException in case of validation failure;public void prepareMethodOverrides() throws BeanDefinitionValidationException {_		_		MethodOverrides methodOverrides = getMethodOverrides()__		if (!methodOverrides.isEmpty()) {_			for (MethodOverride mo : methodOverrides.getOverrides()) {_				prepareMethodOverride(mo)__			}_		}_	};validate,and,prepare,the,method,overrides,defined,for,this,bean,checks,for,existence,of,a,method,with,the,specified,name,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,prepare,method,overrides,throws,bean,definition,validation,exception,method,overrides,method,overrides,get,method,overrides,if,method,overrides,is,empty,for,method,override,mo,method,overrides,get,overrides,prepare,method,override,mo
AbstractBeanDefinition -> public void prepareMethodOverrides() throws BeanDefinitionValidationException;1385412762;Validate and prepare the method overrides defined for this bean._Checks for existence of a method with the specified name._@throws BeanDefinitionValidationException in case of validation failure;public void prepareMethodOverrides() throws BeanDefinitionValidationException {_		_		MethodOverrides methodOverrides = getMethodOverrides()__		if (!methodOverrides.isEmpty()) {_			for (MethodOverride mo : methodOverrides.getOverrides()) {_				prepareMethodOverride(mo)__			}_		}_	};validate,and,prepare,the,method,overrides,defined,for,this,bean,checks,for,existence,of,a,method,with,the,specified,name,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,prepare,method,overrides,throws,bean,definition,validation,exception,method,overrides,method,overrides,get,method,overrides,if,method,overrides,is,empty,for,method,override,mo,method,overrides,get,overrides,prepare,method,override,mo
AbstractBeanDefinition -> public void prepareMethodOverrides() throws BeanDefinitionValidationException;1392245317;Validate and prepare the method overrides defined for this bean._Checks for existence of a method with the specified name._@throws BeanDefinitionValidationException in case of validation failure;public void prepareMethodOverrides() throws BeanDefinitionValidationException {_		_		MethodOverrides methodOverrides = getMethodOverrides()__		if (!methodOverrides.isEmpty()) {_			for (MethodOverride mo : methodOverrides.getOverrides()) {_				prepareMethodOverride(mo)__			}_		}_	};validate,and,prepare,the,method,overrides,defined,for,this,bean,checks,for,existence,of,a,method,with,the,specified,name,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,prepare,method,overrides,throws,bean,definition,validation,exception,method,overrides,method,overrides,get,method,overrides,if,method,overrides,is,empty,for,method,override,mo,method,overrides,get,overrides,prepare,method,override,mo
AbstractBeanDefinition -> public void prepareMethodOverrides() throws BeanDefinitionValidationException;1397163142;Validate and prepare the method overrides defined for this bean._Checks for existence of a method with the specified name._@throws BeanDefinitionValidationException in case of validation failure;public void prepareMethodOverrides() throws BeanDefinitionValidationException {_		_		MethodOverrides methodOverrides = getMethodOverrides()__		if (!methodOverrides.isEmpty()) {_			for (MethodOverride mo : methodOverrides.getOverrides()) {_				prepareMethodOverride(mo)__			}_		}_	};validate,and,prepare,the,method,overrides,defined,for,this,bean,checks,for,existence,of,a,method,with,the,specified,name,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,prepare,method,overrides,throws,bean,definition,validation,exception,method,overrides,method,overrides,get,method,overrides,if,method,overrides,is,empty,for,method,override,mo,method,overrides,get,overrides,prepare,method,override,mo
AbstractBeanDefinition -> public void prepareMethodOverrides() throws BeanDefinitionValidationException;1398898390;Validate and prepare the method overrides defined for this bean._Checks for existence of a method with the specified name._@throws BeanDefinitionValidationException in case of validation failure;public void prepareMethodOverrides() throws BeanDefinitionValidationException {_		_		MethodOverrides methodOverrides = getMethodOverrides()__		if (!methodOverrides.isEmpty()) {_			for (MethodOverride mo : methodOverrides.getOverrides()) {_				prepareMethodOverride(mo)__			}_		}_	};validate,and,prepare,the,method,overrides,defined,for,this,bean,checks,for,existence,of,a,method,with,the,specified,name,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,prepare,method,overrides,throws,bean,definition,validation,exception,method,overrides,method,overrides,get,method,overrides,if,method,overrides,is,empty,for,method,override,mo,method,overrides,get,overrides,prepare,method,override,mo
AbstractBeanDefinition -> public void prepareMethodOverrides() throws BeanDefinitionValidationException;1407511029;Validate and prepare the method overrides defined for this bean._Checks for existence of a method with the specified name._@throws BeanDefinitionValidationException in case of validation failure;public void prepareMethodOverrides() throws BeanDefinitionValidationException {_		_		MethodOverrides methodOverrides = getMethodOverrides()__		if (!methodOverrides.isEmpty()) {_			for (MethodOverride mo : methodOverrides.getOverrides()) {_				prepareMethodOverride(mo)__			}_		}_	};validate,and,prepare,the,method,overrides,defined,for,this,bean,checks,for,existence,of,a,method,with,the,specified,name,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,prepare,method,overrides,throws,bean,definition,validation,exception,method,overrides,method,overrides,get,method,overrides,if,method,overrides,is,empty,for,method,override,mo,method,overrides,get,overrides,prepare,method,override,mo
AbstractBeanDefinition -> public void prepareMethodOverrides() throws BeanDefinitionValidationException;1432135182;Validate and prepare the method overrides defined for this bean._Checks for existence of a method with the specified name._@throws BeanDefinitionValidationException in case of validation failure;public void prepareMethodOverrides() throws BeanDefinitionValidationException {_		_		MethodOverrides methodOverrides = getMethodOverrides()__		if (!methodOverrides.isEmpty()) {_			for (MethodOverride mo : methodOverrides.getOverrides()) {_				prepareMethodOverride(mo)__			}_		}_	};validate,and,prepare,the,method,overrides,defined,for,this,bean,checks,for,existence,of,a,method,with,the,specified,name,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,prepare,method,overrides,throws,bean,definition,validation,exception,method,overrides,method,overrides,get,method,overrides,if,method,overrides,is,empty,for,method,override,mo,method,overrides,get,overrides,prepare,method,override,mo
AbstractBeanDefinition -> public void prepareMethodOverrides() throws BeanDefinitionValidationException;1434204509;Validate and prepare the method overrides defined for this bean._Checks for existence of a method with the specified name._@throws BeanDefinitionValidationException in case of validation failure;public void prepareMethodOverrides() throws BeanDefinitionValidationException {_		_		MethodOverrides methodOverrides = getMethodOverrides()__		if (!methodOverrides.isEmpty()) {_			for (MethodOverride mo : methodOverrides.getOverrides()) {_				prepareMethodOverride(mo)__			}_		}_	};validate,and,prepare,the,method,overrides,defined,for,this,bean,checks,for,existence,of,a,method,with,the,specified,name,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,prepare,method,overrides,throws,bean,definition,validation,exception,method,overrides,method,overrides,get,method,overrides,if,method,overrides,is,empty,for,method,override,mo,method,overrides,get,overrides,prepare,method,override,mo
AbstractBeanDefinition -> public void prepareMethodOverrides() throws BeanDefinitionValidationException;1447323728;Validate and prepare the method overrides defined for this bean._Checks for existence of a method with the specified name._@throws BeanDefinitionValidationException in case of validation failure;public void prepareMethodOverrides() throws BeanDefinitionValidationException {_		_		MethodOverrides methodOverrides = getMethodOverrides()__		if (!methodOverrides.isEmpty()) {_			for (MethodOverride mo : methodOverrides.getOverrides()) {_				prepareMethodOverride(mo)__			}_		}_	};validate,and,prepare,the,method,overrides,defined,for,this,bean,checks,for,existence,of,a,method,with,the,specified,name,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,prepare,method,overrides,throws,bean,definition,validation,exception,method,overrides,method,overrides,get,method,overrides,if,method,overrides,is,empty,for,method,override,mo,method,overrides,get,overrides,prepare,method,override,mo
AbstractBeanDefinition -> public void prepareMethodOverrides() throws BeanDefinitionValidationException;1465226156;Validate and prepare the method overrides defined for this bean._Checks for existence of a method with the specified name._@throws BeanDefinitionValidationException in case of validation failure;public void prepareMethodOverrides() throws BeanDefinitionValidationException {_		_		MethodOverrides methodOverrides = getMethodOverrides()__		if (!methodOverrides.isEmpty()) {_			Set<MethodOverride> overrides = methodOverrides.getOverrides()__			synchronized (overrides) {_				for (MethodOverride mo : overrides) {_					prepareMethodOverride(mo)__				}_			}_		}_	};validate,and,prepare,the,method,overrides,defined,for,this,bean,checks,for,existence,of,a,method,with,the,specified,name,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,prepare,method,overrides,throws,bean,definition,validation,exception,method,overrides,method,overrides,get,method,overrides,if,method,overrides,is,empty,set,method,override,overrides,method,overrides,get,overrides,synchronized,overrides,for,method,override,mo,overrides,prepare,method,override,mo
AbstractBeanDefinition -> public void prepareMethodOverrides() throws BeanDefinitionValidationException;1467730834;Validate and prepare the method overrides defined for this bean._Checks for existence of a method with the specified name._@throws BeanDefinitionValidationException in case of validation failure;public void prepareMethodOverrides() throws BeanDefinitionValidationException {_		_		MethodOverrides methodOverrides = getMethodOverrides()__		if (!methodOverrides.isEmpty()) {_			Set<MethodOverride> overrides = methodOverrides.getOverrides()__			synchronized (overrides) {_				for (MethodOverride mo : overrides) {_					prepareMethodOverride(mo)__				}_			}_		}_	};validate,and,prepare,the,method,overrides,defined,for,this,bean,checks,for,existence,of,a,method,with,the,specified,name,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,prepare,method,overrides,throws,bean,definition,validation,exception,method,overrides,method,overrides,get,method,overrides,if,method,overrides,is,empty,set,method,override,overrides,method,overrides,get,overrides,synchronized,overrides,for,method,override,mo,overrides,prepare,method,override,mo
AbstractBeanDefinition -> public void prepareMethodOverrides() throws BeanDefinitionValidationException;1467846264;Validate and prepare the method overrides defined for this bean._Checks for existence of a method with the specified name._@throws BeanDefinitionValidationException in case of validation failure;public void prepareMethodOverrides() throws BeanDefinitionValidationException {_		_		MethodOverrides methodOverrides = getMethodOverrides()__		if (!methodOverrides.isEmpty()) {_			Set<MethodOverride> overrides = methodOverrides.getOverrides()__			synchronized (overrides) {_				for (MethodOverride mo : overrides) {_					prepareMethodOverride(mo)__				}_			}_		}_	};validate,and,prepare,the,method,overrides,defined,for,this,bean,checks,for,existence,of,a,method,with,the,specified,name,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,prepare,method,overrides,throws,bean,definition,validation,exception,method,overrides,method,overrides,get,method,overrides,if,method,overrides,is,empty,set,method,override,overrides,method,overrides,get,overrides,synchronized,overrides,for,method,override,mo,overrides,prepare,method,override,mo
AbstractBeanDefinition -> public void prepareMethodOverrides() throws BeanDefinitionValidationException;1482091545;Validate and prepare the method overrides defined for this bean._Checks for existence of a method with the specified name._@throws BeanDefinitionValidationException in case of validation failure;public void prepareMethodOverrides() throws BeanDefinitionValidationException {_		_		MethodOverrides methodOverrides = getMethodOverrides()__		if (!methodOverrides.isEmpty()) {_			Set<MethodOverride> overrides = methodOverrides.getOverrides()__			synchronized (overrides) {_				for (MethodOverride mo : overrides) {_					prepareMethodOverride(mo)__				}_			}_		}_	};validate,and,prepare,the,method,overrides,defined,for,this,bean,checks,for,existence,of,a,method,with,the,specified,name,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,prepare,method,overrides,throws,bean,definition,validation,exception,method,overrides,method,overrides,get,method,overrides,if,method,overrides,is,empty,set,method,override,overrides,method,overrides,get,overrides,synchronized,overrides,for,method,override,mo,overrides,prepare,method,override,mo
AbstractBeanDefinition -> public void prepareMethodOverrides() throws BeanDefinitionValidationException;1483093818;Validate and prepare the method overrides defined for this bean._Checks for existence of a method with the specified name._@throws BeanDefinitionValidationException in case of validation failure;public void prepareMethodOverrides() throws BeanDefinitionValidationException {_		_		MethodOverrides methodOverrides = getMethodOverrides()__		if (!methodOverrides.isEmpty()) {_			Set<MethodOverride> overrides = methodOverrides.getOverrides()__			synchronized (overrides) {_				for (MethodOverride mo : overrides) {_					prepareMethodOverride(mo)__				}_			}_		}_	};validate,and,prepare,the,method,overrides,defined,for,this,bean,checks,for,existence,of,a,method,with,the,specified,name,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,prepare,method,overrides,throws,bean,definition,validation,exception,method,overrides,method,overrides,get,method,overrides,if,method,overrides,is,empty,set,method,override,overrides,method,overrides,get,overrides,synchronized,overrides,for,method,override,mo,overrides,prepare,method,override,mo
AbstractBeanDefinition -> public void prepareMethodOverrides() throws BeanDefinitionValidationException;1495868221;Validate and prepare the method overrides defined for this bean._Checks for existence of a method with the specified name._@throws BeanDefinitionValidationException in case of validation failure;public void prepareMethodOverrides() throws BeanDefinitionValidationException {_		_		MethodOverrides methodOverrides = getMethodOverrides()__		if (!methodOverrides.isEmpty()) {_			Set<MethodOverride> overrides = methodOverrides.getOverrides()__			synchronized (overrides) {_				for (MethodOverride mo : overrides) {_					prepareMethodOverride(mo)__				}_			}_		}_	};validate,and,prepare,the,method,overrides,defined,for,this,bean,checks,for,existence,of,a,method,with,the,specified,name,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,prepare,method,overrides,throws,bean,definition,validation,exception,method,overrides,method,overrides,get,method,overrides,if,method,overrides,is,empty,set,method,override,overrides,method,overrides,get,overrides,synchronized,overrides,for,method,override,mo,overrides,prepare,method,override,mo
AbstractBeanDefinition -> public void prepareMethodOverrides() throws BeanDefinitionValidationException;1496837955;Validate and prepare the method overrides defined for this bean._Checks for existence of a method with the specified name._@throws BeanDefinitionValidationException in case of validation failure;public void prepareMethodOverrides() throws BeanDefinitionValidationException {_		_		MethodOverrides methodOverrides = getMethodOverrides()__		if (!methodOverrides.isEmpty()) {_			Set<MethodOverride> overrides = methodOverrides.getOverrides()__			synchronized (overrides) {_				for (MethodOverride mo : overrides) {_					prepareMethodOverride(mo)__				}_			}_		}_	};validate,and,prepare,the,method,overrides,defined,for,this,bean,checks,for,existence,of,a,method,with,the,specified,name,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,prepare,method,overrides,throws,bean,definition,validation,exception,method,overrides,method,overrides,get,method,overrides,if,method,overrides,is,empty,set,method,override,overrides,method,overrides,get,overrides,synchronized,overrides,for,method,override,mo,overrides,prepare,method,override,mo
AbstractBeanDefinition -> public void prepareMethodOverrides() throws BeanDefinitionValidationException;1498780456;Validate and prepare the method overrides defined for this bean._Checks for existence of a method with the specified name._@throws BeanDefinitionValidationException in case of validation failure;public void prepareMethodOverrides() throws BeanDefinitionValidationException {_		_		MethodOverrides methodOverrides = getMethodOverrides()__		if (!methodOverrides.isEmpty()) {_			Set<MethodOverride> overrides = methodOverrides.getOverrides()__			synchronized (overrides) {_				for (MethodOverride mo : overrides) {_					prepareMethodOverride(mo)__				}_			}_		}_	};validate,and,prepare,the,method,overrides,defined,for,this,bean,checks,for,existence,of,a,method,with,the,specified,name,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,prepare,method,overrides,throws,bean,definition,validation,exception,method,overrides,method,overrides,get,method,overrides,if,method,overrides,is,empty,set,method,override,overrides,method,overrides,get,overrides,synchronized,overrides,for,method,override,mo,overrides,prepare,method,override,mo
AbstractBeanDefinition -> public void prepareMethodOverrides() throws BeanDefinitionValidationException;1502974979;Validate and prepare the method overrides defined for this bean._Checks for existence of a method with the specified name._@throws BeanDefinitionValidationException in case of validation failure;public void prepareMethodOverrides() throws BeanDefinitionValidationException {_		_		MethodOverrides methodOverrides = getMethodOverrides()__		if (!methodOverrides.isEmpty()) {_			Set<MethodOverride> overrides = methodOverrides.getOverrides()__			synchronized (overrides) {_				for (MethodOverride mo : overrides) {_					prepareMethodOverride(mo)__				}_			}_		}_	};validate,and,prepare,the,method,overrides,defined,for,this,bean,checks,for,existence,of,a,method,with,the,specified,name,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,prepare,method,overrides,throws,bean,definition,validation,exception,method,overrides,method,overrides,get,method,overrides,if,method,overrides,is,empty,set,method,override,overrides,method,overrides,get,overrides,synchronized,overrides,for,method,override,mo,overrides,prepare,method,override,mo
AbstractBeanDefinition -> public void prepareMethodOverrides() throws BeanDefinitionValidationException;1503008029;Validate and prepare the method overrides defined for this bean._Checks for existence of a method with the specified name._@throws BeanDefinitionValidationException in case of validation failure;public void prepareMethodOverrides() throws BeanDefinitionValidationException {_		_		MethodOverrides methodOverrides = getMethodOverrides()__		if (!methodOverrides.isEmpty()) {_			Set<MethodOverride> overrides = methodOverrides.getOverrides()__			synchronized (overrides) {_				for (MethodOverride mo : overrides) {_					prepareMethodOverride(mo)__				}_			}_		}_	};validate,and,prepare,the,method,overrides,defined,for,this,bean,checks,for,existence,of,a,method,with,the,specified,name,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,prepare,method,overrides,throws,bean,definition,validation,exception,method,overrides,method,overrides,get,method,overrides,if,method,overrides,is,empty,set,method,override,overrides,method,overrides,get,overrides,synchronized,overrides,for,method,override,mo,overrides,prepare,method,override,mo
AbstractBeanDefinition -> public void prepareMethodOverrides() throws BeanDefinitionValidationException;1510606271;Validate and prepare the method overrides defined for this bean._Checks for existence of a method with the specified name._@throws BeanDefinitionValidationException in case of validation failure;public void prepareMethodOverrides() throws BeanDefinitionValidationException {_		_		if (hasMethodOverrides()) {_			Set<MethodOverride> overrides = getMethodOverrides().getOverrides()__			synchronized (overrides) {_				for (MethodOverride mo : overrides) {_					prepareMethodOverride(mo)__				}_			}_		}_	};validate,and,prepare,the,method,overrides,defined,for,this,bean,checks,for,existence,of,a,method,with,the,specified,name,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,prepare,method,overrides,throws,bean,definition,validation,exception,if,has,method,overrides,set,method,override,overrides,get,method,overrides,get,overrides,synchronized,overrides,for,method,override,mo,overrides,prepare,method,override,mo
AbstractBeanDefinition -> public void prepareMethodOverrides() throws BeanDefinitionValidationException;1510675876;Validate and prepare the method overrides defined for this bean._Checks for existence of a method with the specified name._@throws BeanDefinitionValidationException in case of validation failure;public void prepareMethodOverrides() throws BeanDefinitionValidationException {_		_		if (hasMethodOverrides()) {_			Set<MethodOverride> overrides = getMethodOverrides().getOverrides()__			synchronized (overrides) {_				for (MethodOverride mo : overrides) {_					prepareMethodOverride(mo)__				}_			}_		}_	};validate,and,prepare,the,method,overrides,defined,for,this,bean,checks,for,existence,of,a,method,with,the,specified,name,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,prepare,method,overrides,throws,bean,definition,validation,exception,if,has,method,overrides,set,method,override,overrides,get,method,overrides,get,overrides,synchronized,overrides,for,method,override,mo,overrides,prepare,method,override,mo
AbstractBeanDefinition -> public void prepareMethodOverrides() throws BeanDefinitionValidationException;1530174524;Validate and prepare the method overrides defined for this bean._Checks for existence of a method with the specified name._@throws BeanDefinitionValidationException in case of validation failure;public void prepareMethodOverrides() throws BeanDefinitionValidationException {_		_		if (hasMethodOverrides()) {_			Set<MethodOverride> overrides = getMethodOverrides().getOverrides()__			synchronized (overrides) {_				for (MethodOverride mo : overrides) {_					prepareMethodOverride(mo)__				}_			}_		}_	};validate,and,prepare,the,method,overrides,defined,for,this,bean,checks,for,existence,of,a,method,with,the,specified,name,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,prepare,method,overrides,throws,bean,definition,validation,exception,if,has,method,overrides,set,method,override,overrides,get,method,overrides,get,overrides,synchronized,overrides,for,method,override,mo,overrides,prepare,method,override,mo
AbstractBeanDefinition -> public void prepareMethodOverrides() throws BeanDefinitionValidationException;1530174524;Validate and prepare the method overrides defined for this bean._Checks for existence of a method with the specified name._@throws BeanDefinitionValidationException in case of validation failure;public void prepareMethodOverrides() throws BeanDefinitionValidationException {_		_		if (hasMethodOverrides()) {_			Set<MethodOverride> overrides = getMethodOverrides().getOverrides()__			synchronized (overrides) {_				for (MethodOverride mo : overrides) {_					prepareMethodOverride(mo)__				}_			}_		}_	};validate,and,prepare,the,method,overrides,defined,for,this,bean,checks,for,existence,of,a,method,with,the,specified,name,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,prepare,method,overrides,throws,bean,definition,validation,exception,if,has,method,overrides,set,method,override,overrides,get,method,overrides,get,overrides,synchronized,overrides,for,method,override,mo,overrides,prepare,method,override,mo
AbstractBeanDefinition -> public void prepareMethodOverrides() throws BeanDefinitionValidationException;1530174524;Validate and prepare the method overrides defined for this bean._Checks for existence of a method with the specified name._@throws BeanDefinitionValidationException in case of validation failure;public void prepareMethodOverrides() throws BeanDefinitionValidationException {_		_		if (hasMethodOverrides()) {_			Set<MethodOverride> overrides = getMethodOverrides().getOverrides()__			synchronized (overrides) {_				for (MethodOverride mo : overrides) {_					prepareMethodOverride(mo)__				}_			}_		}_	};validate,and,prepare,the,method,overrides,defined,for,this,bean,checks,for,existence,of,a,method,with,the,specified,name,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,prepare,method,overrides,throws,bean,definition,validation,exception,if,has,method,overrides,set,method,override,overrides,get,method,overrides,get,overrides,synchronized,overrides,for,method,override,mo,overrides,prepare,method,override,mo
AbstractBeanDefinition -> public void prepareMethodOverrides() throws BeanDefinitionValidationException;1530190293;Validate and prepare the method overrides defined for this bean._Checks for existence of a method with the specified name._@throws BeanDefinitionValidationException in case of validation failure;public void prepareMethodOverrides() throws BeanDefinitionValidationException {_		_		if (hasMethodOverrides()) {_			Set<MethodOverride> overrides = getMethodOverrides().getOverrides()__			synchronized (overrides) {_				for (MethodOverride mo : overrides) {_					prepareMethodOverride(mo)__				}_			}_		}_	};validate,and,prepare,the,method,overrides,defined,for,this,bean,checks,for,existence,of,a,method,with,the,specified,name,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,prepare,method,overrides,throws,bean,definition,validation,exception,if,has,method,overrides,set,method,override,overrides,get,method,overrides,get,overrides,synchronized,overrides,for,method,override,mo,overrides,prepare,method,override,mo
AbstractBeanDefinition -> public void prepareMethodOverrides() throws BeanDefinitionValidationException;1532981251;Validate and prepare the method overrides defined for this bean._Checks for existence of a method with the specified name._@throws BeanDefinitionValidationException in case of validation failure;public void prepareMethodOverrides() throws BeanDefinitionValidationException {_		_		if (hasMethodOverrides()) {_			Set<MethodOverride> overrides = getMethodOverrides().getOverrides()__			synchronized (overrides) {_				for (MethodOverride mo : overrides) {_					prepareMethodOverride(mo)__				}_			}_		}_	};validate,and,prepare,the,method,overrides,defined,for,this,bean,checks,for,existence,of,a,method,with,the,specified,name,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,prepare,method,overrides,throws,bean,definition,validation,exception,if,has,method,overrides,set,method,override,overrides,get,method,overrides,get,overrides,synchronized,overrides,for,method,override,mo,overrides,prepare,method,override,mo
AbstractBeanDefinition -> public void prepareMethodOverrides() throws BeanDefinitionValidationException;1536863076;Validate and prepare the method overrides defined for this bean._Checks for existence of a method with the specified name._@throws BeanDefinitionValidationException in case of validation failure;public void prepareMethodOverrides() throws BeanDefinitionValidationException {_		_		if (hasMethodOverrides()) {_			Set<MethodOverride> overrides = getMethodOverrides().getOverrides()__			synchronized (overrides) {_				for (MethodOverride mo : overrides) {_					prepareMethodOverride(mo)__				}_			}_		}_	};validate,and,prepare,the,method,overrides,defined,for,this,bean,checks,for,existence,of,a,method,with,the,specified,name,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,prepare,method,overrides,throws,bean,definition,validation,exception,if,has,method,overrides,set,method,override,overrides,get,method,overrides,get,overrides,synchronized,overrides,for,method,override,mo,overrides,prepare,method,override,mo
AbstractBeanDefinition -> public int getAutowireMode();1328020251;Return the autowire mode as specified in the bean definition.;public int getAutowireMode() {_		return this.autowireMode__	};return,the,autowire,mode,as,specified,in,the,bean,definition;public,int,get,autowire,mode,return,this,autowire,mode
AbstractBeanDefinition -> public int getAutowireMode();1337202589;Return the autowire mode as specified in the bean definition.;public int getAutowireMode() {_		return this.autowireMode__	};return,the,autowire,mode,as,specified,in,the,bean,definition;public,int,get,autowire,mode,return,this,autowire,mode
AbstractBeanDefinition -> public int getAutowireMode();1356735495;Return the autowire mode as specified in the bean definition.;public int getAutowireMode() {_		return this.autowireMode__	};return,the,autowire,mode,as,specified,in,the,bean,definition;public,int,get,autowire,mode,return,this,autowire,mode
AbstractBeanDefinition -> public int getAutowireMode();1357119239;Return the autowire mode as specified in the bean definition.;public int getAutowireMode() {_		return this.autowireMode__	};return,the,autowire,mode,as,specified,in,the,bean,definition;public,int,get,autowire,mode,return,this,autowire,mode
AbstractBeanDefinition -> public int getAutowireMode();1367508310;Return the autowire mode as specified in the bean definition.;public int getAutowireMode() {_		return this.autowireMode__	};return,the,autowire,mode,as,specified,in,the,bean,definition;public,int,get,autowire,mode,return,this,autowire,mode
AbstractBeanDefinition -> public int getAutowireMode();1367943112;Return the autowire mode as specified in the bean definition.;public int getAutowireMode() {_		return this.autowireMode__	};return,the,autowire,mode,as,specified,in,the,bean,definition;public,int,get,autowire,mode,return,this,autowire,mode
AbstractBeanDefinition -> public int getAutowireMode();1368482696;Return the autowire mode as specified in the bean definition.;public int getAutowireMode() {_		return this.autowireMode__	};return,the,autowire,mode,as,specified,in,the,bean,definition;public,int,get,autowire,mode,return,this,autowire,mode
AbstractBeanDefinition -> public int getAutowireMode();1385412762;Return the autowire mode as specified in the bean definition.;public int getAutowireMode() {_		return this.autowireMode__	};return,the,autowire,mode,as,specified,in,the,bean,definition;public,int,get,autowire,mode,return,this,autowire,mode
AbstractBeanDefinition -> public int getAutowireMode();1392245317;Return the autowire mode as specified in the bean definition.;public int getAutowireMode() {_		return this.autowireMode__	};return,the,autowire,mode,as,specified,in,the,bean,definition;public,int,get,autowire,mode,return,this,autowire,mode
AbstractBeanDefinition -> public int getAutowireMode();1397163142;Return the autowire mode as specified in the bean definition.;public int getAutowireMode() {_		return this.autowireMode__	};return,the,autowire,mode,as,specified,in,the,bean,definition;public,int,get,autowire,mode,return,this,autowire,mode
AbstractBeanDefinition -> public int getAutowireMode();1398898390;Return the autowire mode as specified in the bean definition.;public int getAutowireMode() {_		return this.autowireMode__	};return,the,autowire,mode,as,specified,in,the,bean,definition;public,int,get,autowire,mode,return,this,autowire,mode
AbstractBeanDefinition -> public int getAutowireMode();1407511029;Return the autowire mode as specified in the bean definition.;public int getAutowireMode() {_		return this.autowireMode__	};return,the,autowire,mode,as,specified,in,the,bean,definition;public,int,get,autowire,mode,return,this,autowire,mode
AbstractBeanDefinition -> public int getAutowireMode();1432135182;Return the autowire mode as specified in the bean definition.;public int getAutowireMode() {_		return this.autowireMode__	};return,the,autowire,mode,as,specified,in,the,bean,definition;public,int,get,autowire,mode,return,this,autowire,mode
AbstractBeanDefinition -> public int getAutowireMode();1434204509;Return the autowire mode as specified in the bean definition.;public int getAutowireMode() {_		return this.autowireMode__	};return,the,autowire,mode,as,specified,in,the,bean,definition;public,int,get,autowire,mode,return,this,autowire,mode
AbstractBeanDefinition -> public int getAutowireMode();1447323728;Return the autowire mode as specified in the bean definition.;public int getAutowireMode() {_		return this.autowireMode__	};return,the,autowire,mode,as,specified,in,the,bean,definition;public,int,get,autowire,mode,return,this,autowire,mode
AbstractBeanDefinition -> public int getAutowireMode();1465226156;Return the autowire mode as specified in the bean definition.;public int getAutowireMode() {_		return this.autowireMode__	};return,the,autowire,mode,as,specified,in,the,bean,definition;public,int,get,autowire,mode,return,this,autowire,mode
AbstractBeanDefinition -> public int getAutowireMode();1467730834;Return the autowire mode as specified in the bean definition.;public int getAutowireMode() {_		return this.autowireMode__	};return,the,autowire,mode,as,specified,in,the,bean,definition;public,int,get,autowire,mode,return,this,autowire,mode
AbstractBeanDefinition -> public int getAutowireMode();1467846264;Return the autowire mode as specified in the bean definition.;public int getAutowireMode() {_		return this.autowireMode__	};return,the,autowire,mode,as,specified,in,the,bean,definition;public,int,get,autowire,mode,return,this,autowire,mode
AbstractBeanDefinition -> public int getAutowireMode();1482091545;Return the autowire mode as specified in the bean definition.;public int getAutowireMode() {_		return this.autowireMode__	};return,the,autowire,mode,as,specified,in,the,bean,definition;public,int,get,autowire,mode,return,this,autowire,mode
AbstractBeanDefinition -> public int getAutowireMode();1483093818;Return the autowire mode as specified in the bean definition.;public int getAutowireMode() {_		return this.autowireMode__	};return,the,autowire,mode,as,specified,in,the,bean,definition;public,int,get,autowire,mode,return,this,autowire,mode
AbstractBeanDefinition -> public int getAutowireMode();1495868221;Return the autowire mode as specified in the bean definition.;public int getAutowireMode() {_		return this.autowireMode__	};return,the,autowire,mode,as,specified,in,the,bean,definition;public,int,get,autowire,mode,return,this,autowire,mode
AbstractBeanDefinition -> public int getAutowireMode();1496837955;Return the autowire mode as specified in the bean definition.;public int getAutowireMode() {_		return this.autowireMode__	};return,the,autowire,mode,as,specified,in,the,bean,definition;public,int,get,autowire,mode,return,this,autowire,mode
AbstractBeanDefinition -> public int getAutowireMode();1498780456;Return the autowire mode as specified in the bean definition.;public int getAutowireMode() {_		return this.autowireMode__	};return,the,autowire,mode,as,specified,in,the,bean,definition;public,int,get,autowire,mode,return,this,autowire,mode
AbstractBeanDefinition -> public int getAutowireMode();1502974979;Return the autowire mode as specified in the bean definition.;public int getAutowireMode() {_		return this.autowireMode__	};return,the,autowire,mode,as,specified,in,the,bean,definition;public,int,get,autowire,mode,return,this,autowire,mode
AbstractBeanDefinition -> public int getAutowireMode();1503008029;Return the autowire mode as specified in the bean definition.;public int getAutowireMode() {_		return this.autowireMode__	};return,the,autowire,mode,as,specified,in,the,bean,definition;public,int,get,autowire,mode,return,this,autowire,mode
AbstractBeanDefinition -> public int getAutowireMode();1510606271;Return the autowire mode as specified in the bean definition.;public int getAutowireMode() {_		return this.autowireMode__	};return,the,autowire,mode,as,specified,in,the,bean,definition;public,int,get,autowire,mode,return,this,autowire,mode
AbstractBeanDefinition -> public int getAutowireMode();1510675876;Return the autowire mode as specified in the bean definition.;public int getAutowireMode() {_		return this.autowireMode__	};return,the,autowire,mode,as,specified,in,the,bean,definition;public,int,get,autowire,mode,return,this,autowire,mode
AbstractBeanDefinition -> public int getAutowireMode();1530174524;Return the autowire mode as specified in the bean definition.;public int getAutowireMode() {_		return this.autowireMode__	};return,the,autowire,mode,as,specified,in,the,bean,definition;public,int,get,autowire,mode,return,this,autowire,mode
AbstractBeanDefinition -> public int getAutowireMode();1530174524;Return the autowire mode as specified in the bean definition.;public int getAutowireMode() {_		return this.autowireMode__	};return,the,autowire,mode,as,specified,in,the,bean,definition;public,int,get,autowire,mode,return,this,autowire,mode
AbstractBeanDefinition -> public int getAutowireMode();1530174524;Return the autowire mode as specified in the bean definition.;public int getAutowireMode() {_		return this.autowireMode__	};return,the,autowire,mode,as,specified,in,the,bean,definition;public,int,get,autowire,mode,return,this,autowire,mode
AbstractBeanDefinition -> public int getAutowireMode();1530190293;Return the autowire mode as specified in the bean definition.;public int getAutowireMode() {_		return this.autowireMode__	};return,the,autowire,mode,as,specified,in,the,bean,definition;public,int,get,autowire,mode,return,this,autowire,mode
AbstractBeanDefinition -> public int getAutowireMode();1532981251;Return the autowire mode as specified in the bean definition.;public int getAutowireMode() {_		return this.autowireMode__	};return,the,autowire,mode,as,specified,in,the,bean,definition;public,int,get,autowire,mode,return,this,autowire,mode
AbstractBeanDefinition -> public int getAutowireMode();1536863076;Return the autowire mode as specified in the bean definition.;public int getAutowireMode() {_		return this.autowireMode__	};return,the,autowire,mode,as,specified,in,the,bean,definition;public,int,get,autowire,mode,return,this,autowire,mode
AbstractBeanDefinition -> protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs);1328020251;Create a new AbstractBeanDefinition with the given_constructor argument values and property values.;protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		setConstructorArgumentValues(cargs)__		setPropertyValues(pvs)__	};create,a,new,abstract,bean,definition,with,the,given,constructor,argument,values,and,property,values;protected,abstract,bean,definition,constructor,argument,values,cargs,mutable,property,values,pvs,set,constructor,argument,values,cargs,set,property,values,pvs
AbstractBeanDefinition -> protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs);1337202589;Create a new AbstractBeanDefinition with the given_constructor argument values and property values.;protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		setConstructorArgumentValues(cargs)__		setPropertyValues(pvs)__	};create,a,new,abstract,bean,definition,with,the,given,constructor,argument,values,and,property,values;protected,abstract,bean,definition,constructor,argument,values,cargs,mutable,property,values,pvs,set,constructor,argument,values,cargs,set,property,values,pvs
AbstractBeanDefinition -> protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs);1356735495;Create a new AbstractBeanDefinition with the given_constructor argument values and property values.;protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		setConstructorArgumentValues(cargs)__		setPropertyValues(pvs)__	};create,a,new,abstract,bean,definition,with,the,given,constructor,argument,values,and,property,values;protected,abstract,bean,definition,constructor,argument,values,cargs,mutable,property,values,pvs,set,constructor,argument,values,cargs,set,property,values,pvs
AbstractBeanDefinition -> protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs);1357119239;Create a new AbstractBeanDefinition with the given_constructor argument values and property values.;protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		setConstructorArgumentValues(cargs)__		setPropertyValues(pvs)__	};create,a,new,abstract,bean,definition,with,the,given,constructor,argument,values,and,property,values;protected,abstract,bean,definition,constructor,argument,values,cargs,mutable,property,values,pvs,set,constructor,argument,values,cargs,set,property,values,pvs
AbstractBeanDefinition -> protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs);1367508310;Create a new AbstractBeanDefinition with the given_constructor argument values and property values.;protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		setConstructorArgumentValues(cargs)__		setPropertyValues(pvs)__	};create,a,new,abstract,bean,definition,with,the,given,constructor,argument,values,and,property,values;protected,abstract,bean,definition,constructor,argument,values,cargs,mutable,property,values,pvs,set,constructor,argument,values,cargs,set,property,values,pvs
AbstractBeanDefinition -> protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs);1367943112;Create a new AbstractBeanDefinition with the given_constructor argument values and property values.;protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		setConstructorArgumentValues(cargs)__		setPropertyValues(pvs)__	};create,a,new,abstract,bean,definition,with,the,given,constructor,argument,values,and,property,values;protected,abstract,bean,definition,constructor,argument,values,cargs,mutable,property,values,pvs,set,constructor,argument,values,cargs,set,property,values,pvs
AbstractBeanDefinition -> protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs);1368482696;Create a new AbstractBeanDefinition with the given_constructor argument values and property values.;protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		setConstructorArgumentValues(cargs)__		setPropertyValues(pvs)__	};create,a,new,abstract,bean,definition,with,the,given,constructor,argument,values,and,property,values;protected,abstract,bean,definition,constructor,argument,values,cargs,mutable,property,values,pvs,set,constructor,argument,values,cargs,set,property,values,pvs
AbstractBeanDefinition -> protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs);1385412762;Create a new AbstractBeanDefinition with the given_constructor argument values and property values.;protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		setConstructorArgumentValues(cargs)__		setPropertyValues(pvs)__	};create,a,new,abstract,bean,definition,with,the,given,constructor,argument,values,and,property,values;protected,abstract,bean,definition,constructor,argument,values,cargs,mutable,property,values,pvs,set,constructor,argument,values,cargs,set,property,values,pvs
AbstractBeanDefinition -> protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs);1392245317;Create a new AbstractBeanDefinition with the given_constructor argument values and property values.;protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		setConstructorArgumentValues(cargs)__		setPropertyValues(pvs)__	};create,a,new,abstract,bean,definition,with,the,given,constructor,argument,values,and,property,values;protected,abstract,bean,definition,constructor,argument,values,cargs,mutable,property,values,pvs,set,constructor,argument,values,cargs,set,property,values,pvs
AbstractBeanDefinition -> protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs);1397163142;Create a new AbstractBeanDefinition with the given_constructor argument values and property values.;protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		setConstructorArgumentValues(cargs)__		setPropertyValues(pvs)__	};create,a,new,abstract,bean,definition,with,the,given,constructor,argument,values,and,property,values;protected,abstract,bean,definition,constructor,argument,values,cargs,mutable,property,values,pvs,set,constructor,argument,values,cargs,set,property,values,pvs
AbstractBeanDefinition -> protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs);1398898390;Create a new AbstractBeanDefinition with the given_constructor argument values and property values.;protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		setConstructorArgumentValues(cargs)__		setPropertyValues(pvs)__	};create,a,new,abstract,bean,definition,with,the,given,constructor,argument,values,and,property,values;protected,abstract,bean,definition,constructor,argument,values,cargs,mutable,property,values,pvs,set,constructor,argument,values,cargs,set,property,values,pvs
AbstractBeanDefinition -> protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs);1407511029;Create a new AbstractBeanDefinition with the given_constructor argument values and property values.;protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		setConstructorArgumentValues(cargs)__		setPropertyValues(pvs)__	};create,a,new,abstract,bean,definition,with,the,given,constructor,argument,values,and,property,values;protected,abstract,bean,definition,constructor,argument,values,cargs,mutable,property,values,pvs,set,constructor,argument,values,cargs,set,property,values,pvs
AbstractBeanDefinition -> protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs);1432135182;Create a new AbstractBeanDefinition with the given_constructor argument values and property values.;protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		setConstructorArgumentValues(cargs)__		setPropertyValues(pvs)__	};create,a,new,abstract,bean,definition,with,the,given,constructor,argument,values,and,property,values;protected,abstract,bean,definition,constructor,argument,values,cargs,mutable,property,values,pvs,set,constructor,argument,values,cargs,set,property,values,pvs
AbstractBeanDefinition -> protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs);1434204509;Create a new AbstractBeanDefinition with the given_constructor argument values and property values.;protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		setConstructorArgumentValues(cargs)__		setPropertyValues(pvs)__	};create,a,new,abstract,bean,definition,with,the,given,constructor,argument,values,and,property,values;protected,abstract,bean,definition,constructor,argument,values,cargs,mutable,property,values,pvs,set,constructor,argument,values,cargs,set,property,values,pvs
AbstractBeanDefinition -> protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs);1447323728;Create a new AbstractBeanDefinition with the given_constructor argument values and property values.;protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		setConstructorArgumentValues(cargs)__		setPropertyValues(pvs)__	};create,a,new,abstract,bean,definition,with,the,given,constructor,argument,values,and,property,values;protected,abstract,bean,definition,constructor,argument,values,cargs,mutable,property,values,pvs,set,constructor,argument,values,cargs,set,property,values,pvs
AbstractBeanDefinition -> protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs);1465226156;Create a new AbstractBeanDefinition with the given_constructor argument values and property values.;protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		setConstructorArgumentValues(cargs)__		setPropertyValues(pvs)__	};create,a,new,abstract,bean,definition,with,the,given,constructor,argument,values,and,property,values;protected,abstract,bean,definition,constructor,argument,values,cargs,mutable,property,values,pvs,set,constructor,argument,values,cargs,set,property,values,pvs
AbstractBeanDefinition -> protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs);1467730834;Create a new AbstractBeanDefinition with the given_constructor argument values and property values.;protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		setConstructorArgumentValues(cargs)__		setPropertyValues(pvs)__	};create,a,new,abstract,bean,definition,with,the,given,constructor,argument,values,and,property,values;protected,abstract,bean,definition,constructor,argument,values,cargs,mutable,property,values,pvs,set,constructor,argument,values,cargs,set,property,values,pvs
AbstractBeanDefinition -> protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs);1467846264;Create a new AbstractBeanDefinition with the given_constructor argument values and property values.;protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		setConstructorArgumentValues(cargs)__		setPropertyValues(pvs)__	};create,a,new,abstract,bean,definition,with,the,given,constructor,argument,values,and,property,values;protected,abstract,bean,definition,constructor,argument,values,cargs,mutable,property,values,pvs,set,constructor,argument,values,cargs,set,property,values,pvs
AbstractBeanDefinition -> protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs);1482091545;Create a new AbstractBeanDefinition with the given_constructor argument values and property values.;protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		setConstructorArgumentValues(cargs)__		setPropertyValues(pvs)__	};create,a,new,abstract,bean,definition,with,the,given,constructor,argument,values,and,property,values;protected,abstract,bean,definition,constructor,argument,values,cargs,mutable,property,values,pvs,set,constructor,argument,values,cargs,set,property,values,pvs
AbstractBeanDefinition -> protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs);1483093818;Create a new AbstractBeanDefinition with the given_constructor argument values and property values.;protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		setConstructorArgumentValues(cargs)__		setPropertyValues(pvs)__	};create,a,new,abstract,bean,definition,with,the,given,constructor,argument,values,and,property,values;protected,abstract,bean,definition,constructor,argument,values,cargs,mutable,property,values,pvs,set,constructor,argument,values,cargs,set,property,values,pvs
AbstractBeanDefinition -> protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs);1495868221;Create a new AbstractBeanDefinition with the given_constructor argument values and property values.;protected AbstractBeanDefinition(ConstructorArgumentValues cargs, MutablePropertyValues pvs) {_		setConstructorArgumentValues(cargs)__		setPropertyValues(pvs)__	};create,a,new,abstract,bean,definition,with,the,given,constructor,argument,values,and,property,values;protected,abstract,bean,definition,constructor,argument,values,cargs,mutable,property,values,pvs,set,constructor,argument,values,cargs,set,property,values,pvs
AbstractBeanDefinition -> public void setBeanClass(Class<?> beanClass);1328020251;Specify the class for this bean.;public void setBeanClass(Class<?> beanClass) {_		this.beanClass = beanClass__	};specify,the,class,for,this,bean;public,void,set,bean,class,class,bean,class,this,bean,class,bean,class
AbstractBeanDefinition -> public void setBeanClass(Class<?> beanClass);1337202589;Specify the class for this bean.;public void setBeanClass(Class<?> beanClass) {_		this.beanClass = beanClass__	};specify,the,class,for,this,bean;public,void,set,bean,class,class,bean,class,this,bean,class,bean,class
AbstractBeanDefinition -> public void setBeanClass(Class<?> beanClass);1356735495;Specify the class for this bean.;public void setBeanClass(Class<?> beanClass) {_		this.beanClass = beanClass__	};specify,the,class,for,this,bean;public,void,set,bean,class,class,bean,class,this,bean,class,bean,class
AbstractBeanDefinition -> public void setBeanClass(Class<?> beanClass);1357119239;Specify the class for this bean.;public void setBeanClass(Class<?> beanClass) {_		this.beanClass = beanClass__	};specify,the,class,for,this,bean;public,void,set,bean,class,class,bean,class,this,bean,class,bean,class
AbstractBeanDefinition -> public void setBeanClass(Class<?> beanClass);1367508310;Specify the class for this bean.;public void setBeanClass(Class<?> beanClass) {_		this.beanClass = beanClass__	};specify,the,class,for,this,bean;public,void,set,bean,class,class,bean,class,this,bean,class,bean,class
AbstractBeanDefinition -> public void setBeanClass(Class<?> beanClass);1367943112;Specify the class for this bean.;public void setBeanClass(Class<?> beanClass) {_		this.beanClass = beanClass__	};specify,the,class,for,this,bean;public,void,set,bean,class,class,bean,class,this,bean,class,bean,class
AbstractBeanDefinition -> public void setBeanClass(Class<?> beanClass);1368482696;Specify the class for this bean.;public void setBeanClass(Class<?> beanClass) {_		this.beanClass = beanClass__	};specify,the,class,for,this,bean;public,void,set,bean,class,class,bean,class,this,bean,class,bean,class
AbstractBeanDefinition -> public void setBeanClass(Class<?> beanClass);1385412762;Specify the class for this bean.;public void setBeanClass(Class<?> beanClass) {_		this.beanClass = beanClass__	};specify,the,class,for,this,bean;public,void,set,bean,class,class,bean,class,this,bean,class,bean,class
AbstractBeanDefinition -> public void setBeanClass(Class<?> beanClass);1392245317;Specify the class for this bean.;public void setBeanClass(Class<?> beanClass) {_		this.beanClass = beanClass__	};specify,the,class,for,this,bean;public,void,set,bean,class,class,bean,class,this,bean,class,bean,class
AbstractBeanDefinition -> public void setBeanClass(Class<?> beanClass);1397163142;Specify the class for this bean.;public void setBeanClass(Class<?> beanClass) {_		this.beanClass = beanClass__	};specify,the,class,for,this,bean;public,void,set,bean,class,class,bean,class,this,bean,class,bean,class
AbstractBeanDefinition -> public void setBeanClass(Class<?> beanClass);1398898390;Specify the class for this bean.;public void setBeanClass(Class<?> beanClass) {_		this.beanClass = beanClass__	};specify,the,class,for,this,bean;public,void,set,bean,class,class,bean,class,this,bean,class,bean,class
AbstractBeanDefinition -> public void setBeanClass(Class<?> beanClass);1407511029;Specify the class for this bean.;public void setBeanClass(Class<?> beanClass) {_		this.beanClass = beanClass__	};specify,the,class,for,this,bean;public,void,set,bean,class,class,bean,class,this,bean,class,bean,class
AbstractBeanDefinition -> public void setBeanClass(Class<?> beanClass);1432135182;Specify the class for this bean.;public void setBeanClass(Class<?> beanClass) {_		this.beanClass = beanClass__	};specify,the,class,for,this,bean;public,void,set,bean,class,class,bean,class,this,bean,class,bean,class
AbstractBeanDefinition -> public void setBeanClass(Class<?> beanClass);1434204509;Specify the class for this bean.;public void setBeanClass(Class<?> beanClass) {_		this.beanClass = beanClass__	};specify,the,class,for,this,bean;public,void,set,bean,class,class,bean,class,this,bean,class,bean,class
AbstractBeanDefinition -> public void setBeanClass(Class<?> beanClass);1447323728;Specify the class for this bean.;public void setBeanClass(Class<?> beanClass) {_		this.beanClass = beanClass__	};specify,the,class,for,this,bean;public,void,set,bean,class,class,bean,class,this,bean,class,bean,class
AbstractBeanDefinition -> public void setBeanClass(Class<?> beanClass);1465226156;Specify the class for this bean.;public void setBeanClass(Class<?> beanClass) {_		this.beanClass = beanClass__	};specify,the,class,for,this,bean;public,void,set,bean,class,class,bean,class,this,bean,class,bean,class
AbstractBeanDefinition -> public void setBeanClass(Class<?> beanClass);1467730834;Specify the class for this bean.;public void setBeanClass(Class<?> beanClass) {_		this.beanClass = beanClass__	};specify,the,class,for,this,bean;public,void,set,bean,class,class,bean,class,this,bean,class,bean,class
AbstractBeanDefinition -> public void setBeanClass(Class<?> beanClass);1467846264;Specify the class for this bean.;public void setBeanClass(Class<?> beanClass) {_		this.beanClass = beanClass__	};specify,the,class,for,this,bean;public,void,set,bean,class,class,bean,class,this,bean,class,bean,class
AbstractBeanDefinition -> public void setBeanClass(Class<?> beanClass);1482091545;Specify the class for this bean.;public void setBeanClass(Class<?> beanClass) {_		this.beanClass = beanClass__	};specify,the,class,for,this,bean;public,void,set,bean,class,class,bean,class,this,bean,class,bean,class
AbstractBeanDefinition -> public void setBeanClass(Class<?> beanClass);1483093818;Specify the class for this bean.;public void setBeanClass(Class<?> beanClass) {_		this.beanClass = beanClass__	};specify,the,class,for,this,bean;public,void,set,bean,class,class,bean,class,this,bean,class,bean,class
AbstractBeanDefinition -> public void setBeanClass(Class<?> beanClass);1495868221;Specify the class for this bean.;public void setBeanClass(Class<?> beanClass) {_		this.beanClass = beanClass__	};specify,the,class,for,this,bean;public,void,set,bean,class,class,bean,class,this,bean,class,bean,class
AbstractBeanDefinition -> protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException;1328020251;Validate and prepare the given method override._Checks for existence of a method with the specified name,_marking it as not overloaded if none found._@param mo the MethodOverride object to validate_@throws BeanDefinitionValidationException in case of validation failure;protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException {_		int count = ClassUtils.getMethodCountForName(getBeanClass(), mo.getMethodName())__		if (count == 0) {_			throw new BeanDefinitionValidationException(_					"Invalid method override: no method with name '" + mo.getMethodName() +_					"' on class [" + getBeanClassName() + "]")__		}_		else if (count == 1) {_			_			mo.setOverloaded(false)__		}_	};validate,and,prepare,the,given,method,override,checks,for,existence,of,a,method,with,the,specified,name,marking,it,as,not,overloaded,if,none,found,param,mo,the,method,override,object,to,validate,throws,bean,definition,validation,exception,in,case,of,validation,failure;protected,void,prepare,method,override,method,override,mo,throws,bean,definition,validation,exception,int,count,class,utils,get,method,count,for,name,get,bean,class,mo,get,method,name,if,count,0,throw,new,bean,definition,validation,exception,invalid,method,override,no,method,with,name,mo,get,method,name,on,class,get,bean,class,name,else,if,count,1,mo,set,overloaded,false
AbstractBeanDefinition -> protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException;1337202589;Validate and prepare the given method override._Checks for existence of a method with the specified name,_marking it as not overloaded if none found._@param mo the MethodOverride object to validate_@throws BeanDefinitionValidationException in case of validation failure;protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException {_		int count = ClassUtils.getMethodCountForName(getBeanClass(), mo.getMethodName())__		if (count == 0) {_			throw new BeanDefinitionValidationException(_					"Invalid method override: no method with name '" + mo.getMethodName() +_					"' on class [" + getBeanClassName() + "]")__		}_		else if (count == 1) {_			_			mo.setOverloaded(false)__		}_	};validate,and,prepare,the,given,method,override,checks,for,existence,of,a,method,with,the,specified,name,marking,it,as,not,overloaded,if,none,found,param,mo,the,method,override,object,to,validate,throws,bean,definition,validation,exception,in,case,of,validation,failure;protected,void,prepare,method,override,method,override,mo,throws,bean,definition,validation,exception,int,count,class,utils,get,method,count,for,name,get,bean,class,mo,get,method,name,if,count,0,throw,new,bean,definition,validation,exception,invalid,method,override,no,method,with,name,mo,get,method,name,on,class,get,bean,class,name,else,if,count,1,mo,set,overloaded,false
AbstractBeanDefinition -> protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException;1356735495;Validate and prepare the given method override._Checks for existence of a method with the specified name,_marking it as not overloaded if none found._@param mo the MethodOverride object to validate_@throws BeanDefinitionValidationException in case of validation failure;protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException {_		int count = ClassUtils.getMethodCountForName(getBeanClass(), mo.getMethodName())__		if (count == 0) {_			throw new BeanDefinitionValidationException(_					"Invalid method override: no method with name '" + mo.getMethodName() +_					"' on class [" + getBeanClassName() + "]")__		}_		else if (count == 1) {_			_			mo.setOverloaded(false)__		}_	};validate,and,prepare,the,given,method,override,checks,for,existence,of,a,method,with,the,specified,name,marking,it,as,not,overloaded,if,none,found,param,mo,the,method,override,object,to,validate,throws,bean,definition,validation,exception,in,case,of,validation,failure;protected,void,prepare,method,override,method,override,mo,throws,bean,definition,validation,exception,int,count,class,utils,get,method,count,for,name,get,bean,class,mo,get,method,name,if,count,0,throw,new,bean,definition,validation,exception,invalid,method,override,no,method,with,name,mo,get,method,name,on,class,get,bean,class,name,else,if,count,1,mo,set,overloaded,false
AbstractBeanDefinition -> protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException;1357119239;Validate and prepare the given method override._Checks for existence of a method with the specified name,_marking it as not overloaded if none found._@param mo the MethodOverride object to validate_@throws BeanDefinitionValidationException in case of validation failure;protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException {_		int count = ClassUtils.getMethodCountForName(getBeanClass(), mo.getMethodName())__		if (count == 0) {_			throw new BeanDefinitionValidationException(_					"Invalid method override: no method with name '" + mo.getMethodName() +_					"' on class [" + getBeanClassName() + "]")__		}_		else if (count == 1) {_			_			mo.setOverloaded(false)__		}_	};validate,and,prepare,the,given,method,override,checks,for,existence,of,a,method,with,the,specified,name,marking,it,as,not,overloaded,if,none,found,param,mo,the,method,override,object,to,validate,throws,bean,definition,validation,exception,in,case,of,validation,failure;protected,void,prepare,method,override,method,override,mo,throws,bean,definition,validation,exception,int,count,class,utils,get,method,count,for,name,get,bean,class,mo,get,method,name,if,count,0,throw,new,bean,definition,validation,exception,invalid,method,override,no,method,with,name,mo,get,method,name,on,class,get,bean,class,name,else,if,count,1,mo,set,overloaded,false
AbstractBeanDefinition -> protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException;1367508310;Validate and prepare the given method override._Checks for existence of a method with the specified name,_marking it as not overloaded if none found._@param mo the MethodOverride object to validate_@throws BeanDefinitionValidationException in case of validation failure;protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException {_		int count = ClassUtils.getMethodCountForName(getBeanClass(), mo.getMethodName())__		if (count == 0) {_			throw new BeanDefinitionValidationException(_					"Invalid method override: no method with name '" + mo.getMethodName() +_					"' on class [" + getBeanClassName() + "]")__		}_		else if (count == 1) {_			_			mo.setOverloaded(false)__		}_	};validate,and,prepare,the,given,method,override,checks,for,existence,of,a,method,with,the,specified,name,marking,it,as,not,overloaded,if,none,found,param,mo,the,method,override,object,to,validate,throws,bean,definition,validation,exception,in,case,of,validation,failure;protected,void,prepare,method,override,method,override,mo,throws,bean,definition,validation,exception,int,count,class,utils,get,method,count,for,name,get,bean,class,mo,get,method,name,if,count,0,throw,new,bean,definition,validation,exception,invalid,method,override,no,method,with,name,mo,get,method,name,on,class,get,bean,class,name,else,if,count,1,mo,set,overloaded,false
AbstractBeanDefinition -> protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException;1367943112;Validate and prepare the given method override._Checks for existence of a method with the specified name,_marking it as not overloaded if none found._@param mo the MethodOverride object to validate_@throws BeanDefinitionValidationException in case of validation failure;protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException {_		int count = ClassUtils.getMethodCountForName(getBeanClass(), mo.getMethodName())__		if (count == 0) {_			throw new BeanDefinitionValidationException(_					"Invalid method override: no method with name '" + mo.getMethodName() +_					"' on class [" + getBeanClassName() + "]")__		}_		else if (count == 1) {_			_			mo.setOverloaded(false)__		}_	};validate,and,prepare,the,given,method,override,checks,for,existence,of,a,method,with,the,specified,name,marking,it,as,not,overloaded,if,none,found,param,mo,the,method,override,object,to,validate,throws,bean,definition,validation,exception,in,case,of,validation,failure;protected,void,prepare,method,override,method,override,mo,throws,bean,definition,validation,exception,int,count,class,utils,get,method,count,for,name,get,bean,class,mo,get,method,name,if,count,0,throw,new,bean,definition,validation,exception,invalid,method,override,no,method,with,name,mo,get,method,name,on,class,get,bean,class,name,else,if,count,1,mo,set,overloaded,false
AbstractBeanDefinition -> protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException;1368482696;Validate and prepare the given method override._Checks for existence of a method with the specified name,_marking it as not overloaded if none found._@param mo the MethodOverride object to validate_@throws BeanDefinitionValidationException in case of validation failure;protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException {_		int count = ClassUtils.getMethodCountForName(getBeanClass(), mo.getMethodName())__		if (count == 0) {_			throw new BeanDefinitionValidationException(_					"Invalid method override: no method with name '" + mo.getMethodName() +_					"' on class [" + getBeanClassName() + "]")__		}_		else if (count == 1) {_			_			mo.setOverloaded(false)__		}_	};validate,and,prepare,the,given,method,override,checks,for,existence,of,a,method,with,the,specified,name,marking,it,as,not,overloaded,if,none,found,param,mo,the,method,override,object,to,validate,throws,bean,definition,validation,exception,in,case,of,validation,failure;protected,void,prepare,method,override,method,override,mo,throws,bean,definition,validation,exception,int,count,class,utils,get,method,count,for,name,get,bean,class,mo,get,method,name,if,count,0,throw,new,bean,definition,validation,exception,invalid,method,override,no,method,with,name,mo,get,method,name,on,class,get,bean,class,name,else,if,count,1,mo,set,overloaded,false
AbstractBeanDefinition -> protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException;1385412762;Validate and prepare the given method override._Checks for existence of a method with the specified name,_marking it as not overloaded if none found._@param mo the MethodOverride object to validate_@throws BeanDefinitionValidationException in case of validation failure;protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException {_		int count = ClassUtils.getMethodCountForName(getBeanClass(), mo.getMethodName())__		if (count == 0) {_			throw new BeanDefinitionValidationException(_					"Invalid method override: no method with name '" + mo.getMethodName() +_					"' on class [" + getBeanClassName() + "]")__		}_		else if (count == 1) {_			_			mo.setOverloaded(false)__		}_	};validate,and,prepare,the,given,method,override,checks,for,existence,of,a,method,with,the,specified,name,marking,it,as,not,overloaded,if,none,found,param,mo,the,method,override,object,to,validate,throws,bean,definition,validation,exception,in,case,of,validation,failure;protected,void,prepare,method,override,method,override,mo,throws,bean,definition,validation,exception,int,count,class,utils,get,method,count,for,name,get,bean,class,mo,get,method,name,if,count,0,throw,new,bean,definition,validation,exception,invalid,method,override,no,method,with,name,mo,get,method,name,on,class,get,bean,class,name,else,if,count,1,mo,set,overloaded,false
AbstractBeanDefinition -> protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException;1392245317;Validate and prepare the given method override._Checks for existence of a method with the specified name,_marking it as not overloaded if none found._@param mo the MethodOverride object to validate_@throws BeanDefinitionValidationException in case of validation failure;protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException {_		int count = ClassUtils.getMethodCountForName(getBeanClass(), mo.getMethodName())__		if (count == 0) {_			throw new BeanDefinitionValidationException(_					"Invalid method override: no method with name '" + mo.getMethodName() +_					"' on class [" + getBeanClassName() + "]")__		}_		else if (count == 1) {_			_			mo.setOverloaded(false)__		}_	};validate,and,prepare,the,given,method,override,checks,for,existence,of,a,method,with,the,specified,name,marking,it,as,not,overloaded,if,none,found,param,mo,the,method,override,object,to,validate,throws,bean,definition,validation,exception,in,case,of,validation,failure;protected,void,prepare,method,override,method,override,mo,throws,bean,definition,validation,exception,int,count,class,utils,get,method,count,for,name,get,bean,class,mo,get,method,name,if,count,0,throw,new,bean,definition,validation,exception,invalid,method,override,no,method,with,name,mo,get,method,name,on,class,get,bean,class,name,else,if,count,1,mo,set,overloaded,false
AbstractBeanDefinition -> protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException;1397163142;Validate and prepare the given method override._Checks for existence of a method with the specified name,_marking it as not overloaded if none found._@param mo the MethodOverride object to validate_@throws BeanDefinitionValidationException in case of validation failure;protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException {_		int count = ClassUtils.getMethodCountForName(getBeanClass(), mo.getMethodName())__		if (count == 0) {_			throw new BeanDefinitionValidationException(_					"Invalid method override: no method with name '" + mo.getMethodName() +_					"' on class [" + getBeanClassName() + "]")__		}_		else if (count == 1) {_			_			mo.setOverloaded(false)__		}_	};validate,and,prepare,the,given,method,override,checks,for,existence,of,a,method,with,the,specified,name,marking,it,as,not,overloaded,if,none,found,param,mo,the,method,override,object,to,validate,throws,bean,definition,validation,exception,in,case,of,validation,failure;protected,void,prepare,method,override,method,override,mo,throws,bean,definition,validation,exception,int,count,class,utils,get,method,count,for,name,get,bean,class,mo,get,method,name,if,count,0,throw,new,bean,definition,validation,exception,invalid,method,override,no,method,with,name,mo,get,method,name,on,class,get,bean,class,name,else,if,count,1,mo,set,overloaded,false
AbstractBeanDefinition -> protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException;1398898390;Validate and prepare the given method override._Checks for existence of a method with the specified name,_marking it as not overloaded if none found._@param mo the MethodOverride object to validate_@throws BeanDefinitionValidationException in case of validation failure;protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException {_		int count = ClassUtils.getMethodCountForName(getBeanClass(), mo.getMethodName())__		if (count == 0) {_			throw new BeanDefinitionValidationException(_					"Invalid method override: no method with name '" + mo.getMethodName() +_					"' on class [" + getBeanClassName() + "]")__		}_		else if (count == 1) {_			_			mo.setOverloaded(false)__		}_	};validate,and,prepare,the,given,method,override,checks,for,existence,of,a,method,with,the,specified,name,marking,it,as,not,overloaded,if,none,found,param,mo,the,method,override,object,to,validate,throws,bean,definition,validation,exception,in,case,of,validation,failure;protected,void,prepare,method,override,method,override,mo,throws,bean,definition,validation,exception,int,count,class,utils,get,method,count,for,name,get,bean,class,mo,get,method,name,if,count,0,throw,new,bean,definition,validation,exception,invalid,method,override,no,method,with,name,mo,get,method,name,on,class,get,bean,class,name,else,if,count,1,mo,set,overloaded,false
AbstractBeanDefinition -> protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException;1407511029;Validate and prepare the given method override._Checks for existence of a method with the specified name,_marking it as not overloaded if none found._@param mo the MethodOverride object to validate_@throws BeanDefinitionValidationException in case of validation failure;protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException {_		int count = ClassUtils.getMethodCountForName(getBeanClass(), mo.getMethodName())__		if (count == 0) {_			throw new BeanDefinitionValidationException(_					"Invalid method override: no method with name '" + mo.getMethodName() +_					"' on class [" + getBeanClassName() + "]")__		}_		else if (count == 1) {_			_			mo.setOverloaded(false)__		}_	};validate,and,prepare,the,given,method,override,checks,for,existence,of,a,method,with,the,specified,name,marking,it,as,not,overloaded,if,none,found,param,mo,the,method,override,object,to,validate,throws,bean,definition,validation,exception,in,case,of,validation,failure;protected,void,prepare,method,override,method,override,mo,throws,bean,definition,validation,exception,int,count,class,utils,get,method,count,for,name,get,bean,class,mo,get,method,name,if,count,0,throw,new,bean,definition,validation,exception,invalid,method,override,no,method,with,name,mo,get,method,name,on,class,get,bean,class,name,else,if,count,1,mo,set,overloaded,false
AbstractBeanDefinition -> protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException;1432135182;Validate and prepare the given method override._Checks for existence of a method with the specified name,_marking it as not overloaded if none found._@param mo the MethodOverride object to validate_@throws BeanDefinitionValidationException in case of validation failure;protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException {_		int count = ClassUtils.getMethodCountForName(getBeanClass(), mo.getMethodName())__		if (count == 0) {_			throw new BeanDefinitionValidationException(_					"Invalid method override: no method with name '" + mo.getMethodName() +_					"' on class [" + getBeanClassName() + "]")__		}_		else if (count == 1) {_			_			mo.setOverloaded(false)__		}_	};validate,and,prepare,the,given,method,override,checks,for,existence,of,a,method,with,the,specified,name,marking,it,as,not,overloaded,if,none,found,param,mo,the,method,override,object,to,validate,throws,bean,definition,validation,exception,in,case,of,validation,failure;protected,void,prepare,method,override,method,override,mo,throws,bean,definition,validation,exception,int,count,class,utils,get,method,count,for,name,get,bean,class,mo,get,method,name,if,count,0,throw,new,bean,definition,validation,exception,invalid,method,override,no,method,with,name,mo,get,method,name,on,class,get,bean,class,name,else,if,count,1,mo,set,overloaded,false
AbstractBeanDefinition -> protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException;1434204509;Validate and prepare the given method override._Checks for existence of a method with the specified name,_marking it as not overloaded if none found._@param mo the MethodOverride object to validate_@throws BeanDefinitionValidationException in case of validation failure;protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException {_		int count = ClassUtils.getMethodCountForName(getBeanClass(), mo.getMethodName())__		if (count == 0) {_			throw new BeanDefinitionValidationException(_					"Invalid method override: no method with name '" + mo.getMethodName() +_					"' on class [" + getBeanClassName() + "]")__		}_		else if (count == 1) {_			_			mo.setOverloaded(false)__		}_	};validate,and,prepare,the,given,method,override,checks,for,existence,of,a,method,with,the,specified,name,marking,it,as,not,overloaded,if,none,found,param,mo,the,method,override,object,to,validate,throws,bean,definition,validation,exception,in,case,of,validation,failure;protected,void,prepare,method,override,method,override,mo,throws,bean,definition,validation,exception,int,count,class,utils,get,method,count,for,name,get,bean,class,mo,get,method,name,if,count,0,throw,new,bean,definition,validation,exception,invalid,method,override,no,method,with,name,mo,get,method,name,on,class,get,bean,class,name,else,if,count,1,mo,set,overloaded,false
AbstractBeanDefinition -> protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException;1447323728;Validate and prepare the given method override._Checks for existence of a method with the specified name,_marking it as not overloaded if none found._@param mo the MethodOverride object to validate_@throws BeanDefinitionValidationException in case of validation failure;protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException {_		int count = ClassUtils.getMethodCountForName(getBeanClass(), mo.getMethodName())__		if (count == 0) {_			throw new BeanDefinitionValidationException(_					"Invalid method override: no method with name '" + mo.getMethodName() +_					"' on class [" + getBeanClassName() + "]")__		}_		else if (count == 1) {_			_			mo.setOverloaded(false)__		}_	};validate,and,prepare,the,given,method,override,checks,for,existence,of,a,method,with,the,specified,name,marking,it,as,not,overloaded,if,none,found,param,mo,the,method,override,object,to,validate,throws,bean,definition,validation,exception,in,case,of,validation,failure;protected,void,prepare,method,override,method,override,mo,throws,bean,definition,validation,exception,int,count,class,utils,get,method,count,for,name,get,bean,class,mo,get,method,name,if,count,0,throw,new,bean,definition,validation,exception,invalid,method,override,no,method,with,name,mo,get,method,name,on,class,get,bean,class,name,else,if,count,1,mo,set,overloaded,false
AbstractBeanDefinition -> protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException;1465226156;Validate and prepare the given method override._Checks for existence of a method with the specified name,_marking it as not overloaded if none found._@param mo the MethodOverride object to validate_@throws BeanDefinitionValidationException in case of validation failure;protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException {_		int count = ClassUtils.getMethodCountForName(getBeanClass(), mo.getMethodName())__		if (count == 0) {_			throw new BeanDefinitionValidationException(_					"Invalid method override: no method with name '" + mo.getMethodName() +_					"' on class [" + getBeanClassName() + "]")__		}_		else if (count == 1) {_			_			mo.setOverloaded(false)__		}_	};validate,and,prepare,the,given,method,override,checks,for,existence,of,a,method,with,the,specified,name,marking,it,as,not,overloaded,if,none,found,param,mo,the,method,override,object,to,validate,throws,bean,definition,validation,exception,in,case,of,validation,failure;protected,void,prepare,method,override,method,override,mo,throws,bean,definition,validation,exception,int,count,class,utils,get,method,count,for,name,get,bean,class,mo,get,method,name,if,count,0,throw,new,bean,definition,validation,exception,invalid,method,override,no,method,with,name,mo,get,method,name,on,class,get,bean,class,name,else,if,count,1,mo,set,overloaded,false
AbstractBeanDefinition -> protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException;1467730834;Validate and prepare the given method override._Checks for existence of a method with the specified name,_marking it as not overloaded if none found._@param mo the MethodOverride object to validate_@throws BeanDefinitionValidationException in case of validation failure;protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException {_		int count = ClassUtils.getMethodCountForName(getBeanClass(), mo.getMethodName())__		if (count == 0) {_			throw new BeanDefinitionValidationException(_					"Invalid method override: no method with name '" + mo.getMethodName() +_					"' on class [" + getBeanClassName() + "]")__		}_		else if (count == 1) {_			_			mo.setOverloaded(false)__		}_	};validate,and,prepare,the,given,method,override,checks,for,existence,of,a,method,with,the,specified,name,marking,it,as,not,overloaded,if,none,found,param,mo,the,method,override,object,to,validate,throws,bean,definition,validation,exception,in,case,of,validation,failure;protected,void,prepare,method,override,method,override,mo,throws,bean,definition,validation,exception,int,count,class,utils,get,method,count,for,name,get,bean,class,mo,get,method,name,if,count,0,throw,new,bean,definition,validation,exception,invalid,method,override,no,method,with,name,mo,get,method,name,on,class,get,bean,class,name,else,if,count,1,mo,set,overloaded,false
AbstractBeanDefinition -> protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException;1467846264;Validate and prepare the given method override._Checks for existence of a method with the specified name,_marking it as not overloaded if none found._@param mo the MethodOverride object to validate_@throws BeanDefinitionValidationException in case of validation failure;protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException {_		int count = ClassUtils.getMethodCountForName(getBeanClass(), mo.getMethodName())__		if (count == 0) {_			throw new BeanDefinitionValidationException(_					"Invalid method override: no method with name '" + mo.getMethodName() +_					"' on class [" + getBeanClassName() + "]")__		}_		else if (count == 1) {_			_			mo.setOverloaded(false)__		}_	};validate,and,prepare,the,given,method,override,checks,for,existence,of,a,method,with,the,specified,name,marking,it,as,not,overloaded,if,none,found,param,mo,the,method,override,object,to,validate,throws,bean,definition,validation,exception,in,case,of,validation,failure;protected,void,prepare,method,override,method,override,mo,throws,bean,definition,validation,exception,int,count,class,utils,get,method,count,for,name,get,bean,class,mo,get,method,name,if,count,0,throw,new,bean,definition,validation,exception,invalid,method,override,no,method,with,name,mo,get,method,name,on,class,get,bean,class,name,else,if,count,1,mo,set,overloaded,false
AbstractBeanDefinition -> protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException;1482091545;Validate and prepare the given method override._Checks for existence of a method with the specified name,_marking it as not overloaded if none found._@param mo the MethodOverride object to validate_@throws BeanDefinitionValidationException in case of validation failure;protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException {_		int count = ClassUtils.getMethodCountForName(getBeanClass(), mo.getMethodName())__		if (count == 0) {_			throw new BeanDefinitionValidationException(_					"Invalid method override: no method with name '" + mo.getMethodName() +_					"' on class [" + getBeanClassName() + "]")__		}_		else if (count == 1) {_			_			mo.setOverloaded(false)__		}_	};validate,and,prepare,the,given,method,override,checks,for,existence,of,a,method,with,the,specified,name,marking,it,as,not,overloaded,if,none,found,param,mo,the,method,override,object,to,validate,throws,bean,definition,validation,exception,in,case,of,validation,failure;protected,void,prepare,method,override,method,override,mo,throws,bean,definition,validation,exception,int,count,class,utils,get,method,count,for,name,get,bean,class,mo,get,method,name,if,count,0,throw,new,bean,definition,validation,exception,invalid,method,override,no,method,with,name,mo,get,method,name,on,class,get,bean,class,name,else,if,count,1,mo,set,overloaded,false
AbstractBeanDefinition -> protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException;1483093818;Validate and prepare the given method override._Checks for existence of a method with the specified name,_marking it as not overloaded if none found._@param mo the MethodOverride object to validate_@throws BeanDefinitionValidationException in case of validation failure;protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException {_		int count = ClassUtils.getMethodCountForName(getBeanClass(), mo.getMethodName())__		if (count == 0) {_			throw new BeanDefinitionValidationException(_					"Invalid method override: no method with name '" + mo.getMethodName() +_					"' on class [" + getBeanClassName() + "]")__		}_		else if (count == 1) {_			_			mo.setOverloaded(false)__		}_	};validate,and,prepare,the,given,method,override,checks,for,existence,of,a,method,with,the,specified,name,marking,it,as,not,overloaded,if,none,found,param,mo,the,method,override,object,to,validate,throws,bean,definition,validation,exception,in,case,of,validation,failure;protected,void,prepare,method,override,method,override,mo,throws,bean,definition,validation,exception,int,count,class,utils,get,method,count,for,name,get,bean,class,mo,get,method,name,if,count,0,throw,new,bean,definition,validation,exception,invalid,method,override,no,method,with,name,mo,get,method,name,on,class,get,bean,class,name,else,if,count,1,mo,set,overloaded,false
AbstractBeanDefinition -> protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException;1495868221;Validate and prepare the given method override._Checks for existence of a method with the specified name,_marking it as not overloaded if none found._@param mo the MethodOverride object to validate_@throws BeanDefinitionValidationException in case of validation failure;protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException {_		int count = ClassUtils.getMethodCountForName(getBeanClass(), mo.getMethodName())__		if (count == 0) {_			throw new BeanDefinitionValidationException(_					"Invalid method override: no method with name '" + mo.getMethodName() +_					"' on class [" + getBeanClassName() + "]")__		}_		else if (count == 1) {_			_			mo.setOverloaded(false)__		}_	};validate,and,prepare,the,given,method,override,checks,for,existence,of,a,method,with,the,specified,name,marking,it,as,not,overloaded,if,none,found,param,mo,the,method,override,object,to,validate,throws,bean,definition,validation,exception,in,case,of,validation,failure;protected,void,prepare,method,override,method,override,mo,throws,bean,definition,validation,exception,int,count,class,utils,get,method,count,for,name,get,bean,class,mo,get,method,name,if,count,0,throw,new,bean,definition,validation,exception,invalid,method,override,no,method,with,name,mo,get,method,name,on,class,get,bean,class,name,else,if,count,1,mo,set,overloaded,false
AbstractBeanDefinition -> protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException;1496837955;Validate and prepare the given method override._Checks for existence of a method with the specified name,_marking it as not overloaded if none found._@param mo the MethodOverride object to validate_@throws BeanDefinitionValidationException in case of validation failure;protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException {_		int count = ClassUtils.getMethodCountForName(getBeanClass(), mo.getMethodName())__		if (count == 0) {_			throw new BeanDefinitionValidationException(_					"Invalid method override: no method with name '" + mo.getMethodName() +_					"' on class [" + getBeanClassName() + "]")__		}_		else if (count == 1) {_			_			mo.setOverloaded(false)__		}_	};validate,and,prepare,the,given,method,override,checks,for,existence,of,a,method,with,the,specified,name,marking,it,as,not,overloaded,if,none,found,param,mo,the,method,override,object,to,validate,throws,bean,definition,validation,exception,in,case,of,validation,failure;protected,void,prepare,method,override,method,override,mo,throws,bean,definition,validation,exception,int,count,class,utils,get,method,count,for,name,get,bean,class,mo,get,method,name,if,count,0,throw,new,bean,definition,validation,exception,invalid,method,override,no,method,with,name,mo,get,method,name,on,class,get,bean,class,name,else,if,count,1,mo,set,overloaded,false
AbstractBeanDefinition -> protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException;1498780456;Validate and prepare the given method override._Checks for existence of a method with the specified name,_marking it as not overloaded if none found._@param mo the MethodOverride object to validate_@throws BeanDefinitionValidationException in case of validation failure;protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException {_		int count = ClassUtils.getMethodCountForName(getBeanClass(), mo.getMethodName())__		if (count == 0) {_			throw new BeanDefinitionValidationException(_					"Invalid method override: no method with name '" + mo.getMethodName() +_					"' on class [" + getBeanClassName() + "]")__		}_		else if (count == 1) {_			_			mo.setOverloaded(false)__		}_	};validate,and,prepare,the,given,method,override,checks,for,existence,of,a,method,with,the,specified,name,marking,it,as,not,overloaded,if,none,found,param,mo,the,method,override,object,to,validate,throws,bean,definition,validation,exception,in,case,of,validation,failure;protected,void,prepare,method,override,method,override,mo,throws,bean,definition,validation,exception,int,count,class,utils,get,method,count,for,name,get,bean,class,mo,get,method,name,if,count,0,throw,new,bean,definition,validation,exception,invalid,method,override,no,method,with,name,mo,get,method,name,on,class,get,bean,class,name,else,if,count,1,mo,set,overloaded,false
AbstractBeanDefinition -> protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException;1502974979;Validate and prepare the given method override._Checks for existence of a method with the specified name,_marking it as not overloaded if none found._@param mo the MethodOverride object to validate_@throws BeanDefinitionValidationException in case of validation failure;protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException {_		int count = ClassUtils.getMethodCountForName(getBeanClass(), mo.getMethodName())__		if (count == 0) {_			throw new BeanDefinitionValidationException(_					"Invalid method override: no method with name '" + mo.getMethodName() +_					"' on class [" + getBeanClassName() + "]")__		}_		else if (count == 1) {_			_			mo.setOverloaded(false)__		}_	};validate,and,prepare,the,given,method,override,checks,for,existence,of,a,method,with,the,specified,name,marking,it,as,not,overloaded,if,none,found,param,mo,the,method,override,object,to,validate,throws,bean,definition,validation,exception,in,case,of,validation,failure;protected,void,prepare,method,override,method,override,mo,throws,bean,definition,validation,exception,int,count,class,utils,get,method,count,for,name,get,bean,class,mo,get,method,name,if,count,0,throw,new,bean,definition,validation,exception,invalid,method,override,no,method,with,name,mo,get,method,name,on,class,get,bean,class,name,else,if,count,1,mo,set,overloaded,false
AbstractBeanDefinition -> protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException;1503008029;Validate and prepare the given method override._Checks for existence of a method with the specified name,_marking it as not overloaded if none found._@param mo the MethodOverride object to validate_@throws BeanDefinitionValidationException in case of validation failure;protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException {_		int count = ClassUtils.getMethodCountForName(getBeanClass(), mo.getMethodName())__		if (count == 0) {_			throw new BeanDefinitionValidationException(_					"Invalid method override: no method with name '" + mo.getMethodName() +_					"' on class [" + getBeanClassName() + "]")__		}_		else if (count == 1) {_			_			mo.setOverloaded(false)__		}_	};validate,and,prepare,the,given,method,override,checks,for,existence,of,a,method,with,the,specified,name,marking,it,as,not,overloaded,if,none,found,param,mo,the,method,override,object,to,validate,throws,bean,definition,validation,exception,in,case,of,validation,failure;protected,void,prepare,method,override,method,override,mo,throws,bean,definition,validation,exception,int,count,class,utils,get,method,count,for,name,get,bean,class,mo,get,method,name,if,count,0,throw,new,bean,definition,validation,exception,invalid,method,override,no,method,with,name,mo,get,method,name,on,class,get,bean,class,name,else,if,count,1,mo,set,overloaded,false
AbstractBeanDefinition -> protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException;1510606271;Validate and prepare the given method override._Checks for existence of a method with the specified name,_marking it as not overloaded if none found._@param mo the MethodOverride object to validate_@throws BeanDefinitionValidationException in case of validation failure;protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException {_		int count = ClassUtils.getMethodCountForName(getBeanClass(), mo.getMethodName())__		if (count == 0) {_			throw new BeanDefinitionValidationException(_					"Invalid method override: no method with name '" + mo.getMethodName() +_					"' on class [" + getBeanClassName() + "]")__		}_		else if (count == 1) {_			_			mo.setOverloaded(false)__		}_	};validate,and,prepare,the,given,method,override,checks,for,existence,of,a,method,with,the,specified,name,marking,it,as,not,overloaded,if,none,found,param,mo,the,method,override,object,to,validate,throws,bean,definition,validation,exception,in,case,of,validation,failure;protected,void,prepare,method,override,method,override,mo,throws,bean,definition,validation,exception,int,count,class,utils,get,method,count,for,name,get,bean,class,mo,get,method,name,if,count,0,throw,new,bean,definition,validation,exception,invalid,method,override,no,method,with,name,mo,get,method,name,on,class,get,bean,class,name,else,if,count,1,mo,set,overloaded,false
AbstractBeanDefinition -> protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException;1510675876;Validate and prepare the given method override._Checks for existence of a method with the specified name,_marking it as not overloaded if none found._@param mo the MethodOverride object to validate_@throws BeanDefinitionValidationException in case of validation failure;protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException {_		int count = ClassUtils.getMethodCountForName(getBeanClass(), mo.getMethodName())__		if (count == 0) {_			throw new BeanDefinitionValidationException(_					"Invalid method override: no method with name '" + mo.getMethodName() +_					"' on class [" + getBeanClassName() + "]")__		}_		else if (count == 1) {_			_			mo.setOverloaded(false)__		}_	};validate,and,prepare,the,given,method,override,checks,for,existence,of,a,method,with,the,specified,name,marking,it,as,not,overloaded,if,none,found,param,mo,the,method,override,object,to,validate,throws,bean,definition,validation,exception,in,case,of,validation,failure;protected,void,prepare,method,override,method,override,mo,throws,bean,definition,validation,exception,int,count,class,utils,get,method,count,for,name,get,bean,class,mo,get,method,name,if,count,0,throw,new,bean,definition,validation,exception,invalid,method,override,no,method,with,name,mo,get,method,name,on,class,get,bean,class,name,else,if,count,1,mo,set,overloaded,false
AbstractBeanDefinition -> protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException;1530174524;Validate and prepare the given method override._Checks for existence of a method with the specified name,_marking it as not overloaded if none found._@param mo the MethodOverride object to validate_@throws BeanDefinitionValidationException in case of validation failure;protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException {_		int count = ClassUtils.getMethodCountForName(getBeanClass(), mo.getMethodName())__		if (count == 0) {_			throw new BeanDefinitionValidationException(_					"Invalid method override: no method with name '" + mo.getMethodName() +_					"' on class [" + getBeanClassName() + "]")__		}_		else if (count == 1) {_			_			mo.setOverloaded(false)__		}_	};validate,and,prepare,the,given,method,override,checks,for,existence,of,a,method,with,the,specified,name,marking,it,as,not,overloaded,if,none,found,param,mo,the,method,override,object,to,validate,throws,bean,definition,validation,exception,in,case,of,validation,failure;protected,void,prepare,method,override,method,override,mo,throws,bean,definition,validation,exception,int,count,class,utils,get,method,count,for,name,get,bean,class,mo,get,method,name,if,count,0,throw,new,bean,definition,validation,exception,invalid,method,override,no,method,with,name,mo,get,method,name,on,class,get,bean,class,name,else,if,count,1,mo,set,overloaded,false
AbstractBeanDefinition -> protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException;1530174524;Validate and prepare the given method override._Checks for existence of a method with the specified name,_marking it as not overloaded if none found._@param mo the MethodOverride object to validate_@throws BeanDefinitionValidationException in case of validation failure;protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException {_		int count = ClassUtils.getMethodCountForName(getBeanClass(), mo.getMethodName())__		if (count == 0) {_			throw new BeanDefinitionValidationException(_					"Invalid method override: no method with name '" + mo.getMethodName() +_					"' on class [" + getBeanClassName() + "]")__		}_		else if (count == 1) {_			_			mo.setOverloaded(false)__		}_	};validate,and,prepare,the,given,method,override,checks,for,existence,of,a,method,with,the,specified,name,marking,it,as,not,overloaded,if,none,found,param,mo,the,method,override,object,to,validate,throws,bean,definition,validation,exception,in,case,of,validation,failure;protected,void,prepare,method,override,method,override,mo,throws,bean,definition,validation,exception,int,count,class,utils,get,method,count,for,name,get,bean,class,mo,get,method,name,if,count,0,throw,new,bean,definition,validation,exception,invalid,method,override,no,method,with,name,mo,get,method,name,on,class,get,bean,class,name,else,if,count,1,mo,set,overloaded,false
AbstractBeanDefinition -> protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException;1530174524;Validate and prepare the given method override._Checks for existence of a method with the specified name,_marking it as not overloaded if none found._@param mo the MethodOverride object to validate_@throws BeanDefinitionValidationException in case of validation failure;protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException {_		int count = ClassUtils.getMethodCountForName(getBeanClass(), mo.getMethodName())__		if (count == 0) {_			throw new BeanDefinitionValidationException(_					"Invalid method override: no method with name '" + mo.getMethodName() +_					"' on class [" + getBeanClassName() + "]")__		}_		else if (count == 1) {_			_			mo.setOverloaded(false)__		}_	};validate,and,prepare,the,given,method,override,checks,for,existence,of,a,method,with,the,specified,name,marking,it,as,not,overloaded,if,none,found,param,mo,the,method,override,object,to,validate,throws,bean,definition,validation,exception,in,case,of,validation,failure;protected,void,prepare,method,override,method,override,mo,throws,bean,definition,validation,exception,int,count,class,utils,get,method,count,for,name,get,bean,class,mo,get,method,name,if,count,0,throw,new,bean,definition,validation,exception,invalid,method,override,no,method,with,name,mo,get,method,name,on,class,get,bean,class,name,else,if,count,1,mo,set,overloaded,false
AbstractBeanDefinition -> protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException;1530190293;Validate and prepare the given method override._Checks for existence of a method with the specified name,_marking it as not overloaded if none found._@param mo the MethodOverride object to validate_@throws BeanDefinitionValidationException in case of validation failure;protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException {_		int count = ClassUtils.getMethodCountForName(getBeanClass(), mo.getMethodName())__		if (count == 0) {_			throw new BeanDefinitionValidationException(_					"Invalid method override: no method with name '" + mo.getMethodName() +_					"' on class [" + getBeanClassName() + "]")__		}_		else if (count == 1) {_			_			mo.setOverloaded(false)__		}_	};validate,and,prepare,the,given,method,override,checks,for,existence,of,a,method,with,the,specified,name,marking,it,as,not,overloaded,if,none,found,param,mo,the,method,override,object,to,validate,throws,bean,definition,validation,exception,in,case,of,validation,failure;protected,void,prepare,method,override,method,override,mo,throws,bean,definition,validation,exception,int,count,class,utils,get,method,count,for,name,get,bean,class,mo,get,method,name,if,count,0,throw,new,bean,definition,validation,exception,invalid,method,override,no,method,with,name,mo,get,method,name,on,class,get,bean,class,name,else,if,count,1,mo,set,overloaded,false
AbstractBeanDefinition -> protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException;1532981251;Validate and prepare the given method override._Checks for existence of a method with the specified name,_marking it as not overloaded if none found._@param mo the MethodOverride object to validate_@throws BeanDefinitionValidationException in case of validation failure;protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException {_		int count = ClassUtils.getMethodCountForName(getBeanClass(), mo.getMethodName())__		if (count == 0) {_			throw new BeanDefinitionValidationException(_					"Invalid method override: no method with name '" + mo.getMethodName() +_					"' on class [" + getBeanClassName() + "]")__		}_		else if (count == 1) {_			_			mo.setOverloaded(false)__		}_	};validate,and,prepare,the,given,method,override,checks,for,existence,of,a,method,with,the,specified,name,marking,it,as,not,overloaded,if,none,found,param,mo,the,method,override,object,to,validate,throws,bean,definition,validation,exception,in,case,of,validation,failure;protected,void,prepare,method,override,method,override,mo,throws,bean,definition,validation,exception,int,count,class,utils,get,method,count,for,name,get,bean,class,mo,get,method,name,if,count,0,throw,new,bean,definition,validation,exception,invalid,method,override,no,method,with,name,mo,get,method,name,on,class,get,bean,class,name,else,if,count,1,mo,set,overloaded,false
AbstractBeanDefinition -> protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException;1536863076;Validate and prepare the given method override._Checks for existence of a method with the specified name,_marking it as not overloaded if none found._@param mo the MethodOverride object to validate_@throws BeanDefinitionValidationException in case of validation failure;protected void prepareMethodOverride(MethodOverride mo) throws BeanDefinitionValidationException {_		int count = ClassUtils.getMethodCountForName(getBeanClass(), mo.getMethodName())__		if (count == 0) {_			throw new BeanDefinitionValidationException(_					"Invalid method override: no method with name '" + mo.getMethodName() +_					"' on class [" + getBeanClassName() + "]")__		}_		else if (count == 1) {_			_			mo.setOverloaded(false)__		}_	};validate,and,prepare,the,given,method,override,checks,for,existence,of,a,method,with,the,specified,name,marking,it,as,not,overloaded,if,none,found,param,mo,the,method,override,object,to,validate,throws,bean,definition,validation,exception,in,case,of,validation,failure;protected,void,prepare,method,override,method,override,mo,throws,bean,definition,validation,exception,int,count,class,utils,get,method,count,for,name,get,bean,class,mo,get,method,name,if,count,0,throw,new,bean,definition,validation,exception,invalid,method,override,no,method,with,name,mo,get,method,name,on,class,get,bean,class,name,else,if,count,1,mo,set,overloaded,false
AbstractBeanDefinition -> @Override 	public boolean isAbstract();1356735495;Return whether this bean is "abstract", i.e. not meant to be instantiated_itself but rather just serving as parent for concrete child bean definitions.;@Override_	public boolean isAbstract() {_		return this.abstractFlag__	};return,whether,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions;override,public,boolean,is,abstract,return,this,abstract,flag
AbstractBeanDefinition -> @Override 	public boolean isAbstract();1368482696;Return whether this bean is "abstract", i.e. not meant to be instantiated_itself but rather just serving as parent for concrete child bean definitions.;@Override_	public boolean isAbstract() {_		return this.abstractFlag__	};return,whether,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions;override,public,boolean,is,abstract,return,this,abstract,flag
AbstractBeanDefinition -> @Override 	public boolean isAbstract();1385412762;Return whether this bean is "abstract", i.e. not meant to be instantiated_itself but rather just serving as parent for concrete child bean definitions.;@Override_	public boolean isAbstract() {_		return this.abstractFlag__	};return,whether,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions;override,public,boolean,is,abstract,return,this,abstract,flag
AbstractBeanDefinition -> @Override 	public boolean isAbstract();1392245317;Return whether this bean is "abstract", i.e. not meant to be instantiated_itself but rather just serving as parent for concrete child bean definitions.;@Override_	public boolean isAbstract() {_		return this.abstractFlag__	};return,whether,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions;override,public,boolean,is,abstract,return,this,abstract,flag
AbstractBeanDefinition -> @Override 	public boolean isAbstract();1397163142;Return whether this bean is "abstract", i.e. not meant to be instantiated_itself but rather just serving as parent for concrete child bean definitions.;@Override_	public boolean isAbstract() {_		return this.abstractFlag__	};return,whether,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions;override,public,boolean,is,abstract,return,this,abstract,flag
AbstractBeanDefinition -> @Override 	public boolean isAbstract();1398898390;Return whether this bean is "abstract", i.e. not meant to be instantiated_itself but rather just serving as parent for concrete child bean definitions.;@Override_	public boolean isAbstract() {_		return this.abstractFlag__	};return,whether,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions;override,public,boolean,is,abstract,return,this,abstract,flag
AbstractBeanDefinition -> @Override 	public boolean isAbstract();1407511029;Return whether this bean is "abstract", i.e. not meant to be instantiated_itself but rather just serving as parent for concrete child bean definitions.;@Override_	public boolean isAbstract() {_		return this.abstractFlag__	};return,whether,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions;override,public,boolean,is,abstract,return,this,abstract,flag
AbstractBeanDefinition -> @Override 	public boolean isAbstract();1432135182;Return whether this bean is "abstract", i.e. not meant to be instantiated_itself but rather just serving as parent for concrete child bean definitions.;@Override_	public boolean isAbstract() {_		return this.abstractFlag__	};return,whether,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions;override,public,boolean,is,abstract,return,this,abstract,flag
AbstractBeanDefinition -> @Override 	public boolean isAbstract();1434204509;Return whether this bean is "abstract", i.e. not meant to be instantiated_itself but rather just serving as parent for concrete child bean definitions.;@Override_	public boolean isAbstract() {_		return this.abstractFlag__	};return,whether,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions;override,public,boolean,is,abstract,return,this,abstract,flag
AbstractBeanDefinition -> @Override 	public boolean isAbstract();1447323728;Return whether this bean is "abstract", i.e. not meant to be instantiated_itself but rather just serving as parent for concrete child bean definitions.;@Override_	public boolean isAbstract() {_		return this.abstractFlag__	};return,whether,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions;override,public,boolean,is,abstract,return,this,abstract,flag
AbstractBeanDefinition -> @Override 	public boolean isAbstract();1465226156;Return whether this bean is "abstract", i.e. not meant to be instantiated_itself but rather just serving as parent for concrete child bean definitions.;@Override_	public boolean isAbstract() {_		return this.abstractFlag__	};return,whether,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions;override,public,boolean,is,abstract,return,this,abstract,flag
AbstractBeanDefinition -> @Override 	public boolean isAbstract();1467730834;Return whether this bean is "abstract", i.e. not meant to be instantiated_itself but rather just serving as parent for concrete child bean definitions.;@Override_	public boolean isAbstract() {_		return this.abstractFlag__	};return,whether,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions;override,public,boolean,is,abstract,return,this,abstract,flag
AbstractBeanDefinition -> @Override 	public boolean isAbstract();1467846264;Return whether this bean is "abstract", i.e. not meant to be instantiated_itself but rather just serving as parent for concrete child bean definitions.;@Override_	public boolean isAbstract() {_		return this.abstractFlag__	};return,whether,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions;override,public,boolean,is,abstract,return,this,abstract,flag
AbstractBeanDefinition -> @Override 	public boolean isAbstract();1482091545;Return whether this bean is "abstract", i.e. not meant to be instantiated_itself but rather just serving as parent for concrete child bean definitions.;@Override_	public boolean isAbstract() {_		return this.abstractFlag__	};return,whether,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions;override,public,boolean,is,abstract,return,this,abstract,flag
AbstractBeanDefinition -> @Override 	public boolean isAbstract();1483093818;Return whether this bean is "abstract", i.e. not meant to be instantiated_itself but rather just serving as parent for concrete child bean definitions.;@Override_	public boolean isAbstract() {_		return this.abstractFlag__	};return,whether,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions;override,public,boolean,is,abstract,return,this,abstract,flag
AbstractBeanDefinition -> @Override 	public boolean isAbstract();1495868221;Return whether this bean is "abstract", i.e. not meant to be instantiated_itself but rather just serving as parent for concrete child bean definitions.;@Override_	public boolean isAbstract() {_		return this.abstractFlag__	};return,whether,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions;override,public,boolean,is,abstract,return,this,abstract,flag
AbstractBeanDefinition -> @Override 	public boolean isAbstract();1496837955;Return whether this bean is "abstract", i.e. not meant to be instantiated_itself but rather just serving as parent for concrete child bean definitions.;@Override_	public boolean isAbstract() {_		return this.abstractFlag__	};return,whether,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions;override,public,boolean,is,abstract,return,this,abstract,flag
AbstractBeanDefinition -> @Override 	public boolean isAbstract();1498780456;Return whether this bean is "abstract", i.e. not meant to be instantiated_itself but rather just serving as parent for concrete child bean definitions.;@Override_	public boolean isAbstract() {_		return this.abstractFlag__	};return,whether,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions;override,public,boolean,is,abstract,return,this,abstract,flag
AbstractBeanDefinition -> @Override 	public boolean isAbstract();1502974979;Return whether this bean is "abstract", i.e. not meant to be instantiated_itself but rather just serving as parent for concrete child bean definitions.;@Override_	public boolean isAbstract() {_		return this.abstractFlag__	};return,whether,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions;override,public,boolean,is,abstract,return,this,abstract,flag
AbstractBeanDefinition -> @Override 	public boolean isAbstract();1503008029;Return whether this bean is "abstract", i.e. not meant to be instantiated_itself but rather just serving as parent for concrete child bean definitions.;@Override_	public boolean isAbstract() {_		return this.abstractFlag__	};return,whether,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions;override,public,boolean,is,abstract,return,this,abstract,flag
AbstractBeanDefinition -> @Override 	public boolean isAbstract();1510606271;Return whether this bean is "abstract", i.e. not meant to be instantiated_itself but rather just serving as parent for concrete child bean definitions.;@Override_	public boolean isAbstract() {_		return this.abstractFlag__	};return,whether,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions;override,public,boolean,is,abstract,return,this,abstract,flag
AbstractBeanDefinition -> @Override 	public boolean isAbstract();1510675876;Return whether this bean is "abstract", i.e. not meant to be instantiated_itself but rather just serving as parent for concrete child bean definitions.;@Override_	public boolean isAbstract() {_		return this.abstractFlag__	};return,whether,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions;override,public,boolean,is,abstract,return,this,abstract,flag
AbstractBeanDefinition -> @Override 	public boolean isAbstract();1530174524;Return whether this bean is "abstract", i.e. not meant to be instantiated_itself but rather just serving as parent for concrete child bean definitions.;@Override_	public boolean isAbstract() {_		return this.abstractFlag__	};return,whether,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions;override,public,boolean,is,abstract,return,this,abstract,flag
AbstractBeanDefinition -> @Override 	public boolean isAbstract();1530174524;Return whether this bean is "abstract", i.e. not meant to be instantiated_itself but rather just serving as parent for concrete child bean definitions.;@Override_	public boolean isAbstract() {_		return this.abstractFlag__	};return,whether,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions;override,public,boolean,is,abstract,return,this,abstract,flag
AbstractBeanDefinition -> @Override 	public boolean isAbstract();1530174524;Return whether this bean is "abstract", i.e. not meant to be instantiated_itself but rather just serving as parent for concrete child bean definitions.;@Override_	public boolean isAbstract() {_		return this.abstractFlag__	};return,whether,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions;override,public,boolean,is,abstract,return,this,abstract,flag
AbstractBeanDefinition -> @Override 	public boolean isAbstract();1530190293;Return whether this bean is "abstract", i.e. not meant to be instantiated_itself but rather just serving as parent for concrete child bean definitions.;@Override_	public boolean isAbstract() {_		return this.abstractFlag__	};return,whether,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions;override,public,boolean,is,abstract,return,this,abstract,flag
AbstractBeanDefinition -> @Override 	public boolean isAbstract();1532981251;Return whether this bean is "abstract", i.e. not meant to be instantiated_itself but rather just serving as parent for concrete child bean definitions.;@Override_	public boolean isAbstract() {_		return this.abstractFlag__	};return,whether,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions;override,public,boolean,is,abstract,return,this,abstract,flag
AbstractBeanDefinition -> @Override 	public boolean isAbstract();1536863076;Return whether this bean is "abstract", i.e. not meant to be instantiated_itself but rather just serving as parent for concrete child bean definitions.;@Override_	public boolean isAbstract() {_		return this.abstractFlag__	};return,whether,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions;override,public,boolean,is,abstract,return,this,abstract,flag
AbstractBeanDefinition -> public boolean isPrototype();1328020251;Return whether this a <b>Prototype</b>, with an independent instance_returned for each call._@see #SCOPE_PROTOTYPE;public boolean isPrototype() {_		return this.prototype__	};return,whether,this,a,b,prototype,b,with,an,independent,instance,returned,for,each,call,see;public,boolean,is,prototype,return,this,prototype
AbstractBeanDefinition -> public boolean isPrototype();1337202589;Return whether this a <b>Prototype</b>, with an independent instance_returned for each call._@see #SCOPE_PROTOTYPE;public boolean isPrototype() {_		return this.prototype__	};return,whether,this,a,b,prototype,b,with,an,independent,instance,returned,for,each,call,see;public,boolean,is,prototype,return,this,prototype
AbstractBeanDefinition -> public boolean isPrototype();1357119239;Return whether this a <b>Prototype</b>, with an independent instance_returned for each call._@see #SCOPE_PROTOTYPE;public boolean isPrototype() {_		return this.prototype__	};return,whether,this,a,b,prototype,b,with,an,independent,instance,returned,for,each,call,see;public,boolean,is,prototype,return,this,prototype
AbstractBeanDefinition -> public boolean isPrototype();1367508310;Return whether this a <b>Prototype</b>, with an independent instance_returned for each call._@see #SCOPE_PROTOTYPE;public boolean isPrototype() {_		return this.prototype__	};return,whether,this,a,b,prototype,b,with,an,independent,instance,returned,for,each,call,see;public,boolean,is,prototype,return,this,prototype
AbstractBeanDefinition -> public boolean isPrototype();1367943112;Return whether this a <b>Prototype</b>, with an independent instance_returned for each call._@see #SCOPE_PROTOTYPE;public boolean isPrototype() {_		return SCOPE_PROTOTYPE.equals(scope)__	};return,whether,this,a,b,prototype,b,with,an,independent,instance,returned,for,each,call,see;public,boolean,is,prototype,return,equals,scope
AbstractBeanDefinition -> @Nullable 	public Supplier<?> getInstanceSupplier();1495868221;Return a callback for creating an instance of the bean, if any._@since 5.0;@Nullable_	public Supplier<?> getInstanceSupplier() {_		return this.instanceSupplier__	};return,a,callback,for,creating,an,instance,of,the,bean,if,any,since,5,0;nullable,public,supplier,get,instance,supplier,return,this,instance,supplier
AbstractBeanDefinition -> @Nullable 	public Supplier<?> getInstanceSupplier();1496837955;Return a callback for creating an instance of the bean, if any._@since 5.0;@Nullable_	public Supplier<?> getInstanceSupplier() {_		return this.instanceSupplier__	};return,a,callback,for,creating,an,instance,of,the,bean,if,any,since,5,0;nullable,public,supplier,get,instance,supplier,return,this,instance,supplier
AbstractBeanDefinition -> @Nullable 	public Supplier<?> getInstanceSupplier();1498780456;Return a callback for creating an instance of the bean, if any._@since 5.0;@Nullable_	public Supplier<?> getInstanceSupplier() {_		return this.instanceSupplier__	};return,a,callback,for,creating,an,instance,of,the,bean,if,any,since,5,0;nullable,public,supplier,get,instance,supplier,return,this,instance,supplier
AbstractBeanDefinition -> @Nullable 	public Supplier<?> getInstanceSupplier();1502974979;Return a callback for creating an instance of the bean, if any._@since 5.0;@Nullable_	public Supplier<?> getInstanceSupplier() {_		return this.instanceSupplier__	};return,a,callback,for,creating,an,instance,of,the,bean,if,any,since,5,0;nullable,public,supplier,get,instance,supplier,return,this,instance,supplier
AbstractBeanDefinition -> @Nullable 	public Supplier<?> getInstanceSupplier();1503008029;Return a callback for creating an instance of the bean, if any._@since 5.0;@Nullable_	public Supplier<?> getInstanceSupplier() {_		return this.instanceSupplier__	};return,a,callback,for,creating,an,instance,of,the,bean,if,any,since,5,0;nullable,public,supplier,get,instance,supplier,return,this,instance,supplier
AbstractBeanDefinition -> @Nullable 	public Supplier<?> getInstanceSupplier();1510606271;Return a callback for creating an instance of the bean, if any._@since 5.0;@Nullable_	public Supplier<?> getInstanceSupplier() {_		return this.instanceSupplier__	};return,a,callback,for,creating,an,instance,of,the,bean,if,any,since,5,0;nullable,public,supplier,get,instance,supplier,return,this,instance,supplier
AbstractBeanDefinition -> @Nullable 	public Supplier<?> getInstanceSupplier();1510675876;Return a callback for creating an instance of the bean, if any._@since 5.0;@Nullable_	public Supplier<?> getInstanceSupplier() {_		return this.instanceSupplier__	};return,a,callback,for,creating,an,instance,of,the,bean,if,any,since,5,0;nullable,public,supplier,get,instance,supplier,return,this,instance,supplier
AbstractBeanDefinition -> @Nullable 	public Supplier<?> getInstanceSupplier();1530174524;Return a callback for creating an instance of the bean, if any._@since 5.0;@Nullable_	public Supplier<?> getInstanceSupplier() {_		return this.instanceSupplier__	};return,a,callback,for,creating,an,instance,of,the,bean,if,any,since,5,0;nullable,public,supplier,get,instance,supplier,return,this,instance,supplier
AbstractBeanDefinition -> @Nullable 	public Supplier<?> getInstanceSupplier();1530174524;Return a callback for creating an instance of the bean, if any._@since 5.0;@Nullable_	public Supplier<?> getInstanceSupplier() {_		return this.instanceSupplier__	};return,a,callback,for,creating,an,instance,of,the,bean,if,any,since,5,0;nullable,public,supplier,get,instance,supplier,return,this,instance,supplier
AbstractBeanDefinition -> @Nullable 	public Supplier<?> getInstanceSupplier();1530174524;Return a callback for creating an instance of the bean, if any._@since 5.0;@Nullable_	public Supplier<?> getInstanceSupplier() {_		return this.instanceSupplier__	};return,a,callback,for,creating,an,instance,of,the,bean,if,any,since,5,0;nullable,public,supplier,get,instance,supplier,return,this,instance,supplier
AbstractBeanDefinition -> @Nullable 	public Supplier<?> getInstanceSupplier();1530190293;Return a callback for creating an instance of the bean, if any._@since 5.0;@Nullable_	public Supplier<?> getInstanceSupplier() {_		return this.instanceSupplier__	};return,a,callback,for,creating,an,instance,of,the,bean,if,any,since,5,0;nullable,public,supplier,get,instance,supplier,return,this,instance,supplier
AbstractBeanDefinition -> @Nullable 	public Supplier<?> getInstanceSupplier();1532981251;Return a callback for creating an instance of the bean, if any._@since 5.0;@Nullable_	public Supplier<?> getInstanceSupplier() {_		return this.instanceSupplier__	};return,a,callback,for,creating,an,instance,of,the,bean,if,any,since,5,0;nullable,public,supplier,get,instance,supplier,return,this,instance,supplier
AbstractBeanDefinition -> @Nullable 	public Supplier<?> getInstanceSupplier();1536863076;Return a callback for creating an instance of the bean, if any._@since 5.0;@Nullable_	public Supplier<?> getInstanceSupplier() {_		return this.instanceSupplier__	};return,a,callback,for,creating,an,instance,of,the,bean,if,any,since,5,0;nullable,public,supplier,get,instance,supplier,return,this,instance,supplier
AbstractBeanDefinition -> @Deprecated 	protected AbstractBeanDefinition(AbstractBeanDefinition original);1328020251;Create a new AbstractBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from_@deprecated since Spring 2.5, in favor of {@link #AbstractBeanDefinition(BeanDefinition)};@Deprecated_	protected AbstractBeanDefinition(AbstractBeanDefinition original) {_		this((BeanDefinition) original)__	};create,a,new,abstract,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from,deprecated,since,spring,2,5,in,favor,of,link,abstract,bean,definition,bean,definition;deprecated,protected,abstract,bean,definition,abstract,bean,definition,original,this,bean,definition,original
AbstractBeanDefinition -> @Deprecated 	protected AbstractBeanDefinition(AbstractBeanDefinition original);1337202589;Create a new AbstractBeanDefinition as a deep copy of the given_bean definition._@param original the original bean definition to copy from_@deprecated since Spring 2.5, in favor of {@link #AbstractBeanDefinition(BeanDefinition)};@Deprecated_	protected AbstractBeanDefinition(AbstractBeanDefinition original) {_		this((BeanDefinition) original)__	};create,a,new,abstract,bean,definition,as,a,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from,deprecated,since,spring,2,5,in,favor,of,link,abstract,bean,definition,bean,definition;deprecated,protected,abstract,bean,definition,abstract,bean,definition,original,this,bean,definition,original
AbstractBeanDefinition -> @Deprecated 	protected AbstractBeanDefinition(AbstractBeanDefinition original);1356735495;Create a new AbstractBeanDefinition as a deep copy of the given_bean definition._@param original the original bean definition to copy from_@deprecated since Spring 2.5, in favor of {@link #AbstractBeanDefinition(BeanDefinition)};@Deprecated_	protected AbstractBeanDefinition(AbstractBeanDefinition original) {_		this((BeanDefinition) original)__	};create,a,new,abstract,bean,definition,as,a,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from,deprecated,since,spring,2,5,in,favor,of,link,abstract,bean,definition,bean,definition;deprecated,protected,abstract,bean,definition,abstract,bean,definition,original,this,bean,definition,original
AbstractBeanDefinition -> @Deprecated 	protected AbstractBeanDefinition(AbstractBeanDefinition original);1357119239;Create a new AbstractBeanDefinition as a deep copy of the given_bean definition._@param original the original bean definition to copy from_@deprecated since Spring 2.5, in favor of {@link #AbstractBeanDefinition(BeanDefinition)};@Deprecated_	protected AbstractBeanDefinition(AbstractBeanDefinition original) {_		this((BeanDefinition) original)__	};create,a,new,abstract,bean,definition,as,a,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from,deprecated,since,spring,2,5,in,favor,of,link,abstract,bean,definition,bean,definition;deprecated,protected,abstract,bean,definition,abstract,bean,definition,original,this,bean,definition,original
AbstractBeanDefinition -> protected AbstractBeanDefinition(BeanDefinition original);1328020251;Create a new AbstractBeanDefinition as deep copy of the given_bean definition._@param original the original bean definition to copy from;protected AbstractBeanDefinition(BeanDefinition original) {_		setParentName(original.getParentName())__		setBeanClassName(original.getBeanClassName())__		setFactoryBeanName(original.getFactoryBeanName())__		setFactoryMethodName(original.getFactoryMethodName())__		setScope(original.getScope())__		setAbstract(original.isAbstract())__		setLazyInit(original.isLazyInit())__		setRole(original.getRole())__		setConstructorArgumentValues(new ConstructorArgumentValues(original.getConstructorArgumentValues()))__		setPropertyValues(new MutablePropertyValues(original.getPropertyValues()))__		setSource(original.getSource())__		copyAttributesFrom(original)___		if (original instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition originalAbd = (AbstractBeanDefinition) original__			if (originalAbd.hasBeanClass()) {_				setBeanClass(originalAbd.getBeanClass())__			}_			setAutowireMode(originalAbd.getAutowireMode())__			setDependencyCheck(originalAbd.getDependencyCheck())__			setDependsOn(originalAbd.getDependsOn())__			setAutowireCandidate(originalAbd.isAutowireCandidate())__			copyQualifiersFrom(originalAbd)__			setPrimary(originalAbd.isPrimary())__			setNonPublicAccessAllowed(originalAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(originalAbd.isLenientConstructorResolution())__			setInitMethodName(originalAbd.getInitMethodName())__			setEnforceInitMethod(originalAbd.isEnforceInitMethod())__			setDestroyMethodName(originalAbd.getDestroyMethodName())__			setEnforceDestroyMethod(originalAbd.isEnforceDestroyMethod())__			setMethodOverrides(new MethodOverrides(originalAbd.getMethodOverrides()))__			setSynthetic(originalAbd.isSynthetic())__			setResource(originalAbd.getResource())__		}_		else {_			setResourceDescription(original.getResourceDescription())__		}_	};create,a,new,abstract,bean,definition,as,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;protected,abstract,bean,definition,bean,definition,original,set,parent,name,original,get,parent,name,set,bean,class,name,original,get,bean,class,name,set,factory,bean,name,original,get,factory,bean,name,set,factory,method,name,original,get,factory,method,name,set,scope,original,get,scope,set,abstract,original,is,abstract,set,lazy,init,original,is,lazy,init,set,role,original,get,role,set,constructor,argument,values,new,constructor,argument,values,original,get,constructor,argument,values,set,property,values,new,mutable,property,values,original,get,property,values,set,source,original,get,source,copy,attributes,from,original,if,original,instanceof,abstract,bean,definition,abstract,bean,definition,original,abd,abstract,bean,definition,original,if,original,abd,has,bean,class,set,bean,class,original,abd,get,bean,class,set,autowire,mode,original,abd,get,autowire,mode,set,dependency,check,original,abd,get,dependency,check,set,depends,on,original,abd,get,depends,on,set,autowire,candidate,original,abd,is,autowire,candidate,copy,qualifiers,from,original,abd,set,primary,original,abd,is,primary,set,non,public,access,allowed,original,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,original,abd,is,lenient,constructor,resolution,set,init,method,name,original,abd,get,init,method,name,set,enforce,init,method,original,abd,is,enforce,init,method,set,destroy,method,name,original,abd,get,destroy,method,name,set,enforce,destroy,method,original,abd,is,enforce,destroy,method,set,method,overrides,new,method,overrides,original,abd,get,method,overrides,set,synthetic,original,abd,is,synthetic,set,resource,original,abd,get,resource,else,set,resource,description,original,get,resource,description
AbstractBeanDefinition -> protected AbstractBeanDefinition(BeanDefinition original);1337202589;Create a new AbstractBeanDefinition as a deep copy of the given_bean definition._@param original the original bean definition to copy from;protected AbstractBeanDefinition(BeanDefinition original) {_		setParentName(original.getParentName())__		setBeanClassName(original.getBeanClassName())__		setFactoryBeanName(original.getFactoryBeanName())__		setFactoryMethodName(original.getFactoryMethodName())__		setScope(original.getScope())__		setAbstract(original.isAbstract())__		setLazyInit(original.isLazyInit())__		setRole(original.getRole())__		setConstructorArgumentValues(new ConstructorArgumentValues(original.getConstructorArgumentValues()))__		setPropertyValues(new MutablePropertyValues(original.getPropertyValues()))__		setSource(original.getSource())__		copyAttributesFrom(original)___		if (original instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition originalAbd = (AbstractBeanDefinition) original__			if (originalAbd.hasBeanClass()) {_				setBeanClass(originalAbd.getBeanClass())__			}_			setAutowireMode(originalAbd.getAutowireMode())__			setDependencyCheck(originalAbd.getDependencyCheck())__			setDependsOn(originalAbd.getDependsOn())__			setAutowireCandidate(originalAbd.isAutowireCandidate())__			copyQualifiersFrom(originalAbd)__			setPrimary(originalAbd.isPrimary())__			setNonPublicAccessAllowed(originalAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(originalAbd.isLenientConstructorResolution())__			setInitMethodName(originalAbd.getInitMethodName())__			setEnforceInitMethod(originalAbd.isEnforceInitMethod())__			setDestroyMethodName(originalAbd.getDestroyMethodName())__			setEnforceDestroyMethod(originalAbd.isEnforceDestroyMethod())__			setMethodOverrides(new MethodOverrides(originalAbd.getMethodOverrides()))__			setSynthetic(originalAbd.isSynthetic())__			setResource(originalAbd.getResource())__		}_		else {_			setResourceDescription(original.getResourceDescription())__		}_	};create,a,new,abstract,bean,definition,as,a,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;protected,abstract,bean,definition,bean,definition,original,set,parent,name,original,get,parent,name,set,bean,class,name,original,get,bean,class,name,set,factory,bean,name,original,get,factory,bean,name,set,factory,method,name,original,get,factory,method,name,set,scope,original,get,scope,set,abstract,original,is,abstract,set,lazy,init,original,is,lazy,init,set,role,original,get,role,set,constructor,argument,values,new,constructor,argument,values,original,get,constructor,argument,values,set,property,values,new,mutable,property,values,original,get,property,values,set,source,original,get,source,copy,attributes,from,original,if,original,instanceof,abstract,bean,definition,abstract,bean,definition,original,abd,abstract,bean,definition,original,if,original,abd,has,bean,class,set,bean,class,original,abd,get,bean,class,set,autowire,mode,original,abd,get,autowire,mode,set,dependency,check,original,abd,get,dependency,check,set,depends,on,original,abd,get,depends,on,set,autowire,candidate,original,abd,is,autowire,candidate,copy,qualifiers,from,original,abd,set,primary,original,abd,is,primary,set,non,public,access,allowed,original,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,original,abd,is,lenient,constructor,resolution,set,init,method,name,original,abd,get,init,method,name,set,enforce,init,method,original,abd,is,enforce,init,method,set,destroy,method,name,original,abd,get,destroy,method,name,set,enforce,destroy,method,original,abd,is,enforce,destroy,method,set,method,overrides,new,method,overrides,original,abd,get,method,overrides,set,synthetic,original,abd,is,synthetic,set,resource,original,abd,get,resource,else,set,resource,description,original,get,resource,description
AbstractBeanDefinition -> protected AbstractBeanDefinition(BeanDefinition original);1356735495;Create a new AbstractBeanDefinition as a deep copy of the given_bean definition._@param original the original bean definition to copy from;protected AbstractBeanDefinition(BeanDefinition original) {_		setParentName(original.getParentName())__		setBeanClassName(original.getBeanClassName())__		setFactoryBeanName(original.getFactoryBeanName())__		setFactoryMethodName(original.getFactoryMethodName())__		setScope(original.getScope())__		setAbstract(original.isAbstract())__		setLazyInit(original.isLazyInit())__		setRole(original.getRole())__		setConstructorArgumentValues(new ConstructorArgumentValues(original.getConstructorArgumentValues()))__		setPropertyValues(new MutablePropertyValues(original.getPropertyValues()))__		setSource(original.getSource())__		copyAttributesFrom(original)___		if (original instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition originalAbd = (AbstractBeanDefinition) original__			if (originalAbd.hasBeanClass()) {_				setBeanClass(originalAbd.getBeanClass())__			}_			setAutowireMode(originalAbd.getAutowireMode())__			setDependencyCheck(originalAbd.getDependencyCheck())__			setDependsOn(originalAbd.getDependsOn())__			setAutowireCandidate(originalAbd.isAutowireCandidate())__			copyQualifiersFrom(originalAbd)__			setPrimary(originalAbd.isPrimary())__			setNonPublicAccessAllowed(originalAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(originalAbd.isLenientConstructorResolution())__			setInitMethodName(originalAbd.getInitMethodName())__			setEnforceInitMethod(originalAbd.isEnforceInitMethod())__			setDestroyMethodName(originalAbd.getDestroyMethodName())__			setEnforceDestroyMethod(originalAbd.isEnforceDestroyMethod())__			setMethodOverrides(new MethodOverrides(originalAbd.getMethodOverrides()))__			setSynthetic(originalAbd.isSynthetic())__			setResource(originalAbd.getResource())__		}_		else {_			setResourceDescription(original.getResourceDescription())__		}_	};create,a,new,abstract,bean,definition,as,a,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;protected,abstract,bean,definition,bean,definition,original,set,parent,name,original,get,parent,name,set,bean,class,name,original,get,bean,class,name,set,factory,bean,name,original,get,factory,bean,name,set,factory,method,name,original,get,factory,method,name,set,scope,original,get,scope,set,abstract,original,is,abstract,set,lazy,init,original,is,lazy,init,set,role,original,get,role,set,constructor,argument,values,new,constructor,argument,values,original,get,constructor,argument,values,set,property,values,new,mutable,property,values,original,get,property,values,set,source,original,get,source,copy,attributes,from,original,if,original,instanceof,abstract,bean,definition,abstract,bean,definition,original,abd,abstract,bean,definition,original,if,original,abd,has,bean,class,set,bean,class,original,abd,get,bean,class,set,autowire,mode,original,abd,get,autowire,mode,set,dependency,check,original,abd,get,dependency,check,set,depends,on,original,abd,get,depends,on,set,autowire,candidate,original,abd,is,autowire,candidate,copy,qualifiers,from,original,abd,set,primary,original,abd,is,primary,set,non,public,access,allowed,original,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,original,abd,is,lenient,constructor,resolution,set,init,method,name,original,abd,get,init,method,name,set,enforce,init,method,original,abd,is,enforce,init,method,set,destroy,method,name,original,abd,get,destroy,method,name,set,enforce,destroy,method,original,abd,is,enforce,destroy,method,set,method,overrides,new,method,overrides,original,abd,get,method,overrides,set,synthetic,original,abd,is,synthetic,set,resource,original,abd,get,resource,else,set,resource,description,original,get,resource,description
AbstractBeanDefinition -> protected AbstractBeanDefinition(BeanDefinition original);1357119239;Create a new AbstractBeanDefinition as a deep copy of the given_bean definition._@param original the original bean definition to copy from;protected AbstractBeanDefinition(BeanDefinition original) {_		setParentName(original.getParentName())__		setBeanClassName(original.getBeanClassName())__		setFactoryBeanName(original.getFactoryBeanName())__		setFactoryMethodName(original.getFactoryMethodName())__		setScope(original.getScope())__		setAbstract(original.isAbstract())__		setLazyInit(original.isLazyInit())__		setRole(original.getRole())__		setConstructorArgumentValues(new ConstructorArgumentValues(original.getConstructorArgumentValues()))__		setPropertyValues(new MutablePropertyValues(original.getPropertyValues()))__		setSource(original.getSource())__		copyAttributesFrom(original)___		if (original instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition originalAbd = (AbstractBeanDefinition) original__			if (originalAbd.hasBeanClass()) {_				setBeanClass(originalAbd.getBeanClass())__			}_			setAutowireMode(originalAbd.getAutowireMode())__			setDependencyCheck(originalAbd.getDependencyCheck())__			setDependsOn(originalAbd.getDependsOn())__			setAutowireCandidate(originalAbd.isAutowireCandidate())__			copyQualifiersFrom(originalAbd)__			setPrimary(originalAbd.isPrimary())__			setNonPublicAccessAllowed(originalAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(originalAbd.isLenientConstructorResolution())__			setInitMethodName(originalAbd.getInitMethodName())__			setEnforceInitMethod(originalAbd.isEnforceInitMethod())__			setDestroyMethodName(originalAbd.getDestroyMethodName())__			setEnforceDestroyMethod(originalAbd.isEnforceDestroyMethod())__			setMethodOverrides(new MethodOverrides(originalAbd.getMethodOverrides()))__			setSynthetic(originalAbd.isSynthetic())__			setResource(originalAbd.getResource())__		}_		else {_			setResourceDescription(original.getResourceDescription())__		}_	};create,a,new,abstract,bean,definition,as,a,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;protected,abstract,bean,definition,bean,definition,original,set,parent,name,original,get,parent,name,set,bean,class,name,original,get,bean,class,name,set,factory,bean,name,original,get,factory,bean,name,set,factory,method,name,original,get,factory,method,name,set,scope,original,get,scope,set,abstract,original,is,abstract,set,lazy,init,original,is,lazy,init,set,role,original,get,role,set,constructor,argument,values,new,constructor,argument,values,original,get,constructor,argument,values,set,property,values,new,mutable,property,values,original,get,property,values,set,source,original,get,source,copy,attributes,from,original,if,original,instanceof,abstract,bean,definition,abstract,bean,definition,original,abd,abstract,bean,definition,original,if,original,abd,has,bean,class,set,bean,class,original,abd,get,bean,class,set,autowire,mode,original,abd,get,autowire,mode,set,dependency,check,original,abd,get,dependency,check,set,depends,on,original,abd,get,depends,on,set,autowire,candidate,original,abd,is,autowire,candidate,copy,qualifiers,from,original,abd,set,primary,original,abd,is,primary,set,non,public,access,allowed,original,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,original,abd,is,lenient,constructor,resolution,set,init,method,name,original,abd,get,init,method,name,set,enforce,init,method,original,abd,is,enforce,init,method,set,destroy,method,name,original,abd,get,destroy,method,name,set,enforce,destroy,method,original,abd,is,enforce,destroy,method,set,method,overrides,new,method,overrides,original,abd,get,method,overrides,set,synthetic,original,abd,is,synthetic,set,resource,original,abd,get,resource,else,set,resource,description,original,get,resource,description
AbstractBeanDefinition -> protected AbstractBeanDefinition(BeanDefinition original);1367508310;Create a new AbstractBeanDefinition as a deep copy of the given_bean definition._@param original the original bean definition to copy from;protected AbstractBeanDefinition(BeanDefinition original) {_		setParentName(original.getParentName())__		setBeanClassName(original.getBeanClassName())__		setFactoryBeanName(original.getFactoryBeanName())__		setFactoryMethodName(original.getFactoryMethodName())__		setScope(original.getScope())__		setAbstract(original.isAbstract())__		setLazyInit(original.isLazyInit())__		setRole(original.getRole())__		setConstructorArgumentValues(new ConstructorArgumentValues(original.getConstructorArgumentValues()))__		setPropertyValues(new MutablePropertyValues(original.getPropertyValues()))__		setSource(original.getSource())__		copyAttributesFrom(original)___		if (original instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition originalAbd = (AbstractBeanDefinition) original__			if (originalAbd.hasBeanClass()) {_				setBeanClass(originalAbd.getBeanClass())__			}_			setAutowireMode(originalAbd.getAutowireMode())__			setDependencyCheck(originalAbd.getDependencyCheck())__			setDependsOn(originalAbd.getDependsOn())__			setAutowireCandidate(originalAbd.isAutowireCandidate())__			copyQualifiersFrom(originalAbd)__			setPrimary(originalAbd.isPrimary())__			setNonPublicAccessAllowed(originalAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(originalAbd.isLenientConstructorResolution())__			setInitMethodName(originalAbd.getInitMethodName())__			setEnforceInitMethod(originalAbd.isEnforceInitMethod())__			setDestroyMethodName(originalAbd.getDestroyMethodName())__			setEnforceDestroyMethod(originalAbd.isEnforceDestroyMethod())__			setMethodOverrides(new MethodOverrides(originalAbd.getMethodOverrides()))__			setSynthetic(originalAbd.isSynthetic())__			setResource(originalAbd.getResource())__		}_		else {_			setResourceDescription(original.getResourceDescription())__		}_	};create,a,new,abstract,bean,definition,as,a,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;protected,abstract,bean,definition,bean,definition,original,set,parent,name,original,get,parent,name,set,bean,class,name,original,get,bean,class,name,set,factory,bean,name,original,get,factory,bean,name,set,factory,method,name,original,get,factory,method,name,set,scope,original,get,scope,set,abstract,original,is,abstract,set,lazy,init,original,is,lazy,init,set,role,original,get,role,set,constructor,argument,values,new,constructor,argument,values,original,get,constructor,argument,values,set,property,values,new,mutable,property,values,original,get,property,values,set,source,original,get,source,copy,attributes,from,original,if,original,instanceof,abstract,bean,definition,abstract,bean,definition,original,abd,abstract,bean,definition,original,if,original,abd,has,bean,class,set,bean,class,original,abd,get,bean,class,set,autowire,mode,original,abd,get,autowire,mode,set,dependency,check,original,abd,get,dependency,check,set,depends,on,original,abd,get,depends,on,set,autowire,candidate,original,abd,is,autowire,candidate,copy,qualifiers,from,original,abd,set,primary,original,abd,is,primary,set,non,public,access,allowed,original,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,original,abd,is,lenient,constructor,resolution,set,init,method,name,original,abd,get,init,method,name,set,enforce,init,method,original,abd,is,enforce,init,method,set,destroy,method,name,original,abd,get,destroy,method,name,set,enforce,destroy,method,original,abd,is,enforce,destroy,method,set,method,overrides,new,method,overrides,original,abd,get,method,overrides,set,synthetic,original,abd,is,synthetic,set,resource,original,abd,get,resource,else,set,resource,description,original,get,resource,description
AbstractBeanDefinition -> protected AbstractBeanDefinition(BeanDefinition original);1367943112;Create a new AbstractBeanDefinition as a deep copy of the given_bean definition._@param original the original bean definition to copy from;protected AbstractBeanDefinition(BeanDefinition original) {_		setParentName(original.getParentName())__		setBeanClassName(original.getBeanClassName())__		setFactoryBeanName(original.getFactoryBeanName())__		setFactoryMethodName(original.getFactoryMethodName())__		setScope(original.getScope())__		setAbstract(original.isAbstract())__		setLazyInit(original.isLazyInit())__		setRole(original.getRole())__		setConstructorArgumentValues(new ConstructorArgumentValues(original.getConstructorArgumentValues()))__		setPropertyValues(new MutablePropertyValues(original.getPropertyValues()))__		setSource(original.getSource())__		copyAttributesFrom(original)___		if (original instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition originalAbd = (AbstractBeanDefinition) original__			if (originalAbd.hasBeanClass()) {_				setBeanClass(originalAbd.getBeanClass())__			}_			setAutowireMode(originalAbd.getAutowireMode())__			setDependencyCheck(originalAbd.getDependencyCheck())__			setDependsOn(originalAbd.getDependsOn())__			setAutowireCandidate(originalAbd.isAutowireCandidate())__			copyQualifiersFrom(originalAbd)__			setPrimary(originalAbd.isPrimary())__			setNonPublicAccessAllowed(originalAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(originalAbd.isLenientConstructorResolution())__			setInitMethodName(originalAbd.getInitMethodName())__			setEnforceInitMethod(originalAbd.isEnforceInitMethod())__			setDestroyMethodName(originalAbd.getDestroyMethodName())__			setEnforceDestroyMethod(originalAbd.isEnforceDestroyMethod())__			setMethodOverrides(new MethodOverrides(originalAbd.getMethodOverrides()))__			setSynthetic(originalAbd.isSynthetic())__			setResource(originalAbd.getResource())__		}_		else {_			setResourceDescription(original.getResourceDescription())__		}_	};create,a,new,abstract,bean,definition,as,a,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;protected,abstract,bean,definition,bean,definition,original,set,parent,name,original,get,parent,name,set,bean,class,name,original,get,bean,class,name,set,factory,bean,name,original,get,factory,bean,name,set,factory,method,name,original,get,factory,method,name,set,scope,original,get,scope,set,abstract,original,is,abstract,set,lazy,init,original,is,lazy,init,set,role,original,get,role,set,constructor,argument,values,new,constructor,argument,values,original,get,constructor,argument,values,set,property,values,new,mutable,property,values,original,get,property,values,set,source,original,get,source,copy,attributes,from,original,if,original,instanceof,abstract,bean,definition,abstract,bean,definition,original,abd,abstract,bean,definition,original,if,original,abd,has,bean,class,set,bean,class,original,abd,get,bean,class,set,autowire,mode,original,abd,get,autowire,mode,set,dependency,check,original,abd,get,dependency,check,set,depends,on,original,abd,get,depends,on,set,autowire,candidate,original,abd,is,autowire,candidate,copy,qualifiers,from,original,abd,set,primary,original,abd,is,primary,set,non,public,access,allowed,original,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,original,abd,is,lenient,constructor,resolution,set,init,method,name,original,abd,get,init,method,name,set,enforce,init,method,original,abd,is,enforce,init,method,set,destroy,method,name,original,abd,get,destroy,method,name,set,enforce,destroy,method,original,abd,is,enforce,destroy,method,set,method,overrides,new,method,overrides,original,abd,get,method,overrides,set,synthetic,original,abd,is,synthetic,set,resource,original,abd,get,resource,else,set,resource,description,original,get,resource,description
AbstractBeanDefinition -> protected AbstractBeanDefinition(BeanDefinition original);1368482696;Create a new AbstractBeanDefinition as a deep copy of the given_bean definition._@param original the original bean definition to copy from;protected AbstractBeanDefinition(BeanDefinition original) {_		setParentName(original.getParentName())__		setBeanClassName(original.getBeanClassName())__		setFactoryBeanName(original.getFactoryBeanName())__		setFactoryMethodName(original.getFactoryMethodName())__		setScope(original.getScope())__		setAbstract(original.isAbstract())__		setLazyInit(original.isLazyInit())__		setRole(original.getRole())__		setConstructorArgumentValues(new ConstructorArgumentValues(original.getConstructorArgumentValues()))__		setPropertyValues(new MutablePropertyValues(original.getPropertyValues()))__		setSource(original.getSource())__		copyAttributesFrom(original)___		if (original instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition originalAbd = (AbstractBeanDefinition) original__			if (originalAbd.hasBeanClass()) {_				setBeanClass(originalAbd.getBeanClass())__			}_			setAutowireMode(originalAbd.getAutowireMode())__			setDependencyCheck(originalAbd.getDependencyCheck())__			setDependsOn(originalAbd.getDependsOn())__			setAutowireCandidate(originalAbd.isAutowireCandidate())__			copyQualifiersFrom(originalAbd)__			setPrimary(originalAbd.isPrimary())__			setNonPublicAccessAllowed(originalAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(originalAbd.isLenientConstructorResolution())__			setInitMethodName(originalAbd.getInitMethodName())__			setEnforceInitMethod(originalAbd.isEnforceInitMethod())__			setDestroyMethodName(originalAbd.getDestroyMethodName())__			setEnforceDestroyMethod(originalAbd.isEnforceDestroyMethod())__			setMethodOverrides(new MethodOverrides(originalAbd.getMethodOverrides()))__			setSynthetic(originalAbd.isSynthetic())__			setResource(originalAbd.getResource())__		}_		else {_			setResourceDescription(original.getResourceDescription())__		}_	};create,a,new,abstract,bean,definition,as,a,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;protected,abstract,bean,definition,bean,definition,original,set,parent,name,original,get,parent,name,set,bean,class,name,original,get,bean,class,name,set,factory,bean,name,original,get,factory,bean,name,set,factory,method,name,original,get,factory,method,name,set,scope,original,get,scope,set,abstract,original,is,abstract,set,lazy,init,original,is,lazy,init,set,role,original,get,role,set,constructor,argument,values,new,constructor,argument,values,original,get,constructor,argument,values,set,property,values,new,mutable,property,values,original,get,property,values,set,source,original,get,source,copy,attributes,from,original,if,original,instanceof,abstract,bean,definition,abstract,bean,definition,original,abd,abstract,bean,definition,original,if,original,abd,has,bean,class,set,bean,class,original,abd,get,bean,class,set,autowire,mode,original,abd,get,autowire,mode,set,dependency,check,original,abd,get,dependency,check,set,depends,on,original,abd,get,depends,on,set,autowire,candidate,original,abd,is,autowire,candidate,copy,qualifiers,from,original,abd,set,primary,original,abd,is,primary,set,non,public,access,allowed,original,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,original,abd,is,lenient,constructor,resolution,set,init,method,name,original,abd,get,init,method,name,set,enforce,init,method,original,abd,is,enforce,init,method,set,destroy,method,name,original,abd,get,destroy,method,name,set,enforce,destroy,method,original,abd,is,enforce,destroy,method,set,method,overrides,new,method,overrides,original,abd,get,method,overrides,set,synthetic,original,abd,is,synthetic,set,resource,original,abd,get,resource,else,set,resource,description,original,get,resource,description
AbstractBeanDefinition -> protected AbstractBeanDefinition(BeanDefinition original);1385412762;Create a new AbstractBeanDefinition as a deep copy of the given_bean definition._@param original the original bean definition to copy from;protected AbstractBeanDefinition(BeanDefinition original) {_		setParentName(original.getParentName())__		setBeanClassName(original.getBeanClassName())__		setFactoryBeanName(original.getFactoryBeanName())__		setFactoryMethodName(original.getFactoryMethodName())__		setScope(original.getScope())__		setAbstract(original.isAbstract())__		setLazyInit(original.isLazyInit())__		setRole(original.getRole())__		setConstructorArgumentValues(new ConstructorArgumentValues(original.getConstructorArgumentValues()))__		setPropertyValues(new MutablePropertyValues(original.getPropertyValues()))__		setSource(original.getSource())__		copyAttributesFrom(original)___		if (original instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition originalAbd = (AbstractBeanDefinition) original__			if (originalAbd.hasBeanClass()) {_				setBeanClass(originalAbd.getBeanClass())__			}_			setAutowireMode(originalAbd.getAutowireMode())__			setDependencyCheck(originalAbd.getDependencyCheck())__			setDependsOn(originalAbd.getDependsOn())__			setAutowireCandidate(originalAbd.isAutowireCandidate())__			copyQualifiersFrom(originalAbd)__			setPrimary(originalAbd.isPrimary())__			setNonPublicAccessAllowed(originalAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(originalAbd.isLenientConstructorResolution())__			setInitMethodName(originalAbd.getInitMethodName())__			setEnforceInitMethod(originalAbd.isEnforceInitMethod())__			setDestroyMethodName(originalAbd.getDestroyMethodName())__			setEnforceDestroyMethod(originalAbd.isEnforceDestroyMethod())__			setMethodOverrides(new MethodOverrides(originalAbd.getMethodOverrides()))__			setSynthetic(originalAbd.isSynthetic())__			setResource(originalAbd.getResource())__		}_		else {_			setResourceDescription(original.getResourceDescription())__		}_	};create,a,new,abstract,bean,definition,as,a,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;protected,abstract,bean,definition,bean,definition,original,set,parent,name,original,get,parent,name,set,bean,class,name,original,get,bean,class,name,set,factory,bean,name,original,get,factory,bean,name,set,factory,method,name,original,get,factory,method,name,set,scope,original,get,scope,set,abstract,original,is,abstract,set,lazy,init,original,is,lazy,init,set,role,original,get,role,set,constructor,argument,values,new,constructor,argument,values,original,get,constructor,argument,values,set,property,values,new,mutable,property,values,original,get,property,values,set,source,original,get,source,copy,attributes,from,original,if,original,instanceof,abstract,bean,definition,abstract,bean,definition,original,abd,abstract,bean,definition,original,if,original,abd,has,bean,class,set,bean,class,original,abd,get,bean,class,set,autowire,mode,original,abd,get,autowire,mode,set,dependency,check,original,abd,get,dependency,check,set,depends,on,original,abd,get,depends,on,set,autowire,candidate,original,abd,is,autowire,candidate,copy,qualifiers,from,original,abd,set,primary,original,abd,is,primary,set,non,public,access,allowed,original,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,original,abd,is,lenient,constructor,resolution,set,init,method,name,original,abd,get,init,method,name,set,enforce,init,method,original,abd,is,enforce,init,method,set,destroy,method,name,original,abd,get,destroy,method,name,set,enforce,destroy,method,original,abd,is,enforce,destroy,method,set,method,overrides,new,method,overrides,original,abd,get,method,overrides,set,synthetic,original,abd,is,synthetic,set,resource,original,abd,get,resource,else,set,resource,description,original,get,resource,description
AbstractBeanDefinition -> protected AbstractBeanDefinition(BeanDefinition original);1392245317;Create a new AbstractBeanDefinition as a deep copy of the given_bean definition._@param original the original bean definition to copy from;protected AbstractBeanDefinition(BeanDefinition original) {_		setParentName(original.getParentName())__		setBeanClassName(original.getBeanClassName())__		setFactoryBeanName(original.getFactoryBeanName())__		setFactoryMethodName(original.getFactoryMethodName())__		setScope(original.getScope())__		setAbstract(original.isAbstract())__		setLazyInit(original.isLazyInit())__		setRole(original.getRole())__		setConstructorArgumentValues(new ConstructorArgumentValues(original.getConstructorArgumentValues()))__		setPropertyValues(new MutablePropertyValues(original.getPropertyValues()))__		setSource(original.getSource())__		copyAttributesFrom(original)___		if (original instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition originalAbd = (AbstractBeanDefinition) original__			if (originalAbd.hasBeanClass()) {_				setBeanClass(originalAbd.getBeanClass())__			}_			setAutowireMode(originalAbd.getAutowireMode())__			setDependencyCheck(originalAbd.getDependencyCheck())__			setDependsOn(originalAbd.getDependsOn())__			setAutowireCandidate(originalAbd.isAutowireCandidate())__			copyQualifiersFrom(originalAbd)__			setPrimary(originalAbd.isPrimary())__			setNonPublicAccessAllowed(originalAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(originalAbd.isLenientConstructorResolution())__			setInitMethodName(originalAbd.getInitMethodName())__			setEnforceInitMethod(originalAbd.isEnforceInitMethod())__			setDestroyMethodName(originalAbd.getDestroyMethodName())__			setEnforceDestroyMethod(originalAbd.isEnforceDestroyMethod())__			setMethodOverrides(new MethodOverrides(originalAbd.getMethodOverrides()))__			setSynthetic(originalAbd.isSynthetic())__			setResource(originalAbd.getResource())__		}_		else {_			setResourceDescription(original.getResourceDescription())__		}_	};create,a,new,abstract,bean,definition,as,a,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;protected,abstract,bean,definition,bean,definition,original,set,parent,name,original,get,parent,name,set,bean,class,name,original,get,bean,class,name,set,factory,bean,name,original,get,factory,bean,name,set,factory,method,name,original,get,factory,method,name,set,scope,original,get,scope,set,abstract,original,is,abstract,set,lazy,init,original,is,lazy,init,set,role,original,get,role,set,constructor,argument,values,new,constructor,argument,values,original,get,constructor,argument,values,set,property,values,new,mutable,property,values,original,get,property,values,set,source,original,get,source,copy,attributes,from,original,if,original,instanceof,abstract,bean,definition,abstract,bean,definition,original,abd,abstract,bean,definition,original,if,original,abd,has,bean,class,set,bean,class,original,abd,get,bean,class,set,autowire,mode,original,abd,get,autowire,mode,set,dependency,check,original,abd,get,dependency,check,set,depends,on,original,abd,get,depends,on,set,autowire,candidate,original,abd,is,autowire,candidate,copy,qualifiers,from,original,abd,set,primary,original,abd,is,primary,set,non,public,access,allowed,original,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,original,abd,is,lenient,constructor,resolution,set,init,method,name,original,abd,get,init,method,name,set,enforce,init,method,original,abd,is,enforce,init,method,set,destroy,method,name,original,abd,get,destroy,method,name,set,enforce,destroy,method,original,abd,is,enforce,destroy,method,set,method,overrides,new,method,overrides,original,abd,get,method,overrides,set,synthetic,original,abd,is,synthetic,set,resource,original,abd,get,resource,else,set,resource,description,original,get,resource,description
AbstractBeanDefinition -> protected AbstractBeanDefinition(BeanDefinition original);1397163142;Create a new AbstractBeanDefinition as a deep copy of the given_bean definition._@param original the original bean definition to copy from;protected AbstractBeanDefinition(BeanDefinition original) {_		setParentName(original.getParentName())__		setBeanClassName(original.getBeanClassName())__		setFactoryBeanName(original.getFactoryBeanName())__		setFactoryMethodName(original.getFactoryMethodName())__		setScope(original.getScope())__		setAbstract(original.isAbstract())__		setLazyInit(original.isLazyInit())__		setRole(original.getRole())__		setConstructorArgumentValues(new ConstructorArgumentValues(original.getConstructorArgumentValues()))__		setPropertyValues(new MutablePropertyValues(original.getPropertyValues()))__		setSource(original.getSource())__		copyAttributesFrom(original)___		if (original instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition originalAbd = (AbstractBeanDefinition) original__			if (originalAbd.hasBeanClass()) {_				setBeanClass(originalAbd.getBeanClass())__			}_			setAutowireMode(originalAbd.getAutowireMode())__			setDependencyCheck(originalAbd.getDependencyCheck())__			setDependsOn(originalAbd.getDependsOn())__			setAutowireCandidate(originalAbd.isAutowireCandidate())__			copyQualifiersFrom(originalAbd)__			setPrimary(originalAbd.isPrimary())__			setNonPublicAccessAllowed(originalAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(originalAbd.isLenientConstructorResolution())__			setInitMethodName(originalAbd.getInitMethodName())__			setEnforceInitMethod(originalAbd.isEnforceInitMethod())__			setDestroyMethodName(originalAbd.getDestroyMethodName())__			setEnforceDestroyMethod(originalAbd.isEnforceDestroyMethod())__			setMethodOverrides(new MethodOverrides(originalAbd.getMethodOverrides()))__			setSynthetic(originalAbd.isSynthetic())__			setResource(originalAbd.getResource())__		}_		else {_			setResourceDescription(original.getResourceDescription())__		}_	};create,a,new,abstract,bean,definition,as,a,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;protected,abstract,bean,definition,bean,definition,original,set,parent,name,original,get,parent,name,set,bean,class,name,original,get,bean,class,name,set,factory,bean,name,original,get,factory,bean,name,set,factory,method,name,original,get,factory,method,name,set,scope,original,get,scope,set,abstract,original,is,abstract,set,lazy,init,original,is,lazy,init,set,role,original,get,role,set,constructor,argument,values,new,constructor,argument,values,original,get,constructor,argument,values,set,property,values,new,mutable,property,values,original,get,property,values,set,source,original,get,source,copy,attributes,from,original,if,original,instanceof,abstract,bean,definition,abstract,bean,definition,original,abd,abstract,bean,definition,original,if,original,abd,has,bean,class,set,bean,class,original,abd,get,bean,class,set,autowire,mode,original,abd,get,autowire,mode,set,dependency,check,original,abd,get,dependency,check,set,depends,on,original,abd,get,depends,on,set,autowire,candidate,original,abd,is,autowire,candidate,copy,qualifiers,from,original,abd,set,primary,original,abd,is,primary,set,non,public,access,allowed,original,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,original,abd,is,lenient,constructor,resolution,set,init,method,name,original,abd,get,init,method,name,set,enforce,init,method,original,abd,is,enforce,init,method,set,destroy,method,name,original,abd,get,destroy,method,name,set,enforce,destroy,method,original,abd,is,enforce,destroy,method,set,method,overrides,new,method,overrides,original,abd,get,method,overrides,set,synthetic,original,abd,is,synthetic,set,resource,original,abd,get,resource,else,set,resource,description,original,get,resource,description
AbstractBeanDefinition -> protected AbstractBeanDefinition(BeanDefinition original);1398898390;Create a new AbstractBeanDefinition as a deep copy of the given_bean definition._@param original the original bean definition to copy from;protected AbstractBeanDefinition(BeanDefinition original) {_		setParentName(original.getParentName())__		setBeanClassName(original.getBeanClassName())__		setFactoryBeanName(original.getFactoryBeanName())__		setFactoryMethodName(original.getFactoryMethodName())__		setScope(original.getScope())__		setAbstract(original.isAbstract())__		setLazyInit(original.isLazyInit())__		setRole(original.getRole())__		setConstructorArgumentValues(new ConstructorArgumentValues(original.getConstructorArgumentValues()))__		setPropertyValues(new MutablePropertyValues(original.getPropertyValues()))__		setSource(original.getSource())__		copyAttributesFrom(original)___		if (original instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition originalAbd = (AbstractBeanDefinition) original__			if (originalAbd.hasBeanClass()) {_				setBeanClass(originalAbd.getBeanClass())__			}_			setAutowireMode(originalAbd.getAutowireMode())__			setDependencyCheck(originalAbd.getDependencyCheck())__			setDependsOn(originalAbd.getDependsOn())__			setAutowireCandidate(originalAbd.isAutowireCandidate())__			copyQualifiersFrom(originalAbd)__			setPrimary(originalAbd.isPrimary())__			setNonPublicAccessAllowed(originalAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(originalAbd.isLenientConstructorResolution())__			setInitMethodName(originalAbd.getInitMethodName())__			setEnforceInitMethod(originalAbd.isEnforceInitMethod())__			setDestroyMethodName(originalAbd.getDestroyMethodName())__			setEnforceDestroyMethod(originalAbd.isEnforceDestroyMethod())__			setMethodOverrides(new MethodOverrides(originalAbd.getMethodOverrides()))__			setSynthetic(originalAbd.isSynthetic())__			setResource(originalAbd.getResource())__		}_		else {_			setResourceDescription(original.getResourceDescription())__		}_	};create,a,new,abstract,bean,definition,as,a,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;protected,abstract,bean,definition,bean,definition,original,set,parent,name,original,get,parent,name,set,bean,class,name,original,get,bean,class,name,set,factory,bean,name,original,get,factory,bean,name,set,factory,method,name,original,get,factory,method,name,set,scope,original,get,scope,set,abstract,original,is,abstract,set,lazy,init,original,is,lazy,init,set,role,original,get,role,set,constructor,argument,values,new,constructor,argument,values,original,get,constructor,argument,values,set,property,values,new,mutable,property,values,original,get,property,values,set,source,original,get,source,copy,attributes,from,original,if,original,instanceof,abstract,bean,definition,abstract,bean,definition,original,abd,abstract,bean,definition,original,if,original,abd,has,bean,class,set,bean,class,original,abd,get,bean,class,set,autowire,mode,original,abd,get,autowire,mode,set,dependency,check,original,abd,get,dependency,check,set,depends,on,original,abd,get,depends,on,set,autowire,candidate,original,abd,is,autowire,candidate,copy,qualifiers,from,original,abd,set,primary,original,abd,is,primary,set,non,public,access,allowed,original,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,original,abd,is,lenient,constructor,resolution,set,init,method,name,original,abd,get,init,method,name,set,enforce,init,method,original,abd,is,enforce,init,method,set,destroy,method,name,original,abd,get,destroy,method,name,set,enforce,destroy,method,original,abd,is,enforce,destroy,method,set,method,overrides,new,method,overrides,original,abd,get,method,overrides,set,synthetic,original,abd,is,synthetic,set,resource,original,abd,get,resource,else,set,resource,description,original,get,resource,description
AbstractBeanDefinition -> protected AbstractBeanDefinition(BeanDefinition original);1407511029;Create a new AbstractBeanDefinition as a deep copy of the given_bean definition._@param original the original bean definition to copy from;protected AbstractBeanDefinition(BeanDefinition original) {_		setParentName(original.getParentName())__		setBeanClassName(original.getBeanClassName())__		setFactoryBeanName(original.getFactoryBeanName())__		setFactoryMethodName(original.getFactoryMethodName())__		setScope(original.getScope())__		setAbstract(original.isAbstract())__		setLazyInit(original.isLazyInit())__		setRole(original.getRole())__		setConstructorArgumentValues(new ConstructorArgumentValues(original.getConstructorArgumentValues()))__		setPropertyValues(new MutablePropertyValues(original.getPropertyValues()))__		setSource(original.getSource())__		copyAttributesFrom(original)___		if (original instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition originalAbd = (AbstractBeanDefinition) original__			if (originalAbd.hasBeanClass()) {_				setBeanClass(originalAbd.getBeanClass())__			}_			setAutowireMode(originalAbd.getAutowireMode())__			setDependencyCheck(originalAbd.getDependencyCheck())__			setDependsOn(originalAbd.getDependsOn())__			setAutowireCandidate(originalAbd.isAutowireCandidate())__			copyQualifiersFrom(originalAbd)__			setPrimary(originalAbd.isPrimary())__			setNonPublicAccessAllowed(originalAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(originalAbd.isLenientConstructorResolution())__			setInitMethodName(originalAbd.getInitMethodName())__			setEnforceInitMethod(originalAbd.isEnforceInitMethod())__			setDestroyMethodName(originalAbd.getDestroyMethodName())__			setEnforceDestroyMethod(originalAbd.isEnforceDestroyMethod())__			setMethodOverrides(new MethodOverrides(originalAbd.getMethodOverrides()))__			setSynthetic(originalAbd.isSynthetic())__			setResource(originalAbd.getResource())__		}_		else {_			setResourceDescription(original.getResourceDescription())__		}_	};create,a,new,abstract,bean,definition,as,a,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;protected,abstract,bean,definition,bean,definition,original,set,parent,name,original,get,parent,name,set,bean,class,name,original,get,bean,class,name,set,factory,bean,name,original,get,factory,bean,name,set,factory,method,name,original,get,factory,method,name,set,scope,original,get,scope,set,abstract,original,is,abstract,set,lazy,init,original,is,lazy,init,set,role,original,get,role,set,constructor,argument,values,new,constructor,argument,values,original,get,constructor,argument,values,set,property,values,new,mutable,property,values,original,get,property,values,set,source,original,get,source,copy,attributes,from,original,if,original,instanceof,abstract,bean,definition,abstract,bean,definition,original,abd,abstract,bean,definition,original,if,original,abd,has,bean,class,set,bean,class,original,abd,get,bean,class,set,autowire,mode,original,abd,get,autowire,mode,set,dependency,check,original,abd,get,dependency,check,set,depends,on,original,abd,get,depends,on,set,autowire,candidate,original,abd,is,autowire,candidate,copy,qualifiers,from,original,abd,set,primary,original,abd,is,primary,set,non,public,access,allowed,original,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,original,abd,is,lenient,constructor,resolution,set,init,method,name,original,abd,get,init,method,name,set,enforce,init,method,original,abd,is,enforce,init,method,set,destroy,method,name,original,abd,get,destroy,method,name,set,enforce,destroy,method,original,abd,is,enforce,destroy,method,set,method,overrides,new,method,overrides,original,abd,get,method,overrides,set,synthetic,original,abd,is,synthetic,set,resource,original,abd,get,resource,else,set,resource,description,original,get,resource,description
AbstractBeanDefinition -> protected AbstractBeanDefinition(BeanDefinition original);1432135182;Create a new AbstractBeanDefinition as a deep copy of the given_bean definition._@param original the original bean definition to copy from;protected AbstractBeanDefinition(BeanDefinition original) {_		setParentName(original.getParentName())__		setBeanClassName(original.getBeanClassName())__		setFactoryBeanName(original.getFactoryBeanName())__		setFactoryMethodName(original.getFactoryMethodName())__		setScope(original.getScope())__		setAbstract(original.isAbstract())__		setLazyInit(original.isLazyInit())__		setRole(original.getRole())__		setConstructorArgumentValues(new ConstructorArgumentValues(original.getConstructorArgumentValues()))__		setPropertyValues(new MutablePropertyValues(original.getPropertyValues()))__		setSource(original.getSource())__		copyAttributesFrom(original)___		if (original instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition originalAbd = (AbstractBeanDefinition) original__			if (originalAbd.hasBeanClass()) {_				setBeanClass(originalAbd.getBeanClass())__			}_			setAutowireMode(originalAbd.getAutowireMode())__			setDependencyCheck(originalAbd.getDependencyCheck())__			setDependsOn(originalAbd.getDependsOn())__			setAutowireCandidate(originalAbd.isAutowireCandidate())__			copyQualifiersFrom(originalAbd)__			setPrimary(originalAbd.isPrimary())__			setNonPublicAccessAllowed(originalAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(originalAbd.isLenientConstructorResolution())__			setInitMethodName(originalAbd.getInitMethodName())__			setEnforceInitMethod(originalAbd.isEnforceInitMethod())__			setDestroyMethodName(originalAbd.getDestroyMethodName())__			setEnforceDestroyMethod(originalAbd.isEnforceDestroyMethod())__			setMethodOverrides(new MethodOverrides(originalAbd.getMethodOverrides()))__			setSynthetic(originalAbd.isSynthetic())__			setResource(originalAbd.getResource())__		}_		else {_			setResourceDescription(original.getResourceDescription())__		}_	};create,a,new,abstract,bean,definition,as,a,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;protected,abstract,bean,definition,bean,definition,original,set,parent,name,original,get,parent,name,set,bean,class,name,original,get,bean,class,name,set,factory,bean,name,original,get,factory,bean,name,set,factory,method,name,original,get,factory,method,name,set,scope,original,get,scope,set,abstract,original,is,abstract,set,lazy,init,original,is,lazy,init,set,role,original,get,role,set,constructor,argument,values,new,constructor,argument,values,original,get,constructor,argument,values,set,property,values,new,mutable,property,values,original,get,property,values,set,source,original,get,source,copy,attributes,from,original,if,original,instanceof,abstract,bean,definition,abstract,bean,definition,original,abd,abstract,bean,definition,original,if,original,abd,has,bean,class,set,bean,class,original,abd,get,bean,class,set,autowire,mode,original,abd,get,autowire,mode,set,dependency,check,original,abd,get,dependency,check,set,depends,on,original,abd,get,depends,on,set,autowire,candidate,original,abd,is,autowire,candidate,copy,qualifiers,from,original,abd,set,primary,original,abd,is,primary,set,non,public,access,allowed,original,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,original,abd,is,lenient,constructor,resolution,set,init,method,name,original,abd,get,init,method,name,set,enforce,init,method,original,abd,is,enforce,init,method,set,destroy,method,name,original,abd,get,destroy,method,name,set,enforce,destroy,method,original,abd,is,enforce,destroy,method,set,method,overrides,new,method,overrides,original,abd,get,method,overrides,set,synthetic,original,abd,is,synthetic,set,resource,original,abd,get,resource,else,set,resource,description,original,get,resource,description
AbstractBeanDefinition -> protected AbstractBeanDefinition(BeanDefinition original);1434204509;Create a new AbstractBeanDefinition as a deep copy of the given_bean definition._@param original the original bean definition to copy from;protected AbstractBeanDefinition(BeanDefinition original) {_		setParentName(original.getParentName())__		setBeanClassName(original.getBeanClassName())__		setFactoryBeanName(original.getFactoryBeanName())__		setFactoryMethodName(original.getFactoryMethodName())__		setScope(original.getScope())__		setAbstract(original.isAbstract())__		setLazyInit(original.isLazyInit())__		setRole(original.getRole())__		setConstructorArgumentValues(new ConstructorArgumentValues(original.getConstructorArgumentValues()))__		setPropertyValues(new MutablePropertyValues(original.getPropertyValues()))__		setSource(original.getSource())__		copyAttributesFrom(original)___		if (original instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition originalAbd = (AbstractBeanDefinition) original__			if (originalAbd.hasBeanClass()) {_				setBeanClass(originalAbd.getBeanClass())__			}_			setAutowireMode(originalAbd.getAutowireMode())__			setDependencyCheck(originalAbd.getDependencyCheck())__			setDependsOn(originalAbd.getDependsOn())__			setAutowireCandidate(originalAbd.isAutowireCandidate())__			copyQualifiersFrom(originalAbd)__			setPrimary(originalAbd.isPrimary())__			setNonPublicAccessAllowed(originalAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(originalAbd.isLenientConstructorResolution())__			setInitMethodName(originalAbd.getInitMethodName())__			setEnforceInitMethod(originalAbd.isEnforceInitMethod())__			setDestroyMethodName(originalAbd.getDestroyMethodName())__			setEnforceDestroyMethod(originalAbd.isEnforceDestroyMethod())__			setMethodOverrides(new MethodOverrides(originalAbd.getMethodOverrides()))__			setSynthetic(originalAbd.isSynthetic())__			setResource(originalAbd.getResource())__		}_		else {_			setResourceDescription(original.getResourceDescription())__		}_	};create,a,new,abstract,bean,definition,as,a,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;protected,abstract,bean,definition,bean,definition,original,set,parent,name,original,get,parent,name,set,bean,class,name,original,get,bean,class,name,set,factory,bean,name,original,get,factory,bean,name,set,factory,method,name,original,get,factory,method,name,set,scope,original,get,scope,set,abstract,original,is,abstract,set,lazy,init,original,is,lazy,init,set,role,original,get,role,set,constructor,argument,values,new,constructor,argument,values,original,get,constructor,argument,values,set,property,values,new,mutable,property,values,original,get,property,values,set,source,original,get,source,copy,attributes,from,original,if,original,instanceof,abstract,bean,definition,abstract,bean,definition,original,abd,abstract,bean,definition,original,if,original,abd,has,bean,class,set,bean,class,original,abd,get,bean,class,set,autowire,mode,original,abd,get,autowire,mode,set,dependency,check,original,abd,get,dependency,check,set,depends,on,original,abd,get,depends,on,set,autowire,candidate,original,abd,is,autowire,candidate,copy,qualifiers,from,original,abd,set,primary,original,abd,is,primary,set,non,public,access,allowed,original,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,original,abd,is,lenient,constructor,resolution,set,init,method,name,original,abd,get,init,method,name,set,enforce,init,method,original,abd,is,enforce,init,method,set,destroy,method,name,original,abd,get,destroy,method,name,set,enforce,destroy,method,original,abd,is,enforce,destroy,method,set,method,overrides,new,method,overrides,original,abd,get,method,overrides,set,synthetic,original,abd,is,synthetic,set,resource,original,abd,get,resource,else,set,resource,description,original,get,resource,description
AbstractBeanDefinition -> protected AbstractBeanDefinition(BeanDefinition original);1447323728;Create a new AbstractBeanDefinition as a deep copy of the given_bean definition._@param original the original bean definition to copy from;protected AbstractBeanDefinition(BeanDefinition original) {_		setParentName(original.getParentName())__		setBeanClassName(original.getBeanClassName())__		setFactoryBeanName(original.getFactoryBeanName())__		setFactoryMethodName(original.getFactoryMethodName())__		setScope(original.getScope())__		setAbstract(original.isAbstract())__		setLazyInit(original.isLazyInit())__		setRole(original.getRole())__		setConstructorArgumentValues(new ConstructorArgumentValues(original.getConstructorArgumentValues()))__		setPropertyValues(new MutablePropertyValues(original.getPropertyValues()))__		setSource(original.getSource())__		copyAttributesFrom(original)___		if (original instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition originalAbd = (AbstractBeanDefinition) original__			if (originalAbd.hasBeanClass()) {_				setBeanClass(originalAbd.getBeanClass())__			}_			setAutowireMode(originalAbd.getAutowireMode())__			setDependencyCheck(originalAbd.getDependencyCheck())__			setDependsOn(originalAbd.getDependsOn())__			setAutowireCandidate(originalAbd.isAutowireCandidate())__			copyQualifiersFrom(originalAbd)__			setPrimary(originalAbd.isPrimary())__			setNonPublicAccessAllowed(originalAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(originalAbd.isLenientConstructorResolution())__			setInitMethodName(originalAbd.getInitMethodName())__			setEnforceInitMethod(originalAbd.isEnforceInitMethod())__			setDestroyMethodName(originalAbd.getDestroyMethodName())__			setEnforceDestroyMethod(originalAbd.isEnforceDestroyMethod())__			setMethodOverrides(new MethodOverrides(originalAbd.getMethodOverrides()))__			setSynthetic(originalAbd.isSynthetic())__			setResource(originalAbd.getResource())__		}_		else {_			setResourceDescription(original.getResourceDescription())__		}_	};create,a,new,abstract,bean,definition,as,a,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;protected,abstract,bean,definition,bean,definition,original,set,parent,name,original,get,parent,name,set,bean,class,name,original,get,bean,class,name,set,factory,bean,name,original,get,factory,bean,name,set,factory,method,name,original,get,factory,method,name,set,scope,original,get,scope,set,abstract,original,is,abstract,set,lazy,init,original,is,lazy,init,set,role,original,get,role,set,constructor,argument,values,new,constructor,argument,values,original,get,constructor,argument,values,set,property,values,new,mutable,property,values,original,get,property,values,set,source,original,get,source,copy,attributes,from,original,if,original,instanceof,abstract,bean,definition,abstract,bean,definition,original,abd,abstract,bean,definition,original,if,original,abd,has,bean,class,set,bean,class,original,abd,get,bean,class,set,autowire,mode,original,abd,get,autowire,mode,set,dependency,check,original,abd,get,dependency,check,set,depends,on,original,abd,get,depends,on,set,autowire,candidate,original,abd,is,autowire,candidate,copy,qualifiers,from,original,abd,set,primary,original,abd,is,primary,set,non,public,access,allowed,original,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,original,abd,is,lenient,constructor,resolution,set,init,method,name,original,abd,get,init,method,name,set,enforce,init,method,original,abd,is,enforce,init,method,set,destroy,method,name,original,abd,get,destroy,method,name,set,enforce,destroy,method,original,abd,is,enforce,destroy,method,set,method,overrides,new,method,overrides,original,abd,get,method,overrides,set,synthetic,original,abd,is,synthetic,set,resource,original,abd,get,resource,else,set,resource,description,original,get,resource,description
AbstractBeanDefinition -> protected AbstractBeanDefinition(BeanDefinition original);1465226156;Create a new AbstractBeanDefinition as a deep copy of the given_bean definition._@param original the original bean definition to copy from;protected AbstractBeanDefinition(BeanDefinition original) {_		setParentName(original.getParentName())__		setBeanClassName(original.getBeanClassName())__		setFactoryBeanName(original.getFactoryBeanName())__		setFactoryMethodName(original.getFactoryMethodName())__		setScope(original.getScope())__		setAbstract(original.isAbstract())__		setLazyInit(original.isLazyInit())__		setRole(original.getRole())__		setConstructorArgumentValues(new ConstructorArgumentValues(original.getConstructorArgumentValues()))__		setPropertyValues(new MutablePropertyValues(original.getPropertyValues()))__		setSource(original.getSource())__		copyAttributesFrom(original)___		if (original instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition originalAbd = (AbstractBeanDefinition) original__			if (originalAbd.hasBeanClass()) {_				setBeanClass(originalAbd.getBeanClass())__			}_			setAutowireMode(originalAbd.getAutowireMode())__			setDependencyCheck(originalAbd.getDependencyCheck())__			setDependsOn(originalAbd.getDependsOn())__			setAutowireCandidate(originalAbd.isAutowireCandidate())__			copyQualifiersFrom(originalAbd)__			setPrimary(originalAbd.isPrimary())__			setNonPublicAccessAllowed(originalAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(originalAbd.isLenientConstructorResolution())__			setInitMethodName(originalAbd.getInitMethodName())__			setEnforceInitMethod(originalAbd.isEnforceInitMethod())__			setDestroyMethodName(originalAbd.getDestroyMethodName())__			setEnforceDestroyMethod(originalAbd.isEnforceDestroyMethod())__			setMethodOverrides(new MethodOverrides(originalAbd.getMethodOverrides()))__			setSynthetic(originalAbd.isSynthetic())__			setResource(originalAbd.getResource())__		}_		else {_			setResourceDescription(original.getResourceDescription())__		}_	};create,a,new,abstract,bean,definition,as,a,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;protected,abstract,bean,definition,bean,definition,original,set,parent,name,original,get,parent,name,set,bean,class,name,original,get,bean,class,name,set,factory,bean,name,original,get,factory,bean,name,set,factory,method,name,original,get,factory,method,name,set,scope,original,get,scope,set,abstract,original,is,abstract,set,lazy,init,original,is,lazy,init,set,role,original,get,role,set,constructor,argument,values,new,constructor,argument,values,original,get,constructor,argument,values,set,property,values,new,mutable,property,values,original,get,property,values,set,source,original,get,source,copy,attributes,from,original,if,original,instanceof,abstract,bean,definition,abstract,bean,definition,original,abd,abstract,bean,definition,original,if,original,abd,has,bean,class,set,bean,class,original,abd,get,bean,class,set,autowire,mode,original,abd,get,autowire,mode,set,dependency,check,original,abd,get,dependency,check,set,depends,on,original,abd,get,depends,on,set,autowire,candidate,original,abd,is,autowire,candidate,copy,qualifiers,from,original,abd,set,primary,original,abd,is,primary,set,non,public,access,allowed,original,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,original,abd,is,lenient,constructor,resolution,set,init,method,name,original,abd,get,init,method,name,set,enforce,init,method,original,abd,is,enforce,init,method,set,destroy,method,name,original,abd,get,destroy,method,name,set,enforce,destroy,method,original,abd,is,enforce,destroy,method,set,method,overrides,new,method,overrides,original,abd,get,method,overrides,set,synthetic,original,abd,is,synthetic,set,resource,original,abd,get,resource,else,set,resource,description,original,get,resource,description
AbstractBeanDefinition -> protected AbstractBeanDefinition(BeanDefinition original);1467730834;Create a new AbstractBeanDefinition as a deep copy of the given_bean definition._@param original the original bean definition to copy from;protected AbstractBeanDefinition(BeanDefinition original) {_		setParentName(original.getParentName())__		setBeanClassName(original.getBeanClassName())__		setFactoryBeanName(original.getFactoryBeanName())__		setFactoryMethodName(original.getFactoryMethodName())__		setScope(original.getScope())__		setAbstract(original.isAbstract())__		setLazyInit(original.isLazyInit())__		setRole(original.getRole())__		setConstructorArgumentValues(new ConstructorArgumentValues(original.getConstructorArgumentValues()))__		setPropertyValues(new MutablePropertyValues(original.getPropertyValues()))__		setSource(original.getSource())__		copyAttributesFrom(original)___		if (original instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition originalAbd = (AbstractBeanDefinition) original__			if (originalAbd.hasBeanClass()) {_				setBeanClass(originalAbd.getBeanClass())__			}_			setAutowireMode(originalAbd.getAutowireMode())__			setDependencyCheck(originalAbd.getDependencyCheck())__			setDependsOn(originalAbd.getDependsOn())__			setAutowireCandidate(originalAbd.isAutowireCandidate())__			copyQualifiersFrom(originalAbd)__			setPrimary(originalAbd.isPrimary())__			setNonPublicAccessAllowed(originalAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(originalAbd.isLenientConstructorResolution())__			setInitMethodName(originalAbd.getInitMethodName())__			setEnforceInitMethod(originalAbd.isEnforceInitMethod())__			setDestroyMethodName(originalAbd.getDestroyMethodName())__			setEnforceDestroyMethod(originalAbd.isEnforceDestroyMethod())__			setMethodOverrides(new MethodOverrides(originalAbd.getMethodOverrides()))__			setSynthetic(originalAbd.isSynthetic())__			setResource(originalAbd.getResource())__		}_		else {_			setResourceDescription(original.getResourceDescription())__		}_	};create,a,new,abstract,bean,definition,as,a,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;protected,abstract,bean,definition,bean,definition,original,set,parent,name,original,get,parent,name,set,bean,class,name,original,get,bean,class,name,set,factory,bean,name,original,get,factory,bean,name,set,factory,method,name,original,get,factory,method,name,set,scope,original,get,scope,set,abstract,original,is,abstract,set,lazy,init,original,is,lazy,init,set,role,original,get,role,set,constructor,argument,values,new,constructor,argument,values,original,get,constructor,argument,values,set,property,values,new,mutable,property,values,original,get,property,values,set,source,original,get,source,copy,attributes,from,original,if,original,instanceof,abstract,bean,definition,abstract,bean,definition,original,abd,abstract,bean,definition,original,if,original,abd,has,bean,class,set,bean,class,original,abd,get,bean,class,set,autowire,mode,original,abd,get,autowire,mode,set,dependency,check,original,abd,get,dependency,check,set,depends,on,original,abd,get,depends,on,set,autowire,candidate,original,abd,is,autowire,candidate,copy,qualifiers,from,original,abd,set,primary,original,abd,is,primary,set,non,public,access,allowed,original,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,original,abd,is,lenient,constructor,resolution,set,init,method,name,original,abd,get,init,method,name,set,enforce,init,method,original,abd,is,enforce,init,method,set,destroy,method,name,original,abd,get,destroy,method,name,set,enforce,destroy,method,original,abd,is,enforce,destroy,method,set,method,overrides,new,method,overrides,original,abd,get,method,overrides,set,synthetic,original,abd,is,synthetic,set,resource,original,abd,get,resource,else,set,resource,description,original,get,resource,description
AbstractBeanDefinition -> protected AbstractBeanDefinition(BeanDefinition original);1467846264;Create a new AbstractBeanDefinition as a deep copy of the given_bean definition._@param original the original bean definition to copy from;protected AbstractBeanDefinition(BeanDefinition original) {_		setParentName(original.getParentName())__		setBeanClassName(original.getBeanClassName())__		setFactoryBeanName(original.getFactoryBeanName())__		setFactoryMethodName(original.getFactoryMethodName())__		setScope(original.getScope())__		setAbstract(original.isAbstract())__		setLazyInit(original.isLazyInit())__		setRole(original.getRole())__		setConstructorArgumentValues(new ConstructorArgumentValues(original.getConstructorArgumentValues()))__		setPropertyValues(new MutablePropertyValues(original.getPropertyValues()))__		setSource(original.getSource())__		copyAttributesFrom(original)___		if (original instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition originalAbd = (AbstractBeanDefinition) original__			if (originalAbd.hasBeanClass()) {_				setBeanClass(originalAbd.getBeanClass())__			}_			setAutowireMode(originalAbd.getAutowireMode())__			setDependencyCheck(originalAbd.getDependencyCheck())__			setDependsOn(originalAbd.getDependsOn())__			setAutowireCandidate(originalAbd.isAutowireCandidate())__			copyQualifiersFrom(originalAbd)__			setPrimary(originalAbd.isPrimary())__			setNonPublicAccessAllowed(originalAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(originalAbd.isLenientConstructorResolution())__			setInitMethodName(originalAbd.getInitMethodName())__			setEnforceInitMethod(originalAbd.isEnforceInitMethod())__			setDestroyMethodName(originalAbd.getDestroyMethodName())__			setEnforceDestroyMethod(originalAbd.isEnforceDestroyMethod())__			setMethodOverrides(new MethodOverrides(originalAbd.getMethodOverrides()))__			setSynthetic(originalAbd.isSynthetic())__			setResource(originalAbd.getResource())__		}_		else {_			setResourceDescription(original.getResourceDescription())__		}_	};create,a,new,abstract,bean,definition,as,a,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;protected,abstract,bean,definition,bean,definition,original,set,parent,name,original,get,parent,name,set,bean,class,name,original,get,bean,class,name,set,factory,bean,name,original,get,factory,bean,name,set,factory,method,name,original,get,factory,method,name,set,scope,original,get,scope,set,abstract,original,is,abstract,set,lazy,init,original,is,lazy,init,set,role,original,get,role,set,constructor,argument,values,new,constructor,argument,values,original,get,constructor,argument,values,set,property,values,new,mutable,property,values,original,get,property,values,set,source,original,get,source,copy,attributes,from,original,if,original,instanceof,abstract,bean,definition,abstract,bean,definition,original,abd,abstract,bean,definition,original,if,original,abd,has,bean,class,set,bean,class,original,abd,get,bean,class,set,autowire,mode,original,abd,get,autowire,mode,set,dependency,check,original,abd,get,dependency,check,set,depends,on,original,abd,get,depends,on,set,autowire,candidate,original,abd,is,autowire,candidate,copy,qualifiers,from,original,abd,set,primary,original,abd,is,primary,set,non,public,access,allowed,original,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,original,abd,is,lenient,constructor,resolution,set,init,method,name,original,abd,get,init,method,name,set,enforce,init,method,original,abd,is,enforce,init,method,set,destroy,method,name,original,abd,get,destroy,method,name,set,enforce,destroy,method,original,abd,is,enforce,destroy,method,set,method,overrides,new,method,overrides,original,abd,get,method,overrides,set,synthetic,original,abd,is,synthetic,set,resource,original,abd,get,resource,else,set,resource,description,original,get,resource,description
AbstractBeanDefinition -> protected AbstractBeanDefinition(BeanDefinition original);1482091545;Create a new AbstractBeanDefinition as a deep copy of the given_bean definition._@param original the original bean definition to copy from;protected AbstractBeanDefinition(BeanDefinition original) {_		setParentName(original.getParentName())__		setBeanClassName(original.getBeanClassName())__		setFactoryBeanName(original.getFactoryBeanName())__		setFactoryMethodName(original.getFactoryMethodName())__		setScope(original.getScope())__		setAbstract(original.isAbstract())__		setLazyInit(original.isLazyInit())__		setRole(original.getRole())__		setConstructorArgumentValues(new ConstructorArgumentValues(original.getConstructorArgumentValues()))__		setPropertyValues(new MutablePropertyValues(original.getPropertyValues()))__		setSource(original.getSource())__		copyAttributesFrom(original)___		if (original instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition originalAbd = (AbstractBeanDefinition) original__			if (originalAbd.hasBeanClass()) {_				setBeanClass(originalAbd.getBeanClass())__			}_			setAutowireMode(originalAbd.getAutowireMode())__			setDependencyCheck(originalAbd.getDependencyCheck())__			setDependsOn(originalAbd.getDependsOn())__			setAutowireCandidate(originalAbd.isAutowireCandidate())__			copyQualifiersFrom(originalAbd)__			setPrimary(originalAbd.isPrimary())__			setNonPublicAccessAllowed(originalAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(originalAbd.isLenientConstructorResolution())__			setInstanceSupplier(originalAbd.getInstanceSupplier())__			setInitMethodName(originalAbd.getInitMethodName())__			setEnforceInitMethod(originalAbd.isEnforceInitMethod())__			setDestroyMethodName(originalAbd.getDestroyMethodName())__			setEnforceDestroyMethod(originalAbd.isEnforceDestroyMethod())__			setMethodOverrides(new MethodOverrides(originalAbd.getMethodOverrides()))__			setSynthetic(originalAbd.isSynthetic())__			setResource(originalAbd.getResource())__		}_		else {_			setResourceDescription(original.getResourceDescription())__		}_	};create,a,new,abstract,bean,definition,as,a,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;protected,abstract,bean,definition,bean,definition,original,set,parent,name,original,get,parent,name,set,bean,class,name,original,get,bean,class,name,set,factory,bean,name,original,get,factory,bean,name,set,factory,method,name,original,get,factory,method,name,set,scope,original,get,scope,set,abstract,original,is,abstract,set,lazy,init,original,is,lazy,init,set,role,original,get,role,set,constructor,argument,values,new,constructor,argument,values,original,get,constructor,argument,values,set,property,values,new,mutable,property,values,original,get,property,values,set,source,original,get,source,copy,attributes,from,original,if,original,instanceof,abstract,bean,definition,abstract,bean,definition,original,abd,abstract,bean,definition,original,if,original,abd,has,bean,class,set,bean,class,original,abd,get,bean,class,set,autowire,mode,original,abd,get,autowire,mode,set,dependency,check,original,abd,get,dependency,check,set,depends,on,original,abd,get,depends,on,set,autowire,candidate,original,abd,is,autowire,candidate,copy,qualifiers,from,original,abd,set,primary,original,abd,is,primary,set,non,public,access,allowed,original,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,original,abd,is,lenient,constructor,resolution,set,instance,supplier,original,abd,get,instance,supplier,set,init,method,name,original,abd,get,init,method,name,set,enforce,init,method,original,abd,is,enforce,init,method,set,destroy,method,name,original,abd,get,destroy,method,name,set,enforce,destroy,method,original,abd,is,enforce,destroy,method,set,method,overrides,new,method,overrides,original,abd,get,method,overrides,set,synthetic,original,abd,is,synthetic,set,resource,original,abd,get,resource,else,set,resource,description,original,get,resource,description
AbstractBeanDefinition -> protected AbstractBeanDefinition(BeanDefinition original);1483093818;Create a new AbstractBeanDefinition as a deep copy of the given_bean definition._@param original the original bean definition to copy from;protected AbstractBeanDefinition(BeanDefinition original) {_		setParentName(original.getParentName())__		setBeanClassName(original.getBeanClassName())__		setScope(original.getScope())__		setAbstract(original.isAbstract())__		setLazyInit(original.isLazyInit())__		setFactoryBeanName(original.getFactoryBeanName())__		setFactoryMethodName(original.getFactoryMethodName())__		setConstructorArgumentValues(new ConstructorArgumentValues(original.getConstructorArgumentValues()))__		setPropertyValues(new MutablePropertyValues(original.getPropertyValues()))__		setRole(original.getRole())__		setSource(original.getSource())__		copyAttributesFrom(original)___		if (original instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition originalAbd = (AbstractBeanDefinition) original__			if (originalAbd.hasBeanClass()) {_				setBeanClass(originalAbd.getBeanClass())__			}_			setAutowireMode(originalAbd.getAutowireMode())__			setDependencyCheck(originalAbd.getDependencyCheck())__			setDependsOn(originalAbd.getDependsOn())__			setAutowireCandidate(originalAbd.isAutowireCandidate())__			setPrimary(originalAbd.isPrimary())__			copyQualifiersFrom(originalAbd)__			setInstanceSupplier(originalAbd.getInstanceSupplier())__			setNonPublicAccessAllowed(originalAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(originalAbd.isLenientConstructorResolution())__			setMethodOverrides(new MethodOverrides(originalAbd.getMethodOverrides()))__			setInitMethodName(originalAbd.getInitMethodName())__			setEnforceInitMethod(originalAbd.isEnforceInitMethod())__			setDestroyMethodName(originalAbd.getDestroyMethodName())__			setEnforceDestroyMethod(originalAbd.isEnforceDestroyMethod())__			setSynthetic(originalAbd.isSynthetic())__			setResource(originalAbd.getResource())__		}_		else {_			setResourceDescription(original.getResourceDescription())__		}_	};create,a,new,abstract,bean,definition,as,a,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;protected,abstract,bean,definition,bean,definition,original,set,parent,name,original,get,parent,name,set,bean,class,name,original,get,bean,class,name,set,scope,original,get,scope,set,abstract,original,is,abstract,set,lazy,init,original,is,lazy,init,set,factory,bean,name,original,get,factory,bean,name,set,factory,method,name,original,get,factory,method,name,set,constructor,argument,values,new,constructor,argument,values,original,get,constructor,argument,values,set,property,values,new,mutable,property,values,original,get,property,values,set,role,original,get,role,set,source,original,get,source,copy,attributes,from,original,if,original,instanceof,abstract,bean,definition,abstract,bean,definition,original,abd,abstract,bean,definition,original,if,original,abd,has,bean,class,set,bean,class,original,abd,get,bean,class,set,autowire,mode,original,abd,get,autowire,mode,set,dependency,check,original,abd,get,dependency,check,set,depends,on,original,abd,get,depends,on,set,autowire,candidate,original,abd,is,autowire,candidate,set,primary,original,abd,is,primary,copy,qualifiers,from,original,abd,set,instance,supplier,original,abd,get,instance,supplier,set,non,public,access,allowed,original,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,original,abd,is,lenient,constructor,resolution,set,method,overrides,new,method,overrides,original,abd,get,method,overrides,set,init,method,name,original,abd,get,init,method,name,set,enforce,init,method,original,abd,is,enforce,init,method,set,destroy,method,name,original,abd,get,destroy,method,name,set,enforce,destroy,method,original,abd,is,enforce,destroy,method,set,synthetic,original,abd,is,synthetic,set,resource,original,abd,get,resource,else,set,resource,description,original,get,resource,description
AbstractBeanDefinition -> protected AbstractBeanDefinition(BeanDefinition original);1495868221;Create a new AbstractBeanDefinition as a deep copy of the given_bean definition._@param original the original bean definition to copy from;protected AbstractBeanDefinition(BeanDefinition original) {_		setParentName(original.getParentName())__		setBeanClassName(original.getBeanClassName())__		setScope(original.getScope())__		setAbstract(original.isAbstract())__		setLazyInit(original.isLazyInit())__		setFactoryBeanName(original.getFactoryBeanName())__		setFactoryMethodName(original.getFactoryMethodName())__		setConstructorArgumentValues(new ConstructorArgumentValues(original.getConstructorArgumentValues()))__		setPropertyValues(new MutablePropertyValues(original.getPropertyValues()))__		setRole(original.getRole())__		setSource(original.getSource())__		copyAttributesFrom(original)___		if (original instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition originalAbd = (AbstractBeanDefinition) original__			if (originalAbd.hasBeanClass()) {_				setBeanClass(originalAbd.getBeanClass())__			}_			setAutowireMode(originalAbd.getAutowireMode())__			setDependencyCheck(originalAbd.getDependencyCheck())__			setDependsOn(originalAbd.getDependsOn())__			setAutowireCandidate(originalAbd.isAutowireCandidate())__			setPrimary(originalAbd.isPrimary())__			copyQualifiersFrom(originalAbd)__			setInstanceSupplier(originalAbd.getInstanceSupplier())__			setNonPublicAccessAllowed(originalAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(originalAbd.isLenientConstructorResolution())__			setMethodOverrides(new MethodOverrides(originalAbd.getMethodOverrides()))__			setInitMethodName(originalAbd.getInitMethodName())__			setEnforceInitMethod(originalAbd.isEnforceInitMethod())__			setDestroyMethodName(originalAbd.getDestroyMethodName())__			setEnforceDestroyMethod(originalAbd.isEnforceDestroyMethod())__			setSynthetic(originalAbd.isSynthetic())__			setResource(originalAbd.getResource())__		}_		else {_			setResourceDescription(original.getResourceDescription())__		}_	};create,a,new,abstract,bean,definition,as,a,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;protected,abstract,bean,definition,bean,definition,original,set,parent,name,original,get,parent,name,set,bean,class,name,original,get,bean,class,name,set,scope,original,get,scope,set,abstract,original,is,abstract,set,lazy,init,original,is,lazy,init,set,factory,bean,name,original,get,factory,bean,name,set,factory,method,name,original,get,factory,method,name,set,constructor,argument,values,new,constructor,argument,values,original,get,constructor,argument,values,set,property,values,new,mutable,property,values,original,get,property,values,set,role,original,get,role,set,source,original,get,source,copy,attributes,from,original,if,original,instanceof,abstract,bean,definition,abstract,bean,definition,original,abd,abstract,bean,definition,original,if,original,abd,has,bean,class,set,bean,class,original,abd,get,bean,class,set,autowire,mode,original,abd,get,autowire,mode,set,dependency,check,original,abd,get,dependency,check,set,depends,on,original,abd,get,depends,on,set,autowire,candidate,original,abd,is,autowire,candidate,set,primary,original,abd,is,primary,copy,qualifiers,from,original,abd,set,instance,supplier,original,abd,get,instance,supplier,set,non,public,access,allowed,original,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,original,abd,is,lenient,constructor,resolution,set,method,overrides,new,method,overrides,original,abd,get,method,overrides,set,init,method,name,original,abd,get,init,method,name,set,enforce,init,method,original,abd,is,enforce,init,method,set,destroy,method,name,original,abd,get,destroy,method,name,set,enforce,destroy,method,original,abd,is,enforce,destroy,method,set,synthetic,original,abd,is,synthetic,set,resource,original,abd,get,resource,else,set,resource,description,original,get,resource,description
AbstractBeanDefinition -> protected AbstractBeanDefinition(BeanDefinition original);1496837955;Create a new AbstractBeanDefinition as a deep copy of the given_bean definition._@param original the original bean definition to copy from;protected AbstractBeanDefinition(BeanDefinition original) {_		setParentName(original.getParentName())__		setBeanClassName(original.getBeanClassName())__		setScope(original.getScope())__		setAbstract(original.isAbstract())__		setLazyInit(original.isLazyInit())__		setFactoryBeanName(original.getFactoryBeanName())__		setFactoryMethodName(original.getFactoryMethodName())__		setConstructorArgumentValues(new ConstructorArgumentValues(original.getConstructorArgumentValues()))__		setPropertyValues(new MutablePropertyValues(original.getPropertyValues()))__		setRole(original.getRole())__		setSource(original.getSource())__		copyAttributesFrom(original)___		if (original instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition originalAbd = (AbstractBeanDefinition) original__			if (originalAbd.hasBeanClass()) {_				setBeanClass(originalAbd.getBeanClass())__			}_			setAutowireMode(originalAbd.getAutowireMode())__			setDependencyCheck(originalAbd.getDependencyCheck())__			setDependsOn(originalAbd.getDependsOn())__			setAutowireCandidate(originalAbd.isAutowireCandidate())__			setPrimary(originalAbd.isPrimary())__			copyQualifiersFrom(originalAbd)__			setInstanceSupplier(originalAbd.getInstanceSupplier())__			setNonPublicAccessAllowed(originalAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(originalAbd.isLenientConstructorResolution())__			setMethodOverrides(new MethodOverrides(originalAbd.getMethodOverrides()))__			setInitMethodName(originalAbd.getInitMethodName())__			setEnforceInitMethod(originalAbd.isEnforceInitMethod())__			setDestroyMethodName(originalAbd.getDestroyMethodName())__			setEnforceDestroyMethod(originalAbd.isEnforceDestroyMethod())__			setSynthetic(originalAbd.isSynthetic())__			setResource(originalAbd.getResource())__		}_		else {_			setResourceDescription(original.getResourceDescription())__		}_	};create,a,new,abstract,bean,definition,as,a,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;protected,abstract,bean,definition,bean,definition,original,set,parent,name,original,get,parent,name,set,bean,class,name,original,get,bean,class,name,set,scope,original,get,scope,set,abstract,original,is,abstract,set,lazy,init,original,is,lazy,init,set,factory,bean,name,original,get,factory,bean,name,set,factory,method,name,original,get,factory,method,name,set,constructor,argument,values,new,constructor,argument,values,original,get,constructor,argument,values,set,property,values,new,mutable,property,values,original,get,property,values,set,role,original,get,role,set,source,original,get,source,copy,attributes,from,original,if,original,instanceof,abstract,bean,definition,abstract,bean,definition,original,abd,abstract,bean,definition,original,if,original,abd,has,bean,class,set,bean,class,original,abd,get,bean,class,set,autowire,mode,original,abd,get,autowire,mode,set,dependency,check,original,abd,get,dependency,check,set,depends,on,original,abd,get,depends,on,set,autowire,candidate,original,abd,is,autowire,candidate,set,primary,original,abd,is,primary,copy,qualifiers,from,original,abd,set,instance,supplier,original,abd,get,instance,supplier,set,non,public,access,allowed,original,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,original,abd,is,lenient,constructor,resolution,set,method,overrides,new,method,overrides,original,abd,get,method,overrides,set,init,method,name,original,abd,get,init,method,name,set,enforce,init,method,original,abd,is,enforce,init,method,set,destroy,method,name,original,abd,get,destroy,method,name,set,enforce,destroy,method,original,abd,is,enforce,destroy,method,set,synthetic,original,abd,is,synthetic,set,resource,original,abd,get,resource,else,set,resource,description,original,get,resource,description
AbstractBeanDefinition -> protected AbstractBeanDefinition(BeanDefinition original);1498780456;Create a new AbstractBeanDefinition as a deep copy of the given_bean definition._@param original the original bean definition to copy from;protected AbstractBeanDefinition(BeanDefinition original) {_		setParentName(original.getParentName())__		setBeanClassName(original.getBeanClassName())__		setScope(original.getScope())__		setAbstract(original.isAbstract())__		setLazyInit(original.isLazyInit())__		setFactoryBeanName(original.getFactoryBeanName())__		setFactoryMethodName(original.getFactoryMethodName())__		this.constructorArgumentValues = new ConstructorArgumentValues(original.getConstructorArgumentValues())__		this.propertyValues = new MutablePropertyValues(original.getPropertyValues())__		setRole(original.getRole())__		setSource(original.getSource())__		copyAttributesFrom(original)___		if (original instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition originalAbd = (AbstractBeanDefinition) original__			if (originalAbd.hasBeanClass()) {_				setBeanClass(originalAbd.getBeanClass())__			}_			setAutowireMode(originalAbd.getAutowireMode())__			setDependencyCheck(originalAbd.getDependencyCheck())__			setDependsOn(originalAbd.getDependsOn())__			setAutowireCandidate(originalAbd.isAutowireCandidate())__			setPrimary(originalAbd.isPrimary())__			copyQualifiersFrom(originalAbd)__			setInstanceSupplier(originalAbd.getInstanceSupplier())__			setNonPublicAccessAllowed(originalAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(originalAbd.isLenientConstructorResolution())__			setMethodOverrides(new MethodOverrides(originalAbd.getMethodOverrides()))__			setInitMethodName(originalAbd.getInitMethodName())__			setEnforceInitMethod(originalAbd.isEnforceInitMethod())__			setDestroyMethodName(originalAbd.getDestroyMethodName())__			setEnforceDestroyMethod(originalAbd.isEnforceDestroyMethod())__			setSynthetic(originalAbd.isSynthetic())__			setResource(originalAbd.getResource())__		}_		else {_			setResourceDescription(original.getResourceDescription())__		}_	};create,a,new,abstract,bean,definition,as,a,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;protected,abstract,bean,definition,bean,definition,original,set,parent,name,original,get,parent,name,set,bean,class,name,original,get,bean,class,name,set,scope,original,get,scope,set,abstract,original,is,abstract,set,lazy,init,original,is,lazy,init,set,factory,bean,name,original,get,factory,bean,name,set,factory,method,name,original,get,factory,method,name,this,constructor,argument,values,new,constructor,argument,values,original,get,constructor,argument,values,this,property,values,new,mutable,property,values,original,get,property,values,set,role,original,get,role,set,source,original,get,source,copy,attributes,from,original,if,original,instanceof,abstract,bean,definition,abstract,bean,definition,original,abd,abstract,bean,definition,original,if,original,abd,has,bean,class,set,bean,class,original,abd,get,bean,class,set,autowire,mode,original,abd,get,autowire,mode,set,dependency,check,original,abd,get,dependency,check,set,depends,on,original,abd,get,depends,on,set,autowire,candidate,original,abd,is,autowire,candidate,set,primary,original,abd,is,primary,copy,qualifiers,from,original,abd,set,instance,supplier,original,abd,get,instance,supplier,set,non,public,access,allowed,original,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,original,abd,is,lenient,constructor,resolution,set,method,overrides,new,method,overrides,original,abd,get,method,overrides,set,init,method,name,original,abd,get,init,method,name,set,enforce,init,method,original,abd,is,enforce,init,method,set,destroy,method,name,original,abd,get,destroy,method,name,set,enforce,destroy,method,original,abd,is,enforce,destroy,method,set,synthetic,original,abd,is,synthetic,set,resource,original,abd,get,resource,else,set,resource,description,original,get,resource,description
AbstractBeanDefinition -> protected AbstractBeanDefinition(BeanDefinition original);1502974979;Create a new AbstractBeanDefinition as a deep copy of the given_bean definition._@param original the original bean definition to copy from;protected AbstractBeanDefinition(BeanDefinition original) {_		setParentName(original.getParentName())__		setBeanClassName(original.getBeanClassName())__		setScope(original.getScope())__		setAbstract(original.isAbstract())__		setLazyInit(original.isLazyInit())__		setFactoryBeanName(original.getFactoryBeanName())__		setFactoryMethodName(original.getFactoryMethodName())__		this.constructorArgumentValues = new ConstructorArgumentValues(original.getConstructorArgumentValues())__		this.propertyValues = new MutablePropertyValues(original.getPropertyValues())__		setRole(original.getRole())__		setSource(original.getSource())__		copyAttributesFrom(original)___		if (original instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition originalAbd = (AbstractBeanDefinition) original__			if (originalAbd.hasBeanClass()) {_				setBeanClass(originalAbd.getBeanClass())__			}_			setAutowireMode(originalAbd.getAutowireMode())__			setDependencyCheck(originalAbd.getDependencyCheck())__			setDependsOn(originalAbd.getDependsOn())__			setAutowireCandidate(originalAbd.isAutowireCandidate())__			setPrimary(originalAbd.isPrimary())__			copyQualifiersFrom(originalAbd)__			setInstanceSupplier(originalAbd.getInstanceSupplier())__			setNonPublicAccessAllowed(originalAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(originalAbd.isLenientConstructorResolution())__			setMethodOverrides(new MethodOverrides(originalAbd.getMethodOverrides()))__			setInitMethodName(originalAbd.getInitMethodName())__			setEnforceInitMethod(originalAbd.isEnforceInitMethod())__			setDestroyMethodName(originalAbd.getDestroyMethodName())__			setEnforceDestroyMethod(originalAbd.isEnforceDestroyMethod())__			setSynthetic(originalAbd.isSynthetic())__			setResource(originalAbd.getResource())__		}_		else {_			setResourceDescription(original.getResourceDescription())__		}_	};create,a,new,abstract,bean,definition,as,a,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;protected,abstract,bean,definition,bean,definition,original,set,parent,name,original,get,parent,name,set,bean,class,name,original,get,bean,class,name,set,scope,original,get,scope,set,abstract,original,is,abstract,set,lazy,init,original,is,lazy,init,set,factory,bean,name,original,get,factory,bean,name,set,factory,method,name,original,get,factory,method,name,this,constructor,argument,values,new,constructor,argument,values,original,get,constructor,argument,values,this,property,values,new,mutable,property,values,original,get,property,values,set,role,original,get,role,set,source,original,get,source,copy,attributes,from,original,if,original,instanceof,abstract,bean,definition,abstract,bean,definition,original,abd,abstract,bean,definition,original,if,original,abd,has,bean,class,set,bean,class,original,abd,get,bean,class,set,autowire,mode,original,abd,get,autowire,mode,set,dependency,check,original,abd,get,dependency,check,set,depends,on,original,abd,get,depends,on,set,autowire,candidate,original,abd,is,autowire,candidate,set,primary,original,abd,is,primary,copy,qualifiers,from,original,abd,set,instance,supplier,original,abd,get,instance,supplier,set,non,public,access,allowed,original,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,original,abd,is,lenient,constructor,resolution,set,method,overrides,new,method,overrides,original,abd,get,method,overrides,set,init,method,name,original,abd,get,init,method,name,set,enforce,init,method,original,abd,is,enforce,init,method,set,destroy,method,name,original,abd,get,destroy,method,name,set,enforce,destroy,method,original,abd,is,enforce,destroy,method,set,synthetic,original,abd,is,synthetic,set,resource,original,abd,get,resource,else,set,resource,description,original,get,resource,description
AbstractBeanDefinition -> protected AbstractBeanDefinition(BeanDefinition original);1503008029;Create a new AbstractBeanDefinition as a deep copy of the given_bean definition._@param original the original bean definition to copy from;protected AbstractBeanDefinition(BeanDefinition original) {_		setParentName(original.getParentName())__		setBeanClassName(original.getBeanClassName())__		setScope(original.getScope())__		setAbstract(original.isAbstract())__		setLazyInit(original.isLazyInit())__		setFactoryBeanName(original.getFactoryBeanName())__		setFactoryMethodName(original.getFactoryMethodName())__		this.constructorArgumentValues = new ConstructorArgumentValues(original.getConstructorArgumentValues())__		this.propertyValues = new MutablePropertyValues(original.getPropertyValues())__		setRole(original.getRole())__		setSource(original.getSource())__		copyAttributesFrom(original)___		if (original instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition originalAbd = (AbstractBeanDefinition) original__			if (originalAbd.hasBeanClass()) {_				setBeanClass(originalAbd.getBeanClass())__			}_			setAutowireMode(originalAbd.getAutowireMode())__			setDependencyCheck(originalAbd.getDependencyCheck())__			setDependsOn(originalAbd.getDependsOn())__			setAutowireCandidate(originalAbd.isAutowireCandidate())__			setPrimary(originalAbd.isPrimary())__			copyQualifiersFrom(originalAbd)__			setInstanceSupplier(originalAbd.getInstanceSupplier())__			setNonPublicAccessAllowed(originalAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(originalAbd.isLenientConstructorResolution())__			setMethodOverrides(new MethodOverrides(originalAbd.getMethodOverrides()))__			setInitMethodName(originalAbd.getInitMethodName())__			setEnforceInitMethod(originalAbd.isEnforceInitMethod())__			setDestroyMethodName(originalAbd.getDestroyMethodName())__			setEnforceDestroyMethod(originalAbd.isEnforceDestroyMethod())__			setSynthetic(originalAbd.isSynthetic())__			setResource(originalAbd.getResource())__		}_		else {_			setResourceDescription(original.getResourceDescription())__		}_	};create,a,new,abstract,bean,definition,as,a,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;protected,abstract,bean,definition,bean,definition,original,set,parent,name,original,get,parent,name,set,bean,class,name,original,get,bean,class,name,set,scope,original,get,scope,set,abstract,original,is,abstract,set,lazy,init,original,is,lazy,init,set,factory,bean,name,original,get,factory,bean,name,set,factory,method,name,original,get,factory,method,name,this,constructor,argument,values,new,constructor,argument,values,original,get,constructor,argument,values,this,property,values,new,mutable,property,values,original,get,property,values,set,role,original,get,role,set,source,original,get,source,copy,attributes,from,original,if,original,instanceof,abstract,bean,definition,abstract,bean,definition,original,abd,abstract,bean,definition,original,if,original,abd,has,bean,class,set,bean,class,original,abd,get,bean,class,set,autowire,mode,original,abd,get,autowire,mode,set,dependency,check,original,abd,get,dependency,check,set,depends,on,original,abd,get,depends,on,set,autowire,candidate,original,abd,is,autowire,candidate,set,primary,original,abd,is,primary,copy,qualifiers,from,original,abd,set,instance,supplier,original,abd,get,instance,supplier,set,non,public,access,allowed,original,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,original,abd,is,lenient,constructor,resolution,set,method,overrides,new,method,overrides,original,abd,get,method,overrides,set,init,method,name,original,abd,get,init,method,name,set,enforce,init,method,original,abd,is,enforce,init,method,set,destroy,method,name,original,abd,get,destroy,method,name,set,enforce,destroy,method,original,abd,is,enforce,destroy,method,set,synthetic,original,abd,is,synthetic,set,resource,original,abd,get,resource,else,set,resource,description,original,get,resource,description
AbstractBeanDefinition -> protected AbstractBeanDefinition(BeanDefinition original);1510606271;Create a new AbstractBeanDefinition as a deep copy of the given_bean definition._@param original the original bean definition to copy from;protected AbstractBeanDefinition(BeanDefinition original) {_		setParentName(original.getParentName())__		setBeanClassName(original.getBeanClassName())__		setScope(original.getScope())__		setAbstract(original.isAbstract())__		setLazyInit(original.isLazyInit())__		setFactoryBeanName(original.getFactoryBeanName())__		setFactoryMethodName(original.getFactoryMethodName())__		setRole(original.getRole())__		setSource(original.getSource())__		copyAttributesFrom(original)___		if (original instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition originalAbd = (AbstractBeanDefinition) original__			if (originalAbd.hasBeanClass()) {_				setBeanClass(originalAbd.getBeanClass())__			}_			if (originalAbd.hasConstructorArgumentValues()) {_				setConstructorArgumentValues(new ConstructorArgumentValues(original.getConstructorArgumentValues()))__			}_			if (originalAbd.hasPropertyValues()) {_				setPropertyValues(new MutablePropertyValues(original.getPropertyValues()))__			}_			if (originalAbd.hasMethodOverrides()) {_				setMethodOverrides(new MethodOverrides(originalAbd.getMethodOverrides()))__			}_			setAutowireMode(originalAbd.getAutowireMode())__			setDependencyCheck(originalAbd.getDependencyCheck())__			setDependsOn(originalAbd.getDependsOn())__			setAutowireCandidate(originalAbd.isAutowireCandidate())__			setPrimary(originalAbd.isPrimary())__			copyQualifiersFrom(originalAbd)__			setInstanceSupplier(originalAbd.getInstanceSupplier())__			setNonPublicAccessAllowed(originalAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(originalAbd.isLenientConstructorResolution())__			setInitMethodName(originalAbd.getInitMethodName())__			setEnforceInitMethod(originalAbd.isEnforceInitMethod())__			setDestroyMethodName(originalAbd.getDestroyMethodName())__			setEnforceDestroyMethod(originalAbd.isEnforceDestroyMethod())__			setSynthetic(originalAbd.isSynthetic())__			setResource(originalAbd.getResource())__		}_		else {_			setConstructorArgumentValues(new ConstructorArgumentValues(original.getConstructorArgumentValues()))__			setPropertyValues(new MutablePropertyValues(original.getPropertyValues()))__			setResourceDescription(original.getResourceDescription())__		}_	};create,a,new,abstract,bean,definition,as,a,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;protected,abstract,bean,definition,bean,definition,original,set,parent,name,original,get,parent,name,set,bean,class,name,original,get,bean,class,name,set,scope,original,get,scope,set,abstract,original,is,abstract,set,lazy,init,original,is,lazy,init,set,factory,bean,name,original,get,factory,bean,name,set,factory,method,name,original,get,factory,method,name,set,role,original,get,role,set,source,original,get,source,copy,attributes,from,original,if,original,instanceof,abstract,bean,definition,abstract,bean,definition,original,abd,abstract,bean,definition,original,if,original,abd,has,bean,class,set,bean,class,original,abd,get,bean,class,if,original,abd,has,constructor,argument,values,set,constructor,argument,values,new,constructor,argument,values,original,get,constructor,argument,values,if,original,abd,has,property,values,set,property,values,new,mutable,property,values,original,get,property,values,if,original,abd,has,method,overrides,set,method,overrides,new,method,overrides,original,abd,get,method,overrides,set,autowire,mode,original,abd,get,autowire,mode,set,dependency,check,original,abd,get,dependency,check,set,depends,on,original,abd,get,depends,on,set,autowire,candidate,original,abd,is,autowire,candidate,set,primary,original,abd,is,primary,copy,qualifiers,from,original,abd,set,instance,supplier,original,abd,get,instance,supplier,set,non,public,access,allowed,original,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,original,abd,is,lenient,constructor,resolution,set,init,method,name,original,abd,get,init,method,name,set,enforce,init,method,original,abd,is,enforce,init,method,set,destroy,method,name,original,abd,get,destroy,method,name,set,enforce,destroy,method,original,abd,is,enforce,destroy,method,set,synthetic,original,abd,is,synthetic,set,resource,original,abd,get,resource,else,set,constructor,argument,values,new,constructor,argument,values,original,get,constructor,argument,values,set,property,values,new,mutable,property,values,original,get,property,values,set,resource,description,original,get,resource,description
AbstractBeanDefinition -> protected AbstractBeanDefinition(BeanDefinition original);1510675876;Create a new AbstractBeanDefinition as a deep copy of the given_bean definition._@param original the original bean definition to copy from;protected AbstractBeanDefinition(BeanDefinition original) {_		setParentName(original.getParentName())__		setBeanClassName(original.getBeanClassName())__		setScope(original.getScope())__		setAbstract(original.isAbstract())__		setLazyInit(original.isLazyInit())__		setFactoryBeanName(original.getFactoryBeanName())__		setFactoryMethodName(original.getFactoryMethodName())__		setRole(original.getRole())__		setSource(original.getSource())__		copyAttributesFrom(original)___		if (original instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition originalAbd = (AbstractBeanDefinition) original__			if (originalAbd.hasBeanClass()) {_				setBeanClass(originalAbd.getBeanClass())__			}_			if (originalAbd.hasConstructorArgumentValues()) {_				setConstructorArgumentValues(new ConstructorArgumentValues(original.getConstructorArgumentValues()))__			}_			if (originalAbd.hasPropertyValues()) {_				setPropertyValues(new MutablePropertyValues(original.getPropertyValues()))__			}_			if (originalAbd.hasMethodOverrides()) {_				setMethodOverrides(new MethodOverrides(originalAbd.getMethodOverrides()))__			}_			setAutowireMode(originalAbd.getAutowireMode())__			setDependencyCheck(originalAbd.getDependencyCheck())__			setDependsOn(originalAbd.getDependsOn())__			setAutowireCandidate(originalAbd.isAutowireCandidate())__			setPrimary(originalAbd.isPrimary())__			copyQualifiersFrom(originalAbd)__			setInstanceSupplier(originalAbd.getInstanceSupplier())__			setNonPublicAccessAllowed(originalAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(originalAbd.isLenientConstructorResolution())__			setInitMethodName(originalAbd.getInitMethodName())__			setEnforceInitMethod(originalAbd.isEnforceInitMethod())__			setDestroyMethodName(originalAbd.getDestroyMethodName())__			setEnforceDestroyMethod(originalAbd.isEnforceDestroyMethod())__			setSynthetic(originalAbd.isSynthetic())__			setResource(originalAbd.getResource())__		}_		else {_			setConstructorArgumentValues(new ConstructorArgumentValues(original.getConstructorArgumentValues()))__			setPropertyValues(new MutablePropertyValues(original.getPropertyValues()))__			setResourceDescription(original.getResourceDescription())__		}_	};create,a,new,abstract,bean,definition,as,a,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;protected,abstract,bean,definition,bean,definition,original,set,parent,name,original,get,parent,name,set,bean,class,name,original,get,bean,class,name,set,scope,original,get,scope,set,abstract,original,is,abstract,set,lazy,init,original,is,lazy,init,set,factory,bean,name,original,get,factory,bean,name,set,factory,method,name,original,get,factory,method,name,set,role,original,get,role,set,source,original,get,source,copy,attributes,from,original,if,original,instanceof,abstract,bean,definition,abstract,bean,definition,original,abd,abstract,bean,definition,original,if,original,abd,has,bean,class,set,bean,class,original,abd,get,bean,class,if,original,abd,has,constructor,argument,values,set,constructor,argument,values,new,constructor,argument,values,original,get,constructor,argument,values,if,original,abd,has,property,values,set,property,values,new,mutable,property,values,original,get,property,values,if,original,abd,has,method,overrides,set,method,overrides,new,method,overrides,original,abd,get,method,overrides,set,autowire,mode,original,abd,get,autowire,mode,set,dependency,check,original,abd,get,dependency,check,set,depends,on,original,abd,get,depends,on,set,autowire,candidate,original,abd,is,autowire,candidate,set,primary,original,abd,is,primary,copy,qualifiers,from,original,abd,set,instance,supplier,original,abd,get,instance,supplier,set,non,public,access,allowed,original,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,original,abd,is,lenient,constructor,resolution,set,init,method,name,original,abd,get,init,method,name,set,enforce,init,method,original,abd,is,enforce,init,method,set,destroy,method,name,original,abd,get,destroy,method,name,set,enforce,destroy,method,original,abd,is,enforce,destroy,method,set,synthetic,original,abd,is,synthetic,set,resource,original,abd,get,resource,else,set,constructor,argument,values,new,constructor,argument,values,original,get,constructor,argument,values,set,property,values,new,mutable,property,values,original,get,property,values,set,resource,description,original,get,resource,description
AbstractBeanDefinition -> protected AbstractBeanDefinition(BeanDefinition original);1530174524;Create a new AbstractBeanDefinition as a deep copy of the given_bean definition._@param original the original bean definition to copy from;protected AbstractBeanDefinition(BeanDefinition original) {_		setParentName(original.getParentName())__		setBeanClassName(original.getBeanClassName())__		setScope(original.getScope())__		setAbstract(original.isAbstract())__		setLazyInit(original.isLazyInit())__		setFactoryBeanName(original.getFactoryBeanName())__		setFactoryMethodName(original.getFactoryMethodName())__		setRole(original.getRole())__		setSource(original.getSource())__		copyAttributesFrom(original)___		if (original instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition originalAbd = (AbstractBeanDefinition) original__			if (originalAbd.hasBeanClass()) {_				setBeanClass(originalAbd.getBeanClass())__			}_			if (originalAbd.hasConstructorArgumentValues()) {_				setConstructorArgumentValues(new ConstructorArgumentValues(original.getConstructorArgumentValues()))__			}_			if (originalAbd.hasPropertyValues()) {_				setPropertyValues(new MutablePropertyValues(original.getPropertyValues()))__			}_			if (originalAbd.hasMethodOverrides()) {_				setMethodOverrides(new MethodOverrides(originalAbd.getMethodOverrides()))__			}_			setAutowireMode(originalAbd.getAutowireMode())__			setDependencyCheck(originalAbd.getDependencyCheck())__			setDependsOn(originalAbd.getDependsOn())__			setAutowireCandidate(originalAbd.isAutowireCandidate())__			setPrimary(originalAbd.isPrimary())__			copyQualifiersFrom(originalAbd)__			setInstanceSupplier(originalAbd.getInstanceSupplier())__			setNonPublicAccessAllowed(originalAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(originalAbd.isLenientConstructorResolution())__			setInitMethodName(originalAbd.getInitMethodName())__			setEnforceInitMethod(originalAbd.isEnforceInitMethod())__			setDestroyMethodName(originalAbd.getDestroyMethodName())__			setEnforceDestroyMethod(originalAbd.isEnforceDestroyMethod())__			setSynthetic(originalAbd.isSynthetic())__			setResource(originalAbd.getResource())__		}_		else {_			setConstructorArgumentValues(new ConstructorArgumentValues(original.getConstructorArgumentValues()))__			setPropertyValues(new MutablePropertyValues(original.getPropertyValues()))__			setResourceDescription(original.getResourceDescription())__		}_	};create,a,new,abstract,bean,definition,as,a,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;protected,abstract,bean,definition,bean,definition,original,set,parent,name,original,get,parent,name,set,bean,class,name,original,get,bean,class,name,set,scope,original,get,scope,set,abstract,original,is,abstract,set,lazy,init,original,is,lazy,init,set,factory,bean,name,original,get,factory,bean,name,set,factory,method,name,original,get,factory,method,name,set,role,original,get,role,set,source,original,get,source,copy,attributes,from,original,if,original,instanceof,abstract,bean,definition,abstract,bean,definition,original,abd,abstract,bean,definition,original,if,original,abd,has,bean,class,set,bean,class,original,abd,get,bean,class,if,original,abd,has,constructor,argument,values,set,constructor,argument,values,new,constructor,argument,values,original,get,constructor,argument,values,if,original,abd,has,property,values,set,property,values,new,mutable,property,values,original,get,property,values,if,original,abd,has,method,overrides,set,method,overrides,new,method,overrides,original,abd,get,method,overrides,set,autowire,mode,original,abd,get,autowire,mode,set,dependency,check,original,abd,get,dependency,check,set,depends,on,original,abd,get,depends,on,set,autowire,candidate,original,abd,is,autowire,candidate,set,primary,original,abd,is,primary,copy,qualifiers,from,original,abd,set,instance,supplier,original,abd,get,instance,supplier,set,non,public,access,allowed,original,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,original,abd,is,lenient,constructor,resolution,set,init,method,name,original,abd,get,init,method,name,set,enforce,init,method,original,abd,is,enforce,init,method,set,destroy,method,name,original,abd,get,destroy,method,name,set,enforce,destroy,method,original,abd,is,enforce,destroy,method,set,synthetic,original,abd,is,synthetic,set,resource,original,abd,get,resource,else,set,constructor,argument,values,new,constructor,argument,values,original,get,constructor,argument,values,set,property,values,new,mutable,property,values,original,get,property,values,set,resource,description,original,get,resource,description
AbstractBeanDefinition -> protected AbstractBeanDefinition(BeanDefinition original);1530174524;Create a new AbstractBeanDefinition as a deep copy of the given_bean definition._@param original the original bean definition to copy from;protected AbstractBeanDefinition(BeanDefinition original) {_		setParentName(original.getParentName())__		setBeanClassName(original.getBeanClassName())__		setScope(original.getScope())__		setAbstract(original.isAbstract())__		setLazyInit(original.isLazyInit())__		setFactoryBeanName(original.getFactoryBeanName())__		setFactoryMethodName(original.getFactoryMethodName())__		setRole(original.getRole())__		setSource(original.getSource())__		copyAttributesFrom(original)___		if (original instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition originalAbd = (AbstractBeanDefinition) original__			if (originalAbd.hasBeanClass()) {_				setBeanClass(originalAbd.getBeanClass())__			}_			if (originalAbd.hasConstructorArgumentValues()) {_				setConstructorArgumentValues(new ConstructorArgumentValues(original.getConstructorArgumentValues()))__			}_			if (originalAbd.hasPropertyValues()) {_				setPropertyValues(new MutablePropertyValues(original.getPropertyValues()))__			}_			if (originalAbd.hasMethodOverrides()) {_				setMethodOverrides(new MethodOverrides(originalAbd.getMethodOverrides()))__			}_			setAutowireMode(originalAbd.getAutowireMode())__			setDependencyCheck(originalAbd.getDependencyCheck())__			setDependsOn(originalAbd.getDependsOn())__			setAutowireCandidate(originalAbd.isAutowireCandidate())__			setPrimary(originalAbd.isPrimary())__			copyQualifiersFrom(originalAbd)__			setInstanceSupplier(originalAbd.getInstanceSupplier())__			setNonPublicAccessAllowed(originalAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(originalAbd.isLenientConstructorResolution())__			setInitMethodName(originalAbd.getInitMethodName())__			setEnforceInitMethod(originalAbd.isEnforceInitMethod())__			setDestroyMethodName(originalAbd.getDestroyMethodName())__			setEnforceDestroyMethod(originalAbd.isEnforceDestroyMethod())__			setSynthetic(originalAbd.isSynthetic())__			setResource(originalAbd.getResource())__		}_		else {_			setConstructorArgumentValues(new ConstructorArgumentValues(original.getConstructorArgumentValues()))__			setPropertyValues(new MutablePropertyValues(original.getPropertyValues()))__			setResourceDescription(original.getResourceDescription())__		}_	};create,a,new,abstract,bean,definition,as,a,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;protected,abstract,bean,definition,bean,definition,original,set,parent,name,original,get,parent,name,set,bean,class,name,original,get,bean,class,name,set,scope,original,get,scope,set,abstract,original,is,abstract,set,lazy,init,original,is,lazy,init,set,factory,bean,name,original,get,factory,bean,name,set,factory,method,name,original,get,factory,method,name,set,role,original,get,role,set,source,original,get,source,copy,attributes,from,original,if,original,instanceof,abstract,bean,definition,abstract,bean,definition,original,abd,abstract,bean,definition,original,if,original,abd,has,bean,class,set,bean,class,original,abd,get,bean,class,if,original,abd,has,constructor,argument,values,set,constructor,argument,values,new,constructor,argument,values,original,get,constructor,argument,values,if,original,abd,has,property,values,set,property,values,new,mutable,property,values,original,get,property,values,if,original,abd,has,method,overrides,set,method,overrides,new,method,overrides,original,abd,get,method,overrides,set,autowire,mode,original,abd,get,autowire,mode,set,dependency,check,original,abd,get,dependency,check,set,depends,on,original,abd,get,depends,on,set,autowire,candidate,original,abd,is,autowire,candidate,set,primary,original,abd,is,primary,copy,qualifiers,from,original,abd,set,instance,supplier,original,abd,get,instance,supplier,set,non,public,access,allowed,original,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,original,abd,is,lenient,constructor,resolution,set,init,method,name,original,abd,get,init,method,name,set,enforce,init,method,original,abd,is,enforce,init,method,set,destroy,method,name,original,abd,get,destroy,method,name,set,enforce,destroy,method,original,abd,is,enforce,destroy,method,set,synthetic,original,abd,is,synthetic,set,resource,original,abd,get,resource,else,set,constructor,argument,values,new,constructor,argument,values,original,get,constructor,argument,values,set,property,values,new,mutable,property,values,original,get,property,values,set,resource,description,original,get,resource,description
AbstractBeanDefinition -> protected AbstractBeanDefinition(BeanDefinition original);1530174524;Create a new AbstractBeanDefinition as a deep copy of the given_bean definition._@param original the original bean definition to copy from;protected AbstractBeanDefinition(BeanDefinition original) {_		setParentName(original.getParentName())__		setBeanClassName(original.getBeanClassName())__		setScope(original.getScope())__		setAbstract(original.isAbstract())__		setLazyInit(original.isLazyInit())__		setFactoryBeanName(original.getFactoryBeanName())__		setFactoryMethodName(original.getFactoryMethodName())__		setRole(original.getRole())__		setSource(original.getSource())__		copyAttributesFrom(original)___		if (original instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition originalAbd = (AbstractBeanDefinition) original__			if (originalAbd.hasBeanClass()) {_				setBeanClass(originalAbd.getBeanClass())__			}_			if (originalAbd.hasConstructorArgumentValues()) {_				setConstructorArgumentValues(new ConstructorArgumentValues(original.getConstructorArgumentValues()))__			}_			if (originalAbd.hasPropertyValues()) {_				setPropertyValues(new MutablePropertyValues(original.getPropertyValues()))__			}_			if (originalAbd.hasMethodOverrides()) {_				setMethodOverrides(new MethodOverrides(originalAbd.getMethodOverrides()))__			}_			setAutowireMode(originalAbd.getAutowireMode())__			setDependencyCheck(originalAbd.getDependencyCheck())__			setDependsOn(originalAbd.getDependsOn())__			setAutowireCandidate(originalAbd.isAutowireCandidate())__			setPrimary(originalAbd.isPrimary())__			copyQualifiersFrom(originalAbd)__			setInstanceSupplier(originalAbd.getInstanceSupplier())__			setNonPublicAccessAllowed(originalAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(originalAbd.isLenientConstructorResolution())__			setInitMethodName(originalAbd.getInitMethodName())__			setEnforceInitMethod(originalAbd.isEnforceInitMethod())__			setDestroyMethodName(originalAbd.getDestroyMethodName())__			setEnforceDestroyMethod(originalAbd.isEnforceDestroyMethod())__			setSynthetic(originalAbd.isSynthetic())__			setResource(originalAbd.getResource())__		}_		else {_			setConstructorArgumentValues(new ConstructorArgumentValues(original.getConstructorArgumentValues()))__			setPropertyValues(new MutablePropertyValues(original.getPropertyValues()))__			setResourceDescription(original.getResourceDescription())__		}_	};create,a,new,abstract,bean,definition,as,a,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;protected,abstract,bean,definition,bean,definition,original,set,parent,name,original,get,parent,name,set,bean,class,name,original,get,bean,class,name,set,scope,original,get,scope,set,abstract,original,is,abstract,set,lazy,init,original,is,lazy,init,set,factory,bean,name,original,get,factory,bean,name,set,factory,method,name,original,get,factory,method,name,set,role,original,get,role,set,source,original,get,source,copy,attributes,from,original,if,original,instanceof,abstract,bean,definition,abstract,bean,definition,original,abd,abstract,bean,definition,original,if,original,abd,has,bean,class,set,bean,class,original,abd,get,bean,class,if,original,abd,has,constructor,argument,values,set,constructor,argument,values,new,constructor,argument,values,original,get,constructor,argument,values,if,original,abd,has,property,values,set,property,values,new,mutable,property,values,original,get,property,values,if,original,abd,has,method,overrides,set,method,overrides,new,method,overrides,original,abd,get,method,overrides,set,autowire,mode,original,abd,get,autowire,mode,set,dependency,check,original,abd,get,dependency,check,set,depends,on,original,abd,get,depends,on,set,autowire,candidate,original,abd,is,autowire,candidate,set,primary,original,abd,is,primary,copy,qualifiers,from,original,abd,set,instance,supplier,original,abd,get,instance,supplier,set,non,public,access,allowed,original,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,original,abd,is,lenient,constructor,resolution,set,init,method,name,original,abd,get,init,method,name,set,enforce,init,method,original,abd,is,enforce,init,method,set,destroy,method,name,original,abd,get,destroy,method,name,set,enforce,destroy,method,original,abd,is,enforce,destroy,method,set,synthetic,original,abd,is,synthetic,set,resource,original,abd,get,resource,else,set,constructor,argument,values,new,constructor,argument,values,original,get,constructor,argument,values,set,property,values,new,mutable,property,values,original,get,property,values,set,resource,description,original,get,resource,description
AbstractBeanDefinition -> protected AbstractBeanDefinition(BeanDefinition original);1530190293;Create a new AbstractBeanDefinition as a deep copy of the given_bean definition._@param original the original bean definition to copy from;protected AbstractBeanDefinition(BeanDefinition original) {_		setParentName(original.getParentName())__		setBeanClassName(original.getBeanClassName())__		setScope(original.getScope())__		setAbstract(original.isAbstract())__		setLazyInit(original.isLazyInit())__		setFactoryBeanName(original.getFactoryBeanName())__		setFactoryMethodName(original.getFactoryMethodName())__		setRole(original.getRole())__		setSource(original.getSource())__		copyAttributesFrom(original)___		if (original instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition originalAbd = (AbstractBeanDefinition) original__			if (originalAbd.hasBeanClass()) {_				setBeanClass(originalAbd.getBeanClass())__			}_			if (originalAbd.hasConstructorArgumentValues()) {_				setConstructorArgumentValues(new ConstructorArgumentValues(original.getConstructorArgumentValues()))__			}_			if (originalAbd.hasPropertyValues()) {_				setPropertyValues(new MutablePropertyValues(original.getPropertyValues()))__			}_			if (originalAbd.hasMethodOverrides()) {_				setMethodOverrides(new MethodOverrides(originalAbd.getMethodOverrides()))__			}_			setAutowireMode(originalAbd.getAutowireMode())__			setDependencyCheck(originalAbd.getDependencyCheck())__			setDependsOn(originalAbd.getDependsOn())__			setAutowireCandidate(originalAbd.isAutowireCandidate())__			setPrimary(originalAbd.isPrimary())__			copyQualifiersFrom(originalAbd)__			setInstanceSupplier(originalAbd.getInstanceSupplier())__			setNonPublicAccessAllowed(originalAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(originalAbd.isLenientConstructorResolution())__			setInitMethodName(originalAbd.getInitMethodName())__			setEnforceInitMethod(originalAbd.isEnforceInitMethod())__			setDestroyMethodName(originalAbd.getDestroyMethodName())__			setEnforceDestroyMethod(originalAbd.isEnforceDestroyMethod())__			setSynthetic(originalAbd.isSynthetic())__			setResource(originalAbd.getResource())__		}_		else {_			setConstructorArgumentValues(new ConstructorArgumentValues(original.getConstructorArgumentValues()))__			setPropertyValues(new MutablePropertyValues(original.getPropertyValues()))__			setResourceDescription(original.getResourceDescription())__		}_	};create,a,new,abstract,bean,definition,as,a,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;protected,abstract,bean,definition,bean,definition,original,set,parent,name,original,get,parent,name,set,bean,class,name,original,get,bean,class,name,set,scope,original,get,scope,set,abstract,original,is,abstract,set,lazy,init,original,is,lazy,init,set,factory,bean,name,original,get,factory,bean,name,set,factory,method,name,original,get,factory,method,name,set,role,original,get,role,set,source,original,get,source,copy,attributes,from,original,if,original,instanceof,abstract,bean,definition,abstract,bean,definition,original,abd,abstract,bean,definition,original,if,original,abd,has,bean,class,set,bean,class,original,abd,get,bean,class,if,original,abd,has,constructor,argument,values,set,constructor,argument,values,new,constructor,argument,values,original,get,constructor,argument,values,if,original,abd,has,property,values,set,property,values,new,mutable,property,values,original,get,property,values,if,original,abd,has,method,overrides,set,method,overrides,new,method,overrides,original,abd,get,method,overrides,set,autowire,mode,original,abd,get,autowire,mode,set,dependency,check,original,abd,get,dependency,check,set,depends,on,original,abd,get,depends,on,set,autowire,candidate,original,abd,is,autowire,candidate,set,primary,original,abd,is,primary,copy,qualifiers,from,original,abd,set,instance,supplier,original,abd,get,instance,supplier,set,non,public,access,allowed,original,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,original,abd,is,lenient,constructor,resolution,set,init,method,name,original,abd,get,init,method,name,set,enforce,init,method,original,abd,is,enforce,init,method,set,destroy,method,name,original,abd,get,destroy,method,name,set,enforce,destroy,method,original,abd,is,enforce,destroy,method,set,synthetic,original,abd,is,synthetic,set,resource,original,abd,get,resource,else,set,constructor,argument,values,new,constructor,argument,values,original,get,constructor,argument,values,set,property,values,new,mutable,property,values,original,get,property,values,set,resource,description,original,get,resource,description
AbstractBeanDefinition -> protected AbstractBeanDefinition(BeanDefinition original);1532981251;Create a new AbstractBeanDefinition as a deep copy of the given_bean definition._@param original the original bean definition to copy from;protected AbstractBeanDefinition(BeanDefinition original) {_		setParentName(original.getParentName())__		setBeanClassName(original.getBeanClassName())__		setScope(original.getScope())__		setAbstract(original.isAbstract())__		setLazyInit(original.isLazyInit())__		setFactoryBeanName(original.getFactoryBeanName())__		setFactoryMethodName(original.getFactoryMethodName())__		setRole(original.getRole())__		setSource(original.getSource())__		copyAttributesFrom(original)___		if (original instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition originalAbd = (AbstractBeanDefinition) original__			if (originalAbd.hasBeanClass()) {_				setBeanClass(originalAbd.getBeanClass())__			}_			if (originalAbd.hasConstructorArgumentValues()) {_				setConstructorArgumentValues(new ConstructorArgumentValues(original.getConstructorArgumentValues()))__			}_			if (originalAbd.hasPropertyValues()) {_				setPropertyValues(new MutablePropertyValues(original.getPropertyValues()))__			}_			if (originalAbd.hasMethodOverrides()) {_				setMethodOverrides(new MethodOverrides(originalAbd.getMethodOverrides()))__			}_			setAutowireMode(originalAbd.getAutowireMode())__			setDependencyCheck(originalAbd.getDependencyCheck())__			setDependsOn(originalAbd.getDependsOn())__			setAutowireCandidate(originalAbd.isAutowireCandidate())__			setPrimary(originalAbd.isPrimary())__			copyQualifiersFrom(originalAbd)__			setInstanceSupplier(originalAbd.getInstanceSupplier())__			setNonPublicAccessAllowed(originalAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(originalAbd.isLenientConstructorResolution())__			setInitMethodName(originalAbd.getInitMethodName())__			setEnforceInitMethod(originalAbd.isEnforceInitMethod())__			setDestroyMethodName(originalAbd.getDestroyMethodName())__			setEnforceDestroyMethod(originalAbd.isEnforceDestroyMethod())__			setSynthetic(originalAbd.isSynthetic())__			setResource(originalAbd.getResource())__		}_		else {_			setConstructorArgumentValues(new ConstructorArgumentValues(original.getConstructorArgumentValues()))__			setPropertyValues(new MutablePropertyValues(original.getPropertyValues()))__			setResourceDescription(original.getResourceDescription())__		}_	};create,a,new,abstract,bean,definition,as,a,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;protected,abstract,bean,definition,bean,definition,original,set,parent,name,original,get,parent,name,set,bean,class,name,original,get,bean,class,name,set,scope,original,get,scope,set,abstract,original,is,abstract,set,lazy,init,original,is,lazy,init,set,factory,bean,name,original,get,factory,bean,name,set,factory,method,name,original,get,factory,method,name,set,role,original,get,role,set,source,original,get,source,copy,attributes,from,original,if,original,instanceof,abstract,bean,definition,abstract,bean,definition,original,abd,abstract,bean,definition,original,if,original,abd,has,bean,class,set,bean,class,original,abd,get,bean,class,if,original,abd,has,constructor,argument,values,set,constructor,argument,values,new,constructor,argument,values,original,get,constructor,argument,values,if,original,abd,has,property,values,set,property,values,new,mutable,property,values,original,get,property,values,if,original,abd,has,method,overrides,set,method,overrides,new,method,overrides,original,abd,get,method,overrides,set,autowire,mode,original,abd,get,autowire,mode,set,dependency,check,original,abd,get,dependency,check,set,depends,on,original,abd,get,depends,on,set,autowire,candidate,original,abd,is,autowire,candidate,set,primary,original,abd,is,primary,copy,qualifiers,from,original,abd,set,instance,supplier,original,abd,get,instance,supplier,set,non,public,access,allowed,original,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,original,abd,is,lenient,constructor,resolution,set,init,method,name,original,abd,get,init,method,name,set,enforce,init,method,original,abd,is,enforce,init,method,set,destroy,method,name,original,abd,get,destroy,method,name,set,enforce,destroy,method,original,abd,is,enforce,destroy,method,set,synthetic,original,abd,is,synthetic,set,resource,original,abd,get,resource,else,set,constructor,argument,values,new,constructor,argument,values,original,get,constructor,argument,values,set,property,values,new,mutable,property,values,original,get,property,values,set,resource,description,original,get,resource,description
AbstractBeanDefinition -> protected AbstractBeanDefinition(BeanDefinition original);1536863076;Create a new AbstractBeanDefinition as a deep copy of the given_bean definition._@param original the original bean definition to copy from;protected AbstractBeanDefinition(BeanDefinition original) {_		setParentName(original.getParentName())__		setBeanClassName(original.getBeanClassName())__		setScope(original.getScope())__		setAbstract(original.isAbstract())__		setLazyInit(original.isLazyInit())__		setFactoryBeanName(original.getFactoryBeanName())__		setFactoryMethodName(original.getFactoryMethodName())__		setRole(original.getRole())__		setSource(original.getSource())__		copyAttributesFrom(original)___		if (original instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition originalAbd = (AbstractBeanDefinition) original__			if (originalAbd.hasBeanClass()) {_				setBeanClass(originalAbd.getBeanClass())__			}_			if (originalAbd.hasConstructorArgumentValues()) {_				setConstructorArgumentValues(new ConstructorArgumentValues(original.getConstructorArgumentValues()))__			}_			if (originalAbd.hasPropertyValues()) {_				setPropertyValues(new MutablePropertyValues(original.getPropertyValues()))__			}_			if (originalAbd.hasMethodOverrides()) {_				setMethodOverrides(new MethodOverrides(originalAbd.getMethodOverrides()))__			}_			setAutowireMode(originalAbd.getAutowireMode())__			setDependencyCheck(originalAbd.getDependencyCheck())__			setDependsOn(originalAbd.getDependsOn())__			setAutowireCandidate(originalAbd.isAutowireCandidate())__			setPrimary(originalAbd.isPrimary())__			copyQualifiersFrom(originalAbd)__			setInstanceSupplier(originalAbd.getInstanceSupplier())__			setNonPublicAccessAllowed(originalAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(originalAbd.isLenientConstructorResolution())__			setInitMethodName(originalAbd.getInitMethodName())__			setEnforceInitMethod(originalAbd.isEnforceInitMethod())__			setDestroyMethodName(originalAbd.getDestroyMethodName())__			setEnforceDestroyMethod(originalAbd.isEnforceDestroyMethod())__			setSynthetic(originalAbd.isSynthetic())__			setResource(originalAbd.getResource())__		}_		else {_			setConstructorArgumentValues(new ConstructorArgumentValues(original.getConstructorArgumentValues()))__			setPropertyValues(new MutablePropertyValues(original.getPropertyValues()))__			setResourceDescription(original.getResourceDescription())__		}_	};create,a,new,abstract,bean,definition,as,a,deep,copy,of,the,given,bean,definition,param,original,the,original,bean,definition,to,copy,from;protected,abstract,bean,definition,bean,definition,original,set,parent,name,original,get,parent,name,set,bean,class,name,original,get,bean,class,name,set,scope,original,get,scope,set,abstract,original,is,abstract,set,lazy,init,original,is,lazy,init,set,factory,bean,name,original,get,factory,bean,name,set,factory,method,name,original,get,factory,method,name,set,role,original,get,role,set,source,original,get,source,copy,attributes,from,original,if,original,instanceof,abstract,bean,definition,abstract,bean,definition,original,abd,abstract,bean,definition,original,if,original,abd,has,bean,class,set,bean,class,original,abd,get,bean,class,if,original,abd,has,constructor,argument,values,set,constructor,argument,values,new,constructor,argument,values,original,get,constructor,argument,values,if,original,abd,has,property,values,set,property,values,new,mutable,property,values,original,get,property,values,if,original,abd,has,method,overrides,set,method,overrides,new,method,overrides,original,abd,get,method,overrides,set,autowire,mode,original,abd,get,autowire,mode,set,dependency,check,original,abd,get,dependency,check,set,depends,on,original,abd,get,depends,on,set,autowire,candidate,original,abd,is,autowire,candidate,set,primary,original,abd,is,primary,copy,qualifiers,from,original,abd,set,instance,supplier,original,abd,get,instance,supplier,set,non,public,access,allowed,original,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,original,abd,is,lenient,constructor,resolution,set,init,method,name,original,abd,get,init,method,name,set,enforce,init,method,original,abd,is,enforce,init,method,set,destroy,method,name,original,abd,get,destroy,method,name,set,enforce,destroy,method,original,abd,is,enforce,destroy,method,set,synthetic,original,abd,is,synthetic,set,resource,original,abd,get,resource,else,set,constructor,argument,values,new,constructor,argument,values,original,get,constructor,argument,values,set,property,values,new,mutable,property,values,original,get,property,values,set,resource,description,original,get,resource,description
AbstractBeanDefinition -> public void setAbstract(boolean abstractFlag);1328020251;Set if this bean is "abstract", i.e. not meant to be instantiated itself but_rather just serving as parent for concrete child bean definitions._<p>Default is "false". Specify true to tell the bean factory to not try to_instantiate that particular bean in any case.;public void setAbstract(boolean abstractFlag) {_		this.abstractFlag = abstractFlag__	};set,if,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions,p,default,is,false,specify,true,to,tell,the,bean,factory,to,not,try,to,instantiate,that,particular,bean,in,any,case;public,void,set,abstract,boolean,abstract,flag,this,abstract,flag,abstract,flag
AbstractBeanDefinition -> public void setAbstract(boolean abstractFlag);1337202589;Set if this bean is "abstract", i.e. not meant to be instantiated itself but_rather just serving as parent for concrete child bean definitions._<p>Default is "false". Specify true to tell the bean factory to not try to_instantiate that particular bean in any case.;public void setAbstract(boolean abstractFlag) {_		this.abstractFlag = abstractFlag__	};set,if,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions,p,default,is,false,specify,true,to,tell,the,bean,factory,to,not,try,to,instantiate,that,particular,bean,in,any,case;public,void,set,abstract,boolean,abstract,flag,this,abstract,flag,abstract,flag
AbstractBeanDefinition -> public void setAbstract(boolean abstractFlag);1356735495;Set if this bean is "abstract", i.e. not meant to be instantiated itself but_rather just serving as parent for concrete child bean definitions._<p>Default is "false". Specify true to tell the bean factory to not try to_instantiate that particular bean in any case.;public void setAbstract(boolean abstractFlag) {_		this.abstractFlag = abstractFlag__	};set,if,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions,p,default,is,false,specify,true,to,tell,the,bean,factory,to,not,try,to,instantiate,that,particular,bean,in,any,case;public,void,set,abstract,boolean,abstract,flag,this,abstract,flag,abstract,flag
AbstractBeanDefinition -> public void setAbstract(boolean abstractFlag);1357119239;Set if this bean is "abstract", i.e. not meant to be instantiated itself but_rather just serving as parent for concrete child bean definitions._<p>Default is "false". Specify true to tell the bean factory to not try to_instantiate that particular bean in any case.;public void setAbstract(boolean abstractFlag) {_		this.abstractFlag = abstractFlag__	};set,if,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions,p,default,is,false,specify,true,to,tell,the,bean,factory,to,not,try,to,instantiate,that,particular,bean,in,any,case;public,void,set,abstract,boolean,abstract,flag,this,abstract,flag,abstract,flag
AbstractBeanDefinition -> public void setAbstract(boolean abstractFlag);1367508310;Set if this bean is "abstract", i.e. not meant to be instantiated itself but_rather just serving as parent for concrete child bean definitions._<p>Default is "false". Specify true to tell the bean factory to not try to_instantiate that particular bean in any case.;public void setAbstract(boolean abstractFlag) {_		this.abstractFlag = abstractFlag__	};set,if,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions,p,default,is,false,specify,true,to,tell,the,bean,factory,to,not,try,to,instantiate,that,particular,bean,in,any,case;public,void,set,abstract,boolean,abstract,flag,this,abstract,flag,abstract,flag
AbstractBeanDefinition -> public void setAbstract(boolean abstractFlag);1367943112;Set if this bean is "abstract", i.e. not meant to be instantiated itself but_rather just serving as parent for concrete child bean definitions._<p>Default is "false". Specify true to tell the bean factory to not try to_instantiate that particular bean in any case.;public void setAbstract(boolean abstractFlag) {_		this.abstractFlag = abstractFlag__	};set,if,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions,p,default,is,false,specify,true,to,tell,the,bean,factory,to,not,try,to,instantiate,that,particular,bean,in,any,case;public,void,set,abstract,boolean,abstract,flag,this,abstract,flag,abstract,flag
AbstractBeanDefinition -> public void setAbstract(boolean abstractFlag);1368482696;Set if this bean is "abstract", i.e. not meant to be instantiated itself but_rather just serving as parent for concrete child bean definitions._<p>Default is "false". Specify true to tell the bean factory to not try to_instantiate that particular bean in any case.;public void setAbstract(boolean abstractFlag) {_		this.abstractFlag = abstractFlag__	};set,if,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions,p,default,is,false,specify,true,to,tell,the,bean,factory,to,not,try,to,instantiate,that,particular,bean,in,any,case;public,void,set,abstract,boolean,abstract,flag,this,abstract,flag,abstract,flag
AbstractBeanDefinition -> public void setAbstract(boolean abstractFlag);1385412762;Set if this bean is "abstract", i.e. not meant to be instantiated itself but_rather just serving as parent for concrete child bean definitions._<p>Default is "false". Specify true to tell the bean factory to not try to_instantiate that particular bean in any case.;public void setAbstract(boolean abstractFlag) {_		this.abstractFlag = abstractFlag__	};set,if,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions,p,default,is,false,specify,true,to,tell,the,bean,factory,to,not,try,to,instantiate,that,particular,bean,in,any,case;public,void,set,abstract,boolean,abstract,flag,this,abstract,flag,abstract,flag
AbstractBeanDefinition -> public void setAbstract(boolean abstractFlag);1392245317;Set if this bean is "abstract", i.e. not meant to be instantiated itself but_rather just serving as parent for concrete child bean definitions._<p>Default is "false". Specify true to tell the bean factory to not try to_instantiate that particular bean in any case.;public void setAbstract(boolean abstractFlag) {_		this.abstractFlag = abstractFlag__	};set,if,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions,p,default,is,false,specify,true,to,tell,the,bean,factory,to,not,try,to,instantiate,that,particular,bean,in,any,case;public,void,set,abstract,boolean,abstract,flag,this,abstract,flag,abstract,flag
AbstractBeanDefinition -> public void setAbstract(boolean abstractFlag);1397163142;Set if this bean is "abstract", i.e. not meant to be instantiated itself but_rather just serving as parent for concrete child bean definitions._<p>Default is "false". Specify true to tell the bean factory to not try to_instantiate that particular bean in any case.;public void setAbstract(boolean abstractFlag) {_		this.abstractFlag = abstractFlag__	};set,if,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions,p,default,is,false,specify,true,to,tell,the,bean,factory,to,not,try,to,instantiate,that,particular,bean,in,any,case;public,void,set,abstract,boolean,abstract,flag,this,abstract,flag,abstract,flag
AbstractBeanDefinition -> public void setAbstract(boolean abstractFlag);1398898390;Set if this bean is "abstract", i.e. not meant to be instantiated itself but_rather just serving as parent for concrete child bean definitions._<p>Default is "false". Specify true to tell the bean factory to not try to_instantiate that particular bean in any case.;public void setAbstract(boolean abstractFlag) {_		this.abstractFlag = abstractFlag__	};set,if,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions,p,default,is,false,specify,true,to,tell,the,bean,factory,to,not,try,to,instantiate,that,particular,bean,in,any,case;public,void,set,abstract,boolean,abstract,flag,this,abstract,flag,abstract,flag
AbstractBeanDefinition -> public void setAbstract(boolean abstractFlag);1407511029;Set if this bean is "abstract", i.e. not meant to be instantiated itself but_rather just serving as parent for concrete child bean definitions._<p>Default is "false". Specify true to tell the bean factory to not try to_instantiate that particular bean in any case.;public void setAbstract(boolean abstractFlag) {_		this.abstractFlag = abstractFlag__	};set,if,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions,p,default,is,false,specify,true,to,tell,the,bean,factory,to,not,try,to,instantiate,that,particular,bean,in,any,case;public,void,set,abstract,boolean,abstract,flag,this,abstract,flag,abstract,flag
AbstractBeanDefinition -> public void setAbstract(boolean abstractFlag);1432135182;Set if this bean is "abstract", i.e. not meant to be instantiated itself but_rather just serving as parent for concrete child bean definitions._<p>Default is "false". Specify true to tell the bean factory to not try to_instantiate that particular bean in any case.;public void setAbstract(boolean abstractFlag) {_		this.abstractFlag = abstractFlag__	};set,if,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions,p,default,is,false,specify,true,to,tell,the,bean,factory,to,not,try,to,instantiate,that,particular,bean,in,any,case;public,void,set,abstract,boolean,abstract,flag,this,abstract,flag,abstract,flag
AbstractBeanDefinition -> public void setAbstract(boolean abstractFlag);1434204509;Set if this bean is "abstract", i.e. not meant to be instantiated itself but_rather just serving as parent for concrete child bean definitions._<p>Default is "false". Specify true to tell the bean factory to not try to_instantiate that particular bean in any case.;public void setAbstract(boolean abstractFlag) {_		this.abstractFlag = abstractFlag__	};set,if,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions,p,default,is,false,specify,true,to,tell,the,bean,factory,to,not,try,to,instantiate,that,particular,bean,in,any,case;public,void,set,abstract,boolean,abstract,flag,this,abstract,flag,abstract,flag
AbstractBeanDefinition -> public void setAbstract(boolean abstractFlag);1447323728;Set if this bean is "abstract", i.e. not meant to be instantiated itself but_rather just serving as parent for concrete child bean definitions._<p>Default is "false". Specify true to tell the bean factory to not try to_instantiate that particular bean in any case.;public void setAbstract(boolean abstractFlag) {_		this.abstractFlag = abstractFlag__	};set,if,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions,p,default,is,false,specify,true,to,tell,the,bean,factory,to,not,try,to,instantiate,that,particular,bean,in,any,case;public,void,set,abstract,boolean,abstract,flag,this,abstract,flag,abstract,flag
AbstractBeanDefinition -> public void setAbstract(boolean abstractFlag);1465226156;Set if this bean is "abstract", i.e. not meant to be instantiated itself but_rather just serving as parent for concrete child bean definitions._<p>Default is "false". Specify true to tell the bean factory to not try to_instantiate that particular bean in any case.;public void setAbstract(boolean abstractFlag) {_		this.abstractFlag = abstractFlag__	};set,if,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions,p,default,is,false,specify,true,to,tell,the,bean,factory,to,not,try,to,instantiate,that,particular,bean,in,any,case;public,void,set,abstract,boolean,abstract,flag,this,abstract,flag,abstract,flag
AbstractBeanDefinition -> public void setAbstract(boolean abstractFlag);1467730834;Set if this bean is "abstract", i.e. not meant to be instantiated itself but_rather just serving as parent for concrete child bean definitions._<p>Default is "false". Specify true to tell the bean factory to not try to_instantiate that particular bean in any case.;public void setAbstract(boolean abstractFlag) {_		this.abstractFlag = abstractFlag__	};set,if,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions,p,default,is,false,specify,true,to,tell,the,bean,factory,to,not,try,to,instantiate,that,particular,bean,in,any,case;public,void,set,abstract,boolean,abstract,flag,this,abstract,flag,abstract,flag
AbstractBeanDefinition -> public void setAbstract(boolean abstractFlag);1467846264;Set if this bean is "abstract", i.e. not meant to be instantiated itself but_rather just serving as parent for concrete child bean definitions._<p>Default is "false". Specify true to tell the bean factory to not try to_instantiate that particular bean in any case.;public void setAbstract(boolean abstractFlag) {_		this.abstractFlag = abstractFlag__	};set,if,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions,p,default,is,false,specify,true,to,tell,the,bean,factory,to,not,try,to,instantiate,that,particular,bean,in,any,case;public,void,set,abstract,boolean,abstract,flag,this,abstract,flag,abstract,flag
AbstractBeanDefinition -> public void setAbstract(boolean abstractFlag);1482091545;Set if this bean is "abstract", i.e. not meant to be instantiated itself but_rather just serving as parent for concrete child bean definitions._<p>Default is "false". Specify true to tell the bean factory to not try to_instantiate that particular bean in any case.;public void setAbstract(boolean abstractFlag) {_		this.abstractFlag = abstractFlag__	};set,if,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions,p,default,is,false,specify,true,to,tell,the,bean,factory,to,not,try,to,instantiate,that,particular,bean,in,any,case;public,void,set,abstract,boolean,abstract,flag,this,abstract,flag,abstract,flag
AbstractBeanDefinition -> public void setAbstract(boolean abstractFlag);1483093818;Set if this bean is "abstract", i.e. not meant to be instantiated itself but_rather just serving as parent for concrete child bean definitions._<p>Default is "false". Specify true to tell the bean factory to not try to_instantiate that particular bean in any case.;public void setAbstract(boolean abstractFlag) {_		this.abstractFlag = abstractFlag__	};set,if,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions,p,default,is,false,specify,true,to,tell,the,bean,factory,to,not,try,to,instantiate,that,particular,bean,in,any,case;public,void,set,abstract,boolean,abstract,flag,this,abstract,flag,abstract,flag
AbstractBeanDefinition -> public void setAbstract(boolean abstractFlag);1495868221;Set if this bean is "abstract", i.e. not meant to be instantiated itself but_rather just serving as parent for concrete child bean definitions._<p>Default is "false". Specify true to tell the bean factory to not try to_instantiate that particular bean in any case.;public void setAbstract(boolean abstractFlag) {_		this.abstractFlag = abstractFlag__	};set,if,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions,p,default,is,false,specify,true,to,tell,the,bean,factory,to,not,try,to,instantiate,that,particular,bean,in,any,case;public,void,set,abstract,boolean,abstract,flag,this,abstract,flag,abstract,flag
AbstractBeanDefinition -> public void setAbstract(boolean abstractFlag);1496837955;Set if this bean is "abstract", i.e. not meant to be instantiated itself but_rather just serving as parent for concrete child bean definitions._<p>Default is "false". Specify true to tell the bean factory to not try to_instantiate that particular bean in any case.;public void setAbstract(boolean abstractFlag) {_		this.abstractFlag = abstractFlag__	};set,if,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions,p,default,is,false,specify,true,to,tell,the,bean,factory,to,not,try,to,instantiate,that,particular,bean,in,any,case;public,void,set,abstract,boolean,abstract,flag,this,abstract,flag,abstract,flag
AbstractBeanDefinition -> public void setAbstract(boolean abstractFlag);1498780456;Set if this bean is "abstract", i.e. not meant to be instantiated itself but_rather just serving as parent for concrete child bean definitions._<p>Default is "false". Specify true to tell the bean factory to not try to_instantiate that particular bean in any case.;public void setAbstract(boolean abstractFlag) {_		this.abstractFlag = abstractFlag__	};set,if,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions,p,default,is,false,specify,true,to,tell,the,bean,factory,to,not,try,to,instantiate,that,particular,bean,in,any,case;public,void,set,abstract,boolean,abstract,flag,this,abstract,flag,abstract,flag
AbstractBeanDefinition -> public void setAbstract(boolean abstractFlag);1502974979;Set if this bean is "abstract", i.e. not meant to be instantiated itself but_rather just serving as parent for concrete child bean definitions._<p>Default is "false". Specify true to tell the bean factory to not try to_instantiate that particular bean in any case.;public void setAbstract(boolean abstractFlag) {_		this.abstractFlag = abstractFlag__	};set,if,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions,p,default,is,false,specify,true,to,tell,the,bean,factory,to,not,try,to,instantiate,that,particular,bean,in,any,case;public,void,set,abstract,boolean,abstract,flag,this,abstract,flag,abstract,flag
AbstractBeanDefinition -> public void setAbstract(boolean abstractFlag);1503008029;Set if this bean is "abstract", i.e. not meant to be instantiated itself but_rather just serving as parent for concrete child bean definitions._<p>Default is "false". Specify true to tell the bean factory to not try to_instantiate that particular bean in any case.;public void setAbstract(boolean abstractFlag) {_		this.abstractFlag = abstractFlag__	};set,if,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions,p,default,is,false,specify,true,to,tell,the,bean,factory,to,not,try,to,instantiate,that,particular,bean,in,any,case;public,void,set,abstract,boolean,abstract,flag,this,abstract,flag,abstract,flag
AbstractBeanDefinition -> public void setAbstract(boolean abstractFlag);1510606271;Set if this bean is "abstract", i.e. not meant to be instantiated itself but_rather just serving as parent for concrete child bean definitions._<p>Default is "false". Specify true to tell the bean factory to not try to_instantiate that particular bean in any case.;public void setAbstract(boolean abstractFlag) {_		this.abstractFlag = abstractFlag__	};set,if,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions,p,default,is,false,specify,true,to,tell,the,bean,factory,to,not,try,to,instantiate,that,particular,bean,in,any,case;public,void,set,abstract,boolean,abstract,flag,this,abstract,flag,abstract,flag
AbstractBeanDefinition -> public void setAbstract(boolean abstractFlag);1510675876;Set if this bean is "abstract", i.e. not meant to be instantiated itself but_rather just serving as parent for concrete child bean definitions._<p>Default is "false". Specify true to tell the bean factory to not try to_instantiate that particular bean in any case.;public void setAbstract(boolean abstractFlag) {_		this.abstractFlag = abstractFlag__	};set,if,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions,p,default,is,false,specify,true,to,tell,the,bean,factory,to,not,try,to,instantiate,that,particular,bean,in,any,case;public,void,set,abstract,boolean,abstract,flag,this,abstract,flag,abstract,flag
AbstractBeanDefinition -> public void setAbstract(boolean abstractFlag);1530174524;Set if this bean is "abstract", i.e. not meant to be instantiated itself but_rather just serving as parent for concrete child bean definitions._<p>Default is "false". Specify true to tell the bean factory to not try to_instantiate that particular bean in any case.;public void setAbstract(boolean abstractFlag) {_		this.abstractFlag = abstractFlag__	};set,if,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions,p,default,is,false,specify,true,to,tell,the,bean,factory,to,not,try,to,instantiate,that,particular,bean,in,any,case;public,void,set,abstract,boolean,abstract,flag,this,abstract,flag,abstract,flag
AbstractBeanDefinition -> public void setAbstract(boolean abstractFlag);1530174524;Set if this bean is "abstract", i.e. not meant to be instantiated itself but_rather just serving as parent for concrete child bean definitions._<p>Default is "false". Specify true to tell the bean factory to not try to_instantiate that particular bean in any case.;public void setAbstract(boolean abstractFlag) {_		this.abstractFlag = abstractFlag__	};set,if,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions,p,default,is,false,specify,true,to,tell,the,bean,factory,to,not,try,to,instantiate,that,particular,bean,in,any,case;public,void,set,abstract,boolean,abstract,flag,this,abstract,flag,abstract,flag
AbstractBeanDefinition -> public void setAbstract(boolean abstractFlag);1530174524;Set if this bean is "abstract", i.e. not meant to be instantiated itself but_rather just serving as parent for concrete child bean definitions._<p>Default is "false". Specify true to tell the bean factory to not try to_instantiate that particular bean in any case.;public void setAbstract(boolean abstractFlag) {_		this.abstractFlag = abstractFlag__	};set,if,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions,p,default,is,false,specify,true,to,tell,the,bean,factory,to,not,try,to,instantiate,that,particular,bean,in,any,case;public,void,set,abstract,boolean,abstract,flag,this,abstract,flag,abstract,flag
AbstractBeanDefinition -> public void setAbstract(boolean abstractFlag);1530190293;Set if this bean is "abstract", i.e. not meant to be instantiated itself but_rather just serving as parent for concrete child bean definitions._<p>Default is "false". Specify true to tell the bean factory to not try to_instantiate that particular bean in any case.;public void setAbstract(boolean abstractFlag) {_		this.abstractFlag = abstractFlag__	};set,if,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions,p,default,is,false,specify,true,to,tell,the,bean,factory,to,not,try,to,instantiate,that,particular,bean,in,any,case;public,void,set,abstract,boolean,abstract,flag,this,abstract,flag,abstract,flag
AbstractBeanDefinition -> public void setAbstract(boolean abstractFlag);1532981251;Set if this bean is "abstract", i.e. not meant to be instantiated itself but_rather just serving as parent for concrete child bean definitions._<p>Default is "false". Specify true to tell the bean factory to not try to_instantiate that particular bean in any case.;public void setAbstract(boolean abstractFlag) {_		this.abstractFlag = abstractFlag__	};set,if,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions,p,default,is,false,specify,true,to,tell,the,bean,factory,to,not,try,to,instantiate,that,particular,bean,in,any,case;public,void,set,abstract,boolean,abstract,flag,this,abstract,flag,abstract,flag
AbstractBeanDefinition -> public void setAbstract(boolean abstractFlag);1536863076;Set if this bean is "abstract", i.e. not meant to be instantiated itself but_rather just serving as parent for concrete child bean definitions._<p>Default is "false". Specify true to tell the bean factory to not try to_instantiate that particular bean in any case.;public void setAbstract(boolean abstractFlag) {_		this.abstractFlag = abstractFlag__	};set,if,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions,p,default,is,false,specify,true,to,tell,the,bean,factory,to,not,try,to,instantiate,that,particular,bean,in,any,case;public,void,set,abstract,boolean,abstract,flag,this,abstract,flag,abstract,flag
AbstractBeanDefinition -> @Nullable 	public Resource getResource();1498780456;Return the resource that this bean definition came from.;@Nullable_	public Resource getResource() {_		return this.resource__	};return,the,resource,that,this,bean,definition,came,from;nullable,public,resource,get,resource,return,this,resource
AbstractBeanDefinition -> @Nullable 	public Resource getResource();1502974979;Return the resource that this bean definition came from.;@Nullable_	public Resource getResource() {_		return this.resource__	};return,the,resource,that,this,bean,definition,came,from;nullable,public,resource,get,resource,return,this,resource
AbstractBeanDefinition -> @Nullable 	public Resource getResource();1503008029;Return the resource that this bean definition came from.;@Nullable_	public Resource getResource() {_		return this.resource__	};return,the,resource,that,this,bean,definition,came,from;nullable,public,resource,get,resource,return,this,resource
AbstractBeanDefinition -> @Nullable 	public Resource getResource();1510606271;Return the resource that this bean definition came from.;@Nullable_	public Resource getResource() {_		return this.resource__	};return,the,resource,that,this,bean,definition,came,from;nullable,public,resource,get,resource,return,this,resource
AbstractBeanDefinition -> @Nullable 	public Resource getResource();1510675876;Return the resource that this bean definition came from.;@Nullable_	public Resource getResource() {_		return this.resource__	};return,the,resource,that,this,bean,definition,came,from;nullable,public,resource,get,resource,return,this,resource
AbstractBeanDefinition -> @Nullable 	public Resource getResource();1530174524;Return the resource that this bean definition came from.;@Nullable_	public Resource getResource() {_		return this.resource__	};return,the,resource,that,this,bean,definition,came,from;nullable,public,resource,get,resource,return,this,resource
AbstractBeanDefinition -> @Nullable 	public Resource getResource();1530174524;Return the resource that this bean definition came from.;@Nullable_	public Resource getResource() {_		return this.resource__	};return,the,resource,that,this,bean,definition,came,from;nullable,public,resource,get,resource,return,this,resource
AbstractBeanDefinition -> @Nullable 	public Resource getResource();1530174524;Return the resource that this bean definition came from.;@Nullable_	public Resource getResource() {_		return this.resource__	};return,the,resource,that,this,bean,definition,came,from;nullable,public,resource,get,resource,return,this,resource
AbstractBeanDefinition -> @Nullable 	public Resource getResource();1530190293;Return the resource that this bean definition came from.;@Nullable_	public Resource getResource() {_		return this.resource__	};return,the,resource,that,this,bean,definition,came,from;nullable,public,resource,get,resource,return,this,resource
AbstractBeanDefinition -> @Nullable 	public Resource getResource();1532981251;Return the resource that this bean definition came from.;@Nullable_	public Resource getResource() {_		return this.resource__	};return,the,resource,that,this,bean,definition,came,from;nullable,public,resource,get,resource,return,this,resource
AbstractBeanDefinition -> @Nullable 	public Resource getResource();1536863076;Return the resource that this bean definition came from.;@Nullable_	public Resource getResource() {_		return this.resource__	};return,the,resource,that,this,bean,definition,came,from;nullable,public,resource,get,resource,return,this,resource
AbstractBeanDefinition -> public void setDependencyCheck(int dependencyCheck);1328020251;Set the dependency check code._@param dependencyCheck the code to set._Must be one of the four constants defined in this class._@see #DEPENDENCY_CHECK_NONE_@see #DEPENDENCY_CHECK_OBJECTS_@see #DEPENDENCY_CHECK_SIMPLE_@see #DEPENDENCY_CHECK_ALL;public void setDependencyCheck(int dependencyCheck) {_		this.dependencyCheck = dependencyCheck__	};set,the,dependency,check,code,param,dependency,check,the,code,to,set,must,be,one,of,the,four,constants,defined,in,this,class,see,see,see,see;public,void,set,dependency,check,int,dependency,check,this,dependency,check,dependency,check
AbstractBeanDefinition -> public void setDependencyCheck(int dependencyCheck);1337202589;Set the dependency check code._@param dependencyCheck the code to set._Must be one of the four constants defined in this class._@see #DEPENDENCY_CHECK_NONE_@see #DEPENDENCY_CHECK_OBJECTS_@see #DEPENDENCY_CHECK_SIMPLE_@see #DEPENDENCY_CHECK_ALL;public void setDependencyCheck(int dependencyCheck) {_		this.dependencyCheck = dependencyCheck__	};set,the,dependency,check,code,param,dependency,check,the,code,to,set,must,be,one,of,the,four,constants,defined,in,this,class,see,see,see,see;public,void,set,dependency,check,int,dependency,check,this,dependency,check,dependency,check
AbstractBeanDefinition -> public void setDependencyCheck(int dependencyCheck);1356735495;Set the dependency check code._@param dependencyCheck the code to set._Must be one of the four constants defined in this class._@see #DEPENDENCY_CHECK_NONE_@see #DEPENDENCY_CHECK_OBJECTS_@see #DEPENDENCY_CHECK_SIMPLE_@see #DEPENDENCY_CHECK_ALL;public void setDependencyCheck(int dependencyCheck) {_		this.dependencyCheck = dependencyCheck__	};set,the,dependency,check,code,param,dependency,check,the,code,to,set,must,be,one,of,the,four,constants,defined,in,this,class,see,see,see,see;public,void,set,dependency,check,int,dependency,check,this,dependency,check,dependency,check
AbstractBeanDefinition -> public void setDependencyCheck(int dependencyCheck);1357119239;Set the dependency check code._@param dependencyCheck the code to set._Must be one of the four constants defined in this class._@see #DEPENDENCY_CHECK_NONE_@see #DEPENDENCY_CHECK_OBJECTS_@see #DEPENDENCY_CHECK_SIMPLE_@see #DEPENDENCY_CHECK_ALL;public void setDependencyCheck(int dependencyCheck) {_		this.dependencyCheck = dependencyCheck__	};set,the,dependency,check,code,param,dependency,check,the,code,to,set,must,be,one,of,the,four,constants,defined,in,this,class,see,see,see,see;public,void,set,dependency,check,int,dependency,check,this,dependency,check,dependency,check
AbstractBeanDefinition -> public void setDependencyCheck(int dependencyCheck);1367508310;Set the dependency check code._@param dependencyCheck the code to set._Must be one of the four constants defined in this class._@see #DEPENDENCY_CHECK_NONE_@see #DEPENDENCY_CHECK_OBJECTS_@see #DEPENDENCY_CHECK_SIMPLE_@see #DEPENDENCY_CHECK_ALL;public void setDependencyCheck(int dependencyCheck) {_		this.dependencyCheck = dependencyCheck__	};set,the,dependency,check,code,param,dependency,check,the,code,to,set,must,be,one,of,the,four,constants,defined,in,this,class,see,see,see,see;public,void,set,dependency,check,int,dependency,check,this,dependency,check,dependency,check
AbstractBeanDefinition -> public void setDependencyCheck(int dependencyCheck);1367943112;Set the dependency check code._@param dependencyCheck the code to set._Must be one of the four constants defined in this class._@see #DEPENDENCY_CHECK_NONE_@see #DEPENDENCY_CHECK_OBJECTS_@see #DEPENDENCY_CHECK_SIMPLE_@see #DEPENDENCY_CHECK_ALL;public void setDependencyCheck(int dependencyCheck) {_		this.dependencyCheck = dependencyCheck__	};set,the,dependency,check,code,param,dependency,check,the,code,to,set,must,be,one,of,the,four,constants,defined,in,this,class,see,see,see,see;public,void,set,dependency,check,int,dependency,check,this,dependency,check,dependency,check
AbstractBeanDefinition -> public void setDependencyCheck(int dependencyCheck);1368482696;Set the dependency check code._@param dependencyCheck the code to set._Must be one of the four constants defined in this class._@see #DEPENDENCY_CHECK_NONE_@see #DEPENDENCY_CHECK_OBJECTS_@see #DEPENDENCY_CHECK_SIMPLE_@see #DEPENDENCY_CHECK_ALL;public void setDependencyCheck(int dependencyCheck) {_		this.dependencyCheck = dependencyCheck__	};set,the,dependency,check,code,param,dependency,check,the,code,to,set,must,be,one,of,the,four,constants,defined,in,this,class,see,see,see,see;public,void,set,dependency,check,int,dependency,check,this,dependency,check,dependency,check
AbstractBeanDefinition -> public void setDependencyCheck(int dependencyCheck);1385412762;Set the dependency check code._@param dependencyCheck the code to set._Must be one of the four constants defined in this class._@see #DEPENDENCY_CHECK_NONE_@see #DEPENDENCY_CHECK_OBJECTS_@see #DEPENDENCY_CHECK_SIMPLE_@see #DEPENDENCY_CHECK_ALL;public void setDependencyCheck(int dependencyCheck) {_		this.dependencyCheck = dependencyCheck__	};set,the,dependency,check,code,param,dependency,check,the,code,to,set,must,be,one,of,the,four,constants,defined,in,this,class,see,see,see,see;public,void,set,dependency,check,int,dependency,check,this,dependency,check,dependency,check
AbstractBeanDefinition -> public void setDependencyCheck(int dependencyCheck);1392245317;Set the dependency check code._@param dependencyCheck the code to set._Must be one of the four constants defined in this class._@see #DEPENDENCY_CHECK_NONE_@see #DEPENDENCY_CHECK_OBJECTS_@see #DEPENDENCY_CHECK_SIMPLE_@see #DEPENDENCY_CHECK_ALL;public void setDependencyCheck(int dependencyCheck) {_		this.dependencyCheck = dependencyCheck__	};set,the,dependency,check,code,param,dependency,check,the,code,to,set,must,be,one,of,the,four,constants,defined,in,this,class,see,see,see,see;public,void,set,dependency,check,int,dependency,check,this,dependency,check,dependency,check
AbstractBeanDefinition -> public void setDependencyCheck(int dependencyCheck);1397163142;Set the dependency check code._@param dependencyCheck the code to set._Must be one of the four constants defined in this class._@see #DEPENDENCY_CHECK_NONE_@see #DEPENDENCY_CHECK_OBJECTS_@see #DEPENDENCY_CHECK_SIMPLE_@see #DEPENDENCY_CHECK_ALL;public void setDependencyCheck(int dependencyCheck) {_		this.dependencyCheck = dependencyCheck__	};set,the,dependency,check,code,param,dependency,check,the,code,to,set,must,be,one,of,the,four,constants,defined,in,this,class,see,see,see,see;public,void,set,dependency,check,int,dependency,check,this,dependency,check,dependency,check
AbstractBeanDefinition -> public void setDependencyCheck(int dependencyCheck);1398898390;Set the dependency check code._@param dependencyCheck the code to set._Must be one of the four constants defined in this class._@see #DEPENDENCY_CHECK_NONE_@see #DEPENDENCY_CHECK_OBJECTS_@see #DEPENDENCY_CHECK_SIMPLE_@see #DEPENDENCY_CHECK_ALL;public void setDependencyCheck(int dependencyCheck) {_		this.dependencyCheck = dependencyCheck__	};set,the,dependency,check,code,param,dependency,check,the,code,to,set,must,be,one,of,the,four,constants,defined,in,this,class,see,see,see,see;public,void,set,dependency,check,int,dependency,check,this,dependency,check,dependency,check
AbstractBeanDefinition -> public void setDependencyCheck(int dependencyCheck);1407511029;Set the dependency check code._@param dependencyCheck the code to set._Must be one of the four constants defined in this class._@see #DEPENDENCY_CHECK_NONE_@see #DEPENDENCY_CHECK_OBJECTS_@see #DEPENDENCY_CHECK_SIMPLE_@see #DEPENDENCY_CHECK_ALL;public void setDependencyCheck(int dependencyCheck) {_		this.dependencyCheck = dependencyCheck__	};set,the,dependency,check,code,param,dependency,check,the,code,to,set,must,be,one,of,the,four,constants,defined,in,this,class,see,see,see,see;public,void,set,dependency,check,int,dependency,check,this,dependency,check,dependency,check
AbstractBeanDefinition -> public void setDependencyCheck(int dependencyCheck);1432135182;Set the dependency check code._@param dependencyCheck the code to set._Must be one of the four constants defined in this class._@see #DEPENDENCY_CHECK_NONE_@see #DEPENDENCY_CHECK_OBJECTS_@see #DEPENDENCY_CHECK_SIMPLE_@see #DEPENDENCY_CHECK_ALL;public void setDependencyCheck(int dependencyCheck) {_		this.dependencyCheck = dependencyCheck__	};set,the,dependency,check,code,param,dependency,check,the,code,to,set,must,be,one,of,the,four,constants,defined,in,this,class,see,see,see,see;public,void,set,dependency,check,int,dependency,check,this,dependency,check,dependency,check
AbstractBeanDefinition -> public void setDependencyCheck(int dependencyCheck);1434204509;Set the dependency check code._@param dependencyCheck the code to set._Must be one of the four constants defined in this class._@see #DEPENDENCY_CHECK_NONE_@see #DEPENDENCY_CHECK_OBJECTS_@see #DEPENDENCY_CHECK_SIMPLE_@see #DEPENDENCY_CHECK_ALL;public void setDependencyCheck(int dependencyCheck) {_		this.dependencyCheck = dependencyCheck__	};set,the,dependency,check,code,param,dependency,check,the,code,to,set,must,be,one,of,the,four,constants,defined,in,this,class,see,see,see,see;public,void,set,dependency,check,int,dependency,check,this,dependency,check,dependency,check
AbstractBeanDefinition -> public void setDependencyCheck(int dependencyCheck);1447323728;Set the dependency check code._@param dependencyCheck the code to set._Must be one of the four constants defined in this class._@see #DEPENDENCY_CHECK_NONE_@see #DEPENDENCY_CHECK_OBJECTS_@see #DEPENDENCY_CHECK_SIMPLE_@see #DEPENDENCY_CHECK_ALL;public void setDependencyCheck(int dependencyCheck) {_		this.dependencyCheck = dependencyCheck__	};set,the,dependency,check,code,param,dependency,check,the,code,to,set,must,be,one,of,the,four,constants,defined,in,this,class,see,see,see,see;public,void,set,dependency,check,int,dependency,check,this,dependency,check,dependency,check
AbstractBeanDefinition -> public void setDependencyCheck(int dependencyCheck);1465226156;Set the dependency check code._@param dependencyCheck the code to set._Must be one of the four constants defined in this class._@see #DEPENDENCY_CHECK_NONE_@see #DEPENDENCY_CHECK_OBJECTS_@see #DEPENDENCY_CHECK_SIMPLE_@see #DEPENDENCY_CHECK_ALL;public void setDependencyCheck(int dependencyCheck) {_		this.dependencyCheck = dependencyCheck__	};set,the,dependency,check,code,param,dependency,check,the,code,to,set,must,be,one,of,the,four,constants,defined,in,this,class,see,see,see,see;public,void,set,dependency,check,int,dependency,check,this,dependency,check,dependency,check
AbstractBeanDefinition -> public void setDependencyCheck(int dependencyCheck);1467730834;Set the dependency check code._@param dependencyCheck the code to set._Must be one of the four constants defined in this class._@see #DEPENDENCY_CHECK_NONE_@see #DEPENDENCY_CHECK_OBJECTS_@see #DEPENDENCY_CHECK_SIMPLE_@see #DEPENDENCY_CHECK_ALL;public void setDependencyCheck(int dependencyCheck) {_		this.dependencyCheck = dependencyCheck__	};set,the,dependency,check,code,param,dependency,check,the,code,to,set,must,be,one,of,the,four,constants,defined,in,this,class,see,see,see,see;public,void,set,dependency,check,int,dependency,check,this,dependency,check,dependency,check
AbstractBeanDefinition -> public void setDependencyCheck(int dependencyCheck);1467846264;Set the dependency check code._@param dependencyCheck the code to set._Must be one of the four constants defined in this class._@see #DEPENDENCY_CHECK_NONE_@see #DEPENDENCY_CHECK_OBJECTS_@see #DEPENDENCY_CHECK_SIMPLE_@see #DEPENDENCY_CHECK_ALL;public void setDependencyCheck(int dependencyCheck) {_		this.dependencyCheck = dependencyCheck__	};set,the,dependency,check,code,param,dependency,check,the,code,to,set,must,be,one,of,the,four,constants,defined,in,this,class,see,see,see,see;public,void,set,dependency,check,int,dependency,check,this,dependency,check,dependency,check
AbstractBeanDefinition -> public void setDependencyCheck(int dependencyCheck);1482091545;Set the dependency check code._@param dependencyCheck the code to set._Must be one of the four constants defined in this class._@see #DEPENDENCY_CHECK_NONE_@see #DEPENDENCY_CHECK_OBJECTS_@see #DEPENDENCY_CHECK_SIMPLE_@see #DEPENDENCY_CHECK_ALL;public void setDependencyCheck(int dependencyCheck) {_		this.dependencyCheck = dependencyCheck__	};set,the,dependency,check,code,param,dependency,check,the,code,to,set,must,be,one,of,the,four,constants,defined,in,this,class,see,see,see,see;public,void,set,dependency,check,int,dependency,check,this,dependency,check,dependency,check
AbstractBeanDefinition -> public void setDependencyCheck(int dependencyCheck);1483093818;Set the dependency check code._@param dependencyCheck the code to set._Must be one of the four constants defined in this class._@see #DEPENDENCY_CHECK_NONE_@see #DEPENDENCY_CHECK_OBJECTS_@see #DEPENDENCY_CHECK_SIMPLE_@see #DEPENDENCY_CHECK_ALL;public void setDependencyCheck(int dependencyCheck) {_		this.dependencyCheck = dependencyCheck__	};set,the,dependency,check,code,param,dependency,check,the,code,to,set,must,be,one,of,the,four,constants,defined,in,this,class,see,see,see,see;public,void,set,dependency,check,int,dependency,check,this,dependency,check,dependency,check
AbstractBeanDefinition -> public void setDependencyCheck(int dependencyCheck);1495868221;Set the dependency check code._@param dependencyCheck the code to set._Must be one of the four constants defined in this class._@see #DEPENDENCY_CHECK_NONE_@see #DEPENDENCY_CHECK_OBJECTS_@see #DEPENDENCY_CHECK_SIMPLE_@see #DEPENDENCY_CHECK_ALL;public void setDependencyCheck(int dependencyCheck) {_		this.dependencyCheck = dependencyCheck__	};set,the,dependency,check,code,param,dependency,check,the,code,to,set,must,be,one,of,the,four,constants,defined,in,this,class,see,see,see,see;public,void,set,dependency,check,int,dependency,check,this,dependency,check,dependency,check
AbstractBeanDefinition -> public void setDependencyCheck(int dependencyCheck);1496837955;Set the dependency check code._@param dependencyCheck the code to set._Must be one of the four constants defined in this class._@see #DEPENDENCY_CHECK_NONE_@see #DEPENDENCY_CHECK_OBJECTS_@see #DEPENDENCY_CHECK_SIMPLE_@see #DEPENDENCY_CHECK_ALL;public void setDependencyCheck(int dependencyCheck) {_		this.dependencyCheck = dependencyCheck__	};set,the,dependency,check,code,param,dependency,check,the,code,to,set,must,be,one,of,the,four,constants,defined,in,this,class,see,see,see,see;public,void,set,dependency,check,int,dependency,check,this,dependency,check,dependency,check
AbstractBeanDefinition -> public void setDependencyCheck(int dependencyCheck);1498780456;Set the dependency check code._@param dependencyCheck the code to set._Must be one of the four constants defined in this class._@see #DEPENDENCY_CHECK_NONE_@see #DEPENDENCY_CHECK_OBJECTS_@see #DEPENDENCY_CHECK_SIMPLE_@see #DEPENDENCY_CHECK_ALL;public void setDependencyCheck(int dependencyCheck) {_		this.dependencyCheck = dependencyCheck__	};set,the,dependency,check,code,param,dependency,check,the,code,to,set,must,be,one,of,the,four,constants,defined,in,this,class,see,see,see,see;public,void,set,dependency,check,int,dependency,check,this,dependency,check,dependency,check
AbstractBeanDefinition -> public void setDependencyCheck(int dependencyCheck);1502974979;Set the dependency check code._@param dependencyCheck the code to set._Must be one of the four constants defined in this class._@see #DEPENDENCY_CHECK_NONE_@see #DEPENDENCY_CHECK_OBJECTS_@see #DEPENDENCY_CHECK_SIMPLE_@see #DEPENDENCY_CHECK_ALL;public void setDependencyCheck(int dependencyCheck) {_		this.dependencyCheck = dependencyCheck__	};set,the,dependency,check,code,param,dependency,check,the,code,to,set,must,be,one,of,the,four,constants,defined,in,this,class,see,see,see,see;public,void,set,dependency,check,int,dependency,check,this,dependency,check,dependency,check
AbstractBeanDefinition -> public void setDependencyCheck(int dependencyCheck);1503008029;Set the dependency check code._@param dependencyCheck the code to set._Must be one of the four constants defined in this class._@see #DEPENDENCY_CHECK_NONE_@see #DEPENDENCY_CHECK_OBJECTS_@see #DEPENDENCY_CHECK_SIMPLE_@see #DEPENDENCY_CHECK_ALL;public void setDependencyCheck(int dependencyCheck) {_		this.dependencyCheck = dependencyCheck__	};set,the,dependency,check,code,param,dependency,check,the,code,to,set,must,be,one,of,the,four,constants,defined,in,this,class,see,see,see,see;public,void,set,dependency,check,int,dependency,check,this,dependency,check,dependency,check
AbstractBeanDefinition -> public void setDependencyCheck(int dependencyCheck);1510606271;Set the dependency check code._@param dependencyCheck the code to set._Must be one of the four constants defined in this class._@see #DEPENDENCY_CHECK_NONE_@see #DEPENDENCY_CHECK_OBJECTS_@see #DEPENDENCY_CHECK_SIMPLE_@see #DEPENDENCY_CHECK_ALL;public void setDependencyCheck(int dependencyCheck) {_		this.dependencyCheck = dependencyCheck__	};set,the,dependency,check,code,param,dependency,check,the,code,to,set,must,be,one,of,the,four,constants,defined,in,this,class,see,see,see,see;public,void,set,dependency,check,int,dependency,check,this,dependency,check,dependency,check
AbstractBeanDefinition -> public void setDependencyCheck(int dependencyCheck);1510675876;Set the dependency check code._@param dependencyCheck the code to set._Must be one of the four constants defined in this class._@see #DEPENDENCY_CHECK_NONE_@see #DEPENDENCY_CHECK_OBJECTS_@see #DEPENDENCY_CHECK_SIMPLE_@see #DEPENDENCY_CHECK_ALL;public void setDependencyCheck(int dependencyCheck) {_		this.dependencyCheck = dependencyCheck__	};set,the,dependency,check,code,param,dependency,check,the,code,to,set,must,be,one,of,the,four,constants,defined,in,this,class,see,see,see,see;public,void,set,dependency,check,int,dependency,check,this,dependency,check,dependency,check
AbstractBeanDefinition -> public void setDependencyCheck(int dependencyCheck);1530174524;Set the dependency check code._@param dependencyCheck the code to set._Must be one of the four constants defined in this class._@see #DEPENDENCY_CHECK_NONE_@see #DEPENDENCY_CHECK_OBJECTS_@see #DEPENDENCY_CHECK_SIMPLE_@see #DEPENDENCY_CHECK_ALL;public void setDependencyCheck(int dependencyCheck) {_		this.dependencyCheck = dependencyCheck__	};set,the,dependency,check,code,param,dependency,check,the,code,to,set,must,be,one,of,the,four,constants,defined,in,this,class,see,see,see,see;public,void,set,dependency,check,int,dependency,check,this,dependency,check,dependency,check
AbstractBeanDefinition -> public void setDependencyCheck(int dependencyCheck);1530174524;Set the dependency check code._@param dependencyCheck the code to set._Must be one of the four constants defined in this class._@see #DEPENDENCY_CHECK_NONE_@see #DEPENDENCY_CHECK_OBJECTS_@see #DEPENDENCY_CHECK_SIMPLE_@see #DEPENDENCY_CHECK_ALL;public void setDependencyCheck(int dependencyCheck) {_		this.dependencyCheck = dependencyCheck__	};set,the,dependency,check,code,param,dependency,check,the,code,to,set,must,be,one,of,the,four,constants,defined,in,this,class,see,see,see,see;public,void,set,dependency,check,int,dependency,check,this,dependency,check,dependency,check
AbstractBeanDefinition -> public void setDependencyCheck(int dependencyCheck);1530174524;Set the dependency check code._@param dependencyCheck the code to set._Must be one of the four constants defined in this class._@see #DEPENDENCY_CHECK_NONE_@see #DEPENDENCY_CHECK_OBJECTS_@see #DEPENDENCY_CHECK_SIMPLE_@see #DEPENDENCY_CHECK_ALL;public void setDependencyCheck(int dependencyCheck) {_		this.dependencyCheck = dependencyCheck__	};set,the,dependency,check,code,param,dependency,check,the,code,to,set,must,be,one,of,the,four,constants,defined,in,this,class,see,see,see,see;public,void,set,dependency,check,int,dependency,check,this,dependency,check,dependency,check
AbstractBeanDefinition -> public void setDependencyCheck(int dependencyCheck);1530190293;Set the dependency check code._@param dependencyCheck the code to set._Must be one of the four constants defined in this class._@see #DEPENDENCY_CHECK_NONE_@see #DEPENDENCY_CHECK_OBJECTS_@see #DEPENDENCY_CHECK_SIMPLE_@see #DEPENDENCY_CHECK_ALL;public void setDependencyCheck(int dependencyCheck) {_		this.dependencyCheck = dependencyCheck__	};set,the,dependency,check,code,param,dependency,check,the,code,to,set,must,be,one,of,the,four,constants,defined,in,this,class,see,see,see,see;public,void,set,dependency,check,int,dependency,check,this,dependency,check,dependency,check
AbstractBeanDefinition -> public void setDependencyCheck(int dependencyCheck);1532981251;Set the dependency check code._@param dependencyCheck the code to set._Must be one of the four constants defined in this class._@see #DEPENDENCY_CHECK_NONE_@see #DEPENDENCY_CHECK_OBJECTS_@see #DEPENDENCY_CHECK_SIMPLE_@see #DEPENDENCY_CHECK_ALL;public void setDependencyCheck(int dependencyCheck) {_		this.dependencyCheck = dependencyCheck__	};set,the,dependency,check,code,param,dependency,check,the,code,to,set,must,be,one,of,the,four,constants,defined,in,this,class,see,see,see,see;public,void,set,dependency,check,int,dependency,check,this,dependency,check,dependency,check
AbstractBeanDefinition -> public void setDependencyCheck(int dependencyCheck);1536863076;Set the dependency check code._@param dependencyCheck the code to set._Must be one of the four constants defined in this class._@see #DEPENDENCY_CHECK_NONE_@see #DEPENDENCY_CHECK_OBJECTS_@see #DEPENDENCY_CHECK_SIMPLE_@see #DEPENDENCY_CHECK_ALL;public void setDependencyCheck(int dependencyCheck) {_		this.dependencyCheck = dependencyCheck__	};set,the,dependency,check,code,param,dependency,check,the,code,to,set,must,be,one,of,the,four,constants,defined,in,this,class,see,see,see,see;public,void,set,dependency,check,int,dependency,check,this,dependency,check,dependency,check
AbstractBeanDefinition -> @Override 	@Nullable 	public BeanDefinition getOriginatingBeanDefinition();1502974979;Return the originating BeanDefinition, or {@code null} if none._Allows for retrieving the decorated bean definition, if any._<p>Note that this method returns the immediate originator. Iterate through the_originator chain to find the original BeanDefinition as defined by the user.;@Override_	@Nullable_	public BeanDefinition getOriginatingBeanDefinition() {_		return (this.resource instanceof BeanDefinitionResource ?_				((BeanDefinitionResource) this.resource).getBeanDefinition() : null)__	};return,the,originating,bean,definition,or,code,null,if,none,allows,for,retrieving,the,decorated,bean,definition,if,any,p,note,that,this,method,returns,the,immediate,originator,iterate,through,the,originator,chain,to,find,the,original,bean,definition,as,defined,by,the,user;override,nullable,public,bean,definition,get,originating,bean,definition,return,this,resource,instanceof,bean,definition,resource,bean,definition,resource,this,resource,get,bean,definition,null
AbstractBeanDefinition -> @Override 	@Nullable 	public BeanDefinition getOriginatingBeanDefinition();1503008029;Return the originating BeanDefinition, or {@code null} if none._Allows for retrieving the decorated bean definition, if any._<p>Note that this method returns the immediate originator. Iterate through the_originator chain to find the original BeanDefinition as defined by the user.;@Override_	@Nullable_	public BeanDefinition getOriginatingBeanDefinition() {_		return (this.resource instanceof BeanDefinitionResource ?_				((BeanDefinitionResource) this.resource).getBeanDefinition() : null)__	};return,the,originating,bean,definition,or,code,null,if,none,allows,for,retrieving,the,decorated,bean,definition,if,any,p,note,that,this,method,returns,the,immediate,originator,iterate,through,the,originator,chain,to,find,the,original,bean,definition,as,defined,by,the,user;override,nullable,public,bean,definition,get,originating,bean,definition,return,this,resource,instanceof,bean,definition,resource,bean,definition,resource,this,resource,get,bean,definition,null
AbstractBeanDefinition -> @Override 	@Nullable 	public BeanDefinition getOriginatingBeanDefinition();1510606271;Return the originating BeanDefinition, or {@code null} if none._Allows for retrieving the decorated bean definition, if any._<p>Note that this method returns the immediate originator. Iterate through the_originator chain to find the original BeanDefinition as defined by the user.;@Override_	@Nullable_	public BeanDefinition getOriginatingBeanDefinition() {_		return (this.resource instanceof BeanDefinitionResource ?_				((BeanDefinitionResource) this.resource).getBeanDefinition() : null)__	};return,the,originating,bean,definition,or,code,null,if,none,allows,for,retrieving,the,decorated,bean,definition,if,any,p,note,that,this,method,returns,the,immediate,originator,iterate,through,the,originator,chain,to,find,the,original,bean,definition,as,defined,by,the,user;override,nullable,public,bean,definition,get,originating,bean,definition,return,this,resource,instanceof,bean,definition,resource,bean,definition,resource,this,resource,get,bean,definition,null
AbstractBeanDefinition -> @Override 	@Nullable 	public BeanDefinition getOriginatingBeanDefinition();1510675876;Return the originating BeanDefinition, or {@code null} if none._Allows for retrieving the decorated bean definition, if any._<p>Note that this method returns the immediate originator. Iterate through the_originator chain to find the original BeanDefinition as defined by the user.;@Override_	@Nullable_	public BeanDefinition getOriginatingBeanDefinition() {_		return (this.resource instanceof BeanDefinitionResource ?_				((BeanDefinitionResource) this.resource).getBeanDefinition() : null)__	};return,the,originating,bean,definition,or,code,null,if,none,allows,for,retrieving,the,decorated,bean,definition,if,any,p,note,that,this,method,returns,the,immediate,originator,iterate,through,the,originator,chain,to,find,the,original,bean,definition,as,defined,by,the,user;override,nullable,public,bean,definition,get,originating,bean,definition,return,this,resource,instanceof,bean,definition,resource,bean,definition,resource,this,resource,get,bean,definition,null
AbstractBeanDefinition -> @Override 	@Nullable 	public BeanDefinition getOriginatingBeanDefinition();1530174524;Return the originating BeanDefinition, or {@code null} if none._Allows for retrieving the decorated bean definition, if any._<p>Note that this method returns the immediate originator. Iterate through the_originator chain to find the original BeanDefinition as defined by the user.;@Override_	@Nullable_	public BeanDefinition getOriginatingBeanDefinition() {_		return (this.resource instanceof BeanDefinitionResource ?_				((BeanDefinitionResource) this.resource).getBeanDefinition() : null)__	};return,the,originating,bean,definition,or,code,null,if,none,allows,for,retrieving,the,decorated,bean,definition,if,any,p,note,that,this,method,returns,the,immediate,originator,iterate,through,the,originator,chain,to,find,the,original,bean,definition,as,defined,by,the,user;override,nullable,public,bean,definition,get,originating,bean,definition,return,this,resource,instanceof,bean,definition,resource,bean,definition,resource,this,resource,get,bean,definition,null
AbstractBeanDefinition -> @Override 	@Nullable 	public BeanDefinition getOriginatingBeanDefinition();1530174524;Return the originating BeanDefinition, or {@code null} if none._Allows for retrieving the decorated bean definition, if any._<p>Note that this method returns the immediate originator. Iterate through the_originator chain to find the original BeanDefinition as defined by the user.;@Override_	@Nullable_	public BeanDefinition getOriginatingBeanDefinition() {_		return (this.resource instanceof BeanDefinitionResource ?_				((BeanDefinitionResource) this.resource).getBeanDefinition() : null)__	};return,the,originating,bean,definition,or,code,null,if,none,allows,for,retrieving,the,decorated,bean,definition,if,any,p,note,that,this,method,returns,the,immediate,originator,iterate,through,the,originator,chain,to,find,the,original,bean,definition,as,defined,by,the,user;override,nullable,public,bean,definition,get,originating,bean,definition,return,this,resource,instanceof,bean,definition,resource,bean,definition,resource,this,resource,get,bean,definition,null
AbstractBeanDefinition -> @Override 	@Nullable 	public BeanDefinition getOriginatingBeanDefinition();1530174524;Return the originating BeanDefinition, or {@code null} if none._Allows for retrieving the decorated bean definition, if any._<p>Note that this method returns the immediate originator. Iterate through the_originator chain to find the original BeanDefinition as defined by the user.;@Override_	@Nullable_	public BeanDefinition getOriginatingBeanDefinition() {_		return (this.resource instanceof BeanDefinitionResource ?_				((BeanDefinitionResource) this.resource).getBeanDefinition() : null)__	};return,the,originating,bean,definition,or,code,null,if,none,allows,for,retrieving,the,decorated,bean,definition,if,any,p,note,that,this,method,returns,the,immediate,originator,iterate,through,the,originator,chain,to,find,the,original,bean,definition,as,defined,by,the,user;override,nullable,public,bean,definition,get,originating,bean,definition,return,this,resource,instanceof,bean,definition,resource,bean,definition,resource,this,resource,get,bean,definition,null
AbstractBeanDefinition -> @Override 	@Nullable 	public BeanDefinition getOriginatingBeanDefinition();1530190293;Return the originating BeanDefinition, or {@code null} if none._Allows for retrieving the decorated bean definition, if any._<p>Note that this method returns the immediate originator. Iterate through the_originator chain to find the original BeanDefinition as defined by the user.;@Override_	@Nullable_	public BeanDefinition getOriginatingBeanDefinition() {_		return (this.resource instanceof BeanDefinitionResource ?_				((BeanDefinitionResource) this.resource).getBeanDefinition() : null)__	};return,the,originating,bean,definition,or,code,null,if,none,allows,for,retrieving,the,decorated,bean,definition,if,any,p,note,that,this,method,returns,the,immediate,originator,iterate,through,the,originator,chain,to,find,the,original,bean,definition,as,defined,by,the,user;override,nullable,public,bean,definition,get,originating,bean,definition,return,this,resource,instanceof,bean,definition,resource,bean,definition,resource,this,resource,get,bean,definition,null
AbstractBeanDefinition -> @Override 	@Nullable 	public BeanDefinition getOriginatingBeanDefinition();1532981251;Return the originating BeanDefinition, or {@code null} if none._Allows for retrieving the decorated bean definition, if any._<p>Note that this method returns the immediate originator. Iterate through the_originator chain to find the original BeanDefinition as defined by the user.;@Override_	@Nullable_	public BeanDefinition getOriginatingBeanDefinition() {_		return (this.resource instanceof BeanDefinitionResource ?_				((BeanDefinitionResource) this.resource).getBeanDefinition() : null)__	};return,the,originating,bean,definition,or,code,null,if,none,allows,for,retrieving,the,decorated,bean,definition,if,any,p,note,that,this,method,returns,the,immediate,originator,iterate,through,the,originator,chain,to,find,the,original,bean,definition,as,defined,by,the,user;override,nullable,public,bean,definition,get,originating,bean,definition,return,this,resource,instanceof,bean,definition,resource,bean,definition,resource,this,resource,get,bean,definition,null
AbstractBeanDefinition -> @Override 	@Nullable 	public BeanDefinition getOriginatingBeanDefinition();1536863076;Return the originating BeanDefinition, or {@code null} if none._Allows for retrieving the decorated bean definition, if any._<p>Note that this method returns the immediate originator. Iterate through the_originator chain to find the original BeanDefinition as defined by the user.;@Override_	@Nullable_	public BeanDefinition getOriginatingBeanDefinition() {_		return (this.resource instanceof BeanDefinitionResource ?_				((BeanDefinitionResource) this.resource).getBeanDefinition() : null)__	};return,the,originating,bean,definition,or,code,null,if,none,allows,for,retrieving,the,decorated,bean,definition,if,any,p,note,that,this,method,returns,the,immediate,originator,iterate,through,the,originator,chain,to,find,the,original,bean,definition,as,defined,by,the,user;override,nullable,public,bean,definition,get,originating,bean,definition,return,this,resource,instanceof,bean,definition,resource,bean,definition,resource,this,resource,get,bean,definition,null
AbstractBeanDefinition -> public void setPropertyValues(MutablePropertyValues propertyValues);1328020251;Specify property values for this bean, if any.;public void setPropertyValues(MutablePropertyValues propertyValues) {_		this.propertyValues = (propertyValues != null ? propertyValues : new MutablePropertyValues())__	};specify,property,values,for,this,bean,if,any;public,void,set,property,values,mutable,property,values,property,values,this,property,values,property,values,null,property,values,new,mutable,property,values
AbstractBeanDefinition -> public void setPropertyValues(MutablePropertyValues propertyValues);1337202589;Specify property values for this bean, if any.;public void setPropertyValues(MutablePropertyValues propertyValues) {_		this.propertyValues = (propertyValues != null ? propertyValues : new MutablePropertyValues())__	};specify,property,values,for,this,bean,if,any;public,void,set,property,values,mutable,property,values,property,values,this,property,values,property,values,null,property,values,new,mutable,property,values
AbstractBeanDefinition -> public void setPropertyValues(MutablePropertyValues propertyValues);1356735495;Specify property values for this bean, if any.;public void setPropertyValues(MutablePropertyValues propertyValues) {_		this.propertyValues = (propertyValues != null ? propertyValues : new MutablePropertyValues())__	};specify,property,values,for,this,bean,if,any;public,void,set,property,values,mutable,property,values,property,values,this,property,values,property,values,null,property,values,new,mutable,property,values
AbstractBeanDefinition -> public void setPropertyValues(MutablePropertyValues propertyValues);1357119239;Specify property values for this bean, if any.;public void setPropertyValues(MutablePropertyValues propertyValues) {_		this.propertyValues = (propertyValues != null ? propertyValues : new MutablePropertyValues())__	};specify,property,values,for,this,bean,if,any;public,void,set,property,values,mutable,property,values,property,values,this,property,values,property,values,null,property,values,new,mutable,property,values
AbstractBeanDefinition -> public void setPropertyValues(MutablePropertyValues propertyValues);1367508310;Specify property values for this bean, if any.;public void setPropertyValues(MutablePropertyValues propertyValues) {_		this.propertyValues = (propertyValues != null ? propertyValues : new MutablePropertyValues())__	};specify,property,values,for,this,bean,if,any;public,void,set,property,values,mutable,property,values,property,values,this,property,values,property,values,null,property,values,new,mutable,property,values
AbstractBeanDefinition -> public void setPropertyValues(MutablePropertyValues propertyValues);1367943112;Specify property values for this bean, if any.;public void setPropertyValues(MutablePropertyValues propertyValues) {_		this.propertyValues = (propertyValues != null ? propertyValues : new MutablePropertyValues())__	};specify,property,values,for,this,bean,if,any;public,void,set,property,values,mutable,property,values,property,values,this,property,values,property,values,null,property,values,new,mutable,property,values
AbstractBeanDefinition -> public void setPropertyValues(MutablePropertyValues propertyValues);1368482696;Specify property values for this bean, if any.;public void setPropertyValues(MutablePropertyValues propertyValues) {_		this.propertyValues = (propertyValues != null ? propertyValues : new MutablePropertyValues())__	};specify,property,values,for,this,bean,if,any;public,void,set,property,values,mutable,property,values,property,values,this,property,values,property,values,null,property,values,new,mutable,property,values
AbstractBeanDefinition -> public void setPropertyValues(MutablePropertyValues propertyValues);1385412762;Specify property values for this bean, if any.;public void setPropertyValues(MutablePropertyValues propertyValues) {_		this.propertyValues = (propertyValues != null ? propertyValues : new MutablePropertyValues())__	};specify,property,values,for,this,bean,if,any;public,void,set,property,values,mutable,property,values,property,values,this,property,values,property,values,null,property,values,new,mutable,property,values
AbstractBeanDefinition -> public void setPropertyValues(MutablePropertyValues propertyValues);1392245317;Specify property values for this bean, if any.;public void setPropertyValues(MutablePropertyValues propertyValues) {_		this.propertyValues = (propertyValues != null ? propertyValues : new MutablePropertyValues())__	};specify,property,values,for,this,bean,if,any;public,void,set,property,values,mutable,property,values,property,values,this,property,values,property,values,null,property,values,new,mutable,property,values
AbstractBeanDefinition -> public void setPropertyValues(MutablePropertyValues propertyValues);1397163142;Specify property values for this bean, if any.;public void setPropertyValues(MutablePropertyValues propertyValues) {_		this.propertyValues = (propertyValues != null ? propertyValues : new MutablePropertyValues())__	};specify,property,values,for,this,bean,if,any;public,void,set,property,values,mutable,property,values,property,values,this,property,values,property,values,null,property,values,new,mutable,property,values
AbstractBeanDefinition -> public void setPropertyValues(MutablePropertyValues propertyValues);1398898390;Specify property values for this bean, if any.;public void setPropertyValues(MutablePropertyValues propertyValues) {_		this.propertyValues = (propertyValues != null ? propertyValues : new MutablePropertyValues())__	};specify,property,values,for,this,bean,if,any;public,void,set,property,values,mutable,property,values,property,values,this,property,values,property,values,null,property,values,new,mutable,property,values
AbstractBeanDefinition -> public void setPropertyValues(MutablePropertyValues propertyValues);1407511029;Specify property values for this bean, if any.;public void setPropertyValues(MutablePropertyValues propertyValues) {_		this.propertyValues = (propertyValues != null ? propertyValues : new MutablePropertyValues())__	};specify,property,values,for,this,bean,if,any;public,void,set,property,values,mutable,property,values,property,values,this,property,values,property,values,null,property,values,new,mutable,property,values
AbstractBeanDefinition -> public void setPropertyValues(MutablePropertyValues propertyValues);1432135182;Specify property values for this bean, if any.;public void setPropertyValues(MutablePropertyValues propertyValues) {_		this.propertyValues = (propertyValues != null ? propertyValues : new MutablePropertyValues())__	};specify,property,values,for,this,bean,if,any;public,void,set,property,values,mutable,property,values,property,values,this,property,values,property,values,null,property,values,new,mutable,property,values
AbstractBeanDefinition -> public void setPropertyValues(MutablePropertyValues propertyValues);1434204509;Specify property values for this bean, if any.;public void setPropertyValues(MutablePropertyValues propertyValues) {_		this.propertyValues = (propertyValues != null ? propertyValues : new MutablePropertyValues())__	};specify,property,values,for,this,bean,if,any;public,void,set,property,values,mutable,property,values,property,values,this,property,values,property,values,null,property,values,new,mutable,property,values
AbstractBeanDefinition -> public void setPropertyValues(MutablePropertyValues propertyValues);1447323728;Specify property values for this bean, if any.;public void setPropertyValues(MutablePropertyValues propertyValues) {_		this.propertyValues = (propertyValues != null ? propertyValues : new MutablePropertyValues())__	};specify,property,values,for,this,bean,if,any;public,void,set,property,values,mutable,property,values,property,values,this,property,values,property,values,null,property,values,new,mutable,property,values
AbstractBeanDefinition -> public void setPropertyValues(MutablePropertyValues propertyValues);1465226156;Specify property values for this bean, if any.;public void setPropertyValues(MutablePropertyValues propertyValues) {_		this.propertyValues = (propertyValues != null ? propertyValues : new MutablePropertyValues())__	};specify,property,values,for,this,bean,if,any;public,void,set,property,values,mutable,property,values,property,values,this,property,values,property,values,null,property,values,new,mutable,property,values
AbstractBeanDefinition -> public void setPropertyValues(MutablePropertyValues propertyValues);1467730834;Specify property values for this bean, if any.;public void setPropertyValues(MutablePropertyValues propertyValues) {_		this.propertyValues = (propertyValues != null ? propertyValues : new MutablePropertyValues())__	};specify,property,values,for,this,bean,if,any;public,void,set,property,values,mutable,property,values,property,values,this,property,values,property,values,null,property,values,new,mutable,property,values
AbstractBeanDefinition -> public void setPropertyValues(MutablePropertyValues propertyValues);1467846264;Specify property values for this bean, if any.;public void setPropertyValues(MutablePropertyValues propertyValues) {_		this.propertyValues = (propertyValues != null ? propertyValues : new MutablePropertyValues())__	};specify,property,values,for,this,bean,if,any;public,void,set,property,values,mutable,property,values,property,values,this,property,values,property,values,null,property,values,new,mutable,property,values
AbstractBeanDefinition -> public void setPropertyValues(MutablePropertyValues propertyValues);1482091545;Specify property values for this bean, if any.;public void setPropertyValues(MutablePropertyValues propertyValues) {_		this.propertyValues = (propertyValues != null ? propertyValues : new MutablePropertyValues())__	};specify,property,values,for,this,bean,if,any;public,void,set,property,values,mutable,property,values,property,values,this,property,values,property,values,null,property,values,new,mutable,property,values
AbstractBeanDefinition -> public void setPropertyValues(MutablePropertyValues propertyValues);1483093818;Specify property values for this bean, if any.;public void setPropertyValues(MutablePropertyValues propertyValues) {_		this.propertyValues = (propertyValues != null ? propertyValues : new MutablePropertyValues())__	};specify,property,values,for,this,bean,if,any;public,void,set,property,values,mutable,property,values,property,values,this,property,values,property,values,null,property,values,new,mutable,property,values
AbstractBeanDefinition -> public void setPropertyValues(MutablePropertyValues propertyValues);1495868221;Specify property values for this bean, if any.;public void setPropertyValues(MutablePropertyValues propertyValues) {_		this.propertyValues = (propertyValues != null ? propertyValues : new MutablePropertyValues())__	};specify,property,values,for,this,bean,if,any;public,void,set,property,values,mutable,property,values,property,values,this,property,values,property,values,null,property,values,new,mutable,property,values
AbstractBeanDefinition -> public void setPropertyValues(MutablePropertyValues propertyValues);1510606271;Specify property values for this bean, if any.;public void setPropertyValues(MutablePropertyValues propertyValues) {_		this.propertyValues = propertyValues__	};specify,property,values,for,this,bean,if,any;public,void,set,property,values,mutable,property,values,property,values,this,property,values,property,values
AbstractBeanDefinition -> public void setPropertyValues(MutablePropertyValues propertyValues);1510675876;Specify property values for this bean, if any.;public void setPropertyValues(MutablePropertyValues propertyValues) {_		this.propertyValues = propertyValues__	};specify,property,values,for,this,bean,if,any;public,void,set,property,values,mutable,property,values,property,values,this,property,values,property,values
AbstractBeanDefinition -> public void setPropertyValues(MutablePropertyValues propertyValues);1530174524;Specify property values for this bean, if any.;public void setPropertyValues(MutablePropertyValues propertyValues) {_		this.propertyValues = propertyValues__	};specify,property,values,for,this,bean,if,any;public,void,set,property,values,mutable,property,values,property,values,this,property,values,property,values
AbstractBeanDefinition -> public void setPropertyValues(MutablePropertyValues propertyValues);1530174524;Specify property values for this bean, if any.;public void setPropertyValues(MutablePropertyValues propertyValues) {_		this.propertyValues = propertyValues__	};specify,property,values,for,this,bean,if,any;public,void,set,property,values,mutable,property,values,property,values,this,property,values,property,values
AbstractBeanDefinition -> public void setPropertyValues(MutablePropertyValues propertyValues);1530174524;Specify property values for this bean, if any.;public void setPropertyValues(MutablePropertyValues propertyValues) {_		this.propertyValues = propertyValues__	};specify,property,values,for,this,bean,if,any;public,void,set,property,values,mutable,property,values,property,values,this,property,values,property,values
AbstractBeanDefinition -> public void setPropertyValues(MutablePropertyValues propertyValues);1530190293;Specify property values for this bean, if any.;public void setPropertyValues(MutablePropertyValues propertyValues) {_		this.propertyValues = propertyValues__	};specify,property,values,for,this,bean,if,any;public,void,set,property,values,mutable,property,values,property,values,this,property,values,property,values
AbstractBeanDefinition -> public void setPropertyValues(MutablePropertyValues propertyValues);1532981251;Specify property values for this bean, if any.;public void setPropertyValues(MutablePropertyValues propertyValues) {_		this.propertyValues = propertyValues__	};specify,property,values,for,this,bean,if,any;public,void,set,property,values,mutable,property,values,property,values,this,property,values,property,values
AbstractBeanDefinition -> public void setPropertyValues(MutablePropertyValues propertyValues);1536863076;Specify property values for this bean, if any.;public void setPropertyValues(MutablePropertyValues propertyValues) {_		this.propertyValues = propertyValues__	};specify,property,values,for,this,bean,if,any;public,void,set,property,values,mutable,property,values,property,values,this,property,values,property,values
AbstractBeanDefinition -> @Override 	public MutablePropertyValues getPropertyValues();1356735495;Return property values for this bean (never {@code null}).;@Override_	public MutablePropertyValues getPropertyValues() {_		return this.propertyValues__	};return,property,values,for,this,bean,never,code,null;override,public,mutable,property,values,get,property,values,return,this,property,values
AbstractBeanDefinition -> @Override 	public MutablePropertyValues getPropertyValues();1368482696;Return property values for this bean (never {@code null}).;@Override_	public MutablePropertyValues getPropertyValues() {_		return this.propertyValues__	};return,property,values,for,this,bean,never,code,null;override,public,mutable,property,values,get,property,values,return,this,property,values
AbstractBeanDefinition -> @Override 	public MutablePropertyValues getPropertyValues();1385412762;Return property values for this bean (never {@code null}).;@Override_	public MutablePropertyValues getPropertyValues() {_		return this.propertyValues__	};return,property,values,for,this,bean,never,code,null;override,public,mutable,property,values,get,property,values,return,this,property,values
AbstractBeanDefinition -> @Override 	public MutablePropertyValues getPropertyValues();1392245317;Return property values for this bean (never {@code null}).;@Override_	public MutablePropertyValues getPropertyValues() {_		return this.propertyValues__	};return,property,values,for,this,bean,never,code,null;override,public,mutable,property,values,get,property,values,return,this,property,values
AbstractBeanDefinition -> @Override 	public MutablePropertyValues getPropertyValues();1397163142;Return property values for this bean (never {@code null}).;@Override_	public MutablePropertyValues getPropertyValues() {_		return this.propertyValues__	};return,property,values,for,this,bean,never,code,null;override,public,mutable,property,values,get,property,values,return,this,property,values
AbstractBeanDefinition -> @Override 	public MutablePropertyValues getPropertyValues();1398898390;Return property values for this bean (never {@code null}).;@Override_	public MutablePropertyValues getPropertyValues() {_		return this.propertyValues__	};return,property,values,for,this,bean,never,code,null;override,public,mutable,property,values,get,property,values,return,this,property,values
AbstractBeanDefinition -> @Override 	public MutablePropertyValues getPropertyValues();1407511029;Return property values for this bean (never {@code null}).;@Override_	public MutablePropertyValues getPropertyValues() {_		return this.propertyValues__	};return,property,values,for,this,bean,never,code,null;override,public,mutable,property,values,get,property,values,return,this,property,values
AbstractBeanDefinition -> @Override 	public MutablePropertyValues getPropertyValues();1432135182;Return property values for this bean (never {@code null}).;@Override_	public MutablePropertyValues getPropertyValues() {_		return this.propertyValues__	};return,property,values,for,this,bean,never,code,null;override,public,mutable,property,values,get,property,values,return,this,property,values
AbstractBeanDefinition -> @Override 	public MutablePropertyValues getPropertyValues();1434204509;Return property values for this bean (never {@code null}).;@Override_	public MutablePropertyValues getPropertyValues() {_		return this.propertyValues__	};return,property,values,for,this,bean,never,code,null;override,public,mutable,property,values,get,property,values,return,this,property,values
AbstractBeanDefinition -> @Override 	public MutablePropertyValues getPropertyValues();1447323728;Return property values for this bean (never {@code null}).;@Override_	public MutablePropertyValues getPropertyValues() {_		return this.propertyValues__	};return,property,values,for,this,bean,never,code,null;override,public,mutable,property,values,get,property,values,return,this,property,values
AbstractBeanDefinition -> @Override 	public MutablePropertyValues getPropertyValues();1465226156;Return property values for this bean (never {@code null}).;@Override_	public MutablePropertyValues getPropertyValues() {_		return this.propertyValues__	};return,property,values,for,this,bean,never,code,null;override,public,mutable,property,values,get,property,values,return,this,property,values
AbstractBeanDefinition -> @Override 	public MutablePropertyValues getPropertyValues();1467730834;Return property values for this bean (never {@code null}).;@Override_	public MutablePropertyValues getPropertyValues() {_		return this.propertyValues__	};return,property,values,for,this,bean,never,code,null;override,public,mutable,property,values,get,property,values,return,this,property,values
AbstractBeanDefinition -> @Override 	public MutablePropertyValues getPropertyValues();1467846264;Return property values for this bean (never {@code null}).;@Override_	public MutablePropertyValues getPropertyValues() {_		return this.propertyValues__	};return,property,values,for,this,bean,never,code,null;override,public,mutable,property,values,get,property,values,return,this,property,values
AbstractBeanDefinition -> @Override 	public MutablePropertyValues getPropertyValues();1482091545;Return property values for this bean (never {@code null}).;@Override_	public MutablePropertyValues getPropertyValues() {_		return this.propertyValues__	};return,property,values,for,this,bean,never,code,null;override,public,mutable,property,values,get,property,values,return,this,property,values
AbstractBeanDefinition -> @Override 	public MutablePropertyValues getPropertyValues();1483093818;Return property values for this bean (never {@code null}).;@Override_	public MutablePropertyValues getPropertyValues() {_		return this.propertyValues__	};return,property,values,for,this,bean,never,code,null;override,public,mutable,property,values,get,property,values,return,this,property,values
AbstractBeanDefinition -> @Override 	public MutablePropertyValues getPropertyValues();1495868221;Return property values for this bean (never {@code null}).;@Override_	public MutablePropertyValues getPropertyValues() {_		return this.propertyValues__	};return,property,values,for,this,bean,never,code,null;override,public,mutable,property,values,get,property,values,return,this,property,values
AbstractBeanDefinition -> @Override 	public MutablePropertyValues getPropertyValues();1496837955;Return property values for this bean (never {@code null}).;@Override_	public MutablePropertyValues getPropertyValues() {_		return this.propertyValues__	};return,property,values,for,this,bean,never,code,null;override,public,mutable,property,values,get,property,values,return,this,property,values
AbstractBeanDefinition -> @Override 	public MutablePropertyValues getPropertyValues();1498780456;Return property values for this bean (never {@code null}).;@Override_	public MutablePropertyValues getPropertyValues() {_		return this.propertyValues__	};return,property,values,for,this,bean,never,code,null;override,public,mutable,property,values,get,property,values,return,this,property,values
AbstractBeanDefinition -> @Override 	public MutablePropertyValues getPropertyValues();1502974979;Return property values for this bean (never {@code null}).;@Override_	public MutablePropertyValues getPropertyValues() {_		return this.propertyValues__	};return,property,values,for,this,bean,never,code,null;override,public,mutable,property,values,get,property,values,return,this,property,values
AbstractBeanDefinition -> @Override 	public MutablePropertyValues getPropertyValues();1503008029;Return property values for this bean (never {@code null}).;@Override_	public MutablePropertyValues getPropertyValues() {_		return this.propertyValues__	};return,property,values,for,this,bean,never,code,null;override,public,mutable,property,values,get,property,values,return,this,property,values
AbstractBeanDefinition -> @Override 	public MutablePropertyValues getPropertyValues();1510606271;Return property values for this bean (never {@code null}).;@Override_	public MutablePropertyValues getPropertyValues() {_		if (this.propertyValues == null) {_			this.propertyValues = new MutablePropertyValues()__		}_		return this.propertyValues__	};return,property,values,for,this,bean,never,code,null;override,public,mutable,property,values,get,property,values,if,this,property,values,null,this,property,values,new,mutable,property,values,return,this,property,values
AbstractBeanDefinition -> @Override 	public MutablePropertyValues getPropertyValues();1510675876;Return property values for this bean (never {@code null}).;@Override_	public MutablePropertyValues getPropertyValues() {_		if (this.propertyValues == null) {_			this.propertyValues = new MutablePropertyValues()__		}_		return this.propertyValues__	};return,property,values,for,this,bean,never,code,null;override,public,mutable,property,values,get,property,values,if,this,property,values,null,this,property,values,new,mutable,property,values,return,this,property,values
AbstractBeanDefinition -> @Override 	public MutablePropertyValues getPropertyValues();1530174524;Return property values for this bean (never {@code null}).;@Override_	public MutablePropertyValues getPropertyValues() {_		if (this.propertyValues == null) {_			this.propertyValues = new MutablePropertyValues()__		}_		return this.propertyValues__	};return,property,values,for,this,bean,never,code,null;override,public,mutable,property,values,get,property,values,if,this,property,values,null,this,property,values,new,mutable,property,values,return,this,property,values
AbstractBeanDefinition -> @Override 	public MutablePropertyValues getPropertyValues();1530174524;Return property values for this bean (never {@code null}).;@Override_	public MutablePropertyValues getPropertyValues() {_		if (this.propertyValues == null) {_			this.propertyValues = new MutablePropertyValues()__		}_		return this.propertyValues__	};return,property,values,for,this,bean,never,code,null;override,public,mutable,property,values,get,property,values,if,this,property,values,null,this,property,values,new,mutable,property,values,return,this,property,values
AbstractBeanDefinition -> @Override 	public MutablePropertyValues getPropertyValues();1530174524;Return property values for this bean (never {@code null}).;@Override_	public MutablePropertyValues getPropertyValues() {_		if (this.propertyValues == null) {_			this.propertyValues = new MutablePropertyValues()__		}_		return this.propertyValues__	};return,property,values,for,this,bean,never,code,null;override,public,mutable,property,values,get,property,values,if,this,property,values,null,this,property,values,new,mutable,property,values,return,this,property,values
AbstractBeanDefinition -> @Override 	public MutablePropertyValues getPropertyValues();1530190293;Return property values for this bean (never {@code null}).;@Override_	public MutablePropertyValues getPropertyValues() {_		if (this.propertyValues == null) {_			this.propertyValues = new MutablePropertyValues()__		}_		return this.propertyValues__	};return,property,values,for,this,bean,never,code,null;override,public,mutable,property,values,get,property,values,if,this,property,values,null,this,property,values,new,mutable,property,values,return,this,property,values
AbstractBeanDefinition -> @Override 	public MutablePropertyValues getPropertyValues();1532981251;Return property values for this bean (never {@code null}).;@Override_	public MutablePropertyValues getPropertyValues() {_		if (this.propertyValues == null) {_			this.propertyValues = new MutablePropertyValues()__		}_		return this.propertyValues__	};return,property,values,for,this,bean,never,code,null;override,public,mutable,property,values,get,property,values,if,this,property,values,null,this,property,values,new,mutable,property,values,return,this,property,values
AbstractBeanDefinition -> @Override 	public MutablePropertyValues getPropertyValues();1536863076;Return property values for this bean (never {@code null}).;@Override_	public MutablePropertyValues getPropertyValues() {_		if (this.propertyValues == null) {_			this.propertyValues = new MutablePropertyValues()__		}_		return this.propertyValues__	};return,property,values,for,this,bean,never,code,null;override,public,mutable,property,values,get,property,values,if,this,property,values,null,this,property,values,new,mutable,property,values,return,this,property,values
AbstractBeanDefinition -> @Override 	public boolean hasConstructorArgumentValues();1510675876;Return if there are constructor argument values defined for this bean.;@Override_	public boolean hasConstructorArgumentValues() {_		return (this.constructorArgumentValues != null && !this.constructorArgumentValues.isEmpty())__	};return,if,there,are,constructor,argument,values,defined,for,this,bean;override,public,boolean,has,constructor,argument,values,return,this,constructor,argument,values,null,this,constructor,argument,values,is,empty
AbstractBeanDefinition -> @Override 	public boolean hasConstructorArgumentValues();1530174524;Return if there are constructor argument values defined for this bean.;@Override_	public boolean hasConstructorArgumentValues() {_		return (this.constructorArgumentValues != null && !this.constructorArgumentValues.isEmpty())__	};return,if,there,are,constructor,argument,values,defined,for,this,bean;override,public,boolean,has,constructor,argument,values,return,this,constructor,argument,values,null,this,constructor,argument,values,is,empty
AbstractBeanDefinition -> @Override 	public boolean hasConstructorArgumentValues();1530174524;Return if there are constructor argument values defined for this bean.;@Override_	public boolean hasConstructorArgumentValues() {_		return (this.constructorArgumentValues != null && !this.constructorArgumentValues.isEmpty())__	};return,if,there,are,constructor,argument,values,defined,for,this,bean;override,public,boolean,has,constructor,argument,values,return,this,constructor,argument,values,null,this,constructor,argument,values,is,empty
AbstractBeanDefinition -> @Override 	public boolean hasConstructorArgumentValues();1530174524;Return if there are constructor argument values defined for this bean.;@Override_	public boolean hasConstructorArgumentValues() {_		return (this.constructorArgumentValues != null && !this.constructorArgumentValues.isEmpty())__	};return,if,there,are,constructor,argument,values,defined,for,this,bean;override,public,boolean,has,constructor,argument,values,return,this,constructor,argument,values,null,this,constructor,argument,values,is,empty
AbstractBeanDefinition -> @Override 	public boolean hasConstructorArgumentValues();1530190293;Return if there are constructor argument values defined for this bean.;@Override_	public boolean hasConstructorArgumentValues() {_		return (this.constructorArgumentValues != null && !this.constructorArgumentValues.isEmpty())__	};return,if,there,are,constructor,argument,values,defined,for,this,bean;override,public,boolean,has,constructor,argument,values,return,this,constructor,argument,values,null,this,constructor,argument,values,is,empty
AbstractBeanDefinition -> @Override 	public boolean hasConstructorArgumentValues();1532981251;Return if there are constructor argument values defined for this bean.;@Override_	public boolean hasConstructorArgumentValues() {_		return (this.constructorArgumentValues != null && !this.constructorArgumentValues.isEmpty())__	};return,if,there,are,constructor,argument,values,defined,for,this,bean;override,public,boolean,has,constructor,argument,values,return,this,constructor,argument,values,null,this,constructor,argument,values,is,empty
AbstractBeanDefinition -> @Override 	public boolean hasConstructorArgumentValues();1536863076;Return if there are constructor argument values defined for this bean.;@Override_	public boolean hasConstructorArgumentValues() {_		return (this.constructorArgumentValues != null && !this.constructorArgumentValues.isEmpty())__	};return,if,there,are,constructor,argument,values,defined,for,this,bean;override,public,boolean,has,constructor,argument,values,return,this,constructor,argument,values,null,this,constructor,argument,values,is,empty
AbstractBeanDefinition -> public void setDescription(@Nullable String description);1496837955;Set a human-readable description of this bean definition.;public void setDescription(@Nullable String description) {_		this.description = description__	};set,a,human,readable,description,of,this,bean,definition;public,void,set,description,nullable,string,description,this,description,description
AbstractBeanDefinition -> public void setDescription(@Nullable String description);1498780456;Set a human-readable description of this bean definition.;public void setDescription(@Nullable String description) {_		this.description = description__	};set,a,human,readable,description,of,this,bean,definition;public,void,set,description,nullable,string,description,this,description,description
AbstractBeanDefinition -> public void setDescription(@Nullable String description);1502974979;Set a human-readable description of this bean definition.;public void setDescription(@Nullable String description) {_		this.description = description__	};set,a,human,readable,description,of,this,bean,definition;public,void,set,description,nullable,string,description,this,description,description
AbstractBeanDefinition -> public void setDescription(@Nullable String description);1503008029;Set a human-readable description of this bean definition.;public void setDescription(@Nullable String description) {_		this.description = description__	};set,a,human,readable,description,of,this,bean,definition;public,void,set,description,nullable,string,description,this,description,description
AbstractBeanDefinition -> public void setDescription(@Nullable String description);1510606271;Set a human-readable description of this bean definition.;public void setDescription(@Nullable String description) {_		this.description = description__	};set,a,human,readable,description,of,this,bean,definition;public,void,set,description,nullable,string,description,this,description,description
AbstractBeanDefinition -> public void setDescription(@Nullable String description);1510675876;Set a human-readable description of this bean definition.;public void setDescription(@Nullable String description) {_		this.description = description__	};set,a,human,readable,description,of,this,bean,definition;public,void,set,description,nullable,string,description,this,description,description
AbstractBeanDefinition -> public void setDescription(@Nullable String description);1530174524;Set a human-readable description of this bean definition.;public void setDescription(@Nullable String description) {_		this.description = description__	};set,a,human,readable,description,of,this,bean,definition;public,void,set,description,nullable,string,description,this,description,description
AbstractBeanDefinition -> public void setDescription(@Nullable String description);1530174524;Set a human-readable description of this bean definition.;public void setDescription(@Nullable String description) {_		this.description = description__	};set,a,human,readable,description,of,this,bean,definition;public,void,set,description,nullable,string,description,this,description,description
AbstractBeanDefinition -> public void setDescription(@Nullable String description);1530174524;Set a human-readable description of this bean definition.;public void setDescription(@Nullable String description) {_		this.description = description__	};set,a,human,readable,description,of,this,bean,definition;public,void,set,description,nullable,string,description,this,description,description
AbstractBeanDefinition -> public void setDescription(@Nullable String description);1530190293;Set a human-readable description of this bean definition.;public void setDescription(@Nullable String description) {_		this.description = description__	};set,a,human,readable,description,of,this,bean,definition;public,void,set,description,nullable,string,description,this,description,description
AbstractBeanDefinition -> public void setDescription(@Nullable String description);1532981251;Set a human-readable description of this bean definition.;public void setDescription(@Nullable String description) {_		this.description = description__	};set,a,human,readable,description,of,this,bean,definition;public,void,set,description,nullable,string,description,this,description,description
AbstractBeanDefinition -> public MethodOverrides getMethodOverrides();1328020251;Return information about methods to be overridden by the IoC_container. This will be empty if there are no method overrides._Never returns null.;public MethodOverrides getMethodOverrides() {_		return this.methodOverrides__	};return,information,about,methods,to,be,overridden,by,the,io,c,container,this,will,be,empty,if,there,are,no,method,overrides,never,returns,null;public,method,overrides,get,method,overrides,return,this,method,overrides
AbstractBeanDefinition -> public MethodOverrides getMethodOverrides();1337202589;Return information about methods to be overridden by the IoC_container. This will be empty if there are no method overrides._Never returns null.;public MethodOverrides getMethodOverrides() {_		return this.methodOverrides__	};return,information,about,methods,to,be,overridden,by,the,io,c,container,this,will,be,empty,if,there,are,no,method,overrides,never,returns,null;public,method,overrides,get,method,overrides,return,this,method,overrides
AbstractBeanDefinition -> public MethodOverrides getMethodOverrides();1356735495;Return information about methods to be overridden by the IoC_container. This will be empty if there are no method overrides._Never returns null.;public MethodOverrides getMethodOverrides() {_		return this.methodOverrides__	};return,information,about,methods,to,be,overridden,by,the,io,c,container,this,will,be,empty,if,there,are,no,method,overrides,never,returns,null;public,method,overrides,get,method,overrides,return,this,method,overrides
AbstractBeanDefinition -> public MethodOverrides getMethodOverrides();1357119239;Return information about methods to be overridden by the IoC_container. This will be empty if there are no method overrides._Never returns null.;public MethodOverrides getMethodOverrides() {_		return this.methodOverrides__	};return,information,about,methods,to,be,overridden,by,the,io,c,container,this,will,be,empty,if,there,are,no,method,overrides,never,returns,null;public,method,overrides,get,method,overrides,return,this,method,overrides
AbstractBeanDefinition -> public MethodOverrides getMethodOverrides();1367508310;Return information about methods to be overridden by the IoC_container. This will be empty if there are no method overrides._Never returns null.;public MethodOverrides getMethodOverrides() {_		return this.methodOverrides__	};return,information,about,methods,to,be,overridden,by,the,io,c,container,this,will,be,empty,if,there,are,no,method,overrides,never,returns,null;public,method,overrides,get,method,overrides,return,this,method,overrides
AbstractBeanDefinition -> public MethodOverrides getMethodOverrides();1367943112;Return information about methods to be overridden by the IoC_container. This will be empty if there are no method overrides._Never returns null.;public MethodOverrides getMethodOverrides() {_		return this.methodOverrides__	};return,information,about,methods,to,be,overridden,by,the,io,c,container,this,will,be,empty,if,there,are,no,method,overrides,never,returns,null;public,method,overrides,get,method,overrides,return,this,method,overrides
AbstractBeanDefinition -> public MethodOverrides getMethodOverrides();1368482696;Return information about methods to be overridden by the IoC_container. This will be empty if there are no method overrides._Never returns null.;public MethodOverrides getMethodOverrides() {_		return this.methodOverrides__	};return,information,about,methods,to,be,overridden,by,the,io,c,container,this,will,be,empty,if,there,are,no,method,overrides,never,returns,null;public,method,overrides,get,method,overrides,return,this,method,overrides
AbstractBeanDefinition -> public MethodOverrides getMethodOverrides();1385412762;Return information about methods to be overridden by the IoC_container. This will be empty if there are no method overrides._Never returns null.;public MethodOverrides getMethodOverrides() {_		return this.methodOverrides__	};return,information,about,methods,to,be,overridden,by,the,io,c,container,this,will,be,empty,if,there,are,no,method,overrides,never,returns,null;public,method,overrides,get,method,overrides,return,this,method,overrides
AbstractBeanDefinition -> public MethodOverrides getMethodOverrides();1392245317;Return information about methods to be overridden by the IoC_container. This will be empty if there are no method overrides._Never returns null.;public MethodOverrides getMethodOverrides() {_		return this.methodOverrides__	};return,information,about,methods,to,be,overridden,by,the,io,c,container,this,will,be,empty,if,there,are,no,method,overrides,never,returns,null;public,method,overrides,get,method,overrides,return,this,method,overrides
AbstractBeanDefinition -> public MethodOverrides getMethodOverrides();1397163142;Return information about methods to be overridden by the IoC_container. This will be empty if there are no method overrides._Never returns null.;public MethodOverrides getMethodOverrides() {_		return this.methodOverrides__	};return,information,about,methods,to,be,overridden,by,the,io,c,container,this,will,be,empty,if,there,are,no,method,overrides,never,returns,null;public,method,overrides,get,method,overrides,return,this,method,overrides
AbstractBeanDefinition -> public MethodOverrides getMethodOverrides();1398898390;Return information about methods to be overridden by the IoC_container. This will be empty if there are no method overrides._Never returns null.;public MethodOverrides getMethodOverrides() {_		return this.methodOverrides__	};return,information,about,methods,to,be,overridden,by,the,io,c,container,this,will,be,empty,if,there,are,no,method,overrides,never,returns,null;public,method,overrides,get,method,overrides,return,this,method,overrides
AbstractBeanDefinition -> public MethodOverrides getMethodOverrides();1407511029;Return information about methods to be overridden by the IoC_container. This will be empty if there are no method overrides._Never returns null.;public MethodOverrides getMethodOverrides() {_		return this.methodOverrides__	};return,information,about,methods,to,be,overridden,by,the,io,c,container,this,will,be,empty,if,there,are,no,method,overrides,never,returns,null;public,method,overrides,get,method,overrides,return,this,method,overrides
AbstractBeanDefinition -> public MethodOverrides getMethodOverrides();1432135182;Return information about methods to be overridden by the IoC_container. This will be empty if there are no method overrides._Never returns null.;public MethodOverrides getMethodOverrides() {_		return this.methodOverrides__	};return,information,about,methods,to,be,overridden,by,the,io,c,container,this,will,be,empty,if,there,are,no,method,overrides,never,returns,null;public,method,overrides,get,method,overrides,return,this,method,overrides
AbstractBeanDefinition -> public MethodOverrides getMethodOverrides();1434204509;Return information about methods to be overridden by the IoC_container. This will be empty if there are no method overrides._Never returns null.;public MethodOverrides getMethodOverrides() {_		return this.methodOverrides__	};return,information,about,methods,to,be,overridden,by,the,io,c,container,this,will,be,empty,if,there,are,no,method,overrides,never,returns,null;public,method,overrides,get,method,overrides,return,this,method,overrides
AbstractBeanDefinition -> public MethodOverrides getMethodOverrides();1447323728;Return information about methods to be overridden by the IoC_container. This will be empty if there are no method overrides._Never returns null.;public MethodOverrides getMethodOverrides() {_		return this.methodOverrides__	};return,information,about,methods,to,be,overridden,by,the,io,c,container,this,will,be,empty,if,there,are,no,method,overrides,never,returns,null;public,method,overrides,get,method,overrides,return,this,method,overrides
AbstractBeanDefinition -> public MethodOverrides getMethodOverrides();1465226156;Return information about methods to be overridden by the IoC_container. This will be empty if there are no method overrides._Never returns {@code null}.;public MethodOverrides getMethodOverrides() {_		return this.methodOverrides__	};return,information,about,methods,to,be,overridden,by,the,io,c,container,this,will,be,empty,if,there,are,no,method,overrides,never,returns,code,null;public,method,overrides,get,method,overrides,return,this,method,overrides
AbstractBeanDefinition -> public MethodOverrides getMethodOverrides();1467730834;Return information about methods to be overridden by the IoC_container. This will be empty if there are no method overrides._Never returns {@code null}.;public MethodOverrides getMethodOverrides() {_		return this.methodOverrides__	};return,information,about,methods,to,be,overridden,by,the,io,c,container,this,will,be,empty,if,there,are,no,method,overrides,never,returns,code,null;public,method,overrides,get,method,overrides,return,this,method,overrides
AbstractBeanDefinition -> public MethodOverrides getMethodOverrides();1467846264;Return information about methods to be overridden by the IoC_container. This will be empty if there are no method overrides._Never returns {@code null}.;public MethodOverrides getMethodOverrides() {_		return this.methodOverrides__	};return,information,about,methods,to,be,overridden,by,the,io,c,container,this,will,be,empty,if,there,are,no,method,overrides,never,returns,code,null;public,method,overrides,get,method,overrides,return,this,method,overrides
AbstractBeanDefinition -> public MethodOverrides getMethodOverrides();1482091545;Return information about methods to be overridden by the IoC_container. This will be empty if there are no method overrides._Never returns {@code null}.;public MethodOverrides getMethodOverrides() {_		return this.methodOverrides__	};return,information,about,methods,to,be,overridden,by,the,io,c,container,this,will,be,empty,if,there,are,no,method,overrides,never,returns,code,null;public,method,overrides,get,method,overrides,return,this,method,overrides
AbstractBeanDefinition -> public MethodOverrides getMethodOverrides();1483093818;Return information about methods to be overridden by the IoC_container. This will be empty if there are no method overrides._Never returns {@code null}.;public MethodOverrides getMethodOverrides() {_		return this.methodOverrides__	};return,information,about,methods,to,be,overridden,by,the,io,c,container,this,will,be,empty,if,there,are,no,method,overrides,never,returns,code,null;public,method,overrides,get,method,overrides,return,this,method,overrides
AbstractBeanDefinition -> public MethodOverrides getMethodOverrides();1495868221;Return information about methods to be overridden by the IoC_container. This will be empty if there are no method overrides._Never returns {@code null}.;public MethodOverrides getMethodOverrides() {_		return this.methodOverrides__	};return,information,about,methods,to,be,overridden,by,the,io,c,container,this,will,be,empty,if,there,are,no,method,overrides,never,returns,code,null;public,method,overrides,get,method,overrides,return,this,method,overrides
AbstractBeanDefinition -> public MethodOverrides getMethodOverrides();1496837955;Return information about methods to be overridden by the IoC_container. This will be empty if there are no method overrides._<p>Never returns {@code null}.;public MethodOverrides getMethodOverrides() {_		return this.methodOverrides__	};return,information,about,methods,to,be,overridden,by,the,io,c,container,this,will,be,empty,if,there,are,no,method,overrides,p,never,returns,code,null;public,method,overrides,get,method,overrides,return,this,method,overrides
AbstractBeanDefinition -> public MethodOverrides getMethodOverrides();1498780456;Return information about methods to be overridden by the IoC_container. This will be empty if there are no method overrides._<p>Never returns {@code null}.;public MethodOverrides getMethodOverrides() {_		return this.methodOverrides__	};return,information,about,methods,to,be,overridden,by,the,io,c,container,this,will,be,empty,if,there,are,no,method,overrides,p,never,returns,code,null;public,method,overrides,get,method,overrides,return,this,method,overrides
AbstractBeanDefinition -> public MethodOverrides getMethodOverrides();1502974979;Return information about methods to be overridden by the IoC_container. This will be empty if there are no method overrides._<p>Never returns {@code null}.;public MethodOverrides getMethodOverrides() {_		return this.methodOverrides__	};return,information,about,methods,to,be,overridden,by,the,io,c,container,this,will,be,empty,if,there,are,no,method,overrides,p,never,returns,code,null;public,method,overrides,get,method,overrides,return,this,method,overrides
AbstractBeanDefinition -> public MethodOverrides getMethodOverrides();1503008029;Return information about methods to be overridden by the IoC_container. This will be empty if there are no method overrides._<p>Never returns {@code null}.;public MethodOverrides getMethodOverrides() {_		return this.methodOverrides__	};return,information,about,methods,to,be,overridden,by,the,io,c,container,this,will,be,empty,if,there,are,no,method,overrides,p,never,returns,code,null;public,method,overrides,get,method,overrides,return,this,method,overrides
AbstractBeanDefinition -> public MethodOverrides getMethodOverrides();1510606271;Return information about methods to be overridden by the IoC_container. This will be empty if there are no method overrides._<p>Never returns {@code null}.;public MethodOverrides getMethodOverrides() {_		if (this.methodOverrides == null) {_			this.methodOverrides = new MethodOverrides()__		}_		return this.methodOverrides__	};return,information,about,methods,to,be,overridden,by,the,io,c,container,this,will,be,empty,if,there,are,no,method,overrides,p,never,returns,code,null;public,method,overrides,get,method,overrides,if,this,method,overrides,null,this,method,overrides,new,method,overrides,return,this,method,overrides
AbstractBeanDefinition -> public MethodOverrides getMethodOverrides();1510675876;Return information about methods to be overridden by the IoC_container. This will be empty if there are no method overrides._<p>Never returns {@code null}.;public MethodOverrides getMethodOverrides() {_		if (this.methodOverrides == null) {_			this.methodOverrides = new MethodOverrides()__		}_		return this.methodOverrides__	};return,information,about,methods,to,be,overridden,by,the,io,c,container,this,will,be,empty,if,there,are,no,method,overrides,p,never,returns,code,null;public,method,overrides,get,method,overrides,if,this,method,overrides,null,this,method,overrides,new,method,overrides,return,this,method,overrides
AbstractBeanDefinition -> public MethodOverrides getMethodOverrides();1530174524;Return information about methods to be overridden by the IoC_container. This will be empty if there are no method overrides._<p>Never returns {@code null}.;public MethodOverrides getMethodOverrides() {_		if (this.methodOverrides == null) {_			this.methodOverrides = new MethodOverrides()__		}_		return this.methodOverrides__	};return,information,about,methods,to,be,overridden,by,the,io,c,container,this,will,be,empty,if,there,are,no,method,overrides,p,never,returns,code,null;public,method,overrides,get,method,overrides,if,this,method,overrides,null,this,method,overrides,new,method,overrides,return,this,method,overrides
AbstractBeanDefinition -> public MethodOverrides getMethodOverrides();1530174524;Return information about methods to be overridden by the IoC_container. This will be empty if there are no method overrides._<p>Never returns {@code null}.;public MethodOverrides getMethodOverrides() {_		if (this.methodOverrides == null) {_			this.methodOverrides = new MethodOverrides()__		}_		return this.methodOverrides__	};return,information,about,methods,to,be,overridden,by,the,io,c,container,this,will,be,empty,if,there,are,no,method,overrides,p,never,returns,code,null;public,method,overrides,get,method,overrides,if,this,method,overrides,null,this,method,overrides,new,method,overrides,return,this,method,overrides
AbstractBeanDefinition -> public MethodOverrides getMethodOverrides();1530174524;Return information about methods to be overridden by the IoC_container. This will be empty if there are no method overrides._<p>Never returns {@code null}.;public MethodOverrides getMethodOverrides() {_		if (this.methodOverrides == null) {_			this.methodOverrides = new MethodOverrides()__		}_		return this.methodOverrides__	};return,information,about,methods,to,be,overridden,by,the,io,c,container,this,will,be,empty,if,there,are,no,method,overrides,p,never,returns,code,null;public,method,overrides,get,method,overrides,if,this,method,overrides,null,this,method,overrides,new,method,overrides,return,this,method,overrides
AbstractBeanDefinition -> public MethodOverrides getMethodOverrides();1530190293;Return information about methods to be overridden by the IoC_container. This will be empty if there are no method overrides._<p>Never returns {@code null}.;public MethodOverrides getMethodOverrides() {_		if (this.methodOverrides == null) {_			this.methodOverrides = new MethodOverrides()__		}_		return this.methodOverrides__	};return,information,about,methods,to,be,overridden,by,the,io,c,container,this,will,be,empty,if,there,are,no,method,overrides,p,never,returns,code,null;public,method,overrides,get,method,overrides,if,this,method,overrides,null,this,method,overrides,new,method,overrides,return,this,method,overrides
AbstractBeanDefinition -> public MethodOverrides getMethodOverrides();1532981251;Return information about methods to be overridden by the IoC_container. This will be empty if there are no method overrides._<p>Never returns {@code null}.;public MethodOverrides getMethodOverrides() {_		if (this.methodOverrides == null) {_			this.methodOverrides = new MethodOverrides()__		}_		return this.methodOverrides__	};return,information,about,methods,to,be,overridden,by,the,io,c,container,this,will,be,empty,if,there,are,no,method,overrides,p,never,returns,code,null;public,method,overrides,get,method,overrides,if,this,method,overrides,null,this,method,overrides,new,method,overrides,return,this,method,overrides
AbstractBeanDefinition -> public MethodOverrides getMethodOverrides();1536863076;Return information about methods to be overridden by the IoC_container. This will be empty if there are no method overrides._<p>Never returns {@code null}.;public MethodOverrides getMethodOverrides() {_		if (this.methodOverrides == null) {_			this.methodOverrides = new MethodOverrides()__		}_		return this.methodOverrides__	};return,information,about,methods,to,be,overridden,by,the,io,c,container,this,will,be,empty,if,there,are,no,method,overrides,p,never,returns,code,null;public,method,overrides,get,method,overrides,if,this,method,overrides,null,this,method,overrides,new,method,overrides,return,this,method,overrides
AbstractBeanDefinition -> public AutowireCandidateQualifier getQualifier(String typeName);1328020251;Return the qualifier mapped to the provided type name.;public AutowireCandidateQualifier getQualifier(String typeName) {_		return this.qualifiers.get(typeName)__	};return,the,qualifier,mapped,to,the,provided,type,name;public,autowire,candidate,qualifier,get,qualifier,string,type,name,return,this,qualifiers,get,type,name
AbstractBeanDefinition -> public AutowireCandidateQualifier getQualifier(String typeName);1337202589;Return the qualifier mapped to the provided type name.;public AutowireCandidateQualifier getQualifier(String typeName) {_		return this.qualifiers.get(typeName)__	};return,the,qualifier,mapped,to,the,provided,type,name;public,autowire,candidate,qualifier,get,qualifier,string,type,name,return,this,qualifiers,get,type,name
AbstractBeanDefinition -> public AutowireCandidateQualifier getQualifier(String typeName);1356735495;Return the qualifier mapped to the provided type name.;public AutowireCandidateQualifier getQualifier(String typeName) {_		return this.qualifiers.get(typeName)__	};return,the,qualifier,mapped,to,the,provided,type,name;public,autowire,candidate,qualifier,get,qualifier,string,type,name,return,this,qualifiers,get,type,name
AbstractBeanDefinition -> public AutowireCandidateQualifier getQualifier(String typeName);1357119239;Return the qualifier mapped to the provided type name.;public AutowireCandidateQualifier getQualifier(String typeName) {_		return this.qualifiers.get(typeName)__	};return,the,qualifier,mapped,to,the,provided,type,name;public,autowire,candidate,qualifier,get,qualifier,string,type,name,return,this,qualifiers,get,type,name
AbstractBeanDefinition -> public AutowireCandidateQualifier getQualifier(String typeName);1367508310;Return the qualifier mapped to the provided type name.;public AutowireCandidateQualifier getQualifier(String typeName) {_		return this.qualifiers.get(typeName)__	};return,the,qualifier,mapped,to,the,provided,type,name;public,autowire,candidate,qualifier,get,qualifier,string,type,name,return,this,qualifiers,get,type,name
AbstractBeanDefinition -> public AutowireCandidateQualifier getQualifier(String typeName);1367943112;Return the qualifier mapped to the provided type name.;public AutowireCandidateQualifier getQualifier(String typeName) {_		return this.qualifiers.get(typeName)__	};return,the,qualifier,mapped,to,the,provided,type,name;public,autowire,candidate,qualifier,get,qualifier,string,type,name,return,this,qualifiers,get,type,name
AbstractBeanDefinition -> public AutowireCandidateQualifier getQualifier(String typeName);1368482696;Return the qualifier mapped to the provided type name.;public AutowireCandidateQualifier getQualifier(String typeName) {_		return this.qualifiers.get(typeName)__	};return,the,qualifier,mapped,to,the,provided,type,name;public,autowire,candidate,qualifier,get,qualifier,string,type,name,return,this,qualifiers,get,type,name
AbstractBeanDefinition -> public AutowireCandidateQualifier getQualifier(String typeName);1385412762;Return the qualifier mapped to the provided type name.;public AutowireCandidateQualifier getQualifier(String typeName) {_		return this.qualifiers.get(typeName)__	};return,the,qualifier,mapped,to,the,provided,type,name;public,autowire,candidate,qualifier,get,qualifier,string,type,name,return,this,qualifiers,get,type,name
AbstractBeanDefinition -> public AutowireCandidateQualifier getQualifier(String typeName);1392245317;Return the qualifier mapped to the provided type name.;public AutowireCandidateQualifier getQualifier(String typeName) {_		return this.qualifiers.get(typeName)__	};return,the,qualifier,mapped,to,the,provided,type,name;public,autowire,candidate,qualifier,get,qualifier,string,type,name,return,this,qualifiers,get,type,name
AbstractBeanDefinition -> public AutowireCandidateQualifier getQualifier(String typeName);1397163142;Return the qualifier mapped to the provided type name.;public AutowireCandidateQualifier getQualifier(String typeName) {_		return this.qualifiers.get(typeName)__	};return,the,qualifier,mapped,to,the,provided,type,name;public,autowire,candidate,qualifier,get,qualifier,string,type,name,return,this,qualifiers,get,type,name
AbstractBeanDefinition -> public AutowireCandidateQualifier getQualifier(String typeName);1398898390;Return the qualifier mapped to the provided type name.;public AutowireCandidateQualifier getQualifier(String typeName) {_		return this.qualifiers.get(typeName)__	};return,the,qualifier,mapped,to,the,provided,type,name;public,autowire,candidate,qualifier,get,qualifier,string,type,name,return,this,qualifiers,get,type,name
AbstractBeanDefinition -> public AutowireCandidateQualifier getQualifier(String typeName);1407511029;Return the qualifier mapped to the provided type name.;public AutowireCandidateQualifier getQualifier(String typeName) {_		return this.qualifiers.get(typeName)__	};return,the,qualifier,mapped,to,the,provided,type,name;public,autowire,candidate,qualifier,get,qualifier,string,type,name,return,this,qualifiers,get,type,name
AbstractBeanDefinition -> public AutowireCandidateQualifier getQualifier(String typeName);1432135182;Return the qualifier mapped to the provided type name.;public AutowireCandidateQualifier getQualifier(String typeName) {_		return this.qualifiers.get(typeName)__	};return,the,qualifier,mapped,to,the,provided,type,name;public,autowire,candidate,qualifier,get,qualifier,string,type,name,return,this,qualifiers,get,type,name
AbstractBeanDefinition -> public AutowireCandidateQualifier getQualifier(String typeName);1434204509;Return the qualifier mapped to the provided type name.;public AutowireCandidateQualifier getQualifier(String typeName) {_		return this.qualifiers.get(typeName)__	};return,the,qualifier,mapped,to,the,provided,type,name;public,autowire,candidate,qualifier,get,qualifier,string,type,name,return,this,qualifiers,get,type,name
AbstractBeanDefinition -> public AutowireCandidateQualifier getQualifier(String typeName);1447323728;Return the qualifier mapped to the provided type name.;public AutowireCandidateQualifier getQualifier(String typeName) {_		return this.qualifiers.get(typeName)__	};return,the,qualifier,mapped,to,the,provided,type,name;public,autowire,candidate,qualifier,get,qualifier,string,type,name,return,this,qualifiers,get,type,name
AbstractBeanDefinition -> public AutowireCandidateQualifier getQualifier(String typeName);1465226156;Return the qualifier mapped to the provided type name.;public AutowireCandidateQualifier getQualifier(String typeName) {_		return this.qualifiers.get(typeName)__	};return,the,qualifier,mapped,to,the,provided,type,name;public,autowire,candidate,qualifier,get,qualifier,string,type,name,return,this,qualifiers,get,type,name
AbstractBeanDefinition -> public AutowireCandidateQualifier getQualifier(String typeName);1467730834;Return the qualifier mapped to the provided type name.;public AutowireCandidateQualifier getQualifier(String typeName) {_		return this.qualifiers.get(typeName)__	};return,the,qualifier,mapped,to,the,provided,type,name;public,autowire,candidate,qualifier,get,qualifier,string,type,name,return,this,qualifiers,get,type,name
AbstractBeanDefinition -> public AutowireCandidateQualifier getQualifier(String typeName);1467846264;Return the qualifier mapped to the provided type name.;public AutowireCandidateQualifier getQualifier(String typeName) {_		return this.qualifiers.get(typeName)__	};return,the,qualifier,mapped,to,the,provided,type,name;public,autowire,candidate,qualifier,get,qualifier,string,type,name,return,this,qualifiers,get,type,name
AbstractBeanDefinition -> public AutowireCandidateQualifier getQualifier(String typeName);1482091545;Return the qualifier mapped to the provided type name.;public AutowireCandidateQualifier getQualifier(String typeName) {_		return this.qualifiers.get(typeName)__	};return,the,qualifier,mapped,to,the,provided,type,name;public,autowire,candidate,qualifier,get,qualifier,string,type,name,return,this,qualifiers,get,type,name
AbstractBeanDefinition -> public AutowireCandidateQualifier getQualifier(String typeName);1483093818;Return the qualifier mapped to the provided type name.;public AutowireCandidateQualifier getQualifier(String typeName) {_		return this.qualifiers.get(typeName)__	};return,the,qualifier,mapped,to,the,provided,type,name;public,autowire,candidate,qualifier,get,qualifier,string,type,name,return,this,qualifiers,get,type,name
AbstractBeanDefinition -> public AutowireCandidateQualifier getQualifier(String typeName);1495868221;Return the qualifier mapped to the provided type name.;public AutowireCandidateQualifier getQualifier(String typeName) {_		return this.qualifiers.get(typeName)__	};return,the,qualifier,mapped,to,the,provided,type,name;public,autowire,candidate,qualifier,get,qualifier,string,type,name,return,this,qualifiers,get,type,name
AbstractBeanDefinition -> public void setMethodOverrides(@Nullable MethodOverrides methodOverrides);1496837955;Specify method overrides for the bean, if any.;public void setMethodOverrides(@Nullable MethodOverrides methodOverrides) {_		this.methodOverrides = (methodOverrides != null ? methodOverrides : new MethodOverrides())__	};specify,method,overrides,for,the,bean,if,any;public,void,set,method,overrides,nullable,method,overrides,method,overrides,this,method,overrides,method,overrides,null,method,overrides,new,method,overrides
AbstractBeanDefinition -> public void setMethodOverrides(@Nullable MethodOverrides methodOverrides);1498780456;Specify method overrides for the bean, if any.;public void setMethodOverrides(@Nullable MethodOverrides methodOverrides) {_		this.methodOverrides = (methodOverrides != null ? methodOverrides : new MethodOverrides())__	};specify,method,overrides,for,the,bean,if,any;public,void,set,method,overrides,nullable,method,overrides,method,overrides,this,method,overrides,method,overrides,null,method,overrides,new,method,overrides
AbstractBeanDefinition -> public void setMethodOverrides(@Nullable MethodOverrides methodOverrides);1502974979;Specify method overrides for the bean, if any.;public void setMethodOverrides(@Nullable MethodOverrides methodOverrides) {_		this.methodOverrides = (methodOverrides != null ? methodOverrides : new MethodOverrides())__	};specify,method,overrides,for,the,bean,if,any;public,void,set,method,overrides,nullable,method,overrides,method,overrides,this,method,overrides,method,overrides,null,method,overrides,new,method,overrides
AbstractBeanDefinition -> public void setMethodOverrides(@Nullable MethodOverrides methodOverrides);1503008029;Specify method overrides for the bean, if any.;public void setMethodOverrides(@Nullable MethodOverrides methodOverrides) {_		this.methodOverrides = (methodOverrides != null ? methodOverrides : new MethodOverrides())__	};specify,method,overrides,for,the,bean,if,any;public,void,set,method,overrides,nullable,method,overrides,method,overrides,this,method,overrides,method,overrides,null,method,overrides,new,method,overrides
AbstractBeanDefinition -> @Override 	public BeanDefinition getOriginatingBeanDefinition();1483093818;Return the originating BeanDefinition, or {@code null} if none._Allows for retrieving the decorated bean definition, if any._<p>Note that this method returns the immediate originator. Iterate through the_originator chain to find the original BeanDefinition as defined by the user.;@Override_	public BeanDefinition getOriginatingBeanDefinition() {_		return (this.resource instanceof BeanDefinitionResource ?_				((BeanDefinitionResource) this.resource).getBeanDefinition() : null)__	};return,the,originating,bean,definition,or,code,null,if,none,allows,for,retrieving,the,decorated,bean,definition,if,any,p,note,that,this,method,returns,the,immediate,originator,iterate,through,the,originator,chain,to,find,the,original,bean,definition,as,defined,by,the,user;override,public,bean,definition,get,originating,bean,definition,return,this,resource,instanceof,bean,definition,resource,bean,definition,resource,this,resource,get,bean,definition,null
AbstractBeanDefinition -> @Override 	public BeanDefinition getOriginatingBeanDefinition();1495868221;Return the originating BeanDefinition, or {@code null} if none._Allows for retrieving the decorated bean definition, if any._<p>Note that this method returns the immediate originator. Iterate through the_originator chain to find the original BeanDefinition as defined by the user.;@Override_	public BeanDefinition getOriginatingBeanDefinition() {_		return (this.resource instanceof BeanDefinitionResource ?_				((BeanDefinitionResource) this.resource).getBeanDefinition() : null)__	};return,the,originating,bean,definition,or,code,null,if,none,allows,for,retrieving,the,decorated,bean,definition,if,any,p,note,that,this,method,returns,the,immediate,originator,iterate,through,the,originator,chain,to,find,the,original,bean,definition,as,defined,by,the,user;override,public,bean,definition,get,originating,bean,definition,return,this,resource,instanceof,bean,definition,resource,bean,definition,resource,this,resource,get,bean,definition,null
AbstractBeanDefinition -> @Override 	public BeanDefinition getOriginatingBeanDefinition();1496837955;Return the originating BeanDefinition, or {@code null} if none._Allows for retrieving the decorated bean definition, if any._<p>Note that this method returns the immediate originator. Iterate through the_originator chain to find the original BeanDefinition as defined by the user.;@Override_	public BeanDefinition getOriginatingBeanDefinition() {_		return (this.resource instanceof BeanDefinitionResource ?_				((BeanDefinitionResource) this.resource).getBeanDefinition() : null)__	};return,the,originating,bean,definition,or,code,null,if,none,allows,for,retrieving,the,decorated,bean,definition,if,any,p,note,that,this,method,returns,the,immediate,originator,iterate,through,the,originator,chain,to,find,the,original,bean,definition,as,defined,by,the,user;override,public,bean,definition,get,originating,bean,definition,return,this,resource,instanceof,bean,definition,resource,bean,definition,resource,this,resource,get,bean,definition,null
AbstractBeanDefinition -> @Override 	public BeanDefinition getOriginatingBeanDefinition();1498780456;Return the originating BeanDefinition, or {@code null} if none._Allows for retrieving the decorated bean definition, if any._<p>Note that this method returns the immediate originator. Iterate through the_originator chain to find the original BeanDefinition as defined by the user.;@Override_	public BeanDefinition getOriginatingBeanDefinition() {_		return (this.resource instanceof BeanDefinitionResource ?_				((BeanDefinitionResource) this.resource).getBeanDefinition() : null)__	};return,the,originating,bean,definition,or,code,null,if,none,allows,for,retrieving,the,decorated,bean,definition,if,any,p,note,that,this,method,returns,the,immediate,originator,iterate,through,the,originator,chain,to,find,the,original,bean,definition,as,defined,by,the,user;override,public,bean,definition,get,originating,bean,definition,return,this,resource,instanceof,bean,definition,resource,bean,definition,resource,this,resource,get,bean,definition,null
AbstractBeanDefinition -> public void setLazyInit(boolean lazyInit);1328020251;Set whether this bean should be lazily initialized._<p>If <code>false</code>, the bean will get instantiated on startup by bean_factories that perform eager initialization of singletons.;public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,this,bean,should,be,lazily,initialized,p,if,code,false,code,the,bean,will,get,instantiated,on,startup,by,bean,factories,that,perform,eager,initialization,of,singletons;public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
AbstractBeanDefinition -> public void setLazyInit(boolean lazyInit);1337202589;Set whether this bean should be lazily initialized._<p>If <code>false</code>, the bean will get instantiated on startup by bean_factories that perform eager initialization of singletons.;public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,this,bean,should,be,lazily,initialized,p,if,code,false,code,the,bean,will,get,instantiated,on,startup,by,bean,factories,that,perform,eager,initialization,of,singletons;public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
AbstractBeanDefinition -> public void setLazyInit(boolean lazyInit);1357119239;Set whether this bean should be lazily initialized._<p>If {@code false}, the bean will get instantiated on startup by bean_factories that perform eager initialization of singletons.;public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,this,bean,should,be,lazily,initialized,p,if,code,false,the,bean,will,get,instantiated,on,startup,by,bean,factories,that,perform,eager,initialization,of,singletons;public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
AbstractBeanDefinition -> public void setLazyInit(boolean lazyInit);1367508310;Set whether this bean should be lazily initialized._<p>If {@code false}, the bean will get instantiated on startup by bean_factories that perform eager initialization of singletons.;public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,this,bean,should,be,lazily,initialized,p,if,code,false,the,bean,will,get,instantiated,on,startup,by,bean,factories,that,perform,eager,initialization,of,singletons;public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
AbstractBeanDefinition -> public void setLazyInit(boolean lazyInit);1367943112;Set whether this bean should be lazily initialized._<p>If {@code false}, the bean will get instantiated on startup by bean_factories that perform eager initialization of singletons.;public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,this,bean,should,be,lazily,initialized,p,if,code,false,the,bean,will,get,instantiated,on,startup,by,bean,factories,that,perform,eager,initialization,of,singletons;public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
AbstractBeanDefinition -> @Override 	public ConstructorArgumentValues getConstructorArgumentValues();1356735495;Return constructor argument values for this bean (never {@code null}).;@Override_	public ConstructorArgumentValues getConstructorArgumentValues() {_		return this.constructorArgumentValues__	};return,constructor,argument,values,for,this,bean,never,code,null;override,public,constructor,argument,values,get,constructor,argument,values,return,this,constructor,argument,values
AbstractBeanDefinition -> @Override 	public ConstructorArgumentValues getConstructorArgumentValues();1368482696;Return constructor argument values for this bean (never {@code null}).;@Override_	public ConstructorArgumentValues getConstructorArgumentValues() {_		return this.constructorArgumentValues__	};return,constructor,argument,values,for,this,bean,never,code,null;override,public,constructor,argument,values,get,constructor,argument,values,return,this,constructor,argument,values
AbstractBeanDefinition -> @Override 	public ConstructorArgumentValues getConstructorArgumentValues();1385412762;Return constructor argument values for this bean (never {@code null}).;@Override_	public ConstructorArgumentValues getConstructorArgumentValues() {_		return this.constructorArgumentValues__	};return,constructor,argument,values,for,this,bean,never,code,null;override,public,constructor,argument,values,get,constructor,argument,values,return,this,constructor,argument,values
AbstractBeanDefinition -> @Override 	public ConstructorArgumentValues getConstructorArgumentValues();1392245317;Return constructor argument values for this bean (never {@code null}).;@Override_	public ConstructorArgumentValues getConstructorArgumentValues() {_		return this.constructorArgumentValues__	};return,constructor,argument,values,for,this,bean,never,code,null;override,public,constructor,argument,values,get,constructor,argument,values,return,this,constructor,argument,values
AbstractBeanDefinition -> @Override 	public ConstructorArgumentValues getConstructorArgumentValues();1397163142;Return constructor argument values for this bean (never {@code null}).;@Override_	public ConstructorArgumentValues getConstructorArgumentValues() {_		return this.constructorArgumentValues__	};return,constructor,argument,values,for,this,bean,never,code,null;override,public,constructor,argument,values,get,constructor,argument,values,return,this,constructor,argument,values
AbstractBeanDefinition -> @Override 	public ConstructorArgumentValues getConstructorArgumentValues();1398898390;Return constructor argument values for this bean (never {@code null}).;@Override_	public ConstructorArgumentValues getConstructorArgumentValues() {_		return this.constructorArgumentValues__	};return,constructor,argument,values,for,this,bean,never,code,null;override,public,constructor,argument,values,get,constructor,argument,values,return,this,constructor,argument,values
AbstractBeanDefinition -> @Override 	public ConstructorArgumentValues getConstructorArgumentValues();1407511029;Return constructor argument values for this bean (never {@code null}).;@Override_	public ConstructorArgumentValues getConstructorArgumentValues() {_		return this.constructorArgumentValues__	};return,constructor,argument,values,for,this,bean,never,code,null;override,public,constructor,argument,values,get,constructor,argument,values,return,this,constructor,argument,values
AbstractBeanDefinition -> @Override 	public ConstructorArgumentValues getConstructorArgumentValues();1432135182;Return constructor argument values for this bean (never {@code null}).;@Override_	public ConstructorArgumentValues getConstructorArgumentValues() {_		return this.constructorArgumentValues__	};return,constructor,argument,values,for,this,bean,never,code,null;override,public,constructor,argument,values,get,constructor,argument,values,return,this,constructor,argument,values
AbstractBeanDefinition -> @Override 	public ConstructorArgumentValues getConstructorArgumentValues();1434204509;Return constructor argument values for this bean (never {@code null}).;@Override_	public ConstructorArgumentValues getConstructorArgumentValues() {_		return this.constructorArgumentValues__	};return,constructor,argument,values,for,this,bean,never,code,null;override,public,constructor,argument,values,get,constructor,argument,values,return,this,constructor,argument,values
AbstractBeanDefinition -> @Override 	public ConstructorArgumentValues getConstructorArgumentValues();1447323728;Return constructor argument values for this bean (never {@code null}).;@Override_	public ConstructorArgumentValues getConstructorArgumentValues() {_		return this.constructorArgumentValues__	};return,constructor,argument,values,for,this,bean,never,code,null;override,public,constructor,argument,values,get,constructor,argument,values,return,this,constructor,argument,values
AbstractBeanDefinition -> @Override 	public ConstructorArgumentValues getConstructorArgumentValues();1465226156;Return constructor argument values for this bean (never {@code null}).;@Override_	public ConstructorArgumentValues getConstructorArgumentValues() {_		return this.constructorArgumentValues__	};return,constructor,argument,values,for,this,bean,never,code,null;override,public,constructor,argument,values,get,constructor,argument,values,return,this,constructor,argument,values
AbstractBeanDefinition -> @Override 	public ConstructorArgumentValues getConstructorArgumentValues();1467730834;Return constructor argument values for this bean (never {@code null}).;@Override_	public ConstructorArgumentValues getConstructorArgumentValues() {_		return this.constructorArgumentValues__	};return,constructor,argument,values,for,this,bean,never,code,null;override,public,constructor,argument,values,get,constructor,argument,values,return,this,constructor,argument,values
AbstractBeanDefinition -> @Override 	public ConstructorArgumentValues getConstructorArgumentValues();1467846264;Return constructor argument values for this bean (never {@code null}).;@Override_	public ConstructorArgumentValues getConstructorArgumentValues() {_		return this.constructorArgumentValues__	};return,constructor,argument,values,for,this,bean,never,code,null;override,public,constructor,argument,values,get,constructor,argument,values,return,this,constructor,argument,values
AbstractBeanDefinition -> @Override 	public ConstructorArgumentValues getConstructorArgumentValues();1482091545;Return constructor argument values for this bean (never {@code null}).;@Override_	public ConstructorArgumentValues getConstructorArgumentValues() {_		return this.constructorArgumentValues__	};return,constructor,argument,values,for,this,bean,never,code,null;override,public,constructor,argument,values,get,constructor,argument,values,return,this,constructor,argument,values
AbstractBeanDefinition -> @Override 	public ConstructorArgumentValues getConstructorArgumentValues();1483093818;Return constructor argument values for this bean (never {@code null}).;@Override_	public ConstructorArgumentValues getConstructorArgumentValues() {_		return this.constructorArgumentValues__	};return,constructor,argument,values,for,this,bean,never,code,null;override,public,constructor,argument,values,get,constructor,argument,values,return,this,constructor,argument,values
AbstractBeanDefinition -> @Override 	public ConstructorArgumentValues getConstructorArgumentValues();1495868221;Return constructor argument values for this bean (never {@code null}).;@Override_	public ConstructorArgumentValues getConstructorArgumentValues() {_		return this.constructorArgumentValues__	};return,constructor,argument,values,for,this,bean,never,code,null;override,public,constructor,argument,values,get,constructor,argument,values,return,this,constructor,argument,values
AbstractBeanDefinition -> @Override 	public ConstructorArgumentValues getConstructorArgumentValues();1496837955;Return constructor argument values for this bean (never {@code null}).;@Override_	public ConstructorArgumentValues getConstructorArgumentValues() {_		return this.constructorArgumentValues__	};return,constructor,argument,values,for,this,bean,never,code,null;override,public,constructor,argument,values,get,constructor,argument,values,return,this,constructor,argument,values
AbstractBeanDefinition -> @Override 	public ConstructorArgumentValues getConstructorArgumentValues();1498780456;Return constructor argument values for this bean (never {@code null}).;@Override_	public ConstructorArgumentValues getConstructorArgumentValues() {_		return this.constructorArgumentValues__	};return,constructor,argument,values,for,this,bean,never,code,null;override,public,constructor,argument,values,get,constructor,argument,values,return,this,constructor,argument,values
AbstractBeanDefinition -> @Override 	public ConstructorArgumentValues getConstructorArgumentValues();1502974979;Return constructor argument values for this bean (never {@code null}).;@Override_	public ConstructorArgumentValues getConstructorArgumentValues() {_		return this.constructorArgumentValues__	};return,constructor,argument,values,for,this,bean,never,code,null;override,public,constructor,argument,values,get,constructor,argument,values,return,this,constructor,argument,values
AbstractBeanDefinition -> @Override 	public ConstructorArgumentValues getConstructorArgumentValues();1503008029;Return constructor argument values for this bean (never {@code null}).;@Override_	public ConstructorArgumentValues getConstructorArgumentValues() {_		return this.constructorArgumentValues__	};return,constructor,argument,values,for,this,bean,never,code,null;override,public,constructor,argument,values,get,constructor,argument,values,return,this,constructor,argument,values
AbstractBeanDefinition -> @Override 	public ConstructorArgumentValues getConstructorArgumentValues();1510606271;Return constructor argument values for this bean (never {@code null}).;@Override_	public ConstructorArgumentValues getConstructorArgumentValues() {_		if (this.constructorArgumentValues == null) {_			this.constructorArgumentValues = new ConstructorArgumentValues()__		}_		return this.constructorArgumentValues__	};return,constructor,argument,values,for,this,bean,never,code,null;override,public,constructor,argument,values,get,constructor,argument,values,if,this,constructor,argument,values,null,this,constructor,argument,values,new,constructor,argument,values,return,this,constructor,argument,values
AbstractBeanDefinition -> @Override 	public ConstructorArgumentValues getConstructorArgumentValues();1510675876;Return constructor argument values for this bean (never {@code null}).;@Override_	public ConstructorArgumentValues getConstructorArgumentValues() {_		if (this.constructorArgumentValues == null) {_			this.constructorArgumentValues = new ConstructorArgumentValues()__		}_		return this.constructorArgumentValues__	};return,constructor,argument,values,for,this,bean,never,code,null;override,public,constructor,argument,values,get,constructor,argument,values,if,this,constructor,argument,values,null,this,constructor,argument,values,new,constructor,argument,values,return,this,constructor,argument,values
AbstractBeanDefinition -> @Override 	public ConstructorArgumentValues getConstructorArgumentValues();1530174524;Return constructor argument values for this bean (never {@code null}).;@Override_	public ConstructorArgumentValues getConstructorArgumentValues() {_		if (this.constructorArgumentValues == null) {_			this.constructorArgumentValues = new ConstructorArgumentValues()__		}_		return this.constructorArgumentValues__	};return,constructor,argument,values,for,this,bean,never,code,null;override,public,constructor,argument,values,get,constructor,argument,values,if,this,constructor,argument,values,null,this,constructor,argument,values,new,constructor,argument,values,return,this,constructor,argument,values
AbstractBeanDefinition -> @Override 	public ConstructorArgumentValues getConstructorArgumentValues();1530174524;Return constructor argument values for this bean (never {@code null}).;@Override_	public ConstructorArgumentValues getConstructorArgumentValues() {_		if (this.constructorArgumentValues == null) {_			this.constructorArgumentValues = new ConstructorArgumentValues()__		}_		return this.constructorArgumentValues__	};return,constructor,argument,values,for,this,bean,never,code,null;override,public,constructor,argument,values,get,constructor,argument,values,if,this,constructor,argument,values,null,this,constructor,argument,values,new,constructor,argument,values,return,this,constructor,argument,values
AbstractBeanDefinition -> @Override 	public ConstructorArgumentValues getConstructorArgumentValues();1530174524;Return constructor argument values for this bean (never {@code null}).;@Override_	public ConstructorArgumentValues getConstructorArgumentValues() {_		if (this.constructorArgumentValues == null) {_			this.constructorArgumentValues = new ConstructorArgumentValues()__		}_		return this.constructorArgumentValues__	};return,constructor,argument,values,for,this,bean,never,code,null;override,public,constructor,argument,values,get,constructor,argument,values,if,this,constructor,argument,values,null,this,constructor,argument,values,new,constructor,argument,values,return,this,constructor,argument,values
AbstractBeanDefinition -> @Override 	public ConstructorArgumentValues getConstructorArgumentValues();1530190293;Return constructor argument values for this bean (never {@code null}).;@Override_	public ConstructorArgumentValues getConstructorArgumentValues() {_		if (this.constructorArgumentValues == null) {_			this.constructorArgumentValues = new ConstructorArgumentValues()__		}_		return this.constructorArgumentValues__	};return,constructor,argument,values,for,this,bean,never,code,null;override,public,constructor,argument,values,get,constructor,argument,values,if,this,constructor,argument,values,null,this,constructor,argument,values,new,constructor,argument,values,return,this,constructor,argument,values
AbstractBeanDefinition -> @Override 	public ConstructorArgumentValues getConstructorArgumentValues();1532981251;Return constructor argument values for this bean (never {@code null}).;@Override_	public ConstructorArgumentValues getConstructorArgumentValues() {_		if (this.constructorArgumentValues == null) {_			this.constructorArgumentValues = new ConstructorArgumentValues()__		}_		return this.constructorArgumentValues__	};return,constructor,argument,values,for,this,bean,never,code,null;override,public,constructor,argument,values,get,constructor,argument,values,if,this,constructor,argument,values,null,this,constructor,argument,values,new,constructor,argument,values,return,this,constructor,argument,values
AbstractBeanDefinition -> @Override 	public ConstructorArgumentValues getConstructorArgumentValues();1536863076;Return constructor argument values for this bean (never {@code null}).;@Override_	public ConstructorArgumentValues getConstructorArgumentValues() {_		if (this.constructorArgumentValues == null) {_			this.constructorArgumentValues = new ConstructorArgumentValues()__		}_		return this.constructorArgumentValues__	};return,constructor,argument,values,for,this,bean,never,code,null;override,public,constructor,argument,values,get,constructor,argument,values,if,this,constructor,argument,values,null,this,constructor,argument,values,new,constructor,argument,values,return,this,constructor,argument,values
AbstractBeanDefinition -> public Supplier<?> getInstanceSupplier();1482091545;Return a callback for creating an instance of the bean, if any._@since 5.0;public Supplier<?> getInstanceSupplier() {_		return this.instanceSupplier__	};return,a,callback,for,creating,an,instance,of,the,bean,if,any,since,5,0;public,supplier,get,instance,supplier,return,this,instance,supplier
AbstractBeanDefinition -> public Supplier<?> getInstanceSupplier();1483093818;Return a callback for creating an instance of the bean, if any._@since 5.0;public Supplier<?> getInstanceSupplier() {_		return this.instanceSupplier__	};return,a,callback,for,creating,an,instance,of,the,bean,if,any,since,5,0;public,supplier,get,instance,supplier,return,this,instance,supplier
AbstractBeanDefinition -> public Class resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException;1328020251;Determine the class of the wrapped bean, resolving it from a_specified class name if necessary. Will also reload a specified_Class from its name when called with the bean class already resolved._@param classLoader the ClassLoader to use for resolving a (potential) class name_@return the resolved bean class_@throws ClassNotFoundException if the class name could be resolved;public Class resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException {_		String className = getBeanClassName()__		if (className == null) {_			return null__		}_		Class resolvedClass = ClassUtils.forName(className, classLoader)__		this.beanClass = resolvedClass__		return resolvedClass__	};determine,the,class,of,the,wrapped,bean,resolving,it,from,a,specified,class,name,if,necessary,will,also,reload,a,specified,class,from,its,name,when,called,with,the,bean,class,already,resolved,param,class,loader,the,class,loader,to,use,for,resolving,a,potential,class,name,return,the,resolved,bean,class,throws,class,not,found,exception,if,the,class,name,could,be,resolved;public,class,resolve,bean,class,class,loader,class,loader,throws,class,not,found,exception,string,class,name,get,bean,class,name,if,class,name,null,return,null,class,resolved,class,class,utils,for,name,class,name,class,loader,this,bean,class,resolved,class,return,resolved,class
AbstractBeanDefinition -> public Class resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException;1337202589;Determine the class of the wrapped bean, resolving it from a_specified class name if necessary. Will also reload a specified_Class from its name when called with the bean class already resolved._@param classLoader the ClassLoader to use for resolving a (potential) class name_@return the resolved bean class_@throws ClassNotFoundException if the class name could be resolved;public Class resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException {_		String className = getBeanClassName()__		if (className == null) {_			return null__		}_		Class resolvedClass = ClassUtils.forName(className, classLoader)__		this.beanClass = resolvedClass__		return resolvedClass__	};determine,the,class,of,the,wrapped,bean,resolving,it,from,a,specified,class,name,if,necessary,will,also,reload,a,specified,class,from,its,name,when,called,with,the,bean,class,already,resolved,param,class,loader,the,class,loader,to,use,for,resolving,a,potential,class,name,return,the,resolved,bean,class,throws,class,not,found,exception,if,the,class,name,could,be,resolved;public,class,resolve,bean,class,class,loader,class,loader,throws,class,not,found,exception,string,class,name,get,bean,class,name,if,class,name,null,return,null,class,resolved,class,class,utils,for,name,class,name,class,loader,this,bean,class,resolved,class,return,resolved,class
AbstractBeanDefinition -> public Class resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException;1356735495;Determine the class of the wrapped bean, resolving it from a_specified class name if necessary. Will also reload a specified_Class from its name when called with the bean class already resolved._@param classLoader the ClassLoader to use for resolving a (potential) class name_@return the resolved bean class_@throws ClassNotFoundException if the class name could be resolved;public Class resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException {_		String className = getBeanClassName()__		if (className == null) {_			return null__		}_		Class resolvedClass = ClassUtils.forName(className, classLoader)__		this.beanClass = resolvedClass__		return resolvedClass__	};determine,the,class,of,the,wrapped,bean,resolving,it,from,a,specified,class,name,if,necessary,will,also,reload,a,specified,class,from,its,name,when,called,with,the,bean,class,already,resolved,param,class,loader,the,class,loader,to,use,for,resolving,a,potential,class,name,return,the,resolved,bean,class,throws,class,not,found,exception,if,the,class,name,could,be,resolved;public,class,resolve,bean,class,class,loader,class,loader,throws,class,not,found,exception,string,class,name,get,bean,class,name,if,class,name,null,return,null,class,resolved,class,class,utils,for,name,class,name,class,loader,this,bean,class,resolved,class,return,resolved,class
AbstractBeanDefinition -> public Class resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException;1357119239;Determine the class of the wrapped bean, resolving it from a_specified class name if necessary. Will also reload a specified_Class from its name when called with the bean class already resolved._@param classLoader the ClassLoader to use for resolving a (potential) class name_@return the resolved bean class_@throws ClassNotFoundException if the class name could be resolved;public Class resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException {_		String className = getBeanClassName()__		if (className == null) {_			return null__		}_		Class resolvedClass = ClassUtils.forName(className, classLoader)__		this.beanClass = resolvedClass__		return resolvedClass__	};determine,the,class,of,the,wrapped,bean,resolving,it,from,a,specified,class,name,if,necessary,will,also,reload,a,specified,class,from,its,name,when,called,with,the,bean,class,already,resolved,param,class,loader,the,class,loader,to,use,for,resolving,a,potential,class,name,return,the,resolved,bean,class,throws,class,not,found,exception,if,the,class,name,could,be,resolved;public,class,resolve,bean,class,class,loader,class,loader,throws,class,not,found,exception,string,class,name,get,bean,class,name,if,class,name,null,return,null,class,resolved,class,class,utils,for,name,class,name,class,loader,this,bean,class,resolved,class,return,resolved,class
AbstractBeanDefinition -> public Class resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException;1367508310;Determine the class of the wrapped bean, resolving it from a_specified class name if necessary. Will also reload a specified_Class from its name when called with the bean class already resolved._@param classLoader the ClassLoader to use for resolving a (potential) class name_@return the resolved bean class_@throws ClassNotFoundException if the class name could be resolved;public Class resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException {_		String className = getBeanClassName()__		if (className == null) {_			return null__		}_		Class resolvedClass = ClassUtils.forName(className, classLoader)__		this.beanClass = resolvedClass__		return resolvedClass__	};determine,the,class,of,the,wrapped,bean,resolving,it,from,a,specified,class,name,if,necessary,will,also,reload,a,specified,class,from,its,name,when,called,with,the,bean,class,already,resolved,param,class,loader,the,class,loader,to,use,for,resolving,a,potential,class,name,return,the,resolved,bean,class,throws,class,not,found,exception,if,the,class,name,could,be,resolved;public,class,resolve,bean,class,class,loader,class,loader,throws,class,not,found,exception,string,class,name,get,bean,class,name,if,class,name,null,return,null,class,resolved,class,class,utils,for,name,class,name,class,loader,this,bean,class,resolved,class,return,resolved,class
AbstractBeanDefinition -> public Class resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException;1367943112;Determine the class of the wrapped bean, resolving it from a_specified class name if necessary. Will also reload a specified_Class from its name when called with the bean class already resolved._@param classLoader the ClassLoader to use for resolving a (potential) class name_@return the resolved bean class_@throws ClassNotFoundException if the class name could be resolved;public Class resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException {_		String className = getBeanClassName()__		if (className == null) {_			return null__		}_		Class resolvedClass = ClassUtils.forName(className, classLoader)__		this.beanClass = resolvedClass__		return resolvedClass__	};determine,the,class,of,the,wrapped,bean,resolving,it,from,a,specified,class,name,if,necessary,will,also,reload,a,specified,class,from,its,name,when,called,with,the,bean,class,already,resolved,param,class,loader,the,class,loader,to,use,for,resolving,a,potential,class,name,return,the,resolved,bean,class,throws,class,not,found,exception,if,the,class,name,could,be,resolved;public,class,resolve,bean,class,class,loader,class,loader,throws,class,not,found,exception,string,class,name,get,bean,class,name,if,class,name,null,return,null,class,resolved,class,class,utils,for,name,class,name,class,loader,this,bean,class,resolved,class,return,resolved,class
AbstractBeanDefinition -> public Class resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException;1368482696;Determine the class of the wrapped bean, resolving it from a_specified class name if necessary. Will also reload a specified_Class from its name when called with the bean class already resolved._@param classLoader the ClassLoader to use for resolving a (potential) class name_@return the resolved bean class_@throws ClassNotFoundException if the class name could be resolved;public Class resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException {_		String className = getBeanClassName()__		if (className == null) {_			return null__		}_		Class resolvedClass = ClassUtils.forName(className, classLoader)__		this.beanClass = resolvedClass__		return resolvedClass__	};determine,the,class,of,the,wrapped,bean,resolving,it,from,a,specified,class,name,if,necessary,will,also,reload,a,specified,class,from,its,name,when,called,with,the,bean,class,already,resolved,param,class,loader,the,class,loader,to,use,for,resolving,a,potential,class,name,return,the,resolved,bean,class,throws,class,not,found,exception,if,the,class,name,could,be,resolved;public,class,resolve,bean,class,class,loader,class,loader,throws,class,not,found,exception,string,class,name,get,bean,class,name,if,class,name,null,return,null,class,resolved,class,class,utils,for,name,class,name,class,loader,this,bean,class,resolved,class,return,resolved,class
AbstractBeanDefinition -> public Class<?> getBeanClass() throws IllegalStateException;1328020251;Return the class of the wrapped bean, if already resolved._@return the bean class, or <code>null</code> if none defined_@throws IllegalStateException if the bean definition does not define a bean class,_or a specified bean class name has not been resolved into an actual Class;public Class<?> getBeanClass() throws IllegalStateException {_		Object beanClassObject = this.beanClass__		if (beanClassObject == null) {_			throw new IllegalStateException("No bean class specified on bean definition")__		}_		if (!(beanClassObject instanceof Class)) {_			throw new IllegalStateException(_					"Bean class name [" + beanClassObject + "] has not been resolved into an actual Class")__		}_		return (Class) beanClassObject__	};return,the,class,of,the,wrapped,bean,if,already,resolved,return,the,bean,class,or,code,null,code,if,none,defined,throws,illegal,state,exception,if,the,bean,definition,does,not,define,a,bean,class,or,a,specified,bean,class,name,has,not,been,resolved,into,an,actual,class;public,class,get,bean,class,throws,illegal,state,exception,object,bean,class,object,this,bean,class,if,bean,class,object,null,throw,new,illegal,state,exception,no,bean,class,specified,on,bean,definition,if,bean,class,object,instanceof,class,throw,new,illegal,state,exception,bean,class,name,bean,class,object,has,not,been,resolved,into,an,actual,class,return,class,bean,class,object
AbstractBeanDefinition -> public Class<?> getBeanClass() throws IllegalStateException;1337202589;Return the class of the wrapped bean, if already resolved._@return the bean class, or <code>null</code> if none defined_@throws IllegalStateException if the bean definition does not define a bean class,_or a specified bean class name has not been resolved into an actual Class;public Class<?> getBeanClass() throws IllegalStateException {_		Object beanClassObject = this.beanClass__		if (beanClassObject == null) {_			throw new IllegalStateException("No bean class specified on bean definition")__		}_		if (!(beanClassObject instanceof Class)) {_			throw new IllegalStateException(_					"Bean class name [" + beanClassObject + "] has not been resolved into an actual Class")__		}_		return (Class) beanClassObject__	};return,the,class,of,the,wrapped,bean,if,already,resolved,return,the,bean,class,or,code,null,code,if,none,defined,throws,illegal,state,exception,if,the,bean,definition,does,not,define,a,bean,class,or,a,specified,bean,class,name,has,not,been,resolved,into,an,actual,class;public,class,get,bean,class,throws,illegal,state,exception,object,bean,class,object,this,bean,class,if,bean,class,object,null,throw,new,illegal,state,exception,no,bean,class,specified,on,bean,definition,if,bean,class,object,instanceof,class,throw,new,illegal,state,exception,bean,class,name,bean,class,object,has,not,been,resolved,into,an,actual,class,return,class,bean,class,object
AbstractBeanDefinition -> public Class<?> getBeanClass() throws IllegalStateException;1356735495;Return the class of the wrapped bean, if already resolved._@return the bean class, or {@code null} if none defined_@throws IllegalStateException if the bean definition does not define a bean class,_or a specified bean class name has not been resolved into an actual Class;public Class<?> getBeanClass() throws IllegalStateException {_		Object beanClassObject = this.beanClass__		if (beanClassObject == null) {_			throw new IllegalStateException("No bean class specified on bean definition")__		}_		if (!(beanClassObject instanceof Class)) {_			throw new IllegalStateException(_					"Bean class name [" + beanClassObject + "] has not been resolved into an actual Class")__		}_		return (Class) beanClassObject__	};return,the,class,of,the,wrapped,bean,if,already,resolved,return,the,bean,class,or,code,null,if,none,defined,throws,illegal,state,exception,if,the,bean,definition,does,not,define,a,bean,class,or,a,specified,bean,class,name,has,not,been,resolved,into,an,actual,class;public,class,get,bean,class,throws,illegal,state,exception,object,bean,class,object,this,bean,class,if,bean,class,object,null,throw,new,illegal,state,exception,no,bean,class,specified,on,bean,definition,if,bean,class,object,instanceof,class,throw,new,illegal,state,exception,bean,class,name,bean,class,object,has,not,been,resolved,into,an,actual,class,return,class,bean,class,object
AbstractBeanDefinition -> public Class<?> getBeanClass() throws IllegalStateException;1357119239;Return the class of the wrapped bean, if already resolved._@return the bean class, or {@code null} if none defined_@throws IllegalStateException if the bean definition does not define a bean class,_or a specified bean class name has not been resolved into an actual Class;public Class<?> getBeanClass() throws IllegalStateException {_		Object beanClassObject = this.beanClass__		if (beanClassObject == null) {_			throw new IllegalStateException("No bean class specified on bean definition")__		}_		if (!(beanClassObject instanceof Class)) {_			throw new IllegalStateException(_					"Bean class name [" + beanClassObject + "] has not been resolved into an actual Class")__		}_		return (Class) beanClassObject__	};return,the,class,of,the,wrapped,bean,if,already,resolved,return,the,bean,class,or,code,null,if,none,defined,throws,illegal,state,exception,if,the,bean,definition,does,not,define,a,bean,class,or,a,specified,bean,class,name,has,not,been,resolved,into,an,actual,class;public,class,get,bean,class,throws,illegal,state,exception,object,bean,class,object,this,bean,class,if,bean,class,object,null,throw,new,illegal,state,exception,no,bean,class,specified,on,bean,definition,if,bean,class,object,instanceof,class,throw,new,illegal,state,exception,bean,class,name,bean,class,object,has,not,been,resolved,into,an,actual,class,return,class,bean,class,object
AbstractBeanDefinition -> public Class<?> getBeanClass() throws IllegalStateException;1367508310;Return the class of the wrapped bean, if already resolved._@return the bean class, or {@code null} if none defined_@throws IllegalStateException if the bean definition does not define a bean class,_or a specified bean class name has not been resolved into an actual Class;public Class<?> getBeanClass() throws IllegalStateException {_		Object beanClassObject = this.beanClass__		if (beanClassObject == null) {_			throw new IllegalStateException("No bean class specified on bean definition")__		}_		if (!(beanClassObject instanceof Class)) {_			throw new IllegalStateException(_					"Bean class name [" + beanClassObject + "] has not been resolved into an actual Class")__		}_		return (Class) beanClassObject__	};return,the,class,of,the,wrapped,bean,if,already,resolved,return,the,bean,class,or,code,null,if,none,defined,throws,illegal,state,exception,if,the,bean,definition,does,not,define,a,bean,class,or,a,specified,bean,class,name,has,not,been,resolved,into,an,actual,class;public,class,get,bean,class,throws,illegal,state,exception,object,bean,class,object,this,bean,class,if,bean,class,object,null,throw,new,illegal,state,exception,no,bean,class,specified,on,bean,definition,if,bean,class,object,instanceof,class,throw,new,illegal,state,exception,bean,class,name,bean,class,object,has,not,been,resolved,into,an,actual,class,return,class,bean,class,object
AbstractBeanDefinition -> public Class<?> getBeanClass() throws IllegalStateException;1367943112;Return the class of the wrapped bean, if already resolved._@return the bean class, or {@code null} if none defined_@throws IllegalStateException if the bean definition does not define a bean class,_or a specified bean class name has not been resolved into an actual Class;public Class<?> getBeanClass() throws IllegalStateException {_		Object beanClassObject = this.beanClass__		if (beanClassObject == null) {_			throw new IllegalStateException("No bean class specified on bean definition")__		}_		if (!(beanClassObject instanceof Class)) {_			throw new IllegalStateException(_					"Bean class name [" + beanClassObject + "] has not been resolved into an actual Class")__		}_		return (Class) beanClassObject__	};return,the,class,of,the,wrapped,bean,if,already,resolved,return,the,bean,class,or,code,null,if,none,defined,throws,illegal,state,exception,if,the,bean,definition,does,not,define,a,bean,class,or,a,specified,bean,class,name,has,not,been,resolved,into,an,actual,class;public,class,get,bean,class,throws,illegal,state,exception,object,bean,class,object,this,bean,class,if,bean,class,object,null,throw,new,illegal,state,exception,no,bean,class,specified,on,bean,definition,if,bean,class,object,instanceof,class,throw,new,illegal,state,exception,bean,class,name,bean,class,object,has,not,been,resolved,into,an,actual,class,return,class,bean,class,object
AbstractBeanDefinition -> public Class<?> getBeanClass() throws IllegalStateException;1368482696;Return the class of the wrapped bean, if already resolved._@return the bean class, or {@code null} if none defined_@throws IllegalStateException if the bean definition does not define a bean class,_or a specified bean class name has not been resolved into an actual Class;public Class<?> getBeanClass() throws IllegalStateException {_		Object beanClassObject = this.beanClass__		if (beanClassObject == null) {_			throw new IllegalStateException("No bean class specified on bean definition")__		}_		if (!(beanClassObject instanceof Class)) {_			throw new IllegalStateException(_					"Bean class name [" + beanClassObject + "] has not been resolved into an actual Class")__		}_		return (Class) beanClassObject__	};return,the,class,of,the,wrapped,bean,if,already,resolved,return,the,bean,class,or,code,null,if,none,defined,throws,illegal,state,exception,if,the,bean,definition,does,not,define,a,bean,class,or,a,specified,bean,class,name,has,not,been,resolved,into,an,actual,class;public,class,get,bean,class,throws,illegal,state,exception,object,bean,class,object,this,bean,class,if,bean,class,object,null,throw,new,illegal,state,exception,no,bean,class,specified,on,bean,definition,if,bean,class,object,instanceof,class,throw,new,illegal,state,exception,bean,class,name,bean,class,object,has,not,been,resolved,into,an,actual,class,return,class,bean,class,object
AbstractBeanDefinition -> public Class<?> getBeanClass() throws IllegalStateException;1385412762;Return the class of the wrapped bean, if already resolved._@return the bean class, or {@code null} if none defined_@throws IllegalStateException if the bean definition does not define a bean class,_or a specified bean class name has not been resolved into an actual Class;public Class<?> getBeanClass() throws IllegalStateException {_		Object beanClassObject = this.beanClass__		if (beanClassObject == null) {_			throw new IllegalStateException("No bean class specified on bean definition")__		}_		if (!(beanClassObject instanceof Class)) {_			throw new IllegalStateException(_					"Bean class name [" + beanClassObject + "] has not been resolved into an actual Class")__		}_		return (Class<?>) beanClassObject__	};return,the,class,of,the,wrapped,bean,if,already,resolved,return,the,bean,class,or,code,null,if,none,defined,throws,illegal,state,exception,if,the,bean,definition,does,not,define,a,bean,class,or,a,specified,bean,class,name,has,not,been,resolved,into,an,actual,class;public,class,get,bean,class,throws,illegal,state,exception,object,bean,class,object,this,bean,class,if,bean,class,object,null,throw,new,illegal,state,exception,no,bean,class,specified,on,bean,definition,if,bean,class,object,instanceof,class,throw,new,illegal,state,exception,bean,class,name,bean,class,object,has,not,been,resolved,into,an,actual,class,return,class,bean,class,object
AbstractBeanDefinition -> public Class<?> getBeanClass() throws IllegalStateException;1392245317;Return the class of the wrapped bean, if already resolved._@return the bean class, or {@code null} if none defined_@throws IllegalStateException if the bean definition does not define a bean class,_or a specified bean class name has not been resolved into an actual Class;public Class<?> getBeanClass() throws IllegalStateException {_		Object beanClassObject = this.beanClass__		if (beanClassObject == null) {_			throw new IllegalStateException("No bean class specified on bean definition")__		}_		if (!(beanClassObject instanceof Class)) {_			throw new IllegalStateException(_					"Bean class name [" + beanClassObject + "] has not been resolved into an actual Class")__		}_		return (Class<?>) beanClassObject__	};return,the,class,of,the,wrapped,bean,if,already,resolved,return,the,bean,class,or,code,null,if,none,defined,throws,illegal,state,exception,if,the,bean,definition,does,not,define,a,bean,class,or,a,specified,bean,class,name,has,not,been,resolved,into,an,actual,class;public,class,get,bean,class,throws,illegal,state,exception,object,bean,class,object,this,bean,class,if,bean,class,object,null,throw,new,illegal,state,exception,no,bean,class,specified,on,bean,definition,if,bean,class,object,instanceof,class,throw,new,illegal,state,exception,bean,class,name,bean,class,object,has,not,been,resolved,into,an,actual,class,return,class,bean,class,object
AbstractBeanDefinition -> public Class<?> getBeanClass() throws IllegalStateException;1397163142;Return the class of the wrapped bean, if already resolved._@return the bean class, or {@code null} if none defined_@throws IllegalStateException if the bean definition does not define a bean class,_or a specified bean class name has not been resolved into an actual Class;public Class<?> getBeanClass() throws IllegalStateException {_		Object beanClassObject = this.beanClass__		if (beanClassObject == null) {_			throw new IllegalStateException("No bean class specified on bean definition")__		}_		if (!(beanClassObject instanceof Class)) {_			throw new IllegalStateException(_					"Bean class name [" + beanClassObject + "] has not been resolved into an actual Class")__		}_		return (Class<?>) beanClassObject__	};return,the,class,of,the,wrapped,bean,if,already,resolved,return,the,bean,class,or,code,null,if,none,defined,throws,illegal,state,exception,if,the,bean,definition,does,not,define,a,bean,class,or,a,specified,bean,class,name,has,not,been,resolved,into,an,actual,class;public,class,get,bean,class,throws,illegal,state,exception,object,bean,class,object,this,bean,class,if,bean,class,object,null,throw,new,illegal,state,exception,no,bean,class,specified,on,bean,definition,if,bean,class,object,instanceof,class,throw,new,illegal,state,exception,bean,class,name,bean,class,object,has,not,been,resolved,into,an,actual,class,return,class,bean,class,object
AbstractBeanDefinition -> public Class<?> getBeanClass() throws IllegalStateException;1398898390;Return the class of the wrapped bean, if already resolved._@return the bean class, or {@code null} if none defined_@throws IllegalStateException if the bean definition does not define a bean class,_or a specified bean class name has not been resolved into an actual Class;public Class<?> getBeanClass() throws IllegalStateException {_		Object beanClassObject = this.beanClass__		if (beanClassObject == null) {_			throw new IllegalStateException("No bean class specified on bean definition")__		}_		if (!(beanClassObject instanceof Class)) {_			throw new IllegalStateException(_					"Bean class name [" + beanClassObject + "] has not been resolved into an actual Class")__		}_		return (Class<?>) beanClassObject__	};return,the,class,of,the,wrapped,bean,if,already,resolved,return,the,bean,class,or,code,null,if,none,defined,throws,illegal,state,exception,if,the,bean,definition,does,not,define,a,bean,class,or,a,specified,bean,class,name,has,not,been,resolved,into,an,actual,class;public,class,get,bean,class,throws,illegal,state,exception,object,bean,class,object,this,bean,class,if,bean,class,object,null,throw,new,illegal,state,exception,no,bean,class,specified,on,bean,definition,if,bean,class,object,instanceof,class,throw,new,illegal,state,exception,bean,class,name,bean,class,object,has,not,been,resolved,into,an,actual,class,return,class,bean,class,object
AbstractBeanDefinition -> public Class<?> getBeanClass() throws IllegalStateException;1407511029;Return the class of the wrapped bean, if already resolved._@return the bean class, or {@code null} if none defined_@throws IllegalStateException if the bean definition does not define a bean class,_or a specified bean class name has not been resolved into an actual Class;public Class<?> getBeanClass() throws IllegalStateException {_		Object beanClassObject = this.beanClass__		if (beanClassObject == null) {_			throw new IllegalStateException("No bean class specified on bean definition")__		}_		if (!(beanClassObject instanceof Class)) {_			throw new IllegalStateException(_					"Bean class name [" + beanClassObject + "] has not been resolved into an actual Class")__		}_		return (Class<?>) beanClassObject__	};return,the,class,of,the,wrapped,bean,if,already,resolved,return,the,bean,class,or,code,null,if,none,defined,throws,illegal,state,exception,if,the,bean,definition,does,not,define,a,bean,class,or,a,specified,bean,class,name,has,not,been,resolved,into,an,actual,class;public,class,get,bean,class,throws,illegal,state,exception,object,bean,class,object,this,bean,class,if,bean,class,object,null,throw,new,illegal,state,exception,no,bean,class,specified,on,bean,definition,if,bean,class,object,instanceof,class,throw,new,illegal,state,exception,bean,class,name,bean,class,object,has,not,been,resolved,into,an,actual,class,return,class,bean,class,object
AbstractBeanDefinition -> public Class<?> getBeanClass() throws IllegalStateException;1432135182;Return the class of the wrapped bean, if already resolved._@return the bean class, or {@code null} if none defined_@throws IllegalStateException if the bean definition does not define a bean class,_or a specified bean class name has not been resolved into an actual Class;public Class<?> getBeanClass() throws IllegalStateException {_		Object beanClassObject = this.beanClass__		if (beanClassObject == null) {_			throw new IllegalStateException("No bean class specified on bean definition")__		}_		if (!(beanClassObject instanceof Class)) {_			throw new IllegalStateException(_					"Bean class name [" + beanClassObject + "] has not been resolved into an actual Class")__		}_		return (Class<?>) beanClassObject__	};return,the,class,of,the,wrapped,bean,if,already,resolved,return,the,bean,class,or,code,null,if,none,defined,throws,illegal,state,exception,if,the,bean,definition,does,not,define,a,bean,class,or,a,specified,bean,class,name,has,not,been,resolved,into,an,actual,class;public,class,get,bean,class,throws,illegal,state,exception,object,bean,class,object,this,bean,class,if,bean,class,object,null,throw,new,illegal,state,exception,no,bean,class,specified,on,bean,definition,if,bean,class,object,instanceof,class,throw,new,illegal,state,exception,bean,class,name,bean,class,object,has,not,been,resolved,into,an,actual,class,return,class,bean,class,object
AbstractBeanDefinition -> public Class<?> getBeanClass() throws IllegalStateException;1434204509;Return the class of the wrapped bean, if already resolved._@return the bean class, or {@code null} if none defined_@throws IllegalStateException if the bean definition does not define a bean class,_or a specified bean class name has not been resolved into an actual Class;public Class<?> getBeanClass() throws IllegalStateException {_		Object beanClassObject = this.beanClass__		if (beanClassObject == null) {_			throw new IllegalStateException("No bean class specified on bean definition")__		}_		if (!(beanClassObject instanceof Class)) {_			throw new IllegalStateException(_					"Bean class name [" + beanClassObject + "] has not been resolved into an actual Class")__		}_		return (Class<?>) beanClassObject__	};return,the,class,of,the,wrapped,bean,if,already,resolved,return,the,bean,class,or,code,null,if,none,defined,throws,illegal,state,exception,if,the,bean,definition,does,not,define,a,bean,class,or,a,specified,bean,class,name,has,not,been,resolved,into,an,actual,class;public,class,get,bean,class,throws,illegal,state,exception,object,bean,class,object,this,bean,class,if,bean,class,object,null,throw,new,illegal,state,exception,no,bean,class,specified,on,bean,definition,if,bean,class,object,instanceof,class,throw,new,illegal,state,exception,bean,class,name,bean,class,object,has,not,been,resolved,into,an,actual,class,return,class,bean,class,object
AbstractBeanDefinition -> public Class<?> getBeanClass() throws IllegalStateException;1447323728;Return the class of the wrapped bean, if already resolved._@return the bean class, or {@code null} if none defined_@throws IllegalStateException if the bean definition does not define a bean class,_or a specified bean class name has not been resolved into an actual Class;public Class<?> getBeanClass() throws IllegalStateException {_		Object beanClassObject = this.beanClass__		if (beanClassObject == null) {_			throw new IllegalStateException("No bean class specified on bean definition")__		}_		if (!(beanClassObject instanceof Class)) {_			throw new IllegalStateException(_					"Bean class name [" + beanClassObject + "] has not been resolved into an actual Class")__		}_		return (Class<?>) beanClassObject__	};return,the,class,of,the,wrapped,bean,if,already,resolved,return,the,bean,class,or,code,null,if,none,defined,throws,illegal,state,exception,if,the,bean,definition,does,not,define,a,bean,class,or,a,specified,bean,class,name,has,not,been,resolved,into,an,actual,class;public,class,get,bean,class,throws,illegal,state,exception,object,bean,class,object,this,bean,class,if,bean,class,object,null,throw,new,illegal,state,exception,no,bean,class,specified,on,bean,definition,if,bean,class,object,instanceof,class,throw,new,illegal,state,exception,bean,class,name,bean,class,object,has,not,been,resolved,into,an,actual,class,return,class,bean,class,object
AbstractBeanDefinition -> public Class<?> getBeanClass() throws IllegalStateException;1465226156;Return the class of the wrapped bean, if already resolved._@return the bean class, or {@code null} if none defined_@throws IllegalStateException if the bean definition does not define a bean class,_or a specified bean class name has not been resolved into an actual Class;public Class<?> getBeanClass() throws IllegalStateException {_		Object beanClassObject = this.beanClass__		if (beanClassObject == null) {_			throw new IllegalStateException("No bean class specified on bean definition")__		}_		if (!(beanClassObject instanceof Class)) {_			throw new IllegalStateException(_					"Bean class name [" + beanClassObject + "] has not been resolved into an actual Class")__		}_		return (Class<?>) beanClassObject__	};return,the,class,of,the,wrapped,bean,if,already,resolved,return,the,bean,class,or,code,null,if,none,defined,throws,illegal,state,exception,if,the,bean,definition,does,not,define,a,bean,class,or,a,specified,bean,class,name,has,not,been,resolved,into,an,actual,class;public,class,get,bean,class,throws,illegal,state,exception,object,bean,class,object,this,bean,class,if,bean,class,object,null,throw,new,illegal,state,exception,no,bean,class,specified,on,bean,definition,if,bean,class,object,instanceof,class,throw,new,illegal,state,exception,bean,class,name,bean,class,object,has,not,been,resolved,into,an,actual,class,return,class,bean,class,object
AbstractBeanDefinition -> public Class<?> getBeanClass() throws IllegalStateException;1467730834;Return the class of the wrapped bean, if already resolved._@return the bean class, or {@code null} if none defined_@throws IllegalStateException if the bean definition does not define a bean class,_or a specified bean class name has not been resolved into an actual Class;public Class<?> getBeanClass() throws IllegalStateException {_		Object beanClassObject = this.beanClass__		if (beanClassObject == null) {_			throw new IllegalStateException("No bean class specified on bean definition")__		}_		if (!(beanClassObject instanceof Class)) {_			throw new IllegalStateException(_					"Bean class name [" + beanClassObject + "] has not been resolved into an actual Class")__		}_		return (Class<?>) beanClassObject__	};return,the,class,of,the,wrapped,bean,if,already,resolved,return,the,bean,class,or,code,null,if,none,defined,throws,illegal,state,exception,if,the,bean,definition,does,not,define,a,bean,class,or,a,specified,bean,class,name,has,not,been,resolved,into,an,actual,class;public,class,get,bean,class,throws,illegal,state,exception,object,bean,class,object,this,bean,class,if,bean,class,object,null,throw,new,illegal,state,exception,no,bean,class,specified,on,bean,definition,if,bean,class,object,instanceof,class,throw,new,illegal,state,exception,bean,class,name,bean,class,object,has,not,been,resolved,into,an,actual,class,return,class,bean,class,object
AbstractBeanDefinition -> public Class<?> getBeanClass() throws IllegalStateException;1467846264;Return the class of the wrapped bean, if already resolved._@return the bean class, or {@code null} if none defined_@throws IllegalStateException if the bean definition does not define a bean class,_or a specified bean class name has not been resolved into an actual Class;public Class<?> getBeanClass() throws IllegalStateException {_		Object beanClassObject = this.beanClass__		if (beanClassObject == null) {_			throw new IllegalStateException("No bean class specified on bean definition")__		}_		if (!(beanClassObject instanceof Class)) {_			throw new IllegalStateException(_					"Bean class name [" + beanClassObject + "] has not been resolved into an actual Class")__		}_		return (Class<?>) beanClassObject__	};return,the,class,of,the,wrapped,bean,if,already,resolved,return,the,bean,class,or,code,null,if,none,defined,throws,illegal,state,exception,if,the,bean,definition,does,not,define,a,bean,class,or,a,specified,bean,class,name,has,not,been,resolved,into,an,actual,class;public,class,get,bean,class,throws,illegal,state,exception,object,bean,class,object,this,bean,class,if,bean,class,object,null,throw,new,illegal,state,exception,no,bean,class,specified,on,bean,definition,if,bean,class,object,instanceof,class,throw,new,illegal,state,exception,bean,class,name,bean,class,object,has,not,been,resolved,into,an,actual,class,return,class,bean,class,object
AbstractBeanDefinition -> public Class<?> getBeanClass() throws IllegalStateException;1482091545;Return the class of the wrapped bean, if already resolved._@return the bean class, or {@code null} if none defined_@throws IllegalStateException if the bean definition does not define a bean class,_or a specified bean class name has not been resolved into an actual Class;public Class<?> getBeanClass() throws IllegalStateException {_		Object beanClassObject = this.beanClass__		if (beanClassObject == null) {_			throw new IllegalStateException("No bean class specified on bean definition")__		}_		if (!(beanClassObject instanceof Class)) {_			throw new IllegalStateException(_					"Bean class name [" + beanClassObject + "] has not been resolved into an actual Class")__		}_		return (Class<?>) beanClassObject__	};return,the,class,of,the,wrapped,bean,if,already,resolved,return,the,bean,class,or,code,null,if,none,defined,throws,illegal,state,exception,if,the,bean,definition,does,not,define,a,bean,class,or,a,specified,bean,class,name,has,not,been,resolved,into,an,actual,class;public,class,get,bean,class,throws,illegal,state,exception,object,bean,class,object,this,bean,class,if,bean,class,object,null,throw,new,illegal,state,exception,no,bean,class,specified,on,bean,definition,if,bean,class,object,instanceof,class,throw,new,illegal,state,exception,bean,class,name,bean,class,object,has,not,been,resolved,into,an,actual,class,return,class,bean,class,object
AbstractBeanDefinition -> public Class<?> getBeanClass() throws IllegalStateException;1483093818;Return the class of the wrapped bean, if already resolved._@return the bean class, or {@code null} if none defined_@throws IllegalStateException if the bean definition does not define a bean class,_or a specified bean class name has not been resolved into an actual Class;public Class<?> getBeanClass() throws IllegalStateException {_		Object beanClassObject = this.beanClass__		if (beanClassObject == null) {_			throw new IllegalStateException("No bean class specified on bean definition")__		}_		if (!(beanClassObject instanceof Class)) {_			throw new IllegalStateException(_					"Bean class name [" + beanClassObject + "] has not been resolved into an actual Class")__		}_		return (Class<?>) beanClassObject__	};return,the,class,of,the,wrapped,bean,if,already,resolved,return,the,bean,class,or,code,null,if,none,defined,throws,illegal,state,exception,if,the,bean,definition,does,not,define,a,bean,class,or,a,specified,bean,class,name,has,not,been,resolved,into,an,actual,class;public,class,get,bean,class,throws,illegal,state,exception,object,bean,class,object,this,bean,class,if,bean,class,object,null,throw,new,illegal,state,exception,no,bean,class,specified,on,bean,definition,if,bean,class,object,instanceof,class,throw,new,illegal,state,exception,bean,class,name,bean,class,object,has,not,been,resolved,into,an,actual,class,return,class,bean,class,object
AbstractBeanDefinition -> public Class<?> getBeanClass() throws IllegalStateException;1496837955;Return the class of the wrapped bean, if already resolved._@return the bean class, or {@code null} if none defined_@throws IllegalStateException if the bean definition does not define a bean class,_or a specified bean class name has not been resolved into an actual Class;public Class<?> getBeanClass() throws IllegalStateException {_		Object beanClassObject = this.beanClass__		if (beanClassObject == null) {_			throw new IllegalStateException("No bean class specified on bean definition")__		}_		if (!(beanClassObject instanceof Class)) {_			throw new IllegalStateException(_					"Bean class name [" + beanClassObject + "] has not been resolved into an actual Class")__		}_		return (Class<?>) beanClassObject__	};return,the,class,of,the,wrapped,bean,if,already,resolved,return,the,bean,class,or,code,null,if,none,defined,throws,illegal,state,exception,if,the,bean,definition,does,not,define,a,bean,class,or,a,specified,bean,class,name,has,not,been,resolved,into,an,actual,class;public,class,get,bean,class,throws,illegal,state,exception,object,bean,class,object,this,bean,class,if,bean,class,object,null,throw,new,illegal,state,exception,no,bean,class,specified,on,bean,definition,if,bean,class,object,instanceof,class,throw,new,illegal,state,exception,bean,class,name,bean,class,object,has,not,been,resolved,into,an,actual,class,return,class,bean,class,object
AbstractBeanDefinition -> public Class<?> getBeanClass() throws IllegalStateException;1498780456;Return the class of the wrapped bean, if already resolved._@return the bean class, or {@code null} if none defined_@throws IllegalStateException if the bean definition does not define a bean class,_or a specified bean class name has not been resolved into an actual Class;public Class<?> getBeanClass() throws IllegalStateException {_		Object beanClassObject = this.beanClass__		if (beanClassObject == null) {_			throw new IllegalStateException("No bean class specified on bean definition")__		}_		if (!(beanClassObject instanceof Class)) {_			throw new IllegalStateException(_					"Bean class name [" + beanClassObject + "] has not been resolved into an actual Class")__		}_		return (Class<?>) beanClassObject__	};return,the,class,of,the,wrapped,bean,if,already,resolved,return,the,bean,class,or,code,null,if,none,defined,throws,illegal,state,exception,if,the,bean,definition,does,not,define,a,bean,class,or,a,specified,bean,class,name,has,not,been,resolved,into,an,actual,class;public,class,get,bean,class,throws,illegal,state,exception,object,bean,class,object,this,bean,class,if,bean,class,object,null,throw,new,illegal,state,exception,no,bean,class,specified,on,bean,definition,if,bean,class,object,instanceof,class,throw,new,illegal,state,exception,bean,class,name,bean,class,object,has,not,been,resolved,into,an,actual,class,return,class,bean,class,object
AbstractBeanDefinition -> public Class<?> getBeanClass() throws IllegalStateException;1502974979;Return the class of the wrapped bean, if already resolved._@return the bean class, or {@code null} if none defined_@throws IllegalStateException if the bean definition does not define a bean class,_or a specified bean class name has not been resolved into an actual Class;public Class<?> getBeanClass() throws IllegalStateException {_		Object beanClassObject = this.beanClass__		if (beanClassObject == null) {_			throw new IllegalStateException("No bean class specified on bean definition")__		}_		if (!(beanClassObject instanceof Class)) {_			throw new IllegalStateException(_					"Bean class name [" + beanClassObject + "] has not been resolved into an actual Class")__		}_		return (Class<?>) beanClassObject__	};return,the,class,of,the,wrapped,bean,if,already,resolved,return,the,bean,class,or,code,null,if,none,defined,throws,illegal,state,exception,if,the,bean,definition,does,not,define,a,bean,class,or,a,specified,bean,class,name,has,not,been,resolved,into,an,actual,class;public,class,get,bean,class,throws,illegal,state,exception,object,bean,class,object,this,bean,class,if,bean,class,object,null,throw,new,illegal,state,exception,no,bean,class,specified,on,bean,definition,if,bean,class,object,instanceof,class,throw,new,illegal,state,exception,bean,class,name,bean,class,object,has,not,been,resolved,into,an,actual,class,return,class,bean,class,object
AbstractBeanDefinition -> public Class<?> getBeanClass() throws IllegalStateException;1503008029;Return the class of the wrapped bean, if already resolved._@return the bean class, or {@code null} if none defined_@throws IllegalStateException if the bean definition does not define a bean class,_or a specified bean class name has not been resolved into an actual Class;public Class<?> getBeanClass() throws IllegalStateException {_		Object beanClassObject = this.beanClass__		if (beanClassObject == null) {_			throw new IllegalStateException("No bean class specified on bean definition")__		}_		if (!(beanClassObject instanceof Class)) {_			throw new IllegalStateException(_					"Bean class name [" + beanClassObject + "] has not been resolved into an actual Class")__		}_		return (Class<?>) beanClassObject__	};return,the,class,of,the,wrapped,bean,if,already,resolved,return,the,bean,class,or,code,null,if,none,defined,throws,illegal,state,exception,if,the,bean,definition,does,not,define,a,bean,class,or,a,specified,bean,class,name,has,not,been,resolved,into,an,actual,class;public,class,get,bean,class,throws,illegal,state,exception,object,bean,class,object,this,bean,class,if,bean,class,object,null,throw,new,illegal,state,exception,no,bean,class,specified,on,bean,definition,if,bean,class,object,instanceof,class,throw,new,illegal,state,exception,bean,class,name,bean,class,object,has,not,been,resolved,into,an,actual,class,return,class,bean,class,object
AbstractBeanDefinition -> public Class<?> getBeanClass() throws IllegalStateException;1510606271;Return the class of the wrapped bean, if already resolved._@return the bean class, or {@code null} if none defined_@throws IllegalStateException if the bean definition does not define a bean class,_or a specified bean class name has not been resolved into an actual Class;public Class<?> getBeanClass() throws IllegalStateException {_		Object beanClassObject = this.beanClass__		if (beanClassObject == null) {_			throw new IllegalStateException("No bean class specified on bean definition")__		}_		if (!(beanClassObject instanceof Class)) {_			throw new IllegalStateException(_					"Bean class name [" + beanClassObject + "] has not been resolved into an actual Class")__		}_		return (Class<?>) beanClassObject__	};return,the,class,of,the,wrapped,bean,if,already,resolved,return,the,bean,class,or,code,null,if,none,defined,throws,illegal,state,exception,if,the,bean,definition,does,not,define,a,bean,class,or,a,specified,bean,class,name,has,not,been,resolved,into,an,actual,class;public,class,get,bean,class,throws,illegal,state,exception,object,bean,class,object,this,bean,class,if,bean,class,object,null,throw,new,illegal,state,exception,no,bean,class,specified,on,bean,definition,if,bean,class,object,instanceof,class,throw,new,illegal,state,exception,bean,class,name,bean,class,object,has,not,been,resolved,into,an,actual,class,return,class,bean,class,object
AbstractBeanDefinition -> public Class<?> getBeanClass() throws IllegalStateException;1510675876;Return the class of the wrapped bean, if already resolved._@return the bean class, or {@code null} if none defined_@throws IllegalStateException if the bean definition does not define a bean class,_or a specified bean class name has not been resolved into an actual Class;public Class<?> getBeanClass() throws IllegalStateException {_		Object beanClassObject = this.beanClass__		if (beanClassObject == null) {_			throw new IllegalStateException("No bean class specified on bean definition")__		}_		if (!(beanClassObject instanceof Class)) {_			throw new IllegalStateException(_					"Bean class name [" + beanClassObject + "] has not been resolved into an actual Class")__		}_		return (Class<?>) beanClassObject__	};return,the,class,of,the,wrapped,bean,if,already,resolved,return,the,bean,class,or,code,null,if,none,defined,throws,illegal,state,exception,if,the,bean,definition,does,not,define,a,bean,class,or,a,specified,bean,class,name,has,not,been,resolved,into,an,actual,class;public,class,get,bean,class,throws,illegal,state,exception,object,bean,class,object,this,bean,class,if,bean,class,object,null,throw,new,illegal,state,exception,no,bean,class,specified,on,bean,definition,if,bean,class,object,instanceof,class,throw,new,illegal,state,exception,bean,class,name,bean,class,object,has,not,been,resolved,into,an,actual,class,return,class,bean,class,object
AbstractBeanDefinition -> public Class<?> getBeanClass() throws IllegalStateException;1530174524;Return the class of the wrapped bean, if already resolved._@return the bean class, or {@code null} if none defined_@throws IllegalStateException if the bean definition does not define a bean class,_or a specified bean class name has not been resolved into an actual Class;public Class<?> getBeanClass() throws IllegalStateException {_		Object beanClassObject = this.beanClass__		if (beanClassObject == null) {_			throw new IllegalStateException("No bean class specified on bean definition")__		}_		if (!(beanClassObject instanceof Class)) {_			throw new IllegalStateException(_					"Bean class name [" + beanClassObject + "] has not been resolved into an actual Class")__		}_		return (Class<?>) beanClassObject__	};return,the,class,of,the,wrapped,bean,if,already,resolved,return,the,bean,class,or,code,null,if,none,defined,throws,illegal,state,exception,if,the,bean,definition,does,not,define,a,bean,class,or,a,specified,bean,class,name,has,not,been,resolved,into,an,actual,class;public,class,get,bean,class,throws,illegal,state,exception,object,bean,class,object,this,bean,class,if,bean,class,object,null,throw,new,illegal,state,exception,no,bean,class,specified,on,bean,definition,if,bean,class,object,instanceof,class,throw,new,illegal,state,exception,bean,class,name,bean,class,object,has,not,been,resolved,into,an,actual,class,return,class,bean,class,object
AbstractBeanDefinition -> public Class<?> getBeanClass() throws IllegalStateException;1530174524;Return the class of the wrapped bean, if already resolved._@return the bean class, or {@code null} if none defined_@throws IllegalStateException if the bean definition does not define a bean class,_or a specified bean class name has not been resolved into an actual Class;public Class<?> getBeanClass() throws IllegalStateException {_		Object beanClassObject = this.beanClass__		if (beanClassObject == null) {_			throw new IllegalStateException("No bean class specified on bean definition")__		}_		if (!(beanClassObject instanceof Class)) {_			throw new IllegalStateException(_					"Bean class name [" + beanClassObject + "] has not been resolved into an actual Class")__		}_		return (Class<?>) beanClassObject__	};return,the,class,of,the,wrapped,bean,if,already,resolved,return,the,bean,class,or,code,null,if,none,defined,throws,illegal,state,exception,if,the,bean,definition,does,not,define,a,bean,class,or,a,specified,bean,class,name,has,not,been,resolved,into,an,actual,class;public,class,get,bean,class,throws,illegal,state,exception,object,bean,class,object,this,bean,class,if,bean,class,object,null,throw,new,illegal,state,exception,no,bean,class,specified,on,bean,definition,if,bean,class,object,instanceof,class,throw,new,illegal,state,exception,bean,class,name,bean,class,object,has,not,been,resolved,into,an,actual,class,return,class,bean,class,object
AbstractBeanDefinition -> public Class<?> getBeanClass() throws IllegalStateException;1530174524;Return the class of the wrapped bean, if already resolved._@return the bean class, or {@code null} if none defined_@throws IllegalStateException if the bean definition does not define a bean class,_or a specified bean class name has not been resolved into an actual Class;public Class<?> getBeanClass() throws IllegalStateException {_		Object beanClassObject = this.beanClass__		if (beanClassObject == null) {_			throw new IllegalStateException("No bean class specified on bean definition")__		}_		if (!(beanClassObject instanceof Class)) {_			throw new IllegalStateException(_					"Bean class name [" + beanClassObject + "] has not been resolved into an actual Class")__		}_		return (Class<?>) beanClassObject__	};return,the,class,of,the,wrapped,bean,if,already,resolved,return,the,bean,class,or,code,null,if,none,defined,throws,illegal,state,exception,if,the,bean,definition,does,not,define,a,bean,class,or,a,specified,bean,class,name,has,not,been,resolved,into,an,actual,class;public,class,get,bean,class,throws,illegal,state,exception,object,bean,class,object,this,bean,class,if,bean,class,object,null,throw,new,illegal,state,exception,no,bean,class,specified,on,bean,definition,if,bean,class,object,instanceof,class,throw,new,illegal,state,exception,bean,class,name,bean,class,object,has,not,been,resolved,into,an,actual,class,return,class,bean,class,object
AbstractBeanDefinition -> public Class<?> getBeanClass() throws IllegalStateException;1530190293;Return the class of the wrapped bean, if already resolved._@return the bean class, or {@code null} if none defined_@throws IllegalStateException if the bean definition does not define a bean class,_or a specified bean class name has not been resolved into an actual Class;public Class<?> getBeanClass() throws IllegalStateException {_		Object beanClassObject = this.beanClass__		if (beanClassObject == null) {_			throw new IllegalStateException("No bean class specified on bean definition")__		}_		if (!(beanClassObject instanceof Class)) {_			throw new IllegalStateException(_					"Bean class name [" + beanClassObject + "] has not been resolved into an actual Class")__		}_		return (Class<?>) beanClassObject__	};return,the,class,of,the,wrapped,bean,if,already,resolved,return,the,bean,class,or,code,null,if,none,defined,throws,illegal,state,exception,if,the,bean,definition,does,not,define,a,bean,class,or,a,specified,bean,class,name,has,not,been,resolved,into,an,actual,class;public,class,get,bean,class,throws,illegal,state,exception,object,bean,class,object,this,bean,class,if,bean,class,object,null,throw,new,illegal,state,exception,no,bean,class,specified,on,bean,definition,if,bean,class,object,instanceof,class,throw,new,illegal,state,exception,bean,class,name,bean,class,object,has,not,been,resolved,into,an,actual,class,return,class,bean,class,object
AbstractBeanDefinition -> public Class<?> getBeanClass() throws IllegalStateException;1532981251;Return the class of the wrapped bean, if already resolved._@return the bean class, or {@code null} if none defined_@throws IllegalStateException if the bean definition does not define a bean class,_or a specified bean class name has not been resolved into an actual Class;public Class<?> getBeanClass() throws IllegalStateException {_		Object beanClassObject = this.beanClass__		if (beanClassObject == null) {_			throw new IllegalStateException("No bean class specified on bean definition")__		}_		if (!(beanClassObject instanceof Class)) {_			throw new IllegalStateException(_					"Bean class name [" + beanClassObject + "] has not been resolved into an actual Class")__		}_		return (Class<?>) beanClassObject__	};return,the,class,of,the,wrapped,bean,if,already,resolved,return,the,bean,class,or,code,null,if,none,defined,throws,illegal,state,exception,if,the,bean,definition,does,not,define,a,bean,class,or,a,specified,bean,class,name,has,not,been,resolved,into,an,actual,class;public,class,get,bean,class,throws,illegal,state,exception,object,bean,class,object,this,bean,class,if,bean,class,object,null,throw,new,illegal,state,exception,no,bean,class,specified,on,bean,definition,if,bean,class,object,instanceof,class,throw,new,illegal,state,exception,bean,class,name,bean,class,object,has,not,been,resolved,into,an,actual,class,return,class,bean,class,object
AbstractBeanDefinition -> public Class<?> getBeanClass() throws IllegalStateException;1536863076;Return the class of the wrapped bean, if already resolved._@return the bean class, or {@code null} if none defined_@throws IllegalStateException if the bean definition does not define a bean class,_or a specified bean class name has not been resolved into an actual Class;public Class<?> getBeanClass() throws IllegalStateException {_		Object beanClassObject = this.beanClass__		if (beanClassObject == null) {_			throw new IllegalStateException("No bean class specified on bean definition")__		}_		if (!(beanClassObject instanceof Class)) {_			throw new IllegalStateException(_					"Bean class name [" + beanClassObject + "] has not been resolved into an actual Class")__		}_		return (Class<?>) beanClassObject__	};return,the,class,of,the,wrapped,bean,if,already,resolved,return,the,bean,class,or,code,null,if,none,defined,throws,illegal,state,exception,if,the,bean,definition,does,not,define,a,bean,class,or,a,specified,bean,class,name,has,not,been,resolved,into,an,actual,class;public,class,get,bean,class,throws,illegal,state,exception,object,bean,class,object,this,bean,class,if,bean,class,object,null,throw,new,illegal,state,exception,no,bean,class,specified,on,bean,definition,if,bean,class,object,instanceof,class,throw,new,illegal,state,exception,bean,class,name,bean,class,object,has,not,been,resolved,into,an,actual,class,return,class,bean,class,object
AbstractBeanDefinition -> public void setAutowireCandidate(boolean autowireCandidate);1328020251;Set whether this bean is a candidate for getting autowired into some other bean.;public void setAutowireCandidate(boolean autowireCandidate) {_		this.autowireCandidate = autowireCandidate__	};set,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;public,void,set,autowire,candidate,boolean,autowire,candidate,this,autowire,candidate,autowire,candidate
AbstractBeanDefinition -> public void setAutowireCandidate(boolean autowireCandidate);1337202589;Set whether this bean is a candidate for getting autowired into some other bean.;public void setAutowireCandidate(boolean autowireCandidate) {_		this.autowireCandidate = autowireCandidate__	};set,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;public,void,set,autowire,candidate,boolean,autowire,candidate,this,autowire,candidate,autowire,candidate
AbstractBeanDefinition -> public void setAutowireCandidate(boolean autowireCandidate);1357119239;Set whether this bean is a candidate for getting autowired into some other bean.;public void setAutowireCandidate(boolean autowireCandidate) {_		this.autowireCandidate = autowireCandidate__	};set,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;public,void,set,autowire,candidate,boolean,autowire,candidate,this,autowire,candidate,autowire,candidate
AbstractBeanDefinition -> public void setAutowireCandidate(boolean autowireCandidate);1367508310;Set whether this bean is a candidate for getting autowired into some other bean.;public void setAutowireCandidate(boolean autowireCandidate) {_		this.autowireCandidate = autowireCandidate__	};set,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;public,void,set,autowire,candidate,boolean,autowire,candidate,this,autowire,candidate,autowire,candidate
AbstractBeanDefinition -> public void setAutowireCandidate(boolean autowireCandidate);1367943112;Set whether this bean is a candidate for getting autowired into some other bean.;public void setAutowireCandidate(boolean autowireCandidate) {_		this.autowireCandidate = autowireCandidate__	};set,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;public,void,set,autowire,candidate,boolean,autowire,candidate,this,autowire,candidate,autowire,candidate
AbstractBeanDefinition -> public void setResourceDescription(String resourceDescription);1328020251;Set a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;public void setResourceDescription(String resourceDescription) {_		this.resource = new DescriptiveResource(resourceDescription)__	};set,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,description,string,resource,description,this,resource,new,descriptive,resource,resource,description
AbstractBeanDefinition -> public void setResourceDescription(String resourceDescription);1337202589;Set a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;public void setResourceDescription(String resourceDescription) {_		this.resource = new DescriptiveResource(resourceDescription)__	};set,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,description,string,resource,description,this,resource,new,descriptive,resource,resource,description
AbstractBeanDefinition -> public void setResourceDescription(String resourceDescription);1356735495;Set a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;public void setResourceDescription(String resourceDescription) {_		this.resource = new DescriptiveResource(resourceDescription)__	};set,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,description,string,resource,description,this,resource,new,descriptive,resource,resource,description
AbstractBeanDefinition -> public void setResourceDescription(String resourceDescription);1357119239;Set a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;public void setResourceDescription(String resourceDescription) {_		this.resource = new DescriptiveResource(resourceDescription)__	};set,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,description,string,resource,description,this,resource,new,descriptive,resource,resource,description
AbstractBeanDefinition -> public void setResourceDescription(String resourceDescription);1367508310;Set a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;public void setResourceDescription(String resourceDescription) {_		this.resource = new DescriptiveResource(resourceDescription)__	};set,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,description,string,resource,description,this,resource,new,descriptive,resource,resource,description
AbstractBeanDefinition -> public void setResourceDescription(String resourceDescription);1367943112;Set a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;public void setResourceDescription(String resourceDescription) {_		this.resource = new DescriptiveResource(resourceDescription)__	};set,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,description,string,resource,description,this,resource,new,descriptive,resource,resource,description
AbstractBeanDefinition -> public void setResourceDescription(String resourceDescription);1368482696;Set a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;public void setResourceDescription(String resourceDescription) {_		this.resource = new DescriptiveResource(resourceDescription)__	};set,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,description,string,resource,description,this,resource,new,descriptive,resource,resource,description
AbstractBeanDefinition -> public void setResourceDescription(String resourceDescription);1385412762;Set a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;public void setResourceDescription(String resourceDescription) {_		this.resource = new DescriptiveResource(resourceDescription)__	};set,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,description,string,resource,description,this,resource,new,descriptive,resource,resource,description
AbstractBeanDefinition -> public void setResourceDescription(String resourceDescription);1392245317;Set a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;public void setResourceDescription(String resourceDescription) {_		this.resource = new DescriptiveResource(resourceDescription)__	};set,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,description,string,resource,description,this,resource,new,descriptive,resource,resource,description
AbstractBeanDefinition -> public void setResourceDescription(String resourceDescription);1397163142;Set a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;public void setResourceDescription(String resourceDescription) {_		this.resource = new DescriptiveResource(resourceDescription)__	};set,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,description,string,resource,description,this,resource,new,descriptive,resource,resource,description
AbstractBeanDefinition -> public void setResourceDescription(String resourceDescription);1398898390;Set a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;public void setResourceDescription(String resourceDescription) {_		this.resource = new DescriptiveResource(resourceDescription)__	};set,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,description,string,resource,description,this,resource,new,descriptive,resource,resource,description
AbstractBeanDefinition -> public void setResourceDescription(String resourceDescription);1407511029;Set a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;public void setResourceDescription(String resourceDescription) {_		this.resource = new DescriptiveResource(resourceDescription)__	};set,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,description,string,resource,description,this,resource,new,descriptive,resource,resource,description
AbstractBeanDefinition -> public void setResourceDescription(String resourceDescription);1432135182;Set a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;public void setResourceDescription(String resourceDescription) {_		this.resource = new DescriptiveResource(resourceDescription)__	};set,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,description,string,resource,description,this,resource,new,descriptive,resource,resource,description
AbstractBeanDefinition -> public void setResourceDescription(String resourceDescription);1434204509;Set a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;public void setResourceDescription(String resourceDescription) {_		this.resource = new DescriptiveResource(resourceDescription)__	};set,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,description,string,resource,description,this,resource,new,descriptive,resource,resource,description
AbstractBeanDefinition -> public void setResourceDescription(String resourceDescription);1447323728;Set a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;public void setResourceDescription(String resourceDescription) {_		this.resource = new DescriptiveResource(resourceDescription)__	};set,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,description,string,resource,description,this,resource,new,descriptive,resource,resource,description
AbstractBeanDefinition -> public void setResourceDescription(String resourceDescription);1465226156;Set a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;public void setResourceDescription(String resourceDescription) {_		this.resource = new DescriptiveResource(resourceDescription)__	};set,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,description,string,resource,description,this,resource,new,descriptive,resource,resource,description
AbstractBeanDefinition -> public void setResourceDescription(String resourceDescription);1467730834;Set a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;public void setResourceDescription(String resourceDescription) {_		this.resource = new DescriptiveResource(resourceDescription)__	};set,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,description,string,resource,description,this,resource,new,descriptive,resource,resource,description
AbstractBeanDefinition -> public void setResourceDescription(String resourceDescription);1467846264;Set a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;public void setResourceDescription(String resourceDescription) {_		this.resource = new DescriptiveResource(resourceDescription)__	};set,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,description,string,resource,description,this,resource,new,descriptive,resource,resource,description
AbstractBeanDefinition -> public void setResourceDescription(String resourceDescription);1482091545;Set a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;public void setResourceDescription(String resourceDescription) {_		this.resource = new DescriptiveResource(resourceDescription)__	};set,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,description,string,resource,description,this,resource,new,descriptive,resource,resource,description
AbstractBeanDefinition -> public void setResourceDescription(String resourceDescription);1483093818;Set a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;public void setResourceDescription(String resourceDescription) {_		this.resource = new DescriptiveResource(resourceDescription)__	};set,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,description,string,resource,description,this,resource,new,descriptive,resource,resource,description
AbstractBeanDefinition -> public void setResourceDescription(String resourceDescription);1495868221;Set a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;public void setResourceDescription(String resourceDescription) {_		this.resource = new DescriptiveResource(resourceDescription)__	};set,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,description,string,resource,description,this,resource,new,descriptive,resource,resource,description
AbstractBeanDefinition -> @Override 	public void setDependsOn(String[] dependsOn);1356735495;Set the names of the beans that this bean depends on being initialized._The bean factory will guarantee that these beans get initialized first._<p>Note that dependencies are normally expressed through bean properties or_constructor arguments. This property should just be necessary for other kinds_of dependencies like statics (*ugh*) or database preparation on startup.;@Override_	public void setDependsOn(String[] dependsOn) {_		this.dependsOn = dependsOn__	};set,the,names,of,the,beans,that,this,bean,depends,on,being,initialized,the,bean,factory,will,guarantee,that,these,beans,get,initialized,first,p,note,that,dependencies,are,normally,expressed,through,bean,properties,or,constructor,arguments,this,property,should,just,be,necessary,for,other,kinds,of,dependencies,like,statics,ugh,or,database,preparation,on,startup;override,public,void,set,depends,on,string,depends,on,this,depends,on,depends,on
AbstractBeanDefinition -> @Override 	public void setDependsOn(String[] dependsOn);1368482696;Set the names of the beans that this bean depends on being initialized._The bean factory will guarantee that these beans get initialized first._<p>Note that dependencies are normally expressed through bean properties or_constructor arguments. This property should just be necessary for other kinds_of dependencies like statics (*ugh*) or database preparation on startup.;@Override_	public void setDependsOn(String[] dependsOn) {_		this.dependsOn = dependsOn__	};set,the,names,of,the,beans,that,this,bean,depends,on,being,initialized,the,bean,factory,will,guarantee,that,these,beans,get,initialized,first,p,note,that,dependencies,are,normally,expressed,through,bean,properties,or,constructor,arguments,this,property,should,just,be,necessary,for,other,kinds,of,dependencies,like,statics,ugh,or,database,preparation,on,startup;override,public,void,set,depends,on,string,depends,on,this,depends,on,depends,on
AbstractBeanDefinition -> @Override 	public void setDependsOn(String[] dependsOn);1385412762;Set the names of the beans that this bean depends on being initialized._The bean factory will guarantee that these beans get initialized first._<p>Note that dependencies are normally expressed through bean properties or_constructor arguments. This property should just be necessary for other kinds_of dependencies like statics (*ugh*) or database preparation on startup.;@Override_	public void setDependsOn(String[] dependsOn) {_		this.dependsOn = dependsOn__	};set,the,names,of,the,beans,that,this,bean,depends,on,being,initialized,the,bean,factory,will,guarantee,that,these,beans,get,initialized,first,p,note,that,dependencies,are,normally,expressed,through,bean,properties,or,constructor,arguments,this,property,should,just,be,necessary,for,other,kinds,of,dependencies,like,statics,ugh,or,database,preparation,on,startup;override,public,void,set,depends,on,string,depends,on,this,depends,on,depends,on
AbstractBeanDefinition -> @Override 	public void setDependsOn(String[] dependsOn);1392245317;Set the names of the beans that this bean depends on being initialized._The bean factory will guarantee that these beans get initialized first._<p>Note that dependencies are normally expressed through bean properties or_constructor arguments. This property should just be necessary for other kinds_of dependencies like statics (*ugh*) or database preparation on startup.;@Override_	public void setDependsOn(String[] dependsOn) {_		this.dependsOn = dependsOn__	};set,the,names,of,the,beans,that,this,bean,depends,on,being,initialized,the,bean,factory,will,guarantee,that,these,beans,get,initialized,first,p,note,that,dependencies,are,normally,expressed,through,bean,properties,or,constructor,arguments,this,property,should,just,be,necessary,for,other,kinds,of,dependencies,like,statics,ugh,or,database,preparation,on,startup;override,public,void,set,depends,on,string,depends,on,this,depends,on,depends,on
AbstractBeanDefinition -> @Override 	public void setDependsOn(String[] dependsOn);1397163142;Set the names of the beans that this bean depends on being initialized._The bean factory will guarantee that these beans get initialized first._<p>Note that dependencies are normally expressed through bean properties or_constructor arguments. This property should just be necessary for other kinds_of dependencies like statics (*ugh*) or database preparation on startup.;@Override_	public void setDependsOn(String[] dependsOn) {_		this.dependsOn = dependsOn__	};set,the,names,of,the,beans,that,this,bean,depends,on,being,initialized,the,bean,factory,will,guarantee,that,these,beans,get,initialized,first,p,note,that,dependencies,are,normally,expressed,through,bean,properties,or,constructor,arguments,this,property,should,just,be,necessary,for,other,kinds,of,dependencies,like,statics,ugh,or,database,preparation,on,startup;override,public,void,set,depends,on,string,depends,on,this,depends,on,depends,on
AbstractBeanDefinition -> @Override 	public void setDependsOn(String[] dependsOn);1398898390;Set the names of the beans that this bean depends on being initialized._The bean factory will guarantee that these beans get initialized first._<p>Note that dependencies are normally expressed through bean properties or_constructor arguments. This property should just be necessary for other kinds_of dependencies like statics (*ugh*) or database preparation on startup.;@Override_	public void setDependsOn(String[] dependsOn) {_		this.dependsOn = dependsOn__	};set,the,names,of,the,beans,that,this,bean,depends,on,being,initialized,the,bean,factory,will,guarantee,that,these,beans,get,initialized,first,p,note,that,dependencies,are,normally,expressed,through,bean,properties,or,constructor,arguments,this,property,should,just,be,necessary,for,other,kinds,of,dependencies,like,statics,ugh,or,database,preparation,on,startup;override,public,void,set,depends,on,string,depends,on,this,depends,on,depends,on
AbstractBeanDefinition -> public int getResolvedAutowireMode();1328020251;Return the resolved autowire code,_(resolving AUTOWIRE_AUTODETECT to AUTOWIRE_CONSTRUCTOR or AUTOWIRE_BY_TYPE)._@see #AUTOWIRE_AUTODETECT_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_BY_TYPE;public int getResolvedAutowireMode() {_		if (this.autowireMode == AUTOWIRE_AUTODETECT) {_			_			_			_			Constructor[] constructors = getBeanClass().getConstructors()__			for (Constructor constructor : constructors) {_				if (constructor.getParameterTypes().length == 0) {_					return AUTOWIRE_BY_TYPE__				}_			}_			return AUTOWIRE_CONSTRUCTOR__		}_		else {_			return this.autowireMode__		}_	};return,the,resolved,autowire,code,resolving,to,or,see,see,see;public,int,get,resolved,autowire,mode,if,this,autowire,mode,constructor,constructors,get,bean,class,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,return,return,else,return,this,autowire,mode
AbstractBeanDefinition -> public int getResolvedAutowireMode();1337202589;Return the resolved autowire code,_(resolving AUTOWIRE_AUTODETECT to AUTOWIRE_CONSTRUCTOR or AUTOWIRE_BY_TYPE)._@see #AUTOWIRE_AUTODETECT_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_BY_TYPE;public int getResolvedAutowireMode() {_		if (this.autowireMode == AUTOWIRE_AUTODETECT) {_			_			_			_			Constructor[] constructors = getBeanClass().getConstructors()__			for (Constructor constructor : constructors) {_				if (constructor.getParameterTypes().length == 0) {_					return AUTOWIRE_BY_TYPE__				}_			}_			return AUTOWIRE_CONSTRUCTOR__		}_		else {_			return this.autowireMode__		}_	};return,the,resolved,autowire,code,resolving,to,or,see,see,see;public,int,get,resolved,autowire,mode,if,this,autowire,mode,constructor,constructors,get,bean,class,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,return,return,else,return,this,autowire,mode
AbstractBeanDefinition -> public int getResolvedAutowireMode();1356735495;Return the resolved autowire code,_(resolving AUTOWIRE_AUTODETECT to AUTOWIRE_CONSTRUCTOR or AUTOWIRE_BY_TYPE)._@see #AUTOWIRE_AUTODETECT_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_BY_TYPE;public int getResolvedAutowireMode() {_		if (this.autowireMode == AUTOWIRE_AUTODETECT) {_			_			_			_			Constructor[] constructors = getBeanClass().getConstructors()__			for (Constructor constructor : constructors) {_				if (constructor.getParameterTypes().length == 0) {_					return AUTOWIRE_BY_TYPE__				}_			}_			return AUTOWIRE_CONSTRUCTOR__		}_		else {_			return this.autowireMode__		}_	};return,the,resolved,autowire,code,resolving,to,or,see,see,see;public,int,get,resolved,autowire,mode,if,this,autowire,mode,constructor,constructors,get,bean,class,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,return,return,else,return,this,autowire,mode
AbstractBeanDefinition -> public int getResolvedAutowireMode();1357119239;Return the resolved autowire code,_(resolving AUTOWIRE_AUTODETECT to AUTOWIRE_CONSTRUCTOR or AUTOWIRE_BY_TYPE)._@see #AUTOWIRE_AUTODETECT_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_BY_TYPE;public int getResolvedAutowireMode() {_		if (this.autowireMode == AUTOWIRE_AUTODETECT) {_			_			_			_			Constructor[] constructors = getBeanClass().getConstructors()__			for (Constructor constructor : constructors) {_				if (constructor.getParameterTypes().length == 0) {_					return AUTOWIRE_BY_TYPE__				}_			}_			return AUTOWIRE_CONSTRUCTOR__		}_		else {_			return this.autowireMode__		}_	};return,the,resolved,autowire,code,resolving,to,or,see,see,see;public,int,get,resolved,autowire,mode,if,this,autowire,mode,constructor,constructors,get,bean,class,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,return,return,else,return,this,autowire,mode
AbstractBeanDefinition -> public int getResolvedAutowireMode();1367508310;Return the resolved autowire code,_(resolving AUTOWIRE_AUTODETECT to AUTOWIRE_CONSTRUCTOR or AUTOWIRE_BY_TYPE)._@see #AUTOWIRE_AUTODETECT_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_BY_TYPE;public int getResolvedAutowireMode() {_		if (this.autowireMode == AUTOWIRE_AUTODETECT) {_			_			_			_			Constructor[] constructors = getBeanClass().getConstructors()__			for (Constructor constructor : constructors) {_				if (constructor.getParameterTypes().length == 0) {_					return AUTOWIRE_BY_TYPE__				}_			}_			return AUTOWIRE_CONSTRUCTOR__		}_		else {_			return this.autowireMode__		}_	};return,the,resolved,autowire,code,resolving,to,or,see,see,see;public,int,get,resolved,autowire,mode,if,this,autowire,mode,constructor,constructors,get,bean,class,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,return,return,else,return,this,autowire,mode
AbstractBeanDefinition -> public int getResolvedAutowireMode();1367943112;Return the resolved autowire code,_(resolving AUTOWIRE_AUTODETECT to AUTOWIRE_CONSTRUCTOR or AUTOWIRE_BY_TYPE)._@see #AUTOWIRE_AUTODETECT_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_BY_TYPE;public int getResolvedAutowireMode() {_		if (this.autowireMode == AUTOWIRE_AUTODETECT) {_			_			_			_			Constructor[] constructors = getBeanClass().getConstructors()__			for (Constructor constructor : constructors) {_				if (constructor.getParameterTypes().length == 0) {_					return AUTOWIRE_BY_TYPE__				}_			}_			return AUTOWIRE_CONSTRUCTOR__		}_		else {_			return this.autowireMode__		}_	};return,the,resolved,autowire,code,resolving,to,or,see,see,see;public,int,get,resolved,autowire,mode,if,this,autowire,mode,constructor,constructors,get,bean,class,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,return,return,else,return,this,autowire,mode
AbstractBeanDefinition -> public int getResolvedAutowireMode();1368482696;Return the resolved autowire code,_(resolving AUTOWIRE_AUTODETECT to AUTOWIRE_CONSTRUCTOR or AUTOWIRE_BY_TYPE)._@see #AUTOWIRE_AUTODETECT_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_BY_TYPE;public int getResolvedAutowireMode() {_		if (this.autowireMode == AUTOWIRE_AUTODETECT) {_			_			_			_			Constructor[] constructors = getBeanClass().getConstructors()__			for (Constructor constructor : constructors) {_				if (constructor.getParameterTypes().length == 0) {_					return AUTOWIRE_BY_TYPE__				}_			}_			return AUTOWIRE_CONSTRUCTOR__		}_		else {_			return this.autowireMode__		}_	};return,the,resolved,autowire,code,resolving,to,or,see,see,see;public,int,get,resolved,autowire,mode,if,this,autowire,mode,constructor,constructors,get,bean,class,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,return,return,else,return,this,autowire,mode
AbstractBeanDefinition -> public int getResolvedAutowireMode();1385412762;Return the resolved autowire code,_(resolving AUTOWIRE_AUTODETECT to AUTOWIRE_CONSTRUCTOR or AUTOWIRE_BY_TYPE)._@see #AUTOWIRE_AUTODETECT_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_BY_TYPE;public int getResolvedAutowireMode() {_		if (this.autowireMode == AUTOWIRE_AUTODETECT) {_			_			_			_			Constructor<?>[] constructors = getBeanClass().getConstructors()__			for (Constructor<?> constructor : constructors) {_				if (constructor.getParameterTypes().length == 0) {_					return AUTOWIRE_BY_TYPE__				}_			}_			return AUTOWIRE_CONSTRUCTOR__		}_		else {_			return this.autowireMode__		}_	};return,the,resolved,autowire,code,resolving,to,or,see,see,see;public,int,get,resolved,autowire,mode,if,this,autowire,mode,constructor,constructors,get,bean,class,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,return,return,else,return,this,autowire,mode
AbstractBeanDefinition -> public int getResolvedAutowireMode();1392245317;Return the resolved autowire code,_(resolving AUTOWIRE_AUTODETECT to AUTOWIRE_CONSTRUCTOR or AUTOWIRE_BY_TYPE)._@see #AUTOWIRE_AUTODETECT_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_BY_TYPE;public int getResolvedAutowireMode() {_		if (this.autowireMode == AUTOWIRE_AUTODETECT) {_			_			_			_			Constructor<?>[] constructors = getBeanClass().getConstructors()__			for (Constructor<?> constructor : constructors) {_				if (constructor.getParameterTypes().length == 0) {_					return AUTOWIRE_BY_TYPE__				}_			}_			return AUTOWIRE_CONSTRUCTOR__		}_		else {_			return this.autowireMode__		}_	};return,the,resolved,autowire,code,resolving,to,or,see,see,see;public,int,get,resolved,autowire,mode,if,this,autowire,mode,constructor,constructors,get,bean,class,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,return,return,else,return,this,autowire,mode
AbstractBeanDefinition -> public int getResolvedAutowireMode();1397163142;Return the resolved autowire code,_(resolving AUTOWIRE_AUTODETECT to AUTOWIRE_CONSTRUCTOR or AUTOWIRE_BY_TYPE)._@see #AUTOWIRE_AUTODETECT_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_BY_TYPE;public int getResolvedAutowireMode() {_		if (this.autowireMode == AUTOWIRE_AUTODETECT) {_			_			_			_			Constructor<?>[] constructors = getBeanClass().getConstructors()__			for (Constructor<?> constructor : constructors) {_				if (constructor.getParameterTypes().length == 0) {_					return AUTOWIRE_BY_TYPE__				}_			}_			return AUTOWIRE_CONSTRUCTOR__		}_		else {_			return this.autowireMode__		}_	};return,the,resolved,autowire,code,resolving,to,or,see,see,see;public,int,get,resolved,autowire,mode,if,this,autowire,mode,constructor,constructors,get,bean,class,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,return,return,else,return,this,autowire,mode
AbstractBeanDefinition -> public int getResolvedAutowireMode();1398898390;Return the resolved autowire code,_(resolving AUTOWIRE_AUTODETECT to AUTOWIRE_CONSTRUCTOR or AUTOWIRE_BY_TYPE)._@see #AUTOWIRE_AUTODETECT_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_BY_TYPE;public int getResolvedAutowireMode() {_		if (this.autowireMode == AUTOWIRE_AUTODETECT) {_			_			_			_			Constructor<?>[] constructors = getBeanClass().getConstructors()__			for (Constructor<?> constructor : constructors) {_				if (constructor.getParameterTypes().length == 0) {_					return AUTOWIRE_BY_TYPE__				}_			}_			return AUTOWIRE_CONSTRUCTOR__		}_		else {_			return this.autowireMode__		}_	};return,the,resolved,autowire,code,resolving,to,or,see,see,see;public,int,get,resolved,autowire,mode,if,this,autowire,mode,constructor,constructors,get,bean,class,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,return,return,else,return,this,autowire,mode
AbstractBeanDefinition -> public int getResolvedAutowireMode();1407511029;Return the resolved autowire code,_(resolving AUTOWIRE_AUTODETECT to AUTOWIRE_CONSTRUCTOR or AUTOWIRE_BY_TYPE)._@see #AUTOWIRE_AUTODETECT_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_BY_TYPE;public int getResolvedAutowireMode() {_		if (this.autowireMode == AUTOWIRE_AUTODETECT) {_			_			_			_			Constructor<?>[] constructors = getBeanClass().getConstructors()__			for (Constructor<?> constructor : constructors) {_				if (constructor.getParameterTypes().length == 0) {_					return AUTOWIRE_BY_TYPE__				}_			}_			return AUTOWIRE_CONSTRUCTOR__		}_		else {_			return this.autowireMode__		}_	};return,the,resolved,autowire,code,resolving,to,or,see,see,see;public,int,get,resolved,autowire,mode,if,this,autowire,mode,constructor,constructors,get,bean,class,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,return,return,else,return,this,autowire,mode
AbstractBeanDefinition -> public int getResolvedAutowireMode();1432135182;Return the resolved autowire code,_(resolving AUTOWIRE_AUTODETECT to AUTOWIRE_CONSTRUCTOR or AUTOWIRE_BY_TYPE)._@see #AUTOWIRE_AUTODETECT_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_BY_TYPE;public int getResolvedAutowireMode() {_		if (this.autowireMode == AUTOWIRE_AUTODETECT) {_			_			_			_			Constructor<?>[] constructors = getBeanClass().getConstructors()__			for (Constructor<?> constructor : constructors) {_				if (constructor.getParameterTypes().length == 0) {_					return AUTOWIRE_BY_TYPE__				}_			}_			return AUTOWIRE_CONSTRUCTOR__		}_		else {_			return this.autowireMode__		}_	};return,the,resolved,autowire,code,resolving,to,or,see,see,see;public,int,get,resolved,autowire,mode,if,this,autowire,mode,constructor,constructors,get,bean,class,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,return,return,else,return,this,autowire,mode
AbstractBeanDefinition -> public int getResolvedAutowireMode();1434204509;Return the resolved autowire code,_(resolving AUTOWIRE_AUTODETECT to AUTOWIRE_CONSTRUCTOR or AUTOWIRE_BY_TYPE)._@see #AUTOWIRE_AUTODETECT_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_BY_TYPE;public int getResolvedAutowireMode() {_		if (this.autowireMode == AUTOWIRE_AUTODETECT) {_			_			_			_			Constructor<?>[] constructors = getBeanClass().getConstructors()__			for (Constructor<?> constructor : constructors) {_				if (constructor.getParameterTypes().length == 0) {_					return AUTOWIRE_BY_TYPE__				}_			}_			return AUTOWIRE_CONSTRUCTOR__		}_		else {_			return this.autowireMode__		}_	};return,the,resolved,autowire,code,resolving,to,or,see,see,see;public,int,get,resolved,autowire,mode,if,this,autowire,mode,constructor,constructors,get,bean,class,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,return,return,else,return,this,autowire,mode
AbstractBeanDefinition -> public int getResolvedAutowireMode();1447323728;Return the resolved autowire code,_(resolving AUTOWIRE_AUTODETECT to AUTOWIRE_CONSTRUCTOR or AUTOWIRE_BY_TYPE)._@see #AUTOWIRE_AUTODETECT_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_BY_TYPE;public int getResolvedAutowireMode() {_		if (this.autowireMode == AUTOWIRE_AUTODETECT) {_			_			_			_			Constructor<?>[] constructors = getBeanClass().getConstructors()__			for (Constructor<?> constructor : constructors) {_				if (constructor.getParameterTypes().length == 0) {_					return AUTOWIRE_BY_TYPE__				}_			}_			return AUTOWIRE_CONSTRUCTOR__		}_		else {_			return this.autowireMode__		}_	};return,the,resolved,autowire,code,resolving,to,or,see,see,see;public,int,get,resolved,autowire,mode,if,this,autowire,mode,constructor,constructors,get,bean,class,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,return,return,else,return,this,autowire,mode
AbstractBeanDefinition -> public int getResolvedAutowireMode();1465226156;Return the resolved autowire code,_(resolving AUTOWIRE_AUTODETECT to AUTOWIRE_CONSTRUCTOR or AUTOWIRE_BY_TYPE)._@see #AUTOWIRE_AUTODETECT_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_BY_TYPE;public int getResolvedAutowireMode() {_		if (this.autowireMode == AUTOWIRE_AUTODETECT) {_			_			_			_			Constructor<?>[] constructors = getBeanClass().getConstructors()__			for (Constructor<?> constructor : constructors) {_				if (constructor.getParameterTypes().length == 0) {_					return AUTOWIRE_BY_TYPE__				}_			}_			return AUTOWIRE_CONSTRUCTOR__		}_		else {_			return this.autowireMode__		}_	};return,the,resolved,autowire,code,resolving,to,or,see,see,see;public,int,get,resolved,autowire,mode,if,this,autowire,mode,constructor,constructors,get,bean,class,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,return,return,else,return,this,autowire,mode
AbstractBeanDefinition -> public int getResolvedAutowireMode();1467730834;Return the resolved autowire code,_(resolving AUTOWIRE_AUTODETECT to AUTOWIRE_CONSTRUCTOR or AUTOWIRE_BY_TYPE)._@see #AUTOWIRE_AUTODETECT_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_BY_TYPE;public int getResolvedAutowireMode() {_		if (this.autowireMode == AUTOWIRE_AUTODETECT) {_			_			_			_			Constructor<?>[] constructors = getBeanClass().getConstructors()__			for (Constructor<?> constructor : constructors) {_				if (constructor.getParameterTypes().length == 0) {_					return AUTOWIRE_BY_TYPE__				}_			}_			return AUTOWIRE_CONSTRUCTOR__		}_		else {_			return this.autowireMode__		}_	};return,the,resolved,autowire,code,resolving,to,or,see,see,see;public,int,get,resolved,autowire,mode,if,this,autowire,mode,constructor,constructors,get,bean,class,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,return,return,else,return,this,autowire,mode
AbstractBeanDefinition -> public int getResolvedAutowireMode();1467846264;Return the resolved autowire code,_(resolving AUTOWIRE_AUTODETECT to AUTOWIRE_CONSTRUCTOR or AUTOWIRE_BY_TYPE)._@see #AUTOWIRE_AUTODETECT_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_BY_TYPE;public int getResolvedAutowireMode() {_		if (this.autowireMode == AUTOWIRE_AUTODETECT) {_			_			_			_			Constructor<?>[] constructors = getBeanClass().getConstructors()__			for (Constructor<?> constructor : constructors) {_				if (constructor.getParameterCount() == 0) {_					return AUTOWIRE_BY_TYPE__				}_			}_			return AUTOWIRE_CONSTRUCTOR__		}_		else {_			return this.autowireMode__		}_	};return,the,resolved,autowire,code,resolving,to,or,see,see,see;public,int,get,resolved,autowire,mode,if,this,autowire,mode,constructor,constructors,get,bean,class,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,count,0,return,return,else,return,this,autowire,mode
AbstractBeanDefinition -> public int getResolvedAutowireMode();1482091545;Return the resolved autowire code,_(resolving AUTOWIRE_AUTODETECT to AUTOWIRE_CONSTRUCTOR or AUTOWIRE_BY_TYPE)._@see #AUTOWIRE_AUTODETECT_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_BY_TYPE;public int getResolvedAutowireMode() {_		if (this.autowireMode == AUTOWIRE_AUTODETECT) {_			_			_			_			Constructor<?>[] constructors = getBeanClass().getConstructors()__			for (Constructor<?> constructor : constructors) {_				if (constructor.getParameterCount() == 0) {_					return AUTOWIRE_BY_TYPE__				}_			}_			return AUTOWIRE_CONSTRUCTOR__		}_		else {_			return this.autowireMode__		}_	};return,the,resolved,autowire,code,resolving,to,or,see,see,see;public,int,get,resolved,autowire,mode,if,this,autowire,mode,constructor,constructors,get,bean,class,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,count,0,return,return,else,return,this,autowire,mode
AbstractBeanDefinition -> public int getResolvedAutowireMode();1483093818;Return the resolved autowire code,_(resolving AUTOWIRE_AUTODETECT to AUTOWIRE_CONSTRUCTOR or AUTOWIRE_BY_TYPE)._@see #AUTOWIRE_AUTODETECT_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_BY_TYPE;public int getResolvedAutowireMode() {_		if (this.autowireMode == AUTOWIRE_AUTODETECT) {_			_			_			_			Constructor<?>[] constructors = getBeanClass().getConstructors()__			for (Constructor<?> constructor : constructors) {_				if (constructor.getParameterCount() == 0) {_					return AUTOWIRE_BY_TYPE__				}_			}_			return AUTOWIRE_CONSTRUCTOR__		}_		else {_			return this.autowireMode__		}_	};return,the,resolved,autowire,code,resolving,to,or,see,see,see;public,int,get,resolved,autowire,mode,if,this,autowire,mode,constructor,constructors,get,bean,class,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,count,0,return,return,else,return,this,autowire,mode
AbstractBeanDefinition -> public int getResolvedAutowireMode();1495868221;Return the resolved autowire code,_(resolving AUTOWIRE_AUTODETECT to AUTOWIRE_CONSTRUCTOR or AUTOWIRE_BY_TYPE)._@see #AUTOWIRE_AUTODETECT_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_BY_TYPE;public int getResolvedAutowireMode() {_		if (this.autowireMode == AUTOWIRE_AUTODETECT) {_			_			_			_			Constructor<?>[] constructors = getBeanClass().getConstructors()__			for (Constructor<?> constructor : constructors) {_				if (constructor.getParameterCount() == 0) {_					return AUTOWIRE_BY_TYPE__				}_			}_			return AUTOWIRE_CONSTRUCTOR__		}_		else {_			return this.autowireMode__		}_	};return,the,resolved,autowire,code,resolving,to,or,see,see,see;public,int,get,resolved,autowire,mode,if,this,autowire,mode,constructor,constructors,get,bean,class,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,count,0,return,return,else,return,this,autowire,mode
AbstractBeanDefinition -> public int getResolvedAutowireMode();1496837955;Return the resolved autowire code,_(resolving AUTOWIRE_AUTODETECT to AUTOWIRE_CONSTRUCTOR or AUTOWIRE_BY_TYPE)._@see #AUTOWIRE_AUTODETECT_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_BY_TYPE;public int getResolvedAutowireMode() {_		if (this.autowireMode == AUTOWIRE_AUTODETECT) {_			_			_			_			Constructor<?>[] constructors = getBeanClass().getConstructors()__			for (Constructor<?> constructor : constructors) {_				if (constructor.getParameterCount() == 0) {_					return AUTOWIRE_BY_TYPE__				}_			}_			return AUTOWIRE_CONSTRUCTOR__		}_		else {_			return this.autowireMode__		}_	};return,the,resolved,autowire,code,resolving,to,or,see,see,see;public,int,get,resolved,autowire,mode,if,this,autowire,mode,constructor,constructors,get,bean,class,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,count,0,return,return,else,return,this,autowire,mode
AbstractBeanDefinition -> public int getResolvedAutowireMode();1498780456;Return the resolved autowire code,_(resolving AUTOWIRE_AUTODETECT to AUTOWIRE_CONSTRUCTOR or AUTOWIRE_BY_TYPE)._@see #AUTOWIRE_AUTODETECT_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_BY_TYPE;public int getResolvedAutowireMode() {_		if (this.autowireMode == AUTOWIRE_AUTODETECT) {_			_			_			_			Constructor<?>[] constructors = getBeanClass().getConstructors()__			for (Constructor<?> constructor : constructors) {_				if (constructor.getParameterCount() == 0) {_					return AUTOWIRE_BY_TYPE__				}_			}_			return AUTOWIRE_CONSTRUCTOR__		}_		else {_			return this.autowireMode__		}_	};return,the,resolved,autowire,code,resolving,to,or,see,see,see;public,int,get,resolved,autowire,mode,if,this,autowire,mode,constructor,constructors,get,bean,class,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,count,0,return,return,else,return,this,autowire,mode
AbstractBeanDefinition -> public int getResolvedAutowireMode();1502974979;Return the resolved autowire code,_(resolving AUTOWIRE_AUTODETECT to AUTOWIRE_CONSTRUCTOR or AUTOWIRE_BY_TYPE)._@see #AUTOWIRE_AUTODETECT_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_BY_TYPE;public int getResolvedAutowireMode() {_		if (this.autowireMode == AUTOWIRE_AUTODETECT) {_			_			_			_			Constructor<?>[] constructors = getBeanClass().getConstructors()__			for (Constructor<?> constructor : constructors) {_				if (constructor.getParameterCount() == 0) {_					return AUTOWIRE_BY_TYPE__				}_			}_			return AUTOWIRE_CONSTRUCTOR__		}_		else {_			return this.autowireMode__		}_	};return,the,resolved,autowire,code,resolving,to,or,see,see,see;public,int,get,resolved,autowire,mode,if,this,autowire,mode,constructor,constructors,get,bean,class,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,count,0,return,return,else,return,this,autowire,mode
AbstractBeanDefinition -> public int getResolvedAutowireMode();1503008029;Return the resolved autowire code,_(resolving AUTOWIRE_AUTODETECT to AUTOWIRE_CONSTRUCTOR or AUTOWIRE_BY_TYPE)._@see #AUTOWIRE_AUTODETECT_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_BY_TYPE;public int getResolvedAutowireMode() {_		if (this.autowireMode == AUTOWIRE_AUTODETECT) {_			_			_			_			Constructor<?>[] constructors = getBeanClass().getConstructors()__			for (Constructor<?> constructor : constructors) {_				if (constructor.getParameterCount() == 0) {_					return AUTOWIRE_BY_TYPE__				}_			}_			return AUTOWIRE_CONSTRUCTOR__		}_		else {_			return this.autowireMode__		}_	};return,the,resolved,autowire,code,resolving,to,or,see,see,see;public,int,get,resolved,autowire,mode,if,this,autowire,mode,constructor,constructors,get,bean,class,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,count,0,return,return,else,return,this,autowire,mode
AbstractBeanDefinition -> public int getResolvedAutowireMode();1510606271;Return the resolved autowire code,_(resolving AUTOWIRE_AUTODETECT to AUTOWIRE_CONSTRUCTOR or AUTOWIRE_BY_TYPE)._@see #AUTOWIRE_AUTODETECT_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_BY_TYPE;public int getResolvedAutowireMode() {_		if (this.autowireMode == AUTOWIRE_AUTODETECT) {_			_			_			_			Constructor<?>[] constructors = getBeanClass().getConstructors()__			for (Constructor<?> constructor : constructors) {_				if (constructor.getParameterCount() == 0) {_					return AUTOWIRE_BY_TYPE__				}_			}_			return AUTOWIRE_CONSTRUCTOR__		}_		else {_			return this.autowireMode__		}_	};return,the,resolved,autowire,code,resolving,to,or,see,see,see;public,int,get,resolved,autowire,mode,if,this,autowire,mode,constructor,constructors,get,bean,class,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,count,0,return,return,else,return,this,autowire,mode
AbstractBeanDefinition -> public int getResolvedAutowireMode();1510675876;Return the resolved autowire code,_(resolving AUTOWIRE_AUTODETECT to AUTOWIRE_CONSTRUCTOR or AUTOWIRE_BY_TYPE)._@see #AUTOWIRE_AUTODETECT_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_BY_TYPE;public int getResolvedAutowireMode() {_		if (this.autowireMode == AUTOWIRE_AUTODETECT) {_			_			_			_			Constructor<?>[] constructors = getBeanClass().getConstructors()__			for (Constructor<?> constructor : constructors) {_				if (constructor.getParameterCount() == 0) {_					return AUTOWIRE_BY_TYPE__				}_			}_			return AUTOWIRE_CONSTRUCTOR__		}_		else {_			return this.autowireMode__		}_	};return,the,resolved,autowire,code,resolving,to,or,see,see,see;public,int,get,resolved,autowire,mode,if,this,autowire,mode,constructor,constructors,get,bean,class,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,count,0,return,return,else,return,this,autowire,mode
AbstractBeanDefinition -> public int getResolvedAutowireMode();1530174524;Return the resolved autowire code,_(resolving AUTOWIRE_AUTODETECT to AUTOWIRE_CONSTRUCTOR or AUTOWIRE_BY_TYPE)._@see #AUTOWIRE_AUTODETECT_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_BY_TYPE;public int getResolvedAutowireMode() {_		if (this.autowireMode == AUTOWIRE_AUTODETECT) {_			_			_			_			Constructor<?>[] constructors = getBeanClass().getConstructors()__			for (Constructor<?> constructor : constructors) {_				if (constructor.getParameterCount() == 0) {_					return AUTOWIRE_BY_TYPE__				}_			}_			return AUTOWIRE_CONSTRUCTOR__		}_		else {_			return this.autowireMode__		}_	};return,the,resolved,autowire,code,resolving,to,or,see,see,see;public,int,get,resolved,autowire,mode,if,this,autowire,mode,constructor,constructors,get,bean,class,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,count,0,return,return,else,return,this,autowire,mode
AbstractBeanDefinition -> public int getResolvedAutowireMode();1530174524;Return the resolved autowire code,_(resolving AUTOWIRE_AUTODETECT to AUTOWIRE_CONSTRUCTOR or AUTOWIRE_BY_TYPE)._@see #AUTOWIRE_AUTODETECT_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_BY_TYPE;public int getResolvedAutowireMode() {_		if (this.autowireMode == AUTOWIRE_AUTODETECT) {_			_			_			_			Constructor<?>[] constructors = getBeanClass().getConstructors()__			for (Constructor<?> constructor : constructors) {_				if (constructor.getParameterCount() == 0) {_					return AUTOWIRE_BY_TYPE__				}_			}_			return AUTOWIRE_CONSTRUCTOR__		}_		else {_			return this.autowireMode__		}_	};return,the,resolved,autowire,code,resolving,to,or,see,see,see;public,int,get,resolved,autowire,mode,if,this,autowire,mode,constructor,constructors,get,bean,class,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,count,0,return,return,else,return,this,autowire,mode
AbstractBeanDefinition -> public int getResolvedAutowireMode();1530174524;Return the resolved autowire code,_(resolving AUTOWIRE_AUTODETECT to AUTOWIRE_CONSTRUCTOR or AUTOWIRE_BY_TYPE)._@see #AUTOWIRE_AUTODETECT_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_BY_TYPE;public int getResolvedAutowireMode() {_		if (this.autowireMode == AUTOWIRE_AUTODETECT) {_			_			_			_			Constructor<?>[] constructors = getBeanClass().getConstructors()__			for (Constructor<?> constructor : constructors) {_				if (constructor.getParameterCount() == 0) {_					return AUTOWIRE_BY_TYPE__				}_			}_			return AUTOWIRE_CONSTRUCTOR__		}_		else {_			return this.autowireMode__		}_	};return,the,resolved,autowire,code,resolving,to,or,see,see,see;public,int,get,resolved,autowire,mode,if,this,autowire,mode,constructor,constructors,get,bean,class,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,count,0,return,return,else,return,this,autowire,mode
AbstractBeanDefinition -> public int getResolvedAutowireMode();1530190293;Return the resolved autowire code,_(resolving AUTOWIRE_AUTODETECT to AUTOWIRE_CONSTRUCTOR or AUTOWIRE_BY_TYPE)._@see #AUTOWIRE_AUTODETECT_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_BY_TYPE;public int getResolvedAutowireMode() {_		if (this.autowireMode == AUTOWIRE_AUTODETECT) {_			_			_			_			Constructor<?>[] constructors = getBeanClass().getConstructors()__			for (Constructor<?> constructor : constructors) {_				if (constructor.getParameterCount() == 0) {_					return AUTOWIRE_BY_TYPE__				}_			}_			return AUTOWIRE_CONSTRUCTOR__		}_		else {_			return this.autowireMode__		}_	};return,the,resolved,autowire,code,resolving,to,or,see,see,see;public,int,get,resolved,autowire,mode,if,this,autowire,mode,constructor,constructors,get,bean,class,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,count,0,return,return,else,return,this,autowire,mode
AbstractBeanDefinition -> public int getResolvedAutowireMode();1532981251;Return the resolved autowire code,_(resolving AUTOWIRE_AUTODETECT to AUTOWIRE_CONSTRUCTOR or AUTOWIRE_BY_TYPE)._@see #AUTOWIRE_AUTODETECT_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_BY_TYPE;public int getResolvedAutowireMode() {_		if (this.autowireMode == AUTOWIRE_AUTODETECT) {_			_			_			_			Constructor<?>[] constructors = getBeanClass().getConstructors()__			for (Constructor<?> constructor : constructors) {_				if (constructor.getParameterCount() == 0) {_					return AUTOWIRE_BY_TYPE__				}_			}_			return AUTOWIRE_CONSTRUCTOR__		}_		else {_			return this.autowireMode__		}_	};return,the,resolved,autowire,code,resolving,to,or,see,see,see;public,int,get,resolved,autowire,mode,if,this,autowire,mode,constructor,constructors,get,bean,class,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,count,0,return,return,else,return,this,autowire,mode
AbstractBeanDefinition -> public int getResolvedAutowireMode();1536863076;Return the resolved autowire code,_(resolving AUTOWIRE_AUTODETECT to AUTOWIRE_CONSTRUCTOR or AUTOWIRE_BY_TYPE)._@see #AUTOWIRE_AUTODETECT_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_BY_TYPE;public int getResolvedAutowireMode() {_		if (this.autowireMode == AUTOWIRE_AUTODETECT) {_			_			_			_			Constructor<?>[] constructors = getBeanClass().getConstructors()__			for (Constructor<?> constructor : constructors) {_				if (constructor.getParameterCount() == 0) {_					return AUTOWIRE_BY_TYPE__				}_			}_			return AUTOWIRE_CONSTRUCTOR__		}_		else {_			return this.autowireMode__		}_	};return,the,resolved,autowire,code,resolving,to,or,see,see,see;public,int,get,resolved,autowire,mode,if,this,autowire,mode,constructor,constructors,get,bean,class,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,count,0,return,return,else,return,this,autowire,mode
AbstractBeanDefinition -> public boolean hasConstructorArgumentValues();1328020251;Return if there are constructor argument values defined for this bean.;public boolean hasConstructorArgumentValues() {_		return !this.constructorArgumentValues.isEmpty()__	};return,if,there,are,constructor,argument,values,defined,for,this,bean;public,boolean,has,constructor,argument,values,return,this,constructor,argument,values,is,empty
AbstractBeanDefinition -> public boolean hasConstructorArgumentValues();1337202589;Return if there are constructor argument values defined for this bean.;public boolean hasConstructorArgumentValues() {_		return !this.constructorArgumentValues.isEmpty()__	};return,if,there,are,constructor,argument,values,defined,for,this,bean;public,boolean,has,constructor,argument,values,return,this,constructor,argument,values,is,empty
AbstractBeanDefinition -> public boolean hasConstructorArgumentValues();1356735495;Return if there are constructor argument values defined for this bean.;public boolean hasConstructorArgumentValues() {_		return !this.constructorArgumentValues.isEmpty()__	};return,if,there,are,constructor,argument,values,defined,for,this,bean;public,boolean,has,constructor,argument,values,return,this,constructor,argument,values,is,empty
AbstractBeanDefinition -> public boolean hasConstructorArgumentValues();1357119239;Return if there are constructor argument values defined for this bean.;public boolean hasConstructorArgumentValues() {_		return !this.constructorArgumentValues.isEmpty()__	};return,if,there,are,constructor,argument,values,defined,for,this,bean;public,boolean,has,constructor,argument,values,return,this,constructor,argument,values,is,empty
AbstractBeanDefinition -> public boolean hasConstructorArgumentValues();1367508310;Return if there are constructor argument values defined for this bean.;public boolean hasConstructorArgumentValues() {_		return !this.constructorArgumentValues.isEmpty()__	};return,if,there,are,constructor,argument,values,defined,for,this,bean;public,boolean,has,constructor,argument,values,return,this,constructor,argument,values,is,empty
AbstractBeanDefinition -> public boolean hasConstructorArgumentValues();1367943112;Return if there are constructor argument values defined for this bean.;public boolean hasConstructorArgumentValues() {_		return !this.constructorArgumentValues.isEmpty()__	};return,if,there,are,constructor,argument,values,defined,for,this,bean;public,boolean,has,constructor,argument,values,return,this,constructor,argument,values,is,empty
AbstractBeanDefinition -> public boolean hasConstructorArgumentValues();1368482696;Return if there are constructor argument values defined for this bean.;public boolean hasConstructorArgumentValues() {_		return !this.constructorArgumentValues.isEmpty()__	};return,if,there,are,constructor,argument,values,defined,for,this,bean;public,boolean,has,constructor,argument,values,return,this,constructor,argument,values,is,empty
AbstractBeanDefinition -> public boolean hasConstructorArgumentValues();1385412762;Return if there are constructor argument values defined for this bean.;public boolean hasConstructorArgumentValues() {_		return !this.constructorArgumentValues.isEmpty()__	};return,if,there,are,constructor,argument,values,defined,for,this,bean;public,boolean,has,constructor,argument,values,return,this,constructor,argument,values,is,empty
AbstractBeanDefinition -> public boolean hasConstructorArgumentValues();1392245317;Return if there are constructor argument values defined for this bean.;public boolean hasConstructorArgumentValues() {_		return !this.constructorArgumentValues.isEmpty()__	};return,if,there,are,constructor,argument,values,defined,for,this,bean;public,boolean,has,constructor,argument,values,return,this,constructor,argument,values,is,empty
AbstractBeanDefinition -> public boolean hasConstructorArgumentValues();1397163142;Return if there are constructor argument values defined for this bean.;public boolean hasConstructorArgumentValues() {_		return !this.constructorArgumentValues.isEmpty()__	};return,if,there,are,constructor,argument,values,defined,for,this,bean;public,boolean,has,constructor,argument,values,return,this,constructor,argument,values,is,empty
AbstractBeanDefinition -> public boolean hasConstructorArgumentValues();1398898390;Return if there are constructor argument values defined for this bean.;public boolean hasConstructorArgumentValues() {_		return !this.constructorArgumentValues.isEmpty()__	};return,if,there,are,constructor,argument,values,defined,for,this,bean;public,boolean,has,constructor,argument,values,return,this,constructor,argument,values,is,empty
AbstractBeanDefinition -> public boolean hasConstructorArgumentValues();1407511029;Return if there are constructor argument values defined for this bean.;public boolean hasConstructorArgumentValues() {_		return !this.constructorArgumentValues.isEmpty()__	};return,if,there,are,constructor,argument,values,defined,for,this,bean;public,boolean,has,constructor,argument,values,return,this,constructor,argument,values,is,empty
AbstractBeanDefinition -> public boolean hasConstructorArgumentValues();1432135182;Return if there are constructor argument values defined for this bean.;public boolean hasConstructorArgumentValues() {_		return !this.constructorArgumentValues.isEmpty()__	};return,if,there,are,constructor,argument,values,defined,for,this,bean;public,boolean,has,constructor,argument,values,return,this,constructor,argument,values,is,empty
AbstractBeanDefinition -> public boolean hasConstructorArgumentValues();1434204509;Return if there are constructor argument values defined for this bean.;public boolean hasConstructorArgumentValues() {_		return !this.constructorArgumentValues.isEmpty()__	};return,if,there,are,constructor,argument,values,defined,for,this,bean;public,boolean,has,constructor,argument,values,return,this,constructor,argument,values,is,empty
AbstractBeanDefinition -> public boolean hasConstructorArgumentValues();1447323728;Return if there are constructor argument values defined for this bean.;public boolean hasConstructorArgumentValues() {_		return !this.constructorArgumentValues.isEmpty()__	};return,if,there,are,constructor,argument,values,defined,for,this,bean;public,boolean,has,constructor,argument,values,return,this,constructor,argument,values,is,empty
AbstractBeanDefinition -> public boolean hasConstructorArgumentValues();1465226156;Return if there are constructor argument values defined for this bean.;public boolean hasConstructorArgumentValues() {_		return !this.constructorArgumentValues.isEmpty()__	};return,if,there,are,constructor,argument,values,defined,for,this,bean;public,boolean,has,constructor,argument,values,return,this,constructor,argument,values,is,empty
AbstractBeanDefinition -> public boolean hasConstructorArgumentValues();1467730834;Return if there are constructor argument values defined for this bean.;public boolean hasConstructorArgumentValues() {_		return !this.constructorArgumentValues.isEmpty()__	};return,if,there,are,constructor,argument,values,defined,for,this,bean;public,boolean,has,constructor,argument,values,return,this,constructor,argument,values,is,empty
AbstractBeanDefinition -> public boolean hasConstructorArgumentValues();1467846264;Return if there are constructor argument values defined for this bean.;public boolean hasConstructorArgumentValues() {_		return !this.constructorArgumentValues.isEmpty()__	};return,if,there,are,constructor,argument,values,defined,for,this,bean;public,boolean,has,constructor,argument,values,return,this,constructor,argument,values,is,empty
AbstractBeanDefinition -> public boolean hasConstructorArgumentValues();1482091545;Return if there are constructor argument values defined for this bean.;public boolean hasConstructorArgumentValues() {_		return !this.constructorArgumentValues.isEmpty()__	};return,if,there,are,constructor,argument,values,defined,for,this,bean;public,boolean,has,constructor,argument,values,return,this,constructor,argument,values,is,empty
AbstractBeanDefinition -> public boolean hasConstructorArgumentValues();1483093818;Return if there are constructor argument values defined for this bean.;public boolean hasConstructorArgumentValues() {_		return !this.constructorArgumentValues.isEmpty()__	};return,if,there,are,constructor,argument,values,defined,for,this,bean;public,boolean,has,constructor,argument,values,return,this,constructor,argument,values,is,empty
AbstractBeanDefinition -> public boolean hasConstructorArgumentValues();1495868221;Return if there are constructor argument values defined for this bean.;public boolean hasConstructorArgumentValues() {_		return !this.constructorArgumentValues.isEmpty()__	};return,if,there,are,constructor,argument,values,defined,for,this,bean;public,boolean,has,constructor,argument,values,return,this,constructor,argument,values,is,empty
AbstractBeanDefinition -> public boolean hasConstructorArgumentValues();1496837955;Return if there are constructor argument values defined for this bean.;public boolean hasConstructorArgumentValues() {_		return !this.constructorArgumentValues.isEmpty()__	};return,if,there,are,constructor,argument,values,defined,for,this,bean;public,boolean,has,constructor,argument,values,return,this,constructor,argument,values,is,empty
AbstractBeanDefinition -> public boolean hasConstructorArgumentValues();1498780456;Return if there are constructor argument values defined for this bean.;public boolean hasConstructorArgumentValues() {_		return !this.constructorArgumentValues.isEmpty()__	};return,if,there,are,constructor,argument,values,defined,for,this,bean;public,boolean,has,constructor,argument,values,return,this,constructor,argument,values,is,empty
AbstractBeanDefinition -> public boolean hasConstructorArgumentValues();1502974979;Return if there are constructor argument values defined for this bean.;public boolean hasConstructorArgumentValues() {_		return !this.constructorArgumentValues.isEmpty()__	};return,if,there,are,constructor,argument,values,defined,for,this,bean;public,boolean,has,constructor,argument,values,return,this,constructor,argument,values,is,empty
AbstractBeanDefinition -> public boolean hasConstructorArgumentValues();1503008029;Return if there are constructor argument values defined for this bean.;public boolean hasConstructorArgumentValues() {_		return !this.constructorArgumentValues.isEmpty()__	};return,if,there,are,constructor,argument,values,defined,for,this,bean;public,boolean,has,constructor,argument,values,return,this,constructor,argument,values,is,empty
AbstractBeanDefinition -> public boolean hasConstructorArgumentValues();1510606271;Return if there are constructor argument values defined for this bean.;public boolean hasConstructorArgumentValues() {_		return (this.constructorArgumentValues != null && !this.constructorArgumentValues.isEmpty())__	};return,if,there,are,constructor,argument,values,defined,for,this,bean;public,boolean,has,constructor,argument,values,return,this,constructor,argument,values,null,this,constructor,argument,values,is,empty
AbstractBeanDefinition -> public void setBeanClass(@Nullable Class<?> beanClass);1496837955;Specify the class for this bean.;public void setBeanClass(@Nullable Class<?> beanClass) {_		this.beanClass = beanClass__	};specify,the,class,for,this,bean;public,void,set,bean,class,nullable,class,bean,class,this,bean,class,bean,class
AbstractBeanDefinition -> public void setBeanClass(@Nullable Class<?> beanClass);1498780456;Specify the class for this bean.;public void setBeanClass(@Nullable Class<?> beanClass) {_		this.beanClass = beanClass__	};specify,the,class,for,this,bean;public,void,set,bean,class,nullable,class,bean,class,this,bean,class,bean,class
AbstractBeanDefinition -> public void setBeanClass(@Nullable Class<?> beanClass);1502974979;Specify the class for this bean.;public void setBeanClass(@Nullable Class<?> beanClass) {_		this.beanClass = beanClass__	};specify,the,class,for,this,bean;public,void,set,bean,class,nullable,class,bean,class,this,bean,class,bean,class
AbstractBeanDefinition -> public void setBeanClass(@Nullable Class<?> beanClass);1503008029;Specify the class for this bean.;public void setBeanClass(@Nullable Class<?> beanClass) {_		this.beanClass = beanClass__	};specify,the,class,for,this,bean;public,void,set,bean,class,nullable,class,bean,class,this,bean,class,bean,class
AbstractBeanDefinition -> public void setBeanClass(@Nullable Class<?> beanClass);1510606271;Specify the class for this bean.;public void setBeanClass(@Nullable Class<?> beanClass) {_		this.beanClass = beanClass__	};specify,the,class,for,this,bean;public,void,set,bean,class,nullable,class,bean,class,this,bean,class,bean,class
AbstractBeanDefinition -> public void setBeanClass(@Nullable Class<?> beanClass);1510675876;Specify the class for this bean.;public void setBeanClass(@Nullable Class<?> beanClass) {_		this.beanClass = beanClass__	};specify,the,class,for,this,bean;public,void,set,bean,class,nullable,class,bean,class,this,bean,class,bean,class
AbstractBeanDefinition -> public void setBeanClass(@Nullable Class<?> beanClass);1530174524;Specify the class for this bean.;public void setBeanClass(@Nullable Class<?> beanClass) {_		this.beanClass = beanClass__	};specify,the,class,for,this,bean;public,void,set,bean,class,nullable,class,bean,class,this,bean,class,bean,class
AbstractBeanDefinition -> public void setBeanClass(@Nullable Class<?> beanClass);1530174524;Specify the class for this bean.;public void setBeanClass(@Nullable Class<?> beanClass) {_		this.beanClass = beanClass__	};specify,the,class,for,this,bean;public,void,set,bean,class,nullable,class,bean,class,this,bean,class,bean,class
AbstractBeanDefinition -> public void setBeanClass(@Nullable Class<?> beanClass);1530174524;Specify the class for this bean.;public void setBeanClass(@Nullable Class<?> beanClass) {_		this.beanClass = beanClass__	};specify,the,class,for,this,bean;public,void,set,bean,class,nullable,class,bean,class,this,bean,class,bean,class
AbstractBeanDefinition -> public void setBeanClass(@Nullable Class<?> beanClass);1530190293;Specify the class for this bean.;public void setBeanClass(@Nullable Class<?> beanClass) {_		this.beanClass = beanClass__	};specify,the,class,for,this,bean;public,void,set,bean,class,nullable,class,bean,class,this,bean,class,bean,class
AbstractBeanDefinition -> public void setBeanClass(@Nullable Class<?> beanClass);1532981251;Specify the class for this bean.;public void setBeanClass(@Nullable Class<?> beanClass) {_		this.beanClass = beanClass__	};specify,the,class,for,this,bean;public,void,set,bean,class,nullable,class,bean,class,this,bean,class,bean,class
AbstractBeanDefinition -> public void setBeanClass(@Nullable Class<?> beanClass);1536863076;Specify the class for this bean.;public void setBeanClass(@Nullable Class<?> beanClass) {_		this.beanClass = beanClass__	};specify,the,class,for,this,bean;public,void,set,bean,class,nullable,class,bean,class,this,bean,class,bean,class
AbstractBeanDefinition -> public abstract AbstractBeanDefinition cloneBeanDefinition()_;1328020251;Clone this bean definition._To be implemented by concrete subclasses._@return the cloned bean definition object;public abstract AbstractBeanDefinition cloneBeanDefinition()_;clone,this,bean,definition,to,be,implemented,by,concrete,subclasses,return,the,cloned,bean,definition,object;public,abstract,abstract,bean,definition,clone,bean,definition
AbstractBeanDefinition -> public abstract AbstractBeanDefinition cloneBeanDefinition()_;1337202589;Clone this bean definition._To be implemented by concrete subclasses._@return the cloned bean definition object;public abstract AbstractBeanDefinition cloneBeanDefinition()_;clone,this,bean,definition,to,be,implemented,by,concrete,subclasses,return,the,cloned,bean,definition,object;public,abstract,abstract,bean,definition,clone,bean,definition
AbstractBeanDefinition -> public abstract AbstractBeanDefinition cloneBeanDefinition()_;1356735495;Clone this bean definition._To be implemented by concrete subclasses._@return the cloned bean definition object;public abstract AbstractBeanDefinition cloneBeanDefinition()_;clone,this,bean,definition,to,be,implemented,by,concrete,subclasses,return,the,cloned,bean,definition,object;public,abstract,abstract,bean,definition,clone,bean,definition
AbstractBeanDefinition -> public abstract AbstractBeanDefinition cloneBeanDefinition()_;1357119239;Clone this bean definition._To be implemented by concrete subclasses._@return the cloned bean definition object;public abstract AbstractBeanDefinition cloneBeanDefinition()_;clone,this,bean,definition,to,be,implemented,by,concrete,subclasses,return,the,cloned,bean,definition,object;public,abstract,abstract,bean,definition,clone,bean,definition
AbstractBeanDefinition -> public abstract AbstractBeanDefinition cloneBeanDefinition()_;1367508310;Clone this bean definition._To be implemented by concrete subclasses._@return the cloned bean definition object;public abstract AbstractBeanDefinition cloneBeanDefinition()_;clone,this,bean,definition,to,be,implemented,by,concrete,subclasses,return,the,cloned,bean,definition,object;public,abstract,abstract,bean,definition,clone,bean,definition
AbstractBeanDefinition -> public abstract AbstractBeanDefinition cloneBeanDefinition()_;1367943112;Clone this bean definition._To be implemented by concrete subclasses._@return the cloned bean definition object;public abstract AbstractBeanDefinition cloneBeanDefinition()_;clone,this,bean,definition,to,be,implemented,by,concrete,subclasses,return,the,cloned,bean,definition,object;public,abstract,abstract,bean,definition,clone,bean,definition
AbstractBeanDefinition -> public abstract AbstractBeanDefinition cloneBeanDefinition()_;1368482696;Clone this bean definition._To be implemented by concrete subclasses._@return the cloned bean definition object;public abstract AbstractBeanDefinition cloneBeanDefinition()_;clone,this,bean,definition,to,be,implemented,by,concrete,subclasses,return,the,cloned,bean,definition,object;public,abstract,abstract,bean,definition,clone,bean,definition
AbstractBeanDefinition -> public abstract AbstractBeanDefinition cloneBeanDefinition()_;1385412762;Clone this bean definition._To be implemented by concrete subclasses._@return the cloned bean definition object;public abstract AbstractBeanDefinition cloneBeanDefinition()_;clone,this,bean,definition,to,be,implemented,by,concrete,subclasses,return,the,cloned,bean,definition,object;public,abstract,abstract,bean,definition,clone,bean,definition
AbstractBeanDefinition -> public abstract AbstractBeanDefinition cloneBeanDefinition()_;1392245317;Clone this bean definition._To be implemented by concrete subclasses._@return the cloned bean definition object;public abstract AbstractBeanDefinition cloneBeanDefinition()_;clone,this,bean,definition,to,be,implemented,by,concrete,subclasses,return,the,cloned,bean,definition,object;public,abstract,abstract,bean,definition,clone,bean,definition
AbstractBeanDefinition -> public abstract AbstractBeanDefinition cloneBeanDefinition()_;1397163142;Clone this bean definition._To be implemented by concrete subclasses._@return the cloned bean definition object;public abstract AbstractBeanDefinition cloneBeanDefinition()_;clone,this,bean,definition,to,be,implemented,by,concrete,subclasses,return,the,cloned,bean,definition,object;public,abstract,abstract,bean,definition,clone,bean,definition
AbstractBeanDefinition -> public abstract AbstractBeanDefinition cloneBeanDefinition()_;1398898390;Clone this bean definition._To be implemented by concrete subclasses._@return the cloned bean definition object;public abstract AbstractBeanDefinition cloneBeanDefinition()_;clone,this,bean,definition,to,be,implemented,by,concrete,subclasses,return,the,cloned,bean,definition,object;public,abstract,abstract,bean,definition,clone,bean,definition
AbstractBeanDefinition -> public abstract AbstractBeanDefinition cloneBeanDefinition()_;1407511029;Clone this bean definition._To be implemented by concrete subclasses._@return the cloned bean definition object;public abstract AbstractBeanDefinition cloneBeanDefinition()_;clone,this,bean,definition,to,be,implemented,by,concrete,subclasses,return,the,cloned,bean,definition,object;public,abstract,abstract,bean,definition,clone,bean,definition
AbstractBeanDefinition -> public abstract AbstractBeanDefinition cloneBeanDefinition()_;1432135182;Clone this bean definition._To be implemented by concrete subclasses._@return the cloned bean definition object;public abstract AbstractBeanDefinition cloneBeanDefinition()_;clone,this,bean,definition,to,be,implemented,by,concrete,subclasses,return,the,cloned,bean,definition,object;public,abstract,abstract,bean,definition,clone,bean,definition
AbstractBeanDefinition -> public abstract AbstractBeanDefinition cloneBeanDefinition()_;1434204509;Clone this bean definition._To be implemented by concrete subclasses._@return the cloned bean definition object;public abstract AbstractBeanDefinition cloneBeanDefinition()_;clone,this,bean,definition,to,be,implemented,by,concrete,subclasses,return,the,cloned,bean,definition,object;public,abstract,abstract,bean,definition,clone,bean,definition
AbstractBeanDefinition -> public abstract AbstractBeanDefinition cloneBeanDefinition()_;1447323728;Clone this bean definition._To be implemented by concrete subclasses._@return the cloned bean definition object;public abstract AbstractBeanDefinition cloneBeanDefinition()_;clone,this,bean,definition,to,be,implemented,by,concrete,subclasses,return,the,cloned,bean,definition,object;public,abstract,abstract,bean,definition,clone,bean,definition
AbstractBeanDefinition -> public abstract AbstractBeanDefinition cloneBeanDefinition()_;1465226156;Clone this bean definition._To be implemented by concrete subclasses._@return the cloned bean definition object;public abstract AbstractBeanDefinition cloneBeanDefinition()_;clone,this,bean,definition,to,be,implemented,by,concrete,subclasses,return,the,cloned,bean,definition,object;public,abstract,abstract,bean,definition,clone,bean,definition
AbstractBeanDefinition -> public abstract AbstractBeanDefinition cloneBeanDefinition()_;1467730834;Clone this bean definition._To be implemented by concrete subclasses._@return the cloned bean definition object;public abstract AbstractBeanDefinition cloneBeanDefinition()_;clone,this,bean,definition,to,be,implemented,by,concrete,subclasses,return,the,cloned,bean,definition,object;public,abstract,abstract,bean,definition,clone,bean,definition
AbstractBeanDefinition -> public abstract AbstractBeanDefinition cloneBeanDefinition()_;1467846264;Clone this bean definition._To be implemented by concrete subclasses._@return the cloned bean definition object;public abstract AbstractBeanDefinition cloneBeanDefinition()_;clone,this,bean,definition,to,be,implemented,by,concrete,subclasses,return,the,cloned,bean,definition,object;public,abstract,abstract,bean,definition,clone,bean,definition
AbstractBeanDefinition -> public abstract AbstractBeanDefinition cloneBeanDefinition()_;1482091545;Clone this bean definition._To be implemented by concrete subclasses._@return the cloned bean definition object;public abstract AbstractBeanDefinition cloneBeanDefinition()_;clone,this,bean,definition,to,be,implemented,by,concrete,subclasses,return,the,cloned,bean,definition,object;public,abstract,abstract,bean,definition,clone,bean,definition
AbstractBeanDefinition -> public abstract AbstractBeanDefinition cloneBeanDefinition()_;1483093818;Clone this bean definition._To be implemented by concrete subclasses._@return the cloned bean definition object;public abstract AbstractBeanDefinition cloneBeanDefinition()_;clone,this,bean,definition,to,be,implemented,by,concrete,subclasses,return,the,cloned,bean,definition,object;public,abstract,abstract,bean,definition,clone,bean,definition
AbstractBeanDefinition -> public abstract AbstractBeanDefinition cloneBeanDefinition()_;1495868221;Clone this bean definition._To be implemented by concrete subclasses._@return the cloned bean definition object;public abstract AbstractBeanDefinition cloneBeanDefinition()_;clone,this,bean,definition,to,be,implemented,by,concrete,subclasses,return,the,cloned,bean,definition,object;public,abstract,abstract,bean,definition,clone,bean,definition
AbstractBeanDefinition -> public abstract AbstractBeanDefinition cloneBeanDefinition()_;1496837955;Clone this bean definition._To be implemented by concrete subclasses._@return the cloned bean definition object;public abstract AbstractBeanDefinition cloneBeanDefinition()_;clone,this,bean,definition,to,be,implemented,by,concrete,subclasses,return,the,cloned,bean,definition,object;public,abstract,abstract,bean,definition,clone,bean,definition
AbstractBeanDefinition -> public abstract AbstractBeanDefinition cloneBeanDefinition()_;1498780456;Clone this bean definition._To be implemented by concrete subclasses._@return the cloned bean definition object;public abstract AbstractBeanDefinition cloneBeanDefinition()_;clone,this,bean,definition,to,be,implemented,by,concrete,subclasses,return,the,cloned,bean,definition,object;public,abstract,abstract,bean,definition,clone,bean,definition
AbstractBeanDefinition -> public abstract AbstractBeanDefinition cloneBeanDefinition()_;1502974979;Clone this bean definition._To be implemented by concrete subclasses._@return the cloned bean definition object;public abstract AbstractBeanDefinition cloneBeanDefinition()_;clone,this,bean,definition,to,be,implemented,by,concrete,subclasses,return,the,cloned,bean,definition,object;public,abstract,abstract,bean,definition,clone,bean,definition
AbstractBeanDefinition -> public abstract AbstractBeanDefinition cloneBeanDefinition()_;1503008029;Clone this bean definition._To be implemented by concrete subclasses._@return the cloned bean definition object;public abstract AbstractBeanDefinition cloneBeanDefinition()_;clone,this,bean,definition,to,be,implemented,by,concrete,subclasses,return,the,cloned,bean,definition,object;public,abstract,abstract,bean,definition,clone,bean,definition
AbstractBeanDefinition -> public abstract AbstractBeanDefinition cloneBeanDefinition()_;1510606271;Clone this bean definition._To be implemented by concrete subclasses._@return the cloned bean definition object;public abstract AbstractBeanDefinition cloneBeanDefinition()_;clone,this,bean,definition,to,be,implemented,by,concrete,subclasses,return,the,cloned,bean,definition,object;public,abstract,abstract,bean,definition,clone,bean,definition
AbstractBeanDefinition -> public abstract AbstractBeanDefinition cloneBeanDefinition()_;1510675876;Clone this bean definition._To be implemented by concrete subclasses._@return the cloned bean definition object;public abstract AbstractBeanDefinition cloneBeanDefinition()_;clone,this,bean,definition,to,be,implemented,by,concrete,subclasses,return,the,cloned,bean,definition,object;public,abstract,abstract,bean,definition,clone,bean,definition
AbstractBeanDefinition -> public abstract AbstractBeanDefinition cloneBeanDefinition()_;1530174524;Clone this bean definition._To be implemented by concrete subclasses._@return the cloned bean definition object;public abstract AbstractBeanDefinition cloneBeanDefinition()_;clone,this,bean,definition,to,be,implemented,by,concrete,subclasses,return,the,cloned,bean,definition,object;public,abstract,abstract,bean,definition,clone,bean,definition
AbstractBeanDefinition -> public abstract AbstractBeanDefinition cloneBeanDefinition()_;1530174524;Clone this bean definition._To be implemented by concrete subclasses._@return the cloned bean definition object;public abstract AbstractBeanDefinition cloneBeanDefinition()_;clone,this,bean,definition,to,be,implemented,by,concrete,subclasses,return,the,cloned,bean,definition,object;public,abstract,abstract,bean,definition,clone,bean,definition
AbstractBeanDefinition -> public abstract AbstractBeanDefinition cloneBeanDefinition()_;1530174524;Clone this bean definition._To be implemented by concrete subclasses._@return the cloned bean definition object;public abstract AbstractBeanDefinition cloneBeanDefinition()_;clone,this,bean,definition,to,be,implemented,by,concrete,subclasses,return,the,cloned,bean,definition,object;public,abstract,abstract,bean,definition,clone,bean,definition
AbstractBeanDefinition -> public abstract AbstractBeanDefinition cloneBeanDefinition()_;1530190293;Clone this bean definition._To be implemented by concrete subclasses._@return the cloned bean definition object;public abstract AbstractBeanDefinition cloneBeanDefinition()_;clone,this,bean,definition,to,be,implemented,by,concrete,subclasses,return,the,cloned,bean,definition,object;public,abstract,abstract,bean,definition,clone,bean,definition
AbstractBeanDefinition -> public abstract AbstractBeanDefinition cloneBeanDefinition()_;1532981251;Clone this bean definition._To be implemented by concrete subclasses._@return the cloned bean definition object;public abstract AbstractBeanDefinition cloneBeanDefinition()_;clone,this,bean,definition,to,be,implemented,by,concrete,subclasses,return,the,cloned,bean,definition,object;public,abstract,abstract,bean,definition,clone,bean,definition
AbstractBeanDefinition -> public abstract AbstractBeanDefinition cloneBeanDefinition()_;1536863076;Clone this bean definition._To be implemented by concrete subclasses._@return the cloned bean definition object;public abstract AbstractBeanDefinition cloneBeanDefinition()_;clone,this,bean,definition,to,be,implemented,by,concrete,subclasses,return,the,cloned,bean,definition,object;public,abstract,abstract,bean,definition,clone,bean,definition
AbstractBeanDefinition -> @Override 	@Nullable 	public String getScope();1498780456;Return the name of the target scope for the bean.;@Override_	@Nullable_	public String getScope() {_		return this.scope__	};return,the,name,of,the,target,scope,for,the,bean;override,nullable,public,string,get,scope,return,this,scope
AbstractBeanDefinition -> @Override 	@Nullable 	public String getScope();1502974979;Return the name of the target scope for the bean.;@Override_	@Nullable_	public String getScope() {_		return this.scope__	};return,the,name,of,the,target,scope,for,the,bean;override,nullable,public,string,get,scope,return,this,scope
AbstractBeanDefinition -> @Override 	@Nullable 	public String getScope();1503008029;Return the name of the target scope for the bean.;@Override_	@Nullable_	public String getScope() {_		return this.scope__	};return,the,name,of,the,target,scope,for,the,bean;override,nullable,public,string,get,scope,return,this,scope
AbstractBeanDefinition -> @Override 	@Nullable 	public String getScope();1510606271;Return the name of the target scope for the bean.;@Override_	@Nullable_	public String getScope() {_		return this.scope__	};return,the,name,of,the,target,scope,for,the,bean;override,nullable,public,string,get,scope,return,this,scope
AbstractBeanDefinition -> @Override 	@Nullable 	public String getScope();1510675876;Return the name of the target scope for the bean.;@Override_	@Nullable_	public String getScope() {_		return this.scope__	};return,the,name,of,the,target,scope,for,the,bean;override,nullable,public,string,get,scope,return,this,scope
AbstractBeanDefinition -> @Override 	@Nullable 	public String getScope();1530174524;Return the name of the target scope for the bean.;@Override_	@Nullable_	public String getScope() {_		return this.scope__	};return,the,name,of,the,target,scope,for,the,bean;override,nullable,public,string,get,scope,return,this,scope
AbstractBeanDefinition -> @Override 	@Nullable 	public String getScope();1530174524;Return the name of the target scope for the bean.;@Override_	@Nullable_	public String getScope() {_		return this.scope__	};return,the,name,of,the,target,scope,for,the,bean;override,nullable,public,string,get,scope,return,this,scope
AbstractBeanDefinition -> @Override 	@Nullable 	public String getScope();1530174524;Return the name of the target scope for the bean.;@Override_	@Nullable_	public String getScope() {_		return this.scope__	};return,the,name,of,the,target,scope,for,the,bean;override,nullable,public,string,get,scope,return,this,scope
AbstractBeanDefinition -> @Override 	@Nullable 	public String getScope();1530190293;Return the name of the target scope for the bean.;@Override_	@Nullable_	public String getScope() {_		return this.scope__	};return,the,name,of,the,target,scope,for,the,bean;override,nullable,public,string,get,scope,return,this,scope
AbstractBeanDefinition -> @Override 	@Nullable 	public String getScope();1532981251;Return the name of the target scope for the bean.;@Override_	@Nullable_	public String getScope() {_		return this.scope__	};return,the,name,of,the,target,scope,for,the,bean;override,nullable,public,string,get,scope,return,this,scope
AbstractBeanDefinition -> @Override 	@Nullable 	public String getScope();1536863076;Return the name of the target scope for the bean.;@Override_	@Nullable_	public String getScope() {_		return this.scope__	};return,the,name,of,the,target,scope,for,the,bean;override,nullable,public,string,get,scope,return,this,scope
AbstractBeanDefinition -> @Nullable 	public String getInitMethodName();1495868221;Return the name of the initializer method.;@Nullable_	public String getInitMethodName() {_		return this.initMethodName__	};return,the,name,of,the,initializer,method;nullable,public,string,get,init,method,name,return,this,init,method,name
AbstractBeanDefinition -> @Nullable 	public String getInitMethodName();1496837955;Return the name of the initializer method.;@Nullable_	public String getInitMethodName() {_		return this.initMethodName__	};return,the,name,of,the,initializer,method;nullable,public,string,get,init,method,name,return,this,init,method,name
AbstractBeanDefinition -> @Nullable 	public String getInitMethodName();1498780456;Return the name of the initializer method.;@Nullable_	public String getInitMethodName() {_		return this.initMethodName__	};return,the,name,of,the,initializer,method;nullable,public,string,get,init,method,name,return,this,init,method,name
AbstractBeanDefinition -> @Nullable 	public String getInitMethodName();1502974979;Return the name of the initializer method.;@Nullable_	public String getInitMethodName() {_		return this.initMethodName__	};return,the,name,of,the,initializer,method;nullable,public,string,get,init,method,name,return,this,init,method,name
AbstractBeanDefinition -> @Nullable 	public String getInitMethodName();1503008029;Return the name of the initializer method.;@Nullable_	public String getInitMethodName() {_		return this.initMethodName__	};return,the,name,of,the,initializer,method;nullable,public,string,get,init,method,name,return,this,init,method,name
AbstractBeanDefinition -> @Nullable 	public String getInitMethodName();1510606271;Return the name of the initializer method.;@Nullable_	public String getInitMethodName() {_		return this.initMethodName__	};return,the,name,of,the,initializer,method;nullable,public,string,get,init,method,name,return,this,init,method,name
AbstractBeanDefinition -> @Nullable 	public String getInitMethodName();1510675876;Return the name of the initializer method.;@Nullable_	public String getInitMethodName() {_		return this.initMethodName__	};return,the,name,of,the,initializer,method;nullable,public,string,get,init,method,name,return,this,init,method,name
AbstractBeanDefinition -> @Nullable 	public String getInitMethodName();1530174524;Return the name of the initializer method.;@Nullable_	public String getInitMethodName() {_		return this.initMethodName__	};return,the,name,of,the,initializer,method;nullable,public,string,get,init,method,name,return,this,init,method,name
AbstractBeanDefinition -> @Nullable 	public String getInitMethodName();1530174524;Return the name of the initializer method.;@Nullable_	public String getInitMethodName() {_		return this.initMethodName__	};return,the,name,of,the,initializer,method;nullable,public,string,get,init,method,name,return,this,init,method,name
AbstractBeanDefinition -> @Nullable 	public String getInitMethodName();1530174524;Return the name of the initializer method.;@Nullable_	public String getInitMethodName() {_		return this.initMethodName__	};return,the,name,of,the,initializer,method;nullable,public,string,get,init,method,name,return,this,init,method,name
AbstractBeanDefinition -> @Nullable 	public String getInitMethodName();1530190293;Return the name of the initializer method.;@Nullable_	public String getInitMethodName() {_		return this.initMethodName__	};return,the,name,of,the,initializer,method;nullable,public,string,get,init,method,name,return,this,init,method,name
AbstractBeanDefinition -> @Nullable 	public String getInitMethodName();1532981251;Return the name of the initializer method.;@Nullable_	public String getInitMethodName() {_		return this.initMethodName__	};return,the,name,of,the,initializer,method;nullable,public,string,get,init,method,name,return,this,init,method,name
AbstractBeanDefinition -> public void setDependsOn(String[] dependsOn);1328020251;Set the names of the beans that this bean depends on being initialized._The bean factory will guarantee that these beans get initialized first._<p>Note that dependencies are normally expressed through bean properties or_constructor arguments. This property should just be necessary for other kinds_of dependencies like statics (*ugh*) or database preparation on startup.;public void setDependsOn(String[] dependsOn) {_		this.dependsOn = dependsOn__	};set,the,names,of,the,beans,that,this,bean,depends,on,being,initialized,the,bean,factory,will,guarantee,that,these,beans,get,initialized,first,p,note,that,dependencies,are,normally,expressed,through,bean,properties,or,constructor,arguments,this,property,should,just,be,necessary,for,other,kinds,of,dependencies,like,statics,ugh,or,database,preparation,on,startup;public,void,set,depends,on,string,depends,on,this,depends,on,depends,on
AbstractBeanDefinition -> public void setDependsOn(String[] dependsOn);1337202589;Set the names of the beans that this bean depends on being initialized._The bean factory will guarantee that these beans get initialized first._<p>Note that dependencies are normally expressed through bean properties or_constructor arguments. This property should just be necessary for other kinds_of dependencies like statics (*ugh*) or database preparation on startup.;public void setDependsOn(String[] dependsOn) {_		this.dependsOn = dependsOn__	};set,the,names,of,the,beans,that,this,bean,depends,on,being,initialized,the,bean,factory,will,guarantee,that,these,beans,get,initialized,first,p,note,that,dependencies,are,normally,expressed,through,bean,properties,or,constructor,arguments,this,property,should,just,be,necessary,for,other,kinds,of,dependencies,like,statics,ugh,or,database,preparation,on,startup;public,void,set,depends,on,string,depends,on,this,depends,on,depends,on
AbstractBeanDefinition -> public void setDependsOn(String[] dependsOn);1357119239;Set the names of the beans that this bean depends on being initialized._The bean factory will guarantee that these beans get initialized first._<p>Note that dependencies are normally expressed through bean properties or_constructor arguments. This property should just be necessary for other kinds_of dependencies like statics (*ugh*) or database preparation on startup.;public void setDependsOn(String[] dependsOn) {_		this.dependsOn = dependsOn__	};set,the,names,of,the,beans,that,this,bean,depends,on,being,initialized,the,bean,factory,will,guarantee,that,these,beans,get,initialized,first,p,note,that,dependencies,are,normally,expressed,through,bean,properties,or,constructor,arguments,this,property,should,just,be,necessary,for,other,kinds,of,dependencies,like,statics,ugh,or,database,preparation,on,startup;public,void,set,depends,on,string,depends,on,this,depends,on,depends,on
AbstractBeanDefinition -> public void setDependsOn(String[] dependsOn);1367508310;Set the names of the beans that this bean depends on being initialized._The bean factory will guarantee that these beans get initialized first._<p>Note that dependencies are normally expressed through bean properties or_constructor arguments. This property should just be necessary for other kinds_of dependencies like statics (*ugh*) or database preparation on startup.;public void setDependsOn(String[] dependsOn) {_		this.dependsOn = dependsOn__	};set,the,names,of,the,beans,that,this,bean,depends,on,being,initialized,the,bean,factory,will,guarantee,that,these,beans,get,initialized,first,p,note,that,dependencies,are,normally,expressed,through,bean,properties,or,constructor,arguments,this,property,should,just,be,necessary,for,other,kinds,of,dependencies,like,statics,ugh,or,database,preparation,on,startup;public,void,set,depends,on,string,depends,on,this,depends,on,depends,on
AbstractBeanDefinition -> public void setDependsOn(String[] dependsOn);1367943112;Set the names of the beans that this bean depends on being initialized._The bean factory will guarantee that these beans get initialized first._<p>Note that dependencies are normally expressed through bean properties or_constructor arguments. This property should just be necessary for other kinds_of dependencies like statics (*ugh*) or database preparation on startup.;public void setDependsOn(String[] dependsOn) {_		this.dependsOn = dependsOn__	};set,the,names,of,the,beans,that,this,bean,depends,on,being,initialized,the,bean,factory,will,guarantee,that,these,beans,get,initialized,first,p,note,that,dependencies,are,normally,expressed,through,bean,properties,or,constructor,arguments,this,property,should,just,be,necessary,for,other,kinds,of,dependencies,like,statics,ugh,or,database,preparation,on,startup;public,void,set,depends,on,string,depends,on,this,depends,on,depends,on
AbstractBeanDefinition -> @Override 	@Nullable 	public String getFactoryMethodName();1498780456;Return a factory method, if any.;@Override_	@Nullable_	public String getFactoryMethodName() {_		return this.factoryMethodName__	};return,a,factory,method,if,any;override,nullable,public,string,get,factory,method,name,return,this,factory,method,name
AbstractBeanDefinition -> @Override 	@Nullable 	public String getFactoryMethodName();1502974979;Return a factory method, if any.;@Override_	@Nullable_	public String getFactoryMethodName() {_		return this.factoryMethodName__	};return,a,factory,method,if,any;override,nullable,public,string,get,factory,method,name,return,this,factory,method,name
AbstractBeanDefinition -> @Override 	@Nullable 	public String getFactoryMethodName();1503008029;Return a factory method, if any.;@Override_	@Nullable_	public String getFactoryMethodName() {_		return this.factoryMethodName__	};return,a,factory,method,if,any;override,nullable,public,string,get,factory,method,name,return,this,factory,method,name
AbstractBeanDefinition -> @Override 	@Nullable 	public String getFactoryMethodName();1510606271;Return a factory method, if any.;@Override_	@Nullable_	public String getFactoryMethodName() {_		return this.factoryMethodName__	};return,a,factory,method,if,any;override,nullable,public,string,get,factory,method,name,return,this,factory,method,name
AbstractBeanDefinition -> @Override 	@Nullable 	public String getFactoryMethodName();1510675876;Return a factory method, if any.;@Override_	@Nullable_	public String getFactoryMethodName() {_		return this.factoryMethodName__	};return,a,factory,method,if,any;override,nullable,public,string,get,factory,method,name,return,this,factory,method,name
AbstractBeanDefinition -> @Override 	@Nullable 	public String getFactoryMethodName();1530174524;Return a factory method, if any.;@Override_	@Nullable_	public String getFactoryMethodName() {_		return this.factoryMethodName__	};return,a,factory,method,if,any;override,nullable,public,string,get,factory,method,name,return,this,factory,method,name
AbstractBeanDefinition -> @Override 	@Nullable 	public String getFactoryMethodName();1530174524;Return a factory method, if any.;@Override_	@Nullable_	public String getFactoryMethodName() {_		return this.factoryMethodName__	};return,a,factory,method,if,any;override,nullable,public,string,get,factory,method,name,return,this,factory,method,name
AbstractBeanDefinition -> @Override 	@Nullable 	public String getFactoryMethodName();1530174524;Return a factory method, if any.;@Override_	@Nullable_	public String getFactoryMethodName() {_		return this.factoryMethodName__	};return,a,factory,method,if,any;override,nullable,public,string,get,factory,method,name,return,this,factory,method,name
AbstractBeanDefinition -> @Override 	@Nullable 	public String getFactoryMethodName();1530190293;Return a factory method, if any.;@Override_	@Nullable_	public String getFactoryMethodName() {_		return this.factoryMethodName__	};return,a,factory,method,if,any;override,nullable,public,string,get,factory,method,name,return,this,factory,method,name
AbstractBeanDefinition -> @Override 	@Nullable 	public String getFactoryMethodName();1532981251;Return a factory method, if any.;@Override_	@Nullable_	public String getFactoryMethodName() {_		return this.factoryMethodName__	};return,a,factory,method,if,any;override,nullable,public,string,get,factory,method,name,return,this,factory,method,name
AbstractBeanDefinition -> @Override 	@Nullable 	public String getFactoryMethodName();1536863076;Return a factory method, if any.;@Override_	@Nullable_	public String getFactoryMethodName() {_		return this.factoryMethodName__	};return,a,factory,method,if,any;override,nullable,public,string,get,factory,method,name,return,this,factory,method,name
AbstractBeanDefinition -> public int getRole();1328020251;Return the role hint for this <code>BeanDefinition</code>.;public int getRole() {_		return this.role__	};return,the,role,hint,for,this,code,bean,definition,code;public,int,get,role,return,this,role
AbstractBeanDefinition -> public int getRole();1337202589;Return the role hint for this <code>BeanDefinition</code>.;public int getRole() {_		return this.role__	};return,the,role,hint,for,this,code,bean,definition,code;public,int,get,role,return,this,role
AbstractBeanDefinition -> public int getRole();1357119239;Return the role hint for this {@code BeanDefinition}.;public int getRole() {_		return this.role__	};return,the,role,hint,for,this,code,bean,definition;public,int,get,role,return,this,role
AbstractBeanDefinition -> public int getRole();1367508310;Return the role hint for this {@code BeanDefinition}.;public int getRole() {_		return this.role__	};return,the,role,hint,for,this,code,bean,definition;public,int,get,role,return,this,role
AbstractBeanDefinition -> public int getRole();1367943112;Return the role hint for this {@code BeanDefinition}.;public int getRole() {_		return this.role__	};return,the,role,hint,for,this,code,bean,definition;public,int,get,role,return,this,role
AbstractBeanDefinition -> @Override 	public boolean isAutowireCandidate();1356735495;Return whether this bean is a candidate for getting autowired into some other bean.;@Override_	public boolean isAutowireCandidate() {_		return this.autowireCandidate__	};return,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,boolean,is,autowire,candidate,return,this,autowire,candidate
AbstractBeanDefinition -> @Override 	public boolean isAutowireCandidate();1368482696;Return whether this bean is a candidate for getting autowired into some other bean.;@Override_	public boolean isAutowireCandidate() {_		return this.autowireCandidate__	};return,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,boolean,is,autowire,candidate,return,this,autowire,candidate
AbstractBeanDefinition -> @Override 	public boolean isAutowireCandidate();1385412762;Return whether this bean is a candidate for getting autowired into some other bean.;@Override_	public boolean isAutowireCandidate() {_		return this.autowireCandidate__	};return,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,boolean,is,autowire,candidate,return,this,autowire,candidate
AbstractBeanDefinition -> @Override 	public boolean isAutowireCandidate();1392245317;Return whether this bean is a candidate for getting autowired into some other bean.;@Override_	public boolean isAutowireCandidate() {_		return this.autowireCandidate__	};return,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,boolean,is,autowire,candidate,return,this,autowire,candidate
AbstractBeanDefinition -> @Override 	public boolean isAutowireCandidate();1397163142;Return whether this bean is a candidate for getting autowired into some other bean.;@Override_	public boolean isAutowireCandidate() {_		return this.autowireCandidate__	};return,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,boolean,is,autowire,candidate,return,this,autowire,candidate
AbstractBeanDefinition -> @Override 	public boolean isAutowireCandidate();1398898390;Return whether this bean is a candidate for getting autowired into some other bean.;@Override_	public boolean isAutowireCandidate() {_		return this.autowireCandidate__	};return,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,boolean,is,autowire,candidate,return,this,autowire,candidate
AbstractBeanDefinition -> @Override 	public boolean isAutowireCandidate();1407511029;Return whether this bean is a candidate for getting autowired into some other bean.;@Override_	public boolean isAutowireCandidate() {_		return this.autowireCandidate__	};return,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,boolean,is,autowire,candidate,return,this,autowire,candidate
AbstractBeanDefinition -> @Override 	public boolean isAutowireCandidate();1432135182;Return whether this bean is a candidate for getting autowired into some other bean.;@Override_	public boolean isAutowireCandidate() {_		return this.autowireCandidate__	};return,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,boolean,is,autowire,candidate,return,this,autowire,candidate
AbstractBeanDefinition -> @Override 	public boolean isAutowireCandidate();1434204509;Return whether this bean is a candidate for getting autowired into some other bean.;@Override_	public boolean isAutowireCandidate() {_		return this.autowireCandidate__	};return,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,boolean,is,autowire,candidate,return,this,autowire,candidate
AbstractBeanDefinition -> @Override 	public boolean isAutowireCandidate();1447323728;Return whether this bean is a candidate for getting autowired into some other bean.;@Override_	public boolean isAutowireCandidate() {_		return this.autowireCandidate__	};return,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,boolean,is,autowire,candidate,return,this,autowire,candidate
AbstractBeanDefinition -> @Override 	public boolean isAutowireCandidate();1465226156;Return whether this bean is a candidate for getting autowired into some other bean.;@Override_	public boolean isAutowireCandidate() {_		return this.autowireCandidate__	};return,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,boolean,is,autowire,candidate,return,this,autowire,candidate
AbstractBeanDefinition -> @Override 	public boolean isAutowireCandidate();1467730834;Return whether this bean is a candidate for getting autowired into some other bean.;@Override_	public boolean isAutowireCandidate() {_		return this.autowireCandidate__	};return,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,boolean,is,autowire,candidate,return,this,autowire,candidate
AbstractBeanDefinition -> @Override 	public boolean isAutowireCandidate();1467846264;Return whether this bean is a candidate for getting autowired into some other bean.;@Override_	public boolean isAutowireCandidate() {_		return this.autowireCandidate__	};return,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,boolean,is,autowire,candidate,return,this,autowire,candidate
AbstractBeanDefinition -> @Override 	public boolean isAutowireCandidate();1482091545;Return whether this bean is a candidate for getting autowired into some other bean.;@Override_	public boolean isAutowireCandidate() {_		return this.autowireCandidate__	};return,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,boolean,is,autowire,candidate,return,this,autowire,candidate
AbstractBeanDefinition -> @Override 	public boolean isAutowireCandidate();1483093818;Return whether this bean is a candidate for getting autowired into some other bean.;@Override_	public boolean isAutowireCandidate() {_		return this.autowireCandidate__	};return,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,boolean,is,autowire,candidate,return,this,autowire,candidate
AbstractBeanDefinition -> @Override 	public boolean isAutowireCandidate();1495868221;Return whether this bean is a candidate for getting autowired into some other bean.;@Override_	public boolean isAutowireCandidate() {_		return this.autowireCandidate__	};return,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,boolean,is,autowire,candidate,return,this,autowire,candidate
AbstractBeanDefinition -> @Override 	public boolean isAutowireCandidate();1496837955;Return whether this bean is a candidate for getting autowired into some other bean.;@Override_	public boolean isAutowireCandidate() {_		return this.autowireCandidate__	};return,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,boolean,is,autowire,candidate,return,this,autowire,candidate
AbstractBeanDefinition -> @Override 	public boolean isAutowireCandidate();1498780456;Return whether this bean is a candidate for getting autowired into some other bean.;@Override_	public boolean isAutowireCandidate() {_		return this.autowireCandidate__	};return,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,boolean,is,autowire,candidate,return,this,autowire,candidate
AbstractBeanDefinition -> @Override 	public boolean isAutowireCandidate();1502974979;Return whether this bean is a candidate for getting autowired into some other bean.;@Override_	public boolean isAutowireCandidate() {_		return this.autowireCandidate__	};return,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,boolean,is,autowire,candidate,return,this,autowire,candidate
AbstractBeanDefinition -> @Override 	public boolean isAutowireCandidate();1503008029;Return whether this bean is a candidate for getting autowired into some other bean.;@Override_	public boolean isAutowireCandidate() {_		return this.autowireCandidate__	};return,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,boolean,is,autowire,candidate,return,this,autowire,candidate
AbstractBeanDefinition -> @Override 	public boolean isAutowireCandidate();1510606271;Return whether this bean is a candidate for getting autowired into some other bean.;@Override_	public boolean isAutowireCandidate() {_		return this.autowireCandidate__	};return,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,boolean,is,autowire,candidate,return,this,autowire,candidate
AbstractBeanDefinition -> @Override 	public boolean isAutowireCandidate();1510675876;Return whether this bean is a candidate for getting autowired into some other bean.;@Override_	public boolean isAutowireCandidate() {_		return this.autowireCandidate__	};return,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,boolean,is,autowire,candidate,return,this,autowire,candidate
AbstractBeanDefinition -> @Override 	public boolean isAutowireCandidate();1530174524;Return whether this bean is a candidate for getting autowired into some other bean.;@Override_	public boolean isAutowireCandidate() {_		return this.autowireCandidate__	};return,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,boolean,is,autowire,candidate,return,this,autowire,candidate
AbstractBeanDefinition -> @Override 	public boolean isAutowireCandidate();1530174524;Return whether this bean is a candidate for getting autowired into some other bean.;@Override_	public boolean isAutowireCandidate() {_		return this.autowireCandidate__	};return,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,boolean,is,autowire,candidate,return,this,autowire,candidate
AbstractBeanDefinition -> @Override 	public boolean isAutowireCandidate();1530174524;Return whether this bean is a candidate for getting autowired into some other bean.;@Override_	public boolean isAutowireCandidate() {_		return this.autowireCandidate__	};return,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,boolean,is,autowire,candidate,return,this,autowire,candidate
AbstractBeanDefinition -> @Override 	public boolean isAutowireCandidate();1530190293;Return whether this bean is a candidate for getting autowired into some other bean.;@Override_	public boolean isAutowireCandidate() {_		return this.autowireCandidate__	};return,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,boolean,is,autowire,candidate,return,this,autowire,candidate
AbstractBeanDefinition -> @Override 	public boolean isAutowireCandidate();1532981251;Return whether this bean is a candidate for getting autowired into some other bean.;@Override_	public boolean isAutowireCandidate() {_		return this.autowireCandidate__	};return,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,boolean,is,autowire,candidate,return,this,autowire,candidate
AbstractBeanDefinition -> @Override 	public boolean isAutowireCandidate();1536863076;Return whether this bean is a candidate for getting autowired into some other bean.;@Override_	public boolean isAutowireCandidate() {_		return this.autowireCandidate__	};return,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;override,public,boolean,is,autowire,candidate,return,this,autowire,candidate
AbstractBeanDefinition -> public boolean isEnforceInitMethod();1328020251;Indicate whether the configured init method is the default._@see #getInitMethodName();public boolean isEnforceInitMethod() {_		return this.enforceInitMethod__	};indicate,whether,the,configured,init,method,is,the,default,see,get,init,method,name;public,boolean,is,enforce,init,method,return,this,enforce,init,method
AbstractBeanDefinition -> public boolean isEnforceInitMethod();1337202589;Indicate whether the configured init method is the default._@see #getInitMethodName();public boolean isEnforceInitMethod() {_		return this.enforceInitMethod__	};indicate,whether,the,configured,init,method,is,the,default,see,get,init,method,name;public,boolean,is,enforce,init,method,return,this,enforce,init,method
AbstractBeanDefinition -> public boolean isEnforceInitMethod();1356735495;Indicate whether the configured init method is the default._@see #getInitMethodName();public boolean isEnforceInitMethod() {_		return this.enforceInitMethod__	};indicate,whether,the,configured,init,method,is,the,default,see,get,init,method,name;public,boolean,is,enforce,init,method,return,this,enforce,init,method
AbstractBeanDefinition -> public boolean isEnforceInitMethod();1357119239;Indicate whether the configured init method is the default._@see #getInitMethodName();public boolean isEnforceInitMethod() {_		return this.enforceInitMethod__	};indicate,whether,the,configured,init,method,is,the,default,see,get,init,method,name;public,boolean,is,enforce,init,method,return,this,enforce,init,method
AbstractBeanDefinition -> public boolean isEnforceInitMethod();1367508310;Indicate whether the configured init method is the default._@see #getInitMethodName();public boolean isEnforceInitMethod() {_		return this.enforceInitMethod__	};indicate,whether,the,configured,init,method,is,the,default,see,get,init,method,name;public,boolean,is,enforce,init,method,return,this,enforce,init,method
AbstractBeanDefinition -> public boolean isEnforceInitMethod();1367943112;Indicate whether the configured init method is the default._@see #getInitMethodName();public boolean isEnforceInitMethod() {_		return this.enforceInitMethod__	};indicate,whether,the,configured,init,method,is,the,default,see,get,init,method,name;public,boolean,is,enforce,init,method,return,this,enforce,init,method
AbstractBeanDefinition -> public boolean isEnforceInitMethod();1368482696;Indicate whether the configured init method is the default._@see #getInitMethodName();public boolean isEnforceInitMethod() {_		return this.enforceInitMethod__	};indicate,whether,the,configured,init,method,is,the,default,see,get,init,method,name;public,boolean,is,enforce,init,method,return,this,enforce,init,method
AbstractBeanDefinition -> public boolean isEnforceInitMethod();1385412762;Indicate whether the configured init method is the default._@see #getInitMethodName();public boolean isEnforceInitMethod() {_		return this.enforceInitMethod__	};indicate,whether,the,configured,init,method,is,the,default,see,get,init,method,name;public,boolean,is,enforce,init,method,return,this,enforce,init,method
AbstractBeanDefinition -> public boolean isEnforceInitMethod();1392245317;Indicate whether the configured init method is the default._@see #getInitMethodName();public boolean isEnforceInitMethod() {_		return this.enforceInitMethod__	};indicate,whether,the,configured,init,method,is,the,default,see,get,init,method,name;public,boolean,is,enforce,init,method,return,this,enforce,init,method
AbstractBeanDefinition -> public boolean isEnforceInitMethod();1397163142;Indicate whether the configured init method is the default._@see #getInitMethodName();public boolean isEnforceInitMethod() {_		return this.enforceInitMethod__	};indicate,whether,the,configured,init,method,is,the,default,see,get,init,method,name;public,boolean,is,enforce,init,method,return,this,enforce,init,method
AbstractBeanDefinition -> public boolean isEnforceInitMethod();1398898390;Indicate whether the configured init method is the default._@see #getInitMethodName();public boolean isEnforceInitMethod() {_		return this.enforceInitMethod__	};indicate,whether,the,configured,init,method,is,the,default,see,get,init,method,name;public,boolean,is,enforce,init,method,return,this,enforce,init,method
AbstractBeanDefinition -> public boolean isEnforceInitMethod();1407511029;Indicate whether the configured init method is the default._@see #getInitMethodName();public boolean isEnforceInitMethod() {_		return this.enforceInitMethod__	};indicate,whether,the,configured,init,method,is,the,default,see,get,init,method,name;public,boolean,is,enforce,init,method,return,this,enforce,init,method
AbstractBeanDefinition -> public boolean isEnforceInitMethod();1432135182;Indicate whether the configured init method is the default._@see #getInitMethodName();public boolean isEnforceInitMethod() {_		return this.enforceInitMethod__	};indicate,whether,the,configured,init,method,is,the,default,see,get,init,method,name;public,boolean,is,enforce,init,method,return,this,enforce,init,method
AbstractBeanDefinition -> public boolean isEnforceInitMethod();1434204509;Indicate whether the configured init method is the default._@see #getInitMethodName();public boolean isEnforceInitMethod() {_		return this.enforceInitMethod__	};indicate,whether,the,configured,init,method,is,the,default,see,get,init,method,name;public,boolean,is,enforce,init,method,return,this,enforce,init,method
AbstractBeanDefinition -> public boolean isEnforceInitMethod();1447323728;Indicate whether the configured init method is the default._@see #getInitMethodName();public boolean isEnforceInitMethod() {_		return this.enforceInitMethod__	};indicate,whether,the,configured,init,method,is,the,default,see,get,init,method,name;public,boolean,is,enforce,init,method,return,this,enforce,init,method
AbstractBeanDefinition -> public boolean isEnforceInitMethod();1465226156;Indicate whether the configured init method is the default._@see #getInitMethodName();public boolean isEnforceInitMethod() {_		return this.enforceInitMethod__	};indicate,whether,the,configured,init,method,is,the,default,see,get,init,method,name;public,boolean,is,enforce,init,method,return,this,enforce,init,method
AbstractBeanDefinition -> public boolean isEnforceInitMethod();1467730834;Indicate whether the configured init method is the default._@see #getInitMethodName();public boolean isEnforceInitMethod() {_		return this.enforceInitMethod__	};indicate,whether,the,configured,init,method,is,the,default,see,get,init,method,name;public,boolean,is,enforce,init,method,return,this,enforce,init,method
AbstractBeanDefinition -> public boolean isEnforceInitMethod();1467846264;Indicate whether the configured init method is the default._@see #getInitMethodName();public boolean isEnforceInitMethod() {_		return this.enforceInitMethod__	};indicate,whether,the,configured,init,method,is,the,default,see,get,init,method,name;public,boolean,is,enforce,init,method,return,this,enforce,init,method
AbstractBeanDefinition -> public boolean isEnforceInitMethod();1482091545;Indicate whether the configured init method is the default._@see #getInitMethodName();public boolean isEnforceInitMethod() {_		return this.enforceInitMethod__	};indicate,whether,the,configured,init,method,is,the,default,see,get,init,method,name;public,boolean,is,enforce,init,method,return,this,enforce,init,method
AbstractBeanDefinition -> public boolean isEnforceInitMethod();1483093818;Indicate whether the configured init method is the default._@see #getInitMethodName();public boolean isEnforceInitMethod() {_		return this.enforceInitMethod__	};indicate,whether,the,configured,init,method,is,the,default,see,get,init,method,name;public,boolean,is,enforce,init,method,return,this,enforce,init,method
AbstractBeanDefinition -> public boolean isEnforceInitMethod();1495868221;Indicate whether the configured init method is the default._@see #getInitMethodName();public boolean isEnforceInitMethod() {_		return this.enforceInitMethod__	};indicate,whether,the,configured,init,method,is,the,default,see,get,init,method,name;public,boolean,is,enforce,init,method,return,this,enforce,init,method
AbstractBeanDefinition -> public boolean isEnforceInitMethod();1496837955;Indicate whether the configured init method is the default._@see #getInitMethodName();public boolean isEnforceInitMethod() {_		return this.enforceInitMethod__	};indicate,whether,the,configured,init,method,is,the,default,see,get,init,method,name;public,boolean,is,enforce,init,method,return,this,enforce,init,method
AbstractBeanDefinition -> public boolean isEnforceInitMethod();1498780456;Indicate whether the configured init method is the default._@see #getInitMethodName();public boolean isEnforceInitMethod() {_		return this.enforceInitMethod__	};indicate,whether,the,configured,init,method,is,the,default,see,get,init,method,name;public,boolean,is,enforce,init,method,return,this,enforce,init,method
AbstractBeanDefinition -> public boolean isEnforceInitMethod();1502974979;Indicate whether the configured init method is the default._@see #getInitMethodName();public boolean isEnforceInitMethod() {_		return this.enforceInitMethod__	};indicate,whether,the,configured,init,method,is,the,default,see,get,init,method,name;public,boolean,is,enforce,init,method,return,this,enforce,init,method
AbstractBeanDefinition -> public boolean isEnforceInitMethod();1503008029;Indicate whether the configured init method is the default._@see #getInitMethodName();public boolean isEnforceInitMethod() {_		return this.enforceInitMethod__	};indicate,whether,the,configured,init,method,is,the,default,see,get,init,method,name;public,boolean,is,enforce,init,method,return,this,enforce,init,method
AbstractBeanDefinition -> public boolean isEnforceInitMethod();1510606271;Indicate whether the configured init method is the default._@see #getInitMethodName();public boolean isEnforceInitMethod() {_		return this.enforceInitMethod__	};indicate,whether,the,configured,init,method,is,the,default,see,get,init,method,name;public,boolean,is,enforce,init,method,return,this,enforce,init,method
AbstractBeanDefinition -> public boolean isEnforceInitMethod();1510675876;Indicate whether the configured init method is the default._@see #getInitMethodName();public boolean isEnforceInitMethod() {_		return this.enforceInitMethod__	};indicate,whether,the,configured,init,method,is,the,default,see,get,init,method,name;public,boolean,is,enforce,init,method,return,this,enforce,init,method
AbstractBeanDefinition -> public boolean isEnforceInitMethod();1530174524;Indicate whether the configured init method is the default._@see #getInitMethodName();public boolean isEnforceInitMethod() {_		return this.enforceInitMethod__	};indicate,whether,the,configured,init,method,is,the,default,see,get,init,method,name;public,boolean,is,enforce,init,method,return,this,enforce,init,method
AbstractBeanDefinition -> public boolean isEnforceInitMethod();1530174524;Indicate whether the configured init method is the default._@see #getInitMethodName();public boolean isEnforceInitMethod() {_		return this.enforceInitMethod__	};indicate,whether,the,configured,init,method,is,the,default,see,get,init,method,name;public,boolean,is,enforce,init,method,return,this,enforce,init,method
AbstractBeanDefinition -> public boolean isEnforceInitMethod();1530174524;Indicate whether the configured init method is the default._@see #getInitMethodName();public boolean isEnforceInitMethod() {_		return this.enforceInitMethod__	};indicate,whether,the,configured,init,method,is,the,default,see,get,init,method,name;public,boolean,is,enforce,init,method,return,this,enforce,init,method
AbstractBeanDefinition -> public boolean isEnforceInitMethod();1530190293;Indicate whether the configured init method is the default._@see #getInitMethodName();public boolean isEnforceInitMethod() {_		return this.enforceInitMethod__	};indicate,whether,the,configured,init,method,is,the,default,see,get,init,method,name;public,boolean,is,enforce,init,method,return,this,enforce,init,method
AbstractBeanDefinition -> public boolean isEnforceInitMethod();1532981251;Indicate whether the configured init method is the default._@see #getInitMethodName();public boolean isEnforceInitMethod() {_		return this.enforceInitMethod__	};indicate,whether,the,configured,init,method,is,the,default,see,get,init,method,name;public,boolean,is,enforce,init,method,return,this,enforce,init,method
AbstractBeanDefinition -> public boolean isEnforceInitMethod();1536863076;Indicate whether the configured init method is the default._@see #getInitMethodName();public boolean isEnforceInitMethod() {_		return this.enforceInitMethod__	};indicate,whether,the,configured,init,method,is,the,default,see,get,init,method,name;public,boolean,is,enforce,init,method,return,this,enforce,init,method
AbstractBeanDefinition -> @Override 	public boolean isSingleton();1356735495;Return whether this a <b>Singleton</b>, with a single shared instance_returned from all calls._@see #SCOPE_SINGLETON;@Override_	public boolean isSingleton() {_		return this.singleton__	};return,whether,this,a,b,singleton,b,with,a,single,shared,instance,returned,from,all,calls,see;override,public,boolean,is,singleton,return,this,singleton
AbstractBeanDefinition -> @Override 	public boolean isSingleton();1368482696;Return whether this a <b>Singleton</b>, with a single shared instance_returned from all calls._@see #SCOPE_SINGLETON;@Override_	public boolean isSingleton() {_		return SCOPE_SINGLETON.equals(scope) || SCOPE_DEFAULT.equals(scope)__	};return,whether,this,a,b,singleton,b,with,a,single,shared,instance,returned,from,all,calls,see;override,public,boolean,is,singleton,return,equals,scope,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isSingleton();1385412762;Return whether this a <b>Singleton</b>, with a single shared instance_returned from all calls._@see #SCOPE_SINGLETON;@Override_	public boolean isSingleton() {_		return SCOPE_SINGLETON.equals(scope) || SCOPE_DEFAULT.equals(scope)__	};return,whether,this,a,b,singleton,b,with,a,single,shared,instance,returned,from,all,calls,see;override,public,boolean,is,singleton,return,equals,scope,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isSingleton();1392245317;Return whether this a <b>Singleton</b>, with a single shared instance_returned from all calls._@see #SCOPE_SINGLETON;@Override_	public boolean isSingleton() {_		return SCOPE_SINGLETON.equals(scope) || SCOPE_DEFAULT.equals(scope)__	};return,whether,this,a,b,singleton,b,with,a,single,shared,instance,returned,from,all,calls,see;override,public,boolean,is,singleton,return,equals,scope,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isSingleton();1397163142;Return whether this a <b>Singleton</b>, with a single shared instance_returned from all calls._@see #SCOPE_SINGLETON;@Override_	public boolean isSingleton() {_		return SCOPE_SINGLETON.equals(scope) || SCOPE_DEFAULT.equals(scope)__	};return,whether,this,a,b,singleton,b,with,a,single,shared,instance,returned,from,all,calls,see;override,public,boolean,is,singleton,return,equals,scope,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isSingleton();1398898390;Return whether this a <b>Singleton</b>, with a single shared instance_returned from all calls._@see #SCOPE_SINGLETON;@Override_	public boolean isSingleton() {_		return SCOPE_SINGLETON.equals(scope) || SCOPE_DEFAULT.equals(scope)__	};return,whether,this,a,b,singleton,b,with,a,single,shared,instance,returned,from,all,calls,see;override,public,boolean,is,singleton,return,equals,scope,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isSingleton();1407511029;Return whether this a <b>Singleton</b>, with a single shared instance_returned from all calls._@see #SCOPE_SINGLETON;@Override_	public boolean isSingleton() {_		return SCOPE_SINGLETON.equals(scope) || SCOPE_DEFAULT.equals(scope)__	};return,whether,this,a,b,singleton,b,with,a,single,shared,instance,returned,from,all,calls,see;override,public,boolean,is,singleton,return,equals,scope,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isSingleton();1432135182;Return whether this a <b>Singleton</b>, with a single shared instance_returned from all calls._@see #SCOPE_SINGLETON;@Override_	public boolean isSingleton() {_		return SCOPE_SINGLETON.equals(scope) || SCOPE_DEFAULT.equals(scope)__	};return,whether,this,a,b,singleton,b,with,a,single,shared,instance,returned,from,all,calls,see;override,public,boolean,is,singleton,return,equals,scope,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isSingleton();1434204509;Return whether this a <b>Singleton</b>, with a single shared instance_returned from all calls._@see #SCOPE_SINGLETON;@Override_	public boolean isSingleton() {_		return SCOPE_SINGLETON.equals(scope) || SCOPE_DEFAULT.equals(scope)__	};return,whether,this,a,b,singleton,b,with,a,single,shared,instance,returned,from,all,calls,see;override,public,boolean,is,singleton,return,equals,scope,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isSingleton();1447323728;Return whether this a <b>Singleton</b>, with a single shared instance_returned from all calls._@see #SCOPE_SINGLETON;@Override_	public boolean isSingleton() {_		return SCOPE_SINGLETON.equals(scope) || SCOPE_DEFAULT.equals(scope)__	};return,whether,this,a,b,singleton,b,with,a,single,shared,instance,returned,from,all,calls,see;override,public,boolean,is,singleton,return,equals,scope,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isSingleton();1465226156;Return whether this a <b>Singleton</b>, with a single shared instance_returned from all calls._@see #SCOPE_SINGLETON;@Override_	public boolean isSingleton() {_		return SCOPE_SINGLETON.equals(scope) || SCOPE_DEFAULT.equals(scope)__	};return,whether,this,a,b,singleton,b,with,a,single,shared,instance,returned,from,all,calls,see;override,public,boolean,is,singleton,return,equals,scope,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isSingleton();1467730834;Return whether this a <b>Singleton</b>, with a single shared instance_returned from all calls._@see #SCOPE_SINGLETON;@Override_	public boolean isSingleton() {_		return SCOPE_SINGLETON.equals(scope) || SCOPE_DEFAULT.equals(scope)__	};return,whether,this,a,b,singleton,b,with,a,single,shared,instance,returned,from,all,calls,see;override,public,boolean,is,singleton,return,equals,scope,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isSingleton();1467846264;Return whether this a <b>Singleton</b>, with a single shared instance_returned from all calls._@see #SCOPE_SINGLETON;@Override_	public boolean isSingleton() {_		return SCOPE_SINGLETON.equals(scope) || SCOPE_DEFAULT.equals(scope)__	};return,whether,this,a,b,singleton,b,with,a,single,shared,instance,returned,from,all,calls,see;override,public,boolean,is,singleton,return,equals,scope,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isSingleton();1482091545;Return whether this a <b>Singleton</b>, with a single shared instance_returned from all calls._@see #SCOPE_SINGLETON;@Override_	public boolean isSingleton() {_		return SCOPE_SINGLETON.equals(scope) || SCOPE_DEFAULT.equals(scope)__	};return,whether,this,a,b,singleton,b,with,a,single,shared,instance,returned,from,all,calls,see;override,public,boolean,is,singleton,return,equals,scope,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isSingleton();1483093818;Return whether this a <b>Singleton</b>, with a single shared instance_returned from all calls._@see #SCOPE_SINGLETON;@Override_	public boolean isSingleton() {_		return SCOPE_SINGLETON.equals(scope) || SCOPE_DEFAULT.equals(scope)__	};return,whether,this,a,b,singleton,b,with,a,single,shared,instance,returned,from,all,calls,see;override,public,boolean,is,singleton,return,equals,scope,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isSingleton();1495868221;Return whether this a <b>Singleton</b>, with a single shared instance_returned from all calls._@see #SCOPE_SINGLETON;@Override_	public boolean isSingleton() {_		return SCOPE_SINGLETON.equals(scope) || SCOPE_DEFAULT.equals(scope)__	};return,whether,this,a,b,singleton,b,with,a,single,shared,instance,returned,from,all,calls,see;override,public,boolean,is,singleton,return,equals,scope,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isSingleton();1496837955;Return whether this a <b>Singleton</b>, with a single shared instance_returned from all calls._@see #SCOPE_SINGLETON;@Override_	public boolean isSingleton() {_		return SCOPE_SINGLETON.equals(scope) || SCOPE_DEFAULT.equals(scope)__	};return,whether,this,a,b,singleton,b,with,a,single,shared,instance,returned,from,all,calls,see;override,public,boolean,is,singleton,return,equals,scope,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isSingleton();1498780456;Return whether this a <b>Singleton</b>, with a single shared instance_returned from all calls._@see #SCOPE_SINGLETON;@Override_	public boolean isSingleton() {_		return SCOPE_SINGLETON.equals(scope) || SCOPE_DEFAULT.equals(scope)__	};return,whether,this,a,b,singleton,b,with,a,single,shared,instance,returned,from,all,calls,see;override,public,boolean,is,singleton,return,equals,scope,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isSingleton();1502974979;Return whether this a <b>Singleton</b>, with a single shared instance_returned from all calls._@see #SCOPE_SINGLETON;@Override_	public boolean isSingleton() {_		return SCOPE_SINGLETON.equals(scope) || SCOPE_DEFAULT.equals(scope)__	};return,whether,this,a,b,singleton,b,with,a,single,shared,instance,returned,from,all,calls,see;override,public,boolean,is,singleton,return,equals,scope,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isSingleton();1503008029;Return whether this a <b>Singleton</b>, with a single shared instance_returned from all calls._@see #SCOPE_SINGLETON;@Override_	public boolean isSingleton() {_		return SCOPE_SINGLETON.equals(scope) || SCOPE_DEFAULT.equals(scope)__	};return,whether,this,a,b,singleton,b,with,a,single,shared,instance,returned,from,all,calls,see;override,public,boolean,is,singleton,return,equals,scope,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isSingleton();1510606271;Return whether this a <b>Singleton</b>, with a single shared instance_returned from all calls._@see #SCOPE_SINGLETON;@Override_	public boolean isSingleton() {_		return SCOPE_SINGLETON.equals(scope) || SCOPE_DEFAULT.equals(scope)__	};return,whether,this,a,b,singleton,b,with,a,single,shared,instance,returned,from,all,calls,see;override,public,boolean,is,singleton,return,equals,scope,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isSingleton();1510675876;Return whether this a <b>Singleton</b>, with a single shared instance_returned from all calls._@see #SCOPE_SINGLETON;@Override_	public boolean isSingleton() {_		return SCOPE_SINGLETON.equals(scope) || SCOPE_DEFAULT.equals(scope)__	};return,whether,this,a,b,singleton,b,with,a,single,shared,instance,returned,from,all,calls,see;override,public,boolean,is,singleton,return,equals,scope,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isSingleton();1530174524;Return whether this a <b>Singleton</b>, with a single shared instance_returned from all calls._@see #SCOPE_SINGLETON;@Override_	public boolean isSingleton() {_		return SCOPE_SINGLETON.equals(scope) || SCOPE_DEFAULT.equals(scope)__	};return,whether,this,a,b,singleton,b,with,a,single,shared,instance,returned,from,all,calls,see;override,public,boolean,is,singleton,return,equals,scope,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isSingleton();1530174524;Return whether this a <b>Singleton</b>, with a single shared instance_returned from all calls._@see #SCOPE_SINGLETON;@Override_	public boolean isSingleton() {_		return SCOPE_SINGLETON.equals(scope) || SCOPE_DEFAULT.equals(scope)__	};return,whether,this,a,b,singleton,b,with,a,single,shared,instance,returned,from,all,calls,see;override,public,boolean,is,singleton,return,equals,scope,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isSingleton();1530174524;Return whether this a <b>Singleton</b>, with a single shared instance_returned from all calls._@see #SCOPE_SINGLETON;@Override_	public boolean isSingleton() {_		return SCOPE_SINGLETON.equals(this.scope) || SCOPE_DEFAULT.equals(this.scope)__	};return,whether,this,a,b,singleton,b,with,a,single,shared,instance,returned,from,all,calls,see;override,public,boolean,is,singleton,return,equals,this,scope,equals,this,scope
AbstractBeanDefinition -> @Override 	public boolean isSingleton();1530190293;Return whether this a <b>Singleton</b>, with a single shared instance_returned from all calls._@see #SCOPE_SINGLETON;@Override_	public boolean isSingleton() {_		return SCOPE_SINGLETON.equals(this.scope) || SCOPE_DEFAULT.equals(this.scope)__	};return,whether,this,a,b,singleton,b,with,a,single,shared,instance,returned,from,all,calls,see;override,public,boolean,is,singleton,return,equals,this,scope,equals,this,scope
AbstractBeanDefinition -> @Override 	public boolean isSingleton();1532981251;Return whether this a <b>Singleton</b>, with a single shared instance_returned from all calls._@see #SCOPE_SINGLETON;@Override_	public boolean isSingleton() {_		return SCOPE_SINGLETON.equals(this.scope) || SCOPE_DEFAULT.equals(this.scope)__	};return,whether,this,a,b,singleton,b,with,a,single,shared,instance,returned,from,all,calls,see;override,public,boolean,is,singleton,return,equals,this,scope,equals,this,scope
AbstractBeanDefinition -> @Override 	public boolean isSingleton();1536863076;Return whether this a <b>Singleton</b>, with a single shared instance_returned from all calls._@see #SCOPE_SINGLETON;@Override_	public boolean isSingleton() {_		return SCOPE_SINGLETON.equals(this.scope) || SCOPE_DEFAULT.equals(this.scope)__	};return,whether,this,a,b,singleton,b,with,a,single,shared,instance,returned,from,all,calls,see;override,public,boolean,is,singleton,return,equals,this,scope,equals,this,scope
AbstractBeanDefinition -> public void setPrimary(boolean primary);1328020251;Set whether this bean is a primary autowire candidate._If this value is true for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;public void setPrimary(boolean primary) {_		this.primary = primary__	};set,whether,this,bean,is,a,primary,autowire,candidate,if,this,value,is,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;public,void,set,primary,boolean,primary,this,primary,primary
AbstractBeanDefinition -> public void setPrimary(boolean primary);1337202589;Set whether this bean is a primary autowire candidate._If this value is true for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;public void setPrimary(boolean primary) {_		this.primary = primary__	};set,whether,this,bean,is,a,primary,autowire,candidate,if,this,value,is,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;public,void,set,primary,boolean,primary,this,primary,primary
AbstractBeanDefinition -> public void setPrimary(boolean primary);1357119239;Set whether this bean is a primary autowire candidate._If this value is true for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;public void setPrimary(boolean primary) {_		this.primary = primary__	};set,whether,this,bean,is,a,primary,autowire,candidate,if,this,value,is,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;public,void,set,primary,boolean,primary,this,primary,primary
AbstractBeanDefinition -> public void setPrimary(boolean primary);1367508310;Set whether this bean is a primary autowire candidate._If this value is true for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;public void setPrimary(boolean primary) {_		this.primary = primary__	};set,whether,this,bean,is,a,primary,autowire,candidate,if,this,value,is,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;public,void,set,primary,boolean,primary,this,primary,primary
AbstractBeanDefinition -> public void setPrimary(boolean primary);1367943112;Set whether this bean is a primary autowire candidate._If this value is true for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;public void setPrimary(boolean primary) {_		this.primary = primary__	};set,whether,this,bean,is,a,primary,autowire,candidate,if,this,value,is,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;public,void,set,primary,boolean,primary,this,primary,primary
AbstractBeanDefinition -> @Override 	public void setBeanClassName(String beanClassName);1483093818;Specify the bean class name of this bean definition.;@Override_	public void setBeanClassName(String beanClassName) {_		this.beanClass = beanClassName__	};specify,the,bean,class,name,of,this,bean,definition;override,public,void,set,bean,class,name,string,bean,class,name,this,bean,class,bean,class,name
AbstractBeanDefinition -> @Override 	public void setBeanClassName(String beanClassName);1495868221;Specify the bean class name of this bean definition.;@Override_	public void setBeanClassName(String beanClassName) {_		this.beanClass = beanClassName__	};specify,the,bean,class,name,of,this,bean,definition;override,public,void,set,bean,class,name,string,bean,class,name,this,bean,class,bean,class,name
AbstractBeanDefinition -> public void setEnforceDestroyMethod(boolean enforceDestroyMethod);1328020251;Specify whether or not the configured destroy method is the default._Default value is <code>false</code>._@see #setDestroyMethodName;public void setEnforceDestroyMethod(boolean enforceDestroyMethod) {_		this.enforceDestroyMethod = enforceDestroyMethod__	};specify,whether,or,not,the,configured,destroy,method,is,the,default,default,value,is,code,false,code,see,set,destroy,method,name;public,void,set,enforce,destroy,method,boolean,enforce,destroy,method,this,enforce,destroy,method,enforce,destroy,method
AbstractBeanDefinition -> public void setEnforceDestroyMethod(boolean enforceDestroyMethod);1337202589;Specify whether or not the configured destroy method is the default._Default value is <code>false</code>._@see #setDestroyMethodName;public void setEnforceDestroyMethod(boolean enforceDestroyMethod) {_		this.enforceDestroyMethod = enforceDestroyMethod__	};specify,whether,or,not,the,configured,destroy,method,is,the,default,default,value,is,code,false,code,see,set,destroy,method,name;public,void,set,enforce,destroy,method,boolean,enforce,destroy,method,this,enforce,destroy,method,enforce,destroy,method
AbstractBeanDefinition -> public void setEnforceDestroyMethod(boolean enforceDestroyMethod);1356735495;Specify whether or not the configured destroy method is the default._Default value is {@code false}._@see #setDestroyMethodName;public void setEnforceDestroyMethod(boolean enforceDestroyMethod) {_		this.enforceDestroyMethod = enforceDestroyMethod__	};specify,whether,or,not,the,configured,destroy,method,is,the,default,default,value,is,code,false,see,set,destroy,method,name;public,void,set,enforce,destroy,method,boolean,enforce,destroy,method,this,enforce,destroy,method,enforce,destroy,method
AbstractBeanDefinition -> public void setEnforceDestroyMethod(boolean enforceDestroyMethod);1357119239;Specify whether or not the configured destroy method is the default._Default value is {@code false}._@see #setDestroyMethodName;public void setEnforceDestroyMethod(boolean enforceDestroyMethod) {_		this.enforceDestroyMethod = enforceDestroyMethod__	};specify,whether,or,not,the,configured,destroy,method,is,the,default,default,value,is,code,false,see,set,destroy,method,name;public,void,set,enforce,destroy,method,boolean,enforce,destroy,method,this,enforce,destroy,method,enforce,destroy,method
AbstractBeanDefinition -> public void setEnforceDestroyMethod(boolean enforceDestroyMethod);1367508310;Specify whether or not the configured destroy method is the default._Default value is {@code false}._@see #setDestroyMethodName;public void setEnforceDestroyMethod(boolean enforceDestroyMethod) {_		this.enforceDestroyMethod = enforceDestroyMethod__	};specify,whether,or,not,the,configured,destroy,method,is,the,default,default,value,is,code,false,see,set,destroy,method,name;public,void,set,enforce,destroy,method,boolean,enforce,destroy,method,this,enforce,destroy,method,enforce,destroy,method
AbstractBeanDefinition -> public void setEnforceDestroyMethod(boolean enforceDestroyMethod);1367943112;Specify whether or not the configured destroy method is the default._Default value is {@code false}._@see #setDestroyMethodName;public void setEnforceDestroyMethod(boolean enforceDestroyMethod) {_		this.enforceDestroyMethod = enforceDestroyMethod__	};specify,whether,or,not,the,configured,destroy,method,is,the,default,default,value,is,code,false,see,set,destroy,method,name;public,void,set,enforce,destroy,method,boolean,enforce,destroy,method,this,enforce,destroy,method,enforce,destroy,method
AbstractBeanDefinition -> public void setEnforceDestroyMethod(boolean enforceDestroyMethod);1368482696;Specify whether or not the configured destroy method is the default._Default value is {@code false}._@see #setDestroyMethodName;public void setEnforceDestroyMethod(boolean enforceDestroyMethod) {_		this.enforceDestroyMethod = enforceDestroyMethod__	};specify,whether,or,not,the,configured,destroy,method,is,the,default,default,value,is,code,false,see,set,destroy,method,name;public,void,set,enforce,destroy,method,boolean,enforce,destroy,method,this,enforce,destroy,method,enforce,destroy,method
AbstractBeanDefinition -> public void setEnforceDestroyMethod(boolean enforceDestroyMethod);1385412762;Specify whether or not the configured destroy method is the default._Default value is {@code false}._@see #setDestroyMethodName;public void setEnforceDestroyMethod(boolean enforceDestroyMethod) {_		this.enforceDestroyMethod = enforceDestroyMethod__	};specify,whether,or,not,the,configured,destroy,method,is,the,default,default,value,is,code,false,see,set,destroy,method,name;public,void,set,enforce,destroy,method,boolean,enforce,destroy,method,this,enforce,destroy,method,enforce,destroy,method
AbstractBeanDefinition -> public void setEnforceDestroyMethod(boolean enforceDestroyMethod);1392245317;Specify whether or not the configured destroy method is the default._Default value is {@code false}._@see #setDestroyMethodName;public void setEnforceDestroyMethod(boolean enforceDestroyMethod) {_		this.enforceDestroyMethod = enforceDestroyMethod__	};specify,whether,or,not,the,configured,destroy,method,is,the,default,default,value,is,code,false,see,set,destroy,method,name;public,void,set,enforce,destroy,method,boolean,enforce,destroy,method,this,enforce,destroy,method,enforce,destroy,method
AbstractBeanDefinition -> public void setEnforceDestroyMethod(boolean enforceDestroyMethod);1397163142;Specify whether or not the configured destroy method is the default._Default value is {@code false}._@see #setDestroyMethodName;public void setEnforceDestroyMethod(boolean enforceDestroyMethod) {_		this.enforceDestroyMethod = enforceDestroyMethod__	};specify,whether,or,not,the,configured,destroy,method,is,the,default,default,value,is,code,false,see,set,destroy,method,name;public,void,set,enforce,destroy,method,boolean,enforce,destroy,method,this,enforce,destroy,method,enforce,destroy,method
AbstractBeanDefinition -> public void setEnforceDestroyMethod(boolean enforceDestroyMethod);1398898390;Specify whether or not the configured destroy method is the default._Default value is {@code false}._@see #setDestroyMethodName;public void setEnforceDestroyMethod(boolean enforceDestroyMethod) {_		this.enforceDestroyMethod = enforceDestroyMethod__	};specify,whether,or,not,the,configured,destroy,method,is,the,default,default,value,is,code,false,see,set,destroy,method,name;public,void,set,enforce,destroy,method,boolean,enforce,destroy,method,this,enforce,destroy,method,enforce,destroy,method
AbstractBeanDefinition -> public void setEnforceDestroyMethod(boolean enforceDestroyMethod);1407511029;Specify whether or not the configured destroy method is the default._Default value is {@code false}._@see #setDestroyMethodName;public void setEnforceDestroyMethod(boolean enforceDestroyMethod) {_		this.enforceDestroyMethod = enforceDestroyMethod__	};specify,whether,or,not,the,configured,destroy,method,is,the,default,default,value,is,code,false,see,set,destroy,method,name;public,void,set,enforce,destroy,method,boolean,enforce,destroy,method,this,enforce,destroy,method,enforce,destroy,method
AbstractBeanDefinition -> public void setEnforceDestroyMethod(boolean enforceDestroyMethod);1432135182;Specify whether or not the configured destroy method is the default._Default value is {@code false}._@see #setDestroyMethodName;public void setEnforceDestroyMethod(boolean enforceDestroyMethod) {_		this.enforceDestroyMethod = enforceDestroyMethod__	};specify,whether,or,not,the,configured,destroy,method,is,the,default,default,value,is,code,false,see,set,destroy,method,name;public,void,set,enforce,destroy,method,boolean,enforce,destroy,method,this,enforce,destroy,method,enforce,destroy,method
AbstractBeanDefinition -> public void setEnforceDestroyMethod(boolean enforceDestroyMethod);1434204509;Specify whether or not the configured destroy method is the default._Default value is {@code false}._@see #setDestroyMethodName;public void setEnforceDestroyMethod(boolean enforceDestroyMethod) {_		this.enforceDestroyMethod = enforceDestroyMethod__	};specify,whether,or,not,the,configured,destroy,method,is,the,default,default,value,is,code,false,see,set,destroy,method,name;public,void,set,enforce,destroy,method,boolean,enforce,destroy,method,this,enforce,destroy,method,enforce,destroy,method
AbstractBeanDefinition -> public void setEnforceDestroyMethod(boolean enforceDestroyMethod);1447323728;Specify whether or not the configured destroy method is the default._Default value is {@code false}._@see #setDestroyMethodName;public void setEnforceDestroyMethod(boolean enforceDestroyMethod) {_		this.enforceDestroyMethod = enforceDestroyMethod__	};specify,whether,or,not,the,configured,destroy,method,is,the,default,default,value,is,code,false,see,set,destroy,method,name;public,void,set,enforce,destroy,method,boolean,enforce,destroy,method,this,enforce,destroy,method,enforce,destroy,method
AbstractBeanDefinition -> public void setEnforceDestroyMethod(boolean enforceDestroyMethod);1465226156;Specify whether or not the configured destroy method is the default._Default value is {@code false}._@see #setDestroyMethodName;public void setEnforceDestroyMethod(boolean enforceDestroyMethod) {_		this.enforceDestroyMethod = enforceDestroyMethod__	};specify,whether,or,not,the,configured,destroy,method,is,the,default,default,value,is,code,false,see,set,destroy,method,name;public,void,set,enforce,destroy,method,boolean,enforce,destroy,method,this,enforce,destroy,method,enforce,destroy,method
AbstractBeanDefinition -> public void setEnforceDestroyMethod(boolean enforceDestroyMethod);1467730834;Specify whether or not the configured destroy method is the default._Default value is {@code false}._@see #setDestroyMethodName;public void setEnforceDestroyMethod(boolean enforceDestroyMethod) {_		this.enforceDestroyMethod = enforceDestroyMethod__	};specify,whether,or,not,the,configured,destroy,method,is,the,default,default,value,is,code,false,see,set,destroy,method,name;public,void,set,enforce,destroy,method,boolean,enforce,destroy,method,this,enforce,destroy,method,enforce,destroy,method
AbstractBeanDefinition -> public void setEnforceDestroyMethod(boolean enforceDestroyMethod);1467846264;Specify whether or not the configured destroy method is the default._Default value is {@code false}._@see #setDestroyMethodName;public void setEnforceDestroyMethod(boolean enforceDestroyMethod) {_		this.enforceDestroyMethod = enforceDestroyMethod__	};specify,whether,or,not,the,configured,destroy,method,is,the,default,default,value,is,code,false,see,set,destroy,method,name;public,void,set,enforce,destroy,method,boolean,enforce,destroy,method,this,enforce,destroy,method,enforce,destroy,method
AbstractBeanDefinition -> public void setEnforceDestroyMethod(boolean enforceDestroyMethod);1482091545;Specify whether or not the configured destroy method is the default._Default value is {@code false}._@see #setDestroyMethodName;public void setEnforceDestroyMethod(boolean enforceDestroyMethod) {_		this.enforceDestroyMethod = enforceDestroyMethod__	};specify,whether,or,not,the,configured,destroy,method,is,the,default,default,value,is,code,false,see,set,destroy,method,name;public,void,set,enforce,destroy,method,boolean,enforce,destroy,method,this,enforce,destroy,method,enforce,destroy,method
AbstractBeanDefinition -> public void setEnforceDestroyMethod(boolean enforceDestroyMethod);1483093818;Specify whether or not the configured destroy method is the default._Default value is {@code false}._@see #setDestroyMethodName;public void setEnforceDestroyMethod(boolean enforceDestroyMethod) {_		this.enforceDestroyMethod = enforceDestroyMethod__	};specify,whether,or,not,the,configured,destroy,method,is,the,default,default,value,is,code,false,see,set,destroy,method,name;public,void,set,enforce,destroy,method,boolean,enforce,destroy,method,this,enforce,destroy,method,enforce,destroy,method
AbstractBeanDefinition -> public void setEnforceDestroyMethod(boolean enforceDestroyMethod);1495868221;Specify whether or not the configured destroy method is the default._Default value is {@code false}._@see #setDestroyMethodName;public void setEnforceDestroyMethod(boolean enforceDestroyMethod) {_		this.enforceDestroyMethod = enforceDestroyMethod__	};specify,whether,or,not,the,configured,destroy,method,is,the,default,default,value,is,code,false,see,set,destroy,method,name;public,void,set,enforce,destroy,method,boolean,enforce,destroy,method,this,enforce,destroy,method,enforce,destroy,method
AbstractBeanDefinition -> public void setEnforceDestroyMethod(boolean enforceDestroyMethod);1496837955;Specify whether or not the configured destroy method is the default._<p>The default value is {@code false}._@see #setDestroyMethodName;public void setEnforceDestroyMethod(boolean enforceDestroyMethod) {_		this.enforceDestroyMethod = enforceDestroyMethod__	};specify,whether,or,not,the,configured,destroy,method,is,the,default,p,the,default,value,is,code,false,see,set,destroy,method,name;public,void,set,enforce,destroy,method,boolean,enforce,destroy,method,this,enforce,destroy,method,enforce,destroy,method
AbstractBeanDefinition -> public void setEnforceDestroyMethod(boolean enforceDestroyMethod);1498780456;Specify whether or not the configured destroy method is the default._<p>The default value is {@code false}._@see #setDestroyMethodName;public void setEnforceDestroyMethod(boolean enforceDestroyMethod) {_		this.enforceDestroyMethod = enforceDestroyMethod__	};specify,whether,or,not,the,configured,destroy,method,is,the,default,p,the,default,value,is,code,false,see,set,destroy,method,name;public,void,set,enforce,destroy,method,boolean,enforce,destroy,method,this,enforce,destroy,method,enforce,destroy,method
AbstractBeanDefinition -> public void setEnforceDestroyMethod(boolean enforceDestroyMethod);1502974979;Specify whether or not the configured destroy method is the default._<p>The default value is {@code false}._@see #setDestroyMethodName;public void setEnforceDestroyMethod(boolean enforceDestroyMethod) {_		this.enforceDestroyMethod = enforceDestroyMethod__	};specify,whether,or,not,the,configured,destroy,method,is,the,default,p,the,default,value,is,code,false,see,set,destroy,method,name;public,void,set,enforce,destroy,method,boolean,enforce,destroy,method,this,enforce,destroy,method,enforce,destroy,method
AbstractBeanDefinition -> public void setEnforceDestroyMethod(boolean enforceDestroyMethod);1503008029;Specify whether or not the configured destroy method is the default._<p>The default value is {@code false}._@see #setDestroyMethodName;public void setEnforceDestroyMethod(boolean enforceDestroyMethod) {_		this.enforceDestroyMethod = enforceDestroyMethod__	};specify,whether,or,not,the,configured,destroy,method,is,the,default,p,the,default,value,is,code,false,see,set,destroy,method,name;public,void,set,enforce,destroy,method,boolean,enforce,destroy,method,this,enforce,destroy,method,enforce,destroy,method
AbstractBeanDefinition -> public void setEnforceDestroyMethod(boolean enforceDestroyMethod);1510606271;Specify whether or not the configured destroy method is the default._<p>The default value is {@code false}._@see #setDestroyMethodName;public void setEnforceDestroyMethod(boolean enforceDestroyMethod) {_		this.enforceDestroyMethod = enforceDestroyMethod__	};specify,whether,or,not,the,configured,destroy,method,is,the,default,p,the,default,value,is,code,false,see,set,destroy,method,name;public,void,set,enforce,destroy,method,boolean,enforce,destroy,method,this,enforce,destroy,method,enforce,destroy,method
AbstractBeanDefinition -> public void setEnforceDestroyMethod(boolean enforceDestroyMethod);1510675876;Specify whether or not the configured destroy method is the default._<p>The default value is {@code false}._@see #setDestroyMethodName;public void setEnforceDestroyMethod(boolean enforceDestroyMethod) {_		this.enforceDestroyMethod = enforceDestroyMethod__	};specify,whether,or,not,the,configured,destroy,method,is,the,default,p,the,default,value,is,code,false,see,set,destroy,method,name;public,void,set,enforce,destroy,method,boolean,enforce,destroy,method,this,enforce,destroy,method,enforce,destroy,method
AbstractBeanDefinition -> public void setEnforceDestroyMethod(boolean enforceDestroyMethod);1530174524;Specify whether or not the configured destroy method is the default._<p>The default value is {@code false}._@see #setDestroyMethodName;public void setEnforceDestroyMethod(boolean enforceDestroyMethod) {_		this.enforceDestroyMethod = enforceDestroyMethod__	};specify,whether,or,not,the,configured,destroy,method,is,the,default,p,the,default,value,is,code,false,see,set,destroy,method,name;public,void,set,enforce,destroy,method,boolean,enforce,destroy,method,this,enforce,destroy,method,enforce,destroy,method
AbstractBeanDefinition -> public void setEnforceDestroyMethod(boolean enforceDestroyMethod);1530174524;Specify whether or not the configured destroy method is the default._<p>The default value is {@code false}._@see #setDestroyMethodName;public void setEnforceDestroyMethod(boolean enforceDestroyMethod) {_		this.enforceDestroyMethod = enforceDestroyMethod__	};specify,whether,or,not,the,configured,destroy,method,is,the,default,p,the,default,value,is,code,false,see,set,destroy,method,name;public,void,set,enforce,destroy,method,boolean,enforce,destroy,method,this,enforce,destroy,method,enforce,destroy,method
AbstractBeanDefinition -> public void setEnforceDestroyMethod(boolean enforceDestroyMethod);1530174524;Specify whether or not the configured destroy method is the default._<p>The default value is {@code false}._@see #setDestroyMethodName;public void setEnforceDestroyMethod(boolean enforceDestroyMethod) {_		this.enforceDestroyMethod = enforceDestroyMethod__	};specify,whether,or,not,the,configured,destroy,method,is,the,default,p,the,default,value,is,code,false,see,set,destroy,method,name;public,void,set,enforce,destroy,method,boolean,enforce,destroy,method,this,enforce,destroy,method,enforce,destroy,method
AbstractBeanDefinition -> public void setEnforceDestroyMethod(boolean enforceDestroyMethod);1530190293;Specify whether or not the configured destroy method is the default._<p>The default value is {@code false}._@see #setDestroyMethodName;public void setEnforceDestroyMethod(boolean enforceDestroyMethod) {_		this.enforceDestroyMethod = enforceDestroyMethod__	};specify,whether,or,not,the,configured,destroy,method,is,the,default,p,the,default,value,is,code,false,see,set,destroy,method,name;public,void,set,enforce,destroy,method,boolean,enforce,destroy,method,this,enforce,destroy,method,enforce,destroy,method
AbstractBeanDefinition -> public void setEnforceDestroyMethod(boolean enforceDestroyMethod);1532981251;Specify whether or not the configured destroy method is the default._<p>The default value is {@code false}._@see #setDestroyMethodName;public void setEnforceDestroyMethod(boolean enforceDestroyMethod) {_		this.enforceDestroyMethod = enforceDestroyMethod__	};specify,whether,or,not,the,configured,destroy,method,is,the,default,p,the,default,value,is,code,false,see,set,destroy,method,name;public,void,set,enforce,destroy,method,boolean,enforce,destroy,method,this,enforce,destroy,method,enforce,destroy,method
AbstractBeanDefinition -> public void setEnforceDestroyMethod(boolean enforceDestroyMethod);1536863076;Specify whether or not the configured destroy method is the default._<p>The default value is {@code false}._@see #setDestroyMethodName;public void setEnforceDestroyMethod(boolean enforceDestroyMethod) {_		this.enforceDestroyMethod = enforceDestroyMethod__	};specify,whether,or,not,the,configured,destroy,method,is,the,default,p,the,default,value,is,code,false,see,set,destroy,method,name;public,void,set,enforce,destroy,method,boolean,enforce,destroy,method,this,enforce,destroy,method,enforce,destroy,method
AbstractBeanDefinition -> public Class<?> resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException;1385412762;Determine the class of the wrapped bean, resolving it from a_specified class name if necessary. Will also reload a specified_Class from its name when called with the bean class already resolved._@param classLoader the ClassLoader to use for resolving a (potential) class name_@return the resolved bean class_@throws ClassNotFoundException if the class name could be resolved;public Class<?> resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException {_		String className = getBeanClassName()__		if (className == null) {_			return null__		}_		Class<?> resolvedClass = ClassUtils.forName(className, classLoader)__		this.beanClass = resolvedClass__		return resolvedClass__	};determine,the,class,of,the,wrapped,bean,resolving,it,from,a,specified,class,name,if,necessary,will,also,reload,a,specified,class,from,its,name,when,called,with,the,bean,class,already,resolved,param,class,loader,the,class,loader,to,use,for,resolving,a,potential,class,name,return,the,resolved,bean,class,throws,class,not,found,exception,if,the,class,name,could,be,resolved;public,class,resolve,bean,class,class,loader,class,loader,throws,class,not,found,exception,string,class,name,get,bean,class,name,if,class,name,null,return,null,class,resolved,class,class,utils,for,name,class,name,class,loader,this,bean,class,resolved,class,return,resolved,class
AbstractBeanDefinition -> public Class<?> resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException;1392245317;Determine the class of the wrapped bean, resolving it from a_specified class name if necessary. Will also reload a specified_Class from its name when called with the bean class already resolved._@param classLoader the ClassLoader to use for resolving a (potential) class name_@return the resolved bean class_@throws ClassNotFoundException if the class name could be resolved;public Class<?> resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException {_		String className = getBeanClassName()__		if (className == null) {_			return null__		}_		Class<?> resolvedClass = ClassUtils.forName(className, classLoader)__		this.beanClass = resolvedClass__		return resolvedClass__	};determine,the,class,of,the,wrapped,bean,resolving,it,from,a,specified,class,name,if,necessary,will,also,reload,a,specified,class,from,its,name,when,called,with,the,bean,class,already,resolved,param,class,loader,the,class,loader,to,use,for,resolving,a,potential,class,name,return,the,resolved,bean,class,throws,class,not,found,exception,if,the,class,name,could,be,resolved;public,class,resolve,bean,class,class,loader,class,loader,throws,class,not,found,exception,string,class,name,get,bean,class,name,if,class,name,null,return,null,class,resolved,class,class,utils,for,name,class,name,class,loader,this,bean,class,resolved,class,return,resolved,class
AbstractBeanDefinition -> public Class<?> resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException;1397163142;Determine the class of the wrapped bean, resolving it from a_specified class name if necessary. Will also reload a specified_Class from its name when called with the bean class already resolved._@param classLoader the ClassLoader to use for resolving a (potential) class name_@return the resolved bean class_@throws ClassNotFoundException if the class name could be resolved;public Class<?> resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException {_		String className = getBeanClassName()__		if (className == null) {_			return null__		}_		Class<?> resolvedClass = ClassUtils.forName(className, classLoader)__		this.beanClass = resolvedClass__		return resolvedClass__	};determine,the,class,of,the,wrapped,bean,resolving,it,from,a,specified,class,name,if,necessary,will,also,reload,a,specified,class,from,its,name,when,called,with,the,bean,class,already,resolved,param,class,loader,the,class,loader,to,use,for,resolving,a,potential,class,name,return,the,resolved,bean,class,throws,class,not,found,exception,if,the,class,name,could,be,resolved;public,class,resolve,bean,class,class,loader,class,loader,throws,class,not,found,exception,string,class,name,get,bean,class,name,if,class,name,null,return,null,class,resolved,class,class,utils,for,name,class,name,class,loader,this,bean,class,resolved,class,return,resolved,class
AbstractBeanDefinition -> public Class<?> resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException;1398898390;Determine the class of the wrapped bean, resolving it from a_specified class name if necessary. Will also reload a specified_Class from its name when called with the bean class already resolved._@param classLoader the ClassLoader to use for resolving a (potential) class name_@return the resolved bean class_@throws ClassNotFoundException if the class name could be resolved;public Class<?> resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException {_		String className = getBeanClassName()__		if (className == null) {_			return null__		}_		Class<?> resolvedClass = ClassUtils.forName(className, classLoader)__		this.beanClass = resolvedClass__		return resolvedClass__	};determine,the,class,of,the,wrapped,bean,resolving,it,from,a,specified,class,name,if,necessary,will,also,reload,a,specified,class,from,its,name,when,called,with,the,bean,class,already,resolved,param,class,loader,the,class,loader,to,use,for,resolving,a,potential,class,name,return,the,resolved,bean,class,throws,class,not,found,exception,if,the,class,name,could,be,resolved;public,class,resolve,bean,class,class,loader,class,loader,throws,class,not,found,exception,string,class,name,get,bean,class,name,if,class,name,null,return,null,class,resolved,class,class,utils,for,name,class,name,class,loader,this,bean,class,resolved,class,return,resolved,class
AbstractBeanDefinition -> public Class<?> resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException;1407511029;Determine the class of the wrapped bean, resolving it from a_specified class name if necessary. Will also reload a specified_Class from its name when called with the bean class already resolved._@param classLoader the ClassLoader to use for resolving a (potential) class name_@return the resolved bean class_@throws ClassNotFoundException if the class name could be resolved;public Class<?> resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException {_		String className = getBeanClassName()__		if (className == null) {_			return null__		}_		Class<?> resolvedClass = ClassUtils.forName(className, classLoader)__		this.beanClass = resolvedClass__		return resolvedClass__	};determine,the,class,of,the,wrapped,bean,resolving,it,from,a,specified,class,name,if,necessary,will,also,reload,a,specified,class,from,its,name,when,called,with,the,bean,class,already,resolved,param,class,loader,the,class,loader,to,use,for,resolving,a,potential,class,name,return,the,resolved,bean,class,throws,class,not,found,exception,if,the,class,name,could,be,resolved;public,class,resolve,bean,class,class,loader,class,loader,throws,class,not,found,exception,string,class,name,get,bean,class,name,if,class,name,null,return,null,class,resolved,class,class,utils,for,name,class,name,class,loader,this,bean,class,resolved,class,return,resolved,class
AbstractBeanDefinition -> public Class<?> resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException;1432135182;Determine the class of the wrapped bean, resolving it from a_specified class name if necessary. Will also reload a specified_Class from its name when called with the bean class already resolved._@param classLoader the ClassLoader to use for resolving a (potential) class name_@return the resolved bean class_@throws ClassNotFoundException if the class name could be resolved;public Class<?> resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException {_		String className = getBeanClassName()__		if (className == null) {_			return null__		}_		Class<?> resolvedClass = ClassUtils.forName(className, classLoader)__		this.beanClass = resolvedClass__		return resolvedClass__	};determine,the,class,of,the,wrapped,bean,resolving,it,from,a,specified,class,name,if,necessary,will,also,reload,a,specified,class,from,its,name,when,called,with,the,bean,class,already,resolved,param,class,loader,the,class,loader,to,use,for,resolving,a,potential,class,name,return,the,resolved,bean,class,throws,class,not,found,exception,if,the,class,name,could,be,resolved;public,class,resolve,bean,class,class,loader,class,loader,throws,class,not,found,exception,string,class,name,get,bean,class,name,if,class,name,null,return,null,class,resolved,class,class,utils,for,name,class,name,class,loader,this,bean,class,resolved,class,return,resolved,class
AbstractBeanDefinition -> public Class<?> resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException;1434204509;Determine the class of the wrapped bean, resolving it from a_specified class name if necessary. Will also reload a specified_Class from its name when called with the bean class already resolved._@param classLoader the ClassLoader to use for resolving a (potential) class name_@return the resolved bean class_@throws ClassNotFoundException if the class name could be resolved;public Class<?> resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException {_		String className = getBeanClassName()__		if (className == null) {_			return null__		}_		Class<?> resolvedClass = ClassUtils.forName(className, classLoader)__		this.beanClass = resolvedClass__		return resolvedClass__	};determine,the,class,of,the,wrapped,bean,resolving,it,from,a,specified,class,name,if,necessary,will,also,reload,a,specified,class,from,its,name,when,called,with,the,bean,class,already,resolved,param,class,loader,the,class,loader,to,use,for,resolving,a,potential,class,name,return,the,resolved,bean,class,throws,class,not,found,exception,if,the,class,name,could,be,resolved;public,class,resolve,bean,class,class,loader,class,loader,throws,class,not,found,exception,string,class,name,get,bean,class,name,if,class,name,null,return,null,class,resolved,class,class,utils,for,name,class,name,class,loader,this,bean,class,resolved,class,return,resolved,class
AbstractBeanDefinition -> public Class<?> resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException;1447323728;Determine the class of the wrapped bean, resolving it from a_specified class name if necessary. Will also reload a specified_Class from its name when called with the bean class already resolved._@param classLoader the ClassLoader to use for resolving a (potential) class name_@return the resolved bean class_@throws ClassNotFoundException if the class name could be resolved;public Class<?> resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException {_		String className = getBeanClassName()__		if (className == null) {_			return null__		}_		Class<?> resolvedClass = ClassUtils.forName(className, classLoader)__		this.beanClass = resolvedClass__		return resolvedClass__	};determine,the,class,of,the,wrapped,bean,resolving,it,from,a,specified,class,name,if,necessary,will,also,reload,a,specified,class,from,its,name,when,called,with,the,bean,class,already,resolved,param,class,loader,the,class,loader,to,use,for,resolving,a,potential,class,name,return,the,resolved,bean,class,throws,class,not,found,exception,if,the,class,name,could,be,resolved;public,class,resolve,bean,class,class,loader,class,loader,throws,class,not,found,exception,string,class,name,get,bean,class,name,if,class,name,null,return,null,class,resolved,class,class,utils,for,name,class,name,class,loader,this,bean,class,resolved,class,return,resolved,class
AbstractBeanDefinition -> public Class<?> resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException;1465226156;Determine the class of the wrapped bean, resolving it from a_specified class name if necessary. Will also reload a specified_Class from its name when called with the bean class already resolved._@param classLoader the ClassLoader to use for resolving a (potential) class name_@return the resolved bean class_@throws ClassNotFoundException if the class name could be resolved;public Class<?> resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException {_		String className = getBeanClassName()__		if (className == null) {_			return null__		}_		Class<?> resolvedClass = ClassUtils.forName(className, classLoader)__		this.beanClass = resolvedClass__		return resolvedClass__	};determine,the,class,of,the,wrapped,bean,resolving,it,from,a,specified,class,name,if,necessary,will,also,reload,a,specified,class,from,its,name,when,called,with,the,bean,class,already,resolved,param,class,loader,the,class,loader,to,use,for,resolving,a,potential,class,name,return,the,resolved,bean,class,throws,class,not,found,exception,if,the,class,name,could,be,resolved;public,class,resolve,bean,class,class,loader,class,loader,throws,class,not,found,exception,string,class,name,get,bean,class,name,if,class,name,null,return,null,class,resolved,class,class,utils,for,name,class,name,class,loader,this,bean,class,resolved,class,return,resolved,class
AbstractBeanDefinition -> public Class<?> resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException;1467730834;Determine the class of the wrapped bean, resolving it from a_specified class name if necessary. Will also reload a specified_Class from its name when called with the bean class already resolved._@param classLoader the ClassLoader to use for resolving a (potential) class name_@return the resolved bean class_@throws ClassNotFoundException if the class name could be resolved;public Class<?> resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException {_		String className = getBeanClassName()__		if (className == null) {_			return null__		}_		Class<?> resolvedClass = ClassUtils.forName(className, classLoader)__		this.beanClass = resolvedClass__		return resolvedClass__	};determine,the,class,of,the,wrapped,bean,resolving,it,from,a,specified,class,name,if,necessary,will,also,reload,a,specified,class,from,its,name,when,called,with,the,bean,class,already,resolved,param,class,loader,the,class,loader,to,use,for,resolving,a,potential,class,name,return,the,resolved,bean,class,throws,class,not,found,exception,if,the,class,name,could,be,resolved;public,class,resolve,bean,class,class,loader,class,loader,throws,class,not,found,exception,string,class,name,get,bean,class,name,if,class,name,null,return,null,class,resolved,class,class,utils,for,name,class,name,class,loader,this,bean,class,resolved,class,return,resolved,class
AbstractBeanDefinition -> public Class<?> resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException;1467846264;Determine the class of the wrapped bean, resolving it from a_specified class name if necessary. Will also reload a specified_Class from its name when called with the bean class already resolved._@param classLoader the ClassLoader to use for resolving a (potential) class name_@return the resolved bean class_@throws ClassNotFoundException if the class name could be resolved;public Class<?> resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException {_		String className = getBeanClassName()__		if (className == null) {_			return null__		}_		Class<?> resolvedClass = ClassUtils.forName(className, classLoader)__		this.beanClass = resolvedClass__		return resolvedClass__	};determine,the,class,of,the,wrapped,bean,resolving,it,from,a,specified,class,name,if,necessary,will,also,reload,a,specified,class,from,its,name,when,called,with,the,bean,class,already,resolved,param,class,loader,the,class,loader,to,use,for,resolving,a,potential,class,name,return,the,resolved,bean,class,throws,class,not,found,exception,if,the,class,name,could,be,resolved;public,class,resolve,bean,class,class,loader,class,loader,throws,class,not,found,exception,string,class,name,get,bean,class,name,if,class,name,null,return,null,class,resolved,class,class,utils,for,name,class,name,class,loader,this,bean,class,resolved,class,return,resolved,class
AbstractBeanDefinition -> public Class<?> resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException;1482091545;Determine the class of the wrapped bean, resolving it from a_specified class name if necessary. Will also reload a specified_Class from its name when called with the bean class already resolved._@param classLoader the ClassLoader to use for resolving a (potential) class name_@return the resolved bean class_@throws ClassNotFoundException if the class name could be resolved;public Class<?> resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException {_		String className = getBeanClassName()__		if (className == null) {_			return null__		}_		Class<?> resolvedClass = ClassUtils.forName(className, classLoader)__		this.beanClass = resolvedClass__		return resolvedClass__	};determine,the,class,of,the,wrapped,bean,resolving,it,from,a,specified,class,name,if,necessary,will,also,reload,a,specified,class,from,its,name,when,called,with,the,bean,class,already,resolved,param,class,loader,the,class,loader,to,use,for,resolving,a,potential,class,name,return,the,resolved,bean,class,throws,class,not,found,exception,if,the,class,name,could,be,resolved;public,class,resolve,bean,class,class,loader,class,loader,throws,class,not,found,exception,string,class,name,get,bean,class,name,if,class,name,null,return,null,class,resolved,class,class,utils,for,name,class,name,class,loader,this,bean,class,resolved,class,return,resolved,class
AbstractBeanDefinition -> public Class<?> resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException;1483093818;Determine the class of the wrapped bean, resolving it from a_specified class name if necessary. Will also reload a specified_Class from its name when called with the bean class already resolved._@param classLoader the ClassLoader to use for resolving a (potential) class name_@return the resolved bean class_@throws ClassNotFoundException if the class name could be resolved;public Class<?> resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException {_		String className = getBeanClassName()__		if (className == null) {_			return null__		}_		Class<?> resolvedClass = ClassUtils.forName(className, classLoader)__		this.beanClass = resolvedClass__		return resolvedClass__	};determine,the,class,of,the,wrapped,bean,resolving,it,from,a,specified,class,name,if,necessary,will,also,reload,a,specified,class,from,its,name,when,called,with,the,bean,class,already,resolved,param,class,loader,the,class,loader,to,use,for,resolving,a,potential,class,name,return,the,resolved,bean,class,throws,class,not,found,exception,if,the,class,name,could,be,resolved;public,class,resolve,bean,class,class,loader,class,loader,throws,class,not,found,exception,string,class,name,get,bean,class,name,if,class,name,null,return,null,class,resolved,class,class,utils,for,name,class,name,class,loader,this,bean,class,resolved,class,return,resolved,class
AbstractBeanDefinition -> public Class<?> resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException;1495868221;Determine the class of the wrapped bean, resolving it from a_specified class name if necessary. Will also reload a specified_Class from its name when called with the bean class already resolved._@param classLoader the ClassLoader to use for resolving a (potential) class name_@return the resolved bean class_@throws ClassNotFoundException if the class name could be resolved;public Class<?> resolveBeanClass(ClassLoader classLoader) throws ClassNotFoundException {_		String className = getBeanClassName()__		if (className == null) {_			return null__		}_		Class<?> resolvedClass = ClassUtils.forName(className, classLoader)__		this.beanClass = resolvedClass__		return resolvedClass__	};determine,the,class,of,the,wrapped,bean,resolving,it,from,a,specified,class,name,if,necessary,will,also,reload,a,specified,class,from,its,name,when,called,with,the,bean,class,already,resolved,param,class,loader,the,class,loader,to,use,for,resolving,a,potential,class,name,return,the,resolved,bean,class,throws,class,not,found,exception,if,the,class,name,could,be,resolved;public,class,resolve,bean,class,class,loader,class,loader,throws,class,not,found,exception,string,class,name,get,bean,class,name,if,class,name,null,return,null,class,resolved,class,class,utils,for,name,class,name,class,loader,this,bean,class,resolved,class,return,resolved,class
AbstractBeanDefinition -> public void setMethodOverrides(MethodOverrides methodOverrides);1328020251;Specify method overrides for the bean, if any.;public void setMethodOverrides(MethodOverrides methodOverrides) {_		this.methodOverrides = (methodOverrides != null ? methodOverrides : new MethodOverrides())__	};specify,method,overrides,for,the,bean,if,any;public,void,set,method,overrides,method,overrides,method,overrides,this,method,overrides,method,overrides,null,method,overrides,new,method,overrides
AbstractBeanDefinition -> public void setMethodOverrides(MethodOverrides methodOverrides);1337202589;Specify method overrides for the bean, if any.;public void setMethodOverrides(MethodOverrides methodOverrides) {_		this.methodOverrides = (methodOverrides != null ? methodOverrides : new MethodOverrides())__	};specify,method,overrides,for,the,bean,if,any;public,void,set,method,overrides,method,overrides,method,overrides,this,method,overrides,method,overrides,null,method,overrides,new,method,overrides
AbstractBeanDefinition -> public void setMethodOverrides(MethodOverrides methodOverrides);1356735495;Specify method overrides for the bean, if any.;public void setMethodOverrides(MethodOverrides methodOverrides) {_		this.methodOverrides = (methodOverrides != null ? methodOverrides : new MethodOverrides())__	};specify,method,overrides,for,the,bean,if,any;public,void,set,method,overrides,method,overrides,method,overrides,this,method,overrides,method,overrides,null,method,overrides,new,method,overrides
AbstractBeanDefinition -> public void setMethodOverrides(MethodOverrides methodOverrides);1357119239;Specify method overrides for the bean, if any.;public void setMethodOverrides(MethodOverrides methodOverrides) {_		this.methodOverrides = (methodOverrides != null ? methodOverrides : new MethodOverrides())__	};specify,method,overrides,for,the,bean,if,any;public,void,set,method,overrides,method,overrides,method,overrides,this,method,overrides,method,overrides,null,method,overrides,new,method,overrides
AbstractBeanDefinition -> public void setMethodOverrides(MethodOverrides methodOverrides);1367508310;Specify method overrides for the bean, if any.;public void setMethodOverrides(MethodOverrides methodOverrides) {_		this.methodOverrides = (methodOverrides != null ? methodOverrides : new MethodOverrides())__	};specify,method,overrides,for,the,bean,if,any;public,void,set,method,overrides,method,overrides,method,overrides,this,method,overrides,method,overrides,null,method,overrides,new,method,overrides
AbstractBeanDefinition -> public void setMethodOverrides(MethodOverrides methodOverrides);1367943112;Specify method overrides for the bean, if any.;public void setMethodOverrides(MethodOverrides methodOverrides) {_		this.methodOverrides = (methodOverrides != null ? methodOverrides : new MethodOverrides())__	};specify,method,overrides,for,the,bean,if,any;public,void,set,method,overrides,method,overrides,method,overrides,this,method,overrides,method,overrides,null,method,overrides,new,method,overrides
AbstractBeanDefinition -> public void setMethodOverrides(MethodOverrides methodOverrides);1368482696;Specify method overrides for the bean, if any.;public void setMethodOverrides(MethodOverrides methodOverrides) {_		this.methodOverrides = (methodOverrides != null ? methodOverrides : new MethodOverrides())__	};specify,method,overrides,for,the,bean,if,any;public,void,set,method,overrides,method,overrides,method,overrides,this,method,overrides,method,overrides,null,method,overrides,new,method,overrides
AbstractBeanDefinition -> public void setMethodOverrides(MethodOverrides methodOverrides);1385412762;Specify method overrides for the bean, if any.;public void setMethodOverrides(MethodOverrides methodOverrides) {_		this.methodOverrides = (methodOverrides != null ? methodOverrides : new MethodOverrides())__	};specify,method,overrides,for,the,bean,if,any;public,void,set,method,overrides,method,overrides,method,overrides,this,method,overrides,method,overrides,null,method,overrides,new,method,overrides
AbstractBeanDefinition -> public void setMethodOverrides(MethodOverrides methodOverrides);1392245317;Specify method overrides for the bean, if any.;public void setMethodOverrides(MethodOverrides methodOverrides) {_		this.methodOverrides = (methodOverrides != null ? methodOverrides : new MethodOverrides())__	};specify,method,overrides,for,the,bean,if,any;public,void,set,method,overrides,method,overrides,method,overrides,this,method,overrides,method,overrides,null,method,overrides,new,method,overrides
AbstractBeanDefinition -> public void setMethodOverrides(MethodOverrides methodOverrides);1397163142;Specify method overrides for the bean, if any.;public void setMethodOverrides(MethodOverrides methodOverrides) {_		this.methodOverrides = (methodOverrides != null ? methodOverrides : new MethodOverrides())__	};specify,method,overrides,for,the,bean,if,any;public,void,set,method,overrides,method,overrides,method,overrides,this,method,overrides,method,overrides,null,method,overrides,new,method,overrides
AbstractBeanDefinition -> public void setMethodOverrides(MethodOverrides methodOverrides);1398898390;Specify method overrides for the bean, if any.;public void setMethodOverrides(MethodOverrides methodOverrides) {_		this.methodOverrides = (methodOverrides != null ? methodOverrides : new MethodOverrides())__	};specify,method,overrides,for,the,bean,if,any;public,void,set,method,overrides,method,overrides,method,overrides,this,method,overrides,method,overrides,null,method,overrides,new,method,overrides
AbstractBeanDefinition -> public void setMethodOverrides(MethodOverrides methodOverrides);1407511029;Specify method overrides for the bean, if any.;public void setMethodOverrides(MethodOverrides methodOverrides) {_		this.methodOverrides = (methodOverrides != null ? methodOverrides : new MethodOverrides())__	};specify,method,overrides,for,the,bean,if,any;public,void,set,method,overrides,method,overrides,method,overrides,this,method,overrides,method,overrides,null,method,overrides,new,method,overrides
AbstractBeanDefinition -> public void setMethodOverrides(MethodOverrides methodOverrides);1432135182;Specify method overrides for the bean, if any.;public void setMethodOverrides(MethodOverrides methodOverrides) {_		this.methodOverrides = (methodOverrides != null ? methodOverrides : new MethodOverrides())__	};specify,method,overrides,for,the,bean,if,any;public,void,set,method,overrides,method,overrides,method,overrides,this,method,overrides,method,overrides,null,method,overrides,new,method,overrides
AbstractBeanDefinition -> public void setMethodOverrides(MethodOverrides methodOverrides);1434204509;Specify method overrides for the bean, if any.;public void setMethodOverrides(MethodOverrides methodOverrides) {_		this.methodOverrides = (methodOverrides != null ? methodOverrides : new MethodOverrides())__	};specify,method,overrides,for,the,bean,if,any;public,void,set,method,overrides,method,overrides,method,overrides,this,method,overrides,method,overrides,null,method,overrides,new,method,overrides
AbstractBeanDefinition -> public void setMethodOverrides(MethodOverrides methodOverrides);1447323728;Specify method overrides for the bean, if any.;public void setMethodOverrides(MethodOverrides methodOverrides) {_		this.methodOverrides = (methodOverrides != null ? methodOverrides : new MethodOverrides())__	};specify,method,overrides,for,the,bean,if,any;public,void,set,method,overrides,method,overrides,method,overrides,this,method,overrides,method,overrides,null,method,overrides,new,method,overrides
AbstractBeanDefinition -> public void setMethodOverrides(MethodOverrides methodOverrides);1465226156;Specify method overrides for the bean, if any.;public void setMethodOverrides(MethodOverrides methodOverrides) {_		this.methodOverrides = (methodOverrides != null ? methodOverrides : new MethodOverrides())__	};specify,method,overrides,for,the,bean,if,any;public,void,set,method,overrides,method,overrides,method,overrides,this,method,overrides,method,overrides,null,method,overrides,new,method,overrides
AbstractBeanDefinition -> public void setMethodOverrides(MethodOverrides methodOverrides);1467730834;Specify method overrides for the bean, if any.;public void setMethodOverrides(MethodOverrides methodOverrides) {_		this.methodOverrides = (methodOverrides != null ? methodOverrides : new MethodOverrides())__	};specify,method,overrides,for,the,bean,if,any;public,void,set,method,overrides,method,overrides,method,overrides,this,method,overrides,method,overrides,null,method,overrides,new,method,overrides
AbstractBeanDefinition -> public void setMethodOverrides(MethodOverrides methodOverrides);1467846264;Specify method overrides for the bean, if any.;public void setMethodOverrides(MethodOverrides methodOverrides) {_		this.methodOverrides = (methodOverrides != null ? methodOverrides : new MethodOverrides())__	};specify,method,overrides,for,the,bean,if,any;public,void,set,method,overrides,method,overrides,method,overrides,this,method,overrides,method,overrides,null,method,overrides,new,method,overrides
AbstractBeanDefinition -> public void setMethodOverrides(MethodOverrides methodOverrides);1482091545;Specify method overrides for the bean, if any.;public void setMethodOverrides(MethodOverrides methodOverrides) {_		this.methodOverrides = (methodOverrides != null ? methodOverrides : new MethodOverrides())__	};specify,method,overrides,for,the,bean,if,any;public,void,set,method,overrides,method,overrides,method,overrides,this,method,overrides,method,overrides,null,method,overrides,new,method,overrides
AbstractBeanDefinition -> public void setMethodOverrides(MethodOverrides methodOverrides);1483093818;Specify method overrides for the bean, if any.;public void setMethodOverrides(MethodOverrides methodOverrides) {_		this.methodOverrides = (methodOverrides != null ? methodOverrides : new MethodOverrides())__	};specify,method,overrides,for,the,bean,if,any;public,void,set,method,overrides,method,overrides,method,overrides,this,method,overrides,method,overrides,null,method,overrides,new,method,overrides
AbstractBeanDefinition -> public void setMethodOverrides(MethodOverrides methodOverrides);1495868221;Specify method overrides for the bean, if any.;public void setMethodOverrides(MethodOverrides methodOverrides) {_		this.methodOverrides = (methodOverrides != null ? methodOverrides : new MethodOverrides())__	};specify,method,overrides,for,the,bean,if,any;public,void,set,method,overrides,method,overrides,method,overrides,this,method,overrides,method,overrides,null,method,overrides,new,method,overrides
AbstractBeanDefinition -> public void setMethodOverrides(MethodOverrides methodOverrides);1510606271;Specify method overrides for the bean, if any.;public void setMethodOverrides(MethodOverrides methodOverrides) {_		this.methodOverrides = methodOverrides__	};specify,method,overrides,for,the,bean,if,any;public,void,set,method,overrides,method,overrides,method,overrides,this,method,overrides,method,overrides
AbstractBeanDefinition -> public void setMethodOverrides(MethodOverrides methodOverrides);1510675876;Specify method overrides for the bean, if any.;public void setMethodOverrides(MethodOverrides methodOverrides) {_		this.methodOverrides = methodOverrides__	};specify,method,overrides,for,the,bean,if,any;public,void,set,method,overrides,method,overrides,method,overrides,this,method,overrides,method,overrides
AbstractBeanDefinition -> public void setMethodOverrides(MethodOverrides methodOverrides);1530174524;Specify method overrides for the bean, if any.;public void setMethodOverrides(MethodOverrides methodOverrides) {_		this.methodOverrides = methodOverrides__	};specify,method,overrides,for,the,bean,if,any;public,void,set,method,overrides,method,overrides,method,overrides,this,method,overrides,method,overrides
AbstractBeanDefinition -> public void setMethodOverrides(MethodOverrides methodOverrides);1530174524;Specify method overrides for the bean, if any.;public void setMethodOverrides(MethodOverrides methodOverrides) {_		this.methodOverrides = methodOverrides__	};specify,method,overrides,for,the,bean,if,any;public,void,set,method,overrides,method,overrides,method,overrides,this,method,overrides,method,overrides
AbstractBeanDefinition -> public void setMethodOverrides(MethodOverrides methodOverrides);1530174524;Specify method overrides for the bean, if any.;public void setMethodOverrides(MethodOverrides methodOverrides) {_		this.methodOverrides = methodOverrides__	};specify,method,overrides,for,the,bean,if,any;public,void,set,method,overrides,method,overrides,method,overrides,this,method,overrides,method,overrides
AbstractBeanDefinition -> public void setMethodOverrides(MethodOverrides methodOverrides);1530190293;Specify method overrides for the bean, if any.;public void setMethodOverrides(MethodOverrides methodOverrides) {_		this.methodOverrides = methodOverrides__	};specify,method,overrides,for,the,bean,if,any;public,void,set,method,overrides,method,overrides,method,overrides,this,method,overrides,method,overrides
AbstractBeanDefinition -> public void setMethodOverrides(MethodOverrides methodOverrides);1532981251;Specify method overrides for the bean, if any.;public void setMethodOverrides(MethodOverrides methodOverrides) {_		this.methodOverrides = methodOverrides__	};specify,method,overrides,for,the,bean,if,any;public,void,set,method,overrides,method,overrides,method,overrides,this,method,overrides,method,overrides
AbstractBeanDefinition -> public void setMethodOverrides(MethodOverrides methodOverrides);1536863076;Specify method overrides for the bean, if any.;public void setMethodOverrides(MethodOverrides methodOverrides) {_		this.methodOverrides = methodOverrides__	};specify,method,overrides,for,the,bean,if,any;public,void,set,method,overrides,method,overrides,method,overrides,this,method,overrides,method,overrides
AbstractBeanDefinition -> @Override 	public void setFactoryMethodName(String factoryMethodName);1483093818;Specify a factory method, if any. This method will be invoked with_constructor arguments, or with no arguments if none are specified._The method will be invoked on the specified factory bean, if any,_or otherwise as a static method on the local bean class._@see #setFactoryBeanName_@see #setBeanClassName;@Override_	public void setFactoryMethodName(String factoryMethodName) {_		this.factoryMethodName = factoryMethodName__	};specify,a,factory,method,if,any,this,method,will,be,invoked,with,constructor,arguments,or,with,no,arguments,if,none,are,specified,the,method,will,be,invoked,on,the,specified,factory,bean,if,any,or,otherwise,as,a,static,method,on,the,local,bean,class,see,set,factory,bean,name,see,set,bean,class,name;override,public,void,set,factory,method,name,string,factory,method,name,this,factory,method,name,factory,method,name
AbstractBeanDefinition -> @Override 	public void setFactoryMethodName(String factoryMethodName);1495868221;Specify a factory method, if any. This method will be invoked with_constructor arguments, or with no arguments if none are specified._The method will be invoked on the specified factory bean, if any,_or otherwise as a static method on the local bean class._@see #setFactoryBeanName_@see #setBeanClassName;@Override_	public void setFactoryMethodName(String factoryMethodName) {_		this.factoryMethodName = factoryMethodName__	};specify,a,factory,method,if,any,this,method,will,be,invoked,with,constructor,arguments,or,with,no,arguments,if,none,are,specified,the,method,will,be,invoked,on,the,specified,factory,bean,if,any,or,otherwise,as,a,static,method,on,the,local,bean,class,see,set,factory,bean,name,see,set,bean,class,name;override,public,void,set,factory,method,name,string,factory,method,name,this,factory,method,name,factory,method,name
AbstractBeanDefinition -> public void setPropertyValues(@Nullable MutablePropertyValues propertyValues);1496837955;Specify property values for this bean, if any.;public void setPropertyValues(@Nullable MutablePropertyValues propertyValues) {_		this.propertyValues = (propertyValues != null ? propertyValues : new MutablePropertyValues())__	};specify,property,values,for,this,bean,if,any;public,void,set,property,values,nullable,mutable,property,values,property,values,this,property,values,property,values,null,property,values,new,mutable,property,values
AbstractBeanDefinition -> public void setPropertyValues(@Nullable MutablePropertyValues propertyValues);1498780456;Specify property values for this bean, if any.;public void setPropertyValues(@Nullable MutablePropertyValues propertyValues) {_		this.propertyValues = (propertyValues != null ? propertyValues : new MutablePropertyValues())__	};specify,property,values,for,this,bean,if,any;public,void,set,property,values,nullable,mutable,property,values,property,values,this,property,values,property,values,null,property,values,new,mutable,property,values
AbstractBeanDefinition -> public void setPropertyValues(@Nullable MutablePropertyValues propertyValues);1502974979;Specify property values for this bean, if any.;public void setPropertyValues(@Nullable MutablePropertyValues propertyValues) {_		this.propertyValues = (propertyValues != null ? propertyValues : new MutablePropertyValues())__	};specify,property,values,for,this,bean,if,any;public,void,set,property,values,nullable,mutable,property,values,property,values,this,property,values,property,values,null,property,values,new,mutable,property,values
AbstractBeanDefinition -> public void setPropertyValues(@Nullable MutablePropertyValues propertyValues);1503008029;Specify property values for this bean, if any.;public void setPropertyValues(@Nullable MutablePropertyValues propertyValues) {_		this.propertyValues = (propertyValues != null ? propertyValues : new MutablePropertyValues())__	};specify,property,values,for,this,bean,if,any;public,void,set,property,values,nullable,mutable,property,values,property,values,this,property,values,property,values,null,property,values,new,mutable,property,values
AbstractBeanDefinition -> public boolean hasMethodOverrides();1510606271;Return if there are method overrides defined for this bean._@since 5.0.2;public boolean hasMethodOverrides() {_		return (this.methodOverrides != null && !this.methodOverrides.isEmpty())__	};return,if,there,are,method,overrides,defined,for,this,bean,since,5,0,2;public,boolean,has,method,overrides,return,this,method,overrides,null,this,method,overrides,is,empty
AbstractBeanDefinition -> public boolean hasMethodOverrides();1510675876;Return if there are method overrides defined for this bean._@since 5.0.2;public boolean hasMethodOverrides() {_		return (this.methodOverrides != null && !this.methodOverrides.isEmpty())__	};return,if,there,are,method,overrides,defined,for,this,bean,since,5,0,2;public,boolean,has,method,overrides,return,this,method,overrides,null,this,method,overrides,is,empty
AbstractBeanDefinition -> public boolean hasMethodOverrides();1530174524;Return if there are method overrides defined for this bean._@since 5.0.2;public boolean hasMethodOverrides() {_		return (this.methodOverrides != null && !this.methodOverrides.isEmpty())__	};return,if,there,are,method,overrides,defined,for,this,bean,since,5,0,2;public,boolean,has,method,overrides,return,this,method,overrides,null,this,method,overrides,is,empty
AbstractBeanDefinition -> public boolean hasMethodOverrides();1530174524;Return if there are method overrides defined for this bean._@since 5.0.2;public boolean hasMethodOverrides() {_		return (this.methodOverrides != null && !this.methodOverrides.isEmpty())__	};return,if,there,are,method,overrides,defined,for,this,bean,since,5,0,2;public,boolean,has,method,overrides,return,this,method,overrides,null,this,method,overrides,is,empty
AbstractBeanDefinition -> public boolean hasMethodOverrides();1530174524;Return if there are method overrides defined for this bean._@since 5.0.2;public boolean hasMethodOverrides() {_		return (this.methodOverrides != null && !this.methodOverrides.isEmpty())__	};return,if,there,are,method,overrides,defined,for,this,bean,since,5,0,2;public,boolean,has,method,overrides,return,this,method,overrides,null,this,method,overrides,is,empty
AbstractBeanDefinition -> public boolean hasMethodOverrides();1530190293;Return if there are method overrides defined for this bean._@since 5.0.2;public boolean hasMethodOverrides() {_		return (this.methodOverrides != null && !this.methodOverrides.isEmpty())__	};return,if,there,are,method,overrides,defined,for,this,bean,since,5,0,2;public,boolean,has,method,overrides,return,this,method,overrides,null,this,method,overrides,is,empty
AbstractBeanDefinition -> public boolean hasMethodOverrides();1532981251;Return if there are method overrides defined for this bean._@since 5.0.2;public boolean hasMethodOverrides() {_		return (this.methodOverrides != null && !this.methodOverrides.isEmpty())__	};return,if,there,are,method,overrides,defined,for,this,bean,since,5,0,2;public,boolean,has,method,overrides,return,this,method,overrides,null,this,method,overrides,is,empty
AbstractBeanDefinition -> public boolean hasMethodOverrides();1536863076;Return if there are method overrides defined for this bean._@since 5.0.2;public boolean hasMethodOverrides() {_		return (this.methodOverrides != null && !this.methodOverrides.isEmpty())__	};return,if,there,are,method,overrides,defined,for,this,bean,since,5,0,2;public,boolean,has,method,overrides,return,this,method,overrides,null,this,method,overrides,is,empty
AbstractBeanDefinition -> public String getInitMethodName();1328020251;Return the name of the initializer method.;public String getInitMethodName() {_		return this.initMethodName__	};return,the,name,of,the,initializer,method;public,string,get,init,method,name,return,this,init,method,name
AbstractBeanDefinition -> public String getInitMethodName();1337202589;Return the name of the initializer method.;public String getInitMethodName() {_		return this.initMethodName__	};return,the,name,of,the,initializer,method;public,string,get,init,method,name,return,this,init,method,name
AbstractBeanDefinition -> public String getInitMethodName();1356735495;Return the name of the initializer method.;public String getInitMethodName() {_		return this.initMethodName__	};return,the,name,of,the,initializer,method;public,string,get,init,method,name,return,this,init,method,name
AbstractBeanDefinition -> public String getInitMethodName();1357119239;Return the name of the initializer method.;public String getInitMethodName() {_		return this.initMethodName__	};return,the,name,of,the,initializer,method;public,string,get,init,method,name,return,this,init,method,name
AbstractBeanDefinition -> public String getInitMethodName();1367508310;Return the name of the initializer method.;public String getInitMethodName() {_		return this.initMethodName__	};return,the,name,of,the,initializer,method;public,string,get,init,method,name,return,this,init,method,name
AbstractBeanDefinition -> public String getInitMethodName();1367943112;Return the name of the initializer method.;public String getInitMethodName() {_		return this.initMethodName__	};return,the,name,of,the,initializer,method;public,string,get,init,method,name,return,this,init,method,name
AbstractBeanDefinition -> public String getInitMethodName();1368482696;Return the name of the initializer method.;public String getInitMethodName() {_		return this.initMethodName__	};return,the,name,of,the,initializer,method;public,string,get,init,method,name,return,this,init,method,name
AbstractBeanDefinition -> public String getInitMethodName();1385412762;Return the name of the initializer method.;public String getInitMethodName() {_		return this.initMethodName__	};return,the,name,of,the,initializer,method;public,string,get,init,method,name,return,this,init,method,name
AbstractBeanDefinition -> public String getInitMethodName();1392245317;Return the name of the initializer method.;public String getInitMethodName() {_		return this.initMethodName__	};return,the,name,of,the,initializer,method;public,string,get,init,method,name,return,this,init,method,name
AbstractBeanDefinition -> public String getInitMethodName();1397163142;Return the name of the initializer method.;public String getInitMethodName() {_		return this.initMethodName__	};return,the,name,of,the,initializer,method;public,string,get,init,method,name,return,this,init,method,name
AbstractBeanDefinition -> public String getInitMethodName();1398898390;Return the name of the initializer method.;public String getInitMethodName() {_		return this.initMethodName__	};return,the,name,of,the,initializer,method;public,string,get,init,method,name,return,this,init,method,name
AbstractBeanDefinition -> public String getInitMethodName();1407511029;Return the name of the initializer method.;public String getInitMethodName() {_		return this.initMethodName__	};return,the,name,of,the,initializer,method;public,string,get,init,method,name,return,this,init,method,name
AbstractBeanDefinition -> public String getInitMethodName();1432135182;Return the name of the initializer method.;public String getInitMethodName() {_		return this.initMethodName__	};return,the,name,of,the,initializer,method;public,string,get,init,method,name,return,this,init,method,name
AbstractBeanDefinition -> public String getInitMethodName();1434204509;Return the name of the initializer method.;public String getInitMethodName() {_		return this.initMethodName__	};return,the,name,of,the,initializer,method;public,string,get,init,method,name,return,this,init,method,name
AbstractBeanDefinition -> public String getInitMethodName();1447323728;Return the name of the initializer method.;public String getInitMethodName() {_		return this.initMethodName__	};return,the,name,of,the,initializer,method;public,string,get,init,method,name,return,this,init,method,name
AbstractBeanDefinition -> public String getInitMethodName();1465226156;Return the name of the initializer method.;public String getInitMethodName() {_		return this.initMethodName__	};return,the,name,of,the,initializer,method;public,string,get,init,method,name,return,this,init,method,name
AbstractBeanDefinition -> public String getInitMethodName();1467730834;Return the name of the initializer method.;public String getInitMethodName() {_		return this.initMethodName__	};return,the,name,of,the,initializer,method;public,string,get,init,method,name,return,this,init,method,name
AbstractBeanDefinition -> public String getInitMethodName();1467846264;Return the name of the initializer method.;public String getInitMethodName() {_		return this.initMethodName__	};return,the,name,of,the,initializer,method;public,string,get,init,method,name,return,this,init,method,name
AbstractBeanDefinition -> public String getInitMethodName();1482091545;Return the name of the initializer method.;public String getInitMethodName() {_		return this.initMethodName__	};return,the,name,of,the,initializer,method;public,string,get,init,method,name,return,this,init,method,name
AbstractBeanDefinition -> public String getInitMethodName();1483093818;Return the name of the initializer method.;public String getInitMethodName() {_		return this.initMethodName__	};return,the,name,of,the,initializer,method;public,string,get,init,method,name,return,this,init,method,name
AbstractBeanDefinition -> @Override 	@Nullable 	public String getResourceDescription();1502974979;Return a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;@Override_	@Nullable_	public String getResourceDescription() {_		return (this.resource != null ? this.resource.getDescription() : null)__	};return,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;override,nullable,public,string,get,resource,description,return,this,resource,null,this,resource,get,description,null
AbstractBeanDefinition -> @Override 	@Nullable 	public String getResourceDescription();1503008029;Return a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;@Override_	@Nullable_	public String getResourceDescription() {_		return (this.resource != null ? this.resource.getDescription() : null)__	};return,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;override,nullable,public,string,get,resource,description,return,this,resource,null,this,resource,get,description,null
AbstractBeanDefinition -> @Override 	@Nullable 	public String getResourceDescription();1510606271;Return a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;@Override_	@Nullable_	public String getResourceDescription() {_		return (this.resource != null ? this.resource.getDescription() : null)__	};return,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;override,nullable,public,string,get,resource,description,return,this,resource,null,this,resource,get,description,null
AbstractBeanDefinition -> @Override 	@Nullable 	public String getResourceDescription();1510675876;Return a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;@Override_	@Nullable_	public String getResourceDescription() {_		return (this.resource != null ? this.resource.getDescription() : null)__	};return,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;override,nullable,public,string,get,resource,description,return,this,resource,null,this,resource,get,description,null
AbstractBeanDefinition -> @Override 	@Nullable 	public String getResourceDescription();1530174524;Return a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;@Override_	@Nullable_	public String getResourceDescription() {_		return (this.resource != null ? this.resource.getDescription() : null)__	};return,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;override,nullable,public,string,get,resource,description,return,this,resource,null,this,resource,get,description,null
AbstractBeanDefinition -> @Override 	@Nullable 	public String getResourceDescription();1530174524;Return a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;@Override_	@Nullable_	public String getResourceDescription() {_		return (this.resource != null ? this.resource.getDescription() : null)__	};return,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;override,nullable,public,string,get,resource,description,return,this,resource,null,this,resource,get,description,null
AbstractBeanDefinition -> @Override 	@Nullable 	public String getResourceDescription();1530174524;Return a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;@Override_	@Nullable_	public String getResourceDescription() {_		return (this.resource != null ? this.resource.getDescription() : null)__	};return,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;override,nullable,public,string,get,resource,description,return,this,resource,null,this,resource,get,description,null
AbstractBeanDefinition -> @Override 	@Nullable 	public String getResourceDescription();1530190293;Return a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;@Override_	@Nullable_	public String getResourceDescription() {_		return (this.resource != null ? this.resource.getDescription() : null)__	};return,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;override,nullable,public,string,get,resource,description,return,this,resource,null,this,resource,get,description,null
AbstractBeanDefinition -> @Override 	@Nullable 	public String getResourceDescription();1532981251;Return a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;@Override_	@Nullable_	public String getResourceDescription() {_		return (this.resource != null ? this.resource.getDescription() : null)__	};return,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;override,nullable,public,string,get,resource,description,return,this,resource,null,this,resource,get,description,null
AbstractBeanDefinition -> @Override 	@Nullable 	public String getResourceDescription();1536863076;Return a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;@Override_	@Nullable_	public String getResourceDescription() {_		return (this.resource != null ? this.resource.getDescription() : null)__	};return,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;override,nullable,public,string,get,resource,description,return,this,resource,null,this,resource,get,description,null
AbstractBeanDefinition -> @Override 	public Object clone();1328020251;Public declaration of Object's <code>clone()</code> method._Delegates to {@link #cloneBeanDefinition()}._@see java.lang.Object#clone();@Override_	public Object clone() {_		return cloneBeanDefinition()__	};public,declaration,of,object,s,code,clone,code,method,delegates,to,link,clone,bean,definition,see,java,lang,object,clone;override,public,object,clone,return,clone,bean,definition
AbstractBeanDefinition -> @Override 	public Object clone();1337202589;Public declaration of Object's <code>clone()</code> method._Delegates to {@link #cloneBeanDefinition()}._@see java.lang.Object#clone();@Override_	public Object clone() {_		return cloneBeanDefinition()__	};public,declaration,of,object,s,code,clone,code,method,delegates,to,link,clone,bean,definition,see,java,lang,object,clone;override,public,object,clone,return,clone,bean,definition
AbstractBeanDefinition -> @Override 	public Object clone();1356735495;Public declaration of Object's {@code clone()} method._Delegates to {@link #cloneBeanDefinition()}._@see Object#clone();@Override_	public Object clone() {_		return cloneBeanDefinition()__	};public,declaration,of,object,s,code,clone,method,delegates,to,link,clone,bean,definition,see,object,clone;override,public,object,clone,return,clone,bean,definition
AbstractBeanDefinition -> @Override 	public Object clone();1357119239;Public declaration of Object's {@code clone()} method._Delegates to {@link #cloneBeanDefinition()}._@see Object#clone();@Override_	public Object clone() {_		return cloneBeanDefinition()__	};public,declaration,of,object,s,code,clone,method,delegates,to,link,clone,bean,definition,see,object,clone;override,public,object,clone,return,clone,bean,definition
AbstractBeanDefinition -> @Override 	public Object clone();1367508310;Public declaration of Object's {@code clone()} method._Delegates to {@link #cloneBeanDefinition()}._@see Object#clone();@Override_	public Object clone() {_		return cloneBeanDefinition()__	};public,declaration,of,object,s,code,clone,method,delegates,to,link,clone,bean,definition,see,object,clone;override,public,object,clone,return,clone,bean,definition
AbstractBeanDefinition -> @Override 	public Object clone();1367943112;Public declaration of Object's {@code clone()} method._Delegates to {@link #cloneBeanDefinition()}._@see Object#clone();@Override_	public Object clone() {_		return cloneBeanDefinition()__	};public,declaration,of,object,s,code,clone,method,delegates,to,link,clone,bean,definition,see,object,clone;override,public,object,clone,return,clone,bean,definition
AbstractBeanDefinition -> @Override 	public Object clone();1368482696;Public declaration of Object's {@code clone()} method._Delegates to {@link #cloneBeanDefinition()}._@see Object#clone();@Override_	public Object clone() {_		return cloneBeanDefinition()__	};public,declaration,of,object,s,code,clone,method,delegates,to,link,clone,bean,definition,see,object,clone;override,public,object,clone,return,clone,bean,definition
AbstractBeanDefinition -> @Override 	public Object clone();1385412762;Public declaration of Object's {@code clone()} method._Delegates to {@link #cloneBeanDefinition()}._@see Object#clone();@Override_	public Object clone() {_		return cloneBeanDefinition()__	};public,declaration,of,object,s,code,clone,method,delegates,to,link,clone,bean,definition,see,object,clone;override,public,object,clone,return,clone,bean,definition
AbstractBeanDefinition -> @Override 	public Object clone();1392245317;Public declaration of Object's {@code clone()} method._Delegates to {@link #cloneBeanDefinition()}._@see Object#clone();@Override_	public Object clone() {_		return cloneBeanDefinition()__	};public,declaration,of,object,s,code,clone,method,delegates,to,link,clone,bean,definition,see,object,clone;override,public,object,clone,return,clone,bean,definition
AbstractBeanDefinition -> @Override 	public Object clone();1397163142;Public declaration of Object's {@code clone()} method._Delegates to {@link #cloneBeanDefinition()}._@see Object#clone();@Override_	public Object clone() {_		return cloneBeanDefinition()__	};public,declaration,of,object,s,code,clone,method,delegates,to,link,clone,bean,definition,see,object,clone;override,public,object,clone,return,clone,bean,definition
AbstractBeanDefinition -> @Override 	public Object clone();1398898390;Public declaration of Object's {@code clone()} method._Delegates to {@link #cloneBeanDefinition()}._@see Object#clone();@Override_	public Object clone() {_		return cloneBeanDefinition()__	};public,declaration,of,object,s,code,clone,method,delegates,to,link,clone,bean,definition,see,object,clone;override,public,object,clone,return,clone,bean,definition
AbstractBeanDefinition -> @Override 	public Object clone();1407511029;Public declaration of Object's {@code clone()} method._Delegates to {@link #cloneBeanDefinition()}._@see Object#clone();@Override_	public Object clone() {_		return cloneBeanDefinition()__	};public,declaration,of,object,s,code,clone,method,delegates,to,link,clone,bean,definition,see,object,clone;override,public,object,clone,return,clone,bean,definition
AbstractBeanDefinition -> @Override 	public Object clone();1432135182;Public declaration of Object's {@code clone()} method._Delegates to {@link #cloneBeanDefinition()}._@see Object#clone();@Override_	public Object clone() {_		return cloneBeanDefinition()__	};public,declaration,of,object,s,code,clone,method,delegates,to,link,clone,bean,definition,see,object,clone;override,public,object,clone,return,clone,bean,definition
AbstractBeanDefinition -> @Override 	public Object clone();1434204509;Public declaration of Object's {@code clone()} method._Delegates to {@link #cloneBeanDefinition()}._@see Object#clone();@Override_	public Object clone() {_		return cloneBeanDefinition()__	};public,declaration,of,object,s,code,clone,method,delegates,to,link,clone,bean,definition,see,object,clone;override,public,object,clone,return,clone,bean,definition
AbstractBeanDefinition -> @Override 	public Object clone();1447323728;Public declaration of Object's {@code clone()} method._Delegates to {@link #cloneBeanDefinition()}._@see Object#clone();@Override_	public Object clone() {_		return cloneBeanDefinition()__	};public,declaration,of,object,s,code,clone,method,delegates,to,link,clone,bean,definition,see,object,clone;override,public,object,clone,return,clone,bean,definition
AbstractBeanDefinition -> @Override 	public Object clone();1465226156;Public declaration of Object's {@code clone()} method._Delegates to {@link #cloneBeanDefinition()}._@see Object#clone();@Override_	public Object clone() {_		return cloneBeanDefinition()__	};public,declaration,of,object,s,code,clone,method,delegates,to,link,clone,bean,definition,see,object,clone;override,public,object,clone,return,clone,bean,definition
AbstractBeanDefinition -> @Override 	public Object clone();1467730834;Public declaration of Object's {@code clone()} method._Delegates to {@link #cloneBeanDefinition()}._@see Object#clone();@Override_	public Object clone() {_		return cloneBeanDefinition()__	};public,declaration,of,object,s,code,clone,method,delegates,to,link,clone,bean,definition,see,object,clone;override,public,object,clone,return,clone,bean,definition
AbstractBeanDefinition -> @Override 	public Object clone();1467846264;Public declaration of Object's {@code clone()} method._Delegates to {@link #cloneBeanDefinition()}._@see Object#clone();@Override_	public Object clone() {_		return cloneBeanDefinition()__	};public,declaration,of,object,s,code,clone,method,delegates,to,link,clone,bean,definition,see,object,clone;override,public,object,clone,return,clone,bean,definition
AbstractBeanDefinition -> @Override 	public Object clone();1482091545;Public declaration of Object's {@code clone()} method._Delegates to {@link #cloneBeanDefinition()}._@see Object#clone();@Override_	public Object clone() {_		return cloneBeanDefinition()__	};public,declaration,of,object,s,code,clone,method,delegates,to,link,clone,bean,definition,see,object,clone;override,public,object,clone,return,clone,bean,definition
AbstractBeanDefinition -> @Override 	public Object clone();1483093818;Public declaration of Object's {@code clone()} method._Delegates to {@link #cloneBeanDefinition()}._@see Object#clone();@Override_	public Object clone() {_		return cloneBeanDefinition()__	};public,declaration,of,object,s,code,clone,method,delegates,to,link,clone,bean,definition,see,object,clone;override,public,object,clone,return,clone,bean,definition
AbstractBeanDefinition -> @Override 	public Object clone();1495868221;Public declaration of Object's {@code clone()} method._Delegates to {@link #cloneBeanDefinition()}._@see Object#clone();@Override_	public Object clone() {_		return cloneBeanDefinition()__	};public,declaration,of,object,s,code,clone,method,delegates,to,link,clone,bean,definition,see,object,clone;override,public,object,clone,return,clone,bean,definition
AbstractBeanDefinition -> @Override 	public Object clone();1496837955;Public declaration of Object's {@code clone()} method._Delegates to {@link #cloneBeanDefinition()}._@see Object#clone();@Override_	public Object clone() {_		return cloneBeanDefinition()__	};public,declaration,of,object,s,code,clone,method,delegates,to,link,clone,bean,definition,see,object,clone;override,public,object,clone,return,clone,bean,definition
AbstractBeanDefinition -> @Override 	public Object clone();1498780456;Public declaration of Object's {@code clone()} method._Delegates to {@link #cloneBeanDefinition()}._@see Object#clone();@Override_	public Object clone() {_		return cloneBeanDefinition()__	};public,declaration,of,object,s,code,clone,method,delegates,to,link,clone,bean,definition,see,object,clone;override,public,object,clone,return,clone,bean,definition
AbstractBeanDefinition -> @Override 	public Object clone();1502974979;Public declaration of Object's {@code clone()} method._Delegates to {@link #cloneBeanDefinition()}._@see Object#clone();@Override_	public Object clone() {_		return cloneBeanDefinition()__	};public,declaration,of,object,s,code,clone,method,delegates,to,link,clone,bean,definition,see,object,clone;override,public,object,clone,return,clone,bean,definition
AbstractBeanDefinition -> @Override 	public Object clone();1503008029;Public declaration of Object's {@code clone()} method._Delegates to {@link #cloneBeanDefinition()}._@see Object#clone();@Override_	public Object clone() {_		return cloneBeanDefinition()__	};public,declaration,of,object,s,code,clone,method,delegates,to,link,clone,bean,definition,see,object,clone;override,public,object,clone,return,clone,bean,definition
AbstractBeanDefinition -> @Override 	public Object clone();1510606271;Public declaration of Object's {@code clone()} method._Delegates to {@link #cloneBeanDefinition()}._@see Object#clone();@Override_	public Object clone() {_		return cloneBeanDefinition()__	};public,declaration,of,object,s,code,clone,method,delegates,to,link,clone,bean,definition,see,object,clone;override,public,object,clone,return,clone,bean,definition
AbstractBeanDefinition -> @Override 	public Object clone();1510675876;Public declaration of Object's {@code clone()} method._Delegates to {@link #cloneBeanDefinition()}._@see Object#clone();@Override_	public Object clone() {_		return cloneBeanDefinition()__	};public,declaration,of,object,s,code,clone,method,delegates,to,link,clone,bean,definition,see,object,clone;override,public,object,clone,return,clone,bean,definition
AbstractBeanDefinition -> @Override 	public Object clone();1530174524;Public declaration of Object's {@code clone()} method._Delegates to {@link #cloneBeanDefinition()}._@see Object#clone();@Override_	public Object clone() {_		return cloneBeanDefinition()__	};public,declaration,of,object,s,code,clone,method,delegates,to,link,clone,bean,definition,see,object,clone;override,public,object,clone,return,clone,bean,definition
AbstractBeanDefinition -> @Override 	public Object clone();1530174524;Public declaration of Object's {@code clone()} method._Delegates to {@link #cloneBeanDefinition()}._@see Object#clone();@Override_	public Object clone() {_		return cloneBeanDefinition()__	};public,declaration,of,object,s,code,clone,method,delegates,to,link,clone,bean,definition,see,object,clone;override,public,object,clone,return,clone,bean,definition
AbstractBeanDefinition -> @Override 	public Object clone();1530174524;Public declaration of Object's {@code clone()} method._Delegates to {@link #cloneBeanDefinition()}._@see Object#clone();@Override_	public Object clone() {_		return cloneBeanDefinition()__	};public,declaration,of,object,s,code,clone,method,delegates,to,link,clone,bean,definition,see,object,clone;override,public,object,clone,return,clone,bean,definition
AbstractBeanDefinition -> @Override 	public Object clone();1530190293;Public declaration of Object's {@code clone()} method._Delegates to {@link #cloneBeanDefinition()}._@see Object#clone();@Override_	public Object clone() {_		return cloneBeanDefinition()__	};public,declaration,of,object,s,code,clone,method,delegates,to,link,clone,bean,definition,see,object,clone;override,public,object,clone,return,clone,bean,definition
AbstractBeanDefinition -> @Override 	public Object clone();1532981251;Public declaration of Object's {@code clone()} method._Delegates to {@link #cloneBeanDefinition()}._@see Object#clone();@Override_	public Object clone() {_		return cloneBeanDefinition()__	};public,declaration,of,object,s,code,clone,method,delegates,to,link,clone,bean,definition,see,object,clone;override,public,object,clone,return,clone,bean,definition
AbstractBeanDefinition -> @Override 	public Object clone();1536863076;Public declaration of Object's {@code clone()} method._Delegates to {@link #cloneBeanDefinition()}._@see Object#clone();@Override_	public Object clone() {_		return cloneBeanDefinition()__	};public,declaration,of,object,s,code,clone,method,delegates,to,link,clone,bean,definition,see,object,clone;override,public,object,clone,return,clone,bean,definition
AbstractBeanDefinition -> @Override 	public String getFactoryMethodName();1483093818;Return a factory method, if any.;@Override_	public String getFactoryMethodName() {_		return this.factoryMethodName__	};return,a,factory,method,if,any;override,public,string,get,factory,method,name,return,this,factory,method,name
AbstractBeanDefinition -> @Override 	public String getFactoryMethodName();1495868221;Return a factory method, if any.;@Override_	public String getFactoryMethodName() {_		return this.factoryMethodName__	};return,a,factory,method,if,any;override,public,string,get,factory,method,name,return,this,factory,method,name
AbstractBeanDefinition -> @Override 	public String getFactoryMethodName();1496837955;Return a factory method, if any.;@Override_	public String getFactoryMethodName() {_		return this.factoryMethodName__	};return,a,factory,method,if,any;override,public,string,get,factory,method,name,return,this,factory,method,name
AbstractBeanDefinition -> @Override 	public boolean isPrototype();1356735495;Return whether this a <b>Prototype</b>, with an independent instance_returned for each call._@see #SCOPE_PROTOTYPE;@Override_	public boolean isPrototype() {_		return this.prototype__	};return,whether,this,a,b,prototype,b,with,an,independent,instance,returned,for,each,call,see;override,public,boolean,is,prototype,return,this,prototype
AbstractBeanDefinition -> @Override 	public boolean isPrototype();1368482696;Return whether this a <b>Prototype</b>, with an independent instance_returned for each call._@see #SCOPE_PROTOTYPE;@Override_	public boolean isPrototype() {_		return SCOPE_PROTOTYPE.equals(scope)__	};return,whether,this,a,b,prototype,b,with,an,independent,instance,returned,for,each,call,see;override,public,boolean,is,prototype,return,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isPrototype();1385412762;Return whether this a <b>Prototype</b>, with an independent instance_returned for each call._@see #SCOPE_PROTOTYPE;@Override_	public boolean isPrototype() {_		return SCOPE_PROTOTYPE.equals(scope)__	};return,whether,this,a,b,prototype,b,with,an,independent,instance,returned,for,each,call,see;override,public,boolean,is,prototype,return,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isPrototype();1392245317;Return whether this a <b>Prototype</b>, with an independent instance_returned for each call._@see #SCOPE_PROTOTYPE;@Override_	public boolean isPrototype() {_		return SCOPE_PROTOTYPE.equals(scope)__	};return,whether,this,a,b,prototype,b,with,an,independent,instance,returned,for,each,call,see;override,public,boolean,is,prototype,return,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isPrototype();1397163142;Return whether this a <b>Prototype</b>, with an independent instance_returned for each call._@see #SCOPE_PROTOTYPE;@Override_	public boolean isPrototype() {_		return SCOPE_PROTOTYPE.equals(scope)__	};return,whether,this,a,b,prototype,b,with,an,independent,instance,returned,for,each,call,see;override,public,boolean,is,prototype,return,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isPrototype();1398898390;Return whether this a <b>Prototype</b>, with an independent instance_returned for each call._@see #SCOPE_PROTOTYPE;@Override_	public boolean isPrototype() {_		return SCOPE_PROTOTYPE.equals(scope)__	};return,whether,this,a,b,prototype,b,with,an,independent,instance,returned,for,each,call,see;override,public,boolean,is,prototype,return,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isPrototype();1407511029;Return whether this a <b>Prototype</b>, with an independent instance_returned for each call._@see #SCOPE_PROTOTYPE;@Override_	public boolean isPrototype() {_		return SCOPE_PROTOTYPE.equals(scope)__	};return,whether,this,a,b,prototype,b,with,an,independent,instance,returned,for,each,call,see;override,public,boolean,is,prototype,return,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isPrototype();1432135182;Return whether this a <b>Prototype</b>, with an independent instance_returned for each call._@see #SCOPE_PROTOTYPE;@Override_	public boolean isPrototype() {_		return SCOPE_PROTOTYPE.equals(scope)__	};return,whether,this,a,b,prototype,b,with,an,independent,instance,returned,for,each,call,see;override,public,boolean,is,prototype,return,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isPrototype();1434204509;Return whether this a <b>Prototype</b>, with an independent instance_returned for each call._@see #SCOPE_PROTOTYPE;@Override_	public boolean isPrototype() {_		return SCOPE_PROTOTYPE.equals(scope)__	};return,whether,this,a,b,prototype,b,with,an,independent,instance,returned,for,each,call,see;override,public,boolean,is,prototype,return,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isPrototype();1447323728;Return whether this a <b>Prototype</b>, with an independent instance_returned for each call._@see #SCOPE_PROTOTYPE;@Override_	public boolean isPrototype() {_		return SCOPE_PROTOTYPE.equals(scope)__	};return,whether,this,a,b,prototype,b,with,an,independent,instance,returned,for,each,call,see;override,public,boolean,is,prototype,return,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isPrototype();1465226156;Return whether this a <b>Prototype</b>, with an independent instance_returned for each call._@see #SCOPE_PROTOTYPE;@Override_	public boolean isPrototype() {_		return SCOPE_PROTOTYPE.equals(scope)__	};return,whether,this,a,b,prototype,b,with,an,independent,instance,returned,for,each,call,see;override,public,boolean,is,prototype,return,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isPrototype();1467730834;Return whether this a <b>Prototype</b>, with an independent instance_returned for each call._@see #SCOPE_PROTOTYPE;@Override_	public boolean isPrototype() {_		return SCOPE_PROTOTYPE.equals(scope)__	};return,whether,this,a,b,prototype,b,with,an,independent,instance,returned,for,each,call,see;override,public,boolean,is,prototype,return,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isPrototype();1467846264;Return whether this a <b>Prototype</b>, with an independent instance_returned for each call._@see #SCOPE_PROTOTYPE;@Override_	public boolean isPrototype() {_		return SCOPE_PROTOTYPE.equals(scope)__	};return,whether,this,a,b,prototype,b,with,an,independent,instance,returned,for,each,call,see;override,public,boolean,is,prototype,return,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isPrototype();1482091545;Return whether this a <b>Prototype</b>, with an independent instance_returned for each call._@see #SCOPE_PROTOTYPE;@Override_	public boolean isPrototype() {_		return SCOPE_PROTOTYPE.equals(scope)__	};return,whether,this,a,b,prototype,b,with,an,independent,instance,returned,for,each,call,see;override,public,boolean,is,prototype,return,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isPrototype();1483093818;Return whether this a <b>Prototype</b>, with an independent instance_returned for each call._@see #SCOPE_PROTOTYPE;@Override_	public boolean isPrototype() {_		return SCOPE_PROTOTYPE.equals(scope)__	};return,whether,this,a,b,prototype,b,with,an,independent,instance,returned,for,each,call,see;override,public,boolean,is,prototype,return,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isPrototype();1495868221;Return whether this a <b>Prototype</b>, with an independent instance_returned for each call._@see #SCOPE_PROTOTYPE;@Override_	public boolean isPrototype() {_		return SCOPE_PROTOTYPE.equals(scope)__	};return,whether,this,a,b,prototype,b,with,an,independent,instance,returned,for,each,call,see;override,public,boolean,is,prototype,return,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isPrototype();1496837955;Return whether this a <b>Prototype</b>, with an independent instance_returned for each call._@see #SCOPE_PROTOTYPE;@Override_	public boolean isPrototype() {_		return SCOPE_PROTOTYPE.equals(scope)__	};return,whether,this,a,b,prototype,b,with,an,independent,instance,returned,for,each,call,see;override,public,boolean,is,prototype,return,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isPrototype();1498780456;Return whether this a <b>Prototype</b>, with an independent instance_returned for each call._@see #SCOPE_PROTOTYPE;@Override_	public boolean isPrototype() {_		return SCOPE_PROTOTYPE.equals(scope)__	};return,whether,this,a,b,prototype,b,with,an,independent,instance,returned,for,each,call,see;override,public,boolean,is,prototype,return,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isPrototype();1502974979;Return whether this a <b>Prototype</b>, with an independent instance_returned for each call._@see #SCOPE_PROTOTYPE;@Override_	public boolean isPrototype() {_		return SCOPE_PROTOTYPE.equals(scope)__	};return,whether,this,a,b,prototype,b,with,an,independent,instance,returned,for,each,call,see;override,public,boolean,is,prototype,return,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isPrototype();1503008029;Return whether this a <b>Prototype</b>, with an independent instance_returned for each call._@see #SCOPE_PROTOTYPE;@Override_	public boolean isPrototype() {_		return SCOPE_PROTOTYPE.equals(scope)__	};return,whether,this,a,b,prototype,b,with,an,independent,instance,returned,for,each,call,see;override,public,boolean,is,prototype,return,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isPrototype();1510606271;Return whether this a <b>Prototype</b>, with an independent instance_returned for each call._@see #SCOPE_PROTOTYPE;@Override_	public boolean isPrototype() {_		return SCOPE_PROTOTYPE.equals(scope)__	};return,whether,this,a,b,prototype,b,with,an,independent,instance,returned,for,each,call,see;override,public,boolean,is,prototype,return,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isPrototype();1510675876;Return whether this a <b>Prototype</b>, with an independent instance_returned for each call._@see #SCOPE_PROTOTYPE;@Override_	public boolean isPrototype() {_		return SCOPE_PROTOTYPE.equals(scope)__	};return,whether,this,a,b,prototype,b,with,an,independent,instance,returned,for,each,call,see;override,public,boolean,is,prototype,return,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isPrototype();1530174524;Return whether this a <b>Prototype</b>, with an independent instance_returned for each call._@see #SCOPE_PROTOTYPE;@Override_	public boolean isPrototype() {_		return SCOPE_PROTOTYPE.equals(scope)__	};return,whether,this,a,b,prototype,b,with,an,independent,instance,returned,for,each,call,see;override,public,boolean,is,prototype,return,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isPrototype();1530174524;Return whether this a <b>Prototype</b>, with an independent instance_returned for each call._@see #SCOPE_PROTOTYPE;@Override_	public boolean isPrototype() {_		return SCOPE_PROTOTYPE.equals(scope)__	};return,whether,this,a,b,prototype,b,with,an,independent,instance,returned,for,each,call,see;override,public,boolean,is,prototype,return,equals,scope
AbstractBeanDefinition -> @Override 	public boolean isPrototype();1530174524;Return whether this a <b>Prototype</b>, with an independent instance_returned for each call._@see #SCOPE_PROTOTYPE;@Override_	public boolean isPrototype() {_		return SCOPE_PROTOTYPE.equals(this.scope)__	};return,whether,this,a,b,prototype,b,with,an,independent,instance,returned,for,each,call,see;override,public,boolean,is,prototype,return,equals,this,scope
AbstractBeanDefinition -> @Override 	public boolean isPrototype();1530190293;Return whether this a <b>Prototype</b>, with an independent instance_returned for each call._@see #SCOPE_PROTOTYPE;@Override_	public boolean isPrototype() {_		return SCOPE_PROTOTYPE.equals(this.scope)__	};return,whether,this,a,b,prototype,b,with,an,independent,instance,returned,for,each,call,see;override,public,boolean,is,prototype,return,equals,this,scope
AbstractBeanDefinition -> @Override 	public boolean isPrototype();1532981251;Return whether this a <b>Prototype</b>, with an independent instance_returned for each call._@see #SCOPE_PROTOTYPE;@Override_	public boolean isPrototype() {_		return SCOPE_PROTOTYPE.equals(this.scope)__	};return,whether,this,a,b,prototype,b,with,an,independent,instance,returned,for,each,call,see;override,public,boolean,is,prototype,return,equals,this,scope
AbstractBeanDefinition -> @Override 	public boolean isPrototype();1536863076;Return whether this a <b>Prototype</b>, with an independent instance_returned for each call._@see #SCOPE_PROTOTYPE;@Override_	public boolean isPrototype() {_		return SCOPE_PROTOTYPE.equals(this.scope)__	};return,whether,this,a,b,prototype,b,with,an,independent,instance,returned,for,each,call,see;override,public,boolean,is,prototype,return,equals,this,scope
AbstractBeanDefinition -> public boolean hasBeanClass();1328020251;Return whether this definition specifies a bean class.;public boolean hasBeanClass() {_		return (this.beanClass instanceof Class)__	};return,whether,this,definition,specifies,a,bean,class;public,boolean,has,bean,class,return,this,bean,class,instanceof,class
AbstractBeanDefinition -> public boolean hasBeanClass();1337202589;Return whether this definition specifies a bean class.;public boolean hasBeanClass() {_		return (this.beanClass instanceof Class)__	};return,whether,this,definition,specifies,a,bean,class;public,boolean,has,bean,class,return,this,bean,class,instanceof,class
AbstractBeanDefinition -> public boolean hasBeanClass();1356735495;Return whether this definition specifies a bean class.;public boolean hasBeanClass() {_		return (this.beanClass instanceof Class)__	};return,whether,this,definition,specifies,a,bean,class;public,boolean,has,bean,class,return,this,bean,class,instanceof,class
AbstractBeanDefinition -> public boolean hasBeanClass();1357119239;Return whether this definition specifies a bean class.;public boolean hasBeanClass() {_		return (this.beanClass instanceof Class)__	};return,whether,this,definition,specifies,a,bean,class;public,boolean,has,bean,class,return,this,bean,class,instanceof,class
AbstractBeanDefinition -> public boolean hasBeanClass();1367508310;Return whether this definition specifies a bean class.;public boolean hasBeanClass() {_		return (this.beanClass instanceof Class)__	};return,whether,this,definition,specifies,a,bean,class;public,boolean,has,bean,class,return,this,bean,class,instanceof,class
AbstractBeanDefinition -> public boolean hasBeanClass();1367943112;Return whether this definition specifies a bean class.;public boolean hasBeanClass() {_		return (this.beanClass instanceof Class)__	};return,whether,this,definition,specifies,a,bean,class;public,boolean,has,bean,class,return,this,bean,class,instanceof,class
AbstractBeanDefinition -> public boolean hasBeanClass();1368482696;Return whether this definition specifies a bean class.;public boolean hasBeanClass() {_		return (this.beanClass instanceof Class)__	};return,whether,this,definition,specifies,a,bean,class;public,boolean,has,bean,class,return,this,bean,class,instanceof,class
AbstractBeanDefinition -> public boolean hasBeanClass();1385412762;Return whether this definition specifies a bean class.;public boolean hasBeanClass() {_		return (this.beanClass instanceof Class)__	};return,whether,this,definition,specifies,a,bean,class;public,boolean,has,bean,class,return,this,bean,class,instanceof,class
AbstractBeanDefinition -> public boolean hasBeanClass();1392245317;Return whether this definition specifies a bean class.;public boolean hasBeanClass() {_		return (this.beanClass instanceof Class)__	};return,whether,this,definition,specifies,a,bean,class;public,boolean,has,bean,class,return,this,bean,class,instanceof,class
AbstractBeanDefinition -> public boolean hasBeanClass();1397163142;Return whether this definition specifies a bean class.;public boolean hasBeanClass() {_		return (this.beanClass instanceof Class)__	};return,whether,this,definition,specifies,a,bean,class;public,boolean,has,bean,class,return,this,bean,class,instanceof,class
AbstractBeanDefinition -> public boolean hasBeanClass();1398898390;Return whether this definition specifies a bean class.;public boolean hasBeanClass() {_		return (this.beanClass instanceof Class)__	};return,whether,this,definition,specifies,a,bean,class;public,boolean,has,bean,class,return,this,bean,class,instanceof,class
AbstractBeanDefinition -> public boolean hasBeanClass();1407511029;Return whether this definition specifies a bean class.;public boolean hasBeanClass() {_		return (this.beanClass instanceof Class)__	};return,whether,this,definition,specifies,a,bean,class;public,boolean,has,bean,class,return,this,bean,class,instanceof,class
AbstractBeanDefinition -> public boolean hasBeanClass();1432135182;Return whether this definition specifies a bean class.;public boolean hasBeanClass() {_		return (this.beanClass instanceof Class)__	};return,whether,this,definition,specifies,a,bean,class;public,boolean,has,bean,class,return,this,bean,class,instanceof,class
AbstractBeanDefinition -> public boolean hasBeanClass();1434204509;Return whether this definition specifies a bean class.;public boolean hasBeanClass() {_		return (this.beanClass instanceof Class)__	};return,whether,this,definition,specifies,a,bean,class;public,boolean,has,bean,class,return,this,bean,class,instanceof,class
AbstractBeanDefinition -> public boolean hasBeanClass();1447323728;Return whether this definition specifies a bean class.;public boolean hasBeanClass() {_		return (this.beanClass instanceof Class)__	};return,whether,this,definition,specifies,a,bean,class;public,boolean,has,bean,class,return,this,bean,class,instanceof,class
AbstractBeanDefinition -> public boolean hasBeanClass();1465226156;Return whether this definition specifies a bean class.;public boolean hasBeanClass() {_		return (this.beanClass instanceof Class)__	};return,whether,this,definition,specifies,a,bean,class;public,boolean,has,bean,class,return,this,bean,class,instanceof,class
AbstractBeanDefinition -> public boolean hasBeanClass();1467730834;Return whether this definition specifies a bean class.;public boolean hasBeanClass() {_		return (this.beanClass instanceof Class)__	};return,whether,this,definition,specifies,a,bean,class;public,boolean,has,bean,class,return,this,bean,class,instanceof,class
AbstractBeanDefinition -> public boolean hasBeanClass();1467846264;Return whether this definition specifies a bean class.;public boolean hasBeanClass() {_		return (this.beanClass instanceof Class)__	};return,whether,this,definition,specifies,a,bean,class;public,boolean,has,bean,class,return,this,bean,class,instanceof,class
AbstractBeanDefinition -> public boolean hasBeanClass();1482091545;Return whether this definition specifies a bean class.;public boolean hasBeanClass() {_		return (this.beanClass instanceof Class)__	};return,whether,this,definition,specifies,a,bean,class;public,boolean,has,bean,class,return,this,bean,class,instanceof,class
AbstractBeanDefinition -> public boolean hasBeanClass();1483093818;Return whether this definition specifies a bean class.;public boolean hasBeanClass() {_		return (this.beanClass instanceof Class)__	};return,whether,this,definition,specifies,a,bean,class;public,boolean,has,bean,class,return,this,bean,class,instanceof,class
AbstractBeanDefinition -> public boolean hasBeanClass();1495868221;Return whether this definition specifies a bean class.;public boolean hasBeanClass() {_		return (this.beanClass instanceof Class)__	};return,whether,this,definition,specifies,a,bean,class;public,boolean,has,bean,class,return,this,bean,class,instanceof,class
AbstractBeanDefinition -> public boolean hasBeanClass();1496837955;Return whether this definition specifies a bean class.;public boolean hasBeanClass() {_		return (this.beanClass instanceof Class)__	};return,whether,this,definition,specifies,a,bean,class;public,boolean,has,bean,class,return,this,bean,class,instanceof,class
AbstractBeanDefinition -> public boolean hasBeanClass();1498780456;Return whether this definition specifies a bean class.;public boolean hasBeanClass() {_		return (this.beanClass instanceof Class)__	};return,whether,this,definition,specifies,a,bean,class;public,boolean,has,bean,class,return,this,bean,class,instanceof,class
AbstractBeanDefinition -> public boolean hasBeanClass();1502974979;Return whether this definition specifies a bean class.;public boolean hasBeanClass() {_		return (this.beanClass instanceof Class)__	};return,whether,this,definition,specifies,a,bean,class;public,boolean,has,bean,class,return,this,bean,class,instanceof,class
AbstractBeanDefinition -> public boolean hasBeanClass();1503008029;Return whether this definition specifies a bean class.;public boolean hasBeanClass() {_		return (this.beanClass instanceof Class)__	};return,whether,this,definition,specifies,a,bean,class;public,boolean,has,bean,class,return,this,bean,class,instanceof,class
AbstractBeanDefinition -> public boolean hasBeanClass();1510606271;Return whether this definition specifies a bean class.;public boolean hasBeanClass() {_		return (this.beanClass instanceof Class)__	};return,whether,this,definition,specifies,a,bean,class;public,boolean,has,bean,class,return,this,bean,class,instanceof,class
AbstractBeanDefinition -> public boolean hasBeanClass();1510675876;Return whether this definition specifies a bean class.;public boolean hasBeanClass() {_		return (this.beanClass instanceof Class)__	};return,whether,this,definition,specifies,a,bean,class;public,boolean,has,bean,class,return,this,bean,class,instanceof,class
AbstractBeanDefinition -> public boolean hasBeanClass();1530174524;Return whether this definition specifies a bean class.;public boolean hasBeanClass() {_		return (this.beanClass instanceof Class)__	};return,whether,this,definition,specifies,a,bean,class;public,boolean,has,bean,class,return,this,bean,class,instanceof,class
AbstractBeanDefinition -> public boolean hasBeanClass();1530174524;Return whether this definition specifies a bean class.;public boolean hasBeanClass() {_		return (this.beanClass instanceof Class)__	};return,whether,this,definition,specifies,a,bean,class;public,boolean,has,bean,class,return,this,bean,class,instanceof,class
AbstractBeanDefinition -> public boolean hasBeanClass();1530174524;Return whether this definition specifies a bean class.;public boolean hasBeanClass() {_		return (this.beanClass instanceof Class)__	};return,whether,this,definition,specifies,a,bean,class;public,boolean,has,bean,class,return,this,bean,class,instanceof,class
AbstractBeanDefinition -> public boolean hasBeanClass();1530190293;Return whether this definition specifies a bean class.;public boolean hasBeanClass() {_		return (this.beanClass instanceof Class)__	};return,whether,this,definition,specifies,a,bean,class;public,boolean,has,bean,class,return,this,bean,class,instanceof,class
AbstractBeanDefinition -> public boolean hasBeanClass();1532981251;Return whether this definition specifies a bean class.;public boolean hasBeanClass() {_		return (this.beanClass instanceof Class)__	};return,whether,this,definition,specifies,a,bean,class;public,boolean,has,bean,class,return,this,bean,class,instanceof,class
AbstractBeanDefinition -> public boolean hasBeanClass();1536863076;Return whether this definition specifies a bean class.;public boolean hasBeanClass() {_		return (this.beanClass instanceof Class)__	};return,whether,this,definition,specifies,a,bean,class;public,boolean,has,bean,class,return,this,bean,class,instanceof,class
AbstractBeanDefinition -> public void setOriginatingBeanDefinition(BeanDefinition originatingBd);1328020251;Set the originating (e.g. decorated) BeanDefinition, if any.;public void setOriginatingBeanDefinition(BeanDefinition originatingBd) {_		this.resource = new BeanDefinitionResource(originatingBd)__	};set,the,originating,e,g,decorated,bean,definition,if,any;public,void,set,originating,bean,definition,bean,definition,originating,bd,this,resource,new,bean,definition,resource,originating,bd
AbstractBeanDefinition -> public void setOriginatingBeanDefinition(BeanDefinition originatingBd);1337202589;Set the originating (e.g. decorated) BeanDefinition, if any.;public void setOriginatingBeanDefinition(BeanDefinition originatingBd) {_		this.resource = new BeanDefinitionResource(originatingBd)__	};set,the,originating,e,g,decorated,bean,definition,if,any;public,void,set,originating,bean,definition,bean,definition,originating,bd,this,resource,new,bean,definition,resource,originating,bd
AbstractBeanDefinition -> public void setOriginatingBeanDefinition(BeanDefinition originatingBd);1356735495;Set the originating (e.g. decorated) BeanDefinition, if any.;public void setOriginatingBeanDefinition(BeanDefinition originatingBd) {_		this.resource = new BeanDefinitionResource(originatingBd)__	};set,the,originating,e,g,decorated,bean,definition,if,any;public,void,set,originating,bean,definition,bean,definition,originating,bd,this,resource,new,bean,definition,resource,originating,bd
AbstractBeanDefinition -> public void setOriginatingBeanDefinition(BeanDefinition originatingBd);1357119239;Set the originating (e.g. decorated) BeanDefinition, if any.;public void setOriginatingBeanDefinition(BeanDefinition originatingBd) {_		this.resource = new BeanDefinitionResource(originatingBd)__	};set,the,originating,e,g,decorated,bean,definition,if,any;public,void,set,originating,bean,definition,bean,definition,originating,bd,this,resource,new,bean,definition,resource,originating,bd
AbstractBeanDefinition -> public void setOriginatingBeanDefinition(BeanDefinition originatingBd);1367508310;Set the originating (e.g. decorated) BeanDefinition, if any.;public void setOriginatingBeanDefinition(BeanDefinition originatingBd) {_		this.resource = new BeanDefinitionResource(originatingBd)__	};set,the,originating,e,g,decorated,bean,definition,if,any;public,void,set,originating,bean,definition,bean,definition,originating,bd,this,resource,new,bean,definition,resource,originating,bd
AbstractBeanDefinition -> public void setOriginatingBeanDefinition(BeanDefinition originatingBd);1367943112;Set the originating (e.g. decorated) BeanDefinition, if any.;public void setOriginatingBeanDefinition(BeanDefinition originatingBd) {_		this.resource = new BeanDefinitionResource(originatingBd)__	};set,the,originating,e,g,decorated,bean,definition,if,any;public,void,set,originating,bean,definition,bean,definition,originating,bd,this,resource,new,bean,definition,resource,originating,bd
AbstractBeanDefinition -> public void setOriginatingBeanDefinition(BeanDefinition originatingBd);1368482696;Set the originating (e.g. decorated) BeanDefinition, if any.;public void setOriginatingBeanDefinition(BeanDefinition originatingBd) {_		this.resource = new BeanDefinitionResource(originatingBd)__	};set,the,originating,e,g,decorated,bean,definition,if,any;public,void,set,originating,bean,definition,bean,definition,originating,bd,this,resource,new,bean,definition,resource,originating,bd
AbstractBeanDefinition -> public void setOriginatingBeanDefinition(BeanDefinition originatingBd);1385412762;Set the originating (e.g. decorated) BeanDefinition, if any.;public void setOriginatingBeanDefinition(BeanDefinition originatingBd) {_		this.resource = new BeanDefinitionResource(originatingBd)__	};set,the,originating,e,g,decorated,bean,definition,if,any;public,void,set,originating,bean,definition,bean,definition,originating,bd,this,resource,new,bean,definition,resource,originating,bd
AbstractBeanDefinition -> public void setOriginatingBeanDefinition(BeanDefinition originatingBd);1392245317;Set the originating (e.g. decorated) BeanDefinition, if any.;public void setOriginatingBeanDefinition(BeanDefinition originatingBd) {_		this.resource = new BeanDefinitionResource(originatingBd)__	};set,the,originating,e,g,decorated,bean,definition,if,any;public,void,set,originating,bean,definition,bean,definition,originating,bd,this,resource,new,bean,definition,resource,originating,bd
AbstractBeanDefinition -> public void setOriginatingBeanDefinition(BeanDefinition originatingBd);1397163142;Set the originating (e.g. decorated) BeanDefinition, if any.;public void setOriginatingBeanDefinition(BeanDefinition originatingBd) {_		this.resource = new BeanDefinitionResource(originatingBd)__	};set,the,originating,e,g,decorated,bean,definition,if,any;public,void,set,originating,bean,definition,bean,definition,originating,bd,this,resource,new,bean,definition,resource,originating,bd
AbstractBeanDefinition -> public void setOriginatingBeanDefinition(BeanDefinition originatingBd);1398898390;Set the originating (e.g. decorated) BeanDefinition, if any.;public void setOriginatingBeanDefinition(BeanDefinition originatingBd) {_		this.resource = new BeanDefinitionResource(originatingBd)__	};set,the,originating,e,g,decorated,bean,definition,if,any;public,void,set,originating,bean,definition,bean,definition,originating,bd,this,resource,new,bean,definition,resource,originating,bd
AbstractBeanDefinition -> public void setOriginatingBeanDefinition(BeanDefinition originatingBd);1407511029;Set the originating (e.g. decorated) BeanDefinition, if any.;public void setOriginatingBeanDefinition(BeanDefinition originatingBd) {_		this.resource = new BeanDefinitionResource(originatingBd)__	};set,the,originating,e,g,decorated,bean,definition,if,any;public,void,set,originating,bean,definition,bean,definition,originating,bd,this,resource,new,bean,definition,resource,originating,bd
AbstractBeanDefinition -> public void setOriginatingBeanDefinition(BeanDefinition originatingBd);1432135182;Set the originating (e.g. decorated) BeanDefinition, if any.;public void setOriginatingBeanDefinition(BeanDefinition originatingBd) {_		this.resource = new BeanDefinitionResource(originatingBd)__	};set,the,originating,e,g,decorated,bean,definition,if,any;public,void,set,originating,bean,definition,bean,definition,originating,bd,this,resource,new,bean,definition,resource,originating,bd
AbstractBeanDefinition -> public void setOriginatingBeanDefinition(BeanDefinition originatingBd);1434204509;Set the originating (e.g. decorated) BeanDefinition, if any.;public void setOriginatingBeanDefinition(BeanDefinition originatingBd) {_		this.resource = new BeanDefinitionResource(originatingBd)__	};set,the,originating,e,g,decorated,bean,definition,if,any;public,void,set,originating,bean,definition,bean,definition,originating,bd,this,resource,new,bean,definition,resource,originating,bd
AbstractBeanDefinition -> public void setOriginatingBeanDefinition(BeanDefinition originatingBd);1447323728;Set the originating (e.g. decorated) BeanDefinition, if any.;public void setOriginatingBeanDefinition(BeanDefinition originatingBd) {_		this.resource = new BeanDefinitionResource(originatingBd)__	};set,the,originating,e,g,decorated,bean,definition,if,any;public,void,set,originating,bean,definition,bean,definition,originating,bd,this,resource,new,bean,definition,resource,originating,bd
AbstractBeanDefinition -> public void setOriginatingBeanDefinition(BeanDefinition originatingBd);1465226156;Set the originating (e.g. decorated) BeanDefinition, if any.;public void setOriginatingBeanDefinition(BeanDefinition originatingBd) {_		this.resource = new BeanDefinitionResource(originatingBd)__	};set,the,originating,e,g,decorated,bean,definition,if,any;public,void,set,originating,bean,definition,bean,definition,originating,bd,this,resource,new,bean,definition,resource,originating,bd
AbstractBeanDefinition -> public void setOriginatingBeanDefinition(BeanDefinition originatingBd);1467730834;Set the originating (e.g. decorated) BeanDefinition, if any.;public void setOriginatingBeanDefinition(BeanDefinition originatingBd) {_		this.resource = new BeanDefinitionResource(originatingBd)__	};set,the,originating,e,g,decorated,bean,definition,if,any;public,void,set,originating,bean,definition,bean,definition,originating,bd,this,resource,new,bean,definition,resource,originating,bd
AbstractBeanDefinition -> public void setOriginatingBeanDefinition(BeanDefinition originatingBd);1467846264;Set the originating (e.g. decorated) BeanDefinition, if any.;public void setOriginatingBeanDefinition(BeanDefinition originatingBd) {_		this.resource = new BeanDefinitionResource(originatingBd)__	};set,the,originating,e,g,decorated,bean,definition,if,any;public,void,set,originating,bean,definition,bean,definition,originating,bd,this,resource,new,bean,definition,resource,originating,bd
AbstractBeanDefinition -> public void setOriginatingBeanDefinition(BeanDefinition originatingBd);1482091545;Set the originating (e.g. decorated) BeanDefinition, if any.;public void setOriginatingBeanDefinition(BeanDefinition originatingBd) {_		this.resource = new BeanDefinitionResource(originatingBd)__	};set,the,originating,e,g,decorated,bean,definition,if,any;public,void,set,originating,bean,definition,bean,definition,originating,bd,this,resource,new,bean,definition,resource,originating,bd
AbstractBeanDefinition -> public void setOriginatingBeanDefinition(BeanDefinition originatingBd);1483093818;Set the originating (e.g. decorated) BeanDefinition, if any.;public void setOriginatingBeanDefinition(BeanDefinition originatingBd) {_		this.resource = new BeanDefinitionResource(originatingBd)__	};set,the,originating,e,g,decorated,bean,definition,if,any;public,void,set,originating,bean,definition,bean,definition,originating,bd,this,resource,new,bean,definition,resource,originating,bd
AbstractBeanDefinition -> public void setOriginatingBeanDefinition(BeanDefinition originatingBd);1495868221;Set the originating (e.g. decorated) BeanDefinition, if any.;public void setOriginatingBeanDefinition(BeanDefinition originatingBd) {_		this.resource = new BeanDefinitionResource(originatingBd)__	};set,the,originating,e,g,decorated,bean,definition,if,any;public,void,set,originating,bean,definition,bean,definition,originating,bd,this,resource,new,bean,definition,resource,originating,bd
AbstractBeanDefinition -> public void setOriginatingBeanDefinition(BeanDefinition originatingBd);1496837955;Set the originating (e.g. decorated) BeanDefinition, if any.;public void setOriginatingBeanDefinition(BeanDefinition originatingBd) {_		this.resource = new BeanDefinitionResource(originatingBd)__	};set,the,originating,e,g,decorated,bean,definition,if,any;public,void,set,originating,bean,definition,bean,definition,originating,bd,this,resource,new,bean,definition,resource,originating,bd
AbstractBeanDefinition -> public void setOriginatingBeanDefinition(BeanDefinition originatingBd);1498780456;Set the originating (e.g. decorated) BeanDefinition, if any.;public void setOriginatingBeanDefinition(BeanDefinition originatingBd) {_		this.resource = new BeanDefinitionResource(originatingBd)__	};set,the,originating,e,g,decorated,bean,definition,if,any;public,void,set,originating,bean,definition,bean,definition,originating,bd,this,resource,new,bean,definition,resource,originating,bd
AbstractBeanDefinition -> public void setOriginatingBeanDefinition(BeanDefinition originatingBd);1502974979;Set the originating (e.g. decorated) BeanDefinition, if any.;public void setOriginatingBeanDefinition(BeanDefinition originatingBd) {_		this.resource = new BeanDefinitionResource(originatingBd)__	};set,the,originating,e,g,decorated,bean,definition,if,any;public,void,set,originating,bean,definition,bean,definition,originating,bd,this,resource,new,bean,definition,resource,originating,bd
AbstractBeanDefinition -> public void setOriginatingBeanDefinition(BeanDefinition originatingBd);1503008029;Set the originating (e.g. decorated) BeanDefinition, if any.;public void setOriginatingBeanDefinition(BeanDefinition originatingBd) {_		this.resource = new BeanDefinitionResource(originatingBd)__	};set,the,originating,e,g,decorated,bean,definition,if,any;public,void,set,originating,bean,definition,bean,definition,originating,bd,this,resource,new,bean,definition,resource,originating,bd
AbstractBeanDefinition -> public void setOriginatingBeanDefinition(BeanDefinition originatingBd);1510606271;Set the originating (e.g. decorated) BeanDefinition, if any.;public void setOriginatingBeanDefinition(BeanDefinition originatingBd) {_		this.resource = new BeanDefinitionResource(originatingBd)__	};set,the,originating,e,g,decorated,bean,definition,if,any;public,void,set,originating,bean,definition,bean,definition,originating,bd,this,resource,new,bean,definition,resource,originating,bd
AbstractBeanDefinition -> public void setOriginatingBeanDefinition(BeanDefinition originatingBd);1510675876;Set the originating (e.g. decorated) BeanDefinition, if any.;public void setOriginatingBeanDefinition(BeanDefinition originatingBd) {_		this.resource = new BeanDefinitionResource(originatingBd)__	};set,the,originating,e,g,decorated,bean,definition,if,any;public,void,set,originating,bean,definition,bean,definition,originating,bd,this,resource,new,bean,definition,resource,originating,bd
AbstractBeanDefinition -> public void setOriginatingBeanDefinition(BeanDefinition originatingBd);1530174524;Set the originating (e.g. decorated) BeanDefinition, if any.;public void setOriginatingBeanDefinition(BeanDefinition originatingBd) {_		this.resource = new BeanDefinitionResource(originatingBd)__	};set,the,originating,e,g,decorated,bean,definition,if,any;public,void,set,originating,bean,definition,bean,definition,originating,bd,this,resource,new,bean,definition,resource,originating,bd
AbstractBeanDefinition -> public void setOriginatingBeanDefinition(BeanDefinition originatingBd);1530174524;Set the originating (e.g. decorated) BeanDefinition, if any.;public void setOriginatingBeanDefinition(BeanDefinition originatingBd) {_		this.resource = new BeanDefinitionResource(originatingBd)__	};set,the,originating,e,g,decorated,bean,definition,if,any;public,void,set,originating,bean,definition,bean,definition,originating,bd,this,resource,new,bean,definition,resource,originating,bd
AbstractBeanDefinition -> public void setOriginatingBeanDefinition(BeanDefinition originatingBd);1530174524;Set the originating (e.g. decorated) BeanDefinition, if any.;public void setOriginatingBeanDefinition(BeanDefinition originatingBd) {_		this.resource = new BeanDefinitionResource(originatingBd)__	};set,the,originating,e,g,decorated,bean,definition,if,any;public,void,set,originating,bean,definition,bean,definition,originating,bd,this,resource,new,bean,definition,resource,originating,bd
AbstractBeanDefinition -> public void setOriginatingBeanDefinition(BeanDefinition originatingBd);1530190293;Set the originating (e.g. decorated) BeanDefinition, if any.;public void setOriginatingBeanDefinition(BeanDefinition originatingBd) {_		this.resource = new BeanDefinitionResource(originatingBd)__	};set,the,originating,e,g,decorated,bean,definition,if,any;public,void,set,originating,bean,definition,bean,definition,originating,bd,this,resource,new,bean,definition,resource,originating,bd
AbstractBeanDefinition -> public void setOriginatingBeanDefinition(BeanDefinition originatingBd);1532981251;Set the originating (e.g. decorated) BeanDefinition, if any.;public void setOriginatingBeanDefinition(BeanDefinition originatingBd) {_		this.resource = new BeanDefinitionResource(originatingBd)__	};set,the,originating,e,g,decorated,bean,definition,if,any;public,void,set,originating,bean,definition,bean,definition,originating,bd,this,resource,new,bean,definition,resource,originating,bd
AbstractBeanDefinition -> public void setOriginatingBeanDefinition(BeanDefinition originatingBd);1536863076;Set the originating (e.g. decorated) BeanDefinition, if any.;public void setOriginatingBeanDefinition(BeanDefinition originatingBd) {_		this.resource = new BeanDefinitionResource(originatingBd)__	};set,the,originating,e,g,decorated,bean,definition,if,any;public,void,set,originating,bean,definition,bean,definition,originating,bd,this,resource,new,bean,definition,resource,originating,bd
AbstractBeanDefinition -> public void setDescription(String description);1328020251;Set a human-readable description of this bean definition.;public void setDescription(String description) {_		this.description = description__	};set,a,human,readable,description,of,this,bean,definition;public,void,set,description,string,description,this,description,description
AbstractBeanDefinition -> public void setDescription(String description);1337202589;Set a human-readable description of this bean definition.;public void setDescription(String description) {_		this.description = description__	};set,a,human,readable,description,of,this,bean,definition;public,void,set,description,string,description,this,description,description
AbstractBeanDefinition -> public void setDescription(String description);1356735495;Set a human-readable description of this bean definition.;public void setDescription(String description) {_		this.description = description__	};set,a,human,readable,description,of,this,bean,definition;public,void,set,description,string,description,this,description,description
AbstractBeanDefinition -> public void setDescription(String description);1357119239;Set a human-readable description of this bean definition.;public void setDescription(String description) {_		this.description = description__	};set,a,human,readable,description,of,this,bean,definition;public,void,set,description,string,description,this,description,description
AbstractBeanDefinition -> public void setDescription(String description);1367508310;Set a human-readable description of this bean definition.;public void setDescription(String description) {_		this.description = description__	};set,a,human,readable,description,of,this,bean,definition;public,void,set,description,string,description,this,description,description
AbstractBeanDefinition -> public void setDescription(String description);1367943112;Set a human-readable description of this bean definition.;public void setDescription(String description) {_		this.description = description__	};set,a,human,readable,description,of,this,bean,definition;public,void,set,description,string,description,this,description,description
AbstractBeanDefinition -> public void setDescription(String description);1368482696;Set a human-readable description of this bean definition.;public void setDescription(String description) {_		this.description = description__	};set,a,human,readable,description,of,this,bean,definition;public,void,set,description,string,description,this,description,description
AbstractBeanDefinition -> public void setDescription(String description);1385412762;Set a human-readable description of this bean definition.;public void setDescription(String description) {_		this.description = description__	};set,a,human,readable,description,of,this,bean,definition;public,void,set,description,string,description,this,description,description
AbstractBeanDefinition -> public void setDescription(String description);1392245317;Set a human-readable description of this bean definition.;public void setDescription(String description) {_		this.description = description__	};set,a,human,readable,description,of,this,bean,definition;public,void,set,description,string,description,this,description,description
AbstractBeanDefinition -> public void setDescription(String description);1397163142;Set a human-readable description of this bean definition.;public void setDescription(String description) {_		this.description = description__	};set,a,human,readable,description,of,this,bean,definition;public,void,set,description,string,description,this,description,description
AbstractBeanDefinition -> public void setDescription(String description);1398898390;Set a human-readable description of this bean definition.;public void setDescription(String description) {_		this.description = description__	};set,a,human,readable,description,of,this,bean,definition;public,void,set,description,string,description,this,description,description
AbstractBeanDefinition -> public void setDescription(String description);1407511029;Set a human-readable description of this bean definition.;public void setDescription(String description) {_		this.description = description__	};set,a,human,readable,description,of,this,bean,definition;public,void,set,description,string,description,this,description,description
AbstractBeanDefinition -> public void setDescription(String description);1432135182;Set a human-readable description of this bean definition.;public void setDescription(String description) {_		this.description = description__	};set,a,human,readable,description,of,this,bean,definition;public,void,set,description,string,description,this,description,description
AbstractBeanDefinition -> public void setDescription(String description);1434204509;Set a human-readable description of this bean definition.;public void setDescription(String description) {_		this.description = description__	};set,a,human,readable,description,of,this,bean,definition;public,void,set,description,string,description,this,description,description
AbstractBeanDefinition -> public void setDescription(String description);1447323728;Set a human-readable description of this bean definition.;public void setDescription(String description) {_		this.description = description__	};set,a,human,readable,description,of,this,bean,definition;public,void,set,description,string,description,this,description,description
AbstractBeanDefinition -> public void setDescription(String description);1465226156;Set a human-readable description of this bean definition.;public void setDescription(String description) {_		this.description = description__	};set,a,human,readable,description,of,this,bean,definition;public,void,set,description,string,description,this,description,description
AbstractBeanDefinition -> public void setDescription(String description);1467730834;Set a human-readable description of this bean definition.;public void setDescription(String description) {_		this.description = description__	};set,a,human,readable,description,of,this,bean,definition;public,void,set,description,string,description,this,description,description
AbstractBeanDefinition -> public void setDescription(String description);1467846264;Set a human-readable description of this bean definition.;public void setDescription(String description) {_		this.description = description__	};set,a,human,readable,description,of,this,bean,definition;public,void,set,description,string,description,this,description,description
AbstractBeanDefinition -> public void setDescription(String description);1482091545;Set a human-readable description of this bean definition.;public void setDescription(String description) {_		this.description = description__	};set,a,human,readable,description,of,this,bean,definition;public,void,set,description,string,description,this,description,description
AbstractBeanDefinition -> public void setDescription(String description);1483093818;Set a human-readable description of this bean definition.;public void setDescription(String description) {_		this.description = description__	};set,a,human,readable,description,of,this,bean,definition;public,void,set,description,string,description,this,description,description
AbstractBeanDefinition -> public void setDescription(String description);1495868221;Set a human-readable description of this bean definition.;public void setDescription(String description) {_		this.description = description__	};set,a,human,readable,description,of,this,bean,definition;public,void,set,description,string,description,this,description,description
AbstractBeanDefinition -> @Override 	public void setFactoryBeanName(@Nullable String factoryBeanName);1496837955;Specify the factory bean to use, if any._This the name of the bean to call the specified factory method on._@see #setFactoryMethodName;@Override_	public void setFactoryBeanName(@Nullable String factoryBeanName) {_		this.factoryBeanName = factoryBeanName__	};specify,the,factory,bean,to,use,if,any,this,the,name,of,the,bean,to,call,the,specified,factory,method,on,see,set,factory,method,name;override,public,void,set,factory,bean,name,nullable,string,factory,bean,name,this,factory,bean,name,factory,bean,name
AbstractBeanDefinition -> @Override 	public void setFactoryBeanName(@Nullable String factoryBeanName);1498780456;Specify the factory bean to use, if any._This the name of the bean to call the specified factory method on._@see #setFactoryMethodName;@Override_	public void setFactoryBeanName(@Nullable String factoryBeanName) {_		this.factoryBeanName = factoryBeanName__	};specify,the,factory,bean,to,use,if,any,this,the,name,of,the,bean,to,call,the,specified,factory,method,on,see,set,factory,method,name;override,public,void,set,factory,bean,name,nullable,string,factory,bean,name,this,factory,bean,name,factory,bean,name
AbstractBeanDefinition -> @Override 	public void setFactoryBeanName(@Nullable String factoryBeanName);1502974979;Specify the factory bean to use, if any._This the name of the bean to call the specified factory method on._@see #setFactoryMethodName;@Override_	public void setFactoryBeanName(@Nullable String factoryBeanName) {_		this.factoryBeanName = factoryBeanName__	};specify,the,factory,bean,to,use,if,any,this,the,name,of,the,bean,to,call,the,specified,factory,method,on,see,set,factory,method,name;override,public,void,set,factory,bean,name,nullable,string,factory,bean,name,this,factory,bean,name,factory,bean,name
AbstractBeanDefinition -> @Override 	public void setFactoryBeanName(@Nullable String factoryBeanName);1503008029;Specify the factory bean to use, if any._This the name of the bean to call the specified factory method on._@see #setFactoryMethodName;@Override_	public void setFactoryBeanName(@Nullable String factoryBeanName) {_		this.factoryBeanName = factoryBeanName__	};specify,the,factory,bean,to,use,if,any,this,the,name,of,the,bean,to,call,the,specified,factory,method,on,see,set,factory,method,name;override,public,void,set,factory,bean,name,nullable,string,factory,bean,name,this,factory,bean,name,factory,bean,name
AbstractBeanDefinition -> @Override 	public void setFactoryBeanName(@Nullable String factoryBeanName);1510606271;Specify the factory bean to use, if any._This the name of the bean to call the specified factory method on._@see #setFactoryMethodName;@Override_	public void setFactoryBeanName(@Nullable String factoryBeanName) {_		this.factoryBeanName = factoryBeanName__	};specify,the,factory,bean,to,use,if,any,this,the,name,of,the,bean,to,call,the,specified,factory,method,on,see,set,factory,method,name;override,public,void,set,factory,bean,name,nullable,string,factory,bean,name,this,factory,bean,name,factory,bean,name
AbstractBeanDefinition -> @Override 	public void setFactoryBeanName(@Nullable String factoryBeanName);1510675876;Specify the factory bean to use, if any._This the name of the bean to call the specified factory method on._@see #setFactoryMethodName;@Override_	public void setFactoryBeanName(@Nullable String factoryBeanName) {_		this.factoryBeanName = factoryBeanName__	};specify,the,factory,bean,to,use,if,any,this,the,name,of,the,bean,to,call,the,specified,factory,method,on,see,set,factory,method,name;override,public,void,set,factory,bean,name,nullable,string,factory,bean,name,this,factory,bean,name,factory,bean,name
AbstractBeanDefinition -> @Override 	public void setFactoryBeanName(@Nullable String factoryBeanName);1530174524;Specify the factory bean to use, if any._This the name of the bean to call the specified factory method on._@see #setFactoryMethodName;@Override_	public void setFactoryBeanName(@Nullable String factoryBeanName) {_		this.factoryBeanName = factoryBeanName__	};specify,the,factory,bean,to,use,if,any,this,the,name,of,the,bean,to,call,the,specified,factory,method,on,see,set,factory,method,name;override,public,void,set,factory,bean,name,nullable,string,factory,bean,name,this,factory,bean,name,factory,bean,name
AbstractBeanDefinition -> @Override 	public void setFactoryBeanName(@Nullable String factoryBeanName);1530174524;Specify the factory bean to use, if any._This the name of the bean to call the specified factory method on._@see #setFactoryMethodName;@Override_	public void setFactoryBeanName(@Nullable String factoryBeanName) {_		this.factoryBeanName = factoryBeanName__	};specify,the,factory,bean,to,use,if,any,this,the,name,of,the,bean,to,call,the,specified,factory,method,on,see,set,factory,method,name;override,public,void,set,factory,bean,name,nullable,string,factory,bean,name,this,factory,bean,name,factory,bean,name
AbstractBeanDefinition -> @Override 	public void setFactoryBeanName(@Nullable String factoryBeanName);1530174524;Specify the factory bean to use, if any._This the name of the bean to call the specified factory method on._@see #setFactoryMethodName;@Override_	public void setFactoryBeanName(@Nullable String factoryBeanName) {_		this.factoryBeanName = factoryBeanName__	};specify,the,factory,bean,to,use,if,any,this,the,name,of,the,bean,to,call,the,specified,factory,method,on,see,set,factory,method,name;override,public,void,set,factory,bean,name,nullable,string,factory,bean,name,this,factory,bean,name,factory,bean,name
AbstractBeanDefinition -> @Override 	public void setFactoryBeanName(@Nullable String factoryBeanName);1530190293;Specify the factory bean to use, if any._This the name of the bean to call the specified factory method on._@see #setFactoryMethodName;@Override_	public void setFactoryBeanName(@Nullable String factoryBeanName) {_		this.factoryBeanName = factoryBeanName__	};specify,the,factory,bean,to,use,if,any,this,the,name,of,the,bean,to,call,the,specified,factory,method,on,see,set,factory,method,name;override,public,void,set,factory,bean,name,nullable,string,factory,bean,name,this,factory,bean,name,factory,bean,name
AbstractBeanDefinition -> @Override 	public void setFactoryBeanName(@Nullable String factoryBeanName);1532981251;Specify the factory bean to use, if any._This the name of the bean to call the specified factory method on._@see #setFactoryMethodName;@Override_	public void setFactoryBeanName(@Nullable String factoryBeanName) {_		this.factoryBeanName = factoryBeanName__	};specify,the,factory,bean,to,use,if,any,this,the,name,of,the,bean,to,call,the,specified,factory,method,on,see,set,factory,method,name;override,public,void,set,factory,bean,name,nullable,string,factory,bean,name,this,factory,bean,name,factory,bean,name
AbstractBeanDefinition -> @Override 	public void setFactoryBeanName(@Nullable String factoryBeanName);1536863076;Specify the factory bean to use, if any._This the name of the bean to call the specified factory method on._@see #setFactoryMethodName;@Override_	public void setFactoryBeanName(@Nullable String factoryBeanName) {_		this.factoryBeanName = factoryBeanName__	};specify,the,factory,bean,to,use,if,any,this,the,name,of,the,bean,to,call,the,specified,factory,method,on,see,set,factory,method,name;override,public,void,set,factory,bean,name,nullable,string,factory,bean,name,this,factory,bean,name,factory,bean,name
AbstractBeanDefinition -> @Override 	@Nullable 	public String getBeanClassName();1502974979;Return the current bean class name of this bean definition.;@Override_	@Nullable_	public String getBeanClassName() {_		Object beanClassObject = this.beanClass__		if (beanClassObject instanceof Class) {_			return ((Class<?>) beanClassObject).getName()__		}_		else {_			return (String) beanClassObject__		}_	};return,the,current,bean,class,name,of,this,bean,definition;override,nullable,public,string,get,bean,class,name,object,bean,class,object,this,bean,class,if,bean,class,object,instanceof,class,return,class,bean,class,object,get,name,else,return,string,bean,class,object
AbstractBeanDefinition -> @Override 	@Nullable 	public String getBeanClassName();1503008029;Return the current bean class name of this bean definition.;@Override_	@Nullable_	public String getBeanClassName() {_		Object beanClassObject = this.beanClass__		if (beanClassObject instanceof Class) {_			return ((Class<?>) beanClassObject).getName()__		}_		else {_			return (String) beanClassObject__		}_	};return,the,current,bean,class,name,of,this,bean,definition;override,nullable,public,string,get,bean,class,name,object,bean,class,object,this,bean,class,if,bean,class,object,instanceof,class,return,class,bean,class,object,get,name,else,return,string,bean,class,object
AbstractBeanDefinition -> @Override 	@Nullable 	public String getBeanClassName();1510606271;Return the current bean class name of this bean definition.;@Override_	@Nullable_	public String getBeanClassName() {_		Object beanClassObject = this.beanClass__		if (beanClassObject instanceof Class) {_			return ((Class<?>) beanClassObject).getName()__		}_		else {_			return (String) beanClassObject__		}_	};return,the,current,bean,class,name,of,this,bean,definition;override,nullable,public,string,get,bean,class,name,object,bean,class,object,this,bean,class,if,bean,class,object,instanceof,class,return,class,bean,class,object,get,name,else,return,string,bean,class,object
AbstractBeanDefinition -> @Override 	@Nullable 	public String getBeanClassName();1510675876;Return the current bean class name of this bean definition.;@Override_	@Nullable_	public String getBeanClassName() {_		Object beanClassObject = this.beanClass__		if (beanClassObject instanceof Class) {_			return ((Class<?>) beanClassObject).getName()__		}_		else {_			return (String) beanClassObject__		}_	};return,the,current,bean,class,name,of,this,bean,definition;override,nullable,public,string,get,bean,class,name,object,bean,class,object,this,bean,class,if,bean,class,object,instanceof,class,return,class,bean,class,object,get,name,else,return,string,bean,class,object
AbstractBeanDefinition -> @Override 	@Nullable 	public String getBeanClassName();1530174524;Return the current bean class name of this bean definition.;@Override_	@Nullable_	public String getBeanClassName() {_		Object beanClassObject = this.beanClass__		if (beanClassObject instanceof Class) {_			return ((Class<?>) beanClassObject).getName()__		}_		else {_			return (String) beanClassObject__		}_	};return,the,current,bean,class,name,of,this,bean,definition;override,nullable,public,string,get,bean,class,name,object,bean,class,object,this,bean,class,if,bean,class,object,instanceof,class,return,class,bean,class,object,get,name,else,return,string,bean,class,object
AbstractBeanDefinition -> @Override 	@Nullable 	public String getBeanClassName();1530174524;Return the current bean class name of this bean definition.;@Override_	@Nullable_	public String getBeanClassName() {_		Object beanClassObject = this.beanClass__		if (beanClassObject instanceof Class) {_			return ((Class<?>) beanClassObject).getName()__		}_		else {_			return (String) beanClassObject__		}_	};return,the,current,bean,class,name,of,this,bean,definition;override,nullable,public,string,get,bean,class,name,object,bean,class,object,this,bean,class,if,bean,class,object,instanceof,class,return,class,bean,class,object,get,name,else,return,string,bean,class,object
AbstractBeanDefinition -> @Override 	@Nullable 	public String getBeanClassName();1530174524;Return the current bean class name of this bean definition.;@Override_	@Nullable_	public String getBeanClassName() {_		Object beanClassObject = this.beanClass__		if (beanClassObject instanceof Class) {_			return ((Class<?>) beanClassObject).getName()__		}_		else {_			return (String) beanClassObject__		}_	};return,the,current,bean,class,name,of,this,bean,definition;override,nullable,public,string,get,bean,class,name,object,bean,class,object,this,bean,class,if,bean,class,object,instanceof,class,return,class,bean,class,object,get,name,else,return,string,bean,class,object
AbstractBeanDefinition -> @Override 	@Nullable 	public String getBeanClassName();1530190293;Return the current bean class name of this bean definition.;@Override_	@Nullable_	public String getBeanClassName() {_		Object beanClassObject = this.beanClass__		if (beanClassObject instanceof Class) {_			return ((Class<?>) beanClassObject).getName()__		}_		else {_			return (String) beanClassObject__		}_	};return,the,current,bean,class,name,of,this,bean,definition;override,nullable,public,string,get,bean,class,name,object,bean,class,object,this,bean,class,if,bean,class,object,instanceof,class,return,class,bean,class,object,get,name,else,return,string,bean,class,object
AbstractBeanDefinition -> @Override 	@Nullable 	public String getBeanClassName();1532981251;Return the current bean class name of this bean definition.;@Override_	@Nullable_	public String getBeanClassName() {_		Object beanClassObject = this.beanClass__		if (beanClassObject instanceof Class) {_			return ((Class<?>) beanClassObject).getName()__		}_		else {_			return (String) beanClassObject__		}_	};return,the,current,bean,class,name,of,this,bean,definition;override,nullable,public,string,get,bean,class,name,object,bean,class,object,this,bean,class,if,bean,class,object,instanceof,class,return,class,bean,class,object,get,name,else,return,string,bean,class,object
AbstractBeanDefinition -> @Override 	@Nullable 	public String getBeanClassName();1536863076;Return the current bean class name of this bean definition.;@Override_	@Nullable_	public String getBeanClassName() {_		Object beanClassObject = this.beanClass__		if (beanClassObject instanceof Class) {_			return ((Class<?>) beanClassObject).getName()__		}_		else {_			return (String) beanClassObject__		}_	};return,the,current,bean,class,name,of,this,bean,definition;override,nullable,public,string,get,bean,class,name,object,bean,class,object,this,bean,class,if,bean,class,object,instanceof,class,return,class,bean,class,object,get,name,else,return,string,bean,class,object
AbstractBeanDefinition -> @Override 	public void setScope(String scope);1356735495;Set the name of the target scope for the bean._<p>Default is singleton status, although this is only applied once_a bean definition becomes active in the containing factory. A bean_definition may eventually inherit its scope from a parent bean definitionFor this_reason, the default scope name is empty (empty String), with_singleton status being assumed until a resolved scope will be set._@see #SCOPE_SINGLETON_@see #SCOPE_PROTOTYPE;@Override_	public void setScope(String scope) {_		this.scope = scope__		this.singleton = SCOPE_SINGLETON.equals(scope) || SCOPE_DEFAULT.equals(scope)__		this.prototype = SCOPE_PROTOTYPE.equals(scope)__	};set,the,name,of,the,target,scope,for,the,bean,p,default,is,singleton,status,although,this,is,only,applied,once,a,bean,definition,becomes,active,in,the,containing,factory,a,bean,definition,may,eventually,inherit,its,scope,from,a,parent,bean,definition,for,this,reason,the,default,scope,name,is,empty,empty,string,with,singleton,status,being,assumed,until,a,resolved,scope,will,be,set,see,see;override,public,void,set,scope,string,scope,this,scope,scope,this,singleton,equals,scope,equals,scope,this,prototype,equals,scope
AbstractBeanDefinition -> @Override 	public void setScope(String scope);1368482696;Set the name of the target scope for the bean._<p>Default is singleton status, although this is only applied once_a bean definition becomes active in the containing factory. A bean_definition may eventually inherit its scope from a parent bean definitionFor this_reason, the default scope name is empty (empty String), with_singleton status being assumed until a resolved scope will be set._@see #SCOPE_SINGLETON_@see #SCOPE_PROTOTYPE;@Override_	public void setScope(String scope) {_		this.scope = scope__	};set,the,name,of,the,target,scope,for,the,bean,p,default,is,singleton,status,although,this,is,only,applied,once,a,bean,definition,becomes,active,in,the,containing,factory,a,bean,definition,may,eventually,inherit,its,scope,from,a,parent,bean,definition,for,this,reason,the,default,scope,name,is,empty,empty,string,with,singleton,status,being,assumed,until,a,resolved,scope,will,be,set,see,see;override,public,void,set,scope,string,scope,this,scope,scope
AbstractBeanDefinition -> @Override 	public void setScope(String scope);1385412762;Set the name of the target scope for the bean._<p>Default is singleton status, although this is only applied once_a bean definition becomes active in the containing factory. A bean_definition may eventually inherit its scope from a parent bean definitionFor this_reason, the default scope name is empty (empty String), with_singleton status being assumed until a resolved scope will be set._@see #SCOPE_SINGLETON_@see #SCOPE_PROTOTYPE;@Override_	public void setScope(String scope) {_		this.scope = scope__	};set,the,name,of,the,target,scope,for,the,bean,p,default,is,singleton,status,although,this,is,only,applied,once,a,bean,definition,becomes,active,in,the,containing,factory,a,bean,definition,may,eventually,inherit,its,scope,from,a,parent,bean,definition,for,this,reason,the,default,scope,name,is,empty,empty,string,with,singleton,status,being,assumed,until,a,resolved,scope,will,be,set,see,see;override,public,void,set,scope,string,scope,this,scope,scope
AbstractBeanDefinition -> @Override 	public void setScope(String scope);1392245317;Set the name of the target scope for the bean._<p>Default is singleton status, although this is only applied once_a bean definition becomes active in the containing factory. A bean_definition may eventually inherit its scope from a parent bean definitionFor this_reason, the default scope name is empty (empty String), with_singleton status being assumed until a resolved scope will be set._@see #SCOPE_SINGLETON_@see #SCOPE_PROTOTYPE;@Override_	public void setScope(String scope) {_		this.scope = scope__	};set,the,name,of,the,target,scope,for,the,bean,p,default,is,singleton,status,although,this,is,only,applied,once,a,bean,definition,becomes,active,in,the,containing,factory,a,bean,definition,may,eventually,inherit,its,scope,from,a,parent,bean,definition,for,this,reason,the,default,scope,name,is,empty,empty,string,with,singleton,status,being,assumed,until,a,resolved,scope,will,be,set,see,see;override,public,void,set,scope,string,scope,this,scope,scope
AbstractBeanDefinition -> @Override 	public void setScope(String scope);1397163142;Set the name of the target scope for the bean._<p>Default is singleton status, although this is only applied once_a bean definition becomes active in the containing factory. A bean_definition may eventually inherit its scope from a parent bean definitionFor this_reason, the default scope name is empty (empty String), with_singleton status being assumed until a resolved scope will be set._@see #SCOPE_SINGLETON_@see #SCOPE_PROTOTYPE;@Override_	public void setScope(String scope) {_		this.scope = scope__	};set,the,name,of,the,target,scope,for,the,bean,p,default,is,singleton,status,although,this,is,only,applied,once,a,bean,definition,becomes,active,in,the,containing,factory,a,bean,definition,may,eventually,inherit,its,scope,from,a,parent,bean,definition,for,this,reason,the,default,scope,name,is,empty,empty,string,with,singleton,status,being,assumed,until,a,resolved,scope,will,be,set,see,see;override,public,void,set,scope,string,scope,this,scope,scope
AbstractBeanDefinition -> @Override 	public void setScope(String scope);1398898390;Set the name of the target scope for the bean._<p>Default is singleton status, although this is only applied once_a bean definition becomes active in the containing factory. A bean_definition may eventually inherit its scope from a parent bean definitionFor this_reason, the default scope name is empty (empty String), with_singleton status being assumed until a resolved scope will be set._@see #SCOPE_SINGLETON_@see #SCOPE_PROTOTYPE;@Override_	public void setScope(String scope) {_		this.scope = scope__	};set,the,name,of,the,target,scope,for,the,bean,p,default,is,singleton,status,although,this,is,only,applied,once,a,bean,definition,becomes,active,in,the,containing,factory,a,bean,definition,may,eventually,inherit,its,scope,from,a,parent,bean,definition,for,this,reason,the,default,scope,name,is,empty,empty,string,with,singleton,status,being,assumed,until,a,resolved,scope,will,be,set,see,see;override,public,void,set,scope,string,scope,this,scope,scope
AbstractBeanDefinition -> @Override 	public void setScope(String scope);1407511029;Set the name of the target scope for the bean._<p>Default is singleton status, although this is only applied once_a bean definition becomes active in the containing factory. A bean_definition may eventually inherit its scope from a parent bean definitionFor this_reason, the default scope name is empty (empty String), with_singleton status being assumed until a resolved scope will be set._@see #SCOPE_SINGLETON_@see #SCOPE_PROTOTYPE;@Override_	public void setScope(String scope) {_		this.scope = scope__	};set,the,name,of,the,target,scope,for,the,bean,p,default,is,singleton,status,although,this,is,only,applied,once,a,bean,definition,becomes,active,in,the,containing,factory,a,bean,definition,may,eventually,inherit,its,scope,from,a,parent,bean,definition,for,this,reason,the,default,scope,name,is,empty,empty,string,with,singleton,status,being,assumed,until,a,resolved,scope,will,be,set,see,see;override,public,void,set,scope,string,scope,this,scope,scope
AbstractBeanDefinition -> @Override 	public void setScope(String scope);1432135182;Set the name of the target scope for the bean._<p>Default is singleton status, although this is only applied once_a bean definition becomes active in the containing factory. A bean_definition may eventually inherit its scope from a parent bean definitionFor this_reason, the default scope name is empty (empty String), with_singleton status being assumed until a resolved scope will be set._@see #SCOPE_SINGLETON_@see #SCOPE_PROTOTYPE;@Override_	public void setScope(String scope) {_		this.scope = scope__	};set,the,name,of,the,target,scope,for,the,bean,p,default,is,singleton,status,although,this,is,only,applied,once,a,bean,definition,becomes,active,in,the,containing,factory,a,bean,definition,may,eventually,inherit,its,scope,from,a,parent,bean,definition,for,this,reason,the,default,scope,name,is,empty,empty,string,with,singleton,status,being,assumed,until,a,resolved,scope,will,be,set,see,see;override,public,void,set,scope,string,scope,this,scope,scope
AbstractBeanDefinition -> @Override 	public void setScope(String scope);1434204509;Set the name of the target scope for the bean._<p>The default is singleton status, although this is only applied once_a bean definition becomes active in the containing factory. A bean_definition may eventually inherit its scope from a parent bean definition._For this reason, the default scope name is an empty string (i.e., {@code ""}),_with singleton status being assumed until a resolved scope is set._@see #SCOPE_SINGLETON_@see #SCOPE_PROTOTYPE;@Override_	public void setScope(String scope) {_		this.scope = scope__	};set,the,name,of,the,target,scope,for,the,bean,p,the,default,is,singleton,status,although,this,is,only,applied,once,a,bean,definition,becomes,active,in,the,containing,factory,a,bean,definition,may,eventually,inherit,its,scope,from,a,parent,bean,definition,for,this,reason,the,default,scope,name,is,an,empty,string,i,e,code,with,singleton,status,being,assumed,until,a,resolved,scope,is,set,see,see;override,public,void,set,scope,string,scope,this,scope,scope
AbstractBeanDefinition -> @Override 	public void setScope(String scope);1447323728;Set the name of the target scope for the bean._<p>The default is singleton status, although this is only applied once_a bean definition becomes active in the containing factory. A bean_definition may eventually inherit its scope from a parent bean definition._For this reason, the default scope name is an empty string (i.e., {@code ""}),_with singleton status being assumed until a resolved scope is set._@see #SCOPE_SINGLETON_@see #SCOPE_PROTOTYPE;@Override_	public void setScope(String scope) {_		this.scope = scope__	};set,the,name,of,the,target,scope,for,the,bean,p,the,default,is,singleton,status,although,this,is,only,applied,once,a,bean,definition,becomes,active,in,the,containing,factory,a,bean,definition,may,eventually,inherit,its,scope,from,a,parent,bean,definition,for,this,reason,the,default,scope,name,is,an,empty,string,i,e,code,with,singleton,status,being,assumed,until,a,resolved,scope,is,set,see,see;override,public,void,set,scope,string,scope,this,scope,scope
AbstractBeanDefinition -> @Override 	public void setScope(String scope);1465226156;Set the name of the target scope for the bean._<p>The default is singleton status, although this is only applied once_a bean definition becomes active in the containing factory. A bean_definition may eventually inherit its scope from a parent bean definition._For this reason, the default scope name is an empty string (i.e., {@code ""}),_with singleton status being assumed until a resolved scope is set._@see #SCOPE_SINGLETON_@see #SCOPE_PROTOTYPE;@Override_	public void setScope(String scope) {_		this.scope = scope__	};set,the,name,of,the,target,scope,for,the,bean,p,the,default,is,singleton,status,although,this,is,only,applied,once,a,bean,definition,becomes,active,in,the,containing,factory,a,bean,definition,may,eventually,inherit,its,scope,from,a,parent,bean,definition,for,this,reason,the,default,scope,name,is,an,empty,string,i,e,code,with,singleton,status,being,assumed,until,a,resolved,scope,is,set,see,see;override,public,void,set,scope,string,scope,this,scope,scope
AbstractBeanDefinition -> @Override 	public void setScope(String scope);1467730834;Set the name of the target scope for the bean._<p>The default is singleton status, although this is only applied once_a bean definition becomes active in the containing factory. A bean_definition may eventually inherit its scope from a parent bean definition._For this reason, the default scope name is an empty string (i.e., {@code ""}),_with singleton status being assumed until a resolved scope is set._@see #SCOPE_SINGLETON_@see #SCOPE_PROTOTYPE;@Override_	public void setScope(String scope) {_		this.scope = scope__	};set,the,name,of,the,target,scope,for,the,bean,p,the,default,is,singleton,status,although,this,is,only,applied,once,a,bean,definition,becomes,active,in,the,containing,factory,a,bean,definition,may,eventually,inherit,its,scope,from,a,parent,bean,definition,for,this,reason,the,default,scope,name,is,an,empty,string,i,e,code,with,singleton,status,being,assumed,until,a,resolved,scope,is,set,see,see;override,public,void,set,scope,string,scope,this,scope,scope
AbstractBeanDefinition -> @Override 	public void setScope(String scope);1467846264;Set the name of the target scope for the bean._<p>The default is singleton status, although this is only applied once_a bean definition becomes active in the containing factory. A bean_definition may eventually inherit its scope from a parent bean definition._For this reason, the default scope name is an empty string (i.e., {@code ""}),_with singleton status being assumed until a resolved scope is set._@see #SCOPE_SINGLETON_@see #SCOPE_PROTOTYPE;@Override_	public void setScope(String scope) {_		this.scope = scope__	};set,the,name,of,the,target,scope,for,the,bean,p,the,default,is,singleton,status,although,this,is,only,applied,once,a,bean,definition,becomes,active,in,the,containing,factory,a,bean,definition,may,eventually,inherit,its,scope,from,a,parent,bean,definition,for,this,reason,the,default,scope,name,is,an,empty,string,i,e,code,with,singleton,status,being,assumed,until,a,resolved,scope,is,set,see,see;override,public,void,set,scope,string,scope,this,scope,scope
AbstractBeanDefinition -> @Override 	public void setScope(String scope);1482091545;Set the name of the target scope for the bean._<p>The default is singleton status, although this is only applied once_a bean definition becomes active in the containing factory. A bean_definition may eventually inherit its scope from a parent bean definition._For this reason, the default scope name is an empty string (i.e., {@code ""}),_with singleton status being assumed until a resolved scope is set._@see #SCOPE_SINGLETON_@see #SCOPE_PROTOTYPE;@Override_	public void setScope(String scope) {_		this.scope = scope__	};set,the,name,of,the,target,scope,for,the,bean,p,the,default,is,singleton,status,although,this,is,only,applied,once,a,bean,definition,becomes,active,in,the,containing,factory,a,bean,definition,may,eventually,inherit,its,scope,from,a,parent,bean,definition,for,this,reason,the,default,scope,name,is,an,empty,string,i,e,code,with,singleton,status,being,assumed,until,a,resolved,scope,is,set,see,see;override,public,void,set,scope,string,scope,this,scope,scope
AbstractBeanDefinition -> @Override 	public void setScope(String scope);1483093818;Set the name of the target scope for the bean._<p>The default is singleton status, although this is only applied once_a bean definition becomes active in the containing factory. A bean_definition may eventually inherit its scope from a parent bean definition._For this reason, the default scope name is an empty string (i.e., {@code ""}),_with singleton status being assumed until a resolved scope is set._@see #SCOPE_SINGLETON_@see #SCOPE_PROTOTYPE;@Override_	public void setScope(String scope) {_		this.scope = scope__	};set,the,name,of,the,target,scope,for,the,bean,p,the,default,is,singleton,status,although,this,is,only,applied,once,a,bean,definition,becomes,active,in,the,containing,factory,a,bean,definition,may,eventually,inherit,its,scope,from,a,parent,bean,definition,for,this,reason,the,default,scope,name,is,an,empty,string,i,e,code,with,singleton,status,being,assumed,until,a,resolved,scope,is,set,see,see;override,public,void,set,scope,string,scope,this,scope,scope
AbstractBeanDefinition -> @Override 	public void setScope(String scope);1495868221;Set the name of the target scope for the bean._<p>The default is singleton status, although this is only applied once_a bean definition becomes active in the containing factory. A bean_definition may eventually inherit its scope from a parent bean definition._For this reason, the default scope name is an empty string (i.e., {@code ""}),_with singleton status being assumed until a resolved scope is set._@see #SCOPE_SINGLETON_@see #SCOPE_PROTOTYPE;@Override_	public void setScope(String scope) {_		this.scope = scope__	};set,the,name,of,the,target,scope,for,the,bean,p,the,default,is,singleton,status,although,this,is,only,applied,once,a,bean,definition,becomes,active,in,the,containing,factory,a,bean,definition,may,eventually,inherit,its,scope,from,a,parent,bean,definition,for,this,reason,the,default,scope,name,is,an,empty,string,i,e,code,with,singleton,status,being,assumed,until,a,resolved,scope,is,set,see,see;override,public,void,set,scope,string,scope,this,scope,scope
AbstractBeanDefinition -> public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues);1328020251;Specify constructor argument values for this bean.;public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues) {_		this.constructorArgumentValues =_				(constructorArgumentValues != null ? constructorArgumentValues : new ConstructorArgumentValues())__	};specify,constructor,argument,values,for,this,bean;public,void,set,constructor,argument,values,constructor,argument,values,constructor,argument,values,this,constructor,argument,values,constructor,argument,values,null,constructor,argument,values,new,constructor,argument,values
AbstractBeanDefinition -> public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues);1337202589;Specify constructor argument values for this bean.;public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues) {_		this.constructorArgumentValues =_				(constructorArgumentValues != null ? constructorArgumentValues : new ConstructorArgumentValues())__	};specify,constructor,argument,values,for,this,bean;public,void,set,constructor,argument,values,constructor,argument,values,constructor,argument,values,this,constructor,argument,values,constructor,argument,values,null,constructor,argument,values,new,constructor,argument,values
AbstractBeanDefinition -> public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues);1356735495;Specify constructor argument values for this bean.;public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues) {_		this.constructorArgumentValues =_				(constructorArgumentValues != null ? constructorArgumentValues : new ConstructorArgumentValues())__	};specify,constructor,argument,values,for,this,bean;public,void,set,constructor,argument,values,constructor,argument,values,constructor,argument,values,this,constructor,argument,values,constructor,argument,values,null,constructor,argument,values,new,constructor,argument,values
AbstractBeanDefinition -> public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues);1357119239;Specify constructor argument values for this bean.;public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues) {_		this.constructorArgumentValues =_				(constructorArgumentValues != null ? constructorArgumentValues : new ConstructorArgumentValues())__	};specify,constructor,argument,values,for,this,bean;public,void,set,constructor,argument,values,constructor,argument,values,constructor,argument,values,this,constructor,argument,values,constructor,argument,values,null,constructor,argument,values,new,constructor,argument,values
AbstractBeanDefinition -> public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues);1367508310;Specify constructor argument values for this bean.;public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues) {_		this.constructorArgumentValues =_				(constructorArgumentValues != null ? constructorArgumentValues : new ConstructorArgumentValues())__	};specify,constructor,argument,values,for,this,bean;public,void,set,constructor,argument,values,constructor,argument,values,constructor,argument,values,this,constructor,argument,values,constructor,argument,values,null,constructor,argument,values,new,constructor,argument,values
AbstractBeanDefinition -> public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues);1367943112;Specify constructor argument values for this bean.;public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues) {_		this.constructorArgumentValues =_				(constructorArgumentValues != null ? constructorArgumentValues : new ConstructorArgumentValues())__	};specify,constructor,argument,values,for,this,bean;public,void,set,constructor,argument,values,constructor,argument,values,constructor,argument,values,this,constructor,argument,values,constructor,argument,values,null,constructor,argument,values,new,constructor,argument,values
AbstractBeanDefinition -> public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues);1368482696;Specify constructor argument values for this bean.;public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues) {_		this.constructorArgumentValues =_				(constructorArgumentValues != null ? constructorArgumentValues : new ConstructorArgumentValues())__	};specify,constructor,argument,values,for,this,bean;public,void,set,constructor,argument,values,constructor,argument,values,constructor,argument,values,this,constructor,argument,values,constructor,argument,values,null,constructor,argument,values,new,constructor,argument,values
AbstractBeanDefinition -> public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues);1385412762;Specify constructor argument values for this bean.;public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues) {_		this.constructorArgumentValues =_				(constructorArgumentValues != null ? constructorArgumentValues : new ConstructorArgumentValues())__	};specify,constructor,argument,values,for,this,bean;public,void,set,constructor,argument,values,constructor,argument,values,constructor,argument,values,this,constructor,argument,values,constructor,argument,values,null,constructor,argument,values,new,constructor,argument,values
AbstractBeanDefinition -> public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues);1392245317;Specify constructor argument values for this bean.;public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues) {_		this.constructorArgumentValues =_				(constructorArgumentValues != null ? constructorArgumentValues : new ConstructorArgumentValues())__	};specify,constructor,argument,values,for,this,bean;public,void,set,constructor,argument,values,constructor,argument,values,constructor,argument,values,this,constructor,argument,values,constructor,argument,values,null,constructor,argument,values,new,constructor,argument,values
AbstractBeanDefinition -> public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues);1397163142;Specify constructor argument values for this bean.;public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues) {_		this.constructorArgumentValues =_				(constructorArgumentValues != null ? constructorArgumentValues : new ConstructorArgumentValues())__	};specify,constructor,argument,values,for,this,bean;public,void,set,constructor,argument,values,constructor,argument,values,constructor,argument,values,this,constructor,argument,values,constructor,argument,values,null,constructor,argument,values,new,constructor,argument,values
AbstractBeanDefinition -> public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues);1398898390;Specify constructor argument values for this bean.;public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues) {_		this.constructorArgumentValues =_				(constructorArgumentValues != null ? constructorArgumentValues : new ConstructorArgumentValues())__	};specify,constructor,argument,values,for,this,bean;public,void,set,constructor,argument,values,constructor,argument,values,constructor,argument,values,this,constructor,argument,values,constructor,argument,values,null,constructor,argument,values,new,constructor,argument,values
AbstractBeanDefinition -> public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues);1407511029;Specify constructor argument values for this bean.;public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues) {_		this.constructorArgumentValues =_				(constructorArgumentValues != null ? constructorArgumentValues : new ConstructorArgumentValues())__	};specify,constructor,argument,values,for,this,bean;public,void,set,constructor,argument,values,constructor,argument,values,constructor,argument,values,this,constructor,argument,values,constructor,argument,values,null,constructor,argument,values,new,constructor,argument,values
AbstractBeanDefinition -> public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues);1432135182;Specify constructor argument values for this bean.;public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues) {_		this.constructorArgumentValues =_				(constructorArgumentValues != null ? constructorArgumentValues : new ConstructorArgumentValues())__	};specify,constructor,argument,values,for,this,bean;public,void,set,constructor,argument,values,constructor,argument,values,constructor,argument,values,this,constructor,argument,values,constructor,argument,values,null,constructor,argument,values,new,constructor,argument,values
AbstractBeanDefinition -> public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues);1434204509;Specify constructor argument values for this bean.;public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues) {_		this.constructorArgumentValues =_				(constructorArgumentValues != null ? constructorArgumentValues : new ConstructorArgumentValues())__	};specify,constructor,argument,values,for,this,bean;public,void,set,constructor,argument,values,constructor,argument,values,constructor,argument,values,this,constructor,argument,values,constructor,argument,values,null,constructor,argument,values,new,constructor,argument,values
AbstractBeanDefinition -> public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues);1447323728;Specify constructor argument values for this bean.;public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues) {_		this.constructorArgumentValues =_				(constructorArgumentValues != null ? constructorArgumentValues : new ConstructorArgumentValues())__	};specify,constructor,argument,values,for,this,bean;public,void,set,constructor,argument,values,constructor,argument,values,constructor,argument,values,this,constructor,argument,values,constructor,argument,values,null,constructor,argument,values,new,constructor,argument,values
AbstractBeanDefinition -> public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues);1465226156;Specify constructor argument values for this bean.;public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues) {_		this.constructorArgumentValues =_				(constructorArgumentValues != null ? constructorArgumentValues : new ConstructorArgumentValues())__	};specify,constructor,argument,values,for,this,bean;public,void,set,constructor,argument,values,constructor,argument,values,constructor,argument,values,this,constructor,argument,values,constructor,argument,values,null,constructor,argument,values,new,constructor,argument,values
AbstractBeanDefinition -> public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues);1467730834;Specify constructor argument values for this bean.;public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues) {_		this.constructorArgumentValues =_				(constructorArgumentValues != null ? constructorArgumentValues : new ConstructorArgumentValues())__	};specify,constructor,argument,values,for,this,bean;public,void,set,constructor,argument,values,constructor,argument,values,constructor,argument,values,this,constructor,argument,values,constructor,argument,values,null,constructor,argument,values,new,constructor,argument,values
AbstractBeanDefinition -> public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues);1467846264;Specify constructor argument values for this bean.;public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues) {_		this.constructorArgumentValues =_				(constructorArgumentValues != null ? constructorArgumentValues : new ConstructorArgumentValues())__	};specify,constructor,argument,values,for,this,bean;public,void,set,constructor,argument,values,constructor,argument,values,constructor,argument,values,this,constructor,argument,values,constructor,argument,values,null,constructor,argument,values,new,constructor,argument,values
AbstractBeanDefinition -> public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues);1482091545;Specify constructor argument values for this bean.;public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues) {_		this.constructorArgumentValues =_				(constructorArgumentValues != null ? constructorArgumentValues : new ConstructorArgumentValues())__	};specify,constructor,argument,values,for,this,bean;public,void,set,constructor,argument,values,constructor,argument,values,constructor,argument,values,this,constructor,argument,values,constructor,argument,values,null,constructor,argument,values,new,constructor,argument,values
AbstractBeanDefinition -> public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues);1483093818;Specify constructor argument values for this bean.;public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues) {_		this.constructorArgumentValues =_				(constructorArgumentValues != null ? constructorArgumentValues : new ConstructorArgumentValues())__	};specify,constructor,argument,values,for,this,bean;public,void,set,constructor,argument,values,constructor,argument,values,constructor,argument,values,this,constructor,argument,values,constructor,argument,values,null,constructor,argument,values,new,constructor,argument,values
AbstractBeanDefinition -> public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues);1495868221;Specify constructor argument values for this bean.;public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues) {_		this.constructorArgumentValues =_				(constructorArgumentValues != null ? constructorArgumentValues : new ConstructorArgumentValues())__	};specify,constructor,argument,values,for,this,bean;public,void,set,constructor,argument,values,constructor,argument,values,constructor,argument,values,this,constructor,argument,values,constructor,argument,values,null,constructor,argument,values,new,constructor,argument,values
AbstractBeanDefinition -> public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues);1510606271;Specify constructor argument values for this bean.;public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues) {_		this.constructorArgumentValues = constructorArgumentValues__	};specify,constructor,argument,values,for,this,bean;public,void,set,constructor,argument,values,constructor,argument,values,constructor,argument,values,this,constructor,argument,values,constructor,argument,values
AbstractBeanDefinition -> public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues);1510675876;Specify constructor argument values for this bean.;public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues) {_		this.constructorArgumentValues = constructorArgumentValues__	};specify,constructor,argument,values,for,this,bean;public,void,set,constructor,argument,values,constructor,argument,values,constructor,argument,values,this,constructor,argument,values,constructor,argument,values
AbstractBeanDefinition -> public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues);1530174524;Specify constructor argument values for this bean.;public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues) {_		this.constructorArgumentValues = constructorArgumentValues__	};specify,constructor,argument,values,for,this,bean;public,void,set,constructor,argument,values,constructor,argument,values,constructor,argument,values,this,constructor,argument,values,constructor,argument,values
AbstractBeanDefinition -> public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues);1530174524;Specify constructor argument values for this bean.;public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues) {_		this.constructorArgumentValues = constructorArgumentValues__	};specify,constructor,argument,values,for,this,bean;public,void,set,constructor,argument,values,constructor,argument,values,constructor,argument,values,this,constructor,argument,values,constructor,argument,values
AbstractBeanDefinition -> public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues);1530174524;Specify constructor argument values for this bean.;public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues) {_		this.constructorArgumentValues = constructorArgumentValues__	};specify,constructor,argument,values,for,this,bean;public,void,set,constructor,argument,values,constructor,argument,values,constructor,argument,values,this,constructor,argument,values,constructor,argument,values
AbstractBeanDefinition -> public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues);1530190293;Specify constructor argument values for this bean.;public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues) {_		this.constructorArgumentValues = constructorArgumentValues__	};specify,constructor,argument,values,for,this,bean;public,void,set,constructor,argument,values,constructor,argument,values,constructor,argument,values,this,constructor,argument,values,constructor,argument,values
AbstractBeanDefinition -> public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues);1532981251;Specify constructor argument values for this bean.;public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues) {_		this.constructorArgumentValues = constructorArgumentValues__	};specify,constructor,argument,values,for,this,bean;public,void,set,constructor,argument,values,constructor,argument,values,constructor,argument,values,this,constructor,argument,values,constructor,argument,values
AbstractBeanDefinition -> public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues);1536863076;Specify constructor argument values for this bean.;public void setConstructorArgumentValues(ConstructorArgumentValues constructorArgumentValues) {_		this.constructorArgumentValues = constructorArgumentValues__	};specify,constructor,argument,values,for,this,bean;public,void,set,constructor,argument,values,constructor,argument,values,constructor,argument,values,this,constructor,argument,values,constructor,argument,values
AbstractBeanDefinition -> protected AbstractBeanDefinition(@Nullable ConstructorArgumentValues cargs, @Nullable MutablePropertyValues pvs);1496837955;Create a new AbstractBeanDefinition with the given_constructor argument values and property values.;protected AbstractBeanDefinition(@Nullable ConstructorArgumentValues cargs, @Nullable MutablePropertyValues pvs) {_		setConstructorArgumentValues(cargs)__		setPropertyValues(pvs)__	};create,a,new,abstract,bean,definition,with,the,given,constructor,argument,values,and,property,values;protected,abstract,bean,definition,nullable,constructor,argument,values,cargs,nullable,mutable,property,values,pvs,set,constructor,argument,values,cargs,set,property,values,pvs
AbstractBeanDefinition -> protected AbstractBeanDefinition(@Nullable ConstructorArgumentValues cargs, @Nullable MutablePropertyValues pvs);1498780456;Create a new AbstractBeanDefinition with the given_constructor argument values and property values.;protected AbstractBeanDefinition(@Nullable ConstructorArgumentValues cargs, @Nullable MutablePropertyValues pvs) {_		this.constructorArgumentValues = (cargs != null ? cargs : new ConstructorArgumentValues())__		this.propertyValues = (pvs != null ? pvs : new MutablePropertyValues())__	};create,a,new,abstract,bean,definition,with,the,given,constructor,argument,values,and,property,values;protected,abstract,bean,definition,nullable,constructor,argument,values,cargs,nullable,mutable,property,values,pvs,this,constructor,argument,values,cargs,null,cargs,new,constructor,argument,values,this,property,values,pvs,null,pvs,new,mutable,property,values
AbstractBeanDefinition -> protected AbstractBeanDefinition(@Nullable ConstructorArgumentValues cargs, @Nullable MutablePropertyValues pvs);1502974979;Create a new AbstractBeanDefinition with the given_constructor argument values and property values.;protected AbstractBeanDefinition(@Nullable ConstructorArgumentValues cargs, @Nullable MutablePropertyValues pvs) {_		this.constructorArgumentValues = (cargs != null ? cargs : new ConstructorArgumentValues())__		this.propertyValues = (pvs != null ? pvs : new MutablePropertyValues())__	};create,a,new,abstract,bean,definition,with,the,given,constructor,argument,values,and,property,values;protected,abstract,bean,definition,nullable,constructor,argument,values,cargs,nullable,mutable,property,values,pvs,this,constructor,argument,values,cargs,null,cargs,new,constructor,argument,values,this,property,values,pvs,null,pvs,new,mutable,property,values
AbstractBeanDefinition -> protected AbstractBeanDefinition(@Nullable ConstructorArgumentValues cargs, @Nullable MutablePropertyValues pvs);1503008029;Create a new AbstractBeanDefinition with the given_constructor argument values and property values.;protected AbstractBeanDefinition(@Nullable ConstructorArgumentValues cargs, @Nullable MutablePropertyValues pvs) {_		this.constructorArgumentValues = (cargs != null ? cargs : new ConstructorArgumentValues())__		this.propertyValues = (pvs != null ? pvs : new MutablePropertyValues())__	};create,a,new,abstract,bean,definition,with,the,given,constructor,argument,values,and,property,values;protected,abstract,bean,definition,nullable,constructor,argument,values,cargs,nullable,mutable,property,values,pvs,this,constructor,argument,values,cargs,null,cargs,new,constructor,argument,values,this,property,values,pvs,null,pvs,new,mutable,property,values
AbstractBeanDefinition -> protected AbstractBeanDefinition(@Nullable ConstructorArgumentValues cargs, @Nullable MutablePropertyValues pvs);1510606271;Create a new AbstractBeanDefinition with the given_constructor argument values and property values.;protected AbstractBeanDefinition(@Nullable ConstructorArgumentValues cargs, @Nullable MutablePropertyValues pvs) {_		this.constructorArgumentValues = cargs__		this.propertyValues = pvs__	};create,a,new,abstract,bean,definition,with,the,given,constructor,argument,values,and,property,values;protected,abstract,bean,definition,nullable,constructor,argument,values,cargs,nullable,mutable,property,values,pvs,this,constructor,argument,values,cargs,this,property,values,pvs
AbstractBeanDefinition -> protected AbstractBeanDefinition(@Nullable ConstructorArgumentValues cargs, @Nullable MutablePropertyValues pvs);1510675876;Create a new AbstractBeanDefinition with the given_constructor argument values and property values.;protected AbstractBeanDefinition(@Nullable ConstructorArgumentValues cargs, @Nullable MutablePropertyValues pvs) {_		this.constructorArgumentValues = cargs__		this.propertyValues = pvs__	};create,a,new,abstract,bean,definition,with,the,given,constructor,argument,values,and,property,values;protected,abstract,bean,definition,nullable,constructor,argument,values,cargs,nullable,mutable,property,values,pvs,this,constructor,argument,values,cargs,this,property,values,pvs
AbstractBeanDefinition -> protected AbstractBeanDefinition(@Nullable ConstructorArgumentValues cargs, @Nullable MutablePropertyValues pvs);1530174524;Create a new AbstractBeanDefinition with the given_constructor argument values and property values.;protected AbstractBeanDefinition(@Nullable ConstructorArgumentValues cargs, @Nullable MutablePropertyValues pvs) {_		this.constructorArgumentValues = cargs__		this.propertyValues = pvs__	};create,a,new,abstract,bean,definition,with,the,given,constructor,argument,values,and,property,values;protected,abstract,bean,definition,nullable,constructor,argument,values,cargs,nullable,mutable,property,values,pvs,this,constructor,argument,values,cargs,this,property,values,pvs
AbstractBeanDefinition -> protected AbstractBeanDefinition(@Nullable ConstructorArgumentValues cargs, @Nullable MutablePropertyValues pvs);1530174524;Create a new AbstractBeanDefinition with the given_constructor argument values and property values.;protected AbstractBeanDefinition(@Nullable ConstructorArgumentValues cargs, @Nullable MutablePropertyValues pvs) {_		this.constructorArgumentValues = cargs__		this.propertyValues = pvs__	};create,a,new,abstract,bean,definition,with,the,given,constructor,argument,values,and,property,values;protected,abstract,bean,definition,nullable,constructor,argument,values,cargs,nullable,mutable,property,values,pvs,this,constructor,argument,values,cargs,this,property,values,pvs
AbstractBeanDefinition -> protected AbstractBeanDefinition(@Nullable ConstructorArgumentValues cargs, @Nullable MutablePropertyValues pvs);1530174524;Create a new AbstractBeanDefinition with the given_constructor argument values and property values.;protected AbstractBeanDefinition(@Nullable ConstructorArgumentValues cargs, @Nullable MutablePropertyValues pvs) {_		this.constructorArgumentValues = cargs__		this.propertyValues = pvs__	};create,a,new,abstract,bean,definition,with,the,given,constructor,argument,values,and,property,values;protected,abstract,bean,definition,nullable,constructor,argument,values,cargs,nullable,mutable,property,values,pvs,this,constructor,argument,values,cargs,this,property,values,pvs
AbstractBeanDefinition -> protected AbstractBeanDefinition(@Nullable ConstructorArgumentValues cargs, @Nullable MutablePropertyValues pvs);1530190293;Create a new AbstractBeanDefinition with the given_constructor argument values and property values.;protected AbstractBeanDefinition(@Nullable ConstructorArgumentValues cargs, @Nullable MutablePropertyValues pvs) {_		this.constructorArgumentValues = cargs__		this.propertyValues = pvs__	};create,a,new,abstract,bean,definition,with,the,given,constructor,argument,values,and,property,values;protected,abstract,bean,definition,nullable,constructor,argument,values,cargs,nullable,mutable,property,values,pvs,this,constructor,argument,values,cargs,this,property,values,pvs
AbstractBeanDefinition -> protected AbstractBeanDefinition(@Nullable ConstructorArgumentValues cargs, @Nullable MutablePropertyValues pvs);1532981251;Create a new AbstractBeanDefinition with the given_constructor argument values and property values.;protected AbstractBeanDefinition(@Nullable ConstructorArgumentValues cargs, @Nullable MutablePropertyValues pvs) {_		this.constructorArgumentValues = cargs__		this.propertyValues = pvs__	};create,a,new,abstract,bean,definition,with,the,given,constructor,argument,values,and,property,values;protected,abstract,bean,definition,nullable,constructor,argument,values,cargs,nullable,mutable,property,values,pvs,this,constructor,argument,values,cargs,this,property,values,pvs
AbstractBeanDefinition -> protected AbstractBeanDefinition(@Nullable ConstructorArgumentValues cargs, @Nullable MutablePropertyValues pvs);1536863076;Create a new AbstractBeanDefinition with the given_constructor argument values and property values.;protected AbstractBeanDefinition(@Nullable ConstructorArgumentValues cargs, @Nullable MutablePropertyValues pvs) {_		this.constructorArgumentValues = cargs__		this.propertyValues = pvs__	};create,a,new,abstract,bean,definition,with,the,given,constructor,argument,values,and,property,values;protected,abstract,bean,definition,nullable,constructor,argument,values,cargs,nullable,mutable,property,values,pvs,this,constructor,argument,values,cargs,this,property,values,pvs
AbstractBeanDefinition -> public void setAutowireMode(int autowireMode);1328020251;Set the autowire mode. This determines whether any automagical detection_and setting of bean references will happen. Default is AUTOWIRE_NO,_which means there's no autowire._@param autowireMode the autowire mode to set._Must be one of the constants defined in this class._@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT;public void setAutowireMode(int autowireMode) {_		this.autowireMode = autowireMode__	};set,the,autowire,mode,this,determines,whether,any,automagical,detection,and,setting,of,bean,references,will,happen,default,is,which,means,there,s,no,autowire,param,autowire,mode,the,autowire,mode,to,set,must,be,one,of,the,constants,defined,in,this,class,see,see,see,see,see;public,void,set,autowire,mode,int,autowire,mode,this,autowire,mode,autowire,mode
AbstractBeanDefinition -> public void setAutowireMode(int autowireMode);1337202589;Set the autowire mode. This determines whether any automagical detection_and setting of bean references will happen. Default is AUTOWIRE_NO,_which means there's no autowire._@param autowireMode the autowire mode to set._Must be one of the constants defined in this class._@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT;public void setAutowireMode(int autowireMode) {_		this.autowireMode = autowireMode__	};set,the,autowire,mode,this,determines,whether,any,automagical,detection,and,setting,of,bean,references,will,happen,default,is,which,means,there,s,no,autowire,param,autowire,mode,the,autowire,mode,to,set,must,be,one,of,the,constants,defined,in,this,class,see,see,see,see,see;public,void,set,autowire,mode,int,autowire,mode,this,autowire,mode,autowire,mode
AbstractBeanDefinition -> public void setAutowireMode(int autowireMode);1356735495;Set the autowire mode. This determines whether any automagical detection_and setting of bean references will happen. Default is AUTOWIRE_NO,_which means there's no autowire._@param autowireMode the autowire mode to set._Must be one of the constants defined in this class._@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT;public void setAutowireMode(int autowireMode) {_		this.autowireMode = autowireMode__	};set,the,autowire,mode,this,determines,whether,any,automagical,detection,and,setting,of,bean,references,will,happen,default,is,which,means,there,s,no,autowire,param,autowire,mode,the,autowire,mode,to,set,must,be,one,of,the,constants,defined,in,this,class,see,see,see,see,see;public,void,set,autowire,mode,int,autowire,mode,this,autowire,mode,autowire,mode
AbstractBeanDefinition -> public void setAutowireMode(int autowireMode);1357119239;Set the autowire mode. This determines whether any automagical detection_and setting of bean references will happen. Default is AUTOWIRE_NO,_which means there's no autowire._@param autowireMode the autowire mode to set._Must be one of the constants defined in this class._@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT;public void setAutowireMode(int autowireMode) {_		this.autowireMode = autowireMode__	};set,the,autowire,mode,this,determines,whether,any,automagical,detection,and,setting,of,bean,references,will,happen,default,is,which,means,there,s,no,autowire,param,autowire,mode,the,autowire,mode,to,set,must,be,one,of,the,constants,defined,in,this,class,see,see,see,see,see;public,void,set,autowire,mode,int,autowire,mode,this,autowire,mode,autowire,mode
AbstractBeanDefinition -> public void setAutowireMode(int autowireMode);1367508310;Set the autowire mode. This determines whether any automagical detection_and setting of bean references will happen. Default is AUTOWIRE_NO,_which means there's no autowire._@param autowireMode the autowire mode to set._Must be one of the constants defined in this class._@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT;public void setAutowireMode(int autowireMode) {_		this.autowireMode = autowireMode__	};set,the,autowire,mode,this,determines,whether,any,automagical,detection,and,setting,of,bean,references,will,happen,default,is,which,means,there,s,no,autowire,param,autowire,mode,the,autowire,mode,to,set,must,be,one,of,the,constants,defined,in,this,class,see,see,see,see,see;public,void,set,autowire,mode,int,autowire,mode,this,autowire,mode,autowire,mode
AbstractBeanDefinition -> public void setAutowireMode(int autowireMode);1367943112;Set the autowire mode. This determines whether any automagical detection_and setting of bean references will happen. Default is AUTOWIRE_NO,_which means there's no autowire._@param autowireMode the autowire mode to set._Must be one of the constants defined in this class._@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT;public void setAutowireMode(int autowireMode) {_		this.autowireMode = autowireMode__	};set,the,autowire,mode,this,determines,whether,any,automagical,detection,and,setting,of,bean,references,will,happen,default,is,which,means,there,s,no,autowire,param,autowire,mode,the,autowire,mode,to,set,must,be,one,of,the,constants,defined,in,this,class,see,see,see,see,see;public,void,set,autowire,mode,int,autowire,mode,this,autowire,mode,autowire,mode
AbstractBeanDefinition -> public void setAutowireMode(int autowireMode);1368482696;Set the autowire mode. This determines whether any automagical detection_and setting of bean references will happen. Default is AUTOWIRE_NO,_which means there's no autowire._@param autowireMode the autowire mode to set._Must be one of the constants defined in this class._@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT;public void setAutowireMode(int autowireMode) {_		this.autowireMode = autowireMode__	};set,the,autowire,mode,this,determines,whether,any,automagical,detection,and,setting,of,bean,references,will,happen,default,is,which,means,there,s,no,autowire,param,autowire,mode,the,autowire,mode,to,set,must,be,one,of,the,constants,defined,in,this,class,see,see,see,see,see;public,void,set,autowire,mode,int,autowire,mode,this,autowire,mode,autowire,mode
AbstractBeanDefinition -> public void setAutowireMode(int autowireMode);1385412762;Set the autowire mode. This determines whether any automagical detection_and setting of bean references will happen. Default is AUTOWIRE_NO,_which means there's no autowire._@param autowireMode the autowire mode to set._Must be one of the constants defined in this class._@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT;public void setAutowireMode(int autowireMode) {_		this.autowireMode = autowireMode__	};set,the,autowire,mode,this,determines,whether,any,automagical,detection,and,setting,of,bean,references,will,happen,default,is,which,means,there,s,no,autowire,param,autowire,mode,the,autowire,mode,to,set,must,be,one,of,the,constants,defined,in,this,class,see,see,see,see,see;public,void,set,autowire,mode,int,autowire,mode,this,autowire,mode,autowire,mode
AbstractBeanDefinition -> public void setAutowireMode(int autowireMode);1392245317;Set the autowire mode. This determines whether any automagical detection_and setting of bean references will happen. Default is AUTOWIRE_NO,_which means there's no autowire._@param autowireMode the autowire mode to set._Must be one of the constants defined in this class._@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT;public void setAutowireMode(int autowireMode) {_		this.autowireMode = autowireMode__	};set,the,autowire,mode,this,determines,whether,any,automagical,detection,and,setting,of,bean,references,will,happen,default,is,which,means,there,s,no,autowire,param,autowire,mode,the,autowire,mode,to,set,must,be,one,of,the,constants,defined,in,this,class,see,see,see,see,see;public,void,set,autowire,mode,int,autowire,mode,this,autowire,mode,autowire,mode
AbstractBeanDefinition -> public void setAutowireMode(int autowireMode);1397163142;Set the autowire mode. This determines whether any automagical detection_and setting of bean references will happen. Default is AUTOWIRE_NO,_which means there's no autowire._@param autowireMode the autowire mode to set._Must be one of the constants defined in this class._@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT;public void setAutowireMode(int autowireMode) {_		this.autowireMode = autowireMode__	};set,the,autowire,mode,this,determines,whether,any,automagical,detection,and,setting,of,bean,references,will,happen,default,is,which,means,there,s,no,autowire,param,autowire,mode,the,autowire,mode,to,set,must,be,one,of,the,constants,defined,in,this,class,see,see,see,see,see;public,void,set,autowire,mode,int,autowire,mode,this,autowire,mode,autowire,mode
AbstractBeanDefinition -> public void setAutowireMode(int autowireMode);1398898390;Set the autowire mode. This determines whether any automagical detection_and setting of bean references will happen. Default is AUTOWIRE_NO,_which means there's no autowire._@param autowireMode the autowire mode to set._Must be one of the constants defined in this class._@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT;public void setAutowireMode(int autowireMode) {_		this.autowireMode = autowireMode__	};set,the,autowire,mode,this,determines,whether,any,automagical,detection,and,setting,of,bean,references,will,happen,default,is,which,means,there,s,no,autowire,param,autowire,mode,the,autowire,mode,to,set,must,be,one,of,the,constants,defined,in,this,class,see,see,see,see,see;public,void,set,autowire,mode,int,autowire,mode,this,autowire,mode,autowire,mode
AbstractBeanDefinition -> public void setAutowireMode(int autowireMode);1407511029;Set the autowire mode. This determines whether any automagical detection_and setting of bean references will happen. Default is AUTOWIRE_NO,_which means there's no autowire._@param autowireMode the autowire mode to set._Must be one of the constants defined in this class._@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT;public void setAutowireMode(int autowireMode) {_		this.autowireMode = autowireMode__	};set,the,autowire,mode,this,determines,whether,any,automagical,detection,and,setting,of,bean,references,will,happen,default,is,which,means,there,s,no,autowire,param,autowire,mode,the,autowire,mode,to,set,must,be,one,of,the,constants,defined,in,this,class,see,see,see,see,see;public,void,set,autowire,mode,int,autowire,mode,this,autowire,mode,autowire,mode
AbstractBeanDefinition -> public void setAutowireMode(int autowireMode);1432135182;Set the autowire mode. This determines whether any automagical detection_and setting of bean references will happen. Default is AUTOWIRE_NO,_which means there's no autowire._@param autowireMode the autowire mode to set._Must be one of the constants defined in this class._@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT;public void setAutowireMode(int autowireMode) {_		this.autowireMode = autowireMode__	};set,the,autowire,mode,this,determines,whether,any,automagical,detection,and,setting,of,bean,references,will,happen,default,is,which,means,there,s,no,autowire,param,autowire,mode,the,autowire,mode,to,set,must,be,one,of,the,constants,defined,in,this,class,see,see,see,see,see;public,void,set,autowire,mode,int,autowire,mode,this,autowire,mode,autowire,mode
AbstractBeanDefinition -> public void setAutowireMode(int autowireMode);1434204509;Set the autowire mode. This determines whether any automagical detection_and setting of bean references will happen. Default is AUTOWIRE_NO,_which means there's no autowire._@param autowireMode the autowire mode to set._Must be one of the constants defined in this class._@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT;public void setAutowireMode(int autowireMode) {_		this.autowireMode = autowireMode__	};set,the,autowire,mode,this,determines,whether,any,automagical,detection,and,setting,of,bean,references,will,happen,default,is,which,means,there,s,no,autowire,param,autowire,mode,the,autowire,mode,to,set,must,be,one,of,the,constants,defined,in,this,class,see,see,see,see,see;public,void,set,autowire,mode,int,autowire,mode,this,autowire,mode,autowire,mode
AbstractBeanDefinition -> public void setAutowireMode(int autowireMode);1447323728;Set the autowire mode. This determines whether any automagical detection_and setting of bean references will happen. Default is AUTOWIRE_NO,_which means there's no autowire._@param autowireMode the autowire mode to set._Must be one of the constants defined in this class._@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT;public void setAutowireMode(int autowireMode) {_		this.autowireMode = autowireMode__	};set,the,autowire,mode,this,determines,whether,any,automagical,detection,and,setting,of,bean,references,will,happen,default,is,which,means,there,s,no,autowire,param,autowire,mode,the,autowire,mode,to,set,must,be,one,of,the,constants,defined,in,this,class,see,see,see,see,see;public,void,set,autowire,mode,int,autowire,mode,this,autowire,mode,autowire,mode
AbstractBeanDefinition -> public void setAutowireMode(int autowireMode);1465226156;Set the autowire mode. This determines whether any automagical detection_and setting of bean references will happen. Default is AUTOWIRE_NO,_which means there's no autowire._@param autowireMode the autowire mode to set._Must be one of the constants defined in this class._@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT;public void setAutowireMode(int autowireMode) {_		this.autowireMode = autowireMode__	};set,the,autowire,mode,this,determines,whether,any,automagical,detection,and,setting,of,bean,references,will,happen,default,is,which,means,there,s,no,autowire,param,autowire,mode,the,autowire,mode,to,set,must,be,one,of,the,constants,defined,in,this,class,see,see,see,see,see;public,void,set,autowire,mode,int,autowire,mode,this,autowire,mode,autowire,mode
AbstractBeanDefinition -> public void setAutowireMode(int autowireMode);1467730834;Set the autowire mode. This determines whether any automagical detection_and setting of bean references will happen. Default is AUTOWIRE_NO,_which means there's no autowire._@param autowireMode the autowire mode to set._Must be one of the constants defined in this class._@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT;public void setAutowireMode(int autowireMode) {_		this.autowireMode = autowireMode__	};set,the,autowire,mode,this,determines,whether,any,automagical,detection,and,setting,of,bean,references,will,happen,default,is,which,means,there,s,no,autowire,param,autowire,mode,the,autowire,mode,to,set,must,be,one,of,the,constants,defined,in,this,class,see,see,see,see,see;public,void,set,autowire,mode,int,autowire,mode,this,autowire,mode,autowire,mode
AbstractBeanDefinition -> public void setAutowireMode(int autowireMode);1467846264;Set the autowire mode. This determines whether any automagical detection_and setting of bean references will happen. Default is AUTOWIRE_NO,_which means there's no autowire._@param autowireMode the autowire mode to set._Must be one of the constants defined in this class._@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT;public void setAutowireMode(int autowireMode) {_		this.autowireMode = autowireMode__	};set,the,autowire,mode,this,determines,whether,any,automagical,detection,and,setting,of,bean,references,will,happen,default,is,which,means,there,s,no,autowire,param,autowire,mode,the,autowire,mode,to,set,must,be,one,of,the,constants,defined,in,this,class,see,see,see,see,see;public,void,set,autowire,mode,int,autowire,mode,this,autowire,mode,autowire,mode
AbstractBeanDefinition -> public void setAutowireMode(int autowireMode);1482091545;Set the autowire mode. This determines whether any automagical detection_and setting of bean references will happen. Default is AUTOWIRE_NO,_which means there's no autowire._@param autowireMode the autowire mode to set._Must be one of the constants defined in this class._@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT;public void setAutowireMode(int autowireMode) {_		this.autowireMode = autowireMode__	};set,the,autowire,mode,this,determines,whether,any,automagical,detection,and,setting,of,bean,references,will,happen,default,is,which,means,there,s,no,autowire,param,autowire,mode,the,autowire,mode,to,set,must,be,one,of,the,constants,defined,in,this,class,see,see,see,see,see;public,void,set,autowire,mode,int,autowire,mode,this,autowire,mode,autowire,mode
AbstractBeanDefinition -> public void setAutowireMode(int autowireMode);1483093818;Set the autowire mode. This determines whether any automagical detection_and setting of bean references will happen. Default is AUTOWIRE_NO,_which means there's no autowire._@param autowireMode the autowire mode to set._Must be one of the constants defined in this class._@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT;public void setAutowireMode(int autowireMode) {_		this.autowireMode = autowireMode__	};set,the,autowire,mode,this,determines,whether,any,automagical,detection,and,setting,of,bean,references,will,happen,default,is,which,means,there,s,no,autowire,param,autowire,mode,the,autowire,mode,to,set,must,be,one,of,the,constants,defined,in,this,class,see,see,see,see,see;public,void,set,autowire,mode,int,autowire,mode,this,autowire,mode,autowire,mode
AbstractBeanDefinition -> public void setAutowireMode(int autowireMode);1495868221;Set the autowire mode. This determines whether any automagical detection_and setting of bean references will happen. Default is AUTOWIRE_NO,_which means there's no autowire._@param autowireMode the autowire mode to set._Must be one of the constants defined in this class._@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT;public void setAutowireMode(int autowireMode) {_		this.autowireMode = autowireMode__	};set,the,autowire,mode,this,determines,whether,any,automagical,detection,and,setting,of,bean,references,will,happen,default,is,which,means,there,s,no,autowire,param,autowire,mode,the,autowire,mode,to,set,must,be,one,of,the,constants,defined,in,this,class,see,see,see,see,see;public,void,set,autowire,mode,int,autowire,mode,this,autowire,mode,autowire,mode
AbstractBeanDefinition -> public void setAutowireMode(int autowireMode);1496837955;Set the autowire mode. This determines whether any automagical detection_and setting of bean references will happen. Default is AUTOWIRE_NO,_which means there's no autowire._@param autowireMode the autowire mode to set._Must be one of the constants defined in this class._@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT;public void setAutowireMode(int autowireMode) {_		this.autowireMode = autowireMode__	};set,the,autowire,mode,this,determines,whether,any,automagical,detection,and,setting,of,bean,references,will,happen,default,is,which,means,there,s,no,autowire,param,autowire,mode,the,autowire,mode,to,set,must,be,one,of,the,constants,defined,in,this,class,see,see,see,see,see;public,void,set,autowire,mode,int,autowire,mode,this,autowire,mode,autowire,mode
AbstractBeanDefinition -> public void setAutowireMode(int autowireMode);1498780456;Set the autowire mode. This determines whether any automagical detection_and setting of bean references will happen. Default is AUTOWIRE_NO,_which means there's no autowire._@param autowireMode the autowire mode to set._Must be one of the constants defined in this class._@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT;public void setAutowireMode(int autowireMode) {_		this.autowireMode = autowireMode__	};set,the,autowire,mode,this,determines,whether,any,automagical,detection,and,setting,of,bean,references,will,happen,default,is,which,means,there,s,no,autowire,param,autowire,mode,the,autowire,mode,to,set,must,be,one,of,the,constants,defined,in,this,class,see,see,see,see,see;public,void,set,autowire,mode,int,autowire,mode,this,autowire,mode,autowire,mode
AbstractBeanDefinition -> public void setAutowireMode(int autowireMode);1502974979;Set the autowire mode. This determines whether any automagical detection_and setting of bean references will happen. Default is AUTOWIRE_NO,_which means there's no autowire._@param autowireMode the autowire mode to set._Must be one of the constants defined in this class._@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT;public void setAutowireMode(int autowireMode) {_		this.autowireMode = autowireMode__	};set,the,autowire,mode,this,determines,whether,any,automagical,detection,and,setting,of,bean,references,will,happen,default,is,which,means,there,s,no,autowire,param,autowire,mode,the,autowire,mode,to,set,must,be,one,of,the,constants,defined,in,this,class,see,see,see,see,see;public,void,set,autowire,mode,int,autowire,mode,this,autowire,mode,autowire,mode
AbstractBeanDefinition -> public void setAutowireMode(int autowireMode);1503008029;Set the autowire mode. This determines whether any automagical detection_and setting of bean references will happen. Default is AUTOWIRE_NO,_which means there's no autowire._@param autowireMode the autowire mode to set._Must be one of the constants defined in this class._@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT;public void setAutowireMode(int autowireMode) {_		this.autowireMode = autowireMode__	};set,the,autowire,mode,this,determines,whether,any,automagical,detection,and,setting,of,bean,references,will,happen,default,is,which,means,there,s,no,autowire,param,autowire,mode,the,autowire,mode,to,set,must,be,one,of,the,constants,defined,in,this,class,see,see,see,see,see;public,void,set,autowire,mode,int,autowire,mode,this,autowire,mode,autowire,mode
AbstractBeanDefinition -> public void setAutowireMode(int autowireMode);1510606271;Set the autowire mode. This determines whether any automagical detection_and setting of bean references will happen. Default is AUTOWIRE_NO,_which means there's no autowire._@param autowireMode the autowire mode to set._Must be one of the constants defined in this class._@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT;public void setAutowireMode(int autowireMode) {_		this.autowireMode = autowireMode__	};set,the,autowire,mode,this,determines,whether,any,automagical,detection,and,setting,of,bean,references,will,happen,default,is,which,means,there,s,no,autowire,param,autowire,mode,the,autowire,mode,to,set,must,be,one,of,the,constants,defined,in,this,class,see,see,see,see,see;public,void,set,autowire,mode,int,autowire,mode,this,autowire,mode,autowire,mode
AbstractBeanDefinition -> public void setAutowireMode(int autowireMode);1510675876;Set the autowire mode. This determines whether any automagical detection_and setting of bean references will happen. Default is AUTOWIRE_NO,_which means there's no autowire._@param autowireMode the autowire mode to set._Must be one of the constants defined in this class._@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT;public void setAutowireMode(int autowireMode) {_		this.autowireMode = autowireMode__	};set,the,autowire,mode,this,determines,whether,any,automagical,detection,and,setting,of,bean,references,will,happen,default,is,which,means,there,s,no,autowire,param,autowire,mode,the,autowire,mode,to,set,must,be,one,of,the,constants,defined,in,this,class,see,see,see,see,see;public,void,set,autowire,mode,int,autowire,mode,this,autowire,mode,autowire,mode
AbstractBeanDefinition -> public void setAutowireMode(int autowireMode);1530174524;Set the autowire mode. This determines whether any automagical detection_and setting of bean references will happen. Default is AUTOWIRE_NO,_which means there's no autowire._@param autowireMode the autowire mode to set._Must be one of the constants defined in this class._@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT;public void setAutowireMode(int autowireMode) {_		this.autowireMode = autowireMode__	};set,the,autowire,mode,this,determines,whether,any,automagical,detection,and,setting,of,bean,references,will,happen,default,is,which,means,there,s,no,autowire,param,autowire,mode,the,autowire,mode,to,set,must,be,one,of,the,constants,defined,in,this,class,see,see,see,see,see;public,void,set,autowire,mode,int,autowire,mode,this,autowire,mode,autowire,mode
AbstractBeanDefinition -> public void setAutowireMode(int autowireMode);1530174524;Set the autowire mode. This determines whether any automagical detection_and setting of bean references will happen. Default is AUTOWIRE_NO,_which means there's no autowire._@param autowireMode the autowire mode to set._Must be one of the constants defined in this class._@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT;public void setAutowireMode(int autowireMode) {_		this.autowireMode = autowireMode__	};set,the,autowire,mode,this,determines,whether,any,automagical,detection,and,setting,of,bean,references,will,happen,default,is,which,means,there,s,no,autowire,param,autowire,mode,the,autowire,mode,to,set,must,be,one,of,the,constants,defined,in,this,class,see,see,see,see,see;public,void,set,autowire,mode,int,autowire,mode,this,autowire,mode,autowire,mode
AbstractBeanDefinition -> public void setAutowireMode(int autowireMode);1530174524;Set the autowire mode. This determines whether any automagical detection_and setting of bean references will happen. Default is AUTOWIRE_NO,_which means there's no autowire._@param autowireMode the autowire mode to set._Must be one of the constants defined in this class._@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT;public void setAutowireMode(int autowireMode) {_		this.autowireMode = autowireMode__	};set,the,autowire,mode,this,determines,whether,any,automagical,detection,and,setting,of,bean,references,will,happen,default,is,which,means,there,s,no,autowire,param,autowire,mode,the,autowire,mode,to,set,must,be,one,of,the,constants,defined,in,this,class,see,see,see,see,see;public,void,set,autowire,mode,int,autowire,mode,this,autowire,mode,autowire,mode
AbstractBeanDefinition -> public void setAutowireMode(int autowireMode);1530190293;Set the autowire mode. This determines whether any automagical detection_and setting of bean references will happen. Default is AUTOWIRE_NO,_which means there's no autowire._@param autowireMode the autowire mode to set._Must be one of the constants defined in this class._@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT;public void setAutowireMode(int autowireMode) {_		this.autowireMode = autowireMode__	};set,the,autowire,mode,this,determines,whether,any,automagical,detection,and,setting,of,bean,references,will,happen,default,is,which,means,there,s,no,autowire,param,autowire,mode,the,autowire,mode,to,set,must,be,one,of,the,constants,defined,in,this,class,see,see,see,see,see;public,void,set,autowire,mode,int,autowire,mode,this,autowire,mode,autowire,mode
AbstractBeanDefinition -> public void setAutowireMode(int autowireMode);1532981251;Set the autowire mode. This determines whether any automagical detection_and setting of bean references will happen. Default is AUTOWIRE_NO,_which means there's no autowire._@param autowireMode the autowire mode to set._Must be one of the constants defined in this class._@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT;public void setAutowireMode(int autowireMode) {_		this.autowireMode = autowireMode__	};set,the,autowire,mode,this,determines,whether,any,automagical,detection,and,setting,of,bean,references,will,happen,default,is,which,means,there,s,no,autowire,param,autowire,mode,the,autowire,mode,to,set,must,be,one,of,the,constants,defined,in,this,class,see,see,see,see,see;public,void,set,autowire,mode,int,autowire,mode,this,autowire,mode,autowire,mode
AbstractBeanDefinition -> public void setAutowireMode(int autowireMode);1536863076;Set the autowire mode. This determines whether any automagical detection_and setting of bean references will happen. Default is AUTOWIRE_NO,_which means there's no autowire._@param autowireMode the autowire mode to set._Must be one of the constants defined in this class._@see #AUTOWIRE_NO_@see #AUTOWIRE_BY_NAME_@see #AUTOWIRE_BY_TYPE_@see #AUTOWIRE_CONSTRUCTOR_@see #AUTOWIRE_AUTODETECT;public void setAutowireMode(int autowireMode) {_		this.autowireMode = autowireMode__	};set,the,autowire,mode,this,determines,whether,any,automagical,detection,and,setting,of,bean,references,will,happen,default,is,which,means,there,s,no,autowire,param,autowire,mode,the,autowire,mode,to,set,must,be,one,of,the,constants,defined,in,this,class,see,see,see,see,see;public,void,set,autowire,mode,int,autowire,mode,this,autowire,mode,autowire,mode
AbstractBeanDefinition -> public void setInstanceSupplier(Supplier<?> instanceSupplier);1482091545;Specify a callback for creating an instance of the bean,_as an alternative to a declaratively specified factory method._<p>If such a callback is set, it will override any other constructor_or factory method metadata. However, bean property population and_potential annotation-driven injection will still apply as usual._@since 5.0_@see #setConstructorArgumentValues(ConstructorArgumentValues)_@see #setPropertyValues(MutablePropertyValues);public void setInstanceSupplier(Supplier<?> instanceSupplier) {_		this.instanceSupplier = instanceSupplier__	};specify,a,callback,for,creating,an,instance,of,the,bean,as,an,alternative,to,a,declaratively,specified,factory,method,p,if,such,a,callback,is,set,it,will,override,any,other,constructor,or,factory,method,metadata,however,bean,property,population,and,potential,annotation,driven,injection,will,still,apply,as,usual,since,5,0,see,set,constructor,argument,values,constructor,argument,values,see,set,property,values,mutable,property,values;public,void,set,instance,supplier,supplier,instance,supplier,this,instance,supplier,instance,supplier
AbstractBeanDefinition -> public void setInstanceSupplier(Supplier<?> instanceSupplier);1483093818;Specify a callback for creating an instance of the bean,_as an alternative to a declaratively specified factory method._<p>If such a callback is set, it will override any other constructor_or factory method metadata. However, bean property population and_potential annotation-driven injection will still apply as usual._@since 5.0_@see #setConstructorArgumentValues(ConstructorArgumentValues)_@see #setPropertyValues(MutablePropertyValues);public void setInstanceSupplier(Supplier<?> instanceSupplier) {_		this.instanceSupplier = instanceSupplier__	};specify,a,callback,for,creating,an,instance,of,the,bean,as,an,alternative,to,a,declaratively,specified,factory,method,p,if,such,a,callback,is,set,it,will,override,any,other,constructor,or,factory,method,metadata,however,bean,property,population,and,potential,annotation,driven,injection,will,still,apply,as,usual,since,5,0,see,set,constructor,argument,values,constructor,argument,values,see,set,property,values,mutable,property,values;public,void,set,instance,supplier,supplier,instance,supplier,this,instance,supplier,instance,supplier
AbstractBeanDefinition -> public void setInstanceSupplier(Supplier<?> instanceSupplier);1495868221;Specify a callback for creating an instance of the bean,_as an alternative to a declaratively specified factory method._<p>If such a callback is set, it will override any other constructor_or factory method metadata. However, bean property population and_potential annotation-driven injection will still apply as usual._@since 5.0_@see #setConstructorArgumentValues(ConstructorArgumentValues)_@see #setPropertyValues(MutablePropertyValues);public void setInstanceSupplier(Supplier<?> instanceSupplier) {_		this.instanceSupplier = instanceSupplier__	};specify,a,callback,for,creating,an,instance,of,the,bean,as,an,alternative,to,a,declaratively,specified,factory,method,p,if,such,a,callback,is,set,it,will,override,any,other,constructor,or,factory,method,metadata,however,bean,property,population,and,potential,annotation,driven,injection,will,still,apply,as,usual,since,5,0,see,set,constructor,argument,values,constructor,argument,values,see,set,property,values,mutable,property,values;public,void,set,instance,supplier,supplier,instance,supplier,this,instance,supplier,instance,supplier
AbstractBeanDefinition -> public void setResource(Resource resource);1328020251;Set the resource that this bean definition came from_(for the purpose of showing context in case of errors).;public void setResource(Resource resource) {_		this.resource = resource__	};set,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,resource,resource,this,resource,resource
AbstractBeanDefinition -> public void setResource(Resource resource);1337202589;Set the resource that this bean definition came from_(for the purpose of showing context in case of errors).;public void setResource(Resource resource) {_		this.resource = resource__	};set,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,resource,resource,this,resource,resource
AbstractBeanDefinition -> public void setResource(Resource resource);1356735495;Set the resource that this bean definition came from_(for the purpose of showing context in case of errors).;public void setResource(Resource resource) {_		this.resource = resource__	};set,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,resource,resource,this,resource,resource
AbstractBeanDefinition -> public void setResource(Resource resource);1357119239;Set the resource that this bean definition came from_(for the purpose of showing context in case of errors).;public void setResource(Resource resource) {_		this.resource = resource__	};set,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,resource,resource,this,resource,resource
AbstractBeanDefinition -> public void setResource(Resource resource);1367508310;Set the resource that this bean definition came from_(for the purpose of showing context in case of errors).;public void setResource(Resource resource) {_		this.resource = resource__	};set,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,resource,resource,this,resource,resource
AbstractBeanDefinition -> public void setResource(Resource resource);1367943112;Set the resource that this bean definition came from_(for the purpose of showing context in case of errors).;public void setResource(Resource resource) {_		this.resource = resource__	};set,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,resource,resource,this,resource,resource
AbstractBeanDefinition -> public void setResource(Resource resource);1368482696;Set the resource that this bean definition came from_(for the purpose of showing context in case of errors).;public void setResource(Resource resource) {_		this.resource = resource__	};set,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,resource,resource,this,resource,resource
AbstractBeanDefinition -> public void setResource(Resource resource);1385412762;Set the resource that this bean definition came from_(for the purpose of showing context in case of errors).;public void setResource(Resource resource) {_		this.resource = resource__	};set,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,resource,resource,this,resource,resource
AbstractBeanDefinition -> public void setResource(Resource resource);1392245317;Set the resource that this bean definition came from_(for the purpose of showing context in case of errors).;public void setResource(Resource resource) {_		this.resource = resource__	};set,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,resource,resource,this,resource,resource
AbstractBeanDefinition -> public void setResource(Resource resource);1397163142;Set the resource that this bean definition came from_(for the purpose of showing context in case of errors).;public void setResource(Resource resource) {_		this.resource = resource__	};set,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,resource,resource,this,resource,resource
AbstractBeanDefinition -> public void setResource(Resource resource);1398898390;Set the resource that this bean definition came from_(for the purpose of showing context in case of errors).;public void setResource(Resource resource) {_		this.resource = resource__	};set,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,resource,resource,this,resource,resource
AbstractBeanDefinition -> public void setResource(Resource resource);1407511029;Set the resource that this bean definition came from_(for the purpose of showing context in case of errors).;public void setResource(Resource resource) {_		this.resource = resource__	};set,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,resource,resource,this,resource,resource
AbstractBeanDefinition -> public void setResource(Resource resource);1432135182;Set the resource that this bean definition came from_(for the purpose of showing context in case of errors).;public void setResource(Resource resource) {_		this.resource = resource__	};set,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,resource,resource,this,resource,resource
AbstractBeanDefinition -> public void setResource(Resource resource);1434204509;Set the resource that this bean definition came from_(for the purpose of showing context in case of errors).;public void setResource(Resource resource) {_		this.resource = resource__	};set,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,resource,resource,this,resource,resource
AbstractBeanDefinition -> public void setResource(Resource resource);1447323728;Set the resource that this bean definition came from_(for the purpose of showing context in case of errors).;public void setResource(Resource resource) {_		this.resource = resource__	};set,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,resource,resource,this,resource,resource
AbstractBeanDefinition -> public void setResource(Resource resource);1465226156;Set the resource that this bean definition came from_(for the purpose of showing context in case of errors).;public void setResource(Resource resource) {_		this.resource = resource__	};set,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,resource,resource,this,resource,resource
AbstractBeanDefinition -> public void setResource(Resource resource);1467730834;Set the resource that this bean definition came from_(for the purpose of showing context in case of errors).;public void setResource(Resource resource) {_		this.resource = resource__	};set,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,resource,resource,this,resource,resource
AbstractBeanDefinition -> public void setResource(Resource resource);1467846264;Set the resource that this bean definition came from_(for the purpose of showing context in case of errors).;public void setResource(Resource resource) {_		this.resource = resource__	};set,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,resource,resource,this,resource,resource
AbstractBeanDefinition -> public void setResource(Resource resource);1482091545;Set the resource that this bean definition came from_(for the purpose of showing context in case of errors).;public void setResource(Resource resource) {_		this.resource = resource__	};set,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,resource,resource,this,resource,resource
AbstractBeanDefinition -> public void setResource(Resource resource);1483093818;Set the resource that this bean definition came from_(for the purpose of showing context in case of errors).;public void setResource(Resource resource) {_		this.resource = resource__	};set,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,resource,resource,this,resource,resource
AbstractBeanDefinition -> public void setResource(Resource resource);1495868221;Set the resource that this bean definition came from_(for the purpose of showing context in case of errors).;public void setResource(Resource resource) {_		this.resource = resource__	};set,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,resource,resource,this,resource,resource
AbstractBeanDefinition -> public void setResource(Resource resource);1496837955;Set the resource that this bean definition came from_(for the purpose of showing context in case of errors).;public void setResource(Resource resource) {_		this.resource = resource__	};set,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,resource,resource,this,resource,resource
AbstractBeanDefinition -> public void setScope(String scope);1328020251;Set the name of the target scope for the bean._<p>Default is singleton status, although this is only applied once_a bean definition becomes active in the containing factory. A bean_definition may eventually inherit its scope from a parent bean definitionFor this_reason, the default scope name is empty (empty String), with_singleton status being assumed until a resolved scope will be set._@see #SCOPE_SINGLETON_@see #SCOPE_PROTOTYPE;public void setScope(String scope) {_		this.scope = scope__		this.singleton = SCOPE_SINGLETON.equals(scope) || SCOPE_DEFAULT.equals(scope)__		this.prototype = SCOPE_PROTOTYPE.equals(scope)__	};set,the,name,of,the,target,scope,for,the,bean,p,default,is,singleton,status,although,this,is,only,applied,once,a,bean,definition,becomes,active,in,the,containing,factory,a,bean,definition,may,eventually,inherit,its,scope,from,a,parent,bean,definition,for,this,reason,the,default,scope,name,is,empty,empty,string,with,singleton,status,being,assumed,until,a,resolved,scope,will,be,set,see,see;public,void,set,scope,string,scope,this,scope,scope,this,singleton,equals,scope,equals,scope,this,prototype,equals,scope
AbstractBeanDefinition -> public void setScope(String scope);1337202589;Set the name of the target scope for the bean._<p>Default is singleton status, although this is only applied once_a bean definition becomes active in the containing factory. A bean_definition may eventually inherit its scope from a parent bean definitionFor this_reason, the default scope name is empty (empty String), with_singleton status being assumed until a resolved scope will be set._@see #SCOPE_SINGLETON_@see #SCOPE_PROTOTYPE;public void setScope(String scope) {_		this.scope = scope__		this.singleton = SCOPE_SINGLETON.equals(scope) || SCOPE_DEFAULT.equals(scope)__		this.prototype = SCOPE_PROTOTYPE.equals(scope)__	};set,the,name,of,the,target,scope,for,the,bean,p,default,is,singleton,status,although,this,is,only,applied,once,a,bean,definition,becomes,active,in,the,containing,factory,a,bean,definition,may,eventually,inherit,its,scope,from,a,parent,bean,definition,for,this,reason,the,default,scope,name,is,empty,empty,string,with,singleton,status,being,assumed,until,a,resolved,scope,will,be,set,see,see;public,void,set,scope,string,scope,this,scope,scope,this,singleton,equals,scope,equals,scope,this,prototype,equals,scope
AbstractBeanDefinition -> public void setScope(String scope);1357119239;Set the name of the target scope for the bean._<p>Default is singleton status, although this is only applied once_a bean definition becomes active in the containing factory. A bean_definition may eventually inherit its scope from a parent bean definitionFor this_reason, the default scope name is empty (empty String), with_singleton status being assumed until a resolved scope will be set._@see #SCOPE_SINGLETON_@see #SCOPE_PROTOTYPE;public void setScope(String scope) {_		this.scope = scope__		this.singleton = SCOPE_SINGLETON.equals(scope) || SCOPE_DEFAULT.equals(scope)__		this.prototype = SCOPE_PROTOTYPE.equals(scope)__	};set,the,name,of,the,target,scope,for,the,bean,p,default,is,singleton,status,although,this,is,only,applied,once,a,bean,definition,becomes,active,in,the,containing,factory,a,bean,definition,may,eventually,inherit,its,scope,from,a,parent,bean,definition,for,this,reason,the,default,scope,name,is,empty,empty,string,with,singleton,status,being,assumed,until,a,resolved,scope,will,be,set,see,see;public,void,set,scope,string,scope,this,scope,scope,this,singleton,equals,scope,equals,scope,this,prototype,equals,scope
AbstractBeanDefinition -> public void setScope(String scope);1367508310;Set the name of the target scope for the bean._<p>Default is singleton status, although this is only applied once_a bean definition becomes active in the containing factory. A bean_definition may eventually inherit its scope from a parent bean definitionFor this_reason, the default scope name is empty (empty String), with_singleton status being assumed until a resolved scope will be set._@see #SCOPE_SINGLETON_@see #SCOPE_PROTOTYPE;public void setScope(String scope) {_		this.scope = scope__		this.singleton = SCOPE_SINGLETON.equals(scope) || SCOPE_DEFAULT.equals(scope)__		this.prototype = SCOPE_PROTOTYPE.equals(scope)__	};set,the,name,of,the,target,scope,for,the,bean,p,default,is,singleton,status,although,this,is,only,applied,once,a,bean,definition,becomes,active,in,the,containing,factory,a,bean,definition,may,eventually,inherit,its,scope,from,a,parent,bean,definition,for,this,reason,the,default,scope,name,is,empty,empty,string,with,singleton,status,being,assumed,until,a,resolved,scope,will,be,set,see,see;public,void,set,scope,string,scope,this,scope,scope,this,singleton,equals,scope,equals,scope,this,prototype,equals,scope
AbstractBeanDefinition -> public void setScope(String scope);1367943112;Set the name of the target scope for the bean._<p>Default is singleton status, although this is only applied once_a bean definition becomes active in the containing factory. A bean_definition may eventually inherit its scope from a parent bean definitionFor this_reason, the default scope name is empty (empty String), with_singleton status being assumed until a resolved scope will be set._@see #SCOPE_SINGLETON_@see #SCOPE_PROTOTYPE;public void setScope(String scope) {_		this.scope = scope__	};set,the,name,of,the,target,scope,for,the,bean,p,default,is,singleton,status,although,this,is,only,applied,once,a,bean,definition,becomes,active,in,the,containing,factory,a,bean,definition,may,eventually,inherit,its,scope,from,a,parent,bean,definition,for,this,reason,the,default,scope,name,is,empty,empty,string,with,singleton,status,being,assumed,until,a,resolved,scope,will,be,set,see,see;public,void,set,scope,string,scope,this,scope,scope
AbstractBeanDefinition -> public boolean hasQualifier(String typeName);1328020251;Return whether this bean has the specified qualifier.;public boolean hasQualifier(String typeName) {_		return this.qualifiers.keySet().contains(typeName)__	};return,whether,this,bean,has,the,specified,qualifier;public,boolean,has,qualifier,string,type,name,return,this,qualifiers,key,set,contains,type,name
AbstractBeanDefinition -> public boolean hasQualifier(String typeName);1337202589;Return whether this bean has the specified qualifier.;public boolean hasQualifier(String typeName) {_		return this.qualifiers.keySet().contains(typeName)__	};return,whether,this,bean,has,the,specified,qualifier;public,boolean,has,qualifier,string,type,name,return,this,qualifiers,key,set,contains,type,name
AbstractBeanDefinition -> public boolean hasQualifier(String typeName);1356735495;Return whether this bean has the specified qualifier.;public boolean hasQualifier(String typeName) {_		return this.qualifiers.keySet().contains(typeName)__	};return,whether,this,bean,has,the,specified,qualifier;public,boolean,has,qualifier,string,type,name,return,this,qualifiers,key,set,contains,type,name
AbstractBeanDefinition -> public boolean hasQualifier(String typeName);1357119239;Return whether this bean has the specified qualifier.;public boolean hasQualifier(String typeName) {_		return this.qualifiers.keySet().contains(typeName)__	};return,whether,this,bean,has,the,specified,qualifier;public,boolean,has,qualifier,string,type,name,return,this,qualifiers,key,set,contains,type,name
AbstractBeanDefinition -> public boolean hasQualifier(String typeName);1367508310;Return whether this bean has the specified qualifier.;public boolean hasQualifier(String typeName) {_		return this.qualifiers.keySet().contains(typeName)__	};return,whether,this,bean,has,the,specified,qualifier;public,boolean,has,qualifier,string,type,name,return,this,qualifiers,key,set,contains,type,name
AbstractBeanDefinition -> public boolean hasQualifier(String typeName);1367943112;Return whether this bean has the specified qualifier.;public boolean hasQualifier(String typeName) {_		return this.qualifiers.keySet().contains(typeName)__	};return,whether,this,bean,has,the,specified,qualifier;public,boolean,has,qualifier,string,type,name,return,this,qualifiers,key,set,contains,type,name
AbstractBeanDefinition -> public boolean hasQualifier(String typeName);1368482696;Return whether this bean has the specified qualifier.;public boolean hasQualifier(String typeName) {_		return this.qualifiers.keySet().contains(typeName)__	};return,whether,this,bean,has,the,specified,qualifier;public,boolean,has,qualifier,string,type,name,return,this,qualifiers,key,set,contains,type,name
AbstractBeanDefinition -> public boolean hasQualifier(String typeName);1385412762;Return whether this bean has the specified qualifier.;public boolean hasQualifier(String typeName) {_		return this.qualifiers.keySet().contains(typeName)__	};return,whether,this,bean,has,the,specified,qualifier;public,boolean,has,qualifier,string,type,name,return,this,qualifiers,key,set,contains,type,name
AbstractBeanDefinition -> public boolean hasQualifier(String typeName);1392245317;Return whether this bean has the specified qualifier.;public boolean hasQualifier(String typeName) {_		return this.qualifiers.keySet().contains(typeName)__	};return,whether,this,bean,has,the,specified,qualifier;public,boolean,has,qualifier,string,type,name,return,this,qualifiers,key,set,contains,type,name
AbstractBeanDefinition -> public boolean hasQualifier(String typeName);1397163142;Return whether this bean has the specified qualifier.;public boolean hasQualifier(String typeName) {_		return this.qualifiers.keySet().contains(typeName)__	};return,whether,this,bean,has,the,specified,qualifier;public,boolean,has,qualifier,string,type,name,return,this,qualifiers,key,set,contains,type,name
AbstractBeanDefinition -> public boolean hasQualifier(String typeName);1398898390;Return whether this bean has the specified qualifier.;public boolean hasQualifier(String typeName) {_		return this.qualifiers.keySet().contains(typeName)__	};return,whether,this,bean,has,the,specified,qualifier;public,boolean,has,qualifier,string,type,name,return,this,qualifiers,key,set,contains,type,name
AbstractBeanDefinition -> public boolean hasQualifier(String typeName);1407511029;Return whether this bean has the specified qualifier.;public boolean hasQualifier(String typeName) {_		return this.qualifiers.keySet().contains(typeName)__	};return,whether,this,bean,has,the,specified,qualifier;public,boolean,has,qualifier,string,type,name,return,this,qualifiers,key,set,contains,type,name
AbstractBeanDefinition -> public boolean hasQualifier(String typeName);1432135182;Return whether this bean has the specified qualifier.;public boolean hasQualifier(String typeName) {_		return this.qualifiers.keySet().contains(typeName)__	};return,whether,this,bean,has,the,specified,qualifier;public,boolean,has,qualifier,string,type,name,return,this,qualifiers,key,set,contains,type,name
AbstractBeanDefinition -> public boolean hasQualifier(String typeName);1434204509;Return whether this bean has the specified qualifier.;public boolean hasQualifier(String typeName) {_		return this.qualifiers.keySet().contains(typeName)__	};return,whether,this,bean,has,the,specified,qualifier;public,boolean,has,qualifier,string,type,name,return,this,qualifiers,key,set,contains,type,name
AbstractBeanDefinition -> public boolean hasQualifier(String typeName);1447323728;Return whether this bean has the specified qualifier.;public boolean hasQualifier(String typeName) {_		return this.qualifiers.keySet().contains(typeName)__	};return,whether,this,bean,has,the,specified,qualifier;public,boolean,has,qualifier,string,type,name,return,this,qualifiers,key,set,contains,type,name
AbstractBeanDefinition -> public boolean hasQualifier(String typeName);1465226156;Return whether this bean has the specified qualifier.;public boolean hasQualifier(String typeName) {_		return this.qualifiers.keySet().contains(typeName)__	};return,whether,this,bean,has,the,specified,qualifier;public,boolean,has,qualifier,string,type,name,return,this,qualifiers,key,set,contains,type,name
AbstractBeanDefinition -> public boolean hasQualifier(String typeName);1467730834;Return whether this bean has the specified qualifier.;public boolean hasQualifier(String typeName) {_		return this.qualifiers.keySet().contains(typeName)__	};return,whether,this,bean,has,the,specified,qualifier;public,boolean,has,qualifier,string,type,name,return,this,qualifiers,key,set,contains,type,name
AbstractBeanDefinition -> public boolean hasQualifier(String typeName);1467846264;Return whether this bean has the specified qualifier.;public boolean hasQualifier(String typeName) {_		return this.qualifiers.keySet().contains(typeName)__	};return,whether,this,bean,has,the,specified,qualifier;public,boolean,has,qualifier,string,type,name,return,this,qualifiers,key,set,contains,type,name
AbstractBeanDefinition -> public boolean hasQualifier(String typeName);1482091545;Return whether this bean has the specified qualifier.;public boolean hasQualifier(String typeName) {_		return this.qualifiers.keySet().contains(typeName)__	};return,whether,this,bean,has,the,specified,qualifier;public,boolean,has,qualifier,string,type,name,return,this,qualifiers,key,set,contains,type,name
AbstractBeanDefinition -> public boolean hasQualifier(String typeName);1483093818;Return whether this bean has the specified qualifier.;public boolean hasQualifier(String typeName) {_		return this.qualifiers.keySet().contains(typeName)__	};return,whether,this,bean,has,the,specified,qualifier;public,boolean,has,qualifier,string,type,name,return,this,qualifiers,key,set,contains,type,name
AbstractBeanDefinition -> public boolean hasQualifier(String typeName);1495868221;Return whether this bean has the specified qualifier.;public boolean hasQualifier(String typeName) {_		return this.qualifiers.keySet().contains(typeName)__	};return,whether,this,bean,has,the,specified,qualifier;public,boolean,has,qualifier,string,type,name,return,this,qualifiers,key,set,contains,type,name
AbstractBeanDefinition -> public boolean hasQualifier(String typeName);1496837955;Return whether this bean has the specified qualifier.;public boolean hasQualifier(String typeName) {_		return this.qualifiers.keySet().contains(typeName)__	};return,whether,this,bean,has,the,specified,qualifier;public,boolean,has,qualifier,string,type,name,return,this,qualifiers,key,set,contains,type,name
AbstractBeanDefinition -> public boolean hasQualifier(String typeName);1498780456;Return whether this bean has the specified qualifier.;public boolean hasQualifier(String typeName) {_		return this.qualifiers.keySet().contains(typeName)__	};return,whether,this,bean,has,the,specified,qualifier;public,boolean,has,qualifier,string,type,name,return,this,qualifiers,key,set,contains,type,name
AbstractBeanDefinition -> public boolean hasQualifier(String typeName);1502974979;Return whether this bean has the specified qualifier.;public boolean hasQualifier(String typeName) {_		return this.qualifiers.keySet().contains(typeName)__	};return,whether,this,bean,has,the,specified,qualifier;public,boolean,has,qualifier,string,type,name,return,this,qualifiers,key,set,contains,type,name
AbstractBeanDefinition -> public boolean hasQualifier(String typeName);1503008029;Return whether this bean has the specified qualifier.;public boolean hasQualifier(String typeName) {_		return this.qualifiers.keySet().contains(typeName)__	};return,whether,this,bean,has,the,specified,qualifier;public,boolean,has,qualifier,string,type,name,return,this,qualifiers,key,set,contains,type,name
AbstractBeanDefinition -> public boolean hasQualifier(String typeName);1510606271;Return whether this bean has the specified qualifier.;public boolean hasQualifier(String typeName) {_		return this.qualifiers.keySet().contains(typeName)__	};return,whether,this,bean,has,the,specified,qualifier;public,boolean,has,qualifier,string,type,name,return,this,qualifiers,key,set,contains,type,name
AbstractBeanDefinition -> public boolean hasQualifier(String typeName);1510675876;Return whether this bean has the specified qualifier.;public boolean hasQualifier(String typeName) {_		return this.qualifiers.keySet().contains(typeName)__	};return,whether,this,bean,has,the,specified,qualifier;public,boolean,has,qualifier,string,type,name,return,this,qualifiers,key,set,contains,type,name
AbstractBeanDefinition -> public boolean hasQualifier(String typeName);1530174524;Return whether this bean has the specified qualifier.;public boolean hasQualifier(String typeName) {_		return this.qualifiers.keySet().contains(typeName)__	};return,whether,this,bean,has,the,specified,qualifier;public,boolean,has,qualifier,string,type,name,return,this,qualifiers,key,set,contains,type,name
AbstractBeanDefinition -> public boolean hasQualifier(String typeName);1530174524;Return whether this bean has the specified qualifier.;public boolean hasQualifier(String typeName) {_		return this.qualifiers.keySet().contains(typeName)__	};return,whether,this,bean,has,the,specified,qualifier;public,boolean,has,qualifier,string,type,name,return,this,qualifiers,key,set,contains,type,name
AbstractBeanDefinition -> public boolean hasQualifier(String typeName);1530174524;Return whether this bean has the specified qualifier.;public boolean hasQualifier(String typeName) {_		return this.qualifiers.keySet().contains(typeName)__	};return,whether,this,bean,has,the,specified,qualifier;public,boolean,has,qualifier,string,type,name,return,this,qualifiers,key,set,contains,type,name
AbstractBeanDefinition -> public boolean hasQualifier(String typeName);1530190293;Return whether this bean has the specified qualifier.;public boolean hasQualifier(String typeName) {_		return this.qualifiers.keySet().contains(typeName)__	};return,whether,this,bean,has,the,specified,qualifier;public,boolean,has,qualifier,string,type,name,return,this,qualifiers,key,set,contains,type,name
AbstractBeanDefinition -> public boolean hasQualifier(String typeName);1532981251;Return whether this bean has the specified qualifier.;public boolean hasQualifier(String typeName) {_		return this.qualifiers.keySet().contains(typeName)__	};return,whether,this,bean,has,the,specified,qualifier;public,boolean,has,qualifier,string,type,name,return,this,qualifiers,key,set,contains,type,name
AbstractBeanDefinition -> public boolean hasQualifier(String typeName);1536863076;Return whether this bean has the specified qualifier.;public boolean hasQualifier(String typeName) {_		return this.qualifiers.keySet().contains(typeName)__	};return,whether,this,bean,has,the,specified,qualifier;public,boolean,has,qualifier,string,type,name,return,this,qualifiers,key,set,contains,type,name
AbstractBeanDefinition -> @Override 	public void setFactoryMethodName(@Nullable String factoryMethodName);1496837955;Specify a factory method, if any. This method will be invoked with_constructor arguments, or with no arguments if none are specified._The method will be invoked on the specified factory bean, if any,_or otherwise as a static method on the local bean class._@see #setFactoryBeanName_@see #setBeanClassName;@Override_	public void setFactoryMethodName(@Nullable String factoryMethodName) {_		this.factoryMethodName = factoryMethodName__	};specify,a,factory,method,if,any,this,method,will,be,invoked,with,constructor,arguments,or,with,no,arguments,if,none,are,specified,the,method,will,be,invoked,on,the,specified,factory,bean,if,any,or,otherwise,as,a,static,method,on,the,local,bean,class,see,set,factory,bean,name,see,set,bean,class,name;override,public,void,set,factory,method,name,nullable,string,factory,method,name,this,factory,method,name,factory,method,name
AbstractBeanDefinition -> @Override 	public void setFactoryMethodName(@Nullable String factoryMethodName);1498780456;Specify a factory method, if any. This method will be invoked with_constructor arguments, or with no arguments if none are specified._The method will be invoked on the specified factory bean, if any,_or otherwise as a static method on the local bean class._@see #setFactoryBeanName_@see #setBeanClassName;@Override_	public void setFactoryMethodName(@Nullable String factoryMethodName) {_		this.factoryMethodName = factoryMethodName__	};specify,a,factory,method,if,any,this,method,will,be,invoked,with,constructor,arguments,or,with,no,arguments,if,none,are,specified,the,method,will,be,invoked,on,the,specified,factory,bean,if,any,or,otherwise,as,a,static,method,on,the,local,bean,class,see,set,factory,bean,name,see,set,bean,class,name;override,public,void,set,factory,method,name,nullable,string,factory,method,name,this,factory,method,name,factory,method,name
AbstractBeanDefinition -> @Override 	public void setFactoryMethodName(@Nullable String factoryMethodName);1502974979;Specify a factory method, if any. This method will be invoked with_constructor arguments, or with no arguments if none are specified._The method will be invoked on the specified factory bean, if any,_or otherwise as a static method on the local bean class._@see #setFactoryBeanName_@see #setBeanClassName;@Override_	public void setFactoryMethodName(@Nullable String factoryMethodName) {_		this.factoryMethodName = factoryMethodName__	};specify,a,factory,method,if,any,this,method,will,be,invoked,with,constructor,arguments,or,with,no,arguments,if,none,are,specified,the,method,will,be,invoked,on,the,specified,factory,bean,if,any,or,otherwise,as,a,static,method,on,the,local,bean,class,see,set,factory,bean,name,see,set,bean,class,name;override,public,void,set,factory,method,name,nullable,string,factory,method,name,this,factory,method,name,factory,method,name
AbstractBeanDefinition -> @Override 	public void setFactoryMethodName(@Nullable String factoryMethodName);1503008029;Specify a factory method, if any. This method will be invoked with_constructor arguments, or with no arguments if none are specified._The method will be invoked on the specified factory bean, if any,_or otherwise as a static method on the local bean class._@see #setFactoryBeanName_@see #setBeanClassName;@Override_	public void setFactoryMethodName(@Nullable String factoryMethodName) {_		this.factoryMethodName = factoryMethodName__	};specify,a,factory,method,if,any,this,method,will,be,invoked,with,constructor,arguments,or,with,no,arguments,if,none,are,specified,the,method,will,be,invoked,on,the,specified,factory,bean,if,any,or,otherwise,as,a,static,method,on,the,local,bean,class,see,set,factory,bean,name,see,set,bean,class,name;override,public,void,set,factory,method,name,nullable,string,factory,method,name,this,factory,method,name,factory,method,name
AbstractBeanDefinition -> @Override 	public void setFactoryMethodName(@Nullable String factoryMethodName);1510606271;Specify a factory method, if any. This method will be invoked with_constructor arguments, or with no arguments if none are specified._The method will be invoked on the specified factory bean, if any,_or otherwise as a static method on the local bean class._@see #setFactoryBeanName_@see #setBeanClassName;@Override_	public void setFactoryMethodName(@Nullable String factoryMethodName) {_		this.factoryMethodName = factoryMethodName__	};specify,a,factory,method,if,any,this,method,will,be,invoked,with,constructor,arguments,or,with,no,arguments,if,none,are,specified,the,method,will,be,invoked,on,the,specified,factory,bean,if,any,or,otherwise,as,a,static,method,on,the,local,bean,class,see,set,factory,bean,name,see,set,bean,class,name;override,public,void,set,factory,method,name,nullable,string,factory,method,name,this,factory,method,name,factory,method,name
AbstractBeanDefinition -> @Override 	public void setFactoryMethodName(@Nullable String factoryMethodName);1510675876;Specify a factory method, if any. This method will be invoked with_constructor arguments, or with no arguments if none are specified._The method will be invoked on the specified factory bean, if any,_or otherwise as a static method on the local bean class._@see #setFactoryBeanName_@see #setBeanClassName;@Override_	public void setFactoryMethodName(@Nullable String factoryMethodName) {_		this.factoryMethodName = factoryMethodName__	};specify,a,factory,method,if,any,this,method,will,be,invoked,with,constructor,arguments,or,with,no,arguments,if,none,are,specified,the,method,will,be,invoked,on,the,specified,factory,bean,if,any,or,otherwise,as,a,static,method,on,the,local,bean,class,see,set,factory,bean,name,see,set,bean,class,name;override,public,void,set,factory,method,name,nullable,string,factory,method,name,this,factory,method,name,factory,method,name
AbstractBeanDefinition -> @Override 	public void setFactoryMethodName(@Nullable String factoryMethodName);1530174524;Specify a factory method, if any. This method will be invoked with_constructor arguments, or with no arguments if none are specified._The method will be invoked on the specified factory bean, if any,_or otherwise as a static method on the local bean class._@see #setFactoryBeanName_@see #setBeanClassName;@Override_	public void setFactoryMethodName(@Nullable String factoryMethodName) {_		this.factoryMethodName = factoryMethodName__	};specify,a,factory,method,if,any,this,method,will,be,invoked,with,constructor,arguments,or,with,no,arguments,if,none,are,specified,the,method,will,be,invoked,on,the,specified,factory,bean,if,any,or,otherwise,as,a,static,method,on,the,local,bean,class,see,set,factory,bean,name,see,set,bean,class,name;override,public,void,set,factory,method,name,nullable,string,factory,method,name,this,factory,method,name,factory,method,name
AbstractBeanDefinition -> @Override 	public void setFactoryMethodName(@Nullable String factoryMethodName);1530174524;Specify a factory method, if any. This method will be invoked with_constructor arguments, or with no arguments if none are specified._The method will be invoked on the specified factory bean, if any,_or otherwise as a static method on the local bean class._@see #setFactoryBeanName_@see #setBeanClassName;@Override_	public void setFactoryMethodName(@Nullable String factoryMethodName) {_		this.factoryMethodName = factoryMethodName__	};specify,a,factory,method,if,any,this,method,will,be,invoked,with,constructor,arguments,or,with,no,arguments,if,none,are,specified,the,method,will,be,invoked,on,the,specified,factory,bean,if,any,or,otherwise,as,a,static,method,on,the,local,bean,class,see,set,factory,bean,name,see,set,bean,class,name;override,public,void,set,factory,method,name,nullable,string,factory,method,name,this,factory,method,name,factory,method,name
AbstractBeanDefinition -> @Override 	public void setFactoryMethodName(@Nullable String factoryMethodName);1530174524;Specify a factory method, if any. This method will be invoked with_constructor arguments, or with no arguments if none are specified._The method will be invoked on the specified factory bean, if any,_or otherwise as a static method on the local bean class._@see #setFactoryBeanName_@see #setBeanClassName;@Override_	public void setFactoryMethodName(@Nullable String factoryMethodName) {_		this.factoryMethodName = factoryMethodName__	};specify,a,factory,method,if,any,this,method,will,be,invoked,with,constructor,arguments,or,with,no,arguments,if,none,are,specified,the,method,will,be,invoked,on,the,specified,factory,bean,if,any,or,otherwise,as,a,static,method,on,the,local,bean,class,see,set,factory,bean,name,see,set,bean,class,name;override,public,void,set,factory,method,name,nullable,string,factory,method,name,this,factory,method,name,factory,method,name
AbstractBeanDefinition -> @Override 	public void setFactoryMethodName(@Nullable String factoryMethodName);1530190293;Specify a factory method, if any. This method will be invoked with_constructor arguments, or with no arguments if none are specified._The method will be invoked on the specified factory bean, if any,_or otherwise as a static method on the local bean class._@see #setFactoryBeanName_@see #setBeanClassName;@Override_	public void setFactoryMethodName(@Nullable String factoryMethodName) {_		this.factoryMethodName = factoryMethodName__	};specify,a,factory,method,if,any,this,method,will,be,invoked,with,constructor,arguments,or,with,no,arguments,if,none,are,specified,the,method,will,be,invoked,on,the,specified,factory,bean,if,any,or,otherwise,as,a,static,method,on,the,local,bean,class,see,set,factory,bean,name,see,set,bean,class,name;override,public,void,set,factory,method,name,nullable,string,factory,method,name,this,factory,method,name,factory,method,name
AbstractBeanDefinition -> @Override 	public void setFactoryMethodName(@Nullable String factoryMethodName);1532981251;Specify a factory method, if any. This method will be invoked with_constructor arguments, or with no arguments if none are specified._The method will be invoked on the specified factory bean, if any,_or otherwise as a static method on the local bean class._@see #setFactoryBeanName_@see #setBeanClassName;@Override_	public void setFactoryMethodName(@Nullable String factoryMethodName) {_		this.factoryMethodName = factoryMethodName__	};specify,a,factory,method,if,any,this,method,will,be,invoked,with,constructor,arguments,or,with,no,arguments,if,none,are,specified,the,method,will,be,invoked,on,the,specified,factory,bean,if,any,or,otherwise,as,a,static,method,on,the,local,bean,class,see,set,factory,bean,name,see,set,bean,class,name;override,public,void,set,factory,method,name,nullable,string,factory,method,name,this,factory,method,name,factory,method,name
AbstractBeanDefinition -> @Override 	public void setFactoryMethodName(@Nullable String factoryMethodName);1536863076;Specify a factory method, if any. This method will be invoked with_constructor arguments, or with no arguments if none are specified._The method will be invoked on the specified factory bean, if any,_or otherwise as a static method on the local bean class._@see #setFactoryBeanName_@see #setBeanClassName;@Override_	public void setFactoryMethodName(@Nullable String factoryMethodName) {_		this.factoryMethodName = factoryMethodName__	};specify,a,factory,method,if,any,this,method,will,be,invoked,with,constructor,arguments,or,with,no,arguments,if,none,are,specified,the,method,will,be,invoked,on,the,specified,factory,bean,if,any,or,otherwise,as,a,static,method,on,the,local,bean,class,see,set,factory,bean,name,see,set,bean,class,name;override,public,void,set,factory,method,name,nullable,string,factory,method,name,this,factory,method,name,factory,method,name
AbstractBeanDefinition -> @Override 	public String getFactoryBeanName();1483093818;Return the factory bean name, if any.;@Override_	public String getFactoryBeanName() {_		return this.factoryBeanName__	};return,the,factory,bean,name,if,any;override,public,string,get,factory,bean,name,return,this,factory,bean,name
AbstractBeanDefinition -> @Override 	public String getFactoryBeanName();1495868221;Return the factory bean name, if any.;@Override_	public String getFactoryBeanName() {_		return this.factoryBeanName__	};return,the,factory,bean,name,if,any;override,public,string,get,factory,bean,name,return,this,factory,bean,name
AbstractBeanDefinition -> @Override 	public String getFactoryBeanName();1496837955;Return the factory bean name, if any.;@Override_	public String getFactoryBeanName() {_		return this.factoryBeanName__	};return,the,factory,bean,name,if,any;override,public,string,get,factory,bean,name,return,this,factory,bean,name
AbstractBeanDefinition -> @Override 	@Nullable 	public String getFactoryBeanName();1498780456;Return the factory bean name, if any.;@Override_	@Nullable_	public String getFactoryBeanName() {_		return this.factoryBeanName__	};return,the,factory,bean,name,if,any;override,nullable,public,string,get,factory,bean,name,return,this,factory,bean,name
AbstractBeanDefinition -> @Override 	@Nullable 	public String getFactoryBeanName();1502974979;Return the factory bean name, if any.;@Override_	@Nullable_	public String getFactoryBeanName() {_		return this.factoryBeanName__	};return,the,factory,bean,name,if,any;override,nullable,public,string,get,factory,bean,name,return,this,factory,bean,name
AbstractBeanDefinition -> @Override 	@Nullable 	public String getFactoryBeanName();1503008029;Return the factory bean name, if any.;@Override_	@Nullable_	public String getFactoryBeanName() {_		return this.factoryBeanName__	};return,the,factory,bean,name,if,any;override,nullable,public,string,get,factory,bean,name,return,this,factory,bean,name
AbstractBeanDefinition -> @Override 	@Nullable 	public String getFactoryBeanName();1510606271;Return the factory bean name, if any.;@Override_	@Nullable_	public String getFactoryBeanName() {_		return this.factoryBeanName__	};return,the,factory,bean,name,if,any;override,nullable,public,string,get,factory,bean,name,return,this,factory,bean,name
AbstractBeanDefinition -> @Override 	@Nullable 	public String getFactoryBeanName();1510675876;Return the factory bean name, if any.;@Override_	@Nullable_	public String getFactoryBeanName() {_		return this.factoryBeanName__	};return,the,factory,bean,name,if,any;override,nullable,public,string,get,factory,bean,name,return,this,factory,bean,name
AbstractBeanDefinition -> @Override 	@Nullable 	public String getFactoryBeanName();1530174524;Return the factory bean name, if any.;@Override_	@Nullable_	public String getFactoryBeanName() {_		return this.factoryBeanName__	};return,the,factory,bean,name,if,any;override,nullable,public,string,get,factory,bean,name,return,this,factory,bean,name
AbstractBeanDefinition -> @Override 	@Nullable 	public String getFactoryBeanName();1530174524;Return the factory bean name, if any.;@Override_	@Nullable_	public String getFactoryBeanName() {_		return this.factoryBeanName__	};return,the,factory,bean,name,if,any;override,nullable,public,string,get,factory,bean,name,return,this,factory,bean,name
AbstractBeanDefinition -> @Override 	@Nullable 	public String getFactoryBeanName();1530174524;Return the factory bean name, if any.;@Override_	@Nullable_	public String getFactoryBeanName() {_		return this.factoryBeanName__	};return,the,factory,bean,name,if,any;override,nullable,public,string,get,factory,bean,name,return,this,factory,bean,name
AbstractBeanDefinition -> @Override 	@Nullable 	public String getFactoryBeanName();1530190293;Return the factory bean name, if any.;@Override_	@Nullable_	public String getFactoryBeanName() {_		return this.factoryBeanName__	};return,the,factory,bean,name,if,any;override,nullable,public,string,get,factory,bean,name,return,this,factory,bean,name
AbstractBeanDefinition -> @Override 	@Nullable 	public String getFactoryBeanName();1532981251;Return the factory bean name, if any.;@Override_	@Nullable_	public String getFactoryBeanName() {_		return this.factoryBeanName__	};return,the,factory,bean,name,if,any;override,nullable,public,string,get,factory,bean,name,return,this,factory,bean,name
AbstractBeanDefinition -> @Override 	@Nullable 	public String getFactoryBeanName();1536863076;Return the factory bean name, if any.;@Override_	@Nullable_	public String getFactoryBeanName() {_		return this.factoryBeanName__	};return,the,factory,bean,name,if,any;override,nullable,public,string,get,factory,bean,name,return,this,factory,bean,name
AbstractBeanDefinition -> public boolean isNonPublicAccessAllowed();1328020251;Return whether to allow access to non-public constructors and methods.;public boolean isNonPublicAccessAllowed() {_		return this.nonPublicAccessAllowed__	};return,whether,to,allow,access,to,non,public,constructors,and,methods;public,boolean,is,non,public,access,allowed,return,this,non,public,access,allowed
AbstractBeanDefinition -> public boolean isNonPublicAccessAllowed();1337202589;Return whether to allow access to non-public constructors and methods.;public boolean isNonPublicAccessAllowed() {_		return this.nonPublicAccessAllowed__	};return,whether,to,allow,access,to,non,public,constructors,and,methods;public,boolean,is,non,public,access,allowed,return,this,non,public,access,allowed
AbstractBeanDefinition -> public boolean isNonPublicAccessAllowed();1356735495;Return whether to allow access to non-public constructors and methods.;public boolean isNonPublicAccessAllowed() {_		return this.nonPublicAccessAllowed__	};return,whether,to,allow,access,to,non,public,constructors,and,methods;public,boolean,is,non,public,access,allowed,return,this,non,public,access,allowed
AbstractBeanDefinition -> public boolean isNonPublicAccessAllowed();1357119239;Return whether to allow access to non-public constructors and methods.;public boolean isNonPublicAccessAllowed() {_		return this.nonPublicAccessAllowed__	};return,whether,to,allow,access,to,non,public,constructors,and,methods;public,boolean,is,non,public,access,allowed,return,this,non,public,access,allowed
AbstractBeanDefinition -> public boolean isNonPublicAccessAllowed();1367508310;Return whether to allow access to non-public constructors and methods.;public boolean isNonPublicAccessAllowed() {_		return this.nonPublicAccessAllowed__	};return,whether,to,allow,access,to,non,public,constructors,and,methods;public,boolean,is,non,public,access,allowed,return,this,non,public,access,allowed
AbstractBeanDefinition -> public boolean isNonPublicAccessAllowed();1367943112;Return whether to allow access to non-public constructors and methods.;public boolean isNonPublicAccessAllowed() {_		return this.nonPublicAccessAllowed__	};return,whether,to,allow,access,to,non,public,constructors,and,methods;public,boolean,is,non,public,access,allowed,return,this,non,public,access,allowed
AbstractBeanDefinition -> public boolean isNonPublicAccessAllowed();1368482696;Return whether to allow access to non-public constructors and methods.;public boolean isNonPublicAccessAllowed() {_		return this.nonPublicAccessAllowed__	};return,whether,to,allow,access,to,non,public,constructors,and,methods;public,boolean,is,non,public,access,allowed,return,this,non,public,access,allowed
AbstractBeanDefinition -> public boolean isNonPublicAccessAllowed();1385412762;Return whether to allow access to non-public constructors and methods.;public boolean isNonPublicAccessAllowed() {_		return this.nonPublicAccessAllowed__	};return,whether,to,allow,access,to,non,public,constructors,and,methods;public,boolean,is,non,public,access,allowed,return,this,non,public,access,allowed
AbstractBeanDefinition -> public boolean isNonPublicAccessAllowed();1392245317;Return whether to allow access to non-public constructors and methods.;public boolean isNonPublicAccessAllowed() {_		return this.nonPublicAccessAllowed__	};return,whether,to,allow,access,to,non,public,constructors,and,methods;public,boolean,is,non,public,access,allowed,return,this,non,public,access,allowed
AbstractBeanDefinition -> public boolean isNonPublicAccessAllowed();1397163142;Return whether to allow access to non-public constructors and methods.;public boolean isNonPublicAccessAllowed() {_		return this.nonPublicAccessAllowed__	};return,whether,to,allow,access,to,non,public,constructors,and,methods;public,boolean,is,non,public,access,allowed,return,this,non,public,access,allowed
AbstractBeanDefinition -> public boolean isNonPublicAccessAllowed();1398898390;Return whether to allow access to non-public constructors and methods.;public boolean isNonPublicAccessAllowed() {_		return this.nonPublicAccessAllowed__	};return,whether,to,allow,access,to,non,public,constructors,and,methods;public,boolean,is,non,public,access,allowed,return,this,non,public,access,allowed
AbstractBeanDefinition -> public boolean isNonPublicAccessAllowed();1407511029;Return whether to allow access to non-public constructors and methods.;public boolean isNonPublicAccessAllowed() {_		return this.nonPublicAccessAllowed__	};return,whether,to,allow,access,to,non,public,constructors,and,methods;public,boolean,is,non,public,access,allowed,return,this,non,public,access,allowed
AbstractBeanDefinition -> public boolean isNonPublicAccessAllowed();1432135182;Return whether to allow access to non-public constructors and methods.;public boolean isNonPublicAccessAllowed() {_		return this.nonPublicAccessAllowed__	};return,whether,to,allow,access,to,non,public,constructors,and,methods;public,boolean,is,non,public,access,allowed,return,this,non,public,access,allowed
AbstractBeanDefinition -> public boolean isNonPublicAccessAllowed();1434204509;Return whether to allow access to non-public constructors and methods.;public boolean isNonPublicAccessAllowed() {_		return this.nonPublicAccessAllowed__	};return,whether,to,allow,access,to,non,public,constructors,and,methods;public,boolean,is,non,public,access,allowed,return,this,non,public,access,allowed
AbstractBeanDefinition -> public boolean isNonPublicAccessAllowed();1447323728;Return whether to allow access to non-public constructors and methods.;public boolean isNonPublicAccessAllowed() {_		return this.nonPublicAccessAllowed__	};return,whether,to,allow,access,to,non,public,constructors,and,methods;public,boolean,is,non,public,access,allowed,return,this,non,public,access,allowed
AbstractBeanDefinition -> public boolean isNonPublicAccessAllowed();1465226156;Return whether to allow access to non-public constructors and methods.;public boolean isNonPublicAccessAllowed() {_		return this.nonPublicAccessAllowed__	};return,whether,to,allow,access,to,non,public,constructors,and,methods;public,boolean,is,non,public,access,allowed,return,this,non,public,access,allowed
AbstractBeanDefinition -> public boolean isNonPublicAccessAllowed();1467730834;Return whether to allow access to non-public constructors and methods.;public boolean isNonPublicAccessAllowed() {_		return this.nonPublicAccessAllowed__	};return,whether,to,allow,access,to,non,public,constructors,and,methods;public,boolean,is,non,public,access,allowed,return,this,non,public,access,allowed
AbstractBeanDefinition -> public boolean isNonPublicAccessAllowed();1467846264;Return whether to allow access to non-public constructors and methods.;public boolean isNonPublicAccessAllowed() {_		return this.nonPublicAccessAllowed__	};return,whether,to,allow,access,to,non,public,constructors,and,methods;public,boolean,is,non,public,access,allowed,return,this,non,public,access,allowed
AbstractBeanDefinition -> public boolean isNonPublicAccessAllowed();1482091545;Return whether to allow access to non-public constructors and methods.;public boolean isNonPublicAccessAllowed() {_		return this.nonPublicAccessAllowed__	};return,whether,to,allow,access,to,non,public,constructors,and,methods;public,boolean,is,non,public,access,allowed,return,this,non,public,access,allowed
AbstractBeanDefinition -> public boolean isNonPublicAccessAllowed();1483093818;Return whether to allow access to non-public constructors and methods.;public boolean isNonPublicAccessAllowed() {_		return this.nonPublicAccessAllowed__	};return,whether,to,allow,access,to,non,public,constructors,and,methods;public,boolean,is,non,public,access,allowed,return,this,non,public,access,allowed
AbstractBeanDefinition -> public boolean isNonPublicAccessAllowed();1495868221;Return whether to allow access to non-public constructors and methods.;public boolean isNonPublicAccessAllowed() {_		return this.nonPublicAccessAllowed__	};return,whether,to,allow,access,to,non,public,constructors,and,methods;public,boolean,is,non,public,access,allowed,return,this,non,public,access,allowed
AbstractBeanDefinition -> public boolean isNonPublicAccessAllowed();1496837955;Return whether to allow access to non-public constructors and methods.;public boolean isNonPublicAccessAllowed() {_		return this.nonPublicAccessAllowed__	};return,whether,to,allow,access,to,non,public,constructors,and,methods;public,boolean,is,non,public,access,allowed,return,this,non,public,access,allowed
AbstractBeanDefinition -> public boolean isNonPublicAccessAllowed();1498780456;Return whether to allow access to non-public constructors and methods.;public boolean isNonPublicAccessAllowed() {_		return this.nonPublicAccessAllowed__	};return,whether,to,allow,access,to,non,public,constructors,and,methods;public,boolean,is,non,public,access,allowed,return,this,non,public,access,allowed
AbstractBeanDefinition -> public boolean isNonPublicAccessAllowed();1502974979;Return whether to allow access to non-public constructors and methods.;public boolean isNonPublicAccessAllowed() {_		return this.nonPublicAccessAllowed__	};return,whether,to,allow,access,to,non,public,constructors,and,methods;public,boolean,is,non,public,access,allowed,return,this,non,public,access,allowed
AbstractBeanDefinition -> public boolean isNonPublicAccessAllowed();1503008029;Return whether to allow access to non-public constructors and methods.;public boolean isNonPublicAccessAllowed() {_		return this.nonPublicAccessAllowed__	};return,whether,to,allow,access,to,non,public,constructors,and,methods;public,boolean,is,non,public,access,allowed,return,this,non,public,access,allowed
AbstractBeanDefinition -> public boolean isNonPublicAccessAllowed();1510606271;Return whether to allow access to non-public constructors and methods.;public boolean isNonPublicAccessAllowed() {_		return this.nonPublicAccessAllowed__	};return,whether,to,allow,access,to,non,public,constructors,and,methods;public,boolean,is,non,public,access,allowed,return,this,non,public,access,allowed
AbstractBeanDefinition -> public boolean isNonPublicAccessAllowed();1510675876;Return whether to allow access to non-public constructors and methods.;public boolean isNonPublicAccessAllowed() {_		return this.nonPublicAccessAllowed__	};return,whether,to,allow,access,to,non,public,constructors,and,methods;public,boolean,is,non,public,access,allowed,return,this,non,public,access,allowed
AbstractBeanDefinition -> public boolean isNonPublicAccessAllowed();1530174524;Return whether to allow access to non-public constructors and methods.;public boolean isNonPublicAccessAllowed() {_		return this.nonPublicAccessAllowed__	};return,whether,to,allow,access,to,non,public,constructors,and,methods;public,boolean,is,non,public,access,allowed,return,this,non,public,access,allowed
AbstractBeanDefinition -> public boolean isNonPublicAccessAllowed();1530174524;Return whether to allow access to non-public constructors and methods.;public boolean isNonPublicAccessAllowed() {_		return this.nonPublicAccessAllowed__	};return,whether,to,allow,access,to,non,public,constructors,and,methods;public,boolean,is,non,public,access,allowed,return,this,non,public,access,allowed
AbstractBeanDefinition -> public boolean isNonPublicAccessAllowed();1530174524;Return whether to allow access to non-public constructors and methods.;public boolean isNonPublicAccessAllowed() {_		return this.nonPublicAccessAllowed__	};return,whether,to,allow,access,to,non,public,constructors,and,methods;public,boolean,is,non,public,access,allowed,return,this,non,public,access,allowed
AbstractBeanDefinition -> public boolean isNonPublicAccessAllowed();1530190293;Return whether to allow access to non-public constructors and methods.;public boolean isNonPublicAccessAllowed() {_		return this.nonPublicAccessAllowed__	};return,whether,to,allow,access,to,non,public,constructors,and,methods;public,boolean,is,non,public,access,allowed,return,this,non,public,access,allowed
AbstractBeanDefinition -> public boolean isNonPublicAccessAllowed();1532981251;Return whether to allow access to non-public constructors and methods.;public boolean isNonPublicAccessAllowed() {_		return this.nonPublicAccessAllowed__	};return,whether,to,allow,access,to,non,public,constructors,and,methods;public,boolean,is,non,public,access,allowed,return,this,non,public,access,allowed
AbstractBeanDefinition -> public boolean isNonPublicAccessAllowed();1536863076;Return whether to allow access to non-public constructors and methods.;public boolean isNonPublicAccessAllowed() {_		return this.nonPublicAccessAllowed__	};return,whether,to,allow,access,to,non,public,constructors,and,methods;public,boolean,is,non,public,access,allowed,return,this,non,public,access,allowed
AbstractBeanDefinition -> @Override 	public void setDependsOn(@Nullable String... dependsOn);1496837955;Set the names of the beans that this bean depends on being initialized._The bean factory will guarantee that these beans get initialized first._<p>Note that dependencies are normally expressed through bean properties or_constructor arguments. This property should just be necessary for other kinds_of dependencies like statics (*ugh*) or database preparation on startup.;@Override_	public void setDependsOn(@Nullable String... dependsOn) {_		this.dependsOn = dependsOn__	};set,the,names,of,the,beans,that,this,bean,depends,on,being,initialized,the,bean,factory,will,guarantee,that,these,beans,get,initialized,first,p,note,that,dependencies,are,normally,expressed,through,bean,properties,or,constructor,arguments,this,property,should,just,be,necessary,for,other,kinds,of,dependencies,like,statics,ugh,or,database,preparation,on,startup;override,public,void,set,depends,on,nullable,string,depends,on,this,depends,on,depends,on
AbstractBeanDefinition -> @Override 	public void setDependsOn(@Nullable String... dependsOn);1498780456;Set the names of the beans that this bean depends on being initialized._The bean factory will guarantee that these beans get initialized first._<p>Note that dependencies are normally expressed through bean properties or_constructor arguments. This property should just be necessary for other kinds_of dependencies like statics (*ugh*) or database preparation on startup.;@Override_	public void setDependsOn(@Nullable String... dependsOn) {_		this.dependsOn = dependsOn__	};set,the,names,of,the,beans,that,this,bean,depends,on,being,initialized,the,bean,factory,will,guarantee,that,these,beans,get,initialized,first,p,note,that,dependencies,are,normally,expressed,through,bean,properties,or,constructor,arguments,this,property,should,just,be,necessary,for,other,kinds,of,dependencies,like,statics,ugh,or,database,preparation,on,startup;override,public,void,set,depends,on,nullable,string,depends,on,this,depends,on,depends,on
AbstractBeanDefinition -> @Override 	public void setDependsOn(@Nullable String... dependsOn);1502974979;Set the names of the beans that this bean depends on being initialized._The bean factory will guarantee that these beans get initialized first._<p>Note that dependencies are normally expressed through bean properties or_constructor arguments. This property should just be necessary for other kinds_of dependencies like statics (*ugh*) or database preparation on startup.;@Override_	public void setDependsOn(@Nullable String... dependsOn) {_		this.dependsOn = dependsOn__	};set,the,names,of,the,beans,that,this,bean,depends,on,being,initialized,the,bean,factory,will,guarantee,that,these,beans,get,initialized,first,p,note,that,dependencies,are,normally,expressed,through,bean,properties,or,constructor,arguments,this,property,should,just,be,necessary,for,other,kinds,of,dependencies,like,statics,ugh,or,database,preparation,on,startup;override,public,void,set,depends,on,nullable,string,depends,on,this,depends,on,depends,on
AbstractBeanDefinition -> @Override 	public void setDependsOn(@Nullable String... dependsOn);1503008029;Set the names of the beans that this bean depends on being initialized._The bean factory will guarantee that these beans get initialized first._<p>Note that dependencies are normally expressed through bean properties or_constructor arguments. This property should just be necessary for other kinds_of dependencies like statics (*ugh*) or database preparation on startup.;@Override_	public void setDependsOn(@Nullable String... dependsOn) {_		this.dependsOn = dependsOn__	};set,the,names,of,the,beans,that,this,bean,depends,on,being,initialized,the,bean,factory,will,guarantee,that,these,beans,get,initialized,first,p,note,that,dependencies,are,normally,expressed,through,bean,properties,or,constructor,arguments,this,property,should,just,be,necessary,for,other,kinds,of,dependencies,like,statics,ugh,or,database,preparation,on,startup;override,public,void,set,depends,on,nullable,string,depends,on,this,depends,on,depends,on
AbstractBeanDefinition -> @Override 	public void setDependsOn(@Nullable String... dependsOn);1510606271;Set the names of the beans that this bean depends on being initialized._The bean factory will guarantee that these beans get initialized first._<p>Note that dependencies are normally expressed through bean properties or_constructor arguments. This property should just be necessary for other kinds_of dependencies like statics (*ugh*) or database preparation on startup.;@Override_	public void setDependsOn(@Nullable String... dependsOn) {_		this.dependsOn = dependsOn__	};set,the,names,of,the,beans,that,this,bean,depends,on,being,initialized,the,bean,factory,will,guarantee,that,these,beans,get,initialized,first,p,note,that,dependencies,are,normally,expressed,through,bean,properties,or,constructor,arguments,this,property,should,just,be,necessary,for,other,kinds,of,dependencies,like,statics,ugh,or,database,preparation,on,startup;override,public,void,set,depends,on,nullable,string,depends,on,this,depends,on,depends,on
AbstractBeanDefinition -> @Override 	public void setDependsOn(@Nullable String... dependsOn);1510675876;Set the names of the beans that this bean depends on being initialized._The bean factory will guarantee that these beans get initialized first._<p>Note that dependencies are normally expressed through bean properties or_constructor arguments. This property should just be necessary for other kinds_of dependencies like statics (*ugh*) or database preparation on startup.;@Override_	public void setDependsOn(@Nullable String... dependsOn) {_		this.dependsOn = dependsOn__	};set,the,names,of,the,beans,that,this,bean,depends,on,being,initialized,the,bean,factory,will,guarantee,that,these,beans,get,initialized,first,p,note,that,dependencies,are,normally,expressed,through,bean,properties,or,constructor,arguments,this,property,should,just,be,necessary,for,other,kinds,of,dependencies,like,statics,ugh,or,database,preparation,on,startup;override,public,void,set,depends,on,nullable,string,depends,on,this,depends,on,depends,on
AbstractBeanDefinition -> @Override 	public void setDependsOn(@Nullable String... dependsOn);1530174524;Set the names of the beans that this bean depends on being initialized._The bean factory will guarantee that these beans get initialized first._<p>Note that dependencies are normally expressed through bean properties or_constructor arguments. This property should just be necessary for other kinds_of dependencies like statics (*ugh*) or database preparation on startup.;@Override_	public void setDependsOn(@Nullable String... dependsOn) {_		this.dependsOn = dependsOn__	};set,the,names,of,the,beans,that,this,bean,depends,on,being,initialized,the,bean,factory,will,guarantee,that,these,beans,get,initialized,first,p,note,that,dependencies,are,normally,expressed,through,bean,properties,or,constructor,arguments,this,property,should,just,be,necessary,for,other,kinds,of,dependencies,like,statics,ugh,or,database,preparation,on,startup;override,public,void,set,depends,on,nullable,string,depends,on,this,depends,on,depends,on
AbstractBeanDefinition -> @Override 	public void setDependsOn(@Nullable String... dependsOn);1530174524;Set the names of the beans that this bean depends on being initialized._The bean factory will guarantee that these beans get initialized first._<p>Note that dependencies are normally expressed through bean properties or_constructor arguments. This property should just be necessary for other kinds_of dependencies like statics (*ugh*) or database preparation on startup.;@Override_	public void setDependsOn(@Nullable String... dependsOn) {_		this.dependsOn = dependsOn__	};set,the,names,of,the,beans,that,this,bean,depends,on,being,initialized,the,bean,factory,will,guarantee,that,these,beans,get,initialized,first,p,note,that,dependencies,are,normally,expressed,through,bean,properties,or,constructor,arguments,this,property,should,just,be,necessary,for,other,kinds,of,dependencies,like,statics,ugh,or,database,preparation,on,startup;override,public,void,set,depends,on,nullable,string,depends,on,this,depends,on,depends,on
AbstractBeanDefinition -> @Override 	public void setDependsOn(@Nullable String... dependsOn);1530174524;Set the names of the beans that this bean depends on being initialized._The bean factory will guarantee that these beans get initialized first._<p>Note that dependencies are normally expressed through bean properties or_constructor arguments. This property should just be necessary for other kinds_of dependencies like statics (*ugh*) or database preparation on startup.;@Override_	public void setDependsOn(@Nullable String... dependsOn) {_		this.dependsOn = dependsOn__	};set,the,names,of,the,beans,that,this,bean,depends,on,being,initialized,the,bean,factory,will,guarantee,that,these,beans,get,initialized,first,p,note,that,dependencies,are,normally,expressed,through,bean,properties,or,constructor,arguments,this,property,should,just,be,necessary,for,other,kinds,of,dependencies,like,statics,ugh,or,database,preparation,on,startup;override,public,void,set,depends,on,nullable,string,depends,on,this,depends,on,depends,on
AbstractBeanDefinition -> @Override 	public void setDependsOn(@Nullable String... dependsOn);1530190293;Set the names of the beans that this bean depends on being initialized._The bean factory will guarantee that these beans get initialized first._<p>Note that dependencies are normally expressed through bean properties or_constructor arguments. This property should just be necessary for other kinds_of dependencies like statics (*ugh*) or database preparation on startup.;@Override_	public void setDependsOn(@Nullable String... dependsOn) {_		this.dependsOn = dependsOn__	};set,the,names,of,the,beans,that,this,bean,depends,on,being,initialized,the,bean,factory,will,guarantee,that,these,beans,get,initialized,first,p,note,that,dependencies,are,normally,expressed,through,bean,properties,or,constructor,arguments,this,property,should,just,be,necessary,for,other,kinds,of,dependencies,like,statics,ugh,or,database,preparation,on,startup;override,public,void,set,depends,on,nullable,string,depends,on,this,depends,on,depends,on
AbstractBeanDefinition -> @Override 	public void setDependsOn(@Nullable String... dependsOn);1532981251;Set the names of the beans that this bean depends on being initialized._The bean factory will guarantee that these beans get initialized first._<p>Note that dependencies are normally expressed through bean properties or_constructor arguments. This property should just be necessary for other kinds_of dependencies like statics (*ugh*) or database preparation on startup.;@Override_	public void setDependsOn(@Nullable String... dependsOn) {_		this.dependsOn = dependsOn__	};set,the,names,of,the,beans,that,this,bean,depends,on,being,initialized,the,bean,factory,will,guarantee,that,these,beans,get,initialized,first,p,note,that,dependencies,are,normally,expressed,through,bean,properties,or,constructor,arguments,this,property,should,just,be,necessary,for,other,kinds,of,dependencies,like,statics,ugh,or,database,preparation,on,startup;override,public,void,set,depends,on,nullable,string,depends,on,this,depends,on,depends,on
AbstractBeanDefinition -> @Override 	public void setDependsOn(@Nullable String... dependsOn);1536863076;Set the names of the beans that this bean depends on being initialized._The bean factory will guarantee that these beans get initialized first._<p>Note that dependencies are normally expressed through bean properties or_constructor arguments. This property should just be necessary for other kinds_of dependencies like statics (*ugh*) or database preparation on startup.;@Override_	public void setDependsOn(@Nullable String... dependsOn) {_		this.dependsOn = dependsOn__	};set,the,names,of,the,beans,that,this,bean,depends,on,being,initialized,the,bean,factory,will,guarantee,that,these,beans,get,initialized,first,p,note,that,dependencies,are,normally,expressed,through,bean,properties,or,constructor,arguments,this,property,should,just,be,necessary,for,other,kinds,of,dependencies,like,statics,ugh,or,database,preparation,on,startup;override,public,void,set,depends,on,nullable,string,depends,on,this,depends,on,depends,on
AbstractBeanDefinition -> public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed);1328020251;Specify whether to allow access to non-public constructors and methods,_for the case of externalized metadata pointing to those._<p>This applies to constructor resolution, factory method resolution,_and also init/destroy methods. Bean property accessors have to be public_in any case and are not affected by this setting._<p>Note that annotation-driven configuration will still access non-public_members as far as they have been annotated. This setting applies to_externalized metadata in this bean definition only.;public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed) {_		this.nonPublicAccessAllowed = nonPublicAccessAllowed__	};specify,whether,to,allow,access,to,non,public,constructors,and,methods,for,the,case,of,externalized,metadata,pointing,to,those,p,this,applies,to,constructor,resolution,factory,method,resolution,and,also,init,destroy,methods,bean,property,accessors,have,to,be,public,in,any,case,and,are,not,affected,by,this,setting,p,note,that,annotation,driven,configuration,will,still,access,non,public,members,as,far,as,they,have,been,annotated,this,setting,applies,to,externalized,metadata,in,this,bean,definition,only;public,void,set,non,public,access,allowed,boolean,non,public,access,allowed,this,non,public,access,allowed,non,public,access,allowed
AbstractBeanDefinition -> public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed);1337202589;Specify whether to allow access to non-public constructors and methods,_for the case of externalized metadata pointing to those._<p>This applies to constructor resolution, factory method resolution,_and also init/destroy methods. Bean property accessors have to be public_in any case and are not affected by this setting._<p>Note that annotation-driven configuration will still access non-public_members as far as they have been annotated. This setting applies to_externalized metadata in this bean definition only.;public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed) {_		this.nonPublicAccessAllowed = nonPublicAccessAllowed__	};specify,whether,to,allow,access,to,non,public,constructors,and,methods,for,the,case,of,externalized,metadata,pointing,to,those,p,this,applies,to,constructor,resolution,factory,method,resolution,and,also,init,destroy,methods,bean,property,accessors,have,to,be,public,in,any,case,and,are,not,affected,by,this,setting,p,note,that,annotation,driven,configuration,will,still,access,non,public,members,as,far,as,they,have,been,annotated,this,setting,applies,to,externalized,metadata,in,this,bean,definition,only;public,void,set,non,public,access,allowed,boolean,non,public,access,allowed,this,non,public,access,allowed,non,public,access,allowed
AbstractBeanDefinition -> public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed);1356735495;Specify whether to allow access to non-public constructors and methods,_for the case of externalized metadata pointing to those._<p>This applies to constructor resolution, factory method resolution,_and also init/destroy methods. Bean property accessors have to be public_in any case and are not affected by this setting._<p>Note that annotation-driven configuration will still access non-public_members as far as they have been annotated. This setting applies to_externalized metadata in this bean definition only.;public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed) {_		this.nonPublicAccessAllowed = nonPublicAccessAllowed__	};specify,whether,to,allow,access,to,non,public,constructors,and,methods,for,the,case,of,externalized,metadata,pointing,to,those,p,this,applies,to,constructor,resolution,factory,method,resolution,and,also,init,destroy,methods,bean,property,accessors,have,to,be,public,in,any,case,and,are,not,affected,by,this,setting,p,note,that,annotation,driven,configuration,will,still,access,non,public,members,as,far,as,they,have,been,annotated,this,setting,applies,to,externalized,metadata,in,this,bean,definition,only;public,void,set,non,public,access,allowed,boolean,non,public,access,allowed,this,non,public,access,allowed,non,public,access,allowed
AbstractBeanDefinition -> public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed);1357119239;Specify whether to allow access to non-public constructors and methods,_for the case of externalized metadata pointing to those._<p>This applies to constructor resolution, factory method resolution,_and also init/destroy methods. Bean property accessors have to be public_in any case and are not affected by this setting._<p>Note that annotation-driven configuration will still access non-public_members as far as they have been annotated. This setting applies to_externalized metadata in this bean definition only.;public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed) {_		this.nonPublicAccessAllowed = nonPublicAccessAllowed__	};specify,whether,to,allow,access,to,non,public,constructors,and,methods,for,the,case,of,externalized,metadata,pointing,to,those,p,this,applies,to,constructor,resolution,factory,method,resolution,and,also,init,destroy,methods,bean,property,accessors,have,to,be,public,in,any,case,and,are,not,affected,by,this,setting,p,note,that,annotation,driven,configuration,will,still,access,non,public,members,as,far,as,they,have,been,annotated,this,setting,applies,to,externalized,metadata,in,this,bean,definition,only;public,void,set,non,public,access,allowed,boolean,non,public,access,allowed,this,non,public,access,allowed,non,public,access,allowed
AbstractBeanDefinition -> public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed);1367508310;Specify whether to allow access to non-public constructors and methods,_for the case of externalized metadata pointing to those._<p>This applies to constructor resolution, factory method resolution,_and also init/destroy methods. Bean property accessors have to be public_in any case and are not affected by this setting._<p>Note that annotation-driven configuration will still access non-public_members as far as they have been annotated. This setting applies to_externalized metadata in this bean definition only.;public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed) {_		this.nonPublicAccessAllowed = nonPublicAccessAllowed__	};specify,whether,to,allow,access,to,non,public,constructors,and,methods,for,the,case,of,externalized,metadata,pointing,to,those,p,this,applies,to,constructor,resolution,factory,method,resolution,and,also,init,destroy,methods,bean,property,accessors,have,to,be,public,in,any,case,and,are,not,affected,by,this,setting,p,note,that,annotation,driven,configuration,will,still,access,non,public,members,as,far,as,they,have,been,annotated,this,setting,applies,to,externalized,metadata,in,this,bean,definition,only;public,void,set,non,public,access,allowed,boolean,non,public,access,allowed,this,non,public,access,allowed,non,public,access,allowed
AbstractBeanDefinition -> public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed);1367943112;Specify whether to allow access to non-public constructors and methods,_for the case of externalized metadata pointing to those._<p>This applies to constructor resolution, factory method resolution,_and also init/destroy methods. Bean property accessors have to be public_in any case and are not affected by this setting._<p>Note that annotation-driven configuration will still access non-public_members as far as they have been annotated. This setting applies to_externalized metadata in this bean definition only.;public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed) {_		this.nonPublicAccessAllowed = nonPublicAccessAllowed__	};specify,whether,to,allow,access,to,non,public,constructors,and,methods,for,the,case,of,externalized,metadata,pointing,to,those,p,this,applies,to,constructor,resolution,factory,method,resolution,and,also,init,destroy,methods,bean,property,accessors,have,to,be,public,in,any,case,and,are,not,affected,by,this,setting,p,note,that,annotation,driven,configuration,will,still,access,non,public,members,as,far,as,they,have,been,annotated,this,setting,applies,to,externalized,metadata,in,this,bean,definition,only;public,void,set,non,public,access,allowed,boolean,non,public,access,allowed,this,non,public,access,allowed,non,public,access,allowed
AbstractBeanDefinition -> public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed);1368482696;Specify whether to allow access to non-public constructors and methods,_for the case of externalized metadata pointing to those._<p>This applies to constructor resolution, factory method resolution,_and also init/destroy methods. Bean property accessors have to be public_in any case and are not affected by this setting._<p>Note that annotation-driven configuration will still access non-public_members as far as they have been annotated. This setting applies to_externalized metadata in this bean definition only.;public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed) {_		this.nonPublicAccessAllowed = nonPublicAccessAllowed__	};specify,whether,to,allow,access,to,non,public,constructors,and,methods,for,the,case,of,externalized,metadata,pointing,to,those,p,this,applies,to,constructor,resolution,factory,method,resolution,and,also,init,destroy,methods,bean,property,accessors,have,to,be,public,in,any,case,and,are,not,affected,by,this,setting,p,note,that,annotation,driven,configuration,will,still,access,non,public,members,as,far,as,they,have,been,annotated,this,setting,applies,to,externalized,metadata,in,this,bean,definition,only;public,void,set,non,public,access,allowed,boolean,non,public,access,allowed,this,non,public,access,allowed,non,public,access,allowed
AbstractBeanDefinition -> public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed);1385412762;Specify whether to allow access to non-public constructors and methods,_for the case of externalized metadata pointing to those._<p>This applies to constructor resolution, factory method resolution,_and also init/destroy methods. Bean property accessors have to be public_in any case and are not affected by this setting._<p>Note that annotation-driven configuration will still access non-public_members as far as they have been annotated. This setting applies to_externalized metadata in this bean definition only.;public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed) {_		this.nonPublicAccessAllowed = nonPublicAccessAllowed__	};specify,whether,to,allow,access,to,non,public,constructors,and,methods,for,the,case,of,externalized,metadata,pointing,to,those,p,this,applies,to,constructor,resolution,factory,method,resolution,and,also,init,destroy,methods,bean,property,accessors,have,to,be,public,in,any,case,and,are,not,affected,by,this,setting,p,note,that,annotation,driven,configuration,will,still,access,non,public,members,as,far,as,they,have,been,annotated,this,setting,applies,to,externalized,metadata,in,this,bean,definition,only;public,void,set,non,public,access,allowed,boolean,non,public,access,allowed,this,non,public,access,allowed,non,public,access,allowed
AbstractBeanDefinition -> public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed);1392245317;Specify whether to allow access to non-public constructors and methods,_for the case of externalized metadata pointing to those._The default is {@code true}_ switch this to {@false} for public access only._<p>This applies to constructor resolution, factory method resolution,_and also init/destroy methods. Bean property accessors have to be public_in any case and are not affected by this setting._<p>Note that annotation-driven configuration will still access non-public_members as far as they have been annotated. This setting applies to_externalized metadata in this bean definition only.;public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed) {_		this.nonPublicAccessAllowed = nonPublicAccessAllowed__	};specify,whether,to,allow,access,to,non,public,constructors,and,methods,for,the,case,of,externalized,metadata,pointing,to,those,the,default,is,code,true,switch,this,to,false,for,public,access,only,p,this,applies,to,constructor,resolution,factory,method,resolution,and,also,init,destroy,methods,bean,property,accessors,have,to,be,public,in,any,case,and,are,not,affected,by,this,setting,p,note,that,annotation,driven,configuration,will,still,access,non,public,members,as,far,as,they,have,been,annotated,this,setting,applies,to,externalized,metadata,in,this,bean,definition,only;public,void,set,non,public,access,allowed,boolean,non,public,access,allowed,this,non,public,access,allowed,non,public,access,allowed
AbstractBeanDefinition -> public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed);1397163142;Specify whether to allow access to non-public constructors and methods,_for the case of externalized metadata pointing to those._The default is {@code true}_ switch this to {@false} for public access only._<p>This applies to constructor resolution, factory method resolution,_and also init/destroy methods. Bean property accessors have to be public_in any case and are not affected by this setting._<p>Note that annotation-driven configuration will still access non-public_members as far as they have been annotated. This setting applies to_externalized metadata in this bean definition only.;public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed) {_		this.nonPublicAccessAllowed = nonPublicAccessAllowed__	};specify,whether,to,allow,access,to,non,public,constructors,and,methods,for,the,case,of,externalized,metadata,pointing,to,those,the,default,is,code,true,switch,this,to,false,for,public,access,only,p,this,applies,to,constructor,resolution,factory,method,resolution,and,also,init,destroy,methods,bean,property,accessors,have,to,be,public,in,any,case,and,are,not,affected,by,this,setting,p,note,that,annotation,driven,configuration,will,still,access,non,public,members,as,far,as,they,have,been,annotated,this,setting,applies,to,externalized,metadata,in,this,bean,definition,only;public,void,set,non,public,access,allowed,boolean,non,public,access,allowed,this,non,public,access,allowed,non,public,access,allowed
AbstractBeanDefinition -> public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed);1398898390;Specify whether to allow access to non-public constructors and methods,_for the case of externalized metadata pointing to those. The default is_{@code true}_ switch this to {@code false} for public access only._<p>This applies to constructor resolution, factory method resolution,_and also init/destroy methods. Bean property accessors have to be public_in any case and are not affected by this setting._<p>Note that annotation-driven configuration will still access non-public_members as far as they have been annotated. This setting applies to_externalized metadata in this bean definition only.;public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed) {_		this.nonPublicAccessAllowed = nonPublicAccessAllowed__	};specify,whether,to,allow,access,to,non,public,constructors,and,methods,for,the,case,of,externalized,metadata,pointing,to,those,the,default,is,code,true,switch,this,to,code,false,for,public,access,only,p,this,applies,to,constructor,resolution,factory,method,resolution,and,also,init,destroy,methods,bean,property,accessors,have,to,be,public,in,any,case,and,are,not,affected,by,this,setting,p,note,that,annotation,driven,configuration,will,still,access,non,public,members,as,far,as,they,have,been,annotated,this,setting,applies,to,externalized,metadata,in,this,bean,definition,only;public,void,set,non,public,access,allowed,boolean,non,public,access,allowed,this,non,public,access,allowed,non,public,access,allowed
AbstractBeanDefinition -> public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed);1407511029;Specify whether to allow access to non-public constructors and methods,_for the case of externalized metadata pointing to those. The default is_{@code true}_ switch this to {@code false} for public access only._<p>This applies to constructor resolution, factory method resolution,_and also init/destroy methods. Bean property accessors have to be public_in any case and are not affected by this setting._<p>Note that annotation-driven configuration will still access non-public_members as far as they have been annotated. This setting applies to_externalized metadata in this bean definition only.;public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed) {_		this.nonPublicAccessAllowed = nonPublicAccessAllowed__	};specify,whether,to,allow,access,to,non,public,constructors,and,methods,for,the,case,of,externalized,metadata,pointing,to,those,the,default,is,code,true,switch,this,to,code,false,for,public,access,only,p,this,applies,to,constructor,resolution,factory,method,resolution,and,also,init,destroy,methods,bean,property,accessors,have,to,be,public,in,any,case,and,are,not,affected,by,this,setting,p,note,that,annotation,driven,configuration,will,still,access,non,public,members,as,far,as,they,have,been,annotated,this,setting,applies,to,externalized,metadata,in,this,bean,definition,only;public,void,set,non,public,access,allowed,boolean,non,public,access,allowed,this,non,public,access,allowed,non,public,access,allowed
AbstractBeanDefinition -> public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed);1432135182;Specify whether to allow access to non-public constructors and methods,_for the case of externalized metadata pointing to those. The default is_{@code true}_ switch this to {@code false} for public access only._<p>This applies to constructor resolution, factory method resolution,_and also init/destroy methods. Bean property accessors have to be public_in any case and are not affected by this setting._<p>Note that annotation-driven configuration will still access non-public_members as far as they have been annotated. This setting applies to_externalized metadata in this bean definition only.;public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed) {_		this.nonPublicAccessAllowed = nonPublicAccessAllowed__	};specify,whether,to,allow,access,to,non,public,constructors,and,methods,for,the,case,of,externalized,metadata,pointing,to,those,the,default,is,code,true,switch,this,to,code,false,for,public,access,only,p,this,applies,to,constructor,resolution,factory,method,resolution,and,also,init,destroy,methods,bean,property,accessors,have,to,be,public,in,any,case,and,are,not,affected,by,this,setting,p,note,that,annotation,driven,configuration,will,still,access,non,public,members,as,far,as,they,have,been,annotated,this,setting,applies,to,externalized,metadata,in,this,bean,definition,only;public,void,set,non,public,access,allowed,boolean,non,public,access,allowed,this,non,public,access,allowed,non,public,access,allowed
AbstractBeanDefinition -> public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed);1434204509;Specify whether to allow access to non-public constructors and methods,_for the case of externalized metadata pointing to those. The default is_{@code true}_ switch this to {@code false} for public access only._<p>This applies to constructor resolution, factory method resolution,_and also init/destroy methods. Bean property accessors have to be public_in any case and are not affected by this setting._<p>Note that annotation-driven configuration will still access non-public_members as far as they have been annotated. This setting applies to_externalized metadata in this bean definition only.;public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed) {_		this.nonPublicAccessAllowed = nonPublicAccessAllowed__	};specify,whether,to,allow,access,to,non,public,constructors,and,methods,for,the,case,of,externalized,metadata,pointing,to,those,the,default,is,code,true,switch,this,to,code,false,for,public,access,only,p,this,applies,to,constructor,resolution,factory,method,resolution,and,also,init,destroy,methods,bean,property,accessors,have,to,be,public,in,any,case,and,are,not,affected,by,this,setting,p,note,that,annotation,driven,configuration,will,still,access,non,public,members,as,far,as,they,have,been,annotated,this,setting,applies,to,externalized,metadata,in,this,bean,definition,only;public,void,set,non,public,access,allowed,boolean,non,public,access,allowed,this,non,public,access,allowed,non,public,access,allowed
AbstractBeanDefinition -> public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed);1447323728;Specify whether to allow access to non-public constructors and methods,_for the case of externalized metadata pointing to those. The default is_{@code true}_ switch this to {@code false} for public access only._<p>This applies to constructor resolution, factory method resolution,_and also init/destroy methods. Bean property accessors have to be public_in any case and are not affected by this setting._<p>Note that annotation-driven configuration will still access non-public_members as far as they have been annotated. This setting applies to_externalized metadata in this bean definition only.;public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed) {_		this.nonPublicAccessAllowed = nonPublicAccessAllowed__	};specify,whether,to,allow,access,to,non,public,constructors,and,methods,for,the,case,of,externalized,metadata,pointing,to,those,the,default,is,code,true,switch,this,to,code,false,for,public,access,only,p,this,applies,to,constructor,resolution,factory,method,resolution,and,also,init,destroy,methods,bean,property,accessors,have,to,be,public,in,any,case,and,are,not,affected,by,this,setting,p,note,that,annotation,driven,configuration,will,still,access,non,public,members,as,far,as,they,have,been,annotated,this,setting,applies,to,externalized,metadata,in,this,bean,definition,only;public,void,set,non,public,access,allowed,boolean,non,public,access,allowed,this,non,public,access,allowed,non,public,access,allowed
AbstractBeanDefinition -> public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed);1465226156;Specify whether to allow access to non-public constructors and methods,_for the case of externalized metadata pointing to those. The default is_{@code true}_ switch this to {@code false} for public access only._<p>This applies to constructor resolution, factory method resolution,_and also init/destroy methods. Bean property accessors have to be public_in any case and are not affected by this setting._<p>Note that annotation-driven configuration will still access non-public_members as far as they have been annotated. This setting applies to_externalized metadata in this bean definition only.;public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed) {_		this.nonPublicAccessAllowed = nonPublicAccessAllowed__	};specify,whether,to,allow,access,to,non,public,constructors,and,methods,for,the,case,of,externalized,metadata,pointing,to,those,the,default,is,code,true,switch,this,to,code,false,for,public,access,only,p,this,applies,to,constructor,resolution,factory,method,resolution,and,also,init,destroy,methods,bean,property,accessors,have,to,be,public,in,any,case,and,are,not,affected,by,this,setting,p,note,that,annotation,driven,configuration,will,still,access,non,public,members,as,far,as,they,have,been,annotated,this,setting,applies,to,externalized,metadata,in,this,bean,definition,only;public,void,set,non,public,access,allowed,boolean,non,public,access,allowed,this,non,public,access,allowed,non,public,access,allowed
AbstractBeanDefinition -> public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed);1467730834;Specify whether to allow access to non-public constructors and methods,_for the case of externalized metadata pointing to those. The default is_{@code true}_ switch this to {@code false} for public access only._<p>This applies to constructor resolution, factory method resolution,_and also init/destroy methods. Bean property accessors have to be public_in any case and are not affected by this setting._<p>Note that annotation-driven configuration will still access non-public_members as far as they have been annotated. This setting applies to_externalized metadata in this bean definition only.;public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed) {_		this.nonPublicAccessAllowed = nonPublicAccessAllowed__	};specify,whether,to,allow,access,to,non,public,constructors,and,methods,for,the,case,of,externalized,metadata,pointing,to,those,the,default,is,code,true,switch,this,to,code,false,for,public,access,only,p,this,applies,to,constructor,resolution,factory,method,resolution,and,also,init,destroy,methods,bean,property,accessors,have,to,be,public,in,any,case,and,are,not,affected,by,this,setting,p,note,that,annotation,driven,configuration,will,still,access,non,public,members,as,far,as,they,have,been,annotated,this,setting,applies,to,externalized,metadata,in,this,bean,definition,only;public,void,set,non,public,access,allowed,boolean,non,public,access,allowed,this,non,public,access,allowed,non,public,access,allowed
AbstractBeanDefinition -> public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed);1467846264;Specify whether to allow access to non-public constructors and methods,_for the case of externalized metadata pointing to those. The default is_{@code true}_ switch this to {@code false} for public access only._<p>This applies to constructor resolution, factory method resolution,_and also init/destroy methods. Bean property accessors have to be public_in any case and are not affected by this setting._<p>Note that annotation-driven configuration will still access non-public_members as far as they have been annotated. This setting applies to_externalized metadata in this bean definition only.;public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed) {_		this.nonPublicAccessAllowed = nonPublicAccessAllowed__	};specify,whether,to,allow,access,to,non,public,constructors,and,methods,for,the,case,of,externalized,metadata,pointing,to,those,the,default,is,code,true,switch,this,to,code,false,for,public,access,only,p,this,applies,to,constructor,resolution,factory,method,resolution,and,also,init,destroy,methods,bean,property,accessors,have,to,be,public,in,any,case,and,are,not,affected,by,this,setting,p,note,that,annotation,driven,configuration,will,still,access,non,public,members,as,far,as,they,have,been,annotated,this,setting,applies,to,externalized,metadata,in,this,bean,definition,only;public,void,set,non,public,access,allowed,boolean,non,public,access,allowed,this,non,public,access,allowed,non,public,access,allowed
AbstractBeanDefinition -> public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed);1482091545;Specify whether to allow access to non-public constructors and methods,_for the case of externalized metadata pointing to those. The default is_{@code true}_ switch this to {@code false} for public access only._<p>This applies to constructor resolution, factory method resolution,_and also init/destroy methods. Bean property accessors have to be public_in any case and are not affected by this setting._<p>Note that annotation-driven configuration will still access non-public_members as far as they have been annotated. This setting applies to_externalized metadata in this bean definition only.;public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed) {_		this.nonPublicAccessAllowed = nonPublicAccessAllowed__	};specify,whether,to,allow,access,to,non,public,constructors,and,methods,for,the,case,of,externalized,metadata,pointing,to,those,the,default,is,code,true,switch,this,to,code,false,for,public,access,only,p,this,applies,to,constructor,resolution,factory,method,resolution,and,also,init,destroy,methods,bean,property,accessors,have,to,be,public,in,any,case,and,are,not,affected,by,this,setting,p,note,that,annotation,driven,configuration,will,still,access,non,public,members,as,far,as,they,have,been,annotated,this,setting,applies,to,externalized,metadata,in,this,bean,definition,only;public,void,set,non,public,access,allowed,boolean,non,public,access,allowed,this,non,public,access,allowed,non,public,access,allowed
AbstractBeanDefinition -> public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed);1483093818;Specify whether to allow access to non-public constructors and methods,_for the case of externalized metadata pointing to those. The default is_{@code true}_ switch this to {@code false} for public access only._<p>This applies to constructor resolution, factory method resolution,_and also init/destroy methods. Bean property accessors have to be public_in any case and are not affected by this setting._<p>Note that annotation-driven configuration will still access non-public_members as far as they have been annotated. This setting applies to_externalized metadata in this bean definition only.;public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed) {_		this.nonPublicAccessAllowed = nonPublicAccessAllowed__	};specify,whether,to,allow,access,to,non,public,constructors,and,methods,for,the,case,of,externalized,metadata,pointing,to,those,the,default,is,code,true,switch,this,to,code,false,for,public,access,only,p,this,applies,to,constructor,resolution,factory,method,resolution,and,also,init,destroy,methods,bean,property,accessors,have,to,be,public,in,any,case,and,are,not,affected,by,this,setting,p,note,that,annotation,driven,configuration,will,still,access,non,public,members,as,far,as,they,have,been,annotated,this,setting,applies,to,externalized,metadata,in,this,bean,definition,only;public,void,set,non,public,access,allowed,boolean,non,public,access,allowed,this,non,public,access,allowed,non,public,access,allowed
AbstractBeanDefinition -> public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed);1495868221;Specify whether to allow access to non-public constructors and methods,_for the case of externalized metadata pointing to those. The default is_{@code true}_ switch this to {@code false} for public access only._<p>This applies to constructor resolution, factory method resolution,_and also init/destroy methods. Bean property accessors have to be public_in any case and are not affected by this setting._<p>Note that annotation-driven configuration will still access non-public_members as far as they have been annotated. This setting applies to_externalized metadata in this bean definition only.;public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed) {_		this.nonPublicAccessAllowed = nonPublicAccessAllowed__	};specify,whether,to,allow,access,to,non,public,constructors,and,methods,for,the,case,of,externalized,metadata,pointing,to,those,the,default,is,code,true,switch,this,to,code,false,for,public,access,only,p,this,applies,to,constructor,resolution,factory,method,resolution,and,also,init,destroy,methods,bean,property,accessors,have,to,be,public,in,any,case,and,are,not,affected,by,this,setting,p,note,that,annotation,driven,configuration,will,still,access,non,public,members,as,far,as,they,have,been,annotated,this,setting,applies,to,externalized,metadata,in,this,bean,definition,only;public,void,set,non,public,access,allowed,boolean,non,public,access,allowed,this,non,public,access,allowed,non,public,access,allowed
AbstractBeanDefinition -> public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed);1496837955;Specify whether to allow access to non-public constructors and methods,_for the case of externalized metadata pointing to those. The default is_{@code true}_ switch this to {@code false} for public access only._<p>This applies to constructor resolution, factory method resolution,_and also init/destroy methods. Bean property accessors have to be public_in any case and are not affected by this setting._<p>Note that annotation-driven configuration will still access non-public_members as far as they have been annotated. This setting applies to_externalized metadata in this bean definition only.;public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed) {_		this.nonPublicAccessAllowed = nonPublicAccessAllowed__	};specify,whether,to,allow,access,to,non,public,constructors,and,methods,for,the,case,of,externalized,metadata,pointing,to,those,the,default,is,code,true,switch,this,to,code,false,for,public,access,only,p,this,applies,to,constructor,resolution,factory,method,resolution,and,also,init,destroy,methods,bean,property,accessors,have,to,be,public,in,any,case,and,are,not,affected,by,this,setting,p,note,that,annotation,driven,configuration,will,still,access,non,public,members,as,far,as,they,have,been,annotated,this,setting,applies,to,externalized,metadata,in,this,bean,definition,only;public,void,set,non,public,access,allowed,boolean,non,public,access,allowed,this,non,public,access,allowed,non,public,access,allowed
AbstractBeanDefinition -> public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed);1498780456;Specify whether to allow access to non-public constructors and methods,_for the case of externalized metadata pointing to those. The default is_{@code true}_ switch this to {@code false} for public access only._<p>This applies to constructor resolution, factory method resolution,_and also init/destroy methods. Bean property accessors have to be public_in any case and are not affected by this setting._<p>Note that annotation-driven configuration will still access non-public_members as far as they have been annotated. This setting applies to_externalized metadata in this bean definition only.;public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed) {_		this.nonPublicAccessAllowed = nonPublicAccessAllowed__	};specify,whether,to,allow,access,to,non,public,constructors,and,methods,for,the,case,of,externalized,metadata,pointing,to,those,the,default,is,code,true,switch,this,to,code,false,for,public,access,only,p,this,applies,to,constructor,resolution,factory,method,resolution,and,also,init,destroy,methods,bean,property,accessors,have,to,be,public,in,any,case,and,are,not,affected,by,this,setting,p,note,that,annotation,driven,configuration,will,still,access,non,public,members,as,far,as,they,have,been,annotated,this,setting,applies,to,externalized,metadata,in,this,bean,definition,only;public,void,set,non,public,access,allowed,boolean,non,public,access,allowed,this,non,public,access,allowed,non,public,access,allowed
AbstractBeanDefinition -> public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed);1502974979;Specify whether to allow access to non-public constructors and methods,_for the case of externalized metadata pointing to those. The default is_{@code true}_ switch this to {@code false} for public access only._<p>This applies to constructor resolution, factory method resolution,_and also init/destroy methods. Bean property accessors have to be public_in any case and are not affected by this setting._<p>Note that annotation-driven configuration will still access non-public_members as far as they have been annotated. This setting applies to_externalized metadata in this bean definition only.;public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed) {_		this.nonPublicAccessAllowed = nonPublicAccessAllowed__	};specify,whether,to,allow,access,to,non,public,constructors,and,methods,for,the,case,of,externalized,metadata,pointing,to,those,the,default,is,code,true,switch,this,to,code,false,for,public,access,only,p,this,applies,to,constructor,resolution,factory,method,resolution,and,also,init,destroy,methods,bean,property,accessors,have,to,be,public,in,any,case,and,are,not,affected,by,this,setting,p,note,that,annotation,driven,configuration,will,still,access,non,public,members,as,far,as,they,have,been,annotated,this,setting,applies,to,externalized,metadata,in,this,bean,definition,only;public,void,set,non,public,access,allowed,boolean,non,public,access,allowed,this,non,public,access,allowed,non,public,access,allowed
AbstractBeanDefinition -> public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed);1503008029;Specify whether to allow access to non-public constructors and methods,_for the case of externalized metadata pointing to those. The default is_{@code true}_ switch this to {@code false} for public access only._<p>This applies to constructor resolution, factory method resolution,_and also init/destroy methods. Bean property accessors have to be public_in any case and are not affected by this setting._<p>Note that annotation-driven configuration will still access non-public_members as far as they have been annotated. This setting applies to_externalized metadata in this bean definition only.;public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed) {_		this.nonPublicAccessAllowed = nonPublicAccessAllowed__	};specify,whether,to,allow,access,to,non,public,constructors,and,methods,for,the,case,of,externalized,metadata,pointing,to,those,the,default,is,code,true,switch,this,to,code,false,for,public,access,only,p,this,applies,to,constructor,resolution,factory,method,resolution,and,also,init,destroy,methods,bean,property,accessors,have,to,be,public,in,any,case,and,are,not,affected,by,this,setting,p,note,that,annotation,driven,configuration,will,still,access,non,public,members,as,far,as,they,have,been,annotated,this,setting,applies,to,externalized,metadata,in,this,bean,definition,only;public,void,set,non,public,access,allowed,boolean,non,public,access,allowed,this,non,public,access,allowed,non,public,access,allowed
AbstractBeanDefinition -> public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed);1510606271;Specify whether to allow access to non-public constructors and methods,_for the case of externalized metadata pointing to those. The default is_{@code true}_ switch this to {@code false} for public access only._<p>This applies to constructor resolution, factory method resolution,_and also init/destroy methods. Bean property accessors have to be public_in any case and are not affected by this setting._<p>Note that annotation-driven configuration will still access non-public_members as far as they have been annotated. This setting applies to_externalized metadata in this bean definition only.;public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed) {_		this.nonPublicAccessAllowed = nonPublicAccessAllowed__	};specify,whether,to,allow,access,to,non,public,constructors,and,methods,for,the,case,of,externalized,metadata,pointing,to,those,the,default,is,code,true,switch,this,to,code,false,for,public,access,only,p,this,applies,to,constructor,resolution,factory,method,resolution,and,also,init,destroy,methods,bean,property,accessors,have,to,be,public,in,any,case,and,are,not,affected,by,this,setting,p,note,that,annotation,driven,configuration,will,still,access,non,public,members,as,far,as,they,have,been,annotated,this,setting,applies,to,externalized,metadata,in,this,bean,definition,only;public,void,set,non,public,access,allowed,boolean,non,public,access,allowed,this,non,public,access,allowed,non,public,access,allowed
AbstractBeanDefinition -> public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed);1510675876;Specify whether to allow access to non-public constructors and methods,_for the case of externalized metadata pointing to those. The default is_{@code true}_ switch this to {@code false} for public access only._<p>This applies to constructor resolution, factory method resolution,_and also init/destroy methods. Bean property accessors have to be public_in any case and are not affected by this setting._<p>Note that annotation-driven configuration will still access non-public_members as far as they have been annotated. This setting applies to_externalized metadata in this bean definition only.;public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed) {_		this.nonPublicAccessAllowed = nonPublicAccessAllowed__	};specify,whether,to,allow,access,to,non,public,constructors,and,methods,for,the,case,of,externalized,metadata,pointing,to,those,the,default,is,code,true,switch,this,to,code,false,for,public,access,only,p,this,applies,to,constructor,resolution,factory,method,resolution,and,also,init,destroy,methods,bean,property,accessors,have,to,be,public,in,any,case,and,are,not,affected,by,this,setting,p,note,that,annotation,driven,configuration,will,still,access,non,public,members,as,far,as,they,have,been,annotated,this,setting,applies,to,externalized,metadata,in,this,bean,definition,only;public,void,set,non,public,access,allowed,boolean,non,public,access,allowed,this,non,public,access,allowed,non,public,access,allowed
AbstractBeanDefinition -> public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed);1530174524;Specify whether to allow access to non-public constructors and methods,_for the case of externalized metadata pointing to those. The default is_{@code true}_ switch this to {@code false} for public access only._<p>This applies to constructor resolution, factory method resolution,_and also init/destroy methods. Bean property accessors have to be public_in any case and are not affected by this setting._<p>Note that annotation-driven configuration will still access non-public_members as far as they have been annotated. This setting applies to_externalized metadata in this bean definition only.;public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed) {_		this.nonPublicAccessAllowed = nonPublicAccessAllowed__	};specify,whether,to,allow,access,to,non,public,constructors,and,methods,for,the,case,of,externalized,metadata,pointing,to,those,the,default,is,code,true,switch,this,to,code,false,for,public,access,only,p,this,applies,to,constructor,resolution,factory,method,resolution,and,also,init,destroy,methods,bean,property,accessors,have,to,be,public,in,any,case,and,are,not,affected,by,this,setting,p,note,that,annotation,driven,configuration,will,still,access,non,public,members,as,far,as,they,have,been,annotated,this,setting,applies,to,externalized,metadata,in,this,bean,definition,only;public,void,set,non,public,access,allowed,boolean,non,public,access,allowed,this,non,public,access,allowed,non,public,access,allowed
AbstractBeanDefinition -> public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed);1530174524;Specify whether to allow access to non-public constructors and methods,_for the case of externalized metadata pointing to those. The default is_{@code true}_ switch this to {@code false} for public access only._<p>This applies to constructor resolution, factory method resolution,_and also init/destroy methods. Bean property accessors have to be public_in any case and are not affected by this setting._<p>Note that annotation-driven configuration will still access non-public_members as far as they have been annotated. This setting applies to_externalized metadata in this bean definition only.;public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed) {_		this.nonPublicAccessAllowed = nonPublicAccessAllowed__	};specify,whether,to,allow,access,to,non,public,constructors,and,methods,for,the,case,of,externalized,metadata,pointing,to,those,the,default,is,code,true,switch,this,to,code,false,for,public,access,only,p,this,applies,to,constructor,resolution,factory,method,resolution,and,also,init,destroy,methods,bean,property,accessors,have,to,be,public,in,any,case,and,are,not,affected,by,this,setting,p,note,that,annotation,driven,configuration,will,still,access,non,public,members,as,far,as,they,have,been,annotated,this,setting,applies,to,externalized,metadata,in,this,bean,definition,only;public,void,set,non,public,access,allowed,boolean,non,public,access,allowed,this,non,public,access,allowed,non,public,access,allowed
AbstractBeanDefinition -> public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed);1530174524;Specify whether to allow access to non-public constructors and methods,_for the case of externalized metadata pointing to those. The default is_{@code true}_ switch this to {@code false} for public access only._<p>This applies to constructor resolution, factory method resolution,_and also init/destroy methods. Bean property accessors have to be public_in any case and are not affected by this setting._<p>Note that annotation-driven configuration will still access non-public_members as far as they have been annotated. This setting applies to_externalized metadata in this bean definition only.;public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed) {_		this.nonPublicAccessAllowed = nonPublicAccessAllowed__	};specify,whether,to,allow,access,to,non,public,constructors,and,methods,for,the,case,of,externalized,metadata,pointing,to,those,the,default,is,code,true,switch,this,to,code,false,for,public,access,only,p,this,applies,to,constructor,resolution,factory,method,resolution,and,also,init,destroy,methods,bean,property,accessors,have,to,be,public,in,any,case,and,are,not,affected,by,this,setting,p,note,that,annotation,driven,configuration,will,still,access,non,public,members,as,far,as,they,have,been,annotated,this,setting,applies,to,externalized,metadata,in,this,bean,definition,only;public,void,set,non,public,access,allowed,boolean,non,public,access,allowed,this,non,public,access,allowed,non,public,access,allowed
AbstractBeanDefinition -> public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed);1530190293;Specify whether to allow access to non-public constructors and methods,_for the case of externalized metadata pointing to those. The default is_{@code true}_ switch this to {@code false} for public access only._<p>This applies to constructor resolution, factory method resolution,_and also init/destroy methods. Bean property accessors have to be public_in any case and are not affected by this setting._<p>Note that annotation-driven configuration will still access non-public_members as far as they have been annotated. This setting applies to_externalized metadata in this bean definition only.;public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed) {_		this.nonPublicAccessAllowed = nonPublicAccessAllowed__	};specify,whether,to,allow,access,to,non,public,constructors,and,methods,for,the,case,of,externalized,metadata,pointing,to,those,the,default,is,code,true,switch,this,to,code,false,for,public,access,only,p,this,applies,to,constructor,resolution,factory,method,resolution,and,also,init,destroy,methods,bean,property,accessors,have,to,be,public,in,any,case,and,are,not,affected,by,this,setting,p,note,that,annotation,driven,configuration,will,still,access,non,public,members,as,far,as,they,have,been,annotated,this,setting,applies,to,externalized,metadata,in,this,bean,definition,only;public,void,set,non,public,access,allowed,boolean,non,public,access,allowed,this,non,public,access,allowed,non,public,access,allowed
AbstractBeanDefinition -> public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed);1532981251;Specify whether to allow access to non-public constructors and methods,_for the case of externalized metadata pointing to those. The default is_{@code true}_ switch this to {@code false} for public access only._<p>This applies to constructor resolution, factory method resolution,_and also init/destroy methods. Bean property accessors have to be public_in any case and are not affected by this setting._<p>Note that annotation-driven configuration will still access non-public_members as far as they have been annotated. This setting applies to_externalized metadata in this bean definition only.;public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed) {_		this.nonPublicAccessAllowed = nonPublicAccessAllowed__	};specify,whether,to,allow,access,to,non,public,constructors,and,methods,for,the,case,of,externalized,metadata,pointing,to,those,the,default,is,code,true,switch,this,to,code,false,for,public,access,only,p,this,applies,to,constructor,resolution,factory,method,resolution,and,also,init,destroy,methods,bean,property,accessors,have,to,be,public,in,any,case,and,are,not,affected,by,this,setting,p,note,that,annotation,driven,configuration,will,still,access,non,public,members,as,far,as,they,have,been,annotated,this,setting,applies,to,externalized,metadata,in,this,bean,definition,only;public,void,set,non,public,access,allowed,boolean,non,public,access,allowed,this,non,public,access,allowed,non,public,access,allowed
AbstractBeanDefinition -> public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed);1536863076;Specify whether to allow access to non-public constructors and methods,_for the case of externalized metadata pointing to those. The default is_{@code true}_ switch this to {@code false} for public access only._<p>This applies to constructor resolution, factory method resolution,_and also init/destroy methods. Bean property accessors have to be public_in any case and are not affected by this setting._<p>Note that annotation-driven configuration will still access non-public_members as far as they have been annotated. This setting applies to_externalized metadata in this bean definition only.;public void setNonPublicAccessAllowed(boolean nonPublicAccessAllowed) {_		this.nonPublicAccessAllowed = nonPublicAccessAllowed__	};specify,whether,to,allow,access,to,non,public,constructors,and,methods,for,the,case,of,externalized,metadata,pointing,to,those,the,default,is,code,true,switch,this,to,code,false,for,public,access,only,p,this,applies,to,constructor,resolution,factory,method,resolution,and,also,init,destroy,methods,bean,property,accessors,have,to,be,public,in,any,case,and,are,not,affected,by,this,setting,p,note,that,annotation,driven,configuration,will,still,access,non,public,members,as,far,as,they,have,been,annotated,this,setting,applies,to,externalized,metadata,in,this,bean,definition,only;public,void,set,non,public,access,allowed,boolean,non,public,access,allowed,this,non,public,access,allowed,non,public,access,allowed
AbstractBeanDefinition -> public void validate() throws BeanDefinitionValidationException;1328020251;Validate this bean definition._@throws BeanDefinitionValidationException in case of validation failure;public void validate() throws BeanDefinitionValidationException {_		if (!getMethodOverrides().isEmpty() && getFactoryMethodName() != null) {_			throw new BeanDefinitionValidationException(_					"Cannot combine static factory method with method overrides: " +_					"the static factory method must create the instance")__		}__		if (hasBeanClass()) {_			prepareMethodOverrides()__		}_	};validate,this,bean,definition,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,validate,throws,bean,definition,validation,exception,if,get,method,overrides,is,empty,get,factory,method,name,null,throw,new,bean,definition,validation,exception,cannot,combine,static,factory,method,with,method,overrides,the,static,factory,method,must,create,the,instance,if,has,bean,class,prepare,method,overrides
AbstractBeanDefinition -> public void validate() throws BeanDefinitionValidationException;1337202589;Validate this bean definition._@throws BeanDefinitionValidationException in case of validation failure;public void validate() throws BeanDefinitionValidationException {_		if (!getMethodOverrides().isEmpty() && getFactoryMethodName() != null) {_			throw new BeanDefinitionValidationException(_					"Cannot combine static factory method with method overrides: " +_					"the static factory method must create the instance")__		}__		if (hasBeanClass()) {_			prepareMethodOverrides()__		}_	};validate,this,bean,definition,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,validate,throws,bean,definition,validation,exception,if,get,method,overrides,is,empty,get,factory,method,name,null,throw,new,bean,definition,validation,exception,cannot,combine,static,factory,method,with,method,overrides,the,static,factory,method,must,create,the,instance,if,has,bean,class,prepare,method,overrides
AbstractBeanDefinition -> public void validate() throws BeanDefinitionValidationException;1356735495;Validate this bean definition._@throws BeanDefinitionValidationException in case of validation failure;public void validate() throws BeanDefinitionValidationException {_		if (!getMethodOverrides().isEmpty() && getFactoryMethodName() != null) {_			throw new BeanDefinitionValidationException(_					"Cannot combine static factory method with method overrides: " +_					"the static factory method must create the instance")__		}__		if (hasBeanClass()) {_			prepareMethodOverrides()__		}_	};validate,this,bean,definition,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,validate,throws,bean,definition,validation,exception,if,get,method,overrides,is,empty,get,factory,method,name,null,throw,new,bean,definition,validation,exception,cannot,combine,static,factory,method,with,method,overrides,the,static,factory,method,must,create,the,instance,if,has,bean,class,prepare,method,overrides
AbstractBeanDefinition -> public void validate() throws BeanDefinitionValidationException;1357119239;Validate this bean definition._@throws BeanDefinitionValidationException in case of validation failure;public void validate() throws BeanDefinitionValidationException {_		if (!getMethodOverrides().isEmpty() && getFactoryMethodName() != null) {_			throw new BeanDefinitionValidationException(_					"Cannot combine static factory method with method overrides: " +_					"the static factory method must create the instance")__		}__		if (hasBeanClass()) {_			prepareMethodOverrides()__		}_	};validate,this,bean,definition,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,validate,throws,bean,definition,validation,exception,if,get,method,overrides,is,empty,get,factory,method,name,null,throw,new,bean,definition,validation,exception,cannot,combine,static,factory,method,with,method,overrides,the,static,factory,method,must,create,the,instance,if,has,bean,class,prepare,method,overrides
AbstractBeanDefinition -> public void validate() throws BeanDefinitionValidationException;1367508310;Validate this bean definition._@throws BeanDefinitionValidationException in case of validation failure;public void validate() throws BeanDefinitionValidationException {_		if (!getMethodOverrides().isEmpty() && getFactoryMethodName() != null) {_			throw new BeanDefinitionValidationException(_					"Cannot combine static factory method with method overrides: " +_					"the static factory method must create the instance")__		}__		if (hasBeanClass()) {_			prepareMethodOverrides()__		}_	};validate,this,bean,definition,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,validate,throws,bean,definition,validation,exception,if,get,method,overrides,is,empty,get,factory,method,name,null,throw,new,bean,definition,validation,exception,cannot,combine,static,factory,method,with,method,overrides,the,static,factory,method,must,create,the,instance,if,has,bean,class,prepare,method,overrides
AbstractBeanDefinition -> public void validate() throws BeanDefinitionValidationException;1367943112;Validate this bean definition._@throws BeanDefinitionValidationException in case of validation failure;public void validate() throws BeanDefinitionValidationException {_		if (!getMethodOverrides().isEmpty() && getFactoryMethodName() != null) {_			throw new BeanDefinitionValidationException(_					"Cannot combine static factory method with method overrides: " +_					"the static factory method must create the instance")__		}__		if (hasBeanClass()) {_			prepareMethodOverrides()__		}_	};validate,this,bean,definition,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,validate,throws,bean,definition,validation,exception,if,get,method,overrides,is,empty,get,factory,method,name,null,throw,new,bean,definition,validation,exception,cannot,combine,static,factory,method,with,method,overrides,the,static,factory,method,must,create,the,instance,if,has,bean,class,prepare,method,overrides
AbstractBeanDefinition -> public void validate() throws BeanDefinitionValidationException;1368482696;Validate this bean definition._@throws BeanDefinitionValidationException in case of validation failure;public void validate() throws BeanDefinitionValidationException {_		if (!getMethodOverrides().isEmpty() && getFactoryMethodName() != null) {_			throw new BeanDefinitionValidationException(_					"Cannot combine static factory method with method overrides: " +_					"the static factory method must create the instance")__		}__		if (hasBeanClass()) {_			prepareMethodOverrides()__		}_	};validate,this,bean,definition,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,validate,throws,bean,definition,validation,exception,if,get,method,overrides,is,empty,get,factory,method,name,null,throw,new,bean,definition,validation,exception,cannot,combine,static,factory,method,with,method,overrides,the,static,factory,method,must,create,the,instance,if,has,bean,class,prepare,method,overrides
AbstractBeanDefinition -> public void validate() throws BeanDefinitionValidationException;1385412762;Validate this bean definition._@throws BeanDefinitionValidationException in case of validation failure;public void validate() throws BeanDefinitionValidationException {_		if (!getMethodOverrides().isEmpty() && getFactoryMethodName() != null) {_			throw new BeanDefinitionValidationException(_					"Cannot combine static factory method with method overrides: " +_					"the static factory method must create the instance")__		}__		if (hasBeanClass()) {_			prepareMethodOverrides()__		}_	};validate,this,bean,definition,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,validate,throws,bean,definition,validation,exception,if,get,method,overrides,is,empty,get,factory,method,name,null,throw,new,bean,definition,validation,exception,cannot,combine,static,factory,method,with,method,overrides,the,static,factory,method,must,create,the,instance,if,has,bean,class,prepare,method,overrides
AbstractBeanDefinition -> public void validate() throws BeanDefinitionValidationException;1392245317;Validate this bean definition._@throws BeanDefinitionValidationException in case of validation failure;public void validate() throws BeanDefinitionValidationException {_		if (!getMethodOverrides().isEmpty() && getFactoryMethodName() != null) {_			throw new BeanDefinitionValidationException(_					"Cannot combine static factory method with method overrides: " +_					"the static factory method must create the instance")__		}__		if (hasBeanClass()) {_			prepareMethodOverrides()__		}_	};validate,this,bean,definition,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,validate,throws,bean,definition,validation,exception,if,get,method,overrides,is,empty,get,factory,method,name,null,throw,new,bean,definition,validation,exception,cannot,combine,static,factory,method,with,method,overrides,the,static,factory,method,must,create,the,instance,if,has,bean,class,prepare,method,overrides
AbstractBeanDefinition -> public void validate() throws BeanDefinitionValidationException;1397163142;Validate this bean definition._@throws BeanDefinitionValidationException in case of validation failure;public void validate() throws BeanDefinitionValidationException {_		if (!getMethodOverrides().isEmpty() && getFactoryMethodName() != null) {_			throw new BeanDefinitionValidationException(_					"Cannot combine static factory method with method overrides: " +_					"the static factory method must create the instance")__		}__		if (hasBeanClass()) {_			prepareMethodOverrides()__		}_	};validate,this,bean,definition,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,validate,throws,bean,definition,validation,exception,if,get,method,overrides,is,empty,get,factory,method,name,null,throw,new,bean,definition,validation,exception,cannot,combine,static,factory,method,with,method,overrides,the,static,factory,method,must,create,the,instance,if,has,bean,class,prepare,method,overrides
AbstractBeanDefinition -> public void validate() throws BeanDefinitionValidationException;1398898390;Validate this bean definition._@throws BeanDefinitionValidationException in case of validation failure;public void validate() throws BeanDefinitionValidationException {_		if (!getMethodOverrides().isEmpty() && getFactoryMethodName() != null) {_			throw new BeanDefinitionValidationException(_					"Cannot combine static factory method with method overrides: " +_					"the static factory method must create the instance")__		}__		if (hasBeanClass()) {_			prepareMethodOverrides()__		}_	};validate,this,bean,definition,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,validate,throws,bean,definition,validation,exception,if,get,method,overrides,is,empty,get,factory,method,name,null,throw,new,bean,definition,validation,exception,cannot,combine,static,factory,method,with,method,overrides,the,static,factory,method,must,create,the,instance,if,has,bean,class,prepare,method,overrides
AbstractBeanDefinition -> public void validate() throws BeanDefinitionValidationException;1407511029;Validate this bean definition._@throws BeanDefinitionValidationException in case of validation failure;public void validate() throws BeanDefinitionValidationException {_		if (!getMethodOverrides().isEmpty() && getFactoryMethodName() != null) {_			throw new BeanDefinitionValidationException(_					"Cannot combine static factory method with method overrides: " +_					"the static factory method must create the instance")__		}__		if (hasBeanClass()) {_			prepareMethodOverrides()__		}_	};validate,this,bean,definition,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,validate,throws,bean,definition,validation,exception,if,get,method,overrides,is,empty,get,factory,method,name,null,throw,new,bean,definition,validation,exception,cannot,combine,static,factory,method,with,method,overrides,the,static,factory,method,must,create,the,instance,if,has,bean,class,prepare,method,overrides
AbstractBeanDefinition -> public void validate() throws BeanDefinitionValidationException;1432135182;Validate this bean definition._@throws BeanDefinitionValidationException in case of validation failure;public void validate() throws BeanDefinitionValidationException {_		if (!getMethodOverrides().isEmpty() && getFactoryMethodName() != null) {_			throw new BeanDefinitionValidationException(_					"Cannot combine static factory method with method overrides: " +_					"the static factory method must create the instance")__		}__		if (hasBeanClass()) {_			prepareMethodOverrides()__		}_	};validate,this,bean,definition,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,validate,throws,bean,definition,validation,exception,if,get,method,overrides,is,empty,get,factory,method,name,null,throw,new,bean,definition,validation,exception,cannot,combine,static,factory,method,with,method,overrides,the,static,factory,method,must,create,the,instance,if,has,bean,class,prepare,method,overrides
AbstractBeanDefinition -> public void validate() throws BeanDefinitionValidationException;1434204509;Validate this bean definition._@throws BeanDefinitionValidationException in case of validation failure;public void validate() throws BeanDefinitionValidationException {_		if (!getMethodOverrides().isEmpty() && getFactoryMethodName() != null) {_			throw new BeanDefinitionValidationException(_					"Cannot combine static factory method with method overrides: " +_					"the static factory method must create the instance")__		}__		if (hasBeanClass()) {_			prepareMethodOverrides()__		}_	};validate,this,bean,definition,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,validate,throws,bean,definition,validation,exception,if,get,method,overrides,is,empty,get,factory,method,name,null,throw,new,bean,definition,validation,exception,cannot,combine,static,factory,method,with,method,overrides,the,static,factory,method,must,create,the,instance,if,has,bean,class,prepare,method,overrides
AbstractBeanDefinition -> public void validate() throws BeanDefinitionValidationException;1447323728;Validate this bean definition._@throws BeanDefinitionValidationException in case of validation failure;public void validate() throws BeanDefinitionValidationException {_		if (!getMethodOverrides().isEmpty() && getFactoryMethodName() != null) {_			throw new BeanDefinitionValidationException(_					"Cannot combine static factory method with method overrides: " +_					"the static factory method must create the instance")__		}__		if (hasBeanClass()) {_			prepareMethodOverrides()__		}_	};validate,this,bean,definition,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,validate,throws,bean,definition,validation,exception,if,get,method,overrides,is,empty,get,factory,method,name,null,throw,new,bean,definition,validation,exception,cannot,combine,static,factory,method,with,method,overrides,the,static,factory,method,must,create,the,instance,if,has,bean,class,prepare,method,overrides
AbstractBeanDefinition -> public void validate() throws BeanDefinitionValidationException;1465226156;Validate this bean definition._@throws BeanDefinitionValidationException in case of validation failure;public void validate() throws BeanDefinitionValidationException {_		if (!getMethodOverrides().isEmpty() && getFactoryMethodName() != null) {_			throw new BeanDefinitionValidationException(_					"Cannot combine static factory method with method overrides: " +_					"the static factory method must create the instance")__		}__		if (hasBeanClass()) {_			prepareMethodOverrides()__		}_	};validate,this,bean,definition,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,validate,throws,bean,definition,validation,exception,if,get,method,overrides,is,empty,get,factory,method,name,null,throw,new,bean,definition,validation,exception,cannot,combine,static,factory,method,with,method,overrides,the,static,factory,method,must,create,the,instance,if,has,bean,class,prepare,method,overrides
AbstractBeanDefinition -> public void validate() throws BeanDefinitionValidationException;1467730834;Validate this bean definition._@throws BeanDefinitionValidationException in case of validation failure;public void validate() throws BeanDefinitionValidationException {_		if (!getMethodOverrides().isEmpty() && getFactoryMethodName() != null) {_			throw new BeanDefinitionValidationException(_					"Cannot combine static factory method with method overrides: " +_					"the static factory method must create the instance")__		}__		if (hasBeanClass()) {_			prepareMethodOverrides()__		}_	};validate,this,bean,definition,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,validate,throws,bean,definition,validation,exception,if,get,method,overrides,is,empty,get,factory,method,name,null,throw,new,bean,definition,validation,exception,cannot,combine,static,factory,method,with,method,overrides,the,static,factory,method,must,create,the,instance,if,has,bean,class,prepare,method,overrides
AbstractBeanDefinition -> public void validate() throws BeanDefinitionValidationException;1467846264;Validate this bean definition._@throws BeanDefinitionValidationException in case of validation failure;public void validate() throws BeanDefinitionValidationException {_		if (!getMethodOverrides().isEmpty() && getFactoryMethodName() != null) {_			throw new BeanDefinitionValidationException(_					"Cannot combine static factory method with method overrides: " +_					"the static factory method must create the instance")__		}__		if (hasBeanClass()) {_			prepareMethodOverrides()__		}_	};validate,this,bean,definition,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,validate,throws,bean,definition,validation,exception,if,get,method,overrides,is,empty,get,factory,method,name,null,throw,new,bean,definition,validation,exception,cannot,combine,static,factory,method,with,method,overrides,the,static,factory,method,must,create,the,instance,if,has,bean,class,prepare,method,overrides
AbstractBeanDefinition -> public void validate() throws BeanDefinitionValidationException;1482091545;Validate this bean definition._@throws BeanDefinitionValidationException in case of validation failure;public void validate() throws BeanDefinitionValidationException {_		if (!getMethodOverrides().isEmpty() && getFactoryMethodName() != null) {_			throw new BeanDefinitionValidationException(_					"Cannot combine static factory method with method overrides: " +_					"the static factory method must create the instance")__		}__		if (hasBeanClass()) {_			prepareMethodOverrides()__		}_	};validate,this,bean,definition,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,validate,throws,bean,definition,validation,exception,if,get,method,overrides,is,empty,get,factory,method,name,null,throw,new,bean,definition,validation,exception,cannot,combine,static,factory,method,with,method,overrides,the,static,factory,method,must,create,the,instance,if,has,bean,class,prepare,method,overrides
AbstractBeanDefinition -> public void validate() throws BeanDefinitionValidationException;1483093818;Validate this bean definition._@throws BeanDefinitionValidationException in case of validation failure;public void validate() throws BeanDefinitionValidationException {_		if (!getMethodOverrides().isEmpty() && getFactoryMethodName() != null) {_			throw new BeanDefinitionValidationException(_					"Cannot combine static factory method with method overrides: " +_					"the static factory method must create the instance")__		}__		if (hasBeanClass()) {_			prepareMethodOverrides()__		}_	};validate,this,bean,definition,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,validate,throws,bean,definition,validation,exception,if,get,method,overrides,is,empty,get,factory,method,name,null,throw,new,bean,definition,validation,exception,cannot,combine,static,factory,method,with,method,overrides,the,static,factory,method,must,create,the,instance,if,has,bean,class,prepare,method,overrides
AbstractBeanDefinition -> public void validate() throws BeanDefinitionValidationException;1495868221;Validate this bean definition._@throws BeanDefinitionValidationException in case of validation failure;public void validate() throws BeanDefinitionValidationException {_		if (!getMethodOverrides().isEmpty() && getFactoryMethodName() != null) {_			throw new BeanDefinitionValidationException(_					"Cannot combine static factory method with method overrides: " +_					"the static factory method must create the instance")__		}__		if (hasBeanClass()) {_			prepareMethodOverrides()__		}_	};validate,this,bean,definition,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,validate,throws,bean,definition,validation,exception,if,get,method,overrides,is,empty,get,factory,method,name,null,throw,new,bean,definition,validation,exception,cannot,combine,static,factory,method,with,method,overrides,the,static,factory,method,must,create,the,instance,if,has,bean,class,prepare,method,overrides
AbstractBeanDefinition -> public void validate() throws BeanDefinitionValidationException;1496837955;Validate this bean definition._@throws BeanDefinitionValidationException in case of validation failure;public void validate() throws BeanDefinitionValidationException {_		if (!getMethodOverrides().isEmpty() && getFactoryMethodName() != null) {_			throw new BeanDefinitionValidationException(_					"Cannot combine static factory method with method overrides: " +_					"the static factory method must create the instance")__		}__		if (hasBeanClass()) {_			prepareMethodOverrides()__		}_	};validate,this,bean,definition,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,validate,throws,bean,definition,validation,exception,if,get,method,overrides,is,empty,get,factory,method,name,null,throw,new,bean,definition,validation,exception,cannot,combine,static,factory,method,with,method,overrides,the,static,factory,method,must,create,the,instance,if,has,bean,class,prepare,method,overrides
AbstractBeanDefinition -> public void validate() throws BeanDefinitionValidationException;1498780456;Validate this bean definition._@throws BeanDefinitionValidationException in case of validation failure;public void validate() throws BeanDefinitionValidationException {_		if (!getMethodOverrides().isEmpty() && getFactoryMethodName() != null) {_			throw new BeanDefinitionValidationException(_					"Cannot combine static factory method with method overrides: " +_					"the static factory method must create the instance")__		}__		if (hasBeanClass()) {_			prepareMethodOverrides()__		}_	};validate,this,bean,definition,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,validate,throws,bean,definition,validation,exception,if,get,method,overrides,is,empty,get,factory,method,name,null,throw,new,bean,definition,validation,exception,cannot,combine,static,factory,method,with,method,overrides,the,static,factory,method,must,create,the,instance,if,has,bean,class,prepare,method,overrides
AbstractBeanDefinition -> public void validate() throws BeanDefinitionValidationException;1502974979;Validate this bean definition._@throws BeanDefinitionValidationException in case of validation failure;public void validate() throws BeanDefinitionValidationException {_		if (!getMethodOverrides().isEmpty() && getFactoryMethodName() != null) {_			throw new BeanDefinitionValidationException(_					"Cannot combine static factory method with method overrides: " +_					"the static factory method must create the instance")__		}__		if (hasBeanClass()) {_			prepareMethodOverrides()__		}_	};validate,this,bean,definition,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,validate,throws,bean,definition,validation,exception,if,get,method,overrides,is,empty,get,factory,method,name,null,throw,new,bean,definition,validation,exception,cannot,combine,static,factory,method,with,method,overrides,the,static,factory,method,must,create,the,instance,if,has,bean,class,prepare,method,overrides
AbstractBeanDefinition -> public void validate() throws BeanDefinitionValidationException;1503008029;Validate this bean definition._@throws BeanDefinitionValidationException in case of validation failure;public void validate() throws BeanDefinitionValidationException {_		if (!getMethodOverrides().isEmpty() && getFactoryMethodName() != null) {_			throw new BeanDefinitionValidationException(_					"Cannot combine static factory method with method overrides: " +_					"the static factory method must create the instance")__		}__		if (hasBeanClass()) {_			prepareMethodOverrides()__		}_	};validate,this,bean,definition,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,validate,throws,bean,definition,validation,exception,if,get,method,overrides,is,empty,get,factory,method,name,null,throw,new,bean,definition,validation,exception,cannot,combine,static,factory,method,with,method,overrides,the,static,factory,method,must,create,the,instance,if,has,bean,class,prepare,method,overrides
AbstractBeanDefinition -> public void validate() throws BeanDefinitionValidationException;1510606271;Validate this bean definition._@throws BeanDefinitionValidationException in case of validation failure;public void validate() throws BeanDefinitionValidationException {_		if (hasMethodOverrides() && getFactoryMethodName() != null) {_			throw new BeanDefinitionValidationException(_					"Cannot combine static factory method with method overrides: " +_					"the static factory method must create the instance")__		}__		if (hasBeanClass()) {_			prepareMethodOverrides()__		}_	};validate,this,bean,definition,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,validate,throws,bean,definition,validation,exception,if,has,method,overrides,get,factory,method,name,null,throw,new,bean,definition,validation,exception,cannot,combine,static,factory,method,with,method,overrides,the,static,factory,method,must,create,the,instance,if,has,bean,class,prepare,method,overrides
AbstractBeanDefinition -> public void validate() throws BeanDefinitionValidationException;1510675876;Validate this bean definition._@throws BeanDefinitionValidationException in case of validation failure;public void validate() throws BeanDefinitionValidationException {_		if (hasMethodOverrides() && getFactoryMethodName() != null) {_			throw new BeanDefinitionValidationException(_					"Cannot combine static factory method with method overrides: " +_					"the static factory method must create the instance")__		}__		if (hasBeanClass()) {_			prepareMethodOverrides()__		}_	};validate,this,bean,definition,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,validate,throws,bean,definition,validation,exception,if,has,method,overrides,get,factory,method,name,null,throw,new,bean,definition,validation,exception,cannot,combine,static,factory,method,with,method,overrides,the,static,factory,method,must,create,the,instance,if,has,bean,class,prepare,method,overrides
AbstractBeanDefinition -> public void validate() throws BeanDefinitionValidationException;1530174524;Validate this bean definition._@throws BeanDefinitionValidationException in case of validation failure;public void validate() throws BeanDefinitionValidationException {_		if (hasMethodOverrides() && getFactoryMethodName() != null) {_			throw new BeanDefinitionValidationException(_					"Cannot combine static factory method with method overrides: " +_					"the static factory method must create the instance")__		}__		if (hasBeanClass()) {_			prepareMethodOverrides()__		}_	};validate,this,bean,definition,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,validate,throws,bean,definition,validation,exception,if,has,method,overrides,get,factory,method,name,null,throw,new,bean,definition,validation,exception,cannot,combine,static,factory,method,with,method,overrides,the,static,factory,method,must,create,the,instance,if,has,bean,class,prepare,method,overrides
AbstractBeanDefinition -> public void validate() throws BeanDefinitionValidationException;1530174524;Validate this bean definition._@throws BeanDefinitionValidationException in case of validation failure;public void validate() throws BeanDefinitionValidationException {_		if (hasMethodOverrides() && getFactoryMethodName() != null) {_			throw new BeanDefinitionValidationException(_					"Cannot combine static factory method with method overrides: " +_					"the static factory method must create the instance")__		}__		if (hasBeanClass()) {_			prepareMethodOverrides()__		}_	};validate,this,bean,definition,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,validate,throws,bean,definition,validation,exception,if,has,method,overrides,get,factory,method,name,null,throw,new,bean,definition,validation,exception,cannot,combine,static,factory,method,with,method,overrides,the,static,factory,method,must,create,the,instance,if,has,bean,class,prepare,method,overrides
AbstractBeanDefinition -> public void validate() throws BeanDefinitionValidationException;1530174524;Validate this bean definition._@throws BeanDefinitionValidationException in case of validation failure;public void validate() throws BeanDefinitionValidationException {_		if (hasMethodOverrides() && getFactoryMethodName() != null) {_			throw new BeanDefinitionValidationException(_					"Cannot combine static factory method with method overrides: " +_					"the static factory method must create the instance")__		}__		if (hasBeanClass()) {_			prepareMethodOverrides()__		}_	};validate,this,bean,definition,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,validate,throws,bean,definition,validation,exception,if,has,method,overrides,get,factory,method,name,null,throw,new,bean,definition,validation,exception,cannot,combine,static,factory,method,with,method,overrides,the,static,factory,method,must,create,the,instance,if,has,bean,class,prepare,method,overrides
AbstractBeanDefinition -> public void validate() throws BeanDefinitionValidationException;1530190293;Validate this bean definition._@throws BeanDefinitionValidationException in case of validation failure;public void validate() throws BeanDefinitionValidationException {_		if (hasMethodOverrides() && getFactoryMethodName() != null) {_			throw new BeanDefinitionValidationException(_					"Cannot combine static factory method with method overrides: " +_					"the static factory method must create the instance")__		}__		if (hasBeanClass()) {_			prepareMethodOverrides()__		}_	};validate,this,bean,definition,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,validate,throws,bean,definition,validation,exception,if,has,method,overrides,get,factory,method,name,null,throw,new,bean,definition,validation,exception,cannot,combine,static,factory,method,with,method,overrides,the,static,factory,method,must,create,the,instance,if,has,bean,class,prepare,method,overrides
AbstractBeanDefinition -> public void validate() throws BeanDefinitionValidationException;1532981251;Validate this bean definition._@throws BeanDefinitionValidationException in case of validation failure;public void validate() throws BeanDefinitionValidationException {_		if (hasMethodOverrides() && getFactoryMethodName() != null) {_			throw new BeanDefinitionValidationException(_					"Cannot combine static factory method with method overrides: " +_					"the static factory method must create the instance")__		}__		if (hasBeanClass()) {_			prepareMethodOverrides()__		}_	};validate,this,bean,definition,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,validate,throws,bean,definition,validation,exception,if,has,method,overrides,get,factory,method,name,null,throw,new,bean,definition,validation,exception,cannot,combine,static,factory,method,with,method,overrides,the,static,factory,method,must,create,the,instance,if,has,bean,class,prepare,method,overrides
AbstractBeanDefinition -> public void validate() throws BeanDefinitionValidationException;1536863076;Validate this bean definition._@throws BeanDefinitionValidationException in case of validation failure;public void validate() throws BeanDefinitionValidationException {_		if (hasMethodOverrides() && getFactoryMethodName() != null) {_			throw new BeanDefinitionValidationException(_					"Cannot combine static factory method with method overrides: " +_					"the static factory method must create the instance")__		}__		if (hasBeanClass()) {_			prepareMethodOverrides()__		}_	};validate,this,bean,definition,throws,bean,definition,validation,exception,in,case,of,validation,failure;public,void,validate,throws,bean,definition,validation,exception,if,has,method,overrides,get,factory,method,name,null,throw,new,bean,definition,validation,exception,cannot,combine,static,factory,method,with,method,overrides,the,static,factory,method,must,create,the,instance,if,has,bean,class,prepare,method,overrides
AbstractBeanDefinition -> @Override 	public String getScope();1356735495;Return the name of the target scope for the bean.;@Override_	public String getScope() {_		return this.scope__	};return,the,name,of,the,target,scope,for,the,bean;override,public,string,get,scope,return,this,scope
AbstractBeanDefinition -> @Override 	public String getScope();1368482696;Return the name of the target scope for the bean.;@Override_	public String getScope() {_		return this.scope__	};return,the,name,of,the,target,scope,for,the,bean;override,public,string,get,scope,return,this,scope
AbstractBeanDefinition -> @Override 	public String getScope();1385412762;Return the name of the target scope for the bean.;@Override_	public String getScope() {_		return this.scope__	};return,the,name,of,the,target,scope,for,the,bean;override,public,string,get,scope,return,this,scope
AbstractBeanDefinition -> @Override 	public String getScope();1392245317;Return the name of the target scope for the bean.;@Override_	public String getScope() {_		return this.scope__	};return,the,name,of,the,target,scope,for,the,bean;override,public,string,get,scope,return,this,scope
AbstractBeanDefinition -> @Override 	public String getScope();1397163142;Return the name of the target scope for the bean.;@Override_	public String getScope() {_		return this.scope__	};return,the,name,of,the,target,scope,for,the,bean;override,public,string,get,scope,return,this,scope
AbstractBeanDefinition -> @Override 	public String getScope();1398898390;Return the name of the target scope for the bean.;@Override_	public String getScope() {_		return this.scope__	};return,the,name,of,the,target,scope,for,the,bean;override,public,string,get,scope,return,this,scope
AbstractBeanDefinition -> @Override 	public String getScope();1407511029;Return the name of the target scope for the bean.;@Override_	public String getScope() {_		return this.scope__	};return,the,name,of,the,target,scope,for,the,bean;override,public,string,get,scope,return,this,scope
AbstractBeanDefinition -> @Override 	public String getScope();1432135182;Return the name of the target scope for the bean.;@Override_	public String getScope() {_		return this.scope__	};return,the,name,of,the,target,scope,for,the,bean;override,public,string,get,scope,return,this,scope
AbstractBeanDefinition -> @Override 	public String getScope();1434204509;Return the name of the target scope for the bean.;@Override_	public String getScope() {_		return this.scope__	};return,the,name,of,the,target,scope,for,the,bean;override,public,string,get,scope,return,this,scope
AbstractBeanDefinition -> @Override 	public String getScope();1447323728;Return the name of the target scope for the bean.;@Override_	public String getScope() {_		return this.scope__	};return,the,name,of,the,target,scope,for,the,bean;override,public,string,get,scope,return,this,scope
AbstractBeanDefinition -> @Override 	public String getScope();1465226156;Return the name of the target scope for the bean.;@Override_	public String getScope() {_		return this.scope__	};return,the,name,of,the,target,scope,for,the,bean;override,public,string,get,scope,return,this,scope
AbstractBeanDefinition -> @Override 	public String getScope();1467730834;Return the name of the target scope for the bean.;@Override_	public String getScope() {_		return this.scope__	};return,the,name,of,the,target,scope,for,the,bean;override,public,string,get,scope,return,this,scope
AbstractBeanDefinition -> @Override 	public String getScope();1467846264;Return the name of the target scope for the bean.;@Override_	public String getScope() {_		return this.scope__	};return,the,name,of,the,target,scope,for,the,bean;override,public,string,get,scope,return,this,scope
AbstractBeanDefinition -> @Override 	public String getScope();1482091545;Return the name of the target scope for the bean.;@Override_	public String getScope() {_		return this.scope__	};return,the,name,of,the,target,scope,for,the,bean;override,public,string,get,scope,return,this,scope
AbstractBeanDefinition -> @Override 	public String getScope();1483093818;Return the name of the target scope for the bean.;@Override_	public String getScope() {_		return this.scope__	};return,the,name,of,the,target,scope,for,the,bean;override,public,string,get,scope,return,this,scope
AbstractBeanDefinition -> @Override 	public String getScope();1495868221;Return the name of the target scope for the bean.;@Override_	public String getScope() {_		return this.scope__	};return,the,name,of,the,target,scope,for,the,bean;override,public,string,get,scope,return,this,scope
AbstractBeanDefinition -> @Override 	public String getScope();1496837955;Return the name of the target scope for the bean.;@Override_	public String getScope() {_		return this.scope__	};return,the,name,of,the,target,scope,for,the,bean;override,public,string,get,scope,return,this,scope
AbstractBeanDefinition -> public boolean isAbstract();1328020251;Return whether this bean is "abstract", i.e. not meant to be instantiated_itself but rather just serving as parent for concrete child bean definitions.;public boolean isAbstract() {_		return this.abstractFlag__	};return,whether,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions;public,boolean,is,abstract,return,this,abstract,flag
AbstractBeanDefinition -> public boolean isAbstract();1337202589;Return whether this bean is "abstract", i.e. not meant to be instantiated_itself but rather just serving as parent for concrete child bean definitions.;public boolean isAbstract() {_		return this.abstractFlag__	};return,whether,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions;public,boolean,is,abstract,return,this,abstract,flag
AbstractBeanDefinition -> public boolean isAbstract();1357119239;Return whether this bean is "abstract", i.e. not meant to be instantiated_itself but rather just serving as parent for concrete child bean definitions.;public boolean isAbstract() {_		return this.abstractFlag__	};return,whether,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions;public,boolean,is,abstract,return,this,abstract,flag
AbstractBeanDefinition -> public boolean isAbstract();1367508310;Return whether this bean is "abstract", i.e. not meant to be instantiated_itself but rather just serving as parent for concrete child bean definitions.;public boolean isAbstract() {_		return this.abstractFlag__	};return,whether,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions;public,boolean,is,abstract,return,this,abstract,flag
AbstractBeanDefinition -> public boolean isAbstract();1367943112;Return whether this bean is "abstract", i.e. not meant to be instantiated_itself but rather just serving as parent for concrete child bean definitions.;public boolean isAbstract() {_		return this.abstractFlag__	};return,whether,this,bean,is,abstract,i,e,not,meant,to,be,instantiated,itself,but,rather,just,serving,as,parent,for,concrete,child,bean,definitions;public,boolean,is,abstract,return,this,abstract,flag
AbstractBeanDefinition -> @Deprecated 	public void overrideFrom(AbstractBeanDefinition other);1328020251;Override settings in this bean definition (assumably a copied parent_from a parent-child inheritance relationship) from the given bean_definition (assumably the child)._@deprecated since Spring 2.5, in favor of {@link #overrideFrom(BeanDefinition)};@Deprecated_	public void overrideFrom(AbstractBeanDefinition other) {_		overrideFrom((BeanDefinition) other)__	};override,settings,in,this,bean,definition,assumably,a,copied,parent,from,a,parent,child,inheritance,relationship,from,the,given,bean,definition,assumably,the,child,deprecated,since,spring,2,5,in,favor,of,link,override,from,bean,definition;deprecated,public,void,override,from,abstract,bean,definition,other,override,from,bean,definition,other
AbstractBeanDefinition -> @Deprecated 	public void overrideFrom(AbstractBeanDefinition other);1337202589;Override settings in this bean definition (presumably a copied parent_from a parent-child inheritance relationship) from the given bean_definition (presumably the child)._@deprecated since Spring 2.5, in favor of {@link #overrideFrom(BeanDefinition)};@Deprecated_	public void overrideFrom(AbstractBeanDefinition other) {_		overrideFrom((BeanDefinition) other)__	};override,settings,in,this,bean,definition,presumably,a,copied,parent,from,a,parent,child,inheritance,relationship,from,the,given,bean,definition,presumably,the,child,deprecated,since,spring,2,5,in,favor,of,link,override,from,bean,definition;deprecated,public,void,override,from,abstract,bean,definition,other,override,from,bean,definition,other
AbstractBeanDefinition -> @Deprecated 	public void overrideFrom(AbstractBeanDefinition other);1356735495;Override settings in this bean definition (presumably a copied parent_from a parent-child inheritance relationship) from the given bean_definition (presumably the child)._@deprecated since Spring 2.5, in favor of {@link #overrideFrom(BeanDefinition)};@Deprecated_	public void overrideFrom(AbstractBeanDefinition other) {_		overrideFrom((BeanDefinition) other)__	};override,settings,in,this,bean,definition,presumably,a,copied,parent,from,a,parent,child,inheritance,relationship,from,the,given,bean,definition,presumably,the,child,deprecated,since,spring,2,5,in,favor,of,link,override,from,bean,definition;deprecated,public,void,override,from,abstract,bean,definition,other,override,from,bean,definition,other
AbstractBeanDefinition -> @Deprecated 	public void overrideFrom(AbstractBeanDefinition other);1357119239;Override settings in this bean definition (presumably a copied parent_from a parent-child inheritance relationship) from the given bean_definition (presumably the child)._@deprecated since Spring 2.5, in favor of {@link #overrideFrom(BeanDefinition)};@Deprecated_	public void overrideFrom(AbstractBeanDefinition other) {_		overrideFrom((BeanDefinition) other)__	};override,settings,in,this,bean,definition,presumably,a,copied,parent,from,a,parent,child,inheritance,relationship,from,the,given,bean,definition,presumably,the,child,deprecated,since,spring,2,5,in,favor,of,link,override,from,bean,definition;deprecated,public,void,override,from,abstract,bean,definition,other,override,from,bean,definition,other
AbstractBeanDefinition -> public String[] getDependsOn();1328020251;Return the bean names that this bean depends on.;public String[] getDependsOn() {_		return this.dependsOn__	};return,the,bean,names,that,this,bean,depends,on;public,string,get,depends,on,return,this,depends,on
AbstractBeanDefinition -> public String[] getDependsOn();1337202589;Return the bean names that this bean depends on.;public String[] getDependsOn() {_		return this.dependsOn__	};return,the,bean,names,that,this,bean,depends,on;public,string,get,depends,on,return,this,depends,on
AbstractBeanDefinition -> public String[] getDependsOn();1357119239;Return the bean names that this bean depends on.;public String[] getDependsOn() {_		return this.dependsOn__	};return,the,bean,names,that,this,bean,depends,on;public,string,get,depends,on,return,this,depends,on
AbstractBeanDefinition -> public String[] getDependsOn();1367508310;Return the bean names that this bean depends on.;public String[] getDependsOn() {_		return this.dependsOn__	};return,the,bean,names,that,this,bean,depends,on;public,string,get,depends,on,return,this,depends,on
AbstractBeanDefinition -> public String[] getDependsOn();1367943112;Return the bean names that this bean depends on.;public String[] getDependsOn() {_		return this.dependsOn__	};return,the,bean,names,that,this,bean,depends,on;public,string,get,depends,on,return,this,depends,on
AbstractBeanDefinition -> public boolean isAutowireCandidate();1328020251;Return whether this bean is a candidate for getting autowired into some other bean.;public boolean isAutowireCandidate() {_		return this.autowireCandidate__	};return,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;public,boolean,is,autowire,candidate,return,this,autowire,candidate
AbstractBeanDefinition -> public boolean isAutowireCandidate();1337202589;Return whether this bean is a candidate for getting autowired into some other bean.;public boolean isAutowireCandidate() {_		return this.autowireCandidate__	};return,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;public,boolean,is,autowire,candidate,return,this,autowire,candidate
AbstractBeanDefinition -> public boolean isAutowireCandidate();1357119239;Return whether this bean is a candidate for getting autowired into some other bean.;public boolean isAutowireCandidate() {_		return this.autowireCandidate__	};return,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;public,boolean,is,autowire,candidate,return,this,autowire,candidate
AbstractBeanDefinition -> public boolean isAutowireCandidate();1367508310;Return whether this bean is a candidate for getting autowired into some other bean.;public boolean isAutowireCandidate() {_		return this.autowireCandidate__	};return,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;public,boolean,is,autowire,candidate,return,this,autowire,candidate
AbstractBeanDefinition -> public boolean isAutowireCandidate();1367943112;Return whether this bean is a candidate for getting autowired into some other bean.;public boolean isAutowireCandidate() {_		return this.autowireCandidate__	};return,whether,this,bean,is,a,candidate,for,getting,autowired,into,some,other,bean;public,boolean,is,autowire,candidate,return,this,autowire,candidate
AbstractBeanDefinition -> public void setInstanceSupplier(@Nullable Supplier<?> instanceSupplier);1496837955;Specify a callback for creating an instance of the bean,_as an alternative to a declaratively specified factory method._<p>If such a callback is set, it will override any other constructor_or factory method metadata. However, bean property population and_potential annotation-driven injection will still apply as usual._@since 5.0_@see #setConstructorArgumentValues(ConstructorArgumentValues)_@see #setPropertyValues(MutablePropertyValues);public void setInstanceSupplier(@Nullable Supplier<?> instanceSupplier) {_		this.instanceSupplier = instanceSupplier__	};specify,a,callback,for,creating,an,instance,of,the,bean,as,an,alternative,to,a,declaratively,specified,factory,method,p,if,such,a,callback,is,set,it,will,override,any,other,constructor,or,factory,method,metadata,however,bean,property,population,and,potential,annotation,driven,injection,will,still,apply,as,usual,since,5,0,see,set,constructor,argument,values,constructor,argument,values,see,set,property,values,mutable,property,values;public,void,set,instance,supplier,nullable,supplier,instance,supplier,this,instance,supplier,instance,supplier
AbstractBeanDefinition -> public void setInstanceSupplier(@Nullable Supplier<?> instanceSupplier);1498780456;Specify a callback for creating an instance of the bean,_as an alternative to a declaratively specified factory method._<p>If such a callback is set, it will override any other constructor_or factory method metadata. However, bean property population and_potential annotation-driven injection will still apply as usual._@since 5.0_@see #setConstructorArgumentValues(ConstructorArgumentValues)_@see #setPropertyValues(MutablePropertyValues);public void setInstanceSupplier(@Nullable Supplier<?> instanceSupplier) {_		this.instanceSupplier = instanceSupplier__	};specify,a,callback,for,creating,an,instance,of,the,bean,as,an,alternative,to,a,declaratively,specified,factory,method,p,if,such,a,callback,is,set,it,will,override,any,other,constructor,or,factory,method,metadata,however,bean,property,population,and,potential,annotation,driven,injection,will,still,apply,as,usual,since,5,0,see,set,constructor,argument,values,constructor,argument,values,see,set,property,values,mutable,property,values;public,void,set,instance,supplier,nullable,supplier,instance,supplier,this,instance,supplier,instance,supplier
AbstractBeanDefinition -> public void setInstanceSupplier(@Nullable Supplier<?> instanceSupplier);1502974979;Specify a callback for creating an instance of the bean,_as an alternative to a declaratively specified factory method._<p>If such a callback is set, it will override any other constructor_or factory method metadata. However, bean property population and_potential annotation-driven injection will still apply as usual._@since 5.0_@see #setConstructorArgumentValues(ConstructorArgumentValues)_@see #setPropertyValues(MutablePropertyValues);public void setInstanceSupplier(@Nullable Supplier<?> instanceSupplier) {_		this.instanceSupplier = instanceSupplier__	};specify,a,callback,for,creating,an,instance,of,the,bean,as,an,alternative,to,a,declaratively,specified,factory,method,p,if,such,a,callback,is,set,it,will,override,any,other,constructor,or,factory,method,metadata,however,bean,property,population,and,potential,annotation,driven,injection,will,still,apply,as,usual,since,5,0,see,set,constructor,argument,values,constructor,argument,values,see,set,property,values,mutable,property,values;public,void,set,instance,supplier,nullable,supplier,instance,supplier,this,instance,supplier,instance,supplier
AbstractBeanDefinition -> public void setInstanceSupplier(@Nullable Supplier<?> instanceSupplier);1503008029;Specify a callback for creating an instance of the bean,_as an alternative to a declaratively specified factory method._<p>If such a callback is set, it will override any other constructor_or factory method metadata. However, bean property population and_potential annotation-driven injection will still apply as usual._@since 5.0_@see #setConstructorArgumentValues(ConstructorArgumentValues)_@see #setPropertyValues(MutablePropertyValues);public void setInstanceSupplier(@Nullable Supplier<?> instanceSupplier) {_		this.instanceSupplier = instanceSupplier__	};specify,a,callback,for,creating,an,instance,of,the,bean,as,an,alternative,to,a,declaratively,specified,factory,method,p,if,such,a,callback,is,set,it,will,override,any,other,constructor,or,factory,method,metadata,however,bean,property,population,and,potential,annotation,driven,injection,will,still,apply,as,usual,since,5,0,see,set,constructor,argument,values,constructor,argument,values,see,set,property,values,mutable,property,values;public,void,set,instance,supplier,nullable,supplier,instance,supplier,this,instance,supplier,instance,supplier
AbstractBeanDefinition -> public void setInstanceSupplier(@Nullable Supplier<?> instanceSupplier);1510606271;Specify a callback for creating an instance of the bean,_as an alternative to a declaratively specified factory method._<p>If such a callback is set, it will override any other constructor_or factory method metadata. However, bean property population and_potential annotation-driven injection will still apply as usual._@since 5.0_@see #setConstructorArgumentValues(ConstructorArgumentValues)_@see #setPropertyValues(MutablePropertyValues);public void setInstanceSupplier(@Nullable Supplier<?> instanceSupplier) {_		this.instanceSupplier = instanceSupplier__	};specify,a,callback,for,creating,an,instance,of,the,bean,as,an,alternative,to,a,declaratively,specified,factory,method,p,if,such,a,callback,is,set,it,will,override,any,other,constructor,or,factory,method,metadata,however,bean,property,population,and,potential,annotation,driven,injection,will,still,apply,as,usual,since,5,0,see,set,constructor,argument,values,constructor,argument,values,see,set,property,values,mutable,property,values;public,void,set,instance,supplier,nullable,supplier,instance,supplier,this,instance,supplier,instance,supplier
AbstractBeanDefinition -> public void setInstanceSupplier(@Nullable Supplier<?> instanceSupplier);1510675876;Specify a callback for creating an instance of the bean,_as an alternative to a declaratively specified factory method._<p>If such a callback is set, it will override any other constructor_or factory method metadata. However, bean property population and_potential annotation-driven injection will still apply as usual._@since 5.0_@see #setConstructorArgumentValues(ConstructorArgumentValues)_@see #setPropertyValues(MutablePropertyValues);public void setInstanceSupplier(@Nullable Supplier<?> instanceSupplier) {_		this.instanceSupplier = instanceSupplier__	};specify,a,callback,for,creating,an,instance,of,the,bean,as,an,alternative,to,a,declaratively,specified,factory,method,p,if,such,a,callback,is,set,it,will,override,any,other,constructor,or,factory,method,metadata,however,bean,property,population,and,potential,annotation,driven,injection,will,still,apply,as,usual,since,5,0,see,set,constructor,argument,values,constructor,argument,values,see,set,property,values,mutable,property,values;public,void,set,instance,supplier,nullable,supplier,instance,supplier,this,instance,supplier,instance,supplier
AbstractBeanDefinition -> public void setInstanceSupplier(@Nullable Supplier<?> instanceSupplier);1530174524;Specify a callback for creating an instance of the bean,_as an alternative to a declaratively specified factory method._<p>If such a callback is set, it will override any other constructor_or factory method metadata. However, bean property population and_potential annotation-driven injection will still apply as usual._@since 5.0_@see #setConstructorArgumentValues(ConstructorArgumentValues)_@see #setPropertyValues(MutablePropertyValues);public void setInstanceSupplier(@Nullable Supplier<?> instanceSupplier) {_		this.instanceSupplier = instanceSupplier__	};specify,a,callback,for,creating,an,instance,of,the,bean,as,an,alternative,to,a,declaratively,specified,factory,method,p,if,such,a,callback,is,set,it,will,override,any,other,constructor,or,factory,method,metadata,however,bean,property,population,and,potential,annotation,driven,injection,will,still,apply,as,usual,since,5,0,see,set,constructor,argument,values,constructor,argument,values,see,set,property,values,mutable,property,values;public,void,set,instance,supplier,nullable,supplier,instance,supplier,this,instance,supplier,instance,supplier
AbstractBeanDefinition -> public void setInstanceSupplier(@Nullable Supplier<?> instanceSupplier);1530174524;Specify a callback for creating an instance of the bean,_as an alternative to a declaratively specified factory method._<p>If such a callback is set, it will override any other constructor_or factory method metadata. However, bean property population and_potential annotation-driven injection will still apply as usual._@since 5.0_@see #setConstructorArgumentValues(ConstructorArgumentValues)_@see #setPropertyValues(MutablePropertyValues);public void setInstanceSupplier(@Nullable Supplier<?> instanceSupplier) {_		this.instanceSupplier = instanceSupplier__	};specify,a,callback,for,creating,an,instance,of,the,bean,as,an,alternative,to,a,declaratively,specified,factory,method,p,if,such,a,callback,is,set,it,will,override,any,other,constructor,or,factory,method,metadata,however,bean,property,population,and,potential,annotation,driven,injection,will,still,apply,as,usual,since,5,0,see,set,constructor,argument,values,constructor,argument,values,see,set,property,values,mutable,property,values;public,void,set,instance,supplier,nullable,supplier,instance,supplier,this,instance,supplier,instance,supplier
AbstractBeanDefinition -> public void setInstanceSupplier(@Nullable Supplier<?> instanceSupplier);1530174524;Specify a callback for creating an instance of the bean,_as an alternative to a declaratively specified factory method._<p>If such a callback is set, it will override any other constructor_or factory method metadata. However, bean property population and_potential annotation-driven injection will still apply as usual._@since 5.0_@see #setConstructorArgumentValues(ConstructorArgumentValues)_@see #setPropertyValues(MutablePropertyValues);public void setInstanceSupplier(@Nullable Supplier<?> instanceSupplier) {_		this.instanceSupplier = instanceSupplier__	};specify,a,callback,for,creating,an,instance,of,the,bean,as,an,alternative,to,a,declaratively,specified,factory,method,p,if,such,a,callback,is,set,it,will,override,any,other,constructor,or,factory,method,metadata,however,bean,property,population,and,potential,annotation,driven,injection,will,still,apply,as,usual,since,5,0,see,set,constructor,argument,values,constructor,argument,values,see,set,property,values,mutable,property,values;public,void,set,instance,supplier,nullable,supplier,instance,supplier,this,instance,supplier,instance,supplier
AbstractBeanDefinition -> public void setInstanceSupplier(@Nullable Supplier<?> instanceSupplier);1530190293;Specify a callback for creating an instance of the bean,_as an alternative to a declaratively specified factory method._<p>If such a callback is set, it will override any other constructor_or factory method metadata. However, bean property population and_potential annotation-driven injection will still apply as usual._@since 5.0_@see #setConstructorArgumentValues(ConstructorArgumentValues)_@see #setPropertyValues(MutablePropertyValues);public void setInstanceSupplier(@Nullable Supplier<?> instanceSupplier) {_		this.instanceSupplier = instanceSupplier__	};specify,a,callback,for,creating,an,instance,of,the,bean,as,an,alternative,to,a,declaratively,specified,factory,method,p,if,such,a,callback,is,set,it,will,override,any,other,constructor,or,factory,method,metadata,however,bean,property,population,and,potential,annotation,driven,injection,will,still,apply,as,usual,since,5,0,see,set,constructor,argument,values,constructor,argument,values,see,set,property,values,mutable,property,values;public,void,set,instance,supplier,nullable,supplier,instance,supplier,this,instance,supplier,instance,supplier
AbstractBeanDefinition -> public void setInstanceSupplier(@Nullable Supplier<?> instanceSupplier);1532981251;Specify a callback for creating an instance of the bean,_as an alternative to a declaratively specified factory method._<p>If such a callback is set, it will override any other constructor_or factory method metadata. However, bean property population and_potential annotation-driven injection will still apply as usual._@since 5.0_@see #setConstructorArgumentValues(ConstructorArgumentValues)_@see #setPropertyValues(MutablePropertyValues);public void setInstanceSupplier(@Nullable Supplier<?> instanceSupplier) {_		this.instanceSupplier = instanceSupplier__	};specify,a,callback,for,creating,an,instance,of,the,bean,as,an,alternative,to,a,declaratively,specified,factory,method,p,if,such,a,callback,is,set,it,will,override,any,other,constructor,or,factory,method,metadata,however,bean,property,population,and,potential,annotation,driven,injection,will,still,apply,as,usual,since,5,0,see,set,constructor,argument,values,constructor,argument,values,see,set,property,values,mutable,property,values;public,void,set,instance,supplier,nullable,supplier,instance,supplier,this,instance,supplier,instance,supplier
AbstractBeanDefinition -> public void setInstanceSupplier(@Nullable Supplier<?> instanceSupplier);1536863076;Specify a callback for creating an instance of the bean,_as an alternative to a declaratively specified factory method._<p>If such a callback is set, it will override any other constructor_or factory method metadata. However, bean property population and_potential annotation-driven injection will still apply as usual._@since 5.0_@see #setConstructorArgumentValues(ConstructorArgumentValues)_@see #setPropertyValues(MutablePropertyValues);public void setInstanceSupplier(@Nullable Supplier<?> instanceSupplier) {_		this.instanceSupplier = instanceSupplier__	};specify,a,callback,for,creating,an,instance,of,the,bean,as,an,alternative,to,a,declaratively,specified,factory,method,p,if,such,a,callback,is,set,it,will,override,any,other,constructor,or,factory,method,metadata,however,bean,property,population,and,potential,annotation,driven,injection,will,still,apply,as,usual,since,5,0,see,set,constructor,argument,values,constructor,argument,values,see,set,property,values,mutable,property,values;public,void,set,instance,supplier,nullable,supplier,instance,supplier,this,instance,supplier,instance,supplier
AbstractBeanDefinition -> public boolean isSingleton();1328020251;Return whether this a <b>Singleton</b>, with a single shared instance_returned from all calls._@see #SCOPE_SINGLETON;public boolean isSingleton() {_		return this.singleton__	};return,whether,this,a,b,singleton,b,with,a,single,shared,instance,returned,from,all,calls,see;public,boolean,is,singleton,return,this,singleton
AbstractBeanDefinition -> public boolean isSingleton();1337202589;Return whether this a <b>Singleton</b>, with a single shared instance_returned from all calls._@see #SCOPE_SINGLETON;public boolean isSingleton() {_		return this.singleton__	};return,whether,this,a,b,singleton,b,with,a,single,shared,instance,returned,from,all,calls,see;public,boolean,is,singleton,return,this,singleton
AbstractBeanDefinition -> public boolean isSingleton();1357119239;Return whether this a <b>Singleton</b>, with a single shared instance_returned from all calls._@see #SCOPE_SINGLETON;public boolean isSingleton() {_		return this.singleton__	};return,whether,this,a,b,singleton,b,with,a,single,shared,instance,returned,from,all,calls,see;public,boolean,is,singleton,return,this,singleton
AbstractBeanDefinition -> public boolean isSingleton();1367508310;Return whether this a <b>Singleton</b>, with a single shared instance_returned from all calls._@see #SCOPE_SINGLETON;public boolean isSingleton() {_		return this.singleton__	};return,whether,this,a,b,singleton,b,with,a,single,shared,instance,returned,from,all,calls,see;public,boolean,is,singleton,return,this,singleton
AbstractBeanDefinition -> public boolean isSingleton();1367943112;Return whether this a <b>Singleton</b>, with a single shared instance_returned from all calls._@see #SCOPE_SINGLETON;public boolean isSingleton() {_		return SCOPE_SINGLETON.equals(scope) || SCOPE_DEFAULT.equals(scope)__	};return,whether,this,a,b,singleton,b,with,a,single,shared,instance,returned,from,all,calls,see;public,boolean,is,singleton,return,equals,scope,equals,scope
AbstractBeanDefinition -> public void overrideFrom(BeanDefinition other);1328020251;Override settings in this bean definition (assumably a copied parent_from a parent-child inheritance relationship) from the given bean_definition (assumably the child)._<ul>_<li>Will override beanClass if specified in the given bean definition._<li>Will always take <code>abstract</code>, <code>scope</code>,_<code>lazyInit</code>, <code>autowireMode</code>, <code>dependencyCheck</code>,_and <code>dependsOn</code> from the given bean definition._<li>Will add <code>constructorArgumentValues</code>, <code>propertyValues</code>,_<code>methodOverrides</code> from the given bean definition to existing ones._<li>Will override <code>factoryBeanName</code>, <code>factoryMethodName</code>,_<code>initMethodName</code>, and <code>destroyMethodName</code> if specified_in the given bean definition._</ul>;public void overrideFrom(BeanDefinition other) {_		if (StringUtils.hasLength(other.getBeanClassName())) {_			setBeanClassName(other.getBeanClassName())__		}_		if (StringUtils.hasLength(other.getFactoryBeanName())) {_			setFactoryBeanName(other.getFactoryBeanName())__		}_		if (StringUtils.hasLength(other.getFactoryMethodName())) {_			setFactoryMethodName(other.getFactoryMethodName())__		}_		if (StringUtils.hasLength(other.getScope())) {_			setScope(other.getScope())__		}_		setAbstract(other.isAbstract())__		setLazyInit(other.isLazyInit())__		setRole(other.getRole())__		getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues())__		getPropertyValues().addPropertyValues(other.getPropertyValues())__		setSource(other.getSource())__		copyAttributesFrom(other)___		if (other instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition otherAbd = (AbstractBeanDefinition) other__			if (otherAbd.hasBeanClass()) {_				setBeanClass(otherAbd.getBeanClass())__			}_			setAutowireCandidate(otherAbd.isAutowireCandidate())__			setAutowireMode(otherAbd.getAutowireMode())__			copyQualifiersFrom(otherAbd)__			setPrimary(otherAbd.isPrimary())__			setDependencyCheck(otherAbd.getDependencyCheck())__			setDependsOn(otherAbd.getDependsOn())__			setNonPublicAccessAllowed(otherAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(otherAbd.isLenientConstructorResolution())__			if (StringUtils.hasLength(otherAbd.getInitMethodName())) {_				setInitMethodName(otherAbd.getInitMethodName())__				setEnforceInitMethod(otherAbd.isEnforceInitMethod())__			}_			if (StringUtils.hasLength(otherAbd.getDestroyMethodName())) {_				setDestroyMethodName(otherAbd.getDestroyMethodName())__				setEnforceDestroyMethod(otherAbd.isEnforceDestroyMethod())__			}_			getMethodOverrides().addOverrides(otherAbd.getMethodOverrides())__			setSynthetic(otherAbd.isSynthetic())__			setResource(otherAbd.getResource())__		}_		else {_			setResourceDescription(other.getResourceDescription())__		}_	};override,settings,in,this,bean,definition,assumably,a,copied,parent,from,a,parent,child,inheritance,relationship,from,the,given,bean,definition,assumably,the,child,ul,li,will,override,bean,class,if,specified,in,the,given,bean,definition,li,will,always,take,code,abstract,code,code,scope,code,code,lazy,init,code,code,autowire,mode,code,code,dependency,check,code,and,code,depends,on,code,from,the,given,bean,definition,li,will,add,code,constructor,argument,values,code,code,property,values,code,code,method,overrides,code,from,the,given,bean,definition,to,existing,ones,li,will,override,code,factory,bean,name,code,code,factory,method,name,code,code,init,method,name,code,and,code,destroy,method,name,code,if,specified,in,the,given,bean,definition,ul;public,void,override,from,bean,definition,other,if,string,utils,has,length,other,get,bean,class,name,set,bean,class,name,other,get,bean,class,name,if,string,utils,has,length,other,get,factory,bean,name,set,factory,bean,name,other,get,factory,bean,name,if,string,utils,has,length,other,get,factory,method,name,set,factory,method,name,other,get,factory,method,name,if,string,utils,has,length,other,get,scope,set,scope,other,get,scope,set,abstract,other,is,abstract,set,lazy,init,other,is,lazy,init,set,role,other,get,role,get,constructor,argument,values,add,argument,values,other,get,constructor,argument,values,get,property,values,add,property,values,other,get,property,values,set,source,other,get,source,copy,attributes,from,other,if,other,instanceof,abstract,bean,definition,abstract,bean,definition,other,abd,abstract,bean,definition,other,if,other,abd,has,bean,class,set,bean,class,other,abd,get,bean,class,set,autowire,candidate,other,abd,is,autowire,candidate,set,autowire,mode,other,abd,get,autowire,mode,copy,qualifiers,from,other,abd,set,primary,other,abd,is,primary,set,dependency,check,other,abd,get,dependency,check,set,depends,on,other,abd,get,depends,on,set,non,public,access,allowed,other,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,other,abd,is,lenient,constructor,resolution,if,string,utils,has,length,other,abd,get,init,method,name,set,init,method,name,other,abd,get,init,method,name,set,enforce,init,method,other,abd,is,enforce,init,method,if,string,utils,has,length,other,abd,get,destroy,method,name,set,destroy,method,name,other,abd,get,destroy,method,name,set,enforce,destroy,method,other,abd,is,enforce,destroy,method,get,method,overrides,add,overrides,other,abd,get,method,overrides,set,synthetic,other,abd,is,synthetic,set,resource,other,abd,get,resource,else,set,resource,description,other,get,resource,description
AbstractBeanDefinition -> public void overrideFrom(BeanDefinition other);1337202589;Override settings in this bean definition (presumably a copied parent_from a parent-child inheritance relationship) from the given bean_definition (presumably the child)._<ul>_<li>Will override beanClass if specified in the given bean definition._<li>Will always take <code>abstract</code>, <code>scope</code>,_<code>lazyInit</code>, <code>autowireMode</code>, <code>dependencyCheck</code>,_and <code>dependsOn</code> from the given bean definition._<li>Will add <code>constructorArgumentValues</code>, <code>propertyValues</code>,_<code>methodOverrides</code> from the given bean definition to existing ones._<li>Will override <code>factoryBeanName</code>, <code>factoryMethodName</code>,_<code>initMethodName</code>, and <code>destroyMethodName</code> if specified_in the given bean definition._</ul>;public void overrideFrom(BeanDefinition other) {_		if (StringUtils.hasLength(other.getBeanClassName())) {_			setBeanClassName(other.getBeanClassName())__		}_		if (StringUtils.hasLength(other.getFactoryBeanName())) {_			setFactoryBeanName(other.getFactoryBeanName())__		}_		if (StringUtils.hasLength(other.getFactoryMethodName())) {_			setFactoryMethodName(other.getFactoryMethodName())__		}_		if (StringUtils.hasLength(other.getScope())) {_			setScope(other.getScope())__		}_		setAbstract(other.isAbstract())__		setLazyInit(other.isLazyInit())__		setRole(other.getRole())__		getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues())__		getPropertyValues().addPropertyValues(other.getPropertyValues())__		setSource(other.getSource())__		copyAttributesFrom(other)___		if (other instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition otherAbd = (AbstractBeanDefinition) other__			if (otherAbd.hasBeanClass()) {_				setBeanClass(otherAbd.getBeanClass())__			}_			setAutowireCandidate(otherAbd.isAutowireCandidate())__			setAutowireMode(otherAbd.getAutowireMode())__			copyQualifiersFrom(otherAbd)__			setPrimary(otherAbd.isPrimary())__			setDependencyCheck(otherAbd.getDependencyCheck())__			setDependsOn(otherAbd.getDependsOn())__			setNonPublicAccessAllowed(otherAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(otherAbd.isLenientConstructorResolution())__			if (StringUtils.hasLength(otherAbd.getInitMethodName())) {_				setInitMethodName(otherAbd.getInitMethodName())__				setEnforceInitMethod(otherAbd.isEnforceInitMethod())__			}_			if (StringUtils.hasLength(otherAbd.getDestroyMethodName())) {_				setDestroyMethodName(otherAbd.getDestroyMethodName())__				setEnforceDestroyMethod(otherAbd.isEnforceDestroyMethod())__			}_			getMethodOverrides().addOverrides(otherAbd.getMethodOverrides())__			setSynthetic(otherAbd.isSynthetic())__			setResource(otherAbd.getResource())__		}_		else {_			setResourceDescription(other.getResourceDescription())__		}_	};override,settings,in,this,bean,definition,presumably,a,copied,parent,from,a,parent,child,inheritance,relationship,from,the,given,bean,definition,presumably,the,child,ul,li,will,override,bean,class,if,specified,in,the,given,bean,definition,li,will,always,take,code,abstract,code,code,scope,code,code,lazy,init,code,code,autowire,mode,code,code,dependency,check,code,and,code,depends,on,code,from,the,given,bean,definition,li,will,add,code,constructor,argument,values,code,code,property,values,code,code,method,overrides,code,from,the,given,bean,definition,to,existing,ones,li,will,override,code,factory,bean,name,code,code,factory,method,name,code,code,init,method,name,code,and,code,destroy,method,name,code,if,specified,in,the,given,bean,definition,ul;public,void,override,from,bean,definition,other,if,string,utils,has,length,other,get,bean,class,name,set,bean,class,name,other,get,bean,class,name,if,string,utils,has,length,other,get,factory,bean,name,set,factory,bean,name,other,get,factory,bean,name,if,string,utils,has,length,other,get,factory,method,name,set,factory,method,name,other,get,factory,method,name,if,string,utils,has,length,other,get,scope,set,scope,other,get,scope,set,abstract,other,is,abstract,set,lazy,init,other,is,lazy,init,set,role,other,get,role,get,constructor,argument,values,add,argument,values,other,get,constructor,argument,values,get,property,values,add,property,values,other,get,property,values,set,source,other,get,source,copy,attributes,from,other,if,other,instanceof,abstract,bean,definition,abstract,bean,definition,other,abd,abstract,bean,definition,other,if,other,abd,has,bean,class,set,bean,class,other,abd,get,bean,class,set,autowire,candidate,other,abd,is,autowire,candidate,set,autowire,mode,other,abd,get,autowire,mode,copy,qualifiers,from,other,abd,set,primary,other,abd,is,primary,set,dependency,check,other,abd,get,dependency,check,set,depends,on,other,abd,get,depends,on,set,non,public,access,allowed,other,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,other,abd,is,lenient,constructor,resolution,if,string,utils,has,length,other,abd,get,init,method,name,set,init,method,name,other,abd,get,init,method,name,set,enforce,init,method,other,abd,is,enforce,init,method,if,string,utils,has,length,other,abd,get,destroy,method,name,set,destroy,method,name,other,abd,get,destroy,method,name,set,enforce,destroy,method,other,abd,is,enforce,destroy,method,get,method,overrides,add,overrides,other,abd,get,method,overrides,set,synthetic,other,abd,is,synthetic,set,resource,other,abd,get,resource,else,set,resource,description,other,get,resource,description
AbstractBeanDefinition -> public void overrideFrom(BeanDefinition other);1356735495;Override settings in this bean definition (presumably a copied parent_from a parent-child inheritance relationship) from the given bean_definition (presumably the child)._<ul>_<li>Will override beanClass if specified in the given bean definition._<li>Will always take {@code abstract}, {@code scope},_{@code lazyInit}, {@code autowireMode}, {@code dependencyCheck},_and {@code dependsOn} from the given bean definition._<li>Will add {@code constructorArgumentValues}, {@code propertyValues},_{@code methodOverrides} from the given bean definition to existing ones._<li>Will override {@code factoryBeanName}, {@code factoryMethodName},_{@code initMethodName}, and {@code destroyMethodName} if specified_in the given bean definition._</ul>;public void overrideFrom(BeanDefinition other) {_		if (StringUtils.hasLength(other.getBeanClassName())) {_			setBeanClassName(other.getBeanClassName())__		}_		if (StringUtils.hasLength(other.getFactoryBeanName())) {_			setFactoryBeanName(other.getFactoryBeanName())__		}_		if (StringUtils.hasLength(other.getFactoryMethodName())) {_			setFactoryMethodName(other.getFactoryMethodName())__		}_		if (StringUtils.hasLength(other.getScope())) {_			setScope(other.getScope())__		}_		setAbstract(other.isAbstract())__		setLazyInit(other.isLazyInit())__		setRole(other.getRole())__		getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues())__		getPropertyValues().addPropertyValues(other.getPropertyValues())__		setSource(other.getSource())__		copyAttributesFrom(other)___		if (other instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition otherAbd = (AbstractBeanDefinition) other__			if (otherAbd.hasBeanClass()) {_				setBeanClass(otherAbd.getBeanClass())__			}_			setAutowireCandidate(otherAbd.isAutowireCandidate())__			setAutowireMode(otherAbd.getAutowireMode())__			copyQualifiersFrom(otherAbd)__			setPrimary(otherAbd.isPrimary())__			setDependencyCheck(otherAbd.getDependencyCheck())__			setDependsOn(otherAbd.getDependsOn())__			setNonPublicAccessAllowed(otherAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(otherAbd.isLenientConstructorResolution())__			if (StringUtils.hasLength(otherAbd.getInitMethodName())) {_				setInitMethodName(otherAbd.getInitMethodName())__				setEnforceInitMethod(otherAbd.isEnforceInitMethod())__			}_			if (StringUtils.hasLength(otherAbd.getDestroyMethodName())) {_				setDestroyMethodName(otherAbd.getDestroyMethodName())__				setEnforceDestroyMethod(otherAbd.isEnforceDestroyMethod())__			}_			getMethodOverrides().addOverrides(otherAbd.getMethodOverrides())__			setSynthetic(otherAbd.isSynthetic())__			setResource(otherAbd.getResource())__		}_		else {_			setResourceDescription(other.getResourceDescription())__		}_	};override,settings,in,this,bean,definition,presumably,a,copied,parent,from,a,parent,child,inheritance,relationship,from,the,given,bean,definition,presumably,the,child,ul,li,will,override,bean,class,if,specified,in,the,given,bean,definition,li,will,always,take,code,abstract,code,scope,code,lazy,init,code,autowire,mode,code,dependency,check,and,code,depends,on,from,the,given,bean,definition,li,will,add,code,constructor,argument,values,code,property,values,code,method,overrides,from,the,given,bean,definition,to,existing,ones,li,will,override,code,factory,bean,name,code,factory,method,name,code,init,method,name,and,code,destroy,method,name,if,specified,in,the,given,bean,definition,ul;public,void,override,from,bean,definition,other,if,string,utils,has,length,other,get,bean,class,name,set,bean,class,name,other,get,bean,class,name,if,string,utils,has,length,other,get,factory,bean,name,set,factory,bean,name,other,get,factory,bean,name,if,string,utils,has,length,other,get,factory,method,name,set,factory,method,name,other,get,factory,method,name,if,string,utils,has,length,other,get,scope,set,scope,other,get,scope,set,abstract,other,is,abstract,set,lazy,init,other,is,lazy,init,set,role,other,get,role,get,constructor,argument,values,add,argument,values,other,get,constructor,argument,values,get,property,values,add,property,values,other,get,property,values,set,source,other,get,source,copy,attributes,from,other,if,other,instanceof,abstract,bean,definition,abstract,bean,definition,other,abd,abstract,bean,definition,other,if,other,abd,has,bean,class,set,bean,class,other,abd,get,bean,class,set,autowire,candidate,other,abd,is,autowire,candidate,set,autowire,mode,other,abd,get,autowire,mode,copy,qualifiers,from,other,abd,set,primary,other,abd,is,primary,set,dependency,check,other,abd,get,dependency,check,set,depends,on,other,abd,get,depends,on,set,non,public,access,allowed,other,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,other,abd,is,lenient,constructor,resolution,if,string,utils,has,length,other,abd,get,init,method,name,set,init,method,name,other,abd,get,init,method,name,set,enforce,init,method,other,abd,is,enforce,init,method,if,string,utils,has,length,other,abd,get,destroy,method,name,set,destroy,method,name,other,abd,get,destroy,method,name,set,enforce,destroy,method,other,abd,is,enforce,destroy,method,get,method,overrides,add,overrides,other,abd,get,method,overrides,set,synthetic,other,abd,is,synthetic,set,resource,other,abd,get,resource,else,set,resource,description,other,get,resource,description
AbstractBeanDefinition -> public void overrideFrom(BeanDefinition other);1357119239;Override settings in this bean definition (presumably a copied parent_from a parent-child inheritance relationship) from the given bean_definition (presumably the child)._<ul>_<li>Will override beanClass if specified in the given bean definition._<li>Will always take {@code abstract}, {@code scope},_{@code lazyInit}, {@code autowireMode}, {@code dependencyCheck},_and {@code dependsOn} from the given bean definition._<li>Will add {@code constructorArgumentValues}, {@code propertyValues},_{@code methodOverrides} from the given bean definition to existing ones._<li>Will override {@code factoryBeanName}, {@code factoryMethodName},_{@code initMethodName}, and {@code destroyMethodName} if specified_in the given bean definition._</ul>;public void overrideFrom(BeanDefinition other) {_		if (StringUtils.hasLength(other.getBeanClassName())) {_			setBeanClassName(other.getBeanClassName())__		}_		if (StringUtils.hasLength(other.getFactoryBeanName())) {_			setFactoryBeanName(other.getFactoryBeanName())__		}_		if (StringUtils.hasLength(other.getFactoryMethodName())) {_			setFactoryMethodName(other.getFactoryMethodName())__		}_		if (StringUtils.hasLength(other.getScope())) {_			setScope(other.getScope())__		}_		setAbstract(other.isAbstract())__		setLazyInit(other.isLazyInit())__		setRole(other.getRole())__		getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues())__		getPropertyValues().addPropertyValues(other.getPropertyValues())__		setSource(other.getSource())__		copyAttributesFrom(other)___		if (other instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition otherAbd = (AbstractBeanDefinition) other__			if (otherAbd.hasBeanClass()) {_				setBeanClass(otherAbd.getBeanClass())__			}_			setAutowireCandidate(otherAbd.isAutowireCandidate())__			setAutowireMode(otherAbd.getAutowireMode())__			copyQualifiersFrom(otherAbd)__			setPrimary(otherAbd.isPrimary())__			setDependencyCheck(otherAbd.getDependencyCheck())__			setDependsOn(otherAbd.getDependsOn())__			setNonPublicAccessAllowed(otherAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(otherAbd.isLenientConstructorResolution())__			if (StringUtils.hasLength(otherAbd.getInitMethodName())) {_				setInitMethodName(otherAbd.getInitMethodName())__				setEnforceInitMethod(otherAbd.isEnforceInitMethod())__			}_			if (StringUtils.hasLength(otherAbd.getDestroyMethodName())) {_				setDestroyMethodName(otherAbd.getDestroyMethodName())__				setEnforceDestroyMethod(otherAbd.isEnforceDestroyMethod())__			}_			getMethodOverrides().addOverrides(otherAbd.getMethodOverrides())__			setSynthetic(otherAbd.isSynthetic())__			setResource(otherAbd.getResource())__		}_		else {_			setResourceDescription(other.getResourceDescription())__		}_	};override,settings,in,this,bean,definition,presumably,a,copied,parent,from,a,parent,child,inheritance,relationship,from,the,given,bean,definition,presumably,the,child,ul,li,will,override,bean,class,if,specified,in,the,given,bean,definition,li,will,always,take,code,abstract,code,scope,code,lazy,init,code,autowire,mode,code,dependency,check,and,code,depends,on,from,the,given,bean,definition,li,will,add,code,constructor,argument,values,code,property,values,code,method,overrides,from,the,given,bean,definition,to,existing,ones,li,will,override,code,factory,bean,name,code,factory,method,name,code,init,method,name,and,code,destroy,method,name,if,specified,in,the,given,bean,definition,ul;public,void,override,from,bean,definition,other,if,string,utils,has,length,other,get,bean,class,name,set,bean,class,name,other,get,bean,class,name,if,string,utils,has,length,other,get,factory,bean,name,set,factory,bean,name,other,get,factory,bean,name,if,string,utils,has,length,other,get,factory,method,name,set,factory,method,name,other,get,factory,method,name,if,string,utils,has,length,other,get,scope,set,scope,other,get,scope,set,abstract,other,is,abstract,set,lazy,init,other,is,lazy,init,set,role,other,get,role,get,constructor,argument,values,add,argument,values,other,get,constructor,argument,values,get,property,values,add,property,values,other,get,property,values,set,source,other,get,source,copy,attributes,from,other,if,other,instanceof,abstract,bean,definition,abstract,bean,definition,other,abd,abstract,bean,definition,other,if,other,abd,has,bean,class,set,bean,class,other,abd,get,bean,class,set,autowire,candidate,other,abd,is,autowire,candidate,set,autowire,mode,other,abd,get,autowire,mode,copy,qualifiers,from,other,abd,set,primary,other,abd,is,primary,set,dependency,check,other,abd,get,dependency,check,set,depends,on,other,abd,get,depends,on,set,non,public,access,allowed,other,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,other,abd,is,lenient,constructor,resolution,if,string,utils,has,length,other,abd,get,init,method,name,set,init,method,name,other,abd,get,init,method,name,set,enforce,init,method,other,abd,is,enforce,init,method,if,string,utils,has,length,other,abd,get,destroy,method,name,set,destroy,method,name,other,abd,get,destroy,method,name,set,enforce,destroy,method,other,abd,is,enforce,destroy,method,get,method,overrides,add,overrides,other,abd,get,method,overrides,set,synthetic,other,abd,is,synthetic,set,resource,other,abd,get,resource,else,set,resource,description,other,get,resource,description
AbstractBeanDefinition -> public void overrideFrom(BeanDefinition other);1367508310;Override settings in this bean definition (presumably a copied parent_from a parent-child inheritance relationship) from the given bean_definition (presumably the child)._<ul>_<li>Will override beanClass if specified in the given bean definition._<li>Will always take {@code abstract}, {@code scope},_{@code lazyInit}, {@code autowireMode}, {@code dependencyCheck},_and {@code dependsOn} from the given bean definition._<li>Will add {@code constructorArgumentValues}, {@code propertyValues},_{@code methodOverrides} from the given bean definition to existing ones._<li>Will override {@code factoryBeanName}, {@code factoryMethodName},_{@code initMethodName}, and {@code destroyMethodName} if specified_in the given bean definition._</ul>;public void overrideFrom(BeanDefinition other) {_		if (StringUtils.hasLength(other.getBeanClassName())) {_			setBeanClassName(other.getBeanClassName())__		}_		if (StringUtils.hasLength(other.getFactoryBeanName())) {_			setFactoryBeanName(other.getFactoryBeanName())__		}_		if (StringUtils.hasLength(other.getFactoryMethodName())) {_			setFactoryMethodName(other.getFactoryMethodName())__		}_		if (StringUtils.hasLength(other.getScope())) {_			setScope(other.getScope())__		}_		setAbstract(other.isAbstract())__		setLazyInit(other.isLazyInit())__		setRole(other.getRole())__		getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues())__		getPropertyValues().addPropertyValues(other.getPropertyValues())__		setSource(other.getSource())__		copyAttributesFrom(other)___		if (other instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition otherAbd = (AbstractBeanDefinition) other__			if (otherAbd.hasBeanClass()) {_				setBeanClass(otherAbd.getBeanClass())__			}_			setAutowireCandidate(otherAbd.isAutowireCandidate())__			setAutowireMode(otherAbd.getAutowireMode())__			copyQualifiersFrom(otherAbd)__			setPrimary(otherAbd.isPrimary())__			setDependencyCheck(otherAbd.getDependencyCheck())__			setDependsOn(otherAbd.getDependsOn())__			setNonPublicAccessAllowed(otherAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(otherAbd.isLenientConstructorResolution())__			if (StringUtils.hasLength(otherAbd.getInitMethodName())) {_				setInitMethodName(otherAbd.getInitMethodName())__				setEnforceInitMethod(otherAbd.isEnforceInitMethod())__			}_			if (StringUtils.hasLength(otherAbd.getDestroyMethodName())) {_				setDestroyMethodName(otherAbd.getDestroyMethodName())__				setEnforceDestroyMethod(otherAbd.isEnforceDestroyMethod())__			}_			getMethodOverrides().addOverrides(otherAbd.getMethodOverrides())__			setSynthetic(otherAbd.isSynthetic())__			setResource(otherAbd.getResource())__		}_		else {_			setResourceDescription(other.getResourceDescription())__		}_	};override,settings,in,this,bean,definition,presumably,a,copied,parent,from,a,parent,child,inheritance,relationship,from,the,given,bean,definition,presumably,the,child,ul,li,will,override,bean,class,if,specified,in,the,given,bean,definition,li,will,always,take,code,abstract,code,scope,code,lazy,init,code,autowire,mode,code,dependency,check,and,code,depends,on,from,the,given,bean,definition,li,will,add,code,constructor,argument,values,code,property,values,code,method,overrides,from,the,given,bean,definition,to,existing,ones,li,will,override,code,factory,bean,name,code,factory,method,name,code,init,method,name,and,code,destroy,method,name,if,specified,in,the,given,bean,definition,ul;public,void,override,from,bean,definition,other,if,string,utils,has,length,other,get,bean,class,name,set,bean,class,name,other,get,bean,class,name,if,string,utils,has,length,other,get,factory,bean,name,set,factory,bean,name,other,get,factory,bean,name,if,string,utils,has,length,other,get,factory,method,name,set,factory,method,name,other,get,factory,method,name,if,string,utils,has,length,other,get,scope,set,scope,other,get,scope,set,abstract,other,is,abstract,set,lazy,init,other,is,lazy,init,set,role,other,get,role,get,constructor,argument,values,add,argument,values,other,get,constructor,argument,values,get,property,values,add,property,values,other,get,property,values,set,source,other,get,source,copy,attributes,from,other,if,other,instanceof,abstract,bean,definition,abstract,bean,definition,other,abd,abstract,bean,definition,other,if,other,abd,has,bean,class,set,bean,class,other,abd,get,bean,class,set,autowire,candidate,other,abd,is,autowire,candidate,set,autowire,mode,other,abd,get,autowire,mode,copy,qualifiers,from,other,abd,set,primary,other,abd,is,primary,set,dependency,check,other,abd,get,dependency,check,set,depends,on,other,abd,get,depends,on,set,non,public,access,allowed,other,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,other,abd,is,lenient,constructor,resolution,if,string,utils,has,length,other,abd,get,init,method,name,set,init,method,name,other,abd,get,init,method,name,set,enforce,init,method,other,abd,is,enforce,init,method,if,string,utils,has,length,other,abd,get,destroy,method,name,set,destroy,method,name,other,abd,get,destroy,method,name,set,enforce,destroy,method,other,abd,is,enforce,destroy,method,get,method,overrides,add,overrides,other,abd,get,method,overrides,set,synthetic,other,abd,is,synthetic,set,resource,other,abd,get,resource,else,set,resource,description,other,get,resource,description
AbstractBeanDefinition -> public void overrideFrom(BeanDefinition other);1367943112;Override settings in this bean definition (presumably a copied parent_from a parent-child inheritance relationship) from the given bean_definition (presumably the child)._<ul>_<li>Will override beanClass if specified in the given bean definition._<li>Will always take {@code abstract}, {@code scope},_{@code lazyInit}, {@code autowireMode}, {@code dependencyCheck},_and {@code dependsOn} from the given bean definition._<li>Will add {@code constructorArgumentValues}, {@code propertyValues},_{@code methodOverrides} from the given bean definition to existing ones._<li>Will override {@code factoryBeanName}, {@code factoryMethodName},_{@code initMethodName}, and {@code destroyMethodName} if specified_in the given bean definition._</ul>;public void overrideFrom(BeanDefinition other) {_		if (StringUtils.hasLength(other.getBeanClassName())) {_			setBeanClassName(other.getBeanClassName())__		}_		if (StringUtils.hasLength(other.getFactoryBeanName())) {_			setFactoryBeanName(other.getFactoryBeanName())__		}_		if (StringUtils.hasLength(other.getFactoryMethodName())) {_			setFactoryMethodName(other.getFactoryMethodName())__		}_		if (StringUtils.hasLength(other.getScope())) {_			setScope(other.getScope())__		}_		setAbstract(other.isAbstract())__		setLazyInit(other.isLazyInit())__		setRole(other.getRole())__		getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues())__		getPropertyValues().addPropertyValues(other.getPropertyValues())__		setSource(other.getSource())__		copyAttributesFrom(other)___		if (other instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition otherAbd = (AbstractBeanDefinition) other__			if (otherAbd.hasBeanClass()) {_				setBeanClass(otherAbd.getBeanClass())__			}_			setAutowireCandidate(otherAbd.isAutowireCandidate())__			setAutowireMode(otherAbd.getAutowireMode())__			copyQualifiersFrom(otherAbd)__			setPrimary(otherAbd.isPrimary())__			setDependencyCheck(otherAbd.getDependencyCheck())__			setDependsOn(otherAbd.getDependsOn())__			setNonPublicAccessAllowed(otherAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(otherAbd.isLenientConstructorResolution())__			if (StringUtils.hasLength(otherAbd.getInitMethodName())) {_				setInitMethodName(otherAbd.getInitMethodName())__				setEnforceInitMethod(otherAbd.isEnforceInitMethod())__			}_			if (StringUtils.hasLength(otherAbd.getDestroyMethodName())) {_				setDestroyMethodName(otherAbd.getDestroyMethodName())__				setEnforceDestroyMethod(otherAbd.isEnforceDestroyMethod())__			}_			getMethodOverrides().addOverrides(otherAbd.getMethodOverrides())__			setSynthetic(otherAbd.isSynthetic())__			setResource(otherAbd.getResource())__		}_		else {_			setResourceDescription(other.getResourceDescription())__		}_	};override,settings,in,this,bean,definition,presumably,a,copied,parent,from,a,parent,child,inheritance,relationship,from,the,given,bean,definition,presumably,the,child,ul,li,will,override,bean,class,if,specified,in,the,given,bean,definition,li,will,always,take,code,abstract,code,scope,code,lazy,init,code,autowire,mode,code,dependency,check,and,code,depends,on,from,the,given,bean,definition,li,will,add,code,constructor,argument,values,code,property,values,code,method,overrides,from,the,given,bean,definition,to,existing,ones,li,will,override,code,factory,bean,name,code,factory,method,name,code,init,method,name,and,code,destroy,method,name,if,specified,in,the,given,bean,definition,ul;public,void,override,from,bean,definition,other,if,string,utils,has,length,other,get,bean,class,name,set,bean,class,name,other,get,bean,class,name,if,string,utils,has,length,other,get,factory,bean,name,set,factory,bean,name,other,get,factory,bean,name,if,string,utils,has,length,other,get,factory,method,name,set,factory,method,name,other,get,factory,method,name,if,string,utils,has,length,other,get,scope,set,scope,other,get,scope,set,abstract,other,is,abstract,set,lazy,init,other,is,lazy,init,set,role,other,get,role,get,constructor,argument,values,add,argument,values,other,get,constructor,argument,values,get,property,values,add,property,values,other,get,property,values,set,source,other,get,source,copy,attributes,from,other,if,other,instanceof,abstract,bean,definition,abstract,bean,definition,other,abd,abstract,bean,definition,other,if,other,abd,has,bean,class,set,bean,class,other,abd,get,bean,class,set,autowire,candidate,other,abd,is,autowire,candidate,set,autowire,mode,other,abd,get,autowire,mode,copy,qualifiers,from,other,abd,set,primary,other,abd,is,primary,set,dependency,check,other,abd,get,dependency,check,set,depends,on,other,abd,get,depends,on,set,non,public,access,allowed,other,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,other,abd,is,lenient,constructor,resolution,if,string,utils,has,length,other,abd,get,init,method,name,set,init,method,name,other,abd,get,init,method,name,set,enforce,init,method,other,abd,is,enforce,init,method,if,string,utils,has,length,other,abd,get,destroy,method,name,set,destroy,method,name,other,abd,get,destroy,method,name,set,enforce,destroy,method,other,abd,is,enforce,destroy,method,get,method,overrides,add,overrides,other,abd,get,method,overrides,set,synthetic,other,abd,is,synthetic,set,resource,other,abd,get,resource,else,set,resource,description,other,get,resource,description
AbstractBeanDefinition -> public void overrideFrom(BeanDefinition other);1368482696;Override settings in this bean definition (presumably a copied parent_from a parent-child inheritance relationship) from the given bean_definition (presumably the child)._<ul>_<li>Will override beanClass if specified in the given bean definition._<li>Will always take {@code abstract}, {@code scope},_{@code lazyInit}, {@code autowireMode}, {@code dependencyCheck},_and {@code dependsOn} from the given bean definition._<li>Will add {@code constructorArgumentValues}, {@code propertyValues},_{@code methodOverrides} from the given bean definition to existing ones._<li>Will override {@code factoryBeanName}, {@code factoryMethodName},_{@code initMethodName}, and {@code destroyMethodName} if specified_in the given bean definition._</ul>;public void overrideFrom(BeanDefinition other) {_		if (StringUtils.hasLength(other.getBeanClassName())) {_			setBeanClassName(other.getBeanClassName())__		}_		if (StringUtils.hasLength(other.getFactoryBeanName())) {_			setFactoryBeanName(other.getFactoryBeanName())__		}_		if (StringUtils.hasLength(other.getFactoryMethodName())) {_			setFactoryMethodName(other.getFactoryMethodName())__		}_		if (StringUtils.hasLength(other.getScope())) {_			setScope(other.getScope())__		}_		setAbstract(other.isAbstract())__		setLazyInit(other.isLazyInit())__		setRole(other.getRole())__		getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues())__		getPropertyValues().addPropertyValues(other.getPropertyValues())__		setSource(other.getSource())__		copyAttributesFrom(other)___		if (other instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition otherAbd = (AbstractBeanDefinition) other__			if (otherAbd.hasBeanClass()) {_				setBeanClass(otherAbd.getBeanClass())__			}_			setAutowireCandidate(otherAbd.isAutowireCandidate())__			setAutowireMode(otherAbd.getAutowireMode())__			copyQualifiersFrom(otherAbd)__			setPrimary(otherAbd.isPrimary())__			setDependencyCheck(otherAbd.getDependencyCheck())__			setDependsOn(otherAbd.getDependsOn())__			setNonPublicAccessAllowed(otherAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(otherAbd.isLenientConstructorResolution())__			if (StringUtils.hasLength(otherAbd.getInitMethodName())) {_				setInitMethodName(otherAbd.getInitMethodName())__				setEnforceInitMethod(otherAbd.isEnforceInitMethod())__			}_			if (StringUtils.hasLength(otherAbd.getDestroyMethodName())) {_				setDestroyMethodName(otherAbd.getDestroyMethodName())__				setEnforceDestroyMethod(otherAbd.isEnforceDestroyMethod())__			}_			getMethodOverrides().addOverrides(otherAbd.getMethodOverrides())__			setSynthetic(otherAbd.isSynthetic())__			setResource(otherAbd.getResource())__		}_		else {_			setResourceDescription(other.getResourceDescription())__		}_	};override,settings,in,this,bean,definition,presumably,a,copied,parent,from,a,parent,child,inheritance,relationship,from,the,given,bean,definition,presumably,the,child,ul,li,will,override,bean,class,if,specified,in,the,given,bean,definition,li,will,always,take,code,abstract,code,scope,code,lazy,init,code,autowire,mode,code,dependency,check,and,code,depends,on,from,the,given,bean,definition,li,will,add,code,constructor,argument,values,code,property,values,code,method,overrides,from,the,given,bean,definition,to,existing,ones,li,will,override,code,factory,bean,name,code,factory,method,name,code,init,method,name,and,code,destroy,method,name,if,specified,in,the,given,bean,definition,ul;public,void,override,from,bean,definition,other,if,string,utils,has,length,other,get,bean,class,name,set,bean,class,name,other,get,bean,class,name,if,string,utils,has,length,other,get,factory,bean,name,set,factory,bean,name,other,get,factory,bean,name,if,string,utils,has,length,other,get,factory,method,name,set,factory,method,name,other,get,factory,method,name,if,string,utils,has,length,other,get,scope,set,scope,other,get,scope,set,abstract,other,is,abstract,set,lazy,init,other,is,lazy,init,set,role,other,get,role,get,constructor,argument,values,add,argument,values,other,get,constructor,argument,values,get,property,values,add,property,values,other,get,property,values,set,source,other,get,source,copy,attributes,from,other,if,other,instanceof,abstract,bean,definition,abstract,bean,definition,other,abd,abstract,bean,definition,other,if,other,abd,has,bean,class,set,bean,class,other,abd,get,bean,class,set,autowire,candidate,other,abd,is,autowire,candidate,set,autowire,mode,other,abd,get,autowire,mode,copy,qualifiers,from,other,abd,set,primary,other,abd,is,primary,set,dependency,check,other,abd,get,dependency,check,set,depends,on,other,abd,get,depends,on,set,non,public,access,allowed,other,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,other,abd,is,lenient,constructor,resolution,if,string,utils,has,length,other,abd,get,init,method,name,set,init,method,name,other,abd,get,init,method,name,set,enforce,init,method,other,abd,is,enforce,init,method,if,string,utils,has,length,other,abd,get,destroy,method,name,set,destroy,method,name,other,abd,get,destroy,method,name,set,enforce,destroy,method,other,abd,is,enforce,destroy,method,get,method,overrides,add,overrides,other,abd,get,method,overrides,set,synthetic,other,abd,is,synthetic,set,resource,other,abd,get,resource,else,set,resource,description,other,get,resource,description
AbstractBeanDefinition -> public void overrideFrom(BeanDefinition other);1385412762;Override settings in this bean definition (presumably a copied parent_from a parent-child inheritance relationship) from the given bean_definition (presumably the child)._<ul>_<li>Will override beanClass if specified in the given bean definition._<li>Will always take {@code abstract}, {@code scope},_{@code lazyInit}, {@code autowireMode}, {@code dependencyCheck},_and {@code dependsOn} from the given bean definition._<li>Will add {@code constructorArgumentValues}, {@code propertyValues},_{@code methodOverrides} from the given bean definition to existing ones._<li>Will override {@code factoryBeanName}, {@code factoryMethodName},_{@code initMethodName}, and {@code destroyMethodName} if specified_in the given bean definition._</ul>;public void overrideFrom(BeanDefinition other) {_		if (StringUtils.hasLength(other.getBeanClassName())) {_			setBeanClassName(other.getBeanClassName())__		}_		if (StringUtils.hasLength(other.getFactoryBeanName())) {_			setFactoryBeanName(other.getFactoryBeanName())__		}_		if (StringUtils.hasLength(other.getFactoryMethodName())) {_			setFactoryMethodName(other.getFactoryMethodName())__		}_		if (StringUtils.hasLength(other.getScope())) {_			setScope(other.getScope())__		}_		setAbstract(other.isAbstract())__		setLazyInit(other.isLazyInit())__		setRole(other.getRole())__		getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues())__		getPropertyValues().addPropertyValues(other.getPropertyValues())__		setSource(other.getSource())__		copyAttributesFrom(other)___		if (other instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition otherAbd = (AbstractBeanDefinition) other__			if (otherAbd.hasBeanClass()) {_				setBeanClass(otherAbd.getBeanClass())__			}_			setAutowireCandidate(otherAbd.isAutowireCandidate())__			setAutowireMode(otherAbd.getAutowireMode())__			copyQualifiersFrom(otherAbd)__			setPrimary(otherAbd.isPrimary())__			setDependencyCheck(otherAbd.getDependencyCheck())__			setDependsOn(otherAbd.getDependsOn())__			setNonPublicAccessAllowed(otherAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(otherAbd.isLenientConstructorResolution())__			if (StringUtils.hasLength(otherAbd.getInitMethodName())) {_				setInitMethodName(otherAbd.getInitMethodName())__				setEnforceInitMethod(otherAbd.isEnforceInitMethod())__			}_			if (StringUtils.hasLength(otherAbd.getDestroyMethodName())) {_				setDestroyMethodName(otherAbd.getDestroyMethodName())__				setEnforceDestroyMethod(otherAbd.isEnforceDestroyMethod())__			}_			getMethodOverrides().addOverrides(otherAbd.getMethodOverrides())__			setSynthetic(otherAbd.isSynthetic())__			setResource(otherAbd.getResource())__		}_		else {_			setResourceDescription(other.getResourceDescription())__		}_	};override,settings,in,this,bean,definition,presumably,a,copied,parent,from,a,parent,child,inheritance,relationship,from,the,given,bean,definition,presumably,the,child,ul,li,will,override,bean,class,if,specified,in,the,given,bean,definition,li,will,always,take,code,abstract,code,scope,code,lazy,init,code,autowire,mode,code,dependency,check,and,code,depends,on,from,the,given,bean,definition,li,will,add,code,constructor,argument,values,code,property,values,code,method,overrides,from,the,given,bean,definition,to,existing,ones,li,will,override,code,factory,bean,name,code,factory,method,name,code,init,method,name,and,code,destroy,method,name,if,specified,in,the,given,bean,definition,ul;public,void,override,from,bean,definition,other,if,string,utils,has,length,other,get,bean,class,name,set,bean,class,name,other,get,bean,class,name,if,string,utils,has,length,other,get,factory,bean,name,set,factory,bean,name,other,get,factory,bean,name,if,string,utils,has,length,other,get,factory,method,name,set,factory,method,name,other,get,factory,method,name,if,string,utils,has,length,other,get,scope,set,scope,other,get,scope,set,abstract,other,is,abstract,set,lazy,init,other,is,lazy,init,set,role,other,get,role,get,constructor,argument,values,add,argument,values,other,get,constructor,argument,values,get,property,values,add,property,values,other,get,property,values,set,source,other,get,source,copy,attributes,from,other,if,other,instanceof,abstract,bean,definition,abstract,bean,definition,other,abd,abstract,bean,definition,other,if,other,abd,has,bean,class,set,bean,class,other,abd,get,bean,class,set,autowire,candidate,other,abd,is,autowire,candidate,set,autowire,mode,other,abd,get,autowire,mode,copy,qualifiers,from,other,abd,set,primary,other,abd,is,primary,set,dependency,check,other,abd,get,dependency,check,set,depends,on,other,abd,get,depends,on,set,non,public,access,allowed,other,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,other,abd,is,lenient,constructor,resolution,if,string,utils,has,length,other,abd,get,init,method,name,set,init,method,name,other,abd,get,init,method,name,set,enforce,init,method,other,abd,is,enforce,init,method,if,string,utils,has,length,other,abd,get,destroy,method,name,set,destroy,method,name,other,abd,get,destroy,method,name,set,enforce,destroy,method,other,abd,is,enforce,destroy,method,get,method,overrides,add,overrides,other,abd,get,method,overrides,set,synthetic,other,abd,is,synthetic,set,resource,other,abd,get,resource,else,set,resource,description,other,get,resource,description
AbstractBeanDefinition -> public void overrideFrom(BeanDefinition other);1392245317;Override settings in this bean definition (presumably a copied parent_from a parent-child inheritance relationship) from the given bean_definition (presumably the child)._<ul>_<li>Will override beanClass if specified in the given bean definition._<li>Will always take {@code abstract}, {@code scope},_{@code lazyInit}, {@code autowireMode}, {@code dependencyCheck},_and {@code dependsOn} from the given bean definition._<li>Will add {@code constructorArgumentValues}, {@code propertyValues},_{@code methodOverrides} from the given bean definition to existing ones._<li>Will override {@code factoryBeanName}, {@code factoryMethodName},_{@code initMethodName}, and {@code destroyMethodName} if specified_in the given bean definition._</ul>;public void overrideFrom(BeanDefinition other) {_		if (StringUtils.hasLength(other.getBeanClassName())) {_			setBeanClassName(other.getBeanClassName())__		}_		if (StringUtils.hasLength(other.getFactoryBeanName())) {_			setFactoryBeanName(other.getFactoryBeanName())__		}_		if (StringUtils.hasLength(other.getFactoryMethodName())) {_			setFactoryMethodName(other.getFactoryMethodName())__		}_		if (StringUtils.hasLength(other.getScope())) {_			setScope(other.getScope())__		}_		setAbstract(other.isAbstract())__		setLazyInit(other.isLazyInit())__		setRole(other.getRole())__		getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues())__		getPropertyValues().addPropertyValues(other.getPropertyValues())__		setSource(other.getSource())__		copyAttributesFrom(other)___		if (other instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition otherAbd = (AbstractBeanDefinition) other__			if (otherAbd.hasBeanClass()) {_				setBeanClass(otherAbd.getBeanClass())__			}_			setAutowireCandidate(otherAbd.isAutowireCandidate())__			setAutowireMode(otherAbd.getAutowireMode())__			copyQualifiersFrom(otherAbd)__			setPrimary(otherAbd.isPrimary())__			setDependencyCheck(otherAbd.getDependencyCheck())__			setDependsOn(otherAbd.getDependsOn())__			setNonPublicAccessAllowed(otherAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(otherAbd.isLenientConstructorResolution())__			if (StringUtils.hasLength(otherAbd.getInitMethodName())) {_				setInitMethodName(otherAbd.getInitMethodName())__				setEnforceInitMethod(otherAbd.isEnforceInitMethod())__			}_			if (StringUtils.hasLength(otherAbd.getDestroyMethodName())) {_				setDestroyMethodName(otherAbd.getDestroyMethodName())__				setEnforceDestroyMethod(otherAbd.isEnforceDestroyMethod())__			}_			getMethodOverrides().addOverrides(otherAbd.getMethodOverrides())__			setSynthetic(otherAbd.isSynthetic())__			setResource(otherAbd.getResource())__		}_		else {_			setResourceDescription(other.getResourceDescription())__		}_	};override,settings,in,this,bean,definition,presumably,a,copied,parent,from,a,parent,child,inheritance,relationship,from,the,given,bean,definition,presumably,the,child,ul,li,will,override,bean,class,if,specified,in,the,given,bean,definition,li,will,always,take,code,abstract,code,scope,code,lazy,init,code,autowire,mode,code,dependency,check,and,code,depends,on,from,the,given,bean,definition,li,will,add,code,constructor,argument,values,code,property,values,code,method,overrides,from,the,given,bean,definition,to,existing,ones,li,will,override,code,factory,bean,name,code,factory,method,name,code,init,method,name,and,code,destroy,method,name,if,specified,in,the,given,bean,definition,ul;public,void,override,from,bean,definition,other,if,string,utils,has,length,other,get,bean,class,name,set,bean,class,name,other,get,bean,class,name,if,string,utils,has,length,other,get,factory,bean,name,set,factory,bean,name,other,get,factory,bean,name,if,string,utils,has,length,other,get,factory,method,name,set,factory,method,name,other,get,factory,method,name,if,string,utils,has,length,other,get,scope,set,scope,other,get,scope,set,abstract,other,is,abstract,set,lazy,init,other,is,lazy,init,set,role,other,get,role,get,constructor,argument,values,add,argument,values,other,get,constructor,argument,values,get,property,values,add,property,values,other,get,property,values,set,source,other,get,source,copy,attributes,from,other,if,other,instanceof,abstract,bean,definition,abstract,bean,definition,other,abd,abstract,bean,definition,other,if,other,abd,has,bean,class,set,bean,class,other,abd,get,bean,class,set,autowire,candidate,other,abd,is,autowire,candidate,set,autowire,mode,other,abd,get,autowire,mode,copy,qualifiers,from,other,abd,set,primary,other,abd,is,primary,set,dependency,check,other,abd,get,dependency,check,set,depends,on,other,abd,get,depends,on,set,non,public,access,allowed,other,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,other,abd,is,lenient,constructor,resolution,if,string,utils,has,length,other,abd,get,init,method,name,set,init,method,name,other,abd,get,init,method,name,set,enforce,init,method,other,abd,is,enforce,init,method,if,string,utils,has,length,other,abd,get,destroy,method,name,set,destroy,method,name,other,abd,get,destroy,method,name,set,enforce,destroy,method,other,abd,is,enforce,destroy,method,get,method,overrides,add,overrides,other,abd,get,method,overrides,set,synthetic,other,abd,is,synthetic,set,resource,other,abd,get,resource,else,set,resource,description,other,get,resource,description
AbstractBeanDefinition -> public void overrideFrom(BeanDefinition other);1397163142;Override settings in this bean definition (presumably a copied parent_from a parent-child inheritance relationship) from the given bean_definition (presumably the child)._<ul>_<li>Will override beanClass if specified in the given bean definition._<li>Will always take {@code abstract}, {@code scope},_{@code lazyInit}, {@code autowireMode}, {@code dependencyCheck},_and {@code dependsOn} from the given bean definition._<li>Will add {@code constructorArgumentValues}, {@code propertyValues},_{@code methodOverrides} from the given bean definition to existing ones._<li>Will override {@code factoryBeanName}, {@code factoryMethodName},_{@code initMethodName}, and {@code destroyMethodName} if specified_in the given bean definition._</ul>;public void overrideFrom(BeanDefinition other) {_		if (StringUtils.hasLength(other.getBeanClassName())) {_			setBeanClassName(other.getBeanClassName())__		}_		if (StringUtils.hasLength(other.getFactoryBeanName())) {_			setFactoryBeanName(other.getFactoryBeanName())__		}_		if (StringUtils.hasLength(other.getFactoryMethodName())) {_			setFactoryMethodName(other.getFactoryMethodName())__		}_		if (StringUtils.hasLength(other.getScope())) {_			setScope(other.getScope())__		}_		setAbstract(other.isAbstract())__		setLazyInit(other.isLazyInit())__		setRole(other.getRole())__		getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues())__		getPropertyValues().addPropertyValues(other.getPropertyValues())__		setSource(other.getSource())__		copyAttributesFrom(other)___		if (other instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition otherAbd = (AbstractBeanDefinition) other__			if (otherAbd.hasBeanClass()) {_				setBeanClass(otherAbd.getBeanClass())__			}_			setAutowireCandidate(otherAbd.isAutowireCandidate())__			setAutowireMode(otherAbd.getAutowireMode())__			copyQualifiersFrom(otherAbd)__			setPrimary(otherAbd.isPrimary())__			setDependencyCheck(otherAbd.getDependencyCheck())__			setDependsOn(otherAbd.getDependsOn())__			setNonPublicAccessAllowed(otherAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(otherAbd.isLenientConstructorResolution())__			if (StringUtils.hasLength(otherAbd.getInitMethodName())) {_				setInitMethodName(otherAbd.getInitMethodName())__				setEnforceInitMethod(otherAbd.isEnforceInitMethod())__			}_			if (StringUtils.hasLength(otherAbd.getDestroyMethodName())) {_				setDestroyMethodName(otherAbd.getDestroyMethodName())__				setEnforceDestroyMethod(otherAbd.isEnforceDestroyMethod())__			}_			getMethodOverrides().addOverrides(otherAbd.getMethodOverrides())__			setSynthetic(otherAbd.isSynthetic())__			setResource(otherAbd.getResource())__		}_		else {_			setResourceDescription(other.getResourceDescription())__		}_	};override,settings,in,this,bean,definition,presumably,a,copied,parent,from,a,parent,child,inheritance,relationship,from,the,given,bean,definition,presumably,the,child,ul,li,will,override,bean,class,if,specified,in,the,given,bean,definition,li,will,always,take,code,abstract,code,scope,code,lazy,init,code,autowire,mode,code,dependency,check,and,code,depends,on,from,the,given,bean,definition,li,will,add,code,constructor,argument,values,code,property,values,code,method,overrides,from,the,given,bean,definition,to,existing,ones,li,will,override,code,factory,bean,name,code,factory,method,name,code,init,method,name,and,code,destroy,method,name,if,specified,in,the,given,bean,definition,ul;public,void,override,from,bean,definition,other,if,string,utils,has,length,other,get,bean,class,name,set,bean,class,name,other,get,bean,class,name,if,string,utils,has,length,other,get,factory,bean,name,set,factory,bean,name,other,get,factory,bean,name,if,string,utils,has,length,other,get,factory,method,name,set,factory,method,name,other,get,factory,method,name,if,string,utils,has,length,other,get,scope,set,scope,other,get,scope,set,abstract,other,is,abstract,set,lazy,init,other,is,lazy,init,set,role,other,get,role,get,constructor,argument,values,add,argument,values,other,get,constructor,argument,values,get,property,values,add,property,values,other,get,property,values,set,source,other,get,source,copy,attributes,from,other,if,other,instanceof,abstract,bean,definition,abstract,bean,definition,other,abd,abstract,bean,definition,other,if,other,abd,has,bean,class,set,bean,class,other,abd,get,bean,class,set,autowire,candidate,other,abd,is,autowire,candidate,set,autowire,mode,other,abd,get,autowire,mode,copy,qualifiers,from,other,abd,set,primary,other,abd,is,primary,set,dependency,check,other,abd,get,dependency,check,set,depends,on,other,abd,get,depends,on,set,non,public,access,allowed,other,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,other,abd,is,lenient,constructor,resolution,if,string,utils,has,length,other,abd,get,init,method,name,set,init,method,name,other,abd,get,init,method,name,set,enforce,init,method,other,abd,is,enforce,init,method,if,string,utils,has,length,other,abd,get,destroy,method,name,set,destroy,method,name,other,abd,get,destroy,method,name,set,enforce,destroy,method,other,abd,is,enforce,destroy,method,get,method,overrides,add,overrides,other,abd,get,method,overrides,set,synthetic,other,abd,is,synthetic,set,resource,other,abd,get,resource,else,set,resource,description,other,get,resource,description
AbstractBeanDefinition -> public void overrideFrom(BeanDefinition other);1398898390;Override settings in this bean definition (presumably a copied parent_from a parent-child inheritance relationship) from the given bean_definition (presumably the child)._<ul>_<li>Will override beanClass if specified in the given bean definition._<li>Will always take {@code abstract}, {@code scope},_{@code lazyInit}, {@code autowireMode}, {@code dependencyCheck},_and {@code dependsOn} from the given bean definition._<li>Will add {@code constructorArgumentValues}, {@code propertyValues},_{@code methodOverrides} from the given bean definition to existing ones._<li>Will override {@code factoryBeanName}, {@code factoryMethodName},_{@code initMethodName}, and {@code destroyMethodName} if specified_in the given bean definition._</ul>;public void overrideFrom(BeanDefinition other) {_		if (StringUtils.hasLength(other.getBeanClassName())) {_			setBeanClassName(other.getBeanClassName())__		}_		if (StringUtils.hasLength(other.getFactoryBeanName())) {_			setFactoryBeanName(other.getFactoryBeanName())__		}_		if (StringUtils.hasLength(other.getFactoryMethodName())) {_			setFactoryMethodName(other.getFactoryMethodName())__		}_		if (StringUtils.hasLength(other.getScope())) {_			setScope(other.getScope())__		}_		setAbstract(other.isAbstract())__		setLazyInit(other.isLazyInit())__		setRole(other.getRole())__		getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues())__		getPropertyValues().addPropertyValues(other.getPropertyValues())__		setSource(other.getSource())__		copyAttributesFrom(other)___		if (other instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition otherAbd = (AbstractBeanDefinition) other__			if (otherAbd.hasBeanClass()) {_				setBeanClass(otherAbd.getBeanClass())__			}_			setAutowireCandidate(otherAbd.isAutowireCandidate())__			setAutowireMode(otherAbd.getAutowireMode())__			copyQualifiersFrom(otherAbd)__			setPrimary(otherAbd.isPrimary())__			setDependencyCheck(otherAbd.getDependencyCheck())__			setDependsOn(otherAbd.getDependsOn())__			setNonPublicAccessAllowed(otherAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(otherAbd.isLenientConstructorResolution())__			if (StringUtils.hasLength(otherAbd.getInitMethodName())) {_				setInitMethodName(otherAbd.getInitMethodName())__				setEnforceInitMethod(otherAbd.isEnforceInitMethod())__			}_			if (StringUtils.hasLength(otherAbd.getDestroyMethodName())) {_				setDestroyMethodName(otherAbd.getDestroyMethodName())__				setEnforceDestroyMethod(otherAbd.isEnforceDestroyMethod())__			}_			getMethodOverrides().addOverrides(otherAbd.getMethodOverrides())__			setSynthetic(otherAbd.isSynthetic())__			setResource(otherAbd.getResource())__		}_		else {_			setResourceDescription(other.getResourceDescription())__		}_	};override,settings,in,this,bean,definition,presumably,a,copied,parent,from,a,parent,child,inheritance,relationship,from,the,given,bean,definition,presumably,the,child,ul,li,will,override,bean,class,if,specified,in,the,given,bean,definition,li,will,always,take,code,abstract,code,scope,code,lazy,init,code,autowire,mode,code,dependency,check,and,code,depends,on,from,the,given,bean,definition,li,will,add,code,constructor,argument,values,code,property,values,code,method,overrides,from,the,given,bean,definition,to,existing,ones,li,will,override,code,factory,bean,name,code,factory,method,name,code,init,method,name,and,code,destroy,method,name,if,specified,in,the,given,bean,definition,ul;public,void,override,from,bean,definition,other,if,string,utils,has,length,other,get,bean,class,name,set,bean,class,name,other,get,bean,class,name,if,string,utils,has,length,other,get,factory,bean,name,set,factory,bean,name,other,get,factory,bean,name,if,string,utils,has,length,other,get,factory,method,name,set,factory,method,name,other,get,factory,method,name,if,string,utils,has,length,other,get,scope,set,scope,other,get,scope,set,abstract,other,is,abstract,set,lazy,init,other,is,lazy,init,set,role,other,get,role,get,constructor,argument,values,add,argument,values,other,get,constructor,argument,values,get,property,values,add,property,values,other,get,property,values,set,source,other,get,source,copy,attributes,from,other,if,other,instanceof,abstract,bean,definition,abstract,bean,definition,other,abd,abstract,bean,definition,other,if,other,abd,has,bean,class,set,bean,class,other,abd,get,bean,class,set,autowire,candidate,other,abd,is,autowire,candidate,set,autowire,mode,other,abd,get,autowire,mode,copy,qualifiers,from,other,abd,set,primary,other,abd,is,primary,set,dependency,check,other,abd,get,dependency,check,set,depends,on,other,abd,get,depends,on,set,non,public,access,allowed,other,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,other,abd,is,lenient,constructor,resolution,if,string,utils,has,length,other,abd,get,init,method,name,set,init,method,name,other,abd,get,init,method,name,set,enforce,init,method,other,abd,is,enforce,init,method,if,string,utils,has,length,other,abd,get,destroy,method,name,set,destroy,method,name,other,abd,get,destroy,method,name,set,enforce,destroy,method,other,abd,is,enforce,destroy,method,get,method,overrides,add,overrides,other,abd,get,method,overrides,set,synthetic,other,abd,is,synthetic,set,resource,other,abd,get,resource,else,set,resource,description,other,get,resource,description
AbstractBeanDefinition -> public void overrideFrom(BeanDefinition other);1407511029;Override settings in this bean definition (presumably a copied parent_from a parent-child inheritance relationship) from the given bean_definition (presumably the child)._<ul>_<li>Will override beanClass if specified in the given bean definition._<li>Will always take {@code abstract}, {@code scope},_{@code lazyInit}, {@code autowireMode}, {@code dependencyCheck},_and {@code dependsOn} from the given bean definition._<li>Will add {@code constructorArgumentValues}, {@code propertyValues},_{@code methodOverrides} from the given bean definition to existing ones._<li>Will override {@code factoryBeanName}, {@code factoryMethodName},_{@code initMethodName}, and {@code destroyMethodName} if specified_in the given bean definition._</ul>;public void overrideFrom(BeanDefinition other) {_		if (StringUtils.hasLength(other.getBeanClassName())) {_			setBeanClassName(other.getBeanClassName())__		}_		if (StringUtils.hasLength(other.getFactoryBeanName())) {_			setFactoryBeanName(other.getFactoryBeanName())__		}_		if (StringUtils.hasLength(other.getFactoryMethodName())) {_			setFactoryMethodName(other.getFactoryMethodName())__		}_		if (StringUtils.hasLength(other.getScope())) {_			setScope(other.getScope())__		}_		setAbstract(other.isAbstract())__		setLazyInit(other.isLazyInit())__		setRole(other.getRole())__		getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues())__		getPropertyValues().addPropertyValues(other.getPropertyValues())__		setSource(other.getSource())__		copyAttributesFrom(other)___		if (other instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition otherAbd = (AbstractBeanDefinition) other__			if (otherAbd.hasBeanClass()) {_				setBeanClass(otherAbd.getBeanClass())__			}_			setAutowireCandidate(otherAbd.isAutowireCandidate())__			setAutowireMode(otherAbd.getAutowireMode())__			copyQualifiersFrom(otherAbd)__			setPrimary(otherAbd.isPrimary())__			setDependencyCheck(otherAbd.getDependencyCheck())__			setDependsOn(otherAbd.getDependsOn())__			setNonPublicAccessAllowed(otherAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(otherAbd.isLenientConstructorResolution())__			if (StringUtils.hasLength(otherAbd.getInitMethodName())) {_				setInitMethodName(otherAbd.getInitMethodName())__				setEnforceInitMethod(otherAbd.isEnforceInitMethod())__			}_			if (StringUtils.hasLength(otherAbd.getDestroyMethodName())) {_				setDestroyMethodName(otherAbd.getDestroyMethodName())__				setEnforceDestroyMethod(otherAbd.isEnforceDestroyMethod())__			}_			getMethodOverrides().addOverrides(otherAbd.getMethodOverrides())__			setSynthetic(otherAbd.isSynthetic())__			setResource(otherAbd.getResource())__		}_		else {_			setResourceDescription(other.getResourceDescription())__		}_	};override,settings,in,this,bean,definition,presumably,a,copied,parent,from,a,parent,child,inheritance,relationship,from,the,given,bean,definition,presumably,the,child,ul,li,will,override,bean,class,if,specified,in,the,given,bean,definition,li,will,always,take,code,abstract,code,scope,code,lazy,init,code,autowire,mode,code,dependency,check,and,code,depends,on,from,the,given,bean,definition,li,will,add,code,constructor,argument,values,code,property,values,code,method,overrides,from,the,given,bean,definition,to,existing,ones,li,will,override,code,factory,bean,name,code,factory,method,name,code,init,method,name,and,code,destroy,method,name,if,specified,in,the,given,bean,definition,ul;public,void,override,from,bean,definition,other,if,string,utils,has,length,other,get,bean,class,name,set,bean,class,name,other,get,bean,class,name,if,string,utils,has,length,other,get,factory,bean,name,set,factory,bean,name,other,get,factory,bean,name,if,string,utils,has,length,other,get,factory,method,name,set,factory,method,name,other,get,factory,method,name,if,string,utils,has,length,other,get,scope,set,scope,other,get,scope,set,abstract,other,is,abstract,set,lazy,init,other,is,lazy,init,set,role,other,get,role,get,constructor,argument,values,add,argument,values,other,get,constructor,argument,values,get,property,values,add,property,values,other,get,property,values,set,source,other,get,source,copy,attributes,from,other,if,other,instanceof,abstract,bean,definition,abstract,bean,definition,other,abd,abstract,bean,definition,other,if,other,abd,has,bean,class,set,bean,class,other,abd,get,bean,class,set,autowire,candidate,other,abd,is,autowire,candidate,set,autowire,mode,other,abd,get,autowire,mode,copy,qualifiers,from,other,abd,set,primary,other,abd,is,primary,set,dependency,check,other,abd,get,dependency,check,set,depends,on,other,abd,get,depends,on,set,non,public,access,allowed,other,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,other,abd,is,lenient,constructor,resolution,if,string,utils,has,length,other,abd,get,init,method,name,set,init,method,name,other,abd,get,init,method,name,set,enforce,init,method,other,abd,is,enforce,init,method,if,string,utils,has,length,other,abd,get,destroy,method,name,set,destroy,method,name,other,abd,get,destroy,method,name,set,enforce,destroy,method,other,abd,is,enforce,destroy,method,get,method,overrides,add,overrides,other,abd,get,method,overrides,set,synthetic,other,abd,is,synthetic,set,resource,other,abd,get,resource,else,set,resource,description,other,get,resource,description
AbstractBeanDefinition -> public void overrideFrom(BeanDefinition other);1432135182;Override settings in this bean definition (presumably a copied parent_from a parent-child inheritance relationship) from the given bean_definition (presumably the child)._<ul>_<li>Will override beanClass if specified in the given bean definition._<li>Will always take {@code abstract}, {@code scope},_{@code lazyInit}, {@code autowireMode}, {@code dependencyCheck},_and {@code dependsOn} from the given bean definition._<li>Will add {@code constructorArgumentValues}, {@code propertyValues},_{@code methodOverrides} from the given bean definition to existing ones._<li>Will override {@code factoryBeanName}, {@code factoryMethodName},_{@code initMethodName}, and {@code destroyMethodName} if specified_in the given bean definition._</ul>;public void overrideFrom(BeanDefinition other) {_		if (StringUtils.hasLength(other.getBeanClassName())) {_			setBeanClassName(other.getBeanClassName())__		}_		if (StringUtils.hasLength(other.getFactoryBeanName())) {_			setFactoryBeanName(other.getFactoryBeanName())__		}_		if (StringUtils.hasLength(other.getFactoryMethodName())) {_			setFactoryMethodName(other.getFactoryMethodName())__		}_		if (StringUtils.hasLength(other.getScope())) {_			setScope(other.getScope())__		}_		setAbstract(other.isAbstract())__		setLazyInit(other.isLazyInit())__		setRole(other.getRole())__		getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues())__		getPropertyValues().addPropertyValues(other.getPropertyValues())__		setSource(other.getSource())__		copyAttributesFrom(other)___		if (other instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition otherAbd = (AbstractBeanDefinition) other__			if (otherAbd.hasBeanClass()) {_				setBeanClass(otherAbd.getBeanClass())__			}_			setAutowireCandidate(otherAbd.isAutowireCandidate())__			setAutowireMode(otherAbd.getAutowireMode())__			copyQualifiersFrom(otherAbd)__			setPrimary(otherAbd.isPrimary())__			setDependencyCheck(otherAbd.getDependencyCheck())__			setDependsOn(otherAbd.getDependsOn())__			setNonPublicAccessAllowed(otherAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(otherAbd.isLenientConstructorResolution())__			if (StringUtils.hasLength(otherAbd.getInitMethodName())) {_				setInitMethodName(otherAbd.getInitMethodName())__				setEnforceInitMethod(otherAbd.isEnforceInitMethod())__			}_			if (otherAbd.getDestroyMethodName() != null) {_				setDestroyMethodName(otherAbd.getDestroyMethodName())__				setEnforceDestroyMethod(otherAbd.isEnforceDestroyMethod())__			}_			getMethodOverrides().addOverrides(otherAbd.getMethodOverrides())__			setSynthetic(otherAbd.isSynthetic())__			setResource(otherAbd.getResource())__		}_		else {_			setResourceDescription(other.getResourceDescription())__		}_	};override,settings,in,this,bean,definition,presumably,a,copied,parent,from,a,parent,child,inheritance,relationship,from,the,given,bean,definition,presumably,the,child,ul,li,will,override,bean,class,if,specified,in,the,given,bean,definition,li,will,always,take,code,abstract,code,scope,code,lazy,init,code,autowire,mode,code,dependency,check,and,code,depends,on,from,the,given,bean,definition,li,will,add,code,constructor,argument,values,code,property,values,code,method,overrides,from,the,given,bean,definition,to,existing,ones,li,will,override,code,factory,bean,name,code,factory,method,name,code,init,method,name,and,code,destroy,method,name,if,specified,in,the,given,bean,definition,ul;public,void,override,from,bean,definition,other,if,string,utils,has,length,other,get,bean,class,name,set,bean,class,name,other,get,bean,class,name,if,string,utils,has,length,other,get,factory,bean,name,set,factory,bean,name,other,get,factory,bean,name,if,string,utils,has,length,other,get,factory,method,name,set,factory,method,name,other,get,factory,method,name,if,string,utils,has,length,other,get,scope,set,scope,other,get,scope,set,abstract,other,is,abstract,set,lazy,init,other,is,lazy,init,set,role,other,get,role,get,constructor,argument,values,add,argument,values,other,get,constructor,argument,values,get,property,values,add,property,values,other,get,property,values,set,source,other,get,source,copy,attributes,from,other,if,other,instanceof,abstract,bean,definition,abstract,bean,definition,other,abd,abstract,bean,definition,other,if,other,abd,has,bean,class,set,bean,class,other,abd,get,bean,class,set,autowire,candidate,other,abd,is,autowire,candidate,set,autowire,mode,other,abd,get,autowire,mode,copy,qualifiers,from,other,abd,set,primary,other,abd,is,primary,set,dependency,check,other,abd,get,dependency,check,set,depends,on,other,abd,get,depends,on,set,non,public,access,allowed,other,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,other,abd,is,lenient,constructor,resolution,if,string,utils,has,length,other,abd,get,init,method,name,set,init,method,name,other,abd,get,init,method,name,set,enforce,init,method,other,abd,is,enforce,init,method,if,other,abd,get,destroy,method,name,null,set,destroy,method,name,other,abd,get,destroy,method,name,set,enforce,destroy,method,other,abd,is,enforce,destroy,method,get,method,overrides,add,overrides,other,abd,get,method,overrides,set,synthetic,other,abd,is,synthetic,set,resource,other,abd,get,resource,else,set,resource,description,other,get,resource,description
AbstractBeanDefinition -> public void overrideFrom(BeanDefinition other);1434204509;Override settings in this bean definition (presumably a copied parent_from a parent-child inheritance relationship) from the given bean_definition (presumably the child)._<ul>_<li>Will override beanClass if specified in the given bean definition._<li>Will always take {@code abstract}, {@code scope},_{@code lazyInit}, {@code autowireMode}, {@code dependencyCheck},_and {@code dependsOn} from the given bean definition._<li>Will add {@code constructorArgumentValues}, {@code propertyValues},_{@code methodOverrides} from the given bean definition to existing ones._<li>Will override {@code factoryBeanName}, {@code factoryMethodName},_{@code initMethodName}, and {@code destroyMethodName} if specified_in the given bean definition._</ul>;public void overrideFrom(BeanDefinition other) {_		if (StringUtils.hasLength(other.getBeanClassName())) {_			setBeanClassName(other.getBeanClassName())__		}_		if (StringUtils.hasLength(other.getFactoryBeanName())) {_			setFactoryBeanName(other.getFactoryBeanName())__		}_		if (StringUtils.hasLength(other.getFactoryMethodName())) {_			setFactoryMethodName(other.getFactoryMethodName())__		}_		if (StringUtils.hasLength(other.getScope())) {_			setScope(other.getScope())__		}_		setAbstract(other.isAbstract())__		setLazyInit(other.isLazyInit())__		setRole(other.getRole())__		getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues())__		getPropertyValues().addPropertyValues(other.getPropertyValues())__		setSource(other.getSource())__		copyAttributesFrom(other)___		if (other instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition otherAbd = (AbstractBeanDefinition) other__			if (otherAbd.hasBeanClass()) {_				setBeanClass(otherAbd.getBeanClass())__			}_			setAutowireCandidate(otherAbd.isAutowireCandidate())__			setAutowireMode(otherAbd.getAutowireMode())__			copyQualifiersFrom(otherAbd)__			setPrimary(otherAbd.isPrimary())__			setDependencyCheck(otherAbd.getDependencyCheck())__			setDependsOn(otherAbd.getDependsOn())__			setNonPublicAccessAllowed(otherAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(otherAbd.isLenientConstructorResolution())__			if (StringUtils.hasLength(otherAbd.getInitMethodName())) {_				setInitMethodName(otherAbd.getInitMethodName())__				setEnforceInitMethod(otherAbd.isEnforceInitMethod())__			}_			if (otherAbd.getDestroyMethodName() != null) {_				setDestroyMethodName(otherAbd.getDestroyMethodName())__				setEnforceDestroyMethod(otherAbd.isEnforceDestroyMethod())__			}_			getMethodOverrides().addOverrides(otherAbd.getMethodOverrides())__			setSynthetic(otherAbd.isSynthetic())__			setResource(otherAbd.getResource())__		}_		else {_			setResourceDescription(other.getResourceDescription())__		}_	};override,settings,in,this,bean,definition,presumably,a,copied,parent,from,a,parent,child,inheritance,relationship,from,the,given,bean,definition,presumably,the,child,ul,li,will,override,bean,class,if,specified,in,the,given,bean,definition,li,will,always,take,code,abstract,code,scope,code,lazy,init,code,autowire,mode,code,dependency,check,and,code,depends,on,from,the,given,bean,definition,li,will,add,code,constructor,argument,values,code,property,values,code,method,overrides,from,the,given,bean,definition,to,existing,ones,li,will,override,code,factory,bean,name,code,factory,method,name,code,init,method,name,and,code,destroy,method,name,if,specified,in,the,given,bean,definition,ul;public,void,override,from,bean,definition,other,if,string,utils,has,length,other,get,bean,class,name,set,bean,class,name,other,get,bean,class,name,if,string,utils,has,length,other,get,factory,bean,name,set,factory,bean,name,other,get,factory,bean,name,if,string,utils,has,length,other,get,factory,method,name,set,factory,method,name,other,get,factory,method,name,if,string,utils,has,length,other,get,scope,set,scope,other,get,scope,set,abstract,other,is,abstract,set,lazy,init,other,is,lazy,init,set,role,other,get,role,get,constructor,argument,values,add,argument,values,other,get,constructor,argument,values,get,property,values,add,property,values,other,get,property,values,set,source,other,get,source,copy,attributes,from,other,if,other,instanceof,abstract,bean,definition,abstract,bean,definition,other,abd,abstract,bean,definition,other,if,other,abd,has,bean,class,set,bean,class,other,abd,get,bean,class,set,autowire,candidate,other,abd,is,autowire,candidate,set,autowire,mode,other,abd,get,autowire,mode,copy,qualifiers,from,other,abd,set,primary,other,abd,is,primary,set,dependency,check,other,abd,get,dependency,check,set,depends,on,other,abd,get,depends,on,set,non,public,access,allowed,other,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,other,abd,is,lenient,constructor,resolution,if,string,utils,has,length,other,abd,get,init,method,name,set,init,method,name,other,abd,get,init,method,name,set,enforce,init,method,other,abd,is,enforce,init,method,if,other,abd,get,destroy,method,name,null,set,destroy,method,name,other,abd,get,destroy,method,name,set,enforce,destroy,method,other,abd,is,enforce,destroy,method,get,method,overrides,add,overrides,other,abd,get,method,overrides,set,synthetic,other,abd,is,synthetic,set,resource,other,abd,get,resource,else,set,resource,description,other,get,resource,description
AbstractBeanDefinition -> public void overrideFrom(BeanDefinition other);1447323728;Override settings in this bean definition (presumably a copied parent_from a parent-child inheritance relationship) from the given bean_definition (presumably the child)._<ul>_<li>Will override beanClass if specified in the given bean definition._<li>Will always take {@code abstract}, {@code scope},_{@code lazyInit}, {@code autowireMode}, {@code dependencyCheck},_and {@code dependsOn} from the given bean definition._<li>Will add {@code constructorArgumentValues}, {@code propertyValues},_{@code methodOverrides} from the given bean definition to existing ones._<li>Will override {@code factoryBeanName}, {@code factoryMethodName},_{@code initMethodName}, and {@code destroyMethodName} if specified_in the given bean definition._</ul>;public void overrideFrom(BeanDefinition other) {_		if (StringUtils.hasLength(other.getBeanClassName())) {_			setBeanClassName(other.getBeanClassName())__		}_		if (StringUtils.hasLength(other.getFactoryBeanName())) {_			setFactoryBeanName(other.getFactoryBeanName())__		}_		if (StringUtils.hasLength(other.getFactoryMethodName())) {_			setFactoryMethodName(other.getFactoryMethodName())__		}_		if (StringUtils.hasLength(other.getScope())) {_			setScope(other.getScope())__		}_		setAbstract(other.isAbstract())__		setLazyInit(other.isLazyInit())__		setRole(other.getRole())__		getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues())__		getPropertyValues().addPropertyValues(other.getPropertyValues())__		setSource(other.getSource())__		copyAttributesFrom(other)___		if (other instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition otherAbd = (AbstractBeanDefinition) other__			if (otherAbd.hasBeanClass()) {_				setBeanClass(otherAbd.getBeanClass())__			}_			setAutowireCandidate(otherAbd.isAutowireCandidate())__			setAutowireMode(otherAbd.getAutowireMode())__			copyQualifiersFrom(otherAbd)__			setPrimary(otherAbd.isPrimary())__			setDependencyCheck(otherAbd.getDependencyCheck())__			setDependsOn(otherAbd.getDependsOn())__			setNonPublicAccessAllowed(otherAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(otherAbd.isLenientConstructorResolution())__			if (StringUtils.hasLength(otherAbd.getInitMethodName())) {_				setInitMethodName(otherAbd.getInitMethodName())__				setEnforceInitMethod(otherAbd.isEnforceInitMethod())__			}_			if (otherAbd.getDestroyMethodName() != null) {_				setDestroyMethodName(otherAbd.getDestroyMethodName())__				setEnforceDestroyMethod(otherAbd.isEnforceDestroyMethod())__			}_			getMethodOverrides().addOverrides(otherAbd.getMethodOverrides())__			setSynthetic(otherAbd.isSynthetic())__			setResource(otherAbd.getResource())__		}_		else {_			setResourceDescription(other.getResourceDescription())__		}_	};override,settings,in,this,bean,definition,presumably,a,copied,parent,from,a,parent,child,inheritance,relationship,from,the,given,bean,definition,presumably,the,child,ul,li,will,override,bean,class,if,specified,in,the,given,bean,definition,li,will,always,take,code,abstract,code,scope,code,lazy,init,code,autowire,mode,code,dependency,check,and,code,depends,on,from,the,given,bean,definition,li,will,add,code,constructor,argument,values,code,property,values,code,method,overrides,from,the,given,bean,definition,to,existing,ones,li,will,override,code,factory,bean,name,code,factory,method,name,code,init,method,name,and,code,destroy,method,name,if,specified,in,the,given,bean,definition,ul;public,void,override,from,bean,definition,other,if,string,utils,has,length,other,get,bean,class,name,set,bean,class,name,other,get,bean,class,name,if,string,utils,has,length,other,get,factory,bean,name,set,factory,bean,name,other,get,factory,bean,name,if,string,utils,has,length,other,get,factory,method,name,set,factory,method,name,other,get,factory,method,name,if,string,utils,has,length,other,get,scope,set,scope,other,get,scope,set,abstract,other,is,abstract,set,lazy,init,other,is,lazy,init,set,role,other,get,role,get,constructor,argument,values,add,argument,values,other,get,constructor,argument,values,get,property,values,add,property,values,other,get,property,values,set,source,other,get,source,copy,attributes,from,other,if,other,instanceof,abstract,bean,definition,abstract,bean,definition,other,abd,abstract,bean,definition,other,if,other,abd,has,bean,class,set,bean,class,other,abd,get,bean,class,set,autowire,candidate,other,abd,is,autowire,candidate,set,autowire,mode,other,abd,get,autowire,mode,copy,qualifiers,from,other,abd,set,primary,other,abd,is,primary,set,dependency,check,other,abd,get,dependency,check,set,depends,on,other,abd,get,depends,on,set,non,public,access,allowed,other,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,other,abd,is,lenient,constructor,resolution,if,string,utils,has,length,other,abd,get,init,method,name,set,init,method,name,other,abd,get,init,method,name,set,enforce,init,method,other,abd,is,enforce,init,method,if,other,abd,get,destroy,method,name,null,set,destroy,method,name,other,abd,get,destroy,method,name,set,enforce,destroy,method,other,abd,is,enforce,destroy,method,get,method,overrides,add,overrides,other,abd,get,method,overrides,set,synthetic,other,abd,is,synthetic,set,resource,other,abd,get,resource,else,set,resource,description,other,get,resource,description
AbstractBeanDefinition -> public void overrideFrom(BeanDefinition other);1465226156;Override settings in this bean definition (presumably a copied parent_from a parent-child inheritance relationship) from the given bean_definition (presumably the child)._<ul>_<li>Will override beanClass if specified in the given bean definition._<li>Will always take {@code abstract}, {@code scope},_{@code lazyInit}, {@code autowireMode}, {@code dependencyCheck},_and {@code dependsOn} from the given bean definition._<li>Will add {@code constructorArgumentValues}, {@code propertyValues},_{@code methodOverrides} from the given bean definition to existing ones._<li>Will override {@code factoryBeanName}, {@code factoryMethodName},_{@code initMethodName}, and {@code destroyMethodName} if specified_in the given bean definition._</ul>;public void overrideFrom(BeanDefinition other) {_		if (StringUtils.hasLength(other.getBeanClassName())) {_			setBeanClassName(other.getBeanClassName())__		}_		if (StringUtils.hasLength(other.getFactoryBeanName())) {_			setFactoryBeanName(other.getFactoryBeanName())__		}_		if (StringUtils.hasLength(other.getFactoryMethodName())) {_			setFactoryMethodName(other.getFactoryMethodName())__		}_		if (StringUtils.hasLength(other.getScope())) {_			setScope(other.getScope())__		}_		setAbstract(other.isAbstract())__		setLazyInit(other.isLazyInit())__		setRole(other.getRole())__		getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues())__		getPropertyValues().addPropertyValues(other.getPropertyValues())__		setSource(other.getSource())__		copyAttributesFrom(other)___		if (other instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition otherAbd = (AbstractBeanDefinition) other__			if (otherAbd.hasBeanClass()) {_				setBeanClass(otherAbd.getBeanClass())__			}_			setAutowireCandidate(otherAbd.isAutowireCandidate())__			setAutowireMode(otherAbd.getAutowireMode())__			copyQualifiersFrom(otherAbd)__			setPrimary(otherAbd.isPrimary())__			setDependencyCheck(otherAbd.getDependencyCheck())__			setDependsOn(otherAbd.getDependsOn())__			setNonPublicAccessAllowed(otherAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(otherAbd.isLenientConstructorResolution())__			if (StringUtils.hasLength(otherAbd.getInitMethodName())) {_				setInitMethodName(otherAbd.getInitMethodName())__				setEnforceInitMethod(otherAbd.isEnforceInitMethod())__			}_			if (otherAbd.getDestroyMethodName() != null) {_				setDestroyMethodName(otherAbd.getDestroyMethodName())__				setEnforceDestroyMethod(otherAbd.isEnforceDestroyMethod())__			}_			getMethodOverrides().addOverrides(otherAbd.getMethodOverrides())__			setSynthetic(otherAbd.isSynthetic())__			setResource(otherAbd.getResource())__		}_		else {_			setResourceDescription(other.getResourceDescription())__		}_	};override,settings,in,this,bean,definition,presumably,a,copied,parent,from,a,parent,child,inheritance,relationship,from,the,given,bean,definition,presumably,the,child,ul,li,will,override,bean,class,if,specified,in,the,given,bean,definition,li,will,always,take,code,abstract,code,scope,code,lazy,init,code,autowire,mode,code,dependency,check,and,code,depends,on,from,the,given,bean,definition,li,will,add,code,constructor,argument,values,code,property,values,code,method,overrides,from,the,given,bean,definition,to,existing,ones,li,will,override,code,factory,bean,name,code,factory,method,name,code,init,method,name,and,code,destroy,method,name,if,specified,in,the,given,bean,definition,ul;public,void,override,from,bean,definition,other,if,string,utils,has,length,other,get,bean,class,name,set,bean,class,name,other,get,bean,class,name,if,string,utils,has,length,other,get,factory,bean,name,set,factory,bean,name,other,get,factory,bean,name,if,string,utils,has,length,other,get,factory,method,name,set,factory,method,name,other,get,factory,method,name,if,string,utils,has,length,other,get,scope,set,scope,other,get,scope,set,abstract,other,is,abstract,set,lazy,init,other,is,lazy,init,set,role,other,get,role,get,constructor,argument,values,add,argument,values,other,get,constructor,argument,values,get,property,values,add,property,values,other,get,property,values,set,source,other,get,source,copy,attributes,from,other,if,other,instanceof,abstract,bean,definition,abstract,bean,definition,other,abd,abstract,bean,definition,other,if,other,abd,has,bean,class,set,bean,class,other,abd,get,bean,class,set,autowire,candidate,other,abd,is,autowire,candidate,set,autowire,mode,other,abd,get,autowire,mode,copy,qualifiers,from,other,abd,set,primary,other,abd,is,primary,set,dependency,check,other,abd,get,dependency,check,set,depends,on,other,abd,get,depends,on,set,non,public,access,allowed,other,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,other,abd,is,lenient,constructor,resolution,if,string,utils,has,length,other,abd,get,init,method,name,set,init,method,name,other,abd,get,init,method,name,set,enforce,init,method,other,abd,is,enforce,init,method,if,other,abd,get,destroy,method,name,null,set,destroy,method,name,other,abd,get,destroy,method,name,set,enforce,destroy,method,other,abd,is,enforce,destroy,method,get,method,overrides,add,overrides,other,abd,get,method,overrides,set,synthetic,other,abd,is,synthetic,set,resource,other,abd,get,resource,else,set,resource,description,other,get,resource,description
AbstractBeanDefinition -> public void overrideFrom(BeanDefinition other);1467730834;Override settings in this bean definition (presumably a copied parent_from a parent-child inheritance relationship) from the given bean_definition (presumably the child)._<ul>_<li>Will override beanClass if specified in the given bean definition._<li>Will always take {@code abstract}, {@code scope},_{@code lazyInit}, {@code autowireMode}, {@code dependencyCheck},_and {@code dependsOn} from the given bean definition._<li>Will add {@code constructorArgumentValues}, {@code propertyValues},_{@code methodOverrides} from the given bean definition to existing ones._<li>Will override {@code factoryBeanName}, {@code factoryMethodName},_{@code initMethodName}, and {@code destroyMethodName} if specified_in the given bean definition._</ul>;public void overrideFrom(BeanDefinition other) {_		if (StringUtils.hasLength(other.getBeanClassName())) {_			setBeanClassName(other.getBeanClassName())__		}_		if (StringUtils.hasLength(other.getFactoryBeanName())) {_			setFactoryBeanName(other.getFactoryBeanName())__		}_		if (StringUtils.hasLength(other.getFactoryMethodName())) {_			setFactoryMethodName(other.getFactoryMethodName())__		}_		if (StringUtils.hasLength(other.getScope())) {_			setScope(other.getScope())__		}_		setAbstract(other.isAbstract())__		setLazyInit(other.isLazyInit())__		setRole(other.getRole())__		getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues())__		getPropertyValues().addPropertyValues(other.getPropertyValues())__		setSource(other.getSource())__		copyAttributesFrom(other)___		if (other instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition otherAbd = (AbstractBeanDefinition) other__			if (otherAbd.hasBeanClass()) {_				setBeanClass(otherAbd.getBeanClass())__			}_			setAutowireCandidate(otherAbd.isAutowireCandidate())__			setAutowireMode(otherAbd.getAutowireMode())__			copyQualifiersFrom(otherAbd)__			setPrimary(otherAbd.isPrimary())__			setDependencyCheck(otherAbd.getDependencyCheck())__			setDependsOn(otherAbd.getDependsOn())__			setNonPublicAccessAllowed(otherAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(otherAbd.isLenientConstructorResolution())__			if (StringUtils.hasLength(otherAbd.getInitMethodName())) {_				setInitMethodName(otherAbd.getInitMethodName())__				setEnforceInitMethod(otherAbd.isEnforceInitMethod())__			}_			if (otherAbd.getDestroyMethodName() != null) {_				setDestroyMethodName(otherAbd.getDestroyMethodName())__				setEnforceDestroyMethod(otherAbd.isEnforceDestroyMethod())__			}_			getMethodOverrides().addOverrides(otherAbd.getMethodOverrides())__			setSynthetic(otherAbd.isSynthetic())__			setResource(otherAbd.getResource())__		}_		else {_			setResourceDescription(other.getResourceDescription())__		}_	};override,settings,in,this,bean,definition,presumably,a,copied,parent,from,a,parent,child,inheritance,relationship,from,the,given,bean,definition,presumably,the,child,ul,li,will,override,bean,class,if,specified,in,the,given,bean,definition,li,will,always,take,code,abstract,code,scope,code,lazy,init,code,autowire,mode,code,dependency,check,and,code,depends,on,from,the,given,bean,definition,li,will,add,code,constructor,argument,values,code,property,values,code,method,overrides,from,the,given,bean,definition,to,existing,ones,li,will,override,code,factory,bean,name,code,factory,method,name,code,init,method,name,and,code,destroy,method,name,if,specified,in,the,given,bean,definition,ul;public,void,override,from,bean,definition,other,if,string,utils,has,length,other,get,bean,class,name,set,bean,class,name,other,get,bean,class,name,if,string,utils,has,length,other,get,factory,bean,name,set,factory,bean,name,other,get,factory,bean,name,if,string,utils,has,length,other,get,factory,method,name,set,factory,method,name,other,get,factory,method,name,if,string,utils,has,length,other,get,scope,set,scope,other,get,scope,set,abstract,other,is,abstract,set,lazy,init,other,is,lazy,init,set,role,other,get,role,get,constructor,argument,values,add,argument,values,other,get,constructor,argument,values,get,property,values,add,property,values,other,get,property,values,set,source,other,get,source,copy,attributes,from,other,if,other,instanceof,abstract,bean,definition,abstract,bean,definition,other,abd,abstract,bean,definition,other,if,other,abd,has,bean,class,set,bean,class,other,abd,get,bean,class,set,autowire,candidate,other,abd,is,autowire,candidate,set,autowire,mode,other,abd,get,autowire,mode,copy,qualifiers,from,other,abd,set,primary,other,abd,is,primary,set,dependency,check,other,abd,get,dependency,check,set,depends,on,other,abd,get,depends,on,set,non,public,access,allowed,other,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,other,abd,is,lenient,constructor,resolution,if,string,utils,has,length,other,abd,get,init,method,name,set,init,method,name,other,abd,get,init,method,name,set,enforce,init,method,other,abd,is,enforce,init,method,if,other,abd,get,destroy,method,name,null,set,destroy,method,name,other,abd,get,destroy,method,name,set,enforce,destroy,method,other,abd,is,enforce,destroy,method,get,method,overrides,add,overrides,other,abd,get,method,overrides,set,synthetic,other,abd,is,synthetic,set,resource,other,abd,get,resource,else,set,resource,description,other,get,resource,description
AbstractBeanDefinition -> public void overrideFrom(BeanDefinition other);1467846264;Override settings in this bean definition (presumably a copied parent_from a parent-child inheritance relationship) from the given bean_definition (presumably the child)._<ul>_<li>Will override beanClass if specified in the given bean definition._<li>Will always take {@code abstract}, {@code scope},_{@code lazyInit}, {@code autowireMode}, {@code dependencyCheck},_and {@code dependsOn} from the given bean definition._<li>Will add {@code constructorArgumentValues}, {@code propertyValues},_{@code methodOverrides} from the given bean definition to existing ones._<li>Will override {@code factoryBeanName}, {@code factoryMethodName},_{@code initMethodName}, and {@code destroyMethodName} if specified_in the given bean definition._</ul>;public void overrideFrom(BeanDefinition other) {_		if (StringUtils.hasLength(other.getBeanClassName())) {_			setBeanClassName(other.getBeanClassName())__		}_		if (StringUtils.hasLength(other.getFactoryBeanName())) {_			setFactoryBeanName(other.getFactoryBeanName())__		}_		if (StringUtils.hasLength(other.getFactoryMethodName())) {_			setFactoryMethodName(other.getFactoryMethodName())__		}_		if (StringUtils.hasLength(other.getScope())) {_			setScope(other.getScope())__		}_		setAbstract(other.isAbstract())__		setLazyInit(other.isLazyInit())__		setRole(other.getRole())__		getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues())__		getPropertyValues().addPropertyValues(other.getPropertyValues())__		setSource(other.getSource())__		copyAttributesFrom(other)___		if (other instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition otherAbd = (AbstractBeanDefinition) other__			if (otherAbd.hasBeanClass()) {_				setBeanClass(otherAbd.getBeanClass())__			}_			setAutowireCandidate(otherAbd.isAutowireCandidate())__			setAutowireMode(otherAbd.getAutowireMode())__			copyQualifiersFrom(otherAbd)__			setPrimary(otherAbd.isPrimary())__			setDependencyCheck(otherAbd.getDependencyCheck())__			setDependsOn(otherAbd.getDependsOn())__			setNonPublicAccessAllowed(otherAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(otherAbd.isLenientConstructorResolution())__			if (StringUtils.hasLength(otherAbd.getInitMethodName())) {_				setInitMethodName(otherAbd.getInitMethodName())__				setEnforceInitMethod(otherAbd.isEnforceInitMethod())__			}_			if (otherAbd.getDestroyMethodName() != null) {_				setDestroyMethodName(otherAbd.getDestroyMethodName())__				setEnforceDestroyMethod(otherAbd.isEnforceDestroyMethod())__			}_			getMethodOverrides().addOverrides(otherAbd.getMethodOverrides())__			setSynthetic(otherAbd.isSynthetic())__			setResource(otherAbd.getResource())__		}_		else {_			setResourceDescription(other.getResourceDescription())__		}_	};override,settings,in,this,bean,definition,presumably,a,copied,parent,from,a,parent,child,inheritance,relationship,from,the,given,bean,definition,presumably,the,child,ul,li,will,override,bean,class,if,specified,in,the,given,bean,definition,li,will,always,take,code,abstract,code,scope,code,lazy,init,code,autowire,mode,code,dependency,check,and,code,depends,on,from,the,given,bean,definition,li,will,add,code,constructor,argument,values,code,property,values,code,method,overrides,from,the,given,bean,definition,to,existing,ones,li,will,override,code,factory,bean,name,code,factory,method,name,code,init,method,name,and,code,destroy,method,name,if,specified,in,the,given,bean,definition,ul;public,void,override,from,bean,definition,other,if,string,utils,has,length,other,get,bean,class,name,set,bean,class,name,other,get,bean,class,name,if,string,utils,has,length,other,get,factory,bean,name,set,factory,bean,name,other,get,factory,bean,name,if,string,utils,has,length,other,get,factory,method,name,set,factory,method,name,other,get,factory,method,name,if,string,utils,has,length,other,get,scope,set,scope,other,get,scope,set,abstract,other,is,abstract,set,lazy,init,other,is,lazy,init,set,role,other,get,role,get,constructor,argument,values,add,argument,values,other,get,constructor,argument,values,get,property,values,add,property,values,other,get,property,values,set,source,other,get,source,copy,attributes,from,other,if,other,instanceof,abstract,bean,definition,abstract,bean,definition,other,abd,abstract,bean,definition,other,if,other,abd,has,bean,class,set,bean,class,other,abd,get,bean,class,set,autowire,candidate,other,abd,is,autowire,candidate,set,autowire,mode,other,abd,get,autowire,mode,copy,qualifiers,from,other,abd,set,primary,other,abd,is,primary,set,dependency,check,other,abd,get,dependency,check,set,depends,on,other,abd,get,depends,on,set,non,public,access,allowed,other,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,other,abd,is,lenient,constructor,resolution,if,string,utils,has,length,other,abd,get,init,method,name,set,init,method,name,other,abd,get,init,method,name,set,enforce,init,method,other,abd,is,enforce,init,method,if,other,abd,get,destroy,method,name,null,set,destroy,method,name,other,abd,get,destroy,method,name,set,enforce,destroy,method,other,abd,is,enforce,destroy,method,get,method,overrides,add,overrides,other,abd,get,method,overrides,set,synthetic,other,abd,is,synthetic,set,resource,other,abd,get,resource,else,set,resource,description,other,get,resource,description
AbstractBeanDefinition -> public void overrideFrom(BeanDefinition other);1482091545;Override settings in this bean definition (presumably a copied parent_from a parent-child inheritance relationship) from the given bean_definition (presumably the child)._<ul>_<li>Will override beanClass if specified in the given bean definition._<li>Will always take {@code abstract}, {@code scope},_{@code lazyInit}, {@code autowireMode}, {@code dependencyCheck},_and {@code dependsOn} from the given bean definition._<li>Will add {@code constructorArgumentValues}, {@code propertyValues},_{@code methodOverrides} from the given bean definition to existing ones._<li>Will override {@code factoryBeanName}, {@code factoryMethodName},_{@code initMethodName}, and {@code destroyMethodName} if specified_in the given bean definition._</ul>;public void overrideFrom(BeanDefinition other) {_		if (StringUtils.hasLength(other.getBeanClassName())) {_			setBeanClassName(other.getBeanClassName())__		}_		if (StringUtils.hasLength(other.getFactoryBeanName())) {_			setFactoryBeanName(other.getFactoryBeanName())__		}_		if (StringUtils.hasLength(other.getFactoryMethodName())) {_			setFactoryMethodName(other.getFactoryMethodName())__		}_		if (StringUtils.hasLength(other.getScope())) {_			setScope(other.getScope())__		}_		setAbstract(other.isAbstract())__		setLazyInit(other.isLazyInit())__		setRole(other.getRole())__		getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues())__		getPropertyValues().addPropertyValues(other.getPropertyValues())__		setSource(other.getSource())__		copyAttributesFrom(other)___		if (other instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition otherAbd = (AbstractBeanDefinition) other__			if (otherAbd.hasBeanClass()) {_				setBeanClass(otherAbd.getBeanClass())__			}_			setAutowireCandidate(otherAbd.isAutowireCandidate())__			setAutowireMode(otherAbd.getAutowireMode())__			copyQualifiersFrom(otherAbd)__			setPrimary(otherAbd.isPrimary())__			setDependencyCheck(otherAbd.getDependencyCheck())__			setDependsOn(otherAbd.getDependsOn())__			setNonPublicAccessAllowed(otherAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(otherAbd.isLenientConstructorResolution())__			setInstanceSupplier(otherAbd.getInstanceSupplier())__			if (StringUtils.hasLength(otherAbd.getInitMethodName())) {_				setInitMethodName(otherAbd.getInitMethodName())__				setEnforceInitMethod(otherAbd.isEnforceInitMethod())__			}_			if (otherAbd.getDestroyMethodName() != null) {_				setDestroyMethodName(otherAbd.getDestroyMethodName())__				setEnforceDestroyMethod(otherAbd.isEnforceDestroyMethod())__			}_			getMethodOverrides().addOverrides(otherAbd.getMethodOverrides())__			setSynthetic(otherAbd.isSynthetic())__			setResource(otherAbd.getResource())__		}_		else {_			setResourceDescription(other.getResourceDescription())__		}_	};override,settings,in,this,bean,definition,presumably,a,copied,parent,from,a,parent,child,inheritance,relationship,from,the,given,bean,definition,presumably,the,child,ul,li,will,override,bean,class,if,specified,in,the,given,bean,definition,li,will,always,take,code,abstract,code,scope,code,lazy,init,code,autowire,mode,code,dependency,check,and,code,depends,on,from,the,given,bean,definition,li,will,add,code,constructor,argument,values,code,property,values,code,method,overrides,from,the,given,bean,definition,to,existing,ones,li,will,override,code,factory,bean,name,code,factory,method,name,code,init,method,name,and,code,destroy,method,name,if,specified,in,the,given,bean,definition,ul;public,void,override,from,bean,definition,other,if,string,utils,has,length,other,get,bean,class,name,set,bean,class,name,other,get,bean,class,name,if,string,utils,has,length,other,get,factory,bean,name,set,factory,bean,name,other,get,factory,bean,name,if,string,utils,has,length,other,get,factory,method,name,set,factory,method,name,other,get,factory,method,name,if,string,utils,has,length,other,get,scope,set,scope,other,get,scope,set,abstract,other,is,abstract,set,lazy,init,other,is,lazy,init,set,role,other,get,role,get,constructor,argument,values,add,argument,values,other,get,constructor,argument,values,get,property,values,add,property,values,other,get,property,values,set,source,other,get,source,copy,attributes,from,other,if,other,instanceof,abstract,bean,definition,abstract,bean,definition,other,abd,abstract,bean,definition,other,if,other,abd,has,bean,class,set,bean,class,other,abd,get,bean,class,set,autowire,candidate,other,abd,is,autowire,candidate,set,autowire,mode,other,abd,get,autowire,mode,copy,qualifiers,from,other,abd,set,primary,other,abd,is,primary,set,dependency,check,other,abd,get,dependency,check,set,depends,on,other,abd,get,depends,on,set,non,public,access,allowed,other,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,other,abd,is,lenient,constructor,resolution,set,instance,supplier,other,abd,get,instance,supplier,if,string,utils,has,length,other,abd,get,init,method,name,set,init,method,name,other,abd,get,init,method,name,set,enforce,init,method,other,abd,is,enforce,init,method,if,other,abd,get,destroy,method,name,null,set,destroy,method,name,other,abd,get,destroy,method,name,set,enforce,destroy,method,other,abd,is,enforce,destroy,method,get,method,overrides,add,overrides,other,abd,get,method,overrides,set,synthetic,other,abd,is,synthetic,set,resource,other,abd,get,resource,else,set,resource,description,other,get,resource,description
AbstractBeanDefinition -> public void overrideFrom(BeanDefinition other);1483093818;Override settings in this bean definition (presumably a copied parent_from a parent-child inheritance relationship) from the given bean_definition (presumably the child)._<ul>_<li>Will override beanClass if specified in the given bean definition._<li>Will always take {@code abstract}, {@code scope},_{@code lazyInit}, {@code autowireMode}, {@code dependencyCheck},_and {@code dependsOn} from the given bean definition._<li>Will add {@code constructorArgumentValues}, {@code propertyValues},_{@code methodOverrides} from the given bean definition to existing ones._<li>Will override {@code factoryBeanName}, {@code factoryMethodName},_{@code initMethodName}, and {@code destroyMethodName} if specified_in the given bean definition._</ul>;public void overrideFrom(BeanDefinition other) {_		if (StringUtils.hasLength(other.getBeanClassName())) {_			setBeanClassName(other.getBeanClassName())__		}_		if (StringUtils.hasLength(other.getScope())) {_			setScope(other.getScope())__		}_		setAbstract(other.isAbstract())__		setLazyInit(other.isLazyInit())__		if (StringUtils.hasLength(other.getFactoryBeanName())) {_			setFactoryBeanName(other.getFactoryBeanName())__		}_		if (StringUtils.hasLength(other.getFactoryMethodName())) {_			setFactoryMethodName(other.getFactoryMethodName())__		}_		getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues())__		getPropertyValues().addPropertyValues(other.getPropertyValues())__		setRole(other.getRole())__		setSource(other.getSource())__		copyAttributesFrom(other)___		if (other instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition otherAbd = (AbstractBeanDefinition) other__			if (otherAbd.hasBeanClass()) {_				setBeanClass(otherAbd.getBeanClass())__			}_			setAutowireMode(otherAbd.getAutowireMode())__			setDependencyCheck(otherAbd.getDependencyCheck())__			setDependsOn(otherAbd.getDependsOn())__			setAutowireCandidate(otherAbd.isAutowireCandidate())__			setPrimary(otherAbd.isPrimary())__			copyQualifiersFrom(otherAbd)__			setInstanceSupplier(otherAbd.getInstanceSupplier())__			setNonPublicAccessAllowed(otherAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(otherAbd.isLenientConstructorResolution())__			getMethodOverrides().addOverrides(otherAbd.getMethodOverrides())__			if (StringUtils.hasLength(otherAbd.getInitMethodName())) {_				setInitMethodName(otherAbd.getInitMethodName())__				setEnforceInitMethod(otherAbd.isEnforceInitMethod())__			}_			if (otherAbd.getDestroyMethodName() != null) {_				setDestroyMethodName(otherAbd.getDestroyMethodName())__				setEnforceDestroyMethod(otherAbd.isEnforceDestroyMethod())__			}_			setSynthetic(otherAbd.isSynthetic())__			setResource(otherAbd.getResource())__		}_		else {_			setResourceDescription(other.getResourceDescription())__		}_	};override,settings,in,this,bean,definition,presumably,a,copied,parent,from,a,parent,child,inheritance,relationship,from,the,given,bean,definition,presumably,the,child,ul,li,will,override,bean,class,if,specified,in,the,given,bean,definition,li,will,always,take,code,abstract,code,scope,code,lazy,init,code,autowire,mode,code,dependency,check,and,code,depends,on,from,the,given,bean,definition,li,will,add,code,constructor,argument,values,code,property,values,code,method,overrides,from,the,given,bean,definition,to,existing,ones,li,will,override,code,factory,bean,name,code,factory,method,name,code,init,method,name,and,code,destroy,method,name,if,specified,in,the,given,bean,definition,ul;public,void,override,from,bean,definition,other,if,string,utils,has,length,other,get,bean,class,name,set,bean,class,name,other,get,bean,class,name,if,string,utils,has,length,other,get,scope,set,scope,other,get,scope,set,abstract,other,is,abstract,set,lazy,init,other,is,lazy,init,if,string,utils,has,length,other,get,factory,bean,name,set,factory,bean,name,other,get,factory,bean,name,if,string,utils,has,length,other,get,factory,method,name,set,factory,method,name,other,get,factory,method,name,get,constructor,argument,values,add,argument,values,other,get,constructor,argument,values,get,property,values,add,property,values,other,get,property,values,set,role,other,get,role,set,source,other,get,source,copy,attributes,from,other,if,other,instanceof,abstract,bean,definition,abstract,bean,definition,other,abd,abstract,bean,definition,other,if,other,abd,has,bean,class,set,bean,class,other,abd,get,bean,class,set,autowire,mode,other,abd,get,autowire,mode,set,dependency,check,other,abd,get,dependency,check,set,depends,on,other,abd,get,depends,on,set,autowire,candidate,other,abd,is,autowire,candidate,set,primary,other,abd,is,primary,copy,qualifiers,from,other,abd,set,instance,supplier,other,abd,get,instance,supplier,set,non,public,access,allowed,other,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,other,abd,is,lenient,constructor,resolution,get,method,overrides,add,overrides,other,abd,get,method,overrides,if,string,utils,has,length,other,abd,get,init,method,name,set,init,method,name,other,abd,get,init,method,name,set,enforce,init,method,other,abd,is,enforce,init,method,if,other,abd,get,destroy,method,name,null,set,destroy,method,name,other,abd,get,destroy,method,name,set,enforce,destroy,method,other,abd,is,enforce,destroy,method,set,synthetic,other,abd,is,synthetic,set,resource,other,abd,get,resource,else,set,resource,description,other,get,resource,description
AbstractBeanDefinition -> public void overrideFrom(BeanDefinition other);1495868221;Override settings in this bean definition (presumably a copied parent_from a parent-child inheritance relationship) from the given bean_definition (presumably the child)._<ul>_<li>Will override beanClass if specified in the given bean definition._<li>Will always take {@code abstract}, {@code scope},_{@code lazyInit}, {@code autowireMode}, {@code dependencyCheck},_and {@code dependsOn} from the given bean definition._<li>Will add {@code constructorArgumentValues}, {@code propertyValues},_{@code methodOverrides} from the given bean definition to existing ones._<li>Will override {@code factoryBeanName}, {@code factoryMethodName},_{@code initMethodName}, and {@code destroyMethodName} if specified_in the given bean definition._</ul>;public void overrideFrom(BeanDefinition other) {_		if (StringUtils.hasLength(other.getBeanClassName())) {_			setBeanClassName(other.getBeanClassName())__		}_		if (StringUtils.hasLength(other.getScope())) {_			setScope(other.getScope())__		}_		setAbstract(other.isAbstract())__		setLazyInit(other.isLazyInit())__		if (StringUtils.hasLength(other.getFactoryBeanName())) {_			setFactoryBeanName(other.getFactoryBeanName())__		}_		if (StringUtils.hasLength(other.getFactoryMethodName())) {_			setFactoryMethodName(other.getFactoryMethodName())__		}_		getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues())__		getPropertyValues().addPropertyValues(other.getPropertyValues())__		setRole(other.getRole())__		setSource(other.getSource())__		copyAttributesFrom(other)___		if (other instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition otherAbd = (AbstractBeanDefinition) other__			if (otherAbd.hasBeanClass()) {_				setBeanClass(otherAbd.getBeanClass())__			}_			setAutowireMode(otherAbd.getAutowireMode())__			setDependencyCheck(otherAbd.getDependencyCheck())__			setDependsOn(otherAbd.getDependsOn())__			setAutowireCandidate(otherAbd.isAutowireCandidate())__			setPrimary(otherAbd.isPrimary())__			copyQualifiersFrom(otherAbd)__			setInstanceSupplier(otherAbd.getInstanceSupplier())__			setNonPublicAccessAllowed(otherAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(otherAbd.isLenientConstructorResolution())__			getMethodOverrides().addOverrides(otherAbd.getMethodOverrides())__			if (StringUtils.hasLength(otherAbd.getInitMethodName())) {_				setInitMethodName(otherAbd.getInitMethodName())__				setEnforceInitMethod(otherAbd.isEnforceInitMethod())__			}_			if (otherAbd.getDestroyMethodName() != null) {_				setDestroyMethodName(otherAbd.getDestroyMethodName())__				setEnforceDestroyMethod(otherAbd.isEnforceDestroyMethod())__			}_			setSynthetic(otherAbd.isSynthetic())__			setResource(otherAbd.getResource())__		}_		else {_			setResourceDescription(other.getResourceDescription())__		}_	};override,settings,in,this,bean,definition,presumably,a,copied,parent,from,a,parent,child,inheritance,relationship,from,the,given,bean,definition,presumably,the,child,ul,li,will,override,bean,class,if,specified,in,the,given,bean,definition,li,will,always,take,code,abstract,code,scope,code,lazy,init,code,autowire,mode,code,dependency,check,and,code,depends,on,from,the,given,bean,definition,li,will,add,code,constructor,argument,values,code,property,values,code,method,overrides,from,the,given,bean,definition,to,existing,ones,li,will,override,code,factory,bean,name,code,factory,method,name,code,init,method,name,and,code,destroy,method,name,if,specified,in,the,given,bean,definition,ul;public,void,override,from,bean,definition,other,if,string,utils,has,length,other,get,bean,class,name,set,bean,class,name,other,get,bean,class,name,if,string,utils,has,length,other,get,scope,set,scope,other,get,scope,set,abstract,other,is,abstract,set,lazy,init,other,is,lazy,init,if,string,utils,has,length,other,get,factory,bean,name,set,factory,bean,name,other,get,factory,bean,name,if,string,utils,has,length,other,get,factory,method,name,set,factory,method,name,other,get,factory,method,name,get,constructor,argument,values,add,argument,values,other,get,constructor,argument,values,get,property,values,add,property,values,other,get,property,values,set,role,other,get,role,set,source,other,get,source,copy,attributes,from,other,if,other,instanceof,abstract,bean,definition,abstract,bean,definition,other,abd,abstract,bean,definition,other,if,other,abd,has,bean,class,set,bean,class,other,abd,get,bean,class,set,autowire,mode,other,abd,get,autowire,mode,set,dependency,check,other,abd,get,dependency,check,set,depends,on,other,abd,get,depends,on,set,autowire,candidate,other,abd,is,autowire,candidate,set,primary,other,abd,is,primary,copy,qualifiers,from,other,abd,set,instance,supplier,other,abd,get,instance,supplier,set,non,public,access,allowed,other,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,other,abd,is,lenient,constructor,resolution,get,method,overrides,add,overrides,other,abd,get,method,overrides,if,string,utils,has,length,other,abd,get,init,method,name,set,init,method,name,other,abd,get,init,method,name,set,enforce,init,method,other,abd,is,enforce,init,method,if,other,abd,get,destroy,method,name,null,set,destroy,method,name,other,abd,get,destroy,method,name,set,enforce,destroy,method,other,abd,is,enforce,destroy,method,set,synthetic,other,abd,is,synthetic,set,resource,other,abd,get,resource,else,set,resource,description,other,get,resource,description
AbstractBeanDefinition -> public void overrideFrom(BeanDefinition other);1496837955;Override settings in this bean definition (presumably a copied parent_from a parent-child inheritance relationship) from the given bean_definition (presumably the child)._<ul>_<li>Will override beanClass if specified in the given bean definition._<li>Will always take {@code abstract}, {@code scope},_{@code lazyInit}, {@code autowireMode}, {@code dependencyCheck},_and {@code dependsOn} from the given bean definition._<li>Will add {@code constructorArgumentValues}, {@code propertyValues},_{@code methodOverrides} from the given bean definition to existing ones._<li>Will override {@code factoryBeanName}, {@code factoryMethodName},_{@code initMethodName}, and {@code destroyMethodName} if specified_in the given bean definition._</ul>;public void overrideFrom(BeanDefinition other) {_		if (StringUtils.hasLength(other.getBeanClassName())) {_			setBeanClassName(other.getBeanClassName())__		}_		if (StringUtils.hasLength(other.getScope())) {_			setScope(other.getScope())__		}_		setAbstract(other.isAbstract())__		setLazyInit(other.isLazyInit())__		if (StringUtils.hasLength(other.getFactoryBeanName())) {_			setFactoryBeanName(other.getFactoryBeanName())__		}_		if (StringUtils.hasLength(other.getFactoryMethodName())) {_			setFactoryMethodName(other.getFactoryMethodName())__		}_		getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues())__		getPropertyValues().addPropertyValues(other.getPropertyValues())__		setRole(other.getRole())__		setSource(other.getSource())__		copyAttributesFrom(other)___		if (other instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition otherAbd = (AbstractBeanDefinition) other__			if (otherAbd.hasBeanClass()) {_				setBeanClass(otherAbd.getBeanClass())__			}_			setAutowireMode(otherAbd.getAutowireMode())__			setDependencyCheck(otherAbd.getDependencyCheck())__			setDependsOn(otherAbd.getDependsOn())__			setAutowireCandidate(otherAbd.isAutowireCandidate())__			setPrimary(otherAbd.isPrimary())__			copyQualifiersFrom(otherAbd)__			setInstanceSupplier(otherAbd.getInstanceSupplier())__			setNonPublicAccessAllowed(otherAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(otherAbd.isLenientConstructorResolution())__			getMethodOverrides().addOverrides(otherAbd.getMethodOverrides())__			if (StringUtils.hasLength(otherAbd.getInitMethodName())) {_				setInitMethodName(otherAbd.getInitMethodName())__				setEnforceInitMethod(otherAbd.isEnforceInitMethod())__			}_			if (otherAbd.getDestroyMethodName() != null) {_				setDestroyMethodName(otherAbd.getDestroyMethodName())__				setEnforceDestroyMethod(otherAbd.isEnforceDestroyMethod())__			}_			setSynthetic(otherAbd.isSynthetic())__			setResource(otherAbd.getResource())__		}_		else {_			setResourceDescription(other.getResourceDescription())__		}_	};override,settings,in,this,bean,definition,presumably,a,copied,parent,from,a,parent,child,inheritance,relationship,from,the,given,bean,definition,presumably,the,child,ul,li,will,override,bean,class,if,specified,in,the,given,bean,definition,li,will,always,take,code,abstract,code,scope,code,lazy,init,code,autowire,mode,code,dependency,check,and,code,depends,on,from,the,given,bean,definition,li,will,add,code,constructor,argument,values,code,property,values,code,method,overrides,from,the,given,bean,definition,to,existing,ones,li,will,override,code,factory,bean,name,code,factory,method,name,code,init,method,name,and,code,destroy,method,name,if,specified,in,the,given,bean,definition,ul;public,void,override,from,bean,definition,other,if,string,utils,has,length,other,get,bean,class,name,set,bean,class,name,other,get,bean,class,name,if,string,utils,has,length,other,get,scope,set,scope,other,get,scope,set,abstract,other,is,abstract,set,lazy,init,other,is,lazy,init,if,string,utils,has,length,other,get,factory,bean,name,set,factory,bean,name,other,get,factory,bean,name,if,string,utils,has,length,other,get,factory,method,name,set,factory,method,name,other,get,factory,method,name,get,constructor,argument,values,add,argument,values,other,get,constructor,argument,values,get,property,values,add,property,values,other,get,property,values,set,role,other,get,role,set,source,other,get,source,copy,attributes,from,other,if,other,instanceof,abstract,bean,definition,abstract,bean,definition,other,abd,abstract,bean,definition,other,if,other,abd,has,bean,class,set,bean,class,other,abd,get,bean,class,set,autowire,mode,other,abd,get,autowire,mode,set,dependency,check,other,abd,get,dependency,check,set,depends,on,other,abd,get,depends,on,set,autowire,candidate,other,abd,is,autowire,candidate,set,primary,other,abd,is,primary,copy,qualifiers,from,other,abd,set,instance,supplier,other,abd,get,instance,supplier,set,non,public,access,allowed,other,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,other,abd,is,lenient,constructor,resolution,get,method,overrides,add,overrides,other,abd,get,method,overrides,if,string,utils,has,length,other,abd,get,init,method,name,set,init,method,name,other,abd,get,init,method,name,set,enforce,init,method,other,abd,is,enforce,init,method,if,other,abd,get,destroy,method,name,null,set,destroy,method,name,other,abd,get,destroy,method,name,set,enforce,destroy,method,other,abd,is,enforce,destroy,method,set,synthetic,other,abd,is,synthetic,set,resource,other,abd,get,resource,else,set,resource,description,other,get,resource,description
AbstractBeanDefinition -> public void overrideFrom(BeanDefinition other);1498780456;Override settings in this bean definition (presumably a copied parent_from a parent-child inheritance relationship) from the given bean_definition (presumably the child)._<ul>_<li>Will override beanClass if specified in the given bean definition._<li>Will always take {@code abstract}, {@code scope},_{@code lazyInit}, {@code autowireMode}, {@code dependencyCheck},_and {@code dependsOn} from the given bean definition._<li>Will add {@code constructorArgumentValues}, {@code propertyValues},_{@code methodOverrides} from the given bean definition to existing ones._<li>Will override {@code factoryBeanName}, {@code factoryMethodName},_{@code initMethodName}, and {@code destroyMethodName} if specified_in the given bean definition._</ul>;public void overrideFrom(BeanDefinition other) {_		if (StringUtils.hasLength(other.getBeanClassName())) {_			setBeanClassName(other.getBeanClassName())__		}_		if (StringUtils.hasLength(other.getScope())) {_			setScope(other.getScope())__		}_		setAbstract(other.isAbstract())__		setLazyInit(other.isLazyInit())__		if (StringUtils.hasLength(other.getFactoryBeanName())) {_			setFactoryBeanName(other.getFactoryBeanName())__		}_		if (StringUtils.hasLength(other.getFactoryMethodName())) {_			setFactoryMethodName(other.getFactoryMethodName())__		}_		getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues())__		getPropertyValues().addPropertyValues(other.getPropertyValues())__		setRole(other.getRole())__		setSource(other.getSource())__		copyAttributesFrom(other)___		if (other instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition otherAbd = (AbstractBeanDefinition) other__			if (otherAbd.hasBeanClass()) {_				setBeanClass(otherAbd.getBeanClass())__			}_			setAutowireMode(otherAbd.getAutowireMode())__			setDependencyCheck(otherAbd.getDependencyCheck())__			setDependsOn(otherAbd.getDependsOn())__			setAutowireCandidate(otherAbd.isAutowireCandidate())__			setPrimary(otherAbd.isPrimary())__			copyQualifiersFrom(otherAbd)__			setInstanceSupplier(otherAbd.getInstanceSupplier())__			setNonPublicAccessAllowed(otherAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(otherAbd.isLenientConstructorResolution())__			getMethodOverrides().addOverrides(otherAbd.getMethodOverrides())__			if (StringUtils.hasLength(otherAbd.getInitMethodName())) {_				setInitMethodName(otherAbd.getInitMethodName())__				setEnforceInitMethod(otherAbd.isEnforceInitMethod())__			}_			if (otherAbd.getDestroyMethodName() != null) {_				setDestroyMethodName(otherAbd.getDestroyMethodName())__				setEnforceDestroyMethod(otherAbd.isEnforceDestroyMethod())__			}_			setSynthetic(otherAbd.isSynthetic())__			setResource(otherAbd.getResource())__		}_		else {_			setResourceDescription(other.getResourceDescription())__		}_	};override,settings,in,this,bean,definition,presumably,a,copied,parent,from,a,parent,child,inheritance,relationship,from,the,given,bean,definition,presumably,the,child,ul,li,will,override,bean,class,if,specified,in,the,given,bean,definition,li,will,always,take,code,abstract,code,scope,code,lazy,init,code,autowire,mode,code,dependency,check,and,code,depends,on,from,the,given,bean,definition,li,will,add,code,constructor,argument,values,code,property,values,code,method,overrides,from,the,given,bean,definition,to,existing,ones,li,will,override,code,factory,bean,name,code,factory,method,name,code,init,method,name,and,code,destroy,method,name,if,specified,in,the,given,bean,definition,ul;public,void,override,from,bean,definition,other,if,string,utils,has,length,other,get,bean,class,name,set,bean,class,name,other,get,bean,class,name,if,string,utils,has,length,other,get,scope,set,scope,other,get,scope,set,abstract,other,is,abstract,set,lazy,init,other,is,lazy,init,if,string,utils,has,length,other,get,factory,bean,name,set,factory,bean,name,other,get,factory,bean,name,if,string,utils,has,length,other,get,factory,method,name,set,factory,method,name,other,get,factory,method,name,get,constructor,argument,values,add,argument,values,other,get,constructor,argument,values,get,property,values,add,property,values,other,get,property,values,set,role,other,get,role,set,source,other,get,source,copy,attributes,from,other,if,other,instanceof,abstract,bean,definition,abstract,bean,definition,other,abd,abstract,bean,definition,other,if,other,abd,has,bean,class,set,bean,class,other,abd,get,bean,class,set,autowire,mode,other,abd,get,autowire,mode,set,dependency,check,other,abd,get,dependency,check,set,depends,on,other,abd,get,depends,on,set,autowire,candidate,other,abd,is,autowire,candidate,set,primary,other,abd,is,primary,copy,qualifiers,from,other,abd,set,instance,supplier,other,abd,get,instance,supplier,set,non,public,access,allowed,other,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,other,abd,is,lenient,constructor,resolution,get,method,overrides,add,overrides,other,abd,get,method,overrides,if,string,utils,has,length,other,abd,get,init,method,name,set,init,method,name,other,abd,get,init,method,name,set,enforce,init,method,other,abd,is,enforce,init,method,if,other,abd,get,destroy,method,name,null,set,destroy,method,name,other,abd,get,destroy,method,name,set,enforce,destroy,method,other,abd,is,enforce,destroy,method,set,synthetic,other,abd,is,synthetic,set,resource,other,abd,get,resource,else,set,resource,description,other,get,resource,description
AbstractBeanDefinition -> public void overrideFrom(BeanDefinition other);1502974979;Override settings in this bean definition (presumably a copied parent_from a parent-child inheritance relationship) from the given bean_definition (presumably the child)._<ul>_<li>Will override beanClass if specified in the given bean definition._<li>Will always take {@code abstract}, {@code scope},_{@code lazyInit}, {@code autowireMode}, {@code dependencyCheck},_and {@code dependsOn} from the given bean definition._<li>Will add {@code constructorArgumentValues}, {@code propertyValues},_{@code methodOverrides} from the given bean definition to existing ones._<li>Will override {@code factoryBeanName}, {@code factoryMethodName},_{@code initMethodName}, and {@code destroyMethodName} if specified_in the given bean definition._</ul>;public void overrideFrom(BeanDefinition other) {_		if (StringUtils.hasLength(other.getBeanClassName())) {_			setBeanClassName(other.getBeanClassName())__		}_		if (StringUtils.hasLength(other.getScope())) {_			setScope(other.getScope())__		}_		setAbstract(other.isAbstract())__		setLazyInit(other.isLazyInit())__		if (StringUtils.hasLength(other.getFactoryBeanName())) {_			setFactoryBeanName(other.getFactoryBeanName())__		}_		if (StringUtils.hasLength(other.getFactoryMethodName())) {_			setFactoryMethodName(other.getFactoryMethodName())__		}_		getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues())__		getPropertyValues().addPropertyValues(other.getPropertyValues())__		setRole(other.getRole())__		setSource(other.getSource())__		copyAttributesFrom(other)___		if (other instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition otherAbd = (AbstractBeanDefinition) other__			if (otherAbd.hasBeanClass()) {_				setBeanClass(otherAbd.getBeanClass())__			}_			setAutowireMode(otherAbd.getAutowireMode())__			setDependencyCheck(otherAbd.getDependencyCheck())__			setDependsOn(otherAbd.getDependsOn())__			setAutowireCandidate(otherAbd.isAutowireCandidate())__			setPrimary(otherAbd.isPrimary())__			copyQualifiersFrom(otherAbd)__			setInstanceSupplier(otherAbd.getInstanceSupplier())__			setNonPublicAccessAllowed(otherAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(otherAbd.isLenientConstructorResolution())__			getMethodOverrides().addOverrides(otherAbd.getMethodOverrides())__			if (StringUtils.hasLength(otherAbd.getInitMethodName())) {_				setInitMethodName(otherAbd.getInitMethodName())__				setEnforceInitMethod(otherAbd.isEnforceInitMethod())__			}_			if (otherAbd.getDestroyMethodName() != null) {_				setDestroyMethodName(otherAbd.getDestroyMethodName())__				setEnforceDestroyMethod(otherAbd.isEnforceDestroyMethod())__			}_			setSynthetic(otherAbd.isSynthetic())__			setResource(otherAbd.getResource())__		}_		else {_			setResourceDescription(other.getResourceDescription())__		}_	};override,settings,in,this,bean,definition,presumably,a,copied,parent,from,a,parent,child,inheritance,relationship,from,the,given,bean,definition,presumably,the,child,ul,li,will,override,bean,class,if,specified,in,the,given,bean,definition,li,will,always,take,code,abstract,code,scope,code,lazy,init,code,autowire,mode,code,dependency,check,and,code,depends,on,from,the,given,bean,definition,li,will,add,code,constructor,argument,values,code,property,values,code,method,overrides,from,the,given,bean,definition,to,existing,ones,li,will,override,code,factory,bean,name,code,factory,method,name,code,init,method,name,and,code,destroy,method,name,if,specified,in,the,given,bean,definition,ul;public,void,override,from,bean,definition,other,if,string,utils,has,length,other,get,bean,class,name,set,bean,class,name,other,get,bean,class,name,if,string,utils,has,length,other,get,scope,set,scope,other,get,scope,set,abstract,other,is,abstract,set,lazy,init,other,is,lazy,init,if,string,utils,has,length,other,get,factory,bean,name,set,factory,bean,name,other,get,factory,bean,name,if,string,utils,has,length,other,get,factory,method,name,set,factory,method,name,other,get,factory,method,name,get,constructor,argument,values,add,argument,values,other,get,constructor,argument,values,get,property,values,add,property,values,other,get,property,values,set,role,other,get,role,set,source,other,get,source,copy,attributes,from,other,if,other,instanceof,abstract,bean,definition,abstract,bean,definition,other,abd,abstract,bean,definition,other,if,other,abd,has,bean,class,set,bean,class,other,abd,get,bean,class,set,autowire,mode,other,abd,get,autowire,mode,set,dependency,check,other,abd,get,dependency,check,set,depends,on,other,abd,get,depends,on,set,autowire,candidate,other,abd,is,autowire,candidate,set,primary,other,abd,is,primary,copy,qualifiers,from,other,abd,set,instance,supplier,other,abd,get,instance,supplier,set,non,public,access,allowed,other,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,other,abd,is,lenient,constructor,resolution,get,method,overrides,add,overrides,other,abd,get,method,overrides,if,string,utils,has,length,other,abd,get,init,method,name,set,init,method,name,other,abd,get,init,method,name,set,enforce,init,method,other,abd,is,enforce,init,method,if,other,abd,get,destroy,method,name,null,set,destroy,method,name,other,abd,get,destroy,method,name,set,enforce,destroy,method,other,abd,is,enforce,destroy,method,set,synthetic,other,abd,is,synthetic,set,resource,other,abd,get,resource,else,set,resource,description,other,get,resource,description
AbstractBeanDefinition -> public void overrideFrom(BeanDefinition other);1503008029;Override settings in this bean definition (presumably a copied parent_from a parent-child inheritance relationship) from the given bean_definition (presumably the child)._<ul>_<li>Will override beanClass if specified in the given bean definition._<li>Will always take {@code abstract}, {@code scope},_{@code lazyInit}, {@code autowireMode}, {@code dependencyCheck},_and {@code dependsOn} from the given bean definition._<li>Will add {@code constructorArgumentValues}, {@code propertyValues},_{@code methodOverrides} from the given bean definition to existing ones._<li>Will override {@code factoryBeanName}, {@code factoryMethodName},_{@code initMethodName}, and {@code destroyMethodName} if specified_in the given bean definition._</ul>;public void overrideFrom(BeanDefinition other) {_		if (StringUtils.hasLength(other.getBeanClassName())) {_			setBeanClassName(other.getBeanClassName())__		}_		if (StringUtils.hasLength(other.getScope())) {_			setScope(other.getScope())__		}_		setAbstract(other.isAbstract())__		setLazyInit(other.isLazyInit())__		if (StringUtils.hasLength(other.getFactoryBeanName())) {_			setFactoryBeanName(other.getFactoryBeanName())__		}_		if (StringUtils.hasLength(other.getFactoryMethodName())) {_			setFactoryMethodName(other.getFactoryMethodName())__		}_		getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues())__		getPropertyValues().addPropertyValues(other.getPropertyValues())__		setRole(other.getRole())__		setSource(other.getSource())__		copyAttributesFrom(other)___		if (other instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition otherAbd = (AbstractBeanDefinition) other__			if (otherAbd.hasBeanClass()) {_				setBeanClass(otherAbd.getBeanClass())__			}_			setAutowireMode(otherAbd.getAutowireMode())__			setDependencyCheck(otherAbd.getDependencyCheck())__			setDependsOn(otherAbd.getDependsOn())__			setAutowireCandidate(otherAbd.isAutowireCandidate())__			setPrimary(otherAbd.isPrimary())__			copyQualifiersFrom(otherAbd)__			setInstanceSupplier(otherAbd.getInstanceSupplier())__			setNonPublicAccessAllowed(otherAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(otherAbd.isLenientConstructorResolution())__			getMethodOverrides().addOverrides(otherAbd.getMethodOverrides())__			if (otherAbd.getInitMethodName() != null) {_				setInitMethodName(otherAbd.getInitMethodName())__				setEnforceInitMethod(otherAbd.isEnforceInitMethod())__			}_			if (otherAbd.getDestroyMethodName() != null) {_				setDestroyMethodName(otherAbd.getDestroyMethodName())__				setEnforceDestroyMethod(otherAbd.isEnforceDestroyMethod())__			}_			setSynthetic(otherAbd.isSynthetic())__			setResource(otherAbd.getResource())__		}_		else {_			setResourceDescription(other.getResourceDescription())__		}_	};override,settings,in,this,bean,definition,presumably,a,copied,parent,from,a,parent,child,inheritance,relationship,from,the,given,bean,definition,presumably,the,child,ul,li,will,override,bean,class,if,specified,in,the,given,bean,definition,li,will,always,take,code,abstract,code,scope,code,lazy,init,code,autowire,mode,code,dependency,check,and,code,depends,on,from,the,given,bean,definition,li,will,add,code,constructor,argument,values,code,property,values,code,method,overrides,from,the,given,bean,definition,to,existing,ones,li,will,override,code,factory,bean,name,code,factory,method,name,code,init,method,name,and,code,destroy,method,name,if,specified,in,the,given,bean,definition,ul;public,void,override,from,bean,definition,other,if,string,utils,has,length,other,get,bean,class,name,set,bean,class,name,other,get,bean,class,name,if,string,utils,has,length,other,get,scope,set,scope,other,get,scope,set,abstract,other,is,abstract,set,lazy,init,other,is,lazy,init,if,string,utils,has,length,other,get,factory,bean,name,set,factory,bean,name,other,get,factory,bean,name,if,string,utils,has,length,other,get,factory,method,name,set,factory,method,name,other,get,factory,method,name,get,constructor,argument,values,add,argument,values,other,get,constructor,argument,values,get,property,values,add,property,values,other,get,property,values,set,role,other,get,role,set,source,other,get,source,copy,attributes,from,other,if,other,instanceof,abstract,bean,definition,abstract,bean,definition,other,abd,abstract,bean,definition,other,if,other,abd,has,bean,class,set,bean,class,other,abd,get,bean,class,set,autowire,mode,other,abd,get,autowire,mode,set,dependency,check,other,abd,get,dependency,check,set,depends,on,other,abd,get,depends,on,set,autowire,candidate,other,abd,is,autowire,candidate,set,primary,other,abd,is,primary,copy,qualifiers,from,other,abd,set,instance,supplier,other,abd,get,instance,supplier,set,non,public,access,allowed,other,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,other,abd,is,lenient,constructor,resolution,get,method,overrides,add,overrides,other,abd,get,method,overrides,if,other,abd,get,init,method,name,null,set,init,method,name,other,abd,get,init,method,name,set,enforce,init,method,other,abd,is,enforce,init,method,if,other,abd,get,destroy,method,name,null,set,destroy,method,name,other,abd,get,destroy,method,name,set,enforce,destroy,method,other,abd,is,enforce,destroy,method,set,synthetic,other,abd,is,synthetic,set,resource,other,abd,get,resource,else,set,resource,description,other,get,resource,description
AbstractBeanDefinition -> public void overrideFrom(BeanDefinition other);1510606271;Override settings in this bean definition (presumably a copied parent_from a parent-child inheritance relationship) from the given bean_definition (presumably the child)._<ul>_<li>Will override beanClass if specified in the given bean definition._<li>Will always take {@code abstract}, {@code scope},_{@code lazyInit}, {@code autowireMode}, {@code dependencyCheck},_and {@code dependsOn} from the given bean definition._<li>Will add {@code constructorArgumentValues}, {@code propertyValues},_{@code methodOverrides} from the given bean definition to existing ones._<li>Will override {@code factoryBeanName}, {@code factoryMethodName},_{@code initMethodName}, and {@code destroyMethodName} if specified_in the given bean definition._</ul>;public void overrideFrom(BeanDefinition other) {_		if (StringUtils.hasLength(other.getBeanClassName())) {_			setBeanClassName(other.getBeanClassName())__		}_		if (StringUtils.hasLength(other.getScope())) {_			setScope(other.getScope())__		}_		setAbstract(other.isAbstract())__		setLazyInit(other.isLazyInit())__		if (StringUtils.hasLength(other.getFactoryBeanName())) {_			setFactoryBeanName(other.getFactoryBeanName())__		}_		if (StringUtils.hasLength(other.getFactoryMethodName())) {_			setFactoryMethodName(other.getFactoryMethodName())__		}_		setRole(other.getRole())__		setSource(other.getSource())__		copyAttributesFrom(other)___		if (other instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition otherAbd = (AbstractBeanDefinition) other__			if (otherAbd.hasBeanClass()) {_				setBeanClass(otherAbd.getBeanClass())__			}_			if (otherAbd.hasConstructorArgumentValues()) {_				getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues())__			}_			if (otherAbd.hasPropertyValues()) {_				getPropertyValues().addPropertyValues(other.getPropertyValues())__			}_			if (otherAbd.hasMethodOverrides()) {_				getMethodOverrides().addOverrides(otherAbd.getMethodOverrides())__			}_			setAutowireMode(otherAbd.getAutowireMode())__			setDependencyCheck(otherAbd.getDependencyCheck())__			setDependsOn(otherAbd.getDependsOn())__			setAutowireCandidate(otherAbd.isAutowireCandidate())__			setPrimary(otherAbd.isPrimary())__			copyQualifiersFrom(otherAbd)__			setInstanceSupplier(otherAbd.getInstanceSupplier())__			setNonPublicAccessAllowed(otherAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(otherAbd.isLenientConstructorResolution())__			if (otherAbd.getInitMethodName() != null) {_				setInitMethodName(otherAbd.getInitMethodName())__				setEnforceInitMethod(otherAbd.isEnforceInitMethod())__			}_			if (otherAbd.getDestroyMethodName() != null) {_				setDestroyMethodName(otherAbd.getDestroyMethodName())__				setEnforceDestroyMethod(otherAbd.isEnforceDestroyMethod())__			}_			setSynthetic(otherAbd.isSynthetic())__			setResource(otherAbd.getResource())__		}_		else {_			getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues())__			getPropertyValues().addPropertyValues(other.getPropertyValues())__			setResourceDescription(other.getResourceDescription())__		}_	};override,settings,in,this,bean,definition,presumably,a,copied,parent,from,a,parent,child,inheritance,relationship,from,the,given,bean,definition,presumably,the,child,ul,li,will,override,bean,class,if,specified,in,the,given,bean,definition,li,will,always,take,code,abstract,code,scope,code,lazy,init,code,autowire,mode,code,dependency,check,and,code,depends,on,from,the,given,bean,definition,li,will,add,code,constructor,argument,values,code,property,values,code,method,overrides,from,the,given,bean,definition,to,existing,ones,li,will,override,code,factory,bean,name,code,factory,method,name,code,init,method,name,and,code,destroy,method,name,if,specified,in,the,given,bean,definition,ul;public,void,override,from,bean,definition,other,if,string,utils,has,length,other,get,bean,class,name,set,bean,class,name,other,get,bean,class,name,if,string,utils,has,length,other,get,scope,set,scope,other,get,scope,set,abstract,other,is,abstract,set,lazy,init,other,is,lazy,init,if,string,utils,has,length,other,get,factory,bean,name,set,factory,bean,name,other,get,factory,bean,name,if,string,utils,has,length,other,get,factory,method,name,set,factory,method,name,other,get,factory,method,name,set,role,other,get,role,set,source,other,get,source,copy,attributes,from,other,if,other,instanceof,abstract,bean,definition,abstract,bean,definition,other,abd,abstract,bean,definition,other,if,other,abd,has,bean,class,set,bean,class,other,abd,get,bean,class,if,other,abd,has,constructor,argument,values,get,constructor,argument,values,add,argument,values,other,get,constructor,argument,values,if,other,abd,has,property,values,get,property,values,add,property,values,other,get,property,values,if,other,abd,has,method,overrides,get,method,overrides,add,overrides,other,abd,get,method,overrides,set,autowire,mode,other,abd,get,autowire,mode,set,dependency,check,other,abd,get,dependency,check,set,depends,on,other,abd,get,depends,on,set,autowire,candidate,other,abd,is,autowire,candidate,set,primary,other,abd,is,primary,copy,qualifiers,from,other,abd,set,instance,supplier,other,abd,get,instance,supplier,set,non,public,access,allowed,other,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,other,abd,is,lenient,constructor,resolution,if,other,abd,get,init,method,name,null,set,init,method,name,other,abd,get,init,method,name,set,enforce,init,method,other,abd,is,enforce,init,method,if,other,abd,get,destroy,method,name,null,set,destroy,method,name,other,abd,get,destroy,method,name,set,enforce,destroy,method,other,abd,is,enforce,destroy,method,set,synthetic,other,abd,is,synthetic,set,resource,other,abd,get,resource,else,get,constructor,argument,values,add,argument,values,other,get,constructor,argument,values,get,property,values,add,property,values,other,get,property,values,set,resource,description,other,get,resource,description
AbstractBeanDefinition -> public void overrideFrom(BeanDefinition other);1510675876;Override settings in this bean definition (presumably a copied parent_from a parent-child inheritance relationship) from the given bean_definition (presumably the child)._<ul>_<li>Will override beanClass if specified in the given bean definition._<li>Will always take {@code abstract}, {@code scope},_{@code lazyInit}, {@code autowireMode}, {@code dependencyCheck},_and {@code dependsOn} from the given bean definition._<li>Will add {@code constructorArgumentValues}, {@code propertyValues},_{@code methodOverrides} from the given bean definition to existing ones._<li>Will override {@code factoryBeanName}, {@code factoryMethodName},_{@code initMethodName}, and {@code destroyMethodName} if specified_in the given bean definition._</ul>;public void overrideFrom(BeanDefinition other) {_		if (StringUtils.hasLength(other.getBeanClassName())) {_			setBeanClassName(other.getBeanClassName())__		}_		if (StringUtils.hasLength(other.getScope())) {_			setScope(other.getScope())__		}_		setAbstract(other.isAbstract())__		setLazyInit(other.isLazyInit())__		if (StringUtils.hasLength(other.getFactoryBeanName())) {_			setFactoryBeanName(other.getFactoryBeanName())__		}_		if (StringUtils.hasLength(other.getFactoryMethodName())) {_			setFactoryMethodName(other.getFactoryMethodName())__		}_		setRole(other.getRole())__		setSource(other.getSource())__		copyAttributesFrom(other)___		if (other instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition otherAbd = (AbstractBeanDefinition) other__			if (otherAbd.hasBeanClass()) {_				setBeanClass(otherAbd.getBeanClass())__			}_			if (otherAbd.hasConstructorArgumentValues()) {_				getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues())__			}_			if (otherAbd.hasPropertyValues()) {_				getPropertyValues().addPropertyValues(other.getPropertyValues())__			}_			if (otherAbd.hasMethodOverrides()) {_				getMethodOverrides().addOverrides(otherAbd.getMethodOverrides())__			}_			setAutowireMode(otherAbd.getAutowireMode())__			setDependencyCheck(otherAbd.getDependencyCheck())__			setDependsOn(otherAbd.getDependsOn())__			setAutowireCandidate(otherAbd.isAutowireCandidate())__			setPrimary(otherAbd.isPrimary())__			copyQualifiersFrom(otherAbd)__			setInstanceSupplier(otherAbd.getInstanceSupplier())__			setNonPublicAccessAllowed(otherAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(otherAbd.isLenientConstructorResolution())__			if (otherAbd.getInitMethodName() != null) {_				setInitMethodName(otherAbd.getInitMethodName())__				setEnforceInitMethod(otherAbd.isEnforceInitMethod())__			}_			if (otherAbd.getDestroyMethodName() != null) {_				setDestroyMethodName(otherAbd.getDestroyMethodName())__				setEnforceDestroyMethod(otherAbd.isEnforceDestroyMethod())__			}_			setSynthetic(otherAbd.isSynthetic())__			setResource(otherAbd.getResource())__		}_		else {_			getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues())__			getPropertyValues().addPropertyValues(other.getPropertyValues())__			setResourceDescription(other.getResourceDescription())__		}_	};override,settings,in,this,bean,definition,presumably,a,copied,parent,from,a,parent,child,inheritance,relationship,from,the,given,bean,definition,presumably,the,child,ul,li,will,override,bean,class,if,specified,in,the,given,bean,definition,li,will,always,take,code,abstract,code,scope,code,lazy,init,code,autowire,mode,code,dependency,check,and,code,depends,on,from,the,given,bean,definition,li,will,add,code,constructor,argument,values,code,property,values,code,method,overrides,from,the,given,bean,definition,to,existing,ones,li,will,override,code,factory,bean,name,code,factory,method,name,code,init,method,name,and,code,destroy,method,name,if,specified,in,the,given,bean,definition,ul;public,void,override,from,bean,definition,other,if,string,utils,has,length,other,get,bean,class,name,set,bean,class,name,other,get,bean,class,name,if,string,utils,has,length,other,get,scope,set,scope,other,get,scope,set,abstract,other,is,abstract,set,lazy,init,other,is,lazy,init,if,string,utils,has,length,other,get,factory,bean,name,set,factory,bean,name,other,get,factory,bean,name,if,string,utils,has,length,other,get,factory,method,name,set,factory,method,name,other,get,factory,method,name,set,role,other,get,role,set,source,other,get,source,copy,attributes,from,other,if,other,instanceof,abstract,bean,definition,abstract,bean,definition,other,abd,abstract,bean,definition,other,if,other,abd,has,bean,class,set,bean,class,other,abd,get,bean,class,if,other,abd,has,constructor,argument,values,get,constructor,argument,values,add,argument,values,other,get,constructor,argument,values,if,other,abd,has,property,values,get,property,values,add,property,values,other,get,property,values,if,other,abd,has,method,overrides,get,method,overrides,add,overrides,other,abd,get,method,overrides,set,autowire,mode,other,abd,get,autowire,mode,set,dependency,check,other,abd,get,dependency,check,set,depends,on,other,abd,get,depends,on,set,autowire,candidate,other,abd,is,autowire,candidate,set,primary,other,abd,is,primary,copy,qualifiers,from,other,abd,set,instance,supplier,other,abd,get,instance,supplier,set,non,public,access,allowed,other,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,other,abd,is,lenient,constructor,resolution,if,other,abd,get,init,method,name,null,set,init,method,name,other,abd,get,init,method,name,set,enforce,init,method,other,abd,is,enforce,init,method,if,other,abd,get,destroy,method,name,null,set,destroy,method,name,other,abd,get,destroy,method,name,set,enforce,destroy,method,other,abd,is,enforce,destroy,method,set,synthetic,other,abd,is,synthetic,set,resource,other,abd,get,resource,else,get,constructor,argument,values,add,argument,values,other,get,constructor,argument,values,get,property,values,add,property,values,other,get,property,values,set,resource,description,other,get,resource,description
AbstractBeanDefinition -> public void overrideFrom(BeanDefinition other);1530174524;Override settings in this bean definition (presumably a copied parent_from a parent-child inheritance relationship) from the given bean_definition (presumably the child)._<ul>_<li>Will override beanClass if specified in the given bean definition._<li>Will always take {@code abstract}, {@code scope},_{@code lazyInit}, {@code autowireMode}, {@code dependencyCheck},_and {@code dependsOn} from the given bean definition._<li>Will add {@code constructorArgumentValues}, {@code propertyValues},_{@code methodOverrides} from the given bean definition to existing ones._<li>Will override {@code factoryBeanName}, {@code factoryMethodName},_{@code initMethodName}, and {@code destroyMethodName} if specified_in the given bean definition._</ul>;public void overrideFrom(BeanDefinition other) {_		if (StringUtils.hasLength(other.getBeanClassName())) {_			setBeanClassName(other.getBeanClassName())__		}_		if (StringUtils.hasLength(other.getScope())) {_			setScope(other.getScope())__		}_		setAbstract(other.isAbstract())__		setLazyInit(other.isLazyInit())__		if (StringUtils.hasLength(other.getFactoryBeanName())) {_			setFactoryBeanName(other.getFactoryBeanName())__		}_		if (StringUtils.hasLength(other.getFactoryMethodName())) {_			setFactoryMethodName(other.getFactoryMethodName())__		}_		setRole(other.getRole())__		setSource(other.getSource())__		copyAttributesFrom(other)___		if (other instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition otherAbd = (AbstractBeanDefinition) other__			if (otherAbd.hasBeanClass()) {_				setBeanClass(otherAbd.getBeanClass())__			}_			if (otherAbd.hasConstructorArgumentValues()) {_				getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues())__			}_			if (otherAbd.hasPropertyValues()) {_				getPropertyValues().addPropertyValues(other.getPropertyValues())__			}_			if (otherAbd.hasMethodOverrides()) {_				getMethodOverrides().addOverrides(otherAbd.getMethodOverrides())__			}_			setAutowireMode(otherAbd.getAutowireMode())__			setDependencyCheck(otherAbd.getDependencyCheck())__			setDependsOn(otherAbd.getDependsOn())__			setAutowireCandidate(otherAbd.isAutowireCandidate())__			setPrimary(otherAbd.isPrimary())__			copyQualifiersFrom(otherAbd)__			setInstanceSupplier(otherAbd.getInstanceSupplier())__			setNonPublicAccessAllowed(otherAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(otherAbd.isLenientConstructorResolution())__			if (otherAbd.getInitMethodName() != null) {_				setInitMethodName(otherAbd.getInitMethodName())__				setEnforceInitMethod(otherAbd.isEnforceInitMethod())__			}_			if (otherAbd.getDestroyMethodName() != null) {_				setDestroyMethodName(otherAbd.getDestroyMethodName())__				setEnforceDestroyMethod(otherAbd.isEnforceDestroyMethod())__			}_			setSynthetic(otherAbd.isSynthetic())__			setResource(otherAbd.getResource())__		}_		else {_			getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues())__			getPropertyValues().addPropertyValues(other.getPropertyValues())__			setResourceDescription(other.getResourceDescription())__		}_	};override,settings,in,this,bean,definition,presumably,a,copied,parent,from,a,parent,child,inheritance,relationship,from,the,given,bean,definition,presumably,the,child,ul,li,will,override,bean,class,if,specified,in,the,given,bean,definition,li,will,always,take,code,abstract,code,scope,code,lazy,init,code,autowire,mode,code,dependency,check,and,code,depends,on,from,the,given,bean,definition,li,will,add,code,constructor,argument,values,code,property,values,code,method,overrides,from,the,given,bean,definition,to,existing,ones,li,will,override,code,factory,bean,name,code,factory,method,name,code,init,method,name,and,code,destroy,method,name,if,specified,in,the,given,bean,definition,ul;public,void,override,from,bean,definition,other,if,string,utils,has,length,other,get,bean,class,name,set,bean,class,name,other,get,bean,class,name,if,string,utils,has,length,other,get,scope,set,scope,other,get,scope,set,abstract,other,is,abstract,set,lazy,init,other,is,lazy,init,if,string,utils,has,length,other,get,factory,bean,name,set,factory,bean,name,other,get,factory,bean,name,if,string,utils,has,length,other,get,factory,method,name,set,factory,method,name,other,get,factory,method,name,set,role,other,get,role,set,source,other,get,source,copy,attributes,from,other,if,other,instanceof,abstract,bean,definition,abstract,bean,definition,other,abd,abstract,bean,definition,other,if,other,abd,has,bean,class,set,bean,class,other,abd,get,bean,class,if,other,abd,has,constructor,argument,values,get,constructor,argument,values,add,argument,values,other,get,constructor,argument,values,if,other,abd,has,property,values,get,property,values,add,property,values,other,get,property,values,if,other,abd,has,method,overrides,get,method,overrides,add,overrides,other,abd,get,method,overrides,set,autowire,mode,other,abd,get,autowire,mode,set,dependency,check,other,abd,get,dependency,check,set,depends,on,other,abd,get,depends,on,set,autowire,candidate,other,abd,is,autowire,candidate,set,primary,other,abd,is,primary,copy,qualifiers,from,other,abd,set,instance,supplier,other,abd,get,instance,supplier,set,non,public,access,allowed,other,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,other,abd,is,lenient,constructor,resolution,if,other,abd,get,init,method,name,null,set,init,method,name,other,abd,get,init,method,name,set,enforce,init,method,other,abd,is,enforce,init,method,if,other,abd,get,destroy,method,name,null,set,destroy,method,name,other,abd,get,destroy,method,name,set,enforce,destroy,method,other,abd,is,enforce,destroy,method,set,synthetic,other,abd,is,synthetic,set,resource,other,abd,get,resource,else,get,constructor,argument,values,add,argument,values,other,get,constructor,argument,values,get,property,values,add,property,values,other,get,property,values,set,resource,description,other,get,resource,description
AbstractBeanDefinition -> public void overrideFrom(BeanDefinition other);1530174524;Override settings in this bean definition (presumably a copied parent_from a parent-child inheritance relationship) from the given bean_definition (presumably the child)._<ul>_<li>Will override beanClass if specified in the given bean definition._<li>Will always take {@code abstract}, {@code scope},_{@code lazyInit}, {@code autowireMode}, {@code dependencyCheck},_and {@code dependsOn} from the given bean definition._<li>Will add {@code constructorArgumentValues}, {@code propertyValues},_{@code methodOverrides} from the given bean definition to existing ones._<li>Will override {@code factoryBeanName}, {@code factoryMethodName},_{@code initMethodName}, and {@code destroyMethodName} if specified_in the given bean definition._</ul>;public void overrideFrom(BeanDefinition other) {_		if (StringUtils.hasLength(other.getBeanClassName())) {_			setBeanClassName(other.getBeanClassName())__		}_		if (StringUtils.hasLength(other.getScope())) {_			setScope(other.getScope())__		}_		setAbstract(other.isAbstract())__		setLazyInit(other.isLazyInit())__		if (StringUtils.hasLength(other.getFactoryBeanName())) {_			setFactoryBeanName(other.getFactoryBeanName())__		}_		if (StringUtils.hasLength(other.getFactoryMethodName())) {_			setFactoryMethodName(other.getFactoryMethodName())__		}_		setRole(other.getRole())__		setSource(other.getSource())__		copyAttributesFrom(other)___		if (other instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition otherAbd = (AbstractBeanDefinition) other__			if (otherAbd.hasBeanClass()) {_				setBeanClass(otherAbd.getBeanClass())__			}_			if (otherAbd.hasConstructorArgumentValues()) {_				getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues())__			}_			if (otherAbd.hasPropertyValues()) {_				getPropertyValues().addPropertyValues(other.getPropertyValues())__			}_			if (otherAbd.hasMethodOverrides()) {_				getMethodOverrides().addOverrides(otherAbd.getMethodOverrides())__			}_			setAutowireMode(otherAbd.getAutowireMode())__			setDependencyCheck(otherAbd.getDependencyCheck())__			setDependsOn(otherAbd.getDependsOn())__			setAutowireCandidate(otherAbd.isAutowireCandidate())__			setPrimary(otherAbd.isPrimary())__			copyQualifiersFrom(otherAbd)__			setInstanceSupplier(otherAbd.getInstanceSupplier())__			setNonPublicAccessAllowed(otherAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(otherAbd.isLenientConstructorResolution())__			if (otherAbd.getInitMethodName() != null) {_				setInitMethodName(otherAbd.getInitMethodName())__				setEnforceInitMethod(otherAbd.isEnforceInitMethod())__			}_			if (otherAbd.getDestroyMethodName() != null) {_				setDestroyMethodName(otherAbd.getDestroyMethodName())__				setEnforceDestroyMethod(otherAbd.isEnforceDestroyMethod())__			}_			setSynthetic(otherAbd.isSynthetic())__			setResource(otherAbd.getResource())__		}_		else {_			getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues())__			getPropertyValues().addPropertyValues(other.getPropertyValues())__			setResourceDescription(other.getResourceDescription())__		}_	};override,settings,in,this,bean,definition,presumably,a,copied,parent,from,a,parent,child,inheritance,relationship,from,the,given,bean,definition,presumably,the,child,ul,li,will,override,bean,class,if,specified,in,the,given,bean,definition,li,will,always,take,code,abstract,code,scope,code,lazy,init,code,autowire,mode,code,dependency,check,and,code,depends,on,from,the,given,bean,definition,li,will,add,code,constructor,argument,values,code,property,values,code,method,overrides,from,the,given,bean,definition,to,existing,ones,li,will,override,code,factory,bean,name,code,factory,method,name,code,init,method,name,and,code,destroy,method,name,if,specified,in,the,given,bean,definition,ul;public,void,override,from,bean,definition,other,if,string,utils,has,length,other,get,bean,class,name,set,bean,class,name,other,get,bean,class,name,if,string,utils,has,length,other,get,scope,set,scope,other,get,scope,set,abstract,other,is,abstract,set,lazy,init,other,is,lazy,init,if,string,utils,has,length,other,get,factory,bean,name,set,factory,bean,name,other,get,factory,bean,name,if,string,utils,has,length,other,get,factory,method,name,set,factory,method,name,other,get,factory,method,name,set,role,other,get,role,set,source,other,get,source,copy,attributes,from,other,if,other,instanceof,abstract,bean,definition,abstract,bean,definition,other,abd,abstract,bean,definition,other,if,other,abd,has,bean,class,set,bean,class,other,abd,get,bean,class,if,other,abd,has,constructor,argument,values,get,constructor,argument,values,add,argument,values,other,get,constructor,argument,values,if,other,abd,has,property,values,get,property,values,add,property,values,other,get,property,values,if,other,abd,has,method,overrides,get,method,overrides,add,overrides,other,abd,get,method,overrides,set,autowire,mode,other,abd,get,autowire,mode,set,dependency,check,other,abd,get,dependency,check,set,depends,on,other,abd,get,depends,on,set,autowire,candidate,other,abd,is,autowire,candidate,set,primary,other,abd,is,primary,copy,qualifiers,from,other,abd,set,instance,supplier,other,abd,get,instance,supplier,set,non,public,access,allowed,other,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,other,abd,is,lenient,constructor,resolution,if,other,abd,get,init,method,name,null,set,init,method,name,other,abd,get,init,method,name,set,enforce,init,method,other,abd,is,enforce,init,method,if,other,abd,get,destroy,method,name,null,set,destroy,method,name,other,abd,get,destroy,method,name,set,enforce,destroy,method,other,abd,is,enforce,destroy,method,set,synthetic,other,abd,is,synthetic,set,resource,other,abd,get,resource,else,get,constructor,argument,values,add,argument,values,other,get,constructor,argument,values,get,property,values,add,property,values,other,get,property,values,set,resource,description,other,get,resource,description
AbstractBeanDefinition -> public void overrideFrom(BeanDefinition other);1530174524;Override settings in this bean definition (presumably a copied parent_from a parent-child inheritance relationship) from the given bean_definition (presumably the child)._<ul>_<li>Will override beanClass if specified in the given bean definition._<li>Will always take {@code abstract}, {@code scope},_{@code lazyInit}, {@code autowireMode}, {@code dependencyCheck},_and {@code dependsOn} from the given bean definition._<li>Will add {@code constructorArgumentValues}, {@code propertyValues},_{@code methodOverrides} from the given bean definition to existing ones._<li>Will override {@code factoryBeanName}, {@code factoryMethodName},_{@code initMethodName}, and {@code destroyMethodName} if specified_in the given bean definition._</ul>;public void overrideFrom(BeanDefinition other) {_		if (StringUtils.hasLength(other.getBeanClassName())) {_			setBeanClassName(other.getBeanClassName())__		}_		if (StringUtils.hasLength(other.getScope())) {_			setScope(other.getScope())__		}_		setAbstract(other.isAbstract())__		setLazyInit(other.isLazyInit())__		if (StringUtils.hasLength(other.getFactoryBeanName())) {_			setFactoryBeanName(other.getFactoryBeanName())__		}_		if (StringUtils.hasLength(other.getFactoryMethodName())) {_			setFactoryMethodName(other.getFactoryMethodName())__		}_		setRole(other.getRole())__		setSource(other.getSource())__		copyAttributesFrom(other)___		if (other instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition otherAbd = (AbstractBeanDefinition) other__			if (otherAbd.hasBeanClass()) {_				setBeanClass(otherAbd.getBeanClass())__			}_			if (otherAbd.hasConstructorArgumentValues()) {_				getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues())__			}_			if (otherAbd.hasPropertyValues()) {_				getPropertyValues().addPropertyValues(other.getPropertyValues())__			}_			if (otherAbd.hasMethodOverrides()) {_				getMethodOverrides().addOverrides(otherAbd.getMethodOverrides())__			}_			setAutowireMode(otherAbd.getAutowireMode())__			setDependencyCheck(otherAbd.getDependencyCheck())__			setDependsOn(otherAbd.getDependsOn())__			setAutowireCandidate(otherAbd.isAutowireCandidate())__			setPrimary(otherAbd.isPrimary())__			copyQualifiersFrom(otherAbd)__			setInstanceSupplier(otherAbd.getInstanceSupplier())__			setNonPublicAccessAllowed(otherAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(otherAbd.isLenientConstructorResolution())__			if (otherAbd.getInitMethodName() != null) {_				setInitMethodName(otherAbd.getInitMethodName())__				setEnforceInitMethod(otherAbd.isEnforceInitMethod())__			}_			if (otherAbd.getDestroyMethodName() != null) {_				setDestroyMethodName(otherAbd.getDestroyMethodName())__				setEnforceDestroyMethod(otherAbd.isEnforceDestroyMethod())__			}_			setSynthetic(otherAbd.isSynthetic())__			setResource(otherAbd.getResource())__		}_		else {_			getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues())__			getPropertyValues().addPropertyValues(other.getPropertyValues())__			setResourceDescription(other.getResourceDescription())__		}_	};override,settings,in,this,bean,definition,presumably,a,copied,parent,from,a,parent,child,inheritance,relationship,from,the,given,bean,definition,presumably,the,child,ul,li,will,override,bean,class,if,specified,in,the,given,bean,definition,li,will,always,take,code,abstract,code,scope,code,lazy,init,code,autowire,mode,code,dependency,check,and,code,depends,on,from,the,given,bean,definition,li,will,add,code,constructor,argument,values,code,property,values,code,method,overrides,from,the,given,bean,definition,to,existing,ones,li,will,override,code,factory,bean,name,code,factory,method,name,code,init,method,name,and,code,destroy,method,name,if,specified,in,the,given,bean,definition,ul;public,void,override,from,bean,definition,other,if,string,utils,has,length,other,get,bean,class,name,set,bean,class,name,other,get,bean,class,name,if,string,utils,has,length,other,get,scope,set,scope,other,get,scope,set,abstract,other,is,abstract,set,lazy,init,other,is,lazy,init,if,string,utils,has,length,other,get,factory,bean,name,set,factory,bean,name,other,get,factory,bean,name,if,string,utils,has,length,other,get,factory,method,name,set,factory,method,name,other,get,factory,method,name,set,role,other,get,role,set,source,other,get,source,copy,attributes,from,other,if,other,instanceof,abstract,bean,definition,abstract,bean,definition,other,abd,abstract,bean,definition,other,if,other,abd,has,bean,class,set,bean,class,other,abd,get,bean,class,if,other,abd,has,constructor,argument,values,get,constructor,argument,values,add,argument,values,other,get,constructor,argument,values,if,other,abd,has,property,values,get,property,values,add,property,values,other,get,property,values,if,other,abd,has,method,overrides,get,method,overrides,add,overrides,other,abd,get,method,overrides,set,autowire,mode,other,abd,get,autowire,mode,set,dependency,check,other,abd,get,dependency,check,set,depends,on,other,abd,get,depends,on,set,autowire,candidate,other,abd,is,autowire,candidate,set,primary,other,abd,is,primary,copy,qualifiers,from,other,abd,set,instance,supplier,other,abd,get,instance,supplier,set,non,public,access,allowed,other,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,other,abd,is,lenient,constructor,resolution,if,other,abd,get,init,method,name,null,set,init,method,name,other,abd,get,init,method,name,set,enforce,init,method,other,abd,is,enforce,init,method,if,other,abd,get,destroy,method,name,null,set,destroy,method,name,other,abd,get,destroy,method,name,set,enforce,destroy,method,other,abd,is,enforce,destroy,method,set,synthetic,other,abd,is,synthetic,set,resource,other,abd,get,resource,else,get,constructor,argument,values,add,argument,values,other,get,constructor,argument,values,get,property,values,add,property,values,other,get,property,values,set,resource,description,other,get,resource,description
AbstractBeanDefinition -> public void overrideFrom(BeanDefinition other);1530190293;Override settings in this bean definition (presumably a copied parent_from a parent-child inheritance relationship) from the given bean_definition (presumably the child)._<ul>_<li>Will override beanClass if specified in the given bean definition._<li>Will always take {@code abstract}, {@code scope},_{@code lazyInit}, {@code autowireMode}, {@code dependencyCheck},_and {@code dependsOn} from the given bean definition._<li>Will add {@code constructorArgumentValues}, {@code propertyValues},_{@code methodOverrides} from the given bean definition to existing ones._<li>Will override {@code factoryBeanName}, {@code factoryMethodName},_{@code initMethodName}, and {@code destroyMethodName} if specified_in the given bean definition._</ul>;public void overrideFrom(BeanDefinition other) {_		if (StringUtils.hasLength(other.getBeanClassName())) {_			setBeanClassName(other.getBeanClassName())__		}_		if (StringUtils.hasLength(other.getScope())) {_			setScope(other.getScope())__		}_		setAbstract(other.isAbstract())__		setLazyInit(other.isLazyInit())__		if (StringUtils.hasLength(other.getFactoryBeanName())) {_			setFactoryBeanName(other.getFactoryBeanName())__		}_		if (StringUtils.hasLength(other.getFactoryMethodName())) {_			setFactoryMethodName(other.getFactoryMethodName())__		}_		setRole(other.getRole())__		setSource(other.getSource())__		copyAttributesFrom(other)___		if (other instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition otherAbd = (AbstractBeanDefinition) other__			if (otherAbd.hasBeanClass()) {_				setBeanClass(otherAbd.getBeanClass())__			}_			if (otherAbd.hasConstructorArgumentValues()) {_				getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues())__			}_			if (otherAbd.hasPropertyValues()) {_				getPropertyValues().addPropertyValues(other.getPropertyValues())__			}_			if (otherAbd.hasMethodOverrides()) {_				getMethodOverrides().addOverrides(otherAbd.getMethodOverrides())__			}_			setAutowireMode(otherAbd.getAutowireMode())__			setDependencyCheck(otherAbd.getDependencyCheck())__			setDependsOn(otherAbd.getDependsOn())__			setAutowireCandidate(otherAbd.isAutowireCandidate())__			setPrimary(otherAbd.isPrimary())__			copyQualifiersFrom(otherAbd)__			setInstanceSupplier(otherAbd.getInstanceSupplier())__			setNonPublicAccessAllowed(otherAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(otherAbd.isLenientConstructorResolution())__			if (otherAbd.getInitMethodName() != null) {_				setInitMethodName(otherAbd.getInitMethodName())__				setEnforceInitMethod(otherAbd.isEnforceInitMethod())__			}_			if (otherAbd.getDestroyMethodName() != null) {_				setDestroyMethodName(otherAbd.getDestroyMethodName())__				setEnforceDestroyMethod(otherAbd.isEnforceDestroyMethod())__			}_			setSynthetic(otherAbd.isSynthetic())__			setResource(otherAbd.getResource())__		}_		else {_			getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues())__			getPropertyValues().addPropertyValues(other.getPropertyValues())__			setResourceDescription(other.getResourceDescription())__		}_	};override,settings,in,this,bean,definition,presumably,a,copied,parent,from,a,parent,child,inheritance,relationship,from,the,given,bean,definition,presumably,the,child,ul,li,will,override,bean,class,if,specified,in,the,given,bean,definition,li,will,always,take,code,abstract,code,scope,code,lazy,init,code,autowire,mode,code,dependency,check,and,code,depends,on,from,the,given,bean,definition,li,will,add,code,constructor,argument,values,code,property,values,code,method,overrides,from,the,given,bean,definition,to,existing,ones,li,will,override,code,factory,bean,name,code,factory,method,name,code,init,method,name,and,code,destroy,method,name,if,specified,in,the,given,bean,definition,ul;public,void,override,from,bean,definition,other,if,string,utils,has,length,other,get,bean,class,name,set,bean,class,name,other,get,bean,class,name,if,string,utils,has,length,other,get,scope,set,scope,other,get,scope,set,abstract,other,is,abstract,set,lazy,init,other,is,lazy,init,if,string,utils,has,length,other,get,factory,bean,name,set,factory,bean,name,other,get,factory,bean,name,if,string,utils,has,length,other,get,factory,method,name,set,factory,method,name,other,get,factory,method,name,set,role,other,get,role,set,source,other,get,source,copy,attributes,from,other,if,other,instanceof,abstract,bean,definition,abstract,bean,definition,other,abd,abstract,bean,definition,other,if,other,abd,has,bean,class,set,bean,class,other,abd,get,bean,class,if,other,abd,has,constructor,argument,values,get,constructor,argument,values,add,argument,values,other,get,constructor,argument,values,if,other,abd,has,property,values,get,property,values,add,property,values,other,get,property,values,if,other,abd,has,method,overrides,get,method,overrides,add,overrides,other,abd,get,method,overrides,set,autowire,mode,other,abd,get,autowire,mode,set,dependency,check,other,abd,get,dependency,check,set,depends,on,other,abd,get,depends,on,set,autowire,candidate,other,abd,is,autowire,candidate,set,primary,other,abd,is,primary,copy,qualifiers,from,other,abd,set,instance,supplier,other,abd,get,instance,supplier,set,non,public,access,allowed,other,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,other,abd,is,lenient,constructor,resolution,if,other,abd,get,init,method,name,null,set,init,method,name,other,abd,get,init,method,name,set,enforce,init,method,other,abd,is,enforce,init,method,if,other,abd,get,destroy,method,name,null,set,destroy,method,name,other,abd,get,destroy,method,name,set,enforce,destroy,method,other,abd,is,enforce,destroy,method,set,synthetic,other,abd,is,synthetic,set,resource,other,abd,get,resource,else,get,constructor,argument,values,add,argument,values,other,get,constructor,argument,values,get,property,values,add,property,values,other,get,property,values,set,resource,description,other,get,resource,description
AbstractBeanDefinition -> public void overrideFrom(BeanDefinition other);1532981251;Override settings in this bean definition (presumably a copied parent_from a parent-child inheritance relationship) from the given bean_definition (presumably the child)._<ul>_<li>Will override beanClass if specified in the given bean definition._<li>Will always take {@code abstract}, {@code scope},_{@code lazyInit}, {@code autowireMode}, {@code dependencyCheck},_and {@code dependsOn} from the given bean definition._<li>Will add {@code constructorArgumentValues}, {@code propertyValues},_{@code methodOverrides} from the given bean definition to existing ones._<li>Will override {@code factoryBeanName}, {@code factoryMethodName},_{@code initMethodName}, and {@code destroyMethodName} if specified_in the given bean definition._</ul>;public void overrideFrom(BeanDefinition other) {_		if (StringUtils.hasLength(other.getBeanClassName())) {_			setBeanClassName(other.getBeanClassName())__		}_		if (StringUtils.hasLength(other.getScope())) {_			setScope(other.getScope())__		}_		setAbstract(other.isAbstract())__		setLazyInit(other.isLazyInit())__		if (StringUtils.hasLength(other.getFactoryBeanName())) {_			setFactoryBeanName(other.getFactoryBeanName())__		}_		if (StringUtils.hasLength(other.getFactoryMethodName())) {_			setFactoryMethodName(other.getFactoryMethodName())__		}_		setRole(other.getRole())__		setSource(other.getSource())__		copyAttributesFrom(other)___		if (other instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition otherAbd = (AbstractBeanDefinition) other__			if (otherAbd.hasBeanClass()) {_				setBeanClass(otherAbd.getBeanClass())__			}_			if (otherAbd.hasConstructorArgumentValues()) {_				getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues())__			}_			if (otherAbd.hasPropertyValues()) {_				getPropertyValues().addPropertyValues(other.getPropertyValues())__			}_			if (otherAbd.hasMethodOverrides()) {_				getMethodOverrides().addOverrides(otherAbd.getMethodOverrides())__			}_			setAutowireMode(otherAbd.getAutowireMode())__			setDependencyCheck(otherAbd.getDependencyCheck())__			setDependsOn(otherAbd.getDependsOn())__			setAutowireCandidate(otherAbd.isAutowireCandidate())__			setPrimary(otherAbd.isPrimary())__			copyQualifiersFrom(otherAbd)__			setInstanceSupplier(otherAbd.getInstanceSupplier())__			setNonPublicAccessAllowed(otherAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(otherAbd.isLenientConstructorResolution())__			if (otherAbd.getInitMethodName() != null) {_				setInitMethodName(otherAbd.getInitMethodName())__				setEnforceInitMethod(otherAbd.isEnforceInitMethod())__			}_			if (otherAbd.getDestroyMethodName() != null) {_				setDestroyMethodName(otherAbd.getDestroyMethodName())__				setEnforceDestroyMethod(otherAbd.isEnforceDestroyMethod())__			}_			setSynthetic(otherAbd.isSynthetic())__			setResource(otherAbd.getResource())__		}_		else {_			getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues())__			getPropertyValues().addPropertyValues(other.getPropertyValues())__			setResourceDescription(other.getResourceDescription())__		}_	};override,settings,in,this,bean,definition,presumably,a,copied,parent,from,a,parent,child,inheritance,relationship,from,the,given,bean,definition,presumably,the,child,ul,li,will,override,bean,class,if,specified,in,the,given,bean,definition,li,will,always,take,code,abstract,code,scope,code,lazy,init,code,autowire,mode,code,dependency,check,and,code,depends,on,from,the,given,bean,definition,li,will,add,code,constructor,argument,values,code,property,values,code,method,overrides,from,the,given,bean,definition,to,existing,ones,li,will,override,code,factory,bean,name,code,factory,method,name,code,init,method,name,and,code,destroy,method,name,if,specified,in,the,given,bean,definition,ul;public,void,override,from,bean,definition,other,if,string,utils,has,length,other,get,bean,class,name,set,bean,class,name,other,get,bean,class,name,if,string,utils,has,length,other,get,scope,set,scope,other,get,scope,set,abstract,other,is,abstract,set,lazy,init,other,is,lazy,init,if,string,utils,has,length,other,get,factory,bean,name,set,factory,bean,name,other,get,factory,bean,name,if,string,utils,has,length,other,get,factory,method,name,set,factory,method,name,other,get,factory,method,name,set,role,other,get,role,set,source,other,get,source,copy,attributes,from,other,if,other,instanceof,abstract,bean,definition,abstract,bean,definition,other,abd,abstract,bean,definition,other,if,other,abd,has,bean,class,set,bean,class,other,abd,get,bean,class,if,other,abd,has,constructor,argument,values,get,constructor,argument,values,add,argument,values,other,get,constructor,argument,values,if,other,abd,has,property,values,get,property,values,add,property,values,other,get,property,values,if,other,abd,has,method,overrides,get,method,overrides,add,overrides,other,abd,get,method,overrides,set,autowire,mode,other,abd,get,autowire,mode,set,dependency,check,other,abd,get,dependency,check,set,depends,on,other,abd,get,depends,on,set,autowire,candidate,other,abd,is,autowire,candidate,set,primary,other,abd,is,primary,copy,qualifiers,from,other,abd,set,instance,supplier,other,abd,get,instance,supplier,set,non,public,access,allowed,other,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,other,abd,is,lenient,constructor,resolution,if,other,abd,get,init,method,name,null,set,init,method,name,other,abd,get,init,method,name,set,enforce,init,method,other,abd,is,enforce,init,method,if,other,abd,get,destroy,method,name,null,set,destroy,method,name,other,abd,get,destroy,method,name,set,enforce,destroy,method,other,abd,is,enforce,destroy,method,set,synthetic,other,abd,is,synthetic,set,resource,other,abd,get,resource,else,get,constructor,argument,values,add,argument,values,other,get,constructor,argument,values,get,property,values,add,property,values,other,get,property,values,set,resource,description,other,get,resource,description
AbstractBeanDefinition -> public void overrideFrom(BeanDefinition other);1536863076;Override settings in this bean definition (presumably a copied parent_from a parent-child inheritance relationship) from the given bean_definition (presumably the child)._<ul>_<li>Will override beanClass if specified in the given bean definition._<li>Will always take {@code abstract}, {@code scope},_{@code lazyInit}, {@code autowireMode}, {@code dependencyCheck},_and {@code dependsOn} from the given bean definition._<li>Will add {@code constructorArgumentValues}, {@code propertyValues},_{@code methodOverrides} from the given bean definition to existing ones._<li>Will override {@code factoryBeanName}, {@code factoryMethodName},_{@code initMethodName}, and {@code destroyMethodName} if specified_in the given bean definition._</ul>;public void overrideFrom(BeanDefinition other) {_		if (StringUtils.hasLength(other.getBeanClassName())) {_			setBeanClassName(other.getBeanClassName())__		}_		if (StringUtils.hasLength(other.getScope())) {_			setScope(other.getScope())__		}_		setAbstract(other.isAbstract())__		setLazyInit(other.isLazyInit())__		if (StringUtils.hasLength(other.getFactoryBeanName())) {_			setFactoryBeanName(other.getFactoryBeanName())__		}_		if (StringUtils.hasLength(other.getFactoryMethodName())) {_			setFactoryMethodName(other.getFactoryMethodName())__		}_		setRole(other.getRole())__		setSource(other.getSource())__		copyAttributesFrom(other)___		if (other instanceof AbstractBeanDefinition) {_			AbstractBeanDefinition otherAbd = (AbstractBeanDefinition) other__			if (otherAbd.hasBeanClass()) {_				setBeanClass(otherAbd.getBeanClass())__			}_			if (otherAbd.hasConstructorArgumentValues()) {_				getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues())__			}_			if (otherAbd.hasPropertyValues()) {_				getPropertyValues().addPropertyValues(other.getPropertyValues())__			}_			if (otherAbd.hasMethodOverrides()) {_				getMethodOverrides().addOverrides(otherAbd.getMethodOverrides())__			}_			setAutowireMode(otherAbd.getAutowireMode())__			setDependencyCheck(otherAbd.getDependencyCheck())__			setDependsOn(otherAbd.getDependsOn())__			setAutowireCandidate(otherAbd.isAutowireCandidate())__			setPrimary(otherAbd.isPrimary())__			copyQualifiersFrom(otherAbd)__			setInstanceSupplier(otherAbd.getInstanceSupplier())__			setNonPublicAccessAllowed(otherAbd.isNonPublicAccessAllowed())__			setLenientConstructorResolution(otherAbd.isLenientConstructorResolution())__			if (otherAbd.getInitMethodName() != null) {_				setInitMethodName(otherAbd.getInitMethodName())__				setEnforceInitMethod(otherAbd.isEnforceInitMethod())__			}_			if (otherAbd.getDestroyMethodName() != null) {_				setDestroyMethodName(otherAbd.getDestroyMethodName())__				setEnforceDestroyMethod(otherAbd.isEnforceDestroyMethod())__			}_			setSynthetic(otherAbd.isSynthetic())__			setResource(otherAbd.getResource())__		}_		else {_			getConstructorArgumentValues().addArgumentValues(other.getConstructorArgumentValues())__			getPropertyValues().addPropertyValues(other.getPropertyValues())__			setResourceDescription(other.getResourceDescription())__		}_	};override,settings,in,this,bean,definition,presumably,a,copied,parent,from,a,parent,child,inheritance,relationship,from,the,given,bean,definition,presumably,the,child,ul,li,will,override,bean,class,if,specified,in,the,given,bean,definition,li,will,always,take,code,abstract,code,scope,code,lazy,init,code,autowire,mode,code,dependency,check,and,code,depends,on,from,the,given,bean,definition,li,will,add,code,constructor,argument,values,code,property,values,code,method,overrides,from,the,given,bean,definition,to,existing,ones,li,will,override,code,factory,bean,name,code,factory,method,name,code,init,method,name,and,code,destroy,method,name,if,specified,in,the,given,bean,definition,ul;public,void,override,from,bean,definition,other,if,string,utils,has,length,other,get,bean,class,name,set,bean,class,name,other,get,bean,class,name,if,string,utils,has,length,other,get,scope,set,scope,other,get,scope,set,abstract,other,is,abstract,set,lazy,init,other,is,lazy,init,if,string,utils,has,length,other,get,factory,bean,name,set,factory,bean,name,other,get,factory,bean,name,if,string,utils,has,length,other,get,factory,method,name,set,factory,method,name,other,get,factory,method,name,set,role,other,get,role,set,source,other,get,source,copy,attributes,from,other,if,other,instanceof,abstract,bean,definition,abstract,bean,definition,other,abd,abstract,bean,definition,other,if,other,abd,has,bean,class,set,bean,class,other,abd,get,bean,class,if,other,abd,has,constructor,argument,values,get,constructor,argument,values,add,argument,values,other,get,constructor,argument,values,if,other,abd,has,property,values,get,property,values,add,property,values,other,get,property,values,if,other,abd,has,method,overrides,get,method,overrides,add,overrides,other,abd,get,method,overrides,set,autowire,mode,other,abd,get,autowire,mode,set,dependency,check,other,abd,get,dependency,check,set,depends,on,other,abd,get,depends,on,set,autowire,candidate,other,abd,is,autowire,candidate,set,primary,other,abd,is,primary,copy,qualifiers,from,other,abd,set,instance,supplier,other,abd,get,instance,supplier,set,non,public,access,allowed,other,abd,is,non,public,access,allowed,set,lenient,constructor,resolution,other,abd,is,lenient,constructor,resolution,if,other,abd,get,init,method,name,null,set,init,method,name,other,abd,get,init,method,name,set,enforce,init,method,other,abd,is,enforce,init,method,if,other,abd,get,destroy,method,name,null,set,destroy,method,name,other,abd,get,destroy,method,name,set,enforce,destroy,method,other,abd,is,enforce,destroy,method,set,synthetic,other,abd,is,synthetic,set,resource,other,abd,get,resource,else,get,constructor,argument,values,add,argument,values,other,get,constructor,argument,values,get,property,values,add,property,values,other,get,property,values,set,resource,description,other,get,resource,description
AbstractBeanDefinition -> @Override 	public boolean isLazyInit();1356735495;Return whether this bean should be lazily initialized, i.e. not_eagerly instantiated on startup. Only applicable to a singleton bean.;@Override_	public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,this,bean,should,be,lazily,initialized,i,e,not,eagerly,instantiated,on,startup,only,applicable,to,a,singleton,bean;override,public,boolean,is,lazy,init,return,this,lazy,init
AbstractBeanDefinition -> @Override 	public boolean isLazyInit();1368482696;Return whether this bean should be lazily initialized, i.e. not_eagerly instantiated on startup. Only applicable to a singleton bean.;@Override_	public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,this,bean,should,be,lazily,initialized,i,e,not,eagerly,instantiated,on,startup,only,applicable,to,a,singleton,bean;override,public,boolean,is,lazy,init,return,this,lazy,init
AbstractBeanDefinition -> @Override 	public boolean isLazyInit();1385412762;Return whether this bean should be lazily initialized, i.e. not_eagerly instantiated on startup. Only applicable to a singleton bean.;@Override_	public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,this,bean,should,be,lazily,initialized,i,e,not,eagerly,instantiated,on,startup,only,applicable,to,a,singleton,bean;override,public,boolean,is,lazy,init,return,this,lazy,init
AbstractBeanDefinition -> @Override 	public boolean isLazyInit();1392245317;Return whether this bean should be lazily initialized, i.e. not_eagerly instantiated on startup. Only applicable to a singleton bean.;@Override_	public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,this,bean,should,be,lazily,initialized,i,e,not,eagerly,instantiated,on,startup,only,applicable,to,a,singleton,bean;override,public,boolean,is,lazy,init,return,this,lazy,init
AbstractBeanDefinition -> @Override 	public boolean isLazyInit();1397163142;Return whether this bean should be lazily initialized, i.e. not_eagerly instantiated on startup. Only applicable to a singleton bean.;@Override_	public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,this,bean,should,be,lazily,initialized,i,e,not,eagerly,instantiated,on,startup,only,applicable,to,a,singleton,bean;override,public,boolean,is,lazy,init,return,this,lazy,init
AbstractBeanDefinition -> @Override 	public boolean isLazyInit();1398898390;Return whether this bean should be lazily initialized, i.e. not_eagerly instantiated on startup. Only applicable to a singleton bean.;@Override_	public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,this,bean,should,be,lazily,initialized,i,e,not,eagerly,instantiated,on,startup,only,applicable,to,a,singleton,bean;override,public,boolean,is,lazy,init,return,this,lazy,init
AbstractBeanDefinition -> @Override 	public boolean isLazyInit();1407511029;Return whether this bean should be lazily initialized, i.e. not_eagerly instantiated on startup. Only applicable to a singleton bean.;@Override_	public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,this,bean,should,be,lazily,initialized,i,e,not,eagerly,instantiated,on,startup,only,applicable,to,a,singleton,bean;override,public,boolean,is,lazy,init,return,this,lazy,init
AbstractBeanDefinition -> @Override 	public boolean isLazyInit();1432135182;Return whether this bean should be lazily initialized, i.e. not_eagerly instantiated on startup. Only applicable to a singleton bean.;@Override_	public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,this,bean,should,be,lazily,initialized,i,e,not,eagerly,instantiated,on,startup,only,applicable,to,a,singleton,bean;override,public,boolean,is,lazy,init,return,this,lazy,init
AbstractBeanDefinition -> @Override 	public boolean isLazyInit();1434204509;Return whether this bean should be lazily initialized, i.e. not_eagerly instantiated on startup. Only applicable to a singleton bean.;@Override_	public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,this,bean,should,be,lazily,initialized,i,e,not,eagerly,instantiated,on,startup,only,applicable,to,a,singleton,bean;override,public,boolean,is,lazy,init,return,this,lazy,init
AbstractBeanDefinition -> @Override 	public boolean isLazyInit();1447323728;Return whether this bean should be lazily initialized, i.e. not_eagerly instantiated on startup. Only applicable to a singleton bean.;@Override_	public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,this,bean,should,be,lazily,initialized,i,e,not,eagerly,instantiated,on,startup,only,applicable,to,a,singleton,bean;override,public,boolean,is,lazy,init,return,this,lazy,init
AbstractBeanDefinition -> @Override 	public boolean isLazyInit();1465226156;Return whether this bean should be lazily initialized, i.e. not_eagerly instantiated on startup. Only applicable to a singleton bean.;@Override_	public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,this,bean,should,be,lazily,initialized,i,e,not,eagerly,instantiated,on,startup,only,applicable,to,a,singleton,bean;override,public,boolean,is,lazy,init,return,this,lazy,init
AbstractBeanDefinition -> @Override 	public boolean isLazyInit();1467730834;Return whether this bean should be lazily initialized, i.e. not_eagerly instantiated on startup. Only applicable to a singleton bean.;@Override_	public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,this,bean,should,be,lazily,initialized,i,e,not,eagerly,instantiated,on,startup,only,applicable,to,a,singleton,bean;override,public,boolean,is,lazy,init,return,this,lazy,init
AbstractBeanDefinition -> @Override 	public boolean isLazyInit();1467846264;Return whether this bean should be lazily initialized, i.e. not_eagerly instantiated on startup. Only applicable to a singleton bean.;@Override_	public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,this,bean,should,be,lazily,initialized,i,e,not,eagerly,instantiated,on,startup,only,applicable,to,a,singleton,bean;override,public,boolean,is,lazy,init,return,this,lazy,init
AbstractBeanDefinition -> @Override 	public boolean isLazyInit();1482091545;Return whether this bean should be lazily initialized, i.e. not_eagerly instantiated on startup. Only applicable to a singleton bean.;@Override_	public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,this,bean,should,be,lazily,initialized,i,e,not,eagerly,instantiated,on,startup,only,applicable,to,a,singleton,bean;override,public,boolean,is,lazy,init,return,this,lazy,init
AbstractBeanDefinition -> @Override 	public boolean isLazyInit();1483093818;Return whether this bean should be lazily initialized, i.e. not_eagerly instantiated on startup. Only applicable to a singleton bean.;@Override_	public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,this,bean,should,be,lazily,initialized,i,e,not,eagerly,instantiated,on,startup,only,applicable,to,a,singleton,bean;override,public,boolean,is,lazy,init,return,this,lazy,init
AbstractBeanDefinition -> @Override 	public boolean isLazyInit();1495868221;Return whether this bean should be lazily initialized, i.e. not_eagerly instantiated on startup. Only applicable to a singleton bean.;@Override_	public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,this,bean,should,be,lazily,initialized,i,e,not,eagerly,instantiated,on,startup,only,applicable,to,a,singleton,bean;override,public,boolean,is,lazy,init,return,this,lazy,init
AbstractBeanDefinition -> @Override 	public boolean isLazyInit();1496837955;Return whether this bean should be lazily initialized, i.e. not_eagerly instantiated on startup. Only applicable to a singleton bean.;@Override_	public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,this,bean,should,be,lazily,initialized,i,e,not,eagerly,instantiated,on,startup,only,applicable,to,a,singleton,bean;override,public,boolean,is,lazy,init,return,this,lazy,init
AbstractBeanDefinition -> @Override 	public boolean isLazyInit();1498780456;Return whether this bean should be lazily initialized, i.e. not_eagerly instantiated on startup. Only applicable to a singleton bean.;@Override_	public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,this,bean,should,be,lazily,initialized,i,e,not,eagerly,instantiated,on,startup,only,applicable,to,a,singleton,bean;override,public,boolean,is,lazy,init,return,this,lazy,init
AbstractBeanDefinition -> @Override 	public boolean isLazyInit();1502974979;Return whether this bean should be lazily initialized, i.e. not_eagerly instantiated on startup. Only applicable to a singleton bean.;@Override_	public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,this,bean,should,be,lazily,initialized,i,e,not,eagerly,instantiated,on,startup,only,applicable,to,a,singleton,bean;override,public,boolean,is,lazy,init,return,this,lazy,init
AbstractBeanDefinition -> @Override 	public boolean isLazyInit();1503008029;Return whether this bean should be lazily initialized, i.e. not_eagerly instantiated on startup. Only applicable to a singleton bean.;@Override_	public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,this,bean,should,be,lazily,initialized,i,e,not,eagerly,instantiated,on,startup,only,applicable,to,a,singleton,bean;override,public,boolean,is,lazy,init,return,this,lazy,init
AbstractBeanDefinition -> @Override 	public boolean isLazyInit();1510606271;Return whether this bean should be lazily initialized, i.e. not_eagerly instantiated on startup. Only applicable to a singleton bean.;@Override_	public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,this,bean,should,be,lazily,initialized,i,e,not,eagerly,instantiated,on,startup,only,applicable,to,a,singleton,bean;override,public,boolean,is,lazy,init,return,this,lazy,init
AbstractBeanDefinition -> @Override 	public boolean isLazyInit();1510675876;Return whether this bean should be lazily initialized, i.e. not_eagerly instantiated on startup. Only applicable to a singleton bean.;@Override_	public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,this,bean,should,be,lazily,initialized,i,e,not,eagerly,instantiated,on,startup,only,applicable,to,a,singleton,bean;override,public,boolean,is,lazy,init,return,this,lazy,init
AbstractBeanDefinition -> @Override 	public boolean isLazyInit();1530174524;Return whether this bean should be lazily initialized, i.e. not_eagerly instantiated on startup. Only applicable to a singleton bean.;@Override_	public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,this,bean,should,be,lazily,initialized,i,e,not,eagerly,instantiated,on,startup,only,applicable,to,a,singleton,bean;override,public,boolean,is,lazy,init,return,this,lazy,init
AbstractBeanDefinition -> @Override 	public boolean isLazyInit();1530174524;Return whether this bean should be lazily initialized, i.e. not_eagerly instantiated on startup. Only applicable to a singleton bean.;@Override_	public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,this,bean,should,be,lazily,initialized,i,e,not,eagerly,instantiated,on,startup,only,applicable,to,a,singleton,bean;override,public,boolean,is,lazy,init,return,this,lazy,init
AbstractBeanDefinition -> @Override 	public boolean isLazyInit();1530174524;Return whether this bean should be lazily initialized, i.e. not_eagerly instantiated on startup. Only applicable to a singleton bean.;@Override_	public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,this,bean,should,be,lazily,initialized,i,e,not,eagerly,instantiated,on,startup,only,applicable,to,a,singleton,bean;override,public,boolean,is,lazy,init,return,this,lazy,init
AbstractBeanDefinition -> @Override 	public boolean isLazyInit();1530190293;Return whether this bean should be lazily initialized, i.e. not_eagerly instantiated on startup. Only applicable to a singleton bean.;@Override_	public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,this,bean,should,be,lazily,initialized,i,e,not,eagerly,instantiated,on,startup,only,applicable,to,a,singleton,bean;override,public,boolean,is,lazy,init,return,this,lazy,init
AbstractBeanDefinition -> @Override 	public boolean isLazyInit();1532981251;Return whether this bean should be lazily initialized, i.e. not_eagerly instantiated on startup. Only applicable to a singleton bean.;@Override_	public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,this,bean,should,be,lazily,initialized,i,e,not,eagerly,instantiated,on,startup,only,applicable,to,a,singleton,bean;override,public,boolean,is,lazy,init,return,this,lazy,init
AbstractBeanDefinition -> @Override 	public boolean isLazyInit();1536863076;Return whether this bean should be lazily initialized, i.e. not_eagerly instantiated on startup. Only applicable to a singleton bean.;@Override_	public boolean isLazyInit() {_		return this.lazyInit__	};return,whether,this,bean,should,be,lazily,initialized,i,e,not,eagerly,instantiated,on,startup,only,applicable,to,a,singleton,bean;override,public,boolean,is,lazy,init,return,this,lazy,init
AbstractBeanDefinition -> public boolean isLenientConstructorResolution();1328020251;Return whether to resolve constructors in lenient mode or in strict mode.;public boolean isLenientConstructorResolution() {_		return this.lenientConstructorResolution__	};return,whether,to,resolve,constructors,in,lenient,mode,or,in,strict,mode;public,boolean,is,lenient,constructor,resolution,return,this,lenient,constructor,resolution
AbstractBeanDefinition -> public boolean isLenientConstructorResolution();1337202589;Return whether to resolve constructors in lenient mode or in strict mode.;public boolean isLenientConstructorResolution() {_		return this.lenientConstructorResolution__	};return,whether,to,resolve,constructors,in,lenient,mode,or,in,strict,mode;public,boolean,is,lenient,constructor,resolution,return,this,lenient,constructor,resolution
AbstractBeanDefinition -> public boolean isLenientConstructorResolution();1356735495;Return whether to resolve constructors in lenient mode or in strict mode.;public boolean isLenientConstructorResolution() {_		return this.lenientConstructorResolution__	};return,whether,to,resolve,constructors,in,lenient,mode,or,in,strict,mode;public,boolean,is,lenient,constructor,resolution,return,this,lenient,constructor,resolution
AbstractBeanDefinition -> public boolean isLenientConstructorResolution();1357119239;Return whether to resolve constructors in lenient mode or in strict mode.;public boolean isLenientConstructorResolution() {_		return this.lenientConstructorResolution__	};return,whether,to,resolve,constructors,in,lenient,mode,or,in,strict,mode;public,boolean,is,lenient,constructor,resolution,return,this,lenient,constructor,resolution
AbstractBeanDefinition -> public boolean isLenientConstructorResolution();1367508310;Return whether to resolve constructors in lenient mode or in strict mode.;public boolean isLenientConstructorResolution() {_		return this.lenientConstructorResolution__	};return,whether,to,resolve,constructors,in,lenient,mode,or,in,strict,mode;public,boolean,is,lenient,constructor,resolution,return,this,lenient,constructor,resolution
AbstractBeanDefinition -> public boolean isLenientConstructorResolution();1367943112;Return whether to resolve constructors in lenient mode or in strict mode.;public boolean isLenientConstructorResolution() {_		return this.lenientConstructorResolution__	};return,whether,to,resolve,constructors,in,lenient,mode,or,in,strict,mode;public,boolean,is,lenient,constructor,resolution,return,this,lenient,constructor,resolution
AbstractBeanDefinition -> public boolean isLenientConstructorResolution();1368482696;Return whether to resolve constructors in lenient mode or in strict mode.;public boolean isLenientConstructorResolution() {_		return this.lenientConstructorResolution__	};return,whether,to,resolve,constructors,in,lenient,mode,or,in,strict,mode;public,boolean,is,lenient,constructor,resolution,return,this,lenient,constructor,resolution
AbstractBeanDefinition -> public boolean isLenientConstructorResolution();1385412762;Return whether to resolve constructors in lenient mode or in strict mode.;public boolean isLenientConstructorResolution() {_		return this.lenientConstructorResolution__	};return,whether,to,resolve,constructors,in,lenient,mode,or,in,strict,mode;public,boolean,is,lenient,constructor,resolution,return,this,lenient,constructor,resolution
AbstractBeanDefinition -> public boolean isLenientConstructorResolution();1392245317;Return whether to resolve constructors in lenient mode or in strict mode.;public boolean isLenientConstructorResolution() {_		return this.lenientConstructorResolution__	};return,whether,to,resolve,constructors,in,lenient,mode,or,in,strict,mode;public,boolean,is,lenient,constructor,resolution,return,this,lenient,constructor,resolution
AbstractBeanDefinition -> public boolean isLenientConstructorResolution();1397163142;Return whether to resolve constructors in lenient mode or in strict mode.;public boolean isLenientConstructorResolution() {_		return this.lenientConstructorResolution__	};return,whether,to,resolve,constructors,in,lenient,mode,or,in,strict,mode;public,boolean,is,lenient,constructor,resolution,return,this,lenient,constructor,resolution
AbstractBeanDefinition -> public boolean isLenientConstructorResolution();1398898390;Return whether to resolve constructors in lenient mode or in strict mode.;public boolean isLenientConstructorResolution() {_		return this.lenientConstructorResolution__	};return,whether,to,resolve,constructors,in,lenient,mode,or,in,strict,mode;public,boolean,is,lenient,constructor,resolution,return,this,lenient,constructor,resolution
AbstractBeanDefinition -> public boolean isLenientConstructorResolution();1407511029;Return whether to resolve constructors in lenient mode or in strict mode.;public boolean isLenientConstructorResolution() {_		return this.lenientConstructorResolution__	};return,whether,to,resolve,constructors,in,lenient,mode,or,in,strict,mode;public,boolean,is,lenient,constructor,resolution,return,this,lenient,constructor,resolution
AbstractBeanDefinition -> public boolean isLenientConstructorResolution();1432135182;Return whether to resolve constructors in lenient mode or in strict mode.;public boolean isLenientConstructorResolution() {_		return this.lenientConstructorResolution__	};return,whether,to,resolve,constructors,in,lenient,mode,or,in,strict,mode;public,boolean,is,lenient,constructor,resolution,return,this,lenient,constructor,resolution
AbstractBeanDefinition -> public boolean isLenientConstructorResolution();1434204509;Return whether to resolve constructors in lenient mode or in strict mode.;public boolean isLenientConstructorResolution() {_		return this.lenientConstructorResolution__	};return,whether,to,resolve,constructors,in,lenient,mode,or,in,strict,mode;public,boolean,is,lenient,constructor,resolution,return,this,lenient,constructor,resolution
AbstractBeanDefinition -> public boolean isLenientConstructorResolution();1447323728;Return whether to resolve constructors in lenient mode or in strict mode.;public boolean isLenientConstructorResolution() {_		return this.lenientConstructorResolution__	};return,whether,to,resolve,constructors,in,lenient,mode,or,in,strict,mode;public,boolean,is,lenient,constructor,resolution,return,this,lenient,constructor,resolution
AbstractBeanDefinition -> public boolean isLenientConstructorResolution();1465226156;Return whether to resolve constructors in lenient mode or in strict mode.;public boolean isLenientConstructorResolution() {_		return this.lenientConstructorResolution__	};return,whether,to,resolve,constructors,in,lenient,mode,or,in,strict,mode;public,boolean,is,lenient,constructor,resolution,return,this,lenient,constructor,resolution
AbstractBeanDefinition -> public boolean isLenientConstructorResolution();1467730834;Return whether to resolve constructors in lenient mode or in strict mode.;public boolean isLenientConstructorResolution() {_		return this.lenientConstructorResolution__	};return,whether,to,resolve,constructors,in,lenient,mode,or,in,strict,mode;public,boolean,is,lenient,constructor,resolution,return,this,lenient,constructor,resolution
AbstractBeanDefinition -> public boolean isLenientConstructorResolution();1467846264;Return whether to resolve constructors in lenient mode or in strict mode.;public boolean isLenientConstructorResolution() {_		return this.lenientConstructorResolution__	};return,whether,to,resolve,constructors,in,lenient,mode,or,in,strict,mode;public,boolean,is,lenient,constructor,resolution,return,this,lenient,constructor,resolution
AbstractBeanDefinition -> public boolean isLenientConstructorResolution();1482091545;Return whether to resolve constructors in lenient mode or in strict mode.;public boolean isLenientConstructorResolution() {_		return this.lenientConstructorResolution__	};return,whether,to,resolve,constructors,in,lenient,mode,or,in,strict,mode;public,boolean,is,lenient,constructor,resolution,return,this,lenient,constructor,resolution
AbstractBeanDefinition -> public boolean isLenientConstructorResolution();1483093818;Return whether to resolve constructors in lenient mode or in strict mode.;public boolean isLenientConstructorResolution() {_		return this.lenientConstructorResolution__	};return,whether,to,resolve,constructors,in,lenient,mode,or,in,strict,mode;public,boolean,is,lenient,constructor,resolution,return,this,lenient,constructor,resolution
AbstractBeanDefinition -> public boolean isLenientConstructorResolution();1495868221;Return whether to resolve constructors in lenient mode or in strict mode.;public boolean isLenientConstructorResolution() {_		return this.lenientConstructorResolution__	};return,whether,to,resolve,constructors,in,lenient,mode,or,in,strict,mode;public,boolean,is,lenient,constructor,resolution,return,this,lenient,constructor,resolution
AbstractBeanDefinition -> public boolean isLenientConstructorResolution();1496837955;Return whether to resolve constructors in lenient mode or in strict mode.;public boolean isLenientConstructorResolution() {_		return this.lenientConstructorResolution__	};return,whether,to,resolve,constructors,in,lenient,mode,or,in,strict,mode;public,boolean,is,lenient,constructor,resolution,return,this,lenient,constructor,resolution
AbstractBeanDefinition -> public boolean isLenientConstructorResolution();1498780456;Return whether to resolve constructors in lenient mode or in strict mode.;public boolean isLenientConstructorResolution() {_		return this.lenientConstructorResolution__	};return,whether,to,resolve,constructors,in,lenient,mode,or,in,strict,mode;public,boolean,is,lenient,constructor,resolution,return,this,lenient,constructor,resolution
AbstractBeanDefinition -> public boolean isLenientConstructorResolution();1502974979;Return whether to resolve constructors in lenient mode or in strict mode.;public boolean isLenientConstructorResolution() {_		return this.lenientConstructorResolution__	};return,whether,to,resolve,constructors,in,lenient,mode,or,in,strict,mode;public,boolean,is,lenient,constructor,resolution,return,this,lenient,constructor,resolution
AbstractBeanDefinition -> public boolean isLenientConstructorResolution();1503008029;Return whether to resolve constructors in lenient mode or in strict mode.;public boolean isLenientConstructorResolution() {_		return this.lenientConstructorResolution__	};return,whether,to,resolve,constructors,in,lenient,mode,or,in,strict,mode;public,boolean,is,lenient,constructor,resolution,return,this,lenient,constructor,resolution
AbstractBeanDefinition -> public boolean isLenientConstructorResolution();1510606271;Return whether to resolve constructors in lenient mode or in strict mode.;public boolean isLenientConstructorResolution() {_		return this.lenientConstructorResolution__	};return,whether,to,resolve,constructors,in,lenient,mode,or,in,strict,mode;public,boolean,is,lenient,constructor,resolution,return,this,lenient,constructor,resolution
AbstractBeanDefinition -> public boolean isLenientConstructorResolution();1510675876;Return whether to resolve constructors in lenient mode or in strict mode.;public boolean isLenientConstructorResolution() {_		return this.lenientConstructorResolution__	};return,whether,to,resolve,constructors,in,lenient,mode,or,in,strict,mode;public,boolean,is,lenient,constructor,resolution,return,this,lenient,constructor,resolution
AbstractBeanDefinition -> public boolean isLenientConstructorResolution();1530174524;Return whether to resolve constructors in lenient mode or in strict mode.;public boolean isLenientConstructorResolution() {_		return this.lenientConstructorResolution__	};return,whether,to,resolve,constructors,in,lenient,mode,or,in,strict,mode;public,boolean,is,lenient,constructor,resolution,return,this,lenient,constructor,resolution
AbstractBeanDefinition -> public boolean isLenientConstructorResolution();1530174524;Return whether to resolve constructors in lenient mode or in strict mode.;public boolean isLenientConstructorResolution() {_		return this.lenientConstructorResolution__	};return,whether,to,resolve,constructors,in,lenient,mode,or,in,strict,mode;public,boolean,is,lenient,constructor,resolution,return,this,lenient,constructor,resolution
AbstractBeanDefinition -> public boolean isLenientConstructorResolution();1530174524;Return whether to resolve constructors in lenient mode or in strict mode.;public boolean isLenientConstructorResolution() {_		return this.lenientConstructorResolution__	};return,whether,to,resolve,constructors,in,lenient,mode,or,in,strict,mode;public,boolean,is,lenient,constructor,resolution,return,this,lenient,constructor,resolution
AbstractBeanDefinition -> public boolean isLenientConstructorResolution();1530190293;Return whether to resolve constructors in lenient mode or in strict mode.;public boolean isLenientConstructorResolution() {_		return this.lenientConstructorResolution__	};return,whether,to,resolve,constructors,in,lenient,mode,or,in,strict,mode;public,boolean,is,lenient,constructor,resolution,return,this,lenient,constructor,resolution
AbstractBeanDefinition -> public boolean isLenientConstructorResolution();1532981251;Return whether to resolve constructors in lenient mode or in strict mode.;public boolean isLenientConstructorResolution() {_		return this.lenientConstructorResolution__	};return,whether,to,resolve,constructors,in,lenient,mode,or,in,strict,mode;public,boolean,is,lenient,constructor,resolution,return,this,lenient,constructor,resolution
AbstractBeanDefinition -> public boolean isLenientConstructorResolution();1536863076;Return whether to resolve constructors in lenient mode or in strict mode.;public boolean isLenientConstructorResolution() {_		return this.lenientConstructorResolution__	};return,whether,to,resolve,constructors,in,lenient,mode,or,in,strict,mode;public,boolean,is,lenient,constructor,resolution,return,this,lenient,constructor,resolution
AbstractBeanDefinition -> public void setDestroyMethodName(String destroyMethodName);1328020251;Set the name of the destroy method. The default is <code>null</code>_in which case there is no destroy method.;public void setDestroyMethodName(String destroyMethodName) {_		this.destroyMethodName = destroyMethodName__	};set,the,name,of,the,destroy,method,the,default,is,code,null,code,in,which,case,there,is,no,destroy,method;public,void,set,destroy,method,name,string,destroy,method,name,this,destroy,method,name,destroy,method,name
AbstractBeanDefinition -> public void setDestroyMethodName(String destroyMethodName);1337202589;Set the name of the destroy method. The default is <code>null</code>_in which case there is no destroy method.;public void setDestroyMethodName(String destroyMethodName) {_		this.destroyMethodName = destroyMethodName__	};set,the,name,of,the,destroy,method,the,default,is,code,null,code,in,which,case,there,is,no,destroy,method;public,void,set,destroy,method,name,string,destroy,method,name,this,destroy,method,name,destroy,method,name
AbstractBeanDefinition -> public void setDestroyMethodName(String destroyMethodName);1356735495;Set the name of the destroy method. The default is {@code null}_in which case there is no destroy method.;public void setDestroyMethodName(String destroyMethodName) {_		this.destroyMethodName = destroyMethodName__	};set,the,name,of,the,destroy,method,the,default,is,code,null,in,which,case,there,is,no,destroy,method;public,void,set,destroy,method,name,string,destroy,method,name,this,destroy,method,name,destroy,method,name
AbstractBeanDefinition -> public void setDestroyMethodName(String destroyMethodName);1357119239;Set the name of the destroy method. The default is {@code null}_in which case there is no destroy method.;public void setDestroyMethodName(String destroyMethodName) {_		this.destroyMethodName = destroyMethodName__	};set,the,name,of,the,destroy,method,the,default,is,code,null,in,which,case,there,is,no,destroy,method;public,void,set,destroy,method,name,string,destroy,method,name,this,destroy,method,name,destroy,method,name
AbstractBeanDefinition -> public void setDestroyMethodName(String destroyMethodName);1367508310;Set the name of the destroy method. The default is {@code null}_in which case there is no destroy method.;public void setDestroyMethodName(String destroyMethodName) {_		this.destroyMethodName = destroyMethodName__	};set,the,name,of,the,destroy,method,the,default,is,code,null,in,which,case,there,is,no,destroy,method;public,void,set,destroy,method,name,string,destroy,method,name,this,destroy,method,name,destroy,method,name
AbstractBeanDefinition -> public void setDestroyMethodName(String destroyMethodName);1367943112;Set the name of the destroy method. The default is {@code null}_in which case there is no destroy method.;public void setDestroyMethodName(String destroyMethodName) {_		this.destroyMethodName = destroyMethodName__	};set,the,name,of,the,destroy,method,the,default,is,code,null,in,which,case,there,is,no,destroy,method;public,void,set,destroy,method,name,string,destroy,method,name,this,destroy,method,name,destroy,method,name
AbstractBeanDefinition -> public void setDestroyMethodName(String destroyMethodName);1368482696;Set the name of the destroy method. The default is {@code null}_in which case there is no destroy method.;public void setDestroyMethodName(String destroyMethodName) {_		this.destroyMethodName = destroyMethodName__	};set,the,name,of,the,destroy,method,the,default,is,code,null,in,which,case,there,is,no,destroy,method;public,void,set,destroy,method,name,string,destroy,method,name,this,destroy,method,name,destroy,method,name
AbstractBeanDefinition -> public void setDestroyMethodName(String destroyMethodName);1385412762;Set the name of the destroy method. The default is {@code null}_in which case there is no destroy method.;public void setDestroyMethodName(String destroyMethodName) {_		this.destroyMethodName = destroyMethodName__	};set,the,name,of,the,destroy,method,the,default,is,code,null,in,which,case,there,is,no,destroy,method;public,void,set,destroy,method,name,string,destroy,method,name,this,destroy,method,name,destroy,method,name
AbstractBeanDefinition -> public void setDestroyMethodName(String destroyMethodName);1392245317;Set the name of the destroy method. The default is {@code null}_in which case there is no destroy method.;public void setDestroyMethodName(String destroyMethodName) {_		this.destroyMethodName = destroyMethodName__	};set,the,name,of,the,destroy,method,the,default,is,code,null,in,which,case,there,is,no,destroy,method;public,void,set,destroy,method,name,string,destroy,method,name,this,destroy,method,name,destroy,method,name
AbstractBeanDefinition -> public void setDestroyMethodName(String destroyMethodName);1397163142;Set the name of the destroy method. The default is {@code null}_in which case there is no destroy method.;public void setDestroyMethodName(String destroyMethodName) {_		this.destroyMethodName = destroyMethodName__	};set,the,name,of,the,destroy,method,the,default,is,code,null,in,which,case,there,is,no,destroy,method;public,void,set,destroy,method,name,string,destroy,method,name,this,destroy,method,name,destroy,method,name
AbstractBeanDefinition -> public void setDestroyMethodName(String destroyMethodName);1398898390;Set the name of the destroy method. The default is {@code null}_in which case there is no destroy method.;public void setDestroyMethodName(String destroyMethodName) {_		this.destroyMethodName = destroyMethodName__	};set,the,name,of,the,destroy,method,the,default,is,code,null,in,which,case,there,is,no,destroy,method;public,void,set,destroy,method,name,string,destroy,method,name,this,destroy,method,name,destroy,method,name
AbstractBeanDefinition -> public void setDestroyMethodName(String destroyMethodName);1407511029;Set the name of the destroy method. The default is {@code null}_in which case there is no destroy method.;public void setDestroyMethodName(String destroyMethodName) {_		this.destroyMethodName = destroyMethodName__	};set,the,name,of,the,destroy,method,the,default,is,code,null,in,which,case,there,is,no,destroy,method;public,void,set,destroy,method,name,string,destroy,method,name,this,destroy,method,name,destroy,method,name
AbstractBeanDefinition -> public void setDestroyMethodName(String destroyMethodName);1432135182;Set the name of the destroy method. The default is {@code null}_in which case there is no destroy method.;public void setDestroyMethodName(String destroyMethodName) {_		this.destroyMethodName = destroyMethodName__	};set,the,name,of,the,destroy,method,the,default,is,code,null,in,which,case,there,is,no,destroy,method;public,void,set,destroy,method,name,string,destroy,method,name,this,destroy,method,name,destroy,method,name
AbstractBeanDefinition -> public void setDestroyMethodName(String destroyMethodName);1434204509;Set the name of the destroy method. The default is {@code null}_in which case there is no destroy method.;public void setDestroyMethodName(String destroyMethodName) {_		this.destroyMethodName = destroyMethodName__	};set,the,name,of,the,destroy,method,the,default,is,code,null,in,which,case,there,is,no,destroy,method;public,void,set,destroy,method,name,string,destroy,method,name,this,destroy,method,name,destroy,method,name
AbstractBeanDefinition -> public void setDestroyMethodName(String destroyMethodName);1447323728;Set the name of the destroy method. The default is {@code null}_in which case there is no destroy method.;public void setDestroyMethodName(String destroyMethodName) {_		this.destroyMethodName = destroyMethodName__	};set,the,name,of,the,destroy,method,the,default,is,code,null,in,which,case,there,is,no,destroy,method;public,void,set,destroy,method,name,string,destroy,method,name,this,destroy,method,name,destroy,method,name
AbstractBeanDefinition -> public void setDestroyMethodName(String destroyMethodName);1465226156;Set the name of the destroy method. The default is {@code null}_in which case there is no destroy method.;public void setDestroyMethodName(String destroyMethodName) {_		this.destroyMethodName = destroyMethodName__	};set,the,name,of,the,destroy,method,the,default,is,code,null,in,which,case,there,is,no,destroy,method;public,void,set,destroy,method,name,string,destroy,method,name,this,destroy,method,name,destroy,method,name
AbstractBeanDefinition -> public void setDestroyMethodName(String destroyMethodName);1467730834;Set the name of the destroy method. The default is {@code null}_in which case there is no destroy method.;public void setDestroyMethodName(String destroyMethodName) {_		this.destroyMethodName = destroyMethodName__	};set,the,name,of,the,destroy,method,the,default,is,code,null,in,which,case,there,is,no,destroy,method;public,void,set,destroy,method,name,string,destroy,method,name,this,destroy,method,name,destroy,method,name
AbstractBeanDefinition -> public void setDestroyMethodName(String destroyMethodName);1467846264;Set the name of the destroy method. The default is {@code null}_in which case there is no destroy method.;public void setDestroyMethodName(String destroyMethodName) {_		this.destroyMethodName = destroyMethodName__	};set,the,name,of,the,destroy,method,the,default,is,code,null,in,which,case,there,is,no,destroy,method;public,void,set,destroy,method,name,string,destroy,method,name,this,destroy,method,name,destroy,method,name
AbstractBeanDefinition -> public void setDestroyMethodName(String destroyMethodName);1482091545;Set the name of the destroy method. The default is {@code null}_in which case there is no destroy method.;public void setDestroyMethodName(String destroyMethodName) {_		this.destroyMethodName = destroyMethodName__	};set,the,name,of,the,destroy,method,the,default,is,code,null,in,which,case,there,is,no,destroy,method;public,void,set,destroy,method,name,string,destroy,method,name,this,destroy,method,name,destroy,method,name
AbstractBeanDefinition -> public void setDestroyMethodName(String destroyMethodName);1483093818;Set the name of the destroy method. The default is {@code null}_in which case there is no destroy method.;public void setDestroyMethodName(String destroyMethodName) {_		this.destroyMethodName = destroyMethodName__	};set,the,name,of,the,destroy,method,the,default,is,code,null,in,which,case,there,is,no,destroy,method;public,void,set,destroy,method,name,string,destroy,method,name,this,destroy,method,name,destroy,method,name
AbstractBeanDefinition -> public void setDestroyMethodName(String destroyMethodName);1495868221;Set the name of the destroy method. The default is {@code null}_in which case there is no destroy method.;public void setDestroyMethodName(String destroyMethodName) {_		this.destroyMethodName = destroyMethodName__	};set,the,name,of,the,destroy,method,the,default,is,code,null,in,which,case,there,is,no,destroy,method;public,void,set,destroy,method,name,string,destroy,method,name,this,destroy,method,name,destroy,method,name
AbstractBeanDefinition -> public void setDestroyMethodName(@Nullable String destroyMethodName);1496837955;Set the name of the destroy method._<p>The default is {@code null} in which case there is no destroy method.;public void setDestroyMethodName(@Nullable String destroyMethodName) {_		this.destroyMethodName = destroyMethodName__	};set,the,name,of,the,destroy,method,p,the,default,is,code,null,in,which,case,there,is,no,destroy,method;public,void,set,destroy,method,name,nullable,string,destroy,method,name,this,destroy,method,name,destroy,method,name
AbstractBeanDefinition -> public void setDestroyMethodName(@Nullable String destroyMethodName);1498780456;Set the name of the destroy method._<p>The default is {@code null} in which case there is no destroy method.;public void setDestroyMethodName(@Nullable String destroyMethodName) {_		this.destroyMethodName = destroyMethodName__	};set,the,name,of,the,destroy,method,p,the,default,is,code,null,in,which,case,there,is,no,destroy,method;public,void,set,destroy,method,name,nullable,string,destroy,method,name,this,destroy,method,name,destroy,method,name
AbstractBeanDefinition -> public void setDestroyMethodName(@Nullable String destroyMethodName);1502974979;Set the name of the destroy method._<p>The default is {@code null} in which case there is no destroy method.;public void setDestroyMethodName(@Nullable String destroyMethodName) {_		this.destroyMethodName = destroyMethodName__	};set,the,name,of,the,destroy,method,p,the,default,is,code,null,in,which,case,there,is,no,destroy,method;public,void,set,destroy,method,name,nullable,string,destroy,method,name,this,destroy,method,name,destroy,method,name
AbstractBeanDefinition -> public void setDestroyMethodName(@Nullable String destroyMethodName);1503008029;Set the name of the destroy method._<p>The default is {@code null} in which case there is no destroy method.;public void setDestroyMethodName(@Nullable String destroyMethodName) {_		this.destroyMethodName = destroyMethodName__	};set,the,name,of,the,destroy,method,p,the,default,is,code,null,in,which,case,there,is,no,destroy,method;public,void,set,destroy,method,name,nullable,string,destroy,method,name,this,destroy,method,name,destroy,method,name
AbstractBeanDefinition -> public void setDestroyMethodName(@Nullable String destroyMethodName);1510606271;Set the name of the destroy method._<p>The default is {@code null} in which case there is no destroy method.;public void setDestroyMethodName(@Nullable String destroyMethodName) {_		this.destroyMethodName = destroyMethodName__	};set,the,name,of,the,destroy,method,p,the,default,is,code,null,in,which,case,there,is,no,destroy,method;public,void,set,destroy,method,name,nullable,string,destroy,method,name,this,destroy,method,name,destroy,method,name
AbstractBeanDefinition -> public void setDestroyMethodName(@Nullable String destroyMethodName);1510675876;Set the name of the destroy method._<p>The default is {@code null} in which case there is no destroy method.;public void setDestroyMethodName(@Nullable String destroyMethodName) {_		this.destroyMethodName = destroyMethodName__	};set,the,name,of,the,destroy,method,p,the,default,is,code,null,in,which,case,there,is,no,destroy,method;public,void,set,destroy,method,name,nullable,string,destroy,method,name,this,destroy,method,name,destroy,method,name
AbstractBeanDefinition -> public void setDestroyMethodName(@Nullable String destroyMethodName);1530174524;Set the name of the destroy method._<p>The default is {@code null} in which case there is no destroy method.;public void setDestroyMethodName(@Nullable String destroyMethodName) {_		this.destroyMethodName = destroyMethodName__	};set,the,name,of,the,destroy,method,p,the,default,is,code,null,in,which,case,there,is,no,destroy,method;public,void,set,destroy,method,name,nullable,string,destroy,method,name,this,destroy,method,name,destroy,method,name
AbstractBeanDefinition -> public void setDestroyMethodName(@Nullable String destroyMethodName);1530174524;Set the name of the destroy method._<p>The default is {@code null} in which case there is no destroy method.;public void setDestroyMethodName(@Nullable String destroyMethodName) {_		this.destroyMethodName = destroyMethodName__	};set,the,name,of,the,destroy,method,p,the,default,is,code,null,in,which,case,there,is,no,destroy,method;public,void,set,destroy,method,name,nullable,string,destroy,method,name,this,destroy,method,name,destroy,method,name
AbstractBeanDefinition -> public void setDestroyMethodName(@Nullable String destroyMethodName);1530174524;Set the name of the destroy method._<p>The default is {@code null} in which case there is no destroy method.;public void setDestroyMethodName(@Nullable String destroyMethodName) {_		this.destroyMethodName = destroyMethodName__	};set,the,name,of,the,destroy,method,p,the,default,is,code,null,in,which,case,there,is,no,destroy,method;public,void,set,destroy,method,name,nullable,string,destroy,method,name,this,destroy,method,name,destroy,method,name
AbstractBeanDefinition -> public void setDestroyMethodName(@Nullable String destroyMethodName);1530190293;Set the name of the destroy method._<p>The default is {@code null} in which case there is no destroy method.;public void setDestroyMethodName(@Nullable String destroyMethodName) {_		this.destroyMethodName = destroyMethodName__	};set,the,name,of,the,destroy,method,p,the,default,is,code,null,in,which,case,there,is,no,destroy,method;public,void,set,destroy,method,name,nullable,string,destroy,method,name,this,destroy,method,name,destroy,method,name
AbstractBeanDefinition -> public void setDestroyMethodName(@Nullable String destroyMethodName);1532981251;Set the name of the destroy method._<p>The default is {@code null} in which case there is no destroy method.;public void setDestroyMethodName(@Nullable String destroyMethodName) {_		this.destroyMethodName = destroyMethodName__	};set,the,name,of,the,destroy,method,p,the,default,is,code,null,in,which,case,there,is,no,destroy,method;public,void,set,destroy,method,name,nullable,string,destroy,method,name,this,destroy,method,name,destroy,method,name
AbstractBeanDefinition -> public MutablePropertyValues getPropertyValues();1328020251;Return property values for this bean (never <code>null</code>).;public MutablePropertyValues getPropertyValues() {_		return this.propertyValues__	};return,property,values,for,this,bean,never,code,null,code;public,mutable,property,values,get,property,values,return,this,property,values
AbstractBeanDefinition -> public MutablePropertyValues getPropertyValues();1337202589;Return property values for this bean (never <code>null</code>).;public MutablePropertyValues getPropertyValues() {_		return this.propertyValues__	};return,property,values,for,this,bean,never,code,null,code;public,mutable,property,values,get,property,values,return,this,property,values
AbstractBeanDefinition -> public MutablePropertyValues getPropertyValues();1357119239;Return property values for this bean (never {@code null}).;public MutablePropertyValues getPropertyValues() {_		return this.propertyValues__	};return,property,values,for,this,bean,never,code,null;public,mutable,property,values,get,property,values,return,this,property,values
AbstractBeanDefinition -> public MutablePropertyValues getPropertyValues();1367508310;Return property values for this bean (never {@code null}).;public MutablePropertyValues getPropertyValues() {_		return this.propertyValues__	};return,property,values,for,this,bean,never,code,null;public,mutable,property,values,get,property,values,return,this,property,values
AbstractBeanDefinition -> public MutablePropertyValues getPropertyValues();1367943112;Return property values for this bean (never {@code null}).;public MutablePropertyValues getPropertyValues() {_		return this.propertyValues__	};return,property,values,for,this,bean,never,code,null;public,mutable,property,values,get,property,values,return,this,property,values
AbstractBeanDefinition -> @Deprecated 	public void setSingleton(boolean singleton);1328020251;Set if this a <b>Singleton</b>, with a single, shared instance returned_on all calls. In case of "false", the BeanFactory will apply the <b>Prototype</b>_design pattern, with each caller requesting an instance getting an independent_instance. How this is exactly defined will depend on the BeanFactory._<p>"Singletons" are the commoner type, so the default is "true"._Note that as of Spring 2.0, this flag is just an alternative way to_specify scope="singleton" or scope="prototype"._@deprecated since Spring 2.5, in favor of {@link #setScope}_@see #setScope_@see #SCOPE_SINGLETON_@see #SCOPE_PROTOTYPE;@Deprecated_	public void setSingleton(boolean singleton) {_		this.scope = (singleton ? SCOPE_SINGLETON : SCOPE_PROTOTYPE)__		this.singleton = singleton__		this.prototype = !singleton__	};set,if,this,a,b,singleton,b,with,a,single,shared,instance,returned,on,all,calls,in,case,of,false,the,bean,factory,will,apply,the,b,prototype,b,design,pattern,with,each,caller,requesting,an,instance,getting,an,independent,instance,how,this,is,exactly,defined,will,depend,on,the,bean,factory,p,singletons,are,the,commoner,type,so,the,default,is,true,note,that,as,of,spring,2,0,this,flag,is,just,an,alternative,way,to,specify,scope,singleton,or,scope,prototype,deprecated,since,spring,2,5,in,favor,of,link,set,scope,see,set,scope,see,see;deprecated,public,void,set,singleton,boolean,singleton,this,scope,singleton,this,singleton,singleton,this,prototype,singleton
AbstractBeanDefinition -> @Deprecated 	public void setSingleton(boolean singleton);1337202589;Set if this a <b>Singleton</b>, with a single, shared instance returned_on all calls. In case of "false", the BeanFactory will apply the <b>Prototype</b>_design pattern, with each caller requesting an instance getting an independent_instance. How this is exactly defined will depend on the BeanFactory._<p>"Singletons" are the commoner type, so the default is "true"._Note that as of Spring 2.0, this flag is just an alternative way to_specify scope="singleton" or scope="prototype"._@deprecated since Spring 2.5, in favor of {@link #setScope}_@see #setScope_@see #SCOPE_SINGLETON_@see #SCOPE_PROTOTYPE;@Deprecated_	public void setSingleton(boolean singleton) {_		this.scope = (singleton ? SCOPE_SINGLETON : SCOPE_PROTOTYPE)__		this.singleton = singleton__		this.prototype = !singleton__	};set,if,this,a,b,singleton,b,with,a,single,shared,instance,returned,on,all,calls,in,case,of,false,the,bean,factory,will,apply,the,b,prototype,b,design,pattern,with,each,caller,requesting,an,instance,getting,an,independent,instance,how,this,is,exactly,defined,will,depend,on,the,bean,factory,p,singletons,are,the,commoner,type,so,the,default,is,true,note,that,as,of,spring,2,0,this,flag,is,just,an,alternative,way,to,specify,scope,singleton,or,scope,prototype,deprecated,since,spring,2,5,in,favor,of,link,set,scope,see,set,scope,see,see;deprecated,public,void,set,singleton,boolean,singleton,this,scope,singleton,this,singleton,singleton,this,prototype,singleton
AbstractBeanDefinition -> @Deprecated 	public void setSingleton(boolean singleton);1356735495;Set if this a <b>Singleton</b>, with a single, shared instance returned_on all calls. In case of "false", the BeanFactory will apply the <b>Prototype</b>_design pattern, with each caller requesting an instance getting an independent_instance. How this is exactly defined will depend on the BeanFactory._<p>"Singletons" are the commoner type, so the default is "true"._Note that as of Spring 2.0, this flag is just an alternative way to_specify scope="singleton" or scope="prototype"._@deprecated since Spring 2.5, in favor of {@link #setScope}_@see #setScope_@see #SCOPE_SINGLETON_@see #SCOPE_PROTOTYPE;@Deprecated_	public void setSingleton(boolean singleton) {_		this.scope = (singleton ? SCOPE_SINGLETON : SCOPE_PROTOTYPE)__		this.singleton = singleton__		this.prototype = !singleton__	};set,if,this,a,b,singleton,b,with,a,single,shared,instance,returned,on,all,calls,in,case,of,false,the,bean,factory,will,apply,the,b,prototype,b,design,pattern,with,each,caller,requesting,an,instance,getting,an,independent,instance,how,this,is,exactly,defined,will,depend,on,the,bean,factory,p,singletons,are,the,commoner,type,so,the,default,is,true,note,that,as,of,spring,2,0,this,flag,is,just,an,alternative,way,to,specify,scope,singleton,or,scope,prototype,deprecated,since,spring,2,5,in,favor,of,link,set,scope,see,set,scope,see,see;deprecated,public,void,set,singleton,boolean,singleton,this,scope,singleton,this,singleton,singleton,this,prototype,singleton
AbstractBeanDefinition -> @Deprecated 	public void setSingleton(boolean singleton);1357119239;Set if this a <b>Singleton</b>, with a single, shared instance returned_on all calls. In case of "false", the BeanFactory will apply the <b>Prototype</b>_design pattern, with each caller requesting an instance getting an independent_instance. How this is exactly defined will depend on the BeanFactory._<p>"Singletons" are the commoner type, so the default is "true"._Note that as of Spring 2.0, this flag is just an alternative way to_specify scope="singleton" or scope="prototype"._@deprecated since Spring 2.5, in favor of {@link #setScope}_@see #setScope_@see #SCOPE_SINGLETON_@see #SCOPE_PROTOTYPE;@Deprecated_	public void setSingleton(boolean singleton) {_		this.scope = (singleton ? SCOPE_SINGLETON : SCOPE_PROTOTYPE)__		this.singleton = singleton__		this.prototype = !singleton__	};set,if,this,a,b,singleton,b,with,a,single,shared,instance,returned,on,all,calls,in,case,of,false,the,bean,factory,will,apply,the,b,prototype,b,design,pattern,with,each,caller,requesting,an,instance,getting,an,independent,instance,how,this,is,exactly,defined,will,depend,on,the,bean,factory,p,singletons,are,the,commoner,type,so,the,default,is,true,note,that,as,of,spring,2,0,this,flag,is,just,an,alternative,way,to,specify,scope,singleton,or,scope,prototype,deprecated,since,spring,2,5,in,favor,of,link,set,scope,see,set,scope,see,see;deprecated,public,void,set,singleton,boolean,singleton,this,scope,singleton,this,singleton,singleton,this,prototype,singleton
AbstractBeanDefinition -> @Deprecated 	public void setSingleton(boolean singleton);1367508310;Set if this a <b>Singleton</b>, with a single, shared instance returned_on all calls. In case of "false", the BeanFactory will apply the <b>Prototype</b>_design pattern, with each caller requesting an instance getting an independent_instance. How this is exactly defined will depend on the BeanFactory._<p>"Singletons" are the commoner type, so the default is "true"._Note that as of Spring 2.0, this flag is just an alternative way to_specify scope="singleton" or scope="prototype"._@deprecated since Spring 2.5, in favor of {@link #setScope}_@see #setScope_@see #SCOPE_SINGLETON_@see #SCOPE_PROTOTYPE;@Deprecated_	public void setSingleton(boolean singleton) {_		this.scope = (singleton ? SCOPE_SINGLETON : SCOPE_PROTOTYPE)__		this.singleton = singleton__		this.prototype = !singleton__	};set,if,this,a,b,singleton,b,with,a,single,shared,instance,returned,on,all,calls,in,case,of,false,the,bean,factory,will,apply,the,b,prototype,b,design,pattern,with,each,caller,requesting,an,instance,getting,an,independent,instance,how,this,is,exactly,defined,will,depend,on,the,bean,factory,p,singletons,are,the,commoner,type,so,the,default,is,true,note,that,as,of,spring,2,0,this,flag,is,just,an,alternative,way,to,specify,scope,singleton,or,scope,prototype,deprecated,since,spring,2,5,in,favor,of,link,set,scope,see,set,scope,see,see;deprecated,public,void,set,singleton,boolean,singleton,this,scope,singleton,this,singleton,singleton,this,prototype,singleton
AbstractBeanDefinition -> public ConstructorArgumentValues getConstructorArgumentValues();1328020251;Return constructor argument values for this bean (never <code>null</code>).;public ConstructorArgumentValues getConstructorArgumentValues() {_		return this.constructorArgumentValues__	};return,constructor,argument,values,for,this,bean,never,code,null,code;public,constructor,argument,values,get,constructor,argument,values,return,this,constructor,argument,values
AbstractBeanDefinition -> public ConstructorArgumentValues getConstructorArgumentValues();1337202589;Return constructor argument values for this bean (never <code>null</code>).;public ConstructorArgumentValues getConstructorArgumentValues() {_		return this.constructorArgumentValues__	};return,constructor,argument,values,for,this,bean,never,code,null,code;public,constructor,argument,values,get,constructor,argument,values,return,this,constructor,argument,values
AbstractBeanDefinition -> public ConstructorArgumentValues getConstructorArgumentValues();1357119239;Return constructor argument values for this bean (never {@code null}).;public ConstructorArgumentValues getConstructorArgumentValues() {_		return this.constructorArgumentValues__	};return,constructor,argument,values,for,this,bean,never,code,null;public,constructor,argument,values,get,constructor,argument,values,return,this,constructor,argument,values
AbstractBeanDefinition -> public ConstructorArgumentValues getConstructorArgumentValues();1367508310;Return constructor argument values for this bean (never {@code null}).;public ConstructorArgumentValues getConstructorArgumentValues() {_		return this.constructorArgumentValues__	};return,constructor,argument,values,for,this,bean,never,code,null;public,constructor,argument,values,get,constructor,argument,values,return,this,constructor,argument,values
AbstractBeanDefinition -> public ConstructorArgumentValues getConstructorArgumentValues();1367943112;Return constructor argument values for this bean (never {@code null}).;public ConstructorArgumentValues getConstructorArgumentValues() {_		return this.constructorArgumentValues__	};return,constructor,argument,values,for,this,bean,never,code,null;public,constructor,argument,values,get,constructor,argument,values,return,this,constructor,argument,values
AbstractBeanDefinition -> public void applyDefaults(BeanDefinitionDefaults defaults);1328020251;Apply the provided default values to this bean._@param defaults the defaults to apply;public void applyDefaults(BeanDefinitionDefaults defaults) {_		setLazyInit(defaults.isLazyInit())__		setAutowireMode(defaults.getAutowireMode())__		setDependencyCheck(defaults.getDependencyCheck())__		setInitMethodName(defaults.getInitMethodName())__		setEnforceInitMethod(false)__		setDestroyMethodName(defaults.getDestroyMethodName())__		setEnforceDestroyMethod(false)__	};apply,the,provided,default,values,to,this,bean,param,defaults,the,defaults,to,apply;public,void,apply,defaults,bean,definition,defaults,defaults,set,lazy,init,defaults,is,lazy,init,set,autowire,mode,defaults,get,autowire,mode,set,dependency,check,defaults,get,dependency,check,set,init,method,name,defaults,get,init,method,name,set,enforce,init,method,false,set,destroy,method,name,defaults,get,destroy,method,name,set,enforce,destroy,method,false
AbstractBeanDefinition -> public void applyDefaults(BeanDefinitionDefaults defaults);1337202589;Apply the provided default values to this bean._@param defaults the defaults to apply;public void applyDefaults(BeanDefinitionDefaults defaults) {_		setLazyInit(defaults.isLazyInit())__		setAutowireMode(defaults.getAutowireMode())__		setDependencyCheck(defaults.getDependencyCheck())__		setInitMethodName(defaults.getInitMethodName())__		setEnforceInitMethod(false)__		setDestroyMethodName(defaults.getDestroyMethodName())__		setEnforceDestroyMethod(false)__	};apply,the,provided,default,values,to,this,bean,param,defaults,the,defaults,to,apply;public,void,apply,defaults,bean,definition,defaults,defaults,set,lazy,init,defaults,is,lazy,init,set,autowire,mode,defaults,get,autowire,mode,set,dependency,check,defaults,get,dependency,check,set,init,method,name,defaults,get,init,method,name,set,enforce,init,method,false,set,destroy,method,name,defaults,get,destroy,method,name,set,enforce,destroy,method,false
AbstractBeanDefinition -> public void applyDefaults(BeanDefinitionDefaults defaults);1356735495;Apply the provided default values to this bean._@param defaults the defaults to apply;public void applyDefaults(BeanDefinitionDefaults defaults) {_		setLazyInit(defaults.isLazyInit())__		setAutowireMode(defaults.getAutowireMode())__		setDependencyCheck(defaults.getDependencyCheck())__		setInitMethodName(defaults.getInitMethodName())__		setEnforceInitMethod(false)__		setDestroyMethodName(defaults.getDestroyMethodName())__		setEnforceDestroyMethod(false)__	};apply,the,provided,default,values,to,this,bean,param,defaults,the,defaults,to,apply;public,void,apply,defaults,bean,definition,defaults,defaults,set,lazy,init,defaults,is,lazy,init,set,autowire,mode,defaults,get,autowire,mode,set,dependency,check,defaults,get,dependency,check,set,init,method,name,defaults,get,init,method,name,set,enforce,init,method,false,set,destroy,method,name,defaults,get,destroy,method,name,set,enforce,destroy,method,false
AbstractBeanDefinition -> public void applyDefaults(BeanDefinitionDefaults defaults);1357119239;Apply the provided default values to this bean._@param defaults the defaults to apply;public void applyDefaults(BeanDefinitionDefaults defaults) {_		setLazyInit(defaults.isLazyInit())__		setAutowireMode(defaults.getAutowireMode())__		setDependencyCheck(defaults.getDependencyCheck())__		setInitMethodName(defaults.getInitMethodName())__		setEnforceInitMethod(false)__		setDestroyMethodName(defaults.getDestroyMethodName())__		setEnforceDestroyMethod(false)__	};apply,the,provided,default,values,to,this,bean,param,defaults,the,defaults,to,apply;public,void,apply,defaults,bean,definition,defaults,defaults,set,lazy,init,defaults,is,lazy,init,set,autowire,mode,defaults,get,autowire,mode,set,dependency,check,defaults,get,dependency,check,set,init,method,name,defaults,get,init,method,name,set,enforce,init,method,false,set,destroy,method,name,defaults,get,destroy,method,name,set,enforce,destroy,method,false
AbstractBeanDefinition -> public void applyDefaults(BeanDefinitionDefaults defaults);1367508310;Apply the provided default values to this bean._@param defaults the defaults to apply;public void applyDefaults(BeanDefinitionDefaults defaults) {_		setLazyInit(defaults.isLazyInit())__		setAutowireMode(defaults.getAutowireMode())__		setDependencyCheck(defaults.getDependencyCheck())__		setInitMethodName(defaults.getInitMethodName())__		setEnforceInitMethod(false)__		setDestroyMethodName(defaults.getDestroyMethodName())__		setEnforceDestroyMethod(false)__	};apply,the,provided,default,values,to,this,bean,param,defaults,the,defaults,to,apply;public,void,apply,defaults,bean,definition,defaults,defaults,set,lazy,init,defaults,is,lazy,init,set,autowire,mode,defaults,get,autowire,mode,set,dependency,check,defaults,get,dependency,check,set,init,method,name,defaults,get,init,method,name,set,enforce,init,method,false,set,destroy,method,name,defaults,get,destroy,method,name,set,enforce,destroy,method,false
AbstractBeanDefinition -> public void applyDefaults(BeanDefinitionDefaults defaults);1367943112;Apply the provided default values to this bean._@param defaults the defaults to apply;public void applyDefaults(BeanDefinitionDefaults defaults) {_		setLazyInit(defaults.isLazyInit())__		setAutowireMode(defaults.getAutowireMode())__		setDependencyCheck(defaults.getDependencyCheck())__		setInitMethodName(defaults.getInitMethodName())__		setEnforceInitMethod(false)__		setDestroyMethodName(defaults.getDestroyMethodName())__		setEnforceDestroyMethod(false)__	};apply,the,provided,default,values,to,this,bean,param,defaults,the,defaults,to,apply;public,void,apply,defaults,bean,definition,defaults,defaults,set,lazy,init,defaults,is,lazy,init,set,autowire,mode,defaults,get,autowire,mode,set,dependency,check,defaults,get,dependency,check,set,init,method,name,defaults,get,init,method,name,set,enforce,init,method,false,set,destroy,method,name,defaults,get,destroy,method,name,set,enforce,destroy,method,false
AbstractBeanDefinition -> public void applyDefaults(BeanDefinitionDefaults defaults);1368482696;Apply the provided default values to this bean._@param defaults the defaults to apply;public void applyDefaults(BeanDefinitionDefaults defaults) {_		setLazyInit(defaults.isLazyInit())__		setAutowireMode(defaults.getAutowireMode())__		setDependencyCheck(defaults.getDependencyCheck())__		setInitMethodName(defaults.getInitMethodName())__		setEnforceInitMethod(false)__		setDestroyMethodName(defaults.getDestroyMethodName())__		setEnforceDestroyMethod(false)__	};apply,the,provided,default,values,to,this,bean,param,defaults,the,defaults,to,apply;public,void,apply,defaults,bean,definition,defaults,defaults,set,lazy,init,defaults,is,lazy,init,set,autowire,mode,defaults,get,autowire,mode,set,dependency,check,defaults,get,dependency,check,set,init,method,name,defaults,get,init,method,name,set,enforce,init,method,false,set,destroy,method,name,defaults,get,destroy,method,name,set,enforce,destroy,method,false
AbstractBeanDefinition -> public void applyDefaults(BeanDefinitionDefaults defaults);1385412762;Apply the provided default values to this bean._@param defaults the defaults to apply;public void applyDefaults(BeanDefinitionDefaults defaults) {_		setLazyInit(defaults.isLazyInit())__		setAutowireMode(defaults.getAutowireMode())__		setDependencyCheck(defaults.getDependencyCheck())__		setInitMethodName(defaults.getInitMethodName())__		setEnforceInitMethod(false)__		setDestroyMethodName(defaults.getDestroyMethodName())__		setEnforceDestroyMethod(false)__	};apply,the,provided,default,values,to,this,bean,param,defaults,the,defaults,to,apply;public,void,apply,defaults,bean,definition,defaults,defaults,set,lazy,init,defaults,is,lazy,init,set,autowire,mode,defaults,get,autowire,mode,set,dependency,check,defaults,get,dependency,check,set,init,method,name,defaults,get,init,method,name,set,enforce,init,method,false,set,destroy,method,name,defaults,get,destroy,method,name,set,enforce,destroy,method,false
AbstractBeanDefinition -> public void applyDefaults(BeanDefinitionDefaults defaults);1392245317;Apply the provided default values to this bean._@param defaults the defaults to apply;public void applyDefaults(BeanDefinitionDefaults defaults) {_		setLazyInit(defaults.isLazyInit())__		setAutowireMode(defaults.getAutowireMode())__		setDependencyCheck(defaults.getDependencyCheck())__		setInitMethodName(defaults.getInitMethodName())__		setEnforceInitMethod(false)__		setDestroyMethodName(defaults.getDestroyMethodName())__		setEnforceDestroyMethod(false)__	};apply,the,provided,default,values,to,this,bean,param,defaults,the,defaults,to,apply;public,void,apply,defaults,bean,definition,defaults,defaults,set,lazy,init,defaults,is,lazy,init,set,autowire,mode,defaults,get,autowire,mode,set,dependency,check,defaults,get,dependency,check,set,init,method,name,defaults,get,init,method,name,set,enforce,init,method,false,set,destroy,method,name,defaults,get,destroy,method,name,set,enforce,destroy,method,false
AbstractBeanDefinition -> public void applyDefaults(BeanDefinitionDefaults defaults);1397163142;Apply the provided default values to this bean._@param defaults the defaults to apply;public void applyDefaults(BeanDefinitionDefaults defaults) {_		setLazyInit(defaults.isLazyInit())__		setAutowireMode(defaults.getAutowireMode())__		setDependencyCheck(defaults.getDependencyCheck())__		setInitMethodName(defaults.getInitMethodName())__		setEnforceInitMethod(false)__		setDestroyMethodName(defaults.getDestroyMethodName())__		setEnforceDestroyMethod(false)__	};apply,the,provided,default,values,to,this,bean,param,defaults,the,defaults,to,apply;public,void,apply,defaults,bean,definition,defaults,defaults,set,lazy,init,defaults,is,lazy,init,set,autowire,mode,defaults,get,autowire,mode,set,dependency,check,defaults,get,dependency,check,set,init,method,name,defaults,get,init,method,name,set,enforce,init,method,false,set,destroy,method,name,defaults,get,destroy,method,name,set,enforce,destroy,method,false
AbstractBeanDefinition -> public void applyDefaults(BeanDefinitionDefaults defaults);1398898390;Apply the provided default values to this bean._@param defaults the defaults to apply;public void applyDefaults(BeanDefinitionDefaults defaults) {_		setLazyInit(defaults.isLazyInit())__		setAutowireMode(defaults.getAutowireMode())__		setDependencyCheck(defaults.getDependencyCheck())__		setInitMethodName(defaults.getInitMethodName())__		setEnforceInitMethod(false)__		setDestroyMethodName(defaults.getDestroyMethodName())__		setEnforceDestroyMethod(false)__	};apply,the,provided,default,values,to,this,bean,param,defaults,the,defaults,to,apply;public,void,apply,defaults,bean,definition,defaults,defaults,set,lazy,init,defaults,is,lazy,init,set,autowire,mode,defaults,get,autowire,mode,set,dependency,check,defaults,get,dependency,check,set,init,method,name,defaults,get,init,method,name,set,enforce,init,method,false,set,destroy,method,name,defaults,get,destroy,method,name,set,enforce,destroy,method,false
AbstractBeanDefinition -> public void applyDefaults(BeanDefinitionDefaults defaults);1407511029;Apply the provided default values to this bean._@param defaults the defaults to apply;public void applyDefaults(BeanDefinitionDefaults defaults) {_		setLazyInit(defaults.isLazyInit())__		setAutowireMode(defaults.getAutowireMode())__		setDependencyCheck(defaults.getDependencyCheck())__		setInitMethodName(defaults.getInitMethodName())__		setEnforceInitMethod(false)__		setDestroyMethodName(defaults.getDestroyMethodName())__		setEnforceDestroyMethod(false)__	};apply,the,provided,default,values,to,this,bean,param,defaults,the,defaults,to,apply;public,void,apply,defaults,bean,definition,defaults,defaults,set,lazy,init,defaults,is,lazy,init,set,autowire,mode,defaults,get,autowire,mode,set,dependency,check,defaults,get,dependency,check,set,init,method,name,defaults,get,init,method,name,set,enforce,init,method,false,set,destroy,method,name,defaults,get,destroy,method,name,set,enforce,destroy,method,false
AbstractBeanDefinition -> public void applyDefaults(BeanDefinitionDefaults defaults);1432135182;Apply the provided default values to this bean._@param defaults the defaults to apply;public void applyDefaults(BeanDefinitionDefaults defaults) {_		setLazyInit(defaults.isLazyInit())__		setAutowireMode(defaults.getAutowireMode())__		setDependencyCheck(defaults.getDependencyCheck())__		setInitMethodName(defaults.getInitMethodName())__		setEnforceInitMethod(false)__		setDestroyMethodName(defaults.getDestroyMethodName())__		setEnforceDestroyMethod(false)__	};apply,the,provided,default,values,to,this,bean,param,defaults,the,defaults,to,apply;public,void,apply,defaults,bean,definition,defaults,defaults,set,lazy,init,defaults,is,lazy,init,set,autowire,mode,defaults,get,autowire,mode,set,dependency,check,defaults,get,dependency,check,set,init,method,name,defaults,get,init,method,name,set,enforce,init,method,false,set,destroy,method,name,defaults,get,destroy,method,name,set,enforce,destroy,method,false
AbstractBeanDefinition -> public void applyDefaults(BeanDefinitionDefaults defaults);1434204509;Apply the provided default values to this bean._@param defaults the defaults to apply;public void applyDefaults(BeanDefinitionDefaults defaults) {_		setLazyInit(defaults.isLazyInit())__		setAutowireMode(defaults.getAutowireMode())__		setDependencyCheck(defaults.getDependencyCheck())__		setInitMethodName(defaults.getInitMethodName())__		setEnforceInitMethod(false)__		setDestroyMethodName(defaults.getDestroyMethodName())__		setEnforceDestroyMethod(false)__	};apply,the,provided,default,values,to,this,bean,param,defaults,the,defaults,to,apply;public,void,apply,defaults,bean,definition,defaults,defaults,set,lazy,init,defaults,is,lazy,init,set,autowire,mode,defaults,get,autowire,mode,set,dependency,check,defaults,get,dependency,check,set,init,method,name,defaults,get,init,method,name,set,enforce,init,method,false,set,destroy,method,name,defaults,get,destroy,method,name,set,enforce,destroy,method,false
AbstractBeanDefinition -> public void applyDefaults(BeanDefinitionDefaults defaults);1447323728;Apply the provided default values to this bean._@param defaults the defaults to apply;public void applyDefaults(BeanDefinitionDefaults defaults) {_		setLazyInit(defaults.isLazyInit())__		setAutowireMode(defaults.getAutowireMode())__		setDependencyCheck(defaults.getDependencyCheck())__		setInitMethodName(defaults.getInitMethodName())__		setEnforceInitMethod(false)__		setDestroyMethodName(defaults.getDestroyMethodName())__		setEnforceDestroyMethod(false)__	};apply,the,provided,default,values,to,this,bean,param,defaults,the,defaults,to,apply;public,void,apply,defaults,bean,definition,defaults,defaults,set,lazy,init,defaults,is,lazy,init,set,autowire,mode,defaults,get,autowire,mode,set,dependency,check,defaults,get,dependency,check,set,init,method,name,defaults,get,init,method,name,set,enforce,init,method,false,set,destroy,method,name,defaults,get,destroy,method,name,set,enforce,destroy,method,false
AbstractBeanDefinition -> public void applyDefaults(BeanDefinitionDefaults defaults);1465226156;Apply the provided default values to this bean._@param defaults the defaults to apply;public void applyDefaults(BeanDefinitionDefaults defaults) {_		setLazyInit(defaults.isLazyInit())__		setAutowireMode(defaults.getAutowireMode())__		setDependencyCheck(defaults.getDependencyCheck())__		setInitMethodName(defaults.getInitMethodName())__		setEnforceInitMethod(false)__		setDestroyMethodName(defaults.getDestroyMethodName())__		setEnforceDestroyMethod(false)__	};apply,the,provided,default,values,to,this,bean,param,defaults,the,defaults,to,apply;public,void,apply,defaults,bean,definition,defaults,defaults,set,lazy,init,defaults,is,lazy,init,set,autowire,mode,defaults,get,autowire,mode,set,dependency,check,defaults,get,dependency,check,set,init,method,name,defaults,get,init,method,name,set,enforce,init,method,false,set,destroy,method,name,defaults,get,destroy,method,name,set,enforce,destroy,method,false
AbstractBeanDefinition -> public void applyDefaults(BeanDefinitionDefaults defaults);1467730834;Apply the provided default values to this bean._@param defaults the defaults to apply;public void applyDefaults(BeanDefinitionDefaults defaults) {_		setLazyInit(defaults.isLazyInit())__		setAutowireMode(defaults.getAutowireMode())__		setDependencyCheck(defaults.getDependencyCheck())__		setInitMethodName(defaults.getInitMethodName())__		setEnforceInitMethod(false)__		setDestroyMethodName(defaults.getDestroyMethodName())__		setEnforceDestroyMethod(false)__	};apply,the,provided,default,values,to,this,bean,param,defaults,the,defaults,to,apply;public,void,apply,defaults,bean,definition,defaults,defaults,set,lazy,init,defaults,is,lazy,init,set,autowire,mode,defaults,get,autowire,mode,set,dependency,check,defaults,get,dependency,check,set,init,method,name,defaults,get,init,method,name,set,enforce,init,method,false,set,destroy,method,name,defaults,get,destroy,method,name,set,enforce,destroy,method,false
AbstractBeanDefinition -> public void applyDefaults(BeanDefinitionDefaults defaults);1467846264;Apply the provided default values to this bean._@param defaults the defaults to apply;public void applyDefaults(BeanDefinitionDefaults defaults) {_		setLazyInit(defaults.isLazyInit())__		setAutowireMode(defaults.getAutowireMode())__		setDependencyCheck(defaults.getDependencyCheck())__		setInitMethodName(defaults.getInitMethodName())__		setEnforceInitMethod(false)__		setDestroyMethodName(defaults.getDestroyMethodName())__		setEnforceDestroyMethod(false)__	};apply,the,provided,default,values,to,this,bean,param,defaults,the,defaults,to,apply;public,void,apply,defaults,bean,definition,defaults,defaults,set,lazy,init,defaults,is,lazy,init,set,autowire,mode,defaults,get,autowire,mode,set,dependency,check,defaults,get,dependency,check,set,init,method,name,defaults,get,init,method,name,set,enforce,init,method,false,set,destroy,method,name,defaults,get,destroy,method,name,set,enforce,destroy,method,false
AbstractBeanDefinition -> public void applyDefaults(BeanDefinitionDefaults defaults);1482091545;Apply the provided default values to this bean._@param defaults the defaults to apply;public void applyDefaults(BeanDefinitionDefaults defaults) {_		setLazyInit(defaults.isLazyInit())__		setAutowireMode(defaults.getAutowireMode())__		setDependencyCheck(defaults.getDependencyCheck())__		setInitMethodName(defaults.getInitMethodName())__		setEnforceInitMethod(false)__		setDestroyMethodName(defaults.getDestroyMethodName())__		setEnforceDestroyMethod(false)__	};apply,the,provided,default,values,to,this,bean,param,defaults,the,defaults,to,apply;public,void,apply,defaults,bean,definition,defaults,defaults,set,lazy,init,defaults,is,lazy,init,set,autowire,mode,defaults,get,autowire,mode,set,dependency,check,defaults,get,dependency,check,set,init,method,name,defaults,get,init,method,name,set,enforce,init,method,false,set,destroy,method,name,defaults,get,destroy,method,name,set,enforce,destroy,method,false
AbstractBeanDefinition -> public void applyDefaults(BeanDefinitionDefaults defaults);1483093818;Apply the provided default values to this bean._@param defaults the defaults to apply;public void applyDefaults(BeanDefinitionDefaults defaults) {_		setLazyInit(defaults.isLazyInit())__		setAutowireMode(defaults.getAutowireMode())__		setDependencyCheck(defaults.getDependencyCheck())__		setInitMethodName(defaults.getInitMethodName())__		setEnforceInitMethod(false)__		setDestroyMethodName(defaults.getDestroyMethodName())__		setEnforceDestroyMethod(false)__	};apply,the,provided,default,values,to,this,bean,param,defaults,the,defaults,to,apply;public,void,apply,defaults,bean,definition,defaults,defaults,set,lazy,init,defaults,is,lazy,init,set,autowire,mode,defaults,get,autowire,mode,set,dependency,check,defaults,get,dependency,check,set,init,method,name,defaults,get,init,method,name,set,enforce,init,method,false,set,destroy,method,name,defaults,get,destroy,method,name,set,enforce,destroy,method,false
AbstractBeanDefinition -> public void applyDefaults(BeanDefinitionDefaults defaults);1495868221;Apply the provided default values to this bean._@param defaults the defaults to apply;public void applyDefaults(BeanDefinitionDefaults defaults) {_		setLazyInit(defaults.isLazyInit())__		setAutowireMode(defaults.getAutowireMode())__		setDependencyCheck(defaults.getDependencyCheck())__		setInitMethodName(defaults.getInitMethodName())__		setEnforceInitMethod(false)__		setDestroyMethodName(defaults.getDestroyMethodName())__		setEnforceDestroyMethod(false)__	};apply,the,provided,default,values,to,this,bean,param,defaults,the,defaults,to,apply;public,void,apply,defaults,bean,definition,defaults,defaults,set,lazy,init,defaults,is,lazy,init,set,autowire,mode,defaults,get,autowire,mode,set,dependency,check,defaults,get,dependency,check,set,init,method,name,defaults,get,init,method,name,set,enforce,init,method,false,set,destroy,method,name,defaults,get,destroy,method,name,set,enforce,destroy,method,false
AbstractBeanDefinition -> public void applyDefaults(BeanDefinitionDefaults defaults);1496837955;Apply the provided default values to this bean._@param defaults the defaults to apply;public void applyDefaults(BeanDefinitionDefaults defaults) {_		setLazyInit(defaults.isLazyInit())__		setAutowireMode(defaults.getAutowireMode())__		setDependencyCheck(defaults.getDependencyCheck())__		setInitMethodName(defaults.getInitMethodName())__		setEnforceInitMethod(false)__		setDestroyMethodName(defaults.getDestroyMethodName())__		setEnforceDestroyMethod(false)__	};apply,the,provided,default,values,to,this,bean,param,defaults,the,defaults,to,apply;public,void,apply,defaults,bean,definition,defaults,defaults,set,lazy,init,defaults,is,lazy,init,set,autowire,mode,defaults,get,autowire,mode,set,dependency,check,defaults,get,dependency,check,set,init,method,name,defaults,get,init,method,name,set,enforce,init,method,false,set,destroy,method,name,defaults,get,destroy,method,name,set,enforce,destroy,method,false
AbstractBeanDefinition -> public void applyDefaults(BeanDefinitionDefaults defaults);1498780456;Apply the provided default values to this bean._@param defaults the defaults to apply;public void applyDefaults(BeanDefinitionDefaults defaults) {_		setLazyInit(defaults.isLazyInit())__		setAutowireMode(defaults.getAutowireMode())__		setDependencyCheck(defaults.getDependencyCheck())__		setInitMethodName(defaults.getInitMethodName())__		setEnforceInitMethod(false)__		setDestroyMethodName(defaults.getDestroyMethodName())__		setEnforceDestroyMethod(false)__	};apply,the,provided,default,values,to,this,bean,param,defaults,the,defaults,to,apply;public,void,apply,defaults,bean,definition,defaults,defaults,set,lazy,init,defaults,is,lazy,init,set,autowire,mode,defaults,get,autowire,mode,set,dependency,check,defaults,get,dependency,check,set,init,method,name,defaults,get,init,method,name,set,enforce,init,method,false,set,destroy,method,name,defaults,get,destroy,method,name,set,enforce,destroy,method,false
AbstractBeanDefinition -> public void applyDefaults(BeanDefinitionDefaults defaults);1502974979;Apply the provided default values to this bean._@param defaults the defaults to apply;public void applyDefaults(BeanDefinitionDefaults defaults) {_		setLazyInit(defaults.isLazyInit())__		setAutowireMode(defaults.getAutowireMode())__		setDependencyCheck(defaults.getDependencyCheck())__		setInitMethodName(defaults.getInitMethodName())__		setEnforceInitMethod(false)__		setDestroyMethodName(defaults.getDestroyMethodName())__		setEnforceDestroyMethod(false)__	};apply,the,provided,default,values,to,this,bean,param,defaults,the,defaults,to,apply;public,void,apply,defaults,bean,definition,defaults,defaults,set,lazy,init,defaults,is,lazy,init,set,autowire,mode,defaults,get,autowire,mode,set,dependency,check,defaults,get,dependency,check,set,init,method,name,defaults,get,init,method,name,set,enforce,init,method,false,set,destroy,method,name,defaults,get,destroy,method,name,set,enforce,destroy,method,false
AbstractBeanDefinition -> public void applyDefaults(BeanDefinitionDefaults defaults);1503008029;Apply the provided default values to this bean._@param defaults the defaults to apply;public void applyDefaults(BeanDefinitionDefaults defaults) {_		setLazyInit(defaults.isLazyInit())__		setAutowireMode(defaults.getAutowireMode())__		setDependencyCheck(defaults.getDependencyCheck())__		setInitMethodName(defaults.getInitMethodName())__		setEnforceInitMethod(false)__		setDestroyMethodName(defaults.getDestroyMethodName())__		setEnforceDestroyMethod(false)__	};apply,the,provided,default,values,to,this,bean,param,defaults,the,defaults,to,apply;public,void,apply,defaults,bean,definition,defaults,defaults,set,lazy,init,defaults,is,lazy,init,set,autowire,mode,defaults,get,autowire,mode,set,dependency,check,defaults,get,dependency,check,set,init,method,name,defaults,get,init,method,name,set,enforce,init,method,false,set,destroy,method,name,defaults,get,destroy,method,name,set,enforce,destroy,method,false
AbstractBeanDefinition -> public void applyDefaults(BeanDefinitionDefaults defaults);1510606271;Apply the provided default values to this bean._@param defaults the defaults to apply;public void applyDefaults(BeanDefinitionDefaults defaults) {_		setLazyInit(defaults.isLazyInit())__		setAutowireMode(defaults.getAutowireMode())__		setDependencyCheck(defaults.getDependencyCheck())__		setInitMethodName(defaults.getInitMethodName())__		setEnforceInitMethod(false)__		setDestroyMethodName(defaults.getDestroyMethodName())__		setEnforceDestroyMethod(false)__	};apply,the,provided,default,values,to,this,bean,param,defaults,the,defaults,to,apply;public,void,apply,defaults,bean,definition,defaults,defaults,set,lazy,init,defaults,is,lazy,init,set,autowire,mode,defaults,get,autowire,mode,set,dependency,check,defaults,get,dependency,check,set,init,method,name,defaults,get,init,method,name,set,enforce,init,method,false,set,destroy,method,name,defaults,get,destroy,method,name,set,enforce,destroy,method,false
AbstractBeanDefinition -> public void applyDefaults(BeanDefinitionDefaults defaults);1510675876;Apply the provided default values to this bean._@param defaults the defaults to apply;public void applyDefaults(BeanDefinitionDefaults defaults) {_		setLazyInit(defaults.isLazyInit())__		setAutowireMode(defaults.getAutowireMode())__		setDependencyCheck(defaults.getDependencyCheck())__		setInitMethodName(defaults.getInitMethodName())__		setEnforceInitMethod(false)__		setDestroyMethodName(defaults.getDestroyMethodName())__		setEnforceDestroyMethod(false)__	};apply,the,provided,default,values,to,this,bean,param,defaults,the,defaults,to,apply;public,void,apply,defaults,bean,definition,defaults,defaults,set,lazy,init,defaults,is,lazy,init,set,autowire,mode,defaults,get,autowire,mode,set,dependency,check,defaults,get,dependency,check,set,init,method,name,defaults,get,init,method,name,set,enforce,init,method,false,set,destroy,method,name,defaults,get,destroy,method,name,set,enforce,destroy,method,false
AbstractBeanDefinition -> public void applyDefaults(BeanDefinitionDefaults defaults);1530174524;Apply the provided default values to this bean._@param defaults the defaults to apply;public void applyDefaults(BeanDefinitionDefaults defaults) {_		setLazyInit(defaults.isLazyInit())__		setAutowireMode(defaults.getAutowireMode())__		setDependencyCheck(defaults.getDependencyCheck())__		setInitMethodName(defaults.getInitMethodName())__		setEnforceInitMethod(false)__		setDestroyMethodName(defaults.getDestroyMethodName())__		setEnforceDestroyMethod(false)__	};apply,the,provided,default,values,to,this,bean,param,defaults,the,defaults,to,apply;public,void,apply,defaults,bean,definition,defaults,defaults,set,lazy,init,defaults,is,lazy,init,set,autowire,mode,defaults,get,autowire,mode,set,dependency,check,defaults,get,dependency,check,set,init,method,name,defaults,get,init,method,name,set,enforce,init,method,false,set,destroy,method,name,defaults,get,destroy,method,name,set,enforce,destroy,method,false
AbstractBeanDefinition -> public void applyDefaults(BeanDefinitionDefaults defaults);1530174524;Apply the provided default values to this bean._@param defaults the defaults to apply;public void applyDefaults(BeanDefinitionDefaults defaults) {_		setLazyInit(defaults.isLazyInit())__		setAutowireMode(defaults.getAutowireMode())__		setDependencyCheck(defaults.getDependencyCheck())__		setInitMethodName(defaults.getInitMethodName())__		setEnforceInitMethod(false)__		setDestroyMethodName(defaults.getDestroyMethodName())__		setEnforceDestroyMethod(false)__	};apply,the,provided,default,values,to,this,bean,param,defaults,the,defaults,to,apply;public,void,apply,defaults,bean,definition,defaults,defaults,set,lazy,init,defaults,is,lazy,init,set,autowire,mode,defaults,get,autowire,mode,set,dependency,check,defaults,get,dependency,check,set,init,method,name,defaults,get,init,method,name,set,enforce,init,method,false,set,destroy,method,name,defaults,get,destroy,method,name,set,enforce,destroy,method,false
AbstractBeanDefinition -> public void applyDefaults(BeanDefinitionDefaults defaults);1530174524;Apply the provided default values to this bean._@param defaults the defaults to apply;public void applyDefaults(BeanDefinitionDefaults defaults) {_		setLazyInit(defaults.isLazyInit())__		setAutowireMode(defaults.getAutowireMode())__		setDependencyCheck(defaults.getDependencyCheck())__		setInitMethodName(defaults.getInitMethodName())__		setEnforceInitMethod(false)__		setDestroyMethodName(defaults.getDestroyMethodName())__		setEnforceDestroyMethod(false)__	};apply,the,provided,default,values,to,this,bean,param,defaults,the,defaults,to,apply;public,void,apply,defaults,bean,definition,defaults,defaults,set,lazy,init,defaults,is,lazy,init,set,autowire,mode,defaults,get,autowire,mode,set,dependency,check,defaults,get,dependency,check,set,init,method,name,defaults,get,init,method,name,set,enforce,init,method,false,set,destroy,method,name,defaults,get,destroy,method,name,set,enforce,destroy,method,false
AbstractBeanDefinition -> public void applyDefaults(BeanDefinitionDefaults defaults);1530190293;Apply the provided default values to this bean._@param defaults the defaults to apply;public void applyDefaults(BeanDefinitionDefaults defaults) {_		setLazyInit(defaults.isLazyInit())__		setAutowireMode(defaults.getAutowireMode())__		setDependencyCheck(defaults.getDependencyCheck())__		setInitMethodName(defaults.getInitMethodName())__		setEnforceInitMethod(false)__		setDestroyMethodName(defaults.getDestroyMethodName())__		setEnforceDestroyMethod(false)__	};apply,the,provided,default,values,to,this,bean,param,defaults,the,defaults,to,apply;public,void,apply,defaults,bean,definition,defaults,defaults,set,lazy,init,defaults,is,lazy,init,set,autowire,mode,defaults,get,autowire,mode,set,dependency,check,defaults,get,dependency,check,set,init,method,name,defaults,get,init,method,name,set,enforce,init,method,false,set,destroy,method,name,defaults,get,destroy,method,name,set,enforce,destroy,method,false
AbstractBeanDefinition -> public void applyDefaults(BeanDefinitionDefaults defaults);1532981251;Apply the provided default values to this bean._@param defaults the defaults to apply;public void applyDefaults(BeanDefinitionDefaults defaults) {_		setLazyInit(defaults.isLazyInit())__		setAutowireMode(defaults.getAutowireMode())__		setDependencyCheck(defaults.getDependencyCheck())__		setInitMethodName(defaults.getInitMethodName())__		setEnforceInitMethod(false)__		setDestroyMethodName(defaults.getDestroyMethodName())__		setEnforceDestroyMethod(false)__	};apply,the,provided,default,values,to,this,bean,param,defaults,the,defaults,to,apply;public,void,apply,defaults,bean,definition,defaults,defaults,set,lazy,init,defaults,is,lazy,init,set,autowire,mode,defaults,get,autowire,mode,set,dependency,check,defaults,get,dependency,check,set,init,method,name,defaults,get,init,method,name,set,enforce,init,method,false,set,destroy,method,name,defaults,get,destroy,method,name,set,enforce,destroy,method,false
AbstractBeanDefinition -> public void applyDefaults(BeanDefinitionDefaults defaults);1536863076;Apply the provided default values to this bean._@param defaults the defaults to apply;public void applyDefaults(BeanDefinitionDefaults defaults) {_		setLazyInit(defaults.isLazyInit())__		setAutowireMode(defaults.getAutowireMode())__		setDependencyCheck(defaults.getDependencyCheck())__		setInitMethodName(defaults.getInitMethodName())__		setEnforceInitMethod(false)__		setDestroyMethodName(defaults.getDestroyMethodName())__		setEnforceDestroyMethod(false)__	};apply,the,provided,default,values,to,this,bean,param,defaults,the,defaults,to,apply;public,void,apply,defaults,bean,definition,defaults,defaults,set,lazy,init,defaults,is,lazy,init,set,autowire,mode,defaults,get,autowire,mode,set,dependency,check,defaults,get,dependency,check,set,init,method,name,defaults,get,init,method,name,set,enforce,init,method,false,set,destroy,method,name,defaults,get,destroy,method,name,set,enforce,destroy,method,false
AbstractBeanDefinition -> @Override 	public String getResourceDescription();1483093818;Return a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;@Override_	public String getResourceDescription() {_		return (this.resource != null ? this.resource.getDescription() : null)__	};return,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;override,public,string,get,resource,description,return,this,resource,null,this,resource,get,description,null
AbstractBeanDefinition -> @Override 	public String getResourceDescription();1495868221;Return a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;@Override_	public String getResourceDescription() {_		return (this.resource != null ? this.resource.getDescription() : null)__	};return,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;override,public,string,get,resource,description,return,this,resource,null,this,resource,get,description,null
AbstractBeanDefinition -> @Override 	public String getResourceDescription();1496837955;Return a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;@Override_	public String getResourceDescription() {_		return (this.resource != null ? this.resource.getDescription() : null)__	};return,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;override,public,string,get,resource,description,return,this,resource,null,this,resource,get,description,null
AbstractBeanDefinition -> @Override 	public String getResourceDescription();1498780456;Return a description of the resource that this bean definition_came from (for the purpose of showing context in case of errors).;@Override_	public String getResourceDescription() {_		return (this.resource != null ? this.resource.getDescription() : null)__	};return,a,description,of,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;override,public,string,get,resource,description,return,this,resource,null,this,resource,get,description,null
AbstractBeanDefinition -> public void setResource(@Nullable Resource resource);1498780456;Set the resource that this bean definition came from_(for the purpose of showing context in case of errors).;public void setResource(@Nullable Resource resource) {_		this.resource = resource__	};set,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,nullable,resource,resource,this,resource,resource
AbstractBeanDefinition -> public void setResource(@Nullable Resource resource);1502974979;Set the resource that this bean definition came from_(for the purpose of showing context in case of errors).;public void setResource(@Nullable Resource resource) {_		this.resource = resource__	};set,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,nullable,resource,resource,this,resource,resource
AbstractBeanDefinition -> public void setResource(@Nullable Resource resource);1503008029;Set the resource that this bean definition came from_(for the purpose of showing context in case of errors).;public void setResource(@Nullable Resource resource) {_		this.resource = resource__	};set,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,nullable,resource,resource,this,resource,resource
AbstractBeanDefinition -> public void setResource(@Nullable Resource resource);1510606271;Set the resource that this bean definition came from_(for the purpose of showing context in case of errors).;public void setResource(@Nullable Resource resource) {_		this.resource = resource__	};set,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,nullable,resource,resource,this,resource,resource
AbstractBeanDefinition -> public void setResource(@Nullable Resource resource);1510675876;Set the resource that this bean definition came from_(for the purpose of showing context in case of errors).;public void setResource(@Nullable Resource resource) {_		this.resource = resource__	};set,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,nullable,resource,resource,this,resource,resource
AbstractBeanDefinition -> public void setResource(@Nullable Resource resource);1530174524;Set the resource that this bean definition came from_(for the purpose of showing context in case of errors).;public void setResource(@Nullable Resource resource) {_		this.resource = resource__	};set,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,nullable,resource,resource,this,resource,resource
AbstractBeanDefinition -> public void setResource(@Nullable Resource resource);1530174524;Set the resource that this bean definition came from_(for the purpose of showing context in case of errors).;public void setResource(@Nullable Resource resource) {_		this.resource = resource__	};set,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,nullable,resource,resource,this,resource,resource
AbstractBeanDefinition -> public void setResource(@Nullable Resource resource);1530174524;Set the resource that this bean definition came from_(for the purpose of showing context in case of errors).;public void setResource(@Nullable Resource resource) {_		this.resource = resource__	};set,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,nullable,resource,resource,this,resource,resource
AbstractBeanDefinition -> public void setResource(@Nullable Resource resource);1530190293;Set the resource that this bean definition came from_(for the purpose of showing context in case of errors).;public void setResource(@Nullable Resource resource) {_		this.resource = resource__	};set,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,nullable,resource,resource,this,resource,resource
AbstractBeanDefinition -> public void setResource(@Nullable Resource resource);1532981251;Set the resource that this bean definition came from_(for the purpose of showing context in case of errors).;public void setResource(@Nullable Resource resource) {_		this.resource = resource__	};set,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,nullable,resource,resource,this,resource,resource
AbstractBeanDefinition -> public void setResource(@Nullable Resource resource);1536863076;Set the resource that this bean definition came from_(for the purpose of showing context in case of errors).;public void setResource(@Nullable Resource resource) {_		this.resource = resource__	};set,the,resource,that,this,bean,definition,came,from,for,the,purpose,of,showing,context,in,case,of,errors;public,void,set,resource,nullable,resource,resource,this,resource,resource
AbstractBeanDefinition -> @Override 	public void setBeanClassName(@Nullable String beanClassName);1496837955;Specify the bean class name of this bean definition.;@Override_	public void setBeanClassName(@Nullable String beanClassName) {_		this.beanClass = beanClassName__	};specify,the,bean,class,name,of,this,bean,definition;override,public,void,set,bean,class,name,nullable,string,bean,class,name,this,bean,class,bean,class,name
AbstractBeanDefinition -> @Override 	public void setBeanClassName(@Nullable String beanClassName);1498780456;Specify the bean class name of this bean definition.;@Override_	public void setBeanClassName(@Nullable String beanClassName) {_		this.beanClass = beanClassName__	};specify,the,bean,class,name,of,this,bean,definition;override,public,void,set,bean,class,name,nullable,string,bean,class,name,this,bean,class,bean,class,name
AbstractBeanDefinition -> @Override 	public void setBeanClassName(@Nullable String beanClassName);1502974979;Specify the bean class name of this bean definition.;@Override_	public void setBeanClassName(@Nullable String beanClassName) {_		this.beanClass = beanClassName__	};specify,the,bean,class,name,of,this,bean,definition;override,public,void,set,bean,class,name,nullable,string,bean,class,name,this,bean,class,bean,class,name
AbstractBeanDefinition -> @Override 	public void setBeanClassName(@Nullable String beanClassName);1503008029;Specify the bean class name of this bean definition.;@Override_	public void setBeanClassName(@Nullable String beanClassName) {_		this.beanClass = beanClassName__	};specify,the,bean,class,name,of,this,bean,definition;override,public,void,set,bean,class,name,nullable,string,bean,class,name,this,bean,class,bean,class,name
AbstractBeanDefinition -> @Override 	public void setBeanClassName(@Nullable String beanClassName);1510606271;Specify the bean class name of this bean definition.;@Override_	public void setBeanClassName(@Nullable String beanClassName) {_		this.beanClass = beanClassName__	};specify,the,bean,class,name,of,this,bean,definition;override,public,void,set,bean,class,name,nullable,string,bean,class,name,this,bean,class,bean,class,name
AbstractBeanDefinition -> @Override 	public void setBeanClassName(@Nullable String beanClassName);1510675876;Specify the bean class name of this bean definition.;@Override_	public void setBeanClassName(@Nullable String beanClassName) {_		this.beanClass = beanClassName__	};specify,the,bean,class,name,of,this,bean,definition;override,public,void,set,bean,class,name,nullable,string,bean,class,name,this,bean,class,bean,class,name
AbstractBeanDefinition -> @Override 	public void setBeanClassName(@Nullable String beanClassName);1530174524;Specify the bean class name of this bean definition.;@Override_	public void setBeanClassName(@Nullable String beanClassName) {_		this.beanClass = beanClassName__	};specify,the,bean,class,name,of,this,bean,definition;override,public,void,set,bean,class,name,nullable,string,bean,class,name,this,bean,class,bean,class,name
AbstractBeanDefinition -> @Override 	public void setBeanClassName(@Nullable String beanClassName);1530174524;Specify the bean class name of this bean definition.;@Override_	public void setBeanClassName(@Nullable String beanClassName) {_		this.beanClass = beanClassName__	};specify,the,bean,class,name,of,this,bean,definition;override,public,void,set,bean,class,name,nullable,string,bean,class,name,this,bean,class,bean,class,name
AbstractBeanDefinition -> @Override 	public void setBeanClassName(@Nullable String beanClassName);1530174524;Specify the bean class name of this bean definition.;@Override_	public void setBeanClassName(@Nullable String beanClassName) {_		this.beanClass = beanClassName__	};specify,the,bean,class,name,of,this,bean,definition;override,public,void,set,bean,class,name,nullable,string,bean,class,name,this,bean,class,bean,class,name
AbstractBeanDefinition -> @Override 	public void setBeanClassName(@Nullable String beanClassName);1530190293;Specify the bean class name of this bean definition.;@Override_	public void setBeanClassName(@Nullable String beanClassName) {_		this.beanClass = beanClassName__	};specify,the,bean,class,name,of,this,bean,definition;override,public,void,set,bean,class,name,nullable,string,bean,class,name,this,bean,class,bean,class,name
AbstractBeanDefinition -> @Override 	public void setBeanClassName(@Nullable String beanClassName);1532981251;Specify the bean class name of this bean definition.;@Override_	public void setBeanClassName(@Nullable String beanClassName) {_		this.beanClass = beanClassName__	};specify,the,bean,class,name,of,this,bean,definition;override,public,void,set,bean,class,name,nullable,string,bean,class,name,this,bean,class,bean,class,name
AbstractBeanDefinition -> @Override 	public void setBeanClassName(@Nullable String beanClassName);1536863076;Specify the bean class name of this bean definition.;@Override_	public void setBeanClassName(@Nullable String beanClassName) {_		this.beanClass = beanClassName__	};specify,the,bean,class,name,of,this,bean,definition;override,public,void,set,bean,class,name,nullable,string,bean,class,name,this,bean,class,bean,class,name
AbstractBeanDefinition -> public void setLenientConstructorResolution(boolean lenientConstructorResolution);1328020251;Specify whether to resolve constructors in lenient mode (<code>true</code>,_which is the default) or to switch to strict resolution (throwing an exception_in case of ambigious constructors that all match when converting the arguments,_whereas lenient mode would use the one with the 'closest' type matches).;public void setLenientConstructorResolution(boolean lenientConstructorResolution) {_		this.lenientConstructorResolution = lenientConstructorResolution__	};specify,whether,to,resolve,constructors,in,lenient,mode,code,true,code,which,is,the,default,or,to,switch,to,strict,resolution,throwing,an,exception,in,case,of,ambigious,constructors,that,all,match,when,converting,the,arguments,whereas,lenient,mode,would,use,the,one,with,the,closest,type,matches;public,void,set,lenient,constructor,resolution,boolean,lenient,constructor,resolution,this,lenient,constructor,resolution,lenient,constructor,resolution
AbstractBeanDefinition -> public void setLenientConstructorResolution(boolean lenientConstructorResolution);1337202589;Specify whether to resolve constructors in lenient mode (<code>true</code>,_which is the default) or to switch to strict resolution (throwing an exception_in case of ambigious constructors that all match when converting the arguments,_whereas lenient mode would use the one with the 'closest' type matches).;public void setLenientConstructorResolution(boolean lenientConstructorResolution) {_		this.lenientConstructorResolution = lenientConstructorResolution__	};specify,whether,to,resolve,constructors,in,lenient,mode,code,true,code,which,is,the,default,or,to,switch,to,strict,resolution,throwing,an,exception,in,case,of,ambigious,constructors,that,all,match,when,converting,the,arguments,whereas,lenient,mode,would,use,the,one,with,the,closest,type,matches;public,void,set,lenient,constructor,resolution,boolean,lenient,constructor,resolution,this,lenient,constructor,resolution,lenient,constructor,resolution
AbstractBeanDefinition -> public void setLenientConstructorResolution(boolean lenientConstructorResolution);1356735495;Specify whether to resolve constructors in lenient mode ({@code true},_which is the default) or to switch to strict resolution (throwing an exception_in case of ambigious constructors that all match when converting the arguments,_whereas lenient mode would use the one with the 'closest' type matches).;public void setLenientConstructorResolution(boolean lenientConstructorResolution) {_		this.lenientConstructorResolution = lenientConstructorResolution__	};specify,whether,to,resolve,constructors,in,lenient,mode,code,true,which,is,the,default,or,to,switch,to,strict,resolution,throwing,an,exception,in,case,of,ambigious,constructors,that,all,match,when,converting,the,arguments,whereas,lenient,mode,would,use,the,one,with,the,closest,type,matches;public,void,set,lenient,constructor,resolution,boolean,lenient,constructor,resolution,this,lenient,constructor,resolution,lenient,constructor,resolution
AbstractBeanDefinition -> public void setLenientConstructorResolution(boolean lenientConstructorResolution);1357119239;Specify whether to resolve constructors in lenient mode ({@code true},_which is the default) or to switch to strict resolution (throwing an exception_in case of ambigious constructors that all match when converting the arguments,_whereas lenient mode would use the one with the 'closest' type matches).;public void setLenientConstructorResolution(boolean lenientConstructorResolution) {_		this.lenientConstructorResolution = lenientConstructorResolution__	};specify,whether,to,resolve,constructors,in,lenient,mode,code,true,which,is,the,default,or,to,switch,to,strict,resolution,throwing,an,exception,in,case,of,ambigious,constructors,that,all,match,when,converting,the,arguments,whereas,lenient,mode,would,use,the,one,with,the,closest,type,matches;public,void,set,lenient,constructor,resolution,boolean,lenient,constructor,resolution,this,lenient,constructor,resolution,lenient,constructor,resolution
AbstractBeanDefinition -> public void setLenientConstructorResolution(boolean lenientConstructorResolution);1367508310;Specify whether to resolve constructors in lenient mode ({@code true},_which is the default) or to switch to strict resolution (throwing an exception_in case of ambigious constructors that all match when converting the arguments,_whereas lenient mode would use the one with the 'closest' type matches).;public void setLenientConstructorResolution(boolean lenientConstructorResolution) {_		this.lenientConstructorResolution = lenientConstructorResolution__	};specify,whether,to,resolve,constructors,in,lenient,mode,code,true,which,is,the,default,or,to,switch,to,strict,resolution,throwing,an,exception,in,case,of,ambigious,constructors,that,all,match,when,converting,the,arguments,whereas,lenient,mode,would,use,the,one,with,the,closest,type,matches;public,void,set,lenient,constructor,resolution,boolean,lenient,constructor,resolution,this,lenient,constructor,resolution,lenient,constructor,resolution
AbstractBeanDefinition -> public void setLenientConstructorResolution(boolean lenientConstructorResolution);1367943112;Specify whether to resolve constructors in lenient mode ({@code true},_which is the default) or to switch to strict resolution (throwing an exception_in case of ambigious constructors that all match when converting the arguments,_whereas lenient mode would use the one with the 'closest' type matches).;public void setLenientConstructorResolution(boolean lenientConstructorResolution) {_		this.lenientConstructorResolution = lenientConstructorResolution__	};specify,whether,to,resolve,constructors,in,lenient,mode,code,true,which,is,the,default,or,to,switch,to,strict,resolution,throwing,an,exception,in,case,of,ambigious,constructors,that,all,match,when,converting,the,arguments,whereas,lenient,mode,would,use,the,one,with,the,closest,type,matches;public,void,set,lenient,constructor,resolution,boolean,lenient,constructor,resolution,this,lenient,constructor,resolution,lenient,constructor,resolution
AbstractBeanDefinition -> public void setLenientConstructorResolution(boolean lenientConstructorResolution);1368482696;Specify whether to resolve constructors in lenient mode ({@code true},_which is the default) or to switch to strict resolution (throwing an exception_in case of ambigious constructors that all match when converting the arguments,_whereas lenient mode would use the one with the 'closest' type matches).;public void setLenientConstructorResolution(boolean lenientConstructorResolution) {_		this.lenientConstructorResolution = lenientConstructorResolution__	};specify,whether,to,resolve,constructors,in,lenient,mode,code,true,which,is,the,default,or,to,switch,to,strict,resolution,throwing,an,exception,in,case,of,ambigious,constructors,that,all,match,when,converting,the,arguments,whereas,lenient,mode,would,use,the,one,with,the,closest,type,matches;public,void,set,lenient,constructor,resolution,boolean,lenient,constructor,resolution,this,lenient,constructor,resolution,lenient,constructor,resolution
AbstractBeanDefinition -> public void setLenientConstructorResolution(boolean lenientConstructorResolution);1385412762;Specify whether to resolve constructors in lenient mode ({@code true},_which is the default) or to switch to strict resolution (throwing an exception_in case of ambigious constructors that all match when converting the arguments,_whereas lenient mode would use the one with the 'closest' type matches).;public void setLenientConstructorResolution(boolean lenientConstructorResolution) {_		this.lenientConstructorResolution = lenientConstructorResolution__	};specify,whether,to,resolve,constructors,in,lenient,mode,code,true,which,is,the,default,or,to,switch,to,strict,resolution,throwing,an,exception,in,case,of,ambigious,constructors,that,all,match,when,converting,the,arguments,whereas,lenient,mode,would,use,the,one,with,the,closest,type,matches;public,void,set,lenient,constructor,resolution,boolean,lenient,constructor,resolution,this,lenient,constructor,resolution,lenient,constructor,resolution
AbstractBeanDefinition -> public void setLenientConstructorResolution(boolean lenientConstructorResolution);1392245317;Specify whether to resolve constructors in lenient mode ({@code true},_which is the default) or to switch to strict resolution (throwing an exception_in case of ambiguous constructors that all match when converting the arguments,_whereas lenient mode would use the one with the 'closest' type matches).;public void setLenientConstructorResolution(boolean lenientConstructorResolution) {_		this.lenientConstructorResolution = lenientConstructorResolution__	};specify,whether,to,resolve,constructors,in,lenient,mode,code,true,which,is,the,default,or,to,switch,to,strict,resolution,throwing,an,exception,in,case,of,ambiguous,constructors,that,all,match,when,converting,the,arguments,whereas,lenient,mode,would,use,the,one,with,the,closest,type,matches;public,void,set,lenient,constructor,resolution,boolean,lenient,constructor,resolution,this,lenient,constructor,resolution,lenient,constructor,resolution
AbstractBeanDefinition -> public void setLenientConstructorResolution(boolean lenientConstructorResolution);1397163142;Specify whether to resolve constructors in lenient mode ({@code true},_which is the default) or to switch to strict resolution (throwing an exception_in case of ambiguous constructors that all match when converting the arguments,_whereas lenient mode would use the one with the 'closest' type matches).;public void setLenientConstructorResolution(boolean lenientConstructorResolution) {_		this.lenientConstructorResolution = lenientConstructorResolution__	};specify,whether,to,resolve,constructors,in,lenient,mode,code,true,which,is,the,default,or,to,switch,to,strict,resolution,throwing,an,exception,in,case,of,ambiguous,constructors,that,all,match,when,converting,the,arguments,whereas,lenient,mode,would,use,the,one,with,the,closest,type,matches;public,void,set,lenient,constructor,resolution,boolean,lenient,constructor,resolution,this,lenient,constructor,resolution,lenient,constructor,resolution
AbstractBeanDefinition -> public void setLenientConstructorResolution(boolean lenientConstructorResolution);1398898390;Specify whether to resolve constructors in lenient mode ({@code true},_which is the default) or to switch to strict resolution (throwing an exception_in case of ambiguous constructors that all match when converting the arguments,_whereas lenient mode would use the one with the 'closest' type matches).;public void setLenientConstructorResolution(boolean lenientConstructorResolution) {_		this.lenientConstructorResolution = lenientConstructorResolution__	};specify,whether,to,resolve,constructors,in,lenient,mode,code,true,which,is,the,default,or,to,switch,to,strict,resolution,throwing,an,exception,in,case,of,ambiguous,constructors,that,all,match,when,converting,the,arguments,whereas,lenient,mode,would,use,the,one,with,the,closest,type,matches;public,void,set,lenient,constructor,resolution,boolean,lenient,constructor,resolution,this,lenient,constructor,resolution,lenient,constructor,resolution
AbstractBeanDefinition -> public void setLenientConstructorResolution(boolean lenientConstructorResolution);1407511029;Specify whether to resolve constructors in lenient mode ({@code true},_which is the default) or to switch to strict resolution (throwing an exception_in case of ambiguous constructors that all match when converting the arguments,_whereas lenient mode would use the one with the 'closest' type matches).;public void setLenientConstructorResolution(boolean lenientConstructorResolution) {_		this.lenientConstructorResolution = lenientConstructorResolution__	};specify,whether,to,resolve,constructors,in,lenient,mode,code,true,which,is,the,default,or,to,switch,to,strict,resolution,throwing,an,exception,in,case,of,ambiguous,constructors,that,all,match,when,converting,the,arguments,whereas,lenient,mode,would,use,the,one,with,the,closest,type,matches;public,void,set,lenient,constructor,resolution,boolean,lenient,constructor,resolution,this,lenient,constructor,resolution,lenient,constructor,resolution
AbstractBeanDefinition -> public void setLenientConstructorResolution(boolean lenientConstructorResolution);1432135182;Specify whether to resolve constructors in lenient mode ({@code true},_which is the default) or to switch to strict resolution (throwing an exception_in case of ambiguous constructors that all match when converting the arguments,_whereas lenient mode would use the one with the 'closest' type matches).;public void setLenientConstructorResolution(boolean lenientConstructorResolution) {_		this.lenientConstructorResolution = lenientConstructorResolution__	};specify,whether,to,resolve,constructors,in,lenient,mode,code,true,which,is,the,default,or,to,switch,to,strict,resolution,throwing,an,exception,in,case,of,ambiguous,constructors,that,all,match,when,converting,the,arguments,whereas,lenient,mode,would,use,the,one,with,the,closest,type,matches;public,void,set,lenient,constructor,resolution,boolean,lenient,constructor,resolution,this,lenient,constructor,resolution,lenient,constructor,resolution
AbstractBeanDefinition -> public void setLenientConstructorResolution(boolean lenientConstructorResolution);1434204509;Specify whether to resolve constructors in lenient mode ({@code true},_which is the default) or to switch to strict resolution (throwing an exception_in case of ambiguous constructors that all match when converting the arguments,_whereas lenient mode would use the one with the 'closest' type matches).;public void setLenientConstructorResolution(boolean lenientConstructorResolution) {_		this.lenientConstructorResolution = lenientConstructorResolution__	};specify,whether,to,resolve,constructors,in,lenient,mode,code,true,which,is,the,default,or,to,switch,to,strict,resolution,throwing,an,exception,in,case,of,ambiguous,constructors,that,all,match,when,converting,the,arguments,whereas,lenient,mode,would,use,the,one,with,the,closest,type,matches;public,void,set,lenient,constructor,resolution,boolean,lenient,constructor,resolution,this,lenient,constructor,resolution,lenient,constructor,resolution
AbstractBeanDefinition -> public void setLenientConstructorResolution(boolean lenientConstructorResolution);1447323728;Specify whether to resolve constructors in lenient mode ({@code true},_which is the default) or to switch to strict resolution (throwing an exception_in case of ambiguous constructors that all match when converting the arguments,_whereas lenient mode would use the one with the 'closest' type matches).;public void setLenientConstructorResolution(boolean lenientConstructorResolution) {_		this.lenientConstructorResolution = lenientConstructorResolution__	};specify,whether,to,resolve,constructors,in,lenient,mode,code,true,which,is,the,default,or,to,switch,to,strict,resolution,throwing,an,exception,in,case,of,ambiguous,constructors,that,all,match,when,converting,the,arguments,whereas,lenient,mode,would,use,the,one,with,the,closest,type,matches;public,void,set,lenient,constructor,resolution,boolean,lenient,constructor,resolution,this,lenient,constructor,resolution,lenient,constructor,resolution
AbstractBeanDefinition -> public void setLenientConstructorResolution(boolean lenientConstructorResolution);1465226156;Specify whether to resolve constructors in lenient mode ({@code true},_which is the default) or to switch to strict resolution (throwing an exception_in case of ambiguous constructors that all match when converting the arguments,_whereas lenient mode would use the one with the 'closest' type matches).;public void setLenientConstructorResolution(boolean lenientConstructorResolution) {_		this.lenientConstructorResolution = lenientConstructorResolution__	};specify,whether,to,resolve,constructors,in,lenient,mode,code,true,which,is,the,default,or,to,switch,to,strict,resolution,throwing,an,exception,in,case,of,ambiguous,constructors,that,all,match,when,converting,the,arguments,whereas,lenient,mode,would,use,the,one,with,the,closest,type,matches;public,void,set,lenient,constructor,resolution,boolean,lenient,constructor,resolution,this,lenient,constructor,resolution,lenient,constructor,resolution
AbstractBeanDefinition -> public void setLenientConstructorResolution(boolean lenientConstructorResolution);1467730834;Specify whether to resolve constructors in lenient mode ({@code true},_which is the default) or to switch to strict resolution (throwing an exception_in case of ambiguous constructors that all match when converting the arguments,_whereas lenient mode would use the one with the 'closest' type matches).;public void setLenientConstructorResolution(boolean lenientConstructorResolution) {_		this.lenientConstructorResolution = lenientConstructorResolution__	};specify,whether,to,resolve,constructors,in,lenient,mode,code,true,which,is,the,default,or,to,switch,to,strict,resolution,throwing,an,exception,in,case,of,ambiguous,constructors,that,all,match,when,converting,the,arguments,whereas,lenient,mode,would,use,the,one,with,the,closest,type,matches;public,void,set,lenient,constructor,resolution,boolean,lenient,constructor,resolution,this,lenient,constructor,resolution,lenient,constructor,resolution
AbstractBeanDefinition -> public void setLenientConstructorResolution(boolean lenientConstructorResolution);1467846264;Specify whether to resolve constructors in lenient mode ({@code true},_which is the default) or to switch to strict resolution (throwing an exception_in case of ambiguous constructors that all match when converting the arguments,_whereas lenient mode would use the one with the 'closest' type matches).;public void setLenientConstructorResolution(boolean lenientConstructorResolution) {_		this.lenientConstructorResolution = lenientConstructorResolution__	};specify,whether,to,resolve,constructors,in,lenient,mode,code,true,which,is,the,default,or,to,switch,to,strict,resolution,throwing,an,exception,in,case,of,ambiguous,constructors,that,all,match,when,converting,the,arguments,whereas,lenient,mode,would,use,the,one,with,the,closest,type,matches;public,void,set,lenient,constructor,resolution,boolean,lenient,constructor,resolution,this,lenient,constructor,resolution,lenient,constructor,resolution
AbstractBeanDefinition -> public void setLenientConstructorResolution(boolean lenientConstructorResolution);1482091545;Specify whether to resolve constructors in lenient mode ({@code true},_which is the default) or to switch to strict resolution (throwing an exception_in case of ambiguous constructors that all match when converting the arguments,_whereas lenient mode would use the one with the 'closest' type matches).;public void setLenientConstructorResolution(boolean lenientConstructorResolution) {_		this.lenientConstructorResolution = lenientConstructorResolution__	};specify,whether,to,resolve,constructors,in,lenient,mode,code,true,which,is,the,default,or,to,switch,to,strict,resolution,throwing,an,exception,in,case,of,ambiguous,constructors,that,all,match,when,converting,the,arguments,whereas,lenient,mode,would,use,the,one,with,the,closest,type,matches;public,void,set,lenient,constructor,resolution,boolean,lenient,constructor,resolution,this,lenient,constructor,resolution,lenient,constructor,resolution
AbstractBeanDefinition -> public void setLenientConstructorResolution(boolean lenientConstructorResolution);1483093818;Specify whether to resolve constructors in lenient mode ({@code true},_which is the default) or to switch to strict resolution (throwing an exception_in case of ambiguous constructors that all match when converting the arguments,_whereas lenient mode would use the one with the 'closest' type matches).;public void setLenientConstructorResolution(boolean lenientConstructorResolution) {_		this.lenientConstructorResolution = lenientConstructorResolution__	};specify,whether,to,resolve,constructors,in,lenient,mode,code,true,which,is,the,default,or,to,switch,to,strict,resolution,throwing,an,exception,in,case,of,ambiguous,constructors,that,all,match,when,converting,the,arguments,whereas,lenient,mode,would,use,the,one,with,the,closest,type,matches;public,void,set,lenient,constructor,resolution,boolean,lenient,constructor,resolution,this,lenient,constructor,resolution,lenient,constructor,resolution
AbstractBeanDefinition -> public void setLenientConstructorResolution(boolean lenientConstructorResolution);1495868221;Specify whether to resolve constructors in lenient mode ({@code true},_which is the default) or to switch to strict resolution (throwing an exception_in case of ambiguous constructors that all match when converting the arguments,_whereas lenient mode would use the one with the 'closest' type matches).;public void setLenientConstructorResolution(boolean lenientConstructorResolution) {_		this.lenientConstructorResolution = lenientConstructorResolution__	};specify,whether,to,resolve,constructors,in,lenient,mode,code,true,which,is,the,default,or,to,switch,to,strict,resolution,throwing,an,exception,in,case,of,ambiguous,constructors,that,all,match,when,converting,the,arguments,whereas,lenient,mode,would,use,the,one,with,the,closest,type,matches;public,void,set,lenient,constructor,resolution,boolean,lenient,constructor,resolution,this,lenient,constructor,resolution,lenient,constructor,resolution
AbstractBeanDefinition -> public void setLenientConstructorResolution(boolean lenientConstructorResolution);1496837955;Specify whether to resolve constructors in lenient mode ({@code true},_which is the default) or to switch to strict resolution (throwing an exception_in case of ambiguous constructors that all match when converting the arguments,_whereas lenient mode would use the one with the 'closest' type matches).;public void setLenientConstructorResolution(boolean lenientConstructorResolution) {_		this.lenientConstructorResolution = lenientConstructorResolution__	};specify,whether,to,resolve,constructors,in,lenient,mode,code,true,which,is,the,default,or,to,switch,to,strict,resolution,throwing,an,exception,in,case,of,ambiguous,constructors,that,all,match,when,converting,the,arguments,whereas,lenient,mode,would,use,the,one,with,the,closest,type,matches;public,void,set,lenient,constructor,resolution,boolean,lenient,constructor,resolution,this,lenient,constructor,resolution,lenient,constructor,resolution
AbstractBeanDefinition -> public void setLenientConstructorResolution(boolean lenientConstructorResolution);1498780456;Specify whether to resolve constructors in lenient mode ({@code true},_which is the default) or to switch to strict resolution (throwing an exception_in case of ambiguous constructors that all match when converting the arguments,_whereas lenient mode would use the one with the 'closest' type matches).;public void setLenientConstructorResolution(boolean lenientConstructorResolution) {_		this.lenientConstructorResolution = lenientConstructorResolution__	};specify,whether,to,resolve,constructors,in,lenient,mode,code,true,which,is,the,default,or,to,switch,to,strict,resolution,throwing,an,exception,in,case,of,ambiguous,constructors,that,all,match,when,converting,the,arguments,whereas,lenient,mode,would,use,the,one,with,the,closest,type,matches;public,void,set,lenient,constructor,resolution,boolean,lenient,constructor,resolution,this,lenient,constructor,resolution,lenient,constructor,resolution
AbstractBeanDefinition -> public void setLenientConstructorResolution(boolean lenientConstructorResolution);1502974979;Specify whether to resolve constructors in lenient mode ({@code true},_which is the default) or to switch to strict resolution (throwing an exception_in case of ambiguous constructors that all match when converting the arguments,_whereas lenient mode would use the one with the 'closest' type matches).;public void setLenientConstructorResolution(boolean lenientConstructorResolution) {_		this.lenientConstructorResolution = lenientConstructorResolution__	};specify,whether,to,resolve,constructors,in,lenient,mode,code,true,which,is,the,default,or,to,switch,to,strict,resolution,throwing,an,exception,in,case,of,ambiguous,constructors,that,all,match,when,converting,the,arguments,whereas,lenient,mode,would,use,the,one,with,the,closest,type,matches;public,void,set,lenient,constructor,resolution,boolean,lenient,constructor,resolution,this,lenient,constructor,resolution,lenient,constructor,resolution
AbstractBeanDefinition -> public void setLenientConstructorResolution(boolean lenientConstructorResolution);1503008029;Specify whether to resolve constructors in lenient mode ({@code true},_which is the default) or to switch to strict resolution (throwing an exception_in case of ambiguous constructors that all match when converting the arguments,_whereas lenient mode would use the one with the 'closest' type matches).;public void setLenientConstructorResolution(boolean lenientConstructorResolution) {_		this.lenientConstructorResolution = lenientConstructorResolution__	};specify,whether,to,resolve,constructors,in,lenient,mode,code,true,which,is,the,default,or,to,switch,to,strict,resolution,throwing,an,exception,in,case,of,ambiguous,constructors,that,all,match,when,converting,the,arguments,whereas,lenient,mode,would,use,the,one,with,the,closest,type,matches;public,void,set,lenient,constructor,resolution,boolean,lenient,constructor,resolution,this,lenient,constructor,resolution,lenient,constructor,resolution
AbstractBeanDefinition -> public void setLenientConstructorResolution(boolean lenientConstructorResolution);1510606271;Specify whether to resolve constructors in lenient mode ({@code true},_which is the default) or to switch to strict resolution (throwing an exception_in case of ambiguous constructors that all match when converting the arguments,_whereas lenient mode would use the one with the 'closest' type matches).;public void setLenientConstructorResolution(boolean lenientConstructorResolution) {_		this.lenientConstructorResolution = lenientConstructorResolution__	};specify,whether,to,resolve,constructors,in,lenient,mode,code,true,which,is,the,default,or,to,switch,to,strict,resolution,throwing,an,exception,in,case,of,ambiguous,constructors,that,all,match,when,converting,the,arguments,whereas,lenient,mode,would,use,the,one,with,the,closest,type,matches;public,void,set,lenient,constructor,resolution,boolean,lenient,constructor,resolution,this,lenient,constructor,resolution,lenient,constructor,resolution
AbstractBeanDefinition -> public void setLenientConstructorResolution(boolean lenientConstructorResolution);1510675876;Specify whether to resolve constructors in lenient mode ({@code true},_which is the default) or to switch to strict resolution (throwing an exception_in case of ambiguous constructors that all match when converting the arguments,_whereas lenient mode would use the one with the 'closest' type matches).;public void setLenientConstructorResolution(boolean lenientConstructorResolution) {_		this.lenientConstructorResolution = lenientConstructorResolution__	};specify,whether,to,resolve,constructors,in,lenient,mode,code,true,which,is,the,default,or,to,switch,to,strict,resolution,throwing,an,exception,in,case,of,ambiguous,constructors,that,all,match,when,converting,the,arguments,whereas,lenient,mode,would,use,the,one,with,the,closest,type,matches;public,void,set,lenient,constructor,resolution,boolean,lenient,constructor,resolution,this,lenient,constructor,resolution,lenient,constructor,resolution
AbstractBeanDefinition -> public void setLenientConstructorResolution(boolean lenientConstructorResolution);1530174524;Specify whether to resolve constructors in lenient mode ({@code true},_which is the default) or to switch to strict resolution (throwing an exception_in case of ambiguous constructors that all match when converting the arguments,_whereas lenient mode would use the one with the 'closest' type matches).;public void setLenientConstructorResolution(boolean lenientConstructorResolution) {_		this.lenientConstructorResolution = lenientConstructorResolution__	};specify,whether,to,resolve,constructors,in,lenient,mode,code,true,which,is,the,default,or,to,switch,to,strict,resolution,throwing,an,exception,in,case,of,ambiguous,constructors,that,all,match,when,converting,the,arguments,whereas,lenient,mode,would,use,the,one,with,the,closest,type,matches;public,void,set,lenient,constructor,resolution,boolean,lenient,constructor,resolution,this,lenient,constructor,resolution,lenient,constructor,resolution
AbstractBeanDefinition -> public void setLenientConstructorResolution(boolean lenientConstructorResolution);1530174524;Specify whether to resolve constructors in lenient mode ({@code true},_which is the default) or to switch to strict resolution (throwing an exception_in case of ambiguous constructors that all match when converting the arguments,_whereas lenient mode would use the one with the 'closest' type matches).;public void setLenientConstructorResolution(boolean lenientConstructorResolution) {_		this.lenientConstructorResolution = lenientConstructorResolution__	};specify,whether,to,resolve,constructors,in,lenient,mode,code,true,which,is,the,default,or,to,switch,to,strict,resolution,throwing,an,exception,in,case,of,ambiguous,constructors,that,all,match,when,converting,the,arguments,whereas,lenient,mode,would,use,the,one,with,the,closest,type,matches;public,void,set,lenient,constructor,resolution,boolean,lenient,constructor,resolution,this,lenient,constructor,resolution,lenient,constructor,resolution
AbstractBeanDefinition -> public void setLenientConstructorResolution(boolean lenientConstructorResolution);1530174524;Specify whether to resolve constructors in lenient mode ({@code true},_which is the default) or to switch to strict resolution (throwing an exception_in case of ambiguous constructors that all match when converting the arguments,_whereas lenient mode would use the one with the 'closest' type matches).;public void setLenientConstructorResolution(boolean lenientConstructorResolution) {_		this.lenientConstructorResolution = lenientConstructorResolution__	};specify,whether,to,resolve,constructors,in,lenient,mode,code,true,which,is,the,default,or,to,switch,to,strict,resolution,throwing,an,exception,in,case,of,ambiguous,constructors,that,all,match,when,converting,the,arguments,whereas,lenient,mode,would,use,the,one,with,the,closest,type,matches;public,void,set,lenient,constructor,resolution,boolean,lenient,constructor,resolution,this,lenient,constructor,resolution,lenient,constructor,resolution
AbstractBeanDefinition -> public void setLenientConstructorResolution(boolean lenientConstructorResolution);1530190293;Specify whether to resolve constructors in lenient mode ({@code true},_which is the default) or to switch to strict resolution (throwing an exception_in case of ambiguous constructors that all match when converting the arguments,_whereas lenient mode would use the one with the 'closest' type matches).;public void setLenientConstructorResolution(boolean lenientConstructorResolution) {_		this.lenientConstructorResolution = lenientConstructorResolution__	};specify,whether,to,resolve,constructors,in,lenient,mode,code,true,which,is,the,default,or,to,switch,to,strict,resolution,throwing,an,exception,in,case,of,ambiguous,constructors,that,all,match,when,converting,the,arguments,whereas,lenient,mode,would,use,the,one,with,the,closest,type,matches;public,void,set,lenient,constructor,resolution,boolean,lenient,constructor,resolution,this,lenient,constructor,resolution,lenient,constructor,resolution
AbstractBeanDefinition -> public void setLenientConstructorResolution(boolean lenientConstructorResolution);1532981251;Specify whether to resolve constructors in lenient mode ({@code true},_which is the default) or to switch to strict resolution (throwing an exception_in case of ambiguous constructors that all match when converting the arguments,_whereas lenient mode would use the one with the 'closest' type matches).;public void setLenientConstructorResolution(boolean lenientConstructorResolution) {_		this.lenientConstructorResolution = lenientConstructorResolution__	};specify,whether,to,resolve,constructors,in,lenient,mode,code,true,which,is,the,default,or,to,switch,to,strict,resolution,throwing,an,exception,in,case,of,ambiguous,constructors,that,all,match,when,converting,the,arguments,whereas,lenient,mode,would,use,the,one,with,the,closest,type,matches;public,void,set,lenient,constructor,resolution,boolean,lenient,constructor,resolution,this,lenient,constructor,resolution,lenient,constructor,resolution
AbstractBeanDefinition -> public void setLenientConstructorResolution(boolean lenientConstructorResolution);1536863076;Specify whether to resolve constructors in lenient mode ({@code true},_which is the default) or to switch to strict resolution (throwing an exception_in case of ambiguous constructors that all match when converting the arguments,_whereas lenient mode would use the one with the 'closest' type matches).;public void setLenientConstructorResolution(boolean lenientConstructorResolution) {_		this.lenientConstructorResolution = lenientConstructorResolution__	};specify,whether,to,resolve,constructors,in,lenient,mode,code,true,which,is,the,default,or,to,switch,to,strict,resolution,throwing,an,exception,in,case,of,ambiguous,constructors,that,all,match,when,converting,the,arguments,whereas,lenient,mode,would,use,the,one,with,the,closest,type,matches;public,void,set,lenient,constructor,resolution,boolean,lenient,constructor,resolution,this,lenient,constructor,resolution,lenient,constructor,resolution
AbstractBeanDefinition -> public void setRole(int role);1328020251;Set the role hint for this <code>BeanDefinition</code>.;public void setRole(int role) {_		this.role = role__	};set,the,role,hint,for,this,code,bean,definition,code;public,void,set,role,int,role,this,role,role
AbstractBeanDefinition -> public void setRole(int role);1337202589;Set the role hint for this <code>BeanDefinition</code>.;public void setRole(int role) {_		this.role = role__	};set,the,role,hint,for,this,code,bean,definition,code;public,void,set,role,int,role,this,role,role
AbstractBeanDefinition -> public void setRole(int role);1356735495;Set the role hint for this {@code BeanDefinition}.;public void setRole(int role) {_		this.role = role__	};set,the,role,hint,for,this,code,bean,definition;public,void,set,role,int,role,this,role,role
AbstractBeanDefinition -> public void setRole(int role);1357119239;Set the role hint for this {@code BeanDefinition}.;public void setRole(int role) {_		this.role = role__	};set,the,role,hint,for,this,code,bean,definition;public,void,set,role,int,role,this,role,role
AbstractBeanDefinition -> public void setRole(int role);1367508310;Set the role hint for this {@code BeanDefinition}.;public void setRole(int role) {_		this.role = role__	};set,the,role,hint,for,this,code,bean,definition;public,void,set,role,int,role,this,role,role
AbstractBeanDefinition -> public void setRole(int role);1367943112;Set the role hint for this {@code BeanDefinition}.;public void setRole(int role) {_		this.role = role__	};set,the,role,hint,for,this,code,bean,definition;public,void,set,role,int,role,this,role,role
AbstractBeanDefinition -> public void setRole(int role);1368482696;Set the role hint for this {@code BeanDefinition}.;public void setRole(int role) {_		this.role = role__	};set,the,role,hint,for,this,code,bean,definition;public,void,set,role,int,role,this,role,role
AbstractBeanDefinition -> public void setRole(int role);1385412762;Set the role hint for this {@code BeanDefinition}.;public void setRole(int role) {_		this.role = role__	};set,the,role,hint,for,this,code,bean,definition;public,void,set,role,int,role,this,role,role
AbstractBeanDefinition -> public void setRole(int role);1392245317;Set the role hint for this {@code BeanDefinition}.;public void setRole(int role) {_		this.role = role__	};set,the,role,hint,for,this,code,bean,definition;public,void,set,role,int,role,this,role,role
AbstractBeanDefinition -> public void setRole(int role);1397163142;Set the role hint for this {@code BeanDefinition}.;public void setRole(int role) {_		this.role = role__	};set,the,role,hint,for,this,code,bean,definition;public,void,set,role,int,role,this,role,role
AbstractBeanDefinition -> public void setRole(int role);1398898390;Set the role hint for this {@code BeanDefinition}.;public void setRole(int role) {_		this.role = role__	};set,the,role,hint,for,this,code,bean,definition;public,void,set,role,int,role,this,role,role
AbstractBeanDefinition -> public void setRole(int role);1407511029;Set the role hint for this {@code BeanDefinition}.;public void setRole(int role) {_		this.role = role__	};set,the,role,hint,for,this,code,bean,definition;public,void,set,role,int,role,this,role,role
AbstractBeanDefinition -> public void setRole(int role);1432135182;Set the role hint for this {@code BeanDefinition}.;public void setRole(int role) {_		this.role = role__	};set,the,role,hint,for,this,code,bean,definition;public,void,set,role,int,role,this,role,role
AbstractBeanDefinition -> public void setRole(int role);1434204509;Set the role hint for this {@code BeanDefinition}.;public void setRole(int role) {_		this.role = role__	};set,the,role,hint,for,this,code,bean,definition;public,void,set,role,int,role,this,role,role
AbstractBeanDefinition -> public void setRole(int role);1447323728;Set the role hint for this {@code BeanDefinition}.;public void setRole(int role) {_		this.role = role__	};set,the,role,hint,for,this,code,bean,definition;public,void,set,role,int,role,this,role,role
AbstractBeanDefinition -> public void setRole(int role);1465226156;Set the role hint for this {@code BeanDefinition}.;public void setRole(int role) {_		this.role = role__	};set,the,role,hint,for,this,code,bean,definition;public,void,set,role,int,role,this,role,role
AbstractBeanDefinition -> public void setRole(int role);1467730834;Set the role hint for this {@code BeanDefinition}.;public void setRole(int role) {_		this.role = role__	};set,the,role,hint,for,this,code,bean,definition;public,void,set,role,int,role,this,role,role
AbstractBeanDefinition -> public void setRole(int role);1467846264;Set the role hint for this {@code BeanDefinition}.;public void setRole(int role) {_		this.role = role__	};set,the,role,hint,for,this,code,bean,definition;public,void,set,role,int,role,this,role,role
AbstractBeanDefinition -> public void setRole(int role);1482091545;Set the role hint for this {@code BeanDefinition}.;public void setRole(int role) {_		this.role = role__	};set,the,role,hint,for,this,code,bean,definition;public,void,set,role,int,role,this,role,role
AbstractBeanDefinition -> public void setRole(int role);1483093818;Set the role hint for this {@code BeanDefinition}.;public void setRole(int role) {_		this.role = role__	};set,the,role,hint,for,this,code,bean,definition;public,void,set,role,int,role,this,role,role
AbstractBeanDefinition -> public void setRole(int role);1495868221;Set the role hint for this {@code BeanDefinition}.;public void setRole(int role) {_		this.role = role__	};set,the,role,hint,for,this,code,bean,definition;public,void,set,role,int,role,this,role,role
AbstractBeanDefinition -> public void setRole(int role);1496837955;Set the role hint for this {@code BeanDefinition}.;public void setRole(int role) {_		this.role = role__	};set,the,role,hint,for,this,code,bean,definition;public,void,set,role,int,role,this,role,role
AbstractBeanDefinition -> public void setRole(int role);1498780456;Set the role hint for this {@code BeanDefinition}.;public void setRole(int role) {_		this.role = role__	};set,the,role,hint,for,this,code,bean,definition;public,void,set,role,int,role,this,role,role
AbstractBeanDefinition -> public void setRole(int role);1502974979;Set the role hint for this {@code BeanDefinition}.;public void setRole(int role) {_		this.role = role__	};set,the,role,hint,for,this,code,bean,definition;public,void,set,role,int,role,this,role,role
AbstractBeanDefinition -> public void setRole(int role);1503008029;Set the role hint for this {@code BeanDefinition}.;public void setRole(int role) {_		this.role = role__	};set,the,role,hint,for,this,code,bean,definition;public,void,set,role,int,role,this,role,role
AbstractBeanDefinition -> public void setRole(int role);1510606271;Set the role hint for this {@code BeanDefinition}.;public void setRole(int role) {_		this.role = role__	};set,the,role,hint,for,this,code,bean,definition;public,void,set,role,int,role,this,role,role
AbstractBeanDefinition -> public void setRole(int role);1510675876;Set the role hint for this {@code BeanDefinition}.;public void setRole(int role) {_		this.role = role__	};set,the,role,hint,for,this,code,bean,definition;public,void,set,role,int,role,this,role,role
AbstractBeanDefinition -> public void setRole(int role);1530174524;Set the role hint for this {@code BeanDefinition}.;public void setRole(int role) {_		this.role = role__	};set,the,role,hint,for,this,code,bean,definition;public,void,set,role,int,role,this,role,role
AbstractBeanDefinition -> public void setRole(int role);1530174524;Set the role hint for this {@code BeanDefinition}.;public void setRole(int role) {_		this.role = role__	};set,the,role,hint,for,this,code,bean,definition;public,void,set,role,int,role,this,role,role
AbstractBeanDefinition -> public void setRole(int role);1530174524;Set the role hint for this {@code BeanDefinition}.;public void setRole(int role) {_		this.role = role__	};set,the,role,hint,for,this,code,bean,definition;public,void,set,role,int,role,this,role,role
AbstractBeanDefinition -> public void setRole(int role);1530190293;Set the role hint for this {@code BeanDefinition}.;public void setRole(int role) {_		this.role = role__	};set,the,role,hint,for,this,code,bean,definition;public,void,set,role,int,role,this,role,role
AbstractBeanDefinition -> public void setRole(int role);1532981251;Set the role hint for this {@code BeanDefinition}.;public void setRole(int role) {_		this.role = role__	};set,the,role,hint,for,this,code,bean,definition;public,void,set,role,int,role,this,role,role
AbstractBeanDefinition -> public Set<AutowireCandidateQualifier> getQualifiers();1328020251;Return all registered qualifiers._@return the Set of {@link AutowireCandidateQualifier} objects.;public Set<AutowireCandidateQualifier> getQualifiers() {_		return new LinkedHashSet<AutowireCandidateQualifier>(this.qualifiers.values())__	};return,all,registered,qualifiers,return,the,set,of,link,autowire,candidate,qualifier,objects;public,set,autowire,candidate,qualifier,get,qualifiers,return,new,linked,hash,set,autowire,candidate,qualifier,this,qualifiers,values
AbstractBeanDefinition -> public Set<AutowireCandidateQualifier> getQualifiers();1337202589;Return all registered qualifiers._@return the Set of {@link AutowireCandidateQualifier} objects.;public Set<AutowireCandidateQualifier> getQualifiers() {_		return new LinkedHashSet<AutowireCandidateQualifier>(this.qualifiers.values())__	};return,all,registered,qualifiers,return,the,set,of,link,autowire,candidate,qualifier,objects;public,set,autowire,candidate,qualifier,get,qualifiers,return,new,linked,hash,set,autowire,candidate,qualifier,this,qualifiers,values
AbstractBeanDefinition -> public Set<AutowireCandidateQualifier> getQualifiers();1356735495;Return all registered qualifiers._@return the Set of {@link AutowireCandidateQualifier} objects.;public Set<AutowireCandidateQualifier> getQualifiers() {_		return new LinkedHashSet<AutowireCandidateQualifier>(this.qualifiers.values())__	};return,all,registered,qualifiers,return,the,set,of,link,autowire,candidate,qualifier,objects;public,set,autowire,candidate,qualifier,get,qualifiers,return,new,linked,hash,set,autowire,candidate,qualifier,this,qualifiers,values
AbstractBeanDefinition -> public Set<AutowireCandidateQualifier> getQualifiers();1357119239;Return all registered qualifiers._@return the Set of {@link AutowireCandidateQualifier} objects.;public Set<AutowireCandidateQualifier> getQualifiers() {_		return new LinkedHashSet<AutowireCandidateQualifier>(this.qualifiers.values())__	};return,all,registered,qualifiers,return,the,set,of,link,autowire,candidate,qualifier,objects;public,set,autowire,candidate,qualifier,get,qualifiers,return,new,linked,hash,set,autowire,candidate,qualifier,this,qualifiers,values
AbstractBeanDefinition -> public Set<AutowireCandidateQualifier> getQualifiers();1367508310;Return all registered qualifiers._@return the Set of {@link AutowireCandidateQualifier} objects.;public Set<AutowireCandidateQualifier> getQualifiers() {_		return new LinkedHashSet<AutowireCandidateQualifier>(this.qualifiers.values())__	};return,all,registered,qualifiers,return,the,set,of,link,autowire,candidate,qualifier,objects;public,set,autowire,candidate,qualifier,get,qualifiers,return,new,linked,hash,set,autowire,candidate,qualifier,this,qualifiers,values
AbstractBeanDefinition -> public Set<AutowireCandidateQualifier> getQualifiers();1367943112;Return all registered qualifiers._@return the Set of {@link AutowireCandidateQualifier} objects.;public Set<AutowireCandidateQualifier> getQualifiers() {_		return new LinkedHashSet<AutowireCandidateQualifier>(this.qualifiers.values())__	};return,all,registered,qualifiers,return,the,set,of,link,autowire,candidate,qualifier,objects;public,set,autowire,candidate,qualifier,get,qualifiers,return,new,linked,hash,set,autowire,candidate,qualifier,this,qualifiers,values
AbstractBeanDefinition -> public Set<AutowireCandidateQualifier> getQualifiers();1368482696;Return all registered qualifiers._@return the Set of {@link AutowireCandidateQualifier} objects.;public Set<AutowireCandidateQualifier> getQualifiers() {_		return new LinkedHashSet<AutowireCandidateQualifier>(this.qualifiers.values())__	};return,all,registered,qualifiers,return,the,set,of,link,autowire,candidate,qualifier,objects;public,set,autowire,candidate,qualifier,get,qualifiers,return,new,linked,hash,set,autowire,candidate,qualifier,this,qualifiers,values
AbstractBeanDefinition -> public Set<AutowireCandidateQualifier> getQualifiers();1385412762;Return all registered qualifiers._@return the Set of {@link AutowireCandidateQualifier} objects.;public Set<AutowireCandidateQualifier> getQualifiers() {_		return new LinkedHashSet<AutowireCandidateQualifier>(this.qualifiers.values())__	};return,all,registered,qualifiers,return,the,set,of,link,autowire,candidate,qualifier,objects;public,set,autowire,candidate,qualifier,get,qualifiers,return,new,linked,hash,set,autowire,candidate,qualifier,this,qualifiers,values
AbstractBeanDefinition -> public Set<AutowireCandidateQualifier> getQualifiers();1392245317;Return all registered qualifiers._@return the Set of {@link AutowireCandidateQualifier} objects.;public Set<AutowireCandidateQualifier> getQualifiers() {_		return new LinkedHashSet<AutowireCandidateQualifier>(this.qualifiers.values())__	};return,all,registered,qualifiers,return,the,set,of,link,autowire,candidate,qualifier,objects;public,set,autowire,candidate,qualifier,get,qualifiers,return,new,linked,hash,set,autowire,candidate,qualifier,this,qualifiers,values
AbstractBeanDefinition -> public Set<AutowireCandidateQualifier> getQualifiers();1397163142;Return all registered qualifiers._@return the Set of {@link AutowireCandidateQualifier} objects.;public Set<AutowireCandidateQualifier> getQualifiers() {_		return new LinkedHashSet<AutowireCandidateQualifier>(this.qualifiers.values())__	};return,all,registered,qualifiers,return,the,set,of,link,autowire,candidate,qualifier,objects;public,set,autowire,candidate,qualifier,get,qualifiers,return,new,linked,hash,set,autowire,candidate,qualifier,this,qualifiers,values
AbstractBeanDefinition -> public Set<AutowireCandidateQualifier> getQualifiers();1398898390;Return all registered qualifiers._@return the Set of {@link AutowireCandidateQualifier} objects.;public Set<AutowireCandidateQualifier> getQualifiers() {_		return new LinkedHashSet<AutowireCandidateQualifier>(this.qualifiers.values())__	};return,all,registered,qualifiers,return,the,set,of,link,autowire,candidate,qualifier,objects;public,set,autowire,candidate,qualifier,get,qualifiers,return,new,linked,hash,set,autowire,candidate,qualifier,this,qualifiers,values
AbstractBeanDefinition -> public Set<AutowireCandidateQualifier> getQualifiers();1407511029;Return all registered qualifiers._@return the Set of {@link AutowireCandidateQualifier} objects.;public Set<AutowireCandidateQualifier> getQualifiers() {_		return new LinkedHashSet<AutowireCandidateQualifier>(this.qualifiers.values())__	};return,all,registered,qualifiers,return,the,set,of,link,autowire,candidate,qualifier,objects;public,set,autowire,candidate,qualifier,get,qualifiers,return,new,linked,hash,set,autowire,candidate,qualifier,this,qualifiers,values
AbstractBeanDefinition -> public Set<AutowireCandidateQualifier> getQualifiers();1432135182;Return all registered qualifiers._@return the Set of {@link AutowireCandidateQualifier} objects.;public Set<AutowireCandidateQualifier> getQualifiers() {_		return new LinkedHashSet<AutowireCandidateQualifier>(this.qualifiers.values())__	};return,all,registered,qualifiers,return,the,set,of,link,autowire,candidate,qualifier,objects;public,set,autowire,candidate,qualifier,get,qualifiers,return,new,linked,hash,set,autowire,candidate,qualifier,this,qualifiers,values
AbstractBeanDefinition -> public Set<AutowireCandidateQualifier> getQualifiers();1434204509;Return all registered qualifiers._@return the Set of {@link AutowireCandidateQualifier} objects.;public Set<AutowireCandidateQualifier> getQualifiers() {_		return new LinkedHashSet<AutowireCandidateQualifier>(this.qualifiers.values())__	};return,all,registered,qualifiers,return,the,set,of,link,autowire,candidate,qualifier,objects;public,set,autowire,candidate,qualifier,get,qualifiers,return,new,linked,hash,set,autowire,candidate,qualifier,this,qualifiers,values
AbstractBeanDefinition -> public Set<AutowireCandidateQualifier> getQualifiers();1447323728;Return all registered qualifiers._@return the Set of {@link AutowireCandidateQualifier} objects.;public Set<AutowireCandidateQualifier> getQualifiers() {_		return new LinkedHashSet<AutowireCandidateQualifier>(this.qualifiers.values())__	};return,all,registered,qualifiers,return,the,set,of,link,autowire,candidate,qualifier,objects;public,set,autowire,candidate,qualifier,get,qualifiers,return,new,linked,hash,set,autowire,candidate,qualifier,this,qualifiers,values
AbstractBeanDefinition -> public Set<AutowireCandidateQualifier> getQualifiers();1465226156;Return all registered qualifiers._@return the Set of {@link AutowireCandidateQualifier} objects.;public Set<AutowireCandidateQualifier> getQualifiers() {_		return new LinkedHashSet<AutowireCandidateQualifier>(this.qualifiers.values())__	};return,all,registered,qualifiers,return,the,set,of,link,autowire,candidate,qualifier,objects;public,set,autowire,candidate,qualifier,get,qualifiers,return,new,linked,hash,set,autowire,candidate,qualifier,this,qualifiers,values
AbstractBeanDefinition -> public Set<AutowireCandidateQualifier> getQualifiers();1467730834;Return all registered qualifiers._@return the Set of {@link AutowireCandidateQualifier} objects.;public Set<AutowireCandidateQualifier> getQualifiers() {_		return new LinkedHashSet<>(this.qualifiers.values())__	};return,all,registered,qualifiers,return,the,set,of,link,autowire,candidate,qualifier,objects;public,set,autowire,candidate,qualifier,get,qualifiers,return,new,linked,hash,set,this,qualifiers,values
AbstractBeanDefinition -> public Set<AutowireCandidateQualifier> getQualifiers();1467846264;Return all registered qualifiers._@return the Set of {@link AutowireCandidateQualifier} objects.;public Set<AutowireCandidateQualifier> getQualifiers() {_		return new LinkedHashSet<>(this.qualifiers.values())__	};return,all,registered,qualifiers,return,the,set,of,link,autowire,candidate,qualifier,objects;public,set,autowire,candidate,qualifier,get,qualifiers,return,new,linked,hash,set,this,qualifiers,values
AbstractBeanDefinition -> public Set<AutowireCandidateQualifier> getQualifiers();1482091545;Return all registered qualifiers._@return the Set of {@link AutowireCandidateQualifier} objects.;public Set<AutowireCandidateQualifier> getQualifiers() {_		return new LinkedHashSet<>(this.qualifiers.values())__	};return,all,registered,qualifiers,return,the,set,of,link,autowire,candidate,qualifier,objects;public,set,autowire,candidate,qualifier,get,qualifiers,return,new,linked,hash,set,this,qualifiers,values
AbstractBeanDefinition -> public Set<AutowireCandidateQualifier> getQualifiers();1483093818;Return all registered qualifiers._@return the Set of {@link AutowireCandidateQualifier} objects.;public Set<AutowireCandidateQualifier> getQualifiers() {_		return new LinkedHashSet<>(this.qualifiers.values())__	};return,all,registered,qualifiers,return,the,set,of,link,autowire,candidate,qualifier,objects;public,set,autowire,candidate,qualifier,get,qualifiers,return,new,linked,hash,set,this,qualifiers,values
AbstractBeanDefinition -> public Set<AutowireCandidateQualifier> getQualifiers();1495868221;Return all registered qualifiers._@return the Set of {@link AutowireCandidateQualifier} objects.;public Set<AutowireCandidateQualifier> getQualifiers() {_		return new LinkedHashSet<>(this.qualifiers.values())__	};return,all,registered,qualifiers,return,the,set,of,link,autowire,candidate,qualifier,objects;public,set,autowire,candidate,qualifier,get,qualifiers,return,new,linked,hash,set,this,qualifiers,values
AbstractBeanDefinition -> public Set<AutowireCandidateQualifier> getQualifiers();1496837955;Return all registered qualifiers._@return the Set of {@link AutowireCandidateQualifier} objects.;public Set<AutowireCandidateQualifier> getQualifiers() {_		return new LinkedHashSet<>(this.qualifiers.values())__	};return,all,registered,qualifiers,return,the,set,of,link,autowire,candidate,qualifier,objects;public,set,autowire,candidate,qualifier,get,qualifiers,return,new,linked,hash,set,this,qualifiers,values
AbstractBeanDefinition -> public Set<AutowireCandidateQualifier> getQualifiers();1498780456;Return all registered qualifiers._@return the Set of {@link AutowireCandidateQualifier} objects.;public Set<AutowireCandidateQualifier> getQualifiers() {_		return new LinkedHashSet<>(this.qualifiers.values())__	};return,all,registered,qualifiers,return,the,set,of,link,autowire,candidate,qualifier,objects;public,set,autowire,candidate,qualifier,get,qualifiers,return,new,linked,hash,set,this,qualifiers,values
AbstractBeanDefinition -> public Set<AutowireCandidateQualifier> getQualifiers();1502974979;Return all registered qualifiers._@return the Set of {@link AutowireCandidateQualifier} objects.;public Set<AutowireCandidateQualifier> getQualifiers() {_		return new LinkedHashSet<>(this.qualifiers.values())__	};return,all,registered,qualifiers,return,the,set,of,link,autowire,candidate,qualifier,objects;public,set,autowire,candidate,qualifier,get,qualifiers,return,new,linked,hash,set,this,qualifiers,values
AbstractBeanDefinition -> public Set<AutowireCandidateQualifier> getQualifiers();1503008029;Return all registered qualifiers._@return the Set of {@link AutowireCandidateQualifier} objects.;public Set<AutowireCandidateQualifier> getQualifiers() {_		return new LinkedHashSet<>(this.qualifiers.values())__	};return,all,registered,qualifiers,return,the,set,of,link,autowire,candidate,qualifier,objects;public,set,autowire,candidate,qualifier,get,qualifiers,return,new,linked,hash,set,this,qualifiers,values
AbstractBeanDefinition -> public Set<AutowireCandidateQualifier> getQualifiers();1510606271;Return all registered qualifiers._@return the Set of {@link AutowireCandidateQualifier} objects.;public Set<AutowireCandidateQualifier> getQualifiers() {_		return new LinkedHashSet<>(this.qualifiers.values())__	};return,all,registered,qualifiers,return,the,set,of,link,autowire,candidate,qualifier,objects;public,set,autowire,candidate,qualifier,get,qualifiers,return,new,linked,hash,set,this,qualifiers,values
AbstractBeanDefinition -> public Set<AutowireCandidateQualifier> getQualifiers();1510675876;Return all registered qualifiers._@return the Set of {@link AutowireCandidateQualifier} objects.;public Set<AutowireCandidateQualifier> getQualifiers() {_		return new LinkedHashSet<>(this.qualifiers.values())__	};return,all,registered,qualifiers,return,the,set,of,link,autowire,candidate,qualifier,objects;public,set,autowire,candidate,qualifier,get,qualifiers,return,new,linked,hash,set,this,qualifiers,values
AbstractBeanDefinition -> public Set<AutowireCandidateQualifier> getQualifiers();1530174524;Return all registered qualifiers._@return the Set of {@link AutowireCandidateQualifier} objects.;public Set<AutowireCandidateQualifier> getQualifiers() {_		return new LinkedHashSet<>(this.qualifiers.values())__	};return,all,registered,qualifiers,return,the,set,of,link,autowire,candidate,qualifier,objects;public,set,autowire,candidate,qualifier,get,qualifiers,return,new,linked,hash,set,this,qualifiers,values
AbstractBeanDefinition -> public Set<AutowireCandidateQualifier> getQualifiers();1530174524;Return all registered qualifiers._@return the Set of {@link AutowireCandidateQualifier} objects.;public Set<AutowireCandidateQualifier> getQualifiers() {_		return new LinkedHashSet<>(this.qualifiers.values())__	};return,all,registered,qualifiers,return,the,set,of,link,autowire,candidate,qualifier,objects;public,set,autowire,candidate,qualifier,get,qualifiers,return,new,linked,hash,set,this,qualifiers,values
AbstractBeanDefinition -> public Set<AutowireCandidateQualifier> getQualifiers();1530174524;Return all registered qualifiers._@return the Set of {@link AutowireCandidateQualifier} objects.;public Set<AutowireCandidateQualifier> getQualifiers() {_		return new LinkedHashSet<>(this.qualifiers.values())__	};return,all,registered,qualifiers,return,the,set,of,link,autowire,candidate,qualifier,objects;public,set,autowire,candidate,qualifier,get,qualifiers,return,new,linked,hash,set,this,qualifiers,values
AbstractBeanDefinition -> public Set<AutowireCandidateQualifier> getQualifiers();1530190293;Return all registered qualifiers._@return the Set of {@link AutowireCandidateQualifier} objects.;public Set<AutowireCandidateQualifier> getQualifiers() {_		return new LinkedHashSet<>(this.qualifiers.values())__	};return,all,registered,qualifiers,return,the,set,of,link,autowire,candidate,qualifier,objects;public,set,autowire,candidate,qualifier,get,qualifiers,return,new,linked,hash,set,this,qualifiers,values
AbstractBeanDefinition -> public Set<AutowireCandidateQualifier> getQualifiers();1532981251;Return all registered qualifiers._@return the Set of {@link AutowireCandidateQualifier} objects.;public Set<AutowireCandidateQualifier> getQualifiers() {_		return new LinkedHashSet<>(this.qualifiers.values())__	};return,all,registered,qualifiers,return,the,set,of,link,autowire,candidate,qualifier,objects;public,set,autowire,candidate,qualifier,get,qualifiers,return,new,linked,hash,set,this,qualifiers,values
AbstractBeanDefinition -> public Set<AutowireCandidateQualifier> getQualifiers();1536863076;Return all registered qualifiers._@return the Set of {@link AutowireCandidateQualifier} objects.;public Set<AutowireCandidateQualifier> getQualifiers() {_		return new LinkedHashSet<>(this.qualifiers.values())__	};return,all,registered,qualifiers,return,the,set,of,link,autowire,candidate,qualifier,objects;public,set,autowire,candidate,qualifier,get,qualifiers,return,new,linked,hash,set,this,qualifiers,values
AbstractBeanDefinition -> @Override 	public String getDescription();1483093818;Return a human-readable description of this bean definition.;@Override_	public String getDescription() {_		return this.description__	};return,a,human,readable,description,of,this,bean,definition;override,public,string,get,description,return,this,description
AbstractBeanDefinition -> @Override 	public String getDescription();1495868221;Return a human-readable description of this bean definition.;@Override_	public String getDescription() {_		return this.description__	};return,a,human,readable,description,of,this,bean,definition;override,public,string,get,description,return,this,description
AbstractBeanDefinition -> @Override 	public String getDescription();1496837955;Return a human-readable description of this bean definition.;@Override_	public String getDescription() {_		return this.description__	};return,a,human,readable,description,of,this,bean,definition;override,public,string,get,description,return,this,description
AbstractBeanDefinition -> @Nullable 	public Class<?> resolveBeanClass(@Nullable ClassLoader classLoader) throws ClassNotFoundException;1498780456;Determine the class of the wrapped bean, resolving it from a_specified class name if necessary. Will also reload a specified_Class from its name when called with the bean class already resolved._@param classLoader the ClassLoader to use for resolving a (potential) class name_@return the resolved bean class_@throws ClassNotFoundException if the class name could be resolved;@Nullable_	public Class<?> resolveBeanClass(@Nullable ClassLoader classLoader) throws ClassNotFoundException {_		String className = getBeanClassName()__		if (className == null) {_			return null__		}_		Class<?> resolvedClass = ClassUtils.forName(className, classLoader)__		this.beanClass = resolvedClass__		return resolvedClass__	};determine,the,class,of,the,wrapped,bean,resolving,it,from,a,specified,class,name,if,necessary,will,also,reload,a,specified,class,from,its,name,when,called,with,the,bean,class,already,resolved,param,class,loader,the,class,loader,to,use,for,resolving,a,potential,class,name,return,the,resolved,bean,class,throws,class,not,found,exception,if,the,class,name,could,be,resolved;nullable,public,class,resolve,bean,class,nullable,class,loader,class,loader,throws,class,not,found,exception,string,class,name,get,bean,class,name,if,class,name,null,return,null,class,resolved,class,class,utils,for,name,class,name,class,loader,this,bean,class,resolved,class,return,resolved,class
AbstractBeanDefinition -> @Nullable 	public Class<?> resolveBeanClass(@Nullable ClassLoader classLoader) throws ClassNotFoundException;1502974979;Determine the class of the wrapped bean, resolving it from a_specified class name if necessary. Will also reload a specified_Class from its name when called with the bean class already resolved._@param classLoader the ClassLoader to use for resolving a (potential) class name_@return the resolved bean class_@throws ClassNotFoundException if the class name could be resolved;@Nullable_	public Class<?> resolveBeanClass(@Nullable ClassLoader classLoader) throws ClassNotFoundException {_		String className = getBeanClassName()__		if (className == null) {_			return null__		}_		Class<?> resolvedClass = ClassUtils.forName(className, classLoader)__		this.beanClass = resolvedClass__		return resolvedClass__	};determine,the,class,of,the,wrapped,bean,resolving,it,from,a,specified,class,name,if,necessary,will,also,reload,a,specified,class,from,its,name,when,called,with,the,bean,class,already,resolved,param,class,loader,the,class,loader,to,use,for,resolving,a,potential,class,name,return,the,resolved,bean,class,throws,class,not,found,exception,if,the,class,name,could,be,resolved;nullable,public,class,resolve,bean,class,nullable,class,loader,class,loader,throws,class,not,found,exception,string,class,name,get,bean,class,name,if,class,name,null,return,null,class,resolved,class,class,utils,for,name,class,name,class,loader,this,bean,class,resolved,class,return,resolved,class
AbstractBeanDefinition -> @Nullable 	public Class<?> resolveBeanClass(@Nullable ClassLoader classLoader) throws ClassNotFoundException;1503008029;Determine the class of the wrapped bean, resolving it from a_specified class name if necessary. Will also reload a specified_Class from its name when called with the bean class already resolved._@param classLoader the ClassLoader to use for resolving a (potential) class name_@return the resolved bean class_@throws ClassNotFoundException if the class name could be resolved;@Nullable_	public Class<?> resolveBeanClass(@Nullable ClassLoader classLoader) throws ClassNotFoundException {_		String className = getBeanClassName()__		if (className == null) {_			return null__		}_		Class<?> resolvedClass = ClassUtils.forName(className, classLoader)__		this.beanClass = resolvedClass__		return resolvedClass__	};determine,the,class,of,the,wrapped,bean,resolving,it,from,a,specified,class,name,if,necessary,will,also,reload,a,specified,class,from,its,name,when,called,with,the,bean,class,already,resolved,param,class,loader,the,class,loader,to,use,for,resolving,a,potential,class,name,return,the,resolved,bean,class,throws,class,not,found,exception,if,the,class,name,could,be,resolved;nullable,public,class,resolve,bean,class,nullable,class,loader,class,loader,throws,class,not,found,exception,string,class,name,get,bean,class,name,if,class,name,null,return,null,class,resolved,class,class,utils,for,name,class,name,class,loader,this,bean,class,resolved,class,return,resolved,class
AbstractBeanDefinition -> @Nullable 	public Class<?> resolveBeanClass(@Nullable ClassLoader classLoader) throws ClassNotFoundException;1510606271;Determine the class of the wrapped bean, resolving it from a_specified class name if necessary. Will also reload a specified_Class from its name when called with the bean class already resolved._@param classLoader the ClassLoader to use for resolving a (potential) class name_@return the resolved bean class_@throws ClassNotFoundException if the class name could be resolved;@Nullable_	public Class<?> resolveBeanClass(@Nullable ClassLoader classLoader) throws ClassNotFoundException {_		String className = getBeanClassName()__		if (className == null) {_			return null__		}_		Class<?> resolvedClass = ClassUtils.forName(className, classLoader)__		this.beanClass = resolvedClass__		return resolvedClass__	};determine,the,class,of,the,wrapped,bean,resolving,it,from,a,specified,class,name,if,necessary,will,also,reload,a,specified,class,from,its,name,when,called,with,the,bean,class,already,resolved,param,class,loader,the,class,loader,to,use,for,resolving,a,potential,class,name,return,the,resolved,bean,class,throws,class,not,found,exception,if,the,class,name,could,be,resolved;nullable,public,class,resolve,bean,class,nullable,class,loader,class,loader,throws,class,not,found,exception,string,class,name,get,bean,class,name,if,class,name,null,return,null,class,resolved,class,class,utils,for,name,class,name,class,loader,this,bean,class,resolved,class,return,resolved,class
AbstractBeanDefinition -> @Nullable 	public Class<?> resolveBeanClass(@Nullable ClassLoader classLoader) throws ClassNotFoundException;1510675876;Determine the class of the wrapped bean, resolving it from a_specified class name if necessary. Will also reload a specified_Class from its name when called with the bean class already resolved._@param classLoader the ClassLoader to use for resolving a (potential) class name_@return the resolved bean class_@throws ClassNotFoundException if the class name could be resolved;@Nullable_	public Class<?> resolveBeanClass(@Nullable ClassLoader classLoader) throws ClassNotFoundException {_		String className = getBeanClassName()__		if (className == null) {_			return null__		}_		Class<?> resolvedClass = ClassUtils.forName(className, classLoader)__		this.beanClass = resolvedClass__		return resolvedClass__	};determine,the,class,of,the,wrapped,bean,resolving,it,from,a,specified,class,name,if,necessary,will,also,reload,a,specified,class,from,its,name,when,called,with,the,bean,class,already,resolved,param,class,loader,the,class,loader,to,use,for,resolving,a,potential,class,name,return,the,resolved,bean,class,throws,class,not,found,exception,if,the,class,name,could,be,resolved;nullable,public,class,resolve,bean,class,nullable,class,loader,class,loader,throws,class,not,found,exception,string,class,name,get,bean,class,name,if,class,name,null,return,null,class,resolved,class,class,utils,for,name,class,name,class,loader,this,bean,class,resolved,class,return,resolved,class
AbstractBeanDefinition -> @Nullable 	public Class<?> resolveBeanClass(@Nullable ClassLoader classLoader) throws ClassNotFoundException;1530174524;Determine the class of the wrapped bean, resolving it from a_specified class name if necessary. Will also reload a specified_Class from its name when called with the bean class already resolved._@param classLoader the ClassLoader to use for resolving a (potential) class name_@return the resolved bean class_@throws ClassNotFoundException if the class name could be resolved;@Nullable_	public Class<?> resolveBeanClass(@Nullable ClassLoader classLoader) throws ClassNotFoundException {_		String className = getBeanClassName()__		if (className == null) {_			return null__		}_		Class<?> resolvedClass = ClassUtils.forName(className, classLoader)__		this.beanClass = resolvedClass__		return resolvedClass__	};determine,the,class,of,the,wrapped,bean,resolving,it,from,a,specified,class,name,if,necessary,will,also,reload,a,specified,class,from,its,name,when,called,with,the,bean,class,already,resolved,param,class,loader,the,class,loader,to,use,for,resolving,a,potential,class,name,return,the,resolved,bean,class,throws,class,not,found,exception,if,the,class,name,could,be,resolved;nullable,public,class,resolve,bean,class,nullable,class,loader,class,loader,throws,class,not,found,exception,string,class,name,get,bean,class,name,if,class,name,null,return,null,class,resolved,class,class,utils,for,name,class,name,class,loader,this,bean,class,resolved,class,return,resolved,class
AbstractBeanDefinition -> @Nullable 	public Class<?> resolveBeanClass(@Nullable ClassLoader classLoader) throws ClassNotFoundException;1530174524;Determine the class of the wrapped bean, resolving it from a_specified class name if necessary. Will also reload a specified_Class from its name when called with the bean class already resolved._@param classLoader the ClassLoader to use for resolving a (potential) class name_@return the resolved bean class_@throws ClassNotFoundException if the class name could be resolved;@Nullable_	public Class<?> resolveBeanClass(@Nullable ClassLoader classLoader) throws ClassNotFoundException {_		String className = getBeanClassName()__		if (className == null) {_			return null__		}_		Class<?> resolvedClass = ClassUtils.forName(className, classLoader)__		this.beanClass = resolvedClass__		return resolvedClass__	};determine,the,class,of,the,wrapped,bean,resolving,it,from,a,specified,class,name,if,necessary,will,also,reload,a,specified,class,from,its,name,when,called,with,the,bean,class,already,resolved,param,class,loader,the,class,loader,to,use,for,resolving,a,potential,class,name,return,the,resolved,bean,class,throws,class,not,found,exception,if,the,class,name,could,be,resolved;nullable,public,class,resolve,bean,class,nullable,class,loader,class,loader,throws,class,not,found,exception,string,class,name,get,bean,class,name,if,class,name,null,return,null,class,resolved,class,class,utils,for,name,class,name,class,loader,this,bean,class,resolved,class,return,resolved,class
AbstractBeanDefinition -> @Nullable 	public Class<?> resolveBeanClass(@Nullable ClassLoader classLoader) throws ClassNotFoundException;1530174524;Determine the class of the wrapped bean, resolving it from a_specified class name if necessary. Will also reload a specified_Class from its name when called with the bean class already resolved._@param classLoader the ClassLoader to use for resolving a (potential) class name_@return the resolved bean class_@throws ClassNotFoundException if the class name could be resolved;@Nullable_	public Class<?> resolveBeanClass(@Nullable ClassLoader classLoader) throws ClassNotFoundException {_		String className = getBeanClassName()__		if (className == null) {_			return null__		}_		Class<?> resolvedClass = ClassUtils.forName(className, classLoader)__		this.beanClass = resolvedClass__		return resolvedClass__	};determine,the,class,of,the,wrapped,bean,resolving,it,from,a,specified,class,name,if,necessary,will,also,reload,a,specified,class,from,its,name,when,called,with,the,bean,class,already,resolved,param,class,loader,the,class,loader,to,use,for,resolving,a,potential,class,name,return,the,resolved,bean,class,throws,class,not,found,exception,if,the,class,name,could,be,resolved;nullable,public,class,resolve,bean,class,nullable,class,loader,class,loader,throws,class,not,found,exception,string,class,name,get,bean,class,name,if,class,name,null,return,null,class,resolved,class,class,utils,for,name,class,name,class,loader,this,bean,class,resolved,class,return,resolved,class
AbstractBeanDefinition -> @Nullable 	public Class<?> resolveBeanClass(@Nullable ClassLoader classLoader) throws ClassNotFoundException;1530190293;Determine the class of the wrapped bean, resolving it from a_specified class name if necessary. Will also reload a specified_Class from its name when called with the bean class already resolved._@param classLoader the ClassLoader to use for resolving a (potential) class name_@return the resolved bean class_@throws ClassNotFoundException if the class name could be resolved;@Nullable_	public Class<?> resolveBeanClass(@Nullable ClassLoader classLoader) throws ClassNotFoundException {_		String className = getBeanClassName()__		if (className == null) {_			return null__		}_		Class<?> resolvedClass = ClassUtils.forName(className, classLoader)__		this.beanClass = resolvedClass__		return resolvedClass__	};determine,the,class,of,the,wrapped,bean,resolving,it,from,a,specified,class,name,if,necessary,will,also,reload,a,specified,class,from,its,name,when,called,with,the,bean,class,already,resolved,param,class,loader,the,class,loader,to,use,for,resolving,a,potential,class,name,return,the,resolved,bean,class,throws,class,not,found,exception,if,the,class,name,could,be,resolved;nullable,public,class,resolve,bean,class,nullable,class,loader,class,loader,throws,class,not,found,exception,string,class,name,get,bean,class,name,if,class,name,null,return,null,class,resolved,class,class,utils,for,name,class,name,class,loader,this,bean,class,resolved,class,return,resolved,class
AbstractBeanDefinition -> @Nullable 	public Class<?> resolveBeanClass(@Nullable ClassLoader classLoader) throws ClassNotFoundException;1532981251;Determine the class of the wrapped bean, resolving it from a_specified class name if necessary. Will also reload a specified_Class from its name when called with the bean class already resolved._@param classLoader the ClassLoader to use for resolving a (potential) class name_@return the resolved bean class_@throws ClassNotFoundException if the class name could be resolved;@Nullable_	public Class<?> resolveBeanClass(@Nullable ClassLoader classLoader) throws ClassNotFoundException {_		String className = getBeanClassName()__		if (className == null) {_			return null__		}_		Class<?> resolvedClass = ClassUtils.forName(className, classLoader)__		this.beanClass = resolvedClass__		return resolvedClass__	};determine,the,class,of,the,wrapped,bean,resolving,it,from,a,specified,class,name,if,necessary,will,also,reload,a,specified,class,from,its,name,when,called,with,the,bean,class,already,resolved,param,class,loader,the,class,loader,to,use,for,resolving,a,potential,class,name,return,the,resolved,bean,class,throws,class,not,found,exception,if,the,class,name,could,be,resolved;nullable,public,class,resolve,bean,class,nullable,class,loader,class,loader,throws,class,not,found,exception,string,class,name,get,bean,class,name,if,class,name,null,return,null,class,resolved,class,class,utils,for,name,class,name,class,loader,this,bean,class,resolved,class,return,resolved,class
AbstractBeanDefinition -> @Nullable 	public Class<?> resolveBeanClass(@Nullable ClassLoader classLoader) throws ClassNotFoundException;1536863076;Determine the class of the wrapped bean, resolving it from a_specified class name if necessary. Will also reload a specified_Class from its name when called with the bean class already resolved._@param classLoader the ClassLoader to use for resolving a (potential) class name_@return the resolved bean class_@throws ClassNotFoundException if the class name could be resolved;@Nullable_	public Class<?> resolveBeanClass(@Nullable ClassLoader classLoader) throws ClassNotFoundException {_		String className = getBeanClassName()__		if (className == null) {_			return null__		}_		Class<?> resolvedClass = ClassUtils.forName(className, classLoader)__		this.beanClass = resolvedClass__		return resolvedClass__	};determine,the,class,of,the,wrapped,bean,resolving,it,from,a,specified,class,name,if,necessary,will,also,reload,a,specified,class,from,its,name,when,called,with,the,bean,class,already,resolved,param,class,loader,the,class,loader,to,use,for,resolving,a,potential,class,name,return,the,resolved,bean,class,throws,class,not,found,exception,if,the,class,name,could,be,resolved;nullable,public,class,resolve,bean,class,nullable,class,loader,class,loader,throws,class,not,found,exception,string,class,name,get,bean,class,name,if,class,name,null,return,null,class,resolved,class,class,utils,for,name,class,name,class,loader,this,bean,class,resolved,class,return,resolved,class
AbstractBeanDefinition -> @Override 	public boolean hasPropertyValues();1510675876;Return if there are property values values defined for this bean._@since 5.0.2;@Override_	public boolean hasPropertyValues() {_		return (this.propertyValues != null && !this.propertyValues.isEmpty())__	};return,if,there,are,property,values,values,defined,for,this,bean,since,5,0,2;override,public,boolean,has,property,values,return,this,property,values,null,this,property,values,is,empty
AbstractBeanDefinition -> @Override 	public boolean hasPropertyValues();1530174524;Return if there are property values values defined for this bean._@since 5.0.2;@Override_	public boolean hasPropertyValues() {_		return (this.propertyValues != null && !this.propertyValues.isEmpty())__	};return,if,there,are,property,values,values,defined,for,this,bean,since,5,0,2;override,public,boolean,has,property,values,return,this,property,values,null,this,property,values,is,empty
AbstractBeanDefinition -> @Override 	public boolean hasPropertyValues();1530174524;Return if there are property values values defined for this bean._@since 5.0.2;@Override_	public boolean hasPropertyValues() {_		return (this.propertyValues != null && !this.propertyValues.isEmpty())__	};return,if,there,are,property,values,values,defined,for,this,bean,since,5,0,2;override,public,boolean,has,property,values,return,this,property,values,null,this,property,values,is,empty
AbstractBeanDefinition -> @Override 	public boolean hasPropertyValues();1530174524;Return if there are property values values defined for this bean._@since 5.0.2;@Override_	public boolean hasPropertyValues() {_		return (this.propertyValues != null && !this.propertyValues.isEmpty())__	};return,if,there,are,property,values,values,defined,for,this,bean,since,5,0,2;override,public,boolean,has,property,values,return,this,property,values,null,this,property,values,is,empty
AbstractBeanDefinition -> @Override 	public boolean hasPropertyValues();1530190293;Return if there are property values values defined for this bean._@since 5.0.2;@Override_	public boolean hasPropertyValues() {_		return (this.propertyValues != null && !this.propertyValues.isEmpty())__	};return,if,there,are,property,values,values,defined,for,this,bean,since,5,0,2;override,public,boolean,has,property,values,return,this,property,values,null,this,property,values,is,empty
AbstractBeanDefinition -> @Override 	public boolean hasPropertyValues();1532981251;Return if there are property values values defined for this bean._@since 5.0.2;@Override_	public boolean hasPropertyValues() {_		return (this.propertyValues != null && !this.propertyValues.isEmpty())__	};return,if,there,are,property,values,values,defined,for,this,bean,since,5,0,2;override,public,boolean,has,property,values,return,this,property,values,null,this,property,values,is,empty
AbstractBeanDefinition -> @Override 	public boolean hasPropertyValues();1536863076;Return if there are property values values defined for this bean._@since 5.0.2;@Override_	public boolean hasPropertyValues() {_		return (this.propertyValues != null && !this.propertyValues.isEmpty())__	};return,if,there,are,property,values,values,defined,for,this,bean,since,5,0,2;override,public,boolean,has,property,values,return,this,property,values,null,this,property,values,is,empty
AbstractBeanDefinition -> protected AbstractBeanDefinition();1328020251;Create a new AbstractBeanDefinition with default settings.;protected AbstractBeanDefinition() {_		this(null, null)__	};create,a,new,abstract,bean,definition,with,default,settings;protected,abstract,bean,definition,this,null,null
AbstractBeanDefinition -> protected AbstractBeanDefinition();1337202589;Create a new AbstractBeanDefinition with default settings.;protected AbstractBeanDefinition() {_		this(null, null)__	};create,a,new,abstract,bean,definition,with,default,settings;protected,abstract,bean,definition,this,null,null
AbstractBeanDefinition -> protected AbstractBeanDefinition();1356735495;Create a new AbstractBeanDefinition with default settings.;protected AbstractBeanDefinition() {_		this(null, null)__	};create,a,new,abstract,bean,definition,with,default,settings;protected,abstract,bean,definition,this,null,null
AbstractBeanDefinition -> protected AbstractBeanDefinition();1357119239;Create a new AbstractBeanDefinition with default settings.;protected AbstractBeanDefinition() {_		this(null, null)__	};create,a,new,abstract,bean,definition,with,default,settings;protected,abstract,bean,definition,this,null,null
AbstractBeanDefinition -> protected AbstractBeanDefinition();1367508310;Create a new AbstractBeanDefinition with default settings.;protected AbstractBeanDefinition() {_		this(null, null)__	};create,a,new,abstract,bean,definition,with,default,settings;protected,abstract,bean,definition,this,null,null
AbstractBeanDefinition -> protected AbstractBeanDefinition();1367943112;Create a new AbstractBeanDefinition with default settings.;protected AbstractBeanDefinition() {_		this(null, null)__	};create,a,new,abstract,bean,definition,with,default,settings;protected,abstract,bean,definition,this,null,null
AbstractBeanDefinition -> protected AbstractBeanDefinition();1368482696;Create a new AbstractBeanDefinition with default settings.;protected AbstractBeanDefinition() {_		this(null, null)__	};create,a,new,abstract,bean,definition,with,default,settings;protected,abstract,bean,definition,this,null,null
AbstractBeanDefinition -> protected AbstractBeanDefinition();1385412762;Create a new AbstractBeanDefinition with default settings.;protected AbstractBeanDefinition() {_		this(null, null)__	};create,a,new,abstract,bean,definition,with,default,settings;protected,abstract,bean,definition,this,null,null
AbstractBeanDefinition -> protected AbstractBeanDefinition();1392245317;Create a new AbstractBeanDefinition with default settings.;protected AbstractBeanDefinition() {_		this(null, null)__	};create,a,new,abstract,bean,definition,with,default,settings;protected,abstract,bean,definition,this,null,null
AbstractBeanDefinition -> protected AbstractBeanDefinition();1397163142;Create a new AbstractBeanDefinition with default settings.;protected AbstractBeanDefinition() {_		this(null, null)__	};create,a,new,abstract,bean,definition,with,default,settings;protected,abstract,bean,definition,this,null,null
AbstractBeanDefinition -> protected AbstractBeanDefinition();1398898390;Create a new AbstractBeanDefinition with default settings.;protected AbstractBeanDefinition() {_		this(null, null)__	};create,a,new,abstract,bean,definition,with,default,settings;protected,abstract,bean,definition,this,null,null
AbstractBeanDefinition -> protected AbstractBeanDefinition();1407511029;Create a new AbstractBeanDefinition with default settings.;protected AbstractBeanDefinition() {_		this(null, null)__	};create,a,new,abstract,bean,definition,with,default,settings;protected,abstract,bean,definition,this,null,null
AbstractBeanDefinition -> protected AbstractBeanDefinition();1432135182;Create a new AbstractBeanDefinition with default settings.;protected AbstractBeanDefinition() {_		this(null, null)__	};create,a,new,abstract,bean,definition,with,default,settings;protected,abstract,bean,definition,this,null,null
AbstractBeanDefinition -> protected AbstractBeanDefinition();1434204509;Create a new AbstractBeanDefinition with default settings.;protected AbstractBeanDefinition() {_		this(null, null)__	};create,a,new,abstract,bean,definition,with,default,settings;protected,abstract,bean,definition,this,null,null
AbstractBeanDefinition -> protected AbstractBeanDefinition();1447323728;Create a new AbstractBeanDefinition with default settings.;protected AbstractBeanDefinition() {_		this(null, null)__	};create,a,new,abstract,bean,definition,with,default,settings;protected,abstract,bean,definition,this,null,null
AbstractBeanDefinition -> protected AbstractBeanDefinition();1465226156;Create a new AbstractBeanDefinition with default settings.;protected AbstractBeanDefinition() {_		this(null, null)__	};create,a,new,abstract,bean,definition,with,default,settings;protected,abstract,bean,definition,this,null,null
AbstractBeanDefinition -> protected AbstractBeanDefinition();1467730834;Create a new AbstractBeanDefinition with default settings.;protected AbstractBeanDefinition() {_		this(null, null)__	};create,a,new,abstract,bean,definition,with,default,settings;protected,abstract,bean,definition,this,null,null
AbstractBeanDefinition -> protected AbstractBeanDefinition();1467846264;Create a new AbstractBeanDefinition with default settings.;protected AbstractBeanDefinition() {_		this(null, null)__	};create,a,new,abstract,bean,definition,with,default,settings;protected,abstract,bean,definition,this,null,null
AbstractBeanDefinition -> protected AbstractBeanDefinition();1482091545;Create a new AbstractBeanDefinition with default settings.;protected AbstractBeanDefinition() {_		this(null, null)__	};create,a,new,abstract,bean,definition,with,default,settings;protected,abstract,bean,definition,this,null,null
AbstractBeanDefinition -> protected AbstractBeanDefinition();1483093818;Create a new AbstractBeanDefinition with default settings.;protected AbstractBeanDefinition() {_		this(null, null)__	};create,a,new,abstract,bean,definition,with,default,settings;protected,abstract,bean,definition,this,null,null
AbstractBeanDefinition -> protected AbstractBeanDefinition();1495868221;Create a new AbstractBeanDefinition with default settings.;protected AbstractBeanDefinition() {_		this(null, null)__	};create,a,new,abstract,bean,definition,with,default,settings;protected,abstract,bean,definition,this,null,null
AbstractBeanDefinition -> protected AbstractBeanDefinition();1496837955;Create a new AbstractBeanDefinition with default settings.;protected AbstractBeanDefinition() {_		this(null, null)__	};create,a,new,abstract,bean,definition,with,default,settings;protected,abstract,bean,definition,this,null,null
AbstractBeanDefinition -> protected AbstractBeanDefinition();1498780456;Create a new AbstractBeanDefinition with default settings.;protected AbstractBeanDefinition() {_		this(null, null)__	};create,a,new,abstract,bean,definition,with,default,settings;protected,abstract,bean,definition,this,null,null
AbstractBeanDefinition -> protected AbstractBeanDefinition();1502974979;Create a new AbstractBeanDefinition with default settings.;protected AbstractBeanDefinition() {_		this(null, null)__	};create,a,new,abstract,bean,definition,with,default,settings;protected,abstract,bean,definition,this,null,null
AbstractBeanDefinition -> protected AbstractBeanDefinition();1503008029;Create a new AbstractBeanDefinition with default settings.;protected AbstractBeanDefinition() {_		this(null, null)__	};create,a,new,abstract,bean,definition,with,default,settings;protected,abstract,bean,definition,this,null,null
AbstractBeanDefinition -> protected AbstractBeanDefinition();1510606271;Create a new AbstractBeanDefinition with default settings.;protected AbstractBeanDefinition() {_		this(null, null)__	};create,a,new,abstract,bean,definition,with,default,settings;protected,abstract,bean,definition,this,null,null
AbstractBeanDefinition -> protected AbstractBeanDefinition();1510675876;Create a new AbstractBeanDefinition with default settings.;protected AbstractBeanDefinition() {_		this(null, null)__	};create,a,new,abstract,bean,definition,with,default,settings;protected,abstract,bean,definition,this,null,null
AbstractBeanDefinition -> protected AbstractBeanDefinition();1530174524;Create a new AbstractBeanDefinition with default settings.;protected AbstractBeanDefinition() {_		this(null, null)__	};create,a,new,abstract,bean,definition,with,default,settings;protected,abstract,bean,definition,this,null,null
AbstractBeanDefinition -> protected AbstractBeanDefinition();1530174524;Create a new AbstractBeanDefinition with default settings.;protected AbstractBeanDefinition() {_		this(null, null)__	};create,a,new,abstract,bean,definition,with,default,settings;protected,abstract,bean,definition,this,null,null
AbstractBeanDefinition -> protected AbstractBeanDefinition();1530174524;Create a new AbstractBeanDefinition with default settings.;protected AbstractBeanDefinition() {_		this(null, null)__	};create,a,new,abstract,bean,definition,with,default,settings;protected,abstract,bean,definition,this,null,null
AbstractBeanDefinition -> protected AbstractBeanDefinition();1530190293;Create a new AbstractBeanDefinition with default settings.;protected AbstractBeanDefinition() {_		this(null, null)__	};create,a,new,abstract,bean,definition,with,default,settings;protected,abstract,bean,definition,this,null,null
AbstractBeanDefinition -> protected AbstractBeanDefinition();1532981251;Create a new AbstractBeanDefinition with default settings.;protected AbstractBeanDefinition() {_		this(null, null)__	};create,a,new,abstract,bean,definition,with,default,settings;protected,abstract,bean,definition,this,null,null
AbstractBeanDefinition -> protected AbstractBeanDefinition();1536863076;Create a new AbstractBeanDefinition with default settings.;protected AbstractBeanDefinition() {_		this(null, null)__	};create,a,new,abstract,bean,definition,with,default,settings;protected,abstract,bean,definition,this,null,null
AbstractBeanDefinition -> @Override 	public void setFactoryBeanName(String factoryBeanName);1483093818;Specify the factory bean to use, if any._This the name of the bean to call the specified factory method on._@see #setFactoryMethodName;@Override_	public void setFactoryBeanName(String factoryBeanName) {_		this.factoryBeanName = factoryBeanName__	};specify,the,factory,bean,to,use,if,any,this,the,name,of,the,bean,to,call,the,specified,factory,method,on,see,set,factory,method,name;override,public,void,set,factory,bean,name,string,factory,bean,name,this,factory,bean,name,factory,bean,name
AbstractBeanDefinition -> @Override 	public void setFactoryBeanName(String factoryBeanName);1495868221;Specify the factory bean to use, if any._This the name of the bean to call the specified factory method on._@see #setFactoryMethodName;@Override_	public void setFactoryBeanName(String factoryBeanName) {_		this.factoryBeanName = factoryBeanName__	};specify,the,factory,bean,to,use,if,any,this,the,name,of,the,bean,to,call,the,specified,factory,method,on,see,set,factory,method,name;override,public,void,set,factory,bean,name,string,factory,bean,name,this,factory,bean,name,factory,bean,name
AbstractBeanDefinition -> public boolean isPrimary();1328020251;Return whether this bean is a primary autowire candidate._If this value is true for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;public boolean isPrimary() {_		return this.primary__	};return,whether,this,bean,is,a,primary,autowire,candidate,if,this,value,is,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;public,boolean,is,primary,return,this,primary
AbstractBeanDefinition -> public boolean isPrimary();1337202589;Return whether this bean is a primary autowire candidate._If this value is true for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;public boolean isPrimary() {_		return this.primary__	};return,whether,this,bean,is,a,primary,autowire,candidate,if,this,value,is,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;public,boolean,is,primary,return,this,primary
AbstractBeanDefinition -> public boolean isPrimary();1357119239;Return whether this bean is a primary autowire candidate._If this value is true for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;public boolean isPrimary() {_		return this.primary__	};return,whether,this,bean,is,a,primary,autowire,candidate,if,this,value,is,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;public,boolean,is,primary,return,this,primary
AbstractBeanDefinition -> public boolean isPrimary();1367508310;Return whether this bean is a primary autowire candidate._If this value is true for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;public boolean isPrimary() {_		return this.primary__	};return,whether,this,bean,is,a,primary,autowire,candidate,if,this,value,is,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;public,boolean,is,primary,return,this,primary
AbstractBeanDefinition -> public boolean isPrimary();1367943112;Return whether this bean is a primary autowire candidate._If this value is true for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;public boolean isPrimary() {_		return this.primary__	};return,whether,this,bean,is,a,primary,autowire,candidate,if,this,value,is,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;public,boolean,is,primary,return,this,primary
AbstractBeanDefinition -> public void setInitMethodName(String initMethodName);1328020251;Set the name of the initializer method. The default is <code>null</code>_in which case there is no initializer method.;public void setInitMethodName(String initMethodName) {_		this.initMethodName = initMethodName__	};set,the,name,of,the,initializer,method,the,default,is,code,null,code,in,which,case,there,is,no,initializer,method;public,void,set,init,method,name,string,init,method,name,this,init,method,name,init,method,name
AbstractBeanDefinition -> public void setInitMethodName(String initMethodName);1337202589;Set the name of the initializer method. The default is <code>null</code>_in which case there is no initializer method.;public void setInitMethodName(String initMethodName) {_		this.initMethodName = initMethodName__	};set,the,name,of,the,initializer,method,the,default,is,code,null,code,in,which,case,there,is,no,initializer,method;public,void,set,init,method,name,string,init,method,name,this,init,method,name,init,method,name
AbstractBeanDefinition -> public void setInitMethodName(String initMethodName);1356735495;Set the name of the initializer method. The default is {@code null}_in which case there is no initializer method.;public void setInitMethodName(String initMethodName) {_		this.initMethodName = initMethodName__	};set,the,name,of,the,initializer,method,the,default,is,code,null,in,which,case,there,is,no,initializer,method;public,void,set,init,method,name,string,init,method,name,this,init,method,name,init,method,name
AbstractBeanDefinition -> public void setInitMethodName(String initMethodName);1357119239;Set the name of the initializer method. The default is {@code null}_in which case there is no initializer method.;public void setInitMethodName(String initMethodName) {_		this.initMethodName = initMethodName__	};set,the,name,of,the,initializer,method,the,default,is,code,null,in,which,case,there,is,no,initializer,method;public,void,set,init,method,name,string,init,method,name,this,init,method,name,init,method,name
AbstractBeanDefinition -> public void setInitMethodName(String initMethodName);1367508310;Set the name of the initializer method. The default is {@code null}_in which case there is no initializer method.;public void setInitMethodName(String initMethodName) {_		this.initMethodName = initMethodName__	};set,the,name,of,the,initializer,method,the,default,is,code,null,in,which,case,there,is,no,initializer,method;public,void,set,init,method,name,string,init,method,name,this,init,method,name,init,method,name
AbstractBeanDefinition -> public void setInitMethodName(String initMethodName);1367943112;Set the name of the initializer method. The default is {@code null}_in which case there is no initializer method.;public void setInitMethodName(String initMethodName) {_		this.initMethodName = initMethodName__	};set,the,name,of,the,initializer,method,the,default,is,code,null,in,which,case,there,is,no,initializer,method;public,void,set,init,method,name,string,init,method,name,this,init,method,name,init,method,name
AbstractBeanDefinition -> public void setInitMethodName(String initMethodName);1368482696;Set the name of the initializer method. The default is {@code null}_in which case there is no initializer method.;public void setInitMethodName(String initMethodName) {_		this.initMethodName = initMethodName__	};set,the,name,of,the,initializer,method,the,default,is,code,null,in,which,case,there,is,no,initializer,method;public,void,set,init,method,name,string,init,method,name,this,init,method,name,init,method,name
AbstractBeanDefinition -> public void setInitMethodName(String initMethodName);1385412762;Set the name of the initializer method. The default is {@code null}_in which case there is no initializer method.;public void setInitMethodName(String initMethodName) {_		this.initMethodName = initMethodName__	};set,the,name,of,the,initializer,method,the,default,is,code,null,in,which,case,there,is,no,initializer,method;public,void,set,init,method,name,string,init,method,name,this,init,method,name,init,method,name
AbstractBeanDefinition -> public void setInitMethodName(String initMethodName);1392245317;Set the name of the initializer method. The default is {@code null}_in which case there is no initializer method.;public void setInitMethodName(String initMethodName) {_		this.initMethodName = initMethodName__	};set,the,name,of,the,initializer,method,the,default,is,code,null,in,which,case,there,is,no,initializer,method;public,void,set,init,method,name,string,init,method,name,this,init,method,name,init,method,name
AbstractBeanDefinition -> public void setInitMethodName(String initMethodName);1397163142;Set the name of the initializer method. The default is {@code null}_in which case there is no initializer method.;public void setInitMethodName(String initMethodName) {_		this.initMethodName = initMethodName__	};set,the,name,of,the,initializer,method,the,default,is,code,null,in,which,case,there,is,no,initializer,method;public,void,set,init,method,name,string,init,method,name,this,init,method,name,init,method,name
AbstractBeanDefinition -> public void setInitMethodName(String initMethodName);1398898390;Set the name of the initializer method. The default is {@code null}_in which case there is no initializer method.;public void setInitMethodName(String initMethodName) {_		this.initMethodName = initMethodName__	};set,the,name,of,the,initializer,method,the,default,is,code,null,in,which,case,there,is,no,initializer,method;public,void,set,init,method,name,string,init,method,name,this,init,method,name,init,method,name
AbstractBeanDefinition -> public void setInitMethodName(String initMethodName);1407511029;Set the name of the initializer method. The default is {@code null}_in which case there is no initializer method.;public void setInitMethodName(String initMethodName) {_		this.initMethodName = initMethodName__	};set,the,name,of,the,initializer,method,the,default,is,code,null,in,which,case,there,is,no,initializer,method;public,void,set,init,method,name,string,init,method,name,this,init,method,name,init,method,name
AbstractBeanDefinition -> public void setInitMethodName(String initMethodName);1432135182;Set the name of the initializer method. The default is {@code null}_in which case there is no initializer method.;public void setInitMethodName(String initMethodName) {_		this.initMethodName = initMethodName__	};set,the,name,of,the,initializer,method,the,default,is,code,null,in,which,case,there,is,no,initializer,method;public,void,set,init,method,name,string,init,method,name,this,init,method,name,init,method,name
AbstractBeanDefinition -> public void setInitMethodName(String initMethodName);1434204509;Set the name of the initializer method. The default is {@code null}_in which case there is no initializer method.;public void setInitMethodName(String initMethodName) {_		this.initMethodName = initMethodName__	};set,the,name,of,the,initializer,method,the,default,is,code,null,in,which,case,there,is,no,initializer,method;public,void,set,init,method,name,string,init,method,name,this,init,method,name,init,method,name
AbstractBeanDefinition -> public void setInitMethodName(String initMethodName);1447323728;Set the name of the initializer method. The default is {@code null}_in which case there is no initializer method.;public void setInitMethodName(String initMethodName) {_		this.initMethodName = initMethodName__	};set,the,name,of,the,initializer,method,the,default,is,code,null,in,which,case,there,is,no,initializer,method;public,void,set,init,method,name,string,init,method,name,this,init,method,name,init,method,name
AbstractBeanDefinition -> public void setInitMethodName(String initMethodName);1465226156;Set the name of the initializer method. The default is {@code null}_in which case there is no initializer method.;public void setInitMethodName(String initMethodName) {_		this.initMethodName = initMethodName__	};set,the,name,of,the,initializer,method,the,default,is,code,null,in,which,case,there,is,no,initializer,method;public,void,set,init,method,name,string,init,method,name,this,init,method,name,init,method,name
AbstractBeanDefinition -> public void setInitMethodName(String initMethodName);1467730834;Set the name of the initializer method. The default is {@code null}_in which case there is no initializer method.;public void setInitMethodName(String initMethodName) {_		this.initMethodName = initMethodName__	};set,the,name,of,the,initializer,method,the,default,is,code,null,in,which,case,there,is,no,initializer,method;public,void,set,init,method,name,string,init,method,name,this,init,method,name,init,method,name
AbstractBeanDefinition -> public void setInitMethodName(String initMethodName);1467846264;Set the name of the initializer method. The default is {@code null}_in which case there is no initializer method.;public void setInitMethodName(String initMethodName) {_		this.initMethodName = initMethodName__	};set,the,name,of,the,initializer,method,the,default,is,code,null,in,which,case,there,is,no,initializer,method;public,void,set,init,method,name,string,init,method,name,this,init,method,name,init,method,name
AbstractBeanDefinition -> public void setInitMethodName(String initMethodName);1482091545;Set the name of the initializer method. The default is {@code null}_in which case there is no initializer method.;public void setInitMethodName(String initMethodName) {_		this.initMethodName = initMethodName__	};set,the,name,of,the,initializer,method,the,default,is,code,null,in,which,case,there,is,no,initializer,method;public,void,set,init,method,name,string,init,method,name,this,init,method,name,init,method,name
AbstractBeanDefinition -> public void setInitMethodName(String initMethodName);1483093818;Set the name of the initializer method. The default is {@code null}_in which case there is no initializer method.;public void setInitMethodName(String initMethodName) {_		this.initMethodName = initMethodName__	};set,the,name,of,the,initializer,method,the,default,is,code,null,in,which,case,there,is,no,initializer,method;public,void,set,init,method,name,string,init,method,name,this,init,method,name,init,method,name
AbstractBeanDefinition -> public void setInitMethodName(String initMethodName);1495868221;Set the name of the initializer method. The default is {@code null}_in which case there is no initializer method.;public void setInitMethodName(String initMethodName) {_		this.initMethodName = initMethodName__	};set,the,name,of,the,initializer,method,the,default,is,code,null,in,which,case,there,is,no,initializer,method;public,void,set,init,method,name,string,init,method,name,this,init,method,name,init,method,name
AbstractBeanDefinition -> public String getScope();1328020251;Return the name of the target scope for the bean.;public String getScope() {_		return this.scope__	};return,the,name,of,the,target,scope,for,the,bean;public,string,get,scope,return,this,scope
AbstractBeanDefinition -> public String getScope();1337202589;Return the name of the target scope for the bean.;public String getScope() {_		return this.scope__	};return,the,name,of,the,target,scope,for,the,bean;public,string,get,scope,return,this,scope
AbstractBeanDefinition -> public String getScope();1357119239;Return the name of the target scope for the bean.;public String getScope() {_		return this.scope__	};return,the,name,of,the,target,scope,for,the,bean;public,string,get,scope,return,this,scope
AbstractBeanDefinition -> public String getScope();1367508310;Return the name of the target scope for the bean.;public String getScope() {_		return this.scope__	};return,the,name,of,the,target,scope,for,the,bean;public,string,get,scope,return,this,scope
AbstractBeanDefinition -> public String getScope();1367943112;Return the name of the target scope for the bean.;public String getScope() {_		return this.scope__	};return,the,name,of,the,target,scope,for,the,bean;public,string,get,scope,return,this,scope
AbstractBeanDefinition -> @Override 	public void setLazyInit(boolean lazyInit);1356735495;Set whether this bean should be lazily initialized._<p>If {@code false}, the bean will get instantiated on startup by bean_factories that perform eager initialization of singletons.;@Override_	public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,this,bean,should,be,lazily,initialized,p,if,code,false,the,bean,will,get,instantiated,on,startup,by,bean,factories,that,perform,eager,initialization,of,singletons;override,public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
AbstractBeanDefinition -> @Override 	public void setLazyInit(boolean lazyInit);1368482696;Set whether this bean should be lazily initialized._<p>If {@code false}, the bean will get instantiated on startup by bean_factories that perform eager initialization of singletons.;@Override_	public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,this,bean,should,be,lazily,initialized,p,if,code,false,the,bean,will,get,instantiated,on,startup,by,bean,factories,that,perform,eager,initialization,of,singletons;override,public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
AbstractBeanDefinition -> @Override 	public void setLazyInit(boolean lazyInit);1385412762;Set whether this bean should be lazily initialized._<p>If {@code false}, the bean will get instantiated on startup by bean_factories that perform eager initialization of singletons.;@Override_	public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,this,bean,should,be,lazily,initialized,p,if,code,false,the,bean,will,get,instantiated,on,startup,by,bean,factories,that,perform,eager,initialization,of,singletons;override,public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
AbstractBeanDefinition -> @Override 	public void setLazyInit(boolean lazyInit);1392245317;Set whether this bean should be lazily initialized._<p>If {@code false}, the bean will get instantiated on startup by bean_factories that perform eager initialization of singletons.;@Override_	public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,this,bean,should,be,lazily,initialized,p,if,code,false,the,bean,will,get,instantiated,on,startup,by,bean,factories,that,perform,eager,initialization,of,singletons;override,public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
AbstractBeanDefinition -> @Override 	public void setLazyInit(boolean lazyInit);1397163142;Set whether this bean should be lazily initialized._<p>If {@code false}, the bean will get instantiated on startup by bean_factories that perform eager initialization of singletons.;@Override_	public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,this,bean,should,be,lazily,initialized,p,if,code,false,the,bean,will,get,instantiated,on,startup,by,bean,factories,that,perform,eager,initialization,of,singletons;override,public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
AbstractBeanDefinition -> @Override 	public void setLazyInit(boolean lazyInit);1398898390;Set whether this bean should be lazily initialized._<p>If {@code false}, the bean will get instantiated on startup by bean_factories that perform eager initialization of singletons.;@Override_	public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,this,bean,should,be,lazily,initialized,p,if,code,false,the,bean,will,get,instantiated,on,startup,by,bean,factories,that,perform,eager,initialization,of,singletons;override,public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
AbstractBeanDefinition -> @Override 	public void setLazyInit(boolean lazyInit);1407511029;Set whether this bean should be lazily initialized._<p>If {@code false}, the bean will get instantiated on startup by bean_factories that perform eager initialization of singletons.;@Override_	public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,this,bean,should,be,lazily,initialized,p,if,code,false,the,bean,will,get,instantiated,on,startup,by,bean,factories,that,perform,eager,initialization,of,singletons;override,public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
AbstractBeanDefinition -> @Override 	public void setLazyInit(boolean lazyInit);1432135182;Set whether this bean should be lazily initialized._<p>If {@code false}, the bean will get instantiated on startup by bean_factories that perform eager initialization of singletons.;@Override_	public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,this,bean,should,be,lazily,initialized,p,if,code,false,the,bean,will,get,instantiated,on,startup,by,bean,factories,that,perform,eager,initialization,of,singletons;override,public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
AbstractBeanDefinition -> @Override 	public void setLazyInit(boolean lazyInit);1434204509;Set whether this bean should be lazily initialized._<p>If {@code false}, the bean will get instantiated on startup by bean_factories that perform eager initialization of singletons.;@Override_	public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,this,bean,should,be,lazily,initialized,p,if,code,false,the,bean,will,get,instantiated,on,startup,by,bean,factories,that,perform,eager,initialization,of,singletons;override,public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
AbstractBeanDefinition -> @Override 	public void setLazyInit(boolean lazyInit);1447323728;Set whether this bean should be lazily initialized._<p>If {@code false}, the bean will get instantiated on startup by bean_factories that perform eager initialization of singletons.;@Override_	public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,this,bean,should,be,lazily,initialized,p,if,code,false,the,bean,will,get,instantiated,on,startup,by,bean,factories,that,perform,eager,initialization,of,singletons;override,public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
AbstractBeanDefinition -> @Override 	public void setLazyInit(boolean lazyInit);1465226156;Set whether this bean should be lazily initialized._<p>If {@code false}, the bean will get instantiated on startup by bean_factories that perform eager initialization of singletons.;@Override_	public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,this,bean,should,be,lazily,initialized,p,if,code,false,the,bean,will,get,instantiated,on,startup,by,bean,factories,that,perform,eager,initialization,of,singletons;override,public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
AbstractBeanDefinition -> @Override 	public void setLazyInit(boolean lazyInit);1467730834;Set whether this bean should be lazily initialized._<p>If {@code false}, the bean will get instantiated on startup by bean_factories that perform eager initialization of singletons.;@Override_	public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,this,bean,should,be,lazily,initialized,p,if,code,false,the,bean,will,get,instantiated,on,startup,by,bean,factories,that,perform,eager,initialization,of,singletons;override,public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
AbstractBeanDefinition -> @Override 	public void setLazyInit(boolean lazyInit);1467846264;Set whether this bean should be lazily initialized._<p>If {@code false}, the bean will get instantiated on startup by bean_factories that perform eager initialization of singletons.;@Override_	public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,this,bean,should,be,lazily,initialized,p,if,code,false,the,bean,will,get,instantiated,on,startup,by,bean,factories,that,perform,eager,initialization,of,singletons;override,public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
AbstractBeanDefinition -> @Override 	public void setLazyInit(boolean lazyInit);1482091545;Set whether this bean should be lazily initialized._<p>If {@code false}, the bean will get instantiated on startup by bean_factories that perform eager initialization of singletons.;@Override_	public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,this,bean,should,be,lazily,initialized,p,if,code,false,the,bean,will,get,instantiated,on,startup,by,bean,factories,that,perform,eager,initialization,of,singletons;override,public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
AbstractBeanDefinition -> @Override 	public void setLazyInit(boolean lazyInit);1483093818;Set whether this bean should be lazily initialized._<p>If {@code false}, the bean will get instantiated on startup by bean_factories that perform eager initialization of singletons.;@Override_	public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,this,bean,should,be,lazily,initialized,p,if,code,false,the,bean,will,get,instantiated,on,startup,by,bean,factories,that,perform,eager,initialization,of,singletons;override,public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
AbstractBeanDefinition -> @Override 	public void setLazyInit(boolean lazyInit);1495868221;Set whether this bean should be lazily initialized._<p>If {@code false}, the bean will get instantiated on startup by bean_factories that perform eager initialization of singletons.;@Override_	public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,this,bean,should,be,lazily,initialized,p,if,code,false,the,bean,will,get,instantiated,on,startup,by,bean,factories,that,perform,eager,initialization,of,singletons;override,public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
AbstractBeanDefinition -> @Override 	public void setLazyInit(boolean lazyInit);1496837955;Set whether this bean should be lazily initialized._<p>If {@code false}, the bean will get instantiated on startup by bean_factories that perform eager initialization of singletons.;@Override_	public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,this,bean,should,be,lazily,initialized,p,if,code,false,the,bean,will,get,instantiated,on,startup,by,bean,factories,that,perform,eager,initialization,of,singletons;override,public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
AbstractBeanDefinition -> @Override 	public void setLazyInit(boolean lazyInit);1498780456;Set whether this bean should be lazily initialized._<p>If {@code false}, the bean will get instantiated on startup by bean_factories that perform eager initialization of singletons.;@Override_	public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,this,bean,should,be,lazily,initialized,p,if,code,false,the,bean,will,get,instantiated,on,startup,by,bean,factories,that,perform,eager,initialization,of,singletons;override,public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
AbstractBeanDefinition -> @Override 	public void setLazyInit(boolean lazyInit);1502974979;Set whether this bean should be lazily initialized._<p>If {@code false}, the bean will get instantiated on startup by bean_factories that perform eager initialization of singletons.;@Override_	public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,this,bean,should,be,lazily,initialized,p,if,code,false,the,bean,will,get,instantiated,on,startup,by,bean,factories,that,perform,eager,initialization,of,singletons;override,public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
AbstractBeanDefinition -> @Override 	public void setLazyInit(boolean lazyInit);1503008029;Set whether this bean should be lazily initialized._<p>If {@code false}, the bean will get instantiated on startup by bean_factories that perform eager initialization of singletons.;@Override_	public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,this,bean,should,be,lazily,initialized,p,if,code,false,the,bean,will,get,instantiated,on,startup,by,bean,factories,that,perform,eager,initialization,of,singletons;override,public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
AbstractBeanDefinition -> @Override 	public void setLazyInit(boolean lazyInit);1510606271;Set whether this bean should be lazily initialized._<p>If {@code false}, the bean will get instantiated on startup by bean_factories that perform eager initialization of singletons.;@Override_	public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,this,bean,should,be,lazily,initialized,p,if,code,false,the,bean,will,get,instantiated,on,startup,by,bean,factories,that,perform,eager,initialization,of,singletons;override,public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
AbstractBeanDefinition -> @Override 	public void setLazyInit(boolean lazyInit);1510675876;Set whether this bean should be lazily initialized._<p>If {@code false}, the bean will get instantiated on startup by bean_factories that perform eager initialization of singletons.;@Override_	public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,this,bean,should,be,lazily,initialized,p,if,code,false,the,bean,will,get,instantiated,on,startup,by,bean,factories,that,perform,eager,initialization,of,singletons;override,public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
AbstractBeanDefinition -> @Override 	public void setLazyInit(boolean lazyInit);1530174524;Set whether this bean should be lazily initialized._<p>If {@code false}, the bean will get instantiated on startup by bean_factories that perform eager initialization of singletons.;@Override_	public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,this,bean,should,be,lazily,initialized,p,if,code,false,the,bean,will,get,instantiated,on,startup,by,bean,factories,that,perform,eager,initialization,of,singletons;override,public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
AbstractBeanDefinition -> @Override 	public void setLazyInit(boolean lazyInit);1530174524;Set whether this bean should be lazily initialized._<p>If {@code false}, the bean will get instantiated on startup by bean_factories that perform eager initialization of singletons.;@Override_	public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,this,bean,should,be,lazily,initialized,p,if,code,false,the,bean,will,get,instantiated,on,startup,by,bean,factories,that,perform,eager,initialization,of,singletons;override,public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
AbstractBeanDefinition -> @Override 	public void setLazyInit(boolean lazyInit);1530174524;Set whether this bean should be lazily initialized._<p>If {@code false}, the bean will get instantiated on startup by bean_factories that perform eager initialization of singletons.;@Override_	public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,this,bean,should,be,lazily,initialized,p,if,code,false,the,bean,will,get,instantiated,on,startup,by,bean,factories,that,perform,eager,initialization,of,singletons;override,public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
AbstractBeanDefinition -> @Override 	public void setLazyInit(boolean lazyInit);1530190293;Set whether this bean should be lazily initialized._<p>If {@code false}, the bean will get instantiated on startup by bean_factories that perform eager initialization of singletons.;@Override_	public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,this,bean,should,be,lazily,initialized,p,if,code,false,the,bean,will,get,instantiated,on,startup,by,bean,factories,that,perform,eager,initialization,of,singletons;override,public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
AbstractBeanDefinition -> @Override 	public void setLazyInit(boolean lazyInit);1532981251;Set whether this bean should be lazily initialized._<p>If {@code false}, the bean will get instantiated on startup by bean_factories that perform eager initialization of singletons.;@Override_	public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,this,bean,should,be,lazily,initialized,p,if,code,false,the,bean,will,get,instantiated,on,startup,by,bean,factories,that,perform,eager,initialization,of,singletons;override,public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
AbstractBeanDefinition -> @Override 	public void setLazyInit(boolean lazyInit);1536863076;Set whether this bean should be lazily initialized._<p>If {@code false}, the bean will get instantiated on startup by bean_factories that perform eager initialization of singletons.;@Override_	public void setLazyInit(boolean lazyInit) {_		this.lazyInit = lazyInit__	};set,whether,this,bean,should,be,lazily,initialized,p,if,code,false,the,bean,will,get,instantiated,on,startup,by,bean,factories,that,perform,eager,initialization,of,singletons;override,public,void,set,lazy,init,boolean,lazy,init,this,lazy,init,lazy,init
AbstractBeanDefinition -> @Nullable 	public AutowireCandidateQualifier getQualifier(String typeName);1496837955;Return the qualifier mapped to the provided type name.;@Nullable_	public AutowireCandidateQualifier getQualifier(String typeName) {_		return this.qualifiers.get(typeName)__	};return,the,qualifier,mapped,to,the,provided,type,name;nullable,public,autowire,candidate,qualifier,get,qualifier,string,type,name,return,this,qualifiers,get,type,name
AbstractBeanDefinition -> @Nullable 	public AutowireCandidateQualifier getQualifier(String typeName);1498780456;Return the qualifier mapped to the provided type name.;@Nullable_	public AutowireCandidateQualifier getQualifier(String typeName) {_		return this.qualifiers.get(typeName)__	};return,the,qualifier,mapped,to,the,provided,type,name;nullable,public,autowire,candidate,qualifier,get,qualifier,string,type,name,return,this,qualifiers,get,type,name
AbstractBeanDefinition -> @Nullable 	public AutowireCandidateQualifier getQualifier(String typeName);1502974979;Return the qualifier mapped to the provided type name.;@Nullable_	public AutowireCandidateQualifier getQualifier(String typeName) {_		return this.qualifiers.get(typeName)__	};return,the,qualifier,mapped,to,the,provided,type,name;nullable,public,autowire,candidate,qualifier,get,qualifier,string,type,name,return,this,qualifiers,get,type,name
AbstractBeanDefinition -> @Nullable 	public AutowireCandidateQualifier getQualifier(String typeName);1503008029;Return the qualifier mapped to the provided type name.;@Nullable_	public AutowireCandidateQualifier getQualifier(String typeName) {_		return this.qualifiers.get(typeName)__	};return,the,qualifier,mapped,to,the,provided,type,name;nullable,public,autowire,candidate,qualifier,get,qualifier,string,type,name,return,this,qualifiers,get,type,name
AbstractBeanDefinition -> @Nullable 	public AutowireCandidateQualifier getQualifier(String typeName);1510606271;Return the qualifier mapped to the provided type name.;@Nullable_	public AutowireCandidateQualifier getQualifier(String typeName) {_		return this.qualifiers.get(typeName)__	};return,the,qualifier,mapped,to,the,provided,type,name;nullable,public,autowire,candidate,qualifier,get,qualifier,string,type,name,return,this,qualifiers,get,type,name
AbstractBeanDefinition -> @Nullable 	public AutowireCandidateQualifier getQualifier(String typeName);1510675876;Return the qualifier mapped to the provided type name.;@Nullable_	public AutowireCandidateQualifier getQualifier(String typeName) {_		return this.qualifiers.get(typeName)__	};return,the,qualifier,mapped,to,the,provided,type,name;nullable,public,autowire,candidate,qualifier,get,qualifier,string,type,name,return,this,qualifiers,get,type,name
AbstractBeanDefinition -> @Nullable 	public AutowireCandidateQualifier getQualifier(String typeName);1530174524;Return the qualifier mapped to the provided type name.;@Nullable_	public AutowireCandidateQualifier getQualifier(String typeName) {_		return this.qualifiers.get(typeName)__	};return,the,qualifier,mapped,to,the,provided,type,name;nullable,public,autowire,candidate,qualifier,get,qualifier,string,type,name,return,this,qualifiers,get,type,name
AbstractBeanDefinition -> @Nullable 	public AutowireCandidateQualifier getQualifier(String typeName);1530174524;Return the qualifier mapped to the provided type name.;@Nullable_	public AutowireCandidateQualifier getQualifier(String typeName) {_		return this.qualifiers.get(typeName)__	};return,the,qualifier,mapped,to,the,provided,type,name;nullable,public,autowire,candidate,qualifier,get,qualifier,string,type,name,return,this,qualifiers,get,type,name
AbstractBeanDefinition -> @Nullable 	public AutowireCandidateQualifier getQualifier(String typeName);1530174524;Return the qualifier mapped to the provided type name.;@Nullable_	public AutowireCandidateQualifier getQualifier(String typeName) {_		return this.qualifiers.get(typeName)__	};return,the,qualifier,mapped,to,the,provided,type,name;nullable,public,autowire,candidate,qualifier,get,qualifier,string,type,name,return,this,qualifiers,get,type,name
AbstractBeanDefinition -> @Nullable 	public AutowireCandidateQualifier getQualifier(String typeName);1530190293;Return the qualifier mapped to the provided type name.;@Nullable_	public AutowireCandidateQualifier getQualifier(String typeName) {_		return this.qualifiers.get(typeName)__	};return,the,qualifier,mapped,to,the,provided,type,name;nullable,public,autowire,candidate,qualifier,get,qualifier,string,type,name,return,this,qualifiers,get,type,name
AbstractBeanDefinition -> @Nullable 	public AutowireCandidateQualifier getQualifier(String typeName);1532981251;Return the qualifier mapped to the provided type name.;@Nullable_	public AutowireCandidateQualifier getQualifier(String typeName) {_		return this.qualifiers.get(typeName)__	};return,the,qualifier,mapped,to,the,provided,type,name;nullable,public,autowire,candidate,qualifier,get,qualifier,string,type,name,return,this,qualifiers,get,type,name
AbstractBeanDefinition -> @Nullable 	public AutowireCandidateQualifier getQualifier(String typeName);1536863076;Return the qualifier mapped to the provided type name.;@Nullable_	public AutowireCandidateQualifier getQualifier(String typeName) {_		return this.qualifiers.get(typeName)__	};return,the,qualifier,mapped,to,the,provided,type,name;nullable,public,autowire,candidate,qualifier,get,qualifier,string,type,name,return,this,qualifiers,get,type,name
AbstractBeanDefinition -> public int getDependencyCheck();1328020251;Return the dependency check code.;public int getDependencyCheck() {_		return this.dependencyCheck__	};return,the,dependency,check,code;public,int,get,dependency,check,return,this,dependency,check
AbstractBeanDefinition -> public int getDependencyCheck();1337202589;Return the dependency check code.;public int getDependencyCheck() {_		return this.dependencyCheck__	};return,the,dependency,check,code;public,int,get,dependency,check,return,this,dependency,check
AbstractBeanDefinition -> public int getDependencyCheck();1356735495;Return the dependency check code.;public int getDependencyCheck() {_		return this.dependencyCheck__	};return,the,dependency,check,code;public,int,get,dependency,check,return,this,dependency,check
AbstractBeanDefinition -> public int getDependencyCheck();1357119239;Return the dependency check code.;public int getDependencyCheck() {_		return this.dependencyCheck__	};return,the,dependency,check,code;public,int,get,dependency,check,return,this,dependency,check
AbstractBeanDefinition -> public int getDependencyCheck();1367508310;Return the dependency check code.;public int getDependencyCheck() {_		return this.dependencyCheck__	};return,the,dependency,check,code;public,int,get,dependency,check,return,this,dependency,check
AbstractBeanDefinition -> public int getDependencyCheck();1367943112;Return the dependency check code.;public int getDependencyCheck() {_		return this.dependencyCheck__	};return,the,dependency,check,code;public,int,get,dependency,check,return,this,dependency,check
AbstractBeanDefinition -> public int getDependencyCheck();1368482696;Return the dependency check code.;public int getDependencyCheck() {_		return this.dependencyCheck__	};return,the,dependency,check,code;public,int,get,dependency,check,return,this,dependency,check
AbstractBeanDefinition -> public int getDependencyCheck();1385412762;Return the dependency check code.;public int getDependencyCheck() {_		return this.dependencyCheck__	};return,the,dependency,check,code;public,int,get,dependency,check,return,this,dependency,check
AbstractBeanDefinition -> public int getDependencyCheck();1392245317;Return the dependency check code.;public int getDependencyCheck() {_		return this.dependencyCheck__	};return,the,dependency,check,code;public,int,get,dependency,check,return,this,dependency,check
AbstractBeanDefinition -> public int getDependencyCheck();1397163142;Return the dependency check code.;public int getDependencyCheck() {_		return this.dependencyCheck__	};return,the,dependency,check,code;public,int,get,dependency,check,return,this,dependency,check
AbstractBeanDefinition -> public int getDependencyCheck();1398898390;Return the dependency check code.;public int getDependencyCheck() {_		return this.dependencyCheck__	};return,the,dependency,check,code;public,int,get,dependency,check,return,this,dependency,check
AbstractBeanDefinition -> public int getDependencyCheck();1407511029;Return the dependency check code.;public int getDependencyCheck() {_		return this.dependencyCheck__	};return,the,dependency,check,code;public,int,get,dependency,check,return,this,dependency,check
AbstractBeanDefinition -> public int getDependencyCheck();1432135182;Return the dependency check code.;public int getDependencyCheck() {_		return this.dependencyCheck__	};return,the,dependency,check,code;public,int,get,dependency,check,return,this,dependency,check
AbstractBeanDefinition -> public int getDependencyCheck();1434204509;Return the dependency check code.;public int getDependencyCheck() {_		return this.dependencyCheck__	};return,the,dependency,check,code;public,int,get,dependency,check,return,this,dependency,check
AbstractBeanDefinition -> public int getDependencyCheck();1447323728;Return the dependency check code.;public int getDependencyCheck() {_		return this.dependencyCheck__	};return,the,dependency,check,code;public,int,get,dependency,check,return,this,dependency,check
AbstractBeanDefinition -> public int getDependencyCheck();1465226156;Return the dependency check code.;public int getDependencyCheck() {_		return this.dependencyCheck__	};return,the,dependency,check,code;public,int,get,dependency,check,return,this,dependency,check
AbstractBeanDefinition -> public int getDependencyCheck();1467730834;Return the dependency check code.;public int getDependencyCheck() {_		return this.dependencyCheck__	};return,the,dependency,check,code;public,int,get,dependency,check,return,this,dependency,check
AbstractBeanDefinition -> public int getDependencyCheck();1467846264;Return the dependency check code.;public int getDependencyCheck() {_		return this.dependencyCheck__	};return,the,dependency,check,code;public,int,get,dependency,check,return,this,dependency,check
AbstractBeanDefinition -> public int getDependencyCheck();1482091545;Return the dependency check code.;public int getDependencyCheck() {_		return this.dependencyCheck__	};return,the,dependency,check,code;public,int,get,dependency,check,return,this,dependency,check
AbstractBeanDefinition -> public int getDependencyCheck();1483093818;Return the dependency check code.;public int getDependencyCheck() {_		return this.dependencyCheck__	};return,the,dependency,check,code;public,int,get,dependency,check,return,this,dependency,check
AbstractBeanDefinition -> public int getDependencyCheck();1495868221;Return the dependency check code.;public int getDependencyCheck() {_		return this.dependencyCheck__	};return,the,dependency,check,code;public,int,get,dependency,check,return,this,dependency,check
AbstractBeanDefinition -> public int getDependencyCheck();1496837955;Return the dependency check code.;public int getDependencyCheck() {_		return this.dependencyCheck__	};return,the,dependency,check,code;public,int,get,dependency,check,return,this,dependency,check
AbstractBeanDefinition -> public int getDependencyCheck();1498780456;Return the dependency check code.;public int getDependencyCheck() {_		return this.dependencyCheck__	};return,the,dependency,check,code;public,int,get,dependency,check,return,this,dependency,check
AbstractBeanDefinition -> public int getDependencyCheck();1502974979;Return the dependency check code.;public int getDependencyCheck() {_		return this.dependencyCheck__	};return,the,dependency,check,code;public,int,get,dependency,check,return,this,dependency,check
AbstractBeanDefinition -> public int getDependencyCheck();1503008029;Return the dependency check code.;public int getDependencyCheck() {_		return this.dependencyCheck__	};return,the,dependency,check,code;public,int,get,dependency,check,return,this,dependency,check
AbstractBeanDefinition -> public int getDependencyCheck();1510606271;Return the dependency check code.;public int getDependencyCheck() {_		return this.dependencyCheck__	};return,the,dependency,check,code;public,int,get,dependency,check,return,this,dependency,check
AbstractBeanDefinition -> public int getDependencyCheck();1510675876;Return the dependency check code.;public int getDependencyCheck() {_		return this.dependencyCheck__	};return,the,dependency,check,code;public,int,get,dependency,check,return,this,dependency,check
AbstractBeanDefinition -> public int getDependencyCheck();1530174524;Return the dependency check code.;public int getDependencyCheck() {_		return this.dependencyCheck__	};return,the,dependency,check,code;public,int,get,dependency,check,return,this,dependency,check
AbstractBeanDefinition -> public int getDependencyCheck();1530174524;Return the dependency check code.;public int getDependencyCheck() {_		return this.dependencyCheck__	};return,the,dependency,check,code;public,int,get,dependency,check,return,this,dependency,check
AbstractBeanDefinition -> public int getDependencyCheck();1530174524;Return the dependency check code.;public int getDependencyCheck() {_		return this.dependencyCheck__	};return,the,dependency,check,code;public,int,get,dependency,check,return,this,dependency,check
AbstractBeanDefinition -> public int getDependencyCheck();1530190293;Return the dependency check code.;public int getDependencyCheck() {_		return this.dependencyCheck__	};return,the,dependency,check,code;public,int,get,dependency,check,return,this,dependency,check
AbstractBeanDefinition -> public int getDependencyCheck();1532981251;Return the dependency check code.;public int getDependencyCheck() {_		return this.dependencyCheck__	};return,the,dependency,check,code;public,int,get,dependency,check,return,this,dependency,check
AbstractBeanDefinition -> public int getDependencyCheck();1536863076;Return the dependency check code.;public int getDependencyCheck() {_		return this.dependencyCheck__	};return,the,dependency,check,code;public,int,get,dependency,check,return,this,dependency,check
AbstractBeanDefinition -> @Override 	@Nullable 	public String getDescription();1498780456;Return a human-readable description of this bean definition.;@Override_	@Nullable_	public String getDescription() {_		return this.description__	};return,a,human,readable,description,of,this,bean,definition;override,nullable,public,string,get,description,return,this,description
AbstractBeanDefinition -> @Override 	@Nullable 	public String getDescription();1502974979;Return a human-readable description of this bean definition.;@Override_	@Nullable_	public String getDescription() {_		return this.description__	};return,a,human,readable,description,of,this,bean,definition;override,nullable,public,string,get,description,return,this,description
AbstractBeanDefinition -> @Override 	@Nullable 	public String getDescription();1503008029;Return a human-readable description of this bean definition.;@Override_	@Nullable_	public String getDescription() {_		return this.description__	};return,a,human,readable,description,of,this,bean,definition;override,nullable,public,string,get,description,return,this,description
AbstractBeanDefinition -> @Override 	@Nullable 	public String getDescription();1510606271;Return a human-readable description of this bean definition.;@Override_	@Nullable_	public String getDescription() {_		return this.description__	};return,a,human,readable,description,of,this,bean,definition;override,nullable,public,string,get,description,return,this,description
AbstractBeanDefinition -> @Override 	@Nullable 	public String getDescription();1510675876;Return a human-readable description of this bean definition.;@Override_	@Nullable_	public String getDescription() {_		return this.description__	};return,a,human,readable,description,of,this,bean,definition;override,nullable,public,string,get,description,return,this,description
AbstractBeanDefinition -> @Override 	@Nullable 	public String getDescription();1530174524;Return a human-readable description of this bean definition.;@Override_	@Nullable_	public String getDescription() {_		return this.description__	};return,a,human,readable,description,of,this,bean,definition;override,nullable,public,string,get,description,return,this,description
AbstractBeanDefinition -> @Override 	@Nullable 	public String getDescription();1530174524;Return a human-readable description of this bean definition.;@Override_	@Nullable_	public String getDescription() {_		return this.description__	};return,a,human,readable,description,of,this,bean,definition;override,nullable,public,string,get,description,return,this,description
AbstractBeanDefinition -> @Override 	@Nullable 	public String getDescription();1530174524;Return a human-readable description of this bean definition.;@Override_	@Nullable_	public String getDescription() {_		return this.description__	};return,a,human,readable,description,of,this,bean,definition;override,nullable,public,string,get,description,return,this,description
AbstractBeanDefinition -> @Override 	@Nullable 	public String getDescription();1530190293;Return a human-readable description of this bean definition.;@Override_	@Nullable_	public String getDescription() {_		return this.description__	};return,a,human,readable,description,of,this,bean,definition;override,nullable,public,string,get,description,return,this,description
AbstractBeanDefinition -> @Override 	@Nullable 	public String getDescription();1532981251;Return a human-readable description of this bean definition.;@Override_	@Nullable_	public String getDescription() {_		return this.description__	};return,a,human,readable,description,of,this,bean,definition;override,nullable,public,string,get,description,return,this,description
AbstractBeanDefinition -> @Override 	@Nullable 	public String getDescription();1536863076;Return a human-readable description of this bean definition.;@Override_	@Nullable_	public String getDescription() {_		return this.description__	};return,a,human,readable,description,of,this,bean,definition;override,nullable,public,string,get,description,return,this,description
AbstractBeanDefinition -> public void copyQualifiersFrom(AbstractBeanDefinition source);1328020251;Copy the qualifiers from the supplied AbstractBeanDefinition to this bean definition._@param source the AbstractBeanDefinition to copy from;public void copyQualifiersFrom(AbstractBeanDefinition source) {_		Assert.notNull(source, "Source must not be null")__		this.qualifiers.putAll(source.qualifiers)__	};copy,the,qualifiers,from,the,supplied,abstract,bean,definition,to,this,bean,definition,param,source,the,abstract,bean,definition,to,copy,from;public,void,copy,qualifiers,from,abstract,bean,definition,source,assert,not,null,source,source,must,not,be,null,this,qualifiers,put,all,source,qualifiers
AbstractBeanDefinition -> public void copyQualifiersFrom(AbstractBeanDefinition source);1337202589;Copy the qualifiers from the supplied AbstractBeanDefinition to this bean definition._@param source the AbstractBeanDefinition to copy from;public void copyQualifiersFrom(AbstractBeanDefinition source) {_		Assert.notNull(source, "Source must not be null")__		this.qualifiers.putAll(source.qualifiers)__	};copy,the,qualifiers,from,the,supplied,abstract,bean,definition,to,this,bean,definition,param,source,the,abstract,bean,definition,to,copy,from;public,void,copy,qualifiers,from,abstract,bean,definition,source,assert,not,null,source,source,must,not,be,null,this,qualifiers,put,all,source,qualifiers
AbstractBeanDefinition -> public void copyQualifiersFrom(AbstractBeanDefinition source);1356735495;Copy the qualifiers from the supplied AbstractBeanDefinition to this bean definition._@param source the AbstractBeanDefinition to copy from;public void copyQualifiersFrom(AbstractBeanDefinition source) {_		Assert.notNull(source, "Source must not be null")__		this.qualifiers.putAll(source.qualifiers)__	};copy,the,qualifiers,from,the,supplied,abstract,bean,definition,to,this,bean,definition,param,source,the,abstract,bean,definition,to,copy,from;public,void,copy,qualifiers,from,abstract,bean,definition,source,assert,not,null,source,source,must,not,be,null,this,qualifiers,put,all,source,qualifiers
AbstractBeanDefinition -> public void copyQualifiersFrom(AbstractBeanDefinition source);1357119239;Copy the qualifiers from the supplied AbstractBeanDefinition to this bean definition._@param source the AbstractBeanDefinition to copy from;public void copyQualifiersFrom(AbstractBeanDefinition source) {_		Assert.notNull(source, "Source must not be null")__		this.qualifiers.putAll(source.qualifiers)__	};copy,the,qualifiers,from,the,supplied,abstract,bean,definition,to,this,bean,definition,param,source,the,abstract,bean,definition,to,copy,from;public,void,copy,qualifiers,from,abstract,bean,definition,source,assert,not,null,source,source,must,not,be,null,this,qualifiers,put,all,source,qualifiers
AbstractBeanDefinition -> public void copyQualifiersFrom(AbstractBeanDefinition source);1367508310;Copy the qualifiers from the supplied AbstractBeanDefinition to this bean definition._@param source the AbstractBeanDefinition to copy from;public void copyQualifiersFrom(AbstractBeanDefinition source) {_		Assert.notNull(source, "Source must not be null")__		this.qualifiers.putAll(source.qualifiers)__	};copy,the,qualifiers,from,the,supplied,abstract,bean,definition,to,this,bean,definition,param,source,the,abstract,bean,definition,to,copy,from;public,void,copy,qualifiers,from,abstract,bean,definition,source,assert,not,null,source,source,must,not,be,null,this,qualifiers,put,all,source,qualifiers
AbstractBeanDefinition -> public void copyQualifiersFrom(AbstractBeanDefinition source);1367943112;Copy the qualifiers from the supplied AbstractBeanDefinition to this bean definition._@param source the AbstractBeanDefinition to copy from;public void copyQualifiersFrom(AbstractBeanDefinition source) {_		Assert.notNull(source, "Source must not be null")__		this.qualifiers.putAll(source.qualifiers)__	};copy,the,qualifiers,from,the,supplied,abstract,bean,definition,to,this,bean,definition,param,source,the,abstract,bean,definition,to,copy,from;public,void,copy,qualifiers,from,abstract,bean,definition,source,assert,not,null,source,source,must,not,be,null,this,qualifiers,put,all,source,qualifiers
AbstractBeanDefinition -> public void copyQualifiersFrom(AbstractBeanDefinition source);1368482696;Copy the qualifiers from the supplied AbstractBeanDefinition to this bean definition._@param source the AbstractBeanDefinition to copy from;public void copyQualifiersFrom(AbstractBeanDefinition source) {_		Assert.notNull(source, "Source must not be null")__		this.qualifiers.putAll(source.qualifiers)__	};copy,the,qualifiers,from,the,supplied,abstract,bean,definition,to,this,bean,definition,param,source,the,abstract,bean,definition,to,copy,from;public,void,copy,qualifiers,from,abstract,bean,definition,source,assert,not,null,source,source,must,not,be,null,this,qualifiers,put,all,source,qualifiers
AbstractBeanDefinition -> public void copyQualifiersFrom(AbstractBeanDefinition source);1385412762;Copy the qualifiers from the supplied AbstractBeanDefinition to this bean definition._@param source the AbstractBeanDefinition to copy from;public void copyQualifiersFrom(AbstractBeanDefinition source) {_		Assert.notNull(source, "Source must not be null")__		this.qualifiers.putAll(source.qualifiers)__	};copy,the,qualifiers,from,the,supplied,abstract,bean,definition,to,this,bean,definition,param,source,the,abstract,bean,definition,to,copy,from;public,void,copy,qualifiers,from,abstract,bean,definition,source,assert,not,null,source,source,must,not,be,null,this,qualifiers,put,all,source,qualifiers
AbstractBeanDefinition -> public void copyQualifiersFrom(AbstractBeanDefinition source);1392245317;Copy the qualifiers from the supplied AbstractBeanDefinition to this bean definition._@param source the AbstractBeanDefinition to copy from;public void copyQualifiersFrom(AbstractBeanDefinition source) {_		Assert.notNull(source, "Source must not be null")__		this.qualifiers.putAll(source.qualifiers)__	};copy,the,qualifiers,from,the,supplied,abstract,bean,definition,to,this,bean,definition,param,source,the,abstract,bean,definition,to,copy,from;public,void,copy,qualifiers,from,abstract,bean,definition,source,assert,not,null,source,source,must,not,be,null,this,qualifiers,put,all,source,qualifiers
AbstractBeanDefinition -> public void copyQualifiersFrom(AbstractBeanDefinition source);1397163142;Copy the qualifiers from the supplied AbstractBeanDefinition to this bean definition._@param source the AbstractBeanDefinition to copy from;public void copyQualifiersFrom(AbstractBeanDefinition source) {_		Assert.notNull(source, "Source must not be null")__		this.qualifiers.putAll(source.qualifiers)__	};copy,the,qualifiers,from,the,supplied,abstract,bean,definition,to,this,bean,definition,param,source,the,abstract,bean,definition,to,copy,from;public,void,copy,qualifiers,from,abstract,bean,definition,source,assert,not,null,source,source,must,not,be,null,this,qualifiers,put,all,source,qualifiers
AbstractBeanDefinition -> public void copyQualifiersFrom(AbstractBeanDefinition source);1398898390;Copy the qualifiers from the supplied AbstractBeanDefinition to this bean definition._@param source the AbstractBeanDefinition to copy from;public void copyQualifiersFrom(AbstractBeanDefinition source) {_		Assert.notNull(source, "Source must not be null")__		this.qualifiers.putAll(source.qualifiers)__	};copy,the,qualifiers,from,the,supplied,abstract,bean,definition,to,this,bean,definition,param,source,the,abstract,bean,definition,to,copy,from;public,void,copy,qualifiers,from,abstract,bean,definition,source,assert,not,null,source,source,must,not,be,null,this,qualifiers,put,all,source,qualifiers
AbstractBeanDefinition -> public void copyQualifiersFrom(AbstractBeanDefinition source);1407511029;Copy the qualifiers from the supplied AbstractBeanDefinition to this bean definition._@param source the AbstractBeanDefinition to copy from;public void copyQualifiersFrom(AbstractBeanDefinition source) {_		Assert.notNull(source, "Source must not be null")__		this.qualifiers.putAll(source.qualifiers)__	};copy,the,qualifiers,from,the,supplied,abstract,bean,definition,to,this,bean,definition,param,source,the,abstract,bean,definition,to,copy,from;public,void,copy,qualifiers,from,abstract,bean,definition,source,assert,not,null,source,source,must,not,be,null,this,qualifiers,put,all,source,qualifiers
AbstractBeanDefinition -> public void copyQualifiersFrom(AbstractBeanDefinition source);1432135182;Copy the qualifiers from the supplied AbstractBeanDefinition to this bean definition._@param source the AbstractBeanDefinition to copy from;public void copyQualifiersFrom(AbstractBeanDefinition source) {_		Assert.notNull(source, "Source must not be null")__		this.qualifiers.putAll(source.qualifiers)__	};copy,the,qualifiers,from,the,supplied,abstract,bean,definition,to,this,bean,definition,param,source,the,abstract,bean,definition,to,copy,from;public,void,copy,qualifiers,from,abstract,bean,definition,source,assert,not,null,source,source,must,not,be,null,this,qualifiers,put,all,source,qualifiers
AbstractBeanDefinition -> public void copyQualifiersFrom(AbstractBeanDefinition source);1434204509;Copy the qualifiers from the supplied AbstractBeanDefinition to this bean definition._@param source the AbstractBeanDefinition to copy from;public void copyQualifiersFrom(AbstractBeanDefinition source) {_		Assert.notNull(source, "Source must not be null")__		this.qualifiers.putAll(source.qualifiers)__	};copy,the,qualifiers,from,the,supplied,abstract,bean,definition,to,this,bean,definition,param,source,the,abstract,bean,definition,to,copy,from;public,void,copy,qualifiers,from,abstract,bean,definition,source,assert,not,null,source,source,must,not,be,null,this,qualifiers,put,all,source,qualifiers
AbstractBeanDefinition -> public void copyQualifiersFrom(AbstractBeanDefinition source);1447323728;Copy the qualifiers from the supplied AbstractBeanDefinition to this bean definition._@param source the AbstractBeanDefinition to copy from;public void copyQualifiersFrom(AbstractBeanDefinition source) {_		Assert.notNull(source, "Source must not be null")__		this.qualifiers.putAll(source.qualifiers)__	};copy,the,qualifiers,from,the,supplied,abstract,bean,definition,to,this,bean,definition,param,source,the,abstract,bean,definition,to,copy,from;public,void,copy,qualifiers,from,abstract,bean,definition,source,assert,not,null,source,source,must,not,be,null,this,qualifiers,put,all,source,qualifiers
AbstractBeanDefinition -> public void copyQualifiersFrom(AbstractBeanDefinition source);1465226156;Copy the qualifiers from the supplied AbstractBeanDefinition to this bean definition._@param source the AbstractBeanDefinition to copy from;public void copyQualifiersFrom(AbstractBeanDefinition source) {_		Assert.notNull(source, "Source must not be null")__		this.qualifiers.putAll(source.qualifiers)__	};copy,the,qualifiers,from,the,supplied,abstract,bean,definition,to,this,bean,definition,param,source,the,abstract,bean,definition,to,copy,from;public,void,copy,qualifiers,from,abstract,bean,definition,source,assert,not,null,source,source,must,not,be,null,this,qualifiers,put,all,source,qualifiers
AbstractBeanDefinition -> public void copyQualifiersFrom(AbstractBeanDefinition source);1467730834;Copy the qualifiers from the supplied AbstractBeanDefinition to this bean definition._@param source the AbstractBeanDefinition to copy from;public void copyQualifiersFrom(AbstractBeanDefinition source) {_		Assert.notNull(source, "Source must not be null")__		this.qualifiers.putAll(source.qualifiers)__	};copy,the,qualifiers,from,the,supplied,abstract,bean,definition,to,this,bean,definition,param,source,the,abstract,bean,definition,to,copy,from;public,void,copy,qualifiers,from,abstract,bean,definition,source,assert,not,null,source,source,must,not,be,null,this,qualifiers,put,all,source,qualifiers
AbstractBeanDefinition -> public void copyQualifiersFrom(AbstractBeanDefinition source);1467846264;Copy the qualifiers from the supplied AbstractBeanDefinition to this bean definition._@param source the AbstractBeanDefinition to copy from;public void copyQualifiersFrom(AbstractBeanDefinition source) {_		Assert.notNull(source, "Source must not be null")__		this.qualifiers.putAll(source.qualifiers)__	};copy,the,qualifiers,from,the,supplied,abstract,bean,definition,to,this,bean,definition,param,source,the,abstract,bean,definition,to,copy,from;public,void,copy,qualifiers,from,abstract,bean,definition,source,assert,not,null,source,source,must,not,be,null,this,qualifiers,put,all,source,qualifiers
AbstractBeanDefinition -> public void copyQualifiersFrom(AbstractBeanDefinition source);1482091545;Copy the qualifiers from the supplied AbstractBeanDefinition to this bean definition._@param source the AbstractBeanDefinition to copy from;public void copyQualifiersFrom(AbstractBeanDefinition source) {_		Assert.notNull(source, "Source must not be null")__		this.qualifiers.putAll(source.qualifiers)__	};copy,the,qualifiers,from,the,supplied,abstract,bean,definition,to,this,bean,definition,param,source,the,abstract,bean,definition,to,copy,from;public,void,copy,qualifiers,from,abstract,bean,definition,source,assert,not,null,source,source,must,not,be,null,this,qualifiers,put,all,source,qualifiers
AbstractBeanDefinition -> public void copyQualifiersFrom(AbstractBeanDefinition source);1483093818;Copy the qualifiers from the supplied AbstractBeanDefinition to this bean definition._@param source the AbstractBeanDefinition to copy from;public void copyQualifiersFrom(AbstractBeanDefinition source) {_		Assert.notNull(source, "Source must not be null")__		this.qualifiers.putAll(source.qualifiers)__	};copy,the,qualifiers,from,the,supplied,abstract,bean,definition,to,this,bean,definition,param,source,the,abstract,bean,definition,to,copy,from;public,void,copy,qualifiers,from,abstract,bean,definition,source,assert,not,null,source,source,must,not,be,null,this,qualifiers,put,all,source,qualifiers
AbstractBeanDefinition -> public void copyQualifiersFrom(AbstractBeanDefinition source);1495868221;Copy the qualifiers from the supplied AbstractBeanDefinition to this bean definition._@param source the AbstractBeanDefinition to copy from;public void copyQualifiersFrom(AbstractBeanDefinition source) {_		Assert.notNull(source, "Source must not be null")__		this.qualifiers.putAll(source.qualifiers)__	};copy,the,qualifiers,from,the,supplied,abstract,bean,definition,to,this,bean,definition,param,source,the,abstract,bean,definition,to,copy,from;public,void,copy,qualifiers,from,abstract,bean,definition,source,assert,not,null,source,source,must,not,be,null,this,qualifiers,put,all,source,qualifiers
AbstractBeanDefinition -> public void copyQualifiersFrom(AbstractBeanDefinition source);1496837955;Copy the qualifiers from the supplied AbstractBeanDefinition to this bean definition._@param source the AbstractBeanDefinition to copy from;public void copyQualifiersFrom(AbstractBeanDefinition source) {_		Assert.notNull(source, "Source must not be null")__		this.qualifiers.putAll(source.qualifiers)__	};copy,the,qualifiers,from,the,supplied,abstract,bean,definition,to,this,bean,definition,param,source,the,abstract,bean,definition,to,copy,from;public,void,copy,qualifiers,from,abstract,bean,definition,source,assert,not,null,source,source,must,not,be,null,this,qualifiers,put,all,source,qualifiers
AbstractBeanDefinition -> public void copyQualifiersFrom(AbstractBeanDefinition source);1498780456;Copy the qualifiers from the supplied AbstractBeanDefinition to this bean definition._@param source the AbstractBeanDefinition to copy from;public void copyQualifiersFrom(AbstractBeanDefinition source) {_		Assert.notNull(source, "Source must not be null")__		this.qualifiers.putAll(source.qualifiers)__	};copy,the,qualifiers,from,the,supplied,abstract,bean,definition,to,this,bean,definition,param,source,the,abstract,bean,definition,to,copy,from;public,void,copy,qualifiers,from,abstract,bean,definition,source,assert,not,null,source,source,must,not,be,null,this,qualifiers,put,all,source,qualifiers
AbstractBeanDefinition -> public void copyQualifiersFrom(AbstractBeanDefinition source);1502974979;Copy the qualifiers from the supplied AbstractBeanDefinition to this bean definition._@param source the AbstractBeanDefinition to copy from;public void copyQualifiersFrom(AbstractBeanDefinition source) {_		Assert.notNull(source, "Source must not be null")__		this.qualifiers.putAll(source.qualifiers)__	};copy,the,qualifiers,from,the,supplied,abstract,bean,definition,to,this,bean,definition,param,source,the,abstract,bean,definition,to,copy,from;public,void,copy,qualifiers,from,abstract,bean,definition,source,assert,not,null,source,source,must,not,be,null,this,qualifiers,put,all,source,qualifiers
AbstractBeanDefinition -> public void copyQualifiersFrom(AbstractBeanDefinition source);1503008029;Copy the qualifiers from the supplied AbstractBeanDefinition to this bean definition._@param source the AbstractBeanDefinition to copy from;public void copyQualifiersFrom(AbstractBeanDefinition source) {_		Assert.notNull(source, "Source must not be null")__		this.qualifiers.putAll(source.qualifiers)__	};copy,the,qualifiers,from,the,supplied,abstract,bean,definition,to,this,bean,definition,param,source,the,abstract,bean,definition,to,copy,from;public,void,copy,qualifiers,from,abstract,bean,definition,source,assert,not,null,source,source,must,not,be,null,this,qualifiers,put,all,source,qualifiers
AbstractBeanDefinition -> public void copyQualifiersFrom(AbstractBeanDefinition source);1510606271;Copy the qualifiers from the supplied AbstractBeanDefinition to this bean definition._@param source the AbstractBeanDefinition to copy from;public void copyQualifiersFrom(AbstractBeanDefinition source) {_		Assert.notNull(source, "Source must not be null")__		this.qualifiers.putAll(source.qualifiers)__	};copy,the,qualifiers,from,the,supplied,abstract,bean,definition,to,this,bean,definition,param,source,the,abstract,bean,definition,to,copy,from;public,void,copy,qualifiers,from,abstract,bean,definition,source,assert,not,null,source,source,must,not,be,null,this,qualifiers,put,all,source,qualifiers
AbstractBeanDefinition -> public void copyQualifiersFrom(AbstractBeanDefinition source);1510675876;Copy the qualifiers from the supplied AbstractBeanDefinition to this bean definition._@param source the AbstractBeanDefinition to copy from;public void copyQualifiersFrom(AbstractBeanDefinition source) {_		Assert.notNull(source, "Source must not be null")__		this.qualifiers.putAll(source.qualifiers)__	};copy,the,qualifiers,from,the,supplied,abstract,bean,definition,to,this,bean,definition,param,source,the,abstract,bean,definition,to,copy,from;public,void,copy,qualifiers,from,abstract,bean,definition,source,assert,not,null,source,source,must,not,be,null,this,qualifiers,put,all,source,qualifiers
AbstractBeanDefinition -> public void copyQualifiersFrom(AbstractBeanDefinition source);1530174524;Copy the qualifiers from the supplied AbstractBeanDefinition to this bean definition._@param source the AbstractBeanDefinition to copy from;public void copyQualifiersFrom(AbstractBeanDefinition source) {_		Assert.notNull(source, "Source must not be null")__		this.qualifiers.putAll(source.qualifiers)__	};copy,the,qualifiers,from,the,supplied,abstract,bean,definition,to,this,bean,definition,param,source,the,abstract,bean,definition,to,copy,from;public,void,copy,qualifiers,from,abstract,bean,definition,source,assert,not,null,source,source,must,not,be,null,this,qualifiers,put,all,source,qualifiers
AbstractBeanDefinition -> public void copyQualifiersFrom(AbstractBeanDefinition source);1530174524;Copy the qualifiers from the supplied AbstractBeanDefinition to this bean definition._@param source the AbstractBeanDefinition to copy from;public void copyQualifiersFrom(AbstractBeanDefinition source) {_		Assert.notNull(source, "Source must not be null")__		this.qualifiers.putAll(source.qualifiers)__	};copy,the,qualifiers,from,the,supplied,abstract,bean,definition,to,this,bean,definition,param,source,the,abstract,bean,definition,to,copy,from;public,void,copy,qualifiers,from,abstract,bean,definition,source,assert,not,null,source,source,must,not,be,null,this,qualifiers,put,all,source,qualifiers
AbstractBeanDefinition -> public void copyQualifiersFrom(AbstractBeanDefinition source);1530174524;Copy the qualifiers from the supplied AbstractBeanDefinition to this bean definition._@param source the AbstractBeanDefinition to copy from;public void copyQualifiersFrom(AbstractBeanDefinition source) {_		Assert.notNull(source, "Source must not be null")__		this.qualifiers.putAll(source.qualifiers)__	};copy,the,qualifiers,from,the,supplied,abstract,bean,definition,to,this,bean,definition,param,source,the,abstract,bean,definition,to,copy,from;public,void,copy,qualifiers,from,abstract,bean,definition,source,assert,not,null,source,source,must,not,be,null,this,qualifiers,put,all,source,qualifiers
AbstractBeanDefinition -> public void copyQualifiersFrom(AbstractBeanDefinition source);1530190293;Copy the qualifiers from the supplied AbstractBeanDefinition to this bean definition._@param source the AbstractBeanDefinition to copy from;public void copyQualifiersFrom(AbstractBeanDefinition source) {_		Assert.notNull(source, "Source must not be null")__		this.qualifiers.putAll(source.qualifiers)__	};copy,the,qualifiers,from,the,supplied,abstract,bean,definition,to,this,bean,definition,param,source,the,abstract,bean,definition,to,copy,from;public,void,copy,qualifiers,from,abstract,bean,definition,source,assert,not,null,source,source,must,not,be,null,this,qualifiers,put,all,source,qualifiers
AbstractBeanDefinition -> public void copyQualifiersFrom(AbstractBeanDefinition source);1532981251;Copy the qualifiers from the supplied AbstractBeanDefinition to this bean definition._@param source the AbstractBeanDefinition to copy from;public void copyQualifiersFrom(AbstractBeanDefinition source) {_		Assert.notNull(source, "Source must not be null")__		this.qualifiers.putAll(source.qualifiers)__	};copy,the,qualifiers,from,the,supplied,abstract,bean,definition,to,this,bean,definition,param,source,the,abstract,bean,definition,to,copy,from;public,void,copy,qualifiers,from,abstract,bean,definition,source,assert,not,null,source,source,must,not,be,null,this,qualifiers,put,all,source,qualifiers
AbstractBeanDefinition -> public void copyQualifiersFrom(AbstractBeanDefinition source);1536863076;Copy the qualifiers from the supplied AbstractBeanDefinition to this bean definition._@param source the AbstractBeanDefinition to copy from;public void copyQualifiersFrom(AbstractBeanDefinition source) {_		Assert.notNull(source, "Source must not be null")__		this.qualifiers.putAll(source.qualifiers)__	};copy,the,qualifiers,from,the,supplied,abstract,bean,definition,to,this,bean,definition,param,source,the,abstract,bean,definition,to,copy,from;public,void,copy,qualifiers,from,abstract,bean,definition,source,assert,not,null,source,source,must,not,be,null,this,qualifiers,put,all,source,qualifiers
AbstractBeanDefinition -> @Override 	public boolean isPrimary();1356735495;Return whether this bean is a primary autowire candidate._If this value is true for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public boolean isPrimary() {_		return this.primary__	};return,whether,this,bean,is,a,primary,autowire,candidate,if,this,value,is,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,boolean,is,primary,return,this,primary
AbstractBeanDefinition -> @Override 	public boolean isPrimary();1368482696;Return whether this bean is a primary autowire candidate._If this value is true for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public boolean isPrimary() {_		return this.primary__	};return,whether,this,bean,is,a,primary,autowire,candidate,if,this,value,is,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,boolean,is,primary,return,this,primary
AbstractBeanDefinition -> @Override 	public boolean isPrimary();1385412762;Return whether this bean is a primary autowire candidate._If this value is true for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public boolean isPrimary() {_		return this.primary__	};return,whether,this,bean,is,a,primary,autowire,candidate,if,this,value,is,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,boolean,is,primary,return,this,primary
AbstractBeanDefinition -> @Override 	public boolean isPrimary();1392245317;Return whether this bean is a primary autowire candidate._If this value is true for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public boolean isPrimary() {_		return this.primary__	};return,whether,this,bean,is,a,primary,autowire,candidate,if,this,value,is,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,boolean,is,primary,return,this,primary
AbstractBeanDefinition -> @Override 	public boolean isPrimary();1397163142;Return whether this bean is a primary autowire candidate._If this value is true for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public boolean isPrimary() {_		return this.primary__	};return,whether,this,bean,is,a,primary,autowire,candidate,if,this,value,is,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,boolean,is,primary,return,this,primary
AbstractBeanDefinition -> @Override 	public boolean isPrimary();1398898390;Return whether this bean is a primary autowire candidate._If this value is true for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public boolean isPrimary() {_		return this.primary__	};return,whether,this,bean,is,a,primary,autowire,candidate,if,this,value,is,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,boolean,is,primary,return,this,primary
AbstractBeanDefinition -> @Override 	public boolean isPrimary();1407511029;Return whether this bean is a primary autowire candidate._If this value is true for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public boolean isPrimary() {_		return this.primary__	};return,whether,this,bean,is,a,primary,autowire,candidate,if,this,value,is,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,boolean,is,primary,return,this,primary
AbstractBeanDefinition -> @Override 	public boolean isPrimary();1432135182;Return whether this bean is a primary autowire candidate._If this value is true for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public boolean isPrimary() {_		return this.primary__	};return,whether,this,bean,is,a,primary,autowire,candidate,if,this,value,is,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,boolean,is,primary,return,this,primary
AbstractBeanDefinition -> @Override 	public boolean isPrimary();1434204509;Return whether this bean is a primary autowire candidate._If this value is true for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public boolean isPrimary() {_		return this.primary__	};return,whether,this,bean,is,a,primary,autowire,candidate,if,this,value,is,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,boolean,is,primary,return,this,primary
AbstractBeanDefinition -> @Override 	public boolean isPrimary();1447323728;Return whether this bean is a primary autowire candidate._If this value is true for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public boolean isPrimary() {_		return this.primary__	};return,whether,this,bean,is,a,primary,autowire,candidate,if,this,value,is,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,boolean,is,primary,return,this,primary
AbstractBeanDefinition -> @Override 	public boolean isPrimary();1465226156;Return whether this bean is a primary autowire candidate._If this value is true for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public boolean isPrimary() {_		return this.primary__	};return,whether,this,bean,is,a,primary,autowire,candidate,if,this,value,is,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,boolean,is,primary,return,this,primary
AbstractBeanDefinition -> @Override 	public boolean isPrimary();1467730834;Return whether this bean is a primary autowire candidate._If this value is true for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public boolean isPrimary() {_		return this.primary__	};return,whether,this,bean,is,a,primary,autowire,candidate,if,this,value,is,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,boolean,is,primary,return,this,primary
AbstractBeanDefinition -> @Override 	public boolean isPrimary();1467846264;Return whether this bean is a primary autowire candidate._If this value is true for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public boolean isPrimary() {_		return this.primary__	};return,whether,this,bean,is,a,primary,autowire,candidate,if,this,value,is,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,boolean,is,primary,return,this,primary
AbstractBeanDefinition -> @Override 	public boolean isPrimary();1482091545;Return whether this bean is a primary autowire candidate._If this value is true for exactly one bean among multiple_matching candidates, it will serve as a tie-breaker.;@Override_	public boolean isPrimary() {_		return this.primary__	};return,whether,this,bean,is,a,primary,autowire,candidate,if,this,value,is,true,for,exactly,one,bean,among,multiple,matching,candidates,it,will,serve,as,a,tie,breaker;override,public,boolean,is,primary,return,this,primary
AbstractBeanDefinition -> @Override 	public boolean isPrimary();1483093818;Return whether this bean is a primary autowire candidate.;@Override_	public boolean isPrimary() {_		return this.primary__	};return,whether,this,bean,is,a,primary,autowire,candidate;override,public,boolean,is,primary,return,this,primary
AbstractBeanDefinition -> @Override 	public boolean isPrimary();1495868221;Return whether this bean is a primary autowire candidate.;@Override_	public boolean isPrimary() {_		return this.primary__	};return,whether,this,bean,is,a,primary,autowire,candidate;override,public,boolean,is,primary,return,this,primary
AbstractBeanDefinition -> @Override 	public boolean isPrimary();1496837955;Return whether this bean is a primary autowire candidate.;@Override_	public boolean isPrimary() {_		return this.primary__	};return,whether,this,bean,is,a,primary,autowire,candidate;override,public,boolean,is,primary,return,this,primary
AbstractBeanDefinition -> @Override 	public boolean isPrimary();1498780456;Return whether this bean is a primary autowire candidate.;@Override_	public boolean isPrimary() {_		return this.primary__	};return,whether,this,bean,is,a,primary,autowire,candidate;override,public,boolean,is,primary,return,this,primary
AbstractBeanDefinition -> @Override 	public boolean isPrimary();1502974979;Return whether this bean is a primary autowire candidate.;@Override_	public boolean isPrimary() {_		return this.primary__	};return,whether,this,bean,is,a,primary,autowire,candidate;override,public,boolean,is,primary,return,this,primary
AbstractBeanDefinition -> @Override 	public boolean isPrimary();1503008029;Return whether this bean is a primary autowire candidate.;@Override_	public boolean isPrimary() {_		return this.primary__	};return,whether,this,bean,is,a,primary,autowire,candidate;override,public,boolean,is,primary,return,this,primary
AbstractBeanDefinition -> @Override 	public boolean isPrimary();1510606271;Return whether this bean is a primary autowire candidate.;@Override_	public boolean isPrimary() {_		return this.primary__	};return,whether,this,bean,is,a,primary,autowire,candidate;override,public,boolean,is,primary,return,this,primary
AbstractBeanDefinition -> @Override 	public boolean isPrimary();1510675876;Return whether this bean is a primary autowire candidate.;@Override_	public boolean isPrimary() {_		return this.primary__	};return,whether,this,bean,is,a,primary,autowire,candidate;override,public,boolean,is,primary,return,this,primary
AbstractBeanDefinition -> @Override 	public boolean isPrimary();1530174524;Return whether this bean is a primary autowire candidate.;@Override_	public boolean isPrimary() {_		return this.primary__	};return,whether,this,bean,is,a,primary,autowire,candidate;override,public,boolean,is,primary,return,this,primary
AbstractBeanDefinition -> @Override 	public boolean isPrimary();1530174524;Return whether this bean is a primary autowire candidate.;@Override_	public boolean isPrimary() {_		return this.primary__	};return,whether,this,bean,is,a,primary,autowire,candidate;override,public,boolean,is,primary,return,this,primary
AbstractBeanDefinition -> @Override 	public boolean isPrimary();1530174524;Return whether this bean is a primary autowire candidate.;@Override_	public boolean isPrimary() {_		return this.primary__	};return,whether,this,bean,is,a,primary,autowire,candidate;override,public,boolean,is,primary,return,this,primary
AbstractBeanDefinition -> @Override 	public boolean isPrimary();1530190293;Return whether this bean is a primary autowire candidate.;@Override_	public boolean isPrimary() {_		return this.primary__	};return,whether,this,bean,is,a,primary,autowire,candidate;override,public,boolean,is,primary,return,this,primary
AbstractBeanDefinition -> @Override 	public boolean isPrimary();1532981251;Return whether this bean is a primary autowire candidate.;@Override_	public boolean isPrimary() {_		return this.primary__	};return,whether,this,bean,is,a,primary,autowire,candidate;override,public,boolean,is,primary,return,this,primary
AbstractBeanDefinition -> @Override 	public boolean isPrimary();1536863076;Return whether this bean is a primary autowire candidate.;@Override_	public boolean isPrimary() {_		return this.primary__	};return,whether,this,bean,is,a,primary,autowire,candidate;override,public,boolean,is,primary,return,this,primary
AbstractBeanDefinition -> public void setEnforceInitMethod(boolean enforceInitMethod);1328020251;Specify whether or not the configured init method is the default._Default value is <code>false</code>._@see #setInitMethodName;public void setEnforceInitMethod(boolean enforceInitMethod) {_		this.enforceInitMethod = enforceInitMethod__	};specify,whether,or,not,the,configured,init,method,is,the,default,default,value,is,code,false,code,see,set,init,method,name;public,void,set,enforce,init,method,boolean,enforce,init,method,this,enforce,init,method,enforce,init,method
AbstractBeanDefinition -> public void setEnforceInitMethod(boolean enforceInitMethod);1337202589;Specify whether or not the configured init method is the default._Default value is <code>false</code>._@see #setInitMethodName;public void setEnforceInitMethod(boolean enforceInitMethod) {_		this.enforceInitMethod = enforceInitMethod__	};specify,whether,or,not,the,configured,init,method,is,the,default,default,value,is,code,false,code,see,set,init,method,name;public,void,set,enforce,init,method,boolean,enforce,init,method,this,enforce,init,method,enforce,init,method
AbstractBeanDefinition -> public void setEnforceInitMethod(boolean enforceInitMethod);1356735495;Specify whether or not the configured init method is the default._Default value is {@code false}._@see #setInitMethodName;public void setEnforceInitMethod(boolean enforceInitMethod) {_		this.enforceInitMethod = enforceInitMethod__	};specify,whether,or,not,the,configured,init,method,is,the,default,default,value,is,code,false,see,set,init,method,name;public,void,set,enforce,init,method,boolean,enforce,init,method,this,enforce,init,method,enforce,init,method
AbstractBeanDefinition -> public void setEnforceInitMethod(boolean enforceInitMethod);1357119239;Specify whether or not the configured init method is the default._Default value is {@code false}._@see #setInitMethodName;public void setEnforceInitMethod(boolean enforceInitMethod) {_		this.enforceInitMethod = enforceInitMethod__	};specify,whether,or,not,the,configured,init,method,is,the,default,default,value,is,code,false,see,set,init,method,name;public,void,set,enforce,init,method,boolean,enforce,init,method,this,enforce,init,method,enforce,init,method
AbstractBeanDefinition -> public void setEnforceInitMethod(boolean enforceInitMethod);1367508310;Specify whether or not the configured init method is the default._Default value is {@code false}._@see #setInitMethodName;public void setEnforceInitMethod(boolean enforceInitMethod) {_		this.enforceInitMethod = enforceInitMethod__	};specify,whether,or,not,the,configured,init,method,is,the,default,default,value,is,code,false,see,set,init,method,name;public,void,set,enforce,init,method,boolean,enforce,init,method,this,enforce,init,method,enforce,init,method
AbstractBeanDefinition -> public void setEnforceInitMethod(boolean enforceInitMethod);1367943112;Specify whether or not the configured init method is the default._Default value is {@code false}._@see #setInitMethodName;public void setEnforceInitMethod(boolean enforceInitMethod) {_		this.enforceInitMethod = enforceInitMethod__	};specify,whether,or,not,the,configured,init,method,is,the,default,default,value,is,code,false,see,set,init,method,name;public,void,set,enforce,init,method,boolean,enforce,init,method,this,enforce,init,method,enforce,init,method
AbstractBeanDefinition -> public void setEnforceInitMethod(boolean enforceInitMethod);1368482696;Specify whether or not the configured init method is the default._Default value is {@code false}._@see #setInitMethodName;public void setEnforceInitMethod(boolean enforceInitMethod) {_		this.enforceInitMethod = enforceInitMethod__	};specify,whether,or,not,the,configured,init,method,is,the,default,default,value,is,code,false,see,set,init,method,name;public,void,set,enforce,init,method,boolean,enforce,init,method,this,enforce,init,method,enforce,init,method
AbstractBeanDefinition -> public void setEnforceInitMethod(boolean enforceInitMethod);1385412762;Specify whether or not the configured init method is the default._Default value is {@code false}._@see #setInitMethodName;public void setEnforceInitMethod(boolean enforceInitMethod) {_		this.enforceInitMethod = enforceInitMethod__	};specify,whether,or,not,the,configured,init,method,is,the,default,default,value,is,code,false,see,set,init,method,name;public,void,set,enforce,init,method,boolean,enforce,init,method,this,enforce,init,method,enforce,init,method
AbstractBeanDefinition -> public void setEnforceInitMethod(boolean enforceInitMethod);1392245317;Specify whether or not the configured init method is the default._Default value is {@code false}._@see #setInitMethodName;public void setEnforceInitMethod(boolean enforceInitMethod) {_		this.enforceInitMethod = enforceInitMethod__	};specify,whether,or,not,the,configured,init,method,is,the,default,default,value,is,code,false,see,set,init,method,name;public,void,set,enforce,init,method,boolean,enforce,init,method,this,enforce,init,method,enforce,init,method
AbstractBeanDefinition -> public void setEnforceInitMethod(boolean enforceInitMethod);1397163142;Specify whether or not the configured init method is the default._Default value is {@code false}._@see #setInitMethodName;public void setEnforceInitMethod(boolean enforceInitMethod) {_		this.enforceInitMethod = enforceInitMethod__	};specify,whether,or,not,the,configured,init,method,is,the,default,default,value,is,code,false,see,set,init,method,name;public,void,set,enforce,init,method,boolean,enforce,init,method,this,enforce,init,method,enforce,init,method
AbstractBeanDefinition -> public void setEnforceInitMethod(boolean enforceInitMethod);1398898390;Specify whether or not the configured init method is the default._Default value is {@code false}._@see #setInitMethodName;public void setEnforceInitMethod(boolean enforceInitMethod) {_		this.enforceInitMethod = enforceInitMethod__	};specify,whether,or,not,the,configured,init,method,is,the,default,default,value,is,code,false,see,set,init,method,name;public,void,set,enforce,init,method,boolean,enforce,init,method,this,enforce,init,method,enforce,init,method
AbstractBeanDefinition -> public void setEnforceInitMethod(boolean enforceInitMethod);1407511029;Specify whether or not the configured init method is the default._Default value is {@code false}._@see #setInitMethodName;public void setEnforceInitMethod(boolean enforceInitMethod) {_		this.enforceInitMethod = enforceInitMethod__	};specify,whether,or,not,the,configured,init,method,is,the,default,default,value,is,code,false,see,set,init,method,name;public,void,set,enforce,init,method,boolean,enforce,init,method,this,enforce,init,method,enforce,init,method
AbstractBeanDefinition -> public void setEnforceInitMethod(boolean enforceInitMethod);1432135182;Specify whether or not the configured init method is the default._Default value is {@code false}._@see #setInitMethodName;public void setEnforceInitMethod(boolean enforceInitMethod) {_		this.enforceInitMethod = enforceInitMethod__	};specify,whether,or,not,the,configured,init,method,is,the,default,default,value,is,code,false,see,set,init,method,name;public,void,set,enforce,init,method,boolean,enforce,init,method,this,enforce,init,method,enforce,init,method
AbstractBeanDefinition -> public void setEnforceInitMethod(boolean enforceInitMethod);1434204509;Specify whether or not the configured init method is the default._Default value is {@code false}._@see #setInitMethodName;public void setEnforceInitMethod(boolean enforceInitMethod) {_		this.enforceInitMethod = enforceInitMethod__	};specify,whether,or,not,the,configured,init,method,is,the,default,default,value,is,code,false,see,set,init,method,name;public,void,set,enforce,init,method,boolean,enforce,init,method,this,enforce,init,method,enforce,init,method
AbstractBeanDefinition -> public void setEnforceInitMethod(boolean enforceInitMethod);1447323728;Specify whether or not the configured init method is the default._Default value is {@code false}._@see #setInitMethodName;public void setEnforceInitMethod(boolean enforceInitMethod) {_		this.enforceInitMethod = enforceInitMethod__	};specify,whether,or,not,the,configured,init,method,is,the,default,default,value,is,code,false,see,set,init,method,name;public,void,set,enforce,init,method,boolean,enforce,init,method,this,enforce,init,method,enforce,init,method
AbstractBeanDefinition -> public void setEnforceInitMethod(boolean enforceInitMethod);1465226156;Specify whether or not the configured init method is the default._Default value is {@code false}._@see #setInitMethodName;public void setEnforceInitMethod(boolean enforceInitMethod) {_		this.enforceInitMethod = enforceInitMethod__	};specify,whether,or,not,the,configured,init,method,is,the,default,default,value,is,code,false,see,set,init,method,name;public,void,set,enforce,init,method,boolean,enforce,init,method,this,enforce,init,method,enforce,init,method
AbstractBeanDefinition -> public void setEnforceInitMethod(boolean enforceInitMethod);1467730834;Specify whether or not the configured init method is the default._Default value is {@code false}._@see #setInitMethodName;public void setEnforceInitMethod(boolean enforceInitMethod) {_		this.enforceInitMethod = enforceInitMethod__	};specify,whether,or,not,the,configured,init,method,is,the,default,default,value,is,code,false,see,set,init,method,name;public,void,set,enforce,init,method,boolean,enforce,init,method,this,enforce,init,method,enforce,init,method
AbstractBeanDefinition -> public void setEnforceInitMethod(boolean enforceInitMethod);1467846264;Specify whether or not the configured init method is the default._Default value is {@code false}._@see #setInitMethodName;public void setEnforceInitMethod(boolean enforceInitMethod) {_		this.enforceInitMethod = enforceInitMethod__	};specify,whether,or,not,the,configured,init,method,is,the,default,default,value,is,code,false,see,set,init,method,name;public,void,set,enforce,init,method,boolean,enforce,init,method,this,enforce,init,method,enforce,init,method
AbstractBeanDefinition -> public void setEnforceInitMethod(boolean enforceInitMethod);1482091545;Specify whether or not the configured init method is the default._Default value is {@code false}._@see #setInitMethodName;public void setEnforceInitMethod(boolean enforceInitMethod) {_		this.enforceInitMethod = enforceInitMethod__	};specify,whether,or,not,the,configured,init,method,is,the,default,default,value,is,code,false,see,set,init,method,name;public,void,set,enforce,init,method,boolean,enforce,init,method,this,enforce,init,method,enforce,init,method
AbstractBeanDefinition -> public void setEnforceInitMethod(boolean enforceInitMethod);1483093818;Specify whether or not the configured init method is the default._Default value is {@code false}._@see #setInitMethodName;public void setEnforceInitMethod(boolean enforceInitMethod) {_		this.enforceInitMethod = enforceInitMethod__	};specify,whether,or,not,the,configured,init,method,is,the,default,default,value,is,code,false,see,set,init,method,name;public,void,set,enforce,init,method,boolean,enforce,init,method,this,enforce,init,method,enforce,init,method
AbstractBeanDefinition -> public void setEnforceInitMethod(boolean enforceInitMethod);1495868221;Specify whether or not the configured init method is the default._Default value is {@code false}._@see #setInitMethodName;public void setEnforceInitMethod(boolean enforceInitMethod) {_		this.enforceInitMethod = enforceInitMethod__	};specify,whether,or,not,the,configured,init,method,is,the,default,default,value,is,code,false,see,set,init,method,name;public,void,set,enforce,init,method,boolean,enforce,init,method,this,enforce,init,method,enforce,init,method
AbstractBeanDefinition -> public void setEnforceInitMethod(boolean enforceInitMethod);1496837955;Specify whether or not the configured init method is the default._<p>The default value is {@code false}._@see #setInitMethodName;public void setEnforceInitMethod(boolean enforceInitMethod) {_		this.enforceInitMethod = enforceInitMethod__	};specify,whether,or,not,the,configured,init,method,is,the,default,p,the,default,value,is,code,false,see,set,init,method,name;public,void,set,enforce,init,method,boolean,enforce,init,method,this,enforce,init,method,enforce,init,method
AbstractBeanDefinition -> public void setEnforceInitMethod(boolean enforceInitMethod);1498780456;Specify whether or not the configured init method is the default._<p>The default value is {@code false}._@see #setInitMethodName;public void setEnforceInitMethod(boolean enforceInitMethod) {_		this.enforceInitMethod = enforceInitMethod__	};specify,whether,or,not,the,configured,init,method,is,the,default,p,the,default,value,is,code,false,see,set,init,method,name;public,void,set,enforce,init,method,boolean,enforce,init,method,this,enforce,init,method,enforce,init,method
AbstractBeanDefinition -> public void setEnforceInitMethod(boolean enforceInitMethod);1502974979;Specify whether or not the configured init method is the default._<p>The default value is {@code false}._@see #setInitMethodName;public void setEnforceInitMethod(boolean enforceInitMethod) {_		this.enforceInitMethod = enforceInitMethod__	};specify,whether,or,not,the,configured,init,method,is,the,default,p,the,default,value,is,code,false,see,set,init,method,name;public,void,set,enforce,init,method,boolean,enforce,init,method,this,enforce,init,method,enforce,init,method
AbstractBeanDefinition -> public void setEnforceInitMethod(boolean enforceInitMethod);1503008029;Specify whether or not the configured init method is the default._<p>The default value is {@code false}._@see #setInitMethodName;public void setEnforceInitMethod(boolean enforceInitMethod) {_		this.enforceInitMethod = enforceInitMethod__	};specify,whether,or,not,the,configured,init,method,is,the,default,p,the,default,value,is,code,false,see,set,init,method,name;public,void,set,enforce,init,method,boolean,enforce,init,method,this,enforce,init,method,enforce,init,method
AbstractBeanDefinition -> public void setEnforceInitMethod(boolean enforceInitMethod);1510606271;Specify whether or not the configured init method is the default._<p>The default value is {@code false}._@see #setInitMethodName;public void setEnforceInitMethod(boolean enforceInitMethod) {_		this.enforceInitMethod = enforceInitMethod__	};specify,whether,or,not,the,configured,init,method,is,the,default,p,the,default,value,is,code,false,see,set,init,method,name;public,void,set,enforce,init,method,boolean,enforce,init,method,this,enforce,init,method,enforce,init,method
AbstractBeanDefinition -> public void setEnforceInitMethod(boolean enforceInitMethod);1510675876;Specify whether or not the configured init method is the default._<p>The default value is {@code false}._@see #setInitMethodName;public void setEnforceInitMethod(boolean enforceInitMethod) {_		this.enforceInitMethod = enforceInitMethod__	};specify,whether,or,not,the,configured,init,method,is,the,default,p,the,default,value,is,code,false,see,set,init,method,name;public,void,set,enforce,init,method,boolean,enforce,init,method,this,enforce,init,method,enforce,init,method
AbstractBeanDefinition -> public void setEnforceInitMethod(boolean enforceInitMethod);1530174524;Specify whether or not the configured init method is the default._<p>The default value is {@code false}._@see #setInitMethodName;public void setEnforceInitMethod(boolean enforceInitMethod) {_		this.enforceInitMethod = enforceInitMethod__	};specify,whether,or,not,the,configured,init,method,is,the,default,p,the,default,value,is,code,false,see,set,init,method,name;public,void,set,enforce,init,method,boolean,enforce,init,method,this,enforce,init,method,enforce,init,method
AbstractBeanDefinition -> public void setEnforceInitMethod(boolean enforceInitMethod);1530174524;Specify whether or not the configured init method is the default._<p>The default value is {@code false}._@see #setInitMethodName;public void setEnforceInitMethod(boolean enforceInitMethod) {_		this.enforceInitMethod = enforceInitMethod__	};specify,whether,or,not,the,configured,init,method,is,the,default,p,the,default,value,is,code,false,see,set,init,method,name;public,void,set,enforce,init,method,boolean,enforce,init,method,this,enforce,init,method,enforce,init,method
AbstractBeanDefinition -> public void setEnforceInitMethod(boolean enforceInitMethod);1530174524;Specify whether or not the configured init method is the default._<p>The default value is {@code false}._@see #setInitMethodName;public void setEnforceInitMethod(boolean enforceInitMethod) {_		this.enforceInitMethod = enforceInitMethod__	};specify,whether,or,not,the,configured,init,method,is,the,default,p,the,default,value,is,code,false,see,set,init,method,name;public,void,set,enforce,init,method,boolean,enforce,init,method,this,enforce,init,method,enforce,init,method
AbstractBeanDefinition -> public void setEnforceInitMethod(boolean enforceInitMethod);1530190293;Specify whether or not the configured init method is the default._<p>The default value is {@code false}._@see #setInitMethodName;public void setEnforceInitMethod(boolean enforceInitMethod) {_		this.enforceInitMethod = enforceInitMethod__	};specify,whether,or,not,the,configured,init,method,is,the,default,p,the,default,value,is,code,false,see,set,init,method,name;public,void,set,enforce,init,method,boolean,enforce,init,method,this,enforce,init,method,enforce,init,method
AbstractBeanDefinition -> public void setEnforceInitMethod(boolean enforceInitMethod);1532981251;Specify whether or not the configured init method is the default._<p>The default value is {@code false}._@see #setInitMethodName;public void setEnforceInitMethod(boolean enforceInitMethod) {_		this.enforceInitMethod = enforceInitMethod__	};specify,whether,or,not,the,configured,init,method,is,the,default,p,the,default,value,is,code,false,see,set,init,method,name;public,void,set,enforce,init,method,boolean,enforce,init,method,this,enforce,init,method,enforce,init,method
AbstractBeanDefinition -> public void setEnforceInitMethod(boolean enforceInitMethod);1536863076;Specify whether or not the configured init method is the default._<p>The default value is {@code false}._@see #setInitMethodName;public void setEnforceInitMethod(boolean enforceInitMethod) {_		this.enforceInitMethod = enforceInitMethod__	};specify,whether,or,not,the,configured,init,method,is,the,default,p,the,default,value,is,code,false,see,set,init,method,name;public,void,set,enforce,init,method,boolean,enforce,init,method,this,enforce,init,method,enforce,init,method
AbstractBeanDefinition -> public boolean isSynthetic();1328020251;Return whether this bean definition is 'synthetic', that is,_not defined by the application itself.;public boolean isSynthetic() {_		return this.synthetic__	};return,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself;public,boolean,is,synthetic,return,this,synthetic
AbstractBeanDefinition -> public boolean isSynthetic();1337202589;Return whether this bean definition is 'synthetic', that is,_not defined by the application itself.;public boolean isSynthetic() {_		return this.synthetic__	};return,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself;public,boolean,is,synthetic,return,this,synthetic
AbstractBeanDefinition -> public boolean isSynthetic();1356735495;Return whether this bean definition is 'synthetic', that is,_not defined by the application itself.;public boolean isSynthetic() {_		return this.synthetic__	};return,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself;public,boolean,is,synthetic,return,this,synthetic
AbstractBeanDefinition -> public boolean isSynthetic();1357119239;Return whether this bean definition is 'synthetic', that is,_not defined by the application itself.;public boolean isSynthetic() {_		return this.synthetic__	};return,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself;public,boolean,is,synthetic,return,this,synthetic
AbstractBeanDefinition -> public boolean isSynthetic();1367508310;Return whether this bean definition is 'synthetic', that is,_not defined by the application itself.;public boolean isSynthetic() {_		return this.synthetic__	};return,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself;public,boolean,is,synthetic,return,this,synthetic
AbstractBeanDefinition -> public boolean isSynthetic();1367943112;Return whether this bean definition is 'synthetic', that is,_not defined by the application itself.;public boolean isSynthetic() {_		return this.synthetic__	};return,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself;public,boolean,is,synthetic,return,this,synthetic
AbstractBeanDefinition -> public boolean isSynthetic();1368482696;Return whether this bean definition is 'synthetic', that is,_not defined by the application itself.;public boolean isSynthetic() {_		return this.synthetic__	};return,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself;public,boolean,is,synthetic,return,this,synthetic
AbstractBeanDefinition -> public boolean isSynthetic();1385412762;Return whether this bean definition is 'synthetic', that is,_not defined by the application itself.;public boolean isSynthetic() {_		return this.synthetic__	};return,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself;public,boolean,is,synthetic,return,this,synthetic
AbstractBeanDefinition -> public boolean isSynthetic();1392245317;Return whether this bean definition is 'synthetic', that is,_not defined by the application itself.;public boolean isSynthetic() {_		return this.synthetic__	};return,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself;public,boolean,is,synthetic,return,this,synthetic
AbstractBeanDefinition -> public boolean isSynthetic();1397163142;Return whether this bean definition is 'synthetic', that is,_not defined by the application itself.;public boolean isSynthetic() {_		return this.synthetic__	};return,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself;public,boolean,is,synthetic,return,this,synthetic
AbstractBeanDefinition -> public boolean isSynthetic();1398898390;Return whether this bean definition is 'synthetic', that is,_not defined by the application itself.;public boolean isSynthetic() {_		return this.synthetic__	};return,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself;public,boolean,is,synthetic,return,this,synthetic
AbstractBeanDefinition -> public boolean isSynthetic();1407511029;Return whether this bean definition is 'synthetic', that is,_not defined by the application itself.;public boolean isSynthetic() {_		return this.synthetic__	};return,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself;public,boolean,is,synthetic,return,this,synthetic
AbstractBeanDefinition -> public boolean isSynthetic();1432135182;Return whether this bean definition is 'synthetic', that is,_not defined by the application itself.;public boolean isSynthetic() {_		return this.synthetic__	};return,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself;public,boolean,is,synthetic,return,this,synthetic
AbstractBeanDefinition -> public boolean isSynthetic();1434204509;Return whether this bean definition is 'synthetic', that is,_not defined by the application itself.;public boolean isSynthetic() {_		return this.synthetic__	};return,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself;public,boolean,is,synthetic,return,this,synthetic
AbstractBeanDefinition -> public boolean isSynthetic();1447323728;Return whether this bean definition is 'synthetic', that is,_not defined by the application itself.;public boolean isSynthetic() {_		return this.synthetic__	};return,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself;public,boolean,is,synthetic,return,this,synthetic
AbstractBeanDefinition -> public boolean isSynthetic();1465226156;Return whether this bean definition is 'synthetic', that is,_not defined by the application itself.;public boolean isSynthetic() {_		return this.synthetic__	};return,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself;public,boolean,is,synthetic,return,this,synthetic
AbstractBeanDefinition -> public boolean isSynthetic();1467730834;Return whether this bean definition is 'synthetic', that is,_not defined by the application itself.;public boolean isSynthetic() {_		return this.synthetic__	};return,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself;public,boolean,is,synthetic,return,this,synthetic
AbstractBeanDefinition -> public boolean isSynthetic();1467846264;Return whether this bean definition is 'synthetic', that is,_not defined by the application itself.;public boolean isSynthetic() {_		return this.synthetic__	};return,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself;public,boolean,is,synthetic,return,this,synthetic
AbstractBeanDefinition -> public boolean isSynthetic();1482091545;Return whether this bean definition is 'synthetic', that is,_not defined by the application itself.;public boolean isSynthetic() {_		return this.synthetic__	};return,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself;public,boolean,is,synthetic,return,this,synthetic
AbstractBeanDefinition -> public boolean isSynthetic();1483093818;Return whether this bean definition is 'synthetic', that is,_not defined by the application itself.;public boolean isSynthetic() {_		return this.synthetic__	};return,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself;public,boolean,is,synthetic,return,this,synthetic
AbstractBeanDefinition -> public boolean isSynthetic();1495868221;Return whether this bean definition is 'synthetic', that is,_not defined by the application itself.;public boolean isSynthetic() {_		return this.synthetic__	};return,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself;public,boolean,is,synthetic,return,this,synthetic
AbstractBeanDefinition -> public boolean isSynthetic();1496837955;Return whether this bean definition is 'synthetic', that is,_not defined by the application itself.;public boolean isSynthetic() {_		return this.synthetic__	};return,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself;public,boolean,is,synthetic,return,this,synthetic
AbstractBeanDefinition -> public boolean isSynthetic();1498780456;Return whether this bean definition is 'synthetic', that is,_not defined by the application itself.;public boolean isSynthetic() {_		return this.synthetic__	};return,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself;public,boolean,is,synthetic,return,this,synthetic
AbstractBeanDefinition -> public boolean isSynthetic();1502974979;Return whether this bean definition is 'synthetic', that is,_not defined by the application itself.;public boolean isSynthetic() {_		return this.synthetic__	};return,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself;public,boolean,is,synthetic,return,this,synthetic
AbstractBeanDefinition -> public boolean isSynthetic();1503008029;Return whether this bean definition is 'synthetic', that is,_not defined by the application itself.;public boolean isSynthetic() {_		return this.synthetic__	};return,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself;public,boolean,is,synthetic,return,this,synthetic
AbstractBeanDefinition -> public boolean isSynthetic();1510606271;Return whether this bean definition is 'synthetic', that is,_not defined by the application itself.;public boolean isSynthetic() {_		return this.synthetic__	};return,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself;public,boolean,is,synthetic,return,this,synthetic
AbstractBeanDefinition -> public boolean isSynthetic();1510675876;Return whether this bean definition is 'synthetic', that is,_not defined by the application itself.;public boolean isSynthetic() {_		return this.synthetic__	};return,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself;public,boolean,is,synthetic,return,this,synthetic
AbstractBeanDefinition -> public boolean isSynthetic();1530174524;Return whether this bean definition is 'synthetic', that is,_not defined by the application itself.;public boolean isSynthetic() {_		return this.synthetic__	};return,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself;public,boolean,is,synthetic,return,this,synthetic
AbstractBeanDefinition -> public boolean isSynthetic();1530174524;Return whether this bean definition is 'synthetic', that is,_not defined by the application itself.;public boolean isSynthetic() {_		return this.synthetic__	};return,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself;public,boolean,is,synthetic,return,this,synthetic
AbstractBeanDefinition -> public boolean isSynthetic();1530174524;Return whether this bean definition is 'synthetic', that is,_not defined by the application itself.;public boolean isSynthetic() {_		return this.synthetic__	};return,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself;public,boolean,is,synthetic,return,this,synthetic
AbstractBeanDefinition -> public boolean isSynthetic();1530190293;Return whether this bean definition is 'synthetic', that is,_not defined by the application itself.;public boolean isSynthetic() {_		return this.synthetic__	};return,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself;public,boolean,is,synthetic,return,this,synthetic
AbstractBeanDefinition -> public boolean isSynthetic();1532981251;Return whether this bean definition is 'synthetic', that is,_not defined by the application itself.;public boolean isSynthetic() {_		return this.synthetic__	};return,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself;public,boolean,is,synthetic,return,this,synthetic
AbstractBeanDefinition -> public boolean isSynthetic();1536863076;Return whether this bean definition is 'synthetic', that is,_not defined by the application itself.;public boolean isSynthetic() {_		return this.synthetic__	};return,whether,this,bean,definition,is,synthetic,that,is,not,defined,by,the,application,itself;public,boolean,is,synthetic,return,this,synthetic
AbstractBeanDefinition -> @Override 	public void setScope(@Nullable String scope);1496837955;Set the name of the target scope for the bean._<p>The default is singleton status, although this is only applied once_a bean definition becomes active in the containing factory. A bean_definition may eventually inherit its scope from a parent bean definition._For this reason, the default scope name is an empty string (i.e., {@code ""}),_with singleton status being assumed until a resolved scope is set._@see #SCOPE_SINGLETON_@see #SCOPE_PROTOTYPE;@Override_	public void setScope(@Nullable String scope) {_		this.scope = scope__	};set,the,name,of,the,target,scope,for,the,bean,p,the,default,is,singleton,status,although,this,is,only,applied,once,a,bean,definition,becomes,active,in,the,containing,factory,a,bean,definition,may,eventually,inherit,its,scope,from,a,parent,bean,definition,for,this,reason,the,default,scope,name,is,an,empty,string,i,e,code,with,singleton,status,being,assumed,until,a,resolved,scope,is,set,see,see;override,public,void,set,scope,nullable,string,scope,this,scope,scope
AbstractBeanDefinition -> @Override 	public void setScope(@Nullable String scope);1498780456;Set the name of the target scope for the bean._<p>The default is singleton status, although this is only applied once_a bean definition becomes active in the containing factory. A bean_definition may eventually inherit its scope from a parent bean definition._For this reason, the default scope name is an empty string (i.e., {@code ""}),_with singleton status being assumed until a resolved scope is set._@see #SCOPE_SINGLETON_@see #SCOPE_PROTOTYPE;@Override_	public void setScope(@Nullable String scope) {_		this.scope = scope__	};set,the,name,of,the,target,scope,for,the,bean,p,the,default,is,singleton,status,although,this,is,only,applied,once,a,bean,definition,becomes,active,in,the,containing,factory,a,bean,definition,may,eventually,inherit,its,scope,from,a,parent,bean,definition,for,this,reason,the,default,scope,name,is,an,empty,string,i,e,code,with,singleton,status,being,assumed,until,a,resolved,scope,is,set,see,see;override,public,void,set,scope,nullable,string,scope,this,scope,scope
AbstractBeanDefinition -> @Override 	public void setScope(@Nullable String scope);1502974979;Set the name of the target scope for the bean._<p>The default is singleton status, although this is only applied once_a bean definition becomes active in the containing factory. A bean_definition may eventually inherit its scope from a parent bean definition._For this reason, the default scope name is an empty string (i.e., {@code ""}),_with singleton status being assumed until a resolved scope is set._@see #SCOPE_SINGLETON_@see #SCOPE_PROTOTYPE;@Override_	public void setScope(@Nullable String scope) {_		this.scope = scope__	};set,the,name,of,the,target,scope,for,the,bean,p,the,default,is,singleton,status,although,this,is,only,applied,once,a,bean,definition,becomes,active,in,the,containing,factory,a,bean,definition,may,eventually,inherit,its,scope,from,a,parent,bean,definition,for,this,reason,the,default,scope,name,is,an,empty,string,i,e,code,with,singleton,status,being,assumed,until,a,resolved,scope,is,set,see,see;override,public,void,set,scope,nullable,string,scope,this,scope,scope
AbstractBeanDefinition -> @Override 	public void setScope(@Nullable String scope);1503008029;Set the name of the target scope for the bean._<p>The default is singleton status, although this is only applied once_a bean definition becomes active in the containing factory. A bean_definition may eventually inherit its scope from a parent bean definition._For this reason, the default scope name is an empty string (i.e., {@code ""}),_with singleton status being assumed until a resolved scope is set._@see #SCOPE_SINGLETON_@see #SCOPE_PROTOTYPE;@Override_	public void setScope(@Nullable String scope) {_		this.scope = scope__	};set,the,name,of,the,target,scope,for,the,bean,p,the,default,is,singleton,status,although,this,is,only,applied,once,a,bean,definition,becomes,active,in,the,containing,factory,a,bean,definition,may,eventually,inherit,its,scope,from,a,parent,bean,definition,for,this,reason,the,default,scope,name,is,an,empty,string,i,e,code,with,singleton,status,being,assumed,until,a,resolved,scope,is,set,see,see;override,public,void,set,scope,nullable,string,scope,this,scope,scope
AbstractBeanDefinition -> @Override 	public void setScope(@Nullable String scope);1510606271;Set the name of the target scope for the bean._<p>The default is singleton status, although this is only applied once_a bean definition becomes active in the containing factory. A bean_definition may eventually inherit its scope from a parent bean definition._For this reason, the default scope name is an empty string (i.e., {@code ""}),_with singleton status being assumed until a resolved scope is set._@see #SCOPE_SINGLETON_@see #SCOPE_PROTOTYPE;@Override_	public void setScope(@Nullable String scope) {_		this.scope = scope__	};set,the,name,of,the,target,scope,for,the,bean,p,the,default,is,singleton,status,although,this,is,only,applied,once,a,bean,definition,becomes,active,in,the,containing,factory,a,bean,definition,may,eventually,inherit,its,scope,from,a,parent,bean,definition,for,this,reason,the,default,scope,name,is,an,empty,string,i,e,code,with,singleton,status,being,assumed,until,a,resolved,scope,is,set,see,see;override,public,void,set,scope,nullable,string,scope,this,scope,scope
AbstractBeanDefinition -> @Override 	public void setScope(@Nullable String scope);1510675876;Set the name of the target scope for the bean._<p>The default is singleton status, although this is only applied once_a bean definition becomes active in the containing factory. A bean_definition may eventually inherit its scope from a parent bean definition._For this reason, the default scope name is an empty string (i.e., {@code ""}),_with singleton status being assumed until a resolved scope is set._@see #SCOPE_SINGLETON_@see #SCOPE_PROTOTYPE;@Override_	public void setScope(@Nullable String scope) {_		this.scope = scope__	};set,the,name,of,the,target,scope,for,the,bean,p,the,default,is,singleton,status,although,this,is,only,applied,once,a,bean,definition,becomes,active,in,the,containing,factory,a,bean,definition,may,eventually,inherit,its,scope,from,a,parent,bean,definition,for,this,reason,the,default,scope,name,is,an,empty,string,i,e,code,with,singleton,status,being,assumed,until,a,resolved,scope,is,set,see,see;override,public,void,set,scope,nullable,string,scope,this,scope,scope
AbstractBeanDefinition -> @Override 	public void setScope(@Nullable String scope);1530174524;Set the name of the target scope for the bean._<p>The default is singleton status, although this is only applied once_a bean definition becomes active in the containing factory. A bean_definition may eventually inherit its scope from a parent bean definition._For this reason, the default scope name is an empty string (i.e., {@code ""}),_with singleton status being assumed until a resolved scope is set._@see #SCOPE_SINGLETON_@see #SCOPE_PROTOTYPE;@Override_	public void setScope(@Nullable String scope) {_		this.scope = scope__	};set,the,name,of,the,target,scope,for,the,bean,p,the,default,is,singleton,status,although,this,is,only,applied,once,a,bean,definition,becomes,active,in,the,containing,factory,a,bean,definition,may,eventually,inherit,its,scope,from,a,parent,bean,definition,for,this,reason,the,default,scope,name,is,an,empty,string,i,e,code,with,singleton,status,being,assumed,until,a,resolved,scope,is,set,see,see;override,public,void,set,scope,nullable,string,scope,this,scope,scope
AbstractBeanDefinition -> @Override 	public void setScope(@Nullable String scope);1530174524;Set the name of the target scope for the bean._<p>The default is singleton status, although this is only applied once_a bean definition becomes active in the containing factory. A bean_definition may eventually inherit its scope from a parent bean definition._For this reason, the default scope name is an empty string (i.e., {@code ""}),_with singleton status being assumed until a resolved scope is set._@see #SCOPE_SINGLETON_@see #SCOPE_PROTOTYPE;@Override_	public void setScope(@Nullable String scope) {_		this.scope = scope__	};set,the,name,of,the,target,scope,for,the,bean,p,the,default,is,singleton,status,although,this,is,only,applied,once,a,bean,definition,becomes,active,in,the,containing,factory,a,bean,definition,may,eventually,inherit,its,scope,from,a,parent,bean,definition,for,this,reason,the,default,scope,name,is,an,empty,string,i,e,code,with,singleton,status,being,assumed,until,a,resolved,scope,is,set,see,see;override,public,void,set,scope,nullable,string,scope,this,scope,scope
AbstractBeanDefinition -> @Override 	public void setScope(@Nullable String scope);1530174524;Set the name of the target scope for the bean._<p>The default is singleton status, although this is only applied once_a bean definition becomes active in the containing factory. A bean_definition may eventually inherit its scope from a parent bean definition._For this reason, the default scope name is an empty string (i.e., {@code ""}),_with singleton status being assumed until a resolved scope is set._@see #SCOPE_SINGLETON_@see #SCOPE_PROTOTYPE;@Override_	public void setScope(@Nullable String scope) {_		this.scope = scope__	};set,the,name,of,the,target,scope,for,the,bean,p,the,default,is,singleton,status,although,this,is,only,applied,once,a,bean,definition,becomes,active,in,the,containing,factory,a,bean,definition,may,eventually,inherit,its,scope,from,a,parent,bean,definition,for,this,reason,the,default,scope,name,is,an,empty,string,i,e,code,with,singleton,status,being,assumed,until,a,resolved,scope,is,set,see,see;override,public,void,set,scope,nullable,string,scope,this,scope,scope
AbstractBeanDefinition -> @Override 	public void setScope(@Nullable String scope);1530190293;Set the name of the target scope for the bean._<p>The default is singleton status, although this is only applied once_a bean definition becomes active in the containing factory. A bean_definition may eventually inherit its scope from a parent bean definition._For this reason, the default scope name is an empty string (i.e., {@code ""}),_with singleton status being assumed until a resolved scope is set._@see #SCOPE_SINGLETON_@see #SCOPE_PROTOTYPE;@Override_	public void setScope(@Nullable String scope) {_		this.scope = scope__	};set,the,name,of,the,target,scope,for,the,bean,p,the,default,is,singleton,status,although,this,is,only,applied,once,a,bean,definition,becomes,active,in,the,containing,factory,a,bean,definition,may,eventually,inherit,its,scope,from,a,parent,bean,definition,for,this,reason,the,default,scope,name,is,an,empty,string,i,e,code,with,singleton,status,being,assumed,until,a,resolved,scope,is,set,see,see;override,public,void,set,scope,nullable,string,scope,this,scope,scope
AbstractBeanDefinition -> @Override 	public void setScope(@Nullable String scope);1532981251;Set the name of the target scope for the bean._<p>The default is singleton status, although this is only applied once_a bean definition becomes active in the containing factory. A bean_definition may eventually inherit its scope from a parent bean definition._For this reason, the default scope name is an empty string (i.e., {@code ""}),_with singleton status being assumed until a resolved scope is set._@see #SCOPE_SINGLETON_@see #SCOPE_PROTOTYPE;@Override_	public void setScope(@Nullable String scope) {_		this.scope = scope__	};set,the,name,of,the,target,scope,for,the,bean,p,the,default,is,singleton,status,although,this,is,only,applied,once,a,bean,definition,becomes,active,in,the,containing,factory,a,bean,definition,may,eventually,inherit,its,scope,from,a,parent,bean,definition,for,this,reason,the,default,scope,name,is,an,empty,string,i,e,code,with,singleton,status,being,assumed,until,a,resolved,scope,is,set,see,see;override,public,void,set,scope,nullable,string,scope,this,scope,scope
AbstractBeanDefinition -> @Override 	public void setScope(@Nullable String scope);1536863076;Set the name of the target scope for the bean._<p>The default is singleton status, although this is only applied once_a bean definition becomes active in the containing factory. A bean_definition may eventually inherit its scope from a parent bean definition._For this reason, the default scope name is an empty string (i.e., {@code ""}),_with singleton status being assumed until a resolved scope is set._@see #SCOPE_SINGLETON_@see #SCOPE_PROTOTYPE;@Override_	public void setScope(@Nullable String scope) {_		this.scope = scope__	};set,the,name,of,the,target,scope,for,the,bean,p,the,default,is,singleton,status,although,this,is,only,applied,once,a,bean,definition,becomes,active,in,the,containing,factory,a,bean,definition,may,eventually,inherit,its,scope,from,a,parent,bean,definition,for,this,reason,the,default,scope,name,is,an,empty,string,i,e,code,with,singleton,status,being,assumed,until,a,resolved,scope,is,set,see,see;override,public,void,set,scope,nullable,string,scope,this,scope,scope
