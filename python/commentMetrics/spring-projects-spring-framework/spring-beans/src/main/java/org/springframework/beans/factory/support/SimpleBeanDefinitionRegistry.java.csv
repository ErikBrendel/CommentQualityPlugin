commented;modifiers;parameterAmount;loc;comment;code
false;public;2;8;;@Override public void registerBeanDefinition(String beanName, BeanDefinition beanDefinition) throws BeanDefinitionStoreException {     Assert.hasText(beanName, "'beanName' must not be empty").     Assert.notNull(beanDefinition, "BeanDefinition must not be null").     this.beanDefinitionMap.put(beanName, beanDefinition). }
false;public;1;6;;@Override public void removeBeanDefinition(String beanName) throws NoSuchBeanDefinitionException {     if (this.beanDefinitionMap.remove(beanName) == null) {         throw new NoSuchBeanDefinitionException(beanName).     } }
false;public;1;8;;@Override public BeanDefinition getBeanDefinition(String beanName) throws NoSuchBeanDefinitionException {     BeanDefinition bd = this.beanDefinitionMap.get(beanName).     if (bd == null) {         throw new NoSuchBeanDefinitionException(beanName).     }     return bd. }
false;public;1;4;;@Override public boolean containsBeanDefinition(String beanName) {     return this.beanDefinitionMap.containsKey(beanName). }
false;public;0;4;;@Override public String[] getBeanDefinitionNames() {     return StringUtils.toStringArray(this.beanDefinitionMap.keySet()). }
false;public;0;4;;@Override public int getBeanDefinitionCount() {     return this.beanDefinitionMap.size(). }
false;public;1;4;;@Override public boolean isBeanNameInUse(String beanName) {     return isAlias(beanName) || containsBeanDefinition(beanName). }
