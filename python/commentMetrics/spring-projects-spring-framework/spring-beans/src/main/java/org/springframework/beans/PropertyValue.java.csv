commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the name of the property.  */ ;/**  * Return the name of the property.  */ public String getName() {     return this.name. }
true;public;0;4;/**  * Return the value of the property.  * <p>Note that type conversion will <i>not</i> have occurred here.  * It is the responsibility of the BeanWrapper implementation to  * perform type conversion.  */ ;/**  * Return the value of the property.  * <p>Note that type conversion will <i>not</i> have occurred here.  * It is the responsibility of the BeanWrapper implementation to  * perform type conversion.  */ @Nullable public Object getValue() {     return this.value. }
true;public;0;9;/**  * Return the original PropertyValue instance for this value holder.  * @return the original PropertyValue (either a source of this  * value holder or this value holder itself).  */ ;/**  * Return the original PropertyValue instance for this value holder.  * @return the original PropertyValue (either a source of this  * value holder or this value holder itself).  */ public PropertyValue getOriginalPropertyValue() {     PropertyValue original = this.     Object source = getSource().     while (source instanceof PropertyValue && source != original) {         original = (PropertyValue) source.         source = original.getSource().     }     return original. }
true;public;1;3;/**  * Set whether this is an optional value, that is, to be ignored  * when no corresponding property exists on the target class.  * @since 3.0  */ ;/**  * Set whether this is an optional value, that is, to be ignored  * when no corresponding property exists on the target class.  * @since 3.0  */ public void setOptional(boolean optional) {     this.optional = optional. }
true;public;0;3;/**  * Return whether this is an optional value, that is, to be ignored  * when no corresponding property exists on the target class.  * @since 3.0  */ ;/**  * Return whether this is an optional value, that is, to be ignored  * when no corresponding property exists on the target class.  * @since 3.0  */ public boolean isOptional() {     return this.optional. }
true;public,synchronized;0;3;/**  * Return whether this holder contains a converted value already ({@code true}),  * or whether the value still needs to be converted ({@code false}).  */ ;/**  * Return whether this holder contains a converted value already ({@code true}),  * or whether the value still needs to be converted ({@code false}).  */ public synchronized boolean isConverted() {     return this.converted. }
true;public,synchronized;1;4;/**  * Set the converted value of the constructor argument,  * after processed type conversion.  */ ;/**  * Set the converted value of the constructor argument,  * after processed type conversion.  */ public synchronized void setConvertedValue(@Nullable Object value) {     this.converted = true.     this.convertedValue = value. }
true;public,synchronized;0;4;/**  * Return the converted value of the constructor argument,  * after processed type conversion.  */ ;/**  * Return the converted value of the constructor argument,  * after processed type conversion.  */ @Nullable public synchronized Object getConvertedValue() {     return this.convertedValue. }
false;public;1;13;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (!(other instanceof PropertyValue)) {         return false.     }     PropertyValue otherPv = (PropertyValue) other.     return (this.name.equals(otherPv.name) && ObjectUtils.nullSafeEquals(this.value, otherPv.value) && ObjectUtils.nullSafeEquals(getSource(), otherPv.getSource())). }
false;public;0;4;;@Override public int hashCode() {     return this.name.hashCode() * 29 + ObjectUtils.nullSafeHashCode(this.value). }
false;public;0;4;;@Override public String toString() {     return "bean property '" + this.name + "'". }
