# id;timestamp;commentText;codeText;commentWords;codeWords
ConfigurableListableBeanFactory -> void freezeConfiguration()_;1328020251;Freeze all bean definitions, signalling that the registered bean definitions_will not be modified or post-processed any further._<p>This allows the factory to aggressively cache bean definition metadata.;void freezeConfiguration()_;freeze,all,bean,definitions,signalling,that,the,registered,bean,definitions,will,not,be,modified,or,post,processed,any,further,p,this,allows,the,factory,to,aggressively,cache,bean,definition,metadata;void,freeze,configuration
ConfigurableListableBeanFactory -> void freezeConfiguration()_;1356735495;Freeze all bean definitions, signalling that the registered bean definitions_will not be modified or post-processed any further._<p>This allows the factory to aggressively cache bean definition metadata.;void freezeConfiguration()_;freeze,all,bean,definitions,signalling,that,the,registered,bean,definitions,will,not,be,modified,or,post,processed,any,further,p,this,allows,the,factory,to,aggressively,cache,bean,definition,metadata;void,freeze,configuration
ConfigurableListableBeanFactory -> void freezeConfiguration()_;1414833080;Freeze all bean definitions, signalling that the registered bean definitions_will not be modified or post-processed any further._<p>This allows the factory to aggressively cache bean definition metadata.;void freezeConfiguration()_;freeze,all,bean,definitions,signalling,that,the,registered,bean,definitions,will,not,be,modified,or,post,processed,any,further,p,this,allows,the,factory,to,aggressively,cache,bean,definition,metadata;void,freeze,configuration
ConfigurableListableBeanFactory -> void freezeConfiguration()_;1436911539;Freeze all bean definitions, signalling that the registered bean definitions_will not be modified or post-processed any further._<p>This allows the factory to aggressively cache bean definition metadata.;void freezeConfiguration()_;freeze,all,bean,definitions,signalling,that,the,registered,bean,definitions,will,not,be,modified,or,post,processed,any,further,p,this,allows,the,factory,to,aggressively,cache,bean,definition,metadata;void,freeze,configuration
ConfigurableListableBeanFactory -> void freezeConfiguration()_;1496243689;Freeze all bean definitions, signalling that the registered bean definitions_will not be modified or post-processed any further._<p>This allows the factory to aggressively cache bean definition metadata.;void freezeConfiguration()_;freeze,all,bean,definitions,signalling,that,the,registered,bean,definitions,will,not,be,modified,or,post,processed,any,further,p,this,allows,the,factory,to,aggressively,cache,bean,definition,metadata;void,freeze,configuration
ConfigurableListableBeanFactory -> void freezeConfiguration()_;1496837955;Freeze all bean definitions, signalling that the registered bean definitions_will not be modified or post-processed any further._<p>This allows the factory to aggressively cache bean definition metadata.;void freezeConfiguration()_;freeze,all,bean,definitions,signalling,that,the,registered,bean,definitions,will,not,be,modified,or,post,processed,any,further,p,this,allows,the,factory,to,aggressively,cache,bean,definition,metadata;void,freeze,configuration
ConfigurableListableBeanFactory -> boolean isAutowireCandidate(String beanName, DependencyDescriptor descriptor) 			throws NoSuchBeanDefinitionException_;1328020251;Determine whether the specified bean qualifies as an autowire candidate,_to be injected into other beans which declare a dependency of matching type._<p>This method checks ancestor factories as well._@param beanName the name of the bean to check_@param descriptor the descriptor of the dependency to resolve_@return whether the bean should be considered as autowire candidate_@throws NoSuchBeanDefinitionException if there is no bean with the given name;boolean isAutowireCandidate(String beanName, DependencyDescriptor descriptor)_			throws NoSuchBeanDefinitionException_;determine,whether,the,specified,bean,qualifies,as,an,autowire,candidate,to,be,injected,into,other,beans,which,declare,a,dependency,of,matching,type,p,this,method,checks,ancestor,factories,as,well,param,bean,name,the,name,of,the,bean,to,check,param,descriptor,the,descriptor,of,the,dependency,to,resolve,return,whether,the,bean,should,be,considered,as,autowire,candidate,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name;boolean,is,autowire,candidate,string,bean,name,dependency,descriptor,descriptor,throws,no,such,bean,definition,exception
ConfigurableListableBeanFactory -> boolean isAutowireCandidate(String beanName, DependencyDescriptor descriptor) 			throws NoSuchBeanDefinitionException_;1356735495;Determine whether the specified bean qualifies as an autowire candidate,_to be injected into other beans which declare a dependency of matching type._<p>This method checks ancestor factories as well._@param beanName the name of the bean to check_@param descriptor the descriptor of the dependency to resolve_@return whether the bean should be considered as autowire candidate_@throws NoSuchBeanDefinitionException if there is no bean with the given name;boolean isAutowireCandidate(String beanName, DependencyDescriptor descriptor)_			throws NoSuchBeanDefinitionException_;determine,whether,the,specified,bean,qualifies,as,an,autowire,candidate,to,be,injected,into,other,beans,which,declare,a,dependency,of,matching,type,p,this,method,checks,ancestor,factories,as,well,param,bean,name,the,name,of,the,bean,to,check,param,descriptor,the,descriptor,of,the,dependency,to,resolve,return,whether,the,bean,should,be,considered,as,autowire,candidate,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name;boolean,is,autowire,candidate,string,bean,name,dependency,descriptor,descriptor,throws,no,such,bean,definition,exception
ConfigurableListableBeanFactory -> boolean isAutowireCandidate(String beanName, DependencyDescriptor descriptor) 			throws NoSuchBeanDefinitionException_;1414833080;Determine whether the specified bean qualifies as an autowire candidate,_to be injected into other beans which declare a dependency of matching type._<p>This method checks ancestor factories as well._@param beanName the name of the bean to check_@param descriptor the descriptor of the dependency to resolve_@return whether the bean should be considered as autowire candidate_@throws NoSuchBeanDefinitionException if there is no bean with the given name;boolean isAutowireCandidate(String beanName, DependencyDescriptor descriptor)_			throws NoSuchBeanDefinitionException_;determine,whether,the,specified,bean,qualifies,as,an,autowire,candidate,to,be,injected,into,other,beans,which,declare,a,dependency,of,matching,type,p,this,method,checks,ancestor,factories,as,well,param,bean,name,the,name,of,the,bean,to,check,param,descriptor,the,descriptor,of,the,dependency,to,resolve,return,whether,the,bean,should,be,considered,as,autowire,candidate,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name;boolean,is,autowire,candidate,string,bean,name,dependency,descriptor,descriptor,throws,no,such,bean,definition,exception
ConfigurableListableBeanFactory -> boolean isAutowireCandidate(String beanName, DependencyDescriptor descriptor) 			throws NoSuchBeanDefinitionException_;1436911539;Determine whether the specified bean qualifies as an autowire candidate,_to be injected into other beans which declare a dependency of matching type._<p>This method checks ancestor factories as well._@param beanName the name of the bean to check_@param descriptor the descriptor of the dependency to resolve_@return whether the bean should be considered as autowire candidate_@throws NoSuchBeanDefinitionException if there is no bean with the given name;boolean isAutowireCandidate(String beanName, DependencyDescriptor descriptor)_			throws NoSuchBeanDefinitionException_;determine,whether,the,specified,bean,qualifies,as,an,autowire,candidate,to,be,injected,into,other,beans,which,declare,a,dependency,of,matching,type,p,this,method,checks,ancestor,factories,as,well,param,bean,name,the,name,of,the,bean,to,check,param,descriptor,the,descriptor,of,the,dependency,to,resolve,return,whether,the,bean,should,be,considered,as,autowire,candidate,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name;boolean,is,autowire,candidate,string,bean,name,dependency,descriptor,descriptor,throws,no,such,bean,definition,exception
ConfigurableListableBeanFactory -> boolean isAutowireCandidate(String beanName, DependencyDescriptor descriptor) 			throws NoSuchBeanDefinitionException_;1496243689;Determine whether the specified bean qualifies as an autowire candidate,_to be injected into other beans which declare a dependency of matching type._<p>This method checks ancestor factories as well._@param beanName the name of the bean to check_@param descriptor the descriptor of the dependency to resolve_@return whether the bean should be considered as autowire candidate_@throws NoSuchBeanDefinitionException if there is no bean with the given name;boolean isAutowireCandidate(String beanName, DependencyDescriptor descriptor)_			throws NoSuchBeanDefinitionException_;determine,whether,the,specified,bean,qualifies,as,an,autowire,candidate,to,be,injected,into,other,beans,which,declare,a,dependency,of,matching,type,p,this,method,checks,ancestor,factories,as,well,param,bean,name,the,name,of,the,bean,to,check,param,descriptor,the,descriptor,of,the,dependency,to,resolve,return,whether,the,bean,should,be,considered,as,autowire,candidate,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name;boolean,is,autowire,candidate,string,bean,name,dependency,descriptor,descriptor,throws,no,such,bean,definition,exception
ConfigurableListableBeanFactory -> boolean isAutowireCandidate(String beanName, DependencyDescriptor descriptor) 			throws NoSuchBeanDefinitionException_;1496837955;Determine whether the specified bean qualifies as an autowire candidate,_to be injected into other beans which declare a dependency of matching type._<p>This method checks ancestor factories as well._@param beanName the name of the bean to check_@param descriptor the descriptor of the dependency to resolve_@return whether the bean should be considered as autowire candidate_@throws NoSuchBeanDefinitionException if there is no bean with the given name;boolean isAutowireCandidate(String beanName, DependencyDescriptor descriptor)_			throws NoSuchBeanDefinitionException_;determine,whether,the,specified,bean,qualifies,as,an,autowire,candidate,to,be,injected,into,other,beans,which,declare,a,dependency,of,matching,type,p,this,method,checks,ancestor,factories,as,well,param,bean,name,the,name,of,the,bean,to,check,param,descriptor,the,descriptor,of,the,dependency,to,resolve,return,whether,the,bean,should,be,considered,as,autowire,candidate,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name;boolean,is,autowire,candidate,string,bean,name,dependency,descriptor,descriptor,throws,no,such,bean,definition,exception
ConfigurableListableBeanFactory -> void ignoreDependencyType(Class<?> type)_;1328020251;Ignore the given dependency type for autowiring:_for example, String. Default is none._@param type the dependency type to ignore;void ignoreDependencyType(Class<?> type)_;ignore,the,given,dependency,type,for,autowiring,for,example,string,default,is,none,param,type,the,dependency,type,to,ignore;void,ignore,dependency,type,class,type
ConfigurableListableBeanFactory -> void ignoreDependencyType(Class<?> type)_;1356735495;Ignore the given dependency type for autowiring:_for example, String. Default is none._@param type the dependency type to ignore;void ignoreDependencyType(Class<?> type)_;ignore,the,given,dependency,type,for,autowiring,for,example,string,default,is,none,param,type,the,dependency,type,to,ignore;void,ignore,dependency,type,class,type
ConfigurableListableBeanFactory -> void ignoreDependencyType(Class<?> type)_;1414833080;Ignore the given dependency type for autowiring:_for example, String. Default is none._@param type the dependency type to ignore;void ignoreDependencyType(Class<?> type)_;ignore,the,given,dependency,type,for,autowiring,for,example,string,default,is,none,param,type,the,dependency,type,to,ignore;void,ignore,dependency,type,class,type
ConfigurableListableBeanFactory -> void ignoreDependencyType(Class<?> type)_;1436911539;Ignore the given dependency type for autowiring:_for example, String. Default is none._@param type the dependency type to ignore;void ignoreDependencyType(Class<?> type)_;ignore,the,given,dependency,type,for,autowiring,for,example,string,default,is,none,param,type,the,dependency,type,to,ignore;void,ignore,dependency,type,class,type
ConfigurableListableBeanFactory -> void ignoreDependencyType(Class<?> type)_;1496243689;Ignore the given dependency type for autowiring:_for example, String. Default is none._@param type the dependency type to ignore;void ignoreDependencyType(Class<?> type)_;ignore,the,given,dependency,type,for,autowiring,for,example,string,default,is,none,param,type,the,dependency,type,to,ignore;void,ignore,dependency,type,class,type
ConfigurableListableBeanFactory -> void ignoreDependencyType(Class<?> type)_;1496837955;Ignore the given dependency type for autowiring:_for example, String. Default is none._@param type the dependency type to ignore;void ignoreDependencyType(Class<?> type)_;ignore,the,given,dependency,type,for,autowiring,for,example,string,default,is,none,param,type,the,dependency,type,to,ignore;void,ignore,dependency,type,class,type
ConfigurableListableBeanFactory -> void clearMetadataCache()_;1436911539;Clear the merged bean definition cache, removing entries for beans_which are not considered eligible for full metadata caching yet._<p>Typically triggered after changes to the original bean definitions,_e.g. after applying a {@link BeanFactoryPostProcessor}. Note that metadata_for beans which have already been created at this point will be kept around._@since 4.2_@see #getBeanDefinition_@see #getMergedBeanDefinition;void clearMetadataCache()_;clear,the,merged,bean,definition,cache,removing,entries,for,beans,which,are,not,considered,eligible,for,full,metadata,caching,yet,p,typically,triggered,after,changes,to,the,original,bean,definitions,e,g,after,applying,a,link,bean,factory,post,processor,note,that,metadata,for,beans,which,have,already,been,created,at,this,point,will,be,kept,around,since,4,2,see,get,bean,definition,see,get,merged,bean,definition;void,clear,metadata,cache
ConfigurableListableBeanFactory -> void clearMetadataCache()_;1496243689;Clear the merged bean definition cache, removing entries for beans_which are not considered eligible for full metadata caching yet._<p>Typically triggered after changes to the original bean definitions,_e.g. after applying a {@link BeanFactoryPostProcessor}. Note that metadata_for beans which have already been created at this point will be kept around._@since 4.2_@see #getBeanDefinition_@see #getMergedBeanDefinition;void clearMetadataCache()_;clear,the,merged,bean,definition,cache,removing,entries,for,beans,which,are,not,considered,eligible,for,full,metadata,caching,yet,p,typically,triggered,after,changes,to,the,original,bean,definitions,e,g,after,applying,a,link,bean,factory,post,processor,note,that,metadata,for,beans,which,have,already,been,created,at,this,point,will,be,kept,around,since,4,2,see,get,bean,definition,see,get,merged,bean,definition;void,clear,metadata,cache
ConfigurableListableBeanFactory -> void clearMetadataCache()_;1496837955;Clear the merged bean definition cache, removing entries for beans_which are not considered eligible for full metadata caching yet._<p>Typically triggered after changes to the original bean definitions,_e.g. after applying a {@link BeanFactoryPostProcessor}. Note that metadata_for beans which have already been created at this point will be kept around._@since 4.2_@see #getBeanDefinition_@see #getMergedBeanDefinition;void clearMetadataCache()_;clear,the,merged,bean,definition,cache,removing,entries,for,beans,which,are,not,considered,eligible,for,full,metadata,caching,yet,p,typically,triggered,after,changes,to,the,original,bean,definitions,e,g,after,applying,a,link,bean,factory,post,processor,note,that,metadata,for,beans,which,have,already,been,created,at,this,point,will,be,kept,around,since,4,2,see,get,bean,definition,see,get,merged,bean,definition;void,clear,metadata,cache
ConfigurableListableBeanFactory -> void registerResolvableDependency(Class<?> dependencyType, Object autowiredValue)_;1328020251;Register a special dependency type with corresponding autowired value._<p>This is intended for factory/context references that are supposed_to be autowirable but are not defined as beans in the factory:_e.g. a dependency of type ApplicationContext resolved to the_ApplicationContext instance that the bean is living in._<p>Note: There are no such default types registered in a plain BeanFactory,_not even for the BeanFactory interface itself._@param dependencyType the dependency type to register. This will typically_be a base interface such as BeanFactory, with extensions of it resolved_as well if declared as an autowiring dependency (e.g. ListableBeanFactory),_as long as the given value actually implements the extended interface._@param autowiredValue the corresponding autowired value. This may also be an_implementation of the {@link org.springframework.beans.factory.ObjectFactory}_interface, which allows for lazy resolution of the actual target value.;void registerResolvableDependency(Class<?> dependencyType, Object autowiredValue)_;register,a,special,dependency,type,with,corresponding,autowired,value,p,this,is,intended,for,factory,context,references,that,are,supposed,to,be,autowirable,but,are,not,defined,as,beans,in,the,factory,e,g,a,dependency,of,type,application,context,resolved,to,the,application,context,instance,that,the,bean,is,living,in,p,note,there,are,no,such,default,types,registered,in,a,plain,bean,factory,not,even,for,the,bean,factory,interface,itself,param,dependency,type,the,dependency,type,to,register,this,will,typically,be,a,base,interface,such,as,bean,factory,with,extensions,of,it,resolved,as,well,if,declared,as,an,autowiring,dependency,e,g,listable,bean,factory,as,long,as,the,given,value,actually,implements,the,extended,interface,param,autowired,value,the,corresponding,autowired,value,this,may,also,be,an,implementation,of,the,link,org,springframework,beans,factory,object,factory,interface,which,allows,for,lazy,resolution,of,the,actual,target,value;void,register,resolvable,dependency,class,dependency,type,object,autowired,value
ConfigurableListableBeanFactory -> void registerResolvableDependency(Class<?> dependencyType, Object autowiredValue)_;1356735495;Register a special dependency type with corresponding autowired value._<p>This is intended for factory/context references that are supposed_to be autowirable but are not defined as beans in the factory:_e.g. a dependency of type ApplicationContext resolved to the_ApplicationContext instance that the bean is living in._<p>Note: There are no such default types registered in a plain BeanFactory,_not even for the BeanFactory interface itself._@param dependencyType the dependency type to register. This will typically_be a base interface such as BeanFactory, with extensions of it resolved_as well if declared as an autowiring dependency (e.g. ListableBeanFactory),_as long as the given value actually implements the extended interface._@param autowiredValue the corresponding autowired value. This may also be an_implementation of the {@link org.springframework.beans.factory.ObjectFactory}_interface, which allows for lazy resolution of the actual target value.;void registerResolvableDependency(Class<?> dependencyType, Object autowiredValue)_;register,a,special,dependency,type,with,corresponding,autowired,value,p,this,is,intended,for,factory,context,references,that,are,supposed,to,be,autowirable,but,are,not,defined,as,beans,in,the,factory,e,g,a,dependency,of,type,application,context,resolved,to,the,application,context,instance,that,the,bean,is,living,in,p,note,there,are,no,such,default,types,registered,in,a,plain,bean,factory,not,even,for,the,bean,factory,interface,itself,param,dependency,type,the,dependency,type,to,register,this,will,typically,be,a,base,interface,such,as,bean,factory,with,extensions,of,it,resolved,as,well,if,declared,as,an,autowiring,dependency,e,g,listable,bean,factory,as,long,as,the,given,value,actually,implements,the,extended,interface,param,autowired,value,the,corresponding,autowired,value,this,may,also,be,an,implementation,of,the,link,org,springframework,beans,factory,object,factory,interface,which,allows,for,lazy,resolution,of,the,actual,target,value;void,register,resolvable,dependency,class,dependency,type,object,autowired,value
ConfigurableListableBeanFactory -> void registerResolvableDependency(Class<?> dependencyType, Object autowiredValue)_;1414833080;Register a special dependency type with corresponding autowired value._<p>This is intended for factory/context references that are supposed_to be autowirable but are not defined as beans in the factory:_e.g. a dependency of type ApplicationContext resolved to the_ApplicationContext instance that the bean is living in._<p>Note: There are no such default types registered in a plain BeanFactory,_not even for the BeanFactory interface itself._@param dependencyType the dependency type to register. This will typically_be a base interface such as BeanFactory, with extensions of it resolved_as well if declared as an autowiring dependency (e.g. ListableBeanFactory),_as long as the given value actually implements the extended interface._@param autowiredValue the corresponding autowired value. This may also be an_implementation of the {@link org.springframework.beans.factory.ObjectFactory}_interface, which allows for lazy resolution of the actual target value.;void registerResolvableDependency(Class<?> dependencyType, Object autowiredValue)_;register,a,special,dependency,type,with,corresponding,autowired,value,p,this,is,intended,for,factory,context,references,that,are,supposed,to,be,autowirable,but,are,not,defined,as,beans,in,the,factory,e,g,a,dependency,of,type,application,context,resolved,to,the,application,context,instance,that,the,bean,is,living,in,p,note,there,are,no,such,default,types,registered,in,a,plain,bean,factory,not,even,for,the,bean,factory,interface,itself,param,dependency,type,the,dependency,type,to,register,this,will,typically,be,a,base,interface,such,as,bean,factory,with,extensions,of,it,resolved,as,well,if,declared,as,an,autowiring,dependency,e,g,listable,bean,factory,as,long,as,the,given,value,actually,implements,the,extended,interface,param,autowired,value,the,corresponding,autowired,value,this,may,also,be,an,implementation,of,the,link,org,springframework,beans,factory,object,factory,interface,which,allows,for,lazy,resolution,of,the,actual,target,value;void,register,resolvable,dependency,class,dependency,type,object,autowired,value
ConfigurableListableBeanFactory -> void registerResolvableDependency(Class<?> dependencyType, Object autowiredValue)_;1436911539;Register a special dependency type with corresponding autowired value._<p>This is intended for factory/context references that are supposed_to be autowirable but are not defined as beans in the factory:_e.g. a dependency of type ApplicationContext resolved to the_ApplicationContext instance that the bean is living in._<p>Note: There are no such default types registered in a plain BeanFactory,_not even for the BeanFactory interface itself._@param dependencyType the dependency type to register. This will typically_be a base interface such as BeanFactory, with extensions of it resolved_as well if declared as an autowiring dependency (e.g. ListableBeanFactory),_as long as the given value actually implements the extended interface._@param autowiredValue the corresponding autowired value. This may also be an_implementation of the {@link org.springframework.beans.factory.ObjectFactory}_interface, which allows for lazy resolution of the actual target value.;void registerResolvableDependency(Class<?> dependencyType, Object autowiredValue)_;register,a,special,dependency,type,with,corresponding,autowired,value,p,this,is,intended,for,factory,context,references,that,are,supposed,to,be,autowirable,but,are,not,defined,as,beans,in,the,factory,e,g,a,dependency,of,type,application,context,resolved,to,the,application,context,instance,that,the,bean,is,living,in,p,note,there,are,no,such,default,types,registered,in,a,plain,bean,factory,not,even,for,the,bean,factory,interface,itself,param,dependency,type,the,dependency,type,to,register,this,will,typically,be,a,base,interface,such,as,bean,factory,with,extensions,of,it,resolved,as,well,if,declared,as,an,autowiring,dependency,e,g,listable,bean,factory,as,long,as,the,given,value,actually,implements,the,extended,interface,param,autowired,value,the,corresponding,autowired,value,this,may,also,be,an,implementation,of,the,link,org,springframework,beans,factory,object,factory,interface,which,allows,for,lazy,resolution,of,the,actual,target,value;void,register,resolvable,dependency,class,dependency,type,object,autowired,value
ConfigurableListableBeanFactory -> void registerResolvableDependency(Class<?> dependencyType, Object autowiredValue)_;1496243689;Register a special dependency type with corresponding autowired value._<p>This is intended for factory/context references that are supposed_to be autowirable but are not defined as beans in the factory:_e.g. a dependency of type ApplicationContext resolved to the_ApplicationContext instance that the bean is living in._<p>Note: There are no such default types registered in a plain BeanFactory,_not even for the BeanFactory interface itself._@param dependencyType the dependency type to register. This will typically_be a base interface such as BeanFactory, with extensions of it resolved_as well if declared as an autowiring dependency (e.g. ListableBeanFactory),_as long as the given value actually implements the extended interface._@param autowiredValue the corresponding autowired value. This may also be an_implementation of the {@link org.springframework.beans.factory.ObjectFactory}_interface, which allows for lazy resolution of the actual target value.;void registerResolvableDependency(Class<?> dependencyType, Object autowiredValue)_;register,a,special,dependency,type,with,corresponding,autowired,value,p,this,is,intended,for,factory,context,references,that,are,supposed,to,be,autowirable,but,are,not,defined,as,beans,in,the,factory,e,g,a,dependency,of,type,application,context,resolved,to,the,application,context,instance,that,the,bean,is,living,in,p,note,there,are,no,such,default,types,registered,in,a,plain,bean,factory,not,even,for,the,bean,factory,interface,itself,param,dependency,type,the,dependency,type,to,register,this,will,typically,be,a,base,interface,such,as,bean,factory,with,extensions,of,it,resolved,as,well,if,declared,as,an,autowiring,dependency,e,g,listable,bean,factory,as,long,as,the,given,value,actually,implements,the,extended,interface,param,autowired,value,the,corresponding,autowired,value,this,may,also,be,an,implementation,of,the,link,org,springframework,beans,factory,object,factory,interface,which,allows,for,lazy,resolution,of,the,actual,target,value;void,register,resolvable,dependency,class,dependency,type,object,autowired,value
ConfigurableListableBeanFactory -> BeanDefinition getBeanDefinition(String beanName) throws NoSuchBeanDefinitionException_;1328020251;Return the registered BeanDefinition for the specified bean, allowing access_to its property values and constructor argument value (which can be_modified during bean factory post-processing)._<p>A returned BeanDefinition object should not be a copy but the original_definition object as registered in the factory. This means that it should_be castable to a more specific implementation type, if necessary._<p><b>NOTE:</b> This method does <i>not</i> consider ancestor factories._It is only meant for accessing local bean definitions of this factory._@param beanName the name of the bean_@return the registered BeanDefinition_@throws NoSuchBeanDefinitionException if there is no bean with the given name_defined in this factory;BeanDefinition getBeanDefinition(String beanName) throws NoSuchBeanDefinitionException_;return,the,registered,bean,definition,for,the,specified,bean,allowing,access,to,its,property,values,and,constructor,argument,value,which,can,be,modified,during,bean,factory,post,processing,p,a,returned,bean,definition,object,should,not,be,a,copy,but,the,original,definition,object,as,registered,in,the,factory,this,means,that,it,should,be,castable,to,a,more,specific,implementation,type,if,necessary,p,b,note,b,this,method,does,i,not,i,consider,ancestor,factories,it,is,only,meant,for,accessing,local,bean,definitions,of,this,factory,param,bean,name,the,name,of,the,bean,return,the,registered,bean,definition,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,defined,in,this,factory;bean,definition,get,bean,definition,string,bean,name,throws,no,such,bean,definition,exception
ConfigurableListableBeanFactory -> BeanDefinition getBeanDefinition(String beanName) throws NoSuchBeanDefinitionException_;1356735495;Return the registered BeanDefinition for the specified bean, allowing access_to its property values and constructor argument value (which can be_modified during bean factory post-processing)._<p>A returned BeanDefinition object should not be a copy but the original_definition object as registered in the factory. This means that it should_be castable to a more specific implementation type, if necessary._<p><b>NOTE:</b> This method does <i>not</i> consider ancestor factories._It is only meant for accessing local bean definitions of this factory._@param beanName the name of the bean_@return the registered BeanDefinition_@throws NoSuchBeanDefinitionException if there is no bean with the given name_defined in this factory;BeanDefinition getBeanDefinition(String beanName) throws NoSuchBeanDefinitionException_;return,the,registered,bean,definition,for,the,specified,bean,allowing,access,to,its,property,values,and,constructor,argument,value,which,can,be,modified,during,bean,factory,post,processing,p,a,returned,bean,definition,object,should,not,be,a,copy,but,the,original,definition,object,as,registered,in,the,factory,this,means,that,it,should,be,castable,to,a,more,specific,implementation,type,if,necessary,p,b,note,b,this,method,does,i,not,i,consider,ancestor,factories,it,is,only,meant,for,accessing,local,bean,definitions,of,this,factory,param,bean,name,the,name,of,the,bean,return,the,registered,bean,definition,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,defined,in,this,factory;bean,definition,get,bean,definition,string,bean,name,throws,no,such,bean,definition,exception
ConfigurableListableBeanFactory -> BeanDefinition getBeanDefinition(String beanName) throws NoSuchBeanDefinitionException_;1414833080;Return the registered BeanDefinition for the specified bean, allowing access_to its property values and constructor argument value (which can be_modified during bean factory post-processing)._<p>A returned BeanDefinition object should not be a copy but the original_definition object as registered in the factory. This means that it should_be castable to a more specific implementation type, if necessary._<p><b>NOTE:</b> This method does <i>not</i> consider ancestor factories._It is only meant for accessing local bean definitions of this factory._@param beanName the name of the bean_@return the registered BeanDefinition_@throws NoSuchBeanDefinitionException if there is no bean with the given name_defined in this factory;BeanDefinition getBeanDefinition(String beanName) throws NoSuchBeanDefinitionException_;return,the,registered,bean,definition,for,the,specified,bean,allowing,access,to,its,property,values,and,constructor,argument,value,which,can,be,modified,during,bean,factory,post,processing,p,a,returned,bean,definition,object,should,not,be,a,copy,but,the,original,definition,object,as,registered,in,the,factory,this,means,that,it,should,be,castable,to,a,more,specific,implementation,type,if,necessary,p,b,note,b,this,method,does,i,not,i,consider,ancestor,factories,it,is,only,meant,for,accessing,local,bean,definitions,of,this,factory,param,bean,name,the,name,of,the,bean,return,the,registered,bean,definition,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,defined,in,this,factory;bean,definition,get,bean,definition,string,bean,name,throws,no,such,bean,definition,exception
ConfigurableListableBeanFactory -> BeanDefinition getBeanDefinition(String beanName) throws NoSuchBeanDefinitionException_;1436911539;Return the registered BeanDefinition for the specified bean, allowing access_to its property values and constructor argument value (which can be_modified during bean factory post-processing)._<p>A returned BeanDefinition object should not be a copy but the original_definition object as registered in the factory. This means that it should_be castable to a more specific implementation type, if necessary._<p><b>NOTE:</b> This method does <i>not</i> consider ancestor factories._It is only meant for accessing local bean definitions of this factory._@param beanName the name of the bean_@return the registered BeanDefinition_@throws NoSuchBeanDefinitionException if there is no bean with the given name_defined in this factory;BeanDefinition getBeanDefinition(String beanName) throws NoSuchBeanDefinitionException_;return,the,registered,bean,definition,for,the,specified,bean,allowing,access,to,its,property,values,and,constructor,argument,value,which,can,be,modified,during,bean,factory,post,processing,p,a,returned,bean,definition,object,should,not,be,a,copy,but,the,original,definition,object,as,registered,in,the,factory,this,means,that,it,should,be,castable,to,a,more,specific,implementation,type,if,necessary,p,b,note,b,this,method,does,i,not,i,consider,ancestor,factories,it,is,only,meant,for,accessing,local,bean,definitions,of,this,factory,param,bean,name,the,name,of,the,bean,return,the,registered,bean,definition,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,defined,in,this,factory;bean,definition,get,bean,definition,string,bean,name,throws,no,such,bean,definition,exception
ConfigurableListableBeanFactory -> BeanDefinition getBeanDefinition(String beanName) throws NoSuchBeanDefinitionException_;1496837955;Return the registered BeanDefinition for the specified bean, allowing access_to its property values and constructor argument value (which can be_modified during bean factory post-processing)._<p>A returned BeanDefinition object should not be a copy but the original_definition object as registered in the factory. This means that it should_be castable to a more specific implementation type, if necessary._<p><b>NOTE:</b> This method does <i>not</i> consider ancestor factories._It is only meant for accessing local bean definitions of this factory._@param beanName the name of the bean_@return the registered BeanDefinition_@throws NoSuchBeanDefinitionException if there is no bean with the given name_defined in this factory;BeanDefinition getBeanDefinition(String beanName) throws NoSuchBeanDefinitionException_;return,the,registered,bean,definition,for,the,specified,bean,allowing,access,to,its,property,values,and,constructor,argument,value,which,can,be,modified,during,bean,factory,post,processing,p,a,returned,bean,definition,object,should,not,be,a,copy,but,the,original,definition,object,as,registered,in,the,factory,this,means,that,it,should,be,castable,to,a,more,specific,implementation,type,if,necessary,p,b,note,b,this,method,does,i,not,i,consider,ancestor,factories,it,is,only,meant,for,accessing,local,bean,definitions,of,this,factory,param,bean,name,the,name,of,the,bean,return,the,registered,bean,definition,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,defined,in,this,factory;bean,definition,get,bean,definition,string,bean,name,throws,no,such,bean,definition,exception
ConfigurableListableBeanFactory -> boolean isConfigurationFrozen()_;1328020251;Return whether this factory's bean definitions are frozen,_i.e. are not supposed to be modified or post-processed any further._@return <code>true</code> if the factory's configuration is considered frozen;boolean isConfigurationFrozen()_;return,whether,this,factory,s,bean,definitions,are,frozen,i,e,are,not,supposed,to,be,modified,or,post,processed,any,further,return,code,true,code,if,the,factory,s,configuration,is,considered,frozen;boolean,is,configuration,frozen
ConfigurableListableBeanFactory -> boolean isConfigurationFrozen()_;1356735495;Return whether this factory's bean definitions are frozen,_i.e. are not supposed to be modified or post-processed any further._@return {@code true} if the factory's configuration is considered frozen;boolean isConfigurationFrozen()_;return,whether,this,factory,s,bean,definitions,are,frozen,i,e,are,not,supposed,to,be,modified,or,post,processed,any,further,return,code,true,if,the,factory,s,configuration,is,considered,frozen;boolean,is,configuration,frozen
ConfigurableListableBeanFactory -> boolean isConfigurationFrozen()_;1414833080;Return whether this factory's bean definitions are frozen,_i.e. are not supposed to be modified or post-processed any further._@return {@code true} if the factory's configuration is considered frozen;boolean isConfigurationFrozen()_;return,whether,this,factory,s,bean,definitions,are,frozen,i,e,are,not,supposed,to,be,modified,or,post,processed,any,further,return,code,true,if,the,factory,s,configuration,is,considered,frozen;boolean,is,configuration,frozen
ConfigurableListableBeanFactory -> boolean isConfigurationFrozen()_;1436911539;Return whether this factory's bean definitions are frozen,_i.e. are not supposed to be modified or post-processed any further._@return {@code true} if the factory's configuration is considered frozen;boolean isConfigurationFrozen()_;return,whether,this,factory,s,bean,definitions,are,frozen,i,e,are,not,supposed,to,be,modified,or,post,processed,any,further,return,code,true,if,the,factory,s,configuration,is,considered,frozen;boolean,is,configuration,frozen
ConfigurableListableBeanFactory -> boolean isConfigurationFrozen()_;1496243689;Return whether this factory's bean definitions are frozen,_i.e. are not supposed to be modified or post-processed any further._@return {@code true} if the factory's configuration is considered frozen;boolean isConfigurationFrozen()_;return,whether,this,factory,s,bean,definitions,are,frozen,i,e,are,not,supposed,to,be,modified,or,post,processed,any,further,return,code,true,if,the,factory,s,configuration,is,considered,frozen;boolean,is,configuration,frozen
ConfigurableListableBeanFactory -> boolean isConfigurationFrozen()_;1496837955;Return whether this factory's bean definitions are frozen,_i.e. are not supposed to be modified or post-processed any further._@return {@code true} if the factory's configuration is considered frozen;boolean isConfigurationFrozen()_;return,whether,this,factory,s,bean,definitions,are,frozen,i,e,are,not,supposed,to,be,modified,or,post,processed,any,further,return,code,true,if,the,factory,s,configuration,is,considered,frozen;boolean,is,configuration,frozen
ConfigurableListableBeanFactory -> void preInstantiateSingletons() throws BeansException_;1328020251;Ensure that all non-lazy-init singletons are instantiated, also considering_{@link org.springframework.beans.factory.FactoryBean FactoryBeans}._Typically invoked at the end of factory setup, if desired._@throws BeansException if one of the singleton beans could not be created._Note: This may have left the factory with some beans already initialized!_Call {@link #destroySingletons()} for full cleanup in this case._@see #destroySingletons();void preInstantiateSingletons() throws BeansException_;ensure,that,all,non,lazy,init,singletons,are,instantiated,also,considering,link,org,springframework,beans,factory,factory,bean,factory,beans,typically,invoked,at,the,end,of,factory,setup,if,desired,throws,beans,exception,if,one,of,the,singleton,beans,could,not,be,created,note,this,may,have,left,the,factory,with,some,beans,already,initialized,call,link,destroy,singletons,for,full,cleanup,in,this,case,see,destroy,singletons;void,pre,instantiate,singletons,throws,beans,exception
ConfigurableListableBeanFactory -> void preInstantiateSingletons() throws BeansException_;1356735495;Ensure that all non-lazy-init singletons are instantiated, also considering_{@link org.springframework.beans.factory.FactoryBean FactoryBeans}._Typically invoked at the end of factory setup, if desired._@throws BeansException if one of the singleton beans could not be created._Note: This may have left the factory with some beans already initialized!_Call {@link #destroySingletons()} for full cleanup in this case._@see #destroySingletons();void preInstantiateSingletons() throws BeansException_;ensure,that,all,non,lazy,init,singletons,are,instantiated,also,considering,link,org,springframework,beans,factory,factory,bean,factory,beans,typically,invoked,at,the,end,of,factory,setup,if,desired,throws,beans,exception,if,one,of,the,singleton,beans,could,not,be,created,note,this,may,have,left,the,factory,with,some,beans,already,initialized,call,link,destroy,singletons,for,full,cleanup,in,this,case,see,destroy,singletons;void,pre,instantiate,singletons,throws,beans,exception
ConfigurableListableBeanFactory -> void preInstantiateSingletons() throws BeansException_;1414833080;Ensure that all non-lazy-init singletons are instantiated, also considering_{@link org.springframework.beans.factory.FactoryBean FactoryBeans}._Typically invoked at the end of factory setup, if desired._@throws BeansException if one of the singleton beans could not be created._Note: This may have left the factory with some beans already initialized!_Call {@link #destroySingletons()} for full cleanup in this case._@see #destroySingletons();void preInstantiateSingletons() throws BeansException_;ensure,that,all,non,lazy,init,singletons,are,instantiated,also,considering,link,org,springframework,beans,factory,factory,bean,factory,beans,typically,invoked,at,the,end,of,factory,setup,if,desired,throws,beans,exception,if,one,of,the,singleton,beans,could,not,be,created,note,this,may,have,left,the,factory,with,some,beans,already,initialized,call,link,destroy,singletons,for,full,cleanup,in,this,case,see,destroy,singletons;void,pre,instantiate,singletons,throws,beans,exception
ConfigurableListableBeanFactory -> void preInstantiateSingletons() throws BeansException_;1436911539;Ensure that all non-lazy-init singletons are instantiated, also considering_{@link org.springframework.beans.factory.FactoryBean FactoryBeans}._Typically invoked at the end of factory setup, if desired._@throws BeansException if one of the singleton beans could not be created._Note: This may have left the factory with some beans already initialized!_Call {@link #destroySingletons()} for full cleanup in this case._@see #destroySingletons();void preInstantiateSingletons() throws BeansException_;ensure,that,all,non,lazy,init,singletons,are,instantiated,also,considering,link,org,springframework,beans,factory,factory,bean,factory,beans,typically,invoked,at,the,end,of,factory,setup,if,desired,throws,beans,exception,if,one,of,the,singleton,beans,could,not,be,created,note,this,may,have,left,the,factory,with,some,beans,already,initialized,call,link,destroy,singletons,for,full,cleanup,in,this,case,see,destroy,singletons;void,pre,instantiate,singletons,throws,beans,exception
ConfigurableListableBeanFactory -> void preInstantiateSingletons() throws BeansException_;1496243689;Ensure that all non-lazy-init singletons are instantiated, also considering_{@link org.springframework.beans.factory.FactoryBean FactoryBeans}._Typically invoked at the end of factory setup, if desired._@throws BeansException if one of the singleton beans could not be created._Note: This may have left the factory with some beans already initialized!_Call {@link #destroySingletons()} for full cleanup in this case._@see #destroySingletons();void preInstantiateSingletons() throws BeansException_;ensure,that,all,non,lazy,init,singletons,are,instantiated,also,considering,link,org,springframework,beans,factory,factory,bean,factory,beans,typically,invoked,at,the,end,of,factory,setup,if,desired,throws,beans,exception,if,one,of,the,singleton,beans,could,not,be,created,note,this,may,have,left,the,factory,with,some,beans,already,initialized,call,link,destroy,singletons,for,full,cleanup,in,this,case,see,destroy,singletons;void,pre,instantiate,singletons,throws,beans,exception
ConfigurableListableBeanFactory -> void preInstantiateSingletons() throws BeansException_;1496837955;Ensure that all non-lazy-init singletons are instantiated, also considering_{@link org.springframework.beans.factory.FactoryBean FactoryBeans}._Typically invoked at the end of factory setup, if desired._@throws BeansException if one of the singleton beans could not be created._Note: This may have left the factory with some beans already initialized!_Call {@link #destroySingletons()} for full cleanup in this case._@see #destroySingletons();void preInstantiateSingletons() throws BeansException_;ensure,that,all,non,lazy,init,singletons,are,instantiated,also,considering,link,org,springframework,beans,factory,factory,bean,factory,beans,typically,invoked,at,the,end,of,factory,setup,if,desired,throws,beans,exception,if,one,of,the,singleton,beans,could,not,be,created,note,this,may,have,left,the,factory,with,some,beans,already,initialized,call,link,destroy,singletons,for,full,cleanup,in,this,case,see,destroy,singletons;void,pre,instantiate,singletons,throws,beans,exception
ConfigurableListableBeanFactory -> void ignoreDependencyInterface(Class<?> ifc)_;1328020251;Ignore the given dependency interface for autowiring._<p>This will typically be used by application contexts to register_dependencies that are resolved in other ways, like BeanFactory through_BeanFactoryAware or ApplicationContext through ApplicationContextAware._<p>By default, only the BeanFactoryAware interface is ignored._For further types to ignore, invoke this method for each type._@param ifc the dependency interface to ignore_@see org.springframework.beans.factory.BeanFactoryAware_@see org.springframework.context.ApplicationContextAware;void ignoreDependencyInterface(Class<?> ifc)_;ignore,the,given,dependency,interface,for,autowiring,p,this,will,typically,be,used,by,application,contexts,to,register,dependencies,that,are,resolved,in,other,ways,like,bean,factory,through,bean,factory,aware,or,application,context,through,application,context,aware,p,by,default,only,the,bean,factory,aware,interface,is,ignored,for,further,types,to,ignore,invoke,this,method,for,each,type,param,ifc,the,dependency,interface,to,ignore,see,org,springframework,beans,factory,bean,factory,aware,see,org,springframework,context,application,context,aware;void,ignore,dependency,interface,class,ifc
ConfigurableListableBeanFactory -> void ignoreDependencyInterface(Class<?> ifc)_;1356735495;Ignore the given dependency interface for autowiring._<p>This will typically be used by application contexts to register_dependencies that are resolved in other ways, like BeanFactory through_BeanFactoryAware or ApplicationContext through ApplicationContextAware._<p>By default, only the BeanFactoryAware interface is ignored._For further types to ignore, invoke this method for each type._@param ifc the dependency interface to ignore_@see org.springframework.beans.factory.BeanFactoryAware_@see org.springframework.context.ApplicationContextAware;void ignoreDependencyInterface(Class<?> ifc)_;ignore,the,given,dependency,interface,for,autowiring,p,this,will,typically,be,used,by,application,contexts,to,register,dependencies,that,are,resolved,in,other,ways,like,bean,factory,through,bean,factory,aware,or,application,context,through,application,context,aware,p,by,default,only,the,bean,factory,aware,interface,is,ignored,for,further,types,to,ignore,invoke,this,method,for,each,type,param,ifc,the,dependency,interface,to,ignore,see,org,springframework,beans,factory,bean,factory,aware,see,org,springframework,context,application,context,aware;void,ignore,dependency,interface,class,ifc
ConfigurableListableBeanFactory -> void ignoreDependencyInterface(Class<?> ifc)_;1414833080;Ignore the given dependency interface for autowiring._<p>This will typically be used by application contexts to register_dependencies that are resolved in other ways, like BeanFactory through_BeanFactoryAware or ApplicationContext through ApplicationContextAware._<p>By default, only the BeanFactoryAware interface is ignored._For further types to ignore, invoke this method for each type._@param ifc the dependency interface to ignore_@see org.springframework.beans.factory.BeanFactoryAware_@see org.springframework.context.ApplicationContextAware;void ignoreDependencyInterface(Class<?> ifc)_;ignore,the,given,dependency,interface,for,autowiring,p,this,will,typically,be,used,by,application,contexts,to,register,dependencies,that,are,resolved,in,other,ways,like,bean,factory,through,bean,factory,aware,or,application,context,through,application,context,aware,p,by,default,only,the,bean,factory,aware,interface,is,ignored,for,further,types,to,ignore,invoke,this,method,for,each,type,param,ifc,the,dependency,interface,to,ignore,see,org,springframework,beans,factory,bean,factory,aware,see,org,springframework,context,application,context,aware;void,ignore,dependency,interface,class,ifc
ConfigurableListableBeanFactory -> void ignoreDependencyInterface(Class<?> ifc)_;1436911539;Ignore the given dependency interface for autowiring._<p>This will typically be used by application contexts to register_dependencies that are resolved in other ways, like BeanFactory through_BeanFactoryAware or ApplicationContext through ApplicationContextAware._<p>By default, only the BeanFactoryAware interface is ignored._For further types to ignore, invoke this method for each type._@param ifc the dependency interface to ignore_@see org.springframework.beans.factory.BeanFactoryAware_@see org.springframework.context.ApplicationContextAware;void ignoreDependencyInterface(Class<?> ifc)_;ignore,the,given,dependency,interface,for,autowiring,p,this,will,typically,be,used,by,application,contexts,to,register,dependencies,that,are,resolved,in,other,ways,like,bean,factory,through,bean,factory,aware,or,application,context,through,application,context,aware,p,by,default,only,the,bean,factory,aware,interface,is,ignored,for,further,types,to,ignore,invoke,this,method,for,each,type,param,ifc,the,dependency,interface,to,ignore,see,org,springframework,beans,factory,bean,factory,aware,see,org,springframework,context,application,context,aware;void,ignore,dependency,interface,class,ifc
ConfigurableListableBeanFactory -> void ignoreDependencyInterface(Class<?> ifc)_;1496243689;Ignore the given dependency interface for autowiring._<p>This will typically be used by application contexts to register_dependencies that are resolved in other ways, like BeanFactory through_BeanFactoryAware or ApplicationContext through ApplicationContextAware._<p>By default, only the BeanFactoryAware interface is ignored._For further types to ignore, invoke this method for each type._@param ifc the dependency interface to ignore_@see org.springframework.beans.factory.BeanFactoryAware_@see org.springframework.context.ApplicationContextAware;void ignoreDependencyInterface(Class<?> ifc)_;ignore,the,given,dependency,interface,for,autowiring,p,this,will,typically,be,used,by,application,contexts,to,register,dependencies,that,are,resolved,in,other,ways,like,bean,factory,through,bean,factory,aware,or,application,context,through,application,context,aware,p,by,default,only,the,bean,factory,aware,interface,is,ignored,for,further,types,to,ignore,invoke,this,method,for,each,type,param,ifc,the,dependency,interface,to,ignore,see,org,springframework,beans,factory,bean,factory,aware,see,org,springframework,context,application,context,aware;void,ignore,dependency,interface,class,ifc
ConfigurableListableBeanFactory -> void ignoreDependencyInterface(Class<?> ifc)_;1496837955;Ignore the given dependency interface for autowiring._<p>This will typically be used by application contexts to register_dependencies that are resolved in other ways, like BeanFactory through_BeanFactoryAware or ApplicationContext through ApplicationContextAware._<p>By default, only the BeanFactoryAware interface is ignored._For further types to ignore, invoke this method for each type._@param ifc the dependency interface to ignore_@see org.springframework.beans.factory.BeanFactoryAware_@see org.springframework.context.ApplicationContextAware;void ignoreDependencyInterface(Class<?> ifc)_;ignore,the,given,dependency,interface,for,autowiring,p,this,will,typically,be,used,by,application,contexts,to,register,dependencies,that,are,resolved,in,other,ways,like,bean,factory,through,bean,factory,aware,or,application,context,through,application,context,aware,p,by,default,only,the,bean,factory,aware,interface,is,ignored,for,further,types,to,ignore,invoke,this,method,for,each,type,param,ifc,the,dependency,interface,to,ignore,see,org,springframework,beans,factory,bean,factory,aware,see,org,springframework,context,application,context,aware;void,ignore,dependency,interface,class,ifc
ConfigurableListableBeanFactory -> Iterator<String> getBeanNamesIterator()_;1414833080;Return a unified view over all bean names managed by this factory._<p>Includes bean definition names as well as names of manually registered_singleton instances, with bean definition names consistently coming first,_analogous to how type/annotation specific retrieval of bean names works._@return the composite iterator for the bean names view_@since 4.1.2_@see #containsBeanDefinition_@see #registerSingleton_@see #getBeanNamesForType_@see #getBeanNamesForAnnotation;Iterator<String> getBeanNamesIterator()_;return,a,unified,view,over,all,bean,names,managed,by,this,factory,p,includes,bean,definition,names,as,well,as,names,of,manually,registered,singleton,instances,with,bean,definition,names,consistently,coming,first,analogous,to,how,type,annotation,specific,retrieval,of,bean,names,works,return,the,composite,iterator,for,the,bean,names,view,since,4,1,2,see,contains,bean,definition,see,register,singleton,see,get,bean,names,for,type,see,get,bean,names,for,annotation;iterator,string,get,bean,names,iterator
ConfigurableListableBeanFactory -> Iterator<String> getBeanNamesIterator()_;1436911539;Return a unified view over all bean names managed by this factory._<p>Includes bean definition names as well as names of manually registered_singleton instances, with bean definition names consistently coming first,_analogous to how type/annotation specific retrieval of bean names works._@return the composite iterator for the bean names view_@since 4.1.2_@see #containsBeanDefinition_@see #registerSingleton_@see #getBeanNamesForType_@see #getBeanNamesForAnnotation;Iterator<String> getBeanNamesIterator()_;return,a,unified,view,over,all,bean,names,managed,by,this,factory,p,includes,bean,definition,names,as,well,as,names,of,manually,registered,singleton,instances,with,bean,definition,names,consistently,coming,first,analogous,to,how,type,annotation,specific,retrieval,of,bean,names,works,return,the,composite,iterator,for,the,bean,names,view,since,4,1,2,see,contains,bean,definition,see,register,singleton,see,get,bean,names,for,type,see,get,bean,names,for,annotation;iterator,string,get,bean,names,iterator
ConfigurableListableBeanFactory -> Iterator<String> getBeanNamesIterator()_;1496243689;Return a unified view over all bean names managed by this factory._<p>Includes bean definition names as well as names of manually registered_singleton instances, with bean definition names consistently coming first,_analogous to how type/annotation specific retrieval of bean names works._@return the composite iterator for the bean names view_@since 4.1.2_@see #containsBeanDefinition_@see #registerSingleton_@see #getBeanNamesForType_@see #getBeanNamesForAnnotation;Iterator<String> getBeanNamesIterator()_;return,a,unified,view,over,all,bean,names,managed,by,this,factory,p,includes,bean,definition,names,as,well,as,names,of,manually,registered,singleton,instances,with,bean,definition,names,consistently,coming,first,analogous,to,how,type,annotation,specific,retrieval,of,bean,names,works,return,the,composite,iterator,for,the,bean,names,view,since,4,1,2,see,contains,bean,definition,see,register,singleton,see,get,bean,names,for,type,see,get,bean,names,for,annotation;iterator,string,get,bean,names,iterator
ConfigurableListableBeanFactory -> Iterator<String> getBeanNamesIterator()_;1496837955;Return a unified view over all bean names managed by this factory._<p>Includes bean definition names as well as names of manually registered_singleton instances, with bean definition names consistently coming first,_analogous to how type/annotation specific retrieval of bean names works._@return the composite iterator for the bean names view_@since 4.1.2_@see #containsBeanDefinition_@see #registerSingleton_@see #getBeanNamesForType_@see #getBeanNamesForAnnotation;Iterator<String> getBeanNamesIterator()_;return,a,unified,view,over,all,bean,names,managed,by,this,factory,p,includes,bean,definition,names,as,well,as,names,of,manually,registered,singleton,instances,with,bean,definition,names,consistently,coming,first,analogous,to,how,type,annotation,specific,retrieval,of,bean,names,works,return,the,composite,iterator,for,the,bean,names,view,since,4,1,2,see,contains,bean,definition,see,register,singleton,see,get,bean,names,for,type,see,get,bean,names,for,annotation;iterator,string,get,bean,names,iterator
