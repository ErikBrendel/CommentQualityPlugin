# id;timestamp;commentText;codeText;commentWords;codeWords
ListableBeanFactory -> String[] getBeanNamesForAnnotation(Class<? extends Annotation> annotationType)_;1384527851;Find all beans whose {@code Class} has the supplied {@link Annotation} type,_without creating any bean instances yet._@param annotationType the type of annotation to look for_@return the names of all matching beans_@since 4.0;String[] getBeanNamesForAnnotation(Class<? extends Annotation> annotationType)_;find,all,beans,whose,code,class,has,the,supplied,link,annotation,type,without,creating,any,bean,instances,yet,param,annotation,type,the,type,of,annotation,to,look,for,return,the,names,of,all,matching,beans,since,4,0;string,get,bean,names,for,annotation,class,extends,annotation,annotation,type
ListableBeanFactory -> String[] getBeanNamesForAnnotation(Class<? extends Annotation> annotationType)_;1384700387;Find all names of beans whose {@code Class} has the supplied {@link Annotation}_type, without creating any bean instances yet._@param annotationType the type of annotation to look for_@return the names of all matching beans_@since 4.0;String[] getBeanNamesForAnnotation(Class<? extends Annotation> annotationType)_;find,all,names,of,beans,whose,code,class,has,the,supplied,link,annotation,type,without,creating,any,bean,instances,yet,param,annotation,type,the,type,of,annotation,to,look,for,return,the,names,of,all,matching,beans,since,4,0;string,get,bean,names,for,annotation,class,extends,annotation,annotation,type
ListableBeanFactory -> String[] getBeanNamesForAnnotation(Class<? extends Annotation> annotationType)_;1401909456;Find all names of beans whose {@code Class} has the supplied {@link Annotation}_type, without creating any bean instances yet._@param annotationType the type of annotation to look for_@return the names of all matching beans_@since 4.0;String[] getBeanNamesForAnnotation(Class<? extends Annotation> annotationType)_;find,all,names,of,beans,whose,code,class,has,the,supplied,link,annotation,type,without,creating,any,bean,instances,yet,param,annotation,type,the,type,of,annotation,to,look,for,return,the,names,of,all,matching,beans,since,4,0;string,get,bean,names,for,annotation,class,extends,annotation,annotation,type
ListableBeanFactory -> String[] getBeanNamesForAnnotation(Class<? extends Annotation> annotationType)_;1426716313;Find all names of beans whose {@code Class} has the supplied {@link Annotation}_type, without creating any bean instances yet._@param annotationType the type of annotation to look for_@return the names of all matching beans_@since 4.0;String[] getBeanNamesForAnnotation(Class<? extends Annotation> annotationType)_;find,all,names,of,beans,whose,code,class,has,the,supplied,link,annotation,type,without,creating,any,bean,instances,yet,param,annotation,type,the,type,of,annotation,to,look,for,return,the,names,of,all,matching,beans,since,4,0;string,get,bean,names,for,annotation,class,extends,annotation,annotation,type
ListableBeanFactory -> String[] getBeanNamesForAnnotation(Class<? extends Annotation> annotationType)_;1459774710;Find all names of beans whose {@code Class} has the supplied {@link Annotation}_type, without creating any bean instances yet._@param annotationType the type of annotation to look for_@return the names of all matching beans_@since 4.0;String[] getBeanNamesForAnnotation(Class<? extends Annotation> annotationType)_;find,all,names,of,beans,whose,code,class,has,the,supplied,link,annotation,type,without,creating,any,bean,instances,yet,param,annotation,type,the,type,of,annotation,to,look,for,return,the,names,of,all,matching,beans,since,4,0;string,get,bean,names,for,annotation,class,extends,annotation,annotation,type
ListableBeanFactory -> String[] getBeanNamesForAnnotation(Class<? extends Annotation> annotationType)_;1495868221;Find all names of beans whose {@code Class} has the supplied {@link Annotation}_type, without creating any bean instances yet._@param annotationType the type of annotation to look for_@return the names of all matching beans_@since 4.0;String[] getBeanNamesForAnnotation(Class<? extends Annotation> annotationType)_;find,all,names,of,beans,whose,code,class,has,the,supplied,link,annotation,type,without,creating,any,bean,instances,yet,param,annotation,type,the,type,of,annotation,to,look,for,return,the,names,of,all,matching,beans,since,4,0;string,get,bean,names,for,annotation,class,extends,annotation,annotation,type
ListableBeanFactory -> String[] getBeanNamesForAnnotation(Class<? extends Annotation> annotationType)_;1496837955;Find all names of beans whose {@code Class} has the supplied {@link Annotation}_type, without creating any bean instances yet._@param annotationType the type of annotation to look for_@return the names of all matching beans_@since 4.0;String[] getBeanNamesForAnnotation(Class<? extends Annotation> annotationType)_;find,all,names,of,beans,whose,code,class,has,the,supplied,link,annotation,type,without,creating,any,bean,instances,yet,param,annotation,type,the,type,of,annotation,to,look,for,return,the,names,of,all,matching,beans,since,4,0;string,get,bean,names,for,annotation,class,extends,annotation,annotation,type
ListableBeanFactory -> String[] getBeanNamesForAnnotation(Class<? extends Annotation> annotationType)_;1539878644;Find all names of beans whose {@code Class} has the supplied {@link Annotation}_type, without creating corresponding bean instances yet._<p>Note that this method considers objects created by FactoryBeans, which means_that FactoryBeans will get initialized in order to determine their object type._@param annotationType the type of annotation to look for_@return the names of all matching beans_@since 4.0;String[] getBeanNamesForAnnotation(Class<? extends Annotation> annotationType)_;find,all,names,of,beans,whose,code,class,has,the,supplied,link,annotation,type,without,creating,corresponding,bean,instances,yet,p,note,that,this,method,considers,objects,created,by,factory,beans,which,means,that,factory,beans,will,get,initialized,in,order,to,determine,their,object,type,param,annotation,type,the,type,of,annotation,to,look,for,return,the,names,of,all,matching,beans,since,4,0;string,get,bean,names,for,annotation,class,extends,annotation,annotation,type
ListableBeanFactory -> int getBeanDefinitionCount()_;1328020251;Return the number of beans defined in the factory._<p>Does not consider any hierarchy this factory may participate in,_and ignores any singleton beans that have been registered by_other means than bean definitions._@return the number of beans defined in the factory;int getBeanDefinitionCount()_;return,the,number,of,beans,defined,in,the,factory,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,and,ignores,any,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,return,the,number,of,beans,defined,in,the,factory;int,get,bean,definition,count
ListableBeanFactory -> int getBeanDefinitionCount()_;1356735495;Return the number of beans defined in the factory._<p>Does not consider any hierarchy this factory may participate in,_and ignores any singleton beans that have been registered by_other means than bean definitions._@return the number of beans defined in the factory;int getBeanDefinitionCount()_;return,the,number,of,beans,defined,in,the,factory,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,and,ignores,any,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,return,the,number,of,beans,defined,in,the,factory;int,get,bean,definition,count
ListableBeanFactory -> int getBeanDefinitionCount()_;1384527851;Return the number of beans defined in the factory._<p>Does not consider any hierarchy this factory may participate in,_and ignores any singleton beans that have been registered by_other means than bean definitions._@return the number of beans defined in the factory;int getBeanDefinitionCount()_;return,the,number,of,beans,defined,in,the,factory,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,and,ignores,any,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,return,the,number,of,beans,defined,in,the,factory;int,get,bean,definition,count
ListableBeanFactory -> int getBeanDefinitionCount()_;1384700387;Return the number of beans defined in the factory._<p>Does not consider any hierarchy this factory may participate in,_and ignores any singleton beans that have been registered by_other means than bean definitions._@return the number of beans defined in the factory;int getBeanDefinitionCount()_;return,the,number,of,beans,defined,in,the,factory,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,and,ignores,any,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,return,the,number,of,beans,defined,in,the,factory;int,get,bean,definition,count
ListableBeanFactory -> int getBeanDefinitionCount()_;1401909456;Return the number of beans defined in the factory._<p>Does not consider any hierarchy this factory may participate in,_and ignores any singleton beans that have been registered by_other means than bean definitions._@return the number of beans defined in the factory;int getBeanDefinitionCount()_;return,the,number,of,beans,defined,in,the,factory,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,and,ignores,any,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,return,the,number,of,beans,defined,in,the,factory;int,get,bean,definition,count
ListableBeanFactory -> int getBeanDefinitionCount()_;1426716313;Return the number of beans defined in the factory._<p>Does not consider any hierarchy this factory may participate in,_and ignores any singleton beans that have been registered by_other means than bean definitions._@return the number of beans defined in the factory;int getBeanDefinitionCount()_;return,the,number,of,beans,defined,in,the,factory,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,and,ignores,any,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,return,the,number,of,beans,defined,in,the,factory;int,get,bean,definition,count
ListableBeanFactory -> int getBeanDefinitionCount()_;1459774710;Return the number of beans defined in the factory._<p>Does not consider any hierarchy this factory may participate in,_and ignores any singleton beans that have been registered by_other means than bean definitions._@return the number of beans defined in the factory;int getBeanDefinitionCount()_;return,the,number,of,beans,defined,in,the,factory,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,and,ignores,any,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,return,the,number,of,beans,defined,in,the,factory;int,get,bean,definition,count
ListableBeanFactory -> int getBeanDefinitionCount()_;1495868221;Return the number of beans defined in the factory._<p>Does not consider any hierarchy this factory may participate in,_and ignores any singleton beans that have been registered by_other means than bean definitions._@return the number of beans defined in the factory;int getBeanDefinitionCount()_;return,the,number,of,beans,defined,in,the,factory,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,and,ignores,any,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,return,the,number,of,beans,defined,in,the,factory;int,get,bean,definition,count
ListableBeanFactory -> int getBeanDefinitionCount()_;1496837955;Return the number of beans defined in the factory._<p>Does not consider any hierarchy this factory may participate in,_and ignores any singleton beans that have been registered by_other means than bean definitions._@return the number of beans defined in the factory;int getBeanDefinitionCount()_;return,the,number,of,beans,defined,in,the,factory,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,and,ignores,any,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,return,the,number,of,beans,defined,in,the,factory;int,get,bean,definition,count
ListableBeanFactory -> int getBeanDefinitionCount()_;1539878644;Return the number of beans defined in the factory._<p>Does not consider any hierarchy this factory may participate in,_and ignores any singleton beans that have been registered by_other means than bean definitions._@return the number of beans defined in the factory;int getBeanDefinitionCount()_;return,the,number,of,beans,defined,in,the,factory,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,and,ignores,any,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,return,the,number,of,beans,defined,in,the,factory;int,get,bean,definition,count
ListableBeanFactory -> <A extends Annotation> A findAnnotationOnBean(String beanName, Class<A> annotationType)_;1328020251;Find a {@link Annotation} of <code>annotationType</code> on the specified_bean, traversing its interfaces and super classes if no annotation can be_found on the given class itself._@param beanName the name of the bean to look for annotations on_@param annotationType the annotation class to look for_@return the annotation of the given type found, or <code>null</code>;<A extends Annotation> A findAnnotationOnBean(String beanName, Class<A> annotationType)_;find,a,link,annotation,of,code,annotation,type,code,on,the,specified,bean,traversing,its,interfaces,and,super,classes,if,no,annotation,can,be,found,on,the,given,class,itself,param,bean,name,the,name,of,the,bean,to,look,for,annotations,on,param,annotation,type,the,annotation,class,to,look,for,return,the,annotation,of,the,given,type,found,or,code,null,code;a,extends,annotation,a,find,annotation,on,bean,string,bean,name,class,a,annotation,type
ListableBeanFactory -> <A extends Annotation> A findAnnotationOnBean(String beanName, Class<A> annotationType)_;1356735495;Find a {@link Annotation} of {@code annotationType} on the specified_bean, traversing its interfaces and super classes if no annotation can be_found on the given class itself._@param beanName the name of the bean to look for annotations on_@param annotationType the annotation class to look for_@return the annotation of the given type found, or {@code null};<A extends Annotation> A findAnnotationOnBean(String beanName, Class<A> annotationType)_;find,a,link,annotation,of,code,annotation,type,on,the,specified,bean,traversing,its,interfaces,and,super,classes,if,no,annotation,can,be,found,on,the,given,class,itself,param,bean,name,the,name,of,the,bean,to,look,for,annotations,on,param,annotation,type,the,annotation,class,to,look,for,return,the,annotation,of,the,given,type,found,or,code,null;a,extends,annotation,a,find,annotation,on,bean,string,bean,name,class,a,annotation,type
ListableBeanFactory -> <T> Map<String, T> getBeansOfType(Class<T> type, boolean includeNonSingletons, boolean allowEagerInit) 			throws BeansException_;1328020251;Return the bean instances that match the given object type (including_subclasses), judging from either bean definitions or the value of_<code>getObjectType</code> in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans if the "allowEagerInit" flag is set,_which means that FactoryBeans will get initialized. If the object created by the_FactoryBean doesn't match, the raw FactoryBean itself will be matched against the_type. If "allowEagerInit" is not set, only raw FactoryBeans will be checked_(which doesn't require initialization of each FactoryBean)._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' <code>beansOfTypeIncludingAncestors</code>_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>The Map returned by this method should always return bean names and_corresponding bean instances <i>in the order of definition</i> in the_backend configuration, as far as possible._@param type the class or interface to match, or <code>null</code> for all concrete beans_@param includeNonSingletons whether to include prototype or scoped beans too_or just singletons (also applies to FactoryBeans)_@param allowEagerInit whether to initialize <i>lazy-init singletons</i> and_<i>objects created by FactoryBeans</i> (or by factory methods with a_"factory-bean" reference) for the type check. Note that FactoryBeans need to be_eagerly initialized to determine their type: So be aware that passing in "true"_for this flag will initialize FactoryBeans and "factory-bean" references._@return a Map with the matching beans, containing the bean names as_keys and the corresponding bean instances as values_@throws BeansException if a bean could not be created_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beansOfTypeIncludingAncestors(ListableBeanFactory, Class, boolean, boolean);<T> Map<String, T> getBeansOfType(Class<T> type, boolean includeNonSingletons, boolean allowEagerInit)_			throws BeansException_;return,the,bean,instances,that,match,the,given,object,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,code,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,if,the,allow,eager,init,flag,is,set,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,if,allow,eager,init,is,not,set,only,raw,factory,beans,will,be,checked,which,doesn,t,require,initialization,of,each,factory,bean,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,beans,of,type,including,ancestors,code,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,the,map,returned,by,this,method,should,always,return,bean,names,and,corresponding,bean,instances,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,code,for,all,concrete,beans,param,include,non,singletons,whether,to,include,prototype,or,scoped,beans,too,or,just,singletons,also,applies,to,factory,beans,param,allow,eager,init,whether,to,initialize,i,lazy,init,singletons,i,and,i,objects,created,by,factory,beans,i,or,by,factory,methods,with,a,factory,bean,reference,for,the,type,check,note,that,factory,beans,need,to,be,eagerly,initialized,to,determine,their,type,so,be,aware,that,passing,in,true,for,this,flag,will,initialize,factory,beans,and,factory,bean,references,return,a,map,with,the,matching,beans,containing,the,bean,names,as,keys,and,the,corresponding,bean,instances,as,values,throws,beans,exception,if,a,bean,could,not,be,created,see,factory,bean,get,object,type,see,bean,factory,utils,beans,of,type,including,ancestors,listable,bean,factory,class,boolean,boolean;t,map,string,t,get,beans,of,type,class,t,type,boolean,include,non,singletons,boolean,allow,eager,init,throws,beans,exception
ListableBeanFactory -> <T> Map<String, T> getBeansOfType(Class<T> type, boolean includeNonSingletons, boolean allowEagerInit) 			throws BeansException_;1356735495;Return the bean instances that match the given object type (including_subclasses), judging from either bean definitions or the value of_{@code getObjectType} in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans if the "allowEagerInit" flag is set,_which means that FactoryBeans will get initialized. If the object created by the_FactoryBean doesn't match, the raw FactoryBean itself will be matched against the_type. If "allowEagerInit" is not set, only raw FactoryBeans will be checked_(which doesn't require initialization of each FactoryBean)._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' {@code beansOfTypeIncludingAncestors}_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>The Map returned by this method should always return bean names and_corresponding bean instances <i>in the order of definition</i> in the_backend configuration, as far as possible._@param type the class or interface to match, or {@code null} for all concrete beans_@param includeNonSingletons whether to include prototype or scoped beans too_or just singletons (also applies to FactoryBeans)_@param allowEagerInit whether to initialize <i>lazy-init singletons</i> and_<i>objects created by FactoryBeans</i> (or by factory methods with a_"factory-bean" reference) for the type check. Note that FactoryBeans need to be_eagerly initialized to determine their type: So be aware that passing in "true"_for this flag will initialize FactoryBeans and "factory-bean" references._@return a Map with the matching beans, containing the bean names as_keys and the corresponding bean instances as values_@throws BeansException if a bean could not be created_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beansOfTypeIncludingAncestors(ListableBeanFactory, Class, boolean, boolean);<T> Map<String, T> getBeansOfType(Class<T> type, boolean includeNonSingletons, boolean allowEagerInit)_			throws BeansException_;return,the,bean,instances,that,match,the,given,object,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,if,the,allow,eager,init,flag,is,set,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,if,allow,eager,init,is,not,set,only,raw,factory,beans,will,be,checked,which,doesn,t,require,initialization,of,each,factory,bean,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,beans,of,type,including,ancestors,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,the,map,returned,by,this,method,should,always,return,bean,names,and,corresponding,bean,instances,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,for,all,concrete,beans,param,include,non,singletons,whether,to,include,prototype,or,scoped,beans,too,or,just,singletons,also,applies,to,factory,beans,param,allow,eager,init,whether,to,initialize,i,lazy,init,singletons,i,and,i,objects,created,by,factory,beans,i,or,by,factory,methods,with,a,factory,bean,reference,for,the,type,check,note,that,factory,beans,need,to,be,eagerly,initialized,to,determine,their,type,so,be,aware,that,passing,in,true,for,this,flag,will,initialize,factory,beans,and,factory,bean,references,return,a,map,with,the,matching,beans,containing,the,bean,names,as,keys,and,the,corresponding,bean,instances,as,values,throws,beans,exception,if,a,bean,could,not,be,created,see,factory,bean,get,object,type,see,bean,factory,utils,beans,of,type,including,ancestors,listable,bean,factory,class,boolean,boolean;t,map,string,t,get,beans,of,type,class,t,type,boolean,include,non,singletons,boolean,allow,eager,init,throws,beans,exception
ListableBeanFactory -> <T> Map<String, T> getBeansOfType(Class<T> type, boolean includeNonSingletons, boolean allowEagerInit) 			throws BeansException_;1384527851;Return the bean instances that match the given object type (including_subclasses), judging from either bean definitions or the value of_{@code getObjectType} in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans if the "allowEagerInit" flag is set,_which means that FactoryBeans will get initialized. If the object created by the_FactoryBean doesn't match, the raw FactoryBean itself will be matched against the_type. If "allowEagerInit" is not set, only raw FactoryBeans will be checked_(which doesn't require initialization of each FactoryBean)._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' {@code beansOfTypeIncludingAncestors}_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>The Map returned by this method should always return bean names and_corresponding bean instances <i>in the order of definition</i> in the_backend configuration, as far as possible._@param type the class or interface to match, or {@code null} for all concrete beans_@param includeNonSingletons whether to include prototype or scoped beans too_or just singletons (also applies to FactoryBeans)_@param allowEagerInit whether to initialize <i>lazy-init singletons</i> and_<i>objects created by FactoryBeans</i> (or by factory methods with a_"factory-bean" reference) for the type check. Note that FactoryBeans need to be_eagerly initialized to determine their type: So be aware that passing in "true"_for this flag will initialize FactoryBeans and "factory-bean" references._@return a Map with the matching beans, containing the bean names as_keys and the corresponding bean instances as values_@throws BeansException if a bean could not be created_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beansOfTypeIncludingAncestors(ListableBeanFactory, Class, boolean, boolean);<T> Map<String, T> getBeansOfType(Class<T> type, boolean includeNonSingletons, boolean allowEagerInit)_			throws BeansException_;return,the,bean,instances,that,match,the,given,object,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,if,the,allow,eager,init,flag,is,set,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,if,allow,eager,init,is,not,set,only,raw,factory,beans,will,be,checked,which,doesn,t,require,initialization,of,each,factory,bean,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,beans,of,type,including,ancestors,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,the,map,returned,by,this,method,should,always,return,bean,names,and,corresponding,bean,instances,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,for,all,concrete,beans,param,include,non,singletons,whether,to,include,prototype,or,scoped,beans,too,or,just,singletons,also,applies,to,factory,beans,param,allow,eager,init,whether,to,initialize,i,lazy,init,singletons,i,and,i,objects,created,by,factory,beans,i,or,by,factory,methods,with,a,factory,bean,reference,for,the,type,check,note,that,factory,beans,need,to,be,eagerly,initialized,to,determine,their,type,so,be,aware,that,passing,in,true,for,this,flag,will,initialize,factory,beans,and,factory,bean,references,return,a,map,with,the,matching,beans,containing,the,bean,names,as,keys,and,the,corresponding,bean,instances,as,values,throws,beans,exception,if,a,bean,could,not,be,created,see,factory,bean,get,object,type,see,bean,factory,utils,beans,of,type,including,ancestors,listable,bean,factory,class,boolean,boolean;t,map,string,t,get,beans,of,type,class,t,type,boolean,include,non,singletons,boolean,allow,eager,init,throws,beans,exception
ListableBeanFactory -> <T> Map<String, T> getBeansOfType(Class<T> type, boolean includeNonSingletons, boolean allowEagerInit) 			throws BeansException_;1384700387;Return the bean instances that match the given object type (including_subclasses), judging from either bean definitions or the value of_{@code getObjectType} in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans if the "allowEagerInit" flag is set,_which means that FactoryBeans will get initialized. If the object created by the_FactoryBean doesn't match, the raw FactoryBean itself will be matched against the_type. If "allowEagerInit" is not set, only raw FactoryBeans will be checked_(which doesn't require initialization of each FactoryBean)._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' {@code beansOfTypeIncludingAncestors}_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>The Map returned by this method should always return bean names and_corresponding bean instances <i>in the order of definition</i> in the_backend configuration, as far as possible._@param type the class or interface to match, or {@code null} for all concrete beans_@param includeNonSingletons whether to include prototype or scoped beans too_or just singletons (also applies to FactoryBeans)_@param allowEagerInit whether to initialize <i>lazy-init singletons</i> and_<i>objects created by FactoryBeans</i> (or by factory methods with a_"factory-bean" reference) for the type check. Note that FactoryBeans need to be_eagerly initialized to determine their type: So be aware that passing in "true"_for this flag will initialize FactoryBeans and "factory-bean" references._@return a Map with the matching beans, containing the bean names as_keys and the corresponding bean instances as values_@throws BeansException if a bean could not be created_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beansOfTypeIncludingAncestors(ListableBeanFactory, Class, boolean, boolean);<T> Map<String, T> getBeansOfType(Class<T> type, boolean includeNonSingletons, boolean allowEagerInit)_			throws BeansException_;return,the,bean,instances,that,match,the,given,object,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,if,the,allow,eager,init,flag,is,set,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,if,allow,eager,init,is,not,set,only,raw,factory,beans,will,be,checked,which,doesn,t,require,initialization,of,each,factory,bean,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,beans,of,type,including,ancestors,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,the,map,returned,by,this,method,should,always,return,bean,names,and,corresponding,bean,instances,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,for,all,concrete,beans,param,include,non,singletons,whether,to,include,prototype,or,scoped,beans,too,or,just,singletons,also,applies,to,factory,beans,param,allow,eager,init,whether,to,initialize,i,lazy,init,singletons,i,and,i,objects,created,by,factory,beans,i,or,by,factory,methods,with,a,factory,bean,reference,for,the,type,check,note,that,factory,beans,need,to,be,eagerly,initialized,to,determine,their,type,so,be,aware,that,passing,in,true,for,this,flag,will,initialize,factory,beans,and,factory,bean,references,return,a,map,with,the,matching,beans,containing,the,bean,names,as,keys,and,the,corresponding,bean,instances,as,values,throws,beans,exception,if,a,bean,could,not,be,created,see,factory,bean,get,object,type,see,bean,factory,utils,beans,of,type,including,ancestors,listable,bean,factory,class,boolean,boolean;t,map,string,t,get,beans,of,type,class,t,type,boolean,include,non,singletons,boolean,allow,eager,init,throws,beans,exception
ListableBeanFactory -> <T> Map<String, T> getBeansOfType(Class<T> type, boolean includeNonSingletons, boolean allowEagerInit) 			throws BeansException_;1401909456;Return the bean instances that match the given object type (including_subclasses), judging from either bean definitions or the value of_{@code getObjectType} in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans if the "allowEagerInit" flag is set,_which means that FactoryBeans will get initialized. If the object created by the_FactoryBean doesn't match, the raw FactoryBean itself will be matched against the_type. If "allowEagerInit" is not set, only raw FactoryBeans will be checked_(which doesn't require initialization of each FactoryBean)._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' {@code beansOfTypeIncludingAncestors}_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>The Map returned by this method should always return bean names and_corresponding bean instances <i>in the order of definition</i> in the_backend configuration, as far as possible._@param type the class or interface to match, or {@code null} for all concrete beans_@param includeNonSingletons whether to include prototype or scoped beans too_or just singletons (also applies to FactoryBeans)_@param allowEagerInit whether to initialize <i>lazy-init singletons</i> and_<i>objects created by FactoryBeans</i> (or by factory methods with a_"factory-bean" reference) for the type check. Note that FactoryBeans need to be_eagerly initialized to determine their type: So be aware that passing in "true"_for this flag will initialize FactoryBeans and "factory-bean" references._@return a Map with the matching beans, containing the bean names as_keys and the corresponding bean instances as values_@throws BeansException if a bean could not be created_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beansOfTypeIncludingAncestors(ListableBeanFactory, Class, boolean, boolean);<T> Map<String, T> getBeansOfType(Class<T> type, boolean includeNonSingletons, boolean allowEagerInit)_			throws BeansException_;return,the,bean,instances,that,match,the,given,object,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,if,the,allow,eager,init,flag,is,set,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,if,allow,eager,init,is,not,set,only,raw,factory,beans,will,be,checked,which,doesn,t,require,initialization,of,each,factory,bean,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,beans,of,type,including,ancestors,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,the,map,returned,by,this,method,should,always,return,bean,names,and,corresponding,bean,instances,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,for,all,concrete,beans,param,include,non,singletons,whether,to,include,prototype,or,scoped,beans,too,or,just,singletons,also,applies,to,factory,beans,param,allow,eager,init,whether,to,initialize,i,lazy,init,singletons,i,and,i,objects,created,by,factory,beans,i,or,by,factory,methods,with,a,factory,bean,reference,for,the,type,check,note,that,factory,beans,need,to,be,eagerly,initialized,to,determine,their,type,so,be,aware,that,passing,in,true,for,this,flag,will,initialize,factory,beans,and,factory,bean,references,return,a,map,with,the,matching,beans,containing,the,bean,names,as,keys,and,the,corresponding,bean,instances,as,values,throws,beans,exception,if,a,bean,could,not,be,created,see,factory,bean,get,object,type,see,bean,factory,utils,beans,of,type,including,ancestors,listable,bean,factory,class,boolean,boolean;t,map,string,t,get,beans,of,type,class,t,type,boolean,include,non,singletons,boolean,allow,eager,init,throws,beans,exception
ListableBeanFactory -> <T> Map<String, T> getBeansOfType(Class<T> type, boolean includeNonSingletons, boolean allowEagerInit) 			throws BeansException_;1426716313;Return the bean instances that match the given object type (including_subclasses), judging from either bean definitions or the value of_{@code getObjectType} in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans if the "allowEagerInit" flag is set,_which means that FactoryBeans will get initialized. If the object created by the_FactoryBean doesn't match, the raw FactoryBean itself will be matched against the_type. If "allowEagerInit" is not set, only raw FactoryBeans will be checked_(which doesn't require initialization of each FactoryBean)._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' {@code beansOfTypeIncludingAncestors}_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>The Map returned by this method should always return bean names and_corresponding bean instances <i>in the order of definition</i> in the_backend configuration, as far as possible._@param type the class or interface to match, or {@code null} for all concrete beans_@param includeNonSingletons whether to include prototype or scoped beans too_or just singletons (also applies to FactoryBeans)_@param allowEagerInit whether to initialize <i>lazy-init singletons</i> and_<i>objects created by FactoryBeans</i> (or by factory methods with a_"factory-bean" reference) for the type check. Note that FactoryBeans need to be_eagerly initialized to determine their type: So be aware that passing in "true"_for this flag will initialize FactoryBeans and "factory-bean" references._@return a Map with the matching beans, containing the bean names as_keys and the corresponding bean instances as values_@throws BeansException if a bean could not be created_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beansOfTypeIncludingAncestors(ListableBeanFactory, Class, boolean, boolean);<T> Map<String, T> getBeansOfType(Class<T> type, boolean includeNonSingletons, boolean allowEagerInit)_			throws BeansException_;return,the,bean,instances,that,match,the,given,object,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,if,the,allow,eager,init,flag,is,set,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,if,allow,eager,init,is,not,set,only,raw,factory,beans,will,be,checked,which,doesn,t,require,initialization,of,each,factory,bean,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,beans,of,type,including,ancestors,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,the,map,returned,by,this,method,should,always,return,bean,names,and,corresponding,bean,instances,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,for,all,concrete,beans,param,include,non,singletons,whether,to,include,prototype,or,scoped,beans,too,or,just,singletons,also,applies,to,factory,beans,param,allow,eager,init,whether,to,initialize,i,lazy,init,singletons,i,and,i,objects,created,by,factory,beans,i,or,by,factory,methods,with,a,factory,bean,reference,for,the,type,check,note,that,factory,beans,need,to,be,eagerly,initialized,to,determine,their,type,so,be,aware,that,passing,in,true,for,this,flag,will,initialize,factory,beans,and,factory,bean,references,return,a,map,with,the,matching,beans,containing,the,bean,names,as,keys,and,the,corresponding,bean,instances,as,values,throws,beans,exception,if,a,bean,could,not,be,created,see,factory,bean,get,object,type,see,bean,factory,utils,beans,of,type,including,ancestors,listable,bean,factory,class,boolean,boolean;t,map,string,t,get,beans,of,type,class,t,type,boolean,include,non,singletons,boolean,allow,eager,init,throws,beans,exception
ListableBeanFactory -> <T> Map<String, T> getBeansOfType(Class<T> type, boolean includeNonSingletons, boolean allowEagerInit) 			throws BeansException_;1459774710;Return the bean instances that match the given object type (including_subclasses), judging from either bean definitions or the value of_{@code getObjectType} in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans if the "allowEagerInit" flag is set,_which means that FactoryBeans will get initialized. If the object created by the_FactoryBean doesn't match, the raw FactoryBean itself will be matched against the_type. If "allowEagerInit" is not set, only raw FactoryBeans will be checked_(which doesn't require initialization of each FactoryBean)._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' {@code beansOfTypeIncludingAncestors}_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>The Map returned by this method should always return bean names and_corresponding bean instances <i>in the order of definition</i> in the_backend configuration, as far as possible._@param type the class or interface to match, or {@code null} for all concrete beans_@param includeNonSingletons whether to include prototype or scoped beans too_or just singletons (also applies to FactoryBeans)_@param allowEagerInit whether to initialize <i>lazy-init singletons</i> and_<i>objects created by FactoryBeans</i> (or by factory methods with a_"factory-bean" reference) for the type check. Note that FactoryBeans need to be_eagerly initialized to determine their type: So be aware that passing in "true"_for this flag will initialize FactoryBeans and "factory-bean" references._@return a Map with the matching beans, containing the bean names as_keys and the corresponding bean instances as values_@throws BeansException if a bean could not be created_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beansOfTypeIncludingAncestors(ListableBeanFactory, Class, boolean, boolean);<T> Map<String, T> getBeansOfType(Class<T> type, boolean includeNonSingletons, boolean allowEagerInit)_			throws BeansException_;return,the,bean,instances,that,match,the,given,object,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,if,the,allow,eager,init,flag,is,set,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,if,allow,eager,init,is,not,set,only,raw,factory,beans,will,be,checked,which,doesn,t,require,initialization,of,each,factory,bean,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,beans,of,type,including,ancestors,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,the,map,returned,by,this,method,should,always,return,bean,names,and,corresponding,bean,instances,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,for,all,concrete,beans,param,include,non,singletons,whether,to,include,prototype,or,scoped,beans,too,or,just,singletons,also,applies,to,factory,beans,param,allow,eager,init,whether,to,initialize,i,lazy,init,singletons,i,and,i,objects,created,by,factory,beans,i,or,by,factory,methods,with,a,factory,bean,reference,for,the,type,check,note,that,factory,beans,need,to,be,eagerly,initialized,to,determine,their,type,so,be,aware,that,passing,in,true,for,this,flag,will,initialize,factory,beans,and,factory,bean,references,return,a,map,with,the,matching,beans,containing,the,bean,names,as,keys,and,the,corresponding,bean,instances,as,values,throws,beans,exception,if,a,bean,could,not,be,created,see,factory,bean,get,object,type,see,bean,factory,utils,beans,of,type,including,ancestors,listable,bean,factory,class,boolean,boolean;t,map,string,t,get,beans,of,type,class,t,type,boolean,include,non,singletons,boolean,allow,eager,init,throws,beans,exception
ListableBeanFactory -> String[] getBeanNamesForType(@Nullable Class<?> type, boolean includeNonSingletons, boolean allowEagerInit)_;1495868221;Return the names of beans matching the given type (including subclasses),_judging from either bean definitions or the value of {@code getObjectType}_in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans if the "allowEagerInit" flag is set,_which means that FactoryBeans will get initialized. If the object created by the_FactoryBean doesn't match, the raw FactoryBean itself will be matched against the_type. If "allowEagerInit" is not set, only raw FactoryBeans will be checked_(which doesn't require initialization of each FactoryBean)._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' {@code beanNamesForTypeIncludingAncestors}_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>Bean names returned by this method should always return bean names <i>in the_order of definition</i> in the backend configuration, as far as possible._@param type the class or interface to match, or {@code null} for all bean names_@param includeNonSingletons whether to include prototype or scoped beans too_or just singletons (also applies to FactoryBeans)_@param allowEagerInit whether to initialize <i>lazy-init singletons</i> and_<i>objects created by FactoryBeans</i> (or by factory methods with a_"factory-bean" reference) for the type check. Note that FactoryBeans need to be_eagerly initialized to determine their type: So be aware that passing in "true"_for this flag will initialize FactoryBeans and "factory-bean" references._@return the names of beans (or objects created by FactoryBeans) matching_the given object type (including subclasses), or an empty array if none_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beanNamesForTypeIncludingAncestors(ListableBeanFactory, Class, boolean, boolean);String[] getBeanNamesForType(@Nullable Class<?> type, boolean includeNonSingletons, boolean allowEagerInit)_;return,the,names,of,beans,matching,the,given,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,if,the,allow,eager,init,flag,is,set,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,if,allow,eager,init,is,not,set,only,raw,factory,beans,will,be,checked,which,doesn,t,require,initialization,of,each,factory,bean,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,bean,names,for,type,including,ancestors,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,bean,names,returned,by,this,method,should,always,return,bean,names,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,for,all,bean,names,param,include,non,singletons,whether,to,include,prototype,or,scoped,beans,too,or,just,singletons,also,applies,to,factory,beans,param,allow,eager,init,whether,to,initialize,i,lazy,init,singletons,i,and,i,objects,created,by,factory,beans,i,or,by,factory,methods,with,a,factory,bean,reference,for,the,type,check,note,that,factory,beans,need,to,be,eagerly,initialized,to,determine,their,type,so,be,aware,that,passing,in,true,for,this,flag,will,initialize,factory,beans,and,factory,bean,references,return,the,names,of,beans,or,objects,created,by,factory,beans,matching,the,given,object,type,including,subclasses,or,an,empty,array,if,none,see,factory,bean,get,object,type,see,bean,factory,utils,bean,names,for,type,including,ancestors,listable,bean,factory,class,boolean,boolean;string,get,bean,names,for,type,nullable,class,type,boolean,include,non,singletons,boolean,allow,eager,init
ListableBeanFactory -> String[] getBeanNamesForType(@Nullable Class<?> type, boolean includeNonSingletons, boolean allowEagerInit)_;1496837955;Return the names of beans matching the given type (including subclasses),_judging from either bean definitions or the value of {@code getObjectType}_in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans if the "allowEagerInit" flag is set,_which means that FactoryBeans will get initialized. If the object created by the_FactoryBean doesn't match, the raw FactoryBean itself will be matched against the_type. If "allowEagerInit" is not set, only raw FactoryBeans will be checked_(which doesn't require initialization of each FactoryBean)._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' {@code beanNamesForTypeIncludingAncestors}_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>Bean names returned by this method should always return bean names <i>in the_order of definition</i> in the backend configuration, as far as possible._@param type the class or interface to match, or {@code null} for all bean names_@param includeNonSingletons whether to include prototype or scoped beans too_or just singletons (also applies to FactoryBeans)_@param allowEagerInit whether to initialize <i>lazy-init singletons</i> and_<i>objects created by FactoryBeans</i> (or by factory methods with a_"factory-bean" reference) for the type check. Note that FactoryBeans need to be_eagerly initialized to determine their type: So be aware that passing in "true"_for this flag will initialize FactoryBeans and "factory-bean" references._@return the names of beans (or objects created by FactoryBeans) matching_the given object type (including subclasses), or an empty array if none_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beanNamesForTypeIncludingAncestors(ListableBeanFactory, Class, boolean, boolean);String[] getBeanNamesForType(@Nullable Class<?> type, boolean includeNonSingletons, boolean allowEagerInit)_;return,the,names,of,beans,matching,the,given,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,if,the,allow,eager,init,flag,is,set,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,if,allow,eager,init,is,not,set,only,raw,factory,beans,will,be,checked,which,doesn,t,require,initialization,of,each,factory,bean,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,bean,names,for,type,including,ancestors,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,bean,names,returned,by,this,method,should,always,return,bean,names,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,for,all,bean,names,param,include,non,singletons,whether,to,include,prototype,or,scoped,beans,too,or,just,singletons,also,applies,to,factory,beans,param,allow,eager,init,whether,to,initialize,i,lazy,init,singletons,i,and,i,objects,created,by,factory,beans,i,or,by,factory,methods,with,a,factory,bean,reference,for,the,type,check,note,that,factory,beans,need,to,be,eagerly,initialized,to,determine,their,type,so,be,aware,that,passing,in,true,for,this,flag,will,initialize,factory,beans,and,factory,bean,references,return,the,names,of,beans,or,objects,created,by,factory,beans,matching,the,given,object,type,including,subclasses,or,an,empty,array,if,none,see,factory,bean,get,object,type,see,bean,factory,utils,bean,names,for,type,including,ancestors,listable,bean,factory,class,boolean,boolean;string,get,bean,names,for,type,nullable,class,type,boolean,include,non,singletons,boolean,allow,eager,init
ListableBeanFactory -> String[] getBeanNamesForType(@Nullable Class<?> type, boolean includeNonSingletons, boolean allowEagerInit)_;1539878644;Return the names of beans matching the given type (including subclasses),_judging from either bean definitions or the value of {@code getObjectType}_in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans if the "allowEagerInit" flag is set,_which means that FactoryBeans will get initialized. If the object created by the_FactoryBean doesn't match, the raw FactoryBean itself will be matched against the_type. If "allowEagerInit" is not set, only raw FactoryBeans will be checked_(which doesn't require initialization of each FactoryBean)._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' {@code beanNamesForTypeIncludingAncestors}_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>Bean names returned by this method should always return bean names <i>in the_order of definition</i> in the backend configuration, as far as possible._@param type the class or interface to match, or {@code null} for all bean names_@param includeNonSingletons whether to include prototype or scoped beans too_or just singletons (also applies to FactoryBeans)_@param allowEagerInit whether to initialize <i>lazy-init singletons</i> and_<i>objects created by FactoryBeans</i> (or by factory methods with a_"factory-bean" reference) for the type check. Note that FactoryBeans need to be_eagerly initialized to determine their type: So be aware that passing in "true"_for this flag will initialize FactoryBeans and "factory-bean" references._@return the names of beans (or objects created by FactoryBeans) matching_the given object type (including subclasses), or an empty array if none_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beanNamesForTypeIncludingAncestors(ListableBeanFactory, Class, boolean, boolean);String[] getBeanNamesForType(@Nullable Class<?> type, boolean includeNonSingletons, boolean allowEagerInit)_;return,the,names,of,beans,matching,the,given,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,if,the,allow,eager,init,flag,is,set,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,if,allow,eager,init,is,not,set,only,raw,factory,beans,will,be,checked,which,doesn,t,require,initialization,of,each,factory,bean,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,bean,names,for,type,including,ancestors,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,bean,names,returned,by,this,method,should,always,return,bean,names,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,for,all,bean,names,param,include,non,singletons,whether,to,include,prototype,or,scoped,beans,too,or,just,singletons,also,applies,to,factory,beans,param,allow,eager,init,whether,to,initialize,i,lazy,init,singletons,i,and,i,objects,created,by,factory,beans,i,or,by,factory,methods,with,a,factory,bean,reference,for,the,type,check,note,that,factory,beans,need,to,be,eagerly,initialized,to,determine,their,type,so,be,aware,that,passing,in,true,for,this,flag,will,initialize,factory,beans,and,factory,bean,references,return,the,names,of,beans,or,objects,created,by,factory,beans,matching,the,given,object,type,including,subclasses,or,an,empty,array,if,none,see,factory,bean,get,object,type,see,bean,factory,utils,bean,names,for,type,including,ancestors,listable,bean,factory,class,boolean,boolean;string,get,bean,names,for,type,nullable,class,type,boolean,include,non,singletons,boolean,allow,eager,init
ListableBeanFactory -> @Nullable 	<A extends Annotation> A findAnnotationOnBean(String beanName, Class<A> annotationType) 			throws NoSuchBeanDefinitionException_;1495868221;Find an {@link Annotation} of {@code annotationType} on the specified_bean, traversing its interfaces and super classes if no annotation can be_found on the given class itself._@param beanName the name of the bean to look for annotations on_@param annotationType the annotation class to look for_@return the annotation of the given type if found, or {@code null}_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 3.0;@Nullable_	<A extends Annotation> A findAnnotationOnBean(String beanName, Class<A> annotationType)_			throws NoSuchBeanDefinitionException_;find,an,link,annotation,of,code,annotation,type,on,the,specified,bean,traversing,its,interfaces,and,super,classes,if,no,annotation,can,be,found,on,the,given,class,itself,param,bean,name,the,name,of,the,bean,to,look,for,annotations,on,param,annotation,type,the,annotation,class,to,look,for,return,the,annotation,of,the,given,type,if,found,or,code,null,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,3,0;nullable,a,extends,annotation,a,find,annotation,on,bean,string,bean,name,class,a,annotation,type,throws,no,such,bean,definition,exception
ListableBeanFactory -> @Nullable 	<A extends Annotation> A findAnnotationOnBean(String beanName, Class<A> annotationType) 			throws NoSuchBeanDefinitionException_;1496837955;Find an {@link Annotation} of {@code annotationType} on the specified_bean, traversing its interfaces and super classes if no annotation can be_found on the given class itself._@param beanName the name of the bean to look for annotations on_@param annotationType the annotation class to look for_@return the annotation of the given type if found, or {@code null} otherwise_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 3.0;@Nullable_	<A extends Annotation> A findAnnotationOnBean(String beanName, Class<A> annotationType)_			throws NoSuchBeanDefinitionException_;find,an,link,annotation,of,code,annotation,type,on,the,specified,bean,traversing,its,interfaces,and,super,classes,if,no,annotation,can,be,found,on,the,given,class,itself,param,bean,name,the,name,of,the,bean,to,look,for,annotations,on,param,annotation,type,the,annotation,class,to,look,for,return,the,annotation,of,the,given,type,if,found,or,code,null,otherwise,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,3,0;nullable,a,extends,annotation,a,find,annotation,on,bean,string,bean,name,class,a,annotation,type,throws,no,such,bean,definition,exception
ListableBeanFactory -> @Nullable 	<A extends Annotation> A findAnnotationOnBean(String beanName, Class<A> annotationType) 			throws NoSuchBeanDefinitionException_;1539878644;Find an {@link Annotation} of {@code annotationType} on the specified_bean, traversing its interfaces and super classes if no annotation can be_found on the given class itself._@param beanName the name of the bean to look for annotations on_@param annotationType the annotation class to look for_@return the annotation of the given type if found, or {@code null} otherwise_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 3.0;@Nullable_	<A extends Annotation> A findAnnotationOnBean(String beanName, Class<A> annotationType)_			throws NoSuchBeanDefinitionException_;find,an,link,annotation,of,code,annotation,type,on,the,specified,bean,traversing,its,interfaces,and,super,classes,if,no,annotation,can,be,found,on,the,given,class,itself,param,bean,name,the,name,of,the,bean,to,look,for,annotations,on,param,annotation,type,the,annotation,class,to,look,for,return,the,annotation,of,the,given,type,if,found,or,code,null,otherwise,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,3,0;nullable,a,extends,annotation,a,find,annotation,on,bean,string,bean,name,class,a,annotation,type,throws,no,such,bean,definition,exception
ListableBeanFactory -> String[] getBeanNamesForType(Class<?> type)_;1328020251;Return the names of beans matching the given type (including subclasses),_judging from either bean definitions or the value of <code>getObjectType</code>_in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans, which means that FactoryBeans_will get initialized. If the object created by the FactoryBean doesn't match,_the raw FactoryBean itself will be matched against the type._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' <code>beanNamesForTypeIncludingAncestors</code>_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>This version of <code>getBeanNamesForType</code> matches all kinds of beans,_be it singletons, prototypes, or FactoryBeans. In most implementations, the_result will be the same as for <code>getBeanNamesOfType(type, true, true)</code>._<p>Bean names returned by this method should always return bean names <i>in the_order of definition</i> in the backend configuration, as far as possible._@param type the class or interface to match, or <code>null</code> for all bean names_@return the names of beans (or objects created by FactoryBeans) matching_the given object type (including subclasses), or an empty array if none_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beanNamesForTypeIncludingAncestors(ListableBeanFactory, Class);String[] getBeanNamesForType(Class<?> type)_;return,the,names,of,beans,matching,the,given,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,code,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,bean,names,for,type,including,ancestors,code,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,this,version,of,code,get,bean,names,for,type,code,matches,all,kinds,of,beans,be,it,singletons,prototypes,or,factory,beans,in,most,implementations,the,result,will,be,the,same,as,for,code,get,bean,names,of,type,type,true,true,code,p,bean,names,returned,by,this,method,should,always,return,bean,names,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,code,for,all,bean,names,return,the,names,of,beans,or,objects,created,by,factory,beans,matching,the,given,object,type,including,subclasses,or,an,empty,array,if,none,see,factory,bean,get,object,type,see,bean,factory,utils,bean,names,for,type,including,ancestors,listable,bean,factory,class;string,get,bean,names,for,type,class,type
ListableBeanFactory -> String[] getBeanNamesForType(Class<?> type)_;1356735495;Return the names of beans matching the given type (including subclasses),_judging from either bean definitions or the value of {@code getObjectType}_in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans, which means that FactoryBeans_will get initialized. If the object created by the FactoryBean doesn't match,_the raw FactoryBean itself will be matched against the type._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' {@code beanNamesForTypeIncludingAncestors}_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>This version of {@code getBeanNamesForType} matches all kinds of beans,_be it singletons, prototypes, or FactoryBeans. In most implementations, the_result will be the same as for {@code getBeanNamesOfType(type, true, true)}._<p>Bean names returned by this method should always return bean names <i>in the_order of definition</i> in the backend configuration, as far as possible._@param type the class or interface to match, or {@code null} for all bean names_@return the names of beans (or objects created by FactoryBeans) matching_the given object type (including subclasses), or an empty array if none_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beanNamesForTypeIncludingAncestors(ListableBeanFactory, Class);String[] getBeanNamesForType(Class<?> type)_;return,the,names,of,beans,matching,the,given,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,bean,names,for,type,including,ancestors,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,this,version,of,code,get,bean,names,for,type,matches,all,kinds,of,beans,be,it,singletons,prototypes,or,factory,beans,in,most,implementations,the,result,will,be,the,same,as,for,code,get,bean,names,of,type,type,true,true,p,bean,names,returned,by,this,method,should,always,return,bean,names,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,for,all,bean,names,return,the,names,of,beans,or,objects,created,by,factory,beans,matching,the,given,object,type,including,subclasses,or,an,empty,array,if,none,see,factory,bean,get,object,type,see,bean,factory,utils,bean,names,for,type,including,ancestors,listable,bean,factory,class;string,get,bean,names,for,type,class,type
ListableBeanFactory -> String[] getBeanNamesForType(Class<?> type)_;1384527851;Return the names of beans matching the given type (including subclasses),_judging from either bean definitions or the value of {@code getObjectType}_in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans, which means that FactoryBeans_will get initialized. If the object created by the FactoryBean doesn't match,_the raw FactoryBean itself will be matched against the type._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' {@code beanNamesForTypeIncludingAncestors}_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>This version of {@code getBeanNamesForType} matches all kinds of beans,_be it singletons, prototypes, or FactoryBeans. In most implementations, the_result will be the same as for {@code getBeanNamesOfType(type, true, true)}._<p>Bean names returned by this method should always return bean names <i>in the_order of definition</i> in the backend configuration, as far as possible._@param type the class or interface to match, or {@code null} for all bean names_@return the names of beans (or objects created by FactoryBeans) matching_the given object type (including subclasses), or an empty array if none_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beanNamesForTypeIncludingAncestors(ListableBeanFactory, Class);String[] getBeanNamesForType(Class<?> type)_;return,the,names,of,beans,matching,the,given,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,bean,names,for,type,including,ancestors,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,this,version,of,code,get,bean,names,for,type,matches,all,kinds,of,beans,be,it,singletons,prototypes,or,factory,beans,in,most,implementations,the,result,will,be,the,same,as,for,code,get,bean,names,of,type,type,true,true,p,bean,names,returned,by,this,method,should,always,return,bean,names,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,for,all,bean,names,return,the,names,of,beans,or,objects,created,by,factory,beans,matching,the,given,object,type,including,subclasses,or,an,empty,array,if,none,see,factory,bean,get,object,type,see,bean,factory,utils,bean,names,for,type,including,ancestors,listable,bean,factory,class;string,get,bean,names,for,type,class,type
ListableBeanFactory -> String[] getBeanNamesForType(Class<?> type)_;1384700387;Return the names of beans matching the given type (including subclasses),_judging from either bean definitions or the value of {@code getObjectType}_in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans, which means that FactoryBeans_will get initialized. If the object created by the FactoryBean doesn't match,_the raw FactoryBean itself will be matched against the type._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' {@code beanNamesForTypeIncludingAncestors}_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>This version of {@code getBeanNamesForType} matches all kinds of beans,_be it singletons, prototypes, or FactoryBeans. In most implementations, the_result will be the same as for {@code getBeanNamesOfType(type, true, true)}._<p>Bean names returned by this method should always return bean names <i>in the_order of definition</i> in the backend configuration, as far as possible._@param type the class or interface to match, or {@code null} for all bean names_@return the names of beans (or objects created by FactoryBeans) matching_the given object type (including subclasses), or an empty array if none_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beanNamesForTypeIncludingAncestors(ListableBeanFactory, Class);String[] getBeanNamesForType(Class<?> type)_;return,the,names,of,beans,matching,the,given,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,bean,names,for,type,including,ancestors,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,this,version,of,code,get,bean,names,for,type,matches,all,kinds,of,beans,be,it,singletons,prototypes,or,factory,beans,in,most,implementations,the,result,will,be,the,same,as,for,code,get,bean,names,of,type,type,true,true,p,bean,names,returned,by,this,method,should,always,return,bean,names,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,for,all,bean,names,return,the,names,of,beans,or,objects,created,by,factory,beans,matching,the,given,object,type,including,subclasses,or,an,empty,array,if,none,see,factory,bean,get,object,type,see,bean,factory,utils,bean,names,for,type,including,ancestors,listable,bean,factory,class;string,get,bean,names,for,type,class,type
ListableBeanFactory -> String[] getBeanNamesForType(Class<?> type)_;1401909456;Return the names of beans matching the given type (including subclasses),_judging from either bean definitions or the value of {@code getObjectType}_in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans, which means that FactoryBeans_will get initialized. If the object created by the FactoryBean doesn't match,_the raw FactoryBean itself will be matched against the type._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' {@code beanNamesForTypeIncludingAncestors}_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>This version of {@code getBeanNamesForType} matches all kinds of beans,_be it singletons, prototypes, or FactoryBeans. In most implementations, the_result will be the same as for {@code getBeanNamesForType(type, true, true)}._<p>Bean names returned by this method should always return bean names <i>in the_order of definition</i> in the backend configuration, as far as possible._@param type the class or interface to match, or {@code null} for all bean names_@return the names of beans (or objects created by FactoryBeans) matching_the given object type (including subclasses), or an empty array if none_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beanNamesForTypeIncludingAncestors(ListableBeanFactory, Class);String[] getBeanNamesForType(Class<?> type)_;return,the,names,of,beans,matching,the,given,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,bean,names,for,type,including,ancestors,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,this,version,of,code,get,bean,names,for,type,matches,all,kinds,of,beans,be,it,singletons,prototypes,or,factory,beans,in,most,implementations,the,result,will,be,the,same,as,for,code,get,bean,names,for,type,type,true,true,p,bean,names,returned,by,this,method,should,always,return,bean,names,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,for,all,bean,names,return,the,names,of,beans,or,objects,created,by,factory,beans,matching,the,given,object,type,including,subclasses,or,an,empty,array,if,none,see,factory,bean,get,object,type,see,bean,factory,utils,bean,names,for,type,including,ancestors,listable,bean,factory,class;string,get,bean,names,for,type,class,type
ListableBeanFactory -> String[] getBeanNamesForType(Class<?> type)_;1426716313;Return the names of beans matching the given type (including subclasses),_judging from either bean definitions or the value of {@code getObjectType}_in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans, which means that FactoryBeans_will get initialized. If the object created by the FactoryBean doesn't match,_the raw FactoryBean itself will be matched against the type._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' {@code beanNamesForTypeIncludingAncestors}_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>This version of {@code getBeanNamesForType} matches all kinds of beans,_be it singletons, prototypes, or FactoryBeans. In most implementations, the_result will be the same as for {@code getBeanNamesForType(type, true, true)}._<p>Bean names returned by this method should always return bean names <i>in the_order of definition</i> in the backend configuration, as far as possible._@param type the class or interface to match, or {@code null} for all bean names_@return the names of beans (or objects created by FactoryBeans) matching_the given object type (including subclasses), or an empty array if none_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beanNamesForTypeIncludingAncestors(ListableBeanFactory, Class);String[] getBeanNamesForType(Class<?> type)_;return,the,names,of,beans,matching,the,given,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,bean,names,for,type,including,ancestors,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,this,version,of,code,get,bean,names,for,type,matches,all,kinds,of,beans,be,it,singletons,prototypes,or,factory,beans,in,most,implementations,the,result,will,be,the,same,as,for,code,get,bean,names,for,type,type,true,true,p,bean,names,returned,by,this,method,should,always,return,bean,names,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,for,all,bean,names,return,the,names,of,beans,or,objects,created,by,factory,beans,matching,the,given,object,type,including,subclasses,or,an,empty,array,if,none,see,factory,bean,get,object,type,see,bean,factory,utils,bean,names,for,type,including,ancestors,listable,bean,factory,class;string,get,bean,names,for,type,class,type
ListableBeanFactory -> String[] getBeanNamesForType(Class<?> type)_;1459774710;Return the names of beans matching the given type (including subclasses),_judging from either bean definitions or the value of {@code getObjectType}_in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans, which means that FactoryBeans_will get initialized. If the object created by the FactoryBean doesn't match,_the raw FactoryBean itself will be matched against the type._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' {@code beanNamesForTypeIncludingAncestors}_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>This version of {@code getBeanNamesForType} matches all kinds of beans,_be it singletons, prototypes, or FactoryBeans. In most implementations, the_result will be the same as for {@code getBeanNamesForType(type, true, true)}._<p>Bean names returned by this method should always return bean names <i>in the_order of definition</i> in the backend configuration, as far as possible._@param type the class or interface to match, or {@code null} for all bean names_@return the names of beans (or objects created by FactoryBeans) matching_the given object type (including subclasses), or an empty array if none_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beanNamesForTypeIncludingAncestors(ListableBeanFactory, Class);String[] getBeanNamesForType(Class<?> type)_;return,the,names,of,beans,matching,the,given,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,bean,names,for,type,including,ancestors,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,this,version,of,code,get,bean,names,for,type,matches,all,kinds,of,beans,be,it,singletons,prototypes,or,factory,beans,in,most,implementations,the,result,will,be,the,same,as,for,code,get,bean,names,for,type,type,true,true,p,bean,names,returned,by,this,method,should,always,return,bean,names,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,for,all,bean,names,return,the,names,of,beans,or,objects,created,by,factory,beans,matching,the,given,object,type,including,subclasses,or,an,empty,array,if,none,see,factory,bean,get,object,type,see,bean,factory,utils,bean,names,for,type,including,ancestors,listable,bean,factory,class;string,get,bean,names,for,type,class,type
ListableBeanFactory -> String[] getBeanNamesForType(Class<?> type, boolean includeNonSingletons, boolean allowEagerInit)_;1328020251;Return the names of beans matching the given type (including subclasses),_judging from either bean definitions or the value of <code>getObjectType</code>_in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans if the "allowEagerInit" flag is set,_which means that FactoryBeans will get initialized. If the object created by the_FactoryBean doesn't match, the raw FactoryBean itself will be matched against the_type. If "allowEagerInit" is not set, only raw FactoryBeans will be checked_(which doesn't require initialization of each FactoryBean)._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' <code>beanNamesForTypeIncludingAncestors</code>_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>Bean names returned by this method should always return bean names <i>in the_order of definition</i> in the backend configuration, as far as possible._@param type the class or interface to match, or <code>null</code> for all bean names_@param includeNonSingletons whether to include prototype or scoped beans too_or just singletons (also applies to FactoryBeans)_@param allowEagerInit whether to initialize <i>lazy-init singletons</i> and_<i>objects created by FactoryBeans</i> (or by factory methods with a_"factory-bean" reference) for the type check. Note that FactoryBeans need to be_eagerly initialized to determine their type: So be aware that passing in "true"_for this flag will initialize FactoryBeans and "factory-bean" references._@return the names of beans (or objects created by FactoryBeans) matching_the given object type (including subclasses), or an empty array if none_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beanNamesForTypeIncludingAncestors(ListableBeanFactory, Class, boolean, boolean);String[] getBeanNamesForType(Class<?> type, boolean includeNonSingletons, boolean allowEagerInit)_;return,the,names,of,beans,matching,the,given,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,code,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,if,the,allow,eager,init,flag,is,set,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,if,allow,eager,init,is,not,set,only,raw,factory,beans,will,be,checked,which,doesn,t,require,initialization,of,each,factory,bean,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,bean,names,for,type,including,ancestors,code,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,bean,names,returned,by,this,method,should,always,return,bean,names,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,code,for,all,bean,names,param,include,non,singletons,whether,to,include,prototype,or,scoped,beans,too,or,just,singletons,also,applies,to,factory,beans,param,allow,eager,init,whether,to,initialize,i,lazy,init,singletons,i,and,i,objects,created,by,factory,beans,i,or,by,factory,methods,with,a,factory,bean,reference,for,the,type,check,note,that,factory,beans,need,to,be,eagerly,initialized,to,determine,their,type,so,be,aware,that,passing,in,true,for,this,flag,will,initialize,factory,beans,and,factory,bean,references,return,the,names,of,beans,or,objects,created,by,factory,beans,matching,the,given,object,type,including,subclasses,or,an,empty,array,if,none,see,factory,bean,get,object,type,see,bean,factory,utils,bean,names,for,type,including,ancestors,listable,bean,factory,class,boolean,boolean;string,get,bean,names,for,type,class,type,boolean,include,non,singletons,boolean,allow,eager,init
ListableBeanFactory -> String[] getBeanNamesForType(Class<?> type, boolean includeNonSingletons, boolean allowEagerInit)_;1356735495;Return the names of beans matching the given type (including subclasses),_judging from either bean definitions or the value of {@code getObjectType}_in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans if the "allowEagerInit" flag is set,_which means that FactoryBeans will get initialized. If the object created by the_FactoryBean doesn't match, the raw FactoryBean itself will be matched against the_type. If "allowEagerInit" is not set, only raw FactoryBeans will be checked_(which doesn't require initialization of each FactoryBean)._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' {@code beanNamesForTypeIncludingAncestors}_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>Bean names returned by this method should always return bean names <i>in the_order of definition</i> in the backend configuration, as far as possible._@param type the class or interface to match, or {@code null} for all bean names_@param includeNonSingletons whether to include prototype or scoped beans too_or just singletons (also applies to FactoryBeans)_@param allowEagerInit whether to initialize <i>lazy-init singletons</i> and_<i>objects created by FactoryBeans</i> (or by factory methods with a_"factory-bean" reference) for the type check. Note that FactoryBeans need to be_eagerly initialized to determine their type: So be aware that passing in "true"_for this flag will initialize FactoryBeans and "factory-bean" references._@return the names of beans (or objects created by FactoryBeans) matching_the given object type (including subclasses), or an empty array if none_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beanNamesForTypeIncludingAncestors(ListableBeanFactory, Class, boolean, boolean);String[] getBeanNamesForType(Class<?> type, boolean includeNonSingletons, boolean allowEagerInit)_;return,the,names,of,beans,matching,the,given,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,if,the,allow,eager,init,flag,is,set,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,if,allow,eager,init,is,not,set,only,raw,factory,beans,will,be,checked,which,doesn,t,require,initialization,of,each,factory,bean,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,bean,names,for,type,including,ancestors,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,bean,names,returned,by,this,method,should,always,return,bean,names,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,for,all,bean,names,param,include,non,singletons,whether,to,include,prototype,or,scoped,beans,too,or,just,singletons,also,applies,to,factory,beans,param,allow,eager,init,whether,to,initialize,i,lazy,init,singletons,i,and,i,objects,created,by,factory,beans,i,or,by,factory,methods,with,a,factory,bean,reference,for,the,type,check,note,that,factory,beans,need,to,be,eagerly,initialized,to,determine,their,type,so,be,aware,that,passing,in,true,for,this,flag,will,initialize,factory,beans,and,factory,bean,references,return,the,names,of,beans,or,objects,created,by,factory,beans,matching,the,given,object,type,including,subclasses,or,an,empty,array,if,none,see,factory,bean,get,object,type,see,bean,factory,utils,bean,names,for,type,including,ancestors,listable,bean,factory,class,boolean,boolean;string,get,bean,names,for,type,class,type,boolean,include,non,singletons,boolean,allow,eager,init
ListableBeanFactory -> String[] getBeanNamesForType(Class<?> type, boolean includeNonSingletons, boolean allowEagerInit)_;1384527851;Return the names of beans matching the given type (including subclasses),_judging from either bean definitions or the value of {@code getObjectType}_in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans if the "allowEagerInit" flag is set,_which means that FactoryBeans will get initialized. If the object created by the_FactoryBean doesn't match, the raw FactoryBean itself will be matched against the_type. If "allowEagerInit" is not set, only raw FactoryBeans will be checked_(which doesn't require initialization of each FactoryBean)._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' {@code beanNamesForTypeIncludingAncestors}_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>Bean names returned by this method should always return bean names <i>in the_order of definition</i> in the backend configuration, as far as possible._@param type the class or interface to match, or {@code null} for all bean names_@param includeNonSingletons whether to include prototype or scoped beans too_or just singletons (also applies to FactoryBeans)_@param allowEagerInit whether to initialize <i>lazy-init singletons</i> and_<i>objects created by FactoryBeans</i> (or by factory methods with a_"factory-bean" reference) for the type check. Note that FactoryBeans need to be_eagerly initialized to determine their type: So be aware that passing in "true"_for this flag will initialize FactoryBeans and "factory-bean" references._@return the names of beans (or objects created by FactoryBeans) matching_the given object type (including subclasses), or an empty array if none_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beanNamesForTypeIncludingAncestors(ListableBeanFactory, Class, boolean, boolean);String[] getBeanNamesForType(Class<?> type, boolean includeNonSingletons, boolean allowEagerInit)_;return,the,names,of,beans,matching,the,given,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,if,the,allow,eager,init,flag,is,set,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,if,allow,eager,init,is,not,set,only,raw,factory,beans,will,be,checked,which,doesn,t,require,initialization,of,each,factory,bean,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,bean,names,for,type,including,ancestors,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,bean,names,returned,by,this,method,should,always,return,bean,names,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,for,all,bean,names,param,include,non,singletons,whether,to,include,prototype,or,scoped,beans,too,or,just,singletons,also,applies,to,factory,beans,param,allow,eager,init,whether,to,initialize,i,lazy,init,singletons,i,and,i,objects,created,by,factory,beans,i,or,by,factory,methods,with,a,factory,bean,reference,for,the,type,check,note,that,factory,beans,need,to,be,eagerly,initialized,to,determine,their,type,so,be,aware,that,passing,in,true,for,this,flag,will,initialize,factory,beans,and,factory,bean,references,return,the,names,of,beans,or,objects,created,by,factory,beans,matching,the,given,object,type,including,subclasses,or,an,empty,array,if,none,see,factory,bean,get,object,type,see,bean,factory,utils,bean,names,for,type,including,ancestors,listable,bean,factory,class,boolean,boolean;string,get,bean,names,for,type,class,type,boolean,include,non,singletons,boolean,allow,eager,init
ListableBeanFactory -> String[] getBeanNamesForType(Class<?> type, boolean includeNonSingletons, boolean allowEagerInit)_;1384700387;Return the names of beans matching the given type (including subclasses),_judging from either bean definitions or the value of {@code getObjectType}_in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans if the "allowEagerInit" flag is set,_which means that FactoryBeans will get initialized. If the object created by the_FactoryBean doesn't match, the raw FactoryBean itself will be matched against the_type. If "allowEagerInit" is not set, only raw FactoryBeans will be checked_(which doesn't require initialization of each FactoryBean)._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' {@code beanNamesForTypeIncludingAncestors}_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>Bean names returned by this method should always return bean names <i>in the_order of definition</i> in the backend configuration, as far as possible._@param type the class or interface to match, or {@code null} for all bean names_@param includeNonSingletons whether to include prototype or scoped beans too_or just singletons (also applies to FactoryBeans)_@param allowEagerInit whether to initialize <i>lazy-init singletons</i> and_<i>objects created by FactoryBeans</i> (or by factory methods with a_"factory-bean" reference) for the type check. Note that FactoryBeans need to be_eagerly initialized to determine their type: So be aware that passing in "true"_for this flag will initialize FactoryBeans and "factory-bean" references._@return the names of beans (or objects created by FactoryBeans) matching_the given object type (including subclasses), or an empty array if none_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beanNamesForTypeIncludingAncestors(ListableBeanFactory, Class, boolean, boolean);String[] getBeanNamesForType(Class<?> type, boolean includeNonSingletons, boolean allowEagerInit)_;return,the,names,of,beans,matching,the,given,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,if,the,allow,eager,init,flag,is,set,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,if,allow,eager,init,is,not,set,only,raw,factory,beans,will,be,checked,which,doesn,t,require,initialization,of,each,factory,bean,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,bean,names,for,type,including,ancestors,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,bean,names,returned,by,this,method,should,always,return,bean,names,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,for,all,bean,names,param,include,non,singletons,whether,to,include,prototype,or,scoped,beans,too,or,just,singletons,also,applies,to,factory,beans,param,allow,eager,init,whether,to,initialize,i,lazy,init,singletons,i,and,i,objects,created,by,factory,beans,i,or,by,factory,methods,with,a,factory,bean,reference,for,the,type,check,note,that,factory,beans,need,to,be,eagerly,initialized,to,determine,their,type,so,be,aware,that,passing,in,true,for,this,flag,will,initialize,factory,beans,and,factory,bean,references,return,the,names,of,beans,or,objects,created,by,factory,beans,matching,the,given,object,type,including,subclasses,or,an,empty,array,if,none,see,factory,bean,get,object,type,see,bean,factory,utils,bean,names,for,type,including,ancestors,listable,bean,factory,class,boolean,boolean;string,get,bean,names,for,type,class,type,boolean,include,non,singletons,boolean,allow,eager,init
ListableBeanFactory -> String[] getBeanNamesForType(Class<?> type, boolean includeNonSingletons, boolean allowEagerInit)_;1401909456;Return the names of beans matching the given type (including subclasses),_judging from either bean definitions or the value of {@code getObjectType}_in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans if the "allowEagerInit" flag is set,_which means that FactoryBeans will get initialized. If the object created by the_FactoryBean doesn't match, the raw FactoryBean itself will be matched against the_type. If "allowEagerInit" is not set, only raw FactoryBeans will be checked_(which doesn't require initialization of each FactoryBean)._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' {@code beanNamesForTypeIncludingAncestors}_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>Bean names returned by this method should always return bean names <i>in the_order of definition</i> in the backend configuration, as far as possible._@param type the class or interface to match, or {@code null} for all bean names_@param includeNonSingletons whether to include prototype or scoped beans too_or just singletons (also applies to FactoryBeans)_@param allowEagerInit whether to initialize <i>lazy-init singletons</i> and_<i>objects created by FactoryBeans</i> (or by factory methods with a_"factory-bean" reference) for the type check. Note that FactoryBeans need to be_eagerly initialized to determine their type: So be aware that passing in "true"_for this flag will initialize FactoryBeans and "factory-bean" references._@return the names of beans (or objects created by FactoryBeans) matching_the given object type (including subclasses), or an empty array if none_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beanNamesForTypeIncludingAncestors(ListableBeanFactory, Class, boolean, boolean);String[] getBeanNamesForType(Class<?> type, boolean includeNonSingletons, boolean allowEagerInit)_;return,the,names,of,beans,matching,the,given,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,if,the,allow,eager,init,flag,is,set,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,if,allow,eager,init,is,not,set,only,raw,factory,beans,will,be,checked,which,doesn,t,require,initialization,of,each,factory,bean,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,bean,names,for,type,including,ancestors,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,bean,names,returned,by,this,method,should,always,return,bean,names,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,for,all,bean,names,param,include,non,singletons,whether,to,include,prototype,or,scoped,beans,too,or,just,singletons,also,applies,to,factory,beans,param,allow,eager,init,whether,to,initialize,i,lazy,init,singletons,i,and,i,objects,created,by,factory,beans,i,or,by,factory,methods,with,a,factory,bean,reference,for,the,type,check,note,that,factory,beans,need,to,be,eagerly,initialized,to,determine,their,type,so,be,aware,that,passing,in,true,for,this,flag,will,initialize,factory,beans,and,factory,bean,references,return,the,names,of,beans,or,objects,created,by,factory,beans,matching,the,given,object,type,including,subclasses,or,an,empty,array,if,none,see,factory,bean,get,object,type,see,bean,factory,utils,bean,names,for,type,including,ancestors,listable,bean,factory,class,boolean,boolean;string,get,bean,names,for,type,class,type,boolean,include,non,singletons,boolean,allow,eager,init
ListableBeanFactory -> String[] getBeanNamesForType(Class<?> type, boolean includeNonSingletons, boolean allowEagerInit)_;1426716313;Return the names of beans matching the given type (including subclasses),_judging from either bean definitions or the value of {@code getObjectType}_in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans if the "allowEagerInit" flag is set,_which means that FactoryBeans will get initialized. If the object created by the_FactoryBean doesn't match, the raw FactoryBean itself will be matched against the_type. If "allowEagerInit" is not set, only raw FactoryBeans will be checked_(which doesn't require initialization of each FactoryBean)._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' {@code beanNamesForTypeIncludingAncestors}_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>Bean names returned by this method should always return bean names <i>in the_order of definition</i> in the backend configuration, as far as possible._@param type the class or interface to match, or {@code null} for all bean names_@param includeNonSingletons whether to include prototype or scoped beans too_or just singletons (also applies to FactoryBeans)_@param allowEagerInit whether to initialize <i>lazy-init singletons</i> and_<i>objects created by FactoryBeans</i> (or by factory methods with a_"factory-bean" reference) for the type check. Note that FactoryBeans need to be_eagerly initialized to determine their type: So be aware that passing in "true"_for this flag will initialize FactoryBeans and "factory-bean" references._@return the names of beans (or objects created by FactoryBeans) matching_the given object type (including subclasses), or an empty array if none_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beanNamesForTypeIncludingAncestors(ListableBeanFactory, Class, boolean, boolean);String[] getBeanNamesForType(Class<?> type, boolean includeNonSingletons, boolean allowEagerInit)_;return,the,names,of,beans,matching,the,given,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,if,the,allow,eager,init,flag,is,set,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,if,allow,eager,init,is,not,set,only,raw,factory,beans,will,be,checked,which,doesn,t,require,initialization,of,each,factory,bean,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,bean,names,for,type,including,ancestors,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,bean,names,returned,by,this,method,should,always,return,bean,names,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,for,all,bean,names,param,include,non,singletons,whether,to,include,prototype,or,scoped,beans,too,or,just,singletons,also,applies,to,factory,beans,param,allow,eager,init,whether,to,initialize,i,lazy,init,singletons,i,and,i,objects,created,by,factory,beans,i,or,by,factory,methods,with,a,factory,bean,reference,for,the,type,check,note,that,factory,beans,need,to,be,eagerly,initialized,to,determine,their,type,so,be,aware,that,passing,in,true,for,this,flag,will,initialize,factory,beans,and,factory,bean,references,return,the,names,of,beans,or,objects,created,by,factory,beans,matching,the,given,object,type,including,subclasses,or,an,empty,array,if,none,see,factory,bean,get,object,type,see,bean,factory,utils,bean,names,for,type,including,ancestors,listable,bean,factory,class,boolean,boolean;string,get,bean,names,for,type,class,type,boolean,include,non,singletons,boolean,allow,eager,init
ListableBeanFactory -> String[] getBeanNamesForType(Class<?> type, boolean includeNonSingletons, boolean allowEagerInit)_;1459774710;Return the names of beans matching the given type (including subclasses),_judging from either bean definitions or the value of {@code getObjectType}_in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans if the "allowEagerInit" flag is set,_which means that FactoryBeans will get initialized. If the object created by the_FactoryBean doesn't match, the raw FactoryBean itself will be matched against the_type. If "allowEagerInit" is not set, only raw FactoryBeans will be checked_(which doesn't require initialization of each FactoryBean)._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' {@code beanNamesForTypeIncludingAncestors}_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>Bean names returned by this method should always return bean names <i>in the_order of definition</i> in the backend configuration, as far as possible._@param type the class or interface to match, or {@code null} for all bean names_@param includeNonSingletons whether to include prototype or scoped beans too_or just singletons (also applies to FactoryBeans)_@param allowEagerInit whether to initialize <i>lazy-init singletons</i> and_<i>objects created by FactoryBeans</i> (or by factory methods with a_"factory-bean" reference) for the type check. Note that FactoryBeans need to be_eagerly initialized to determine their type: So be aware that passing in "true"_for this flag will initialize FactoryBeans and "factory-bean" references._@return the names of beans (or objects created by FactoryBeans) matching_the given object type (including subclasses), or an empty array if none_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beanNamesForTypeIncludingAncestors(ListableBeanFactory, Class, boolean, boolean);String[] getBeanNamesForType(Class<?> type, boolean includeNonSingletons, boolean allowEagerInit)_;return,the,names,of,beans,matching,the,given,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,if,the,allow,eager,init,flag,is,set,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,if,allow,eager,init,is,not,set,only,raw,factory,beans,will,be,checked,which,doesn,t,require,initialization,of,each,factory,bean,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,bean,names,for,type,including,ancestors,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,bean,names,returned,by,this,method,should,always,return,bean,names,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,for,all,bean,names,param,include,non,singletons,whether,to,include,prototype,or,scoped,beans,too,or,just,singletons,also,applies,to,factory,beans,param,allow,eager,init,whether,to,initialize,i,lazy,init,singletons,i,and,i,objects,created,by,factory,beans,i,or,by,factory,methods,with,a,factory,bean,reference,for,the,type,check,note,that,factory,beans,need,to,be,eagerly,initialized,to,determine,their,type,so,be,aware,that,passing,in,true,for,this,flag,will,initialize,factory,beans,and,factory,bean,references,return,the,names,of,beans,or,objects,created,by,factory,beans,matching,the,given,object,type,including,subclasses,or,an,empty,array,if,none,see,factory,bean,get,object,type,see,bean,factory,utils,bean,names,for,type,including,ancestors,listable,bean,factory,class,boolean,boolean;string,get,bean,names,for,type,class,type,boolean,include,non,singletons,boolean,allow,eager,init
ListableBeanFactory -> Map<String, Object> getBeansWithAnnotation(Class<? extends Annotation> annotationType) throws BeansException_;1384527851;Find all beans whose {@code Class} has the supplied {@link Annotation} type,_returning a Map of bean names with corresponding bean instances._@param annotationType the type of annotation to look for_@return a Map with the matching beans, containing the bean names as_keys and the corresponding bean instances as values_@throws BeansException if a bean could not be created_@since 3.0;Map<String, Object> getBeansWithAnnotation(Class<? extends Annotation> annotationType) throws BeansException_;find,all,beans,whose,code,class,has,the,supplied,link,annotation,type,returning,a,map,of,bean,names,with,corresponding,bean,instances,param,annotation,type,the,type,of,annotation,to,look,for,return,a,map,with,the,matching,beans,containing,the,bean,names,as,keys,and,the,corresponding,bean,instances,as,values,throws,beans,exception,if,a,bean,could,not,be,created,since,3,0;map,string,object,get,beans,with,annotation,class,extends,annotation,annotation,type,throws,beans,exception
ListableBeanFactory -> Map<String, Object> getBeansWithAnnotation(Class<? extends Annotation> annotationType) throws BeansException_;1384700387;Find all beans whose {@code Class} has the supplied {@link Annotation} type,_returning a Map of bean names with corresponding bean instances._@param annotationType the type of annotation to look for_@return a Map with the matching beans, containing the bean names as_keys and the corresponding bean instances as values_@throws BeansException if a bean could not be created_@since 3.0;Map<String, Object> getBeansWithAnnotation(Class<? extends Annotation> annotationType) throws BeansException_;find,all,beans,whose,code,class,has,the,supplied,link,annotation,type,returning,a,map,of,bean,names,with,corresponding,bean,instances,param,annotation,type,the,type,of,annotation,to,look,for,return,a,map,with,the,matching,beans,containing,the,bean,names,as,keys,and,the,corresponding,bean,instances,as,values,throws,beans,exception,if,a,bean,could,not,be,created,since,3,0;map,string,object,get,beans,with,annotation,class,extends,annotation,annotation,type,throws,beans,exception
ListableBeanFactory -> Map<String, Object> getBeansWithAnnotation(Class<? extends Annotation> annotationType) throws BeansException_;1401909456;Find all beans whose {@code Class} has the supplied {@link Annotation} type,_returning a Map of bean names with corresponding bean instances._@param annotationType the type of annotation to look for_@return a Map with the matching beans, containing the bean names as_keys and the corresponding bean instances as values_@throws BeansException if a bean could not be created_@since 3.0;Map<String, Object> getBeansWithAnnotation(Class<? extends Annotation> annotationType) throws BeansException_;find,all,beans,whose,code,class,has,the,supplied,link,annotation,type,returning,a,map,of,bean,names,with,corresponding,bean,instances,param,annotation,type,the,type,of,annotation,to,look,for,return,a,map,with,the,matching,beans,containing,the,bean,names,as,keys,and,the,corresponding,bean,instances,as,values,throws,beans,exception,if,a,bean,could,not,be,created,since,3,0;map,string,object,get,beans,with,annotation,class,extends,annotation,annotation,type,throws,beans,exception
ListableBeanFactory -> Map<String, Object> getBeansWithAnnotation(Class<? extends Annotation> annotationType) throws BeansException_;1426716313;Find all beans whose {@code Class} has the supplied {@link Annotation} type,_returning a Map of bean names with corresponding bean instances._@param annotationType the type of annotation to look for_@return a Map with the matching beans, containing the bean names as_keys and the corresponding bean instances as values_@throws BeansException if a bean could not be created_@since 3.0;Map<String, Object> getBeansWithAnnotation(Class<? extends Annotation> annotationType) throws BeansException_;find,all,beans,whose,code,class,has,the,supplied,link,annotation,type,returning,a,map,of,bean,names,with,corresponding,bean,instances,param,annotation,type,the,type,of,annotation,to,look,for,return,a,map,with,the,matching,beans,containing,the,bean,names,as,keys,and,the,corresponding,bean,instances,as,values,throws,beans,exception,if,a,bean,could,not,be,created,since,3,0;map,string,object,get,beans,with,annotation,class,extends,annotation,annotation,type,throws,beans,exception
ListableBeanFactory -> Map<String, Object> getBeansWithAnnotation(Class<? extends Annotation> annotationType) throws BeansException_;1459774710;Find all beans whose {@code Class} has the supplied {@link Annotation} type,_returning a Map of bean names with corresponding bean instances._@param annotationType the type of annotation to look for_@return a Map with the matching beans, containing the bean names as_keys and the corresponding bean instances as values_@throws BeansException if a bean could not be created_@since 3.0;Map<String, Object> getBeansWithAnnotation(Class<? extends Annotation> annotationType) throws BeansException_;find,all,beans,whose,code,class,has,the,supplied,link,annotation,type,returning,a,map,of,bean,names,with,corresponding,bean,instances,param,annotation,type,the,type,of,annotation,to,look,for,return,a,map,with,the,matching,beans,containing,the,bean,names,as,keys,and,the,corresponding,bean,instances,as,values,throws,beans,exception,if,a,bean,could,not,be,created,since,3,0;map,string,object,get,beans,with,annotation,class,extends,annotation,annotation,type,throws,beans,exception
ListableBeanFactory -> Map<String, Object> getBeansWithAnnotation(Class<? extends Annotation> annotationType) throws BeansException_;1495868221;Find all beans whose {@code Class} has the supplied {@link Annotation} type,_returning a Map of bean names with corresponding bean instances._@param annotationType the type of annotation to look for_@return a Map with the matching beans, containing the bean names as_keys and the corresponding bean instances as values_@throws BeansException if a bean could not be created_@since 3.0;Map<String, Object> getBeansWithAnnotation(Class<? extends Annotation> annotationType) throws BeansException_;find,all,beans,whose,code,class,has,the,supplied,link,annotation,type,returning,a,map,of,bean,names,with,corresponding,bean,instances,param,annotation,type,the,type,of,annotation,to,look,for,return,a,map,with,the,matching,beans,containing,the,bean,names,as,keys,and,the,corresponding,bean,instances,as,values,throws,beans,exception,if,a,bean,could,not,be,created,since,3,0;map,string,object,get,beans,with,annotation,class,extends,annotation,annotation,type,throws,beans,exception
ListableBeanFactory -> Map<String, Object> getBeansWithAnnotation(Class<? extends Annotation> annotationType) throws BeansException_;1496837955;Find all beans whose {@code Class} has the supplied {@link Annotation} type,_returning a Map of bean names with corresponding bean instances._@param annotationType the type of annotation to look for_@return a Map with the matching beans, containing the bean names as_keys and the corresponding bean instances as values_@throws BeansException if a bean could not be created_@since 3.0;Map<String, Object> getBeansWithAnnotation(Class<? extends Annotation> annotationType) throws BeansException_;find,all,beans,whose,code,class,has,the,supplied,link,annotation,type,returning,a,map,of,bean,names,with,corresponding,bean,instances,param,annotation,type,the,type,of,annotation,to,look,for,return,a,map,with,the,matching,beans,containing,the,bean,names,as,keys,and,the,corresponding,bean,instances,as,values,throws,beans,exception,if,a,bean,could,not,be,created,since,3,0;map,string,object,get,beans,with,annotation,class,extends,annotation,annotation,type,throws,beans,exception
ListableBeanFactory -> Map<String, Object> getBeansWithAnnotation(Class<? extends Annotation> annotationType) throws BeansException_;1539878644;Find all beans whose {@code Class} has the supplied {@link Annotation} type,_returning a Map of bean names with corresponding bean instances._<p>Note that this method considers objects created by FactoryBeans, which means_that FactoryBeans will get initialized in order to determine their object type._@param annotationType the type of annotation to look for_@return a Map with the matching beans, containing the bean names as_keys and the corresponding bean instances as values_@throws BeansException if a bean could not be created_@since 3.0;Map<String, Object> getBeansWithAnnotation(Class<? extends Annotation> annotationType) throws BeansException_;find,all,beans,whose,code,class,has,the,supplied,link,annotation,type,returning,a,map,of,bean,names,with,corresponding,bean,instances,p,note,that,this,method,considers,objects,created,by,factory,beans,which,means,that,factory,beans,will,get,initialized,in,order,to,determine,their,object,type,param,annotation,type,the,type,of,annotation,to,look,for,return,a,map,with,the,matching,beans,containing,the,bean,names,as,keys,and,the,corresponding,bean,instances,as,values,throws,beans,exception,if,a,bean,could,not,be,created,since,3,0;map,string,object,get,beans,with,annotation,class,extends,annotation,annotation,type,throws,beans,exception
ListableBeanFactory -> String[] getBeanNamesForType(ResolvableType type)_;1426716313;Return the names of beans matching the given type (including subclasses),_judging from either bean definitions or the value of {@code getObjectType}_in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans, which means that FactoryBeans_will get initialized. If the object created by the FactoryBean doesn't match,_the raw FactoryBean itself will be matched against the type._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' {@code beanNamesForTypeIncludingAncestors}_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>This version of {@code getBeanNamesForType} matches all kinds of beans,_be it singletons, prototypes, or FactoryBeans. In most implementations, the_result will be the same as for {@code getBeanNamesForType(type, true, true)}._<p>Bean names returned by this method should always return bean names <i>in the_order of definition</i> in the backend configuration, as far as possible._@param type the class or interface to match, or {@code null} for all bean names_@return the names of beans (or objects created by FactoryBeans) matching_the given object type (including subclasses), or an empty array if none_@since 4.2_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beanNamesForTypeIncludingAncestors(ListableBeanFactory, ResolvableType);String[] getBeanNamesForType(ResolvableType type)_;return,the,names,of,beans,matching,the,given,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,bean,names,for,type,including,ancestors,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,this,version,of,code,get,bean,names,for,type,matches,all,kinds,of,beans,be,it,singletons,prototypes,or,factory,beans,in,most,implementations,the,result,will,be,the,same,as,for,code,get,bean,names,for,type,type,true,true,p,bean,names,returned,by,this,method,should,always,return,bean,names,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,for,all,bean,names,return,the,names,of,beans,or,objects,created,by,factory,beans,matching,the,given,object,type,including,subclasses,or,an,empty,array,if,none,since,4,2,see,factory,bean,get,object,type,see,bean,factory,utils,bean,names,for,type,including,ancestors,listable,bean,factory,resolvable,type;string,get,bean,names,for,type,resolvable,type,type
ListableBeanFactory -> String[] getBeanNamesForType(ResolvableType type)_;1459774710;Return the names of beans matching the given type (including subclasses),_judging from either bean definitions or the value of {@code getObjectType}_in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans, which means that FactoryBeans_will get initialized. If the object created by the FactoryBean doesn't match,_the raw FactoryBean itself will be matched against the type._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' {@code beanNamesForTypeIncludingAncestors}_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>This version of {@code getBeanNamesForType} matches all kinds of beans,_be it singletons, prototypes, or FactoryBeans. In most implementations, the_result will be the same as for {@code getBeanNamesForType(type, true, true)}._<p>Bean names returned by this method should always return bean names <i>in the_order of definition</i> in the backend configuration, as far as possible._@param type the class or interface to match, or {@code null} for all bean names_@return the names of beans (or objects created by FactoryBeans) matching_the given object type (including subclasses), or an empty array if none_@since 4.2_@see #isTypeMatch(String, ResolvableType)_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beanNamesForTypeIncludingAncestors(ListableBeanFactory, ResolvableType);String[] getBeanNamesForType(ResolvableType type)_;return,the,names,of,beans,matching,the,given,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,bean,names,for,type,including,ancestors,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,this,version,of,code,get,bean,names,for,type,matches,all,kinds,of,beans,be,it,singletons,prototypes,or,factory,beans,in,most,implementations,the,result,will,be,the,same,as,for,code,get,bean,names,for,type,type,true,true,p,bean,names,returned,by,this,method,should,always,return,bean,names,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,for,all,bean,names,return,the,names,of,beans,or,objects,created,by,factory,beans,matching,the,given,object,type,including,subclasses,or,an,empty,array,if,none,since,4,2,see,is,type,match,string,resolvable,type,see,factory,bean,get,object,type,see,bean,factory,utils,bean,names,for,type,including,ancestors,listable,bean,factory,resolvable,type;string,get,bean,names,for,type,resolvable,type,type
ListableBeanFactory -> String[] getBeanNamesForType(ResolvableType type)_;1496837955;Return the names of beans matching the given type (including subclasses),_judging from either bean definitions or the value of {@code getObjectType}_in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans, which means that FactoryBeans_will get initialized. If the object created by the FactoryBean doesn't match,_the raw FactoryBean itself will be matched against the type._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' {@code beanNamesForTypeIncludingAncestors}_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>This version of {@code getBeanNamesForType} matches all kinds of beans,_be it singletons, prototypes, or FactoryBeans. In most implementations, the_result will be the same as for {@code getBeanNamesForType(type, true, true)}._<p>Bean names returned by this method should always return bean names <i>in the_order of definition</i> in the backend configuration, as far as possible._@param type the generically typed class or interface to match_@return the names of beans (or objects created by FactoryBeans) matching_the given object type (including subclasses), or an empty array if none_@since 4.2_@see #isTypeMatch(String, ResolvableType)_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beanNamesForTypeIncludingAncestors(ListableBeanFactory, ResolvableType);String[] getBeanNamesForType(ResolvableType type)_;return,the,names,of,beans,matching,the,given,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,bean,names,for,type,including,ancestors,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,this,version,of,code,get,bean,names,for,type,matches,all,kinds,of,beans,be,it,singletons,prototypes,or,factory,beans,in,most,implementations,the,result,will,be,the,same,as,for,code,get,bean,names,for,type,type,true,true,p,bean,names,returned,by,this,method,should,always,return,bean,names,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,generically,typed,class,or,interface,to,match,return,the,names,of,beans,or,objects,created,by,factory,beans,matching,the,given,object,type,including,subclasses,or,an,empty,array,if,none,since,4,2,see,is,type,match,string,resolvable,type,see,factory,bean,get,object,type,see,bean,factory,utils,bean,names,for,type,including,ancestors,listable,bean,factory,resolvable,type;string,get,bean,names,for,type,resolvable,type,type
ListableBeanFactory -> String[] getBeanNamesForType(ResolvableType type)_;1539878644;Return the names of beans matching the given type (including subclasses),_judging from either bean definitions or the value of {@code getObjectType}_in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans, which means that FactoryBeans_will get initialized. If the object created by the FactoryBean doesn't match,_the raw FactoryBean itself will be matched against the type._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' {@code beanNamesForTypeIncludingAncestors}_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>This version of {@code getBeanNamesForType} matches all kinds of beans,_be it singletons, prototypes, or FactoryBeans. In most implementations, the_result will be the same as for {@code getBeanNamesForType(type, true, true)}._<p>Bean names returned by this method should always return bean names <i>in the_order of definition</i> in the backend configuration, as far as possible._@param type the generically typed class or interface to match_@return the names of beans (or objects created by FactoryBeans) matching_the given object type (including subclasses), or an empty array if none_@since 4.2_@see #isTypeMatch(String, ResolvableType)_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beanNamesForTypeIncludingAncestors(ListableBeanFactory, ResolvableType);String[] getBeanNamesForType(ResolvableType type)_;return,the,names,of,beans,matching,the,given,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,bean,names,for,type,including,ancestors,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,this,version,of,code,get,bean,names,for,type,matches,all,kinds,of,beans,be,it,singletons,prototypes,or,factory,beans,in,most,implementations,the,result,will,be,the,same,as,for,code,get,bean,names,for,type,type,true,true,p,bean,names,returned,by,this,method,should,always,return,bean,names,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,generically,typed,class,or,interface,to,match,return,the,names,of,beans,or,objects,created,by,factory,beans,matching,the,given,object,type,including,subclasses,or,an,empty,array,if,none,since,4,2,see,is,type,match,string,resolvable,type,see,factory,bean,get,object,type,see,bean,factory,utils,bean,names,for,type,including,ancestors,listable,bean,factory,resolvable,type;string,get,bean,names,for,type,resolvable,type,type
ListableBeanFactory -> <T> Map<String, T> getBeansOfType(Class<T> type) throws BeansException_;1328020251;Return the bean instances that match the given object type (including_subclasses), judging from either bean definitions or the value of_<code>getObjectType</code> in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans, which means that FactoryBeans_will get initialized. If the object created by the FactoryBean doesn't match,_the raw FactoryBean itself will be matched against the type._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' <code>beansOfTypeIncludingAncestors</code>_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>This version of getBeansOfType matches all kinds of beans, be it_singletons, prototypes, or FactoryBeans. In most implementations, the_result will be the same as for <code>getBeansOfType(type, true, true)</code>._<p>The Map returned by this method should always return bean names and_corresponding bean instances <i>in the order of definition</i> in the_backend configuration, as far as possible._@param type the class or interface to match, or <code>null</code> for all concrete beans_@return a Map with the matching beans, containing the bean names as_keys and the corresponding bean instances as values_@throws BeansException if a bean could not be created_@since 1.1.2_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beansOfTypeIncludingAncestors(ListableBeanFactory, Class);<T> Map<String, T> getBeansOfType(Class<T> type) throws BeansException_;return,the,bean,instances,that,match,the,given,object,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,code,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,beans,of,type,including,ancestors,code,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,this,version,of,get,beans,of,type,matches,all,kinds,of,beans,be,it,singletons,prototypes,or,factory,beans,in,most,implementations,the,result,will,be,the,same,as,for,code,get,beans,of,type,type,true,true,code,p,the,map,returned,by,this,method,should,always,return,bean,names,and,corresponding,bean,instances,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,code,for,all,concrete,beans,return,a,map,with,the,matching,beans,containing,the,bean,names,as,keys,and,the,corresponding,bean,instances,as,values,throws,beans,exception,if,a,bean,could,not,be,created,since,1,1,2,see,factory,bean,get,object,type,see,bean,factory,utils,beans,of,type,including,ancestors,listable,bean,factory,class;t,map,string,t,get,beans,of,type,class,t,type,throws,beans,exception
ListableBeanFactory -> <T> Map<String, T> getBeansOfType(Class<T> type) throws BeansException_;1356735495;Return the bean instances that match the given object type (including_subclasses), judging from either bean definitions or the value of_{@code getObjectType} in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans, which means that FactoryBeans_will get initialized. If the object created by the FactoryBean doesn't match,_the raw FactoryBean itself will be matched against the type._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' {@code beansOfTypeIncludingAncestors}_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>This version of getBeansOfType matches all kinds of beans, be it_singletons, prototypes, or FactoryBeans. In most implementations, the_result will be the same as for {@code getBeansOfType(type, true, true)}._<p>The Map returned by this method should always return bean names and_corresponding bean instances <i>in the order of definition</i> in the_backend configuration, as far as possible._@param type the class or interface to match, or {@code null} for all concrete beans_@return a Map with the matching beans, containing the bean names as_keys and the corresponding bean instances as values_@throws BeansException if a bean could not be created_@since 1.1.2_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beansOfTypeIncludingAncestors(ListableBeanFactory, Class);<T> Map<String, T> getBeansOfType(Class<T> type) throws BeansException_;return,the,bean,instances,that,match,the,given,object,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,beans,of,type,including,ancestors,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,this,version,of,get,beans,of,type,matches,all,kinds,of,beans,be,it,singletons,prototypes,or,factory,beans,in,most,implementations,the,result,will,be,the,same,as,for,code,get,beans,of,type,type,true,true,p,the,map,returned,by,this,method,should,always,return,bean,names,and,corresponding,bean,instances,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,for,all,concrete,beans,return,a,map,with,the,matching,beans,containing,the,bean,names,as,keys,and,the,corresponding,bean,instances,as,values,throws,beans,exception,if,a,bean,could,not,be,created,since,1,1,2,see,factory,bean,get,object,type,see,bean,factory,utils,beans,of,type,including,ancestors,listable,bean,factory,class;t,map,string,t,get,beans,of,type,class,t,type,throws,beans,exception
ListableBeanFactory -> <T> Map<String, T> getBeansOfType(Class<T> type) throws BeansException_;1384527851;Return the bean instances that match the given object type (including_subclasses), judging from either bean definitions or the value of_{@code getObjectType} in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans, which means that FactoryBeans_will get initialized. If the object created by the FactoryBean doesn't match,_the raw FactoryBean itself will be matched against the type._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' {@code beansOfTypeIncludingAncestors}_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>This version of getBeansOfType matches all kinds of beans, be it_singletons, prototypes, or FactoryBeans. In most implementations, the_result will be the same as for {@code getBeansOfType(type, true, true)}._<p>The Map returned by this method should always return bean names and_corresponding bean instances <i>in the order of definition</i> in the_backend configuration, as far as possible._@param type the class or interface to match, or {@code null} for all concrete beans_@return a Map with the matching beans, containing the bean names as_keys and the corresponding bean instances as values_@throws BeansException if a bean could not be created_@since 1.1.2_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beansOfTypeIncludingAncestors(ListableBeanFactory, Class);<T> Map<String, T> getBeansOfType(Class<T> type) throws BeansException_;return,the,bean,instances,that,match,the,given,object,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,beans,of,type,including,ancestors,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,this,version,of,get,beans,of,type,matches,all,kinds,of,beans,be,it,singletons,prototypes,or,factory,beans,in,most,implementations,the,result,will,be,the,same,as,for,code,get,beans,of,type,type,true,true,p,the,map,returned,by,this,method,should,always,return,bean,names,and,corresponding,bean,instances,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,for,all,concrete,beans,return,a,map,with,the,matching,beans,containing,the,bean,names,as,keys,and,the,corresponding,bean,instances,as,values,throws,beans,exception,if,a,bean,could,not,be,created,since,1,1,2,see,factory,bean,get,object,type,see,bean,factory,utils,beans,of,type,including,ancestors,listable,bean,factory,class;t,map,string,t,get,beans,of,type,class,t,type,throws,beans,exception
ListableBeanFactory -> <T> Map<String, T> getBeansOfType(Class<T> type) throws BeansException_;1384700387;Return the bean instances that match the given object type (including_subclasses), judging from either bean definitions or the value of_{@code getObjectType} in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans, which means that FactoryBeans_will get initialized. If the object created by the FactoryBean doesn't match,_the raw FactoryBean itself will be matched against the type._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' {@code beansOfTypeIncludingAncestors}_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>This version of getBeansOfType matches all kinds of beans, be it_singletons, prototypes, or FactoryBeans. In most implementations, the_result will be the same as for {@code getBeansOfType(type, true, true)}._<p>The Map returned by this method should always return bean names and_corresponding bean instances <i>in the order of definition</i> in the_backend configuration, as far as possible._@param type the class or interface to match, or {@code null} for all concrete beans_@return a Map with the matching beans, containing the bean names as_keys and the corresponding bean instances as values_@throws BeansException if a bean could not be created_@since 1.1.2_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beansOfTypeIncludingAncestors(ListableBeanFactory, Class);<T> Map<String, T> getBeansOfType(Class<T> type) throws BeansException_;return,the,bean,instances,that,match,the,given,object,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,beans,of,type,including,ancestors,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,this,version,of,get,beans,of,type,matches,all,kinds,of,beans,be,it,singletons,prototypes,or,factory,beans,in,most,implementations,the,result,will,be,the,same,as,for,code,get,beans,of,type,type,true,true,p,the,map,returned,by,this,method,should,always,return,bean,names,and,corresponding,bean,instances,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,for,all,concrete,beans,return,a,map,with,the,matching,beans,containing,the,bean,names,as,keys,and,the,corresponding,bean,instances,as,values,throws,beans,exception,if,a,bean,could,not,be,created,since,1,1,2,see,factory,bean,get,object,type,see,bean,factory,utils,beans,of,type,including,ancestors,listable,bean,factory,class;t,map,string,t,get,beans,of,type,class,t,type,throws,beans,exception
ListableBeanFactory -> <T> Map<String, T> getBeansOfType(Class<T> type) throws BeansException_;1401909456;Return the bean instances that match the given object type (including_subclasses), judging from either bean definitions or the value of_{@code getObjectType} in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans, which means that FactoryBeans_will get initialized. If the object created by the FactoryBean doesn't match,_the raw FactoryBean itself will be matched against the type._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' {@code beansOfTypeIncludingAncestors}_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>This version of getBeansOfType matches all kinds of beans, be it_singletons, prototypes, or FactoryBeans. In most implementations, the_result will be the same as for {@code getBeansOfType(type, true, true)}._<p>The Map returned by this method should always return bean names and_corresponding bean instances <i>in the order of definition</i> in the_backend configuration, as far as possible._@param type the class or interface to match, or {@code null} for all concrete beans_@return a Map with the matching beans, containing the bean names as_keys and the corresponding bean instances as values_@throws BeansException if a bean could not be created_@since 1.1.2_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beansOfTypeIncludingAncestors(ListableBeanFactory, Class);<T> Map<String, T> getBeansOfType(Class<T> type) throws BeansException_;return,the,bean,instances,that,match,the,given,object,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,beans,of,type,including,ancestors,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,this,version,of,get,beans,of,type,matches,all,kinds,of,beans,be,it,singletons,prototypes,or,factory,beans,in,most,implementations,the,result,will,be,the,same,as,for,code,get,beans,of,type,type,true,true,p,the,map,returned,by,this,method,should,always,return,bean,names,and,corresponding,bean,instances,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,for,all,concrete,beans,return,a,map,with,the,matching,beans,containing,the,bean,names,as,keys,and,the,corresponding,bean,instances,as,values,throws,beans,exception,if,a,bean,could,not,be,created,since,1,1,2,see,factory,bean,get,object,type,see,bean,factory,utils,beans,of,type,including,ancestors,listable,bean,factory,class;t,map,string,t,get,beans,of,type,class,t,type,throws,beans,exception
ListableBeanFactory -> <T> Map<String, T> getBeansOfType(Class<T> type) throws BeansException_;1426716313;Return the bean instances that match the given object type (including_subclasses), judging from either bean definitions or the value of_{@code getObjectType} in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans, which means that FactoryBeans_will get initialized. If the object created by the FactoryBean doesn't match,_the raw FactoryBean itself will be matched against the type._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' {@code beansOfTypeIncludingAncestors}_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>This version of getBeansOfType matches all kinds of beans, be it_singletons, prototypes, or FactoryBeans. In most implementations, the_result will be the same as for {@code getBeansOfType(type, true, true)}._<p>The Map returned by this method should always return bean names and_corresponding bean instances <i>in the order of definition</i> in the_backend configuration, as far as possible._@param type the class or interface to match, or {@code null} for all concrete beans_@return a Map with the matching beans, containing the bean names as_keys and the corresponding bean instances as values_@throws BeansException if a bean could not be created_@since 1.1.2_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beansOfTypeIncludingAncestors(ListableBeanFactory, Class);<T> Map<String, T> getBeansOfType(Class<T> type) throws BeansException_;return,the,bean,instances,that,match,the,given,object,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,beans,of,type,including,ancestors,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,this,version,of,get,beans,of,type,matches,all,kinds,of,beans,be,it,singletons,prototypes,or,factory,beans,in,most,implementations,the,result,will,be,the,same,as,for,code,get,beans,of,type,type,true,true,p,the,map,returned,by,this,method,should,always,return,bean,names,and,corresponding,bean,instances,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,for,all,concrete,beans,return,a,map,with,the,matching,beans,containing,the,bean,names,as,keys,and,the,corresponding,bean,instances,as,values,throws,beans,exception,if,a,bean,could,not,be,created,since,1,1,2,see,factory,bean,get,object,type,see,bean,factory,utils,beans,of,type,including,ancestors,listable,bean,factory,class;t,map,string,t,get,beans,of,type,class,t,type,throws,beans,exception
ListableBeanFactory -> <T> Map<String, T> getBeansOfType(Class<T> type) throws BeansException_;1459774710;Return the bean instances that match the given object type (including_subclasses), judging from either bean definitions or the value of_{@code getObjectType} in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans, which means that FactoryBeans_will get initialized. If the object created by the FactoryBean doesn't match,_the raw FactoryBean itself will be matched against the type._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' {@code beansOfTypeIncludingAncestors}_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>This version of getBeansOfType matches all kinds of beans, be it_singletons, prototypes, or FactoryBeans. In most implementations, the_result will be the same as for {@code getBeansOfType(type, true, true)}._<p>The Map returned by this method should always return bean names and_corresponding bean instances <i>in the order of definition</i> in the_backend configuration, as far as possible._@param type the class or interface to match, or {@code null} for all concrete beans_@return a Map with the matching beans, containing the bean names as_keys and the corresponding bean instances as values_@throws BeansException if a bean could not be created_@since 1.1.2_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beansOfTypeIncludingAncestors(ListableBeanFactory, Class);<T> Map<String, T> getBeansOfType(Class<T> type) throws BeansException_;return,the,bean,instances,that,match,the,given,object,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,beans,of,type,including,ancestors,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,this,version,of,get,beans,of,type,matches,all,kinds,of,beans,be,it,singletons,prototypes,or,factory,beans,in,most,implementations,the,result,will,be,the,same,as,for,code,get,beans,of,type,type,true,true,p,the,map,returned,by,this,method,should,always,return,bean,names,and,corresponding,bean,instances,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,for,all,concrete,beans,return,a,map,with,the,matching,beans,containing,the,bean,names,as,keys,and,the,corresponding,bean,instances,as,values,throws,beans,exception,if,a,bean,could,not,be,created,since,1,1,2,see,factory,bean,get,object,type,see,bean,factory,utils,beans,of,type,including,ancestors,listable,bean,factory,class;t,map,string,t,get,beans,of,type,class,t,type,throws,beans,exception
ListableBeanFactory -> Map<String, Object> getBeansWithAnnotation(Class<? extends Annotation> annotationType) 			throws BeansException_;1328020251;Find all beans whose <code>Class</code> has the supplied {@link java.lang.annotation.Annotation} type._@param annotationType the type of annotation to look for_@return a Map with the matching beans, containing the bean names as_keys and the corresponding bean instances as values_@throws BeansException if a bean could not be created;Map<String, Object> getBeansWithAnnotation(Class<? extends Annotation> annotationType)_			throws BeansException_;find,all,beans,whose,code,class,code,has,the,supplied,link,java,lang,annotation,annotation,type,param,annotation,type,the,type,of,annotation,to,look,for,return,a,map,with,the,matching,beans,containing,the,bean,names,as,keys,and,the,corresponding,bean,instances,as,values,throws,beans,exception,if,a,bean,could,not,be,created;map,string,object,get,beans,with,annotation,class,extends,annotation,annotation,type,throws,beans,exception
ListableBeanFactory -> Map<String, Object> getBeansWithAnnotation(Class<? extends Annotation> annotationType) 			throws BeansException_;1356735495;Find all beans whose {@code Class} has the supplied {@link java.lang.annotation.Annotation} type._@param annotationType the type of annotation to look for_@return a Map with the matching beans, containing the bean names as_keys and the corresponding bean instances as values_@throws BeansException if a bean could not be created;Map<String, Object> getBeansWithAnnotation(Class<? extends Annotation> annotationType)_			throws BeansException_;find,all,beans,whose,code,class,has,the,supplied,link,java,lang,annotation,annotation,type,param,annotation,type,the,type,of,annotation,to,look,for,return,a,map,with,the,matching,beans,containing,the,bean,names,as,keys,and,the,corresponding,bean,instances,as,values,throws,beans,exception,if,a,bean,could,not,be,created;map,string,object,get,beans,with,annotation,class,extends,annotation,annotation,type,throws,beans,exception
ListableBeanFactory -> String[] getBeanNamesForType(@Nullable Class<?> type)_;1495868221;Return the names of beans matching the given type (including subclasses),_judging from either bean definitions or the value of {@code getObjectType}_in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans, which means that FactoryBeans_will get initialized. If the object created by the FactoryBean doesn't match,_the raw FactoryBean itself will be matched against the type._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' {@code beanNamesForTypeIncludingAncestors}_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>This version of {@code getBeanNamesForType} matches all kinds of beans,_be it singletons, prototypes, or FactoryBeans. In most implementations, the_result will be the same as for {@code getBeanNamesForType(type, true, true)}._<p>Bean names returned by this method should always return bean names <i>in the_order of definition</i> in the backend configuration, as far as possible._@param type the class or interface to match, or {@code null} for all bean names_@return the names of beans (or objects created by FactoryBeans) matching_the given object type (including subclasses), or an empty array if none_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beanNamesForTypeIncludingAncestors(ListableBeanFactory, Class);String[] getBeanNamesForType(@Nullable Class<?> type)_;return,the,names,of,beans,matching,the,given,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,bean,names,for,type,including,ancestors,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,this,version,of,code,get,bean,names,for,type,matches,all,kinds,of,beans,be,it,singletons,prototypes,or,factory,beans,in,most,implementations,the,result,will,be,the,same,as,for,code,get,bean,names,for,type,type,true,true,p,bean,names,returned,by,this,method,should,always,return,bean,names,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,for,all,bean,names,return,the,names,of,beans,or,objects,created,by,factory,beans,matching,the,given,object,type,including,subclasses,or,an,empty,array,if,none,see,factory,bean,get,object,type,see,bean,factory,utils,bean,names,for,type,including,ancestors,listable,bean,factory,class;string,get,bean,names,for,type,nullable,class,type
ListableBeanFactory -> String[] getBeanNamesForType(@Nullable Class<?> type)_;1496837955;Return the names of beans matching the given type (including subclasses),_judging from either bean definitions or the value of {@code getObjectType}_in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans, which means that FactoryBeans_will get initialized. If the object created by the FactoryBean doesn't match,_the raw FactoryBean itself will be matched against the type._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' {@code beanNamesForTypeIncludingAncestors}_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>This version of {@code getBeanNamesForType} matches all kinds of beans,_be it singletons, prototypes, or FactoryBeans. In most implementations, the_result will be the same as for {@code getBeanNamesForType(type, true, true)}._<p>Bean names returned by this method should always return bean names <i>in the_order of definition</i> in the backend configuration, as far as possible._@param type the class or interface to match, or {@code null} for all bean names_@return the names of beans (or objects created by FactoryBeans) matching_the given object type (including subclasses), or an empty array if none_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beanNamesForTypeIncludingAncestors(ListableBeanFactory, Class);String[] getBeanNamesForType(@Nullable Class<?> type)_;return,the,names,of,beans,matching,the,given,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,bean,names,for,type,including,ancestors,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,this,version,of,code,get,bean,names,for,type,matches,all,kinds,of,beans,be,it,singletons,prototypes,or,factory,beans,in,most,implementations,the,result,will,be,the,same,as,for,code,get,bean,names,for,type,type,true,true,p,bean,names,returned,by,this,method,should,always,return,bean,names,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,for,all,bean,names,return,the,names,of,beans,or,objects,created,by,factory,beans,matching,the,given,object,type,including,subclasses,or,an,empty,array,if,none,see,factory,bean,get,object,type,see,bean,factory,utils,bean,names,for,type,including,ancestors,listable,bean,factory,class;string,get,bean,names,for,type,nullable,class,type
ListableBeanFactory -> String[] getBeanNamesForType(@Nullable Class<?> type)_;1539878644;Return the names of beans matching the given type (including subclasses),_judging from either bean definitions or the value of {@code getObjectType}_in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans, which means that FactoryBeans_will get initialized. If the object created by the FactoryBean doesn't match,_the raw FactoryBean itself will be matched against the type._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' {@code beanNamesForTypeIncludingAncestors}_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>This version of {@code getBeanNamesForType} matches all kinds of beans,_be it singletons, prototypes, or FactoryBeans. In most implementations, the_result will be the same as for {@code getBeanNamesForType(type, true, true)}._<p>Bean names returned by this method should always return bean names <i>in the_order of definition</i> in the backend configuration, as far as possible._@param type the class or interface to match, or {@code null} for all bean names_@return the names of beans (or objects created by FactoryBeans) matching_the given object type (including subclasses), or an empty array if none_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beanNamesForTypeIncludingAncestors(ListableBeanFactory, Class);String[] getBeanNamesForType(@Nullable Class<?> type)_;return,the,names,of,beans,matching,the,given,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,bean,names,for,type,including,ancestors,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,this,version,of,code,get,bean,names,for,type,matches,all,kinds,of,beans,be,it,singletons,prototypes,or,factory,beans,in,most,implementations,the,result,will,be,the,same,as,for,code,get,bean,names,for,type,type,true,true,p,bean,names,returned,by,this,method,should,always,return,bean,names,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,for,all,bean,names,return,the,names,of,beans,or,objects,created,by,factory,beans,matching,the,given,object,type,including,subclasses,or,an,empty,array,if,none,see,factory,bean,get,object,type,see,bean,factory,utils,bean,names,for,type,including,ancestors,listable,bean,factory,class;string,get,bean,names,for,type,nullable,class,type
ListableBeanFactory -> boolean containsBeanDefinition(String beanName)_;1328020251;Check if this bean factory contains a bean definition with the given name._<p>Does not consider any hierarchy this factory may participate in,_and ignores any singleton beans that have been registered by_other means than bean definitions._@param beanName the name of the bean to look for_@return if this bean factory contains a bean definition with the given name_@see #containsBean;boolean containsBeanDefinition(String beanName)_;check,if,this,bean,factory,contains,a,bean,definition,with,the,given,name,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,and,ignores,any,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,param,bean,name,the,name,of,the,bean,to,look,for,return,if,this,bean,factory,contains,a,bean,definition,with,the,given,name,see,contains,bean;boolean,contains,bean,definition,string,bean,name
ListableBeanFactory -> boolean containsBeanDefinition(String beanName)_;1356735495;Check if this bean factory contains a bean definition with the given name._<p>Does not consider any hierarchy this factory may participate in,_and ignores any singleton beans that have been registered by_other means than bean definitions._@param beanName the name of the bean to look for_@return if this bean factory contains a bean definition with the given name_@see #containsBean;boolean containsBeanDefinition(String beanName)_;check,if,this,bean,factory,contains,a,bean,definition,with,the,given,name,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,and,ignores,any,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,param,bean,name,the,name,of,the,bean,to,look,for,return,if,this,bean,factory,contains,a,bean,definition,with,the,given,name,see,contains,bean;boolean,contains,bean,definition,string,bean,name
ListableBeanFactory -> boolean containsBeanDefinition(String beanName)_;1384527851;Check if this bean factory contains a bean definition with the given name._<p>Does not consider any hierarchy this factory may participate in,_and ignores any singleton beans that have been registered by_other means than bean definitions._@param beanName the name of the bean to look for_@return if this bean factory contains a bean definition with the given name_@see #containsBean;boolean containsBeanDefinition(String beanName)_;check,if,this,bean,factory,contains,a,bean,definition,with,the,given,name,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,and,ignores,any,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,param,bean,name,the,name,of,the,bean,to,look,for,return,if,this,bean,factory,contains,a,bean,definition,with,the,given,name,see,contains,bean;boolean,contains,bean,definition,string,bean,name
ListableBeanFactory -> boolean containsBeanDefinition(String beanName)_;1384700387;Check if this bean factory contains a bean definition with the given name._<p>Does not consider any hierarchy this factory may participate in,_and ignores any singleton beans that have been registered by_other means than bean definitions._@param beanName the name of the bean to look for_@return if this bean factory contains a bean definition with the given name_@see #containsBean;boolean containsBeanDefinition(String beanName)_;check,if,this,bean,factory,contains,a,bean,definition,with,the,given,name,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,and,ignores,any,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,param,bean,name,the,name,of,the,bean,to,look,for,return,if,this,bean,factory,contains,a,bean,definition,with,the,given,name,see,contains,bean;boolean,contains,bean,definition,string,bean,name
ListableBeanFactory -> boolean containsBeanDefinition(String beanName)_;1401909456;Check if this bean factory contains a bean definition with the given name._<p>Does not consider any hierarchy this factory may participate in,_and ignores any singleton beans that have been registered by_other means than bean definitions._@param beanName the name of the bean to look for_@return if this bean factory contains a bean definition with the given name_@see #containsBean;boolean containsBeanDefinition(String beanName)_;check,if,this,bean,factory,contains,a,bean,definition,with,the,given,name,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,and,ignores,any,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,param,bean,name,the,name,of,the,bean,to,look,for,return,if,this,bean,factory,contains,a,bean,definition,with,the,given,name,see,contains,bean;boolean,contains,bean,definition,string,bean,name
ListableBeanFactory -> boolean containsBeanDefinition(String beanName)_;1426716313;Check if this bean factory contains a bean definition with the given name._<p>Does not consider any hierarchy this factory may participate in,_and ignores any singleton beans that have been registered by_other means than bean definitions._@param beanName the name of the bean to look for_@return if this bean factory contains a bean definition with the given name_@see #containsBean;boolean containsBeanDefinition(String beanName)_;check,if,this,bean,factory,contains,a,bean,definition,with,the,given,name,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,and,ignores,any,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,param,bean,name,the,name,of,the,bean,to,look,for,return,if,this,bean,factory,contains,a,bean,definition,with,the,given,name,see,contains,bean;boolean,contains,bean,definition,string,bean,name
ListableBeanFactory -> boolean containsBeanDefinition(String beanName)_;1459774710;Check if this bean factory contains a bean definition with the given name._<p>Does not consider any hierarchy this factory may participate in,_and ignores any singleton beans that have been registered by_other means than bean definitions._@param beanName the name of the bean to look for_@return if this bean factory contains a bean definition with the given name_@see #containsBean;boolean containsBeanDefinition(String beanName)_;check,if,this,bean,factory,contains,a,bean,definition,with,the,given,name,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,and,ignores,any,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,param,bean,name,the,name,of,the,bean,to,look,for,return,if,this,bean,factory,contains,a,bean,definition,with,the,given,name,see,contains,bean;boolean,contains,bean,definition,string,bean,name
ListableBeanFactory -> boolean containsBeanDefinition(String beanName)_;1495868221;Check if this bean factory contains a bean definition with the given name._<p>Does not consider any hierarchy this factory may participate in,_and ignores any singleton beans that have been registered by_other means than bean definitions._@param beanName the name of the bean to look for_@return if this bean factory contains a bean definition with the given name_@see #containsBean;boolean containsBeanDefinition(String beanName)_;check,if,this,bean,factory,contains,a,bean,definition,with,the,given,name,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,and,ignores,any,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,param,bean,name,the,name,of,the,bean,to,look,for,return,if,this,bean,factory,contains,a,bean,definition,with,the,given,name,see,contains,bean;boolean,contains,bean,definition,string,bean,name
ListableBeanFactory -> boolean containsBeanDefinition(String beanName)_;1496837955;Check if this bean factory contains a bean definition with the given name._<p>Does not consider any hierarchy this factory may participate in,_and ignores any singleton beans that have been registered by_other means than bean definitions._@param beanName the name of the bean to look for_@return if this bean factory contains a bean definition with the given name_@see #containsBean;boolean containsBeanDefinition(String beanName)_;check,if,this,bean,factory,contains,a,bean,definition,with,the,given,name,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,and,ignores,any,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,param,bean,name,the,name,of,the,bean,to,look,for,return,if,this,bean,factory,contains,a,bean,definition,with,the,given,name,see,contains,bean;boolean,contains,bean,definition,string,bean,name
ListableBeanFactory -> boolean containsBeanDefinition(String beanName)_;1539878644;Check if this bean factory contains a bean definition with the given name._<p>Does not consider any hierarchy this factory may participate in,_and ignores any singleton beans that have been registered by_other means than bean definitions._@param beanName the name of the bean to look for_@return if this bean factory contains a bean definition with the given name_@see #containsBean;boolean containsBeanDefinition(String beanName)_;check,if,this,bean,factory,contains,a,bean,definition,with,the,given,name,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,and,ignores,any,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,param,bean,name,the,name,of,the,bean,to,look,for,return,if,this,bean,factory,contains,a,bean,definition,with,the,given,name,see,contains,bean;boolean,contains,bean,definition,string,bean,name
ListableBeanFactory -> <T> Map<String, T> getBeansOfType(@Nullable Class<T> type, boolean includeNonSingletons, boolean allowEagerInit) 			throws BeansException_;1495868221;Return the bean instances that match the given object type (including_subclasses), judging from either bean definitions or the value of_{@code getObjectType} in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans if the "allowEagerInit" flag is set,_which means that FactoryBeans will get initialized. If the object created by the_FactoryBean doesn't match, the raw FactoryBean itself will be matched against the_type. If "allowEagerInit" is not set, only raw FactoryBeans will be checked_(which doesn't require initialization of each FactoryBean)._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' {@code beansOfTypeIncludingAncestors}_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>The Map returned by this method should always return bean names and_corresponding bean instances <i>in the order of definition</i> in the_backend configuration, as far as possible._@param type the class or interface to match, or {@code null} for all concrete beans_@param includeNonSingletons whether to include prototype or scoped beans too_or just singletons (also applies to FactoryBeans)_@param allowEagerInit whether to initialize <i>lazy-init singletons</i> and_<i>objects created by FactoryBeans</i> (or by factory methods with a_"factory-bean" reference) for the type check. Note that FactoryBeans need to be_eagerly initialized to determine their type: So be aware that passing in "true"_for this flag will initialize FactoryBeans and "factory-bean" references._@return a Map with the matching beans, containing the bean names as_keys and the corresponding bean instances as values_@throws BeansException if a bean could not be created_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beansOfTypeIncludingAncestors(ListableBeanFactory, Class, boolean, boolean);<T> Map<String, T> getBeansOfType(@Nullable Class<T> type, boolean includeNonSingletons, boolean allowEagerInit)_			throws BeansException_;return,the,bean,instances,that,match,the,given,object,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,if,the,allow,eager,init,flag,is,set,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,if,allow,eager,init,is,not,set,only,raw,factory,beans,will,be,checked,which,doesn,t,require,initialization,of,each,factory,bean,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,beans,of,type,including,ancestors,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,the,map,returned,by,this,method,should,always,return,bean,names,and,corresponding,bean,instances,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,for,all,concrete,beans,param,include,non,singletons,whether,to,include,prototype,or,scoped,beans,too,or,just,singletons,also,applies,to,factory,beans,param,allow,eager,init,whether,to,initialize,i,lazy,init,singletons,i,and,i,objects,created,by,factory,beans,i,or,by,factory,methods,with,a,factory,bean,reference,for,the,type,check,note,that,factory,beans,need,to,be,eagerly,initialized,to,determine,their,type,so,be,aware,that,passing,in,true,for,this,flag,will,initialize,factory,beans,and,factory,bean,references,return,a,map,with,the,matching,beans,containing,the,bean,names,as,keys,and,the,corresponding,bean,instances,as,values,throws,beans,exception,if,a,bean,could,not,be,created,see,factory,bean,get,object,type,see,bean,factory,utils,beans,of,type,including,ancestors,listable,bean,factory,class,boolean,boolean;t,map,string,t,get,beans,of,type,nullable,class,t,type,boolean,include,non,singletons,boolean,allow,eager,init,throws,beans,exception
ListableBeanFactory -> <T> Map<String, T> getBeansOfType(@Nullable Class<T> type, boolean includeNonSingletons, boolean allowEagerInit) 			throws BeansException_;1496837955;Return the bean instances that match the given object type (including_subclasses), judging from either bean definitions or the value of_{@code getObjectType} in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans if the "allowEagerInit" flag is set,_which means that FactoryBeans will get initialized. If the object created by the_FactoryBean doesn't match, the raw FactoryBean itself will be matched against the_type. If "allowEagerInit" is not set, only raw FactoryBeans will be checked_(which doesn't require initialization of each FactoryBean)._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' {@code beansOfTypeIncludingAncestors}_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>The Map returned by this method should always return bean names and_corresponding bean instances <i>in the order of definition</i> in the_backend configuration, as far as possible._@param type the class or interface to match, or {@code null} for all concrete beans_@param includeNonSingletons whether to include prototype or scoped beans too_or just singletons (also applies to FactoryBeans)_@param allowEagerInit whether to initialize <i>lazy-init singletons</i> and_<i>objects created by FactoryBeans</i> (or by factory methods with a_"factory-bean" reference) for the type check. Note that FactoryBeans need to be_eagerly initialized to determine their type: So be aware that passing in "true"_for this flag will initialize FactoryBeans and "factory-bean" references._@return a Map with the matching beans, containing the bean names as_keys and the corresponding bean instances as values_@throws BeansException if a bean could not be created_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beansOfTypeIncludingAncestors(ListableBeanFactory, Class, boolean, boolean);<T> Map<String, T> getBeansOfType(@Nullable Class<T> type, boolean includeNonSingletons, boolean allowEagerInit)_			throws BeansException_;return,the,bean,instances,that,match,the,given,object,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,if,the,allow,eager,init,flag,is,set,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,if,allow,eager,init,is,not,set,only,raw,factory,beans,will,be,checked,which,doesn,t,require,initialization,of,each,factory,bean,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,beans,of,type,including,ancestors,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,the,map,returned,by,this,method,should,always,return,bean,names,and,corresponding,bean,instances,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,for,all,concrete,beans,param,include,non,singletons,whether,to,include,prototype,or,scoped,beans,too,or,just,singletons,also,applies,to,factory,beans,param,allow,eager,init,whether,to,initialize,i,lazy,init,singletons,i,and,i,objects,created,by,factory,beans,i,or,by,factory,methods,with,a,factory,bean,reference,for,the,type,check,note,that,factory,beans,need,to,be,eagerly,initialized,to,determine,their,type,so,be,aware,that,passing,in,true,for,this,flag,will,initialize,factory,beans,and,factory,bean,references,return,a,map,with,the,matching,beans,containing,the,bean,names,as,keys,and,the,corresponding,bean,instances,as,values,throws,beans,exception,if,a,bean,could,not,be,created,see,factory,bean,get,object,type,see,bean,factory,utils,beans,of,type,including,ancestors,listable,bean,factory,class,boolean,boolean;t,map,string,t,get,beans,of,type,nullable,class,t,type,boolean,include,non,singletons,boolean,allow,eager,init,throws,beans,exception
ListableBeanFactory -> <T> Map<String, T> getBeansOfType(@Nullable Class<T> type, boolean includeNonSingletons, boolean allowEagerInit) 			throws BeansException_;1539878644;Return the bean instances that match the given object type (including_subclasses), judging from either bean definitions or the value of_{@code getObjectType} in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans if the "allowEagerInit" flag is set,_which means that FactoryBeans will get initialized. If the object created by the_FactoryBean doesn't match, the raw FactoryBean itself will be matched against the_type. If "allowEagerInit" is not set, only raw FactoryBeans will be checked_(which doesn't require initialization of each FactoryBean)._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' {@code beansOfTypeIncludingAncestors}_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>The Map returned by this method should always return bean names and_corresponding bean instances <i>in the order of definition</i> in the_backend configuration, as far as possible._@param type the class or interface to match, or {@code null} for all concrete beans_@param includeNonSingletons whether to include prototype or scoped beans too_or just singletons (also applies to FactoryBeans)_@param allowEagerInit whether to initialize <i>lazy-init singletons</i> and_<i>objects created by FactoryBeans</i> (or by factory methods with a_"factory-bean" reference) for the type check. Note that FactoryBeans need to be_eagerly initialized to determine their type: So be aware that passing in "true"_for this flag will initialize FactoryBeans and "factory-bean" references._@return a Map with the matching beans, containing the bean names as_keys and the corresponding bean instances as values_@throws BeansException if a bean could not be created_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beansOfTypeIncludingAncestors(ListableBeanFactory, Class, boolean, boolean);<T> Map<String, T> getBeansOfType(@Nullable Class<T> type, boolean includeNonSingletons, boolean allowEagerInit)_			throws BeansException_;return,the,bean,instances,that,match,the,given,object,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,if,the,allow,eager,init,flag,is,set,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,if,allow,eager,init,is,not,set,only,raw,factory,beans,will,be,checked,which,doesn,t,require,initialization,of,each,factory,bean,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,beans,of,type,including,ancestors,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,the,map,returned,by,this,method,should,always,return,bean,names,and,corresponding,bean,instances,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,for,all,concrete,beans,param,include,non,singletons,whether,to,include,prototype,or,scoped,beans,too,or,just,singletons,also,applies,to,factory,beans,param,allow,eager,init,whether,to,initialize,i,lazy,init,singletons,i,and,i,objects,created,by,factory,beans,i,or,by,factory,methods,with,a,factory,bean,reference,for,the,type,check,note,that,factory,beans,need,to,be,eagerly,initialized,to,determine,their,type,so,be,aware,that,passing,in,true,for,this,flag,will,initialize,factory,beans,and,factory,bean,references,return,a,map,with,the,matching,beans,containing,the,bean,names,as,keys,and,the,corresponding,bean,instances,as,values,throws,beans,exception,if,a,bean,could,not,be,created,see,factory,bean,get,object,type,see,bean,factory,utils,beans,of,type,including,ancestors,listable,bean,factory,class,boolean,boolean;t,map,string,t,get,beans,of,type,nullable,class,t,type,boolean,include,non,singletons,boolean,allow,eager,init,throws,beans,exception
ListableBeanFactory -> <A extends Annotation> A findAnnotationOnBean(String beanName, Class<A> annotationType) 			throws NoSuchBeanDefinitionException_;1384527851;Find an {@link Annotation} of {@code annotationType} on the specified_bean, traversing its interfaces and super classes if no annotation can be_found on the given class itself._@param beanName the name of the bean to look for annotations on_@param annotationType the annotation class to look for_@return the annotation of the given type found, or {@code null}_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 3.0;<A extends Annotation> A findAnnotationOnBean(String beanName, Class<A> annotationType)_			throws NoSuchBeanDefinitionException_;find,an,link,annotation,of,code,annotation,type,on,the,specified,bean,traversing,its,interfaces,and,super,classes,if,no,annotation,can,be,found,on,the,given,class,itself,param,bean,name,the,name,of,the,bean,to,look,for,annotations,on,param,annotation,type,the,annotation,class,to,look,for,return,the,annotation,of,the,given,type,found,or,code,null,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,3,0;a,extends,annotation,a,find,annotation,on,bean,string,bean,name,class,a,annotation,type,throws,no,such,bean,definition,exception
ListableBeanFactory -> <A extends Annotation> A findAnnotationOnBean(String beanName, Class<A> annotationType) 			throws NoSuchBeanDefinitionException_;1384700387;Find an {@link Annotation} of {@code annotationType} on the specified_bean, traversing its interfaces and super classes if no annotation can be_found on the given class itself._@param beanName the name of the bean to look for annotations on_@param annotationType the annotation class to look for_@return the annotation of the given type if found, or {@code null}_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 3.0;<A extends Annotation> A findAnnotationOnBean(String beanName, Class<A> annotationType)_			throws NoSuchBeanDefinitionException_;find,an,link,annotation,of,code,annotation,type,on,the,specified,bean,traversing,its,interfaces,and,super,classes,if,no,annotation,can,be,found,on,the,given,class,itself,param,bean,name,the,name,of,the,bean,to,look,for,annotations,on,param,annotation,type,the,annotation,class,to,look,for,return,the,annotation,of,the,given,type,if,found,or,code,null,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,3,0;a,extends,annotation,a,find,annotation,on,bean,string,bean,name,class,a,annotation,type,throws,no,such,bean,definition,exception
ListableBeanFactory -> <A extends Annotation> A findAnnotationOnBean(String beanName, Class<A> annotationType) 			throws NoSuchBeanDefinitionException_;1401909456;Find an {@link Annotation} of {@code annotationType} on the specified_bean, traversing its interfaces and super classes if no annotation can be_found on the given class itself._@param beanName the name of the bean to look for annotations on_@param annotationType the annotation class to look for_@return the annotation of the given type if found, or {@code null}_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 3.0;<A extends Annotation> A findAnnotationOnBean(String beanName, Class<A> annotationType)_			throws NoSuchBeanDefinitionException_;find,an,link,annotation,of,code,annotation,type,on,the,specified,bean,traversing,its,interfaces,and,super,classes,if,no,annotation,can,be,found,on,the,given,class,itself,param,bean,name,the,name,of,the,bean,to,look,for,annotations,on,param,annotation,type,the,annotation,class,to,look,for,return,the,annotation,of,the,given,type,if,found,or,code,null,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,3,0;a,extends,annotation,a,find,annotation,on,bean,string,bean,name,class,a,annotation,type,throws,no,such,bean,definition,exception
ListableBeanFactory -> <A extends Annotation> A findAnnotationOnBean(String beanName, Class<A> annotationType) 			throws NoSuchBeanDefinitionException_;1426716313;Find an {@link Annotation} of {@code annotationType} on the specified_bean, traversing its interfaces and super classes if no annotation can be_found on the given class itself._@param beanName the name of the bean to look for annotations on_@param annotationType the annotation class to look for_@return the annotation of the given type if found, or {@code null}_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 3.0;<A extends Annotation> A findAnnotationOnBean(String beanName, Class<A> annotationType)_			throws NoSuchBeanDefinitionException_;find,an,link,annotation,of,code,annotation,type,on,the,specified,bean,traversing,its,interfaces,and,super,classes,if,no,annotation,can,be,found,on,the,given,class,itself,param,bean,name,the,name,of,the,bean,to,look,for,annotations,on,param,annotation,type,the,annotation,class,to,look,for,return,the,annotation,of,the,given,type,if,found,or,code,null,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,3,0;a,extends,annotation,a,find,annotation,on,bean,string,bean,name,class,a,annotation,type,throws,no,such,bean,definition,exception
ListableBeanFactory -> <A extends Annotation> A findAnnotationOnBean(String beanName, Class<A> annotationType) 			throws NoSuchBeanDefinitionException_;1459774710;Find an {@link Annotation} of {@code annotationType} on the specified_bean, traversing its interfaces and super classes if no annotation can be_found on the given class itself._@param beanName the name of the bean to look for annotations on_@param annotationType the annotation class to look for_@return the annotation of the given type if found, or {@code null}_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 3.0;<A extends Annotation> A findAnnotationOnBean(String beanName, Class<A> annotationType)_			throws NoSuchBeanDefinitionException_;find,an,link,annotation,of,code,annotation,type,on,the,specified,bean,traversing,its,interfaces,and,super,classes,if,no,annotation,can,be,found,on,the,given,class,itself,param,bean,name,the,name,of,the,bean,to,look,for,annotations,on,param,annotation,type,the,annotation,class,to,look,for,return,the,annotation,of,the,given,type,if,found,or,code,null,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,3,0;a,extends,annotation,a,find,annotation,on,bean,string,bean,name,class,a,annotation,type,throws,no,such,bean,definition,exception
ListableBeanFactory -> String[] getBeanDefinitionNames()_;1328020251;Return the names of all beans defined in this factory._<p>Does not consider any hierarchy this factory may participate in,_and ignores any singleton beans that have been registered by_other means than bean definitions._@return the names of all beans defined in this factory,_or an empty array if none defined;String[] getBeanDefinitionNames()_;return,the,names,of,all,beans,defined,in,this,factory,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,and,ignores,any,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,return,the,names,of,all,beans,defined,in,this,factory,or,an,empty,array,if,none,defined;string,get,bean,definition,names
ListableBeanFactory -> String[] getBeanDefinitionNames()_;1356735495;Return the names of all beans defined in this factory._<p>Does not consider any hierarchy this factory may participate in,_and ignores any singleton beans that have been registered by_other means than bean definitions._@return the names of all beans defined in this factory,_or an empty array if none defined;String[] getBeanDefinitionNames()_;return,the,names,of,all,beans,defined,in,this,factory,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,and,ignores,any,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,return,the,names,of,all,beans,defined,in,this,factory,or,an,empty,array,if,none,defined;string,get,bean,definition,names
ListableBeanFactory -> String[] getBeanDefinitionNames()_;1384527851;Return the names of all beans defined in this factory._<p>Does not consider any hierarchy this factory may participate in,_and ignores any singleton beans that have been registered by_other means than bean definitions._@return the names of all beans defined in this factory,_or an empty array if none defined;String[] getBeanDefinitionNames()_;return,the,names,of,all,beans,defined,in,this,factory,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,and,ignores,any,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,return,the,names,of,all,beans,defined,in,this,factory,or,an,empty,array,if,none,defined;string,get,bean,definition,names
ListableBeanFactory -> String[] getBeanDefinitionNames()_;1384700387;Return the names of all beans defined in this factory._<p>Does not consider any hierarchy this factory may participate in,_and ignores any singleton beans that have been registered by_other means than bean definitions._@return the names of all beans defined in this factory,_or an empty array if none defined;String[] getBeanDefinitionNames()_;return,the,names,of,all,beans,defined,in,this,factory,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,and,ignores,any,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,return,the,names,of,all,beans,defined,in,this,factory,or,an,empty,array,if,none,defined;string,get,bean,definition,names
ListableBeanFactory -> String[] getBeanDefinitionNames()_;1401909456;Return the names of all beans defined in this factory._<p>Does not consider any hierarchy this factory may participate in,_and ignores any singleton beans that have been registered by_other means than bean definitions._@return the names of all beans defined in this factory,_or an empty array if none defined;String[] getBeanDefinitionNames()_;return,the,names,of,all,beans,defined,in,this,factory,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,and,ignores,any,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,return,the,names,of,all,beans,defined,in,this,factory,or,an,empty,array,if,none,defined;string,get,bean,definition,names
ListableBeanFactory -> String[] getBeanDefinitionNames()_;1426716313;Return the names of all beans defined in this factory._<p>Does not consider any hierarchy this factory may participate in,_and ignores any singleton beans that have been registered by_other means than bean definitions._@return the names of all beans defined in this factory,_or an empty array if none defined;String[] getBeanDefinitionNames()_;return,the,names,of,all,beans,defined,in,this,factory,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,and,ignores,any,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,return,the,names,of,all,beans,defined,in,this,factory,or,an,empty,array,if,none,defined;string,get,bean,definition,names
ListableBeanFactory -> String[] getBeanDefinitionNames()_;1459774710;Return the names of all beans defined in this factory._<p>Does not consider any hierarchy this factory may participate in,_and ignores any singleton beans that have been registered by_other means than bean definitions._@return the names of all beans defined in this factory,_or an empty array if none defined;String[] getBeanDefinitionNames()_;return,the,names,of,all,beans,defined,in,this,factory,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,and,ignores,any,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,return,the,names,of,all,beans,defined,in,this,factory,or,an,empty,array,if,none,defined;string,get,bean,definition,names
ListableBeanFactory -> String[] getBeanDefinitionNames()_;1495868221;Return the names of all beans defined in this factory._<p>Does not consider any hierarchy this factory may participate in,_and ignores any singleton beans that have been registered by_other means than bean definitions._@return the names of all beans defined in this factory,_or an empty array if none defined;String[] getBeanDefinitionNames()_;return,the,names,of,all,beans,defined,in,this,factory,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,and,ignores,any,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,return,the,names,of,all,beans,defined,in,this,factory,or,an,empty,array,if,none,defined;string,get,bean,definition,names
ListableBeanFactory -> String[] getBeanDefinitionNames()_;1496837955;Return the names of all beans defined in this factory._<p>Does not consider any hierarchy this factory may participate in,_and ignores any singleton beans that have been registered by_other means than bean definitions._@return the names of all beans defined in this factory,_or an empty array if none defined;String[] getBeanDefinitionNames()_;return,the,names,of,all,beans,defined,in,this,factory,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,and,ignores,any,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,return,the,names,of,all,beans,defined,in,this,factory,or,an,empty,array,if,none,defined;string,get,bean,definition,names
ListableBeanFactory -> String[] getBeanDefinitionNames()_;1539878644;Return the names of all beans defined in this factory._<p>Does not consider any hierarchy this factory may participate in,_and ignores any singleton beans that have been registered by_other means than bean definitions._@return the names of all beans defined in this factory,_or an empty array if none defined;String[] getBeanDefinitionNames()_;return,the,names,of,all,beans,defined,in,this,factory,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,and,ignores,any,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,return,the,names,of,all,beans,defined,in,this,factory,or,an,empty,array,if,none,defined;string,get,bean,definition,names
ListableBeanFactory -> <T> Map<String, T> getBeansOfType(@Nullable Class<T> type) throws BeansException_;1495868221;Return the bean instances that match the given object type (including_subclasses), judging from either bean definitions or the value of_{@code getObjectType} in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans, which means that FactoryBeans_will get initialized. If the object created by the FactoryBean doesn't match,_the raw FactoryBean itself will be matched against the type._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' {@code beansOfTypeIncludingAncestors}_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>This version of getBeansOfType matches all kinds of beans, be it_singletons, prototypes, or FactoryBeans. In most implementations, the_result will be the same as for {@code getBeansOfType(type, true, true)}._<p>The Map returned by this method should always return bean names and_corresponding bean instances <i>in the order of definition</i> in the_backend configuration, as far as possible._@param type the class or interface to match, or {@code null} for all concrete beans_@return a Map with the matching beans, containing the bean names as_keys and the corresponding bean instances as values_@throws BeansException if a bean could not be created_@since 1.1.2_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beansOfTypeIncludingAncestors(ListableBeanFactory, Class);<T> Map<String, T> getBeansOfType(@Nullable Class<T> type) throws BeansException_;return,the,bean,instances,that,match,the,given,object,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,beans,of,type,including,ancestors,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,this,version,of,get,beans,of,type,matches,all,kinds,of,beans,be,it,singletons,prototypes,or,factory,beans,in,most,implementations,the,result,will,be,the,same,as,for,code,get,beans,of,type,type,true,true,p,the,map,returned,by,this,method,should,always,return,bean,names,and,corresponding,bean,instances,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,for,all,concrete,beans,return,a,map,with,the,matching,beans,containing,the,bean,names,as,keys,and,the,corresponding,bean,instances,as,values,throws,beans,exception,if,a,bean,could,not,be,created,since,1,1,2,see,factory,bean,get,object,type,see,bean,factory,utils,beans,of,type,including,ancestors,listable,bean,factory,class;t,map,string,t,get,beans,of,type,nullable,class,t,type,throws,beans,exception
ListableBeanFactory -> <T> Map<String, T> getBeansOfType(@Nullable Class<T> type) throws BeansException_;1496837955;Return the bean instances that match the given object type (including_subclasses), judging from either bean definitions or the value of_{@code getObjectType} in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans, which means that FactoryBeans_will get initialized. If the object created by the FactoryBean doesn't match,_the raw FactoryBean itself will be matched against the type._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' {@code beansOfTypeIncludingAncestors}_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>This version of getBeansOfType matches all kinds of beans, be it_singletons, prototypes, or FactoryBeans. In most implementations, the_result will be the same as for {@code getBeansOfType(type, true, true)}._<p>The Map returned by this method should always return bean names and_corresponding bean instances <i>in the order of definition</i> in the_backend configuration, as far as possible._@param type the class or interface to match, or {@code null} for all concrete beans_@return a Map with the matching beans, containing the bean names as_keys and the corresponding bean instances as values_@throws BeansException if a bean could not be created_@since 1.1.2_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beansOfTypeIncludingAncestors(ListableBeanFactory, Class);<T> Map<String, T> getBeansOfType(@Nullable Class<T> type) throws BeansException_;return,the,bean,instances,that,match,the,given,object,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,beans,of,type,including,ancestors,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,this,version,of,get,beans,of,type,matches,all,kinds,of,beans,be,it,singletons,prototypes,or,factory,beans,in,most,implementations,the,result,will,be,the,same,as,for,code,get,beans,of,type,type,true,true,p,the,map,returned,by,this,method,should,always,return,bean,names,and,corresponding,bean,instances,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,for,all,concrete,beans,return,a,map,with,the,matching,beans,containing,the,bean,names,as,keys,and,the,corresponding,bean,instances,as,values,throws,beans,exception,if,a,bean,could,not,be,created,since,1,1,2,see,factory,bean,get,object,type,see,bean,factory,utils,beans,of,type,including,ancestors,listable,bean,factory,class;t,map,string,t,get,beans,of,type,nullable,class,t,type,throws,beans,exception
ListableBeanFactory -> <T> Map<String, T> getBeansOfType(@Nullable Class<T> type) throws BeansException_;1539878644;Return the bean instances that match the given object type (including_subclasses), judging from either bean definitions or the value of_{@code getObjectType} in the case of FactoryBeans._<p><b>NOTE: This method introspects top-level beans only.</b> It does <i>not</i>_check nested beans which might match the specified type as well._<p>Does consider objects created by FactoryBeans, which means that FactoryBeans_will get initialized. If the object created by the FactoryBean doesn't match,_the raw FactoryBean itself will be matched against the type._<p>Does not consider any hierarchy this factory may participate in._Use BeanFactoryUtils' {@code beansOfTypeIncludingAncestors}_to include beans in ancestor factories too._<p>Note: Does <i>not</i> ignore singleton beans that have been registered_by other means than bean definitions._<p>This version of getBeansOfType matches all kinds of beans, be it_singletons, prototypes, or FactoryBeans. In most implementations, the_result will be the same as for {@code getBeansOfType(type, true, true)}._<p>The Map returned by this method should always return bean names and_corresponding bean instances <i>in the order of definition</i> in the_backend configuration, as far as possible._@param type the class or interface to match, or {@code null} for all concrete beans_@return a Map with the matching beans, containing the bean names as_keys and the corresponding bean instances as values_@throws BeansException if a bean could not be created_@since 1.1.2_@see FactoryBean#getObjectType_@see BeanFactoryUtils#beansOfTypeIncludingAncestors(ListableBeanFactory, Class);<T> Map<String, T> getBeansOfType(@Nullable Class<T> type) throws BeansException_;return,the,bean,instances,that,match,the,given,object,type,including,subclasses,judging,from,either,bean,definitions,or,the,value,of,code,get,object,type,in,the,case,of,factory,beans,p,b,note,this,method,introspects,top,level,beans,only,b,it,does,i,not,i,check,nested,beans,which,might,match,the,specified,type,as,well,p,does,consider,objects,created,by,factory,beans,which,means,that,factory,beans,will,get,initialized,if,the,object,created,by,the,factory,bean,doesn,t,match,the,raw,factory,bean,itself,will,be,matched,against,the,type,p,does,not,consider,any,hierarchy,this,factory,may,participate,in,use,bean,factory,utils,code,beans,of,type,including,ancestors,to,include,beans,in,ancestor,factories,too,p,note,does,i,not,i,ignore,singleton,beans,that,have,been,registered,by,other,means,than,bean,definitions,p,this,version,of,get,beans,of,type,matches,all,kinds,of,beans,be,it,singletons,prototypes,or,factory,beans,in,most,implementations,the,result,will,be,the,same,as,for,code,get,beans,of,type,type,true,true,p,the,map,returned,by,this,method,should,always,return,bean,names,and,corresponding,bean,instances,i,in,the,order,of,definition,i,in,the,backend,configuration,as,far,as,possible,param,type,the,class,or,interface,to,match,or,code,null,for,all,concrete,beans,return,a,map,with,the,matching,beans,containing,the,bean,names,as,keys,and,the,corresponding,bean,instances,as,values,throws,beans,exception,if,a,bean,could,not,be,created,since,1,1,2,see,factory,bean,get,object,type,see,bean,factory,utils,beans,of,type,including,ancestors,listable,bean,factory,class;t,map,string,t,get,beans,of,type,nullable,class,t,type,throws,beans,exception
