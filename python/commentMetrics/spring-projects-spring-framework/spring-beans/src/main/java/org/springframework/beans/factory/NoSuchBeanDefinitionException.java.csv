commented;modifiers;parameterAmount;loc;comment;code
true;public;0;4;/**  * Return the name of the missing bean, if it was a lookup <em>by name</em> that failed.  */ ;/**  * Return the name of the missing bean, if it was a lookup <em>by name</em> that failed.  */ @Nullable public String getBeanName() {     return this.beanName. }
true;public;0;4;/**  * Return the required type of the missing bean, if it was a lookup <em>by type</em>  * that failed.  */ ;/**  * Return the required type of the missing bean, if it was a lookup <em>by type</em>  * that failed.  */ @Nullable public Class<?> getBeanType() {     return (this.resolvableType != null ? this.resolvableType.resolve() : null). }
true;public;0;4;/**  * Return the required {@link ResolvableType} of the missing bean, if it was a lookup  * <em>by type</em> that failed.  * @since 4.3.4  */ ;/**  * Return the required {@link ResolvableType} of the missing bean, if it was a lookup  * <em>by type</em> that failed.  * @since 4.3.4  */ @Nullable public ResolvableType getResolvableType() {     return this.resolvableType. }
true;public;0;3;/**  * Return the number of beans found when only one matching bean was expected.  * For a regular NoSuchBeanDefinitionException, this will always be 0.  * @see NoUniqueBeanDefinitionException  */ ;/**  * Return the number of beans found when only one matching bean was expected.  * For a regular NoSuchBeanDefinitionException, this will always be 0.  * @see NoUniqueBeanDefinitionException  */ public int getNumberOfBeansFound() {     return 0. }
