# id;timestamp;commentText;codeText;commentWords;codeWords
MutablePropertyValues -> public List<PropertyValue> getPropertyValueList();1328020251;Return the underlying List of PropertyValue objects in its raw form._The returned List can be modified directly, although this is not recommended._<p>This is an accessor for optimized access to all PropertyValue objects._It is not intended for typical programmatic use.;public List<PropertyValue> getPropertyValueList() {_		return this.propertyValueList__	};return,the,underlying,list,of,property,value,objects,in,its,raw,form,the,returned,list,can,be,modified,directly,although,this,is,not,recommended,p,this,is,an,accessor,for,optimized,access,to,all,property,value,objects,it,is,not,intended,for,typical,programmatic,use;public,list,property,value,get,property,value,list,return,this,property,value,list
MutablePropertyValues -> public List<PropertyValue> getPropertyValueList();1356735495;Return the underlying List of PropertyValue objects in its raw form._The returned List can be modified directly, although this is not recommended._<p>This is an accessor for optimized access to all PropertyValue objects._It is not intended for typical programmatic use.;public List<PropertyValue> getPropertyValueList() {_		return this.propertyValueList__	};return,the,underlying,list,of,property,value,objects,in,its,raw,form,the,returned,list,can,be,modified,directly,although,this,is,not,recommended,p,this,is,an,accessor,for,optimized,access,to,all,property,value,objects,it,is,not,intended,for,typical,programmatic,use;public,list,property,value,get,property,value,list,return,this,property,value,list
MutablePropertyValues -> public List<PropertyValue> getPropertyValueList();1357119239;Return the underlying List of PropertyValue objects in its raw form._The returned List can be modified directly, although this is not recommended._<p>This is an accessor for optimized access to all PropertyValue objects._It is not intended for typical programmatic use.;public List<PropertyValue> getPropertyValueList() {_		return this.propertyValueList__	};return,the,underlying,list,of,property,value,objects,in,its,raw,form,the,returned,list,can,be,modified,directly,although,this,is,not,recommended,p,this,is,an,accessor,for,optimized,access,to,all,property,value,objects,it,is,not,intended,for,typical,programmatic,use;public,list,property,value,get,property,value,list,return,this,property,value,list
MutablePropertyValues -> public List<PropertyValue> getPropertyValueList();1368482696;Return the underlying List of PropertyValue objects in its raw form._The returned List can be modified directly, although this is not recommended._<p>This is an accessor for optimized access to all PropertyValue objects._It is not intended for typical programmatic use.;public List<PropertyValue> getPropertyValueList() {_		return this.propertyValueList__	};return,the,underlying,list,of,property,value,objects,in,its,raw,form,the,returned,list,can,be,modified,directly,although,this,is,not,recommended,p,this,is,an,accessor,for,optimized,access,to,all,property,value,objects,it,is,not,intended,for,typical,programmatic,use;public,list,property,value,get,property,value,list,return,this,property,value,list
MutablePropertyValues -> public List<PropertyValue> getPropertyValueList();1382030648;Return the underlying List of PropertyValue objects in its raw form._The returned List can be modified directly, although this is not recommended._<p>This is an accessor for optimized access to all PropertyValue objects._It is not intended for typical programmatic use.;public List<PropertyValue> getPropertyValueList() {_		return this.propertyValueList__	};return,the,underlying,list,of,property,value,objects,in,its,raw,form,the,returned,list,can,be,modified,directly,although,this,is,not,recommended,p,this,is,an,accessor,for,optimized,access,to,all,property,value,objects,it,is,not,intended,for,typical,programmatic,use;public,list,property,value,get,property,value,list,return,this,property,value,list
MutablePropertyValues -> public List<PropertyValue> getPropertyValueList();1385412762;Return the underlying List of PropertyValue objects in its raw form._The returned List can be modified directly, although this is not recommended._<p>This is an accessor for optimized access to all PropertyValue objects._It is not intended for typical programmatic use.;public List<PropertyValue> getPropertyValueList() {_		return this.propertyValueList__	};return,the,underlying,list,of,property,value,objects,in,its,raw,form,the,returned,list,can,be,modified,directly,although,this,is,not,recommended,p,this,is,an,accessor,for,optimized,access,to,all,property,value,objects,it,is,not,intended,for,typical,programmatic,use;public,list,property,value,get,property,value,list,return,this,property,value,list
MutablePropertyValues -> public List<PropertyValue> getPropertyValueList();1419339720;Return the underlying List of PropertyValue objects in its raw form._The returned List can be modified directly, although this is not recommended._<p>This is an accessor for optimized access to all PropertyValue objects._It is not intended for typical programmatic use.;public List<PropertyValue> getPropertyValueList() {_		return this.propertyValueList__	};return,the,underlying,list,of,property,value,objects,in,its,raw,form,the,returned,list,can,be,modified,directly,although,this,is,not,recommended,p,this,is,an,accessor,for,optimized,access,to,all,property,value,objects,it,is,not,intended,for,typical,programmatic,use;public,list,property,value,get,property,value,list,return,this,property,value,list
MutablePropertyValues -> public List<PropertyValue> getPropertyValueList();1419881658;Return the underlying List of PropertyValue objects in its raw form._The returned List can be modified directly, although this is not recommended._<p>This is an accessor for optimized access to all PropertyValue objects._It is not intended for typical programmatic use.;public List<PropertyValue> getPropertyValueList() {_		return this.propertyValueList__	};return,the,underlying,list,of,property,value,objects,in,its,raw,form,the,returned,list,can,be,modified,directly,although,this,is,not,recommended,p,this,is,an,accessor,for,optimized,access,to,all,property,value,objects,it,is,not,intended,for,typical,programmatic,use;public,list,property,value,get,property,value,list,return,this,property,value,list
MutablePropertyValues -> public List<PropertyValue> getPropertyValueList();1467730834;Return the underlying List of PropertyValue objects in its raw form._The returned List can be modified directly, although this is not recommended._<p>This is an accessor for optimized access to all PropertyValue objects._It is not intended for typical programmatic use.;public List<PropertyValue> getPropertyValueList() {_		return this.propertyValueList__	};return,the,underlying,list,of,property,value,objects,in,its,raw,form,the,returned,list,can,be,modified,directly,although,this,is,not,recommended,p,this,is,an,accessor,for,optimized,access,to,all,property,value,objects,it,is,not,intended,for,typical,programmatic,use;public,list,property,value,get,property,value,list,return,this,property,value,list
MutablePropertyValues -> public List<PropertyValue> getPropertyValueList();1495868221;Return the underlying List of PropertyValue objects in its raw form._The returned List can be modified directly, although this is not recommended._<p>This is an accessor for optimized access to all PropertyValue objects._It is not intended for typical programmatic use.;public List<PropertyValue> getPropertyValueList() {_		return this.propertyValueList__	};return,the,underlying,list,of,property,value,objects,in,its,raw,form,the,returned,list,can,be,modified,directly,although,this,is,not,recommended,p,this,is,an,accessor,for,optimized,access,to,all,property,value,objects,it,is,not,intended,for,typical,programmatic,use;public,list,property,value,get,property,value,list,return,this,property,value,list
MutablePropertyValues -> public List<PropertyValue> getPropertyValueList();1496837955;Return the underlying List of PropertyValue objects in its raw form._The returned List can be modified directly, although this is not recommended._<p>This is an accessor for optimized access to all PropertyValue objects._It is not intended for typical programmatic use.;public List<PropertyValue> getPropertyValueList() {_		return this.propertyValueList__	};return,the,underlying,list,of,property,value,objects,in,its,raw,form,the,returned,list,can,be,modified,directly,although,this,is,not,recommended,p,this,is,an,accessor,for,optimized,access,to,all,property,value,objects,it,is,not,intended,for,typical,programmatic,use;public,list,property,value,get,property,value,list,return,this,property,value,list
MutablePropertyValues -> public List<PropertyValue> getPropertyValueList();1497250713;Return the underlying List of PropertyValue objects in its raw form._The returned List can be modified directly, although this is not recommended._<p>This is an accessor for optimized access to all PropertyValue objects._It is not intended for typical programmatic use.;public List<PropertyValue> getPropertyValueList() {_		return this.propertyValueList__	};return,the,underlying,list,of,property,value,objects,in,its,raw,form,the,returned,list,can,be,modified,directly,although,this,is,not,recommended,p,this,is,an,accessor,for,optimized,access,to,all,property,value,objects,it,is,not,intended,for,typical,programmatic,use;public,list,property,value,get,property,value,list,return,this,property,value,list
MutablePropertyValues -> public List<PropertyValue> getPropertyValueList();1498780456;Return the underlying List of PropertyValue objects in its raw form._The returned List can be modified directly, although this is not recommended._<p>This is an accessor for optimized access to all PropertyValue objects._It is not intended for typical programmatic use.;public List<PropertyValue> getPropertyValueList() {_		return this.propertyValueList__	};return,the,underlying,list,of,property,value,objects,in,its,raw,form,the,returned,list,can,be,modified,directly,although,this,is,not,recommended,p,this,is,an,accessor,for,optimized,access,to,all,property,value,objects,it,is,not,intended,for,typical,programmatic,use;public,list,property,value,get,property,value,list,return,this,property,value,list
MutablePropertyValues -> public List<PropertyValue> getPropertyValueList();1502974979;Return the underlying List of PropertyValue objects in its raw form._The returned List can be modified directly, although this is not recommended._<p>This is an accessor for optimized access to all PropertyValue objects._It is not intended for typical programmatic use.;public List<PropertyValue> getPropertyValueList() {_		return this.propertyValueList__	};return,the,underlying,list,of,property,value,objects,in,its,raw,form,the,returned,list,can,be,modified,directly,although,this,is,not,recommended,p,this,is,an,accessor,for,optimized,access,to,all,property,value,objects,it,is,not,intended,for,typical,programmatic,use;public,list,property,value,get,property,value,list,return,this,property,value,list
MutablePropertyValues -> public List<PropertyValue> getPropertyValueList();1510606271;Return the underlying List of PropertyValue objects in its raw form._The returned List can be modified directly, although this is not recommended._<p>This is an accessor for optimized access to all PropertyValue objects._It is not intended for typical programmatic use.;public List<PropertyValue> getPropertyValueList() {_		return this.propertyValueList__	};return,the,underlying,list,of,property,value,objects,in,its,raw,form,the,returned,list,can,be,modified,directly,although,this,is,not,recommended,p,this,is,an,accessor,for,optimized,access,to,all,property,value,objects,it,is,not,intended,for,typical,programmatic,use;public,list,property,value,get,property,value,list,return,this,property,value,list
MutablePropertyValues -> public List<PropertyValue> getPropertyValueList();1519295386;Return the underlying List of PropertyValue objects in its raw form._The returned List can be modified directly, although this is not recommended._<p>This is an accessor for optimized access to all PropertyValue objects._It is not intended for typical programmatic use.;public List<PropertyValue> getPropertyValueList() {_		return this.propertyValueList__	};return,the,underlying,list,of,property,value,objects,in,its,raw,form,the,returned,list,can,be,modified,directly,although,this,is,not,recommended,p,this,is,an,accessor,for,optimized,access,to,all,property,value,objects,it,is,not,intended,for,typical,programmatic,use;public,list,property,value,get,property,value,list,return,this,property,value,list
MutablePropertyValues -> public List<PropertyValue> getPropertyValueList();1522359230;Return the underlying List of PropertyValue objects in its raw form._The returned List can be modified directly, although this is not recommended._<p>This is an accessor for optimized access to all PropertyValue objects._It is not intended for typical programmatic use.;public List<PropertyValue> getPropertyValueList() {_		return this.propertyValueList__	};return,the,underlying,list,of,property,value,objects,in,its,raw,form,the,returned,list,can,be,modified,directly,although,this,is,not,recommended,p,this,is,an,accessor,for,optimized,access,to,all,property,value,objects,it,is,not,intended,for,typical,programmatic,use;public,list,property,value,get,property,value,list,return,this,property,value,list
MutablePropertyValues -> public List<PropertyValue> getPropertyValueList();1530174524;Return the underlying List of PropertyValue objects in its raw form._The returned List can be modified directly, although this is not recommended._<p>This is an accessor for optimized access to all PropertyValue objects._It is not intended for typical programmatic use.;public List<PropertyValue> getPropertyValueList() {_		return this.propertyValueList__	};return,the,underlying,list,of,property,value,objects,in,its,raw,form,the,returned,list,can,be,modified,directly,although,this,is,not,recommended,p,this,is,an,accessor,for,optimized,access,to,all,property,value,objects,it,is,not,intended,for,typical,programmatic,use;public,list,property,value,get,property,value,list,return,this,property,value,list
MutablePropertyValues -> public List<PropertyValue> getPropertyValueList();1530190293;Return the underlying List of PropertyValue objects in its raw form._The returned List can be modified directly, although this is not recommended._<p>This is an accessor for optimized access to all PropertyValue objects._It is not intended for typical programmatic use.;public List<PropertyValue> getPropertyValueList() {_		return this.propertyValueList__	};return,the,underlying,list,of,property,value,objects,in,its,raw,form,the,returned,list,can,be,modified,directly,although,this,is,not,recommended,p,this,is,an,accessor,for,optimized,access,to,all,property,value,objects,it,is,not,intended,for,typical,programmatic,use;public,list,property,value,get,property,value,list,return,this,property,value,list
MutablePropertyValues -> public List<PropertyValue> getPropertyValueList();1530827996;Return the underlying List of PropertyValue objects in its raw form._The returned List can be modified directly, although this is not recommended._<p>This is an accessor for optimized access to all PropertyValue objects._It is not intended for typical programmatic use.;public List<PropertyValue> getPropertyValueList() {_		return this.propertyValueList__	};return,the,underlying,list,of,property,value,objects,in,its,raw,form,the,returned,list,can,be,modified,directly,although,this,is,not,recommended,p,this,is,an,accessor,for,optimized,access,to,all,property,value,objects,it,is,not,intended,for,typical,programmatic,use;public,list,property,value,get,property,value,list,return,this,property,value,list
MutablePropertyValues -> public int size();1328020251;Return the number of PropertyValue entries in the list.;public int size() {_		return this.propertyValueList.size()__	};return,the,number,of,property,value,entries,in,the,list;public,int,size,return,this,property,value,list,size
MutablePropertyValues -> public int size();1356735495;Return the number of PropertyValue entries in the list.;public int size() {_		return this.propertyValueList.size()__	};return,the,number,of,property,value,entries,in,the,list;public,int,size,return,this,property,value,list,size
MutablePropertyValues -> public int size();1357119239;Return the number of PropertyValue entries in the list.;public int size() {_		return this.propertyValueList.size()__	};return,the,number,of,property,value,entries,in,the,list;public,int,size,return,this,property,value,list,size
MutablePropertyValues -> public int size();1368482696;Return the number of PropertyValue entries in the list.;public int size() {_		return this.propertyValueList.size()__	};return,the,number,of,property,value,entries,in,the,list;public,int,size,return,this,property,value,list,size
MutablePropertyValues -> public int size();1382030648;Return the number of PropertyValue entries in the list.;public int size() {_		return this.propertyValueList.size()__	};return,the,number,of,property,value,entries,in,the,list;public,int,size,return,this,property,value,list,size
MutablePropertyValues -> public int size();1385412762;Return the number of PropertyValue entries in the list.;public int size() {_		return this.propertyValueList.size()__	};return,the,number,of,property,value,entries,in,the,list;public,int,size,return,this,property,value,list,size
MutablePropertyValues -> public int size();1419339720;Return the number of PropertyValue entries in the list.;public int size() {_		return this.propertyValueList.size()__	};return,the,number,of,property,value,entries,in,the,list;public,int,size,return,this,property,value,list,size
MutablePropertyValues -> public int size();1419881658;Return the number of PropertyValue entries in the list.;public int size() {_		return this.propertyValueList.size()__	};return,the,number,of,property,value,entries,in,the,list;public,int,size,return,this,property,value,list,size
MutablePropertyValues -> public int size();1467730834;Return the number of PropertyValue entries in the list.;public int size() {_		return this.propertyValueList.size()__	};return,the,number,of,property,value,entries,in,the,list;public,int,size,return,this,property,value,list,size
MutablePropertyValues -> public int size();1495868221;Return the number of PropertyValue entries in the list.;public int size() {_		return this.propertyValueList.size()__	};return,the,number,of,property,value,entries,in,the,list;public,int,size,return,this,property,value,list,size
MutablePropertyValues -> public int size();1496837955;Return the number of PropertyValue entries in the list.;public int size() {_		return this.propertyValueList.size()__	};return,the,number,of,property,value,entries,in,the,list;public,int,size,return,this,property,value,list,size
MutablePropertyValues -> public int size();1497250713;Return the number of PropertyValue entries in the list.;public int size() {_		return this.propertyValueList.size()__	};return,the,number,of,property,value,entries,in,the,list;public,int,size,return,this,property,value,list,size
MutablePropertyValues -> public int size();1498780456;Return the number of PropertyValue entries in the list.;public int size() {_		return this.propertyValueList.size()__	};return,the,number,of,property,value,entries,in,the,list;public,int,size,return,this,property,value,list,size
MutablePropertyValues -> public int size();1502974979;Return the number of PropertyValue entries in the list.;public int size() {_		return this.propertyValueList.size()__	};return,the,number,of,property,value,entries,in,the,list;public,int,size,return,this,property,value,list,size
MutablePropertyValues -> public int size();1510606271;Return the number of PropertyValue entries in the list.;public int size() {_		return this.propertyValueList.size()__	};return,the,number,of,property,value,entries,in,the,list;public,int,size,return,this,property,value,list,size
MutablePropertyValues -> public int size();1519295386;Return the number of PropertyValue entries in the list.;public int size() {_		return this.propertyValueList.size()__	};return,the,number,of,property,value,entries,in,the,list;public,int,size,return,this,property,value,list,size
MutablePropertyValues -> public int size();1522359230;Return the number of PropertyValue entries in the list.;public int size() {_		return this.propertyValueList.size()__	};return,the,number,of,property,value,entries,in,the,list;public,int,size,return,this,property,value,list,size
MutablePropertyValues -> public int size();1530174524;Return the number of PropertyValue entries in the list.;public int size() {_		return this.propertyValueList.size()__	};return,the,number,of,property,value,entries,in,the,list;public,int,size,return,this,property,value,list,size
MutablePropertyValues -> public int size();1530190293;Return the number of PropertyValue entries in the list.;public int size() {_		return this.propertyValueList.size()__	};return,the,number,of,property,value,entries,in,the,list;public,int,size,return,this,property,value,list,size
MutablePropertyValues -> public int size();1530827996;Return the number of PropertyValue entries in the list.;public int size() {_		return this.propertyValueList.size()__	};return,the,number,of,property,value,entries,in,the,list;public,int,size,return,this,property,value,list,size
MutablePropertyValues -> public MutablePropertyValues(Map<?, ?> original);1328020251;Construct a new MutablePropertyValues object from a Map._@param original Map with property values keyed by property name Strings_@see #addPropertyValues(Map);public MutablePropertyValues(Map<?, ?> original) {_		_		_		if (original != null) {_			this.propertyValueList = new ArrayList<PropertyValue>(original.size())__			for (Map.Entry entry : original.entrySet()) {_				this.propertyValueList.add(new PropertyValue(entry.getKey().toString(), entry.getValue()))__			}_		}_		else {_			this.propertyValueList = new ArrayList<PropertyValue>(0)__		}_	};construct,a,new,mutable,property,values,object,from,a,map,param,original,map,with,property,values,keyed,by,property,name,strings,see,add,property,values,map;public,mutable,property,values,map,original,if,original,null,this,property,value,list,new,array,list,property,value,original,size,for,map,entry,entry,original,entry,set,this,property,value,list,add,new,property,value,entry,get,key,to,string,entry,get,value,else,this,property,value,list,new,array,list,property,value,0
MutablePropertyValues -> public MutablePropertyValues(Map<?, ?> original);1356735495;Construct a new MutablePropertyValues object from a Map._@param original Map with property values keyed by property name Strings_@see #addPropertyValues(Map);public MutablePropertyValues(Map<?, ?> original) {_		_		_		if (original != null) {_			this.propertyValueList = new ArrayList<PropertyValue>(original.size())__			for (Map.Entry entry : original.entrySet()) {_				this.propertyValueList.add(new PropertyValue(entry.getKey().toString(), entry.getValue()))__			}_		}_		else {_			this.propertyValueList = new ArrayList<PropertyValue>(0)__		}_	};construct,a,new,mutable,property,values,object,from,a,map,param,original,map,with,property,values,keyed,by,property,name,strings,see,add,property,values,map;public,mutable,property,values,map,original,if,original,null,this,property,value,list,new,array,list,property,value,original,size,for,map,entry,entry,original,entry,set,this,property,value,list,add,new,property,value,entry,get,key,to,string,entry,get,value,else,this,property,value,list,new,array,list,property,value,0
MutablePropertyValues -> public MutablePropertyValues(Map<?, ?> original);1357119239;Construct a new MutablePropertyValues object from a Map._@param original Map with property values keyed by property name Strings_@see #addPropertyValues(Map);public MutablePropertyValues(Map<?, ?> original) {_		_		_		if (original != null) {_			this.propertyValueList = new ArrayList<PropertyValue>(original.size())__			for (Map.Entry entry : original.entrySet()) {_				this.propertyValueList.add(new PropertyValue(entry.getKey().toString(), entry.getValue()))__			}_		}_		else {_			this.propertyValueList = new ArrayList<PropertyValue>(0)__		}_	};construct,a,new,mutable,property,values,object,from,a,map,param,original,map,with,property,values,keyed,by,property,name,strings,see,add,property,values,map;public,mutable,property,values,map,original,if,original,null,this,property,value,list,new,array,list,property,value,original,size,for,map,entry,entry,original,entry,set,this,property,value,list,add,new,property,value,entry,get,key,to,string,entry,get,value,else,this,property,value,list,new,array,list,property,value,0
MutablePropertyValues -> public MutablePropertyValues(Map<?, ?> original);1368482696;Construct a new MutablePropertyValues object from a Map._@param original Map with property values keyed by property name Strings_@see #addPropertyValues(Map);public MutablePropertyValues(Map<?, ?> original) {_		_		_		if (original != null) {_			this.propertyValueList = new ArrayList<PropertyValue>(original.size())__			for (Map.Entry entry : original.entrySet()) {_				this.propertyValueList.add(new PropertyValue(entry.getKey().toString(), entry.getValue()))__			}_		}_		else {_			this.propertyValueList = new ArrayList<PropertyValue>(0)__		}_	};construct,a,new,mutable,property,values,object,from,a,map,param,original,map,with,property,values,keyed,by,property,name,strings,see,add,property,values,map;public,mutable,property,values,map,original,if,original,null,this,property,value,list,new,array,list,property,value,original,size,for,map,entry,entry,original,entry,set,this,property,value,list,add,new,property,value,entry,get,key,to,string,entry,get,value,else,this,property,value,list,new,array,list,property,value,0
MutablePropertyValues -> public MutablePropertyValues(Map<?, ?> original);1382030648;Construct a new MutablePropertyValues object from a Map._@param original Map with property values keyed by property name Strings_@see #addPropertyValues(Map);public MutablePropertyValues(Map<?, ?> original) {_		_		_		if (original != null) {_			this.propertyValueList = new ArrayList<PropertyValue>(original.size())__			for (Map.Entry entry : original.entrySet()) {_				this.propertyValueList.add(new PropertyValue(entry.getKey().toString(), entry.getValue()))__			}_		}_		else {_			this.propertyValueList = new ArrayList<PropertyValue>(0)__		}_	};construct,a,new,mutable,property,values,object,from,a,map,param,original,map,with,property,values,keyed,by,property,name,strings,see,add,property,values,map;public,mutable,property,values,map,original,if,original,null,this,property,value,list,new,array,list,property,value,original,size,for,map,entry,entry,original,entry,set,this,property,value,list,add,new,property,value,entry,get,key,to,string,entry,get,value,else,this,property,value,list,new,array,list,property,value,0
MutablePropertyValues -> public MutablePropertyValues(Map<?, ?> original);1385412762;Construct a new MutablePropertyValues object from a Map._@param original Map with property values keyed by property name Strings_@see #addPropertyValues(Map);public MutablePropertyValues(Map<?, ?> original) {_		_		_		if (original != null) {_			this.propertyValueList = new ArrayList<PropertyValue>(original.size())__			for (Map.Entry<?, ?> entry : original.entrySet()) {_				this.propertyValueList.add(new PropertyValue(entry.getKey().toString(), entry.getValue()))__			}_		}_		else {_			this.propertyValueList = new ArrayList<PropertyValue>(0)__		}_	};construct,a,new,mutable,property,values,object,from,a,map,param,original,map,with,property,values,keyed,by,property,name,strings,see,add,property,values,map;public,mutable,property,values,map,original,if,original,null,this,property,value,list,new,array,list,property,value,original,size,for,map,entry,entry,original,entry,set,this,property,value,list,add,new,property,value,entry,get,key,to,string,entry,get,value,else,this,property,value,list,new,array,list,property,value,0
MutablePropertyValues -> public MutablePropertyValues(Map<?, ?> original);1419339720;Construct a new MutablePropertyValues object from a Map._@param original Map with property values keyed by property name Strings_@see #addPropertyValues(Map);public MutablePropertyValues(Map<?, ?> original) {_		_		_		if (original != null) {_			this.propertyValueList = new ArrayList<PropertyValue>(original.size())__			for (Map.Entry<?, ?> entry : original.entrySet()) {_				this.propertyValueList.add(new PropertyValue(entry.getKey().toString(), entry.getValue()))__			}_		}_		else {_			this.propertyValueList = new ArrayList<PropertyValue>(0)__		}_	};construct,a,new,mutable,property,values,object,from,a,map,param,original,map,with,property,values,keyed,by,property,name,strings,see,add,property,values,map;public,mutable,property,values,map,original,if,original,null,this,property,value,list,new,array,list,property,value,original,size,for,map,entry,entry,original,entry,set,this,property,value,list,add,new,property,value,entry,get,key,to,string,entry,get,value,else,this,property,value,list,new,array,list,property,value,0
MutablePropertyValues -> public MutablePropertyValues(Map<?, ?> original);1419881658;Construct a new MutablePropertyValues object from a Map._@param original Map with property values keyed by property name Strings_@see #addPropertyValues(Map);public MutablePropertyValues(Map<?, ?> original) {_		_		_		if (original != null) {_			this.propertyValueList = new ArrayList<PropertyValue>(original.size())__			for (Map.Entry<?, ?> entry : original.entrySet()) {_				this.propertyValueList.add(new PropertyValue(entry.getKey().toString(), entry.getValue()))__			}_		}_		else {_			this.propertyValueList = new ArrayList<PropertyValue>(0)__		}_	};construct,a,new,mutable,property,values,object,from,a,map,param,original,map,with,property,values,keyed,by,property,name,strings,see,add,property,values,map;public,mutable,property,values,map,original,if,original,null,this,property,value,list,new,array,list,property,value,original,size,for,map,entry,entry,original,entry,set,this,property,value,list,add,new,property,value,entry,get,key,to,string,entry,get,value,else,this,property,value,list,new,array,list,property,value,0
MutablePropertyValues -> public MutablePropertyValues(Map<?, ?> original);1467730834;Construct a new MutablePropertyValues object from a Map._@param original Map with property values keyed by property name Strings_@see #addPropertyValues(Map);public MutablePropertyValues(Map<?, ?> original) {_		_		_		if (original != null) {_			this.propertyValueList = new ArrayList<>(original.size())__			for (Map.Entry<?, ?> entry : original.entrySet()) {_				this.propertyValueList.add(new PropertyValue(entry.getKey().toString(), entry.getValue()))__			}_		}_		else {_			this.propertyValueList = new ArrayList<>(0)__		}_	};construct,a,new,mutable,property,values,object,from,a,map,param,original,map,with,property,values,keyed,by,property,name,strings,see,add,property,values,map;public,mutable,property,values,map,original,if,original,null,this,property,value,list,new,array,list,original,size,for,map,entry,entry,original,entry,set,this,property,value,list,add,new,property,value,entry,get,key,to,string,entry,get,value,else,this,property,value,list,new,array,list,0
MutablePropertyValues -> public MutablePropertyValues(Map<?, ?> original);1495868221;Construct a new MutablePropertyValues object from a Map._@param original Map with property values keyed by property name Strings_@see #addPropertyValues(Map);public MutablePropertyValues(Map<?, ?> original) {_		_		_		if (original != null) {_			this.propertyValueList = new ArrayList<>(original.size())__			for (Map.Entry<?, ?> entry : original.entrySet()) {_				this.propertyValueList.add(new PropertyValue(entry.getKey().toString(), entry.getValue()))__			}_		}_		else {_			this.propertyValueList = new ArrayList<>(0)__		}_	};construct,a,new,mutable,property,values,object,from,a,map,param,original,map,with,property,values,keyed,by,property,name,strings,see,add,property,values,map;public,mutable,property,values,map,original,if,original,null,this,property,value,list,new,array,list,original,size,for,map,entry,entry,original,entry,set,this,property,value,list,add,new,property,value,entry,get,key,to,string,entry,get,value,else,this,property,value,list,new,array,list,0
MutablePropertyValues -> private PropertyValue mergeIfRequired(PropertyValue newPv, PropertyValue currentPv);1328020251;Merges the value of the supplied 'new' {@link PropertyValue} with that of_the current {@link PropertyValue} if merging is supported and enabled._@see Mergeable;private PropertyValue mergeIfRequired(PropertyValue newPv, PropertyValue currentPv) {_		Object value = newPv.getValue()__		if (value instanceof Mergeable) {_			Mergeable mergeable = (Mergeable) value__			if (mergeable.isMergeEnabled()) {_				Object merged = mergeable.merge(currentPv.getValue())__				return new PropertyValue(newPv.getName(), merged)__			}_		}_		return newPv__	};merges,the,value,of,the,supplied,new,link,property,value,with,that,of,the,current,link,property,value,if,merging,is,supported,and,enabled,see,mergeable;private,property,value,merge,if,required,property,value,new,pv,property,value,current,pv,object,value,new,pv,get,value,if,value,instanceof,mergeable,mergeable,mergeable,mergeable,value,if,mergeable,is,merge,enabled,object,merged,mergeable,merge,current,pv,get,value,return,new,property,value,new,pv,get,name,merged,return,new,pv
MutablePropertyValues -> private PropertyValue mergeIfRequired(PropertyValue newPv, PropertyValue currentPv);1356735495;Merges the value of the supplied 'new' {@link PropertyValue} with that of_the current {@link PropertyValue} if merging is supported and enabled._@see Mergeable;private PropertyValue mergeIfRequired(PropertyValue newPv, PropertyValue currentPv) {_		Object value = newPv.getValue()__		if (value instanceof Mergeable) {_			Mergeable mergeable = (Mergeable) value__			if (mergeable.isMergeEnabled()) {_				Object merged = mergeable.merge(currentPv.getValue())__				return new PropertyValue(newPv.getName(), merged)__			}_		}_		return newPv__	};merges,the,value,of,the,supplied,new,link,property,value,with,that,of,the,current,link,property,value,if,merging,is,supported,and,enabled,see,mergeable;private,property,value,merge,if,required,property,value,new,pv,property,value,current,pv,object,value,new,pv,get,value,if,value,instanceof,mergeable,mergeable,mergeable,mergeable,value,if,mergeable,is,merge,enabled,object,merged,mergeable,merge,current,pv,get,value,return,new,property,value,new,pv,get,name,merged,return,new,pv
MutablePropertyValues -> private PropertyValue mergeIfRequired(PropertyValue newPv, PropertyValue currentPv);1357119239;Merges the value of the supplied 'new' {@link PropertyValue} with that of_the current {@link PropertyValue} if merging is supported and enabled._@see Mergeable;private PropertyValue mergeIfRequired(PropertyValue newPv, PropertyValue currentPv) {_		Object value = newPv.getValue()__		if (value instanceof Mergeable) {_			Mergeable mergeable = (Mergeable) value__			if (mergeable.isMergeEnabled()) {_				Object merged = mergeable.merge(currentPv.getValue())__				return new PropertyValue(newPv.getName(), merged)__			}_		}_		return newPv__	};merges,the,value,of,the,supplied,new,link,property,value,with,that,of,the,current,link,property,value,if,merging,is,supported,and,enabled,see,mergeable;private,property,value,merge,if,required,property,value,new,pv,property,value,current,pv,object,value,new,pv,get,value,if,value,instanceof,mergeable,mergeable,mergeable,mergeable,value,if,mergeable,is,merge,enabled,object,merged,mergeable,merge,current,pv,get,value,return,new,property,value,new,pv,get,name,merged,return,new,pv
MutablePropertyValues -> private PropertyValue mergeIfRequired(PropertyValue newPv, PropertyValue currentPv);1368482696;Merges the value of the supplied 'new' {@link PropertyValue} with that of_the current {@link PropertyValue} if merging is supported and enabled._@see Mergeable;private PropertyValue mergeIfRequired(PropertyValue newPv, PropertyValue currentPv) {_		Object value = newPv.getValue()__		if (value instanceof Mergeable) {_			Mergeable mergeable = (Mergeable) value__			if (mergeable.isMergeEnabled()) {_				Object merged = mergeable.merge(currentPv.getValue())__				return new PropertyValue(newPv.getName(), merged)__			}_		}_		return newPv__	};merges,the,value,of,the,supplied,new,link,property,value,with,that,of,the,current,link,property,value,if,merging,is,supported,and,enabled,see,mergeable;private,property,value,merge,if,required,property,value,new,pv,property,value,current,pv,object,value,new,pv,get,value,if,value,instanceof,mergeable,mergeable,mergeable,mergeable,value,if,mergeable,is,merge,enabled,object,merged,mergeable,merge,current,pv,get,value,return,new,property,value,new,pv,get,name,merged,return,new,pv
MutablePropertyValues -> private PropertyValue mergeIfRequired(PropertyValue newPv, PropertyValue currentPv);1382030648;Merges the value of the supplied 'new' {@link PropertyValue} with that of_the current {@link PropertyValue} if merging is supported and enabled._@see Mergeable;private PropertyValue mergeIfRequired(PropertyValue newPv, PropertyValue currentPv) {_		Object value = newPv.getValue()__		if (value instanceof Mergeable) {_			Mergeable mergeable = (Mergeable) value__			if (mergeable.isMergeEnabled()) {_				Object merged = mergeable.merge(currentPv.getValue())__				return new PropertyValue(newPv.getName(), merged)__			}_		}_		return newPv__	};merges,the,value,of,the,supplied,new,link,property,value,with,that,of,the,current,link,property,value,if,merging,is,supported,and,enabled,see,mergeable;private,property,value,merge,if,required,property,value,new,pv,property,value,current,pv,object,value,new,pv,get,value,if,value,instanceof,mergeable,mergeable,mergeable,mergeable,value,if,mergeable,is,merge,enabled,object,merged,mergeable,merge,current,pv,get,value,return,new,property,value,new,pv,get,name,merged,return,new,pv
MutablePropertyValues -> private PropertyValue mergeIfRequired(PropertyValue newPv, PropertyValue currentPv);1385412762;Merges the value of the supplied 'new' {@link PropertyValue} with that of_the current {@link PropertyValue} if merging is supported and enabled._@see Mergeable;private PropertyValue mergeIfRequired(PropertyValue newPv, PropertyValue currentPv) {_		Object value = newPv.getValue()__		if (value instanceof Mergeable) {_			Mergeable mergeable = (Mergeable) value__			if (mergeable.isMergeEnabled()) {_				Object merged = mergeable.merge(currentPv.getValue())__				return new PropertyValue(newPv.getName(), merged)__			}_		}_		return newPv__	};merges,the,value,of,the,supplied,new,link,property,value,with,that,of,the,current,link,property,value,if,merging,is,supported,and,enabled,see,mergeable;private,property,value,merge,if,required,property,value,new,pv,property,value,current,pv,object,value,new,pv,get,value,if,value,instanceof,mergeable,mergeable,mergeable,mergeable,value,if,mergeable,is,merge,enabled,object,merged,mergeable,merge,current,pv,get,value,return,new,property,value,new,pv,get,name,merged,return,new,pv
MutablePropertyValues -> private PropertyValue mergeIfRequired(PropertyValue newPv, PropertyValue currentPv);1419339720;Merges the value of the supplied 'new' {@link PropertyValue} with that of_the current {@link PropertyValue} if merging is supported and enabled._@see Mergeable;private PropertyValue mergeIfRequired(PropertyValue newPv, PropertyValue currentPv) {_		Object value = newPv.getValue()__		if (value instanceof Mergeable) {_			Mergeable mergeable = (Mergeable) value__			if (mergeable.isMergeEnabled()) {_				Object merged = mergeable.merge(currentPv.getValue())__				return new PropertyValue(newPv.getName(), merged)__			}_		}_		return newPv__	};merges,the,value,of,the,supplied,new,link,property,value,with,that,of,the,current,link,property,value,if,merging,is,supported,and,enabled,see,mergeable;private,property,value,merge,if,required,property,value,new,pv,property,value,current,pv,object,value,new,pv,get,value,if,value,instanceof,mergeable,mergeable,mergeable,mergeable,value,if,mergeable,is,merge,enabled,object,merged,mergeable,merge,current,pv,get,value,return,new,property,value,new,pv,get,name,merged,return,new,pv
MutablePropertyValues -> private PropertyValue mergeIfRequired(PropertyValue newPv, PropertyValue currentPv);1419881658;Merges the value of the supplied 'new' {@link PropertyValue} with that of_the current {@link PropertyValue} if merging is supported and enabled._@see Mergeable;private PropertyValue mergeIfRequired(PropertyValue newPv, PropertyValue currentPv) {_		Object value = newPv.getValue()__		if (value instanceof Mergeable) {_			Mergeable mergeable = (Mergeable) value__			if (mergeable.isMergeEnabled()) {_				Object merged = mergeable.merge(currentPv.getValue())__				return new PropertyValue(newPv.getName(), merged)__			}_		}_		return newPv__	};merges,the,value,of,the,supplied,new,link,property,value,with,that,of,the,current,link,property,value,if,merging,is,supported,and,enabled,see,mergeable;private,property,value,merge,if,required,property,value,new,pv,property,value,current,pv,object,value,new,pv,get,value,if,value,instanceof,mergeable,mergeable,mergeable,mergeable,value,if,mergeable,is,merge,enabled,object,merged,mergeable,merge,current,pv,get,value,return,new,property,value,new,pv,get,name,merged,return,new,pv
MutablePropertyValues -> private PropertyValue mergeIfRequired(PropertyValue newPv, PropertyValue currentPv);1467730834;Merges the value of the supplied 'new' {@link PropertyValue} with that of_the current {@link PropertyValue} if merging is supported and enabled._@see Mergeable;private PropertyValue mergeIfRequired(PropertyValue newPv, PropertyValue currentPv) {_		Object value = newPv.getValue()__		if (value instanceof Mergeable) {_			Mergeable mergeable = (Mergeable) value__			if (mergeable.isMergeEnabled()) {_				Object merged = mergeable.merge(currentPv.getValue())__				return new PropertyValue(newPv.getName(), merged)__			}_		}_		return newPv__	};merges,the,value,of,the,supplied,new,link,property,value,with,that,of,the,current,link,property,value,if,merging,is,supported,and,enabled,see,mergeable;private,property,value,merge,if,required,property,value,new,pv,property,value,current,pv,object,value,new,pv,get,value,if,value,instanceof,mergeable,mergeable,mergeable,mergeable,value,if,mergeable,is,merge,enabled,object,merged,mergeable,merge,current,pv,get,value,return,new,property,value,new,pv,get,name,merged,return,new,pv
MutablePropertyValues -> private PropertyValue mergeIfRequired(PropertyValue newPv, PropertyValue currentPv);1495868221;Merges the value of the supplied 'new' {@link PropertyValue} with that of_the current {@link PropertyValue} if merging is supported and enabled._@see Mergeable;private PropertyValue mergeIfRequired(PropertyValue newPv, PropertyValue currentPv) {_		Object value = newPv.getValue()__		if (value instanceof Mergeable) {_			Mergeable mergeable = (Mergeable) value__			if (mergeable.isMergeEnabled()) {_				Object merged = mergeable.merge(currentPv.getValue())__				return new PropertyValue(newPv.getName(), merged)__			}_		}_		return newPv__	};merges,the,value,of,the,supplied,new,link,property,value,with,that,of,the,current,link,property,value,if,merging,is,supported,and,enabled,see,mergeable;private,property,value,merge,if,required,property,value,new,pv,property,value,current,pv,object,value,new,pv,get,value,if,value,instanceof,mergeable,mergeable,mergeable,mergeable,value,if,mergeable,is,merge,enabled,object,merged,mergeable,merge,current,pv,get,value,return,new,property,value,new,pv,get,name,merged,return,new,pv
MutablePropertyValues -> private PropertyValue mergeIfRequired(PropertyValue newPv, PropertyValue currentPv);1496837955;Merges the value of the supplied 'new' {@link PropertyValue} with that of_the current {@link PropertyValue} if merging is supported and enabled._@see Mergeable;private PropertyValue mergeIfRequired(PropertyValue newPv, PropertyValue currentPv) {_		Object value = newPv.getValue()__		if (value instanceof Mergeable) {_			Mergeable mergeable = (Mergeable) value__			if (mergeable.isMergeEnabled()) {_				Object merged = mergeable.merge(currentPv.getValue())__				return new PropertyValue(newPv.getName(), merged)__			}_		}_		return newPv__	};merges,the,value,of,the,supplied,new,link,property,value,with,that,of,the,current,link,property,value,if,merging,is,supported,and,enabled,see,mergeable;private,property,value,merge,if,required,property,value,new,pv,property,value,current,pv,object,value,new,pv,get,value,if,value,instanceof,mergeable,mergeable,mergeable,mergeable,value,if,mergeable,is,merge,enabled,object,merged,mergeable,merge,current,pv,get,value,return,new,property,value,new,pv,get,name,merged,return,new,pv
MutablePropertyValues -> private PropertyValue mergeIfRequired(PropertyValue newPv, PropertyValue currentPv);1497250713;Merges the value of the supplied 'new' {@link PropertyValue} with that of_the current {@link PropertyValue} if merging is supported and enabled._@see Mergeable;private PropertyValue mergeIfRequired(PropertyValue newPv, PropertyValue currentPv) {_		Object value = newPv.getValue()__		if (value instanceof Mergeable) {_			Mergeable mergeable = (Mergeable) value__			if (mergeable.isMergeEnabled()) {_				Object merged = mergeable.merge(currentPv.getValue())__				return new PropertyValue(newPv.getName(), merged)__			}_		}_		return newPv__	};merges,the,value,of,the,supplied,new,link,property,value,with,that,of,the,current,link,property,value,if,merging,is,supported,and,enabled,see,mergeable;private,property,value,merge,if,required,property,value,new,pv,property,value,current,pv,object,value,new,pv,get,value,if,value,instanceof,mergeable,mergeable,mergeable,mergeable,value,if,mergeable,is,merge,enabled,object,merged,mergeable,merge,current,pv,get,value,return,new,property,value,new,pv,get,name,merged,return,new,pv
MutablePropertyValues -> private PropertyValue mergeIfRequired(PropertyValue newPv, PropertyValue currentPv);1498780456;Merges the value of the supplied 'new' {@link PropertyValue} with that of_the current {@link PropertyValue} if merging is supported and enabled._@see Mergeable;private PropertyValue mergeIfRequired(PropertyValue newPv, PropertyValue currentPv) {_		Object value = newPv.getValue()__		if (value instanceof Mergeable) {_			Mergeable mergeable = (Mergeable) value__			if (mergeable.isMergeEnabled()) {_				Object merged = mergeable.merge(currentPv.getValue())__				return new PropertyValue(newPv.getName(), merged)__			}_		}_		return newPv__	};merges,the,value,of,the,supplied,new,link,property,value,with,that,of,the,current,link,property,value,if,merging,is,supported,and,enabled,see,mergeable;private,property,value,merge,if,required,property,value,new,pv,property,value,current,pv,object,value,new,pv,get,value,if,value,instanceof,mergeable,mergeable,mergeable,mergeable,value,if,mergeable,is,merge,enabled,object,merged,mergeable,merge,current,pv,get,value,return,new,property,value,new,pv,get,name,merged,return,new,pv
MutablePropertyValues -> private PropertyValue mergeIfRequired(PropertyValue newPv, PropertyValue currentPv);1502974979;Merges the value of the supplied 'new' {@link PropertyValue} with that of_the current {@link PropertyValue} if merging is supported and enabled._@see Mergeable;private PropertyValue mergeIfRequired(PropertyValue newPv, PropertyValue currentPv) {_		Object value = newPv.getValue()__		if (value instanceof Mergeable) {_			Mergeable mergeable = (Mergeable) value__			if (mergeable.isMergeEnabled()) {_				Object merged = mergeable.merge(currentPv.getValue())__				return new PropertyValue(newPv.getName(), merged)__			}_		}_		return newPv__	};merges,the,value,of,the,supplied,new,link,property,value,with,that,of,the,current,link,property,value,if,merging,is,supported,and,enabled,see,mergeable;private,property,value,merge,if,required,property,value,new,pv,property,value,current,pv,object,value,new,pv,get,value,if,value,instanceof,mergeable,mergeable,mergeable,mergeable,value,if,mergeable,is,merge,enabled,object,merged,mergeable,merge,current,pv,get,value,return,new,property,value,new,pv,get,name,merged,return,new,pv
MutablePropertyValues -> private PropertyValue mergeIfRequired(PropertyValue newPv, PropertyValue currentPv);1510606271;Merges the value of the supplied 'new' {@link PropertyValue} with that of_the current {@link PropertyValue} if merging is supported and enabled._@see Mergeable;private PropertyValue mergeIfRequired(PropertyValue newPv, PropertyValue currentPv) {_		Object value = newPv.getValue()__		if (value instanceof Mergeable) {_			Mergeable mergeable = (Mergeable) value__			if (mergeable.isMergeEnabled()) {_				Object merged = mergeable.merge(currentPv.getValue())__				return new PropertyValue(newPv.getName(), merged)__			}_		}_		return newPv__	};merges,the,value,of,the,supplied,new,link,property,value,with,that,of,the,current,link,property,value,if,merging,is,supported,and,enabled,see,mergeable;private,property,value,merge,if,required,property,value,new,pv,property,value,current,pv,object,value,new,pv,get,value,if,value,instanceof,mergeable,mergeable,mergeable,mergeable,value,if,mergeable,is,merge,enabled,object,merged,mergeable,merge,current,pv,get,value,return,new,property,value,new,pv,get,name,merged,return,new,pv
MutablePropertyValues -> private PropertyValue mergeIfRequired(PropertyValue newPv, PropertyValue currentPv);1519295386;Merges the value of the supplied 'new' {@link PropertyValue} with that of_the current {@link PropertyValue} if merging is supported and enabled._@see Mergeable;private PropertyValue mergeIfRequired(PropertyValue newPv, PropertyValue currentPv) {_		Object value = newPv.getValue()__		if (value instanceof Mergeable) {_			Mergeable mergeable = (Mergeable) value__			if (mergeable.isMergeEnabled()) {_				Object merged = mergeable.merge(currentPv.getValue())__				return new PropertyValue(newPv.getName(), merged)__			}_		}_		return newPv__	};merges,the,value,of,the,supplied,new,link,property,value,with,that,of,the,current,link,property,value,if,merging,is,supported,and,enabled,see,mergeable;private,property,value,merge,if,required,property,value,new,pv,property,value,current,pv,object,value,new,pv,get,value,if,value,instanceof,mergeable,mergeable,mergeable,mergeable,value,if,mergeable,is,merge,enabled,object,merged,mergeable,merge,current,pv,get,value,return,new,property,value,new,pv,get,name,merged,return,new,pv
MutablePropertyValues -> private PropertyValue mergeIfRequired(PropertyValue newPv, PropertyValue currentPv);1522359230;Merges the value of the supplied 'new' {@link PropertyValue} with that of_the current {@link PropertyValue} if merging is supported and enabled._@see Mergeable;private PropertyValue mergeIfRequired(PropertyValue newPv, PropertyValue currentPv) {_		Object value = newPv.getValue()__		if (value instanceof Mergeable) {_			Mergeable mergeable = (Mergeable) value__			if (mergeable.isMergeEnabled()) {_				Object merged = mergeable.merge(currentPv.getValue())__				return new PropertyValue(newPv.getName(), merged)__			}_		}_		return newPv__	};merges,the,value,of,the,supplied,new,link,property,value,with,that,of,the,current,link,property,value,if,merging,is,supported,and,enabled,see,mergeable;private,property,value,merge,if,required,property,value,new,pv,property,value,current,pv,object,value,new,pv,get,value,if,value,instanceof,mergeable,mergeable,mergeable,mergeable,value,if,mergeable,is,merge,enabled,object,merged,mergeable,merge,current,pv,get,value,return,new,property,value,new,pv,get,name,merged,return,new,pv
MutablePropertyValues -> private PropertyValue mergeIfRequired(PropertyValue newPv, PropertyValue currentPv);1530174524;Merges the value of the supplied 'new' {@link PropertyValue} with that of_the current {@link PropertyValue} if merging is supported and enabled._@see Mergeable;private PropertyValue mergeIfRequired(PropertyValue newPv, PropertyValue currentPv) {_		Object value = newPv.getValue()__		if (value instanceof Mergeable) {_			Mergeable mergeable = (Mergeable) value__			if (mergeable.isMergeEnabled()) {_				Object merged = mergeable.merge(currentPv.getValue())__				return new PropertyValue(newPv.getName(), merged)__			}_		}_		return newPv__	};merges,the,value,of,the,supplied,new,link,property,value,with,that,of,the,current,link,property,value,if,merging,is,supported,and,enabled,see,mergeable;private,property,value,merge,if,required,property,value,new,pv,property,value,current,pv,object,value,new,pv,get,value,if,value,instanceof,mergeable,mergeable,mergeable,mergeable,value,if,mergeable,is,merge,enabled,object,merged,mergeable,merge,current,pv,get,value,return,new,property,value,new,pv,get,name,merged,return,new,pv
MutablePropertyValues -> private PropertyValue mergeIfRequired(PropertyValue newPv, PropertyValue currentPv);1530190293;Merges the value of the supplied 'new' {@link PropertyValue} with that of_the current {@link PropertyValue} if merging is supported and enabled._@see Mergeable;private PropertyValue mergeIfRequired(PropertyValue newPv, PropertyValue currentPv) {_		Object value = newPv.getValue()__		if (value instanceof Mergeable) {_			Mergeable mergeable = (Mergeable) value__			if (mergeable.isMergeEnabled()) {_				Object merged = mergeable.merge(currentPv.getValue())__				return new PropertyValue(newPv.getName(), merged)__			}_		}_		return newPv__	};merges,the,value,of,the,supplied,new,link,property,value,with,that,of,the,current,link,property,value,if,merging,is,supported,and,enabled,see,mergeable;private,property,value,merge,if,required,property,value,new,pv,property,value,current,pv,object,value,new,pv,get,value,if,value,instanceof,mergeable,mergeable,mergeable,mergeable,value,if,mergeable,is,merge,enabled,object,merged,mergeable,merge,current,pv,get,value,return,new,property,value,new,pv,get,name,merged,return,new,pv
MutablePropertyValues -> private PropertyValue mergeIfRequired(PropertyValue newPv, PropertyValue currentPv);1530827996;Merges the value of the supplied 'new' {@link PropertyValue} with that of_the current {@link PropertyValue} if merging is supported and enabled._@see Mergeable;private PropertyValue mergeIfRequired(PropertyValue newPv, PropertyValue currentPv) {_		Object value = newPv.getValue()__		if (value instanceof Mergeable) {_			Mergeable mergeable = (Mergeable) value__			if (mergeable.isMergeEnabled()) {_				Object merged = mergeable.merge(currentPv.getValue())__				return new PropertyValue(newPv.getName(), merged)__			}_		}_		return newPv__	};merges,the,value,of,the,supplied,new,link,property,value,with,that,of,the,current,link,property,value,if,merging,is,supported,and,enabled,see,mergeable;private,property,value,merge,if,required,property,value,new,pv,property,value,current,pv,object,value,new,pv,get,value,if,value,instanceof,mergeable,mergeable,mergeable,mergeable,value,if,mergeable,is,merge,enabled,object,merged,mergeable,merge,current,pv,get,value,return,new,property,value,new,pv,get,name,merged,return,new,pv
MutablePropertyValues -> public MutablePropertyValues add(String propertyName, Object propertyValue);1328020251;Add a PropertyValue object, replacing any existing one for the_corresponding property or getting merged with it (if applicable)._@param propertyName name of the property_@param propertyValue value of the property_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues add(String propertyName, Object propertyValue) {_		addPropertyValue(new PropertyValue(propertyName, propertyValue))__		return this__	};add,a,property,value,object,replacing,any,existing,one,for,the,corresponding,property,or,getting,merged,with,it,if,applicable,param,property,name,name,of,the,property,param,property,value,value,of,the,property,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,string,property,name,object,property,value,add,property,value,new,property,value,property,name,property,value,return,this
MutablePropertyValues -> public MutablePropertyValues add(String propertyName, Object propertyValue);1356735495;Add a PropertyValue object, replacing any existing one for the_corresponding property or getting merged with it (if applicable)._@param propertyName name of the property_@param propertyValue value of the property_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues add(String propertyName, Object propertyValue) {_		addPropertyValue(new PropertyValue(propertyName, propertyValue))__		return this__	};add,a,property,value,object,replacing,any,existing,one,for,the,corresponding,property,or,getting,merged,with,it,if,applicable,param,property,name,name,of,the,property,param,property,value,value,of,the,property,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,string,property,name,object,property,value,add,property,value,new,property,value,property,name,property,value,return,this
MutablePropertyValues -> public MutablePropertyValues add(String propertyName, Object propertyValue);1357119239;Add a PropertyValue object, replacing any existing one for the_corresponding property or getting merged with it (if applicable)._@param propertyName name of the property_@param propertyValue value of the property_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues add(String propertyName, Object propertyValue) {_		addPropertyValue(new PropertyValue(propertyName, propertyValue))__		return this__	};add,a,property,value,object,replacing,any,existing,one,for,the,corresponding,property,or,getting,merged,with,it,if,applicable,param,property,name,name,of,the,property,param,property,value,value,of,the,property,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,string,property,name,object,property,value,add,property,value,new,property,value,property,name,property,value,return,this
MutablePropertyValues -> public MutablePropertyValues add(String propertyName, Object propertyValue);1368482696;Add a PropertyValue object, replacing any existing one for the_corresponding property or getting merged with it (if applicable)._@param propertyName name of the property_@param propertyValue value of the property_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues add(String propertyName, Object propertyValue) {_		addPropertyValue(new PropertyValue(propertyName, propertyValue))__		return this__	};add,a,property,value,object,replacing,any,existing,one,for,the,corresponding,property,or,getting,merged,with,it,if,applicable,param,property,name,name,of,the,property,param,property,value,value,of,the,property,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,string,property,name,object,property,value,add,property,value,new,property,value,property,name,property,value,return,this
MutablePropertyValues -> public MutablePropertyValues add(String propertyName, Object propertyValue);1382030648;Add a PropertyValue object, replacing any existing one for the_corresponding property or getting merged with it (if applicable)._@param propertyName name of the property_@param propertyValue value of the property_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues add(String propertyName, Object propertyValue) {_		addPropertyValue(new PropertyValue(propertyName, propertyValue))__		return this__	};add,a,property,value,object,replacing,any,existing,one,for,the,corresponding,property,or,getting,merged,with,it,if,applicable,param,property,name,name,of,the,property,param,property,value,value,of,the,property,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,string,property,name,object,property,value,add,property,value,new,property,value,property,name,property,value,return,this
MutablePropertyValues -> public MutablePropertyValues add(String propertyName, Object propertyValue);1385412762;Add a PropertyValue object, replacing any existing one for the_corresponding property or getting merged with it (if applicable)._@param propertyName name of the property_@param propertyValue value of the property_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues add(String propertyName, Object propertyValue) {_		addPropertyValue(new PropertyValue(propertyName, propertyValue))__		return this__	};add,a,property,value,object,replacing,any,existing,one,for,the,corresponding,property,or,getting,merged,with,it,if,applicable,param,property,name,name,of,the,property,param,property,value,value,of,the,property,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,string,property,name,object,property,value,add,property,value,new,property,value,property,name,property,value,return,this
MutablePropertyValues -> public MutablePropertyValues add(String propertyName, Object propertyValue);1419339720;Add a PropertyValue object, replacing any existing one for the_corresponding property or getting merged with it (if applicable)._@param propertyName name of the property_@param propertyValue value of the property_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues add(String propertyName, Object propertyValue) {_		addPropertyValue(new PropertyValue(propertyName, propertyValue))__		return this__	};add,a,property,value,object,replacing,any,existing,one,for,the,corresponding,property,or,getting,merged,with,it,if,applicable,param,property,name,name,of,the,property,param,property,value,value,of,the,property,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,string,property,name,object,property,value,add,property,value,new,property,value,property,name,property,value,return,this
MutablePropertyValues -> public MutablePropertyValues add(String propertyName, Object propertyValue);1419881658;Add a PropertyValue object, replacing any existing one for the_corresponding property or getting merged with it (if applicable)._@param propertyName name of the property_@param propertyValue value of the property_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues add(String propertyName, Object propertyValue) {_		addPropertyValue(new PropertyValue(propertyName, propertyValue))__		return this__	};add,a,property,value,object,replacing,any,existing,one,for,the,corresponding,property,or,getting,merged,with,it,if,applicable,param,property,name,name,of,the,property,param,property,value,value,of,the,property,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,string,property,name,object,property,value,add,property,value,new,property,value,property,name,property,value,return,this
MutablePropertyValues -> public MutablePropertyValues add(String propertyName, Object propertyValue);1467730834;Add a PropertyValue object, replacing any existing one for the_corresponding property or getting merged with it (if applicable)._@param propertyName name of the property_@param propertyValue value of the property_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues add(String propertyName, Object propertyValue) {_		addPropertyValue(new PropertyValue(propertyName, propertyValue))__		return this__	};add,a,property,value,object,replacing,any,existing,one,for,the,corresponding,property,or,getting,merged,with,it,if,applicable,param,property,name,name,of,the,property,param,property,value,value,of,the,property,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,string,property,name,object,property,value,add,property,value,new,property,value,property,name,property,value,return,this
MutablePropertyValues -> public MutablePropertyValues add(String propertyName, Object propertyValue);1495868221;Add a PropertyValue object, replacing any existing one for the_corresponding property or getting merged with it (if applicable)._@param propertyName name of the property_@param propertyValue value of the property_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues add(String propertyName, Object propertyValue) {_		addPropertyValue(new PropertyValue(propertyName, propertyValue))__		return this__	};add,a,property,value,object,replacing,any,existing,one,for,the,corresponding,property,or,getting,merged,with,it,if,applicable,param,property,name,name,of,the,property,param,property,value,value,of,the,property,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,string,property,name,object,property,value,add,property,value,new,property,value,property,name,property,value,return,this
MutablePropertyValues -> public void addPropertyValue(String propertyName, Object propertyValue);1328020251;Overloaded version of <code>addPropertyValue</code> that takes_a property name and a property value._<p>Note: As of Spring 3.0, we recommend using the more concise_and chaining-capable variant {@link #add}._@param propertyName name of the property_@param propertyValue value of the property_@see #addPropertyValue(PropertyValue);public void addPropertyValue(String propertyName, Object propertyValue) {_		addPropertyValue(new PropertyValue(propertyName, propertyValue))__	};overloaded,version,of,code,add,property,value,code,that,takes,a,property,name,and,a,property,value,p,note,as,of,spring,3,0,we,recommend,using,the,more,concise,and,chaining,capable,variant,link,add,param,property,name,name,of,the,property,param,property,value,value,of,the,property,see,add,property,value,property,value;public,void,add,property,value,string,property,name,object,property,value,add,property,value,new,property,value,property,name,property,value
MutablePropertyValues -> public void addPropertyValue(String propertyName, Object propertyValue);1356735495;Overloaded version of {@code addPropertyValue} that takes_a property name and a property value._<p>Note: As of Spring 3.0, we recommend using the more concise_and chaining-capable variant {@link #add}._@param propertyName name of the property_@param propertyValue value of the property_@see #addPropertyValue(PropertyValue);public void addPropertyValue(String propertyName, Object propertyValue) {_		addPropertyValue(new PropertyValue(propertyName, propertyValue))__	};overloaded,version,of,code,add,property,value,that,takes,a,property,name,and,a,property,value,p,note,as,of,spring,3,0,we,recommend,using,the,more,concise,and,chaining,capable,variant,link,add,param,property,name,name,of,the,property,param,property,value,value,of,the,property,see,add,property,value,property,value;public,void,add,property,value,string,property,name,object,property,value,add,property,value,new,property,value,property,name,property,value
MutablePropertyValues -> public void addPropertyValue(String propertyName, Object propertyValue);1357119239;Overloaded version of {@code addPropertyValue} that takes_a property name and a property value._<p>Note: As of Spring 3.0, we recommend using the more concise_and chaining-capable variant {@link #add}._@param propertyName name of the property_@param propertyValue value of the property_@see #addPropertyValue(PropertyValue);public void addPropertyValue(String propertyName, Object propertyValue) {_		addPropertyValue(new PropertyValue(propertyName, propertyValue))__	};overloaded,version,of,code,add,property,value,that,takes,a,property,name,and,a,property,value,p,note,as,of,spring,3,0,we,recommend,using,the,more,concise,and,chaining,capable,variant,link,add,param,property,name,name,of,the,property,param,property,value,value,of,the,property,see,add,property,value,property,value;public,void,add,property,value,string,property,name,object,property,value,add,property,value,new,property,value,property,name,property,value
MutablePropertyValues -> public void addPropertyValue(String propertyName, Object propertyValue);1368482696;Overloaded version of {@code addPropertyValue} that takes_a property name and a property value._<p>Note: As of Spring 3.0, we recommend using the more concise_and chaining-capable variant {@link #add}._@param propertyName name of the property_@param propertyValue value of the property_@see #addPropertyValue(PropertyValue);public void addPropertyValue(String propertyName, Object propertyValue) {_		addPropertyValue(new PropertyValue(propertyName, propertyValue))__	};overloaded,version,of,code,add,property,value,that,takes,a,property,name,and,a,property,value,p,note,as,of,spring,3,0,we,recommend,using,the,more,concise,and,chaining,capable,variant,link,add,param,property,name,name,of,the,property,param,property,value,value,of,the,property,see,add,property,value,property,value;public,void,add,property,value,string,property,name,object,property,value,add,property,value,new,property,value,property,name,property,value
MutablePropertyValues -> public void addPropertyValue(String propertyName, Object propertyValue);1382030648;Overloaded version of {@code addPropertyValue} that takes_a property name and a property value._<p>Note: As of Spring 3.0, we recommend using the more concise_and chaining-capable variant {@link #add}._@param propertyName name of the property_@param propertyValue value of the property_@see #addPropertyValue(PropertyValue);public void addPropertyValue(String propertyName, Object propertyValue) {_		addPropertyValue(new PropertyValue(propertyName, propertyValue))__	};overloaded,version,of,code,add,property,value,that,takes,a,property,name,and,a,property,value,p,note,as,of,spring,3,0,we,recommend,using,the,more,concise,and,chaining,capable,variant,link,add,param,property,name,name,of,the,property,param,property,value,value,of,the,property,see,add,property,value,property,value;public,void,add,property,value,string,property,name,object,property,value,add,property,value,new,property,value,property,name,property,value
MutablePropertyValues -> public void addPropertyValue(String propertyName, Object propertyValue);1385412762;Overloaded version of {@code addPropertyValue} that takes_a property name and a property value._<p>Note: As of Spring 3.0, we recommend using the more concise_and chaining-capable variant {@link #add}._@param propertyName name of the property_@param propertyValue value of the property_@see #addPropertyValue(PropertyValue);public void addPropertyValue(String propertyName, Object propertyValue) {_		addPropertyValue(new PropertyValue(propertyName, propertyValue))__	};overloaded,version,of,code,add,property,value,that,takes,a,property,name,and,a,property,value,p,note,as,of,spring,3,0,we,recommend,using,the,more,concise,and,chaining,capable,variant,link,add,param,property,name,name,of,the,property,param,property,value,value,of,the,property,see,add,property,value,property,value;public,void,add,property,value,string,property,name,object,property,value,add,property,value,new,property,value,property,name,property,value
MutablePropertyValues -> public void addPropertyValue(String propertyName, Object propertyValue);1419339720;Overloaded version of {@code addPropertyValue} that takes_a property name and a property value._<p>Note: As of Spring 3.0, we recommend using the more concise_and chaining-capable variant {@link #add}._@param propertyName name of the property_@param propertyValue value of the property_@see #addPropertyValue(PropertyValue);public void addPropertyValue(String propertyName, Object propertyValue) {_		addPropertyValue(new PropertyValue(propertyName, propertyValue))__	};overloaded,version,of,code,add,property,value,that,takes,a,property,name,and,a,property,value,p,note,as,of,spring,3,0,we,recommend,using,the,more,concise,and,chaining,capable,variant,link,add,param,property,name,name,of,the,property,param,property,value,value,of,the,property,see,add,property,value,property,value;public,void,add,property,value,string,property,name,object,property,value,add,property,value,new,property,value,property,name,property,value
MutablePropertyValues -> public void addPropertyValue(String propertyName, Object propertyValue);1419881658;Overloaded version of {@code addPropertyValue} that takes_a property name and a property value._<p>Note: As of Spring 3.0, we recommend using the more concise_and chaining-capable variant {@link #add}._@param propertyName name of the property_@param propertyValue value of the property_@see #addPropertyValue(PropertyValue);public void addPropertyValue(String propertyName, Object propertyValue) {_		addPropertyValue(new PropertyValue(propertyName, propertyValue))__	};overloaded,version,of,code,add,property,value,that,takes,a,property,name,and,a,property,value,p,note,as,of,spring,3,0,we,recommend,using,the,more,concise,and,chaining,capable,variant,link,add,param,property,name,name,of,the,property,param,property,value,value,of,the,property,see,add,property,value,property,value;public,void,add,property,value,string,property,name,object,property,value,add,property,value,new,property,value,property,name,property,value
MutablePropertyValues -> public void addPropertyValue(String propertyName, Object propertyValue);1467730834;Overloaded version of {@code addPropertyValue} that takes_a property name and a property value._<p>Note: As of Spring 3.0, we recommend using the more concise_and chaining-capable variant {@link #add}._@param propertyName name of the property_@param propertyValue value of the property_@see #addPropertyValue(PropertyValue);public void addPropertyValue(String propertyName, Object propertyValue) {_		addPropertyValue(new PropertyValue(propertyName, propertyValue))__	};overloaded,version,of,code,add,property,value,that,takes,a,property,name,and,a,property,value,p,note,as,of,spring,3,0,we,recommend,using,the,more,concise,and,chaining,capable,variant,link,add,param,property,name,name,of,the,property,param,property,value,value,of,the,property,see,add,property,value,property,value;public,void,add,property,value,string,property,name,object,property,value,add,property,value,new,property,value,property,name,property,value
MutablePropertyValues -> public void addPropertyValue(String propertyName, Object propertyValue);1495868221;Overloaded version of {@code addPropertyValue} that takes_a property name and a property value._<p>Note: As of Spring 3.0, we recommend using the more concise_and chaining-capable variant {@link #add}._@param propertyName name of the property_@param propertyValue value of the property_@see #addPropertyValue(PropertyValue);public void addPropertyValue(String propertyName, Object propertyValue) {_		addPropertyValue(new PropertyValue(propertyName, propertyValue))__	};overloaded,version,of,code,add,property,value,that,takes,a,property,name,and,a,property,value,p,note,as,of,spring,3,0,we,recommend,using,the,more,concise,and,chaining,capable,variant,link,add,param,property,name,name,of,the,property,param,property,value,value,of,the,property,see,add,property,value,property,value;public,void,add,property,value,string,property,name,object,property,value,add,property,value,new,property,value,property,name,property,value
MutablePropertyValues -> public void addPropertyValue(String propertyName, Object propertyValue);1496837955;Overloaded version of {@code addPropertyValue} that takes_a property name and a property value._<p>Note: As of Spring 3.0, we recommend using the more concise_and chaining-capable variant {@link #add}._@param propertyName name of the property_@param propertyValue value of the property_@see #addPropertyValue(PropertyValue);public void addPropertyValue(String propertyName, Object propertyValue) {_		addPropertyValue(new PropertyValue(propertyName, propertyValue))__	};overloaded,version,of,code,add,property,value,that,takes,a,property,name,and,a,property,value,p,note,as,of,spring,3,0,we,recommend,using,the,more,concise,and,chaining,capable,variant,link,add,param,property,name,name,of,the,property,param,property,value,value,of,the,property,see,add,property,value,property,value;public,void,add,property,value,string,property,name,object,property,value,add,property,value,new,property,value,property,name,property,value
MutablePropertyValues -> public void addPropertyValue(String propertyName, Object propertyValue);1497250713;Overloaded version of {@code addPropertyValue} that takes_a property name and a property value._<p>Note: As of Spring 3.0, we recommend using the more concise_and chaining-capable variant {@link #add}._@param propertyName name of the property_@param propertyValue value of the property_@see #addPropertyValue(PropertyValue);public void addPropertyValue(String propertyName, Object propertyValue) {_		addPropertyValue(new PropertyValue(propertyName, propertyValue))__	};overloaded,version,of,code,add,property,value,that,takes,a,property,name,and,a,property,value,p,note,as,of,spring,3,0,we,recommend,using,the,more,concise,and,chaining,capable,variant,link,add,param,property,name,name,of,the,property,param,property,value,value,of,the,property,see,add,property,value,property,value;public,void,add,property,value,string,property,name,object,property,value,add,property,value,new,property,value,property,name,property,value
MutablePropertyValues -> public void addPropertyValue(String propertyName, Object propertyValue);1498780456;Overloaded version of {@code addPropertyValue} that takes_a property name and a property value._<p>Note: As of Spring 3.0, we recommend using the more concise_and chaining-capable variant {@link #add}._@param propertyName name of the property_@param propertyValue value of the property_@see #addPropertyValue(PropertyValue);public void addPropertyValue(String propertyName, Object propertyValue) {_		addPropertyValue(new PropertyValue(propertyName, propertyValue))__	};overloaded,version,of,code,add,property,value,that,takes,a,property,name,and,a,property,value,p,note,as,of,spring,3,0,we,recommend,using,the,more,concise,and,chaining,capable,variant,link,add,param,property,name,name,of,the,property,param,property,value,value,of,the,property,see,add,property,value,property,value;public,void,add,property,value,string,property,name,object,property,value,add,property,value,new,property,value,property,name,property,value
MutablePropertyValues -> public void addPropertyValue(String propertyName, Object propertyValue);1502974979;Overloaded version of {@code addPropertyValue} that takes_a property name and a property value._<p>Note: As of Spring 3.0, we recommend using the more concise_and chaining-capable variant {@link #add}._@param propertyName name of the property_@param propertyValue value of the property_@see #addPropertyValue(PropertyValue);public void addPropertyValue(String propertyName, Object propertyValue) {_		addPropertyValue(new PropertyValue(propertyName, propertyValue))__	};overloaded,version,of,code,add,property,value,that,takes,a,property,name,and,a,property,value,p,note,as,of,spring,3,0,we,recommend,using,the,more,concise,and,chaining,capable,variant,link,add,param,property,name,name,of,the,property,param,property,value,value,of,the,property,see,add,property,value,property,value;public,void,add,property,value,string,property,name,object,property,value,add,property,value,new,property,value,property,name,property,value
MutablePropertyValues -> public void addPropertyValue(String propertyName, Object propertyValue);1510606271;Overloaded version of {@code addPropertyValue} that takes_a property name and a property value._<p>Note: As of Spring 3.0, we recommend using the more concise_and chaining-capable variant {@link #add}._@param propertyName name of the property_@param propertyValue value of the property_@see #addPropertyValue(PropertyValue);public void addPropertyValue(String propertyName, Object propertyValue) {_		addPropertyValue(new PropertyValue(propertyName, propertyValue))__	};overloaded,version,of,code,add,property,value,that,takes,a,property,name,and,a,property,value,p,note,as,of,spring,3,0,we,recommend,using,the,more,concise,and,chaining,capable,variant,link,add,param,property,name,name,of,the,property,param,property,value,value,of,the,property,see,add,property,value,property,value;public,void,add,property,value,string,property,name,object,property,value,add,property,value,new,property,value,property,name,property,value
MutablePropertyValues -> public void addPropertyValue(String propertyName, Object propertyValue);1519295386;Overloaded version of {@code addPropertyValue} that takes_a property name and a property value._<p>Note: As of Spring 3.0, we recommend using the more concise_and chaining-capable variant {@link #add}._@param propertyName name of the property_@param propertyValue value of the property_@see #addPropertyValue(PropertyValue);public void addPropertyValue(String propertyName, Object propertyValue) {_		addPropertyValue(new PropertyValue(propertyName, propertyValue))__	};overloaded,version,of,code,add,property,value,that,takes,a,property,name,and,a,property,value,p,note,as,of,spring,3,0,we,recommend,using,the,more,concise,and,chaining,capable,variant,link,add,param,property,name,name,of,the,property,param,property,value,value,of,the,property,see,add,property,value,property,value;public,void,add,property,value,string,property,name,object,property,value,add,property,value,new,property,value,property,name,property,value
MutablePropertyValues -> public void addPropertyValue(String propertyName, Object propertyValue);1522359230;Overloaded version of {@code addPropertyValue} that takes_a property name and a property value._<p>Note: As of Spring 3.0, we recommend using the more concise_and chaining-capable variant {@link #add}._@param propertyName name of the property_@param propertyValue value of the property_@see #addPropertyValue(PropertyValue);public void addPropertyValue(String propertyName, Object propertyValue) {_		addPropertyValue(new PropertyValue(propertyName, propertyValue))__	};overloaded,version,of,code,add,property,value,that,takes,a,property,name,and,a,property,value,p,note,as,of,spring,3,0,we,recommend,using,the,more,concise,and,chaining,capable,variant,link,add,param,property,name,name,of,the,property,param,property,value,value,of,the,property,see,add,property,value,property,value;public,void,add,property,value,string,property,name,object,property,value,add,property,value,new,property,value,property,name,property,value
MutablePropertyValues -> public void addPropertyValue(String propertyName, Object propertyValue);1530174524;Overloaded version of {@code addPropertyValue} that takes_a property name and a property value._<p>Note: As of Spring 3.0, we recommend using the more concise_and chaining-capable variant {@link #add}._@param propertyName name of the property_@param propertyValue value of the property_@see #addPropertyValue(PropertyValue);public void addPropertyValue(String propertyName, Object propertyValue) {_		addPropertyValue(new PropertyValue(propertyName, propertyValue))__	};overloaded,version,of,code,add,property,value,that,takes,a,property,name,and,a,property,value,p,note,as,of,spring,3,0,we,recommend,using,the,more,concise,and,chaining,capable,variant,link,add,param,property,name,name,of,the,property,param,property,value,value,of,the,property,see,add,property,value,property,value;public,void,add,property,value,string,property,name,object,property,value,add,property,value,new,property,value,property,name,property,value
MutablePropertyValues -> public void addPropertyValue(String propertyName, Object propertyValue);1530190293;Overloaded version of {@code addPropertyValue} that takes_a property name and a property value._<p>Note: As of Spring 3.0, we recommend using the more concise_and chaining-capable variant {@link #add}._@param propertyName name of the property_@param propertyValue value of the property_@see #addPropertyValue(PropertyValue);public void addPropertyValue(String propertyName, Object propertyValue) {_		addPropertyValue(new PropertyValue(propertyName, propertyValue))__	};overloaded,version,of,code,add,property,value,that,takes,a,property,name,and,a,property,value,p,note,as,of,spring,3,0,we,recommend,using,the,more,concise,and,chaining,capable,variant,link,add,param,property,name,name,of,the,property,param,property,value,value,of,the,property,see,add,property,value,property,value;public,void,add,property,value,string,property,name,object,property,value,add,property,value,new,property,value,property,name,property,value
MutablePropertyValues -> public void addPropertyValue(String propertyName, Object propertyValue);1530827996;Overloaded version of {@code addPropertyValue} that takes_a property name and a property value._<p>Note: As of Spring 3.0, we recommend using the more concise_and chaining-capable variant {@link #add}._@param propertyName name of the property_@param propertyValue value of the property_@see #addPropertyValue(PropertyValue);public void addPropertyValue(String propertyName, Object propertyValue) {_		addPropertyValue(new PropertyValue(propertyName, propertyValue))__	};overloaded,version,of,code,add,property,value,that,takes,a,property,name,and,a,property,value,p,note,as,of,spring,3,0,we,recommend,using,the,more,concise,and,chaining,capable,variant,link,add,param,property,name,name,of,the,property,param,property,value,value,of,the,property,see,add,property,value,property,value;public,void,add,property,value,string,property,name,object,property,value,add,property,value,new,property,value,property,name,property,value
MutablePropertyValues -> public MutablePropertyValues(@Nullable PropertyValues original);1496837955;Deep copy constructor. Guarantees PropertyValue references_are independent, although it can't deep copy objects currently_referenced by individual PropertyValue objects._@param original the PropertyValues to copy_@see #addPropertyValues(PropertyValues);public MutablePropertyValues(@Nullable PropertyValues original) {_		_		_		if (original != null) {_			PropertyValue[] pvs = original.getPropertyValues()__			this.propertyValueList = new ArrayList<>(pvs.length)__			for (PropertyValue pv : pvs) {_				this.propertyValueList.add(new PropertyValue(pv))__			}_		}_		else {_			this.propertyValueList = new ArrayList<>(0)__		}_	};deep,copy,constructor,guarantees,property,value,references,are,independent,although,it,can,t,deep,copy,objects,currently,referenced,by,individual,property,value,objects,param,original,the,property,values,to,copy,see,add,property,values,property,values;public,mutable,property,values,nullable,property,values,original,if,original,null,property,value,pvs,original,get,property,values,this,property,value,list,new,array,list,pvs,length,for,property,value,pv,pvs,this,property,value,list,add,new,property,value,pv,else,this,property,value,list,new,array,list,0
MutablePropertyValues -> public MutablePropertyValues(@Nullable PropertyValues original);1497250713;Deep copy constructor. Guarantees PropertyValue references_are independent, although it can't deep copy objects currently_referenced by individual PropertyValue objects._@param original the PropertyValues to copy_@see #addPropertyValues(PropertyValues);public MutablePropertyValues(@Nullable PropertyValues original) {_		_		_		if (original != null) {_			PropertyValue[] pvs = original.getPropertyValues()__			this.propertyValueList = new ArrayList<>(pvs.length)__			for (PropertyValue pv : pvs) {_				this.propertyValueList.add(new PropertyValue(pv))__			}_		}_		else {_			this.propertyValueList = new ArrayList<>(0)__		}_	};deep,copy,constructor,guarantees,property,value,references,are,independent,although,it,can,t,deep,copy,objects,currently,referenced,by,individual,property,value,objects,param,original,the,property,values,to,copy,see,add,property,values,property,values;public,mutable,property,values,nullable,property,values,original,if,original,null,property,value,pvs,original,get,property,values,this,property,value,list,new,array,list,pvs,length,for,property,value,pv,pvs,this,property,value,list,add,new,property,value,pv,else,this,property,value,list,new,array,list,0
MutablePropertyValues -> public MutablePropertyValues(@Nullable PropertyValues original);1498780456;Deep copy constructor. Guarantees PropertyValue references_are independent, although it can't deep copy objects currently_referenced by individual PropertyValue objects._@param original the PropertyValues to copy_@see #addPropertyValues(PropertyValues);public MutablePropertyValues(@Nullable PropertyValues original) {_		_		_		if (original != null) {_			PropertyValue[] pvs = original.getPropertyValues()__			this.propertyValueList = new ArrayList<>(pvs.length)__			for (PropertyValue pv : pvs) {_				this.propertyValueList.add(new PropertyValue(pv))__			}_		}_		else {_			this.propertyValueList = new ArrayList<>(0)__		}_	};deep,copy,constructor,guarantees,property,value,references,are,independent,although,it,can,t,deep,copy,objects,currently,referenced,by,individual,property,value,objects,param,original,the,property,values,to,copy,see,add,property,values,property,values;public,mutable,property,values,nullable,property,values,original,if,original,null,property,value,pvs,original,get,property,values,this,property,value,list,new,array,list,pvs,length,for,property,value,pv,pvs,this,property,value,list,add,new,property,value,pv,else,this,property,value,list,new,array,list,0
MutablePropertyValues -> public MutablePropertyValues(@Nullable PropertyValues original);1502974979;Deep copy constructor. Guarantees PropertyValue references_are independent, although it can't deep copy objects currently_referenced by individual PropertyValue objects._@param original the PropertyValues to copy_@see #addPropertyValues(PropertyValues);public MutablePropertyValues(@Nullable PropertyValues original) {_		_		_		if (original != null) {_			PropertyValue[] pvs = original.getPropertyValues()__			this.propertyValueList = new ArrayList<>(pvs.length)__			for (PropertyValue pv : pvs) {_				this.propertyValueList.add(new PropertyValue(pv))__			}_		}_		else {_			this.propertyValueList = new ArrayList<>(0)__		}_	};deep,copy,constructor,guarantees,property,value,references,are,independent,although,it,can,t,deep,copy,objects,currently,referenced,by,individual,property,value,objects,param,original,the,property,values,to,copy,see,add,property,values,property,values;public,mutable,property,values,nullable,property,values,original,if,original,null,property,value,pvs,original,get,property,values,this,property,value,list,new,array,list,pvs,length,for,property,value,pv,pvs,this,property,value,list,add,new,property,value,pv,else,this,property,value,list,new,array,list,0
MutablePropertyValues -> public MutablePropertyValues(@Nullable PropertyValues original);1510606271;Deep copy constructor. Guarantees PropertyValue references_are independent, although it can't deep copy objects currently_referenced by individual PropertyValue objects._@param original the PropertyValues to copy_@see #addPropertyValues(PropertyValues);public MutablePropertyValues(@Nullable PropertyValues original) {_		_		_		if (original != null) {_			PropertyValue[] pvs = original.getPropertyValues()__			this.propertyValueList = new ArrayList<>(pvs.length)__			for (PropertyValue pv : pvs) {_				this.propertyValueList.add(new PropertyValue(pv))__			}_		}_		else {_			this.propertyValueList = new ArrayList<>(0)__		}_	};deep,copy,constructor,guarantees,property,value,references,are,independent,although,it,can,t,deep,copy,objects,currently,referenced,by,individual,property,value,objects,param,original,the,property,values,to,copy,see,add,property,values,property,values;public,mutable,property,values,nullable,property,values,original,if,original,null,property,value,pvs,original,get,property,values,this,property,value,list,new,array,list,pvs,length,for,property,value,pv,pvs,this,property,value,list,add,new,property,value,pv,else,this,property,value,list,new,array,list,0
MutablePropertyValues -> public MutablePropertyValues(@Nullable PropertyValues original);1519295386;Deep copy constructor. Guarantees PropertyValue references_are independent, although it can't deep copy objects currently_referenced by individual PropertyValue objects._@param original the PropertyValues to copy_@see #addPropertyValues(PropertyValues);public MutablePropertyValues(@Nullable PropertyValues original) {_		_		_		if (original != null) {_			PropertyValue[] pvs = original.getPropertyValues()__			this.propertyValueList = new ArrayList<>(pvs.length)__			for (PropertyValue pv : pvs) {_				this.propertyValueList.add(new PropertyValue(pv))__			}_		}_		else {_			this.propertyValueList = new ArrayList<>(0)__		}_	};deep,copy,constructor,guarantees,property,value,references,are,independent,although,it,can,t,deep,copy,objects,currently,referenced,by,individual,property,value,objects,param,original,the,property,values,to,copy,see,add,property,values,property,values;public,mutable,property,values,nullable,property,values,original,if,original,null,property,value,pvs,original,get,property,values,this,property,value,list,new,array,list,pvs,length,for,property,value,pv,pvs,this,property,value,list,add,new,property,value,pv,else,this,property,value,list,new,array,list,0
MutablePropertyValues -> public MutablePropertyValues(@Nullable PropertyValues original);1522359230;Deep copy constructor. Guarantees PropertyValue references_are independent, although it can't deep copy objects currently_referenced by individual PropertyValue objects._@param original the PropertyValues to copy_@see #addPropertyValues(PropertyValues);public MutablePropertyValues(@Nullable PropertyValues original) {_		_		_		if (original != null) {_			PropertyValue[] pvs = original.getPropertyValues()__			this.propertyValueList = new ArrayList<>(pvs.length)__			for (PropertyValue pv : pvs) {_				this.propertyValueList.add(new PropertyValue(pv))__			}_		}_		else {_			this.propertyValueList = new ArrayList<>(0)__		}_	};deep,copy,constructor,guarantees,property,value,references,are,independent,although,it,can,t,deep,copy,objects,currently,referenced,by,individual,property,value,objects,param,original,the,property,values,to,copy,see,add,property,values,property,values;public,mutable,property,values,nullable,property,values,original,if,original,null,property,value,pvs,original,get,property,values,this,property,value,list,new,array,list,pvs,length,for,property,value,pv,pvs,this,property,value,list,add,new,property,value,pv,else,this,property,value,list,new,array,list,0
MutablePropertyValues -> public MutablePropertyValues(@Nullable PropertyValues original);1530174524;Deep copy constructor. Guarantees PropertyValue references_are independent, although it can't deep copy objects currently_referenced by individual PropertyValue objects._@param original the PropertyValues to copy_@see #addPropertyValues(PropertyValues);public MutablePropertyValues(@Nullable PropertyValues original) {_		_		_		if (original != null) {_			PropertyValue[] pvs = original.getPropertyValues()__			this.propertyValueList = new ArrayList<>(pvs.length)__			for (PropertyValue pv : pvs) {_				this.propertyValueList.add(new PropertyValue(pv))__			}_		}_		else {_			this.propertyValueList = new ArrayList<>(0)__		}_	};deep,copy,constructor,guarantees,property,value,references,are,independent,although,it,can,t,deep,copy,objects,currently,referenced,by,individual,property,value,objects,param,original,the,property,values,to,copy,see,add,property,values,property,values;public,mutable,property,values,nullable,property,values,original,if,original,null,property,value,pvs,original,get,property,values,this,property,value,list,new,array,list,pvs,length,for,property,value,pv,pvs,this,property,value,list,add,new,property,value,pv,else,this,property,value,list,new,array,list,0
MutablePropertyValues -> public MutablePropertyValues(@Nullable PropertyValues original);1530190293;Deep copy constructor. Guarantees PropertyValue references_are independent, although it can't deep copy objects currently_referenced by individual PropertyValue objects._@param original the PropertyValues to copy_@see #addPropertyValues(PropertyValues);public MutablePropertyValues(@Nullable PropertyValues original) {_		_		_		if (original != null) {_			PropertyValue[] pvs = original.getPropertyValues()__			this.propertyValueList = new ArrayList<>(pvs.length)__			for (PropertyValue pv : pvs) {_				this.propertyValueList.add(new PropertyValue(pv))__			}_		}_		else {_			this.propertyValueList = new ArrayList<>(0)__		}_	};deep,copy,constructor,guarantees,property,value,references,are,independent,although,it,can,t,deep,copy,objects,currently,referenced,by,individual,property,value,objects,param,original,the,property,values,to,copy,see,add,property,values,property,values;public,mutable,property,values,nullable,property,values,original,if,original,null,property,value,pvs,original,get,property,values,this,property,value,list,new,array,list,pvs,length,for,property,value,pv,pvs,this,property,value,list,add,new,property,value,pv,else,this,property,value,list,new,array,list,0
MutablePropertyValues -> public MutablePropertyValues(@Nullable PropertyValues original);1530827996;Deep copy constructor. Guarantees PropertyValue references_are independent, although it can't deep copy objects currently_referenced by individual PropertyValue objects._@param original the PropertyValues to copy_@see #addPropertyValues(PropertyValues);public MutablePropertyValues(@Nullable PropertyValues original) {_		_		_		if (original != null) {_			PropertyValue[] pvs = original.getPropertyValues()__			this.propertyValueList = new ArrayList<>(pvs.length)__			for (PropertyValue pv : pvs) {_				this.propertyValueList.add(new PropertyValue(pv))__			}_		}_		else {_			this.propertyValueList = new ArrayList<>(0)__		}_	};deep,copy,constructor,guarantees,property,value,references,are,independent,although,it,can,t,deep,copy,objects,currently,referenced,by,individual,property,value,objects,param,original,the,property,values,to,copy,see,add,property,values,property,values;public,mutable,property,values,nullable,property,values,original,if,original,null,property,value,pvs,original,get,property,values,this,property,value,list,new,array,list,pvs,length,for,property,value,pv,pvs,this,property,value,list,add,new,property,value,pv,else,this,property,value,list,new,array,list,0
MutablePropertyValues -> public MutablePropertyValues add(String propertyName, @Nullable Object propertyValue);1496837955;Add a PropertyValue object, replacing any existing one for the_corresponding property or getting merged with it (if applicable)._@param propertyName name of the property_@param propertyValue value of the property_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues add(String propertyName, @Nullable Object propertyValue) {_		addPropertyValue(new PropertyValue(propertyName, propertyValue))__		return this__	};add,a,property,value,object,replacing,any,existing,one,for,the,corresponding,property,or,getting,merged,with,it,if,applicable,param,property,name,name,of,the,property,param,property,value,value,of,the,property,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,string,property,name,nullable,object,property,value,add,property,value,new,property,value,property,name,property,value,return,this
MutablePropertyValues -> public MutablePropertyValues add(String propertyName, @Nullable Object propertyValue);1497250713;Add a PropertyValue object, replacing any existing one for the_corresponding property or getting merged with it (if applicable)._@param propertyName name of the property_@param propertyValue value of the property_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues add(String propertyName, @Nullable Object propertyValue) {_		addPropertyValue(new PropertyValue(propertyName, propertyValue))__		return this__	};add,a,property,value,object,replacing,any,existing,one,for,the,corresponding,property,or,getting,merged,with,it,if,applicable,param,property,name,name,of,the,property,param,property,value,value,of,the,property,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,string,property,name,nullable,object,property,value,add,property,value,new,property,value,property,name,property,value,return,this
MutablePropertyValues -> public MutablePropertyValues add(String propertyName, @Nullable Object propertyValue);1498780456;Add a PropertyValue object, replacing any existing one for the_corresponding property or getting merged with it (if applicable)._@param propertyName name of the property_@param propertyValue value of the property_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues add(String propertyName, @Nullable Object propertyValue) {_		addPropertyValue(new PropertyValue(propertyName, propertyValue))__		return this__	};add,a,property,value,object,replacing,any,existing,one,for,the,corresponding,property,or,getting,merged,with,it,if,applicable,param,property,name,name,of,the,property,param,property,value,value,of,the,property,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,string,property,name,nullable,object,property,value,add,property,value,new,property,value,property,name,property,value,return,this
MutablePropertyValues -> public MutablePropertyValues add(String propertyName, @Nullable Object propertyValue);1502974979;Add a PropertyValue object, replacing any existing one for the_corresponding property or getting merged with it (if applicable)._@param propertyName name of the property_@param propertyValue value of the property_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues add(String propertyName, @Nullable Object propertyValue) {_		addPropertyValue(new PropertyValue(propertyName, propertyValue))__		return this__	};add,a,property,value,object,replacing,any,existing,one,for,the,corresponding,property,or,getting,merged,with,it,if,applicable,param,property,name,name,of,the,property,param,property,value,value,of,the,property,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,string,property,name,nullable,object,property,value,add,property,value,new,property,value,property,name,property,value,return,this
MutablePropertyValues -> public MutablePropertyValues add(String propertyName, @Nullable Object propertyValue);1510606271;Add a PropertyValue object, replacing any existing one for the_corresponding property or getting merged with it (if applicable)._@param propertyName name of the property_@param propertyValue value of the property_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues add(String propertyName, @Nullable Object propertyValue) {_		addPropertyValue(new PropertyValue(propertyName, propertyValue))__		return this__	};add,a,property,value,object,replacing,any,existing,one,for,the,corresponding,property,or,getting,merged,with,it,if,applicable,param,property,name,name,of,the,property,param,property,value,value,of,the,property,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,string,property,name,nullable,object,property,value,add,property,value,new,property,value,property,name,property,value,return,this
MutablePropertyValues -> public MutablePropertyValues add(String propertyName, @Nullable Object propertyValue);1519295386;Add a PropertyValue object, replacing any existing one for the_corresponding property or getting merged with it (if applicable)._@param propertyName name of the property_@param propertyValue value of the property_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues add(String propertyName, @Nullable Object propertyValue) {_		addPropertyValue(new PropertyValue(propertyName, propertyValue))__		return this__	};add,a,property,value,object,replacing,any,existing,one,for,the,corresponding,property,or,getting,merged,with,it,if,applicable,param,property,name,name,of,the,property,param,property,value,value,of,the,property,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,string,property,name,nullable,object,property,value,add,property,value,new,property,value,property,name,property,value,return,this
MutablePropertyValues -> public MutablePropertyValues add(String propertyName, @Nullable Object propertyValue);1522359230;Add a PropertyValue object, replacing any existing one for the_corresponding property or getting merged with it (if applicable)._@param propertyName name of the property_@param propertyValue value of the property_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues add(String propertyName, @Nullable Object propertyValue) {_		addPropertyValue(new PropertyValue(propertyName, propertyValue))__		return this__	};add,a,property,value,object,replacing,any,existing,one,for,the,corresponding,property,or,getting,merged,with,it,if,applicable,param,property,name,name,of,the,property,param,property,value,value,of,the,property,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,string,property,name,nullable,object,property,value,add,property,value,new,property,value,property,name,property,value,return,this
MutablePropertyValues -> public MutablePropertyValues add(String propertyName, @Nullable Object propertyValue);1530174524;Add a PropertyValue object, replacing any existing one for the_corresponding property or getting merged with it (if applicable)._@param propertyName name of the property_@param propertyValue value of the property_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues add(String propertyName, @Nullable Object propertyValue) {_		addPropertyValue(new PropertyValue(propertyName, propertyValue))__		return this__	};add,a,property,value,object,replacing,any,existing,one,for,the,corresponding,property,or,getting,merged,with,it,if,applicable,param,property,name,name,of,the,property,param,property,value,value,of,the,property,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,string,property,name,nullable,object,property,value,add,property,value,new,property,value,property,name,property,value,return,this
MutablePropertyValues -> public MutablePropertyValues add(String propertyName, @Nullable Object propertyValue);1530190293;Add a PropertyValue object, replacing any existing one for the_corresponding property or getting merged with it (if applicable)._@param propertyName name of the property_@param propertyValue value of the property_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues add(String propertyName, @Nullable Object propertyValue) {_		addPropertyValue(new PropertyValue(propertyName, propertyValue))__		return this__	};add,a,property,value,object,replacing,any,existing,one,for,the,corresponding,property,or,getting,merged,with,it,if,applicable,param,property,name,name,of,the,property,param,property,value,value,of,the,property,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,string,property,name,nullable,object,property,value,add,property,value,new,property,value,property,name,property,value,return,this
MutablePropertyValues -> public MutablePropertyValues add(String propertyName, @Nullable Object propertyValue);1530827996;Add a PropertyValue object, replacing any existing one for the_corresponding property or getting merged with it (if applicable)._@param propertyName name of the property_@param propertyValue value of the property_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues add(String propertyName, @Nullable Object propertyValue) {_		addPropertyValue(new PropertyValue(propertyName, propertyValue))__		return this__	};add,a,property,value,object,replacing,any,existing,one,for,the,corresponding,property,or,getting,merged,with,it,if,applicable,param,property,name,name,of,the,property,param,property,value,value,of,the,property,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,string,property,name,nullable,object,property,value,add,property,value,new,property,value,property,name,property,value,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValues(Map<?, ?> other);1328020251;Add all property values from the given Map._@param other Map with property values keyed by property name,_which must be a String_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValues(Map<?, ?> other) {_		if (other != null) {_			for (Map.Entry<?, ?> entry : other.entrySet()) {_				addPropertyValue(new PropertyValue(entry.getKey().toString(), entry.getValue()))__			}_		}_		return this__	};add,all,property,values,from,the,given,map,param,other,map,with,property,values,keyed,by,property,name,which,must,be,a,string,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,values,map,other,if,other,null,for,map,entry,entry,other,entry,set,add,property,value,new,property,value,entry,get,key,to,string,entry,get,value,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValues(Map<?, ?> other);1356735495;Add all property values from the given Map._@param other Map with property values keyed by property name,_which must be a String_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValues(Map<?, ?> other) {_		if (other != null) {_			for (Map.Entry<?, ?> entry : other.entrySet()) {_				addPropertyValue(new PropertyValue(entry.getKey().toString(), entry.getValue()))__			}_		}_		return this__	};add,all,property,values,from,the,given,map,param,other,map,with,property,values,keyed,by,property,name,which,must,be,a,string,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,values,map,other,if,other,null,for,map,entry,entry,other,entry,set,add,property,value,new,property,value,entry,get,key,to,string,entry,get,value,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValues(Map<?, ?> other);1357119239;Add all property values from the given Map._@param other Map with property values keyed by property name,_which must be a String_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValues(Map<?, ?> other) {_		if (other != null) {_			for (Map.Entry<?, ?> entry : other.entrySet()) {_				addPropertyValue(new PropertyValue(entry.getKey().toString(), entry.getValue()))__			}_		}_		return this__	};add,all,property,values,from,the,given,map,param,other,map,with,property,values,keyed,by,property,name,which,must,be,a,string,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,values,map,other,if,other,null,for,map,entry,entry,other,entry,set,add,property,value,new,property,value,entry,get,key,to,string,entry,get,value,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValues(Map<?, ?> other);1368482696;Add all property values from the given Map._@param other Map with property values keyed by property name,_which must be a String_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValues(Map<?, ?> other) {_		if (other != null) {_			for (Map.Entry<?, ?> entry : other.entrySet()) {_				addPropertyValue(new PropertyValue(entry.getKey().toString(), entry.getValue()))__			}_		}_		return this__	};add,all,property,values,from,the,given,map,param,other,map,with,property,values,keyed,by,property,name,which,must,be,a,string,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,values,map,other,if,other,null,for,map,entry,entry,other,entry,set,add,property,value,new,property,value,entry,get,key,to,string,entry,get,value,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValues(Map<?, ?> other);1382030648;Add all property values from the given Map._@param other Map with property values keyed by property name,_which must be a String_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValues(Map<?, ?> other) {_		if (other != null) {_			for (Map.Entry<?, ?> entry : other.entrySet()) {_				addPropertyValue(new PropertyValue(entry.getKey().toString(), entry.getValue()))__			}_		}_		return this__	};add,all,property,values,from,the,given,map,param,other,map,with,property,values,keyed,by,property,name,which,must,be,a,string,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,values,map,other,if,other,null,for,map,entry,entry,other,entry,set,add,property,value,new,property,value,entry,get,key,to,string,entry,get,value,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValues(Map<?, ?> other);1385412762;Add all property values from the given Map._@param other Map with property values keyed by property name,_which must be a String_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValues(Map<?, ?> other) {_		if (other != null) {_			for (Map.Entry<?, ?> entry : other.entrySet()) {_				addPropertyValue(new PropertyValue(entry.getKey().toString(), entry.getValue()))__			}_		}_		return this__	};add,all,property,values,from,the,given,map,param,other,map,with,property,values,keyed,by,property,name,which,must,be,a,string,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,values,map,other,if,other,null,for,map,entry,entry,other,entry,set,add,property,value,new,property,value,entry,get,key,to,string,entry,get,value,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValues(Map<?, ?> other);1419339720;Add all property values from the given Map._@param other Map with property values keyed by property name,_which must be a String_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValues(Map<?, ?> other) {_		if (other != null) {_			for (Map.Entry<?, ?> entry : other.entrySet()) {_				addPropertyValue(new PropertyValue(entry.getKey().toString(), entry.getValue()))__			}_		}_		return this__	};add,all,property,values,from,the,given,map,param,other,map,with,property,values,keyed,by,property,name,which,must,be,a,string,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,values,map,other,if,other,null,for,map,entry,entry,other,entry,set,add,property,value,new,property,value,entry,get,key,to,string,entry,get,value,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValues(Map<?, ?> other);1419881658;Add all property values from the given Map._@param other Map with property values keyed by property name,_which must be a String_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValues(Map<?, ?> other) {_		if (other != null) {_			for (Map.Entry<?, ?> entry : other.entrySet()) {_				addPropertyValue(new PropertyValue(entry.getKey().toString(), entry.getValue()))__			}_		}_		return this__	};add,all,property,values,from,the,given,map,param,other,map,with,property,values,keyed,by,property,name,which,must,be,a,string,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,values,map,other,if,other,null,for,map,entry,entry,other,entry,set,add,property,value,new,property,value,entry,get,key,to,string,entry,get,value,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValues(Map<?, ?> other);1467730834;Add all property values from the given Map._@param other Map with property values keyed by property name,_which must be a String_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValues(Map<?, ?> other) {_		if (other != null) {_			for (Map.Entry<?, ?> entry : other.entrySet()) {_				addPropertyValue(new PropertyValue(entry.getKey().toString(), entry.getValue()))__			}_		}_		return this__	};add,all,property,values,from,the,given,map,param,other,map,with,property,values,keyed,by,property,name,which,must,be,a,string,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,values,map,other,if,other,null,for,map,entry,entry,other,entry,set,add,property,value,new,property,value,entry,get,key,to,string,entry,get,value,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValues(Map<?, ?> other);1495868221;Add all property values from the given Map._@param other Map with property values keyed by property name,_which must be a String_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValues(Map<?, ?> other) {_		if (other != null) {_			for (Map.Entry<?, ?> entry : other.entrySet()) {_				addPropertyValue(new PropertyValue(entry.getKey().toString(), entry.getValue()))__			}_		}_		return this__	};add,all,property,values,from,the,given,map,param,other,map,with,property,values,keyed,by,property,name,which,must,be,a,string,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,values,map,other,if,other,null,for,map,entry,entry,other,entry,set,add,property,value,new,property,value,entry,get,key,to,string,entry,get,value,return,this
MutablePropertyValues -> public void clearProcessedProperty(String propertyName);1419339720;Clear the "processed" registration of the given property, if any._@since 3.2.13;public void clearProcessedProperty(String propertyName) {_		if (this.processedProperties != null) {_			this.processedProperties.remove(propertyName)__		}_	};clear,the,processed,registration,of,the,given,property,if,any,since,3,2,13;public,void,clear,processed,property,string,property,name,if,this,processed,properties,null,this,processed,properties,remove,property,name
MutablePropertyValues -> public void clearProcessedProperty(String propertyName);1419881658;Clear the "processed" registration of the given property, if any._@since 3.2.13;public void clearProcessedProperty(String propertyName) {_		if (this.processedProperties != null) {_			this.processedProperties.remove(propertyName)__		}_	};clear,the,processed,registration,of,the,given,property,if,any,since,3,2,13;public,void,clear,processed,property,string,property,name,if,this,processed,properties,null,this,processed,properties,remove,property,name
MutablePropertyValues -> public void clearProcessedProperty(String propertyName);1467730834;Clear the "processed" registration of the given property, if any._@since 3.2.13;public void clearProcessedProperty(String propertyName) {_		if (this.processedProperties != null) {_			this.processedProperties.remove(propertyName)__		}_	};clear,the,processed,registration,of,the,given,property,if,any,since,3,2,13;public,void,clear,processed,property,string,property,name,if,this,processed,properties,null,this,processed,properties,remove,property,name
MutablePropertyValues -> public void clearProcessedProperty(String propertyName);1495868221;Clear the "processed" registration of the given property, if any._@since 3.2.13;public void clearProcessedProperty(String propertyName) {_		if (this.processedProperties != null) {_			this.processedProperties.remove(propertyName)__		}_	};clear,the,processed,registration,of,the,given,property,if,any,since,3,2,13;public,void,clear,processed,property,string,property,name,if,this,processed,properties,null,this,processed,properties,remove,property,name
MutablePropertyValues -> public void clearProcessedProperty(String propertyName);1496837955;Clear the "processed" registration of the given property, if any._@since 3.2.13;public void clearProcessedProperty(String propertyName) {_		if (this.processedProperties != null) {_			this.processedProperties.remove(propertyName)__		}_	};clear,the,processed,registration,of,the,given,property,if,any,since,3,2,13;public,void,clear,processed,property,string,property,name,if,this,processed,properties,null,this,processed,properties,remove,property,name
MutablePropertyValues -> public void clearProcessedProperty(String propertyName);1497250713;Clear the "processed" registration of the given property, if any._@since 3.2.13;public void clearProcessedProperty(String propertyName) {_		if (this.processedProperties != null) {_			this.processedProperties.remove(propertyName)__		}_	};clear,the,processed,registration,of,the,given,property,if,any,since,3,2,13;public,void,clear,processed,property,string,property,name,if,this,processed,properties,null,this,processed,properties,remove,property,name
MutablePropertyValues -> public void clearProcessedProperty(String propertyName);1498780456;Clear the "processed" registration of the given property, if any._@since 3.2.13;public void clearProcessedProperty(String propertyName) {_		if (this.processedProperties != null) {_			this.processedProperties.remove(propertyName)__		}_	};clear,the,processed,registration,of,the,given,property,if,any,since,3,2,13;public,void,clear,processed,property,string,property,name,if,this,processed,properties,null,this,processed,properties,remove,property,name
MutablePropertyValues -> public void clearProcessedProperty(String propertyName);1502974979;Clear the "processed" registration of the given property, if any._@since 3.2.13;public void clearProcessedProperty(String propertyName) {_		if (this.processedProperties != null) {_			this.processedProperties.remove(propertyName)__		}_	};clear,the,processed,registration,of,the,given,property,if,any,since,3,2,13;public,void,clear,processed,property,string,property,name,if,this,processed,properties,null,this,processed,properties,remove,property,name
MutablePropertyValues -> public void clearProcessedProperty(String propertyName);1510606271;Clear the "processed" registration of the given property, if any._@since 3.2.13;public void clearProcessedProperty(String propertyName) {_		if (this.processedProperties != null) {_			this.processedProperties.remove(propertyName)__		}_	};clear,the,processed,registration,of,the,given,property,if,any,since,3,2,13;public,void,clear,processed,property,string,property,name,if,this,processed,properties,null,this,processed,properties,remove,property,name
MutablePropertyValues -> public void clearProcessedProperty(String propertyName);1519295386;Clear the "processed" registration of the given property, if any._@since 3.2.13;public void clearProcessedProperty(String propertyName) {_		if (this.processedProperties != null) {_			this.processedProperties.remove(propertyName)__		}_	};clear,the,processed,registration,of,the,given,property,if,any,since,3,2,13;public,void,clear,processed,property,string,property,name,if,this,processed,properties,null,this,processed,properties,remove,property,name
MutablePropertyValues -> public void clearProcessedProperty(String propertyName);1522359230;Clear the "processed" registration of the given property, if any._@since 3.2.13;public void clearProcessedProperty(String propertyName) {_		if (this.processedProperties != null) {_			this.processedProperties.remove(propertyName)__		}_	};clear,the,processed,registration,of,the,given,property,if,any,since,3,2,13;public,void,clear,processed,property,string,property,name,if,this,processed,properties,null,this,processed,properties,remove,property,name
MutablePropertyValues -> public void clearProcessedProperty(String propertyName);1530174524;Clear the "processed" registration of the given property, if any._@since 3.2.13;public void clearProcessedProperty(String propertyName) {_		if (this.processedProperties != null) {_			this.processedProperties.remove(propertyName)__		}_	};clear,the,processed,registration,of,the,given,property,if,any,since,3,2,13;public,void,clear,processed,property,string,property,name,if,this,processed,properties,null,this,processed,properties,remove,property,name
MutablePropertyValues -> public void clearProcessedProperty(String propertyName);1530190293;Clear the "processed" registration of the given property, if any._@since 3.2.13;public void clearProcessedProperty(String propertyName) {_		if (this.processedProperties != null) {_			this.processedProperties.remove(propertyName)__		}_	};clear,the,processed,registration,of,the,given,property,if,any,since,3,2,13;public,void,clear,processed,property,string,property,name,if,this,processed,properties,null,this,processed,properties,remove,property,name
MutablePropertyValues -> public void clearProcessedProperty(String propertyName);1530827996;Clear the "processed" registration of the given property, if any._@since 3.2.13;public void clearProcessedProperty(String propertyName) {_		if (this.processedProperties != null) {_			this.processedProperties.remove(propertyName)__		}_	};clear,the,processed,registration,of,the,given,property,if,any,since,3,2,13;public,void,clear,processed,property,string,property,name,if,this,processed,properties,null,this,processed,properties,remove,property,name
MutablePropertyValues -> public MutablePropertyValues();1328020251;Creates a new empty MutablePropertyValues object._<p>Property values can be added with the <code>add</code> method._@see #add(String, Object);public MutablePropertyValues() {_		this.propertyValueList = new ArrayList<PropertyValue>(0)__	};creates,a,new,empty,mutable,property,values,object,p,property,values,can,be,added,with,the,code,add,code,method,see,add,string,object;public,mutable,property,values,this,property,value,list,new,array,list,property,value,0
MutablePropertyValues -> public MutablePropertyValues();1356735495;Creates a new empty MutablePropertyValues object._<p>Property values can be added with the {@code add} method._@see #add(String, Object);public MutablePropertyValues() {_		this.propertyValueList = new ArrayList<PropertyValue>(0)__	};creates,a,new,empty,mutable,property,values,object,p,property,values,can,be,added,with,the,code,add,method,see,add,string,object;public,mutable,property,values,this,property,value,list,new,array,list,property,value,0
MutablePropertyValues -> public MutablePropertyValues();1357119239;Creates a new empty MutablePropertyValues object._<p>Property values can be added with the {@code add} method._@see #add(String, Object);public MutablePropertyValues() {_		this.propertyValueList = new ArrayList<PropertyValue>(0)__	};creates,a,new,empty,mutable,property,values,object,p,property,values,can,be,added,with,the,code,add,method,see,add,string,object;public,mutable,property,values,this,property,value,list,new,array,list,property,value,0
MutablePropertyValues -> public MutablePropertyValues();1368482696;Creates a new empty MutablePropertyValues object._<p>Property values can be added with the {@code add} method._@see #add(String, Object);public MutablePropertyValues() {_		this.propertyValueList = new ArrayList<PropertyValue>(0)__	};creates,a,new,empty,mutable,property,values,object,p,property,values,can,be,added,with,the,code,add,method,see,add,string,object;public,mutable,property,values,this,property,value,list,new,array,list,property,value,0
MutablePropertyValues -> public MutablePropertyValues();1382030648;Creates a new empty MutablePropertyValues object._<p>Property values can be added with the {@code add} method._@see #add(String, Object);public MutablePropertyValues() {_		this.propertyValueList = new ArrayList<PropertyValue>(0)__	};creates,a,new,empty,mutable,property,values,object,p,property,values,can,be,added,with,the,code,add,method,see,add,string,object;public,mutable,property,values,this,property,value,list,new,array,list,property,value,0
MutablePropertyValues -> public MutablePropertyValues();1385412762;Creates a new empty MutablePropertyValues object._<p>Property values can be added with the {@code add} method._@see #add(String, Object);public MutablePropertyValues() {_		this.propertyValueList = new ArrayList<PropertyValue>(0)__	};creates,a,new,empty,mutable,property,values,object,p,property,values,can,be,added,with,the,code,add,method,see,add,string,object;public,mutable,property,values,this,property,value,list,new,array,list,property,value,0
MutablePropertyValues -> public MutablePropertyValues();1419339720;Creates a new empty MutablePropertyValues object._<p>Property values can be added with the {@code add} method._@see #add(String, Object);public MutablePropertyValues() {_		this.propertyValueList = new ArrayList<PropertyValue>(0)__	};creates,a,new,empty,mutable,property,values,object,p,property,values,can,be,added,with,the,code,add,method,see,add,string,object;public,mutable,property,values,this,property,value,list,new,array,list,property,value,0
MutablePropertyValues -> public MutablePropertyValues();1419881658;Creates a new empty MutablePropertyValues object._<p>Property values can be added with the {@code add} method._@see #add(String, Object);public MutablePropertyValues() {_		this.propertyValueList = new ArrayList<PropertyValue>(0)__	};creates,a,new,empty,mutable,property,values,object,p,property,values,can,be,added,with,the,code,add,method,see,add,string,object;public,mutable,property,values,this,property,value,list,new,array,list,property,value,0
MutablePropertyValues -> public MutablePropertyValues();1467730834;Creates a new empty MutablePropertyValues object._<p>Property values can be added with the {@code add} method._@see #add(String, Object);public MutablePropertyValues() {_		this.propertyValueList = new ArrayList<>(0)__	};creates,a,new,empty,mutable,property,values,object,p,property,values,can,be,added,with,the,code,add,method,see,add,string,object;public,mutable,property,values,this,property,value,list,new,array,list,0
MutablePropertyValues -> public MutablePropertyValues();1495868221;Creates a new empty MutablePropertyValues object._<p>Property values can be added with the {@code add} method._@see #add(String, Object);public MutablePropertyValues() {_		this.propertyValueList = new ArrayList<>(0)__	};creates,a,new,empty,mutable,property,values,object,p,property,values,can,be,added,with,the,code,add,method,see,add,string,object;public,mutable,property,values,this,property,value,list,new,array,list,0
MutablePropertyValues -> public MutablePropertyValues();1496837955;Creates a new empty MutablePropertyValues object._<p>Property values can be added with the {@code add} method._@see #add(String, Object);public MutablePropertyValues() {_		this.propertyValueList = new ArrayList<>(0)__	};creates,a,new,empty,mutable,property,values,object,p,property,values,can,be,added,with,the,code,add,method,see,add,string,object;public,mutable,property,values,this,property,value,list,new,array,list,0
MutablePropertyValues -> public MutablePropertyValues();1497250713;Creates a new empty MutablePropertyValues object._<p>Property values can be added with the {@code add} method._@see #add(String, Object);public MutablePropertyValues() {_		this.propertyValueList = new ArrayList<>(0)__	};creates,a,new,empty,mutable,property,values,object,p,property,values,can,be,added,with,the,code,add,method,see,add,string,object;public,mutable,property,values,this,property,value,list,new,array,list,0
MutablePropertyValues -> public MutablePropertyValues();1498780456;Creates a new empty MutablePropertyValues object._<p>Property values can be added with the {@code add} method._@see #add(String, Object);public MutablePropertyValues() {_		this.propertyValueList = new ArrayList<>(0)__	};creates,a,new,empty,mutable,property,values,object,p,property,values,can,be,added,with,the,code,add,method,see,add,string,object;public,mutable,property,values,this,property,value,list,new,array,list,0
MutablePropertyValues -> public MutablePropertyValues();1502974979;Creates a new empty MutablePropertyValues object._<p>Property values can be added with the {@code add} method._@see #add(String, Object);public MutablePropertyValues() {_		this.propertyValueList = new ArrayList<>(0)__	};creates,a,new,empty,mutable,property,values,object,p,property,values,can,be,added,with,the,code,add,method,see,add,string,object;public,mutable,property,values,this,property,value,list,new,array,list,0
MutablePropertyValues -> public MutablePropertyValues();1510606271;Creates a new empty MutablePropertyValues object._<p>Property values can be added with the {@code add} method._@see #add(String, Object);public MutablePropertyValues() {_		this.propertyValueList = new ArrayList<>(0)__	};creates,a,new,empty,mutable,property,values,object,p,property,values,can,be,added,with,the,code,add,method,see,add,string,object;public,mutable,property,values,this,property,value,list,new,array,list,0
MutablePropertyValues -> public MutablePropertyValues();1519295386;Creates a new empty MutablePropertyValues object._<p>Property values can be added with the {@code add} method._@see #add(String, Object);public MutablePropertyValues() {_		this.propertyValueList = new ArrayList<>(0)__	};creates,a,new,empty,mutable,property,values,object,p,property,values,can,be,added,with,the,code,add,method,see,add,string,object;public,mutable,property,values,this,property,value,list,new,array,list,0
MutablePropertyValues -> public MutablePropertyValues();1522359230;Creates a new empty MutablePropertyValues object._<p>Property values can be added with the {@code add} method._@see #add(String, Object);public MutablePropertyValues() {_		this.propertyValueList = new ArrayList<>(0)__	};creates,a,new,empty,mutable,property,values,object,p,property,values,can,be,added,with,the,code,add,method,see,add,string,object;public,mutable,property,values,this,property,value,list,new,array,list,0
MutablePropertyValues -> public MutablePropertyValues();1530174524;Creates a new empty MutablePropertyValues object._<p>Property values can be added with the {@code add} method._@see #add(String, Object);public MutablePropertyValues() {_		this.propertyValueList = new ArrayList<>(0)__	};creates,a,new,empty,mutable,property,values,object,p,property,values,can,be,added,with,the,code,add,method,see,add,string,object;public,mutable,property,values,this,property,value,list,new,array,list,0
MutablePropertyValues -> public MutablePropertyValues();1530190293;Creates a new empty MutablePropertyValues object._<p>Property values can be added with the {@code add} method._@see #add(String, Object);public MutablePropertyValues() {_		this.propertyValueList = new ArrayList<>(0)__	};creates,a,new,empty,mutable,property,values,object,p,property,values,can,be,added,with,the,code,add,method,see,add,string,object;public,mutable,property,values,this,property,value,list,new,array,list,0
MutablePropertyValues -> public MutablePropertyValues();1530827996;Creates a new empty MutablePropertyValues object._<p>Property values can be added with the {@code add} method._@see #add(String, Object);public MutablePropertyValues() {_		this.propertyValueList = new ArrayList<>(0)__	};creates,a,new,empty,mutable,property,values,object,p,property,values,can,be,added,with,the,code,add,method,see,add,string,object;public,mutable,property,values,this,property,value,list,new,array,list,0
MutablePropertyValues -> public boolean isConverted();1328020251;Return whether this holder contains converted values only (<code>true</code>),_or whether the values still need to be converted (<code>false</code>).;public boolean isConverted() {_		return this.converted__	};return,whether,this,holder,contains,converted,values,only,code,true,code,or,whether,the,values,still,need,to,be,converted,code,false,code;public,boolean,is,converted,return,this,converted
MutablePropertyValues -> public boolean isConverted();1356735495;Return whether this holder contains converted values only ({@code true}),_or whether the values still need to be converted ({@code false}).;public boolean isConverted() {_		return this.converted__	};return,whether,this,holder,contains,converted,values,only,code,true,or,whether,the,values,still,need,to,be,converted,code,false;public,boolean,is,converted,return,this,converted
MutablePropertyValues -> public boolean isConverted();1357119239;Return whether this holder contains converted values only ({@code true}),_or whether the values still need to be converted ({@code false}).;public boolean isConverted() {_		return this.converted__	};return,whether,this,holder,contains,converted,values,only,code,true,or,whether,the,values,still,need,to,be,converted,code,false;public,boolean,is,converted,return,this,converted
MutablePropertyValues -> public boolean isConverted();1368482696;Return whether this holder contains converted values only ({@code true}),_or whether the values still need to be converted ({@code false}).;public boolean isConverted() {_		return this.converted__	};return,whether,this,holder,contains,converted,values,only,code,true,or,whether,the,values,still,need,to,be,converted,code,false;public,boolean,is,converted,return,this,converted
MutablePropertyValues -> public boolean isConverted();1382030648;Return whether this holder contains converted values only ({@code true}),_or whether the values still need to be converted ({@code false}).;public boolean isConverted() {_		return this.converted__	};return,whether,this,holder,contains,converted,values,only,code,true,or,whether,the,values,still,need,to,be,converted,code,false;public,boolean,is,converted,return,this,converted
MutablePropertyValues -> public boolean isConverted();1385412762;Return whether this holder contains converted values only ({@code true}),_or whether the values still need to be converted ({@code false}).;public boolean isConverted() {_		return this.converted__	};return,whether,this,holder,contains,converted,values,only,code,true,or,whether,the,values,still,need,to,be,converted,code,false;public,boolean,is,converted,return,this,converted
MutablePropertyValues -> public boolean isConverted();1419339720;Return whether this holder contains converted values only ({@code true}),_or whether the values still need to be converted ({@code false}).;public boolean isConverted() {_		return this.converted__	};return,whether,this,holder,contains,converted,values,only,code,true,or,whether,the,values,still,need,to,be,converted,code,false;public,boolean,is,converted,return,this,converted
MutablePropertyValues -> public boolean isConverted();1419881658;Return whether this holder contains converted values only ({@code true}),_or whether the values still need to be converted ({@code false}).;public boolean isConverted() {_		return this.converted__	};return,whether,this,holder,contains,converted,values,only,code,true,or,whether,the,values,still,need,to,be,converted,code,false;public,boolean,is,converted,return,this,converted
MutablePropertyValues -> public boolean isConverted();1467730834;Return whether this holder contains converted values only ({@code true}),_or whether the values still need to be converted ({@code false}).;public boolean isConverted() {_		return this.converted__	};return,whether,this,holder,contains,converted,values,only,code,true,or,whether,the,values,still,need,to,be,converted,code,false;public,boolean,is,converted,return,this,converted
MutablePropertyValues -> public boolean isConverted();1495868221;Return whether this holder contains converted values only ({@code true}),_or whether the values still need to be converted ({@code false}).;public boolean isConverted() {_		return this.converted__	};return,whether,this,holder,contains,converted,values,only,code,true,or,whether,the,values,still,need,to,be,converted,code,false;public,boolean,is,converted,return,this,converted
MutablePropertyValues -> public boolean isConverted();1496837955;Return whether this holder contains converted values only ({@code true}),_or whether the values still need to be converted ({@code false}).;public boolean isConverted() {_		return this.converted__	};return,whether,this,holder,contains,converted,values,only,code,true,or,whether,the,values,still,need,to,be,converted,code,false;public,boolean,is,converted,return,this,converted
MutablePropertyValues -> public boolean isConverted();1497250713;Return whether this holder contains converted values only ({@code true}),_or whether the values still need to be converted ({@code false}).;public boolean isConverted() {_		return this.converted__	};return,whether,this,holder,contains,converted,values,only,code,true,or,whether,the,values,still,need,to,be,converted,code,false;public,boolean,is,converted,return,this,converted
MutablePropertyValues -> public boolean isConverted();1498780456;Return whether this holder contains converted values only ({@code true}),_or whether the values still need to be converted ({@code false}).;public boolean isConverted() {_		return this.converted__	};return,whether,this,holder,contains,converted,values,only,code,true,or,whether,the,values,still,need,to,be,converted,code,false;public,boolean,is,converted,return,this,converted
MutablePropertyValues -> public boolean isConverted();1502974979;Return whether this holder contains converted values only ({@code true}),_or whether the values still need to be converted ({@code false}).;public boolean isConverted() {_		return this.converted__	};return,whether,this,holder,contains,converted,values,only,code,true,or,whether,the,values,still,need,to,be,converted,code,false;public,boolean,is,converted,return,this,converted
MutablePropertyValues -> public boolean isConverted();1510606271;Return whether this holder contains converted values only ({@code true}),_or whether the values still need to be converted ({@code false}).;public boolean isConverted() {_		return this.converted__	};return,whether,this,holder,contains,converted,values,only,code,true,or,whether,the,values,still,need,to,be,converted,code,false;public,boolean,is,converted,return,this,converted
MutablePropertyValues -> public boolean isConverted();1519295386;Return whether this holder contains converted values only ({@code true}),_or whether the values still need to be converted ({@code false}).;public boolean isConverted() {_		return this.converted__	};return,whether,this,holder,contains,converted,values,only,code,true,or,whether,the,values,still,need,to,be,converted,code,false;public,boolean,is,converted,return,this,converted
MutablePropertyValues -> public boolean isConverted();1522359230;Return whether this holder contains converted values only ({@code true}),_or whether the values still need to be converted ({@code false}).;public boolean isConverted() {_		return this.converted__	};return,whether,this,holder,contains,converted,values,only,code,true,or,whether,the,values,still,need,to,be,converted,code,false;public,boolean,is,converted,return,this,converted
MutablePropertyValues -> public boolean isConverted();1530174524;Return whether this holder contains converted values only ({@code true}),_or whether the values still need to be converted ({@code false}).;public boolean isConverted() {_		return this.converted__	};return,whether,this,holder,contains,converted,values,only,code,true,or,whether,the,values,still,need,to,be,converted,code,false;public,boolean,is,converted,return,this,converted
MutablePropertyValues -> public boolean isConverted();1530190293;Return whether this holder contains converted values only ({@code true}),_or whether the values still need to be converted ({@code false}).;public boolean isConverted() {_		return this.converted__	};return,whether,this,holder,contains,converted,values,only,code,true,or,whether,the,values,still,need,to,be,converted,code,false;public,boolean,is,converted,return,this,converted
MutablePropertyValues -> public boolean isConverted();1530827996;Return whether this holder contains converted values only ({@code true}),_or whether the values still need to be converted ({@code false}).;public boolean isConverted() {_		return this.converted__	};return,whether,this,holder,contains,converted,values,only,code,true,or,whether,the,values,still,need,to,be,converted,code,false;public,boolean,is,converted,return,this,converted
MutablePropertyValues -> public MutablePropertyValues(@Nullable List<PropertyValue> propertyValueList);1496837955;Construct a new MutablePropertyValues object using the given List of_PropertyValue objects as-is._<p>This is a constructor for advanced usage scenarios._It is not intended for typical programmatic use._@param propertyValueList List of PropertyValue objects;public MutablePropertyValues(@Nullable List<PropertyValue> propertyValueList) {_		this.propertyValueList =_				(propertyValueList != null ? propertyValueList : new ArrayList<>())__	};construct,a,new,mutable,property,values,object,using,the,given,list,of,property,value,objects,as,is,p,this,is,a,constructor,for,advanced,usage,scenarios,it,is,not,intended,for,typical,programmatic,use,param,property,value,list,list,of,property,value,objects;public,mutable,property,values,nullable,list,property,value,property,value,list,this,property,value,list,property,value,list,null,property,value,list,new,array,list
MutablePropertyValues -> public MutablePropertyValues(@Nullable List<PropertyValue> propertyValueList);1497250713;Construct a new MutablePropertyValues object using the given List of_PropertyValue objects as-is._<p>This is a constructor for advanced usage scenarios._It is not intended for typical programmatic use._@param propertyValueList List of PropertyValue objects;public MutablePropertyValues(@Nullable List<PropertyValue> propertyValueList) {_		this.propertyValueList =_				(propertyValueList != null ? propertyValueList : new ArrayList<>())__	};construct,a,new,mutable,property,values,object,using,the,given,list,of,property,value,objects,as,is,p,this,is,a,constructor,for,advanced,usage,scenarios,it,is,not,intended,for,typical,programmatic,use,param,property,value,list,list,of,property,value,objects;public,mutable,property,values,nullable,list,property,value,property,value,list,this,property,value,list,property,value,list,null,property,value,list,new,array,list
MutablePropertyValues -> public MutablePropertyValues(@Nullable List<PropertyValue> propertyValueList);1498780456;Construct a new MutablePropertyValues object using the given List of_PropertyValue objects as-is._<p>This is a constructor for advanced usage scenarios._It is not intended for typical programmatic use._@param propertyValueList List of PropertyValue objects;public MutablePropertyValues(@Nullable List<PropertyValue> propertyValueList) {_		this.propertyValueList =_				(propertyValueList != null ? propertyValueList : new ArrayList<>())__	};construct,a,new,mutable,property,values,object,using,the,given,list,of,property,value,objects,as,is,p,this,is,a,constructor,for,advanced,usage,scenarios,it,is,not,intended,for,typical,programmatic,use,param,property,value,list,list,of,property,value,objects;public,mutable,property,values,nullable,list,property,value,property,value,list,this,property,value,list,property,value,list,null,property,value,list,new,array,list
MutablePropertyValues -> public MutablePropertyValues(@Nullable List<PropertyValue> propertyValueList);1502974979;Construct a new MutablePropertyValues object using the given List of_PropertyValue objects as-is._<p>This is a constructor for advanced usage scenarios._It is not intended for typical programmatic use._@param propertyValueList List of PropertyValue objects;public MutablePropertyValues(@Nullable List<PropertyValue> propertyValueList) {_		this.propertyValueList =_				(propertyValueList != null ? propertyValueList : new ArrayList<>())__	};construct,a,new,mutable,property,values,object,using,the,given,list,of,property,value,objects,as,is,p,this,is,a,constructor,for,advanced,usage,scenarios,it,is,not,intended,for,typical,programmatic,use,param,property,value,list,list,of,property,value,objects;public,mutable,property,values,nullable,list,property,value,property,value,list,this,property,value,list,property,value,list,null,property,value,list,new,array,list
MutablePropertyValues -> public MutablePropertyValues(@Nullable List<PropertyValue> propertyValueList);1510606271;Construct a new MutablePropertyValues object using the given List of_PropertyValue objects as-is._<p>This is a constructor for advanced usage scenarios._It is not intended for typical programmatic use._@param propertyValueList List of PropertyValue objects;public MutablePropertyValues(@Nullable List<PropertyValue> propertyValueList) {_		this.propertyValueList =_				(propertyValueList != null ? propertyValueList : new ArrayList<>())__	};construct,a,new,mutable,property,values,object,using,the,given,list,of,property,value,objects,as,is,p,this,is,a,constructor,for,advanced,usage,scenarios,it,is,not,intended,for,typical,programmatic,use,param,property,value,list,list,of,property,value,objects;public,mutable,property,values,nullable,list,property,value,property,value,list,this,property,value,list,property,value,list,null,property,value,list,new,array,list
MutablePropertyValues -> public MutablePropertyValues(@Nullable List<PropertyValue> propertyValueList);1519295386;Construct a new MutablePropertyValues object using the given List of_PropertyValue objects as-is._<p>This is a constructor for advanced usage scenarios._It is not intended for typical programmatic use._@param propertyValueList List of PropertyValue objects;public MutablePropertyValues(@Nullable List<PropertyValue> propertyValueList) {_		this.propertyValueList =_				(propertyValueList != null ? propertyValueList : new ArrayList<>())__	};construct,a,new,mutable,property,values,object,using,the,given,list,of,property,value,objects,as,is,p,this,is,a,constructor,for,advanced,usage,scenarios,it,is,not,intended,for,typical,programmatic,use,param,property,value,list,list,of,property,value,objects;public,mutable,property,values,nullable,list,property,value,property,value,list,this,property,value,list,property,value,list,null,property,value,list,new,array,list
MutablePropertyValues -> public MutablePropertyValues(@Nullable List<PropertyValue> propertyValueList);1522359230;Construct a new MutablePropertyValues object using the given List of_PropertyValue objects as-is._<p>This is a constructor for advanced usage scenarios._It is not intended for typical programmatic use._@param propertyValueList List of PropertyValue objects;public MutablePropertyValues(@Nullable List<PropertyValue> propertyValueList) {_		this.propertyValueList =_				(propertyValueList != null ? propertyValueList : new ArrayList<>())__	};construct,a,new,mutable,property,values,object,using,the,given,list,of,property,value,objects,as,is,p,this,is,a,constructor,for,advanced,usage,scenarios,it,is,not,intended,for,typical,programmatic,use,param,property,value,list,list,of,property,value,objects;public,mutable,property,values,nullable,list,property,value,property,value,list,this,property,value,list,property,value,list,null,property,value,list,new,array,list
MutablePropertyValues -> public MutablePropertyValues(@Nullable List<PropertyValue> propertyValueList);1530174524;Construct a new MutablePropertyValues object using the given List of_PropertyValue objects as-is._<p>This is a constructor for advanced usage scenarios._It is not intended for typical programmatic use._@param propertyValueList a List of PropertyValue objects;public MutablePropertyValues(@Nullable List<PropertyValue> propertyValueList) {_		this.propertyValueList =_				(propertyValueList != null ? propertyValueList : new ArrayList<>())__	};construct,a,new,mutable,property,values,object,using,the,given,list,of,property,value,objects,as,is,p,this,is,a,constructor,for,advanced,usage,scenarios,it,is,not,intended,for,typical,programmatic,use,param,property,value,list,a,list,of,property,value,objects;public,mutable,property,values,nullable,list,property,value,property,value,list,this,property,value,list,property,value,list,null,property,value,list,new,array,list
MutablePropertyValues -> public MutablePropertyValues(@Nullable List<PropertyValue> propertyValueList);1530190293;Construct a new MutablePropertyValues object using the given List of_PropertyValue objects as-is._<p>This is a constructor for advanced usage scenarios._It is not intended for typical programmatic use._@param propertyValueList a List of PropertyValue objects;public MutablePropertyValues(@Nullable List<PropertyValue> propertyValueList) {_		this.propertyValueList =_				(propertyValueList != null ? propertyValueList : new ArrayList<>())__	};construct,a,new,mutable,property,values,object,using,the,given,list,of,property,value,objects,as,is,p,this,is,a,constructor,for,advanced,usage,scenarios,it,is,not,intended,for,typical,programmatic,use,param,property,value,list,a,list,of,property,value,objects;public,mutable,property,values,nullable,list,property,value,property,value,list,this,property,value,list,property,value,list,null,property,value,list,new,array,list
MutablePropertyValues -> public MutablePropertyValues(@Nullable List<PropertyValue> propertyValueList);1530827996;Construct a new MutablePropertyValues object using the given List of_PropertyValue objects as-is._<p>This is a constructor for advanced usage scenarios._It is not intended for typical programmatic use._@param propertyValueList a List of PropertyValue objects;public MutablePropertyValues(@Nullable List<PropertyValue> propertyValueList) {_		this.propertyValueList =_				(propertyValueList != null ? propertyValueList : new ArrayList<>())__	};construct,a,new,mutable,property,values,object,using,the,given,list,of,property,value,objects,as,is,p,this,is,a,constructor,for,advanced,usage,scenarios,it,is,not,intended,for,typical,programmatic,use,param,property,value,list,a,list,of,property,value,objects;public,mutable,property,values,nullable,list,property,value,property,value,list,this,property,value,list,property,value,list,null,property,value,list,new,array,list
MutablePropertyValues -> public MutablePropertyValues addPropertyValues(PropertyValues other);1328020251;Copy all given PropertyValues into this object. Guarantees PropertyValue_references are independent, although it can't deep copy objects currently_referenced by individual PropertyValue objects._@param other the PropertyValues to copy_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValues(PropertyValues other) {_		if (other != null) {_			PropertyValue[] pvs = other.getPropertyValues()__			for (PropertyValue pv : pvs) {_				addPropertyValue(new PropertyValue(pv))__			}_		}_		return this__	};copy,all,given,property,values,into,this,object,guarantees,property,value,references,are,independent,although,it,can,t,deep,copy,objects,currently,referenced,by,individual,property,value,objects,param,other,the,property,values,to,copy,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,values,property,values,other,if,other,null,property,value,pvs,other,get,property,values,for,property,value,pv,pvs,add,property,value,new,property,value,pv,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValues(PropertyValues other);1356735495;Copy all given PropertyValues into this object. Guarantees PropertyValue_references are independent, although it can't deep copy objects currently_referenced by individual PropertyValue objects._@param other the PropertyValues to copy_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValues(PropertyValues other) {_		if (other != null) {_			PropertyValue[] pvs = other.getPropertyValues()__			for (PropertyValue pv : pvs) {_				addPropertyValue(new PropertyValue(pv))__			}_		}_		return this__	};copy,all,given,property,values,into,this,object,guarantees,property,value,references,are,independent,although,it,can,t,deep,copy,objects,currently,referenced,by,individual,property,value,objects,param,other,the,property,values,to,copy,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,values,property,values,other,if,other,null,property,value,pvs,other,get,property,values,for,property,value,pv,pvs,add,property,value,new,property,value,pv,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValues(PropertyValues other);1357119239;Copy all given PropertyValues into this object. Guarantees PropertyValue_references are independent, although it can't deep copy objects currently_referenced by individual PropertyValue objects._@param other the PropertyValues to copy_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValues(PropertyValues other) {_		if (other != null) {_			PropertyValue[] pvs = other.getPropertyValues()__			for (PropertyValue pv : pvs) {_				addPropertyValue(new PropertyValue(pv))__			}_		}_		return this__	};copy,all,given,property,values,into,this,object,guarantees,property,value,references,are,independent,although,it,can,t,deep,copy,objects,currently,referenced,by,individual,property,value,objects,param,other,the,property,values,to,copy,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,values,property,values,other,if,other,null,property,value,pvs,other,get,property,values,for,property,value,pv,pvs,add,property,value,new,property,value,pv,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValues(PropertyValues other);1368482696;Copy all given PropertyValues into this object. Guarantees PropertyValue_references are independent, although it can't deep copy objects currently_referenced by individual PropertyValue objects._@param other the PropertyValues to copy_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValues(PropertyValues other) {_		if (other != null) {_			PropertyValue[] pvs = other.getPropertyValues()__			for (PropertyValue pv : pvs) {_				addPropertyValue(new PropertyValue(pv))__			}_		}_		return this__	};copy,all,given,property,values,into,this,object,guarantees,property,value,references,are,independent,although,it,can,t,deep,copy,objects,currently,referenced,by,individual,property,value,objects,param,other,the,property,values,to,copy,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,values,property,values,other,if,other,null,property,value,pvs,other,get,property,values,for,property,value,pv,pvs,add,property,value,new,property,value,pv,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValues(PropertyValues other);1382030648;Copy all given PropertyValues into this object. Guarantees PropertyValue_references are independent, although it can't deep copy objects currently_referenced by individual PropertyValue objects._@param other the PropertyValues to copy_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValues(PropertyValues other) {_		if (other != null) {_			PropertyValue[] pvs = other.getPropertyValues()__			for (PropertyValue pv : pvs) {_				addPropertyValue(new PropertyValue(pv))__			}_		}_		return this__	};copy,all,given,property,values,into,this,object,guarantees,property,value,references,are,independent,although,it,can,t,deep,copy,objects,currently,referenced,by,individual,property,value,objects,param,other,the,property,values,to,copy,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,values,property,values,other,if,other,null,property,value,pvs,other,get,property,values,for,property,value,pv,pvs,add,property,value,new,property,value,pv,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValues(PropertyValues other);1385412762;Copy all given PropertyValues into this object. Guarantees PropertyValue_references are independent, although it can't deep copy objects currently_referenced by individual PropertyValue objects._@param other the PropertyValues to copy_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValues(PropertyValues other) {_		if (other != null) {_			PropertyValue[] pvs = other.getPropertyValues()__			for (PropertyValue pv : pvs) {_				addPropertyValue(new PropertyValue(pv))__			}_		}_		return this__	};copy,all,given,property,values,into,this,object,guarantees,property,value,references,are,independent,although,it,can,t,deep,copy,objects,currently,referenced,by,individual,property,value,objects,param,other,the,property,values,to,copy,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,values,property,values,other,if,other,null,property,value,pvs,other,get,property,values,for,property,value,pv,pvs,add,property,value,new,property,value,pv,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValues(PropertyValues other);1419339720;Copy all given PropertyValues into this object. Guarantees PropertyValue_references are independent, although it can't deep copy objects currently_referenced by individual PropertyValue objects._@param other the PropertyValues to copy_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValues(PropertyValues other) {_		if (other != null) {_			PropertyValue[] pvs = other.getPropertyValues()__			for (PropertyValue pv : pvs) {_				addPropertyValue(new PropertyValue(pv))__			}_		}_		return this__	};copy,all,given,property,values,into,this,object,guarantees,property,value,references,are,independent,although,it,can,t,deep,copy,objects,currently,referenced,by,individual,property,value,objects,param,other,the,property,values,to,copy,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,values,property,values,other,if,other,null,property,value,pvs,other,get,property,values,for,property,value,pv,pvs,add,property,value,new,property,value,pv,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValues(PropertyValues other);1419881658;Copy all given PropertyValues into this object. Guarantees PropertyValue_references are independent, although it can't deep copy objects currently_referenced by individual PropertyValue objects._@param other the PropertyValues to copy_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValues(PropertyValues other) {_		if (other != null) {_			PropertyValue[] pvs = other.getPropertyValues()__			for (PropertyValue pv : pvs) {_				addPropertyValue(new PropertyValue(pv))__			}_		}_		return this__	};copy,all,given,property,values,into,this,object,guarantees,property,value,references,are,independent,although,it,can,t,deep,copy,objects,currently,referenced,by,individual,property,value,objects,param,other,the,property,values,to,copy,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,values,property,values,other,if,other,null,property,value,pvs,other,get,property,values,for,property,value,pv,pvs,add,property,value,new,property,value,pv,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValues(PropertyValues other);1467730834;Copy all given PropertyValues into this object. Guarantees PropertyValue_references are independent, although it can't deep copy objects currently_referenced by individual PropertyValue objects._@param other the PropertyValues to copy_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValues(PropertyValues other) {_		if (other != null) {_			PropertyValue[] pvs = other.getPropertyValues()__			for (PropertyValue pv : pvs) {_				addPropertyValue(new PropertyValue(pv))__			}_		}_		return this__	};copy,all,given,property,values,into,this,object,guarantees,property,value,references,are,independent,although,it,can,t,deep,copy,objects,currently,referenced,by,individual,property,value,objects,param,other,the,property,values,to,copy,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,values,property,values,other,if,other,null,property,value,pvs,other,get,property,values,for,property,value,pv,pvs,add,property,value,new,property,value,pv,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValues(PropertyValues other);1495868221;Copy all given PropertyValues into this object. Guarantees PropertyValue_references are independent, although it can't deep copy objects currently_referenced by individual PropertyValue objects._@param other the PropertyValues to copy_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValues(PropertyValues other) {_		if (other != null) {_			PropertyValue[] pvs = other.getPropertyValues()__			for (PropertyValue pv : pvs) {_				addPropertyValue(new PropertyValue(pv))__			}_		}_		return this__	};copy,all,given,property,values,into,this,object,guarantees,property,value,references,are,independent,although,it,can,t,deep,copy,objects,currently,referenced,by,individual,property,value,objects,param,other,the,property,values,to,copy,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,values,property,values,other,if,other,null,property,value,pvs,other,get,property,values,for,property,value,pv,pvs,add,property,value,new,property,value,pv,return,this
MutablePropertyValues -> public void setPropertyValueAt(PropertyValue pv, int i);1328020251;Modify a PropertyValue object held in this object._Indexed from 0.;public void setPropertyValueAt(PropertyValue pv, int i) {_		this.propertyValueList.set(i, pv)__	};modify,a,property,value,object,held,in,this,object,indexed,from,0;public,void,set,property,value,at,property,value,pv,int,i,this,property,value,list,set,i,pv
MutablePropertyValues -> public void setPropertyValueAt(PropertyValue pv, int i);1356735495;Modify a PropertyValue object held in this object._Indexed from 0.;public void setPropertyValueAt(PropertyValue pv, int i) {_		this.propertyValueList.set(i, pv)__	};modify,a,property,value,object,held,in,this,object,indexed,from,0;public,void,set,property,value,at,property,value,pv,int,i,this,property,value,list,set,i,pv
MutablePropertyValues -> public void setPropertyValueAt(PropertyValue pv, int i);1357119239;Modify a PropertyValue object held in this object._Indexed from 0.;public void setPropertyValueAt(PropertyValue pv, int i) {_		this.propertyValueList.set(i, pv)__	};modify,a,property,value,object,held,in,this,object,indexed,from,0;public,void,set,property,value,at,property,value,pv,int,i,this,property,value,list,set,i,pv
MutablePropertyValues -> public void setPropertyValueAt(PropertyValue pv, int i);1368482696;Modify a PropertyValue object held in this object._Indexed from 0.;public void setPropertyValueAt(PropertyValue pv, int i) {_		this.propertyValueList.set(i, pv)__	};modify,a,property,value,object,held,in,this,object,indexed,from,0;public,void,set,property,value,at,property,value,pv,int,i,this,property,value,list,set,i,pv
MutablePropertyValues -> public void setPropertyValueAt(PropertyValue pv, int i);1382030648;Modify a PropertyValue object held in this object._Indexed from 0.;public void setPropertyValueAt(PropertyValue pv, int i) {_		this.propertyValueList.set(i, pv)__	};modify,a,property,value,object,held,in,this,object,indexed,from,0;public,void,set,property,value,at,property,value,pv,int,i,this,property,value,list,set,i,pv
MutablePropertyValues -> public void setPropertyValueAt(PropertyValue pv, int i);1385412762;Modify a PropertyValue object held in this object._Indexed from 0.;public void setPropertyValueAt(PropertyValue pv, int i) {_		this.propertyValueList.set(i, pv)__	};modify,a,property,value,object,held,in,this,object,indexed,from,0;public,void,set,property,value,at,property,value,pv,int,i,this,property,value,list,set,i,pv
MutablePropertyValues -> public void setPropertyValueAt(PropertyValue pv, int i);1419339720;Modify a PropertyValue object held in this object._Indexed from 0.;public void setPropertyValueAt(PropertyValue pv, int i) {_		this.propertyValueList.set(i, pv)__	};modify,a,property,value,object,held,in,this,object,indexed,from,0;public,void,set,property,value,at,property,value,pv,int,i,this,property,value,list,set,i,pv
MutablePropertyValues -> public void setPropertyValueAt(PropertyValue pv, int i);1419881658;Modify a PropertyValue object held in this object._Indexed from 0.;public void setPropertyValueAt(PropertyValue pv, int i) {_		this.propertyValueList.set(i, pv)__	};modify,a,property,value,object,held,in,this,object,indexed,from,0;public,void,set,property,value,at,property,value,pv,int,i,this,property,value,list,set,i,pv
MutablePropertyValues -> public void setPropertyValueAt(PropertyValue pv, int i);1467730834;Modify a PropertyValue object held in this object._Indexed from 0.;public void setPropertyValueAt(PropertyValue pv, int i) {_		this.propertyValueList.set(i, pv)__	};modify,a,property,value,object,held,in,this,object,indexed,from,0;public,void,set,property,value,at,property,value,pv,int,i,this,property,value,list,set,i,pv
MutablePropertyValues -> public void setPropertyValueAt(PropertyValue pv, int i);1495868221;Modify a PropertyValue object held in this object._Indexed from 0.;public void setPropertyValueAt(PropertyValue pv, int i) {_		this.propertyValueList.set(i, pv)__	};modify,a,property,value,object,held,in,this,object,indexed,from,0;public,void,set,property,value,at,property,value,pv,int,i,this,property,value,list,set,i,pv
MutablePropertyValues -> public void setPropertyValueAt(PropertyValue pv, int i);1496837955;Modify a PropertyValue object held in this object._Indexed from 0.;public void setPropertyValueAt(PropertyValue pv, int i) {_		this.propertyValueList.set(i, pv)__	};modify,a,property,value,object,held,in,this,object,indexed,from,0;public,void,set,property,value,at,property,value,pv,int,i,this,property,value,list,set,i,pv
MutablePropertyValues -> public void setPropertyValueAt(PropertyValue pv, int i);1497250713;Modify a PropertyValue object held in this object._Indexed from 0.;public void setPropertyValueAt(PropertyValue pv, int i) {_		this.propertyValueList.set(i, pv)__	};modify,a,property,value,object,held,in,this,object,indexed,from,0;public,void,set,property,value,at,property,value,pv,int,i,this,property,value,list,set,i,pv
MutablePropertyValues -> public void setPropertyValueAt(PropertyValue pv, int i);1498780456;Modify a PropertyValue object held in this object._Indexed from 0.;public void setPropertyValueAt(PropertyValue pv, int i) {_		this.propertyValueList.set(i, pv)__	};modify,a,property,value,object,held,in,this,object,indexed,from,0;public,void,set,property,value,at,property,value,pv,int,i,this,property,value,list,set,i,pv
MutablePropertyValues -> public void setPropertyValueAt(PropertyValue pv, int i);1502974979;Modify a PropertyValue object held in this object._Indexed from 0.;public void setPropertyValueAt(PropertyValue pv, int i) {_		this.propertyValueList.set(i, pv)__	};modify,a,property,value,object,held,in,this,object,indexed,from,0;public,void,set,property,value,at,property,value,pv,int,i,this,property,value,list,set,i,pv
MutablePropertyValues -> public void setPropertyValueAt(PropertyValue pv, int i);1510606271;Modify a PropertyValue object held in this object._Indexed from 0.;public void setPropertyValueAt(PropertyValue pv, int i) {_		this.propertyValueList.set(i, pv)__	};modify,a,property,value,object,held,in,this,object,indexed,from,0;public,void,set,property,value,at,property,value,pv,int,i,this,property,value,list,set,i,pv
MutablePropertyValues -> public void setPropertyValueAt(PropertyValue pv, int i);1519295386;Modify a PropertyValue object held in this object._Indexed from 0.;public void setPropertyValueAt(PropertyValue pv, int i) {_		this.propertyValueList.set(i, pv)__	};modify,a,property,value,object,held,in,this,object,indexed,from,0;public,void,set,property,value,at,property,value,pv,int,i,this,property,value,list,set,i,pv
MutablePropertyValues -> public void setPropertyValueAt(PropertyValue pv, int i);1522359230;Modify a PropertyValue object held in this object._Indexed from 0.;public void setPropertyValueAt(PropertyValue pv, int i) {_		this.propertyValueList.set(i, pv)__	};modify,a,property,value,object,held,in,this,object,indexed,from,0;public,void,set,property,value,at,property,value,pv,int,i,this,property,value,list,set,i,pv
MutablePropertyValues -> public void setPropertyValueAt(PropertyValue pv, int i);1530174524;Modify a PropertyValue object held in this object._Indexed from 0.;public void setPropertyValueAt(PropertyValue pv, int i) {_		this.propertyValueList.set(i, pv)__	};modify,a,property,value,object,held,in,this,object,indexed,from,0;public,void,set,property,value,at,property,value,pv,int,i,this,property,value,list,set,i,pv
MutablePropertyValues -> public void setPropertyValueAt(PropertyValue pv, int i);1530190293;Modify a PropertyValue object held in this object._Indexed from 0.;public void setPropertyValueAt(PropertyValue pv, int i) {_		this.propertyValueList.set(i, pv)__	};modify,a,property,value,object,held,in,this,object,indexed,from,0;public,void,set,property,value,at,property,value,pv,int,i,this,property,value,list,set,i,pv
MutablePropertyValues -> public void setPropertyValueAt(PropertyValue pv, int i);1530827996;Modify a PropertyValue object held in this object._Indexed from 0.;public void setPropertyValueAt(PropertyValue pv, int i) {_		this.propertyValueList.set(i, pv)__	};modify,a,property,value,object,held,in,this,object,indexed,from,0;public,void,set,property,value,at,property,value,pv,int,i,this,property,value,list,set,i,pv
MutablePropertyValues -> public void removePropertyValue(String propertyName);1328020251;Overloaded version of <code>removePropertyValue</code> that takes a property name._@param propertyName name of the property_@see #removePropertyValue(PropertyValue);public void removePropertyValue(String propertyName) {_		this.propertyValueList.remove(getPropertyValue(propertyName))__	};overloaded,version,of,code,remove,property,value,code,that,takes,a,property,name,param,property,name,name,of,the,property,see,remove,property,value,property,value;public,void,remove,property,value,string,property,name,this,property,value,list,remove,get,property,value,property,name
MutablePropertyValues -> public void removePropertyValue(String propertyName);1356735495;Overloaded version of {@code removePropertyValue} that takes a property name._@param propertyName name of the property_@see #removePropertyValue(PropertyValue);public void removePropertyValue(String propertyName) {_		this.propertyValueList.remove(getPropertyValue(propertyName))__	};overloaded,version,of,code,remove,property,value,that,takes,a,property,name,param,property,name,name,of,the,property,see,remove,property,value,property,value;public,void,remove,property,value,string,property,name,this,property,value,list,remove,get,property,value,property,name
MutablePropertyValues -> public void removePropertyValue(String propertyName);1357119239;Overloaded version of {@code removePropertyValue} that takes a property name._@param propertyName name of the property_@see #removePropertyValue(PropertyValue);public void removePropertyValue(String propertyName) {_		this.propertyValueList.remove(getPropertyValue(propertyName))__	};overloaded,version,of,code,remove,property,value,that,takes,a,property,name,param,property,name,name,of,the,property,see,remove,property,value,property,value;public,void,remove,property,value,string,property,name,this,property,value,list,remove,get,property,value,property,name
MutablePropertyValues -> public void removePropertyValue(String propertyName);1368482696;Overloaded version of {@code removePropertyValue} that takes a property name._@param propertyName name of the property_@see #removePropertyValue(PropertyValue);public void removePropertyValue(String propertyName) {_		this.propertyValueList.remove(getPropertyValue(propertyName))__	};overloaded,version,of,code,remove,property,value,that,takes,a,property,name,param,property,name,name,of,the,property,see,remove,property,value,property,value;public,void,remove,property,value,string,property,name,this,property,value,list,remove,get,property,value,property,name
MutablePropertyValues -> public void removePropertyValue(String propertyName);1382030648;Overloaded version of {@code removePropertyValue} that takes a property name._@param propertyName name of the property_@see #removePropertyValue(PropertyValue);public void removePropertyValue(String propertyName) {_		this.propertyValueList.remove(getPropertyValue(propertyName))__	};overloaded,version,of,code,remove,property,value,that,takes,a,property,name,param,property,name,name,of,the,property,see,remove,property,value,property,value;public,void,remove,property,value,string,property,name,this,property,value,list,remove,get,property,value,property,name
MutablePropertyValues -> public void removePropertyValue(String propertyName);1385412762;Overloaded version of {@code removePropertyValue} that takes a property name._@param propertyName name of the property_@see #removePropertyValue(PropertyValue);public void removePropertyValue(String propertyName) {_		this.propertyValueList.remove(getPropertyValue(propertyName))__	};overloaded,version,of,code,remove,property,value,that,takes,a,property,name,param,property,name,name,of,the,property,see,remove,property,value,property,value;public,void,remove,property,value,string,property,name,this,property,value,list,remove,get,property,value,property,name
MutablePropertyValues -> public void removePropertyValue(String propertyName);1419339720;Overloaded version of {@code removePropertyValue} that takes a property name._@param propertyName name of the property_@see #removePropertyValue(PropertyValue);public void removePropertyValue(String propertyName) {_		this.propertyValueList.remove(getPropertyValue(propertyName))__	};overloaded,version,of,code,remove,property,value,that,takes,a,property,name,param,property,name,name,of,the,property,see,remove,property,value,property,value;public,void,remove,property,value,string,property,name,this,property,value,list,remove,get,property,value,property,name
MutablePropertyValues -> public void removePropertyValue(String propertyName);1419881658;Overloaded version of {@code removePropertyValue} that takes a property name._@param propertyName name of the property_@see #removePropertyValue(PropertyValue);public void removePropertyValue(String propertyName) {_		this.propertyValueList.remove(getPropertyValue(propertyName))__	};overloaded,version,of,code,remove,property,value,that,takes,a,property,name,param,property,name,name,of,the,property,see,remove,property,value,property,value;public,void,remove,property,value,string,property,name,this,property,value,list,remove,get,property,value,property,name
MutablePropertyValues -> public void removePropertyValue(String propertyName);1467730834;Overloaded version of {@code removePropertyValue} that takes a property name._@param propertyName name of the property_@see #removePropertyValue(PropertyValue);public void removePropertyValue(String propertyName) {_		this.propertyValueList.remove(getPropertyValue(propertyName))__	};overloaded,version,of,code,remove,property,value,that,takes,a,property,name,param,property,name,name,of,the,property,see,remove,property,value,property,value;public,void,remove,property,value,string,property,name,this,property,value,list,remove,get,property,value,property,name
MutablePropertyValues -> public void removePropertyValue(String propertyName);1495868221;Overloaded version of {@code removePropertyValue} that takes a property name._@param propertyName name of the property_@see #removePropertyValue(PropertyValue);public void removePropertyValue(String propertyName) {_		this.propertyValueList.remove(getPropertyValue(propertyName))__	};overloaded,version,of,code,remove,property,value,that,takes,a,property,name,param,property,name,name,of,the,property,see,remove,property,value,property,value;public,void,remove,property,value,string,property,name,this,property,value,list,remove,get,property,value,property,name
MutablePropertyValues -> public void removePropertyValue(String propertyName);1496837955;Overloaded version of {@code removePropertyValue} that takes a property name._@param propertyName name of the property_@see #removePropertyValue(PropertyValue);public void removePropertyValue(String propertyName) {_		this.propertyValueList.remove(getPropertyValue(propertyName))__	};overloaded,version,of,code,remove,property,value,that,takes,a,property,name,param,property,name,name,of,the,property,see,remove,property,value,property,value;public,void,remove,property,value,string,property,name,this,property,value,list,remove,get,property,value,property,name
MutablePropertyValues -> public void removePropertyValue(String propertyName);1497250713;Overloaded version of {@code removePropertyValue} that takes a property name._@param propertyName name of the property_@see #removePropertyValue(PropertyValue);public void removePropertyValue(String propertyName) {_		this.propertyValueList.remove(getPropertyValue(propertyName))__	};overloaded,version,of,code,remove,property,value,that,takes,a,property,name,param,property,name,name,of,the,property,see,remove,property,value,property,value;public,void,remove,property,value,string,property,name,this,property,value,list,remove,get,property,value,property,name
MutablePropertyValues -> public void removePropertyValue(String propertyName);1498780456;Overloaded version of {@code removePropertyValue} that takes a property name._@param propertyName name of the property_@see #removePropertyValue(PropertyValue);public void removePropertyValue(String propertyName) {_		this.propertyValueList.remove(getPropertyValue(propertyName))__	};overloaded,version,of,code,remove,property,value,that,takes,a,property,name,param,property,name,name,of,the,property,see,remove,property,value,property,value;public,void,remove,property,value,string,property,name,this,property,value,list,remove,get,property,value,property,name
MutablePropertyValues -> public void removePropertyValue(String propertyName);1502974979;Overloaded version of {@code removePropertyValue} that takes a property name._@param propertyName name of the property_@see #removePropertyValue(PropertyValue);public void removePropertyValue(String propertyName) {_		this.propertyValueList.remove(getPropertyValue(propertyName))__	};overloaded,version,of,code,remove,property,value,that,takes,a,property,name,param,property,name,name,of,the,property,see,remove,property,value,property,value;public,void,remove,property,value,string,property,name,this,property,value,list,remove,get,property,value,property,name
MutablePropertyValues -> public void removePropertyValue(String propertyName);1510606271;Overloaded version of {@code removePropertyValue} that takes a property name._@param propertyName name of the property_@see #removePropertyValue(PropertyValue);public void removePropertyValue(String propertyName) {_		this.propertyValueList.remove(getPropertyValue(propertyName))__	};overloaded,version,of,code,remove,property,value,that,takes,a,property,name,param,property,name,name,of,the,property,see,remove,property,value,property,value;public,void,remove,property,value,string,property,name,this,property,value,list,remove,get,property,value,property,name
MutablePropertyValues -> public void removePropertyValue(String propertyName);1519295386;Overloaded version of {@code removePropertyValue} that takes a property name._@param propertyName name of the property_@see #removePropertyValue(PropertyValue);public void removePropertyValue(String propertyName) {_		this.propertyValueList.remove(getPropertyValue(propertyName))__	};overloaded,version,of,code,remove,property,value,that,takes,a,property,name,param,property,name,name,of,the,property,see,remove,property,value,property,value;public,void,remove,property,value,string,property,name,this,property,value,list,remove,get,property,value,property,name
MutablePropertyValues -> public void removePropertyValue(String propertyName);1522359230;Overloaded version of {@code removePropertyValue} that takes a property name._@param propertyName name of the property_@see #removePropertyValue(PropertyValue);public void removePropertyValue(String propertyName) {_		this.propertyValueList.remove(getPropertyValue(propertyName))__	};overloaded,version,of,code,remove,property,value,that,takes,a,property,name,param,property,name,name,of,the,property,see,remove,property,value,property,value;public,void,remove,property,value,string,property,name,this,property,value,list,remove,get,property,value,property,name
MutablePropertyValues -> public void removePropertyValue(String propertyName);1530174524;Overloaded version of {@code removePropertyValue} that takes a property name._@param propertyName name of the property_@see #removePropertyValue(PropertyValue);public void removePropertyValue(String propertyName) {_		this.propertyValueList.remove(getPropertyValue(propertyName))__	};overloaded,version,of,code,remove,property,value,that,takes,a,property,name,param,property,name,name,of,the,property,see,remove,property,value,property,value;public,void,remove,property,value,string,property,name,this,property,value,list,remove,get,property,value,property,name
MutablePropertyValues -> public void removePropertyValue(String propertyName);1530190293;Overloaded version of {@code removePropertyValue} that takes a property name._@param propertyName name of the property_@see #removePropertyValue(PropertyValue);public void removePropertyValue(String propertyName) {_		this.propertyValueList.remove(getPropertyValue(propertyName))__	};overloaded,version,of,code,remove,property,value,that,takes,a,property,name,param,property,name,name,of,the,property,see,remove,property,value,property,value;public,void,remove,property,value,string,property,name,this,property,value,list,remove,get,property,value,property,name
MutablePropertyValues -> public void removePropertyValue(String propertyName);1530827996;Overloaded version of {@code removePropertyValue} that takes a property name._@param propertyName name of the property_@see #removePropertyValue(PropertyValue);public void removePropertyValue(String propertyName) {_		this.propertyValueList.remove(getPropertyValue(propertyName))__	};overloaded,version,of,code,remove,property,value,that,takes,a,property,name,param,property,name,name,of,the,property,see,remove,property,value,property,value;public,void,remove,property,value,string,property,name,this,property,value,list,remove,get,property,value,property,name
MutablePropertyValues -> public MutablePropertyValues addPropertyValue(PropertyValue pv);1328020251;Add a PropertyValue object, replacing any existing one for the_corresponding property or getting merged with it (if applicable)._@param pv PropertyValue object to add_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValue(PropertyValue pv) {_		for (int i = 0_ i < this.propertyValueList.size()_ i++) {_			PropertyValue currentPv = this.propertyValueList.get(i)__			if (currentPv.getName().equals(pv.getName())) {_				pv = mergeIfRequired(pv, currentPv)__				setPropertyValueAt(pv, i)__				return this__			}_		}_		this.propertyValueList.add(pv)__		return this__	};add,a,property,value,object,replacing,any,existing,one,for,the,corresponding,property,or,getting,merged,with,it,if,applicable,param,pv,property,value,object,to,add,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,value,property,value,pv,for,int,i,0,i,this,property,value,list,size,i,property,value,current,pv,this,property,value,list,get,i,if,current,pv,get,name,equals,pv,get,name,pv,merge,if,required,pv,current,pv,set,property,value,at,pv,i,return,this,this,property,value,list,add,pv,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValue(PropertyValue pv);1356735495;Add a PropertyValue object, replacing any existing one for the_corresponding property or getting merged with it (if applicable)._@param pv PropertyValue object to add_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValue(PropertyValue pv) {_		for (int i = 0_ i < this.propertyValueList.size()_ i++) {_			PropertyValue currentPv = this.propertyValueList.get(i)__			if (currentPv.getName().equals(pv.getName())) {_				pv = mergeIfRequired(pv, currentPv)__				setPropertyValueAt(pv, i)__				return this__			}_		}_		this.propertyValueList.add(pv)__		return this__	};add,a,property,value,object,replacing,any,existing,one,for,the,corresponding,property,or,getting,merged,with,it,if,applicable,param,pv,property,value,object,to,add,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,value,property,value,pv,for,int,i,0,i,this,property,value,list,size,i,property,value,current,pv,this,property,value,list,get,i,if,current,pv,get,name,equals,pv,get,name,pv,merge,if,required,pv,current,pv,set,property,value,at,pv,i,return,this,this,property,value,list,add,pv,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValue(PropertyValue pv);1357119239;Add a PropertyValue object, replacing any existing one for the_corresponding property or getting merged with it (if applicable)._@param pv PropertyValue object to add_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValue(PropertyValue pv) {_		for (int i = 0_ i < this.propertyValueList.size()_ i++) {_			PropertyValue currentPv = this.propertyValueList.get(i)__			if (currentPv.getName().equals(pv.getName())) {_				pv = mergeIfRequired(pv, currentPv)__				setPropertyValueAt(pv, i)__				return this__			}_		}_		this.propertyValueList.add(pv)__		return this__	};add,a,property,value,object,replacing,any,existing,one,for,the,corresponding,property,or,getting,merged,with,it,if,applicable,param,pv,property,value,object,to,add,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,value,property,value,pv,for,int,i,0,i,this,property,value,list,size,i,property,value,current,pv,this,property,value,list,get,i,if,current,pv,get,name,equals,pv,get,name,pv,merge,if,required,pv,current,pv,set,property,value,at,pv,i,return,this,this,property,value,list,add,pv,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValue(PropertyValue pv);1368482696;Add a PropertyValue object, replacing any existing one for the_corresponding property or getting merged with it (if applicable)._@param pv PropertyValue object to add_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValue(PropertyValue pv) {_		for (int i = 0_ i < this.propertyValueList.size()_ i++) {_			PropertyValue currentPv = this.propertyValueList.get(i)__			if (currentPv.getName().equals(pv.getName())) {_				pv = mergeIfRequired(pv, currentPv)__				setPropertyValueAt(pv, i)__				return this__			}_		}_		this.propertyValueList.add(pv)__		return this__	};add,a,property,value,object,replacing,any,existing,one,for,the,corresponding,property,or,getting,merged,with,it,if,applicable,param,pv,property,value,object,to,add,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,value,property,value,pv,for,int,i,0,i,this,property,value,list,size,i,property,value,current,pv,this,property,value,list,get,i,if,current,pv,get,name,equals,pv,get,name,pv,merge,if,required,pv,current,pv,set,property,value,at,pv,i,return,this,this,property,value,list,add,pv,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValue(PropertyValue pv);1382030648;Add a PropertyValue object, replacing any existing one for the_corresponding property or getting merged with it (if applicable)._@param pv PropertyValue object to add_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValue(PropertyValue pv) {_		for (int i = 0_ i < this.propertyValueList.size()_ i++) {_			PropertyValue currentPv = this.propertyValueList.get(i)__			if (currentPv.getName().equals(pv.getName())) {_				pv = mergeIfRequired(pv, currentPv)__				setPropertyValueAt(pv, i)__				return this__			}_		}_		this.propertyValueList.add(pv)__		return this__	};add,a,property,value,object,replacing,any,existing,one,for,the,corresponding,property,or,getting,merged,with,it,if,applicable,param,pv,property,value,object,to,add,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,value,property,value,pv,for,int,i,0,i,this,property,value,list,size,i,property,value,current,pv,this,property,value,list,get,i,if,current,pv,get,name,equals,pv,get,name,pv,merge,if,required,pv,current,pv,set,property,value,at,pv,i,return,this,this,property,value,list,add,pv,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValue(PropertyValue pv);1385412762;Add a PropertyValue object, replacing any existing one for the_corresponding property or getting merged with it (if applicable)._@param pv PropertyValue object to add_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValue(PropertyValue pv) {_		for (int i = 0_ i < this.propertyValueList.size()_ i++) {_			PropertyValue currentPv = this.propertyValueList.get(i)__			if (currentPv.getName().equals(pv.getName())) {_				pv = mergeIfRequired(pv, currentPv)__				setPropertyValueAt(pv, i)__				return this__			}_		}_		this.propertyValueList.add(pv)__		return this__	};add,a,property,value,object,replacing,any,existing,one,for,the,corresponding,property,or,getting,merged,with,it,if,applicable,param,pv,property,value,object,to,add,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,value,property,value,pv,for,int,i,0,i,this,property,value,list,size,i,property,value,current,pv,this,property,value,list,get,i,if,current,pv,get,name,equals,pv,get,name,pv,merge,if,required,pv,current,pv,set,property,value,at,pv,i,return,this,this,property,value,list,add,pv,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValue(PropertyValue pv);1419339720;Add a PropertyValue object, replacing any existing one for the_corresponding property or getting merged with it (if applicable)._@param pv PropertyValue object to add_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValue(PropertyValue pv) {_		for (int i = 0_ i < this.propertyValueList.size()_ i++) {_			PropertyValue currentPv = this.propertyValueList.get(i)__			if (currentPv.getName().equals(pv.getName())) {_				pv = mergeIfRequired(pv, currentPv)__				setPropertyValueAt(pv, i)__				return this__			}_		}_		this.propertyValueList.add(pv)__		return this__	};add,a,property,value,object,replacing,any,existing,one,for,the,corresponding,property,or,getting,merged,with,it,if,applicable,param,pv,property,value,object,to,add,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,value,property,value,pv,for,int,i,0,i,this,property,value,list,size,i,property,value,current,pv,this,property,value,list,get,i,if,current,pv,get,name,equals,pv,get,name,pv,merge,if,required,pv,current,pv,set,property,value,at,pv,i,return,this,this,property,value,list,add,pv,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValue(PropertyValue pv);1419881658;Add a PropertyValue object, replacing any existing one for the_corresponding property or getting merged with it (if applicable)._@param pv PropertyValue object to add_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValue(PropertyValue pv) {_		for (int i = 0_ i < this.propertyValueList.size()_ i++) {_			PropertyValue currentPv = this.propertyValueList.get(i)__			if (currentPv.getName().equals(pv.getName())) {_				pv = mergeIfRequired(pv, currentPv)__				setPropertyValueAt(pv, i)__				return this__			}_		}_		this.propertyValueList.add(pv)__		return this__	};add,a,property,value,object,replacing,any,existing,one,for,the,corresponding,property,or,getting,merged,with,it,if,applicable,param,pv,property,value,object,to,add,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,value,property,value,pv,for,int,i,0,i,this,property,value,list,size,i,property,value,current,pv,this,property,value,list,get,i,if,current,pv,get,name,equals,pv,get,name,pv,merge,if,required,pv,current,pv,set,property,value,at,pv,i,return,this,this,property,value,list,add,pv,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValue(PropertyValue pv);1467730834;Add a PropertyValue object, replacing any existing one for the_corresponding property or getting merged with it (if applicable)._@param pv PropertyValue object to add_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValue(PropertyValue pv) {_		for (int i = 0_ i < this.propertyValueList.size()_ i++) {_			PropertyValue currentPv = this.propertyValueList.get(i)__			if (currentPv.getName().equals(pv.getName())) {_				pv = mergeIfRequired(pv, currentPv)__				setPropertyValueAt(pv, i)__				return this__			}_		}_		this.propertyValueList.add(pv)__		return this__	};add,a,property,value,object,replacing,any,existing,one,for,the,corresponding,property,or,getting,merged,with,it,if,applicable,param,pv,property,value,object,to,add,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,value,property,value,pv,for,int,i,0,i,this,property,value,list,size,i,property,value,current,pv,this,property,value,list,get,i,if,current,pv,get,name,equals,pv,get,name,pv,merge,if,required,pv,current,pv,set,property,value,at,pv,i,return,this,this,property,value,list,add,pv,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValue(PropertyValue pv);1495868221;Add a PropertyValue object, replacing any existing one for the_corresponding property or getting merged with it (if applicable)._@param pv PropertyValue object to add_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValue(PropertyValue pv) {_		for (int i = 0_ i < this.propertyValueList.size()_ i++) {_			PropertyValue currentPv = this.propertyValueList.get(i)__			if (currentPv.getName().equals(pv.getName())) {_				pv = mergeIfRequired(pv, currentPv)__				setPropertyValueAt(pv, i)__				return this__			}_		}_		this.propertyValueList.add(pv)__		return this__	};add,a,property,value,object,replacing,any,existing,one,for,the,corresponding,property,or,getting,merged,with,it,if,applicable,param,pv,property,value,object,to,add,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,value,property,value,pv,for,int,i,0,i,this,property,value,list,size,i,property,value,current,pv,this,property,value,list,get,i,if,current,pv,get,name,equals,pv,get,name,pv,merge,if,required,pv,current,pv,set,property,value,at,pv,i,return,this,this,property,value,list,add,pv,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValue(PropertyValue pv);1496837955;Add a PropertyValue object, replacing any existing one for the_corresponding property or getting merged with it (if applicable)._@param pv PropertyValue object to add_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValue(PropertyValue pv) {_		for (int i = 0_ i < this.propertyValueList.size()_ i++) {_			PropertyValue currentPv = this.propertyValueList.get(i)__			if (currentPv.getName().equals(pv.getName())) {_				pv = mergeIfRequired(pv, currentPv)__				setPropertyValueAt(pv, i)__				return this__			}_		}_		this.propertyValueList.add(pv)__		return this__	};add,a,property,value,object,replacing,any,existing,one,for,the,corresponding,property,or,getting,merged,with,it,if,applicable,param,pv,property,value,object,to,add,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,value,property,value,pv,for,int,i,0,i,this,property,value,list,size,i,property,value,current,pv,this,property,value,list,get,i,if,current,pv,get,name,equals,pv,get,name,pv,merge,if,required,pv,current,pv,set,property,value,at,pv,i,return,this,this,property,value,list,add,pv,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValue(PropertyValue pv);1497250713;Add a PropertyValue object, replacing any existing one for the_corresponding property or getting merged with it (if applicable)._@param pv PropertyValue object to add_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValue(PropertyValue pv) {_		for (int i = 0_ i < this.propertyValueList.size()_ i++) {_			PropertyValue currentPv = this.propertyValueList.get(i)__			if (currentPv.getName().equals(pv.getName())) {_				pv = mergeIfRequired(pv, currentPv)__				setPropertyValueAt(pv, i)__				return this__			}_		}_		this.propertyValueList.add(pv)__		return this__	};add,a,property,value,object,replacing,any,existing,one,for,the,corresponding,property,or,getting,merged,with,it,if,applicable,param,pv,property,value,object,to,add,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,value,property,value,pv,for,int,i,0,i,this,property,value,list,size,i,property,value,current,pv,this,property,value,list,get,i,if,current,pv,get,name,equals,pv,get,name,pv,merge,if,required,pv,current,pv,set,property,value,at,pv,i,return,this,this,property,value,list,add,pv,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValue(PropertyValue pv);1498780456;Add a PropertyValue object, replacing any existing one for the_corresponding property or getting merged with it (if applicable)._@param pv PropertyValue object to add_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValue(PropertyValue pv) {_		for (int i = 0_ i < this.propertyValueList.size()_ i++) {_			PropertyValue currentPv = this.propertyValueList.get(i)__			if (currentPv.getName().equals(pv.getName())) {_				pv = mergeIfRequired(pv, currentPv)__				setPropertyValueAt(pv, i)__				return this__			}_		}_		this.propertyValueList.add(pv)__		return this__	};add,a,property,value,object,replacing,any,existing,one,for,the,corresponding,property,or,getting,merged,with,it,if,applicable,param,pv,property,value,object,to,add,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,value,property,value,pv,for,int,i,0,i,this,property,value,list,size,i,property,value,current,pv,this,property,value,list,get,i,if,current,pv,get,name,equals,pv,get,name,pv,merge,if,required,pv,current,pv,set,property,value,at,pv,i,return,this,this,property,value,list,add,pv,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValue(PropertyValue pv);1502974979;Add a PropertyValue object, replacing any existing one for the_corresponding property or getting merged with it (if applicable)._@param pv PropertyValue object to add_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValue(PropertyValue pv) {_		for (int i = 0_ i < this.propertyValueList.size()_ i++) {_			PropertyValue currentPv = this.propertyValueList.get(i)__			if (currentPv.getName().equals(pv.getName())) {_				pv = mergeIfRequired(pv, currentPv)__				setPropertyValueAt(pv, i)__				return this__			}_		}_		this.propertyValueList.add(pv)__		return this__	};add,a,property,value,object,replacing,any,existing,one,for,the,corresponding,property,or,getting,merged,with,it,if,applicable,param,pv,property,value,object,to,add,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,value,property,value,pv,for,int,i,0,i,this,property,value,list,size,i,property,value,current,pv,this,property,value,list,get,i,if,current,pv,get,name,equals,pv,get,name,pv,merge,if,required,pv,current,pv,set,property,value,at,pv,i,return,this,this,property,value,list,add,pv,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValue(PropertyValue pv);1510606271;Add a PropertyValue object, replacing any existing one for the_corresponding property or getting merged with it (if applicable)._@param pv PropertyValue object to add_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValue(PropertyValue pv) {_		for (int i = 0_ i < this.propertyValueList.size()_ i++) {_			PropertyValue currentPv = this.propertyValueList.get(i)__			if (currentPv.getName().equals(pv.getName())) {_				pv = mergeIfRequired(pv, currentPv)__				setPropertyValueAt(pv, i)__				return this__			}_		}_		this.propertyValueList.add(pv)__		return this__	};add,a,property,value,object,replacing,any,existing,one,for,the,corresponding,property,or,getting,merged,with,it,if,applicable,param,pv,property,value,object,to,add,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,value,property,value,pv,for,int,i,0,i,this,property,value,list,size,i,property,value,current,pv,this,property,value,list,get,i,if,current,pv,get,name,equals,pv,get,name,pv,merge,if,required,pv,current,pv,set,property,value,at,pv,i,return,this,this,property,value,list,add,pv,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValue(PropertyValue pv);1519295386;Add a PropertyValue object, replacing any existing one for the_corresponding property or getting merged with it (if applicable)._@param pv PropertyValue object to add_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValue(PropertyValue pv) {_		for (int i = 0_ i < this.propertyValueList.size()_ i++) {_			PropertyValue currentPv = this.propertyValueList.get(i)__			if (currentPv.getName().equals(pv.getName())) {_				pv = mergeIfRequired(pv, currentPv)__				setPropertyValueAt(pv, i)__				return this__			}_		}_		this.propertyValueList.add(pv)__		return this__	};add,a,property,value,object,replacing,any,existing,one,for,the,corresponding,property,or,getting,merged,with,it,if,applicable,param,pv,property,value,object,to,add,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,value,property,value,pv,for,int,i,0,i,this,property,value,list,size,i,property,value,current,pv,this,property,value,list,get,i,if,current,pv,get,name,equals,pv,get,name,pv,merge,if,required,pv,current,pv,set,property,value,at,pv,i,return,this,this,property,value,list,add,pv,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValue(PropertyValue pv);1522359230;Add a PropertyValue object, replacing any existing one for the_corresponding property or getting merged with it (if applicable)._@param pv PropertyValue object to add_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValue(PropertyValue pv) {_		for (int i = 0_ i < this.propertyValueList.size()_ i++) {_			PropertyValue currentPv = this.propertyValueList.get(i)__			if (currentPv.getName().equals(pv.getName())) {_				pv = mergeIfRequired(pv, currentPv)__				setPropertyValueAt(pv, i)__				return this__			}_		}_		this.propertyValueList.add(pv)__		return this__	};add,a,property,value,object,replacing,any,existing,one,for,the,corresponding,property,or,getting,merged,with,it,if,applicable,param,pv,property,value,object,to,add,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,value,property,value,pv,for,int,i,0,i,this,property,value,list,size,i,property,value,current,pv,this,property,value,list,get,i,if,current,pv,get,name,equals,pv,get,name,pv,merge,if,required,pv,current,pv,set,property,value,at,pv,i,return,this,this,property,value,list,add,pv,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValue(PropertyValue pv);1530174524;Add a PropertyValue object, replacing any existing one for the_corresponding property or getting merged with it (if applicable)._@param pv the PropertyValue object to add_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValue(PropertyValue pv) {_		for (int i = 0_ i < this.propertyValueList.size()_ i++) {_			PropertyValue currentPv = this.propertyValueList.get(i)__			if (currentPv.getName().equals(pv.getName())) {_				pv = mergeIfRequired(pv, currentPv)__				setPropertyValueAt(pv, i)__				return this__			}_		}_		this.propertyValueList.add(pv)__		return this__	};add,a,property,value,object,replacing,any,existing,one,for,the,corresponding,property,or,getting,merged,with,it,if,applicable,param,pv,the,property,value,object,to,add,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,value,property,value,pv,for,int,i,0,i,this,property,value,list,size,i,property,value,current,pv,this,property,value,list,get,i,if,current,pv,get,name,equals,pv,get,name,pv,merge,if,required,pv,current,pv,set,property,value,at,pv,i,return,this,this,property,value,list,add,pv,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValue(PropertyValue pv);1530190293;Add a PropertyValue object, replacing any existing one for the_corresponding property or getting merged with it (if applicable)._@param pv the PropertyValue object to add_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValue(PropertyValue pv) {_		for (int i = 0_ i < this.propertyValueList.size()_ i++) {_			PropertyValue currentPv = this.propertyValueList.get(i)__			if (currentPv.getName().equals(pv.getName())) {_				pv = mergeIfRequired(pv, currentPv)__				setPropertyValueAt(pv, i)__				return this__			}_		}_		this.propertyValueList.add(pv)__		return this__	};add,a,property,value,object,replacing,any,existing,one,for,the,corresponding,property,or,getting,merged,with,it,if,applicable,param,pv,the,property,value,object,to,add,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,value,property,value,pv,for,int,i,0,i,this,property,value,list,size,i,property,value,current,pv,this,property,value,list,get,i,if,current,pv,get,name,equals,pv,get,name,pv,merge,if,required,pv,current,pv,set,property,value,at,pv,i,return,this,this,property,value,list,add,pv,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValue(PropertyValue pv);1530827996;Add a PropertyValue object, replacing any existing one for the_corresponding property or getting merged with it (if applicable)._@param pv the PropertyValue object to add_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValue(PropertyValue pv) {_		for (int i = 0_ i < this.propertyValueList.size()_ i++) {_			PropertyValue currentPv = this.propertyValueList.get(i)__			if (currentPv.getName().equals(pv.getName())) {_				pv = mergeIfRequired(pv, currentPv)__				setPropertyValueAt(pv, i)__				return this__			}_		}_		this.propertyValueList.add(pv)__		return this__	};add,a,property,value,object,replacing,any,existing,one,for,the,corresponding,property,or,getting,merged,with,it,if,applicable,param,pv,the,property,value,object,to,add,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,value,property,value,pv,for,int,i,0,i,this,property,value,list,size,i,property,value,current,pv,this,property,value,list,get,i,if,current,pv,get,name,equals,pv,get,name,pv,merge,if,required,pv,current,pv,set,property,value,at,pv,i,return,this,this,property,value,list,add,pv,return,this
MutablePropertyValues -> public void registerProcessedProperty(String propertyName);1328020251;Register the specified property as "processed" in the sense_of some processor calling the corresponding setter method_outside of the PropertyValue(s) mechanism._<p>This will lead to <code>true</code> being returned from_a {@link #contains} call for the specified property._@param propertyName the name of the property.;public void registerProcessedProperty(String propertyName) {_		if (this.processedProperties == null) {_			this.processedProperties = new HashSet<String>()__		}_		this.processedProperties.add(propertyName)__	};register,the,specified,property,as,processed,in,the,sense,of,some,processor,calling,the,corresponding,setter,method,outside,of,the,property,value,s,mechanism,p,this,will,lead,to,code,true,code,being,returned,from,a,link,contains,call,for,the,specified,property,param,property,name,the,name,of,the,property;public,void,register,processed,property,string,property,name,if,this,processed,properties,null,this,processed,properties,new,hash,set,string,this,processed,properties,add,property,name
MutablePropertyValues -> public void registerProcessedProperty(String propertyName);1356735495;Register the specified property as "processed" in the sense_of some processor calling the corresponding setter method_outside of the PropertyValue(s) mechanism._<p>This will lead to {@code true} being returned from_a {@link #contains} call for the specified property._@param propertyName the name of the property.;public void registerProcessedProperty(String propertyName) {_		if (this.processedProperties == null) {_			this.processedProperties = new HashSet<String>()__		}_		this.processedProperties.add(propertyName)__	};register,the,specified,property,as,processed,in,the,sense,of,some,processor,calling,the,corresponding,setter,method,outside,of,the,property,value,s,mechanism,p,this,will,lead,to,code,true,being,returned,from,a,link,contains,call,for,the,specified,property,param,property,name,the,name,of,the,property;public,void,register,processed,property,string,property,name,if,this,processed,properties,null,this,processed,properties,new,hash,set,string,this,processed,properties,add,property,name
MutablePropertyValues -> public void registerProcessedProperty(String propertyName);1357119239;Register the specified property as "processed" in the sense_of some processor calling the corresponding setter method_outside of the PropertyValue(s) mechanism._<p>This will lead to {@code true} being returned from_a {@link #contains} call for the specified property._@param propertyName the name of the property.;public void registerProcessedProperty(String propertyName) {_		if (this.processedProperties == null) {_			this.processedProperties = new HashSet<String>()__		}_		this.processedProperties.add(propertyName)__	};register,the,specified,property,as,processed,in,the,sense,of,some,processor,calling,the,corresponding,setter,method,outside,of,the,property,value,s,mechanism,p,this,will,lead,to,code,true,being,returned,from,a,link,contains,call,for,the,specified,property,param,property,name,the,name,of,the,property;public,void,register,processed,property,string,property,name,if,this,processed,properties,null,this,processed,properties,new,hash,set,string,this,processed,properties,add,property,name
MutablePropertyValues -> public void registerProcessedProperty(String propertyName);1368482696;Register the specified property as "processed" in the sense_of some processor calling the corresponding setter method_outside of the PropertyValue(s) mechanism._<p>This will lead to {@code true} being returned from_a {@link #contains} call for the specified property._@param propertyName the name of the property.;public void registerProcessedProperty(String propertyName) {_		if (this.processedProperties == null) {_			this.processedProperties = new HashSet<String>()__		}_		this.processedProperties.add(propertyName)__	};register,the,specified,property,as,processed,in,the,sense,of,some,processor,calling,the,corresponding,setter,method,outside,of,the,property,value,s,mechanism,p,this,will,lead,to,code,true,being,returned,from,a,link,contains,call,for,the,specified,property,param,property,name,the,name,of,the,property;public,void,register,processed,property,string,property,name,if,this,processed,properties,null,this,processed,properties,new,hash,set,string,this,processed,properties,add,property,name
MutablePropertyValues -> public void registerProcessedProperty(String propertyName);1382030648;Register the specified property as "processed" in the sense_of some processor calling the corresponding setter method_outside of the PropertyValue(s) mechanism._<p>This will lead to {@code true} being returned from_a {@link #contains} call for the specified property._@param propertyName the name of the property.;public void registerProcessedProperty(String propertyName) {_		if (this.processedProperties == null) {_			this.processedProperties = new HashSet<String>()__		}_		this.processedProperties.add(propertyName)__	};register,the,specified,property,as,processed,in,the,sense,of,some,processor,calling,the,corresponding,setter,method,outside,of,the,property,value,s,mechanism,p,this,will,lead,to,code,true,being,returned,from,a,link,contains,call,for,the,specified,property,param,property,name,the,name,of,the,property;public,void,register,processed,property,string,property,name,if,this,processed,properties,null,this,processed,properties,new,hash,set,string,this,processed,properties,add,property,name
MutablePropertyValues -> public void registerProcessedProperty(String propertyName);1385412762;Register the specified property as "processed" in the sense_of some processor calling the corresponding setter method_outside of the PropertyValue(s) mechanism._<p>This will lead to {@code true} being returned from_a {@link #contains} call for the specified property._@param propertyName the name of the property.;public void registerProcessedProperty(String propertyName) {_		if (this.processedProperties == null) {_			this.processedProperties = new HashSet<String>()__		}_		this.processedProperties.add(propertyName)__	};register,the,specified,property,as,processed,in,the,sense,of,some,processor,calling,the,corresponding,setter,method,outside,of,the,property,value,s,mechanism,p,this,will,lead,to,code,true,being,returned,from,a,link,contains,call,for,the,specified,property,param,property,name,the,name,of,the,property;public,void,register,processed,property,string,property,name,if,this,processed,properties,null,this,processed,properties,new,hash,set,string,this,processed,properties,add,property,name
MutablePropertyValues -> public void registerProcessedProperty(String propertyName);1419339720;Register the specified property as "processed" in the sense_of some processor calling the corresponding setter method_outside of the PropertyValue(s) mechanism._<p>This will lead to {@code true} being returned from_a {@link #contains} call for the specified property._@param propertyName the name of the property.;public void registerProcessedProperty(String propertyName) {_		if (this.processedProperties == null) {_			this.processedProperties = new HashSet<String>()__		}_		this.processedProperties.add(propertyName)__	};register,the,specified,property,as,processed,in,the,sense,of,some,processor,calling,the,corresponding,setter,method,outside,of,the,property,value,s,mechanism,p,this,will,lead,to,code,true,being,returned,from,a,link,contains,call,for,the,specified,property,param,property,name,the,name,of,the,property;public,void,register,processed,property,string,property,name,if,this,processed,properties,null,this,processed,properties,new,hash,set,string,this,processed,properties,add,property,name
MutablePropertyValues -> public void registerProcessedProperty(String propertyName);1419881658;Register the specified property as "processed" in the sense_of some processor calling the corresponding setter method_outside of the PropertyValue(s) mechanism._<p>This will lead to {@code true} being returned from_a {@link #contains} call for the specified property._@param propertyName the name of the property.;public void registerProcessedProperty(String propertyName) {_		if (this.processedProperties == null) {_			this.processedProperties = new HashSet<String>()__		}_		this.processedProperties.add(propertyName)__	};register,the,specified,property,as,processed,in,the,sense,of,some,processor,calling,the,corresponding,setter,method,outside,of,the,property,value,s,mechanism,p,this,will,lead,to,code,true,being,returned,from,a,link,contains,call,for,the,specified,property,param,property,name,the,name,of,the,property;public,void,register,processed,property,string,property,name,if,this,processed,properties,null,this,processed,properties,new,hash,set,string,this,processed,properties,add,property,name
MutablePropertyValues -> public void registerProcessedProperty(String propertyName);1467730834;Register the specified property as "processed" in the sense_of some processor calling the corresponding setter method_outside of the PropertyValue(s) mechanism._<p>This will lead to {@code true} being returned from_a {@link #contains} call for the specified property._@param propertyName the name of the property.;public void registerProcessedProperty(String propertyName) {_		if (this.processedProperties == null) {_			this.processedProperties = new HashSet<>()__		}_		this.processedProperties.add(propertyName)__	};register,the,specified,property,as,processed,in,the,sense,of,some,processor,calling,the,corresponding,setter,method,outside,of,the,property,value,s,mechanism,p,this,will,lead,to,code,true,being,returned,from,a,link,contains,call,for,the,specified,property,param,property,name,the,name,of,the,property;public,void,register,processed,property,string,property,name,if,this,processed,properties,null,this,processed,properties,new,hash,set,this,processed,properties,add,property,name
MutablePropertyValues -> public void registerProcessedProperty(String propertyName);1495868221;Register the specified property as "processed" in the sense_of some processor calling the corresponding setter method_outside of the PropertyValue(s) mechanism._<p>This will lead to {@code true} being returned from_a {@link #contains} call for the specified property._@param propertyName the name of the property.;public void registerProcessedProperty(String propertyName) {_		if (this.processedProperties == null) {_			this.processedProperties = new HashSet<>()__		}_		this.processedProperties.add(propertyName)__	};register,the,specified,property,as,processed,in,the,sense,of,some,processor,calling,the,corresponding,setter,method,outside,of,the,property,value,s,mechanism,p,this,will,lead,to,code,true,being,returned,from,a,link,contains,call,for,the,specified,property,param,property,name,the,name,of,the,property;public,void,register,processed,property,string,property,name,if,this,processed,properties,null,this,processed,properties,new,hash,set,this,processed,properties,add,property,name
MutablePropertyValues -> public void registerProcessedProperty(String propertyName);1496837955;Register the specified property as "processed" in the sense_of some processor calling the corresponding setter method_outside of the PropertyValue(s) mechanism._<p>This will lead to {@code true} being returned from_a {@link #contains} call for the specified property._@param propertyName the name of the property.;public void registerProcessedProperty(String propertyName) {_		if (this.processedProperties == null) {_			this.processedProperties = new HashSet<>()__		}_		this.processedProperties.add(propertyName)__	};register,the,specified,property,as,processed,in,the,sense,of,some,processor,calling,the,corresponding,setter,method,outside,of,the,property,value,s,mechanism,p,this,will,lead,to,code,true,being,returned,from,a,link,contains,call,for,the,specified,property,param,property,name,the,name,of,the,property;public,void,register,processed,property,string,property,name,if,this,processed,properties,null,this,processed,properties,new,hash,set,this,processed,properties,add,property,name
MutablePropertyValues -> public void registerProcessedProperty(String propertyName);1497250713;Register the specified property as "processed" in the sense_of some processor calling the corresponding setter method_outside of the PropertyValue(s) mechanism._<p>This will lead to {@code true} being returned from_a {@link #contains} call for the specified property._@param propertyName the name of the property.;public void registerProcessedProperty(String propertyName) {_		if (this.processedProperties == null) {_			this.processedProperties = new HashSet<>()__		}_		this.processedProperties.add(propertyName)__	};register,the,specified,property,as,processed,in,the,sense,of,some,processor,calling,the,corresponding,setter,method,outside,of,the,property,value,s,mechanism,p,this,will,lead,to,code,true,being,returned,from,a,link,contains,call,for,the,specified,property,param,property,name,the,name,of,the,property;public,void,register,processed,property,string,property,name,if,this,processed,properties,null,this,processed,properties,new,hash,set,this,processed,properties,add,property,name
MutablePropertyValues -> public void registerProcessedProperty(String propertyName);1498780456;Register the specified property as "processed" in the sense_of some processor calling the corresponding setter method_outside of the PropertyValue(s) mechanism._<p>This will lead to {@code true} being returned from_a {@link #contains} call for the specified property._@param propertyName the name of the property.;public void registerProcessedProperty(String propertyName) {_		if (this.processedProperties == null) {_			this.processedProperties = new HashSet<>()__		}_		this.processedProperties.add(propertyName)__	};register,the,specified,property,as,processed,in,the,sense,of,some,processor,calling,the,corresponding,setter,method,outside,of,the,property,value,s,mechanism,p,this,will,lead,to,code,true,being,returned,from,a,link,contains,call,for,the,specified,property,param,property,name,the,name,of,the,property;public,void,register,processed,property,string,property,name,if,this,processed,properties,null,this,processed,properties,new,hash,set,this,processed,properties,add,property,name
MutablePropertyValues -> public void registerProcessedProperty(String propertyName);1502974979;Register the specified property as "processed" in the sense_of some processor calling the corresponding setter method_outside of the PropertyValue(s) mechanism._<p>This will lead to {@code true} being returned from_a {@link #contains} call for the specified property._@param propertyName the name of the property.;public void registerProcessedProperty(String propertyName) {_		if (this.processedProperties == null) {_			this.processedProperties = new HashSet<>()__		}_		this.processedProperties.add(propertyName)__	};register,the,specified,property,as,processed,in,the,sense,of,some,processor,calling,the,corresponding,setter,method,outside,of,the,property,value,s,mechanism,p,this,will,lead,to,code,true,being,returned,from,a,link,contains,call,for,the,specified,property,param,property,name,the,name,of,the,property;public,void,register,processed,property,string,property,name,if,this,processed,properties,null,this,processed,properties,new,hash,set,this,processed,properties,add,property,name
MutablePropertyValues -> public void registerProcessedProperty(String propertyName);1510606271;Register the specified property as "processed" in the sense_of some processor calling the corresponding setter method_outside of the PropertyValue(s) mechanism._<p>This will lead to {@code true} being returned from_a {@link #contains} call for the specified property._@param propertyName the name of the property.;public void registerProcessedProperty(String propertyName) {_		if (this.processedProperties == null) {_			this.processedProperties = new HashSet<>(4)__		}_		this.processedProperties.add(propertyName)__	};register,the,specified,property,as,processed,in,the,sense,of,some,processor,calling,the,corresponding,setter,method,outside,of,the,property,value,s,mechanism,p,this,will,lead,to,code,true,being,returned,from,a,link,contains,call,for,the,specified,property,param,property,name,the,name,of,the,property;public,void,register,processed,property,string,property,name,if,this,processed,properties,null,this,processed,properties,new,hash,set,4,this,processed,properties,add,property,name
MutablePropertyValues -> public void registerProcessedProperty(String propertyName);1519295386;Register the specified property as "processed" in the sense_of some processor calling the corresponding setter method_outside of the PropertyValue(s) mechanism._<p>This will lead to {@code true} being returned from_a {@link #contains} call for the specified property._@param propertyName the name of the property.;public void registerProcessedProperty(String propertyName) {_		if (this.processedProperties == null) {_			this.processedProperties = new HashSet<>(4)__		}_		this.processedProperties.add(propertyName)__	};register,the,specified,property,as,processed,in,the,sense,of,some,processor,calling,the,corresponding,setter,method,outside,of,the,property,value,s,mechanism,p,this,will,lead,to,code,true,being,returned,from,a,link,contains,call,for,the,specified,property,param,property,name,the,name,of,the,property;public,void,register,processed,property,string,property,name,if,this,processed,properties,null,this,processed,properties,new,hash,set,4,this,processed,properties,add,property,name
MutablePropertyValues -> public void registerProcessedProperty(String propertyName);1522359230;Register the specified property as "processed" in the sense_of some processor calling the corresponding setter method_outside of the PropertyValue(s) mechanism._<p>This will lead to {@code true} being returned from_a {@link #contains} call for the specified property._@param propertyName the name of the property.;public void registerProcessedProperty(String propertyName) {_		if (this.processedProperties == null) {_			this.processedProperties = new HashSet<>(4)__		}_		this.processedProperties.add(propertyName)__	};register,the,specified,property,as,processed,in,the,sense,of,some,processor,calling,the,corresponding,setter,method,outside,of,the,property,value,s,mechanism,p,this,will,lead,to,code,true,being,returned,from,a,link,contains,call,for,the,specified,property,param,property,name,the,name,of,the,property;public,void,register,processed,property,string,property,name,if,this,processed,properties,null,this,processed,properties,new,hash,set,4,this,processed,properties,add,property,name
MutablePropertyValues -> public void registerProcessedProperty(String propertyName);1530174524;Register the specified property as "processed" in the sense_of some processor calling the corresponding setter method_outside of the PropertyValue(s) mechanism._<p>This will lead to {@code true} being returned from_a {@link #contains} call for the specified property._@param propertyName the name of the property.;public void registerProcessedProperty(String propertyName) {_		if (this.processedProperties == null) {_			this.processedProperties = new HashSet<>(4)__		}_		this.processedProperties.add(propertyName)__	};register,the,specified,property,as,processed,in,the,sense,of,some,processor,calling,the,corresponding,setter,method,outside,of,the,property,value,s,mechanism,p,this,will,lead,to,code,true,being,returned,from,a,link,contains,call,for,the,specified,property,param,property,name,the,name,of,the,property;public,void,register,processed,property,string,property,name,if,this,processed,properties,null,this,processed,properties,new,hash,set,4,this,processed,properties,add,property,name
MutablePropertyValues -> public void registerProcessedProperty(String propertyName);1530190293;Register the specified property as "processed" in the sense_of some processor calling the corresponding setter method_outside of the PropertyValue(s) mechanism._<p>This will lead to {@code true} being returned from_a {@link #contains} call for the specified property._@param propertyName the name of the property.;public void registerProcessedProperty(String propertyName) {_		if (this.processedProperties == null) {_			this.processedProperties = new HashSet<>(4)__		}_		this.processedProperties.add(propertyName)__	};register,the,specified,property,as,processed,in,the,sense,of,some,processor,calling,the,corresponding,setter,method,outside,of,the,property,value,s,mechanism,p,this,will,lead,to,code,true,being,returned,from,a,link,contains,call,for,the,specified,property,param,property,name,the,name,of,the,property;public,void,register,processed,property,string,property,name,if,this,processed,properties,null,this,processed,properties,new,hash,set,4,this,processed,properties,add,property,name
MutablePropertyValues -> public void registerProcessedProperty(String propertyName);1530827996;Register the specified property as "processed" in the sense_of some processor calling the corresponding setter method_outside of the PropertyValue(s) mechanism._<p>This will lead to {@code true} being returned from_a {@link #contains} call for the specified property._@param propertyName the name of the property.;public void registerProcessedProperty(String propertyName) {_		if (this.processedProperties == null) {_			this.processedProperties = new HashSet<>(4)__		}_		this.processedProperties.add(propertyName)__	};register,the,specified,property,as,processed,in,the,sense,of,some,processor,calling,the,corresponding,setter,method,outside,of,the,property,value,s,mechanism,p,this,will,lead,to,code,true,being,returned,from,a,link,contains,call,for,the,specified,property,param,property,name,the,name,of,the,property;public,void,register,processed,property,string,property,name,if,this,processed,properties,null,this,processed,properties,new,hash,set,4,this,processed,properties,add,property,name
MutablePropertyValues -> public MutablePropertyValues(@Nullable Map<?, ?> original);1496837955;Construct a new MutablePropertyValues object from a Map._@param original Map with property values keyed by property name Strings_@see #addPropertyValues(Map);public MutablePropertyValues(@Nullable Map<?, ?> original) {_		_		_		if (original != null) {_			this.propertyValueList = new ArrayList<>(original.size())__			for (Map.Entry<?, ?> entry : original.entrySet()) {_				this.propertyValueList.add(new PropertyValue(entry.getKey().toString(), entry.getValue()))__			}_		}_		else {_			this.propertyValueList = new ArrayList<>(0)__		}_	};construct,a,new,mutable,property,values,object,from,a,map,param,original,map,with,property,values,keyed,by,property,name,strings,see,add,property,values,map;public,mutable,property,values,nullable,map,original,if,original,null,this,property,value,list,new,array,list,original,size,for,map,entry,entry,original,entry,set,this,property,value,list,add,new,property,value,entry,get,key,to,string,entry,get,value,else,this,property,value,list,new,array,list,0
MutablePropertyValues -> public MutablePropertyValues(@Nullable Map<?, ?> original);1497250713;Construct a new MutablePropertyValues object from a Map._@param original Map with property values keyed by property name Strings_@see #addPropertyValues(Map);public MutablePropertyValues(@Nullable Map<?, ?> original) {_		_		_		if (original != null) {_			this.propertyValueList = new ArrayList<>(original.size())__			original.forEach((attrName, attrValue) -> this.propertyValueList.add(_					new PropertyValue(attrName.toString(), attrValue)))__		}_		else {_			this.propertyValueList = new ArrayList<>(0)__		}_	};construct,a,new,mutable,property,values,object,from,a,map,param,original,map,with,property,values,keyed,by,property,name,strings,see,add,property,values,map;public,mutable,property,values,nullable,map,original,if,original,null,this,property,value,list,new,array,list,original,size,original,for,each,attr,name,attr,value,this,property,value,list,add,new,property,value,attr,name,to,string,attr,value,else,this,property,value,list,new,array,list,0
MutablePropertyValues -> public MutablePropertyValues(@Nullable Map<?, ?> original);1498780456;Construct a new MutablePropertyValues object from a Map._@param original Map with property values keyed by property name Strings_@see #addPropertyValues(Map);public MutablePropertyValues(@Nullable Map<?, ?> original) {_		_		_		if (original != null) {_			this.propertyValueList = new ArrayList<>(original.size())__			original.forEach((attrName, attrValue) -> this.propertyValueList.add(_					new PropertyValue(attrName.toString(), attrValue)))__		}_		else {_			this.propertyValueList = new ArrayList<>(0)__		}_	};construct,a,new,mutable,property,values,object,from,a,map,param,original,map,with,property,values,keyed,by,property,name,strings,see,add,property,values,map;public,mutable,property,values,nullable,map,original,if,original,null,this,property,value,list,new,array,list,original,size,original,for,each,attr,name,attr,value,this,property,value,list,add,new,property,value,attr,name,to,string,attr,value,else,this,property,value,list,new,array,list,0
MutablePropertyValues -> public MutablePropertyValues(@Nullable Map<?, ?> original);1502974979;Construct a new MutablePropertyValues object from a Map._@param original Map with property values keyed by property name Strings_@see #addPropertyValues(Map);public MutablePropertyValues(@Nullable Map<?, ?> original) {_		_		_		if (original != null) {_			this.propertyValueList = new ArrayList<>(original.size())__			original.forEach((attrName, attrValue) -> this.propertyValueList.add(_					new PropertyValue(attrName.toString(), attrValue)))__		}_		else {_			this.propertyValueList = new ArrayList<>(0)__		}_	};construct,a,new,mutable,property,values,object,from,a,map,param,original,map,with,property,values,keyed,by,property,name,strings,see,add,property,values,map;public,mutable,property,values,nullable,map,original,if,original,null,this,property,value,list,new,array,list,original,size,original,for,each,attr,name,attr,value,this,property,value,list,add,new,property,value,attr,name,to,string,attr,value,else,this,property,value,list,new,array,list,0
MutablePropertyValues -> public MutablePropertyValues(@Nullable Map<?, ?> original);1510606271;Construct a new MutablePropertyValues object from a Map._@param original Map with property values keyed by property name Strings_@see #addPropertyValues(Map);public MutablePropertyValues(@Nullable Map<?, ?> original) {_		_		_		if (original != null) {_			this.propertyValueList = new ArrayList<>(original.size())__			original.forEach((attrName, attrValue) -> this.propertyValueList.add(_					new PropertyValue(attrName.toString(), attrValue)))__		}_		else {_			this.propertyValueList = new ArrayList<>(0)__		}_	};construct,a,new,mutable,property,values,object,from,a,map,param,original,map,with,property,values,keyed,by,property,name,strings,see,add,property,values,map;public,mutable,property,values,nullable,map,original,if,original,null,this,property,value,list,new,array,list,original,size,original,for,each,attr,name,attr,value,this,property,value,list,add,new,property,value,attr,name,to,string,attr,value,else,this,property,value,list,new,array,list,0
MutablePropertyValues -> public MutablePropertyValues(@Nullable Map<?, ?> original);1519295386;Construct a new MutablePropertyValues object from a Map._@param original Map with property values keyed by property name Strings_@see #addPropertyValues(Map);public MutablePropertyValues(@Nullable Map<?, ?> original) {_		_		_		if (original != null) {_			this.propertyValueList = new ArrayList<>(original.size())__			original.forEach((attrName, attrValue) -> this.propertyValueList.add(_					new PropertyValue(attrName.toString(), attrValue)))__		}_		else {_			this.propertyValueList = new ArrayList<>(0)__		}_	};construct,a,new,mutable,property,values,object,from,a,map,param,original,map,with,property,values,keyed,by,property,name,strings,see,add,property,values,map;public,mutable,property,values,nullable,map,original,if,original,null,this,property,value,list,new,array,list,original,size,original,for,each,attr,name,attr,value,this,property,value,list,add,new,property,value,attr,name,to,string,attr,value,else,this,property,value,list,new,array,list,0
MutablePropertyValues -> public MutablePropertyValues(@Nullable Map<?, ?> original);1522359230;Construct a new MutablePropertyValues object from a Map._@param original Map with property values keyed by property name Strings_@see #addPropertyValues(Map);public MutablePropertyValues(@Nullable Map<?, ?> original) {_		_		_		if (original != null) {_			this.propertyValueList = new ArrayList<>(original.size())__			original.forEach((attrName, attrValue) -> this.propertyValueList.add(_					new PropertyValue(attrName.toString(), attrValue)))__		}_		else {_			this.propertyValueList = new ArrayList<>(0)__		}_	};construct,a,new,mutable,property,values,object,from,a,map,param,original,map,with,property,values,keyed,by,property,name,strings,see,add,property,values,map;public,mutable,property,values,nullable,map,original,if,original,null,this,property,value,list,new,array,list,original,size,original,for,each,attr,name,attr,value,this,property,value,list,add,new,property,value,attr,name,to,string,attr,value,else,this,property,value,list,new,array,list,0
MutablePropertyValues -> public MutablePropertyValues(@Nullable Map<?, ?> original);1530174524;Construct a new MutablePropertyValues object from a Map._@param original a Map with property values keyed by property name Strings_@see #addPropertyValues(Map);public MutablePropertyValues(@Nullable Map<?, ?> original) {_		_		_		if (original != null) {_			this.propertyValueList = new ArrayList<>(original.size())__			original.forEach((attrName, attrValue) -> this.propertyValueList.add(_					new PropertyValue(attrName.toString(), attrValue)))__		}_		else {_			this.propertyValueList = new ArrayList<>(0)__		}_	};construct,a,new,mutable,property,values,object,from,a,map,param,original,a,map,with,property,values,keyed,by,property,name,strings,see,add,property,values,map;public,mutable,property,values,nullable,map,original,if,original,null,this,property,value,list,new,array,list,original,size,original,for,each,attr,name,attr,value,this,property,value,list,add,new,property,value,attr,name,to,string,attr,value,else,this,property,value,list,new,array,list,0
MutablePropertyValues -> public MutablePropertyValues(@Nullable Map<?, ?> original);1530190293;Construct a new MutablePropertyValues object from a Map._@param original a Map with property values keyed by property name Strings_@see #addPropertyValues(Map);public MutablePropertyValues(@Nullable Map<?, ?> original) {_		_		_		if (original != null) {_			this.propertyValueList = new ArrayList<>(original.size())__			original.forEach((attrName, attrValue) -> this.propertyValueList.add(_					new PropertyValue(attrName.toString(), attrValue)))__		}_		else {_			this.propertyValueList = new ArrayList<>(0)__		}_	};construct,a,new,mutable,property,values,object,from,a,map,param,original,a,map,with,property,values,keyed,by,property,name,strings,see,add,property,values,map;public,mutable,property,values,nullable,map,original,if,original,null,this,property,value,list,new,array,list,original,size,original,for,each,attr,name,attr,value,this,property,value,list,add,new,property,value,attr,name,to,string,attr,value,else,this,property,value,list,new,array,list,0
MutablePropertyValues -> public MutablePropertyValues(@Nullable Map<?, ?> original);1530827996;Construct a new MutablePropertyValues object from a Map._@param original a Map with property values keyed by property name Strings_@see #addPropertyValues(Map);public MutablePropertyValues(@Nullable Map<?, ?> original) {_		_		_		if (original != null) {_			this.propertyValueList = new ArrayList<>(original.size())__			original.forEach((attrName, attrValue) -> this.propertyValueList.add(_					new PropertyValue(attrName.toString(), attrValue)))__		}_		else {_			this.propertyValueList = new ArrayList<>(0)__		}_	};construct,a,new,mutable,property,values,object,from,a,map,param,original,a,map,with,property,values,keyed,by,property,name,strings,see,add,property,values,map;public,mutable,property,values,nullable,map,original,if,original,null,this,property,value,list,new,array,list,original,size,original,for,each,attr,name,attr,value,this,property,value,list,add,new,property,value,attr,name,to,string,attr,value,else,this,property,value,list,new,array,list,0
MutablePropertyValues -> public Object get(String propertyName);1382030648;Get the raw property value, if any._@param propertyName the name to search for_@return the raw property value, or {@code null}_@see #getPropertyValue(String)_@see PropertyValue#getValue();public Object get(String propertyName) {_		PropertyValue pv = getPropertyValue(propertyName)__		return (pv != null ? pv.getValue() : null)__	};get,the,raw,property,value,if,any,param,property,name,the,name,to,search,for,return,the,raw,property,value,or,code,null,see,get,property,value,string,see,property,value,get,value;public,object,get,string,property,name,property,value,pv,get,property,value,property,name,return,pv,null,pv,get,value,null
MutablePropertyValues -> public Object get(String propertyName);1385412762;Get the raw property value, if any._@param propertyName the name to search for_@return the raw property value, or {@code null}_@see #getPropertyValue(String)_@see PropertyValue#getValue();public Object get(String propertyName) {_		PropertyValue pv = getPropertyValue(propertyName)__		return (pv != null ? pv.getValue() : null)__	};get,the,raw,property,value,if,any,param,property,name,the,name,to,search,for,return,the,raw,property,value,or,code,null,see,get,property,value,string,see,property,value,get,value;public,object,get,string,property,name,property,value,pv,get,property,value,property,name,return,pv,null,pv,get,value,null
MutablePropertyValues -> public Object get(String propertyName);1419339720;Get the raw property value, if any._@param propertyName the name to search for_@return the raw property value, or {@code null}_@see #getPropertyValue(String)_@see PropertyValue#getValue();public Object get(String propertyName) {_		PropertyValue pv = getPropertyValue(propertyName)__		return (pv != null ? pv.getValue() : null)__	};get,the,raw,property,value,if,any,param,property,name,the,name,to,search,for,return,the,raw,property,value,or,code,null,see,get,property,value,string,see,property,value,get,value;public,object,get,string,property,name,property,value,pv,get,property,value,property,name,return,pv,null,pv,get,value,null
MutablePropertyValues -> public Object get(String propertyName);1419881658;Get the raw property value, if any._@param propertyName the name to search for_@return the raw property value, or {@code null}_@since 4.0_@see #getPropertyValue(String)_@see PropertyValue#getValue();public Object get(String propertyName) {_		PropertyValue pv = getPropertyValue(propertyName)__		return (pv != null ? pv.getValue() : null)__	};get,the,raw,property,value,if,any,param,property,name,the,name,to,search,for,return,the,raw,property,value,or,code,null,since,4,0,see,get,property,value,string,see,property,value,get,value;public,object,get,string,property,name,property,value,pv,get,property,value,property,name,return,pv,null,pv,get,value,null
MutablePropertyValues -> public Object get(String propertyName);1467730834;Get the raw property value, if any._@param propertyName the name to search for_@return the raw property value, or {@code null}_@since 4.0_@see #getPropertyValue(String)_@see PropertyValue#getValue();public Object get(String propertyName) {_		PropertyValue pv = getPropertyValue(propertyName)__		return (pv != null ? pv.getValue() : null)__	};get,the,raw,property,value,if,any,param,property,name,the,name,to,search,for,return,the,raw,property,value,or,code,null,since,4,0,see,get,property,value,string,see,property,value,get,value;public,object,get,string,property,name,property,value,pv,get,property,value,property,name,return,pv,null,pv,get,value,null
MutablePropertyValues -> public MutablePropertyValues(PropertyValues original);1328020251;Deep copy constructor. Guarantees PropertyValue references_are independent, although it can't deep copy objects currently_referenced by individual PropertyValue objects._@param original the PropertyValues to copy_@see #addPropertyValues(PropertyValues);public MutablePropertyValues(PropertyValues original) {_		_		_		if (original != null) {_			PropertyValue[] pvs = original.getPropertyValues()__			this.propertyValueList = new ArrayList<PropertyValue>(pvs.length)__			for (PropertyValue pv : pvs) {_				this.propertyValueList.add(new PropertyValue(pv))__			}_		}_		else {_			this.propertyValueList = new ArrayList<PropertyValue>(0)__		}_	};deep,copy,constructor,guarantees,property,value,references,are,independent,although,it,can,t,deep,copy,objects,currently,referenced,by,individual,property,value,objects,param,original,the,property,values,to,copy,see,add,property,values,property,values;public,mutable,property,values,property,values,original,if,original,null,property,value,pvs,original,get,property,values,this,property,value,list,new,array,list,property,value,pvs,length,for,property,value,pv,pvs,this,property,value,list,add,new,property,value,pv,else,this,property,value,list,new,array,list,property,value,0
MutablePropertyValues -> public MutablePropertyValues(PropertyValues original);1356735495;Deep copy constructor. Guarantees PropertyValue references_are independent, although it can't deep copy objects currently_referenced by individual PropertyValue objects._@param original the PropertyValues to copy_@see #addPropertyValues(PropertyValues);public MutablePropertyValues(PropertyValues original) {_		_		_		if (original != null) {_			PropertyValue[] pvs = original.getPropertyValues()__			this.propertyValueList = new ArrayList<PropertyValue>(pvs.length)__			for (PropertyValue pv : pvs) {_				this.propertyValueList.add(new PropertyValue(pv))__			}_		}_		else {_			this.propertyValueList = new ArrayList<PropertyValue>(0)__		}_	};deep,copy,constructor,guarantees,property,value,references,are,independent,although,it,can,t,deep,copy,objects,currently,referenced,by,individual,property,value,objects,param,original,the,property,values,to,copy,see,add,property,values,property,values;public,mutable,property,values,property,values,original,if,original,null,property,value,pvs,original,get,property,values,this,property,value,list,new,array,list,property,value,pvs,length,for,property,value,pv,pvs,this,property,value,list,add,new,property,value,pv,else,this,property,value,list,new,array,list,property,value,0
MutablePropertyValues -> public MutablePropertyValues(PropertyValues original);1357119239;Deep copy constructor. Guarantees PropertyValue references_are independent, although it can't deep copy objects currently_referenced by individual PropertyValue objects._@param original the PropertyValues to copy_@see #addPropertyValues(PropertyValues);public MutablePropertyValues(PropertyValues original) {_		_		_		if (original != null) {_			PropertyValue[] pvs = original.getPropertyValues()__			this.propertyValueList = new ArrayList<PropertyValue>(pvs.length)__			for (PropertyValue pv : pvs) {_				this.propertyValueList.add(new PropertyValue(pv))__			}_		}_		else {_			this.propertyValueList = new ArrayList<PropertyValue>(0)__		}_	};deep,copy,constructor,guarantees,property,value,references,are,independent,although,it,can,t,deep,copy,objects,currently,referenced,by,individual,property,value,objects,param,original,the,property,values,to,copy,see,add,property,values,property,values;public,mutable,property,values,property,values,original,if,original,null,property,value,pvs,original,get,property,values,this,property,value,list,new,array,list,property,value,pvs,length,for,property,value,pv,pvs,this,property,value,list,add,new,property,value,pv,else,this,property,value,list,new,array,list,property,value,0
MutablePropertyValues -> public MutablePropertyValues(PropertyValues original);1368482696;Deep copy constructor. Guarantees PropertyValue references_are independent, although it can't deep copy objects currently_referenced by individual PropertyValue objects._@param original the PropertyValues to copy_@see #addPropertyValues(PropertyValues);public MutablePropertyValues(PropertyValues original) {_		_		_		if (original != null) {_			PropertyValue[] pvs = original.getPropertyValues()__			this.propertyValueList = new ArrayList<PropertyValue>(pvs.length)__			for (PropertyValue pv : pvs) {_				this.propertyValueList.add(new PropertyValue(pv))__			}_		}_		else {_			this.propertyValueList = new ArrayList<PropertyValue>(0)__		}_	};deep,copy,constructor,guarantees,property,value,references,are,independent,although,it,can,t,deep,copy,objects,currently,referenced,by,individual,property,value,objects,param,original,the,property,values,to,copy,see,add,property,values,property,values;public,mutable,property,values,property,values,original,if,original,null,property,value,pvs,original,get,property,values,this,property,value,list,new,array,list,property,value,pvs,length,for,property,value,pv,pvs,this,property,value,list,add,new,property,value,pv,else,this,property,value,list,new,array,list,property,value,0
MutablePropertyValues -> public MutablePropertyValues(PropertyValues original);1382030648;Deep copy constructor. Guarantees PropertyValue references_are independent, although it can't deep copy objects currently_referenced by individual PropertyValue objects._@param original the PropertyValues to copy_@see #addPropertyValues(PropertyValues);public MutablePropertyValues(PropertyValues original) {_		_		_		if (original != null) {_			PropertyValue[] pvs = original.getPropertyValues()__			this.propertyValueList = new ArrayList<PropertyValue>(pvs.length)__			for (PropertyValue pv : pvs) {_				this.propertyValueList.add(new PropertyValue(pv))__			}_		}_		else {_			this.propertyValueList = new ArrayList<PropertyValue>(0)__		}_	};deep,copy,constructor,guarantees,property,value,references,are,independent,although,it,can,t,deep,copy,objects,currently,referenced,by,individual,property,value,objects,param,original,the,property,values,to,copy,see,add,property,values,property,values;public,mutable,property,values,property,values,original,if,original,null,property,value,pvs,original,get,property,values,this,property,value,list,new,array,list,property,value,pvs,length,for,property,value,pv,pvs,this,property,value,list,add,new,property,value,pv,else,this,property,value,list,new,array,list,property,value,0
MutablePropertyValues -> public MutablePropertyValues(PropertyValues original);1385412762;Deep copy constructor. Guarantees PropertyValue references_are independent, although it can't deep copy objects currently_referenced by individual PropertyValue objects._@param original the PropertyValues to copy_@see #addPropertyValues(PropertyValues);public MutablePropertyValues(PropertyValues original) {_		_		_		if (original != null) {_			PropertyValue[] pvs = original.getPropertyValues()__			this.propertyValueList = new ArrayList<PropertyValue>(pvs.length)__			for (PropertyValue pv : pvs) {_				this.propertyValueList.add(new PropertyValue(pv))__			}_		}_		else {_			this.propertyValueList = new ArrayList<PropertyValue>(0)__		}_	};deep,copy,constructor,guarantees,property,value,references,are,independent,although,it,can,t,deep,copy,objects,currently,referenced,by,individual,property,value,objects,param,original,the,property,values,to,copy,see,add,property,values,property,values;public,mutable,property,values,property,values,original,if,original,null,property,value,pvs,original,get,property,values,this,property,value,list,new,array,list,property,value,pvs,length,for,property,value,pv,pvs,this,property,value,list,add,new,property,value,pv,else,this,property,value,list,new,array,list,property,value,0
MutablePropertyValues -> public MutablePropertyValues(PropertyValues original);1419339720;Deep copy constructor. Guarantees PropertyValue references_are independent, although it can't deep copy objects currently_referenced by individual PropertyValue objects._@param original the PropertyValues to copy_@see #addPropertyValues(PropertyValues);public MutablePropertyValues(PropertyValues original) {_		_		_		if (original != null) {_			PropertyValue[] pvs = original.getPropertyValues()__			this.propertyValueList = new ArrayList<PropertyValue>(pvs.length)__			for (PropertyValue pv : pvs) {_				this.propertyValueList.add(new PropertyValue(pv))__			}_		}_		else {_			this.propertyValueList = new ArrayList<PropertyValue>(0)__		}_	};deep,copy,constructor,guarantees,property,value,references,are,independent,although,it,can,t,deep,copy,objects,currently,referenced,by,individual,property,value,objects,param,original,the,property,values,to,copy,see,add,property,values,property,values;public,mutable,property,values,property,values,original,if,original,null,property,value,pvs,original,get,property,values,this,property,value,list,new,array,list,property,value,pvs,length,for,property,value,pv,pvs,this,property,value,list,add,new,property,value,pv,else,this,property,value,list,new,array,list,property,value,0
MutablePropertyValues -> public MutablePropertyValues(PropertyValues original);1419881658;Deep copy constructor. Guarantees PropertyValue references_are independent, although it can't deep copy objects currently_referenced by individual PropertyValue objects._@param original the PropertyValues to copy_@see #addPropertyValues(PropertyValues);public MutablePropertyValues(PropertyValues original) {_		_		_		if (original != null) {_			PropertyValue[] pvs = original.getPropertyValues()__			this.propertyValueList = new ArrayList<PropertyValue>(pvs.length)__			for (PropertyValue pv : pvs) {_				this.propertyValueList.add(new PropertyValue(pv))__			}_		}_		else {_			this.propertyValueList = new ArrayList<PropertyValue>(0)__		}_	};deep,copy,constructor,guarantees,property,value,references,are,independent,although,it,can,t,deep,copy,objects,currently,referenced,by,individual,property,value,objects,param,original,the,property,values,to,copy,see,add,property,values,property,values;public,mutable,property,values,property,values,original,if,original,null,property,value,pvs,original,get,property,values,this,property,value,list,new,array,list,property,value,pvs,length,for,property,value,pv,pvs,this,property,value,list,add,new,property,value,pv,else,this,property,value,list,new,array,list,property,value,0
MutablePropertyValues -> public MutablePropertyValues(PropertyValues original);1467730834;Deep copy constructor. Guarantees PropertyValue references_are independent, although it can't deep copy objects currently_referenced by individual PropertyValue objects._@param original the PropertyValues to copy_@see #addPropertyValues(PropertyValues);public MutablePropertyValues(PropertyValues original) {_		_		_		if (original != null) {_			PropertyValue[] pvs = original.getPropertyValues()__			this.propertyValueList = new ArrayList<>(pvs.length)__			for (PropertyValue pv : pvs) {_				this.propertyValueList.add(new PropertyValue(pv))__			}_		}_		else {_			this.propertyValueList = new ArrayList<>(0)__		}_	};deep,copy,constructor,guarantees,property,value,references,are,independent,although,it,can,t,deep,copy,objects,currently,referenced,by,individual,property,value,objects,param,original,the,property,values,to,copy,see,add,property,values,property,values;public,mutable,property,values,property,values,original,if,original,null,property,value,pvs,original,get,property,values,this,property,value,list,new,array,list,pvs,length,for,property,value,pv,pvs,this,property,value,list,add,new,property,value,pv,else,this,property,value,list,new,array,list,0
MutablePropertyValues -> public MutablePropertyValues(PropertyValues original);1495868221;Deep copy constructor. Guarantees PropertyValue references_are independent, although it can't deep copy objects currently_referenced by individual PropertyValue objects._@param original the PropertyValues to copy_@see #addPropertyValues(PropertyValues);public MutablePropertyValues(PropertyValues original) {_		_		_		if (original != null) {_			PropertyValue[] pvs = original.getPropertyValues()__			this.propertyValueList = new ArrayList<>(pvs.length)__			for (PropertyValue pv : pvs) {_				this.propertyValueList.add(new PropertyValue(pv))__			}_		}_		else {_			this.propertyValueList = new ArrayList<>(0)__		}_	};deep,copy,constructor,guarantees,property,value,references,are,independent,although,it,can,t,deep,copy,objects,currently,referenced,by,individual,property,value,objects,param,original,the,property,values,to,copy,see,add,property,values,property,values;public,mutable,property,values,property,values,original,if,original,null,property,value,pvs,original,get,property,values,this,property,value,list,new,array,list,pvs,length,for,property,value,pv,pvs,this,property,value,list,add,new,property,value,pv,else,this,property,value,list,new,array,list,0
MutablePropertyValues -> public void setConverted();1328020251;Mark this holder as containing converted values only_(i.e. no runtime resolution needed anymore).;public void setConverted() {_		this.converted = true__	};mark,this,holder,as,containing,converted,values,only,i,e,no,runtime,resolution,needed,anymore;public,void,set,converted,this,converted,true
MutablePropertyValues -> public void setConverted();1356735495;Mark this holder as containing converted values only_(i.e. no runtime resolution needed anymore).;public void setConverted() {_		this.converted = true__	};mark,this,holder,as,containing,converted,values,only,i,e,no,runtime,resolution,needed,anymore;public,void,set,converted,this,converted,true
MutablePropertyValues -> public void setConverted();1357119239;Mark this holder as containing converted values only_(i.e. no runtime resolution needed anymore).;public void setConverted() {_		this.converted = true__	};mark,this,holder,as,containing,converted,values,only,i,e,no,runtime,resolution,needed,anymore;public,void,set,converted,this,converted,true
MutablePropertyValues -> public void setConverted();1368482696;Mark this holder as containing converted values only_(i.e. no runtime resolution needed anymore).;public void setConverted() {_		this.converted = true__	};mark,this,holder,as,containing,converted,values,only,i,e,no,runtime,resolution,needed,anymore;public,void,set,converted,this,converted,true
MutablePropertyValues -> public void setConverted();1382030648;Mark this holder as containing converted values only_(i.e. no runtime resolution needed anymore).;public void setConverted() {_		this.converted = true__	};mark,this,holder,as,containing,converted,values,only,i,e,no,runtime,resolution,needed,anymore;public,void,set,converted,this,converted,true
MutablePropertyValues -> public void setConverted();1385412762;Mark this holder as containing converted values only_(i.e. no runtime resolution needed anymore).;public void setConverted() {_		this.converted = true__	};mark,this,holder,as,containing,converted,values,only,i,e,no,runtime,resolution,needed,anymore;public,void,set,converted,this,converted,true
MutablePropertyValues -> public void setConverted();1419339720;Mark this holder as containing converted values only_(i.e. no runtime resolution needed anymore).;public void setConverted() {_		this.converted = true__	};mark,this,holder,as,containing,converted,values,only,i,e,no,runtime,resolution,needed,anymore;public,void,set,converted,this,converted,true
MutablePropertyValues -> public void setConverted();1419881658;Mark this holder as containing converted values only_(i.e. no runtime resolution needed anymore).;public void setConverted() {_		this.converted = true__	};mark,this,holder,as,containing,converted,values,only,i,e,no,runtime,resolution,needed,anymore;public,void,set,converted,this,converted,true
MutablePropertyValues -> public void setConverted();1467730834;Mark this holder as containing converted values only_(i.e. no runtime resolution needed anymore).;public void setConverted() {_		this.converted = true__	};mark,this,holder,as,containing,converted,values,only,i,e,no,runtime,resolution,needed,anymore;public,void,set,converted,this,converted,true
MutablePropertyValues -> public void setConverted();1495868221;Mark this holder as containing converted values only_(i.e. no runtime resolution needed anymore).;public void setConverted() {_		this.converted = true__	};mark,this,holder,as,containing,converted,values,only,i,e,no,runtime,resolution,needed,anymore;public,void,set,converted,this,converted,true
MutablePropertyValues -> public void setConverted();1496837955;Mark this holder as containing converted values only_(i.e. no runtime resolution needed anymore).;public void setConverted() {_		this.converted = true__	};mark,this,holder,as,containing,converted,values,only,i,e,no,runtime,resolution,needed,anymore;public,void,set,converted,this,converted,true
MutablePropertyValues -> public void setConverted();1497250713;Mark this holder as containing converted values only_(i.e. no runtime resolution needed anymore).;public void setConverted() {_		this.converted = true__	};mark,this,holder,as,containing,converted,values,only,i,e,no,runtime,resolution,needed,anymore;public,void,set,converted,this,converted,true
MutablePropertyValues -> public void setConverted();1498780456;Mark this holder as containing converted values only_(i.e. no runtime resolution needed anymore).;public void setConverted() {_		this.converted = true__	};mark,this,holder,as,containing,converted,values,only,i,e,no,runtime,resolution,needed,anymore;public,void,set,converted,this,converted,true
MutablePropertyValues -> public void setConverted();1502974979;Mark this holder as containing converted values only_(i.e. no runtime resolution needed anymore).;public void setConverted() {_		this.converted = true__	};mark,this,holder,as,containing,converted,values,only,i,e,no,runtime,resolution,needed,anymore;public,void,set,converted,this,converted,true
MutablePropertyValues -> public void setConverted();1510606271;Mark this holder as containing converted values only_(i.e. no runtime resolution needed anymore).;public void setConverted() {_		this.converted = true__	};mark,this,holder,as,containing,converted,values,only,i,e,no,runtime,resolution,needed,anymore;public,void,set,converted,this,converted,true
MutablePropertyValues -> public void setConverted();1519295386;Mark this holder as containing converted values only_(i.e. no runtime resolution needed anymore).;public void setConverted() {_		this.converted = true__	};mark,this,holder,as,containing,converted,values,only,i,e,no,runtime,resolution,needed,anymore;public,void,set,converted,this,converted,true
MutablePropertyValues -> public void setConverted();1522359230;Mark this holder as containing converted values only_(i.e. no runtime resolution needed anymore).;public void setConverted() {_		this.converted = true__	};mark,this,holder,as,containing,converted,values,only,i,e,no,runtime,resolution,needed,anymore;public,void,set,converted,this,converted,true
MutablePropertyValues -> public void setConverted();1530174524;Mark this holder as containing converted values only_(i.e. no runtime resolution needed anymore).;public void setConverted() {_		this.converted = true__	};mark,this,holder,as,containing,converted,values,only,i,e,no,runtime,resolution,needed,anymore;public,void,set,converted,this,converted,true
MutablePropertyValues -> public void setConverted();1530190293;Mark this holder as containing converted values only_(i.e. no runtime resolution needed anymore).;public void setConverted() {_		this.converted = true__	};mark,this,holder,as,containing,converted,values,only,i,e,no,runtime,resolution,needed,anymore;public,void,set,converted,this,converted,true
MutablePropertyValues -> public void setConverted();1530827996;Mark this holder as containing converted values only_(i.e. no runtime resolution needed anymore).;public void setConverted() {_		this.converted = true__	};mark,this,holder,as,containing,converted,values,only,i,e,no,runtime,resolution,needed,anymore;public,void,set,converted,this,converted,true
MutablePropertyValues -> public MutablePropertyValues(List<PropertyValue> propertyValueList);1328020251;Construct a new MutablePropertyValues object using the given List of_PropertyValue objects as-is._<p>This is a constructor for advanced usage scenarios._It is not intended for typical programmatic use._@param propertyValueList List of PropertyValue objects;public MutablePropertyValues(List<PropertyValue> propertyValueList) {_		this.propertyValueList =_				(propertyValueList != null ? propertyValueList : new ArrayList<PropertyValue>())__	};construct,a,new,mutable,property,values,object,using,the,given,list,of,property,value,objects,as,is,p,this,is,a,constructor,for,advanced,usage,scenarios,it,is,not,intended,for,typical,programmatic,use,param,property,value,list,list,of,property,value,objects;public,mutable,property,values,list,property,value,property,value,list,this,property,value,list,property,value,list,null,property,value,list,new,array,list,property,value
MutablePropertyValues -> public MutablePropertyValues(List<PropertyValue> propertyValueList);1356735495;Construct a new MutablePropertyValues object using the given List of_PropertyValue objects as-is._<p>This is a constructor for advanced usage scenarios._It is not intended for typical programmatic use._@param propertyValueList List of PropertyValue objects;public MutablePropertyValues(List<PropertyValue> propertyValueList) {_		this.propertyValueList =_				(propertyValueList != null ? propertyValueList : new ArrayList<PropertyValue>())__	};construct,a,new,mutable,property,values,object,using,the,given,list,of,property,value,objects,as,is,p,this,is,a,constructor,for,advanced,usage,scenarios,it,is,not,intended,for,typical,programmatic,use,param,property,value,list,list,of,property,value,objects;public,mutable,property,values,list,property,value,property,value,list,this,property,value,list,property,value,list,null,property,value,list,new,array,list,property,value
MutablePropertyValues -> public MutablePropertyValues(List<PropertyValue> propertyValueList);1357119239;Construct a new MutablePropertyValues object using the given List of_PropertyValue objects as-is._<p>This is a constructor for advanced usage scenarios._It is not intended for typical programmatic use._@param propertyValueList List of PropertyValue objects;public MutablePropertyValues(List<PropertyValue> propertyValueList) {_		this.propertyValueList =_				(propertyValueList != null ? propertyValueList : new ArrayList<PropertyValue>())__	};construct,a,new,mutable,property,values,object,using,the,given,list,of,property,value,objects,as,is,p,this,is,a,constructor,for,advanced,usage,scenarios,it,is,not,intended,for,typical,programmatic,use,param,property,value,list,list,of,property,value,objects;public,mutable,property,values,list,property,value,property,value,list,this,property,value,list,property,value,list,null,property,value,list,new,array,list,property,value
MutablePropertyValues -> public MutablePropertyValues(List<PropertyValue> propertyValueList);1368482696;Construct a new MutablePropertyValues object using the given List of_PropertyValue objects as-is._<p>This is a constructor for advanced usage scenarios._It is not intended for typical programmatic use._@param propertyValueList List of PropertyValue objects;public MutablePropertyValues(List<PropertyValue> propertyValueList) {_		this.propertyValueList =_				(propertyValueList != null ? propertyValueList : new ArrayList<PropertyValue>())__	};construct,a,new,mutable,property,values,object,using,the,given,list,of,property,value,objects,as,is,p,this,is,a,constructor,for,advanced,usage,scenarios,it,is,not,intended,for,typical,programmatic,use,param,property,value,list,list,of,property,value,objects;public,mutable,property,values,list,property,value,property,value,list,this,property,value,list,property,value,list,null,property,value,list,new,array,list,property,value
MutablePropertyValues -> public MutablePropertyValues(List<PropertyValue> propertyValueList);1382030648;Construct a new MutablePropertyValues object using the given List of_PropertyValue objects as-is._<p>This is a constructor for advanced usage scenarios._It is not intended for typical programmatic use._@param propertyValueList List of PropertyValue objects;public MutablePropertyValues(List<PropertyValue> propertyValueList) {_		this.propertyValueList =_				(propertyValueList != null ? propertyValueList : new ArrayList<PropertyValue>())__	};construct,a,new,mutable,property,values,object,using,the,given,list,of,property,value,objects,as,is,p,this,is,a,constructor,for,advanced,usage,scenarios,it,is,not,intended,for,typical,programmatic,use,param,property,value,list,list,of,property,value,objects;public,mutable,property,values,list,property,value,property,value,list,this,property,value,list,property,value,list,null,property,value,list,new,array,list,property,value
MutablePropertyValues -> public MutablePropertyValues(List<PropertyValue> propertyValueList);1385412762;Construct a new MutablePropertyValues object using the given List of_PropertyValue objects as-is._<p>This is a constructor for advanced usage scenarios._It is not intended for typical programmatic use._@param propertyValueList List of PropertyValue objects;public MutablePropertyValues(List<PropertyValue> propertyValueList) {_		this.propertyValueList =_				(propertyValueList != null ? propertyValueList : new ArrayList<PropertyValue>())__	};construct,a,new,mutable,property,values,object,using,the,given,list,of,property,value,objects,as,is,p,this,is,a,constructor,for,advanced,usage,scenarios,it,is,not,intended,for,typical,programmatic,use,param,property,value,list,list,of,property,value,objects;public,mutable,property,values,list,property,value,property,value,list,this,property,value,list,property,value,list,null,property,value,list,new,array,list,property,value
MutablePropertyValues -> public MutablePropertyValues(List<PropertyValue> propertyValueList);1419339720;Construct a new MutablePropertyValues object using the given List of_PropertyValue objects as-is._<p>This is a constructor for advanced usage scenarios._It is not intended for typical programmatic use._@param propertyValueList List of PropertyValue objects;public MutablePropertyValues(List<PropertyValue> propertyValueList) {_		this.propertyValueList =_				(propertyValueList != null ? propertyValueList : new ArrayList<PropertyValue>())__	};construct,a,new,mutable,property,values,object,using,the,given,list,of,property,value,objects,as,is,p,this,is,a,constructor,for,advanced,usage,scenarios,it,is,not,intended,for,typical,programmatic,use,param,property,value,list,list,of,property,value,objects;public,mutable,property,values,list,property,value,property,value,list,this,property,value,list,property,value,list,null,property,value,list,new,array,list,property,value
MutablePropertyValues -> public MutablePropertyValues(List<PropertyValue> propertyValueList);1419881658;Construct a new MutablePropertyValues object using the given List of_PropertyValue objects as-is._<p>This is a constructor for advanced usage scenarios._It is not intended for typical programmatic use._@param propertyValueList List of PropertyValue objects;public MutablePropertyValues(List<PropertyValue> propertyValueList) {_		this.propertyValueList =_				(propertyValueList != null ? propertyValueList : new ArrayList<PropertyValue>())__	};construct,a,new,mutable,property,values,object,using,the,given,list,of,property,value,objects,as,is,p,this,is,a,constructor,for,advanced,usage,scenarios,it,is,not,intended,for,typical,programmatic,use,param,property,value,list,list,of,property,value,objects;public,mutable,property,values,list,property,value,property,value,list,this,property,value,list,property,value,list,null,property,value,list,new,array,list,property,value
MutablePropertyValues -> public MutablePropertyValues(List<PropertyValue> propertyValueList);1467730834;Construct a new MutablePropertyValues object using the given List of_PropertyValue objects as-is._<p>This is a constructor for advanced usage scenarios._It is not intended for typical programmatic use._@param propertyValueList List of PropertyValue objects;public MutablePropertyValues(List<PropertyValue> propertyValueList) {_		this.propertyValueList =_				(propertyValueList != null ? propertyValueList : new ArrayList<>())__	};construct,a,new,mutable,property,values,object,using,the,given,list,of,property,value,objects,as,is,p,this,is,a,constructor,for,advanced,usage,scenarios,it,is,not,intended,for,typical,programmatic,use,param,property,value,list,list,of,property,value,objects;public,mutable,property,values,list,property,value,property,value,list,this,property,value,list,property,value,list,null,property,value,list,new,array,list
MutablePropertyValues -> public MutablePropertyValues(List<PropertyValue> propertyValueList);1495868221;Construct a new MutablePropertyValues object using the given List of_PropertyValue objects as-is._<p>This is a constructor for advanced usage scenarios._It is not intended for typical programmatic use._@param propertyValueList List of PropertyValue objects;public MutablePropertyValues(List<PropertyValue> propertyValueList) {_		this.propertyValueList =_				(propertyValueList != null ? propertyValueList : new ArrayList<>())__	};construct,a,new,mutable,property,values,object,using,the,given,list,of,property,value,objects,as,is,p,this,is,a,constructor,for,advanced,usage,scenarios,it,is,not,intended,for,typical,programmatic,use,param,property,value,list,list,of,property,value,objects;public,mutable,property,values,list,property,value,property,value,list,this,property,value,list,property,value,list,null,property,value,list,new,array,list
MutablePropertyValues -> public void removePropertyValue(PropertyValue pv);1328020251;Remove the given PropertyValue, if contained._@param pv the PropertyValue to remove;public void removePropertyValue(PropertyValue pv) {_		this.propertyValueList.remove(pv)__	};remove,the,given,property,value,if,contained,param,pv,the,property,value,to,remove;public,void,remove,property,value,property,value,pv,this,property,value,list,remove,pv
MutablePropertyValues -> public void removePropertyValue(PropertyValue pv);1356735495;Remove the given PropertyValue, if contained._@param pv the PropertyValue to remove;public void removePropertyValue(PropertyValue pv) {_		this.propertyValueList.remove(pv)__	};remove,the,given,property,value,if,contained,param,pv,the,property,value,to,remove;public,void,remove,property,value,property,value,pv,this,property,value,list,remove,pv
MutablePropertyValues -> public void removePropertyValue(PropertyValue pv);1357119239;Remove the given PropertyValue, if contained._@param pv the PropertyValue to remove;public void removePropertyValue(PropertyValue pv) {_		this.propertyValueList.remove(pv)__	};remove,the,given,property,value,if,contained,param,pv,the,property,value,to,remove;public,void,remove,property,value,property,value,pv,this,property,value,list,remove,pv
MutablePropertyValues -> public void removePropertyValue(PropertyValue pv);1368482696;Remove the given PropertyValue, if contained._@param pv the PropertyValue to remove;public void removePropertyValue(PropertyValue pv) {_		this.propertyValueList.remove(pv)__	};remove,the,given,property,value,if,contained,param,pv,the,property,value,to,remove;public,void,remove,property,value,property,value,pv,this,property,value,list,remove,pv
MutablePropertyValues -> public void removePropertyValue(PropertyValue pv);1382030648;Remove the given PropertyValue, if contained._@param pv the PropertyValue to remove;public void removePropertyValue(PropertyValue pv) {_		this.propertyValueList.remove(pv)__	};remove,the,given,property,value,if,contained,param,pv,the,property,value,to,remove;public,void,remove,property,value,property,value,pv,this,property,value,list,remove,pv
MutablePropertyValues -> public void removePropertyValue(PropertyValue pv);1385412762;Remove the given PropertyValue, if contained._@param pv the PropertyValue to remove;public void removePropertyValue(PropertyValue pv) {_		this.propertyValueList.remove(pv)__	};remove,the,given,property,value,if,contained,param,pv,the,property,value,to,remove;public,void,remove,property,value,property,value,pv,this,property,value,list,remove,pv
MutablePropertyValues -> public void removePropertyValue(PropertyValue pv);1419339720;Remove the given PropertyValue, if contained._@param pv the PropertyValue to remove;public void removePropertyValue(PropertyValue pv) {_		this.propertyValueList.remove(pv)__	};remove,the,given,property,value,if,contained,param,pv,the,property,value,to,remove;public,void,remove,property,value,property,value,pv,this,property,value,list,remove,pv
MutablePropertyValues -> public void removePropertyValue(PropertyValue pv);1419881658;Remove the given PropertyValue, if contained._@param pv the PropertyValue to remove;public void removePropertyValue(PropertyValue pv) {_		this.propertyValueList.remove(pv)__	};remove,the,given,property,value,if,contained,param,pv,the,property,value,to,remove;public,void,remove,property,value,property,value,pv,this,property,value,list,remove,pv
MutablePropertyValues -> public void removePropertyValue(PropertyValue pv);1467730834;Remove the given PropertyValue, if contained._@param pv the PropertyValue to remove;public void removePropertyValue(PropertyValue pv) {_		this.propertyValueList.remove(pv)__	};remove,the,given,property,value,if,contained,param,pv,the,property,value,to,remove;public,void,remove,property,value,property,value,pv,this,property,value,list,remove,pv
MutablePropertyValues -> public void removePropertyValue(PropertyValue pv);1495868221;Remove the given PropertyValue, if contained._@param pv the PropertyValue to remove;public void removePropertyValue(PropertyValue pv) {_		this.propertyValueList.remove(pv)__	};remove,the,given,property,value,if,contained,param,pv,the,property,value,to,remove;public,void,remove,property,value,property,value,pv,this,property,value,list,remove,pv
MutablePropertyValues -> public void removePropertyValue(PropertyValue pv);1496837955;Remove the given PropertyValue, if contained._@param pv the PropertyValue to remove;public void removePropertyValue(PropertyValue pv) {_		this.propertyValueList.remove(pv)__	};remove,the,given,property,value,if,contained,param,pv,the,property,value,to,remove;public,void,remove,property,value,property,value,pv,this,property,value,list,remove,pv
MutablePropertyValues -> public void removePropertyValue(PropertyValue pv);1497250713;Remove the given PropertyValue, if contained._@param pv the PropertyValue to remove;public void removePropertyValue(PropertyValue pv) {_		this.propertyValueList.remove(pv)__	};remove,the,given,property,value,if,contained,param,pv,the,property,value,to,remove;public,void,remove,property,value,property,value,pv,this,property,value,list,remove,pv
MutablePropertyValues -> public void removePropertyValue(PropertyValue pv);1498780456;Remove the given PropertyValue, if contained._@param pv the PropertyValue to remove;public void removePropertyValue(PropertyValue pv) {_		this.propertyValueList.remove(pv)__	};remove,the,given,property,value,if,contained,param,pv,the,property,value,to,remove;public,void,remove,property,value,property,value,pv,this,property,value,list,remove,pv
MutablePropertyValues -> public void removePropertyValue(PropertyValue pv);1502974979;Remove the given PropertyValue, if contained._@param pv the PropertyValue to remove;public void removePropertyValue(PropertyValue pv) {_		this.propertyValueList.remove(pv)__	};remove,the,given,property,value,if,contained,param,pv,the,property,value,to,remove;public,void,remove,property,value,property,value,pv,this,property,value,list,remove,pv
MutablePropertyValues -> public void removePropertyValue(PropertyValue pv);1510606271;Remove the given PropertyValue, if contained._@param pv the PropertyValue to remove;public void removePropertyValue(PropertyValue pv) {_		this.propertyValueList.remove(pv)__	};remove,the,given,property,value,if,contained,param,pv,the,property,value,to,remove;public,void,remove,property,value,property,value,pv,this,property,value,list,remove,pv
MutablePropertyValues -> public void removePropertyValue(PropertyValue pv);1519295386;Remove the given PropertyValue, if contained._@param pv the PropertyValue to remove;public void removePropertyValue(PropertyValue pv) {_		this.propertyValueList.remove(pv)__	};remove,the,given,property,value,if,contained,param,pv,the,property,value,to,remove;public,void,remove,property,value,property,value,pv,this,property,value,list,remove,pv
MutablePropertyValues -> public void removePropertyValue(PropertyValue pv);1522359230;Remove the given PropertyValue, if contained._@param pv the PropertyValue to remove;public void removePropertyValue(PropertyValue pv) {_		this.propertyValueList.remove(pv)__	};remove,the,given,property,value,if,contained,param,pv,the,property,value,to,remove;public,void,remove,property,value,property,value,pv,this,property,value,list,remove,pv
MutablePropertyValues -> public void removePropertyValue(PropertyValue pv);1530174524;Remove the given PropertyValue, if contained._@param pv the PropertyValue to remove;public void removePropertyValue(PropertyValue pv) {_		this.propertyValueList.remove(pv)__	};remove,the,given,property,value,if,contained,param,pv,the,property,value,to,remove;public,void,remove,property,value,property,value,pv,this,property,value,list,remove,pv
MutablePropertyValues -> public void removePropertyValue(PropertyValue pv);1530190293;Remove the given PropertyValue, if contained._@param pv the PropertyValue to remove;public void removePropertyValue(PropertyValue pv) {_		this.propertyValueList.remove(pv)__	};remove,the,given,property,value,if,contained,param,pv,the,property,value,to,remove;public,void,remove,property,value,property,value,pv,this,property,value,list,remove,pv
MutablePropertyValues -> public void removePropertyValue(PropertyValue pv);1530827996;Remove the given PropertyValue, if contained._@param pv the PropertyValue to remove;public void removePropertyValue(PropertyValue pv) {_		this.propertyValueList.remove(pv)__	};remove,the,given,property,value,if,contained,param,pv,the,property,value,to,remove;public,void,remove,property,value,property,value,pv,this,property,value,list,remove,pv
MutablePropertyValues -> public MutablePropertyValues addPropertyValues(@Nullable PropertyValues other);1496837955;Copy all given PropertyValues into this object. Guarantees PropertyValue_references are independent, although it can't deep copy objects currently_referenced by individual PropertyValue objects._@param other the PropertyValues to copy_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValues(@Nullable PropertyValues other) {_		if (other != null) {_			PropertyValue[] pvs = other.getPropertyValues()__			for (PropertyValue pv : pvs) {_				addPropertyValue(new PropertyValue(pv))__			}_		}_		return this__	};copy,all,given,property,values,into,this,object,guarantees,property,value,references,are,independent,although,it,can,t,deep,copy,objects,currently,referenced,by,individual,property,value,objects,param,other,the,property,values,to,copy,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,values,nullable,property,values,other,if,other,null,property,value,pvs,other,get,property,values,for,property,value,pv,pvs,add,property,value,new,property,value,pv,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValues(@Nullable PropertyValues other);1497250713;Copy all given PropertyValues into this object. Guarantees PropertyValue_references are independent, although it can't deep copy objects currently_referenced by individual PropertyValue objects._@param other the PropertyValues to copy_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValues(@Nullable PropertyValues other) {_		if (other != null) {_			PropertyValue[] pvs = other.getPropertyValues()__			for (PropertyValue pv : pvs) {_				addPropertyValue(new PropertyValue(pv))__			}_		}_		return this__	};copy,all,given,property,values,into,this,object,guarantees,property,value,references,are,independent,although,it,can,t,deep,copy,objects,currently,referenced,by,individual,property,value,objects,param,other,the,property,values,to,copy,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,values,nullable,property,values,other,if,other,null,property,value,pvs,other,get,property,values,for,property,value,pv,pvs,add,property,value,new,property,value,pv,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValues(@Nullable PropertyValues other);1498780456;Copy all given PropertyValues into this object. Guarantees PropertyValue_references are independent, although it can't deep copy objects currently_referenced by individual PropertyValue objects._@param other the PropertyValues to copy_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValues(@Nullable PropertyValues other) {_		if (other != null) {_			PropertyValue[] pvs = other.getPropertyValues()__			for (PropertyValue pv : pvs) {_				addPropertyValue(new PropertyValue(pv))__			}_		}_		return this__	};copy,all,given,property,values,into,this,object,guarantees,property,value,references,are,independent,although,it,can,t,deep,copy,objects,currently,referenced,by,individual,property,value,objects,param,other,the,property,values,to,copy,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,values,nullable,property,values,other,if,other,null,property,value,pvs,other,get,property,values,for,property,value,pv,pvs,add,property,value,new,property,value,pv,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValues(@Nullable PropertyValues other);1502974979;Copy all given PropertyValues into this object. Guarantees PropertyValue_references are independent, although it can't deep copy objects currently_referenced by individual PropertyValue objects._@param other the PropertyValues to copy_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValues(@Nullable PropertyValues other) {_		if (other != null) {_			PropertyValue[] pvs = other.getPropertyValues()__			for (PropertyValue pv : pvs) {_				addPropertyValue(new PropertyValue(pv))__			}_		}_		return this__	};copy,all,given,property,values,into,this,object,guarantees,property,value,references,are,independent,although,it,can,t,deep,copy,objects,currently,referenced,by,individual,property,value,objects,param,other,the,property,values,to,copy,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,values,nullable,property,values,other,if,other,null,property,value,pvs,other,get,property,values,for,property,value,pv,pvs,add,property,value,new,property,value,pv,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValues(@Nullable PropertyValues other);1510606271;Copy all given PropertyValues into this object. Guarantees PropertyValue_references are independent, although it can't deep copy objects currently_referenced by individual PropertyValue objects._@param other the PropertyValues to copy_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValues(@Nullable PropertyValues other) {_		if (other != null) {_			PropertyValue[] pvs = other.getPropertyValues()__			for (PropertyValue pv : pvs) {_				addPropertyValue(new PropertyValue(pv))__			}_		}_		return this__	};copy,all,given,property,values,into,this,object,guarantees,property,value,references,are,independent,although,it,can,t,deep,copy,objects,currently,referenced,by,individual,property,value,objects,param,other,the,property,values,to,copy,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,values,nullable,property,values,other,if,other,null,property,value,pvs,other,get,property,values,for,property,value,pv,pvs,add,property,value,new,property,value,pv,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValues(@Nullable PropertyValues other);1519295386;Copy all given PropertyValues into this object. Guarantees PropertyValue_references are independent, although it can't deep copy objects currently_referenced by individual PropertyValue objects._@param other the PropertyValues to copy_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValues(@Nullable PropertyValues other) {_		if (other != null) {_			PropertyValue[] pvs = other.getPropertyValues()__			for (PropertyValue pv : pvs) {_				addPropertyValue(new PropertyValue(pv))__			}_		}_		return this__	};copy,all,given,property,values,into,this,object,guarantees,property,value,references,are,independent,although,it,can,t,deep,copy,objects,currently,referenced,by,individual,property,value,objects,param,other,the,property,values,to,copy,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,values,nullable,property,values,other,if,other,null,property,value,pvs,other,get,property,values,for,property,value,pv,pvs,add,property,value,new,property,value,pv,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValues(@Nullable PropertyValues other);1522359230;Copy all given PropertyValues into this object. Guarantees PropertyValue_references are independent, although it can't deep copy objects currently_referenced by individual PropertyValue objects._@param other the PropertyValues to copy_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValues(@Nullable PropertyValues other) {_		if (other != null) {_			PropertyValue[] pvs = other.getPropertyValues()__			for (PropertyValue pv : pvs) {_				addPropertyValue(new PropertyValue(pv))__			}_		}_		return this__	};copy,all,given,property,values,into,this,object,guarantees,property,value,references,are,independent,although,it,can,t,deep,copy,objects,currently,referenced,by,individual,property,value,objects,param,other,the,property,values,to,copy,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,values,nullable,property,values,other,if,other,null,property,value,pvs,other,get,property,values,for,property,value,pv,pvs,add,property,value,new,property,value,pv,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValues(@Nullable PropertyValues other);1530174524;Copy all given PropertyValues into this object. Guarantees PropertyValue_references are independent, although it can't deep copy objects currently_referenced by individual PropertyValue objects._@param other the PropertyValues to copy_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValues(@Nullable PropertyValues other) {_		if (other != null) {_			PropertyValue[] pvs = other.getPropertyValues()__			for (PropertyValue pv : pvs) {_				addPropertyValue(new PropertyValue(pv))__			}_		}_		return this__	};copy,all,given,property,values,into,this,object,guarantees,property,value,references,are,independent,although,it,can,t,deep,copy,objects,currently,referenced,by,individual,property,value,objects,param,other,the,property,values,to,copy,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,values,nullable,property,values,other,if,other,null,property,value,pvs,other,get,property,values,for,property,value,pv,pvs,add,property,value,new,property,value,pv,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValues(@Nullable PropertyValues other);1530190293;Copy all given PropertyValues into this object. Guarantees PropertyValue_references are independent, although it can't deep copy objects currently_referenced by individual PropertyValue objects._@param other the PropertyValues to copy_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValues(@Nullable PropertyValues other) {_		if (other != null) {_			PropertyValue[] pvs = other.getPropertyValues()__			for (PropertyValue pv : pvs) {_				addPropertyValue(new PropertyValue(pv))__			}_		}_		return this__	};copy,all,given,property,values,into,this,object,guarantees,property,value,references,are,independent,although,it,can,t,deep,copy,objects,currently,referenced,by,individual,property,value,objects,param,other,the,property,values,to,copy,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,values,nullable,property,values,other,if,other,null,property,value,pvs,other,get,property,values,for,property,value,pv,pvs,add,property,value,new,property,value,pv,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValues(@Nullable PropertyValues other);1530827996;Copy all given PropertyValues into this object. Guarantees PropertyValue_references are independent, although it can't deep copy objects currently_referenced by individual PropertyValue objects._@param other the PropertyValues to copy_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValues(@Nullable PropertyValues other) {_		if (other != null) {_			PropertyValue[] pvs = other.getPropertyValues()__			for (PropertyValue pv : pvs) {_				addPropertyValue(new PropertyValue(pv))__			}_		}_		return this__	};copy,all,given,property,values,into,this,object,guarantees,property,value,references,are,independent,although,it,can,t,deep,copy,objects,currently,referenced,by,individual,property,value,objects,param,other,the,property,values,to,copy,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,values,nullable,property,values,other,if,other,null,property,value,pvs,other,get,property,values,for,property,value,pv,pvs,add,property,value,new,property,value,pv,return,this
MutablePropertyValues -> @Nullable 	public Object get(String propertyName);1495868221;Get the raw property value, if any._@param propertyName the name to search for_@return the raw property value, or {@code null}_@since 4.0_@see #getPropertyValue(String)_@see PropertyValue#getValue();@Nullable_	public Object get(String propertyName) {_		PropertyValue pv = getPropertyValue(propertyName)__		return (pv != null ? pv.getValue() : null)__	};get,the,raw,property,value,if,any,param,property,name,the,name,to,search,for,return,the,raw,property,value,or,code,null,since,4,0,see,get,property,value,string,see,property,value,get,value;nullable,public,object,get,string,property,name,property,value,pv,get,property,value,property,name,return,pv,null,pv,get,value,null
MutablePropertyValues -> @Nullable 	public Object get(String propertyName);1496837955;Get the raw property value, if any._@param propertyName the name to search for_@return the raw property value, or {@code null} if none found_@since 4.0_@see #getPropertyValue(String)_@see PropertyValue#getValue();@Nullable_	public Object get(String propertyName) {_		PropertyValue pv = getPropertyValue(propertyName)__		return (pv != null ? pv.getValue() : null)__	};get,the,raw,property,value,if,any,param,property,name,the,name,to,search,for,return,the,raw,property,value,or,code,null,if,none,found,since,4,0,see,get,property,value,string,see,property,value,get,value;nullable,public,object,get,string,property,name,property,value,pv,get,property,value,property,name,return,pv,null,pv,get,value,null
MutablePropertyValues -> @Nullable 	public Object get(String propertyName);1497250713;Get the raw property value, if any._@param propertyName the name to search for_@return the raw property value, or {@code null} if none found_@since 4.0_@see #getPropertyValue(String)_@see PropertyValue#getValue();@Nullable_	public Object get(String propertyName) {_		PropertyValue pv = getPropertyValue(propertyName)__		return (pv != null ? pv.getValue() : null)__	};get,the,raw,property,value,if,any,param,property,name,the,name,to,search,for,return,the,raw,property,value,or,code,null,if,none,found,since,4,0,see,get,property,value,string,see,property,value,get,value;nullable,public,object,get,string,property,name,property,value,pv,get,property,value,property,name,return,pv,null,pv,get,value,null
MutablePropertyValues -> @Nullable 	public Object get(String propertyName);1498780456;Get the raw property value, if any._@param propertyName the name to search for_@return the raw property value, or {@code null} if none found_@since 4.0_@see #getPropertyValue(String)_@see PropertyValue#getValue();@Nullable_	public Object get(String propertyName) {_		PropertyValue pv = getPropertyValue(propertyName)__		return (pv != null ? pv.getValue() : null)__	};get,the,raw,property,value,if,any,param,property,name,the,name,to,search,for,return,the,raw,property,value,or,code,null,if,none,found,since,4,0,see,get,property,value,string,see,property,value,get,value;nullable,public,object,get,string,property,name,property,value,pv,get,property,value,property,name,return,pv,null,pv,get,value,null
MutablePropertyValues -> @Nullable 	public Object get(String propertyName);1502974979;Get the raw property value, if any._@param propertyName the name to search for_@return the raw property value, or {@code null} if none found_@since 4.0_@see #getPropertyValue(String)_@see PropertyValue#getValue();@Nullable_	public Object get(String propertyName) {_		PropertyValue pv = getPropertyValue(propertyName)__		return (pv != null ? pv.getValue() : null)__	};get,the,raw,property,value,if,any,param,property,name,the,name,to,search,for,return,the,raw,property,value,or,code,null,if,none,found,since,4,0,see,get,property,value,string,see,property,value,get,value;nullable,public,object,get,string,property,name,property,value,pv,get,property,value,property,name,return,pv,null,pv,get,value,null
MutablePropertyValues -> @Nullable 	public Object get(String propertyName);1510606271;Get the raw property value, if any._@param propertyName the name to search for_@return the raw property value, or {@code null} if none found_@since 4.0_@see #getPropertyValue(String)_@see PropertyValue#getValue();@Nullable_	public Object get(String propertyName) {_		PropertyValue pv = getPropertyValue(propertyName)__		return (pv != null ? pv.getValue() : null)__	};get,the,raw,property,value,if,any,param,property,name,the,name,to,search,for,return,the,raw,property,value,or,code,null,if,none,found,since,4,0,see,get,property,value,string,see,property,value,get,value;nullable,public,object,get,string,property,name,property,value,pv,get,property,value,property,name,return,pv,null,pv,get,value,null
MutablePropertyValues -> @Nullable 	public Object get(String propertyName);1519295386;Get the raw property value, if any._@param propertyName the name to search for_@return the raw property value, or {@code null} if none found_@since 4.0_@see #getPropertyValue(String)_@see PropertyValue#getValue();@Nullable_	public Object get(String propertyName) {_		PropertyValue pv = getPropertyValue(propertyName)__		return (pv != null ? pv.getValue() : null)__	};get,the,raw,property,value,if,any,param,property,name,the,name,to,search,for,return,the,raw,property,value,or,code,null,if,none,found,since,4,0,see,get,property,value,string,see,property,value,get,value;nullable,public,object,get,string,property,name,property,value,pv,get,property,value,property,name,return,pv,null,pv,get,value,null
MutablePropertyValues -> @Nullable 	public Object get(String propertyName);1522359230;Get the raw property value, if any._@param propertyName the name to search for_@return the raw property value, or {@code null} if none found_@since 4.0_@see #getPropertyValue(String)_@see PropertyValue#getValue();@Nullable_	public Object get(String propertyName) {_		PropertyValue pv = getPropertyValue(propertyName)__		return (pv != null ? pv.getValue() : null)__	};get,the,raw,property,value,if,any,param,property,name,the,name,to,search,for,return,the,raw,property,value,or,code,null,if,none,found,since,4,0,see,get,property,value,string,see,property,value,get,value;nullable,public,object,get,string,property,name,property,value,pv,get,property,value,property,name,return,pv,null,pv,get,value,null
MutablePropertyValues -> @Nullable 	public Object get(String propertyName);1530174524;Get the raw property value, if any._@param propertyName the name to search for_@return the raw property value, or {@code null} if none found_@since 4.0_@see #getPropertyValue(String)_@see PropertyValue#getValue();@Nullable_	public Object get(String propertyName) {_		PropertyValue pv = getPropertyValue(propertyName)__		return (pv != null ? pv.getValue() : null)__	};get,the,raw,property,value,if,any,param,property,name,the,name,to,search,for,return,the,raw,property,value,or,code,null,if,none,found,since,4,0,see,get,property,value,string,see,property,value,get,value;nullable,public,object,get,string,property,name,property,value,pv,get,property,value,property,name,return,pv,null,pv,get,value,null
MutablePropertyValues -> @Nullable 	public Object get(String propertyName);1530190293;Get the raw property value, if any._@param propertyName the name to search for_@return the raw property value, or {@code null} if none found_@since 4.0_@see #getPropertyValue(String)_@see PropertyValue#getValue();@Nullable_	public Object get(String propertyName) {_		PropertyValue pv = getPropertyValue(propertyName)__		return (pv != null ? pv.getValue() : null)__	};get,the,raw,property,value,if,any,param,property,name,the,name,to,search,for,return,the,raw,property,value,or,code,null,if,none,found,since,4,0,see,get,property,value,string,see,property,value,get,value;nullable,public,object,get,string,property,name,property,value,pv,get,property,value,property,name,return,pv,null,pv,get,value,null
MutablePropertyValues -> @Nullable 	public Object get(String propertyName);1530827996;Get the raw property value, if any._@param propertyName the name to search for_@return the raw property value, or {@code null} if none found_@since 4.0_@see #getPropertyValue(String)_@see PropertyValue#getValue();@Nullable_	public Object get(String propertyName) {_		PropertyValue pv = getPropertyValue(propertyName)__		return (pv != null ? pv.getValue() : null)__	};get,the,raw,property,value,if,any,param,property,name,the,name,to,search,for,return,the,raw,property,value,or,code,null,if,none,found,since,4,0,see,get,property,value,string,see,property,value,get,value;nullable,public,object,get,string,property,name,property,value,pv,get,property,value,property,name,return,pv,null,pv,get,value,null
MutablePropertyValues -> public MutablePropertyValues addPropertyValues(@Nullable Map<?, ?> other);1496837955;Add all property values from the given Map._@param other Map with property values keyed by property name,_which must be a String_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValues(@Nullable Map<?, ?> other) {_		if (other != null) {_			for (Map.Entry<?, ?> entry : other.entrySet()) {_				addPropertyValue(new PropertyValue(entry.getKey().toString(), entry.getValue()))__			}_		}_		return this__	};add,all,property,values,from,the,given,map,param,other,map,with,property,values,keyed,by,property,name,which,must,be,a,string,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,values,nullable,map,other,if,other,null,for,map,entry,entry,other,entry,set,add,property,value,new,property,value,entry,get,key,to,string,entry,get,value,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValues(@Nullable Map<?, ?> other);1497250713;Add all property values from the given Map._@param other Map with property values keyed by property name,_which must be a String_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValues(@Nullable Map<?, ?> other) {_		if (other != null) {_			other.forEach((attrName, attrValue) -> addPropertyValue(_					new PropertyValue(attrName.toString(), attrValue)))__		}_		return this__	};add,all,property,values,from,the,given,map,param,other,map,with,property,values,keyed,by,property,name,which,must,be,a,string,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,values,nullable,map,other,if,other,null,other,for,each,attr,name,attr,value,add,property,value,new,property,value,attr,name,to,string,attr,value,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValues(@Nullable Map<?, ?> other);1498780456;Add all property values from the given Map._@param other Map with property values keyed by property name,_which must be a String_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValues(@Nullable Map<?, ?> other) {_		if (other != null) {_			other.forEach((attrName, attrValue) -> addPropertyValue(_					new PropertyValue(attrName.toString(), attrValue)))__		}_		return this__	};add,all,property,values,from,the,given,map,param,other,map,with,property,values,keyed,by,property,name,which,must,be,a,string,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,values,nullable,map,other,if,other,null,other,for,each,attr,name,attr,value,add,property,value,new,property,value,attr,name,to,string,attr,value,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValues(@Nullable Map<?, ?> other);1502974979;Add all property values from the given Map._@param other Map with property values keyed by property name,_which must be a String_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValues(@Nullable Map<?, ?> other) {_		if (other != null) {_			other.forEach((attrName, attrValue) -> addPropertyValue(_					new PropertyValue(attrName.toString(), attrValue)))__		}_		return this__	};add,all,property,values,from,the,given,map,param,other,map,with,property,values,keyed,by,property,name,which,must,be,a,string,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,values,nullable,map,other,if,other,null,other,for,each,attr,name,attr,value,add,property,value,new,property,value,attr,name,to,string,attr,value,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValues(@Nullable Map<?, ?> other);1510606271;Add all property values from the given Map._@param other Map with property values keyed by property name,_which must be a String_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValues(@Nullable Map<?, ?> other) {_		if (other != null) {_			other.forEach((attrName, attrValue) -> addPropertyValue(_					new PropertyValue(attrName.toString(), attrValue)))__		}_		return this__	};add,all,property,values,from,the,given,map,param,other,map,with,property,values,keyed,by,property,name,which,must,be,a,string,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,values,nullable,map,other,if,other,null,other,for,each,attr,name,attr,value,add,property,value,new,property,value,attr,name,to,string,attr,value,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValues(@Nullable Map<?, ?> other);1519295386;Add all property values from the given Map._@param other Map with property values keyed by property name,_which must be a String_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValues(@Nullable Map<?, ?> other) {_		if (other != null) {_			other.forEach((attrName, attrValue) -> addPropertyValue(_					new PropertyValue(attrName.toString(), attrValue)))__		}_		return this__	};add,all,property,values,from,the,given,map,param,other,map,with,property,values,keyed,by,property,name,which,must,be,a,string,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,values,nullable,map,other,if,other,null,other,for,each,attr,name,attr,value,add,property,value,new,property,value,attr,name,to,string,attr,value,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValues(@Nullable Map<?, ?> other);1522359230;Add all property values from the given Map._@param other Map with property values keyed by property name,_which must be a String_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValues(@Nullable Map<?, ?> other) {_		if (other != null) {_			other.forEach((attrName, attrValue) -> addPropertyValue(_					new PropertyValue(attrName.toString(), attrValue)))__		}_		return this__	};add,all,property,values,from,the,given,map,param,other,map,with,property,values,keyed,by,property,name,which,must,be,a,string,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,values,nullable,map,other,if,other,null,other,for,each,attr,name,attr,value,add,property,value,new,property,value,attr,name,to,string,attr,value,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValues(@Nullable Map<?, ?> other);1530174524;Add all property values from the given Map._@param other a Map with property values keyed by property name,_which must be a String_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValues(@Nullable Map<?, ?> other) {_		if (other != null) {_			other.forEach((attrName, attrValue) -> addPropertyValue(_					new PropertyValue(attrName.toString(), attrValue)))__		}_		return this__	};add,all,property,values,from,the,given,map,param,other,a,map,with,property,values,keyed,by,property,name,which,must,be,a,string,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,values,nullable,map,other,if,other,null,other,for,each,attr,name,attr,value,add,property,value,new,property,value,attr,name,to,string,attr,value,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValues(@Nullable Map<?, ?> other);1530190293;Add all property values from the given Map._@param other a Map with property values keyed by property name,_which must be a String_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValues(@Nullable Map<?, ?> other) {_		if (other != null) {_			other.forEach((attrName, attrValue) -> addPropertyValue(_					new PropertyValue(attrName.toString(), attrValue)))__		}_		return this__	};add,all,property,values,from,the,given,map,param,other,a,map,with,property,values,keyed,by,property,name,which,must,be,a,string,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,values,nullable,map,other,if,other,null,other,for,each,attr,name,attr,value,add,property,value,new,property,value,attr,name,to,string,attr,value,return,this
MutablePropertyValues -> public MutablePropertyValues addPropertyValues(@Nullable Map<?, ?> other);1530827996;Add all property values from the given Map._@param other a Map with property values keyed by property name,_which must be a String_@return this in order to allow for adding multiple property values in a chain;public MutablePropertyValues addPropertyValues(@Nullable Map<?, ?> other) {_		if (other != null) {_			other.forEach((attrName, attrValue) -> addPropertyValue(_					new PropertyValue(attrName.toString(), attrValue)))__		}_		return this__	};add,all,property,values,from,the,given,map,param,other,a,map,with,property,values,keyed,by,property,name,which,must,be,a,string,return,this,in,order,to,allow,for,adding,multiple,property,values,in,a,chain;public,mutable,property,values,add,property,values,nullable,map,other,if,other,null,other,for,each,attr,name,attr,value,add,property,value,new,property,value,attr,name,to,string,attr,value,return,this
