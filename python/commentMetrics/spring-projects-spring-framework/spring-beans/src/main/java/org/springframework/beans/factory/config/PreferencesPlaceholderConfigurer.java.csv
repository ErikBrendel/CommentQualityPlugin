commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the path in the system preferences tree to use for resolving  * placeholders. Default is the root node.  */ ;/**  * Set the path in the system preferences tree to use for resolving  * placeholders. Default is the root node.  */ public void setSystemTreePath(String systemTreePath) {     this.systemTreePath = systemTreePath. }
true;public;1;3;/**  * Set the path in the system preferences tree to use for resolving  * placeholders. Default is the root node.  */ ;/**  * Set the path in the system preferences tree to use for resolving  * placeholders. Default is the root node.  */ public void setUserTreePath(String userTreePath) {     this.userTreePath = userTreePath. }
true;public;0;9;/**  * This implementation eagerly fetches the Preferences instances  * for the required system and user tree nodes.  */ ;/**  * This implementation eagerly fetches the Preferences instances  * for the required system and user tree nodes.  */ @Override public void afterPropertiesSet() {     if (this.systemTreePath != null) {         this.systemPrefs = this.systemPrefs.node(this.systemTreePath).     }     if (this.userTreePath != null) {         this.userPrefs = this.userPrefs.node(this.userTreePath).     } }
true;protected;2;18;/**  * This implementation tries to resolve placeholders as keys first  * in the user preferences, then in the system preferences, then in  * the passed-in properties.  */ ;/**  * This implementation tries to resolve placeholders as keys first  * in the user preferences, then in the system preferences, then in  * the passed-in properties.  */ @Override protected String resolvePlaceholder(String placeholder, Properties props) {     String path = null.     String key = placeholder.     int endOfPath = placeholder.lastIndexOf('/').     if (endOfPath != -1) {         path = placeholder.substring(0, endOfPath).         key = placeholder.substring(endOfPath + 1).     }     String value = resolvePlaceholder(path, key, this.userPrefs).     if (value == null) {         value = resolvePlaceholder(path, key, this.systemPrefs).         if (value == null) {             value = props.getProperty(placeholder).         }     }     return value. }
true;protected;3;20;/**  * Resolve the given path and key against the given Preferences.  * @param path the preferences path (placeholder part before '/')  * @param key the preferences key (placeholder part after '/')  * @param preferences the Preferences to resolve against  * @return the value for the placeholder, or {@code null} if none found  */ ;/**  * Resolve the given path and key against the given Preferences.  * @param path the preferences path (placeholder part before '/')  * @param key the preferences key (placeholder part after '/')  * @param preferences the Preferences to resolve against  * @return the value for the placeholder, or {@code null} if none found  */ @Nullable protected String resolvePlaceholder(@Nullable String path, String key, Preferences preferences) {     if (path != null) {         // Do not create the node if it does not exist...         try {             if (preferences.nodeExists(path)) {                 return preferences.node(path).get(key, null).             } else {                 return null.             }         } catch (BackingStoreException ex) {             throw new BeanDefinitionStoreException("Cannot access specified node path [" + path + "]", ex).         }     } else {         return preferences.get(key, null).     } }
