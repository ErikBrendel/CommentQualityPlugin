# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractSingleBeanDefinitionParser -> @Override 	protected final AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext);1328020251;Creates a {@link BeanDefinitionBuilder} instance for the_{@link #getBeanClass bean Class} and passes it to the_{@link #doParse} strategy method._@param element the element that is to be parsed into a single BeanDefinition_@param parserContext the object encapsulating the current state of the parsing process_@return the BeanDefinition resulting from the parsing of the supplied {@link Element}_@throws IllegalStateException if the bean {@link Class} returned from_{@link #getBeanClass(org.w3c.dom.Element)} is <code>null</code>_@see #doParse;@Override_	protected final AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext) {_		BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition()__		String parentName = getParentName(element)__		if (parentName != null) {_			builder.getRawBeanDefinition().setParentName(parentName)__		}_		Class<?> beanClass = getBeanClass(element)__		if (beanClass != null) {_			builder.getRawBeanDefinition().setBeanClass(beanClass)__		}_		else {_			String beanClassName = getBeanClassName(element)__			if (beanClassName != null) {_				builder.getRawBeanDefinition().setBeanClassName(beanClassName)__			}_		}_		builder.getRawBeanDefinition().setSource(parserContext.extractSource(element))__		if (parserContext.isNested()) {_			_			builder.setScope(parserContext.getContainingBeanDefinition().getScope())__		}_		if (parserContext.isDefaultLazyInit()) {_			_			builder.setLazyInit(true)__		}_		doParse(element, parserContext, builder)__		return builder.getBeanDefinition()__	};creates,a,link,bean,definition,builder,instance,for,the,link,get,bean,class,bean,class,and,passes,it,to,the,link,do,parse,strategy,method,param,element,the,element,that,is,to,be,parsed,into,a,single,bean,definition,param,parser,context,the,object,encapsulating,the,current,state,of,the,parsing,process,return,the,bean,definition,resulting,from,the,parsing,of,the,supplied,link,element,throws,illegal,state,exception,if,the,bean,link,class,returned,from,link,get,bean,class,org,w3c,dom,element,is,code,null,code,see,do,parse;override,protected,final,abstract,bean,definition,parse,internal,element,element,parser,context,parser,context,bean,definition,builder,builder,bean,definition,builder,generic,bean,definition,string,parent,name,get,parent,name,element,if,parent,name,null,builder,get,raw,bean,definition,set,parent,name,parent,name,class,bean,class,get,bean,class,element,if,bean,class,null,builder,get,raw,bean,definition,set,bean,class,bean,class,else,string,bean,class,name,get,bean,class,name,element,if,bean,class,name,null,builder,get,raw,bean,definition,set,bean,class,name,bean,class,name,builder,get,raw,bean,definition,set,source,parser,context,extract,source,element,if,parser,context,is,nested,builder,set,scope,parser,context,get,containing,bean,definition,get,scope,if,parser,context,is,default,lazy,init,builder,set,lazy,init,true,do,parse,element,parser,context,builder,return,builder,get,bean,definition
AbstractSingleBeanDefinitionParser -> @Override 	protected final AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext);1356735495;Creates a {@link BeanDefinitionBuilder} instance for the_{@link #getBeanClass bean Class} and passes it to the_{@link #doParse} strategy method._@param element the element that is to be parsed into a single BeanDefinition_@param parserContext the object encapsulating the current state of the parsing process_@return the BeanDefinition resulting from the parsing of the supplied {@link Element}_@throws IllegalStateException if the bean {@link Class} returned from_{@link #getBeanClass(org.w3c.dom.Element)} is {@code null}_@see #doParse;@Override_	protected final AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext) {_		BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition()__		String parentName = getParentName(element)__		if (parentName != null) {_			builder.getRawBeanDefinition().setParentName(parentName)__		}_		Class<?> beanClass = getBeanClass(element)__		if (beanClass != null) {_			builder.getRawBeanDefinition().setBeanClass(beanClass)__		}_		else {_			String beanClassName = getBeanClassName(element)__			if (beanClassName != null) {_				builder.getRawBeanDefinition().setBeanClassName(beanClassName)__			}_		}_		builder.getRawBeanDefinition().setSource(parserContext.extractSource(element))__		if (parserContext.isNested()) {_			_			builder.setScope(parserContext.getContainingBeanDefinition().getScope())__		}_		if (parserContext.isDefaultLazyInit()) {_			_			builder.setLazyInit(true)__		}_		doParse(element, parserContext, builder)__		return builder.getBeanDefinition()__	};creates,a,link,bean,definition,builder,instance,for,the,link,get,bean,class,bean,class,and,passes,it,to,the,link,do,parse,strategy,method,param,element,the,element,that,is,to,be,parsed,into,a,single,bean,definition,param,parser,context,the,object,encapsulating,the,current,state,of,the,parsing,process,return,the,bean,definition,resulting,from,the,parsing,of,the,supplied,link,element,throws,illegal,state,exception,if,the,bean,link,class,returned,from,link,get,bean,class,org,w3c,dom,element,is,code,null,see,do,parse;override,protected,final,abstract,bean,definition,parse,internal,element,element,parser,context,parser,context,bean,definition,builder,builder,bean,definition,builder,generic,bean,definition,string,parent,name,get,parent,name,element,if,parent,name,null,builder,get,raw,bean,definition,set,parent,name,parent,name,class,bean,class,get,bean,class,element,if,bean,class,null,builder,get,raw,bean,definition,set,bean,class,bean,class,else,string,bean,class,name,get,bean,class,name,element,if,bean,class,name,null,builder,get,raw,bean,definition,set,bean,class,name,bean,class,name,builder,get,raw,bean,definition,set,source,parser,context,extract,source,element,if,parser,context,is,nested,builder,set,scope,parser,context,get,containing,bean,definition,get,scope,if,parser,context,is,default,lazy,init,builder,set,lazy,init,true,do,parse,element,parser,context,builder,return,builder,get,bean,definition
AbstractSingleBeanDefinitionParser -> @Override 	protected final AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext);1495868221;Creates a {@link BeanDefinitionBuilder} instance for the_{@link #getBeanClass bean Class} and passes it to the_{@link #doParse} strategy method._@param element the element that is to be parsed into a single BeanDefinition_@param parserContext the object encapsulating the current state of the parsing process_@return the BeanDefinition resulting from the parsing of the supplied {@link Element}_@throws IllegalStateException if the bean {@link Class} returned from_{@link #getBeanClass(org.w3c.dom.Element)} is {@code null}_@see #doParse;@Override_	protected final AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext) {_		BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition()__		String parentName = getParentName(element)__		if (parentName != null) {_			builder.getRawBeanDefinition().setParentName(parentName)__		}_		Class<?> beanClass = getBeanClass(element)__		if (beanClass != null) {_			builder.getRawBeanDefinition().setBeanClass(beanClass)__		}_		else {_			String beanClassName = getBeanClassName(element)__			if (beanClassName != null) {_				builder.getRawBeanDefinition().setBeanClassName(beanClassName)__			}_		}_		builder.getRawBeanDefinition().setSource(parserContext.extractSource(element))__		if (parserContext.isNested()) {_			_			builder.setScope(parserContext.getContainingBeanDefinition().getScope())__		}_		if (parserContext.isDefaultLazyInit()) {_			_			builder.setLazyInit(true)__		}_		doParse(element, parserContext, builder)__		return builder.getBeanDefinition()__	};creates,a,link,bean,definition,builder,instance,for,the,link,get,bean,class,bean,class,and,passes,it,to,the,link,do,parse,strategy,method,param,element,the,element,that,is,to,be,parsed,into,a,single,bean,definition,param,parser,context,the,object,encapsulating,the,current,state,of,the,parsing,process,return,the,bean,definition,resulting,from,the,parsing,of,the,supplied,link,element,throws,illegal,state,exception,if,the,bean,link,class,returned,from,link,get,bean,class,org,w3c,dom,element,is,code,null,see,do,parse;override,protected,final,abstract,bean,definition,parse,internal,element,element,parser,context,parser,context,bean,definition,builder,builder,bean,definition,builder,generic,bean,definition,string,parent,name,get,parent,name,element,if,parent,name,null,builder,get,raw,bean,definition,set,parent,name,parent,name,class,bean,class,get,bean,class,element,if,bean,class,null,builder,get,raw,bean,definition,set,bean,class,bean,class,else,string,bean,class,name,get,bean,class,name,element,if,bean,class,name,null,builder,get,raw,bean,definition,set,bean,class,name,bean,class,name,builder,get,raw,bean,definition,set,source,parser,context,extract,source,element,if,parser,context,is,nested,builder,set,scope,parser,context,get,containing,bean,definition,get,scope,if,parser,context,is,default,lazy,init,builder,set,lazy,init,true,do,parse,element,parser,context,builder,return,builder,get,bean,definition
AbstractSingleBeanDefinitionParser -> @Override 	protected final AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext);1496837955;Creates a {@link BeanDefinitionBuilder} instance for the_{@link #getBeanClass bean Class} and passes it to the_{@link #doParse} strategy method._@param element the element that is to be parsed into a single BeanDefinition_@param parserContext the object encapsulating the current state of the parsing process_@return the BeanDefinition resulting from the parsing of the supplied {@link Element}_@throws IllegalStateException if the bean {@link Class} returned from_{@link #getBeanClass(org.w3c.dom.Element)} is {@code null}_@see #doParse;@Override_	protected final AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext) {_		BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition()__		String parentName = getParentName(element)__		if (parentName != null) {_			builder.getRawBeanDefinition().setParentName(parentName)__		}_		Class<?> beanClass = getBeanClass(element)__		if (beanClass != null) {_			builder.getRawBeanDefinition().setBeanClass(beanClass)__		}_		else {_			String beanClassName = getBeanClassName(element)__			if (beanClassName != null) {_				builder.getRawBeanDefinition().setBeanClassName(beanClassName)__			}_		}_		builder.getRawBeanDefinition().setSource(parserContext.extractSource(element))__		if (parserContext.isNested()) {_			_			String scopeName = parserContext.getContainingBeanDefinition().getScope()__			if (scopeName != null) {_				builder.setScope(scopeName)__			}_		}_		if (parserContext.isDefaultLazyInit()) {_			_			builder.setLazyInit(true)__		}_		doParse(element, parserContext, builder)__		return builder.getBeanDefinition()__	};creates,a,link,bean,definition,builder,instance,for,the,link,get,bean,class,bean,class,and,passes,it,to,the,link,do,parse,strategy,method,param,element,the,element,that,is,to,be,parsed,into,a,single,bean,definition,param,parser,context,the,object,encapsulating,the,current,state,of,the,parsing,process,return,the,bean,definition,resulting,from,the,parsing,of,the,supplied,link,element,throws,illegal,state,exception,if,the,bean,link,class,returned,from,link,get,bean,class,org,w3c,dom,element,is,code,null,see,do,parse;override,protected,final,abstract,bean,definition,parse,internal,element,element,parser,context,parser,context,bean,definition,builder,builder,bean,definition,builder,generic,bean,definition,string,parent,name,get,parent,name,element,if,parent,name,null,builder,get,raw,bean,definition,set,parent,name,parent,name,class,bean,class,get,bean,class,element,if,bean,class,null,builder,get,raw,bean,definition,set,bean,class,bean,class,else,string,bean,class,name,get,bean,class,name,element,if,bean,class,name,null,builder,get,raw,bean,definition,set,bean,class,name,bean,class,name,builder,get,raw,bean,definition,set,source,parser,context,extract,source,element,if,parser,context,is,nested,string,scope,name,parser,context,get,containing,bean,definition,get,scope,if,scope,name,null,builder,set,scope,scope,name,if,parser,context,is,default,lazy,init,builder,set,lazy,init,true,do,parse,element,parser,context,builder,return,builder,get,bean,definition
AbstractSingleBeanDefinitionParser -> @Override 	protected final AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext);1498780456;Creates a {@link BeanDefinitionBuilder} instance for the_{@link #getBeanClass bean Class} and passes it to the_{@link #doParse} strategy method._@param element the element that is to be parsed into a single BeanDefinition_@param parserContext the object encapsulating the current state of the parsing process_@return the BeanDefinition resulting from the parsing of the supplied {@link Element}_@throws IllegalStateException if the bean {@link Class} returned from_{@link #getBeanClass(org.w3c.dom.Element)} is {@code null}_@see #doParse;@Override_	protected final AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext) {_		BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition()__		String parentName = getParentName(element)__		if (parentName != null) {_			builder.getRawBeanDefinition().setParentName(parentName)__		}_		Class<?> beanClass = getBeanClass(element)__		if (beanClass != null) {_			builder.getRawBeanDefinition().setBeanClass(beanClass)__		}_		else {_			String beanClassName = getBeanClassName(element)__			if (beanClassName != null) {_				builder.getRawBeanDefinition().setBeanClassName(beanClassName)__			}_		}_		builder.getRawBeanDefinition().setSource(parserContext.extractSource(element))__		BeanDefinition containingBd = parserContext.getContainingBeanDefinition()__		if (containingBd != null) {_			_			String scopeName = containingBd.getScope()__			if (scopeName != null) {_				builder.setScope(scopeName)__			}_		}_		if (parserContext.isDefaultLazyInit()) {_			_			builder.setLazyInit(true)__		}_		doParse(element, parserContext, builder)__		return builder.getBeanDefinition()__	};creates,a,link,bean,definition,builder,instance,for,the,link,get,bean,class,bean,class,and,passes,it,to,the,link,do,parse,strategy,method,param,element,the,element,that,is,to,be,parsed,into,a,single,bean,definition,param,parser,context,the,object,encapsulating,the,current,state,of,the,parsing,process,return,the,bean,definition,resulting,from,the,parsing,of,the,supplied,link,element,throws,illegal,state,exception,if,the,bean,link,class,returned,from,link,get,bean,class,org,w3c,dom,element,is,code,null,see,do,parse;override,protected,final,abstract,bean,definition,parse,internal,element,element,parser,context,parser,context,bean,definition,builder,builder,bean,definition,builder,generic,bean,definition,string,parent,name,get,parent,name,element,if,parent,name,null,builder,get,raw,bean,definition,set,parent,name,parent,name,class,bean,class,get,bean,class,element,if,bean,class,null,builder,get,raw,bean,definition,set,bean,class,bean,class,else,string,bean,class,name,get,bean,class,name,element,if,bean,class,name,null,builder,get,raw,bean,definition,set,bean,class,name,bean,class,name,builder,get,raw,bean,definition,set,source,parser,context,extract,source,element,bean,definition,containing,bd,parser,context,get,containing,bean,definition,if,containing,bd,null,string,scope,name,containing,bd,get,scope,if,scope,name,null,builder,set,scope,scope,name,if,parser,context,is,default,lazy,init,builder,set,lazy,init,true,do,parse,element,parser,context,builder,return,builder,get,bean,definition
AbstractSingleBeanDefinitionParser -> @Override 	protected final AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext);1502206005;Creates a {@link BeanDefinitionBuilder} instance for the_{@link #getBeanClass bean Class} and passes it to the_{@link #doParse} strategy method._@param element the element that is to be parsed into a single BeanDefinition_@param parserContext the object encapsulating the current state of the parsing process_@return the BeanDefinition resulting from the parsing of the supplied {@link Element}_@throws IllegalStateException if the bean {@link Class} returned from_{@link #getBeanClass(org.w3c.dom.Element)} is {@code null}_@see #doParse;@Override_	protected final AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext) {_		BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition()__		String parentName = getParentName(element)__		if (parentName != null) {_			builder.getRawBeanDefinition().setParentName(parentName)__		}_		Class<?> beanClass = getBeanClass(element)__		if (beanClass != null) {_			builder.getRawBeanDefinition().setBeanClass(beanClass)__		}_		else {_			String beanClassName = getBeanClassName(element)__			if (beanClassName != null) {_				builder.getRawBeanDefinition().setBeanClassName(beanClassName)__			}_		}_		builder.getRawBeanDefinition().setSource(parserContext.extractSource(element))__		BeanDefinition containingBd = parserContext.getContainingBeanDefinition()__		if (containingBd != null) {_			_			builder.setScope(containingBd.getScope())__		}_		if (parserContext.isDefaultLazyInit()) {_			_			builder.setLazyInit(true)__		}_		doParse(element, parserContext, builder)__		return builder.getBeanDefinition()__	};creates,a,link,bean,definition,builder,instance,for,the,link,get,bean,class,bean,class,and,passes,it,to,the,link,do,parse,strategy,method,param,element,the,element,that,is,to,be,parsed,into,a,single,bean,definition,param,parser,context,the,object,encapsulating,the,current,state,of,the,parsing,process,return,the,bean,definition,resulting,from,the,parsing,of,the,supplied,link,element,throws,illegal,state,exception,if,the,bean,link,class,returned,from,link,get,bean,class,org,w3c,dom,element,is,code,null,see,do,parse;override,protected,final,abstract,bean,definition,parse,internal,element,element,parser,context,parser,context,bean,definition,builder,builder,bean,definition,builder,generic,bean,definition,string,parent,name,get,parent,name,element,if,parent,name,null,builder,get,raw,bean,definition,set,parent,name,parent,name,class,bean,class,get,bean,class,element,if,bean,class,null,builder,get,raw,bean,definition,set,bean,class,bean,class,else,string,bean,class,name,get,bean,class,name,element,if,bean,class,name,null,builder,get,raw,bean,definition,set,bean,class,name,bean,class,name,builder,get,raw,bean,definition,set,source,parser,context,extract,source,element,bean,definition,containing,bd,parser,context,get,containing,bean,definition,if,containing,bd,null,builder,set,scope,containing,bd,get,scope,if,parser,context,is,default,lazy,init,builder,set,lazy,init,true,do,parse,element,parser,context,builder,return,builder,get,bean,definition
AbstractSingleBeanDefinitionParser -> protected String getParentName(Element element);1328020251;Determine the name for the parent of the currently parsed bean,_in case of the current bean being defined as a child bean._<p>The default implementation returns <code>null</code>,_indicating a root bean definition._@param element the <code>Element</code> that is being parsed_@return the name of the parent bean for the currently parsed bean,_or <code>null</code> if none;protected String getParentName(Element element) {_		return null__	};determine,the,name,for,the,parent,of,the,currently,parsed,bean,in,case,of,the,current,bean,being,defined,as,a,child,bean,p,the,default,implementation,returns,code,null,code,indicating,a,root,bean,definition,param,element,the,code,element,code,that,is,being,parsed,return,the,name,of,the,parent,bean,for,the,currently,parsed,bean,or,code,null,code,if,none;protected,string,get,parent,name,element,element,return,null
AbstractSingleBeanDefinitionParser -> protected String getParentName(Element element);1356735495;Determine the name for the parent of the currently parsed bean,_in case of the current bean being defined as a child bean._<p>The default implementation returns {@code null},_indicating a root bean definition._@param element the {@code Element} that is being parsed_@return the name of the parent bean for the currently parsed bean,_or {@code null} if none;protected String getParentName(Element element) {_		return null__	};determine,the,name,for,the,parent,of,the,currently,parsed,bean,in,case,of,the,current,bean,being,defined,as,a,child,bean,p,the,default,implementation,returns,code,null,indicating,a,root,bean,definition,param,element,the,code,element,that,is,being,parsed,return,the,name,of,the,parent,bean,for,the,currently,parsed,bean,or,code,null,if,none;protected,string,get,parent,name,element,element,return,null
AbstractSingleBeanDefinitionParser -> @Nullable 	protected String getBeanClassName(Element element);1495868221;Determine the bean class name corresponding to the supplied {@link Element}._@param element the {@code Element} that is being parsed_@return the class name of the bean that is being defined via parsing_the supplied {@code Element}, or {@code null} if none_@see #getBeanClass;@Nullable_	protected String getBeanClassName(Element element) {_		return null__	};determine,the,bean,class,name,corresponding,to,the,supplied,link,element,param,element,the,code,element,that,is,being,parsed,return,the,class,name,of,the,bean,that,is,being,defined,via,parsing,the,supplied,code,element,or,code,null,if,none,see,get,bean,class;nullable,protected,string,get,bean,class,name,element,element,return,null
AbstractSingleBeanDefinitionParser -> @Nullable 	protected String getBeanClassName(Element element);1496242568;Determine the bean class name corresponding to the supplied {@link Element}._@param element the {@code Element} that is being parsed_@return the class name of the bean that is being defined via parsing_the supplied {@code Element}, or {@code null} if none_@see #getBeanClass;@Nullable_	protected String getBeanClassName(Element element) {_		return null__	};determine,the,bean,class,name,corresponding,to,the,supplied,link,element,param,element,the,code,element,that,is,being,parsed,return,the,class,name,of,the,bean,that,is,being,defined,via,parsing,the,supplied,code,element,or,code,null,if,none,see,get,bean,class;nullable,protected,string,get,bean,class,name,element,element,return,null
AbstractSingleBeanDefinitionParser -> @Nullable 	protected String getBeanClassName(Element element);1496837955;Determine the bean class name corresponding to the supplied {@link Element}._@param element the {@code Element} that is being parsed_@return the class name of the bean that is being defined via parsing_the supplied {@code Element}, or {@code null} if none_@see #getBeanClass;@Nullable_	protected String getBeanClassName(Element element) {_		return null__	};determine,the,bean,class,name,corresponding,to,the,supplied,link,element,param,element,the,code,element,that,is,being,parsed,return,the,class,name,of,the,bean,that,is,being,defined,via,parsing,the,supplied,code,element,or,code,null,if,none,see,get,bean,class;nullable,protected,string,get,bean,class,name,element,element,return,null
AbstractSingleBeanDefinitionParser -> @Nullable 	protected String getBeanClassName(Element element);1498780456;Determine the bean class name corresponding to the supplied {@link Element}._@param element the {@code Element} that is being parsed_@return the class name of the bean that is being defined via parsing_the supplied {@code Element}, or {@code null} if none_@see #getBeanClass;@Nullable_	protected String getBeanClassName(Element element) {_		return null__	};determine,the,bean,class,name,corresponding,to,the,supplied,link,element,param,element,the,code,element,that,is,being,parsed,return,the,class,name,of,the,bean,that,is,being,defined,via,parsing,the,supplied,code,element,or,code,null,if,none,see,get,bean,class;nullable,protected,string,get,bean,class,name,element,element,return,null
AbstractSingleBeanDefinitionParser -> @Nullable 	protected String getBeanClassName(Element element);1502206005;Determine the bean class name corresponding to the supplied {@link Element}._@param element the {@code Element} that is being parsed_@return the class name of the bean that is being defined via parsing_the supplied {@code Element}, or {@code null} if none_@see #getBeanClass;@Nullable_	protected String getBeanClassName(Element element) {_		return null__	};determine,the,bean,class,name,corresponding,to,the,supplied,link,element,param,element,the,code,element,that,is,being,parsed,return,the,class,name,of,the,bean,that,is,being,defined,via,parsing,the,supplied,code,element,or,code,null,if,none,see,get,bean,class;nullable,protected,string,get,bean,class,name,element,element,return,null
AbstractSingleBeanDefinitionParser -> @Nullable 	protected Class<?> getBeanClass(Element element);1495868221;Determine the bean class corresponding to the supplied {@link Element}._<p>Note that, for application classes, it is generally preferable to_override {@link #getBeanClassName} instead, in order to avoid a direct_dependence on the bean implementation class. The BeanDefinitionParser_and its NamespaceHandler can be used within an IDE plugin then, even_if the application classes are not available on the plugin's classpath._@param element the {@code Element} that is being parsed_@return the {@link Class} of the bean that is being defined via parsing_the supplied {@code Element}, or {@code null} if none_@see #getBeanClassName;@Nullable_	protected Class<?> getBeanClass(Element element) {_		return null__	};determine,the,bean,class,corresponding,to,the,supplied,link,element,p,note,that,for,application,classes,it,is,generally,preferable,to,override,link,get,bean,class,name,instead,in,order,to,avoid,a,direct,dependence,on,the,bean,implementation,class,the,bean,definition,parser,and,its,namespace,handler,can,be,used,within,an,ide,plugin,then,even,if,the,application,classes,are,not,available,on,the,plugin,s,classpath,param,element,the,code,element,that,is,being,parsed,return,the,link,class,of,the,bean,that,is,being,defined,via,parsing,the,supplied,code,element,or,code,null,if,none,see,get,bean,class,name;nullable,protected,class,get,bean,class,element,element,return,null
AbstractSingleBeanDefinitionParser -> @Nullable 	protected Class<?> getBeanClass(Element element);1496242568;Determine the bean class corresponding to the supplied {@link Element}._<p>Note that, for application classes, it is generally preferable to_override {@link #getBeanClassName} instead, in order to avoid a direct_dependence on the bean implementation class. The BeanDefinitionParser_and its NamespaceHandler can be used within an IDE plugin then, even_if the application classes are not available on the plugin's classpath._@param element the {@code Element} that is being parsed_@return the {@link Class} of the bean that is being defined via parsing_the supplied {@code Element}, or {@code null} if none_@see #getBeanClassName;@Nullable_	protected Class<?> getBeanClass(Element element) {_		return null__	};determine,the,bean,class,corresponding,to,the,supplied,link,element,p,note,that,for,application,classes,it,is,generally,preferable,to,override,link,get,bean,class,name,instead,in,order,to,avoid,a,direct,dependence,on,the,bean,implementation,class,the,bean,definition,parser,and,its,namespace,handler,can,be,used,within,an,ide,plugin,then,even,if,the,application,classes,are,not,available,on,the,plugin,s,classpath,param,element,the,code,element,that,is,being,parsed,return,the,link,class,of,the,bean,that,is,being,defined,via,parsing,the,supplied,code,element,or,code,null,if,none,see,get,bean,class,name;nullable,protected,class,get,bean,class,element,element,return,null
AbstractSingleBeanDefinitionParser -> @Nullable 	protected Class<?> getBeanClass(Element element);1496837955;Determine the bean class corresponding to the supplied {@link Element}._<p>Note that, for application classes, it is generally preferable to_override {@link #getBeanClassName} instead, in order to avoid a direct_dependence on the bean implementation class. The BeanDefinitionParser_and its NamespaceHandler can be used within an IDE plugin then, even_if the application classes are not available on the plugin's classpath._@param element the {@code Element} that is being parsed_@return the {@link Class} of the bean that is being defined via parsing_the supplied {@code Element}, or {@code null} if none_@see #getBeanClassName;@Nullable_	protected Class<?> getBeanClass(Element element) {_		return null__	};determine,the,bean,class,corresponding,to,the,supplied,link,element,p,note,that,for,application,classes,it,is,generally,preferable,to,override,link,get,bean,class,name,instead,in,order,to,avoid,a,direct,dependence,on,the,bean,implementation,class,the,bean,definition,parser,and,its,namespace,handler,can,be,used,within,an,ide,plugin,then,even,if,the,application,classes,are,not,available,on,the,plugin,s,classpath,param,element,the,code,element,that,is,being,parsed,return,the,link,class,of,the,bean,that,is,being,defined,via,parsing,the,supplied,code,element,or,code,null,if,none,see,get,bean,class,name;nullable,protected,class,get,bean,class,element,element,return,null
AbstractSingleBeanDefinitionParser -> @Nullable 	protected Class<?> getBeanClass(Element element);1498780456;Determine the bean class corresponding to the supplied {@link Element}._<p>Note that, for application classes, it is generally preferable to_override {@link #getBeanClassName} instead, in order to avoid a direct_dependence on the bean implementation class. The BeanDefinitionParser_and its NamespaceHandler can be used within an IDE plugin then, even_if the application classes are not available on the plugin's classpath._@param element the {@code Element} that is being parsed_@return the {@link Class} of the bean that is being defined via parsing_the supplied {@code Element}, or {@code null} if none_@see #getBeanClassName;@Nullable_	protected Class<?> getBeanClass(Element element) {_		return null__	};determine,the,bean,class,corresponding,to,the,supplied,link,element,p,note,that,for,application,classes,it,is,generally,preferable,to,override,link,get,bean,class,name,instead,in,order,to,avoid,a,direct,dependence,on,the,bean,implementation,class,the,bean,definition,parser,and,its,namespace,handler,can,be,used,within,an,ide,plugin,then,even,if,the,application,classes,are,not,available,on,the,plugin,s,classpath,param,element,the,code,element,that,is,being,parsed,return,the,link,class,of,the,bean,that,is,being,defined,via,parsing,the,supplied,code,element,or,code,null,if,none,see,get,bean,class,name;nullable,protected,class,get,bean,class,element,element,return,null
AbstractSingleBeanDefinitionParser -> @Nullable 	protected Class<?> getBeanClass(Element element);1502206005;Determine the bean class corresponding to the supplied {@link Element}._<p>Note that, for application classes, it is generally preferable to_override {@link #getBeanClassName} instead, in order to avoid a direct_dependence on the bean implementation class. The BeanDefinitionParser_and its NamespaceHandler can be used within an IDE plugin then, even_if the application classes are not available on the plugin's classpath._@param element the {@code Element} that is being parsed_@return the {@link Class} of the bean that is being defined via parsing_the supplied {@code Element}, or {@code null} if none_@see #getBeanClassName;@Nullable_	protected Class<?> getBeanClass(Element element) {_		return null__	};determine,the,bean,class,corresponding,to,the,supplied,link,element,p,note,that,for,application,classes,it,is,generally,preferable,to,override,link,get,bean,class,name,instead,in,order,to,avoid,a,direct,dependence,on,the,bean,implementation,class,the,bean,definition,parser,and,its,namespace,handler,can,be,used,within,an,ide,plugin,then,even,if,the,application,classes,are,not,available,on,the,plugin,s,classpath,param,element,the,code,element,that,is,being,parsed,return,the,link,class,of,the,bean,that,is,being,defined,via,parsing,the,supplied,code,element,or,code,null,if,none,see,get,bean,class,name;nullable,protected,class,get,bean,class,element,element,return,null
AbstractSingleBeanDefinitionParser -> @Nullable 	protected String getParentName(Element element);1495868221;Determine the name for the parent of the currently parsed bean,_in case of the current bean being defined as a child bean._<p>The default implementation returns {@code null},_indicating a root bean definition._@param element the {@code Element} that is being parsed_@return the name of the parent bean for the currently parsed bean,_or {@code null} if none;@Nullable_	protected String getParentName(Element element) {_		return null__	};determine,the,name,for,the,parent,of,the,currently,parsed,bean,in,case,of,the,current,bean,being,defined,as,a,child,bean,p,the,default,implementation,returns,code,null,indicating,a,root,bean,definition,param,element,the,code,element,that,is,being,parsed,return,the,name,of,the,parent,bean,for,the,currently,parsed,bean,or,code,null,if,none;nullable,protected,string,get,parent,name,element,element,return,null
AbstractSingleBeanDefinitionParser -> @Nullable 	protected String getParentName(Element element);1496242568;Determine the name for the parent of the currently parsed bean,_in case of the current bean being defined as a child bean._<p>The default implementation returns {@code null},_indicating a root bean definition._@param element the {@code Element} that is being parsed_@return the name of the parent bean for the currently parsed bean,_or {@code null} if none;@Nullable_	protected String getParentName(Element element) {_		return null__	};determine,the,name,for,the,parent,of,the,currently,parsed,bean,in,case,of,the,current,bean,being,defined,as,a,child,bean,p,the,default,implementation,returns,code,null,indicating,a,root,bean,definition,param,element,the,code,element,that,is,being,parsed,return,the,name,of,the,parent,bean,for,the,currently,parsed,bean,or,code,null,if,none;nullable,protected,string,get,parent,name,element,element,return,null
AbstractSingleBeanDefinitionParser -> @Nullable 	protected String getParentName(Element element);1496837955;Determine the name for the parent of the currently parsed bean,_in case of the current bean being defined as a child bean._<p>The default implementation returns {@code null},_indicating a root bean definition._@param element the {@code Element} that is being parsed_@return the name of the parent bean for the currently parsed bean,_or {@code null} if none;@Nullable_	protected String getParentName(Element element) {_		return null__	};determine,the,name,for,the,parent,of,the,currently,parsed,bean,in,case,of,the,current,bean,being,defined,as,a,child,bean,p,the,default,implementation,returns,code,null,indicating,a,root,bean,definition,param,element,the,code,element,that,is,being,parsed,return,the,name,of,the,parent,bean,for,the,currently,parsed,bean,or,code,null,if,none;nullable,protected,string,get,parent,name,element,element,return,null
AbstractSingleBeanDefinitionParser -> @Nullable 	protected String getParentName(Element element);1498780456;Determine the name for the parent of the currently parsed bean,_in case of the current bean being defined as a child bean._<p>The default implementation returns {@code null},_indicating a root bean definition._@param element the {@code Element} that is being parsed_@return the name of the parent bean for the currently parsed bean,_or {@code null} if none;@Nullable_	protected String getParentName(Element element) {_		return null__	};determine,the,name,for,the,parent,of,the,currently,parsed,bean,in,case,of,the,current,bean,being,defined,as,a,child,bean,p,the,default,implementation,returns,code,null,indicating,a,root,bean,definition,param,element,the,code,element,that,is,being,parsed,return,the,name,of,the,parent,bean,for,the,currently,parsed,bean,or,code,null,if,none;nullable,protected,string,get,parent,name,element,element,return,null
AbstractSingleBeanDefinitionParser -> @Nullable 	protected String getParentName(Element element);1502206005;Determine the name for the parent of the currently parsed bean,_in case of the current bean being defined as a child bean._<p>The default implementation returns {@code null},_indicating a root bean definition._@param element the {@code Element} that is being parsed_@return the name of the parent bean for the currently parsed bean,_or {@code null} if none;@Nullable_	protected String getParentName(Element element) {_		return null__	};determine,the,name,for,the,parent,of,the,currently,parsed,bean,in,case,of,the,current,bean,being,defined,as,a,child,bean,p,the,default,implementation,returns,code,null,indicating,a,root,bean,definition,param,element,the,code,element,that,is,being,parsed,return,the,name,of,the,parent,bean,for,the,currently,parsed,bean,or,code,null,if,none;nullable,protected,string,get,parent,name,element,element,return,null
AbstractSingleBeanDefinitionParser -> protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder);1328020251;Parse the supplied {@link Element} and populate the supplied_{@link BeanDefinitionBuilder} as required._<p>The default implementation delegates to the <code>doParse</code>_version without ParserContext argument._@param element the XML element being parsed_@param parserContext the object encapsulating the current state of the parsing process_@param builder used to define the <code>BeanDefinition</code>_@see #doParse(Element, BeanDefinitionBuilder);protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder) {_		doParse(element, builder)__	};parse,the,supplied,link,element,and,populate,the,supplied,link,bean,definition,builder,as,required,p,the,default,implementation,delegates,to,the,code,do,parse,code,version,without,parser,context,argument,param,element,the,xml,element,being,parsed,param,parser,context,the,object,encapsulating,the,current,state,of,the,parsing,process,param,builder,used,to,define,the,code,bean,definition,code,see,do,parse,element,bean,definition,builder;protected,void,do,parse,element,element,parser,context,parser,context,bean,definition,builder,builder,do,parse,element,builder
AbstractSingleBeanDefinitionParser -> protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder);1356735495;Parse the supplied {@link Element} and populate the supplied_{@link BeanDefinitionBuilder} as required._<p>The default implementation delegates to the {@code doParse}_version without ParserContext argument._@param element the XML element being parsed_@param parserContext the object encapsulating the current state of the parsing process_@param builder used to define the {@code BeanDefinition}_@see #doParse(Element, BeanDefinitionBuilder);protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder) {_		doParse(element, builder)__	};parse,the,supplied,link,element,and,populate,the,supplied,link,bean,definition,builder,as,required,p,the,default,implementation,delegates,to,the,code,do,parse,version,without,parser,context,argument,param,element,the,xml,element,being,parsed,param,parser,context,the,object,encapsulating,the,current,state,of,the,parsing,process,param,builder,used,to,define,the,code,bean,definition,see,do,parse,element,bean,definition,builder;protected,void,do,parse,element,element,parser,context,parser,context,bean,definition,builder,builder,do,parse,element,builder
AbstractSingleBeanDefinitionParser -> protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder);1495868221;Parse the supplied {@link Element} and populate the supplied_{@link BeanDefinitionBuilder} as required._<p>The default implementation delegates to the {@code doParse}_version without ParserContext argument._@param element the XML element being parsed_@param parserContext the object encapsulating the current state of the parsing process_@param builder used to define the {@code BeanDefinition}_@see #doParse(Element, BeanDefinitionBuilder);protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder) {_		doParse(element, builder)__	};parse,the,supplied,link,element,and,populate,the,supplied,link,bean,definition,builder,as,required,p,the,default,implementation,delegates,to,the,code,do,parse,version,without,parser,context,argument,param,element,the,xml,element,being,parsed,param,parser,context,the,object,encapsulating,the,current,state,of,the,parsing,process,param,builder,used,to,define,the,code,bean,definition,see,do,parse,element,bean,definition,builder;protected,void,do,parse,element,element,parser,context,parser,context,bean,definition,builder,builder,do,parse,element,builder
AbstractSingleBeanDefinitionParser -> protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder);1496242568;Parse the supplied {@link Element} and populate the supplied_{@link BeanDefinitionBuilder} as required._<p>The default implementation delegates to the {@code doParse}_version without ParserContext argument._@param element the XML element being parsed_@param parserContext the object encapsulating the current state of the parsing process_@param builder used to define the {@code BeanDefinition}_@see #doParse(Element, BeanDefinitionBuilder);protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder) {_		doParse(element, builder)__	};parse,the,supplied,link,element,and,populate,the,supplied,link,bean,definition,builder,as,required,p,the,default,implementation,delegates,to,the,code,do,parse,version,without,parser,context,argument,param,element,the,xml,element,being,parsed,param,parser,context,the,object,encapsulating,the,current,state,of,the,parsing,process,param,builder,used,to,define,the,code,bean,definition,see,do,parse,element,bean,definition,builder;protected,void,do,parse,element,element,parser,context,parser,context,bean,definition,builder,builder,do,parse,element,builder
AbstractSingleBeanDefinitionParser -> protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder);1496837955;Parse the supplied {@link Element} and populate the supplied_{@link BeanDefinitionBuilder} as required._<p>The default implementation delegates to the {@code doParse}_version without ParserContext argument._@param element the XML element being parsed_@param parserContext the object encapsulating the current state of the parsing process_@param builder used to define the {@code BeanDefinition}_@see #doParse(Element, BeanDefinitionBuilder);protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder) {_		doParse(element, builder)__	};parse,the,supplied,link,element,and,populate,the,supplied,link,bean,definition,builder,as,required,p,the,default,implementation,delegates,to,the,code,do,parse,version,without,parser,context,argument,param,element,the,xml,element,being,parsed,param,parser,context,the,object,encapsulating,the,current,state,of,the,parsing,process,param,builder,used,to,define,the,code,bean,definition,see,do,parse,element,bean,definition,builder;protected,void,do,parse,element,element,parser,context,parser,context,bean,definition,builder,builder,do,parse,element,builder
AbstractSingleBeanDefinitionParser -> protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder);1498780456;Parse the supplied {@link Element} and populate the supplied_{@link BeanDefinitionBuilder} as required._<p>The default implementation delegates to the {@code doParse}_version without ParserContext argument._@param element the XML element being parsed_@param parserContext the object encapsulating the current state of the parsing process_@param builder used to define the {@code BeanDefinition}_@see #doParse(Element, BeanDefinitionBuilder);protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder) {_		doParse(element, builder)__	};parse,the,supplied,link,element,and,populate,the,supplied,link,bean,definition,builder,as,required,p,the,default,implementation,delegates,to,the,code,do,parse,version,without,parser,context,argument,param,element,the,xml,element,being,parsed,param,parser,context,the,object,encapsulating,the,current,state,of,the,parsing,process,param,builder,used,to,define,the,code,bean,definition,see,do,parse,element,bean,definition,builder;protected,void,do,parse,element,element,parser,context,parser,context,bean,definition,builder,builder,do,parse,element,builder
AbstractSingleBeanDefinitionParser -> protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder);1502206005;Parse the supplied {@link Element} and populate the supplied_{@link BeanDefinitionBuilder} as required._<p>The default implementation delegates to the {@code doParse}_version without ParserContext argument._@param element the XML element being parsed_@param parserContext the object encapsulating the current state of the parsing process_@param builder used to define the {@code BeanDefinition}_@see #doParse(Element, BeanDefinitionBuilder);protected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder) {_		doParse(element, builder)__	};parse,the,supplied,link,element,and,populate,the,supplied,link,bean,definition,builder,as,required,p,the,default,implementation,delegates,to,the,code,do,parse,version,without,parser,context,argument,param,element,the,xml,element,being,parsed,param,parser,context,the,object,encapsulating,the,current,state,of,the,parsing,process,param,builder,used,to,define,the,code,bean,definition,see,do,parse,element,bean,definition,builder;protected,void,do,parse,element,element,parser,context,parser,context,bean,definition,builder,builder,do,parse,element,builder
AbstractSingleBeanDefinitionParser -> protected String getBeanClassName(Element element);1328020251;Determine the bean class name corresponding to the supplied {@link Element}._@param element the <code>Element</code> that is being parsed_@return the class name of the bean that is being defined via parsing_the supplied <code>Element</code>, or <code>null</code> if none_@see #getBeanClass;protected String getBeanClassName(Element element) {_		return null__	};determine,the,bean,class,name,corresponding,to,the,supplied,link,element,param,element,the,code,element,code,that,is,being,parsed,return,the,class,name,of,the,bean,that,is,being,defined,via,parsing,the,supplied,code,element,code,or,code,null,code,if,none,see,get,bean,class;protected,string,get,bean,class,name,element,element,return,null
AbstractSingleBeanDefinitionParser -> protected String getBeanClassName(Element element);1356735495;Determine the bean class name corresponding to the supplied {@link Element}._@param element the {@code Element} that is being parsed_@return the class name of the bean that is being defined via parsing_the supplied {@code Element}, or {@code null} if none_@see #getBeanClass;protected String getBeanClassName(Element element) {_		return null__	};determine,the,bean,class,name,corresponding,to,the,supplied,link,element,param,element,the,code,element,that,is,being,parsed,return,the,class,name,of,the,bean,that,is,being,defined,via,parsing,the,supplied,code,element,or,code,null,if,none,see,get,bean,class;protected,string,get,bean,class,name,element,element,return,null
AbstractSingleBeanDefinitionParser -> protected Class<?> getBeanClass(Element element);1328020251;Determine the bean class corresponding to the supplied {@link Element}._<p>Note that, for application classes, it is generally preferable to_override {@link #getBeanClassName} instead, in order to avoid a direct_dependence on the bean implementation class. The BeanDefinitionParser_and its NamespaceHandler can be used within an IDE plugin then, even_if the application classes are not available on the plugin's classpath._@param element the <code>Element</code> that is being parsed_@return the {@link Class} of the bean that is being defined via parsing_the supplied <code>Element</code>, or <code>null</code> if none_@see #getBeanClassName;protected Class<?> getBeanClass(Element element) {_		return null__	};determine,the,bean,class,corresponding,to,the,supplied,link,element,p,note,that,for,application,classes,it,is,generally,preferable,to,override,link,get,bean,class,name,instead,in,order,to,avoid,a,direct,dependence,on,the,bean,implementation,class,the,bean,definition,parser,and,its,namespace,handler,can,be,used,within,an,ide,plugin,then,even,if,the,application,classes,are,not,available,on,the,plugin,s,classpath,param,element,the,code,element,code,that,is,being,parsed,return,the,link,class,of,the,bean,that,is,being,defined,via,parsing,the,supplied,code,element,code,or,code,null,code,if,none,see,get,bean,class,name;protected,class,get,bean,class,element,element,return,null
AbstractSingleBeanDefinitionParser -> protected Class<?> getBeanClass(Element element);1356735495;Determine the bean class corresponding to the supplied {@link Element}._<p>Note that, for application classes, it is generally preferable to_override {@link #getBeanClassName} instead, in order to avoid a direct_dependence on the bean implementation class. The BeanDefinitionParser_and its NamespaceHandler can be used within an IDE plugin then, even_if the application classes are not available on the plugin's classpath._@param element the {@code Element} that is being parsed_@return the {@link Class} of the bean that is being defined via parsing_the supplied {@code Element}, or {@code null} if none_@see #getBeanClassName;protected Class<?> getBeanClass(Element element) {_		return null__	};determine,the,bean,class,corresponding,to,the,supplied,link,element,p,note,that,for,application,classes,it,is,generally,preferable,to,override,link,get,bean,class,name,instead,in,order,to,avoid,a,direct,dependence,on,the,bean,implementation,class,the,bean,definition,parser,and,its,namespace,handler,can,be,used,within,an,ide,plugin,then,even,if,the,application,classes,are,not,available,on,the,plugin,s,classpath,param,element,the,code,element,that,is,being,parsed,return,the,link,class,of,the,bean,that,is,being,defined,via,parsing,the,supplied,code,element,or,code,null,if,none,see,get,bean,class,name;protected,class,get,bean,class,element,element,return,null
AbstractSingleBeanDefinitionParser -> protected void doParse(Element element, BeanDefinitionBuilder builder);1328020251;Parse the supplied {@link Element} and populate the supplied_{@link BeanDefinitionBuilder} as required._<p>The default implementation does nothing._@param element the XML element being parsed_@param builder used to define the <code>BeanDefinition</code>;protected void doParse(Element element, BeanDefinitionBuilder builder) {_	};parse,the,supplied,link,element,and,populate,the,supplied,link,bean,definition,builder,as,required,p,the,default,implementation,does,nothing,param,element,the,xml,element,being,parsed,param,builder,used,to,define,the,code,bean,definition,code;protected,void,do,parse,element,element,bean,definition,builder,builder
AbstractSingleBeanDefinitionParser -> protected void doParse(Element element, BeanDefinitionBuilder builder);1356735495;Parse the supplied {@link Element} and populate the supplied_{@link BeanDefinitionBuilder} as required._<p>The default implementation does nothing._@param element the XML element being parsed_@param builder used to define the {@code BeanDefinition};protected void doParse(Element element, BeanDefinitionBuilder builder) {_	};parse,the,supplied,link,element,and,populate,the,supplied,link,bean,definition,builder,as,required,p,the,default,implementation,does,nothing,param,element,the,xml,element,being,parsed,param,builder,used,to,define,the,code,bean,definition;protected,void,do,parse,element,element,bean,definition,builder,builder
AbstractSingleBeanDefinitionParser -> protected void doParse(Element element, BeanDefinitionBuilder builder);1495868221;Parse the supplied {@link Element} and populate the supplied_{@link BeanDefinitionBuilder} as required._<p>The default implementation does nothing._@param element the XML element being parsed_@param builder used to define the {@code BeanDefinition};protected void doParse(Element element, BeanDefinitionBuilder builder) {_	};parse,the,supplied,link,element,and,populate,the,supplied,link,bean,definition,builder,as,required,p,the,default,implementation,does,nothing,param,element,the,xml,element,being,parsed,param,builder,used,to,define,the,code,bean,definition;protected,void,do,parse,element,element,bean,definition,builder,builder
AbstractSingleBeanDefinitionParser -> protected void doParse(Element element, BeanDefinitionBuilder builder);1496242568;Parse the supplied {@link Element} and populate the supplied_{@link BeanDefinitionBuilder} as required._<p>The default implementation does nothing._@param element the XML element being parsed_@param builder used to define the {@code BeanDefinition};protected void doParse(Element element, BeanDefinitionBuilder builder) {_	};parse,the,supplied,link,element,and,populate,the,supplied,link,bean,definition,builder,as,required,p,the,default,implementation,does,nothing,param,element,the,xml,element,being,parsed,param,builder,used,to,define,the,code,bean,definition;protected,void,do,parse,element,element,bean,definition,builder,builder
AbstractSingleBeanDefinitionParser -> protected void doParse(Element element, BeanDefinitionBuilder builder);1496837955;Parse the supplied {@link Element} and populate the supplied_{@link BeanDefinitionBuilder} as required._<p>The default implementation does nothing._@param element the XML element being parsed_@param builder used to define the {@code BeanDefinition};protected void doParse(Element element, BeanDefinitionBuilder builder) {_	};parse,the,supplied,link,element,and,populate,the,supplied,link,bean,definition,builder,as,required,p,the,default,implementation,does,nothing,param,element,the,xml,element,being,parsed,param,builder,used,to,define,the,code,bean,definition;protected,void,do,parse,element,element,bean,definition,builder,builder
AbstractSingleBeanDefinitionParser -> protected void doParse(Element element, BeanDefinitionBuilder builder);1498780456;Parse the supplied {@link Element} and populate the supplied_{@link BeanDefinitionBuilder} as required._<p>The default implementation does nothing._@param element the XML element being parsed_@param builder used to define the {@code BeanDefinition};protected void doParse(Element element, BeanDefinitionBuilder builder) {_	};parse,the,supplied,link,element,and,populate,the,supplied,link,bean,definition,builder,as,required,p,the,default,implementation,does,nothing,param,element,the,xml,element,being,parsed,param,builder,used,to,define,the,code,bean,definition;protected,void,do,parse,element,element,bean,definition,builder,builder
AbstractSingleBeanDefinitionParser -> protected void doParse(Element element, BeanDefinitionBuilder builder);1502206005;Parse the supplied {@link Element} and populate the supplied_{@link BeanDefinitionBuilder} as required._<p>The default implementation does nothing._@param element the XML element being parsed_@param builder used to define the {@code BeanDefinition};protected void doParse(Element element, BeanDefinitionBuilder builder) {_	};parse,the,supplied,link,element,and,populate,the,supplied,link,bean,definition,builder,as,required,p,the,default,implementation,does,nothing,param,element,the,xml,element,being,parsed,param,builder,used,to,define,the,code,bean,definition;protected,void,do,parse,element,element,bean,definition,builder,builder
