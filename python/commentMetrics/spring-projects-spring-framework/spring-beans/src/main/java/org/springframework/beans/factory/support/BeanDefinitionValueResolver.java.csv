# id;timestamp;commentText;codeText;commentWords;codeWords
BeanDefinitionValueResolver -> private List<?> resolveManagedList(Object argName, List<?> ml);1385412762;For each element in the managed list, resolve reference if necessary.;private List<?> resolveManagedList(Object argName, List<?> ml) {_		List<Object> resolved = new ArrayList<Object>(ml.size())__		for (int i = 0_ i < ml.size()_ i++) {_			resolved.add(_					resolveValueIfNecessary(new KeyedArgName(argName, i), ml.get(i)))__		}_		return resolved__	};for,each,element,in,the,managed,list,resolve,reference,if,necessary;private,list,resolve,managed,list,object,arg,name,list,ml,list,object,resolved,new,array,list,object,ml,size,for,int,i,0,i,ml,size,i,resolved,add,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,ml,get,i,return,resolved
BeanDefinitionValueResolver -> private List<?> resolveManagedList(Object argName, List<?> ml);1386621944;For each element in the managed list, resolve reference if necessary.;private List<?> resolveManagedList(Object argName, List<?> ml) {_		List<Object> resolved = new ArrayList<Object>(ml.size())__		for (int i = 0_ i < ml.size()_ i++) {_			resolved.add(_					resolveValueIfNecessary(new KeyedArgName(argName, i), ml.get(i)))__		}_		return resolved__	};for,each,element,in,the,managed,list,resolve,reference,if,necessary;private,list,resolve,managed,list,object,arg,name,list,ml,list,object,resolved,new,array,list,object,ml,size,for,int,i,0,i,ml,size,i,resolved,add,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,ml,get,i,return,resolved
BeanDefinitionValueResolver -> private List<?> resolveManagedList(Object argName, List<?> ml);1394825889;For each element in the managed list, resolve reference if necessary.;private List<?> resolveManagedList(Object argName, List<?> ml) {_		List<Object> resolved = new ArrayList<Object>(ml.size())__		for (int i = 0_ i < ml.size()_ i++) {_			resolved.add(_					resolveValueIfNecessary(new KeyedArgName(argName, i), ml.get(i)))__		}_		return resolved__	};for,each,element,in,the,managed,list,resolve,reference,if,necessary;private,list,resolve,managed,list,object,arg,name,list,ml,list,object,resolved,new,array,list,object,ml,size,for,int,i,0,i,ml,size,i,resolved,add,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,ml,get,i,return,resolved
BeanDefinitionValueResolver -> private List<?> resolveManagedList(Object argName, List<?> ml);1414738527;For each element in the managed list, resolve reference if necessary.;private List<?> resolveManagedList(Object argName, List<?> ml) {_		List<Object> resolved = new ArrayList<Object>(ml.size())__		for (int i = 0_ i < ml.size()_ i++) {_			resolved.add(_					resolveValueIfNecessary(new KeyedArgName(argName, i), ml.get(i)))__		}_		return resolved__	};for,each,element,in,the,managed,list,resolve,reference,if,necessary;private,list,resolve,managed,list,object,arg,name,list,ml,list,object,resolved,new,array,list,object,ml,size,for,int,i,0,i,ml,size,i,resolved,add,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,ml,get,i,return,resolved
BeanDefinitionValueResolver -> private List<?> resolveManagedList(Object argName, List<?> ml);1414774626;For each element in the managed list, resolve reference if necessary.;private List<?> resolveManagedList(Object argName, List<?> ml) {_		List<Object> resolved = new ArrayList<Object>(ml.size())__		for (int i = 0_ i < ml.size()_ i++) {_			resolved.add(_					resolveValueIfNecessary(new KeyedArgName(argName, i), ml.get(i)))__		}_		return resolved__	};for,each,element,in,the,managed,list,resolve,reference,if,necessary;private,list,resolve,managed,list,object,arg,name,list,ml,list,object,resolved,new,array,list,object,ml,size,for,int,i,0,i,ml,size,i,resolved,add,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,ml,get,i,return,resolved
BeanDefinitionValueResolver -> private List<?> resolveManagedList(Object argName, List<?> ml);1467730834;For each element in the managed list, resolve reference if necessary.;private List<?> resolveManagedList(Object argName, List<?> ml) {_		List<Object> resolved = new ArrayList<>(ml.size())__		for (int i = 0_ i < ml.size()_ i++) {_			resolved.add(_					resolveValueIfNecessary(new KeyedArgName(argName, i), ml.get(i)))__		}_		return resolved__	};for,each,element,in,the,managed,list,resolve,reference,if,necessary;private,list,resolve,managed,list,object,arg,name,list,ml,list,object,resolved,new,array,list,ml,size,for,int,i,0,i,ml,size,i,resolved,add,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,ml,get,i,return,resolved
BeanDefinitionValueResolver -> private List<?> resolveManagedList(Object argName, List<?> ml);1495868221;For each element in the managed list, resolve reference if necessary.;private List<?> resolveManagedList(Object argName, List<?> ml) {_		List<Object> resolved = new ArrayList<>(ml.size())__		for (int i = 0_ i < ml.size()_ i++) {_			resolved.add(_					resolveValueIfNecessary(new KeyedArgName(argName, i), ml.get(i)))__		}_		return resolved__	};for,each,element,in,the,managed,list,resolve,reference,if,necessary;private,list,resolve,managed,list,object,arg,name,list,ml,list,object,resolved,new,array,list,ml,size,for,int,i,0,i,ml,size,i,resolved,add,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,ml,get,i,return,resolved
BeanDefinitionValueResolver -> private List<?> resolveManagedList(Object argName, List<?> ml);1496837955;For each element in the managed list, resolve reference if necessary.;private List<?> resolveManagedList(Object argName, List<?> ml) {_		List<Object> resolved = new ArrayList<>(ml.size())__		for (int i = 0_ i < ml.size()_ i++) {_			resolved.add(_					resolveValueIfNecessary(new KeyedArgName(argName, i), ml.get(i)))__		}_		return resolved__	};for,each,element,in,the,managed,list,resolve,reference,if,necessary;private,list,resolve,managed,list,object,arg,name,list,ml,list,object,resolved,new,array,list,ml,size,for,int,i,0,i,ml,size,i,resolved,add,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,ml,get,i,return,resolved
BeanDefinitionValueResolver -> private List<?> resolveManagedList(Object argName, List<?> ml);1497250713;For each element in the managed list, resolve reference if necessary.;private List<?> resolveManagedList(Object argName, List<?> ml) {_		List<Object> resolved = new ArrayList<>(ml.size())__		for (int i = 0_ i < ml.size()_ i++) {_			resolved.add(_					resolveValueIfNecessary(new KeyedArgName(argName, i), ml.get(i)))__		}_		return resolved__	};for,each,element,in,the,managed,list,resolve,reference,if,necessary;private,list,resolve,managed,list,object,arg,name,list,ml,list,object,resolved,new,array,list,ml,size,for,int,i,0,i,ml,size,i,resolved,add,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,ml,get,i,return,resolved
BeanDefinitionValueResolver -> private List<?> resolveManagedList(Object argName, List<?> ml);1503007895;For each element in the managed list, resolve reference if necessary.;private List<?> resolveManagedList(Object argName, List<?> ml) {_		List<Object> resolved = new ArrayList<>(ml.size())__		for (int i = 0_ i < ml.size()_ i++) {_			resolved.add(_					resolveValueIfNecessary(new KeyedArgName(argName, i), ml.get(i)))__		}_		return resolved__	};for,each,element,in,the,managed,list,resolve,reference,if,necessary;private,list,resolve,managed,list,object,arg,name,list,ml,list,object,resolved,new,array,list,ml,size,for,int,i,0,i,ml,size,i,resolved,add,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,ml,get,i,return,resolved
BeanDefinitionValueResolver -> private List<?> resolveManagedList(Object argName, List<?> ml);1522103912;For each element in the managed list, resolve reference if necessary.;private List<?> resolveManagedList(Object argName, List<?> ml) {_		List<Object> resolved = new ArrayList<>(ml.size())__		for (int i = 0_ i < ml.size()_ i++) {_			resolved.add(_					resolveValueIfNecessary(new KeyedArgName(argName, i), ml.get(i)))__		}_		return resolved__	};for,each,element,in,the,managed,list,resolve,reference,if,necessary;private,list,resolve,managed,list,object,arg,name,list,ml,list,object,resolved,new,array,list,ml,size,for,int,i,0,i,ml,size,i,resolved,add,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,ml,get,i,return,resolved
BeanDefinitionValueResolver -> @Nullable 	private Object resolveReference(Object argName, RuntimeBeanReference ref);1503007895;Resolve a reference to another bean in the factory.;@Nullable_	private Object resolveReference(Object argName, RuntimeBeanReference ref) {_		try {_			Object bean__			String refName = ref.getBeanName()__			refName = String.valueOf(doEvaluate(refName))__			if (ref.isToParent()) {_				if (this.beanFactory.getParentBeanFactory() == null) {_					throw new BeanCreationException(_							this.beanDefinition.getResourceDescription(), this.beanName,_							"Can't resolve reference to bean '" + refName +_							"' in parent factory: no parent factory available")__				}_				bean = this.beanFactory.getParentBeanFactory().getBean(refName)__			}_			else {_				bean = this.beanFactory.getBean(refName)__				this.beanFactory.registerDependentBean(refName, this.beanName)__			}_			if (bean instanceof NullBean) {_				bean = null__			}_			return bean__		}_		catch (BeansException ex) {_			throw new BeanCreationException(_					this.beanDefinition.getResourceDescription(), this.beanName,_					"Cannot resolve reference to bean '" + ref.getBeanName() + "' while setting " + argName, ex)__		}_	};resolve,a,reference,to,another,bean,in,the,factory;nullable,private,object,resolve,reference,object,arg,name,runtime,bean,reference,ref,try,object,bean,string,ref,name,ref,get,bean,name,ref,name,string,value,of,do,evaluate,ref,name,if,ref,is,to,parent,if,this,bean,factory,get,parent,bean,factory,null,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,can,t,resolve,reference,to,bean,ref,name,in,parent,factory,no,parent,factory,available,bean,this,bean,factory,get,parent,bean,factory,get,bean,ref,name,else,bean,this,bean,factory,get,bean,ref,name,this,bean,factory,register,dependent,bean,ref,name,this,bean,name,if,bean,instanceof,null,bean,bean,null,return,bean,catch,beans,exception,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,cannot,resolve,reference,to,bean,ref,get,bean,name,while,setting,arg,name,ex
BeanDefinitionValueResolver -> @Nullable 	private Object resolveReference(Object argName, RuntimeBeanReference ref);1522103912;Resolve a reference to another bean in the factory.;@Nullable_	private Object resolveReference(Object argName, RuntimeBeanReference ref) {_		try {_			Object bean__			String refName = ref.getBeanName()__			refName = String.valueOf(doEvaluate(refName))__			if (ref.isToParent()) {_				if (this.beanFactory.getParentBeanFactory() == null) {_					throw new BeanCreationException(_							this.beanDefinition.getResourceDescription(), this.beanName,_							"Can't resolve reference to bean '" + refName +_							"' in parent factory: no parent factory available")__				}_				bean = this.beanFactory.getParentBeanFactory().getBean(refName)__			}_			else {_				bean = this.beanFactory.getBean(refName)__				this.beanFactory.registerDependentBean(refName, this.beanName)__			}_			if (bean instanceof NullBean) {_				bean = null__			}_			return bean__		}_		catch (BeansException ex) {_			throw new BeanCreationException(_					this.beanDefinition.getResourceDescription(), this.beanName,_					"Cannot resolve reference to bean '" + ref.getBeanName() + "' while setting " + argName, ex)__		}_	};resolve,a,reference,to,another,bean,in,the,factory;nullable,private,object,resolve,reference,object,arg,name,runtime,bean,reference,ref,try,object,bean,string,ref,name,ref,get,bean,name,ref,name,string,value,of,do,evaluate,ref,name,if,ref,is,to,parent,if,this,bean,factory,get,parent,bean,factory,null,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,can,t,resolve,reference,to,bean,ref,name,in,parent,factory,no,parent,factory,available,bean,this,bean,factory,get,parent,bean,factory,get,bean,ref,name,else,bean,this,bean,factory,get,bean,ref,name,this,bean,factory,register,dependent,bean,ref,name,this,bean,name,if,bean,instanceof,null,bean,bean,null,return,bean,catch,beans,exception,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,cannot,resolve,reference,to,bean,ref,get,bean,name,while,setting,arg,name,ex
BeanDefinitionValueResolver -> protected Object evaluate(TypedStringValue value);1328020251;Evaluate the given value as an expression, if necessary._@param value the candidate value (may be an expression)_@return the resolved value;protected Object evaluate(TypedStringValue value) {_		Object result = this.beanFactory.evaluateBeanDefinitionString(value.getValue(), this.beanDefinition)__		if (result != value.getValue()) {_			value.setDynamic()__		}_		return result__	};evaluate,the,given,value,as,an,expression,if,necessary,param,value,the,candidate,value,may,be,an,expression,return,the,resolved,value;protected,object,evaluate,typed,string,value,value,object,result,this,bean,factory,evaluate,bean,definition,string,value,get,value,this,bean,definition,if,result,value,get,value,value,set,dynamic,return,result
BeanDefinitionValueResolver -> protected Object evaluate(TypedStringValue value);1347282854;Evaluate the given value as an expression, if necessary._@param value the candidate value (may be an expression)_@return the resolved value;protected Object evaluate(TypedStringValue value) {_		Object result = this.beanFactory.evaluateBeanDefinitionString(value.getValue(), this.beanDefinition)__		if (!ObjectUtils.nullSafeEquals(result, value.getValue())) {_			value.setDynamic()__		}_		return result__	};evaluate,the,given,value,as,an,expression,if,necessary,param,value,the,candidate,value,may,be,an,expression,return,the,resolved,value;protected,object,evaluate,typed,string,value,value,object,result,this,bean,factory,evaluate,bean,definition,string,value,get,value,this,bean,definition,if,object,utils,null,safe,equals,result,value,get,value,value,set,dynamic,return,result
BeanDefinitionValueResolver -> protected Object evaluate(TypedStringValue value);1356735495;Evaluate the given value as an expression, if necessary._@param value the candidate value (may be an expression)_@return the resolved value;protected Object evaluate(TypedStringValue value) {_		Object result = this.beanFactory.evaluateBeanDefinitionString(value.getValue(), this.beanDefinition)__		if (!ObjectUtils.nullSafeEquals(result, value.getValue())) {_			value.setDynamic()__		}_		return result__	};evaluate,the,given,value,as,an,expression,if,necessary,param,value,the,candidate,value,may,be,an,expression,return,the,resolved,value;protected,object,evaluate,typed,string,value,value,object,result,this,bean,factory,evaluate,bean,definition,string,value,get,value,this,bean,definition,if,object,utils,null,safe,equals,result,value,get,value,value,set,dynamic,return,result
BeanDefinitionValueResolver -> protected Object evaluate(TypedStringValue value);1382905576;Evaluate the given value as an expression, if necessary._@param value the candidate value (may be an expression)_@return the resolved value;protected Object evaluate(TypedStringValue value) {_		Object result = this.beanFactory.evaluateBeanDefinitionString(value.getValue(), this.beanDefinition)__		if (!ObjectUtils.nullSafeEquals(result, value.getValue())) {_			value.setDynamic()__		}_		return result__	};evaluate,the,given,value,as,an,expression,if,necessary,param,value,the,candidate,value,may,be,an,expression,return,the,resolved,value;protected,object,evaluate,typed,string,value,value,object,result,this,bean,factory,evaluate,bean,definition,string,value,get,value,this,bean,definition,if,object,utils,null,safe,equals,result,value,get,value,value,set,dynamic,return,result
BeanDefinitionValueResolver -> protected Object evaluate(TypedStringValue value);1385412762;Evaluate the given value as an expression, if necessary._@param value the candidate value (may be an expression)_@return the resolved value;protected Object evaluate(TypedStringValue value) {_		Object result = this.beanFactory.evaluateBeanDefinitionString(value.getValue(), this.beanDefinition)__		if (!ObjectUtils.nullSafeEquals(result, value.getValue())) {_			value.setDynamic()__		}_		return result__	};evaluate,the,given,value,as,an,expression,if,necessary,param,value,the,candidate,value,may,be,an,expression,return,the,resolved,value;protected,object,evaluate,typed,string,value,value,object,result,this,bean,factory,evaluate,bean,definition,string,value,get,value,this,bean,definition,if,object,utils,null,safe,equals,result,value,get,value,value,set,dynamic,return,result
BeanDefinitionValueResolver -> protected Object evaluate(TypedStringValue value);1386621944;Evaluate the given value as an expression, if necessary._@param value the candidate value (may be an expression)_@return the resolved value;protected Object evaluate(TypedStringValue value) {_		Object result = this.beanFactory.evaluateBeanDefinitionString(value.getValue(), this.beanDefinition)__		if (!ObjectUtils.nullSafeEquals(result, value.getValue())) {_			value.setDynamic()__		}_		return result__	};evaluate,the,given,value,as,an,expression,if,necessary,param,value,the,candidate,value,may,be,an,expression,return,the,resolved,value;protected,object,evaluate,typed,string,value,value,object,result,this,bean,factory,evaluate,bean,definition,string,value,get,value,this,bean,definition,if,object,utils,null,safe,equals,result,value,get,value,value,set,dynamic,return,result
BeanDefinitionValueResolver -> protected Object evaluate(TypedStringValue value);1394825889;Evaluate the given value as an expression, if necessary._@param value the candidate value (may be an expression)_@return the resolved value;protected Object evaluate(TypedStringValue value) {_		Object result = this.beanFactory.evaluateBeanDefinitionString(value.getValue(), this.beanDefinition)__		if (!ObjectUtils.nullSafeEquals(result, value.getValue())) {_			value.setDynamic()__		}_		return result__	};evaluate,the,given,value,as,an,expression,if,necessary,param,value,the,candidate,value,may,be,an,expression,return,the,resolved,value;protected,object,evaluate,typed,string,value,value,object,result,this,bean,factory,evaluate,bean,definition,string,value,get,value,this,bean,definition,if,object,utils,null,safe,equals,result,value,get,value,value,set,dynamic,return,result
BeanDefinitionValueResolver -> protected Object evaluate(TypedStringValue value);1414738527;Evaluate the given value as an expression, if necessary._@param value the candidate value (may be an expression)_@return the resolved value;protected Object evaluate(TypedStringValue value) {_		Object result = this.beanFactory.evaluateBeanDefinitionString(value.getValue(), this.beanDefinition)__		if (!ObjectUtils.nullSafeEquals(result, value.getValue())) {_			value.setDynamic()__		}_		return result__	};evaluate,the,given,value,as,an,expression,if,necessary,param,value,the,candidate,value,may,be,an,expression,return,the,resolved,value;protected,object,evaluate,typed,string,value,value,object,result,this,bean,factory,evaluate,bean,definition,string,value,get,value,this,bean,definition,if,object,utils,null,safe,equals,result,value,get,value,value,set,dynamic,return,result
BeanDefinitionValueResolver -> protected Object evaluate(TypedStringValue value);1414774626;Evaluate the given value as an expression, if necessary._@param value the candidate value (may be an expression)_@return the resolved value;protected Object evaluate(TypedStringValue value) {_		Object result = doEvaluate(value.getValue())__		if (!ObjectUtils.nullSafeEquals(result, value.getValue())) {_			value.setDynamic()__		}_		return result__	};evaluate,the,given,value,as,an,expression,if,necessary,param,value,the,candidate,value,may,be,an,expression,return,the,resolved,value;protected,object,evaluate,typed,string,value,value,object,result,do,evaluate,value,get,value,if,object,utils,null,safe,equals,result,value,get,value,value,set,dynamic,return,result
BeanDefinitionValueResolver -> protected Object evaluate(TypedStringValue value);1467730834;Evaluate the given value as an expression, if necessary._@param value the candidate value (may be an expression)_@return the resolved value;protected Object evaluate(TypedStringValue value) {_		Object result = doEvaluate(value.getValue())__		if (!ObjectUtils.nullSafeEquals(result, value.getValue())) {_			value.setDynamic()__		}_		return result__	};evaluate,the,given,value,as,an,expression,if,necessary,param,value,the,candidate,value,may,be,an,expression,return,the,resolved,value;protected,object,evaluate,typed,string,value,value,object,result,do,evaluate,value,get,value,if,object,utils,null,safe,equals,result,value,get,value,value,set,dynamic,return,result
BeanDefinitionValueResolver -> protected Object evaluate(TypedStringValue value);1495868221;Evaluate the given value as an expression, if necessary._@param value the candidate value (may be an expression)_@return the resolved value;protected Object evaluate(TypedStringValue value) {_		Object result = doEvaluate(value.getValue())__		if (!ObjectUtils.nullSafeEquals(result, value.getValue())) {_			value.setDynamic()__		}_		return result__	};evaluate,the,given,value,as,an,expression,if,necessary,param,value,the,candidate,value,may,be,an,expression,return,the,resolved,value;protected,object,evaluate,typed,string,value,value,object,result,do,evaluate,value,get,value,if,object,utils,null,safe,equals,result,value,get,value,value,set,dynamic,return,result
BeanDefinitionValueResolver -> private Object resolveReference(Object argName, RuntimeBeanReference ref);1328020251;Resolve a reference to another bean in the factory.;private Object resolveReference(Object argName, RuntimeBeanReference ref) {_		try {_			String refName = ref.getBeanName()__			refName = String.valueOf(evaluate(refName))__			if (ref.isToParent()) {_				if (this.beanFactory.getParentBeanFactory() == null) {_					throw new BeanCreationException(_							this.beanDefinition.getResourceDescription(), this.beanName,_							"Can't resolve reference to bean '" + refName +_							"' in parent factory: no parent factory available")__				}_				return this.beanFactory.getParentBeanFactory().getBean(refName)__			}_			else {_				Object bean = this.beanFactory.getBean(refName)__				this.beanFactory.registerDependentBean(refName, this.beanName)__				return bean__			}_		}_		catch (BeansException ex) {_			throw new BeanCreationException(_					this.beanDefinition.getResourceDescription(), this.beanName,_					"Cannot resolve reference to bean '" + ref.getBeanName() + "' while setting " + argName, ex)__		}_	};resolve,a,reference,to,another,bean,in,the,factory;private,object,resolve,reference,object,arg,name,runtime,bean,reference,ref,try,string,ref,name,ref,get,bean,name,ref,name,string,value,of,evaluate,ref,name,if,ref,is,to,parent,if,this,bean,factory,get,parent,bean,factory,null,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,can,t,resolve,reference,to,bean,ref,name,in,parent,factory,no,parent,factory,available,return,this,bean,factory,get,parent,bean,factory,get,bean,ref,name,else,object,bean,this,bean,factory,get,bean,ref,name,this,bean,factory,register,dependent,bean,ref,name,this,bean,name,return,bean,catch,beans,exception,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,cannot,resolve,reference,to,bean,ref,get,bean,name,while,setting,arg,name,ex
BeanDefinitionValueResolver -> private Object resolveReference(Object argName, RuntimeBeanReference ref);1347282854;Resolve a reference to another bean in the factory.;private Object resolveReference(Object argName, RuntimeBeanReference ref) {_		try {_			String refName = ref.getBeanName()__			refName = String.valueOf(evaluate(refName))__			if (ref.isToParent()) {_				if (this.beanFactory.getParentBeanFactory() == null) {_					throw new BeanCreationException(_							this.beanDefinition.getResourceDescription(), this.beanName,_							"Can't resolve reference to bean '" + refName +_							"' in parent factory: no parent factory available")__				}_				return this.beanFactory.getParentBeanFactory().getBean(refName)__			}_			else {_				Object bean = this.beanFactory.getBean(refName)__				this.beanFactory.registerDependentBean(refName, this.beanName)__				return bean__			}_		}_		catch (BeansException ex) {_			throw new BeanCreationException(_					this.beanDefinition.getResourceDescription(), this.beanName,_					"Cannot resolve reference to bean '" + ref.getBeanName() + "' while setting " + argName, ex)__		}_	};resolve,a,reference,to,another,bean,in,the,factory;private,object,resolve,reference,object,arg,name,runtime,bean,reference,ref,try,string,ref,name,ref,get,bean,name,ref,name,string,value,of,evaluate,ref,name,if,ref,is,to,parent,if,this,bean,factory,get,parent,bean,factory,null,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,can,t,resolve,reference,to,bean,ref,name,in,parent,factory,no,parent,factory,available,return,this,bean,factory,get,parent,bean,factory,get,bean,ref,name,else,object,bean,this,bean,factory,get,bean,ref,name,this,bean,factory,register,dependent,bean,ref,name,this,bean,name,return,bean,catch,beans,exception,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,cannot,resolve,reference,to,bean,ref,get,bean,name,while,setting,arg,name,ex
BeanDefinitionValueResolver -> private Object resolveReference(Object argName, RuntimeBeanReference ref);1356735495;Resolve a reference to another bean in the factory.;private Object resolveReference(Object argName, RuntimeBeanReference ref) {_		try {_			String refName = ref.getBeanName()__			refName = String.valueOf(evaluate(refName))__			if (ref.isToParent()) {_				if (this.beanFactory.getParentBeanFactory() == null) {_					throw new BeanCreationException(_							this.beanDefinition.getResourceDescription(), this.beanName,_							"Can't resolve reference to bean '" + refName +_							"' in parent factory: no parent factory available")__				}_				return this.beanFactory.getParentBeanFactory().getBean(refName)__			}_			else {_				Object bean = this.beanFactory.getBean(refName)__				this.beanFactory.registerDependentBean(refName, this.beanName)__				return bean__			}_		}_		catch (BeansException ex) {_			throw new BeanCreationException(_					this.beanDefinition.getResourceDescription(), this.beanName,_					"Cannot resolve reference to bean '" + ref.getBeanName() + "' while setting " + argName, ex)__		}_	};resolve,a,reference,to,another,bean,in,the,factory;private,object,resolve,reference,object,arg,name,runtime,bean,reference,ref,try,string,ref,name,ref,get,bean,name,ref,name,string,value,of,evaluate,ref,name,if,ref,is,to,parent,if,this,bean,factory,get,parent,bean,factory,null,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,can,t,resolve,reference,to,bean,ref,name,in,parent,factory,no,parent,factory,available,return,this,bean,factory,get,parent,bean,factory,get,bean,ref,name,else,object,bean,this,bean,factory,get,bean,ref,name,this,bean,factory,register,dependent,bean,ref,name,this,bean,name,return,bean,catch,beans,exception,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,cannot,resolve,reference,to,bean,ref,get,bean,name,while,setting,arg,name,ex
BeanDefinitionValueResolver -> private Object resolveReference(Object argName, RuntimeBeanReference ref);1382905576;Resolve a reference to another bean in the factory.;private Object resolveReference(Object argName, RuntimeBeanReference ref) {_		try {_			String refName = ref.getBeanName()__			refName = String.valueOf(evaluate(refName))__			if (ref.isToParent()) {_				if (this.beanFactory.getParentBeanFactory() == null) {_					throw new BeanCreationException(_							this.beanDefinition.getResourceDescription(), this.beanName,_							"Can't resolve reference to bean '" + refName +_							"' in parent factory: no parent factory available")__				}_				return this.beanFactory.getParentBeanFactory().getBean(refName)__			}_			else {_				Object bean = this.beanFactory.getBean(refName)__				this.beanFactory.registerDependentBean(refName, this.beanName)__				return bean__			}_		}_		catch (BeansException ex) {_			throw new BeanCreationException(_					this.beanDefinition.getResourceDescription(), this.beanName,_					"Cannot resolve reference to bean '" + ref.getBeanName() + "' while setting " + argName, ex)__		}_	};resolve,a,reference,to,another,bean,in,the,factory;private,object,resolve,reference,object,arg,name,runtime,bean,reference,ref,try,string,ref,name,ref,get,bean,name,ref,name,string,value,of,evaluate,ref,name,if,ref,is,to,parent,if,this,bean,factory,get,parent,bean,factory,null,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,can,t,resolve,reference,to,bean,ref,name,in,parent,factory,no,parent,factory,available,return,this,bean,factory,get,parent,bean,factory,get,bean,ref,name,else,object,bean,this,bean,factory,get,bean,ref,name,this,bean,factory,register,dependent,bean,ref,name,this,bean,name,return,bean,catch,beans,exception,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,cannot,resolve,reference,to,bean,ref,get,bean,name,while,setting,arg,name,ex
BeanDefinitionValueResolver -> private Object resolveReference(Object argName, RuntimeBeanReference ref);1385412762;Resolve a reference to another bean in the factory.;private Object resolveReference(Object argName, RuntimeBeanReference ref) {_		try {_			String refName = ref.getBeanName()__			refName = String.valueOf(evaluate(refName))__			if (ref.isToParent()) {_				if (this.beanFactory.getParentBeanFactory() == null) {_					throw new BeanCreationException(_							this.beanDefinition.getResourceDescription(), this.beanName,_							"Can't resolve reference to bean '" + refName +_							"' in parent factory: no parent factory available")__				}_				return this.beanFactory.getParentBeanFactory().getBean(refName)__			}_			else {_				Object bean = this.beanFactory.getBean(refName)__				this.beanFactory.registerDependentBean(refName, this.beanName)__				return bean__			}_		}_		catch (BeansException ex) {_			throw new BeanCreationException(_					this.beanDefinition.getResourceDescription(), this.beanName,_					"Cannot resolve reference to bean '" + ref.getBeanName() + "' while setting " + argName, ex)__		}_	};resolve,a,reference,to,another,bean,in,the,factory;private,object,resolve,reference,object,arg,name,runtime,bean,reference,ref,try,string,ref,name,ref,get,bean,name,ref,name,string,value,of,evaluate,ref,name,if,ref,is,to,parent,if,this,bean,factory,get,parent,bean,factory,null,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,can,t,resolve,reference,to,bean,ref,name,in,parent,factory,no,parent,factory,available,return,this,bean,factory,get,parent,bean,factory,get,bean,ref,name,else,object,bean,this,bean,factory,get,bean,ref,name,this,bean,factory,register,dependent,bean,ref,name,this,bean,name,return,bean,catch,beans,exception,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,cannot,resolve,reference,to,bean,ref,get,bean,name,while,setting,arg,name,ex
BeanDefinitionValueResolver -> private Object resolveReference(Object argName, RuntimeBeanReference ref);1386621944;Resolve a reference to another bean in the factory.;private Object resolveReference(Object argName, RuntimeBeanReference ref) {_		try {_			String refName = ref.getBeanName()__			refName = String.valueOf(evaluate(refName))__			if (ref.isToParent()) {_				if (this.beanFactory.getParentBeanFactory() == null) {_					throw new BeanCreationException(_							this.beanDefinition.getResourceDescription(), this.beanName,_							"Can't resolve reference to bean '" + refName +_							"' in parent factory: no parent factory available")__				}_				return this.beanFactory.getParentBeanFactory().getBean(refName)__			}_			else {_				Object bean = this.beanFactory.getBean(refName)__				this.beanFactory.registerDependentBean(refName, this.beanName)__				return bean__			}_		}_		catch (BeansException ex) {_			throw new BeanCreationException(_					this.beanDefinition.getResourceDescription(), this.beanName,_					"Cannot resolve reference to bean '" + ref.getBeanName() + "' while setting " + argName, ex)__		}_	};resolve,a,reference,to,another,bean,in,the,factory;private,object,resolve,reference,object,arg,name,runtime,bean,reference,ref,try,string,ref,name,ref,get,bean,name,ref,name,string,value,of,evaluate,ref,name,if,ref,is,to,parent,if,this,bean,factory,get,parent,bean,factory,null,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,can,t,resolve,reference,to,bean,ref,name,in,parent,factory,no,parent,factory,available,return,this,bean,factory,get,parent,bean,factory,get,bean,ref,name,else,object,bean,this,bean,factory,get,bean,ref,name,this,bean,factory,register,dependent,bean,ref,name,this,bean,name,return,bean,catch,beans,exception,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,cannot,resolve,reference,to,bean,ref,get,bean,name,while,setting,arg,name,ex
BeanDefinitionValueResolver -> private Object resolveReference(Object argName, RuntimeBeanReference ref);1394825889;Resolve a reference to another bean in the factory.;private Object resolveReference(Object argName, RuntimeBeanReference ref) {_		try {_			String refName = ref.getBeanName()__			refName = String.valueOf(evaluate(refName))__			if (ref.isToParent()) {_				if (this.beanFactory.getParentBeanFactory() == null) {_					throw new BeanCreationException(_							this.beanDefinition.getResourceDescription(), this.beanName,_							"Can't resolve reference to bean '" + refName +_							"' in parent factory: no parent factory available")__				}_				return this.beanFactory.getParentBeanFactory().getBean(refName)__			}_			else {_				Object bean = this.beanFactory.getBean(refName)__				this.beanFactory.registerDependentBean(refName, this.beanName)__				return bean__			}_		}_		catch (BeansException ex) {_			throw new BeanCreationException(_					this.beanDefinition.getResourceDescription(), this.beanName,_					"Cannot resolve reference to bean '" + ref.getBeanName() + "' while setting " + argName, ex)__		}_	};resolve,a,reference,to,another,bean,in,the,factory;private,object,resolve,reference,object,arg,name,runtime,bean,reference,ref,try,string,ref,name,ref,get,bean,name,ref,name,string,value,of,evaluate,ref,name,if,ref,is,to,parent,if,this,bean,factory,get,parent,bean,factory,null,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,can,t,resolve,reference,to,bean,ref,name,in,parent,factory,no,parent,factory,available,return,this,bean,factory,get,parent,bean,factory,get,bean,ref,name,else,object,bean,this,bean,factory,get,bean,ref,name,this,bean,factory,register,dependent,bean,ref,name,this,bean,name,return,bean,catch,beans,exception,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,cannot,resolve,reference,to,bean,ref,get,bean,name,while,setting,arg,name,ex
BeanDefinitionValueResolver -> private Object resolveReference(Object argName, RuntimeBeanReference ref);1414738527;Resolve a reference to another bean in the factory.;private Object resolveReference(Object argName, RuntimeBeanReference ref) {_		try {_			String refName = ref.getBeanName()__			refName = String.valueOf(evaluate(refName))__			if (ref.isToParent()) {_				if (this.beanFactory.getParentBeanFactory() == null) {_					throw new BeanCreationException(_							this.beanDefinition.getResourceDescription(), this.beanName,_							"Can't resolve reference to bean '" + refName +_							"' in parent factory: no parent factory available")__				}_				return this.beanFactory.getParentBeanFactory().getBean(refName)__			}_			else {_				Object bean = this.beanFactory.getBean(refName)__				this.beanFactory.registerDependentBean(refName, this.beanName)__				return bean__			}_		}_		catch (BeansException ex) {_			throw new BeanCreationException(_					this.beanDefinition.getResourceDescription(), this.beanName,_					"Cannot resolve reference to bean '" + ref.getBeanName() + "' while setting " + argName, ex)__		}_	};resolve,a,reference,to,another,bean,in,the,factory;private,object,resolve,reference,object,arg,name,runtime,bean,reference,ref,try,string,ref,name,ref,get,bean,name,ref,name,string,value,of,evaluate,ref,name,if,ref,is,to,parent,if,this,bean,factory,get,parent,bean,factory,null,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,can,t,resolve,reference,to,bean,ref,name,in,parent,factory,no,parent,factory,available,return,this,bean,factory,get,parent,bean,factory,get,bean,ref,name,else,object,bean,this,bean,factory,get,bean,ref,name,this,bean,factory,register,dependent,bean,ref,name,this,bean,name,return,bean,catch,beans,exception,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,cannot,resolve,reference,to,bean,ref,get,bean,name,while,setting,arg,name,ex
BeanDefinitionValueResolver -> private Object resolveReference(Object argName, RuntimeBeanReference ref);1414774626;Resolve a reference to another bean in the factory.;private Object resolveReference(Object argName, RuntimeBeanReference ref) {_		try {_			String refName = ref.getBeanName()__			refName = String.valueOf(doEvaluate(refName))__			if (ref.isToParent()) {_				if (this.beanFactory.getParentBeanFactory() == null) {_					throw new BeanCreationException(_							this.beanDefinition.getResourceDescription(), this.beanName,_							"Can't resolve reference to bean '" + refName +_							"' in parent factory: no parent factory available")__				}_				return this.beanFactory.getParentBeanFactory().getBean(refName)__			}_			else {_				Object bean = this.beanFactory.getBean(refName)__				this.beanFactory.registerDependentBean(refName, this.beanName)__				return bean__			}_		}_		catch (BeansException ex) {_			throw new BeanCreationException(_					this.beanDefinition.getResourceDescription(), this.beanName,_					"Cannot resolve reference to bean '" + ref.getBeanName() + "' while setting " + argName, ex)__		}_	};resolve,a,reference,to,another,bean,in,the,factory;private,object,resolve,reference,object,arg,name,runtime,bean,reference,ref,try,string,ref,name,ref,get,bean,name,ref,name,string,value,of,do,evaluate,ref,name,if,ref,is,to,parent,if,this,bean,factory,get,parent,bean,factory,null,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,can,t,resolve,reference,to,bean,ref,name,in,parent,factory,no,parent,factory,available,return,this,bean,factory,get,parent,bean,factory,get,bean,ref,name,else,object,bean,this,bean,factory,get,bean,ref,name,this,bean,factory,register,dependent,bean,ref,name,this,bean,name,return,bean,catch,beans,exception,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,cannot,resolve,reference,to,bean,ref,get,bean,name,while,setting,arg,name,ex
BeanDefinitionValueResolver -> private Object resolveReference(Object argName, RuntimeBeanReference ref);1467730834;Resolve a reference to another bean in the factory.;private Object resolveReference(Object argName, RuntimeBeanReference ref) {_		try {_			String refName = ref.getBeanName()__			refName = String.valueOf(doEvaluate(refName))__			if (ref.isToParent()) {_				if (this.beanFactory.getParentBeanFactory() == null) {_					throw new BeanCreationException(_							this.beanDefinition.getResourceDescription(), this.beanName,_							"Can't resolve reference to bean '" + refName +_							"' in parent factory: no parent factory available")__				}_				return this.beanFactory.getParentBeanFactory().getBean(refName)__			}_			else {_				Object bean = this.beanFactory.getBean(refName)__				this.beanFactory.registerDependentBean(refName, this.beanName)__				return bean__			}_		}_		catch (BeansException ex) {_			throw new BeanCreationException(_					this.beanDefinition.getResourceDescription(), this.beanName,_					"Cannot resolve reference to bean '" + ref.getBeanName() + "' while setting " + argName, ex)__		}_	};resolve,a,reference,to,another,bean,in,the,factory;private,object,resolve,reference,object,arg,name,runtime,bean,reference,ref,try,string,ref,name,ref,get,bean,name,ref,name,string,value,of,do,evaluate,ref,name,if,ref,is,to,parent,if,this,bean,factory,get,parent,bean,factory,null,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,can,t,resolve,reference,to,bean,ref,name,in,parent,factory,no,parent,factory,available,return,this,bean,factory,get,parent,bean,factory,get,bean,ref,name,else,object,bean,this,bean,factory,get,bean,ref,name,this,bean,factory,register,dependent,bean,ref,name,this,bean,name,return,bean,catch,beans,exception,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,cannot,resolve,reference,to,bean,ref,get,bean,name,while,setting,arg,name,ex
BeanDefinitionValueResolver -> private Object resolveReference(Object argName, RuntimeBeanReference ref);1495868221;Resolve a reference to another bean in the factory.;private Object resolveReference(Object argName, RuntimeBeanReference ref) {_		try {_			String refName = ref.getBeanName()__			refName = String.valueOf(doEvaluate(refName))__			if (ref.isToParent()) {_				if (this.beanFactory.getParentBeanFactory() == null) {_					throw new BeanCreationException(_							this.beanDefinition.getResourceDescription(), this.beanName,_							"Can't resolve reference to bean '" + refName +_							"' in parent factory: no parent factory available")__				}_				return this.beanFactory.getParentBeanFactory().getBean(refName)__			}_			else {_				Object bean = this.beanFactory.getBean(refName)__				this.beanFactory.registerDependentBean(refName, this.beanName)__				return bean__			}_		}_		catch (BeansException ex) {_			throw new BeanCreationException(_					this.beanDefinition.getResourceDescription(), this.beanName,_					"Cannot resolve reference to bean '" + ref.getBeanName() + "' while setting " + argName, ex)__		}_	};resolve,a,reference,to,another,bean,in,the,factory;private,object,resolve,reference,object,arg,name,runtime,bean,reference,ref,try,string,ref,name,ref,get,bean,name,ref,name,string,value,of,do,evaluate,ref,name,if,ref,is,to,parent,if,this,bean,factory,get,parent,bean,factory,null,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,can,t,resolve,reference,to,bean,ref,name,in,parent,factory,no,parent,factory,available,return,this,bean,factory,get,parent,bean,factory,get,bean,ref,name,else,object,bean,this,bean,factory,get,bean,ref,name,this,bean,factory,register,dependent,bean,ref,name,this,bean,name,return,bean,catch,beans,exception,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,cannot,resolve,reference,to,bean,ref,get,bean,name,while,setting,arg,name,ex
BeanDefinitionValueResolver -> private Object resolveReference(Object argName, RuntimeBeanReference ref);1496837955;Resolve a reference to another bean in the factory.;private Object resolveReference(Object argName, RuntimeBeanReference ref) {_		try {_			String refName = ref.getBeanName()__			refName = String.valueOf(doEvaluate(refName))__			if (ref.isToParent()) {_				if (this.beanFactory.getParentBeanFactory() == null) {_					throw new BeanCreationException(_							this.beanDefinition.getResourceDescription(), this.beanName,_							"Can't resolve reference to bean '" + refName +_							"' in parent factory: no parent factory available")__				}_				return this.beanFactory.getParentBeanFactory().getBean(refName)__			}_			else {_				Object bean = this.beanFactory.getBean(refName)__				this.beanFactory.registerDependentBean(refName, this.beanName)__				return bean__			}_		}_		catch (BeansException ex) {_			throw new BeanCreationException(_					this.beanDefinition.getResourceDescription(), this.beanName,_					"Cannot resolve reference to bean '" + ref.getBeanName() + "' while setting " + argName, ex)__		}_	};resolve,a,reference,to,another,bean,in,the,factory;private,object,resolve,reference,object,arg,name,runtime,bean,reference,ref,try,string,ref,name,ref,get,bean,name,ref,name,string,value,of,do,evaluate,ref,name,if,ref,is,to,parent,if,this,bean,factory,get,parent,bean,factory,null,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,can,t,resolve,reference,to,bean,ref,name,in,parent,factory,no,parent,factory,available,return,this,bean,factory,get,parent,bean,factory,get,bean,ref,name,else,object,bean,this,bean,factory,get,bean,ref,name,this,bean,factory,register,dependent,bean,ref,name,this,bean,name,return,bean,catch,beans,exception,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,cannot,resolve,reference,to,bean,ref,get,bean,name,while,setting,arg,name,ex
BeanDefinitionValueResolver -> private Object resolveReference(Object argName, RuntimeBeanReference ref);1497250713;Resolve a reference to another bean in the factory.;private Object resolveReference(Object argName, RuntimeBeanReference ref) {_		try {_			String refName = ref.getBeanName()__			refName = String.valueOf(doEvaluate(refName))__			if (ref.isToParent()) {_				if (this.beanFactory.getParentBeanFactory() == null) {_					throw new BeanCreationException(_							this.beanDefinition.getResourceDescription(), this.beanName,_							"Can't resolve reference to bean '" + refName +_							"' in parent factory: no parent factory available")__				}_				return this.beanFactory.getParentBeanFactory().getBean(refName)__			}_			else {_				Object bean = this.beanFactory.getBean(refName)__				this.beanFactory.registerDependentBean(refName, this.beanName)__				return bean__			}_		}_		catch (BeansException ex) {_			throw new BeanCreationException(_					this.beanDefinition.getResourceDescription(), this.beanName,_					"Cannot resolve reference to bean '" + ref.getBeanName() + "' while setting " + argName, ex)__		}_	};resolve,a,reference,to,another,bean,in,the,factory;private,object,resolve,reference,object,arg,name,runtime,bean,reference,ref,try,string,ref,name,ref,get,bean,name,ref,name,string,value,of,do,evaluate,ref,name,if,ref,is,to,parent,if,this,bean,factory,get,parent,bean,factory,null,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,can,t,resolve,reference,to,bean,ref,name,in,parent,factory,no,parent,factory,available,return,this,bean,factory,get,parent,bean,factory,get,bean,ref,name,else,object,bean,this,bean,factory,get,bean,ref,name,this,bean,factory,register,dependent,bean,ref,name,this,bean,name,return,bean,catch,beans,exception,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,cannot,resolve,reference,to,bean,ref,get,bean,name,while,setting,arg,name,ex
BeanDefinitionValueResolver -> private Map resolveManagedMap(Object argName, Map<?, ?> mm);1328020251;For each element in the managed map, resolve reference if necessary.;private Map resolveManagedMap(Object argName, Map<?, ?> mm) {_		Map<Object, Object> resolved = new LinkedHashMap<Object, Object>(mm.size())__		for (Map.Entry entry : mm.entrySet()) {_			Object resolvedKey = resolveValueIfNecessary(argName, entry.getKey())__			Object resolvedValue = resolveValueIfNecessary(_					new KeyedArgName(argName, entry.getKey()), entry.getValue())__			resolved.put(resolvedKey, resolvedValue)__		}_		return resolved__	};for,each,element,in,the,managed,map,resolve,reference,if,necessary;private,map,resolve,managed,map,object,arg,name,map,mm,map,object,object,resolved,new,linked,hash,map,object,object,mm,size,for,map,entry,entry,mm,entry,set,object,resolved,key,resolve,value,if,necessary,arg,name,entry,get,key,object,resolved,value,resolve,value,if,necessary,new,keyed,arg,name,arg,name,entry,get,key,entry,get,value,resolved,put,resolved,key,resolved,value,return,resolved
BeanDefinitionValueResolver -> private Map resolveManagedMap(Object argName, Map<?, ?> mm);1347282854;For each element in the managed map, resolve reference if necessary.;private Map resolveManagedMap(Object argName, Map<?, ?> mm) {_		Map<Object, Object> resolved = new LinkedHashMap<Object, Object>(mm.size())__		for (Map.Entry entry : mm.entrySet()) {_			Object resolvedKey = resolveValueIfNecessary(argName, entry.getKey())__			Object resolvedValue = resolveValueIfNecessary(_					new KeyedArgName(argName, entry.getKey()), entry.getValue())__			resolved.put(resolvedKey, resolvedValue)__		}_		return resolved__	};for,each,element,in,the,managed,map,resolve,reference,if,necessary;private,map,resolve,managed,map,object,arg,name,map,mm,map,object,object,resolved,new,linked,hash,map,object,object,mm,size,for,map,entry,entry,mm,entry,set,object,resolved,key,resolve,value,if,necessary,arg,name,entry,get,key,object,resolved,value,resolve,value,if,necessary,new,keyed,arg,name,arg,name,entry,get,key,entry,get,value,resolved,put,resolved,key,resolved,value,return,resolved
BeanDefinitionValueResolver -> private Map resolveManagedMap(Object argName, Map<?, ?> mm);1356735495;For each element in the managed map, resolve reference if necessary.;private Map resolveManagedMap(Object argName, Map<?, ?> mm) {_		Map<Object, Object> resolved = new LinkedHashMap<Object, Object>(mm.size())__		for (Map.Entry entry : mm.entrySet()) {_			Object resolvedKey = resolveValueIfNecessary(argName, entry.getKey())__			Object resolvedValue = resolveValueIfNecessary(_					new KeyedArgName(argName, entry.getKey()), entry.getValue())__			resolved.put(resolvedKey, resolvedValue)__		}_		return resolved__	};for,each,element,in,the,managed,map,resolve,reference,if,necessary;private,map,resolve,managed,map,object,arg,name,map,mm,map,object,object,resolved,new,linked,hash,map,object,object,mm,size,for,map,entry,entry,mm,entry,set,object,resolved,key,resolve,value,if,necessary,arg,name,entry,get,key,object,resolved,value,resolve,value,if,necessary,new,keyed,arg,name,arg,name,entry,get,key,entry,get,value,resolved,put,resolved,key,resolved,value,return,resolved
BeanDefinitionValueResolver -> private Map resolveManagedMap(Object argName, Map<?, ?> mm);1382905576;For each element in the managed map, resolve reference if necessary.;private Map resolveManagedMap(Object argName, Map<?, ?> mm) {_		Map<Object, Object> resolved = new LinkedHashMap<Object, Object>(mm.size())__		for (Map.Entry entry : mm.entrySet()) {_			Object resolvedKey = resolveValueIfNecessary(argName, entry.getKey())__			Object resolvedValue = resolveValueIfNecessary(_					new KeyedArgName(argName, entry.getKey()), entry.getValue())__			resolved.put(resolvedKey, resolvedValue)__		}_		return resolved__	};for,each,element,in,the,managed,map,resolve,reference,if,necessary;private,map,resolve,managed,map,object,arg,name,map,mm,map,object,object,resolved,new,linked,hash,map,object,object,mm,size,for,map,entry,entry,mm,entry,set,object,resolved,key,resolve,value,if,necessary,arg,name,entry,get,key,object,resolved,value,resolve,value,if,necessary,new,keyed,arg,name,arg,name,entry,get,key,entry,get,value,resolved,put,resolved,key,resolved,value,return,resolved
BeanDefinitionValueResolver -> private Object doEvaluate(String value);1414774626;Evaluate the given String value as an expression, if necessary._@param value the original value (may be an expression)_@return the resolved value if necessary, or the original String value;private Object doEvaluate(String value) {_		return this.beanFactory.evaluateBeanDefinitionString(value, this.beanDefinition)__	};evaluate,the,given,string,value,as,an,expression,if,necessary,param,value,the,original,value,may,be,an,expression,return,the,resolved,value,if,necessary,or,the,original,string,value;private,object,do,evaluate,string,value,return,this,bean,factory,evaluate,bean,definition,string,value,this,bean,definition
BeanDefinitionValueResolver -> private Object doEvaluate(String value);1467730834;Evaluate the given String value as an expression, if necessary._@param value the original value (may be an expression)_@return the resolved value if necessary, or the original String value;private Object doEvaluate(String value) {_		return this.beanFactory.evaluateBeanDefinitionString(value, this.beanDefinition)__	};evaluate,the,given,string,value,as,an,expression,if,necessary,param,value,the,original,value,may,be,an,expression,return,the,resolved,value,if,necessary,or,the,original,string,value;private,object,do,evaluate,string,value,return,this,bean,factory,evaluate,bean,definition,string,value,this,bean,definition
BeanDefinitionValueResolver -> private Object doEvaluate(String value);1495868221;Evaluate the given String value as an expression, if necessary._@param value the original value (may be an expression)_@return the resolved value if necessary, or the original String value;private Object doEvaluate(String value) {_		return this.beanFactory.evaluateBeanDefinitionString(value, this.beanDefinition)__	};evaluate,the,given,string,value,as,an,expression,if,necessary,param,value,the,original,value,may,be,an,expression,return,the,resolved,value,if,necessary,or,the,original,string,value;private,object,do,evaluate,string,value,return,this,bean,factory,evaluate,bean,definition,string,value,this,bean,definition
BeanDefinitionValueResolver -> private Object resolveInnerBean(Object argName, String innerBeanName, BeanDefinition innerBd);1328020251;Resolve an inner bean definition._@param argName the name of the argument that the inner bean is defined for_@param innerBeanName the name of the inner bean_@param innerBd the bean definition for the inner bean_@return the resolved inner bean instance;private Object resolveInnerBean(Object argName, String innerBeanName, BeanDefinition innerBd) {_		RootBeanDefinition mbd = null__		try {_			mbd = this.beanFactory.getMergedBeanDefinition(innerBeanName, innerBd, this.beanDefinition)__			_			_			String actualInnerBeanName = innerBeanName__			if (mbd.isSingleton()) {_				actualInnerBeanName = adaptInnerBeanName(innerBeanName)__			}_			_			String[] dependsOn = mbd.getDependsOn()__			if (dependsOn != null) {_				for (String dependsOnBean : dependsOn) {_					this.beanFactory.getBean(dependsOnBean)__					this.beanFactory.registerDependentBean(dependsOnBean, actualInnerBeanName)__				}_			}_			Object innerBean = this.beanFactory.createBean(actualInnerBeanName, mbd, null)__			this.beanFactory.registerContainedBean(actualInnerBeanName, this.beanName)__			if (innerBean instanceof FactoryBean) {_				boolean synthetic = (mbd != null && mbd.isSynthetic())__				return this.beanFactory.getObjectFromFactoryBean((FactoryBean) innerBean, actualInnerBeanName, !synthetic)__			}_			else {_				return innerBean__			}_		}_		catch (BeansException ex) {_			throw new BeanCreationException(_					this.beanDefinition.getResourceDescription(), this.beanName,_					"Cannot create inner bean '" + innerBeanName + "' " +_					(mbd != null && mbd.getBeanClassName() != null ? "of type [" + mbd.getBeanClassName() + "] " : "") +_					"while setting " + argName, ex)__		}_	};resolve,an,inner,bean,definition,param,arg,name,the,name,of,the,argument,that,the,inner,bean,is,defined,for,param,inner,bean,name,the,name,of,the,inner,bean,param,inner,bd,the,bean,definition,for,the,inner,bean,return,the,resolved,inner,bean,instance;private,object,resolve,inner,bean,object,arg,name,string,inner,bean,name,bean,definition,inner,bd,root,bean,definition,mbd,null,try,mbd,this,bean,factory,get,merged,bean,definition,inner,bean,name,inner,bd,this,bean,definition,string,actual,inner,bean,name,inner,bean,name,if,mbd,is,singleton,actual,inner,bean,name,adapt,inner,bean,name,inner,bean,name,string,depends,on,mbd,get,depends,on,if,depends,on,null,for,string,depends,on,bean,depends,on,this,bean,factory,get,bean,depends,on,bean,this,bean,factory,register,dependent,bean,depends,on,bean,actual,inner,bean,name,object,inner,bean,this,bean,factory,create,bean,actual,inner,bean,name,mbd,null,this,bean,factory,register,contained,bean,actual,inner,bean,name,this,bean,name,if,inner,bean,instanceof,factory,bean,boolean,synthetic,mbd,null,mbd,is,synthetic,return,this,bean,factory,get,object,from,factory,bean,factory,bean,inner,bean,actual,inner,bean,name,synthetic,else,return,inner,bean,catch,beans,exception,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,cannot,create,inner,bean,inner,bean,name,mbd,null,mbd,get,bean,class,name,null,of,type,mbd,get,bean,class,name,while,setting,arg,name,ex
BeanDefinitionValueResolver -> private Object resolveInnerBean(Object argName, String innerBeanName, BeanDefinition innerBd);1347282854;Resolve an inner bean definition._@param argName the name of the argument that the inner bean is defined for_@param innerBeanName the name of the inner bean_@param innerBd the bean definition for the inner bean_@return the resolved inner bean instance;private Object resolveInnerBean(Object argName, String innerBeanName, BeanDefinition innerBd) {_		RootBeanDefinition mbd = null__		try {_			mbd = this.beanFactory.getMergedBeanDefinition(innerBeanName, innerBd, this.beanDefinition)__			_			_			String actualInnerBeanName = innerBeanName__			if (mbd.isSingleton()) {_				actualInnerBeanName = adaptInnerBeanName(innerBeanName)__			}_			_			String[] dependsOn = mbd.getDependsOn()__			if (dependsOn != null) {_				for (String dependsOnBean : dependsOn) {_					this.beanFactory.getBean(dependsOnBean)__					this.beanFactory.registerDependentBean(dependsOnBean, actualInnerBeanName)__				}_			}_			Object innerBean = this.beanFactory.createBean(actualInnerBeanName, mbd, null)__			this.beanFactory.registerContainedBean(actualInnerBeanName, this.beanName)__			if (innerBean instanceof FactoryBean) {_				boolean synthetic = (mbd != null && mbd.isSynthetic())__				return this.beanFactory.getObjectFromFactoryBean((FactoryBean) innerBean, actualInnerBeanName, !synthetic)__			}_			else {_				return innerBean__			}_		}_		catch (BeansException ex) {_			throw new BeanCreationException(_					this.beanDefinition.getResourceDescription(), this.beanName,_					"Cannot create inner bean '" + innerBeanName + "' " +_					(mbd != null && mbd.getBeanClassName() != null ? "of type [" + mbd.getBeanClassName() + "] " : "") +_					"while setting " + argName, ex)__		}_	};resolve,an,inner,bean,definition,param,arg,name,the,name,of,the,argument,that,the,inner,bean,is,defined,for,param,inner,bean,name,the,name,of,the,inner,bean,param,inner,bd,the,bean,definition,for,the,inner,bean,return,the,resolved,inner,bean,instance;private,object,resolve,inner,bean,object,arg,name,string,inner,bean,name,bean,definition,inner,bd,root,bean,definition,mbd,null,try,mbd,this,bean,factory,get,merged,bean,definition,inner,bean,name,inner,bd,this,bean,definition,string,actual,inner,bean,name,inner,bean,name,if,mbd,is,singleton,actual,inner,bean,name,adapt,inner,bean,name,inner,bean,name,string,depends,on,mbd,get,depends,on,if,depends,on,null,for,string,depends,on,bean,depends,on,this,bean,factory,get,bean,depends,on,bean,this,bean,factory,register,dependent,bean,depends,on,bean,actual,inner,bean,name,object,inner,bean,this,bean,factory,create,bean,actual,inner,bean,name,mbd,null,this,bean,factory,register,contained,bean,actual,inner,bean,name,this,bean,name,if,inner,bean,instanceof,factory,bean,boolean,synthetic,mbd,null,mbd,is,synthetic,return,this,bean,factory,get,object,from,factory,bean,factory,bean,inner,bean,actual,inner,bean,name,synthetic,else,return,inner,bean,catch,beans,exception,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,cannot,create,inner,bean,inner,bean,name,mbd,null,mbd,get,bean,class,name,null,of,type,mbd,get,bean,class,name,while,setting,arg,name,ex
BeanDefinitionValueResolver -> private Object resolveInnerBean(Object argName, String innerBeanName, BeanDefinition innerBd);1356735495;Resolve an inner bean definition._@param argName the name of the argument that the inner bean is defined for_@param innerBeanName the name of the inner bean_@param innerBd the bean definition for the inner bean_@return the resolved inner bean instance;private Object resolveInnerBean(Object argName, String innerBeanName, BeanDefinition innerBd) {_		RootBeanDefinition mbd = null__		try {_			mbd = this.beanFactory.getMergedBeanDefinition(innerBeanName, innerBd, this.beanDefinition)__			_			_			String actualInnerBeanName = innerBeanName__			if (mbd.isSingleton()) {_				actualInnerBeanName = adaptInnerBeanName(innerBeanName)__			}_			_			String[] dependsOn = mbd.getDependsOn()__			if (dependsOn != null) {_				for (String dependsOnBean : dependsOn) {_					this.beanFactory.getBean(dependsOnBean)__					this.beanFactory.registerDependentBean(dependsOnBean, actualInnerBeanName)__				}_			}_			Object innerBean = this.beanFactory.createBean(actualInnerBeanName, mbd, null)__			this.beanFactory.registerContainedBean(actualInnerBeanName, this.beanName)__			if (innerBean instanceof FactoryBean) {_				boolean synthetic = (mbd != null && mbd.isSynthetic())__				return this.beanFactory.getObjectFromFactoryBean((FactoryBean) innerBean, actualInnerBeanName, !synthetic)__			}_			else {_				return innerBean__			}_		}_		catch (BeansException ex) {_			throw new BeanCreationException(_					this.beanDefinition.getResourceDescription(), this.beanName,_					"Cannot create inner bean '" + innerBeanName + "' " +_					(mbd != null && mbd.getBeanClassName() != null ? "of type [" + mbd.getBeanClassName() + "] " : "") +_					"while setting " + argName, ex)__		}_	};resolve,an,inner,bean,definition,param,arg,name,the,name,of,the,argument,that,the,inner,bean,is,defined,for,param,inner,bean,name,the,name,of,the,inner,bean,param,inner,bd,the,bean,definition,for,the,inner,bean,return,the,resolved,inner,bean,instance;private,object,resolve,inner,bean,object,arg,name,string,inner,bean,name,bean,definition,inner,bd,root,bean,definition,mbd,null,try,mbd,this,bean,factory,get,merged,bean,definition,inner,bean,name,inner,bd,this,bean,definition,string,actual,inner,bean,name,inner,bean,name,if,mbd,is,singleton,actual,inner,bean,name,adapt,inner,bean,name,inner,bean,name,string,depends,on,mbd,get,depends,on,if,depends,on,null,for,string,depends,on,bean,depends,on,this,bean,factory,get,bean,depends,on,bean,this,bean,factory,register,dependent,bean,depends,on,bean,actual,inner,bean,name,object,inner,bean,this,bean,factory,create,bean,actual,inner,bean,name,mbd,null,this,bean,factory,register,contained,bean,actual,inner,bean,name,this,bean,name,if,inner,bean,instanceof,factory,bean,boolean,synthetic,mbd,null,mbd,is,synthetic,return,this,bean,factory,get,object,from,factory,bean,factory,bean,inner,bean,actual,inner,bean,name,synthetic,else,return,inner,bean,catch,beans,exception,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,cannot,create,inner,bean,inner,bean,name,mbd,null,mbd,get,bean,class,name,null,of,type,mbd,get,bean,class,name,while,setting,arg,name,ex
BeanDefinitionValueResolver -> private Object resolveInnerBean(Object argName, String innerBeanName, BeanDefinition innerBd);1382905576;Resolve an inner bean definition._@param argName the name of the argument that the inner bean is defined for_@param innerBeanName the name of the inner bean_@param innerBd the bean definition for the inner bean_@return the resolved inner bean instance;private Object resolveInnerBean(Object argName, String innerBeanName, BeanDefinition innerBd) {_		RootBeanDefinition mbd = null__		try {_			mbd = this.beanFactory.getMergedBeanDefinition(innerBeanName, innerBd, this.beanDefinition)__			_			_			String actualInnerBeanName = innerBeanName__			if (mbd.isSingleton()) {_				actualInnerBeanName = adaptInnerBeanName(innerBeanName)__			}_			_			String[] dependsOn = mbd.getDependsOn()__			if (dependsOn != null) {_				for (String dependsOnBean : dependsOn) {_					this.beanFactory.getBean(dependsOnBean)__					this.beanFactory.registerDependentBean(dependsOnBean, actualInnerBeanName)__				}_			}_			Object innerBean = this.beanFactory.createBean(actualInnerBeanName, mbd, null)__			this.beanFactory.registerContainedBean(actualInnerBeanName, this.beanName)__			if (innerBean instanceof FactoryBean) {_				boolean synthetic = mbd.isSynthetic()__				return this.beanFactory.getObjectFromFactoryBean((FactoryBean) innerBean, actualInnerBeanName, !synthetic)__			}_			else {_				return innerBean__			}_		}_		catch (BeansException ex) {_			throw new BeanCreationException(_					this.beanDefinition.getResourceDescription(), this.beanName,_					"Cannot create inner bean '" + innerBeanName + "' " +_					(mbd != null && mbd.getBeanClassName() != null ? "of type [" + mbd.getBeanClassName() + "] " : "") +_					"while setting " + argName, ex)__		}_	};resolve,an,inner,bean,definition,param,arg,name,the,name,of,the,argument,that,the,inner,bean,is,defined,for,param,inner,bean,name,the,name,of,the,inner,bean,param,inner,bd,the,bean,definition,for,the,inner,bean,return,the,resolved,inner,bean,instance;private,object,resolve,inner,bean,object,arg,name,string,inner,bean,name,bean,definition,inner,bd,root,bean,definition,mbd,null,try,mbd,this,bean,factory,get,merged,bean,definition,inner,bean,name,inner,bd,this,bean,definition,string,actual,inner,bean,name,inner,bean,name,if,mbd,is,singleton,actual,inner,bean,name,adapt,inner,bean,name,inner,bean,name,string,depends,on,mbd,get,depends,on,if,depends,on,null,for,string,depends,on,bean,depends,on,this,bean,factory,get,bean,depends,on,bean,this,bean,factory,register,dependent,bean,depends,on,bean,actual,inner,bean,name,object,inner,bean,this,bean,factory,create,bean,actual,inner,bean,name,mbd,null,this,bean,factory,register,contained,bean,actual,inner,bean,name,this,bean,name,if,inner,bean,instanceof,factory,bean,boolean,synthetic,mbd,is,synthetic,return,this,bean,factory,get,object,from,factory,bean,factory,bean,inner,bean,actual,inner,bean,name,synthetic,else,return,inner,bean,catch,beans,exception,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,cannot,create,inner,bean,inner,bean,name,mbd,null,mbd,get,bean,class,name,null,of,type,mbd,get,bean,class,name,while,setting,arg,name,ex
BeanDefinitionValueResolver -> private Object resolveInnerBean(Object argName, String innerBeanName, BeanDefinition innerBd);1385412762;Resolve an inner bean definition._@param argName the name of the argument that the inner bean is defined for_@param innerBeanName the name of the inner bean_@param innerBd the bean definition for the inner bean_@return the resolved inner bean instance;private Object resolveInnerBean(Object argName, String innerBeanName, BeanDefinition innerBd) {_		RootBeanDefinition mbd = null__		try {_			mbd = this.beanFactory.getMergedBeanDefinition(innerBeanName, innerBd, this.beanDefinition)__			_			_			String actualInnerBeanName = innerBeanName__			if (mbd.isSingleton()) {_				actualInnerBeanName = adaptInnerBeanName(innerBeanName)__			}_			_			String[] dependsOn = mbd.getDependsOn()__			if (dependsOn != null) {_				for (String dependsOnBean : dependsOn) {_					this.beanFactory.getBean(dependsOnBean)__					this.beanFactory.registerDependentBean(dependsOnBean, actualInnerBeanName)__				}_			}_			Object innerBean = this.beanFactory.createBean(actualInnerBeanName, mbd, null)__			this.beanFactory.registerContainedBean(actualInnerBeanName, this.beanName)__			if (innerBean instanceof FactoryBean) {_				boolean synthetic = mbd.isSynthetic()__				return this.beanFactory.getObjectFromFactoryBean((FactoryBean<?>) innerBean, actualInnerBeanName, !synthetic)__			}_			else {_				return innerBean__			}_		}_		catch (BeansException ex) {_			throw new BeanCreationException(_					this.beanDefinition.getResourceDescription(), this.beanName,_					"Cannot create inner bean '" + innerBeanName + "' " +_					(mbd != null && mbd.getBeanClassName() != null ? "of type [" + mbd.getBeanClassName() + "] " : "") +_					"while setting " + argName, ex)__		}_	};resolve,an,inner,bean,definition,param,arg,name,the,name,of,the,argument,that,the,inner,bean,is,defined,for,param,inner,bean,name,the,name,of,the,inner,bean,param,inner,bd,the,bean,definition,for,the,inner,bean,return,the,resolved,inner,bean,instance;private,object,resolve,inner,bean,object,arg,name,string,inner,bean,name,bean,definition,inner,bd,root,bean,definition,mbd,null,try,mbd,this,bean,factory,get,merged,bean,definition,inner,bean,name,inner,bd,this,bean,definition,string,actual,inner,bean,name,inner,bean,name,if,mbd,is,singleton,actual,inner,bean,name,adapt,inner,bean,name,inner,bean,name,string,depends,on,mbd,get,depends,on,if,depends,on,null,for,string,depends,on,bean,depends,on,this,bean,factory,get,bean,depends,on,bean,this,bean,factory,register,dependent,bean,depends,on,bean,actual,inner,bean,name,object,inner,bean,this,bean,factory,create,bean,actual,inner,bean,name,mbd,null,this,bean,factory,register,contained,bean,actual,inner,bean,name,this,bean,name,if,inner,bean,instanceof,factory,bean,boolean,synthetic,mbd,is,synthetic,return,this,bean,factory,get,object,from,factory,bean,factory,bean,inner,bean,actual,inner,bean,name,synthetic,else,return,inner,bean,catch,beans,exception,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,cannot,create,inner,bean,inner,bean,name,mbd,null,mbd,get,bean,class,name,null,of,type,mbd,get,bean,class,name,while,setting,arg,name,ex
BeanDefinitionValueResolver -> private Object resolveInnerBean(Object argName, String innerBeanName, BeanDefinition innerBd);1386621944;Resolve an inner bean definition._@param argName the name of the argument that the inner bean is defined for_@param innerBeanName the name of the inner bean_@param innerBd the bean definition for the inner bean_@return the resolved inner bean instance;private Object resolveInnerBean(Object argName, String innerBeanName, BeanDefinition innerBd) {_		RootBeanDefinition mbd = null__		try {_			mbd = this.beanFactory.getMergedBeanDefinition(innerBeanName, innerBd, this.beanDefinition)__			_			_			String actualInnerBeanName = adaptInnerBeanName(innerBeanName)__			this.beanFactory.registerContainedBean(actualInnerBeanName, this.beanName)__			_			String[] dependsOn = mbd.getDependsOn()__			if (dependsOn != null) {_				for (String dependsOnBean : dependsOn) {_					this.beanFactory.getBean(dependsOnBean)__					this.beanFactory.registerDependentBean(dependsOnBean, actualInnerBeanName)__				}_			}_			Object innerBean = this.beanFactory.createBean(actualInnerBeanName, mbd, null)__			if (innerBean instanceof FactoryBean) {_				boolean synthetic = mbd.isSynthetic()__				return this.beanFactory.getObjectFromFactoryBean((FactoryBean<?>) innerBean, actualInnerBeanName, !synthetic)__			}_			else {_				return innerBean__			}_		}_		catch (BeansException ex) {_			throw new BeanCreationException(_					this.beanDefinition.getResourceDescription(), this.beanName,_					"Cannot create inner bean '" + innerBeanName + "' " +_					(mbd != null && mbd.getBeanClassName() != null ? "of type [" + mbd.getBeanClassName() + "] " : "") +_					"while setting " + argName, ex)__		}_	};resolve,an,inner,bean,definition,param,arg,name,the,name,of,the,argument,that,the,inner,bean,is,defined,for,param,inner,bean,name,the,name,of,the,inner,bean,param,inner,bd,the,bean,definition,for,the,inner,bean,return,the,resolved,inner,bean,instance;private,object,resolve,inner,bean,object,arg,name,string,inner,bean,name,bean,definition,inner,bd,root,bean,definition,mbd,null,try,mbd,this,bean,factory,get,merged,bean,definition,inner,bean,name,inner,bd,this,bean,definition,string,actual,inner,bean,name,adapt,inner,bean,name,inner,bean,name,this,bean,factory,register,contained,bean,actual,inner,bean,name,this,bean,name,string,depends,on,mbd,get,depends,on,if,depends,on,null,for,string,depends,on,bean,depends,on,this,bean,factory,get,bean,depends,on,bean,this,bean,factory,register,dependent,bean,depends,on,bean,actual,inner,bean,name,object,inner,bean,this,bean,factory,create,bean,actual,inner,bean,name,mbd,null,if,inner,bean,instanceof,factory,bean,boolean,synthetic,mbd,is,synthetic,return,this,bean,factory,get,object,from,factory,bean,factory,bean,inner,bean,actual,inner,bean,name,synthetic,else,return,inner,bean,catch,beans,exception,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,cannot,create,inner,bean,inner,bean,name,mbd,null,mbd,get,bean,class,name,null,of,type,mbd,get,bean,class,name,while,setting,arg,name,ex
BeanDefinitionValueResolver -> private Object resolveInnerBean(Object argName, String innerBeanName, BeanDefinition innerBd);1394825889;Resolve an inner bean definition._@param argName the name of the argument that the inner bean is defined for_@param innerBeanName the name of the inner bean_@param innerBd the bean definition for the inner bean_@return the resolved inner bean instance;private Object resolveInnerBean(Object argName, String innerBeanName, BeanDefinition innerBd) {_		RootBeanDefinition mbd = null__		try {_			mbd = this.beanFactory.getMergedBeanDefinition(innerBeanName, innerBd, this.beanDefinition)__			_			_			String actualInnerBeanName = innerBeanName__			if (mbd.isSingleton()) {_				actualInnerBeanName = adaptInnerBeanName(innerBeanName)__			}_			this.beanFactory.registerContainedBean(actualInnerBeanName, this.beanName)__			_			String[] dependsOn = mbd.getDependsOn()__			if (dependsOn != null) {_				for (String dependsOnBean : dependsOn) {_					this.beanFactory.registerDependentBean(dependsOnBean, actualInnerBeanName)__					this.beanFactory.getBean(dependsOnBean)__				}_			}_			_			Object innerBean = this.beanFactory.createBean(actualInnerBeanName, mbd, null)__			if (innerBean instanceof FactoryBean) {_				boolean synthetic = mbd.isSynthetic()__				return this.beanFactory.getObjectFromFactoryBean(_						(FactoryBean<?>) innerBean, actualInnerBeanName, !synthetic)__			}_			else {_				return innerBean__			}_		}_		catch (BeansException ex) {_			throw new BeanCreationException(_					this.beanDefinition.getResourceDescription(), this.beanName,_					"Cannot create inner bean '" + innerBeanName + "' " +_					(mbd != null && mbd.getBeanClassName() != null ? "of type [" + mbd.getBeanClassName() + "] " : "") +_					"while setting " + argName, ex)__		}_	};resolve,an,inner,bean,definition,param,arg,name,the,name,of,the,argument,that,the,inner,bean,is,defined,for,param,inner,bean,name,the,name,of,the,inner,bean,param,inner,bd,the,bean,definition,for,the,inner,bean,return,the,resolved,inner,bean,instance;private,object,resolve,inner,bean,object,arg,name,string,inner,bean,name,bean,definition,inner,bd,root,bean,definition,mbd,null,try,mbd,this,bean,factory,get,merged,bean,definition,inner,bean,name,inner,bd,this,bean,definition,string,actual,inner,bean,name,inner,bean,name,if,mbd,is,singleton,actual,inner,bean,name,adapt,inner,bean,name,inner,bean,name,this,bean,factory,register,contained,bean,actual,inner,bean,name,this,bean,name,string,depends,on,mbd,get,depends,on,if,depends,on,null,for,string,depends,on,bean,depends,on,this,bean,factory,register,dependent,bean,depends,on,bean,actual,inner,bean,name,this,bean,factory,get,bean,depends,on,bean,object,inner,bean,this,bean,factory,create,bean,actual,inner,bean,name,mbd,null,if,inner,bean,instanceof,factory,bean,boolean,synthetic,mbd,is,synthetic,return,this,bean,factory,get,object,from,factory,bean,factory,bean,inner,bean,actual,inner,bean,name,synthetic,else,return,inner,bean,catch,beans,exception,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,cannot,create,inner,bean,inner,bean,name,mbd,null,mbd,get,bean,class,name,null,of,type,mbd,get,bean,class,name,while,setting,arg,name,ex
BeanDefinitionValueResolver -> private Object resolveInnerBean(Object argName, String innerBeanName, BeanDefinition innerBd);1414738527;Resolve an inner bean definition._@param argName the name of the argument that the inner bean is defined for_@param innerBeanName the name of the inner bean_@param innerBd the bean definition for the inner bean_@return the resolved inner bean instance;private Object resolveInnerBean(Object argName, String innerBeanName, BeanDefinition innerBd) {_		RootBeanDefinition mbd = null__		try {_			mbd = this.beanFactory.getMergedBeanDefinition(innerBeanName, innerBd, this.beanDefinition)__			_			_			String actualInnerBeanName = innerBeanName__			if (mbd.isSingleton()) {_				actualInnerBeanName = adaptInnerBeanName(innerBeanName)__			}_			this.beanFactory.registerContainedBean(actualInnerBeanName, this.beanName)__			_			String[] dependsOn = mbd.getDependsOn()__			if (dependsOn != null) {_				for (String dependsOnBean : dependsOn) {_					this.beanFactory.registerDependentBean(dependsOnBean, actualInnerBeanName)__					this.beanFactory.getBean(dependsOnBean)__				}_			}_			_			Object innerBean = this.beanFactory.createBean(actualInnerBeanName, mbd, null)__			if (innerBean instanceof FactoryBean) {_				boolean synthetic = mbd.isSynthetic()__				return this.beanFactory.getObjectFromFactoryBean(_						(FactoryBean<?>) innerBean, actualInnerBeanName, !synthetic)__			}_			else {_				return innerBean__			}_		}_		catch (BeansException ex) {_			throw new BeanCreationException(_					this.beanDefinition.getResourceDescription(), this.beanName,_					"Cannot create inner bean '" + innerBeanName + "' " +_					(mbd != null && mbd.getBeanClassName() != null ? "of type [" + mbd.getBeanClassName() + "] " : "") +_					"while setting " + argName, ex)__		}_	};resolve,an,inner,bean,definition,param,arg,name,the,name,of,the,argument,that,the,inner,bean,is,defined,for,param,inner,bean,name,the,name,of,the,inner,bean,param,inner,bd,the,bean,definition,for,the,inner,bean,return,the,resolved,inner,bean,instance;private,object,resolve,inner,bean,object,arg,name,string,inner,bean,name,bean,definition,inner,bd,root,bean,definition,mbd,null,try,mbd,this,bean,factory,get,merged,bean,definition,inner,bean,name,inner,bd,this,bean,definition,string,actual,inner,bean,name,inner,bean,name,if,mbd,is,singleton,actual,inner,bean,name,adapt,inner,bean,name,inner,bean,name,this,bean,factory,register,contained,bean,actual,inner,bean,name,this,bean,name,string,depends,on,mbd,get,depends,on,if,depends,on,null,for,string,depends,on,bean,depends,on,this,bean,factory,register,dependent,bean,depends,on,bean,actual,inner,bean,name,this,bean,factory,get,bean,depends,on,bean,object,inner,bean,this,bean,factory,create,bean,actual,inner,bean,name,mbd,null,if,inner,bean,instanceof,factory,bean,boolean,synthetic,mbd,is,synthetic,return,this,bean,factory,get,object,from,factory,bean,factory,bean,inner,bean,actual,inner,bean,name,synthetic,else,return,inner,bean,catch,beans,exception,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,cannot,create,inner,bean,inner,bean,name,mbd,null,mbd,get,bean,class,name,null,of,type,mbd,get,bean,class,name,while,setting,arg,name,ex
BeanDefinitionValueResolver -> private Object resolveInnerBean(Object argName, String innerBeanName, BeanDefinition innerBd);1414774626;Resolve an inner bean definition._@param argName the name of the argument that the inner bean is defined for_@param innerBeanName the name of the inner bean_@param innerBd the bean definition for the inner bean_@return the resolved inner bean instance;private Object resolveInnerBean(Object argName, String innerBeanName, BeanDefinition innerBd) {_		RootBeanDefinition mbd = null__		try {_			mbd = this.beanFactory.getMergedBeanDefinition(innerBeanName, innerBd, this.beanDefinition)__			_			_			String actualInnerBeanName = innerBeanName__			if (mbd.isSingleton()) {_				actualInnerBeanName = adaptInnerBeanName(innerBeanName)__			}_			this.beanFactory.registerContainedBean(actualInnerBeanName, this.beanName)__			_			String[] dependsOn = mbd.getDependsOn()__			if (dependsOn != null) {_				for (String dependsOnBean : dependsOn) {_					this.beanFactory.registerDependentBean(dependsOnBean, actualInnerBeanName)__					this.beanFactory.getBean(dependsOnBean)__				}_			}_			_			Object innerBean = this.beanFactory.createBean(actualInnerBeanName, mbd, null)__			if (innerBean instanceof FactoryBean) {_				boolean synthetic = mbd.isSynthetic()__				return this.beanFactory.getObjectFromFactoryBean(_						(FactoryBean<?>) innerBean, actualInnerBeanName, !synthetic)__			}_			else {_				return innerBean__			}_		}_		catch (BeansException ex) {_			throw new BeanCreationException(_					this.beanDefinition.getResourceDescription(), this.beanName,_					"Cannot create inner bean '" + innerBeanName + "' " +_					(mbd != null && mbd.getBeanClassName() != null ? "of type [" + mbd.getBeanClassName() + "] " : "") +_					"while setting " + argName, ex)__		}_	};resolve,an,inner,bean,definition,param,arg,name,the,name,of,the,argument,that,the,inner,bean,is,defined,for,param,inner,bean,name,the,name,of,the,inner,bean,param,inner,bd,the,bean,definition,for,the,inner,bean,return,the,resolved,inner,bean,instance;private,object,resolve,inner,bean,object,arg,name,string,inner,bean,name,bean,definition,inner,bd,root,bean,definition,mbd,null,try,mbd,this,bean,factory,get,merged,bean,definition,inner,bean,name,inner,bd,this,bean,definition,string,actual,inner,bean,name,inner,bean,name,if,mbd,is,singleton,actual,inner,bean,name,adapt,inner,bean,name,inner,bean,name,this,bean,factory,register,contained,bean,actual,inner,bean,name,this,bean,name,string,depends,on,mbd,get,depends,on,if,depends,on,null,for,string,depends,on,bean,depends,on,this,bean,factory,register,dependent,bean,depends,on,bean,actual,inner,bean,name,this,bean,factory,get,bean,depends,on,bean,object,inner,bean,this,bean,factory,create,bean,actual,inner,bean,name,mbd,null,if,inner,bean,instanceof,factory,bean,boolean,synthetic,mbd,is,synthetic,return,this,bean,factory,get,object,from,factory,bean,factory,bean,inner,bean,actual,inner,bean,name,synthetic,else,return,inner,bean,catch,beans,exception,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,cannot,create,inner,bean,inner,bean,name,mbd,null,mbd,get,bean,class,name,null,of,type,mbd,get,bean,class,name,while,setting,arg,name,ex
BeanDefinitionValueResolver -> private Object resolveInnerBean(Object argName, String innerBeanName, BeanDefinition innerBd);1467730834;Resolve an inner bean definition._@param argName the name of the argument that the inner bean is defined for_@param innerBeanName the name of the inner bean_@param innerBd the bean definition for the inner bean_@return the resolved inner bean instance;private Object resolveInnerBean(Object argName, String innerBeanName, BeanDefinition innerBd) {_		RootBeanDefinition mbd = null__		try {_			mbd = this.beanFactory.getMergedBeanDefinition(innerBeanName, innerBd, this.beanDefinition)__			_			_			String actualInnerBeanName = innerBeanName__			if (mbd.isSingleton()) {_				actualInnerBeanName = adaptInnerBeanName(innerBeanName)__			}_			this.beanFactory.registerContainedBean(actualInnerBeanName, this.beanName)__			_			String[] dependsOn = mbd.getDependsOn()__			if (dependsOn != null) {_				for (String dependsOnBean : dependsOn) {_					this.beanFactory.registerDependentBean(dependsOnBean, actualInnerBeanName)__					this.beanFactory.getBean(dependsOnBean)__				}_			}_			_			Object innerBean = this.beanFactory.createBean(actualInnerBeanName, mbd, null)__			if (innerBean instanceof FactoryBean) {_				boolean synthetic = mbd.isSynthetic()__				return this.beanFactory.getObjectFromFactoryBean(_						(FactoryBean<?>) innerBean, actualInnerBeanName, !synthetic)__			}_			else {_				return innerBean__			}_		}_		catch (BeansException ex) {_			throw new BeanCreationException(_					this.beanDefinition.getResourceDescription(), this.beanName,_					"Cannot create inner bean '" + innerBeanName + "' " +_					(mbd != null && mbd.getBeanClassName() != null ? "of type [" + mbd.getBeanClassName() + "] " : "") +_					"while setting " + argName, ex)__		}_	};resolve,an,inner,bean,definition,param,arg,name,the,name,of,the,argument,that,the,inner,bean,is,defined,for,param,inner,bean,name,the,name,of,the,inner,bean,param,inner,bd,the,bean,definition,for,the,inner,bean,return,the,resolved,inner,bean,instance;private,object,resolve,inner,bean,object,arg,name,string,inner,bean,name,bean,definition,inner,bd,root,bean,definition,mbd,null,try,mbd,this,bean,factory,get,merged,bean,definition,inner,bean,name,inner,bd,this,bean,definition,string,actual,inner,bean,name,inner,bean,name,if,mbd,is,singleton,actual,inner,bean,name,adapt,inner,bean,name,inner,bean,name,this,bean,factory,register,contained,bean,actual,inner,bean,name,this,bean,name,string,depends,on,mbd,get,depends,on,if,depends,on,null,for,string,depends,on,bean,depends,on,this,bean,factory,register,dependent,bean,depends,on,bean,actual,inner,bean,name,this,bean,factory,get,bean,depends,on,bean,object,inner,bean,this,bean,factory,create,bean,actual,inner,bean,name,mbd,null,if,inner,bean,instanceof,factory,bean,boolean,synthetic,mbd,is,synthetic,return,this,bean,factory,get,object,from,factory,bean,factory,bean,inner,bean,actual,inner,bean,name,synthetic,else,return,inner,bean,catch,beans,exception,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,cannot,create,inner,bean,inner,bean,name,mbd,null,mbd,get,bean,class,name,null,of,type,mbd,get,bean,class,name,while,setting,arg,name,ex
BeanDefinitionValueResolver -> private Object resolveInnerBean(Object argName, String innerBeanName, BeanDefinition innerBd);1495868221;Resolve an inner bean definition._@param argName the name of the argument that the inner bean is defined for_@param innerBeanName the name of the inner bean_@param innerBd the bean definition for the inner bean_@return the resolved inner bean instance;private Object resolveInnerBean(Object argName, String innerBeanName, BeanDefinition innerBd) {_		RootBeanDefinition mbd = null__		try {_			mbd = this.beanFactory.getMergedBeanDefinition(innerBeanName, innerBd, this.beanDefinition)__			_			_			String actualInnerBeanName = innerBeanName__			if (mbd.isSingleton()) {_				actualInnerBeanName = adaptInnerBeanName(innerBeanName)__			}_			this.beanFactory.registerContainedBean(actualInnerBeanName, this.beanName)__			_			String[] dependsOn = mbd.getDependsOn()__			if (dependsOn != null) {_				for (String dependsOnBean : dependsOn) {_					this.beanFactory.registerDependentBean(dependsOnBean, actualInnerBeanName)__					this.beanFactory.getBean(dependsOnBean)__				}_			}_			_			Object innerBean = this.beanFactory.createBean(actualInnerBeanName, mbd, null)__			if (innerBean instanceof FactoryBean) {_				boolean synthetic = mbd.isSynthetic()__				return this.beanFactory.getObjectFromFactoryBean(_						(FactoryBean<?>) innerBean, actualInnerBeanName, !synthetic)__			}_			else {_				return innerBean__			}_		}_		catch (BeansException ex) {_			throw new BeanCreationException(_					this.beanDefinition.getResourceDescription(), this.beanName,_					"Cannot create inner bean '" + innerBeanName + "' " +_					(mbd != null && mbd.getBeanClassName() != null ? "of type [" + mbd.getBeanClassName() + "] " : "") +_					"while setting " + argName, ex)__		}_	};resolve,an,inner,bean,definition,param,arg,name,the,name,of,the,argument,that,the,inner,bean,is,defined,for,param,inner,bean,name,the,name,of,the,inner,bean,param,inner,bd,the,bean,definition,for,the,inner,bean,return,the,resolved,inner,bean,instance;private,object,resolve,inner,bean,object,arg,name,string,inner,bean,name,bean,definition,inner,bd,root,bean,definition,mbd,null,try,mbd,this,bean,factory,get,merged,bean,definition,inner,bean,name,inner,bd,this,bean,definition,string,actual,inner,bean,name,inner,bean,name,if,mbd,is,singleton,actual,inner,bean,name,adapt,inner,bean,name,inner,bean,name,this,bean,factory,register,contained,bean,actual,inner,bean,name,this,bean,name,string,depends,on,mbd,get,depends,on,if,depends,on,null,for,string,depends,on,bean,depends,on,this,bean,factory,register,dependent,bean,depends,on,bean,actual,inner,bean,name,this,bean,factory,get,bean,depends,on,bean,object,inner,bean,this,bean,factory,create,bean,actual,inner,bean,name,mbd,null,if,inner,bean,instanceof,factory,bean,boolean,synthetic,mbd,is,synthetic,return,this,bean,factory,get,object,from,factory,bean,factory,bean,inner,bean,actual,inner,bean,name,synthetic,else,return,inner,bean,catch,beans,exception,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,cannot,create,inner,bean,inner,bean,name,mbd,null,mbd,get,bean,class,name,null,of,type,mbd,get,bean,class,name,while,setting,arg,name,ex
BeanDefinitionValueResolver -> @Nullable 	private Object doEvaluate(@Nullable String value);1496837955;Evaluate the given String value as an expression, if necessary._@param value the original value (may be an expression)_@return the resolved value if necessary, or the original String value;@Nullable_	private Object doEvaluate(@Nullable String value) {_		return this.beanFactory.evaluateBeanDefinitionString(value, this.beanDefinition)__	};evaluate,the,given,string,value,as,an,expression,if,necessary,param,value,the,original,value,may,be,an,expression,return,the,resolved,value,if,necessary,or,the,original,string,value;nullable,private,object,do,evaluate,nullable,string,value,return,this,bean,factory,evaluate,bean,definition,string,value,this,bean,definition
BeanDefinitionValueResolver -> @Nullable 	private Object doEvaluate(@Nullable String value);1497250713;Evaluate the given String value as an expression, if necessary._@param value the original value (may be an expression)_@return the resolved value if necessary, or the original String value;@Nullable_	private Object doEvaluate(@Nullable String value) {_		return this.beanFactory.evaluateBeanDefinitionString(value, this.beanDefinition)__	};evaluate,the,given,string,value,as,an,expression,if,necessary,param,value,the,original,value,may,be,an,expression,return,the,resolved,value,if,necessary,or,the,original,string,value;nullable,private,object,do,evaluate,nullable,string,value,return,this,bean,factory,evaluate,bean,definition,string,value,this,bean,definition
BeanDefinitionValueResolver -> @Nullable 	private Object doEvaluate(@Nullable String value);1503007895;Evaluate the given String value as an expression, if necessary._@param value the original value (may be an expression)_@return the resolved value if necessary, or the original String value;@Nullable_	private Object doEvaluate(@Nullable String value) {_		return this.beanFactory.evaluateBeanDefinitionString(value, this.beanDefinition)__	};evaluate,the,given,string,value,as,an,expression,if,necessary,param,value,the,original,value,may,be,an,expression,return,the,resolved,value,if,necessary,or,the,original,string,value;nullable,private,object,do,evaluate,nullable,string,value,return,this,bean,factory,evaluate,bean,definition,string,value,this,bean,definition
BeanDefinitionValueResolver -> @Nullable 	private Object doEvaluate(@Nullable String value);1522103912;Evaluate the given String value as an expression, if necessary._@param value the original value (may be an expression)_@return the resolved value if necessary, or the original String value;@Nullable_	private Object doEvaluate(@Nullable String value) {_		return this.beanFactory.evaluateBeanDefinitionString(value, this.beanDefinition)__	};evaluate,the,given,string,value,as,an,expression,if,necessary,param,value,the,original,value,may,be,an,expression,return,the,resolved,value,if,necessary,or,the,original,string,value;nullable,private,object,do,evaluate,nullable,string,value,return,this,bean,factory,evaluate,bean,definition,string,value,this,bean,definition
BeanDefinitionValueResolver -> private Object resolveManagedArray(Object argName, List<?> ml, Class elementType);1328020251;For each element in the managed array, resolve reference if necessary.;private Object resolveManagedArray(Object argName, List<?> ml, Class elementType) {_		Object resolved = Array.newInstance(elementType, ml.size())__		for (int i = 0_ i < ml.size()_ i++) {_			Array.set(resolved, i,_			    resolveValueIfNecessary(new KeyedArgName(argName, i), ml.get(i)))__		}_		return resolved__	};for,each,element,in,the,managed,array,resolve,reference,if,necessary;private,object,resolve,managed,array,object,arg,name,list,ml,class,element,type,object,resolved,array,new,instance,element,type,ml,size,for,int,i,0,i,ml,size,i,array,set,resolved,i,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,ml,get,i,return,resolved
BeanDefinitionValueResolver -> private Object resolveManagedArray(Object argName, List<?> ml, Class elementType);1347282854;For each element in the managed array, resolve reference if necessary.;private Object resolveManagedArray(Object argName, List<?> ml, Class elementType) {_		Object resolved = Array.newInstance(elementType, ml.size())__		for (int i = 0_ i < ml.size()_ i++) {_			Array.set(resolved, i,_			    resolveValueIfNecessary(new KeyedArgName(argName, i), ml.get(i)))__		}_		return resolved__	};for,each,element,in,the,managed,array,resolve,reference,if,necessary;private,object,resolve,managed,array,object,arg,name,list,ml,class,element,type,object,resolved,array,new,instance,element,type,ml,size,for,int,i,0,i,ml,size,i,array,set,resolved,i,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,ml,get,i,return,resolved
BeanDefinitionValueResolver -> private Object resolveManagedArray(Object argName, List<?> ml, Class elementType);1356735495;For each element in the managed array, resolve reference if necessary.;private Object resolveManagedArray(Object argName, List<?> ml, Class elementType) {_		Object resolved = Array.newInstance(elementType, ml.size())__		for (int i = 0_ i < ml.size()_ i++) {_			Array.set(resolved, i,_					resolveValueIfNecessary(new KeyedArgName(argName, i), ml.get(i)))__		}_		return resolved__	};for,each,element,in,the,managed,array,resolve,reference,if,necessary;private,object,resolve,managed,array,object,arg,name,list,ml,class,element,type,object,resolved,array,new,instance,element,type,ml,size,for,int,i,0,i,ml,size,i,array,set,resolved,i,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,ml,get,i,return,resolved
BeanDefinitionValueResolver -> private Set<?> resolveManagedSet(Object argName, Set<?> ms);1385412762;For each element in the managed set, resolve reference if necessary.;private Set<?> resolveManagedSet(Object argName, Set<?> ms) {_		Set<Object> resolved = new LinkedHashSet<Object>(ms.size())__		int i = 0__		for (Object m : ms) {_			resolved.add(resolveValueIfNecessary(new KeyedArgName(argName, i), m))__			i++__		}_		return resolved__	};for,each,element,in,the,managed,set,resolve,reference,if,necessary;private,set,resolve,managed,set,object,arg,name,set,ms,set,object,resolved,new,linked,hash,set,object,ms,size,int,i,0,for,object,m,ms,resolved,add,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,m,i,return,resolved
BeanDefinitionValueResolver -> private Set<?> resolveManagedSet(Object argName, Set<?> ms);1386621944;For each element in the managed set, resolve reference if necessary.;private Set<?> resolveManagedSet(Object argName, Set<?> ms) {_		Set<Object> resolved = new LinkedHashSet<Object>(ms.size())__		int i = 0__		for (Object m : ms) {_			resolved.add(resolveValueIfNecessary(new KeyedArgName(argName, i), m))__			i++__		}_		return resolved__	};for,each,element,in,the,managed,set,resolve,reference,if,necessary;private,set,resolve,managed,set,object,arg,name,set,ms,set,object,resolved,new,linked,hash,set,object,ms,size,int,i,0,for,object,m,ms,resolved,add,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,m,i,return,resolved
BeanDefinitionValueResolver -> private Set<?> resolveManagedSet(Object argName, Set<?> ms);1394825889;For each element in the managed set, resolve reference if necessary.;private Set<?> resolveManagedSet(Object argName, Set<?> ms) {_		Set<Object> resolved = new LinkedHashSet<Object>(ms.size())__		int i = 0__		for (Object m : ms) {_			resolved.add(resolveValueIfNecessary(new KeyedArgName(argName, i), m))__			i++__		}_		return resolved__	};for,each,element,in,the,managed,set,resolve,reference,if,necessary;private,set,resolve,managed,set,object,arg,name,set,ms,set,object,resolved,new,linked,hash,set,object,ms,size,int,i,0,for,object,m,ms,resolved,add,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,m,i,return,resolved
BeanDefinitionValueResolver -> private Set<?> resolveManagedSet(Object argName, Set<?> ms);1414738527;For each element in the managed set, resolve reference if necessary.;private Set<?> resolveManagedSet(Object argName, Set<?> ms) {_		Set<Object> resolved = new LinkedHashSet<Object>(ms.size())__		int i = 0__		for (Object m : ms) {_			resolved.add(resolveValueIfNecessary(new KeyedArgName(argName, i), m))__			i++__		}_		return resolved__	};for,each,element,in,the,managed,set,resolve,reference,if,necessary;private,set,resolve,managed,set,object,arg,name,set,ms,set,object,resolved,new,linked,hash,set,object,ms,size,int,i,0,for,object,m,ms,resolved,add,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,m,i,return,resolved
BeanDefinitionValueResolver -> private Set<?> resolveManagedSet(Object argName, Set<?> ms);1414774626;For each element in the managed set, resolve reference if necessary.;private Set<?> resolveManagedSet(Object argName, Set<?> ms) {_		Set<Object> resolved = new LinkedHashSet<Object>(ms.size())__		int i = 0__		for (Object m : ms) {_			resolved.add(resolveValueIfNecessary(new KeyedArgName(argName, i), m))__			i++__		}_		return resolved__	};for,each,element,in,the,managed,set,resolve,reference,if,necessary;private,set,resolve,managed,set,object,arg,name,set,ms,set,object,resolved,new,linked,hash,set,object,ms,size,int,i,0,for,object,m,ms,resolved,add,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,m,i,return,resolved
BeanDefinitionValueResolver -> private Set<?> resolveManagedSet(Object argName, Set<?> ms);1467730834;For each element in the managed set, resolve reference if necessary.;private Set<?> resolveManagedSet(Object argName, Set<?> ms) {_		Set<Object> resolved = new LinkedHashSet<>(ms.size())__		int i = 0__		for (Object m : ms) {_			resolved.add(resolveValueIfNecessary(new KeyedArgName(argName, i), m))__			i++__		}_		return resolved__	};for,each,element,in,the,managed,set,resolve,reference,if,necessary;private,set,resolve,managed,set,object,arg,name,set,ms,set,object,resolved,new,linked,hash,set,ms,size,int,i,0,for,object,m,ms,resolved,add,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,m,i,return,resolved
BeanDefinitionValueResolver -> private Set<?> resolveManagedSet(Object argName, Set<?> ms);1495868221;For each element in the managed set, resolve reference if necessary.;private Set<?> resolveManagedSet(Object argName, Set<?> ms) {_		Set<Object> resolved = new LinkedHashSet<>(ms.size())__		int i = 0__		for (Object m : ms) {_			resolved.add(resolveValueIfNecessary(new KeyedArgName(argName, i), m))__			i++__		}_		return resolved__	};for,each,element,in,the,managed,set,resolve,reference,if,necessary;private,set,resolve,managed,set,object,arg,name,set,ms,set,object,resolved,new,linked,hash,set,ms,size,int,i,0,for,object,m,ms,resolved,add,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,m,i,return,resolved
BeanDefinitionValueResolver -> private Set<?> resolveManagedSet(Object argName, Set<?> ms);1496837955;For each element in the managed set, resolve reference if necessary.;private Set<?> resolveManagedSet(Object argName, Set<?> ms) {_		Set<Object> resolved = new LinkedHashSet<>(ms.size())__		int i = 0__		for (Object m : ms) {_			resolved.add(resolveValueIfNecessary(new KeyedArgName(argName, i), m))__			i++__		}_		return resolved__	};for,each,element,in,the,managed,set,resolve,reference,if,necessary;private,set,resolve,managed,set,object,arg,name,set,ms,set,object,resolved,new,linked,hash,set,ms,size,int,i,0,for,object,m,ms,resolved,add,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,m,i,return,resolved
BeanDefinitionValueResolver -> private Set<?> resolveManagedSet(Object argName, Set<?> ms);1497250713;For each element in the managed set, resolve reference if necessary.;private Set<?> resolveManagedSet(Object argName, Set<?> ms) {_		Set<Object> resolved = new LinkedHashSet<>(ms.size())__		int i = 0__		for (Object m : ms) {_			resolved.add(resolveValueIfNecessary(new KeyedArgName(argName, i), m))__			i++__		}_		return resolved__	};for,each,element,in,the,managed,set,resolve,reference,if,necessary;private,set,resolve,managed,set,object,arg,name,set,ms,set,object,resolved,new,linked,hash,set,ms,size,int,i,0,for,object,m,ms,resolved,add,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,m,i,return,resolved
BeanDefinitionValueResolver -> private Set<?> resolveManagedSet(Object argName, Set<?> ms);1503007895;For each element in the managed set, resolve reference if necessary.;private Set<?> resolveManagedSet(Object argName, Set<?> ms) {_		Set<Object> resolved = new LinkedHashSet<>(ms.size())__		int i = 0__		for (Object m : ms) {_			resolved.add(resolveValueIfNecessary(new KeyedArgName(argName, i), m))__			i++__		}_		return resolved__	};for,each,element,in,the,managed,set,resolve,reference,if,necessary;private,set,resolve,managed,set,object,arg,name,set,ms,set,object,resolved,new,linked,hash,set,ms,size,int,i,0,for,object,m,ms,resolved,add,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,m,i,return,resolved
BeanDefinitionValueResolver -> private Set<?> resolveManagedSet(Object argName, Set<?> ms);1522103912;For each element in the managed set, resolve reference if necessary.;private Set<?> resolveManagedSet(Object argName, Set<?> ms) {_		Set<Object> resolved = new LinkedHashSet<>(ms.size())__		int i = 0__		for (Object m : ms) {_			resolved.add(resolveValueIfNecessary(new KeyedArgName(argName, i), m))__			i++__		}_		return resolved__	};for,each,element,in,the,managed,set,resolve,reference,if,necessary;private,set,resolve,managed,set,object,arg,name,set,ms,set,object,resolved,new,linked,hash,set,ms,size,int,i,0,for,object,m,ms,resolved,add,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,m,i,return,resolved
BeanDefinitionValueResolver -> private String adaptInnerBeanName(String innerBeanName);1328020251;Checks the given bean name whether it is unique. If not already unique,_a counter is added, increasing the counter until the name is unique._@param innerBeanName the original name for the inner bean_@return the adapted name for the inner bean;private String adaptInnerBeanName(String innerBeanName) {_		String actualInnerBeanName = innerBeanName__		int counter = 0__		while (this.beanFactory.isBeanNameInUse(actualInnerBeanName)) {_			counter++__			actualInnerBeanName = innerBeanName + BeanFactoryUtils.GENERATED_BEAN_NAME_SEPARATOR + counter__		}_		return actualInnerBeanName__	};checks,the,given,bean,name,whether,it,is,unique,if,not,already,unique,a,counter,is,added,increasing,the,counter,until,the,name,is,unique,param,inner,bean,name,the,original,name,for,the,inner,bean,return,the,adapted,name,for,the,inner,bean;private,string,adapt,inner,bean,name,string,inner,bean,name,string,actual,inner,bean,name,inner,bean,name,int,counter,0,while,this,bean,factory,is,bean,name,in,use,actual,inner,bean,name,counter,actual,inner,bean,name,inner,bean,name,bean,factory,utils,counter,return,actual,inner,bean,name
BeanDefinitionValueResolver -> private String adaptInnerBeanName(String innerBeanName);1347282854;Checks the given bean name whether it is unique. If not already unique,_a counter is added, increasing the counter until the name is unique._@param innerBeanName the original name for the inner bean_@return the adapted name for the inner bean;private String adaptInnerBeanName(String innerBeanName) {_		String actualInnerBeanName = innerBeanName__		int counter = 0__		while (this.beanFactory.isBeanNameInUse(actualInnerBeanName)) {_			counter++__			actualInnerBeanName = innerBeanName + BeanFactoryUtils.GENERATED_BEAN_NAME_SEPARATOR + counter__		}_		return actualInnerBeanName__	};checks,the,given,bean,name,whether,it,is,unique,if,not,already,unique,a,counter,is,added,increasing,the,counter,until,the,name,is,unique,param,inner,bean,name,the,original,name,for,the,inner,bean,return,the,adapted,name,for,the,inner,bean;private,string,adapt,inner,bean,name,string,inner,bean,name,string,actual,inner,bean,name,inner,bean,name,int,counter,0,while,this,bean,factory,is,bean,name,in,use,actual,inner,bean,name,counter,actual,inner,bean,name,inner,bean,name,bean,factory,utils,counter,return,actual,inner,bean,name
BeanDefinitionValueResolver -> private String adaptInnerBeanName(String innerBeanName);1356735495;Checks the given bean name whether it is unique. If not already unique,_a counter is added, increasing the counter until the name is unique._@param innerBeanName the original name for the inner bean_@return the adapted name for the inner bean;private String adaptInnerBeanName(String innerBeanName) {_		String actualInnerBeanName = innerBeanName__		int counter = 0__		while (this.beanFactory.isBeanNameInUse(actualInnerBeanName)) {_			counter++__			actualInnerBeanName = innerBeanName + BeanFactoryUtils.GENERATED_BEAN_NAME_SEPARATOR + counter__		}_		return actualInnerBeanName__	};checks,the,given,bean,name,whether,it,is,unique,if,not,already,unique,a,counter,is,added,increasing,the,counter,until,the,name,is,unique,param,inner,bean,name,the,original,name,for,the,inner,bean,return,the,adapted,name,for,the,inner,bean;private,string,adapt,inner,bean,name,string,inner,bean,name,string,actual,inner,bean,name,inner,bean,name,int,counter,0,while,this,bean,factory,is,bean,name,in,use,actual,inner,bean,name,counter,actual,inner,bean,name,inner,bean,name,bean,factory,utils,counter,return,actual,inner,bean,name
BeanDefinitionValueResolver -> private String adaptInnerBeanName(String innerBeanName);1382905576;Checks the given bean name whether it is unique. If not already unique,_a counter is added, increasing the counter until the name is unique._@param innerBeanName the original name for the inner bean_@return the adapted name for the inner bean;private String adaptInnerBeanName(String innerBeanName) {_		String actualInnerBeanName = innerBeanName__		int counter = 0__		while (this.beanFactory.isBeanNameInUse(actualInnerBeanName)) {_			counter++__			actualInnerBeanName = innerBeanName + BeanFactoryUtils.GENERATED_BEAN_NAME_SEPARATOR + counter__		}_		return actualInnerBeanName__	};checks,the,given,bean,name,whether,it,is,unique,if,not,already,unique,a,counter,is,added,increasing,the,counter,until,the,name,is,unique,param,inner,bean,name,the,original,name,for,the,inner,bean,return,the,adapted,name,for,the,inner,bean;private,string,adapt,inner,bean,name,string,inner,bean,name,string,actual,inner,bean,name,inner,bean,name,int,counter,0,while,this,bean,factory,is,bean,name,in,use,actual,inner,bean,name,counter,actual,inner,bean,name,inner,bean,name,bean,factory,utils,counter,return,actual,inner,bean,name
BeanDefinitionValueResolver -> private String adaptInnerBeanName(String innerBeanName);1385412762;Checks the given bean name whether it is unique. If not already unique,_a counter is added, increasing the counter until the name is unique._@param innerBeanName the original name for the inner bean_@return the adapted name for the inner bean;private String adaptInnerBeanName(String innerBeanName) {_		String actualInnerBeanName = innerBeanName__		int counter = 0__		while (this.beanFactory.isBeanNameInUse(actualInnerBeanName)) {_			counter++__			actualInnerBeanName = innerBeanName + BeanFactoryUtils.GENERATED_BEAN_NAME_SEPARATOR + counter__		}_		return actualInnerBeanName__	};checks,the,given,bean,name,whether,it,is,unique,if,not,already,unique,a,counter,is,added,increasing,the,counter,until,the,name,is,unique,param,inner,bean,name,the,original,name,for,the,inner,bean,return,the,adapted,name,for,the,inner,bean;private,string,adapt,inner,bean,name,string,inner,bean,name,string,actual,inner,bean,name,inner,bean,name,int,counter,0,while,this,bean,factory,is,bean,name,in,use,actual,inner,bean,name,counter,actual,inner,bean,name,inner,bean,name,bean,factory,utils,counter,return,actual,inner,bean,name
BeanDefinitionValueResolver -> private String adaptInnerBeanName(String innerBeanName);1386621944;Checks the given bean name whether it is unique. If not already unique,_a counter is added, increasing the counter until the name is unique._@param innerBeanName the original name for the inner bean_@return the adapted name for the inner bean;private String adaptInnerBeanName(String innerBeanName) {_		String actualInnerBeanName = innerBeanName__		int counter = 0__		while (this.beanFactory.isBeanNameInUse(actualInnerBeanName)) {_			counter++__			actualInnerBeanName = innerBeanName + BeanFactoryUtils.GENERATED_BEAN_NAME_SEPARATOR + counter__		}_		return actualInnerBeanName__	};checks,the,given,bean,name,whether,it,is,unique,if,not,already,unique,a,counter,is,added,increasing,the,counter,until,the,name,is,unique,param,inner,bean,name,the,original,name,for,the,inner,bean,return,the,adapted,name,for,the,inner,bean;private,string,adapt,inner,bean,name,string,inner,bean,name,string,actual,inner,bean,name,inner,bean,name,int,counter,0,while,this,bean,factory,is,bean,name,in,use,actual,inner,bean,name,counter,actual,inner,bean,name,inner,bean,name,bean,factory,utils,counter,return,actual,inner,bean,name
BeanDefinitionValueResolver -> private String adaptInnerBeanName(String innerBeanName);1394825889;Checks the given bean name whether it is unique. If not already unique,_a counter is added, increasing the counter until the name is unique._@param innerBeanName the original name for the inner bean_@return the adapted name for the inner bean;private String adaptInnerBeanName(String innerBeanName) {_		String actualInnerBeanName = innerBeanName__		int counter = 0__		while (this.beanFactory.isBeanNameInUse(actualInnerBeanName)) {_			counter++__			actualInnerBeanName = innerBeanName + BeanFactoryUtils.GENERATED_BEAN_NAME_SEPARATOR + counter__		}_		return actualInnerBeanName__	};checks,the,given,bean,name,whether,it,is,unique,if,not,already,unique,a,counter,is,added,increasing,the,counter,until,the,name,is,unique,param,inner,bean,name,the,original,name,for,the,inner,bean,return,the,adapted,name,for,the,inner,bean;private,string,adapt,inner,bean,name,string,inner,bean,name,string,actual,inner,bean,name,inner,bean,name,int,counter,0,while,this,bean,factory,is,bean,name,in,use,actual,inner,bean,name,counter,actual,inner,bean,name,inner,bean,name,bean,factory,utils,counter,return,actual,inner,bean,name
BeanDefinitionValueResolver -> private String adaptInnerBeanName(String innerBeanName);1414738527;Checks the given bean name whether it is unique. If not already unique,_a counter is added, increasing the counter until the name is unique._@param innerBeanName the original name for the inner bean_@return the adapted name for the inner bean;private String adaptInnerBeanName(String innerBeanName) {_		String actualInnerBeanName = innerBeanName__		int counter = 0__		while (this.beanFactory.isBeanNameInUse(actualInnerBeanName)) {_			counter++__			actualInnerBeanName = innerBeanName + BeanFactoryUtils.GENERATED_BEAN_NAME_SEPARATOR + counter__		}_		return actualInnerBeanName__	};checks,the,given,bean,name,whether,it,is,unique,if,not,already,unique,a,counter,is,added,increasing,the,counter,until,the,name,is,unique,param,inner,bean,name,the,original,name,for,the,inner,bean,return,the,adapted,name,for,the,inner,bean;private,string,adapt,inner,bean,name,string,inner,bean,name,string,actual,inner,bean,name,inner,bean,name,int,counter,0,while,this,bean,factory,is,bean,name,in,use,actual,inner,bean,name,counter,actual,inner,bean,name,inner,bean,name,bean,factory,utils,counter,return,actual,inner,bean,name
BeanDefinitionValueResolver -> private String adaptInnerBeanName(String innerBeanName);1414774626;Checks the given bean name whether it is unique. If not already unique,_a counter is added, increasing the counter until the name is unique._@param innerBeanName the original name for the inner bean_@return the adapted name for the inner bean;private String adaptInnerBeanName(String innerBeanName) {_		String actualInnerBeanName = innerBeanName__		int counter = 0__		while (this.beanFactory.isBeanNameInUse(actualInnerBeanName)) {_			counter++__			actualInnerBeanName = innerBeanName + BeanFactoryUtils.GENERATED_BEAN_NAME_SEPARATOR + counter__		}_		return actualInnerBeanName__	};checks,the,given,bean,name,whether,it,is,unique,if,not,already,unique,a,counter,is,added,increasing,the,counter,until,the,name,is,unique,param,inner,bean,name,the,original,name,for,the,inner,bean,return,the,adapted,name,for,the,inner,bean;private,string,adapt,inner,bean,name,string,inner,bean,name,string,actual,inner,bean,name,inner,bean,name,int,counter,0,while,this,bean,factory,is,bean,name,in,use,actual,inner,bean,name,counter,actual,inner,bean,name,inner,bean,name,bean,factory,utils,counter,return,actual,inner,bean,name
BeanDefinitionValueResolver -> private String adaptInnerBeanName(String innerBeanName);1467730834;Checks the given bean name whether it is unique. If not already unique,_a counter is added, increasing the counter until the name is unique._@param innerBeanName the original name for the inner bean_@return the adapted name for the inner bean;private String adaptInnerBeanName(String innerBeanName) {_		String actualInnerBeanName = innerBeanName__		int counter = 0__		while (this.beanFactory.isBeanNameInUse(actualInnerBeanName)) {_			counter++__			actualInnerBeanName = innerBeanName + BeanFactoryUtils.GENERATED_BEAN_NAME_SEPARATOR + counter__		}_		return actualInnerBeanName__	};checks,the,given,bean,name,whether,it,is,unique,if,not,already,unique,a,counter,is,added,increasing,the,counter,until,the,name,is,unique,param,inner,bean,name,the,original,name,for,the,inner,bean,return,the,adapted,name,for,the,inner,bean;private,string,adapt,inner,bean,name,string,inner,bean,name,string,actual,inner,bean,name,inner,bean,name,int,counter,0,while,this,bean,factory,is,bean,name,in,use,actual,inner,bean,name,counter,actual,inner,bean,name,inner,bean,name,bean,factory,utils,counter,return,actual,inner,bean,name
BeanDefinitionValueResolver -> private String adaptInnerBeanName(String innerBeanName);1495868221;Checks the given bean name whether it is unique. If not already unique,_a counter is added, increasing the counter until the name is unique._@param innerBeanName the original name for the inner bean_@return the adapted name for the inner bean;private String adaptInnerBeanName(String innerBeanName) {_		String actualInnerBeanName = innerBeanName__		int counter = 0__		while (this.beanFactory.isBeanNameInUse(actualInnerBeanName)) {_			counter++__			actualInnerBeanName = innerBeanName + BeanFactoryUtils.GENERATED_BEAN_NAME_SEPARATOR + counter__		}_		return actualInnerBeanName__	};checks,the,given,bean,name,whether,it,is,unique,if,not,already,unique,a,counter,is,added,increasing,the,counter,until,the,name,is,unique,param,inner,bean,name,the,original,name,for,the,inner,bean,return,the,adapted,name,for,the,inner,bean;private,string,adapt,inner,bean,name,string,inner,bean,name,string,actual,inner,bean,name,inner,bean,name,int,counter,0,while,this,bean,factory,is,bean,name,in,use,actual,inner,bean,name,counter,actual,inner,bean,name,inner,bean,name,bean,factory,utils,counter,return,actual,inner,bean,name
BeanDefinitionValueResolver -> private String adaptInnerBeanName(String innerBeanName);1496837955;Checks the given bean name whether it is unique. If not already unique,_a counter is added, increasing the counter until the name is unique._@param innerBeanName the original name for the inner bean_@return the adapted name for the inner bean;private String adaptInnerBeanName(String innerBeanName) {_		String actualInnerBeanName = innerBeanName__		int counter = 0__		while (this.beanFactory.isBeanNameInUse(actualInnerBeanName)) {_			counter++__			actualInnerBeanName = innerBeanName + BeanFactoryUtils.GENERATED_BEAN_NAME_SEPARATOR + counter__		}_		return actualInnerBeanName__	};checks,the,given,bean,name,whether,it,is,unique,if,not,already,unique,a,counter,is,added,increasing,the,counter,until,the,name,is,unique,param,inner,bean,name,the,original,name,for,the,inner,bean,return,the,adapted,name,for,the,inner,bean;private,string,adapt,inner,bean,name,string,inner,bean,name,string,actual,inner,bean,name,inner,bean,name,int,counter,0,while,this,bean,factory,is,bean,name,in,use,actual,inner,bean,name,counter,actual,inner,bean,name,inner,bean,name,bean,factory,utils,counter,return,actual,inner,bean,name
BeanDefinitionValueResolver -> private String adaptInnerBeanName(String innerBeanName);1497250713;Checks the given bean name whether it is unique. If not already unique,_a counter is added, increasing the counter until the name is unique._@param innerBeanName the original name for the inner bean_@return the adapted name for the inner bean;private String adaptInnerBeanName(String innerBeanName) {_		String actualInnerBeanName = innerBeanName__		int counter = 0__		while (this.beanFactory.isBeanNameInUse(actualInnerBeanName)) {_			counter++__			actualInnerBeanName = innerBeanName + BeanFactoryUtils.GENERATED_BEAN_NAME_SEPARATOR + counter__		}_		return actualInnerBeanName__	};checks,the,given,bean,name,whether,it,is,unique,if,not,already,unique,a,counter,is,added,increasing,the,counter,until,the,name,is,unique,param,inner,bean,name,the,original,name,for,the,inner,bean,return,the,adapted,name,for,the,inner,bean;private,string,adapt,inner,bean,name,string,inner,bean,name,string,actual,inner,bean,name,inner,bean,name,int,counter,0,while,this,bean,factory,is,bean,name,in,use,actual,inner,bean,name,counter,actual,inner,bean,name,inner,bean,name,bean,factory,utils,counter,return,actual,inner,bean,name
BeanDefinitionValueResolver -> private String adaptInnerBeanName(String innerBeanName);1503007895;Checks the given bean name whether it is unique. If not already unique,_a counter is added, increasing the counter until the name is unique._@param innerBeanName the original name for the inner bean_@return the adapted name for the inner bean;private String adaptInnerBeanName(String innerBeanName) {_		String actualInnerBeanName = innerBeanName__		int counter = 0__		while (this.beanFactory.isBeanNameInUse(actualInnerBeanName)) {_			counter++__			actualInnerBeanName = innerBeanName + BeanFactoryUtils.GENERATED_BEAN_NAME_SEPARATOR + counter__		}_		return actualInnerBeanName__	};checks,the,given,bean,name,whether,it,is,unique,if,not,already,unique,a,counter,is,added,increasing,the,counter,until,the,name,is,unique,param,inner,bean,name,the,original,name,for,the,inner,bean,return,the,adapted,name,for,the,inner,bean;private,string,adapt,inner,bean,name,string,inner,bean,name,string,actual,inner,bean,name,inner,bean,name,int,counter,0,while,this,bean,factory,is,bean,name,in,use,actual,inner,bean,name,counter,actual,inner,bean,name,inner,bean,name,bean,factory,utils,counter,return,actual,inner,bean,name
BeanDefinitionValueResolver -> private String adaptInnerBeanName(String innerBeanName);1522103912;Checks the given bean name whether it is unique. If not already unique,_a counter is added, increasing the counter until the name is unique._@param innerBeanName the original name for the inner bean_@return the adapted name for the inner bean;private String adaptInnerBeanName(String innerBeanName) {_		String actualInnerBeanName = innerBeanName__		int counter = 0__		while (this.beanFactory.isBeanNameInUse(actualInnerBeanName)) {_			counter++__			actualInnerBeanName = innerBeanName + BeanFactoryUtils.GENERATED_BEAN_NAME_SEPARATOR + counter__		}_		return actualInnerBeanName__	};checks,the,given,bean,name,whether,it,is,unique,if,not,already,unique,a,counter,is,added,increasing,the,counter,until,the,name,is,unique,param,inner,bean,name,the,original,name,for,the,inner,bean,return,the,adapted,name,for,the,inner,bean;private,string,adapt,inner,bean,name,string,inner,bean,name,string,actual,inner,bean,name,inner,bean,name,int,counter,0,while,this,bean,factory,is,bean,name,in,use,actual,inner,bean,name,counter,actual,inner,bean,name,inner,bean,name,bean,factory,utils,counter,return,actual,inner,bean,name
BeanDefinitionValueResolver -> public Object resolveValueIfNecessary(Object argName, Object value);1328020251;Given a PropertyValue, return a value, resolving any references to other_beans in the factory if necessary. The value could be:_<li>A BeanDefinition, which leads to the creation of a corresponding_new bean instance. Singleton flags and names of such "inner beans"_are always ignored: Inner beans are anonymous prototypes._<li>A RuntimeBeanReference, which must be resolved._<li>A ManagedList. This is a special collection that may contain_RuntimeBeanReferences or Collections that will need to be resolved._<li>A ManagedSet. May also contain RuntimeBeanReferences or_Collections that will need to be resolved._<li>A ManagedMap. In this case the value may be a RuntimeBeanReference_or Collection that will need to be resolved._<li>An ordinary object or <code>null</code>, in which case it's left alone._@param argName the name of the argument that the value is defined for_@param value the value object to resolve_@return the resolved object;public Object resolveValueIfNecessary(Object argName, Object value) {_		_		_		if (value instanceof RuntimeBeanReference) {_			RuntimeBeanReference ref = (RuntimeBeanReference) value__			return resolveReference(argName, ref)__		}_		else if (value instanceof RuntimeBeanNameReference) {_			String refName = ((RuntimeBeanNameReference) value).getBeanName()__			refName = String.valueOf(evaluate(refName))__			if (!this.beanFactory.containsBean(refName)) {_				throw new BeanDefinitionStoreException(_						"Invalid bean name '" + refName + "' in bean reference for " + argName)__			}_			return refName__		}_		else if (value instanceof BeanDefinitionHolder) {_			_			BeanDefinitionHolder bdHolder = (BeanDefinitionHolder) value__			return resolveInnerBean(argName, bdHolder.getBeanName(), bdHolder.getBeanDefinition())__		}_		else if (value instanceof BeanDefinition) {_			_			BeanDefinition bd = (BeanDefinition) value__			return resolveInnerBean(argName, "(inner bean)", bd)__		}_		else if (value instanceof ManagedArray) {_			_			ManagedArray array = (ManagedArray) value__			Class elementType = array.resolvedElementType__			if (elementType == null) {_				String elementTypeName = array.getElementTypeName()__				if (StringUtils.hasText(elementTypeName)) {_					try {_						elementType = ClassUtils.forName(elementTypeName, this.beanFactory.getBeanClassLoader())__						array.resolvedElementType = elementType__					}_					catch (Throwable ex) {_						_						throw new BeanCreationException(_								this.beanDefinition.getResourceDescription(), this.beanName,_								"Error resolving array type for " + argName, ex)__					}_				}_				else {_					elementType = Object.class__				}_			}_			return resolveManagedArray(argName, (List<?>) value, elementType)__		}_		else if (value instanceof ManagedList) {_			_			return resolveManagedList(argName, (List<?>) value)__		}_		else if (value instanceof ManagedSet) {_			_			return resolveManagedSet(argName, (Set<?>) value)__		}_		else if (value instanceof ManagedMap) {_			_			return resolveManagedMap(argName, (Map<?, ?>) value)__		}_		else if (value instanceof ManagedProperties) {_			Properties original = (Properties) value__			Properties copy = new Properties()__			for (Map.Entry propEntry : original.entrySet()) {_				Object propKey = propEntry.getKey()__				Object propValue = propEntry.getValue()__				if (propKey instanceof TypedStringValue) {_					propKey = evaluate((TypedStringValue) propKey)__				}_				if (propValue instanceof TypedStringValue) {_					propValue = evaluate((TypedStringValue) propValue)__				}_				copy.put(propKey, propValue)__			}_			return copy__		}_		else if (value instanceof TypedStringValue) {_			_			TypedStringValue typedStringValue = (TypedStringValue) value__			Object valueObject = evaluate(typedStringValue)__			try {_				Class<?> resolvedTargetType = resolveTargetType(typedStringValue)__				if (resolvedTargetType != null) {_					return this.typeConverter.convertIfNecessary(valueObject, resolvedTargetType)__				}_				else {_					return valueObject__				}_			}_			catch (Throwable ex) {_				_				throw new BeanCreationException(_						this.beanDefinition.getResourceDescription(), this.beanName,_						"Error converting typed String value for " + argName, ex)__			}_		}_		else {_			return evaluate(value)__		}_	};given,a,property,value,return,a,value,resolving,any,references,to,other,beans,in,the,factory,if,necessary,the,value,could,be,li,a,bean,definition,which,leads,to,the,creation,of,a,corresponding,new,bean,instance,singleton,flags,and,names,of,such,inner,beans,are,always,ignored,inner,beans,are,anonymous,prototypes,li,a,runtime,bean,reference,which,must,be,resolved,li,a,managed,list,this,is,a,special,collection,that,may,contain,runtime,bean,references,or,collections,that,will,need,to,be,resolved,li,a,managed,set,may,also,contain,runtime,bean,references,or,collections,that,will,need,to,be,resolved,li,a,managed,map,in,this,case,the,value,may,be,a,runtime,bean,reference,or,collection,that,will,need,to,be,resolved,li,an,ordinary,object,or,code,null,code,in,which,case,it,s,left,alone,param,arg,name,the,name,of,the,argument,that,the,value,is,defined,for,param,value,the,value,object,to,resolve,return,the,resolved,object;public,object,resolve,value,if,necessary,object,arg,name,object,value,if,value,instanceof,runtime,bean,reference,runtime,bean,reference,ref,runtime,bean,reference,value,return,resolve,reference,arg,name,ref,else,if,value,instanceof,runtime,bean,name,reference,string,ref,name,runtime,bean,name,reference,value,get,bean,name,ref,name,string,value,of,evaluate,ref,name,if,this,bean,factory,contains,bean,ref,name,throw,new,bean,definition,store,exception,invalid,bean,name,ref,name,in,bean,reference,for,arg,name,return,ref,name,else,if,value,instanceof,bean,definition,holder,bean,definition,holder,bd,holder,bean,definition,holder,value,return,resolve,inner,bean,arg,name,bd,holder,get,bean,name,bd,holder,get,bean,definition,else,if,value,instanceof,bean,definition,bean,definition,bd,bean,definition,value,return,resolve,inner,bean,arg,name,inner,bean,bd,else,if,value,instanceof,managed,array,managed,array,array,managed,array,value,class,element,type,array,resolved,element,type,if,element,type,null,string,element,type,name,array,get,element,type,name,if,string,utils,has,text,element,type,name,try,element,type,class,utils,for,name,element,type,name,this,bean,factory,get,bean,class,loader,array,resolved,element,type,element,type,catch,throwable,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,error,resolving,array,type,for,arg,name,ex,else,element,type,object,class,return,resolve,managed,array,arg,name,list,value,element,type,else,if,value,instanceof,managed,list,return,resolve,managed,list,arg,name,list,value,else,if,value,instanceof,managed,set,return,resolve,managed,set,arg,name,set,value,else,if,value,instanceof,managed,map,return,resolve,managed,map,arg,name,map,value,else,if,value,instanceof,managed,properties,properties,original,properties,value,properties,copy,new,properties,for,map,entry,prop,entry,original,entry,set,object,prop,key,prop,entry,get,key,object,prop,value,prop,entry,get,value,if,prop,key,instanceof,typed,string,value,prop,key,evaluate,typed,string,value,prop,key,if,prop,value,instanceof,typed,string,value,prop,value,evaluate,typed,string,value,prop,value,copy,put,prop,key,prop,value,return,copy,else,if,value,instanceof,typed,string,value,typed,string,value,typed,string,value,typed,string,value,value,object,value,object,evaluate,typed,string,value,try,class,resolved,target,type,resolve,target,type,typed,string,value,if,resolved,target,type,null,return,this,type,converter,convert,if,necessary,value,object,resolved,target,type,else,return,value,object,catch,throwable,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,error,converting,typed,string,value,for,arg,name,ex,else,return,evaluate,value
BeanDefinitionValueResolver -> public Object resolveValueIfNecessary(Object argName, Object value);1347282854;Given a PropertyValue, return a value, resolving any references to other_beans in the factory if necessary. The value could be:_<li>A BeanDefinition, which leads to the creation of a corresponding_new bean instance. Singleton flags and names of such "inner beans"_are always ignored: Inner beans are anonymous prototypes._<li>A RuntimeBeanReference, which must be resolved._<li>A ManagedList. This is a special collection that may contain_RuntimeBeanReferences or Collections that will need to be resolved._<li>A ManagedSet. May also contain RuntimeBeanReferences or_Collections that will need to be resolved._<li>A ManagedMap. In this case the value may be a RuntimeBeanReference_or Collection that will need to be resolved._<li>An ordinary object or <code>null</code>, in which case it's left alone._@param argName the name of the argument that the value is defined for_@param value the value object to resolve_@return the resolved object;public Object resolveValueIfNecessary(Object argName, Object value) {_		_		_		if (value instanceof RuntimeBeanReference) {_			RuntimeBeanReference ref = (RuntimeBeanReference) value__			return resolveReference(argName, ref)__		}_		else if (value instanceof RuntimeBeanNameReference) {_			String refName = ((RuntimeBeanNameReference) value).getBeanName()__			refName = String.valueOf(evaluate(refName))__			if (!this.beanFactory.containsBean(refName)) {_				throw new BeanDefinitionStoreException(_						"Invalid bean name '" + refName + "' in bean reference for " + argName)__			}_			return refName__		}_		else if (value instanceof BeanDefinitionHolder) {_			_			BeanDefinitionHolder bdHolder = (BeanDefinitionHolder) value__			return resolveInnerBean(argName, bdHolder.getBeanName(), bdHolder.getBeanDefinition())__		}_		else if (value instanceof BeanDefinition) {_			_			BeanDefinition bd = (BeanDefinition) value__			return resolveInnerBean(argName, "(inner bean)", bd)__		}_		else if (value instanceof ManagedArray) {_			_			ManagedArray array = (ManagedArray) value__			Class elementType = array.resolvedElementType__			if (elementType == null) {_				String elementTypeName = array.getElementTypeName()__				if (StringUtils.hasText(elementTypeName)) {_					try {_						elementType = ClassUtils.forName(elementTypeName, this.beanFactory.getBeanClassLoader())__						array.resolvedElementType = elementType__					}_					catch (Throwable ex) {_						_						throw new BeanCreationException(_								this.beanDefinition.getResourceDescription(), this.beanName,_								"Error resolving array type for " + argName, ex)__					}_				}_				else {_					elementType = Object.class__				}_			}_			return resolveManagedArray(argName, (List<?>) value, elementType)__		}_		else if (value instanceof ManagedList) {_			_			return resolveManagedList(argName, (List<?>) value)__		}_		else if (value instanceof ManagedSet) {_			_			return resolveManagedSet(argName, (Set<?>) value)__		}_		else if (value instanceof ManagedMap) {_			_			return resolveManagedMap(argName, (Map<?, ?>) value)__		}_		else if (value instanceof ManagedProperties) {_			Properties original = (Properties) value__			Properties copy = new Properties()__			for (Map.Entry propEntry : original.entrySet()) {_				Object propKey = propEntry.getKey()__				Object propValue = propEntry.getValue()__				if (propKey instanceof TypedStringValue) {_					propKey = evaluate((TypedStringValue) propKey)__				}_				if (propValue instanceof TypedStringValue) {_					propValue = evaluate((TypedStringValue) propValue)__				}_				copy.put(propKey, propValue)__			}_			return copy__		}_		else if (value instanceof TypedStringValue) {_			_			TypedStringValue typedStringValue = (TypedStringValue) value__			Object valueObject = evaluate(typedStringValue)__			try {_				Class<?> resolvedTargetType = resolveTargetType(typedStringValue)__				if (resolvedTargetType != null) {_					return this.typeConverter.convertIfNecessary(valueObject, resolvedTargetType)__				}_				else {_					return valueObject__				}_			}_			catch (Throwable ex) {_				_				throw new BeanCreationException(_						this.beanDefinition.getResourceDescription(), this.beanName,_						"Error converting typed String value for " + argName, ex)__			}_		}_		else {_			return evaluate(value)__		}_	};given,a,property,value,return,a,value,resolving,any,references,to,other,beans,in,the,factory,if,necessary,the,value,could,be,li,a,bean,definition,which,leads,to,the,creation,of,a,corresponding,new,bean,instance,singleton,flags,and,names,of,such,inner,beans,are,always,ignored,inner,beans,are,anonymous,prototypes,li,a,runtime,bean,reference,which,must,be,resolved,li,a,managed,list,this,is,a,special,collection,that,may,contain,runtime,bean,references,or,collections,that,will,need,to,be,resolved,li,a,managed,set,may,also,contain,runtime,bean,references,or,collections,that,will,need,to,be,resolved,li,a,managed,map,in,this,case,the,value,may,be,a,runtime,bean,reference,or,collection,that,will,need,to,be,resolved,li,an,ordinary,object,or,code,null,code,in,which,case,it,s,left,alone,param,arg,name,the,name,of,the,argument,that,the,value,is,defined,for,param,value,the,value,object,to,resolve,return,the,resolved,object;public,object,resolve,value,if,necessary,object,arg,name,object,value,if,value,instanceof,runtime,bean,reference,runtime,bean,reference,ref,runtime,bean,reference,value,return,resolve,reference,arg,name,ref,else,if,value,instanceof,runtime,bean,name,reference,string,ref,name,runtime,bean,name,reference,value,get,bean,name,ref,name,string,value,of,evaluate,ref,name,if,this,bean,factory,contains,bean,ref,name,throw,new,bean,definition,store,exception,invalid,bean,name,ref,name,in,bean,reference,for,arg,name,return,ref,name,else,if,value,instanceof,bean,definition,holder,bean,definition,holder,bd,holder,bean,definition,holder,value,return,resolve,inner,bean,arg,name,bd,holder,get,bean,name,bd,holder,get,bean,definition,else,if,value,instanceof,bean,definition,bean,definition,bd,bean,definition,value,return,resolve,inner,bean,arg,name,inner,bean,bd,else,if,value,instanceof,managed,array,managed,array,array,managed,array,value,class,element,type,array,resolved,element,type,if,element,type,null,string,element,type,name,array,get,element,type,name,if,string,utils,has,text,element,type,name,try,element,type,class,utils,for,name,element,type,name,this,bean,factory,get,bean,class,loader,array,resolved,element,type,element,type,catch,throwable,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,error,resolving,array,type,for,arg,name,ex,else,element,type,object,class,return,resolve,managed,array,arg,name,list,value,element,type,else,if,value,instanceof,managed,list,return,resolve,managed,list,arg,name,list,value,else,if,value,instanceof,managed,set,return,resolve,managed,set,arg,name,set,value,else,if,value,instanceof,managed,map,return,resolve,managed,map,arg,name,map,value,else,if,value,instanceof,managed,properties,properties,original,properties,value,properties,copy,new,properties,for,map,entry,prop,entry,original,entry,set,object,prop,key,prop,entry,get,key,object,prop,value,prop,entry,get,value,if,prop,key,instanceof,typed,string,value,prop,key,evaluate,typed,string,value,prop,key,if,prop,value,instanceof,typed,string,value,prop,value,evaluate,typed,string,value,prop,value,copy,put,prop,key,prop,value,return,copy,else,if,value,instanceof,typed,string,value,typed,string,value,typed,string,value,typed,string,value,value,object,value,object,evaluate,typed,string,value,try,class,resolved,target,type,resolve,target,type,typed,string,value,if,resolved,target,type,null,return,this,type,converter,convert,if,necessary,value,object,resolved,target,type,else,return,value,object,catch,throwable,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,error,converting,typed,string,value,for,arg,name,ex,else,return,evaluate,value
BeanDefinitionValueResolver -> public Object resolveValueIfNecessary(Object argName, Object value);1356735495;Given a PropertyValue, return a value, resolving any references to other_beans in the factory if necessary. The value could be:_<li>A BeanDefinition, which leads to the creation of a corresponding_new bean instance. Singleton flags and names of such "inner beans"_are always ignored: Inner beans are anonymous prototypes._<li>A RuntimeBeanReference, which must be resolved._<li>A ManagedList. This is a special collection that may contain_RuntimeBeanReferences or Collections that will need to be resolved._<li>A ManagedSet. May also contain RuntimeBeanReferences or_Collections that will need to be resolved._<li>A ManagedMap. In this case the value may be a RuntimeBeanReference_or Collection that will need to be resolved._<li>An ordinary object or {@code null}, in which case it's left alone._@param argName the name of the argument that the value is defined for_@param value the value object to resolve_@return the resolved object;public Object resolveValueIfNecessary(Object argName, Object value) {_		_		_		if (value instanceof RuntimeBeanReference) {_			RuntimeBeanReference ref = (RuntimeBeanReference) value__			return resolveReference(argName, ref)__		}_		else if (value instanceof RuntimeBeanNameReference) {_			String refName = ((RuntimeBeanNameReference) value).getBeanName()__			refName = String.valueOf(evaluate(refName))__			if (!this.beanFactory.containsBean(refName)) {_				throw new BeanDefinitionStoreException(_						"Invalid bean name '" + refName + "' in bean reference for " + argName)__			}_			return refName__		}_		else if (value instanceof BeanDefinitionHolder) {_			_			BeanDefinitionHolder bdHolder = (BeanDefinitionHolder) value__			return resolveInnerBean(argName, bdHolder.getBeanName(), bdHolder.getBeanDefinition())__		}_		else if (value instanceof BeanDefinition) {_			_			BeanDefinition bd = (BeanDefinition) value__			return resolveInnerBean(argName, "(inner bean)", bd)__		}_		else if (value instanceof ManagedArray) {_			_			ManagedArray array = (ManagedArray) value__			Class elementType = array.resolvedElementType__			if (elementType == null) {_				String elementTypeName = array.getElementTypeName()__				if (StringUtils.hasText(elementTypeName)) {_					try {_						elementType = ClassUtils.forName(elementTypeName, this.beanFactory.getBeanClassLoader())__						array.resolvedElementType = elementType__					}_					catch (Throwable ex) {_						_						throw new BeanCreationException(_								this.beanDefinition.getResourceDescription(), this.beanName,_								"Error resolving array type for " + argName, ex)__					}_				}_				else {_					elementType = Object.class__				}_			}_			return resolveManagedArray(argName, (List<?>) value, elementType)__		}_		else if (value instanceof ManagedList) {_			_			return resolveManagedList(argName, (List<?>) value)__		}_		else if (value instanceof ManagedSet) {_			_			return resolveManagedSet(argName, (Set<?>) value)__		}_		else if (value instanceof ManagedMap) {_			_			return resolveManagedMap(argName, (Map<?, ?>) value)__		}_		else if (value instanceof ManagedProperties) {_			Properties original = (Properties) value__			Properties copy = new Properties()__			for (Map.Entry propEntry : original.entrySet()) {_				Object propKey = propEntry.getKey()__				Object propValue = propEntry.getValue()__				if (propKey instanceof TypedStringValue) {_					propKey = evaluate((TypedStringValue) propKey)__				}_				if (propValue instanceof TypedStringValue) {_					propValue = evaluate((TypedStringValue) propValue)__				}_				copy.put(propKey, propValue)__			}_			return copy__		}_		else if (value instanceof TypedStringValue) {_			_			TypedStringValue typedStringValue = (TypedStringValue) value__			Object valueObject = evaluate(typedStringValue)__			try {_				Class<?> resolvedTargetType = resolveTargetType(typedStringValue)__				if (resolvedTargetType != null) {_					return this.typeConverter.convertIfNecessary(valueObject, resolvedTargetType)__				}_				else {_					return valueObject__				}_			}_			catch (Throwable ex) {_				_				throw new BeanCreationException(_						this.beanDefinition.getResourceDescription(), this.beanName,_						"Error converting typed String value for " + argName, ex)__			}_		}_		else {_			return evaluate(value)__		}_	};given,a,property,value,return,a,value,resolving,any,references,to,other,beans,in,the,factory,if,necessary,the,value,could,be,li,a,bean,definition,which,leads,to,the,creation,of,a,corresponding,new,bean,instance,singleton,flags,and,names,of,such,inner,beans,are,always,ignored,inner,beans,are,anonymous,prototypes,li,a,runtime,bean,reference,which,must,be,resolved,li,a,managed,list,this,is,a,special,collection,that,may,contain,runtime,bean,references,or,collections,that,will,need,to,be,resolved,li,a,managed,set,may,also,contain,runtime,bean,references,or,collections,that,will,need,to,be,resolved,li,a,managed,map,in,this,case,the,value,may,be,a,runtime,bean,reference,or,collection,that,will,need,to,be,resolved,li,an,ordinary,object,or,code,null,in,which,case,it,s,left,alone,param,arg,name,the,name,of,the,argument,that,the,value,is,defined,for,param,value,the,value,object,to,resolve,return,the,resolved,object;public,object,resolve,value,if,necessary,object,arg,name,object,value,if,value,instanceof,runtime,bean,reference,runtime,bean,reference,ref,runtime,bean,reference,value,return,resolve,reference,arg,name,ref,else,if,value,instanceof,runtime,bean,name,reference,string,ref,name,runtime,bean,name,reference,value,get,bean,name,ref,name,string,value,of,evaluate,ref,name,if,this,bean,factory,contains,bean,ref,name,throw,new,bean,definition,store,exception,invalid,bean,name,ref,name,in,bean,reference,for,arg,name,return,ref,name,else,if,value,instanceof,bean,definition,holder,bean,definition,holder,bd,holder,bean,definition,holder,value,return,resolve,inner,bean,arg,name,bd,holder,get,bean,name,bd,holder,get,bean,definition,else,if,value,instanceof,bean,definition,bean,definition,bd,bean,definition,value,return,resolve,inner,bean,arg,name,inner,bean,bd,else,if,value,instanceof,managed,array,managed,array,array,managed,array,value,class,element,type,array,resolved,element,type,if,element,type,null,string,element,type,name,array,get,element,type,name,if,string,utils,has,text,element,type,name,try,element,type,class,utils,for,name,element,type,name,this,bean,factory,get,bean,class,loader,array,resolved,element,type,element,type,catch,throwable,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,error,resolving,array,type,for,arg,name,ex,else,element,type,object,class,return,resolve,managed,array,arg,name,list,value,element,type,else,if,value,instanceof,managed,list,return,resolve,managed,list,arg,name,list,value,else,if,value,instanceof,managed,set,return,resolve,managed,set,arg,name,set,value,else,if,value,instanceof,managed,map,return,resolve,managed,map,arg,name,map,value,else,if,value,instanceof,managed,properties,properties,original,properties,value,properties,copy,new,properties,for,map,entry,prop,entry,original,entry,set,object,prop,key,prop,entry,get,key,object,prop,value,prop,entry,get,value,if,prop,key,instanceof,typed,string,value,prop,key,evaluate,typed,string,value,prop,key,if,prop,value,instanceof,typed,string,value,prop,value,evaluate,typed,string,value,prop,value,copy,put,prop,key,prop,value,return,copy,else,if,value,instanceof,typed,string,value,typed,string,value,typed,string,value,typed,string,value,value,object,value,object,evaluate,typed,string,value,try,class,resolved,target,type,resolve,target,type,typed,string,value,if,resolved,target,type,null,return,this,type,converter,convert,if,necessary,value,object,resolved,target,type,else,return,value,object,catch,throwable,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,error,converting,typed,string,value,for,arg,name,ex,else,return,evaluate,value
BeanDefinitionValueResolver -> public Object resolveValueIfNecessary(Object argName, Object value);1382905576;Given a PropertyValue, return a value, resolving any references to other_beans in the factory if necessary. The value could be:_<li>A BeanDefinition, which leads to the creation of a corresponding_new bean instance. Singleton flags and names of such "inner beans"_are always ignored: Inner beans are anonymous prototypes._<li>A RuntimeBeanReference, which must be resolved._<li>A ManagedList. This is a special collection that may contain_RuntimeBeanReferences or Collections that will need to be resolved._<li>A ManagedSet. May also contain RuntimeBeanReferences or_Collections that will need to be resolved._<li>A ManagedMap. In this case the value may be a RuntimeBeanReference_or Collection that will need to be resolved._<li>An ordinary object or {@code null}, in which case it's left alone._@param argName the name of the argument that the value is defined for_@param value the value object to resolve_@return the resolved object;public Object resolveValueIfNecessary(Object argName, Object value) {_		_		_		if (value instanceof RuntimeBeanReference) {_			RuntimeBeanReference ref = (RuntimeBeanReference) value__			return resolveReference(argName, ref)__		}_		else if (value instanceof RuntimeBeanNameReference) {_			String refName = ((RuntimeBeanNameReference) value).getBeanName()__			refName = String.valueOf(evaluate(refName))__			if (!this.beanFactory.containsBean(refName)) {_				throw new BeanDefinitionStoreException(_						"Invalid bean name '" + refName + "' in bean reference for " + argName)__			}_			return refName__		}_		else if (value instanceof BeanDefinitionHolder) {_			_			BeanDefinitionHolder bdHolder = (BeanDefinitionHolder) value__			return resolveInnerBean(argName, bdHolder.getBeanName(), bdHolder.getBeanDefinition())__		}_		else if (value instanceof BeanDefinition) {_			_			BeanDefinition bd = (BeanDefinition) value__			return resolveInnerBean(argName, "(inner bean)", bd)__		}_		else if (value instanceof ManagedArray) {_			_			ManagedArray array = (ManagedArray) value__			Class<?> elementType = array.resolvedElementType__			if (elementType == null) {_				String elementTypeName = array.getElementTypeName()__				if (StringUtils.hasText(elementTypeName)) {_					try {_						elementType = ClassUtils.forName(elementTypeName, this.beanFactory.getBeanClassLoader())__						array.resolvedElementType = elementType__					}_					catch (Throwable ex) {_						_						throw new BeanCreationException(_								this.beanDefinition.getResourceDescription(), this.beanName,_								"Error resolving array type for " + argName, ex)__					}_				}_				else {_					elementType = Object.class__				}_			}_			return resolveManagedArray(argName, (List<?>) value, elementType)__		}_		else if (value instanceof ManagedList) {_			_			return resolveManagedList(argName, (List<?>) value)__		}_		else if (value instanceof ManagedSet) {_			_			return resolveManagedSet(argName, (Set<?>) value)__		}_		else if (value instanceof ManagedMap) {_			_			return resolveManagedMap(argName, (Map<?, ?>) value)__		}_		else if (value instanceof ManagedProperties) {_			Properties original = (Properties) value__			Properties copy = new Properties()__			for (Map.Entry propEntry : original.entrySet()) {_				Object propKey = propEntry.getKey()__				Object propValue = propEntry.getValue()__				if (propKey instanceof TypedStringValue) {_					propKey = evaluate((TypedStringValue) propKey)__				}_				if (propValue instanceof TypedStringValue) {_					propValue = evaluate((TypedStringValue) propValue)__				}_				copy.put(propKey, propValue)__			}_			return copy__		}_		else if (value instanceof TypedStringValue) {_			_			TypedStringValue typedStringValue = (TypedStringValue) value__			Object valueObject = evaluate(typedStringValue)__			try {_				Class<?> resolvedTargetType = resolveTargetType(typedStringValue)__				if (resolvedTargetType != null) {_					return this.typeConverter.convertIfNecessary(valueObject, resolvedTargetType)__				}_				else {_					return valueObject__				}_			}_			catch (Throwable ex) {_				_				throw new BeanCreationException(_						this.beanDefinition.getResourceDescription(), this.beanName,_						"Error converting typed String value for " + argName, ex)__			}_		}_		else {_			return evaluate(value)__		}_	};given,a,property,value,return,a,value,resolving,any,references,to,other,beans,in,the,factory,if,necessary,the,value,could,be,li,a,bean,definition,which,leads,to,the,creation,of,a,corresponding,new,bean,instance,singleton,flags,and,names,of,such,inner,beans,are,always,ignored,inner,beans,are,anonymous,prototypes,li,a,runtime,bean,reference,which,must,be,resolved,li,a,managed,list,this,is,a,special,collection,that,may,contain,runtime,bean,references,or,collections,that,will,need,to,be,resolved,li,a,managed,set,may,also,contain,runtime,bean,references,or,collections,that,will,need,to,be,resolved,li,a,managed,map,in,this,case,the,value,may,be,a,runtime,bean,reference,or,collection,that,will,need,to,be,resolved,li,an,ordinary,object,or,code,null,in,which,case,it,s,left,alone,param,arg,name,the,name,of,the,argument,that,the,value,is,defined,for,param,value,the,value,object,to,resolve,return,the,resolved,object;public,object,resolve,value,if,necessary,object,arg,name,object,value,if,value,instanceof,runtime,bean,reference,runtime,bean,reference,ref,runtime,bean,reference,value,return,resolve,reference,arg,name,ref,else,if,value,instanceof,runtime,bean,name,reference,string,ref,name,runtime,bean,name,reference,value,get,bean,name,ref,name,string,value,of,evaluate,ref,name,if,this,bean,factory,contains,bean,ref,name,throw,new,bean,definition,store,exception,invalid,bean,name,ref,name,in,bean,reference,for,arg,name,return,ref,name,else,if,value,instanceof,bean,definition,holder,bean,definition,holder,bd,holder,bean,definition,holder,value,return,resolve,inner,bean,arg,name,bd,holder,get,bean,name,bd,holder,get,bean,definition,else,if,value,instanceof,bean,definition,bean,definition,bd,bean,definition,value,return,resolve,inner,bean,arg,name,inner,bean,bd,else,if,value,instanceof,managed,array,managed,array,array,managed,array,value,class,element,type,array,resolved,element,type,if,element,type,null,string,element,type,name,array,get,element,type,name,if,string,utils,has,text,element,type,name,try,element,type,class,utils,for,name,element,type,name,this,bean,factory,get,bean,class,loader,array,resolved,element,type,element,type,catch,throwable,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,error,resolving,array,type,for,arg,name,ex,else,element,type,object,class,return,resolve,managed,array,arg,name,list,value,element,type,else,if,value,instanceof,managed,list,return,resolve,managed,list,arg,name,list,value,else,if,value,instanceof,managed,set,return,resolve,managed,set,arg,name,set,value,else,if,value,instanceof,managed,map,return,resolve,managed,map,arg,name,map,value,else,if,value,instanceof,managed,properties,properties,original,properties,value,properties,copy,new,properties,for,map,entry,prop,entry,original,entry,set,object,prop,key,prop,entry,get,key,object,prop,value,prop,entry,get,value,if,prop,key,instanceof,typed,string,value,prop,key,evaluate,typed,string,value,prop,key,if,prop,value,instanceof,typed,string,value,prop,value,evaluate,typed,string,value,prop,value,copy,put,prop,key,prop,value,return,copy,else,if,value,instanceof,typed,string,value,typed,string,value,typed,string,value,typed,string,value,value,object,value,object,evaluate,typed,string,value,try,class,resolved,target,type,resolve,target,type,typed,string,value,if,resolved,target,type,null,return,this,type,converter,convert,if,necessary,value,object,resolved,target,type,else,return,value,object,catch,throwable,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,error,converting,typed,string,value,for,arg,name,ex,else,return,evaluate,value
BeanDefinitionValueResolver -> public Object resolveValueIfNecessary(Object argName, Object value);1385412762;Given a PropertyValue, return a value, resolving any references to other_beans in the factory if necessary. The value could be:_<li>A BeanDefinition, which leads to the creation of a corresponding_new bean instance. Singleton flags and names of such "inner beans"_are always ignored: Inner beans are anonymous prototypes._<li>A RuntimeBeanReference, which must be resolved._<li>A ManagedList. This is a special collection that may contain_RuntimeBeanReferences or Collections that will need to be resolved._<li>A ManagedSet. May also contain RuntimeBeanReferences or_Collections that will need to be resolved._<li>A ManagedMap. In this case the value may be a RuntimeBeanReference_or Collection that will need to be resolved._<li>An ordinary object or {@code null}, in which case it's left alone._@param argName the name of the argument that the value is defined for_@param value the value object to resolve_@return the resolved object;public Object resolveValueIfNecessary(Object argName, Object value) {_		_		_		if (value instanceof RuntimeBeanReference) {_			RuntimeBeanReference ref = (RuntimeBeanReference) value__			return resolveReference(argName, ref)__		}_		else if (value instanceof RuntimeBeanNameReference) {_			String refName = ((RuntimeBeanNameReference) value).getBeanName()__			refName = String.valueOf(evaluate(refName))__			if (!this.beanFactory.containsBean(refName)) {_				throw new BeanDefinitionStoreException(_						"Invalid bean name '" + refName + "' in bean reference for " + argName)__			}_			return refName__		}_		else if (value instanceof BeanDefinitionHolder) {_			_			BeanDefinitionHolder bdHolder = (BeanDefinitionHolder) value__			return resolveInnerBean(argName, bdHolder.getBeanName(), bdHolder.getBeanDefinition())__		}_		else if (value instanceof BeanDefinition) {_			_			BeanDefinition bd = (BeanDefinition) value__			return resolveInnerBean(argName, "(inner bean)", bd)__		}_		else if (value instanceof ManagedArray) {_			_			ManagedArray array = (ManagedArray) value__			Class<?> elementType = array.resolvedElementType__			if (elementType == null) {_				String elementTypeName = array.getElementTypeName()__				if (StringUtils.hasText(elementTypeName)) {_					try {_						elementType = ClassUtils.forName(elementTypeName, this.beanFactory.getBeanClassLoader())__						array.resolvedElementType = elementType__					}_					catch (Throwable ex) {_						_						throw new BeanCreationException(_								this.beanDefinition.getResourceDescription(), this.beanName,_								"Error resolving array type for " + argName, ex)__					}_				}_				else {_					elementType = Object.class__				}_			}_			return resolveManagedArray(argName, (List<?>) value, elementType)__		}_		else if (value instanceof ManagedList) {_			_			return resolveManagedList(argName, (List<?>) value)__		}_		else if (value instanceof ManagedSet) {_			_			return resolveManagedSet(argName, (Set<?>) value)__		}_		else if (value instanceof ManagedMap) {_			_			return resolveManagedMap(argName, (Map<?, ?>) value)__		}_		else if (value instanceof ManagedProperties) {_			Properties original = (Properties) value__			Properties copy = new Properties()__			for (Map.Entry<Object, Object> propEntry : original.entrySet()) {_				Object propKey = propEntry.getKey()__				Object propValue = propEntry.getValue()__				if (propKey instanceof TypedStringValue) {_					propKey = evaluate((TypedStringValue) propKey)__				}_				if (propValue instanceof TypedStringValue) {_					propValue = evaluate((TypedStringValue) propValue)__				}_				copy.put(propKey, propValue)__			}_			return copy__		}_		else if (value instanceof TypedStringValue) {_			_			TypedStringValue typedStringValue = (TypedStringValue) value__			Object valueObject = evaluate(typedStringValue)__			try {_				Class<?> resolvedTargetType = resolveTargetType(typedStringValue)__				if (resolvedTargetType != null) {_					return this.typeConverter.convertIfNecessary(valueObject, resolvedTargetType)__				}_				else {_					return valueObject__				}_			}_			catch (Throwable ex) {_				_				throw new BeanCreationException(_						this.beanDefinition.getResourceDescription(), this.beanName,_						"Error converting typed String value for " + argName, ex)__			}_		}_		else {_			return evaluate(value)__		}_	};given,a,property,value,return,a,value,resolving,any,references,to,other,beans,in,the,factory,if,necessary,the,value,could,be,li,a,bean,definition,which,leads,to,the,creation,of,a,corresponding,new,bean,instance,singleton,flags,and,names,of,such,inner,beans,are,always,ignored,inner,beans,are,anonymous,prototypes,li,a,runtime,bean,reference,which,must,be,resolved,li,a,managed,list,this,is,a,special,collection,that,may,contain,runtime,bean,references,or,collections,that,will,need,to,be,resolved,li,a,managed,set,may,also,contain,runtime,bean,references,or,collections,that,will,need,to,be,resolved,li,a,managed,map,in,this,case,the,value,may,be,a,runtime,bean,reference,or,collection,that,will,need,to,be,resolved,li,an,ordinary,object,or,code,null,in,which,case,it,s,left,alone,param,arg,name,the,name,of,the,argument,that,the,value,is,defined,for,param,value,the,value,object,to,resolve,return,the,resolved,object;public,object,resolve,value,if,necessary,object,arg,name,object,value,if,value,instanceof,runtime,bean,reference,runtime,bean,reference,ref,runtime,bean,reference,value,return,resolve,reference,arg,name,ref,else,if,value,instanceof,runtime,bean,name,reference,string,ref,name,runtime,bean,name,reference,value,get,bean,name,ref,name,string,value,of,evaluate,ref,name,if,this,bean,factory,contains,bean,ref,name,throw,new,bean,definition,store,exception,invalid,bean,name,ref,name,in,bean,reference,for,arg,name,return,ref,name,else,if,value,instanceof,bean,definition,holder,bean,definition,holder,bd,holder,bean,definition,holder,value,return,resolve,inner,bean,arg,name,bd,holder,get,bean,name,bd,holder,get,bean,definition,else,if,value,instanceof,bean,definition,bean,definition,bd,bean,definition,value,return,resolve,inner,bean,arg,name,inner,bean,bd,else,if,value,instanceof,managed,array,managed,array,array,managed,array,value,class,element,type,array,resolved,element,type,if,element,type,null,string,element,type,name,array,get,element,type,name,if,string,utils,has,text,element,type,name,try,element,type,class,utils,for,name,element,type,name,this,bean,factory,get,bean,class,loader,array,resolved,element,type,element,type,catch,throwable,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,error,resolving,array,type,for,arg,name,ex,else,element,type,object,class,return,resolve,managed,array,arg,name,list,value,element,type,else,if,value,instanceof,managed,list,return,resolve,managed,list,arg,name,list,value,else,if,value,instanceof,managed,set,return,resolve,managed,set,arg,name,set,value,else,if,value,instanceof,managed,map,return,resolve,managed,map,arg,name,map,value,else,if,value,instanceof,managed,properties,properties,original,properties,value,properties,copy,new,properties,for,map,entry,object,object,prop,entry,original,entry,set,object,prop,key,prop,entry,get,key,object,prop,value,prop,entry,get,value,if,prop,key,instanceof,typed,string,value,prop,key,evaluate,typed,string,value,prop,key,if,prop,value,instanceof,typed,string,value,prop,value,evaluate,typed,string,value,prop,value,copy,put,prop,key,prop,value,return,copy,else,if,value,instanceof,typed,string,value,typed,string,value,typed,string,value,typed,string,value,value,object,value,object,evaluate,typed,string,value,try,class,resolved,target,type,resolve,target,type,typed,string,value,if,resolved,target,type,null,return,this,type,converter,convert,if,necessary,value,object,resolved,target,type,else,return,value,object,catch,throwable,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,error,converting,typed,string,value,for,arg,name,ex,else,return,evaluate,value
BeanDefinitionValueResolver -> public Object resolveValueIfNecessary(Object argName, Object value);1386621944;Given a PropertyValue, return a value, resolving any references to other_beans in the factory if necessary. The value could be:_<li>A BeanDefinition, which leads to the creation of a corresponding_new bean instance. Singleton flags and names of such "inner beans"_are always ignored: Inner beans are anonymous prototypes._<li>A RuntimeBeanReference, which must be resolved._<li>A ManagedList. This is a special collection that may contain_RuntimeBeanReferences or Collections that will need to be resolved._<li>A ManagedSet. May also contain RuntimeBeanReferences or_Collections that will need to be resolved._<li>A ManagedMap. In this case the value may be a RuntimeBeanReference_or Collection that will need to be resolved._<li>An ordinary object or {@code null}, in which case it's left alone._@param argName the name of the argument that the value is defined for_@param value the value object to resolve_@return the resolved object;public Object resolveValueIfNecessary(Object argName, Object value) {_		_		_		if (value instanceof RuntimeBeanReference) {_			RuntimeBeanReference ref = (RuntimeBeanReference) value__			return resolveReference(argName, ref)__		}_		else if (value instanceof RuntimeBeanNameReference) {_			String refName = ((RuntimeBeanNameReference) value).getBeanName()__			refName = String.valueOf(evaluate(refName))__			if (!this.beanFactory.containsBean(refName)) {_				throw new BeanDefinitionStoreException(_						"Invalid bean name '" + refName + "' in bean reference for " + argName)__			}_			return refName__		}_		else if (value instanceof BeanDefinitionHolder) {_			_			BeanDefinitionHolder bdHolder = (BeanDefinitionHolder) value__			return resolveInnerBean(argName, bdHolder.getBeanName(), bdHolder.getBeanDefinition())__		}_		else if (value instanceof BeanDefinition) {_			_			BeanDefinition bd = (BeanDefinition) value__			return resolveInnerBean(argName, "(inner bean)", bd)__		}_		else if (value instanceof ManagedArray) {_			_			ManagedArray array = (ManagedArray) value__			Class<?> elementType = array.resolvedElementType__			if (elementType == null) {_				String elementTypeName = array.getElementTypeName()__				if (StringUtils.hasText(elementTypeName)) {_					try {_						elementType = ClassUtils.forName(elementTypeName, this.beanFactory.getBeanClassLoader())__						array.resolvedElementType = elementType__					}_					catch (Throwable ex) {_						_						throw new BeanCreationException(_								this.beanDefinition.getResourceDescription(), this.beanName,_								"Error resolving array type for " + argName, ex)__					}_				}_				else {_					elementType = Object.class__				}_			}_			return resolveManagedArray(argName, (List<?>) value, elementType)__		}_		else if (value instanceof ManagedList) {_			_			return resolveManagedList(argName, (List<?>) value)__		}_		else if (value instanceof ManagedSet) {_			_			return resolveManagedSet(argName, (Set<?>) value)__		}_		else if (value instanceof ManagedMap) {_			_			return resolveManagedMap(argName, (Map<?, ?>) value)__		}_		else if (value instanceof ManagedProperties) {_			Properties original = (Properties) value__			Properties copy = new Properties()__			for (Map.Entry<Object, Object> propEntry : original.entrySet()) {_				Object propKey = propEntry.getKey()__				Object propValue = propEntry.getValue()__				if (propKey instanceof TypedStringValue) {_					propKey = evaluate((TypedStringValue) propKey)__				}_				if (propValue instanceof TypedStringValue) {_					propValue = evaluate((TypedStringValue) propValue)__				}_				copy.put(propKey, propValue)__			}_			return copy__		}_		else if (value instanceof TypedStringValue) {_			_			TypedStringValue typedStringValue = (TypedStringValue) value__			Object valueObject = evaluate(typedStringValue)__			try {_				Class<?> resolvedTargetType = resolveTargetType(typedStringValue)__				if (resolvedTargetType != null) {_					return this.typeConverter.convertIfNecessary(valueObject, resolvedTargetType)__				}_				else {_					return valueObject__				}_			}_			catch (Throwable ex) {_				_				throw new BeanCreationException(_						this.beanDefinition.getResourceDescription(), this.beanName,_						"Error converting typed String value for " + argName, ex)__			}_		}_		else {_			return evaluate(value)__		}_	};given,a,property,value,return,a,value,resolving,any,references,to,other,beans,in,the,factory,if,necessary,the,value,could,be,li,a,bean,definition,which,leads,to,the,creation,of,a,corresponding,new,bean,instance,singleton,flags,and,names,of,such,inner,beans,are,always,ignored,inner,beans,are,anonymous,prototypes,li,a,runtime,bean,reference,which,must,be,resolved,li,a,managed,list,this,is,a,special,collection,that,may,contain,runtime,bean,references,or,collections,that,will,need,to,be,resolved,li,a,managed,set,may,also,contain,runtime,bean,references,or,collections,that,will,need,to,be,resolved,li,a,managed,map,in,this,case,the,value,may,be,a,runtime,bean,reference,or,collection,that,will,need,to,be,resolved,li,an,ordinary,object,or,code,null,in,which,case,it,s,left,alone,param,arg,name,the,name,of,the,argument,that,the,value,is,defined,for,param,value,the,value,object,to,resolve,return,the,resolved,object;public,object,resolve,value,if,necessary,object,arg,name,object,value,if,value,instanceof,runtime,bean,reference,runtime,bean,reference,ref,runtime,bean,reference,value,return,resolve,reference,arg,name,ref,else,if,value,instanceof,runtime,bean,name,reference,string,ref,name,runtime,bean,name,reference,value,get,bean,name,ref,name,string,value,of,evaluate,ref,name,if,this,bean,factory,contains,bean,ref,name,throw,new,bean,definition,store,exception,invalid,bean,name,ref,name,in,bean,reference,for,arg,name,return,ref,name,else,if,value,instanceof,bean,definition,holder,bean,definition,holder,bd,holder,bean,definition,holder,value,return,resolve,inner,bean,arg,name,bd,holder,get,bean,name,bd,holder,get,bean,definition,else,if,value,instanceof,bean,definition,bean,definition,bd,bean,definition,value,return,resolve,inner,bean,arg,name,inner,bean,bd,else,if,value,instanceof,managed,array,managed,array,array,managed,array,value,class,element,type,array,resolved,element,type,if,element,type,null,string,element,type,name,array,get,element,type,name,if,string,utils,has,text,element,type,name,try,element,type,class,utils,for,name,element,type,name,this,bean,factory,get,bean,class,loader,array,resolved,element,type,element,type,catch,throwable,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,error,resolving,array,type,for,arg,name,ex,else,element,type,object,class,return,resolve,managed,array,arg,name,list,value,element,type,else,if,value,instanceof,managed,list,return,resolve,managed,list,arg,name,list,value,else,if,value,instanceof,managed,set,return,resolve,managed,set,arg,name,set,value,else,if,value,instanceof,managed,map,return,resolve,managed,map,arg,name,map,value,else,if,value,instanceof,managed,properties,properties,original,properties,value,properties,copy,new,properties,for,map,entry,object,object,prop,entry,original,entry,set,object,prop,key,prop,entry,get,key,object,prop,value,prop,entry,get,value,if,prop,key,instanceof,typed,string,value,prop,key,evaluate,typed,string,value,prop,key,if,prop,value,instanceof,typed,string,value,prop,value,evaluate,typed,string,value,prop,value,copy,put,prop,key,prop,value,return,copy,else,if,value,instanceof,typed,string,value,typed,string,value,typed,string,value,typed,string,value,value,object,value,object,evaluate,typed,string,value,try,class,resolved,target,type,resolve,target,type,typed,string,value,if,resolved,target,type,null,return,this,type,converter,convert,if,necessary,value,object,resolved,target,type,else,return,value,object,catch,throwable,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,error,converting,typed,string,value,for,arg,name,ex,else,return,evaluate,value
BeanDefinitionValueResolver -> public Object resolveValueIfNecessary(Object argName, Object value);1394825889;Given a PropertyValue, return a value, resolving any references to other_beans in the factory if necessary. The value could be:_<li>A BeanDefinition, which leads to the creation of a corresponding_new bean instance. Singleton flags and names of such "inner beans"_are always ignored: Inner beans are anonymous prototypes._<li>A RuntimeBeanReference, which must be resolved._<li>A ManagedList. This is a special collection that may contain_RuntimeBeanReferences or Collections that will need to be resolved._<li>A ManagedSet. May also contain RuntimeBeanReferences or_Collections that will need to be resolved._<li>A ManagedMap. In this case the value may be a RuntimeBeanReference_or Collection that will need to be resolved._<li>An ordinary object or {@code null}, in which case it's left alone._@param argName the name of the argument that the value is defined for_@param value the value object to resolve_@return the resolved object;public Object resolveValueIfNecessary(Object argName, Object value) {_		_		_		if (value instanceof RuntimeBeanReference) {_			RuntimeBeanReference ref = (RuntimeBeanReference) value__			return resolveReference(argName, ref)__		}_		else if (value instanceof RuntimeBeanNameReference) {_			String refName = ((RuntimeBeanNameReference) value).getBeanName()__			refName = String.valueOf(evaluate(refName))__			if (!this.beanFactory.containsBean(refName)) {_				throw new BeanDefinitionStoreException(_						"Invalid bean name '" + refName + "' in bean reference for " + argName)__			}_			return refName__		}_		else if (value instanceof BeanDefinitionHolder) {_			_			BeanDefinitionHolder bdHolder = (BeanDefinitionHolder) value__			return resolveInnerBean(argName, bdHolder.getBeanName(), bdHolder.getBeanDefinition())__		}_		else if (value instanceof BeanDefinition) {_			_			BeanDefinition bd = (BeanDefinition) value__			String innerBeanName = "(inner bean)" + BeanFactoryUtils.GENERATED_BEAN_NAME_SEPARATOR +_					ObjectUtils.getIdentityHexString(bd)__			return resolveInnerBean(argName, innerBeanName, bd)__		}_		else if (value instanceof ManagedArray) {_			_			ManagedArray array = (ManagedArray) value__			Class<?> elementType = array.resolvedElementType__			if (elementType == null) {_				String elementTypeName = array.getElementTypeName()__				if (StringUtils.hasText(elementTypeName)) {_					try {_						elementType = ClassUtils.forName(elementTypeName, this.beanFactory.getBeanClassLoader())__						array.resolvedElementType = elementType__					}_					catch (Throwable ex) {_						_						throw new BeanCreationException(_								this.beanDefinition.getResourceDescription(), this.beanName,_								"Error resolving array type for " + argName, ex)__					}_				}_				else {_					elementType = Object.class__				}_			}_			return resolveManagedArray(argName, (List<?>) value, elementType)__		}_		else if (value instanceof ManagedList) {_			_			return resolveManagedList(argName, (List<?>) value)__		}_		else if (value instanceof ManagedSet) {_			_			return resolveManagedSet(argName, (Set<?>) value)__		}_		else if (value instanceof ManagedMap) {_			_			return resolveManagedMap(argName, (Map<?, ?>) value)__		}_		else if (value instanceof ManagedProperties) {_			Properties original = (Properties) value__			Properties copy = new Properties()__			for (Map.Entry<Object, Object> propEntry : original.entrySet()) {_				Object propKey = propEntry.getKey()__				Object propValue = propEntry.getValue()__				if (propKey instanceof TypedStringValue) {_					propKey = evaluate((TypedStringValue) propKey)__				}_				if (propValue instanceof TypedStringValue) {_					propValue = evaluate((TypedStringValue) propValue)__				}_				copy.put(propKey, propValue)__			}_			return copy__		}_		else if (value instanceof TypedStringValue) {_			_			TypedStringValue typedStringValue = (TypedStringValue) value__			Object valueObject = evaluate(typedStringValue)__			try {_				Class<?> resolvedTargetType = resolveTargetType(typedStringValue)__				if (resolvedTargetType != null) {_					return this.typeConverter.convertIfNecessary(valueObject, resolvedTargetType)__				}_				else {_					return valueObject__				}_			}_			catch (Throwable ex) {_				_				throw new BeanCreationException(_						this.beanDefinition.getResourceDescription(), this.beanName,_						"Error converting typed String value for " + argName, ex)__			}_		}_		else {_			return evaluate(value)__		}_	};given,a,property,value,return,a,value,resolving,any,references,to,other,beans,in,the,factory,if,necessary,the,value,could,be,li,a,bean,definition,which,leads,to,the,creation,of,a,corresponding,new,bean,instance,singleton,flags,and,names,of,such,inner,beans,are,always,ignored,inner,beans,are,anonymous,prototypes,li,a,runtime,bean,reference,which,must,be,resolved,li,a,managed,list,this,is,a,special,collection,that,may,contain,runtime,bean,references,or,collections,that,will,need,to,be,resolved,li,a,managed,set,may,also,contain,runtime,bean,references,or,collections,that,will,need,to,be,resolved,li,a,managed,map,in,this,case,the,value,may,be,a,runtime,bean,reference,or,collection,that,will,need,to,be,resolved,li,an,ordinary,object,or,code,null,in,which,case,it,s,left,alone,param,arg,name,the,name,of,the,argument,that,the,value,is,defined,for,param,value,the,value,object,to,resolve,return,the,resolved,object;public,object,resolve,value,if,necessary,object,arg,name,object,value,if,value,instanceof,runtime,bean,reference,runtime,bean,reference,ref,runtime,bean,reference,value,return,resolve,reference,arg,name,ref,else,if,value,instanceof,runtime,bean,name,reference,string,ref,name,runtime,bean,name,reference,value,get,bean,name,ref,name,string,value,of,evaluate,ref,name,if,this,bean,factory,contains,bean,ref,name,throw,new,bean,definition,store,exception,invalid,bean,name,ref,name,in,bean,reference,for,arg,name,return,ref,name,else,if,value,instanceof,bean,definition,holder,bean,definition,holder,bd,holder,bean,definition,holder,value,return,resolve,inner,bean,arg,name,bd,holder,get,bean,name,bd,holder,get,bean,definition,else,if,value,instanceof,bean,definition,bean,definition,bd,bean,definition,value,string,inner,bean,name,inner,bean,bean,factory,utils,object,utils,get,identity,hex,string,bd,return,resolve,inner,bean,arg,name,inner,bean,name,bd,else,if,value,instanceof,managed,array,managed,array,array,managed,array,value,class,element,type,array,resolved,element,type,if,element,type,null,string,element,type,name,array,get,element,type,name,if,string,utils,has,text,element,type,name,try,element,type,class,utils,for,name,element,type,name,this,bean,factory,get,bean,class,loader,array,resolved,element,type,element,type,catch,throwable,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,error,resolving,array,type,for,arg,name,ex,else,element,type,object,class,return,resolve,managed,array,arg,name,list,value,element,type,else,if,value,instanceof,managed,list,return,resolve,managed,list,arg,name,list,value,else,if,value,instanceof,managed,set,return,resolve,managed,set,arg,name,set,value,else,if,value,instanceof,managed,map,return,resolve,managed,map,arg,name,map,value,else,if,value,instanceof,managed,properties,properties,original,properties,value,properties,copy,new,properties,for,map,entry,object,object,prop,entry,original,entry,set,object,prop,key,prop,entry,get,key,object,prop,value,prop,entry,get,value,if,prop,key,instanceof,typed,string,value,prop,key,evaluate,typed,string,value,prop,key,if,prop,value,instanceof,typed,string,value,prop,value,evaluate,typed,string,value,prop,value,copy,put,prop,key,prop,value,return,copy,else,if,value,instanceof,typed,string,value,typed,string,value,typed,string,value,typed,string,value,value,object,value,object,evaluate,typed,string,value,try,class,resolved,target,type,resolve,target,type,typed,string,value,if,resolved,target,type,null,return,this,type,converter,convert,if,necessary,value,object,resolved,target,type,else,return,value,object,catch,throwable,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,error,converting,typed,string,value,for,arg,name,ex,else,return,evaluate,value
BeanDefinitionValueResolver -> public Object resolveValueIfNecessary(Object argName, Object value);1414738527;Given a PropertyValue, return a value, resolving any references to other_beans in the factory if necessary. The value could be:_<li>A BeanDefinition, which leads to the creation of a corresponding_new bean instance. Singleton flags and names of such "inner beans"_are always ignored: Inner beans are anonymous prototypes._<li>A RuntimeBeanReference, which must be resolved._<li>A ManagedList. This is a special collection that may contain_RuntimeBeanReferences or Collections that will need to be resolved._<li>A ManagedSet. May also contain RuntimeBeanReferences or_Collections that will need to be resolved._<li>A ManagedMap. In this case the value may be a RuntimeBeanReference_or Collection that will need to be resolved._<li>An ordinary object or {@code null}, in which case it's left alone._@param argName the name of the argument that the value is defined for_@param value the value object to resolve_@return the resolved object;public Object resolveValueIfNecessary(Object argName, Object value) {_		_		_		if (value instanceof RuntimeBeanReference) {_			RuntimeBeanReference ref = (RuntimeBeanReference) value__			return resolveReference(argName, ref)__		}_		else if (value instanceof RuntimeBeanNameReference) {_			String refName = ((RuntimeBeanNameReference) value).getBeanName()__			refName = String.valueOf(evaluate(refName))__			if (!this.beanFactory.containsBean(refName)) {_				throw new BeanDefinitionStoreException(_						"Invalid bean name '" + refName + "' in bean reference for " + argName)__			}_			return refName__		}_		else if (value instanceof BeanDefinitionHolder) {_			_			BeanDefinitionHolder bdHolder = (BeanDefinitionHolder) value__			return resolveInnerBean(argName, bdHolder.getBeanName(), bdHolder.getBeanDefinition())__		}_		else if (value instanceof BeanDefinition) {_			_			BeanDefinition bd = (BeanDefinition) value__			String innerBeanName = "(inner bean)" + BeanFactoryUtils.GENERATED_BEAN_NAME_SEPARATOR +_					ObjectUtils.getIdentityHexString(bd)__			return resolveInnerBean(argName, innerBeanName, bd)__		}_		else if (value instanceof ManagedArray) {_			_			ManagedArray array = (ManagedArray) value__			Class<?> elementType = array.resolvedElementType__			if (elementType == null) {_				String elementTypeName = array.getElementTypeName()__				if (StringUtils.hasText(elementTypeName)) {_					try {_						elementType = ClassUtils.forName(elementTypeName, this.beanFactory.getBeanClassLoader())__						array.resolvedElementType = elementType__					}_					catch (Throwable ex) {_						_						throw new BeanCreationException(_								this.beanDefinition.getResourceDescription(), this.beanName,_								"Error resolving array type for " + argName, ex)__					}_				}_				else {_					elementType = Object.class__				}_			}_			return resolveManagedArray(argName, (List<?>) value, elementType)__		}_		else if (value instanceof ManagedList) {_			_			return resolveManagedList(argName, (List<?>) value)__		}_		else if (value instanceof ManagedSet) {_			_			return resolveManagedSet(argName, (Set<?>) value)__		}_		else if (value instanceof ManagedMap) {_			_			return resolveManagedMap(argName, (Map<?, ?>) value)__		}_		else if (value instanceof ManagedProperties) {_			Properties original = (Properties) value__			Properties copy = new Properties()__			for (Map.Entry<Object, Object> propEntry : original.entrySet()) {_				Object propKey = propEntry.getKey()__				Object propValue = propEntry.getValue()__				if (propKey instanceof TypedStringValue) {_					propKey = evaluate((TypedStringValue) propKey)__				}_				if (propValue instanceof TypedStringValue) {_					propValue = evaluate((TypedStringValue) propValue)__				}_				copy.put(propKey, propValue)__			}_			return copy__		}_		else if (value instanceof TypedStringValue) {_			_			TypedStringValue typedStringValue = (TypedStringValue) value__			Object valueObject = evaluate(typedStringValue)__			try {_				Class<?> resolvedTargetType = resolveTargetType(typedStringValue)__				if (resolvedTargetType != null) {_					return this.typeConverter.convertIfNecessary(valueObject, resolvedTargetType)__				}_				else {_					return valueObject__				}_			}_			catch (Throwable ex) {_				_				throw new BeanCreationException(_						this.beanDefinition.getResourceDescription(), this.beanName,_						"Error converting typed String value for " + argName, ex)__			}_		}_		else if (value instanceof String[]) {_			String[] values = (String[]) value__			Object[] resolvedValues = new Object[values.length]__			for (int i = 0_ i < values.length_ i++) {_				resolvedValues[i] = evaluate(values[i])__			}_			return resolvedValues__		}_		else {_			return evaluate(value)__		}_	};given,a,property,value,return,a,value,resolving,any,references,to,other,beans,in,the,factory,if,necessary,the,value,could,be,li,a,bean,definition,which,leads,to,the,creation,of,a,corresponding,new,bean,instance,singleton,flags,and,names,of,such,inner,beans,are,always,ignored,inner,beans,are,anonymous,prototypes,li,a,runtime,bean,reference,which,must,be,resolved,li,a,managed,list,this,is,a,special,collection,that,may,contain,runtime,bean,references,or,collections,that,will,need,to,be,resolved,li,a,managed,set,may,also,contain,runtime,bean,references,or,collections,that,will,need,to,be,resolved,li,a,managed,map,in,this,case,the,value,may,be,a,runtime,bean,reference,or,collection,that,will,need,to,be,resolved,li,an,ordinary,object,or,code,null,in,which,case,it,s,left,alone,param,arg,name,the,name,of,the,argument,that,the,value,is,defined,for,param,value,the,value,object,to,resolve,return,the,resolved,object;public,object,resolve,value,if,necessary,object,arg,name,object,value,if,value,instanceof,runtime,bean,reference,runtime,bean,reference,ref,runtime,bean,reference,value,return,resolve,reference,arg,name,ref,else,if,value,instanceof,runtime,bean,name,reference,string,ref,name,runtime,bean,name,reference,value,get,bean,name,ref,name,string,value,of,evaluate,ref,name,if,this,bean,factory,contains,bean,ref,name,throw,new,bean,definition,store,exception,invalid,bean,name,ref,name,in,bean,reference,for,arg,name,return,ref,name,else,if,value,instanceof,bean,definition,holder,bean,definition,holder,bd,holder,bean,definition,holder,value,return,resolve,inner,bean,arg,name,bd,holder,get,bean,name,bd,holder,get,bean,definition,else,if,value,instanceof,bean,definition,bean,definition,bd,bean,definition,value,string,inner,bean,name,inner,bean,bean,factory,utils,object,utils,get,identity,hex,string,bd,return,resolve,inner,bean,arg,name,inner,bean,name,bd,else,if,value,instanceof,managed,array,managed,array,array,managed,array,value,class,element,type,array,resolved,element,type,if,element,type,null,string,element,type,name,array,get,element,type,name,if,string,utils,has,text,element,type,name,try,element,type,class,utils,for,name,element,type,name,this,bean,factory,get,bean,class,loader,array,resolved,element,type,element,type,catch,throwable,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,error,resolving,array,type,for,arg,name,ex,else,element,type,object,class,return,resolve,managed,array,arg,name,list,value,element,type,else,if,value,instanceof,managed,list,return,resolve,managed,list,arg,name,list,value,else,if,value,instanceof,managed,set,return,resolve,managed,set,arg,name,set,value,else,if,value,instanceof,managed,map,return,resolve,managed,map,arg,name,map,value,else,if,value,instanceof,managed,properties,properties,original,properties,value,properties,copy,new,properties,for,map,entry,object,object,prop,entry,original,entry,set,object,prop,key,prop,entry,get,key,object,prop,value,prop,entry,get,value,if,prop,key,instanceof,typed,string,value,prop,key,evaluate,typed,string,value,prop,key,if,prop,value,instanceof,typed,string,value,prop,value,evaluate,typed,string,value,prop,value,copy,put,prop,key,prop,value,return,copy,else,if,value,instanceof,typed,string,value,typed,string,value,typed,string,value,typed,string,value,value,object,value,object,evaluate,typed,string,value,try,class,resolved,target,type,resolve,target,type,typed,string,value,if,resolved,target,type,null,return,this,type,converter,convert,if,necessary,value,object,resolved,target,type,else,return,value,object,catch,throwable,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,error,converting,typed,string,value,for,arg,name,ex,else,if,value,instanceof,string,string,values,string,value,object,resolved,values,new,object,values,length,for,int,i,0,i,values,length,i,resolved,values,i,evaluate,values,i,return,resolved,values,else,return,evaluate,value
BeanDefinitionValueResolver -> public Object resolveValueIfNecessary(Object argName, Object value);1414774626;Given a PropertyValue, return a value, resolving any references to other_beans in the factory if necessary. The value could be:_<li>A BeanDefinition, which leads to the creation of a corresponding_new bean instance. Singleton flags and names of such "inner beans"_are always ignored: Inner beans are anonymous prototypes._<li>A RuntimeBeanReference, which must be resolved._<li>A ManagedList. This is a special collection that may contain_RuntimeBeanReferences or Collections that will need to be resolved._<li>A ManagedSet. May also contain RuntimeBeanReferences or_Collections that will need to be resolved._<li>A ManagedMap. In this case the value may be a RuntimeBeanReference_or Collection that will need to be resolved._<li>An ordinary object or {@code null}, in which case it's left alone._@param argName the name of the argument that the value is defined for_@param value the value object to resolve_@return the resolved object;public Object resolveValueIfNecessary(Object argName, Object value) {_		_		_		if (value instanceof RuntimeBeanReference) {_			RuntimeBeanReference ref = (RuntimeBeanReference) value__			return resolveReference(argName, ref)__		}_		else if (value instanceof RuntimeBeanNameReference) {_			String refName = ((RuntimeBeanNameReference) value).getBeanName()__			refName = String.valueOf(doEvaluate(refName))__			if (!this.beanFactory.containsBean(refName)) {_				throw new BeanDefinitionStoreException(_						"Invalid bean name '" + refName + "' in bean reference for " + argName)__			}_			return refName__		}_		else if (value instanceof BeanDefinitionHolder) {_			_			BeanDefinitionHolder bdHolder = (BeanDefinitionHolder) value__			return resolveInnerBean(argName, bdHolder.getBeanName(), bdHolder.getBeanDefinition())__		}_		else if (value instanceof BeanDefinition) {_			_			BeanDefinition bd = (BeanDefinition) value__			String innerBeanName = "(inner bean)" + BeanFactoryUtils.GENERATED_BEAN_NAME_SEPARATOR +_					ObjectUtils.getIdentityHexString(bd)__			return resolveInnerBean(argName, innerBeanName, bd)__		}_		else if (value instanceof ManagedArray) {_			_			ManagedArray array = (ManagedArray) value__			Class<?> elementType = array.resolvedElementType__			if (elementType == null) {_				String elementTypeName = array.getElementTypeName()__				if (StringUtils.hasText(elementTypeName)) {_					try {_						elementType = ClassUtils.forName(elementTypeName, this.beanFactory.getBeanClassLoader())__						array.resolvedElementType = elementType__					}_					catch (Throwable ex) {_						_						throw new BeanCreationException(_								this.beanDefinition.getResourceDescription(), this.beanName,_								"Error resolving array type for " + argName, ex)__					}_				}_				else {_					elementType = Object.class__				}_			}_			return resolveManagedArray(argName, (List<?>) value, elementType)__		}_		else if (value instanceof ManagedList) {_			_			return resolveManagedList(argName, (List<?>) value)__		}_		else if (value instanceof ManagedSet) {_			_			return resolveManagedSet(argName, (Set<?>) value)__		}_		else if (value instanceof ManagedMap) {_			_			return resolveManagedMap(argName, (Map<?, ?>) value)__		}_		else if (value instanceof ManagedProperties) {_			Properties original = (Properties) value__			Properties copy = new Properties()__			for (Map.Entry<Object, Object> propEntry : original.entrySet()) {_				Object propKey = propEntry.getKey()__				Object propValue = propEntry.getValue()__				if (propKey instanceof TypedStringValue) {_					propKey = evaluate((TypedStringValue) propKey)__				}_				if (propValue instanceof TypedStringValue) {_					propValue = evaluate((TypedStringValue) propValue)__				}_				copy.put(propKey, propValue)__			}_			return copy__		}_		else if (value instanceof TypedStringValue) {_			_			TypedStringValue typedStringValue = (TypedStringValue) value__			Object valueObject = evaluate(typedStringValue)__			try {_				Class<?> resolvedTargetType = resolveTargetType(typedStringValue)__				if (resolvedTargetType != null) {_					return this.typeConverter.convertIfNecessary(valueObject, resolvedTargetType)__				}_				else {_					return valueObject__				}_			}_			catch (Throwable ex) {_				_				throw new BeanCreationException(_						this.beanDefinition.getResourceDescription(), this.beanName,_						"Error converting typed String value for " + argName, ex)__			}_		}_		else {_			return evaluate(value)__		}_	};given,a,property,value,return,a,value,resolving,any,references,to,other,beans,in,the,factory,if,necessary,the,value,could,be,li,a,bean,definition,which,leads,to,the,creation,of,a,corresponding,new,bean,instance,singleton,flags,and,names,of,such,inner,beans,are,always,ignored,inner,beans,are,anonymous,prototypes,li,a,runtime,bean,reference,which,must,be,resolved,li,a,managed,list,this,is,a,special,collection,that,may,contain,runtime,bean,references,or,collections,that,will,need,to,be,resolved,li,a,managed,set,may,also,contain,runtime,bean,references,or,collections,that,will,need,to,be,resolved,li,a,managed,map,in,this,case,the,value,may,be,a,runtime,bean,reference,or,collection,that,will,need,to,be,resolved,li,an,ordinary,object,or,code,null,in,which,case,it,s,left,alone,param,arg,name,the,name,of,the,argument,that,the,value,is,defined,for,param,value,the,value,object,to,resolve,return,the,resolved,object;public,object,resolve,value,if,necessary,object,arg,name,object,value,if,value,instanceof,runtime,bean,reference,runtime,bean,reference,ref,runtime,bean,reference,value,return,resolve,reference,arg,name,ref,else,if,value,instanceof,runtime,bean,name,reference,string,ref,name,runtime,bean,name,reference,value,get,bean,name,ref,name,string,value,of,do,evaluate,ref,name,if,this,bean,factory,contains,bean,ref,name,throw,new,bean,definition,store,exception,invalid,bean,name,ref,name,in,bean,reference,for,arg,name,return,ref,name,else,if,value,instanceof,bean,definition,holder,bean,definition,holder,bd,holder,bean,definition,holder,value,return,resolve,inner,bean,arg,name,bd,holder,get,bean,name,bd,holder,get,bean,definition,else,if,value,instanceof,bean,definition,bean,definition,bd,bean,definition,value,string,inner,bean,name,inner,bean,bean,factory,utils,object,utils,get,identity,hex,string,bd,return,resolve,inner,bean,arg,name,inner,bean,name,bd,else,if,value,instanceof,managed,array,managed,array,array,managed,array,value,class,element,type,array,resolved,element,type,if,element,type,null,string,element,type,name,array,get,element,type,name,if,string,utils,has,text,element,type,name,try,element,type,class,utils,for,name,element,type,name,this,bean,factory,get,bean,class,loader,array,resolved,element,type,element,type,catch,throwable,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,error,resolving,array,type,for,arg,name,ex,else,element,type,object,class,return,resolve,managed,array,arg,name,list,value,element,type,else,if,value,instanceof,managed,list,return,resolve,managed,list,arg,name,list,value,else,if,value,instanceof,managed,set,return,resolve,managed,set,arg,name,set,value,else,if,value,instanceof,managed,map,return,resolve,managed,map,arg,name,map,value,else,if,value,instanceof,managed,properties,properties,original,properties,value,properties,copy,new,properties,for,map,entry,object,object,prop,entry,original,entry,set,object,prop,key,prop,entry,get,key,object,prop,value,prop,entry,get,value,if,prop,key,instanceof,typed,string,value,prop,key,evaluate,typed,string,value,prop,key,if,prop,value,instanceof,typed,string,value,prop,value,evaluate,typed,string,value,prop,value,copy,put,prop,key,prop,value,return,copy,else,if,value,instanceof,typed,string,value,typed,string,value,typed,string,value,typed,string,value,value,object,value,object,evaluate,typed,string,value,try,class,resolved,target,type,resolve,target,type,typed,string,value,if,resolved,target,type,null,return,this,type,converter,convert,if,necessary,value,object,resolved,target,type,else,return,value,object,catch,throwable,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,error,converting,typed,string,value,for,arg,name,ex,else,return,evaluate,value
BeanDefinitionValueResolver -> public Object resolveValueIfNecessary(Object argName, Object value);1467730834;Given a PropertyValue, return a value, resolving any references to other_beans in the factory if necessary. The value could be:_<li>A BeanDefinition, which leads to the creation of a corresponding_new bean instance. Singleton flags and names of such "inner beans"_are always ignored: Inner beans are anonymous prototypes._<li>A RuntimeBeanReference, which must be resolved._<li>A ManagedList. This is a special collection that may contain_RuntimeBeanReferences or Collections that will need to be resolved._<li>A ManagedSet. May also contain RuntimeBeanReferences or_Collections that will need to be resolved._<li>A ManagedMap. In this case the value may be a RuntimeBeanReference_or Collection that will need to be resolved._<li>An ordinary object or {@code null}, in which case it's left alone._@param argName the name of the argument that the value is defined for_@param value the value object to resolve_@return the resolved object;public Object resolveValueIfNecessary(Object argName, Object value) {_		_		_		if (value instanceof RuntimeBeanReference) {_			RuntimeBeanReference ref = (RuntimeBeanReference) value__			return resolveReference(argName, ref)__		}_		else if (value instanceof RuntimeBeanNameReference) {_			String refName = ((RuntimeBeanNameReference) value).getBeanName()__			refName = String.valueOf(doEvaluate(refName))__			if (!this.beanFactory.containsBean(refName)) {_				throw new BeanDefinitionStoreException(_						"Invalid bean name '" + refName + "' in bean reference for " + argName)__			}_			return refName__		}_		else if (value instanceof BeanDefinitionHolder) {_			_			BeanDefinitionHolder bdHolder = (BeanDefinitionHolder) value__			return resolveInnerBean(argName, bdHolder.getBeanName(), bdHolder.getBeanDefinition())__		}_		else if (value instanceof BeanDefinition) {_			_			BeanDefinition bd = (BeanDefinition) value__			String innerBeanName = "(inner bean)" + BeanFactoryUtils.GENERATED_BEAN_NAME_SEPARATOR +_					ObjectUtils.getIdentityHexString(bd)__			return resolveInnerBean(argName, innerBeanName, bd)__		}_		else if (value instanceof ManagedArray) {_			_			ManagedArray array = (ManagedArray) value__			Class<?> elementType = array.resolvedElementType__			if (elementType == null) {_				String elementTypeName = array.getElementTypeName()__				if (StringUtils.hasText(elementTypeName)) {_					try {_						elementType = ClassUtils.forName(elementTypeName, this.beanFactory.getBeanClassLoader())__						array.resolvedElementType = elementType__					}_					catch (Throwable ex) {_						_						throw new BeanCreationException(_								this.beanDefinition.getResourceDescription(), this.beanName,_								"Error resolving array type for " + argName, ex)__					}_				}_				else {_					elementType = Object.class__				}_			}_			return resolveManagedArray(argName, (List<?>) value, elementType)__		}_		else if (value instanceof ManagedList) {_			_			return resolveManagedList(argName, (List<?>) value)__		}_		else if (value instanceof ManagedSet) {_			_			return resolveManagedSet(argName, (Set<?>) value)__		}_		else if (value instanceof ManagedMap) {_			_			return resolveManagedMap(argName, (Map<?, ?>) value)__		}_		else if (value instanceof ManagedProperties) {_			Properties original = (Properties) value__			Properties copy = new Properties()__			for (Map.Entry<Object, Object> propEntry : original.entrySet()) {_				Object propKey = propEntry.getKey()__				Object propValue = propEntry.getValue()__				if (propKey instanceof TypedStringValue) {_					propKey = evaluate((TypedStringValue) propKey)__				}_				if (propValue instanceof TypedStringValue) {_					propValue = evaluate((TypedStringValue) propValue)__				}_				copy.put(propKey, propValue)__			}_			return copy__		}_		else if (value instanceof TypedStringValue) {_			_			TypedStringValue typedStringValue = (TypedStringValue) value__			Object valueObject = evaluate(typedStringValue)__			try {_				Class<?> resolvedTargetType = resolveTargetType(typedStringValue)__				if (resolvedTargetType != null) {_					return this.typeConverter.convertIfNecessary(valueObject, resolvedTargetType)__				}_				else {_					return valueObject__				}_			}_			catch (Throwable ex) {_				_				throw new BeanCreationException(_						this.beanDefinition.getResourceDescription(), this.beanName,_						"Error converting typed String value for " + argName, ex)__			}_		}_		else {_			return evaluate(value)__		}_	};given,a,property,value,return,a,value,resolving,any,references,to,other,beans,in,the,factory,if,necessary,the,value,could,be,li,a,bean,definition,which,leads,to,the,creation,of,a,corresponding,new,bean,instance,singleton,flags,and,names,of,such,inner,beans,are,always,ignored,inner,beans,are,anonymous,prototypes,li,a,runtime,bean,reference,which,must,be,resolved,li,a,managed,list,this,is,a,special,collection,that,may,contain,runtime,bean,references,or,collections,that,will,need,to,be,resolved,li,a,managed,set,may,also,contain,runtime,bean,references,or,collections,that,will,need,to,be,resolved,li,a,managed,map,in,this,case,the,value,may,be,a,runtime,bean,reference,or,collection,that,will,need,to,be,resolved,li,an,ordinary,object,or,code,null,in,which,case,it,s,left,alone,param,arg,name,the,name,of,the,argument,that,the,value,is,defined,for,param,value,the,value,object,to,resolve,return,the,resolved,object;public,object,resolve,value,if,necessary,object,arg,name,object,value,if,value,instanceof,runtime,bean,reference,runtime,bean,reference,ref,runtime,bean,reference,value,return,resolve,reference,arg,name,ref,else,if,value,instanceof,runtime,bean,name,reference,string,ref,name,runtime,bean,name,reference,value,get,bean,name,ref,name,string,value,of,do,evaluate,ref,name,if,this,bean,factory,contains,bean,ref,name,throw,new,bean,definition,store,exception,invalid,bean,name,ref,name,in,bean,reference,for,arg,name,return,ref,name,else,if,value,instanceof,bean,definition,holder,bean,definition,holder,bd,holder,bean,definition,holder,value,return,resolve,inner,bean,arg,name,bd,holder,get,bean,name,bd,holder,get,bean,definition,else,if,value,instanceof,bean,definition,bean,definition,bd,bean,definition,value,string,inner,bean,name,inner,bean,bean,factory,utils,object,utils,get,identity,hex,string,bd,return,resolve,inner,bean,arg,name,inner,bean,name,bd,else,if,value,instanceof,managed,array,managed,array,array,managed,array,value,class,element,type,array,resolved,element,type,if,element,type,null,string,element,type,name,array,get,element,type,name,if,string,utils,has,text,element,type,name,try,element,type,class,utils,for,name,element,type,name,this,bean,factory,get,bean,class,loader,array,resolved,element,type,element,type,catch,throwable,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,error,resolving,array,type,for,arg,name,ex,else,element,type,object,class,return,resolve,managed,array,arg,name,list,value,element,type,else,if,value,instanceof,managed,list,return,resolve,managed,list,arg,name,list,value,else,if,value,instanceof,managed,set,return,resolve,managed,set,arg,name,set,value,else,if,value,instanceof,managed,map,return,resolve,managed,map,arg,name,map,value,else,if,value,instanceof,managed,properties,properties,original,properties,value,properties,copy,new,properties,for,map,entry,object,object,prop,entry,original,entry,set,object,prop,key,prop,entry,get,key,object,prop,value,prop,entry,get,value,if,prop,key,instanceof,typed,string,value,prop,key,evaluate,typed,string,value,prop,key,if,prop,value,instanceof,typed,string,value,prop,value,evaluate,typed,string,value,prop,value,copy,put,prop,key,prop,value,return,copy,else,if,value,instanceof,typed,string,value,typed,string,value,typed,string,value,typed,string,value,value,object,value,object,evaluate,typed,string,value,try,class,resolved,target,type,resolve,target,type,typed,string,value,if,resolved,target,type,null,return,this,type,converter,convert,if,necessary,value,object,resolved,target,type,else,return,value,object,catch,throwable,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,error,converting,typed,string,value,for,arg,name,ex,else,return,evaluate,value
BeanDefinitionValueResolver -> private List resolveManagedList(Object argName, List<?> ml);1328020251;For each element in the managed list, resolve reference if necessary.;private List resolveManagedList(Object argName, List<?> ml) {_		List<Object> resolved = new ArrayList<Object>(ml.size())__		for (int i = 0_ i < ml.size()_ i++) {_			resolved.add(_			    resolveValueIfNecessary(new KeyedArgName(argName, i), ml.get(i)))__		}_		return resolved__	};for,each,element,in,the,managed,list,resolve,reference,if,necessary;private,list,resolve,managed,list,object,arg,name,list,ml,list,object,resolved,new,array,list,object,ml,size,for,int,i,0,i,ml,size,i,resolved,add,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,ml,get,i,return,resolved
BeanDefinitionValueResolver -> private List resolveManagedList(Object argName, List<?> ml);1347282854;For each element in the managed list, resolve reference if necessary.;private List resolveManagedList(Object argName, List<?> ml) {_		List<Object> resolved = new ArrayList<Object>(ml.size())__		for (int i = 0_ i < ml.size()_ i++) {_			resolved.add(_			    resolveValueIfNecessary(new KeyedArgName(argName, i), ml.get(i)))__		}_		return resolved__	};for,each,element,in,the,managed,list,resolve,reference,if,necessary;private,list,resolve,managed,list,object,arg,name,list,ml,list,object,resolved,new,array,list,object,ml,size,for,int,i,0,i,ml,size,i,resolved,add,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,ml,get,i,return,resolved
BeanDefinitionValueResolver -> private List resolveManagedList(Object argName, List<?> ml);1356735495;For each element in the managed list, resolve reference if necessary.;private List resolveManagedList(Object argName, List<?> ml) {_		List<Object> resolved = new ArrayList<Object>(ml.size())__		for (int i = 0_ i < ml.size()_ i++) {_			resolved.add(_					resolveValueIfNecessary(new KeyedArgName(argName, i), ml.get(i)))__		}_		return resolved__	};for,each,element,in,the,managed,list,resolve,reference,if,necessary;private,list,resolve,managed,list,object,arg,name,list,ml,list,object,resolved,new,array,list,object,ml,size,for,int,i,0,i,ml,size,i,resolved,add,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,ml,get,i,return,resolved
BeanDefinitionValueResolver -> private List resolveManagedList(Object argName, List<?> ml);1382905576;For each element in the managed list, resolve reference if necessary.;private List resolveManagedList(Object argName, List<?> ml) {_		List<Object> resolved = new ArrayList<Object>(ml.size())__		for (int i = 0_ i < ml.size()_ i++) {_			resolved.add(_					resolveValueIfNecessary(new KeyedArgName(argName, i), ml.get(i)))__		}_		return resolved__	};for,each,element,in,the,managed,list,resolve,reference,if,necessary;private,list,resolve,managed,list,object,arg,name,list,ml,list,object,resolved,new,array,list,object,ml,size,for,int,i,0,i,ml,size,i,resolved,add,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,ml,get,i,return,resolved
BeanDefinitionValueResolver -> private Object resolveManagedArray(Object argName, List<?> ml, Class<?> elementType);1382905576;For each element in the managed array, resolve reference if necessary.;private Object resolveManagedArray(Object argName, List<?> ml, Class<?> elementType) {_		Object resolved = Array.newInstance(elementType, ml.size())__		for (int i = 0_ i < ml.size()_ i++) {_			Array.set(resolved, i,_					resolveValueIfNecessary(new KeyedArgName(argName, i), ml.get(i)))__		}_		return resolved__	};for,each,element,in,the,managed,array,resolve,reference,if,necessary;private,object,resolve,managed,array,object,arg,name,list,ml,class,element,type,object,resolved,array,new,instance,element,type,ml,size,for,int,i,0,i,ml,size,i,array,set,resolved,i,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,ml,get,i,return,resolved
BeanDefinitionValueResolver -> private Object resolveManagedArray(Object argName, List<?> ml, Class<?> elementType);1385412762;For each element in the managed array, resolve reference if necessary.;private Object resolveManagedArray(Object argName, List<?> ml, Class<?> elementType) {_		Object resolved = Array.newInstance(elementType, ml.size())__		for (int i = 0_ i < ml.size()_ i++) {_			Array.set(resolved, i,_					resolveValueIfNecessary(new KeyedArgName(argName, i), ml.get(i)))__		}_		return resolved__	};for,each,element,in,the,managed,array,resolve,reference,if,necessary;private,object,resolve,managed,array,object,arg,name,list,ml,class,element,type,object,resolved,array,new,instance,element,type,ml,size,for,int,i,0,i,ml,size,i,array,set,resolved,i,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,ml,get,i,return,resolved
BeanDefinitionValueResolver -> private Object resolveManagedArray(Object argName, List<?> ml, Class<?> elementType);1386621944;For each element in the managed array, resolve reference if necessary.;private Object resolveManagedArray(Object argName, List<?> ml, Class<?> elementType) {_		Object resolved = Array.newInstance(elementType, ml.size())__		for (int i = 0_ i < ml.size()_ i++) {_			Array.set(resolved, i,_					resolveValueIfNecessary(new KeyedArgName(argName, i), ml.get(i)))__		}_		return resolved__	};for,each,element,in,the,managed,array,resolve,reference,if,necessary;private,object,resolve,managed,array,object,arg,name,list,ml,class,element,type,object,resolved,array,new,instance,element,type,ml,size,for,int,i,0,i,ml,size,i,array,set,resolved,i,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,ml,get,i,return,resolved
BeanDefinitionValueResolver -> private Object resolveManagedArray(Object argName, List<?> ml, Class<?> elementType);1394825889;For each element in the managed array, resolve reference if necessary.;private Object resolveManagedArray(Object argName, List<?> ml, Class<?> elementType) {_		Object resolved = Array.newInstance(elementType, ml.size())__		for (int i = 0_ i < ml.size()_ i++) {_			Array.set(resolved, i,_					resolveValueIfNecessary(new KeyedArgName(argName, i), ml.get(i)))__		}_		return resolved__	};for,each,element,in,the,managed,array,resolve,reference,if,necessary;private,object,resolve,managed,array,object,arg,name,list,ml,class,element,type,object,resolved,array,new,instance,element,type,ml,size,for,int,i,0,i,ml,size,i,array,set,resolved,i,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,ml,get,i,return,resolved
BeanDefinitionValueResolver -> private Object resolveManagedArray(Object argName, List<?> ml, Class<?> elementType);1414738527;For each element in the managed array, resolve reference if necessary.;private Object resolveManagedArray(Object argName, List<?> ml, Class<?> elementType) {_		Object resolved = Array.newInstance(elementType, ml.size())__		for (int i = 0_ i < ml.size()_ i++) {_			Array.set(resolved, i,_					resolveValueIfNecessary(new KeyedArgName(argName, i), ml.get(i)))__		}_		return resolved__	};for,each,element,in,the,managed,array,resolve,reference,if,necessary;private,object,resolve,managed,array,object,arg,name,list,ml,class,element,type,object,resolved,array,new,instance,element,type,ml,size,for,int,i,0,i,ml,size,i,array,set,resolved,i,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,ml,get,i,return,resolved
BeanDefinitionValueResolver -> private Object resolveManagedArray(Object argName, List<?> ml, Class<?> elementType);1414774626;For each element in the managed array, resolve reference if necessary.;private Object resolveManagedArray(Object argName, List<?> ml, Class<?> elementType) {_		Object resolved = Array.newInstance(elementType, ml.size())__		for (int i = 0_ i < ml.size()_ i++) {_			Array.set(resolved, i,_					resolveValueIfNecessary(new KeyedArgName(argName, i), ml.get(i)))__		}_		return resolved__	};for,each,element,in,the,managed,array,resolve,reference,if,necessary;private,object,resolve,managed,array,object,arg,name,list,ml,class,element,type,object,resolved,array,new,instance,element,type,ml,size,for,int,i,0,i,ml,size,i,array,set,resolved,i,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,ml,get,i,return,resolved
BeanDefinitionValueResolver -> private Object resolveManagedArray(Object argName, List<?> ml, Class<?> elementType);1467730834;For each element in the managed array, resolve reference if necessary.;private Object resolveManagedArray(Object argName, List<?> ml, Class<?> elementType) {_		Object resolved = Array.newInstance(elementType, ml.size())__		for (int i = 0_ i < ml.size()_ i++) {_			Array.set(resolved, i,_					resolveValueIfNecessary(new KeyedArgName(argName, i), ml.get(i)))__		}_		return resolved__	};for,each,element,in,the,managed,array,resolve,reference,if,necessary;private,object,resolve,managed,array,object,arg,name,list,ml,class,element,type,object,resolved,array,new,instance,element,type,ml,size,for,int,i,0,i,ml,size,i,array,set,resolved,i,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,ml,get,i,return,resolved
BeanDefinitionValueResolver -> private Object resolveManagedArray(Object argName, List<?> ml, Class<?> elementType);1495868221;For each element in the managed array, resolve reference if necessary.;private Object resolveManagedArray(Object argName, List<?> ml, Class<?> elementType) {_		Object resolved = Array.newInstance(elementType, ml.size())__		for (int i = 0_ i < ml.size()_ i++) {_			Array.set(resolved, i,_					resolveValueIfNecessary(new KeyedArgName(argName, i), ml.get(i)))__		}_		return resolved__	};for,each,element,in,the,managed,array,resolve,reference,if,necessary;private,object,resolve,managed,array,object,arg,name,list,ml,class,element,type,object,resolved,array,new,instance,element,type,ml,size,for,int,i,0,i,ml,size,i,array,set,resolved,i,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,ml,get,i,return,resolved
BeanDefinitionValueResolver -> private Object resolveManagedArray(Object argName, List<?> ml, Class<?> elementType);1496837955;For each element in the managed array, resolve reference if necessary.;private Object resolveManagedArray(Object argName, List<?> ml, Class<?> elementType) {_		Object resolved = Array.newInstance(elementType, ml.size())__		for (int i = 0_ i < ml.size()_ i++) {_			Array.set(resolved, i,_					resolveValueIfNecessary(new KeyedArgName(argName, i), ml.get(i)))__		}_		return resolved__	};for,each,element,in,the,managed,array,resolve,reference,if,necessary;private,object,resolve,managed,array,object,arg,name,list,ml,class,element,type,object,resolved,array,new,instance,element,type,ml,size,for,int,i,0,i,ml,size,i,array,set,resolved,i,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,ml,get,i,return,resolved
BeanDefinitionValueResolver -> private Object resolveManagedArray(Object argName, List<?> ml, Class<?> elementType);1497250713;For each element in the managed array, resolve reference if necessary.;private Object resolveManagedArray(Object argName, List<?> ml, Class<?> elementType) {_		Object resolved = Array.newInstance(elementType, ml.size())__		for (int i = 0_ i < ml.size()_ i++) {_			Array.set(resolved, i,_					resolveValueIfNecessary(new KeyedArgName(argName, i), ml.get(i)))__		}_		return resolved__	};for,each,element,in,the,managed,array,resolve,reference,if,necessary;private,object,resolve,managed,array,object,arg,name,list,ml,class,element,type,object,resolved,array,new,instance,element,type,ml,size,for,int,i,0,i,ml,size,i,array,set,resolved,i,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,ml,get,i,return,resolved
BeanDefinitionValueResolver -> private Object resolveManagedArray(Object argName, List<?> ml, Class<?> elementType);1503007895;For each element in the managed array, resolve reference if necessary.;private Object resolveManagedArray(Object argName, List<?> ml, Class<?> elementType) {_		Object resolved = Array.newInstance(elementType, ml.size())__		for (int i = 0_ i < ml.size()_ i++) {_			Array.set(resolved, i,_					resolveValueIfNecessary(new KeyedArgName(argName, i), ml.get(i)))__		}_		return resolved__	};for,each,element,in,the,managed,array,resolve,reference,if,necessary;private,object,resolve,managed,array,object,arg,name,list,ml,class,element,type,object,resolved,array,new,instance,element,type,ml,size,for,int,i,0,i,ml,size,i,array,set,resolved,i,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,ml,get,i,return,resolved
BeanDefinitionValueResolver -> private Object resolveManagedArray(Object argName, List<?> ml, Class<?> elementType);1522103912;For each element in the managed array, resolve reference if necessary.;private Object resolveManagedArray(Object argName, List<?> ml, Class<?> elementType) {_		Object resolved = Array.newInstance(elementType, ml.size())__		for (int i = 0_ i < ml.size()_ i++) {_			Array.set(resolved, i,_					resolveValueIfNecessary(new KeyedArgName(argName, i), ml.get(i)))__		}_		return resolved__	};for,each,element,in,the,managed,array,resolve,reference,if,necessary;private,object,resolve,managed,array,object,arg,name,list,ml,class,element,type,object,resolved,array,new,instance,element,type,ml,size,for,int,i,0,i,ml,size,i,array,set,resolved,i,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,ml,get,i,return,resolved
BeanDefinitionValueResolver -> @Nullable 	protected Class<?> resolveTargetType(TypedStringValue value) throws ClassNotFoundException;1495868221;Resolve the target type in the given TypedStringValue._@param value the TypedStringValue to resolve_@return the resolved target type (or {@code null} if none specified)_@throws ClassNotFoundException if the specified type cannot be resolved_@see TypedStringValue#resolveTargetType;@Nullable_	protected Class<?> resolveTargetType(TypedStringValue value) throws ClassNotFoundException {_		if (value.hasTargetType()) {_			return value.getTargetType()__		}_		return value.resolveTargetType(this.beanFactory.getBeanClassLoader())__	};resolve,the,target,type,in,the,given,typed,string,value,param,value,the,typed,string,value,to,resolve,return,the,resolved,target,type,or,code,null,if,none,specified,throws,class,not,found,exception,if,the,specified,type,cannot,be,resolved,see,typed,string,value,resolve,target,type;nullable,protected,class,resolve,target,type,typed,string,value,value,throws,class,not,found,exception,if,value,has,target,type,return,value,get,target,type,return,value,resolve,target,type,this,bean,factory,get,bean,class,loader
BeanDefinitionValueResolver -> @Nullable 	protected Class<?> resolveTargetType(TypedStringValue value) throws ClassNotFoundException;1496837955;Resolve the target type in the given TypedStringValue._@param value the TypedStringValue to resolve_@return the resolved target type (or {@code null} if none specified)_@throws ClassNotFoundException if the specified type cannot be resolved_@see TypedStringValue#resolveTargetType;@Nullable_	protected Class<?> resolveTargetType(TypedStringValue value) throws ClassNotFoundException {_		if (value.hasTargetType()) {_			return value.getTargetType()__		}_		return value.resolveTargetType(this.beanFactory.getBeanClassLoader())__	};resolve,the,target,type,in,the,given,typed,string,value,param,value,the,typed,string,value,to,resolve,return,the,resolved,target,type,or,code,null,if,none,specified,throws,class,not,found,exception,if,the,specified,type,cannot,be,resolved,see,typed,string,value,resolve,target,type;nullable,protected,class,resolve,target,type,typed,string,value,value,throws,class,not,found,exception,if,value,has,target,type,return,value,get,target,type,return,value,resolve,target,type,this,bean,factory,get,bean,class,loader
BeanDefinitionValueResolver -> @Nullable 	protected Class<?> resolveTargetType(TypedStringValue value) throws ClassNotFoundException;1497250713;Resolve the target type in the given TypedStringValue._@param value the TypedStringValue to resolve_@return the resolved target type (or {@code null} if none specified)_@throws ClassNotFoundException if the specified type cannot be resolved_@see TypedStringValue#resolveTargetType;@Nullable_	protected Class<?> resolveTargetType(TypedStringValue value) throws ClassNotFoundException {_		if (value.hasTargetType()) {_			return value.getTargetType()__		}_		return value.resolveTargetType(this.beanFactory.getBeanClassLoader())__	};resolve,the,target,type,in,the,given,typed,string,value,param,value,the,typed,string,value,to,resolve,return,the,resolved,target,type,or,code,null,if,none,specified,throws,class,not,found,exception,if,the,specified,type,cannot,be,resolved,see,typed,string,value,resolve,target,type;nullable,protected,class,resolve,target,type,typed,string,value,value,throws,class,not,found,exception,if,value,has,target,type,return,value,get,target,type,return,value,resolve,target,type,this,bean,factory,get,bean,class,loader
BeanDefinitionValueResolver -> @Nullable 	protected Class<?> resolveTargetType(TypedStringValue value) throws ClassNotFoundException;1503007895;Resolve the target type in the given TypedStringValue._@param value the TypedStringValue to resolve_@return the resolved target type (or {@code null} if none specified)_@throws ClassNotFoundException if the specified type cannot be resolved_@see TypedStringValue#resolveTargetType;@Nullable_	protected Class<?> resolveTargetType(TypedStringValue value) throws ClassNotFoundException {_		if (value.hasTargetType()) {_			return value.getTargetType()__		}_		return value.resolveTargetType(this.beanFactory.getBeanClassLoader())__	};resolve,the,target,type,in,the,given,typed,string,value,param,value,the,typed,string,value,to,resolve,return,the,resolved,target,type,or,code,null,if,none,specified,throws,class,not,found,exception,if,the,specified,type,cannot,be,resolved,see,typed,string,value,resolve,target,type;nullable,protected,class,resolve,target,type,typed,string,value,value,throws,class,not,found,exception,if,value,has,target,type,return,value,get,target,type,return,value,resolve,target,type,this,bean,factory,get,bean,class,loader
BeanDefinitionValueResolver -> @Nullable 	protected Class<?> resolveTargetType(TypedStringValue value) throws ClassNotFoundException;1522103912;Resolve the target type in the given TypedStringValue._@param value the TypedStringValue to resolve_@return the resolved target type (or {@code null} if none specified)_@throws ClassNotFoundException if the specified type cannot be resolved_@see TypedStringValue#resolveTargetType;@Nullable_	protected Class<?> resolveTargetType(TypedStringValue value) throws ClassNotFoundException {_		if (value.hasTargetType()) {_			return value.getTargetType()__		}_		return value.resolveTargetType(this.beanFactory.getBeanClassLoader())__	};resolve,the,target,type,in,the,given,typed,string,value,param,value,the,typed,string,value,to,resolve,return,the,resolved,target,type,or,code,null,if,none,specified,throws,class,not,found,exception,if,the,specified,type,cannot,be,resolved,see,typed,string,value,resolve,target,type;nullable,protected,class,resolve,target,type,typed,string,value,value,throws,class,not,found,exception,if,value,has,target,type,return,value,get,target,type,return,value,resolve,target,type,this,bean,factory,get,bean,class,loader
BeanDefinitionValueResolver -> private Map<?, ?> resolveManagedMap(Object argName, Map<?, ?> mm);1385412762;For each element in the managed map, resolve reference if necessary.;private Map<?, ?> resolveManagedMap(Object argName, Map<?, ?> mm) {_		Map<Object, Object> resolved = new LinkedHashMap<Object, Object>(mm.size())__		for (Map.Entry<?, ?> entry : mm.entrySet()) {_			Object resolvedKey = resolveValueIfNecessary(argName, entry.getKey())__			Object resolvedValue = resolveValueIfNecessary(_					new KeyedArgName(argName, entry.getKey()), entry.getValue())__			resolved.put(resolvedKey, resolvedValue)__		}_		return resolved__	};for,each,element,in,the,managed,map,resolve,reference,if,necessary;private,map,resolve,managed,map,object,arg,name,map,mm,map,object,object,resolved,new,linked,hash,map,object,object,mm,size,for,map,entry,entry,mm,entry,set,object,resolved,key,resolve,value,if,necessary,arg,name,entry,get,key,object,resolved,value,resolve,value,if,necessary,new,keyed,arg,name,arg,name,entry,get,key,entry,get,value,resolved,put,resolved,key,resolved,value,return,resolved
BeanDefinitionValueResolver -> private Map<?, ?> resolveManagedMap(Object argName, Map<?, ?> mm);1386621944;For each element in the managed map, resolve reference if necessary.;private Map<?, ?> resolveManagedMap(Object argName, Map<?, ?> mm) {_		Map<Object, Object> resolved = new LinkedHashMap<Object, Object>(mm.size())__		for (Map.Entry<?, ?> entry : mm.entrySet()) {_			Object resolvedKey = resolveValueIfNecessary(argName, entry.getKey())__			Object resolvedValue = resolveValueIfNecessary(_					new KeyedArgName(argName, entry.getKey()), entry.getValue())__			resolved.put(resolvedKey, resolvedValue)__		}_		return resolved__	};for,each,element,in,the,managed,map,resolve,reference,if,necessary;private,map,resolve,managed,map,object,arg,name,map,mm,map,object,object,resolved,new,linked,hash,map,object,object,mm,size,for,map,entry,entry,mm,entry,set,object,resolved,key,resolve,value,if,necessary,arg,name,entry,get,key,object,resolved,value,resolve,value,if,necessary,new,keyed,arg,name,arg,name,entry,get,key,entry,get,value,resolved,put,resolved,key,resolved,value,return,resolved
BeanDefinitionValueResolver -> private Map<?, ?> resolveManagedMap(Object argName, Map<?, ?> mm);1394825889;For each element in the managed map, resolve reference if necessary.;private Map<?, ?> resolveManagedMap(Object argName, Map<?, ?> mm) {_		Map<Object, Object> resolved = new LinkedHashMap<Object, Object>(mm.size())__		for (Map.Entry<?, ?> entry : mm.entrySet()) {_			Object resolvedKey = resolveValueIfNecessary(argName, entry.getKey())__			Object resolvedValue = resolveValueIfNecessary(_					new KeyedArgName(argName, entry.getKey()), entry.getValue())__			resolved.put(resolvedKey, resolvedValue)__		}_		return resolved__	};for,each,element,in,the,managed,map,resolve,reference,if,necessary;private,map,resolve,managed,map,object,arg,name,map,mm,map,object,object,resolved,new,linked,hash,map,object,object,mm,size,for,map,entry,entry,mm,entry,set,object,resolved,key,resolve,value,if,necessary,arg,name,entry,get,key,object,resolved,value,resolve,value,if,necessary,new,keyed,arg,name,arg,name,entry,get,key,entry,get,value,resolved,put,resolved,key,resolved,value,return,resolved
BeanDefinitionValueResolver -> private Map<?, ?> resolveManagedMap(Object argName, Map<?, ?> mm);1414738527;For each element in the managed map, resolve reference if necessary.;private Map<?, ?> resolveManagedMap(Object argName, Map<?, ?> mm) {_		Map<Object, Object> resolved = new LinkedHashMap<Object, Object>(mm.size())__		for (Map.Entry<?, ?> entry : mm.entrySet()) {_			Object resolvedKey = resolveValueIfNecessary(argName, entry.getKey())__			Object resolvedValue = resolveValueIfNecessary(_					new KeyedArgName(argName, entry.getKey()), entry.getValue())__			resolved.put(resolvedKey, resolvedValue)__		}_		return resolved__	};for,each,element,in,the,managed,map,resolve,reference,if,necessary;private,map,resolve,managed,map,object,arg,name,map,mm,map,object,object,resolved,new,linked,hash,map,object,object,mm,size,for,map,entry,entry,mm,entry,set,object,resolved,key,resolve,value,if,necessary,arg,name,entry,get,key,object,resolved,value,resolve,value,if,necessary,new,keyed,arg,name,arg,name,entry,get,key,entry,get,value,resolved,put,resolved,key,resolved,value,return,resolved
BeanDefinitionValueResolver -> private Map<?, ?> resolveManagedMap(Object argName, Map<?, ?> mm);1414774626;For each element in the managed map, resolve reference if necessary.;private Map<?, ?> resolveManagedMap(Object argName, Map<?, ?> mm) {_		Map<Object, Object> resolved = new LinkedHashMap<Object, Object>(mm.size())__		for (Map.Entry<?, ?> entry : mm.entrySet()) {_			Object resolvedKey = resolveValueIfNecessary(argName, entry.getKey())__			Object resolvedValue = resolveValueIfNecessary(_					new KeyedArgName(argName, entry.getKey()), entry.getValue())__			resolved.put(resolvedKey, resolvedValue)__		}_		return resolved__	};for,each,element,in,the,managed,map,resolve,reference,if,necessary;private,map,resolve,managed,map,object,arg,name,map,mm,map,object,object,resolved,new,linked,hash,map,object,object,mm,size,for,map,entry,entry,mm,entry,set,object,resolved,key,resolve,value,if,necessary,arg,name,entry,get,key,object,resolved,value,resolve,value,if,necessary,new,keyed,arg,name,arg,name,entry,get,key,entry,get,value,resolved,put,resolved,key,resolved,value,return,resolved
BeanDefinitionValueResolver -> private Map<?, ?> resolveManagedMap(Object argName, Map<?, ?> mm);1467730834;For each element in the managed map, resolve reference if necessary.;private Map<?, ?> resolveManagedMap(Object argName, Map<?, ?> mm) {_		Map<Object, Object> resolved = new LinkedHashMap<>(mm.size())__		for (Map.Entry<?, ?> entry : mm.entrySet()) {_			Object resolvedKey = resolveValueIfNecessary(argName, entry.getKey())__			Object resolvedValue = resolveValueIfNecessary(_					new KeyedArgName(argName, entry.getKey()), entry.getValue())__			resolved.put(resolvedKey, resolvedValue)__		}_		return resolved__	};for,each,element,in,the,managed,map,resolve,reference,if,necessary;private,map,resolve,managed,map,object,arg,name,map,mm,map,object,object,resolved,new,linked,hash,map,mm,size,for,map,entry,entry,mm,entry,set,object,resolved,key,resolve,value,if,necessary,arg,name,entry,get,key,object,resolved,value,resolve,value,if,necessary,new,keyed,arg,name,arg,name,entry,get,key,entry,get,value,resolved,put,resolved,key,resolved,value,return,resolved
BeanDefinitionValueResolver -> private Map<?, ?> resolveManagedMap(Object argName, Map<?, ?> mm);1495868221;For each element in the managed map, resolve reference if necessary.;private Map<?, ?> resolveManagedMap(Object argName, Map<?, ?> mm) {_		Map<Object, Object> resolved = new LinkedHashMap<>(mm.size())__		for (Map.Entry<?, ?> entry : mm.entrySet()) {_			Object resolvedKey = resolveValueIfNecessary(argName, entry.getKey())__			Object resolvedValue = resolveValueIfNecessary(_					new KeyedArgName(argName, entry.getKey()), entry.getValue())__			resolved.put(resolvedKey, resolvedValue)__		}_		return resolved__	};for,each,element,in,the,managed,map,resolve,reference,if,necessary;private,map,resolve,managed,map,object,arg,name,map,mm,map,object,object,resolved,new,linked,hash,map,mm,size,for,map,entry,entry,mm,entry,set,object,resolved,key,resolve,value,if,necessary,arg,name,entry,get,key,object,resolved,value,resolve,value,if,necessary,new,keyed,arg,name,arg,name,entry,get,key,entry,get,value,resolved,put,resolved,key,resolved,value,return,resolved
BeanDefinitionValueResolver -> private Map<?, ?> resolveManagedMap(Object argName, Map<?, ?> mm);1496837955;For each element in the managed map, resolve reference if necessary.;private Map<?, ?> resolveManagedMap(Object argName, Map<?, ?> mm) {_		Map<Object, Object> resolved = new LinkedHashMap<>(mm.size())__		for (Map.Entry<?, ?> entry : mm.entrySet()) {_			Object resolvedKey = resolveValueIfNecessary(argName, entry.getKey())__			Object resolvedValue = resolveValueIfNecessary(_					new KeyedArgName(argName, entry.getKey()), entry.getValue())__			resolved.put(resolvedKey, resolvedValue)__		}_		return resolved__	};for,each,element,in,the,managed,map,resolve,reference,if,necessary;private,map,resolve,managed,map,object,arg,name,map,mm,map,object,object,resolved,new,linked,hash,map,mm,size,for,map,entry,entry,mm,entry,set,object,resolved,key,resolve,value,if,necessary,arg,name,entry,get,key,object,resolved,value,resolve,value,if,necessary,new,keyed,arg,name,arg,name,entry,get,key,entry,get,value,resolved,put,resolved,key,resolved,value,return,resolved
BeanDefinitionValueResolver -> private Map<?, ?> resolveManagedMap(Object argName, Map<?, ?> mm);1497250713;For each element in the managed map, resolve reference if necessary.;private Map<?, ?> resolveManagedMap(Object argName, Map<?, ?> mm) {_		Map<Object, Object> resolved = new LinkedHashMap<>(mm.size())__		for (Map.Entry<?, ?> entry : mm.entrySet()) {_			Object resolvedKey = resolveValueIfNecessary(argName, entry.getKey())__			Object resolvedValue = resolveValueIfNecessary(_					new KeyedArgName(argName, entry.getKey()), entry.getValue())__			resolved.put(resolvedKey, resolvedValue)__		}_		return resolved__	};for,each,element,in,the,managed,map,resolve,reference,if,necessary;private,map,resolve,managed,map,object,arg,name,map,mm,map,object,object,resolved,new,linked,hash,map,mm,size,for,map,entry,entry,mm,entry,set,object,resolved,key,resolve,value,if,necessary,arg,name,entry,get,key,object,resolved,value,resolve,value,if,necessary,new,keyed,arg,name,arg,name,entry,get,key,entry,get,value,resolved,put,resolved,key,resolved,value,return,resolved
BeanDefinitionValueResolver -> private Map<?, ?> resolveManagedMap(Object argName, Map<?, ?> mm);1503007895;For each element in the managed map, resolve reference if necessary.;private Map<?, ?> resolveManagedMap(Object argName, Map<?, ?> mm) {_		Map<Object, Object> resolved = new LinkedHashMap<>(mm.size())__		for (Map.Entry<?, ?> entry : mm.entrySet()) {_			Object resolvedKey = resolveValueIfNecessary(argName, entry.getKey())__			Object resolvedValue = resolveValueIfNecessary(_					new KeyedArgName(argName, entry.getKey()), entry.getValue())__			resolved.put(resolvedKey, resolvedValue)__		}_		return resolved__	};for,each,element,in,the,managed,map,resolve,reference,if,necessary;private,map,resolve,managed,map,object,arg,name,map,mm,map,object,object,resolved,new,linked,hash,map,mm,size,for,map,entry,entry,mm,entry,set,object,resolved,key,resolve,value,if,necessary,arg,name,entry,get,key,object,resolved,value,resolve,value,if,necessary,new,keyed,arg,name,arg,name,entry,get,key,entry,get,value,resolved,put,resolved,key,resolved,value,return,resolved
BeanDefinitionValueResolver -> private Map<?, ?> resolveManagedMap(Object argName, Map<?, ?> mm);1522103912;For each element in the managed map, resolve reference if necessary.;private Map<?, ?> resolveManagedMap(Object argName, Map<?, ?> mm) {_		Map<Object, Object> resolved = new LinkedHashMap<>(mm.size())__		mm.forEach((key, value) -> {_			Object resolvedKey = resolveValueIfNecessary(argName, key)__			Object resolvedValue = resolveValueIfNecessary(new KeyedArgName(argName, key), value)__			resolved.put(resolvedKey, resolvedValue)__		})__		return resolved__	};for,each,element,in,the,managed,map,resolve,reference,if,necessary;private,map,resolve,managed,map,object,arg,name,map,mm,map,object,object,resolved,new,linked,hash,map,mm,size,mm,for,each,key,value,object,resolved,key,resolve,value,if,necessary,arg,name,key,object,resolved,value,resolve,value,if,necessary,new,keyed,arg,name,arg,name,key,value,resolved,put,resolved,key,resolved,value,return,resolved
BeanDefinitionValueResolver -> @Nullable 	public Object resolveValueIfNecessary(Object argName, @Nullable Object value);1496837955;Given a PropertyValue, return a value, resolving any references to other_beans in the factory if necessary. The value could be:_<li>A BeanDefinition, which leads to the creation of a corresponding_new bean instance. Singleton flags and names of such "inner beans"_are always ignored: Inner beans are anonymous prototypes._<li>A RuntimeBeanReference, which must be resolved._<li>A ManagedList. This is a special collection that may contain_RuntimeBeanReferences or Collections that will need to be resolved._<li>A ManagedSet. May also contain RuntimeBeanReferences or_Collections that will need to be resolved._<li>A ManagedMap. In this case the value may be a RuntimeBeanReference_or Collection that will need to be resolved._<li>An ordinary object or {@code null}, in which case it's left alone._@param argName the name of the argument that the value is defined for_@param value the value object to resolve_@return the resolved object;@Nullable_	public Object resolveValueIfNecessary(Object argName, @Nullable Object value) {_		_		_		if (value instanceof RuntimeBeanReference) {_			RuntimeBeanReference ref = (RuntimeBeanReference) value__			return resolveReference(argName, ref)__		}_		else if (value instanceof RuntimeBeanNameReference) {_			String refName = ((RuntimeBeanNameReference) value).getBeanName()__			refName = String.valueOf(doEvaluate(refName))__			if (!this.beanFactory.containsBean(refName)) {_				throw new BeanDefinitionStoreException(_						"Invalid bean name '" + refName + "' in bean reference for " + argName)__			}_			return refName__		}_		else if (value instanceof BeanDefinitionHolder) {_			_			BeanDefinitionHolder bdHolder = (BeanDefinitionHolder) value__			return resolveInnerBean(argName, bdHolder.getBeanName(), bdHolder.getBeanDefinition())__		}_		else if (value instanceof BeanDefinition) {_			_			BeanDefinition bd = (BeanDefinition) value__			String innerBeanName = "(inner bean)" + BeanFactoryUtils.GENERATED_BEAN_NAME_SEPARATOR +_					ObjectUtils.getIdentityHexString(bd)__			return resolveInnerBean(argName, innerBeanName, bd)__		}_		else if (value instanceof ManagedArray) {_			_			ManagedArray array = (ManagedArray) value__			Class<?> elementType = array.resolvedElementType__			if (elementType == null) {_				String elementTypeName = array.getElementTypeName()__				if (StringUtils.hasText(elementTypeName)) {_					try {_						elementType = ClassUtils.forName(elementTypeName, this.beanFactory.getBeanClassLoader())__						array.resolvedElementType = elementType__					}_					catch (Throwable ex) {_						_						throw new BeanCreationException(_								this.beanDefinition.getResourceDescription(), this.beanName,_								"Error resolving array type for " + argName, ex)__					}_				}_				else {_					elementType = Object.class__				}_			}_			return resolveManagedArray(argName, (List<?>) value, elementType)__		}_		else if (value instanceof ManagedList) {_			_			return resolveManagedList(argName, (List<?>) value)__		}_		else if (value instanceof ManagedSet) {_			_			return resolveManagedSet(argName, (Set<?>) value)__		}_		else if (value instanceof ManagedMap) {_			_			return resolveManagedMap(argName, (Map<?, ?>) value)__		}_		else if (value instanceof ManagedProperties) {_			Properties original = (Properties) value__			Properties copy = new Properties()__			for (Map.Entry<Object, Object> propEntry : original.entrySet()) {_				Object propKey = propEntry.getKey()__				Object propValue = propEntry.getValue()__				if (propKey instanceof TypedStringValue) {_					propKey = evaluate((TypedStringValue) propKey)__				}_				if (propValue instanceof TypedStringValue) {_					propValue = evaluate((TypedStringValue) propValue)__				}_				if (propKey == null || propValue == null) {_					throw new BeanCreationException(_							this.beanDefinition.getResourceDescription(), this.beanName,_							"Error converting Properties key/value pair for " + argName + ": resolved to null")__				}_				copy.put(propKey, propValue)__			}_			return copy__		}_		else if (value instanceof TypedStringValue) {_			_			TypedStringValue typedStringValue = (TypedStringValue) value__			Object valueObject = evaluate(typedStringValue)__			try {_				Class<?> resolvedTargetType = resolveTargetType(typedStringValue)__				if (resolvedTargetType != null) {_					return this.typeConverter.convertIfNecessary(valueObject, resolvedTargetType)__				}_				else {_					return valueObject__				}_			}_			catch (Throwable ex) {_				_				throw new BeanCreationException(_						this.beanDefinition.getResourceDescription(), this.beanName,_						"Error converting typed String value for " + argName, ex)__			}_		}_		else {_			return evaluate(value)__		}_	};given,a,property,value,return,a,value,resolving,any,references,to,other,beans,in,the,factory,if,necessary,the,value,could,be,li,a,bean,definition,which,leads,to,the,creation,of,a,corresponding,new,bean,instance,singleton,flags,and,names,of,such,inner,beans,are,always,ignored,inner,beans,are,anonymous,prototypes,li,a,runtime,bean,reference,which,must,be,resolved,li,a,managed,list,this,is,a,special,collection,that,may,contain,runtime,bean,references,or,collections,that,will,need,to,be,resolved,li,a,managed,set,may,also,contain,runtime,bean,references,or,collections,that,will,need,to,be,resolved,li,a,managed,map,in,this,case,the,value,may,be,a,runtime,bean,reference,or,collection,that,will,need,to,be,resolved,li,an,ordinary,object,or,code,null,in,which,case,it,s,left,alone,param,arg,name,the,name,of,the,argument,that,the,value,is,defined,for,param,value,the,value,object,to,resolve,return,the,resolved,object;nullable,public,object,resolve,value,if,necessary,object,arg,name,nullable,object,value,if,value,instanceof,runtime,bean,reference,runtime,bean,reference,ref,runtime,bean,reference,value,return,resolve,reference,arg,name,ref,else,if,value,instanceof,runtime,bean,name,reference,string,ref,name,runtime,bean,name,reference,value,get,bean,name,ref,name,string,value,of,do,evaluate,ref,name,if,this,bean,factory,contains,bean,ref,name,throw,new,bean,definition,store,exception,invalid,bean,name,ref,name,in,bean,reference,for,arg,name,return,ref,name,else,if,value,instanceof,bean,definition,holder,bean,definition,holder,bd,holder,bean,definition,holder,value,return,resolve,inner,bean,arg,name,bd,holder,get,bean,name,bd,holder,get,bean,definition,else,if,value,instanceof,bean,definition,bean,definition,bd,bean,definition,value,string,inner,bean,name,inner,bean,bean,factory,utils,object,utils,get,identity,hex,string,bd,return,resolve,inner,bean,arg,name,inner,bean,name,bd,else,if,value,instanceof,managed,array,managed,array,array,managed,array,value,class,element,type,array,resolved,element,type,if,element,type,null,string,element,type,name,array,get,element,type,name,if,string,utils,has,text,element,type,name,try,element,type,class,utils,for,name,element,type,name,this,bean,factory,get,bean,class,loader,array,resolved,element,type,element,type,catch,throwable,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,error,resolving,array,type,for,arg,name,ex,else,element,type,object,class,return,resolve,managed,array,arg,name,list,value,element,type,else,if,value,instanceof,managed,list,return,resolve,managed,list,arg,name,list,value,else,if,value,instanceof,managed,set,return,resolve,managed,set,arg,name,set,value,else,if,value,instanceof,managed,map,return,resolve,managed,map,arg,name,map,value,else,if,value,instanceof,managed,properties,properties,original,properties,value,properties,copy,new,properties,for,map,entry,object,object,prop,entry,original,entry,set,object,prop,key,prop,entry,get,key,object,prop,value,prop,entry,get,value,if,prop,key,instanceof,typed,string,value,prop,key,evaluate,typed,string,value,prop,key,if,prop,value,instanceof,typed,string,value,prop,value,evaluate,typed,string,value,prop,value,if,prop,key,null,prop,value,null,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,error,converting,properties,key,value,pair,for,arg,name,resolved,to,null,copy,put,prop,key,prop,value,return,copy,else,if,value,instanceof,typed,string,value,typed,string,value,typed,string,value,typed,string,value,value,object,value,object,evaluate,typed,string,value,try,class,resolved,target,type,resolve,target,type,typed,string,value,if,resolved,target,type,null,return,this,type,converter,convert,if,necessary,value,object,resolved,target,type,else,return,value,object,catch,throwable,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,error,converting,typed,string,value,for,arg,name,ex,else,return,evaluate,value
BeanDefinitionValueResolver -> @Nullable 	public Object resolveValueIfNecessary(Object argName, @Nullable Object value);1497250713;Given a PropertyValue, return a value, resolving any references to other_beans in the factory if necessary. The value could be:_<li>A BeanDefinition, which leads to the creation of a corresponding_new bean instance. Singleton flags and names of such "inner beans"_are always ignored: Inner beans are anonymous prototypes._<li>A RuntimeBeanReference, which must be resolved._<li>A ManagedList. This is a special collection that may contain_RuntimeBeanReferences or Collections that will need to be resolved._<li>A ManagedSet. May also contain RuntimeBeanReferences or_Collections that will need to be resolved._<li>A ManagedMap. In this case the value may be a RuntimeBeanReference_or Collection that will need to be resolved._<li>An ordinary object or {@code null}, in which case it's left alone._@param argName the name of the argument that the value is defined for_@param value the value object to resolve_@return the resolved object;@Nullable_	public Object resolveValueIfNecessary(Object argName, @Nullable Object value) {_		_		_		if (value instanceof RuntimeBeanReference) {_			RuntimeBeanReference ref = (RuntimeBeanReference) value__			return resolveReference(argName, ref)__		}_		else if (value instanceof RuntimeBeanNameReference) {_			String refName = ((RuntimeBeanNameReference) value).getBeanName()__			refName = String.valueOf(doEvaluate(refName))__			if (!this.beanFactory.containsBean(refName)) {_				throw new BeanDefinitionStoreException(_						"Invalid bean name '" + refName + "' in bean reference for " + argName)__			}_			return refName__		}_		else if (value instanceof BeanDefinitionHolder) {_			_			BeanDefinitionHolder bdHolder = (BeanDefinitionHolder) value__			return resolveInnerBean(argName, bdHolder.getBeanName(), bdHolder.getBeanDefinition())__		}_		else if (value instanceof BeanDefinition) {_			_			BeanDefinition bd = (BeanDefinition) value__			String innerBeanName = "(inner bean)" + BeanFactoryUtils.GENERATED_BEAN_NAME_SEPARATOR +_					ObjectUtils.getIdentityHexString(bd)__			return resolveInnerBean(argName, innerBeanName, bd)__		}_		else if (value instanceof ManagedArray) {_			_			ManagedArray array = (ManagedArray) value__			Class<?> elementType = array.resolvedElementType__			if (elementType == null) {_				String elementTypeName = array.getElementTypeName()__				if (StringUtils.hasText(elementTypeName)) {_					try {_						elementType = ClassUtils.forName(elementTypeName, this.beanFactory.getBeanClassLoader())__						array.resolvedElementType = elementType__					}_					catch (Throwable ex) {_						_						throw new BeanCreationException(_								this.beanDefinition.getResourceDescription(), this.beanName,_								"Error resolving array type for " + argName, ex)__					}_				}_				else {_					elementType = Object.class__				}_			}_			return resolveManagedArray(argName, (List<?>) value, elementType)__		}_		else if (value instanceof ManagedList) {_			_			return resolveManagedList(argName, (List<?>) value)__		}_		else if (value instanceof ManagedSet) {_			_			return resolveManagedSet(argName, (Set<?>) value)__		}_		else if (value instanceof ManagedMap) {_			_			return resolveManagedMap(argName, (Map<?, ?>) value)__		}_		else if (value instanceof ManagedProperties) {_			Properties original = (Properties) value__			Properties copy = new Properties()__			original.forEach((propKey, propValue) -> {_				if (propKey instanceof TypedStringValue) {_					propKey = evaluate((TypedStringValue) propKey)__				}_				if (propValue instanceof TypedStringValue) {_					propValue = evaluate((TypedStringValue) propValue)__				}_				if (propKey == null || propValue == null) {_					throw new BeanCreationException(_							this.beanDefinition.getResourceDescription(), this.beanName,_							"Error converting Properties key/value pair for " + argName + ": resolved to null")__				}_				copy.put(propKey, propValue)__			})__			return copy__		}_		else if (value instanceof TypedStringValue) {_			_			TypedStringValue typedStringValue = (TypedStringValue) value__			Object valueObject = evaluate(typedStringValue)__			try {_				Class<?> resolvedTargetType = resolveTargetType(typedStringValue)__				if (resolvedTargetType != null) {_					return this.typeConverter.convertIfNecessary(valueObject, resolvedTargetType)__				}_				else {_					return valueObject__				}_			}_			catch (Throwable ex) {_				_				throw new BeanCreationException(_						this.beanDefinition.getResourceDescription(), this.beanName,_						"Error converting typed String value for " + argName, ex)__			}_		}_		else {_			return evaluate(value)__		}_	};given,a,property,value,return,a,value,resolving,any,references,to,other,beans,in,the,factory,if,necessary,the,value,could,be,li,a,bean,definition,which,leads,to,the,creation,of,a,corresponding,new,bean,instance,singleton,flags,and,names,of,such,inner,beans,are,always,ignored,inner,beans,are,anonymous,prototypes,li,a,runtime,bean,reference,which,must,be,resolved,li,a,managed,list,this,is,a,special,collection,that,may,contain,runtime,bean,references,or,collections,that,will,need,to,be,resolved,li,a,managed,set,may,also,contain,runtime,bean,references,or,collections,that,will,need,to,be,resolved,li,a,managed,map,in,this,case,the,value,may,be,a,runtime,bean,reference,or,collection,that,will,need,to,be,resolved,li,an,ordinary,object,or,code,null,in,which,case,it,s,left,alone,param,arg,name,the,name,of,the,argument,that,the,value,is,defined,for,param,value,the,value,object,to,resolve,return,the,resolved,object;nullable,public,object,resolve,value,if,necessary,object,arg,name,nullable,object,value,if,value,instanceof,runtime,bean,reference,runtime,bean,reference,ref,runtime,bean,reference,value,return,resolve,reference,arg,name,ref,else,if,value,instanceof,runtime,bean,name,reference,string,ref,name,runtime,bean,name,reference,value,get,bean,name,ref,name,string,value,of,do,evaluate,ref,name,if,this,bean,factory,contains,bean,ref,name,throw,new,bean,definition,store,exception,invalid,bean,name,ref,name,in,bean,reference,for,arg,name,return,ref,name,else,if,value,instanceof,bean,definition,holder,bean,definition,holder,bd,holder,bean,definition,holder,value,return,resolve,inner,bean,arg,name,bd,holder,get,bean,name,bd,holder,get,bean,definition,else,if,value,instanceof,bean,definition,bean,definition,bd,bean,definition,value,string,inner,bean,name,inner,bean,bean,factory,utils,object,utils,get,identity,hex,string,bd,return,resolve,inner,bean,arg,name,inner,bean,name,bd,else,if,value,instanceof,managed,array,managed,array,array,managed,array,value,class,element,type,array,resolved,element,type,if,element,type,null,string,element,type,name,array,get,element,type,name,if,string,utils,has,text,element,type,name,try,element,type,class,utils,for,name,element,type,name,this,bean,factory,get,bean,class,loader,array,resolved,element,type,element,type,catch,throwable,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,error,resolving,array,type,for,arg,name,ex,else,element,type,object,class,return,resolve,managed,array,arg,name,list,value,element,type,else,if,value,instanceof,managed,list,return,resolve,managed,list,arg,name,list,value,else,if,value,instanceof,managed,set,return,resolve,managed,set,arg,name,set,value,else,if,value,instanceof,managed,map,return,resolve,managed,map,arg,name,map,value,else,if,value,instanceof,managed,properties,properties,original,properties,value,properties,copy,new,properties,original,for,each,prop,key,prop,value,if,prop,key,instanceof,typed,string,value,prop,key,evaluate,typed,string,value,prop,key,if,prop,value,instanceof,typed,string,value,prop,value,evaluate,typed,string,value,prop,value,if,prop,key,null,prop,value,null,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,error,converting,properties,key,value,pair,for,arg,name,resolved,to,null,copy,put,prop,key,prop,value,return,copy,else,if,value,instanceof,typed,string,value,typed,string,value,typed,string,value,typed,string,value,value,object,value,object,evaluate,typed,string,value,try,class,resolved,target,type,resolve,target,type,typed,string,value,if,resolved,target,type,null,return,this,type,converter,convert,if,necessary,value,object,resolved,target,type,else,return,value,object,catch,throwable,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,error,converting,typed,string,value,for,arg,name,ex,else,return,evaluate,value
BeanDefinitionValueResolver -> @Nullable 	public Object resolveValueIfNecessary(Object argName, @Nullable Object value);1503007895;Given a PropertyValue, return a value, resolving any references to other_beans in the factory if necessary. The value could be:_<li>A BeanDefinition, which leads to the creation of a corresponding_new bean instance. Singleton flags and names of such "inner beans"_are always ignored: Inner beans are anonymous prototypes._<li>A RuntimeBeanReference, which must be resolved._<li>A ManagedList. This is a special collection that may contain_RuntimeBeanReferences or Collections that will need to be resolved._<li>A ManagedSet. May also contain RuntimeBeanReferences or_Collections that will need to be resolved._<li>A ManagedMap. In this case the value may be a RuntimeBeanReference_or Collection that will need to be resolved._<li>An ordinary object or {@code null}, in which case it's left alone._@param argName the name of the argument that the value is defined for_@param value the value object to resolve_@return the resolved object;@Nullable_	public Object resolveValueIfNecessary(Object argName, @Nullable Object value) {_		_		_		if (value instanceof RuntimeBeanReference) {_			RuntimeBeanReference ref = (RuntimeBeanReference) value__			return resolveReference(argName, ref)__		}_		else if (value instanceof RuntimeBeanNameReference) {_			String refName = ((RuntimeBeanNameReference) value).getBeanName()__			refName = String.valueOf(doEvaluate(refName))__			if (!this.beanFactory.containsBean(refName)) {_				throw new BeanDefinitionStoreException(_						"Invalid bean name '" + refName + "' in bean reference for " + argName)__			}_			return refName__		}_		else if (value instanceof BeanDefinitionHolder) {_			_			BeanDefinitionHolder bdHolder = (BeanDefinitionHolder) value__			return resolveInnerBean(argName, bdHolder.getBeanName(), bdHolder.getBeanDefinition())__		}_		else if (value instanceof BeanDefinition) {_			_			BeanDefinition bd = (BeanDefinition) value__			String innerBeanName = "(inner bean)" + BeanFactoryUtils.GENERATED_BEAN_NAME_SEPARATOR +_					ObjectUtils.getIdentityHexString(bd)__			return resolveInnerBean(argName, innerBeanName, bd)__		}_		else if (value instanceof ManagedArray) {_			_			ManagedArray array = (ManagedArray) value__			Class<?> elementType = array.resolvedElementType__			if (elementType == null) {_				String elementTypeName = array.getElementTypeName()__				if (StringUtils.hasText(elementTypeName)) {_					try {_						elementType = ClassUtils.forName(elementTypeName, this.beanFactory.getBeanClassLoader())__						array.resolvedElementType = elementType__					}_					catch (Throwable ex) {_						_						throw new BeanCreationException(_								this.beanDefinition.getResourceDescription(), this.beanName,_								"Error resolving array type for " + argName, ex)__					}_				}_				else {_					elementType = Object.class__				}_			}_			return resolveManagedArray(argName, (List<?>) value, elementType)__		}_		else if (value instanceof ManagedList) {_			_			return resolveManagedList(argName, (List<?>) value)__		}_		else if (value instanceof ManagedSet) {_			_			return resolveManagedSet(argName, (Set<?>) value)__		}_		else if (value instanceof ManagedMap) {_			_			return resolveManagedMap(argName, (Map<?, ?>) value)__		}_		else if (value instanceof ManagedProperties) {_			Properties original = (Properties) value__			Properties copy = new Properties()__			original.forEach((propKey, propValue) -> {_				if (propKey instanceof TypedStringValue) {_					propKey = evaluate((TypedStringValue) propKey)__				}_				if (propValue instanceof TypedStringValue) {_					propValue = evaluate((TypedStringValue) propValue)__				}_				if (propKey == null || propValue == null) {_					throw new BeanCreationException(_							this.beanDefinition.getResourceDescription(), this.beanName,_							"Error converting Properties key/value pair for " + argName + ": resolved to null")__				}_				copy.put(propKey, propValue)__			})__			return copy__		}_		else if (value instanceof TypedStringValue) {_			_			TypedStringValue typedStringValue = (TypedStringValue) value__			Object valueObject = evaluate(typedStringValue)__			try {_				Class<?> resolvedTargetType = resolveTargetType(typedStringValue)__				if (resolvedTargetType != null) {_					return this.typeConverter.convertIfNecessary(valueObject, resolvedTargetType)__				}_				else {_					return valueObject__				}_			}_			catch (Throwable ex) {_				_				throw new BeanCreationException(_						this.beanDefinition.getResourceDescription(), this.beanName,_						"Error converting typed String value for " + argName, ex)__			}_		}_		else if (value instanceof NullBean) {_			return null__		}_		else {_			return evaluate(value)__		}_	};given,a,property,value,return,a,value,resolving,any,references,to,other,beans,in,the,factory,if,necessary,the,value,could,be,li,a,bean,definition,which,leads,to,the,creation,of,a,corresponding,new,bean,instance,singleton,flags,and,names,of,such,inner,beans,are,always,ignored,inner,beans,are,anonymous,prototypes,li,a,runtime,bean,reference,which,must,be,resolved,li,a,managed,list,this,is,a,special,collection,that,may,contain,runtime,bean,references,or,collections,that,will,need,to,be,resolved,li,a,managed,set,may,also,contain,runtime,bean,references,or,collections,that,will,need,to,be,resolved,li,a,managed,map,in,this,case,the,value,may,be,a,runtime,bean,reference,or,collection,that,will,need,to,be,resolved,li,an,ordinary,object,or,code,null,in,which,case,it,s,left,alone,param,arg,name,the,name,of,the,argument,that,the,value,is,defined,for,param,value,the,value,object,to,resolve,return,the,resolved,object;nullable,public,object,resolve,value,if,necessary,object,arg,name,nullable,object,value,if,value,instanceof,runtime,bean,reference,runtime,bean,reference,ref,runtime,bean,reference,value,return,resolve,reference,arg,name,ref,else,if,value,instanceof,runtime,bean,name,reference,string,ref,name,runtime,bean,name,reference,value,get,bean,name,ref,name,string,value,of,do,evaluate,ref,name,if,this,bean,factory,contains,bean,ref,name,throw,new,bean,definition,store,exception,invalid,bean,name,ref,name,in,bean,reference,for,arg,name,return,ref,name,else,if,value,instanceof,bean,definition,holder,bean,definition,holder,bd,holder,bean,definition,holder,value,return,resolve,inner,bean,arg,name,bd,holder,get,bean,name,bd,holder,get,bean,definition,else,if,value,instanceof,bean,definition,bean,definition,bd,bean,definition,value,string,inner,bean,name,inner,bean,bean,factory,utils,object,utils,get,identity,hex,string,bd,return,resolve,inner,bean,arg,name,inner,bean,name,bd,else,if,value,instanceof,managed,array,managed,array,array,managed,array,value,class,element,type,array,resolved,element,type,if,element,type,null,string,element,type,name,array,get,element,type,name,if,string,utils,has,text,element,type,name,try,element,type,class,utils,for,name,element,type,name,this,bean,factory,get,bean,class,loader,array,resolved,element,type,element,type,catch,throwable,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,error,resolving,array,type,for,arg,name,ex,else,element,type,object,class,return,resolve,managed,array,arg,name,list,value,element,type,else,if,value,instanceof,managed,list,return,resolve,managed,list,arg,name,list,value,else,if,value,instanceof,managed,set,return,resolve,managed,set,arg,name,set,value,else,if,value,instanceof,managed,map,return,resolve,managed,map,arg,name,map,value,else,if,value,instanceof,managed,properties,properties,original,properties,value,properties,copy,new,properties,original,for,each,prop,key,prop,value,if,prop,key,instanceof,typed,string,value,prop,key,evaluate,typed,string,value,prop,key,if,prop,value,instanceof,typed,string,value,prop,value,evaluate,typed,string,value,prop,value,if,prop,key,null,prop,value,null,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,error,converting,properties,key,value,pair,for,arg,name,resolved,to,null,copy,put,prop,key,prop,value,return,copy,else,if,value,instanceof,typed,string,value,typed,string,value,typed,string,value,typed,string,value,value,object,value,object,evaluate,typed,string,value,try,class,resolved,target,type,resolve,target,type,typed,string,value,if,resolved,target,type,null,return,this,type,converter,convert,if,necessary,value,object,resolved,target,type,else,return,value,object,catch,throwable,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,error,converting,typed,string,value,for,arg,name,ex,else,if,value,instanceof,null,bean,return,null,else,return,evaluate,value
BeanDefinitionValueResolver -> @Nullable 	public Object resolveValueIfNecessary(Object argName, @Nullable Object value);1522103912;Given a PropertyValue, return a value, resolving any references to other_beans in the factory if necessary. The value could be:_<li>A BeanDefinition, which leads to the creation of a corresponding_new bean instance. Singleton flags and names of such "inner beans"_are always ignored: Inner beans are anonymous prototypes._<li>A RuntimeBeanReference, which must be resolved._<li>A ManagedList. This is a special collection that may contain_RuntimeBeanReferences or Collections that will need to be resolved._<li>A ManagedSet. May also contain RuntimeBeanReferences or_Collections that will need to be resolved._<li>A ManagedMap. In this case the value may be a RuntimeBeanReference_or Collection that will need to be resolved._<li>An ordinary object or {@code null}, in which case it's left alone._@param argName the name of the argument that the value is defined for_@param value the value object to resolve_@return the resolved object;@Nullable_	public Object resolveValueIfNecessary(Object argName, @Nullable Object value) {_		_		_		if (value instanceof RuntimeBeanReference) {_			RuntimeBeanReference ref = (RuntimeBeanReference) value__			return resolveReference(argName, ref)__		}_		else if (value instanceof RuntimeBeanNameReference) {_			String refName = ((RuntimeBeanNameReference) value).getBeanName()__			refName = String.valueOf(doEvaluate(refName))__			if (!this.beanFactory.containsBean(refName)) {_				throw new BeanDefinitionStoreException(_						"Invalid bean name '" + refName + "' in bean reference for " + argName)__			}_			return refName__		}_		else if (value instanceof BeanDefinitionHolder) {_			_			BeanDefinitionHolder bdHolder = (BeanDefinitionHolder) value__			return resolveInnerBean(argName, bdHolder.getBeanName(), bdHolder.getBeanDefinition())__		}_		else if (value instanceof BeanDefinition) {_			_			BeanDefinition bd = (BeanDefinition) value__			String innerBeanName = "(inner bean)" + BeanFactoryUtils.GENERATED_BEAN_NAME_SEPARATOR +_					ObjectUtils.getIdentityHexString(bd)__			return resolveInnerBean(argName, innerBeanName, bd)__		}_		else if (value instanceof ManagedArray) {_			_			ManagedArray array = (ManagedArray) value__			Class<?> elementType = array.resolvedElementType__			if (elementType == null) {_				String elementTypeName = array.getElementTypeName()__				if (StringUtils.hasText(elementTypeName)) {_					try {_						elementType = ClassUtils.forName(elementTypeName, this.beanFactory.getBeanClassLoader())__						array.resolvedElementType = elementType__					}_					catch (Throwable ex) {_						_						throw new BeanCreationException(_								this.beanDefinition.getResourceDescription(), this.beanName,_								"Error resolving array type for " + argName, ex)__					}_				}_				else {_					elementType = Object.class__				}_			}_			return resolveManagedArray(argName, (List<?>) value, elementType)__		}_		else if (value instanceof ManagedList) {_			_			return resolveManagedList(argName, (List<?>) value)__		}_		else if (value instanceof ManagedSet) {_			_			return resolveManagedSet(argName, (Set<?>) value)__		}_		else if (value instanceof ManagedMap) {_			_			return resolveManagedMap(argName, (Map<?, ?>) value)__		}_		else if (value instanceof ManagedProperties) {_			Properties original = (Properties) value__			Properties copy = new Properties()__			original.forEach((propKey, propValue) -> {_				if (propKey instanceof TypedStringValue) {_					propKey = evaluate((TypedStringValue) propKey)__				}_				if (propValue instanceof TypedStringValue) {_					propValue = evaluate((TypedStringValue) propValue)__				}_				if (propKey == null || propValue == null) {_					throw new BeanCreationException(_							this.beanDefinition.getResourceDescription(), this.beanName,_							"Error converting Properties key/value pair for " + argName + ": resolved to null")__				}_				copy.put(propKey, propValue)__			})__			return copy__		}_		else if (value instanceof TypedStringValue) {_			_			TypedStringValue typedStringValue = (TypedStringValue) value__			Object valueObject = evaluate(typedStringValue)__			try {_				Class<?> resolvedTargetType = resolveTargetType(typedStringValue)__				if (resolvedTargetType != null) {_					return this.typeConverter.convertIfNecessary(valueObject, resolvedTargetType)__				}_				else {_					return valueObject__				}_			}_			catch (Throwable ex) {_				_				throw new BeanCreationException(_						this.beanDefinition.getResourceDescription(), this.beanName,_						"Error converting typed String value for " + argName, ex)__			}_		}_		else if (value instanceof NullBean) {_			return null__		}_		else {_			return evaluate(value)__		}_	};given,a,property,value,return,a,value,resolving,any,references,to,other,beans,in,the,factory,if,necessary,the,value,could,be,li,a,bean,definition,which,leads,to,the,creation,of,a,corresponding,new,bean,instance,singleton,flags,and,names,of,such,inner,beans,are,always,ignored,inner,beans,are,anonymous,prototypes,li,a,runtime,bean,reference,which,must,be,resolved,li,a,managed,list,this,is,a,special,collection,that,may,contain,runtime,bean,references,or,collections,that,will,need,to,be,resolved,li,a,managed,set,may,also,contain,runtime,bean,references,or,collections,that,will,need,to,be,resolved,li,a,managed,map,in,this,case,the,value,may,be,a,runtime,bean,reference,or,collection,that,will,need,to,be,resolved,li,an,ordinary,object,or,code,null,in,which,case,it,s,left,alone,param,arg,name,the,name,of,the,argument,that,the,value,is,defined,for,param,value,the,value,object,to,resolve,return,the,resolved,object;nullable,public,object,resolve,value,if,necessary,object,arg,name,nullable,object,value,if,value,instanceof,runtime,bean,reference,runtime,bean,reference,ref,runtime,bean,reference,value,return,resolve,reference,arg,name,ref,else,if,value,instanceof,runtime,bean,name,reference,string,ref,name,runtime,bean,name,reference,value,get,bean,name,ref,name,string,value,of,do,evaluate,ref,name,if,this,bean,factory,contains,bean,ref,name,throw,new,bean,definition,store,exception,invalid,bean,name,ref,name,in,bean,reference,for,arg,name,return,ref,name,else,if,value,instanceof,bean,definition,holder,bean,definition,holder,bd,holder,bean,definition,holder,value,return,resolve,inner,bean,arg,name,bd,holder,get,bean,name,bd,holder,get,bean,definition,else,if,value,instanceof,bean,definition,bean,definition,bd,bean,definition,value,string,inner,bean,name,inner,bean,bean,factory,utils,object,utils,get,identity,hex,string,bd,return,resolve,inner,bean,arg,name,inner,bean,name,bd,else,if,value,instanceof,managed,array,managed,array,array,managed,array,value,class,element,type,array,resolved,element,type,if,element,type,null,string,element,type,name,array,get,element,type,name,if,string,utils,has,text,element,type,name,try,element,type,class,utils,for,name,element,type,name,this,bean,factory,get,bean,class,loader,array,resolved,element,type,element,type,catch,throwable,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,error,resolving,array,type,for,arg,name,ex,else,element,type,object,class,return,resolve,managed,array,arg,name,list,value,element,type,else,if,value,instanceof,managed,list,return,resolve,managed,list,arg,name,list,value,else,if,value,instanceof,managed,set,return,resolve,managed,set,arg,name,set,value,else,if,value,instanceof,managed,map,return,resolve,managed,map,arg,name,map,value,else,if,value,instanceof,managed,properties,properties,original,properties,value,properties,copy,new,properties,original,for,each,prop,key,prop,value,if,prop,key,instanceof,typed,string,value,prop,key,evaluate,typed,string,value,prop,key,if,prop,value,instanceof,typed,string,value,prop,value,evaluate,typed,string,value,prop,value,if,prop,key,null,prop,value,null,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,error,converting,properties,key,value,pair,for,arg,name,resolved,to,null,copy,put,prop,key,prop,value,return,copy,else,if,value,instanceof,typed,string,value,typed,string,value,typed,string,value,typed,string,value,value,object,value,object,evaluate,typed,string,value,try,class,resolved,target,type,resolve,target,type,typed,string,value,if,resolved,target,type,null,return,this,type,converter,convert,if,necessary,value,object,resolved,target,type,else,return,value,object,catch,throwable,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,error,converting,typed,string,value,for,arg,name,ex,else,if,value,instanceof,null,bean,return,null,else,return,evaluate,value
BeanDefinitionValueResolver -> @Nullable 	private Object resolveInnerBean(Object argName, String innerBeanName, BeanDefinition innerBd);1496837955;Resolve an inner bean definition._@param argName the name of the argument that the inner bean is defined for_@param innerBeanName the name of the inner bean_@param innerBd the bean definition for the inner bean_@return the resolved inner bean instance;@Nullable_	private Object resolveInnerBean(Object argName, String innerBeanName, BeanDefinition innerBd) {_		RootBeanDefinition mbd = null__		try {_			mbd = this.beanFactory.getMergedBeanDefinition(innerBeanName, innerBd, this.beanDefinition)__			_			_			String actualInnerBeanName = innerBeanName__			if (mbd.isSingleton()) {_				actualInnerBeanName = adaptInnerBeanName(innerBeanName)__			}_			this.beanFactory.registerContainedBean(actualInnerBeanName, this.beanName)__			_			String[] dependsOn = mbd.getDependsOn()__			if (dependsOn != null) {_				for (String dependsOnBean : dependsOn) {_					this.beanFactory.registerDependentBean(dependsOnBean, actualInnerBeanName)__					this.beanFactory.getBean(dependsOnBean)__				}_			}_			_			Object innerBean = this.beanFactory.createBean(actualInnerBeanName, mbd, null)__			if (innerBean instanceof FactoryBean) {_				boolean synthetic = mbd.isSynthetic()__				return this.beanFactory.getObjectFromFactoryBean(_						(FactoryBean<?>) innerBean, actualInnerBeanName, !synthetic)__			}_			else {_				return innerBean__			}_		}_		catch (BeansException ex) {_			throw new BeanCreationException(_					this.beanDefinition.getResourceDescription(), this.beanName,_					"Cannot create inner bean '" + innerBeanName + "' " +_					(mbd != null && mbd.getBeanClassName() != null ? "of type [" + mbd.getBeanClassName() + "] " : "") +_					"while setting " + argName, ex)__		}_	};resolve,an,inner,bean,definition,param,arg,name,the,name,of,the,argument,that,the,inner,bean,is,defined,for,param,inner,bean,name,the,name,of,the,inner,bean,param,inner,bd,the,bean,definition,for,the,inner,bean,return,the,resolved,inner,bean,instance;nullable,private,object,resolve,inner,bean,object,arg,name,string,inner,bean,name,bean,definition,inner,bd,root,bean,definition,mbd,null,try,mbd,this,bean,factory,get,merged,bean,definition,inner,bean,name,inner,bd,this,bean,definition,string,actual,inner,bean,name,inner,bean,name,if,mbd,is,singleton,actual,inner,bean,name,adapt,inner,bean,name,inner,bean,name,this,bean,factory,register,contained,bean,actual,inner,bean,name,this,bean,name,string,depends,on,mbd,get,depends,on,if,depends,on,null,for,string,depends,on,bean,depends,on,this,bean,factory,register,dependent,bean,depends,on,bean,actual,inner,bean,name,this,bean,factory,get,bean,depends,on,bean,object,inner,bean,this,bean,factory,create,bean,actual,inner,bean,name,mbd,null,if,inner,bean,instanceof,factory,bean,boolean,synthetic,mbd,is,synthetic,return,this,bean,factory,get,object,from,factory,bean,factory,bean,inner,bean,actual,inner,bean,name,synthetic,else,return,inner,bean,catch,beans,exception,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,cannot,create,inner,bean,inner,bean,name,mbd,null,mbd,get,bean,class,name,null,of,type,mbd,get,bean,class,name,while,setting,arg,name,ex
BeanDefinitionValueResolver -> @Nullable 	private Object resolveInnerBean(Object argName, String innerBeanName, BeanDefinition innerBd);1497250713;Resolve an inner bean definition._@param argName the name of the argument that the inner bean is defined for_@param innerBeanName the name of the inner bean_@param innerBd the bean definition for the inner bean_@return the resolved inner bean instance;@Nullable_	private Object resolveInnerBean(Object argName, String innerBeanName, BeanDefinition innerBd) {_		RootBeanDefinition mbd = null__		try {_			mbd = this.beanFactory.getMergedBeanDefinition(innerBeanName, innerBd, this.beanDefinition)__			_			_			String actualInnerBeanName = innerBeanName__			if (mbd.isSingleton()) {_				actualInnerBeanName = adaptInnerBeanName(innerBeanName)__			}_			this.beanFactory.registerContainedBean(actualInnerBeanName, this.beanName)__			_			String[] dependsOn = mbd.getDependsOn()__			if (dependsOn != null) {_				for (String dependsOnBean : dependsOn) {_					this.beanFactory.registerDependentBean(dependsOnBean, actualInnerBeanName)__					this.beanFactory.getBean(dependsOnBean)__				}_			}_			_			Object innerBean = this.beanFactory.createBean(actualInnerBeanName, mbd, null)__			if (innerBean instanceof FactoryBean) {_				boolean synthetic = mbd.isSynthetic()__				return this.beanFactory.getObjectFromFactoryBean(_						(FactoryBean<?>) innerBean, actualInnerBeanName, !synthetic)__			}_			else {_				return innerBean__			}_		}_		catch (BeansException ex) {_			throw new BeanCreationException(_					this.beanDefinition.getResourceDescription(), this.beanName,_					"Cannot create inner bean '" + innerBeanName + "' " +_					(mbd != null && mbd.getBeanClassName() != null ? "of type [" + mbd.getBeanClassName() + "] " : "") +_					"while setting " + argName, ex)__		}_	};resolve,an,inner,bean,definition,param,arg,name,the,name,of,the,argument,that,the,inner,bean,is,defined,for,param,inner,bean,name,the,name,of,the,inner,bean,param,inner,bd,the,bean,definition,for,the,inner,bean,return,the,resolved,inner,bean,instance;nullable,private,object,resolve,inner,bean,object,arg,name,string,inner,bean,name,bean,definition,inner,bd,root,bean,definition,mbd,null,try,mbd,this,bean,factory,get,merged,bean,definition,inner,bean,name,inner,bd,this,bean,definition,string,actual,inner,bean,name,inner,bean,name,if,mbd,is,singleton,actual,inner,bean,name,adapt,inner,bean,name,inner,bean,name,this,bean,factory,register,contained,bean,actual,inner,bean,name,this,bean,name,string,depends,on,mbd,get,depends,on,if,depends,on,null,for,string,depends,on,bean,depends,on,this,bean,factory,register,dependent,bean,depends,on,bean,actual,inner,bean,name,this,bean,factory,get,bean,depends,on,bean,object,inner,bean,this,bean,factory,create,bean,actual,inner,bean,name,mbd,null,if,inner,bean,instanceof,factory,bean,boolean,synthetic,mbd,is,synthetic,return,this,bean,factory,get,object,from,factory,bean,factory,bean,inner,bean,actual,inner,bean,name,synthetic,else,return,inner,bean,catch,beans,exception,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,cannot,create,inner,bean,inner,bean,name,mbd,null,mbd,get,bean,class,name,null,of,type,mbd,get,bean,class,name,while,setting,arg,name,ex
BeanDefinitionValueResolver -> @Nullable 	private Object resolveInnerBean(Object argName, String innerBeanName, BeanDefinition innerBd);1503007895;Resolve an inner bean definition._@param argName the name of the argument that the inner bean is defined for_@param innerBeanName the name of the inner bean_@param innerBd the bean definition for the inner bean_@return the resolved inner bean instance;@Nullable_	private Object resolveInnerBean(Object argName, String innerBeanName, BeanDefinition innerBd) {_		RootBeanDefinition mbd = null__		try {_			mbd = this.beanFactory.getMergedBeanDefinition(innerBeanName, innerBd, this.beanDefinition)__			_			_			String actualInnerBeanName = innerBeanName__			if (mbd.isSingleton()) {_				actualInnerBeanName = adaptInnerBeanName(innerBeanName)__			}_			this.beanFactory.registerContainedBean(actualInnerBeanName, this.beanName)__			_			String[] dependsOn = mbd.getDependsOn()__			if (dependsOn != null) {_				for (String dependsOnBean : dependsOn) {_					this.beanFactory.registerDependentBean(dependsOnBean, actualInnerBeanName)__					this.beanFactory.getBean(dependsOnBean)__				}_			}_			_			Object innerBean = this.beanFactory.createBean(actualInnerBeanName, mbd, null)__			if (innerBean instanceof FactoryBean) {_				boolean synthetic = mbd.isSynthetic()__				innerBean = this.beanFactory.getObjectFromFactoryBean(_						(FactoryBean<?>) innerBean, actualInnerBeanName, !synthetic)__			}_			if (innerBean instanceof NullBean) {_				innerBean = null__			}_			return innerBean__		}_		catch (BeansException ex) {_			throw new BeanCreationException(_					this.beanDefinition.getResourceDescription(), this.beanName,_					"Cannot create inner bean '" + innerBeanName + "' " +_					(mbd != null && mbd.getBeanClassName() != null ? "of type [" + mbd.getBeanClassName() + "] " : "") +_					"while setting " + argName, ex)__		}_	};resolve,an,inner,bean,definition,param,arg,name,the,name,of,the,argument,that,the,inner,bean,is,defined,for,param,inner,bean,name,the,name,of,the,inner,bean,param,inner,bd,the,bean,definition,for,the,inner,bean,return,the,resolved,inner,bean,instance;nullable,private,object,resolve,inner,bean,object,arg,name,string,inner,bean,name,bean,definition,inner,bd,root,bean,definition,mbd,null,try,mbd,this,bean,factory,get,merged,bean,definition,inner,bean,name,inner,bd,this,bean,definition,string,actual,inner,bean,name,inner,bean,name,if,mbd,is,singleton,actual,inner,bean,name,adapt,inner,bean,name,inner,bean,name,this,bean,factory,register,contained,bean,actual,inner,bean,name,this,bean,name,string,depends,on,mbd,get,depends,on,if,depends,on,null,for,string,depends,on,bean,depends,on,this,bean,factory,register,dependent,bean,depends,on,bean,actual,inner,bean,name,this,bean,factory,get,bean,depends,on,bean,object,inner,bean,this,bean,factory,create,bean,actual,inner,bean,name,mbd,null,if,inner,bean,instanceof,factory,bean,boolean,synthetic,mbd,is,synthetic,inner,bean,this,bean,factory,get,object,from,factory,bean,factory,bean,inner,bean,actual,inner,bean,name,synthetic,if,inner,bean,instanceof,null,bean,inner,bean,null,return,inner,bean,catch,beans,exception,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,cannot,create,inner,bean,inner,bean,name,mbd,null,mbd,get,bean,class,name,null,of,type,mbd,get,bean,class,name,while,setting,arg,name,ex
BeanDefinitionValueResolver -> @Nullable 	private Object resolveInnerBean(Object argName, String innerBeanName, BeanDefinition innerBd);1522103912;Resolve an inner bean definition._@param argName the name of the argument that the inner bean is defined for_@param innerBeanName the name of the inner bean_@param innerBd the bean definition for the inner bean_@return the resolved inner bean instance;@Nullable_	private Object resolveInnerBean(Object argName, String innerBeanName, BeanDefinition innerBd) {_		RootBeanDefinition mbd = null__		try {_			mbd = this.beanFactory.getMergedBeanDefinition(innerBeanName, innerBd, this.beanDefinition)__			_			_			String actualInnerBeanName = innerBeanName__			if (mbd.isSingleton()) {_				actualInnerBeanName = adaptInnerBeanName(innerBeanName)__			}_			this.beanFactory.registerContainedBean(actualInnerBeanName, this.beanName)__			_			String[] dependsOn = mbd.getDependsOn()__			if (dependsOn != null) {_				for (String dependsOnBean : dependsOn) {_					this.beanFactory.registerDependentBean(dependsOnBean, actualInnerBeanName)__					this.beanFactory.getBean(dependsOnBean)__				}_			}_			_			Object innerBean = this.beanFactory.createBean(actualInnerBeanName, mbd, null)__			if (innerBean instanceof FactoryBean) {_				boolean synthetic = mbd.isSynthetic()__				innerBean = this.beanFactory.getObjectFromFactoryBean(_						(FactoryBean<?>) innerBean, actualInnerBeanName, !synthetic)__			}_			if (innerBean instanceof NullBean) {_				innerBean = null__			}_			return innerBean__		}_		catch (BeansException ex) {_			throw new BeanCreationException(_					this.beanDefinition.getResourceDescription(), this.beanName,_					"Cannot create inner bean '" + innerBeanName + "' " +_					(mbd != null && mbd.getBeanClassName() != null ? "of type [" + mbd.getBeanClassName() + "] " : "") +_					"while setting " + argName, ex)__		}_	};resolve,an,inner,bean,definition,param,arg,name,the,name,of,the,argument,that,the,inner,bean,is,defined,for,param,inner,bean,name,the,name,of,the,inner,bean,param,inner,bd,the,bean,definition,for,the,inner,bean,return,the,resolved,inner,bean,instance;nullable,private,object,resolve,inner,bean,object,arg,name,string,inner,bean,name,bean,definition,inner,bd,root,bean,definition,mbd,null,try,mbd,this,bean,factory,get,merged,bean,definition,inner,bean,name,inner,bd,this,bean,definition,string,actual,inner,bean,name,inner,bean,name,if,mbd,is,singleton,actual,inner,bean,name,adapt,inner,bean,name,inner,bean,name,this,bean,factory,register,contained,bean,actual,inner,bean,name,this,bean,name,string,depends,on,mbd,get,depends,on,if,depends,on,null,for,string,depends,on,bean,depends,on,this,bean,factory,register,dependent,bean,depends,on,bean,actual,inner,bean,name,this,bean,factory,get,bean,depends,on,bean,object,inner,bean,this,bean,factory,create,bean,actual,inner,bean,name,mbd,null,if,inner,bean,instanceof,factory,bean,boolean,synthetic,mbd,is,synthetic,inner,bean,this,bean,factory,get,object,from,factory,bean,factory,bean,inner,bean,actual,inner,bean,name,synthetic,if,inner,bean,instanceof,null,bean,inner,bean,null,return,inner,bean,catch,beans,exception,ex,throw,new,bean,creation,exception,this,bean,definition,get,resource,description,this,bean,name,cannot,create,inner,bean,inner,bean,name,mbd,null,mbd,get,bean,class,name,null,of,type,mbd,get,bean,class,name,while,setting,arg,name,ex
BeanDefinitionValueResolver -> @Nullable 	protected Object evaluate(@Nullable Object value);1496837955;Evaluate the given value as an expression, if necessary._@param value the original value (may be an expression)_@return the resolved value if necessary, or the original value;@Nullable_	protected Object evaluate(@Nullable Object value) {_		if (value instanceof String) {_			return doEvaluate((String) value)__		}_		else if (value instanceof String[]) {_			String[] values = (String[]) value__			boolean actuallyResolved = false__			Object[] resolvedValues = new Object[values.length]__			for (int i = 0_ i < values.length_ i++) {_				String originalValue = values[i]__				Object resolvedValue = doEvaluate(originalValue)__				if (resolvedValue != originalValue) {_					actuallyResolved = true__				}_				resolvedValues[i] = resolvedValue__			}_			return (actuallyResolved ? resolvedValues : values)__		}_		else {_			return value__		}_	};evaluate,the,given,value,as,an,expression,if,necessary,param,value,the,original,value,may,be,an,expression,return,the,resolved,value,if,necessary,or,the,original,value;nullable,protected,object,evaluate,nullable,object,value,if,value,instanceof,string,return,do,evaluate,string,value,else,if,value,instanceof,string,string,values,string,value,boolean,actually,resolved,false,object,resolved,values,new,object,values,length,for,int,i,0,i,values,length,i,string,original,value,values,i,object,resolved,value,do,evaluate,original,value,if,resolved,value,original,value,actually,resolved,true,resolved,values,i,resolved,value,return,actually,resolved,resolved,values,values,else,return,value
BeanDefinitionValueResolver -> @Nullable 	protected Object evaluate(@Nullable Object value);1497250713;Evaluate the given value as an expression, if necessary._@param value the original value (may be an expression)_@return the resolved value if necessary, or the original value;@Nullable_	protected Object evaluate(@Nullable Object value) {_		if (value instanceof String) {_			return doEvaluate((String) value)__		}_		else if (value instanceof String[]) {_			String[] values = (String[]) value__			boolean actuallyResolved = false__			Object[] resolvedValues = new Object[values.length]__			for (int i = 0_ i < values.length_ i++) {_				String originalValue = values[i]__				Object resolvedValue = doEvaluate(originalValue)__				if (resolvedValue != originalValue) {_					actuallyResolved = true__				}_				resolvedValues[i] = resolvedValue__			}_			return (actuallyResolved ? resolvedValues : values)__		}_		else {_			return value__		}_	};evaluate,the,given,value,as,an,expression,if,necessary,param,value,the,original,value,may,be,an,expression,return,the,resolved,value,if,necessary,or,the,original,value;nullable,protected,object,evaluate,nullable,object,value,if,value,instanceof,string,return,do,evaluate,string,value,else,if,value,instanceof,string,string,values,string,value,boolean,actually,resolved,false,object,resolved,values,new,object,values,length,for,int,i,0,i,values,length,i,string,original,value,values,i,object,resolved,value,do,evaluate,original,value,if,resolved,value,original,value,actually,resolved,true,resolved,values,i,resolved,value,return,actually,resolved,resolved,values,values,else,return,value
BeanDefinitionValueResolver -> @Nullable 	protected Object evaluate(@Nullable Object value);1503007895;Evaluate the given value as an expression, if necessary._@param value the original value (may be an expression)_@return the resolved value if necessary, or the original value;@Nullable_	protected Object evaluate(@Nullable Object value) {_		if (value instanceof String) {_			return doEvaluate((String) value)__		}_		else if (value instanceof String[]) {_			String[] values = (String[]) value__			boolean actuallyResolved = false__			Object[] resolvedValues = new Object[values.length]__			for (int i = 0_ i < values.length_ i++) {_				String originalValue = values[i]__				Object resolvedValue = doEvaluate(originalValue)__				if (resolvedValue != originalValue) {_					actuallyResolved = true__				}_				resolvedValues[i] = resolvedValue__			}_			return (actuallyResolved ? resolvedValues : values)__		}_		else {_			return value__		}_	};evaluate,the,given,value,as,an,expression,if,necessary,param,value,the,original,value,may,be,an,expression,return,the,resolved,value,if,necessary,or,the,original,value;nullable,protected,object,evaluate,nullable,object,value,if,value,instanceof,string,return,do,evaluate,string,value,else,if,value,instanceof,string,string,values,string,value,boolean,actually,resolved,false,object,resolved,values,new,object,values,length,for,int,i,0,i,values,length,i,string,original,value,values,i,object,resolved,value,do,evaluate,original,value,if,resolved,value,original,value,actually,resolved,true,resolved,values,i,resolved,value,return,actually,resolved,resolved,values,values,else,return,value
BeanDefinitionValueResolver -> @Nullable 	protected Object evaluate(@Nullable Object value);1522103912;Evaluate the given value as an expression, if necessary._@param value the original value (may be an expression)_@return the resolved value if necessary, or the original value;@Nullable_	protected Object evaluate(@Nullable Object value) {_		if (value instanceof String) {_			return doEvaluate((String) value)__		}_		else if (value instanceof String[]) {_			String[] values = (String[]) value__			boolean actuallyResolved = false__			Object[] resolvedValues = new Object[values.length]__			for (int i = 0_ i < values.length_ i++) {_				String originalValue = values[i]__				Object resolvedValue = doEvaluate(originalValue)__				if (resolvedValue != originalValue) {_					actuallyResolved = true__				}_				resolvedValues[i] = resolvedValue__			}_			return (actuallyResolved ? resolvedValues : values)__		}_		else {_			return value__		}_	};evaluate,the,given,value,as,an,expression,if,necessary,param,value,the,original,value,may,be,an,expression,return,the,resolved,value,if,necessary,or,the,original,value;nullable,protected,object,evaluate,nullable,object,value,if,value,instanceof,string,return,do,evaluate,string,value,else,if,value,instanceof,string,string,values,string,value,boolean,actually,resolved,false,object,resolved,values,new,object,values,length,for,int,i,0,i,values,length,i,string,original,value,values,i,object,resolved,value,do,evaluate,original,value,if,resolved,value,original,value,actually,resolved,true,resolved,values,i,resolved,value,return,actually,resolved,resolved,values,values,else,return,value
BeanDefinitionValueResolver -> private Set resolveManagedSet(Object argName, Set<?> ms);1328020251;For each element in the managed set, resolve reference if necessary.;private Set resolveManagedSet(Object argName, Set<?> ms) {_		Set<Object> resolved = new LinkedHashSet<Object>(ms.size())__		int i = 0__		for (Object m : ms) {_			resolved.add(resolveValueIfNecessary(new KeyedArgName(argName, i), m))__			i++__		}_		return resolved__	};for,each,element,in,the,managed,set,resolve,reference,if,necessary;private,set,resolve,managed,set,object,arg,name,set,ms,set,object,resolved,new,linked,hash,set,object,ms,size,int,i,0,for,object,m,ms,resolved,add,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,m,i,return,resolved
BeanDefinitionValueResolver -> private Set resolveManagedSet(Object argName, Set<?> ms);1347282854;For each element in the managed set, resolve reference if necessary.;private Set resolveManagedSet(Object argName, Set<?> ms) {_		Set<Object> resolved = new LinkedHashSet<Object>(ms.size())__		int i = 0__		for (Object m : ms) {_			resolved.add(resolveValueIfNecessary(new KeyedArgName(argName, i), m))__			i++__		}_		return resolved__	};for,each,element,in,the,managed,set,resolve,reference,if,necessary;private,set,resolve,managed,set,object,arg,name,set,ms,set,object,resolved,new,linked,hash,set,object,ms,size,int,i,0,for,object,m,ms,resolved,add,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,m,i,return,resolved
BeanDefinitionValueResolver -> private Set resolveManagedSet(Object argName, Set<?> ms);1356735495;For each element in the managed set, resolve reference if necessary.;private Set resolveManagedSet(Object argName, Set<?> ms) {_		Set<Object> resolved = new LinkedHashSet<Object>(ms.size())__		int i = 0__		for (Object m : ms) {_			resolved.add(resolveValueIfNecessary(new KeyedArgName(argName, i), m))__			i++__		}_		return resolved__	};for,each,element,in,the,managed,set,resolve,reference,if,necessary;private,set,resolve,managed,set,object,arg,name,set,ms,set,object,resolved,new,linked,hash,set,object,ms,size,int,i,0,for,object,m,ms,resolved,add,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,m,i,return,resolved
BeanDefinitionValueResolver -> private Set resolveManagedSet(Object argName, Set<?> ms);1382905576;For each element in the managed set, resolve reference if necessary.;private Set resolveManagedSet(Object argName, Set<?> ms) {_		Set<Object> resolved = new LinkedHashSet<Object>(ms.size())__		int i = 0__		for (Object m : ms) {_			resolved.add(resolveValueIfNecessary(new KeyedArgName(argName, i), m))__			i++__		}_		return resolved__	};for,each,element,in,the,managed,set,resolve,reference,if,necessary;private,set,resolve,managed,set,object,arg,name,set,ms,set,object,resolved,new,linked,hash,set,object,ms,size,int,i,0,for,object,m,ms,resolved,add,resolve,value,if,necessary,new,keyed,arg,name,arg,name,i,m,i,return,resolved
BeanDefinitionValueResolver -> public BeanDefinitionValueResolver( 			AbstractBeanFactory beanFactory, String beanName, BeanDefinition beanDefinition, TypeConverter typeConverter);1328020251;Create a BeanDefinitionValueResolver for the given BeanFactory and BeanDefinition._@param beanFactory the BeanFactory to resolve against_@param beanName the name of the bean that we work on_@param beanDefinition the BeanDefinition of the bean that we work on_@param typeConverter the TypeConverter to use for resolving TypedStringValues;public BeanDefinitionValueResolver(_			AbstractBeanFactory beanFactory, String beanName, BeanDefinition beanDefinition, TypeConverter typeConverter) {__		this.beanFactory = beanFactory__		this.beanName = beanName__		this.beanDefinition = beanDefinition__		this.typeConverter = typeConverter__	};create,a,bean,definition,value,resolver,for,the,given,bean,factory,and,bean,definition,param,bean,factory,the,bean,factory,to,resolve,against,param,bean,name,the,name,of,the,bean,that,we,work,on,param,bean,definition,the,bean,definition,of,the,bean,that,we,work,on,param,type,converter,the,type,converter,to,use,for,resolving,typed,string,values;public,bean,definition,value,resolver,abstract,bean,factory,bean,factory,string,bean,name,bean,definition,bean,definition,type,converter,type,converter,this,bean,factory,bean,factory,this,bean,name,bean,name,this,bean,definition,bean,definition,this,type,converter,type,converter
BeanDefinitionValueResolver -> public BeanDefinitionValueResolver( 			AbstractBeanFactory beanFactory, String beanName, BeanDefinition beanDefinition, TypeConverter typeConverter);1347282854;Create a BeanDefinitionValueResolver for the given BeanFactory and BeanDefinition._@param beanFactory the BeanFactory to resolve against_@param beanName the name of the bean that we work on_@param beanDefinition the BeanDefinition of the bean that we work on_@param typeConverter the TypeConverter to use for resolving TypedStringValues;public BeanDefinitionValueResolver(_			AbstractBeanFactory beanFactory, String beanName, BeanDefinition beanDefinition, TypeConverter typeConverter) {__		this.beanFactory = beanFactory__		this.beanName = beanName__		this.beanDefinition = beanDefinition__		this.typeConverter = typeConverter__	};create,a,bean,definition,value,resolver,for,the,given,bean,factory,and,bean,definition,param,bean,factory,the,bean,factory,to,resolve,against,param,bean,name,the,name,of,the,bean,that,we,work,on,param,bean,definition,the,bean,definition,of,the,bean,that,we,work,on,param,type,converter,the,type,converter,to,use,for,resolving,typed,string,values;public,bean,definition,value,resolver,abstract,bean,factory,bean,factory,string,bean,name,bean,definition,bean,definition,type,converter,type,converter,this,bean,factory,bean,factory,this,bean,name,bean,name,this,bean,definition,bean,definition,this,type,converter,type,converter
BeanDefinitionValueResolver -> public BeanDefinitionValueResolver( 			AbstractBeanFactory beanFactory, String beanName, BeanDefinition beanDefinition, TypeConverter typeConverter);1356735495;Create a BeanDefinitionValueResolver for the given BeanFactory and BeanDefinition._@param beanFactory the BeanFactory to resolve against_@param beanName the name of the bean that we work on_@param beanDefinition the BeanDefinition of the bean that we work on_@param typeConverter the TypeConverter to use for resolving TypedStringValues;public BeanDefinitionValueResolver(_			AbstractBeanFactory beanFactory, String beanName, BeanDefinition beanDefinition, TypeConverter typeConverter) {__		this.beanFactory = beanFactory__		this.beanName = beanName__		this.beanDefinition = beanDefinition__		this.typeConverter = typeConverter__	};create,a,bean,definition,value,resolver,for,the,given,bean,factory,and,bean,definition,param,bean,factory,the,bean,factory,to,resolve,against,param,bean,name,the,name,of,the,bean,that,we,work,on,param,bean,definition,the,bean,definition,of,the,bean,that,we,work,on,param,type,converter,the,type,converter,to,use,for,resolving,typed,string,values;public,bean,definition,value,resolver,abstract,bean,factory,bean,factory,string,bean,name,bean,definition,bean,definition,type,converter,type,converter,this,bean,factory,bean,factory,this,bean,name,bean,name,this,bean,definition,bean,definition,this,type,converter,type,converter
BeanDefinitionValueResolver -> public BeanDefinitionValueResolver( 			AbstractBeanFactory beanFactory, String beanName, BeanDefinition beanDefinition, TypeConverter typeConverter);1382905576;Create a BeanDefinitionValueResolver for the given BeanFactory and BeanDefinition._@param beanFactory the BeanFactory to resolve against_@param beanName the name of the bean that we work on_@param beanDefinition the BeanDefinition of the bean that we work on_@param typeConverter the TypeConverter to use for resolving TypedStringValues;public BeanDefinitionValueResolver(_			AbstractBeanFactory beanFactory, String beanName, BeanDefinition beanDefinition, TypeConverter typeConverter) {__		this.beanFactory = beanFactory__		this.beanName = beanName__		this.beanDefinition = beanDefinition__		this.typeConverter = typeConverter__	};create,a,bean,definition,value,resolver,for,the,given,bean,factory,and,bean,definition,param,bean,factory,the,bean,factory,to,resolve,against,param,bean,name,the,name,of,the,bean,that,we,work,on,param,bean,definition,the,bean,definition,of,the,bean,that,we,work,on,param,type,converter,the,type,converter,to,use,for,resolving,typed,string,values;public,bean,definition,value,resolver,abstract,bean,factory,bean,factory,string,bean,name,bean,definition,bean,definition,type,converter,type,converter,this,bean,factory,bean,factory,this,bean,name,bean,name,this,bean,definition,bean,definition,this,type,converter,type,converter
BeanDefinitionValueResolver -> public BeanDefinitionValueResolver( 			AbstractBeanFactory beanFactory, String beanName, BeanDefinition beanDefinition, TypeConverter typeConverter);1385412762;Create a BeanDefinitionValueResolver for the given BeanFactory and BeanDefinition._@param beanFactory the BeanFactory to resolve against_@param beanName the name of the bean that we work on_@param beanDefinition the BeanDefinition of the bean that we work on_@param typeConverter the TypeConverter to use for resolving TypedStringValues;public BeanDefinitionValueResolver(_			AbstractBeanFactory beanFactory, String beanName, BeanDefinition beanDefinition, TypeConverter typeConverter) {__		this.beanFactory = beanFactory__		this.beanName = beanName__		this.beanDefinition = beanDefinition__		this.typeConverter = typeConverter__	};create,a,bean,definition,value,resolver,for,the,given,bean,factory,and,bean,definition,param,bean,factory,the,bean,factory,to,resolve,against,param,bean,name,the,name,of,the,bean,that,we,work,on,param,bean,definition,the,bean,definition,of,the,bean,that,we,work,on,param,type,converter,the,type,converter,to,use,for,resolving,typed,string,values;public,bean,definition,value,resolver,abstract,bean,factory,bean,factory,string,bean,name,bean,definition,bean,definition,type,converter,type,converter,this,bean,factory,bean,factory,this,bean,name,bean,name,this,bean,definition,bean,definition,this,type,converter,type,converter
BeanDefinitionValueResolver -> public BeanDefinitionValueResolver( 			AbstractBeanFactory beanFactory, String beanName, BeanDefinition beanDefinition, TypeConverter typeConverter);1386621944;Create a BeanDefinitionValueResolver for the given BeanFactory and BeanDefinition._@param beanFactory the BeanFactory to resolve against_@param beanName the name of the bean that we work on_@param beanDefinition the BeanDefinition of the bean that we work on_@param typeConverter the TypeConverter to use for resolving TypedStringValues;public BeanDefinitionValueResolver(_			AbstractBeanFactory beanFactory, String beanName, BeanDefinition beanDefinition, TypeConverter typeConverter) {__		this.beanFactory = beanFactory__		this.beanName = beanName__		this.beanDefinition = beanDefinition__		this.typeConverter = typeConverter__	};create,a,bean,definition,value,resolver,for,the,given,bean,factory,and,bean,definition,param,bean,factory,the,bean,factory,to,resolve,against,param,bean,name,the,name,of,the,bean,that,we,work,on,param,bean,definition,the,bean,definition,of,the,bean,that,we,work,on,param,type,converter,the,type,converter,to,use,for,resolving,typed,string,values;public,bean,definition,value,resolver,abstract,bean,factory,bean,factory,string,bean,name,bean,definition,bean,definition,type,converter,type,converter,this,bean,factory,bean,factory,this,bean,name,bean,name,this,bean,definition,bean,definition,this,type,converter,type,converter
BeanDefinitionValueResolver -> public BeanDefinitionValueResolver( 			AbstractBeanFactory beanFactory, String beanName, BeanDefinition beanDefinition, TypeConverter typeConverter);1394825889;Create a BeanDefinitionValueResolver for the given BeanFactory and BeanDefinition._@param beanFactory the BeanFactory to resolve against_@param beanName the name of the bean that we work on_@param beanDefinition the BeanDefinition of the bean that we work on_@param typeConverter the TypeConverter to use for resolving TypedStringValues;public BeanDefinitionValueResolver(_			AbstractBeanFactory beanFactory, String beanName, BeanDefinition beanDefinition, TypeConverter typeConverter) {__		this.beanFactory = beanFactory__		this.beanName = beanName__		this.beanDefinition = beanDefinition__		this.typeConverter = typeConverter__	};create,a,bean,definition,value,resolver,for,the,given,bean,factory,and,bean,definition,param,bean,factory,the,bean,factory,to,resolve,against,param,bean,name,the,name,of,the,bean,that,we,work,on,param,bean,definition,the,bean,definition,of,the,bean,that,we,work,on,param,type,converter,the,type,converter,to,use,for,resolving,typed,string,values;public,bean,definition,value,resolver,abstract,bean,factory,bean,factory,string,bean,name,bean,definition,bean,definition,type,converter,type,converter,this,bean,factory,bean,factory,this,bean,name,bean,name,this,bean,definition,bean,definition,this,type,converter,type,converter
BeanDefinitionValueResolver -> public BeanDefinitionValueResolver( 			AbstractBeanFactory beanFactory, String beanName, BeanDefinition beanDefinition, TypeConverter typeConverter);1414738527;Create a BeanDefinitionValueResolver for the given BeanFactory and BeanDefinition._@param beanFactory the BeanFactory to resolve against_@param beanName the name of the bean that we work on_@param beanDefinition the BeanDefinition of the bean that we work on_@param typeConverter the TypeConverter to use for resolving TypedStringValues;public BeanDefinitionValueResolver(_			AbstractBeanFactory beanFactory, String beanName, BeanDefinition beanDefinition, TypeConverter typeConverter) {__		this.beanFactory = beanFactory__		this.beanName = beanName__		this.beanDefinition = beanDefinition__		this.typeConverter = typeConverter__	};create,a,bean,definition,value,resolver,for,the,given,bean,factory,and,bean,definition,param,bean,factory,the,bean,factory,to,resolve,against,param,bean,name,the,name,of,the,bean,that,we,work,on,param,bean,definition,the,bean,definition,of,the,bean,that,we,work,on,param,type,converter,the,type,converter,to,use,for,resolving,typed,string,values;public,bean,definition,value,resolver,abstract,bean,factory,bean,factory,string,bean,name,bean,definition,bean,definition,type,converter,type,converter,this,bean,factory,bean,factory,this,bean,name,bean,name,this,bean,definition,bean,definition,this,type,converter,type,converter
BeanDefinitionValueResolver -> public BeanDefinitionValueResolver( 			AbstractBeanFactory beanFactory, String beanName, BeanDefinition beanDefinition, TypeConverter typeConverter);1414774626;Create a BeanDefinitionValueResolver for the given BeanFactory and BeanDefinition._@param beanFactory the BeanFactory to resolve against_@param beanName the name of the bean that we work on_@param beanDefinition the BeanDefinition of the bean that we work on_@param typeConverter the TypeConverter to use for resolving TypedStringValues;public BeanDefinitionValueResolver(_			AbstractBeanFactory beanFactory, String beanName, BeanDefinition beanDefinition, TypeConverter typeConverter) {__		this.beanFactory = beanFactory__		this.beanName = beanName__		this.beanDefinition = beanDefinition__		this.typeConverter = typeConverter__	};create,a,bean,definition,value,resolver,for,the,given,bean,factory,and,bean,definition,param,bean,factory,the,bean,factory,to,resolve,against,param,bean,name,the,name,of,the,bean,that,we,work,on,param,bean,definition,the,bean,definition,of,the,bean,that,we,work,on,param,type,converter,the,type,converter,to,use,for,resolving,typed,string,values;public,bean,definition,value,resolver,abstract,bean,factory,bean,factory,string,bean,name,bean,definition,bean,definition,type,converter,type,converter,this,bean,factory,bean,factory,this,bean,name,bean,name,this,bean,definition,bean,definition,this,type,converter,type,converter
BeanDefinitionValueResolver -> public BeanDefinitionValueResolver( 			AbstractBeanFactory beanFactory, String beanName, BeanDefinition beanDefinition, TypeConverter typeConverter);1467730834;Create a BeanDefinitionValueResolver for the given BeanFactory and BeanDefinition._@param beanFactory the BeanFactory to resolve against_@param beanName the name of the bean that we work on_@param beanDefinition the BeanDefinition of the bean that we work on_@param typeConverter the TypeConverter to use for resolving TypedStringValues;public BeanDefinitionValueResolver(_			AbstractBeanFactory beanFactory, String beanName, BeanDefinition beanDefinition, TypeConverter typeConverter) {__		this.beanFactory = beanFactory__		this.beanName = beanName__		this.beanDefinition = beanDefinition__		this.typeConverter = typeConverter__	};create,a,bean,definition,value,resolver,for,the,given,bean,factory,and,bean,definition,param,bean,factory,the,bean,factory,to,resolve,against,param,bean,name,the,name,of,the,bean,that,we,work,on,param,bean,definition,the,bean,definition,of,the,bean,that,we,work,on,param,type,converter,the,type,converter,to,use,for,resolving,typed,string,values;public,bean,definition,value,resolver,abstract,bean,factory,bean,factory,string,bean,name,bean,definition,bean,definition,type,converter,type,converter,this,bean,factory,bean,factory,this,bean,name,bean,name,this,bean,definition,bean,definition,this,type,converter,type,converter
BeanDefinitionValueResolver -> public BeanDefinitionValueResolver( 			AbstractBeanFactory beanFactory, String beanName, BeanDefinition beanDefinition, TypeConverter typeConverter);1495868221;Create a BeanDefinitionValueResolver for the given BeanFactory and BeanDefinition._@param beanFactory the BeanFactory to resolve against_@param beanName the name of the bean that we work on_@param beanDefinition the BeanDefinition of the bean that we work on_@param typeConverter the TypeConverter to use for resolving TypedStringValues;public BeanDefinitionValueResolver(_			AbstractBeanFactory beanFactory, String beanName, BeanDefinition beanDefinition, TypeConverter typeConverter) {__		this.beanFactory = beanFactory__		this.beanName = beanName__		this.beanDefinition = beanDefinition__		this.typeConverter = typeConverter__	};create,a,bean,definition,value,resolver,for,the,given,bean,factory,and,bean,definition,param,bean,factory,the,bean,factory,to,resolve,against,param,bean,name,the,name,of,the,bean,that,we,work,on,param,bean,definition,the,bean,definition,of,the,bean,that,we,work,on,param,type,converter,the,type,converter,to,use,for,resolving,typed,string,values;public,bean,definition,value,resolver,abstract,bean,factory,bean,factory,string,bean,name,bean,definition,bean,definition,type,converter,type,converter,this,bean,factory,bean,factory,this,bean,name,bean,name,this,bean,definition,bean,definition,this,type,converter,type,converter
BeanDefinitionValueResolver -> public BeanDefinitionValueResolver( 			AbstractBeanFactory beanFactory, String beanName, BeanDefinition beanDefinition, TypeConverter typeConverter);1496837955;Create a BeanDefinitionValueResolver for the given BeanFactory and BeanDefinition._@param beanFactory the BeanFactory to resolve against_@param beanName the name of the bean that we work on_@param beanDefinition the BeanDefinition of the bean that we work on_@param typeConverter the TypeConverter to use for resolving TypedStringValues;public BeanDefinitionValueResolver(_			AbstractBeanFactory beanFactory, String beanName, BeanDefinition beanDefinition, TypeConverter typeConverter) {__		this.beanFactory = beanFactory__		this.beanName = beanName__		this.beanDefinition = beanDefinition__		this.typeConverter = typeConverter__	};create,a,bean,definition,value,resolver,for,the,given,bean,factory,and,bean,definition,param,bean,factory,the,bean,factory,to,resolve,against,param,bean,name,the,name,of,the,bean,that,we,work,on,param,bean,definition,the,bean,definition,of,the,bean,that,we,work,on,param,type,converter,the,type,converter,to,use,for,resolving,typed,string,values;public,bean,definition,value,resolver,abstract,bean,factory,bean,factory,string,bean,name,bean,definition,bean,definition,type,converter,type,converter,this,bean,factory,bean,factory,this,bean,name,bean,name,this,bean,definition,bean,definition,this,type,converter,type,converter
BeanDefinitionValueResolver -> public BeanDefinitionValueResolver( 			AbstractBeanFactory beanFactory, String beanName, BeanDefinition beanDefinition, TypeConverter typeConverter);1497250713;Create a BeanDefinitionValueResolver for the given BeanFactory and BeanDefinition._@param beanFactory the BeanFactory to resolve against_@param beanName the name of the bean that we work on_@param beanDefinition the BeanDefinition of the bean that we work on_@param typeConverter the TypeConverter to use for resolving TypedStringValues;public BeanDefinitionValueResolver(_			AbstractBeanFactory beanFactory, String beanName, BeanDefinition beanDefinition, TypeConverter typeConverter) {__		this.beanFactory = beanFactory__		this.beanName = beanName__		this.beanDefinition = beanDefinition__		this.typeConverter = typeConverter__	};create,a,bean,definition,value,resolver,for,the,given,bean,factory,and,bean,definition,param,bean,factory,the,bean,factory,to,resolve,against,param,bean,name,the,name,of,the,bean,that,we,work,on,param,bean,definition,the,bean,definition,of,the,bean,that,we,work,on,param,type,converter,the,type,converter,to,use,for,resolving,typed,string,values;public,bean,definition,value,resolver,abstract,bean,factory,bean,factory,string,bean,name,bean,definition,bean,definition,type,converter,type,converter,this,bean,factory,bean,factory,this,bean,name,bean,name,this,bean,definition,bean,definition,this,type,converter,type,converter
BeanDefinitionValueResolver -> public BeanDefinitionValueResolver( 			AbstractBeanFactory beanFactory, String beanName, BeanDefinition beanDefinition, TypeConverter typeConverter);1503007895;Create a BeanDefinitionValueResolver for the given BeanFactory and BeanDefinition._@param beanFactory the BeanFactory to resolve against_@param beanName the name of the bean that we work on_@param beanDefinition the BeanDefinition of the bean that we work on_@param typeConverter the TypeConverter to use for resolving TypedStringValues;public BeanDefinitionValueResolver(_			AbstractBeanFactory beanFactory, String beanName, BeanDefinition beanDefinition, TypeConverter typeConverter) {__		this.beanFactory = beanFactory__		this.beanName = beanName__		this.beanDefinition = beanDefinition__		this.typeConverter = typeConverter__	};create,a,bean,definition,value,resolver,for,the,given,bean,factory,and,bean,definition,param,bean,factory,the,bean,factory,to,resolve,against,param,bean,name,the,name,of,the,bean,that,we,work,on,param,bean,definition,the,bean,definition,of,the,bean,that,we,work,on,param,type,converter,the,type,converter,to,use,for,resolving,typed,string,values;public,bean,definition,value,resolver,abstract,bean,factory,bean,factory,string,bean,name,bean,definition,bean,definition,type,converter,type,converter,this,bean,factory,bean,factory,this,bean,name,bean,name,this,bean,definition,bean,definition,this,type,converter,type,converter
BeanDefinitionValueResolver -> public BeanDefinitionValueResolver( 			AbstractBeanFactory beanFactory, String beanName, BeanDefinition beanDefinition, TypeConverter typeConverter);1522103912;Create a BeanDefinitionValueResolver for the given BeanFactory and BeanDefinition._@param beanFactory the BeanFactory to resolve against_@param beanName the name of the bean that we work on_@param beanDefinition the BeanDefinition of the bean that we work on_@param typeConverter the TypeConverter to use for resolving TypedStringValues;public BeanDefinitionValueResolver(_			AbstractBeanFactory beanFactory, String beanName, BeanDefinition beanDefinition, TypeConverter typeConverter) {__		this.beanFactory = beanFactory__		this.beanName = beanName__		this.beanDefinition = beanDefinition__		this.typeConverter = typeConverter__	};create,a,bean,definition,value,resolver,for,the,given,bean,factory,and,bean,definition,param,bean,factory,the,bean,factory,to,resolve,against,param,bean,name,the,name,of,the,bean,that,we,work,on,param,bean,definition,the,bean,definition,of,the,bean,that,we,work,on,param,type,converter,the,type,converter,to,use,for,resolving,typed,string,values;public,bean,definition,value,resolver,abstract,bean,factory,bean,factory,string,bean,name,bean,definition,bean,definition,type,converter,type,converter,this,bean,factory,bean,factory,this,bean,name,bean,name,this,bean,definition,bean,definition,this,type,converter,type,converter
BeanDefinitionValueResolver -> protected Object evaluate(Object value);1328020251;Evaluate the given value as an expression, if necessary._@param value the candidate value (may be an expression)_@return the resolved value;protected Object evaluate(Object value) {_		if (value instanceof String) {_			return this.beanFactory.evaluateBeanDefinitionString((String) value, this.beanDefinition)__		}_		else {_			return value__		}_	};evaluate,the,given,value,as,an,expression,if,necessary,param,value,the,candidate,value,may,be,an,expression,return,the,resolved,value;protected,object,evaluate,object,value,if,value,instanceof,string,return,this,bean,factory,evaluate,bean,definition,string,string,value,this,bean,definition,else,return,value
BeanDefinitionValueResolver -> protected Object evaluate(Object value);1347282854;Evaluate the given value as an expression, if necessary._@param value the candidate value (may be an expression)_@return the resolved value;protected Object evaluate(Object value) {_		if (value instanceof String) {_			return this.beanFactory.evaluateBeanDefinitionString((String) value, this.beanDefinition)__		}_		else {_			return value__		}_	};evaluate,the,given,value,as,an,expression,if,necessary,param,value,the,candidate,value,may,be,an,expression,return,the,resolved,value;protected,object,evaluate,object,value,if,value,instanceof,string,return,this,bean,factory,evaluate,bean,definition,string,string,value,this,bean,definition,else,return,value
BeanDefinitionValueResolver -> protected Object evaluate(Object value);1356735495;Evaluate the given value as an expression, if necessary._@param value the candidate value (may be an expression)_@return the resolved value;protected Object evaluate(Object value) {_		if (value instanceof String) {_			return this.beanFactory.evaluateBeanDefinitionString((String) value, this.beanDefinition)__		}_		else {_			return value__		}_	};evaluate,the,given,value,as,an,expression,if,necessary,param,value,the,candidate,value,may,be,an,expression,return,the,resolved,value;protected,object,evaluate,object,value,if,value,instanceof,string,return,this,bean,factory,evaluate,bean,definition,string,string,value,this,bean,definition,else,return,value
BeanDefinitionValueResolver -> protected Object evaluate(Object value);1382905576;Evaluate the given value as an expression, if necessary._@param value the candidate value (may be an expression)_@return the resolved value;protected Object evaluate(Object value) {_		if (value instanceof String) {_			return this.beanFactory.evaluateBeanDefinitionString((String) value, this.beanDefinition)__		}_		else {_			return value__		}_	};evaluate,the,given,value,as,an,expression,if,necessary,param,value,the,candidate,value,may,be,an,expression,return,the,resolved,value;protected,object,evaluate,object,value,if,value,instanceof,string,return,this,bean,factory,evaluate,bean,definition,string,string,value,this,bean,definition,else,return,value
BeanDefinitionValueResolver -> protected Object evaluate(Object value);1385412762;Evaluate the given value as an expression, if necessary._@param value the candidate value (may be an expression)_@return the resolved value;protected Object evaluate(Object value) {_		if (value instanceof String) {_			return this.beanFactory.evaluateBeanDefinitionString((String) value, this.beanDefinition)__		}_		else {_			return value__		}_	};evaluate,the,given,value,as,an,expression,if,necessary,param,value,the,candidate,value,may,be,an,expression,return,the,resolved,value;protected,object,evaluate,object,value,if,value,instanceof,string,return,this,bean,factory,evaluate,bean,definition,string,string,value,this,bean,definition,else,return,value
BeanDefinitionValueResolver -> protected Object evaluate(Object value);1386621944;Evaluate the given value as an expression, if necessary._@param value the candidate value (may be an expression)_@return the resolved value;protected Object evaluate(Object value) {_		if (value instanceof String) {_			return this.beanFactory.evaluateBeanDefinitionString((String) value, this.beanDefinition)__		}_		else {_			return value__		}_	};evaluate,the,given,value,as,an,expression,if,necessary,param,value,the,candidate,value,may,be,an,expression,return,the,resolved,value;protected,object,evaluate,object,value,if,value,instanceof,string,return,this,bean,factory,evaluate,bean,definition,string,string,value,this,bean,definition,else,return,value
BeanDefinitionValueResolver -> protected Object evaluate(Object value);1394825889;Evaluate the given value as an expression, if necessary._@param value the candidate value (may be an expression)_@return the resolved value;protected Object evaluate(Object value) {_		if (value instanceof String) {_			return this.beanFactory.evaluateBeanDefinitionString((String) value, this.beanDefinition)__		}_		else {_			return value__		}_	};evaluate,the,given,value,as,an,expression,if,necessary,param,value,the,candidate,value,may,be,an,expression,return,the,resolved,value;protected,object,evaluate,object,value,if,value,instanceof,string,return,this,bean,factory,evaluate,bean,definition,string,string,value,this,bean,definition,else,return,value
BeanDefinitionValueResolver -> protected Object evaluate(Object value);1414738527;Evaluate the given value as an expression, if necessary._@param value the candidate value (may be an expression)_@return the resolved value;protected Object evaluate(Object value) {_		if (value instanceof String) {_			return this.beanFactory.evaluateBeanDefinitionString((String) value, this.beanDefinition)__		}_		else {_			return value__		}_	};evaluate,the,given,value,as,an,expression,if,necessary,param,value,the,candidate,value,may,be,an,expression,return,the,resolved,value;protected,object,evaluate,object,value,if,value,instanceof,string,return,this,bean,factory,evaluate,bean,definition,string,string,value,this,bean,definition,else,return,value
BeanDefinitionValueResolver -> protected Object evaluate(Object value);1414774626;Evaluate the given value as an expression, if necessary._@param value the original value (may be an expression)_@return the resolved value if necessary, or the original value;protected Object evaluate(Object value) {_		if (value instanceof String) {_			return doEvaluate((String) value)__		}_		else if (value instanceof String[]) {_			String[] values = (String[]) value__			boolean actuallyResolved = false__			Object[] resolvedValues = new Object[values.length]__			for (int i = 0_ i < values.length_ i++) {_				String originalValue = values[i]__				Object resolvedValue = doEvaluate(originalValue)__				if (resolvedValue != originalValue) {_					actuallyResolved = true__				}_				resolvedValues[i] = resolvedValue__			}_			return (actuallyResolved ? resolvedValues : values)__		}_		else {_			return value__		}_	};evaluate,the,given,value,as,an,expression,if,necessary,param,value,the,original,value,may,be,an,expression,return,the,resolved,value,if,necessary,or,the,original,value;protected,object,evaluate,object,value,if,value,instanceof,string,return,do,evaluate,string,value,else,if,value,instanceof,string,string,values,string,value,boolean,actually,resolved,false,object,resolved,values,new,object,values,length,for,int,i,0,i,values,length,i,string,original,value,values,i,object,resolved,value,do,evaluate,original,value,if,resolved,value,original,value,actually,resolved,true,resolved,values,i,resolved,value,return,actually,resolved,resolved,values,values,else,return,value
BeanDefinitionValueResolver -> protected Object evaluate(Object value);1467730834;Evaluate the given value as an expression, if necessary._@param value the original value (may be an expression)_@return the resolved value if necessary, or the original value;protected Object evaluate(Object value) {_		if (value instanceof String) {_			return doEvaluate((String) value)__		}_		else if (value instanceof String[]) {_			String[] values = (String[]) value__			boolean actuallyResolved = false__			Object[] resolvedValues = new Object[values.length]__			for (int i = 0_ i < values.length_ i++) {_				String originalValue = values[i]__				Object resolvedValue = doEvaluate(originalValue)__				if (resolvedValue != originalValue) {_					actuallyResolved = true__				}_				resolvedValues[i] = resolvedValue__			}_			return (actuallyResolved ? resolvedValues : values)__		}_		else {_			return value__		}_	};evaluate,the,given,value,as,an,expression,if,necessary,param,value,the,original,value,may,be,an,expression,return,the,resolved,value,if,necessary,or,the,original,value;protected,object,evaluate,object,value,if,value,instanceof,string,return,do,evaluate,string,value,else,if,value,instanceof,string,string,values,string,value,boolean,actually,resolved,false,object,resolved,values,new,object,values,length,for,int,i,0,i,values,length,i,string,original,value,values,i,object,resolved,value,do,evaluate,original,value,if,resolved,value,original,value,actually,resolved,true,resolved,values,i,resolved,value,return,actually,resolved,resolved,values,values,else,return,value
BeanDefinitionValueResolver -> protected Object evaluate(Object value);1495868221;Evaluate the given value as an expression, if necessary._@param value the original value (may be an expression)_@return the resolved value if necessary, or the original value;protected Object evaluate(Object value) {_		if (value instanceof String) {_			return doEvaluate((String) value)__		}_		else if (value instanceof String[]) {_			String[] values = (String[]) value__			boolean actuallyResolved = false__			Object[] resolvedValues = new Object[values.length]__			for (int i = 0_ i < values.length_ i++) {_				String originalValue = values[i]__				Object resolvedValue = doEvaluate(originalValue)__				if (resolvedValue != originalValue) {_					actuallyResolved = true__				}_				resolvedValues[i] = resolvedValue__			}_			return (actuallyResolved ? resolvedValues : values)__		}_		else {_			return value__		}_	};evaluate,the,given,value,as,an,expression,if,necessary,param,value,the,original,value,may,be,an,expression,return,the,resolved,value,if,necessary,or,the,original,value;protected,object,evaluate,object,value,if,value,instanceof,string,return,do,evaluate,string,value,else,if,value,instanceof,string,string,values,string,value,boolean,actually,resolved,false,object,resolved,values,new,object,values,length,for,int,i,0,i,values,length,i,string,original,value,values,i,object,resolved,value,do,evaluate,original,value,if,resolved,value,original,value,actually,resolved,true,resolved,values,i,resolved,value,return,actually,resolved,resolved,values,values,else,return,value
BeanDefinitionValueResolver -> protected Class<?> resolveTargetType(TypedStringValue value) throws ClassNotFoundException;1328020251;Resolve the target type in the given TypedStringValue._@param value the TypedStringValue to resolve_@return the resolved target type (or <code>null</code> if none specified)_@throws ClassNotFoundException if the specified type cannot be resolved_@see TypedStringValue#resolveTargetType;protected Class<?> resolveTargetType(TypedStringValue value) throws ClassNotFoundException {_		if (value.hasTargetType()) {_			return value.getTargetType()__		}_		return value.resolveTargetType(this.beanFactory.getBeanClassLoader())__	};resolve,the,target,type,in,the,given,typed,string,value,param,value,the,typed,string,value,to,resolve,return,the,resolved,target,type,or,code,null,code,if,none,specified,throws,class,not,found,exception,if,the,specified,type,cannot,be,resolved,see,typed,string,value,resolve,target,type;protected,class,resolve,target,type,typed,string,value,value,throws,class,not,found,exception,if,value,has,target,type,return,value,get,target,type,return,value,resolve,target,type,this,bean,factory,get,bean,class,loader
BeanDefinitionValueResolver -> protected Class<?> resolveTargetType(TypedStringValue value) throws ClassNotFoundException;1347282854;Resolve the target type in the given TypedStringValue._@param value the TypedStringValue to resolve_@return the resolved target type (or <code>null</code> if none specified)_@throws ClassNotFoundException if the specified type cannot be resolved_@see TypedStringValue#resolveTargetType;protected Class<?> resolveTargetType(TypedStringValue value) throws ClassNotFoundException {_		if (value.hasTargetType()) {_			return value.getTargetType()__		}_		return value.resolveTargetType(this.beanFactory.getBeanClassLoader())__	};resolve,the,target,type,in,the,given,typed,string,value,param,value,the,typed,string,value,to,resolve,return,the,resolved,target,type,or,code,null,code,if,none,specified,throws,class,not,found,exception,if,the,specified,type,cannot,be,resolved,see,typed,string,value,resolve,target,type;protected,class,resolve,target,type,typed,string,value,value,throws,class,not,found,exception,if,value,has,target,type,return,value,get,target,type,return,value,resolve,target,type,this,bean,factory,get,bean,class,loader
BeanDefinitionValueResolver -> protected Class<?> resolveTargetType(TypedStringValue value) throws ClassNotFoundException;1356735495;Resolve the target type in the given TypedStringValue._@param value the TypedStringValue to resolve_@return the resolved target type (or {@code null} if none specified)_@throws ClassNotFoundException if the specified type cannot be resolved_@see TypedStringValue#resolveTargetType;protected Class<?> resolveTargetType(TypedStringValue value) throws ClassNotFoundException {_		if (value.hasTargetType()) {_			return value.getTargetType()__		}_		return value.resolveTargetType(this.beanFactory.getBeanClassLoader())__	};resolve,the,target,type,in,the,given,typed,string,value,param,value,the,typed,string,value,to,resolve,return,the,resolved,target,type,or,code,null,if,none,specified,throws,class,not,found,exception,if,the,specified,type,cannot,be,resolved,see,typed,string,value,resolve,target,type;protected,class,resolve,target,type,typed,string,value,value,throws,class,not,found,exception,if,value,has,target,type,return,value,get,target,type,return,value,resolve,target,type,this,bean,factory,get,bean,class,loader
BeanDefinitionValueResolver -> protected Class<?> resolveTargetType(TypedStringValue value) throws ClassNotFoundException;1382905576;Resolve the target type in the given TypedStringValue._@param value the TypedStringValue to resolve_@return the resolved target type (or {@code null} if none specified)_@throws ClassNotFoundException if the specified type cannot be resolved_@see TypedStringValue#resolveTargetType;protected Class<?> resolveTargetType(TypedStringValue value) throws ClassNotFoundException {_		if (value.hasTargetType()) {_			return value.getTargetType()__		}_		return value.resolveTargetType(this.beanFactory.getBeanClassLoader())__	};resolve,the,target,type,in,the,given,typed,string,value,param,value,the,typed,string,value,to,resolve,return,the,resolved,target,type,or,code,null,if,none,specified,throws,class,not,found,exception,if,the,specified,type,cannot,be,resolved,see,typed,string,value,resolve,target,type;protected,class,resolve,target,type,typed,string,value,value,throws,class,not,found,exception,if,value,has,target,type,return,value,get,target,type,return,value,resolve,target,type,this,bean,factory,get,bean,class,loader
BeanDefinitionValueResolver -> protected Class<?> resolveTargetType(TypedStringValue value) throws ClassNotFoundException;1385412762;Resolve the target type in the given TypedStringValue._@param value the TypedStringValue to resolve_@return the resolved target type (or {@code null} if none specified)_@throws ClassNotFoundException if the specified type cannot be resolved_@see TypedStringValue#resolveTargetType;protected Class<?> resolveTargetType(TypedStringValue value) throws ClassNotFoundException {_		if (value.hasTargetType()) {_			return value.getTargetType()__		}_		return value.resolveTargetType(this.beanFactory.getBeanClassLoader())__	};resolve,the,target,type,in,the,given,typed,string,value,param,value,the,typed,string,value,to,resolve,return,the,resolved,target,type,or,code,null,if,none,specified,throws,class,not,found,exception,if,the,specified,type,cannot,be,resolved,see,typed,string,value,resolve,target,type;protected,class,resolve,target,type,typed,string,value,value,throws,class,not,found,exception,if,value,has,target,type,return,value,get,target,type,return,value,resolve,target,type,this,bean,factory,get,bean,class,loader
BeanDefinitionValueResolver -> protected Class<?> resolveTargetType(TypedStringValue value) throws ClassNotFoundException;1386621944;Resolve the target type in the given TypedStringValue._@param value the TypedStringValue to resolve_@return the resolved target type (or {@code null} if none specified)_@throws ClassNotFoundException if the specified type cannot be resolved_@see TypedStringValue#resolveTargetType;protected Class<?> resolveTargetType(TypedStringValue value) throws ClassNotFoundException {_		if (value.hasTargetType()) {_			return value.getTargetType()__		}_		return value.resolveTargetType(this.beanFactory.getBeanClassLoader())__	};resolve,the,target,type,in,the,given,typed,string,value,param,value,the,typed,string,value,to,resolve,return,the,resolved,target,type,or,code,null,if,none,specified,throws,class,not,found,exception,if,the,specified,type,cannot,be,resolved,see,typed,string,value,resolve,target,type;protected,class,resolve,target,type,typed,string,value,value,throws,class,not,found,exception,if,value,has,target,type,return,value,get,target,type,return,value,resolve,target,type,this,bean,factory,get,bean,class,loader
BeanDefinitionValueResolver -> protected Class<?> resolveTargetType(TypedStringValue value) throws ClassNotFoundException;1394825889;Resolve the target type in the given TypedStringValue._@param value the TypedStringValue to resolve_@return the resolved target type (or {@code null} if none specified)_@throws ClassNotFoundException if the specified type cannot be resolved_@see TypedStringValue#resolveTargetType;protected Class<?> resolveTargetType(TypedStringValue value) throws ClassNotFoundException {_		if (value.hasTargetType()) {_			return value.getTargetType()__		}_		return value.resolveTargetType(this.beanFactory.getBeanClassLoader())__	};resolve,the,target,type,in,the,given,typed,string,value,param,value,the,typed,string,value,to,resolve,return,the,resolved,target,type,or,code,null,if,none,specified,throws,class,not,found,exception,if,the,specified,type,cannot,be,resolved,see,typed,string,value,resolve,target,type;protected,class,resolve,target,type,typed,string,value,value,throws,class,not,found,exception,if,value,has,target,type,return,value,get,target,type,return,value,resolve,target,type,this,bean,factory,get,bean,class,loader
BeanDefinitionValueResolver -> protected Class<?> resolveTargetType(TypedStringValue value) throws ClassNotFoundException;1414738527;Resolve the target type in the given TypedStringValue._@param value the TypedStringValue to resolve_@return the resolved target type (or {@code null} if none specified)_@throws ClassNotFoundException if the specified type cannot be resolved_@see TypedStringValue#resolveTargetType;protected Class<?> resolveTargetType(TypedStringValue value) throws ClassNotFoundException {_		if (value.hasTargetType()) {_			return value.getTargetType()__		}_		return value.resolveTargetType(this.beanFactory.getBeanClassLoader())__	};resolve,the,target,type,in,the,given,typed,string,value,param,value,the,typed,string,value,to,resolve,return,the,resolved,target,type,or,code,null,if,none,specified,throws,class,not,found,exception,if,the,specified,type,cannot,be,resolved,see,typed,string,value,resolve,target,type;protected,class,resolve,target,type,typed,string,value,value,throws,class,not,found,exception,if,value,has,target,type,return,value,get,target,type,return,value,resolve,target,type,this,bean,factory,get,bean,class,loader
BeanDefinitionValueResolver -> protected Class<?> resolveTargetType(TypedStringValue value) throws ClassNotFoundException;1414774626;Resolve the target type in the given TypedStringValue._@param value the TypedStringValue to resolve_@return the resolved target type (or {@code null} if none specified)_@throws ClassNotFoundException if the specified type cannot be resolved_@see TypedStringValue#resolveTargetType;protected Class<?> resolveTargetType(TypedStringValue value) throws ClassNotFoundException {_		if (value.hasTargetType()) {_			return value.getTargetType()__		}_		return value.resolveTargetType(this.beanFactory.getBeanClassLoader())__	};resolve,the,target,type,in,the,given,typed,string,value,param,value,the,typed,string,value,to,resolve,return,the,resolved,target,type,or,code,null,if,none,specified,throws,class,not,found,exception,if,the,specified,type,cannot,be,resolved,see,typed,string,value,resolve,target,type;protected,class,resolve,target,type,typed,string,value,value,throws,class,not,found,exception,if,value,has,target,type,return,value,get,target,type,return,value,resolve,target,type,this,bean,factory,get,bean,class,loader
BeanDefinitionValueResolver -> protected Class<?> resolveTargetType(TypedStringValue value) throws ClassNotFoundException;1467730834;Resolve the target type in the given TypedStringValue._@param value the TypedStringValue to resolve_@return the resolved target type (or {@code null} if none specified)_@throws ClassNotFoundException if the specified type cannot be resolved_@see TypedStringValue#resolveTargetType;protected Class<?> resolveTargetType(TypedStringValue value) throws ClassNotFoundException {_		if (value.hasTargetType()) {_			return value.getTargetType()__		}_		return value.resolveTargetType(this.beanFactory.getBeanClassLoader())__	};resolve,the,target,type,in,the,given,typed,string,value,param,value,the,typed,string,value,to,resolve,return,the,resolved,target,type,or,code,null,if,none,specified,throws,class,not,found,exception,if,the,specified,type,cannot,be,resolved,see,typed,string,value,resolve,target,type;protected,class,resolve,target,type,typed,string,value,value,throws,class,not,found,exception,if,value,has,target,type,return,value,get,target,type,return,value,resolve,target,type,this,bean,factory,get,bean,class,loader
BeanDefinitionValueResolver -> @Nullable 	protected Object evaluate(TypedStringValue value);1496837955;Evaluate the given value as an expression, if necessary._@param value the candidate value (may be an expression)_@return the resolved value;@Nullable_	protected Object evaluate(TypedStringValue value) {_		Object result = doEvaluate(value.getValue())__		if (!ObjectUtils.nullSafeEquals(result, value.getValue())) {_			value.setDynamic()__		}_		return result__	};evaluate,the,given,value,as,an,expression,if,necessary,param,value,the,candidate,value,may,be,an,expression,return,the,resolved,value;nullable,protected,object,evaluate,typed,string,value,value,object,result,do,evaluate,value,get,value,if,object,utils,null,safe,equals,result,value,get,value,value,set,dynamic,return,result
BeanDefinitionValueResolver -> @Nullable 	protected Object evaluate(TypedStringValue value);1497250713;Evaluate the given value as an expression, if necessary._@param value the candidate value (may be an expression)_@return the resolved value;@Nullable_	protected Object evaluate(TypedStringValue value) {_		Object result = doEvaluate(value.getValue())__		if (!ObjectUtils.nullSafeEquals(result, value.getValue())) {_			value.setDynamic()__		}_		return result__	};evaluate,the,given,value,as,an,expression,if,necessary,param,value,the,candidate,value,may,be,an,expression,return,the,resolved,value;nullable,protected,object,evaluate,typed,string,value,value,object,result,do,evaluate,value,get,value,if,object,utils,null,safe,equals,result,value,get,value,value,set,dynamic,return,result
BeanDefinitionValueResolver -> @Nullable 	protected Object evaluate(TypedStringValue value);1503007895;Evaluate the given value as an expression, if necessary._@param value the candidate value (may be an expression)_@return the resolved value;@Nullable_	protected Object evaluate(TypedStringValue value) {_		Object result = doEvaluate(value.getValue())__		if (!ObjectUtils.nullSafeEquals(result, value.getValue())) {_			value.setDynamic()__		}_		return result__	};evaluate,the,given,value,as,an,expression,if,necessary,param,value,the,candidate,value,may,be,an,expression,return,the,resolved,value;nullable,protected,object,evaluate,typed,string,value,value,object,result,do,evaluate,value,get,value,if,object,utils,null,safe,equals,result,value,get,value,value,set,dynamic,return,result
BeanDefinitionValueResolver -> @Nullable 	protected Object evaluate(TypedStringValue value);1522103912;Evaluate the given value as an expression, if necessary._@param value the candidate value (may be an expression)_@return the resolved value;@Nullable_	protected Object evaluate(TypedStringValue value) {_		Object result = doEvaluate(value.getValue())__		if (!ObjectUtils.nullSafeEquals(result, value.getValue())) {_			value.setDynamic()__		}_		return result__	};evaluate,the,given,value,as,an,expression,if,necessary,param,value,the,candidate,value,may,be,an,expression,return,the,resolved,value;nullable,protected,object,evaluate,typed,string,value,value,object,result,do,evaluate,value,get,value,if,object,utils,null,safe,equals,result,value,get,value,value,set,dynamic,return,result
