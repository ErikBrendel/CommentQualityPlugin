# id;timestamp;commentText;codeText;commentWords;codeWords
PropertyMatches -> private String[] calculateMatches(PropertyDescriptor[] propertyDescriptors, int maxDistance);1328020251;Generate possible property alternatives for the given property and_class. Internally uses the <code>getStringDistance</code> method, which_in turn uses the Levenshtein algorithm to determine the distance between_two Strings._@param propertyDescriptors the JavaBeans property descriptors to search_@param maxDistance the maximum distance to accept;private String[] calculateMatches(PropertyDescriptor[] propertyDescriptors, int maxDistance) {_		List<String> candidates = new ArrayList<String>()__		for (PropertyDescriptor pd : propertyDescriptors) {_			if (pd.getWriteMethod() != null) {_				String possibleAlternative = pd.getName()__				if (calculateStringDistance(this.propertyName, possibleAlternative) <= maxDistance) {_					candidates.add(possibleAlternative)__				}_			}_		}_		Collections.sort(candidates)__		return StringUtils.toStringArray(candidates)__	};generate,possible,property,alternatives,for,the,given,property,and,class,internally,uses,the,code,get,string,distance,code,method,which,in,turn,uses,the,levenshtein,algorithm,to,determine,the,distance,between,two,strings,param,property,descriptors,the,java,beans,property,descriptors,to,search,param,max,distance,the,maximum,distance,to,accept;private,string,calculate,matches,property,descriptor,property,descriptors,int,max,distance,list,string,candidates,new,array,list,string,for,property,descriptor,pd,property,descriptors,if,pd,get,write,method,null,string,possible,alternative,pd,get,name,if,calculate,string,distance,this,property,name,possible,alternative,max,distance,candidates,add,possible,alternative,collections,sort,candidates,return,string,utils,to,string,array,candidates
PropertyMatches -> private String[] calculateMatches(PropertyDescriptor[] propertyDescriptors, int maxDistance);1356735495;Generate possible property alternatives for the given property and_class. Internally uses the {@code getStringDistance} method, which_in turn uses the Levenshtein algorithm to determine the distance between_two Strings._@param propertyDescriptors the JavaBeans property descriptors to search_@param maxDistance the maximum distance to accept;private String[] calculateMatches(PropertyDescriptor[] propertyDescriptors, int maxDistance) {_		List<String> candidates = new ArrayList<String>()__		for (PropertyDescriptor pd : propertyDescriptors) {_			if (pd.getWriteMethod() != null) {_				String possibleAlternative = pd.getName()__				if (calculateStringDistance(this.propertyName, possibleAlternative) <= maxDistance) {_					candidates.add(possibleAlternative)__				}_			}_		}_		Collections.sort(candidates)__		return StringUtils.toStringArray(candidates)__	};generate,possible,property,alternatives,for,the,given,property,and,class,internally,uses,the,code,get,string,distance,method,which,in,turn,uses,the,levenshtein,algorithm,to,determine,the,distance,between,two,strings,param,property,descriptors,the,java,beans,property,descriptors,to,search,param,max,distance,the,maximum,distance,to,accept;private,string,calculate,matches,property,descriptor,property,descriptors,int,max,distance,list,string,candidates,new,array,list,string,for,property,descriptor,pd,property,descriptors,if,pd,get,write,method,null,string,possible,alternative,pd,get,name,if,calculate,string,distance,this,property,name,possible,alternative,max,distance,candidates,add,possible,alternative,collections,sort,candidates,return,string,utils,to,string,array,candidates
PropertyMatches -> private String[] calculateMatches(PropertyDescriptor[] propertyDescriptors, int maxDistance);1385412762;Generate possible property alternatives for the given property and_class. Internally uses the {@code getStringDistance} method, which_in turn uses the Levenshtein algorithm to determine the distance between_two Strings._@param propertyDescriptors the JavaBeans property descriptors to search_@param maxDistance the maximum distance to accept;private String[] calculateMatches(PropertyDescriptor[] propertyDescriptors, int maxDistance) {_		List<String> candidates = new ArrayList<String>()__		for (PropertyDescriptor pd : propertyDescriptors) {_			if (pd.getWriteMethod() != null) {_				String possibleAlternative = pd.getName()__				if (calculateStringDistance(this.propertyName, possibleAlternative) <= maxDistance) {_					candidates.add(possibleAlternative)__				}_			}_		}_		Collections.sort(candidates)__		return StringUtils.toStringArray(candidates)__	};generate,possible,property,alternatives,for,the,given,property,and,class,internally,uses,the,code,get,string,distance,method,which,in,turn,uses,the,levenshtein,algorithm,to,determine,the,distance,between,two,strings,param,property,descriptors,the,java,beans,property,descriptors,to,search,param,max,distance,the,maximum,distance,to,accept;private,string,calculate,matches,property,descriptor,property,descriptors,int,max,distance,list,string,candidates,new,array,list,string,for,property,descriptor,pd,property,descriptors,if,pd,get,write,method,null,string,possible,alternative,pd,get,name,if,calculate,string,distance,this,property,name,possible,alternative,max,distance,candidates,add,possible,alternative,collections,sort,candidates,return,string,utils,to,string,array,candidates
PropertyMatches -> private String[] calculateMatches(PropertyDescriptor[] propertyDescriptors, int maxDistance);1405696918;Generate possible property alternatives for the given property and_class. Internally uses the {@code getStringDistance} method, which_in turn uses the Levenshtein algorithm to determine the distance between_two Strings._@param propertyDescriptors the JavaBeans property descriptors to search_@param maxDistance the maximum distance to accept;private String[] calculateMatches(PropertyDescriptor[] propertyDescriptors, int maxDistance) {_		List<String> candidates = new ArrayList<String>()__		for (PropertyDescriptor pd : propertyDescriptors) {_			if (pd.getWriteMethod() != null) {_				String possibleAlternative = pd.getName()__				if (calculateStringDistance(this.propertyName, possibleAlternative) <= maxDistance) {_					candidates.add(possibleAlternative)__				}_			}_		}_		Collections.sort(candidates)__		return StringUtils.toStringArray(candidates)__	};generate,possible,property,alternatives,for,the,given,property,and,class,internally,uses,the,code,get,string,distance,method,which,in,turn,uses,the,levenshtein,algorithm,to,determine,the,distance,between,two,strings,param,property,descriptors,the,java,beans,property,descriptors,to,search,param,max,distance,the,maximum,distance,to,accept;private,string,calculate,matches,property,descriptor,property,descriptors,int,max,distance,list,string,candidates,new,array,list,string,for,property,descriptor,pd,property,descriptors,if,pd,get,write,method,null,string,possible,alternative,pd,get,name,if,calculate,string,distance,this,property,name,possible,alternative,max,distance,candidates,add,possible,alternative,collections,sort,candidates,return,string,utils,to,string,array,candidates
PropertyMatches -> private PropertyMatches(String propertyName, Class beanClass, int maxDistance);1328020251;Create a new PropertyMatches instance for the given property.;private PropertyMatches(String propertyName, Class beanClass, int maxDistance) {_		this.propertyName = propertyName__		this.possibleMatches = calculateMatches(BeanUtils.getPropertyDescriptors(beanClass), maxDistance)__	};create,a,new,property,matches,instance,for,the,given,property;private,property,matches,string,property,name,class,bean,class,int,max,distance,this,property,name,property,name,this,possible,matches,calculate,matches,bean,utils,get,property,descriptors,bean,class,max,distance
PropertyMatches -> private PropertyMatches(String propertyName, Class beanClass, int maxDistance);1356735495;Create a new PropertyMatches instance for the given property.;private PropertyMatches(String propertyName, Class beanClass, int maxDistance) {_		this.propertyName = propertyName__		this.possibleMatches = calculateMatches(BeanUtils.getPropertyDescriptors(beanClass), maxDistance)__	};create,a,new,property,matches,instance,for,the,given,property;private,property,matches,string,property,name,class,bean,class,int,max,distance,this,property,name,property,name,this,possible,matches,calculate,matches,bean,utils,get,property,descriptors,bean,class,max,distance
PropertyMatches -> public static PropertyMatches forProperty(String propertyName, Class<?> beanClass, int maxDistance);1385412762;Create PropertyMatches for the given bean property._@param propertyName the name of the property to find possible matches for_@param beanClass the bean class to search for matches_@param maxDistance the maximum property distance allowed for matches;public static PropertyMatches forProperty(String propertyName, Class<?> beanClass, int maxDistance) {_		return new PropertyMatches(propertyName, beanClass, maxDistance)__	};create,property,matches,for,the,given,bean,property,param,property,name,the,name,of,the,property,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches,param,max,distance,the,maximum,property,distance,allowed,for,matches;public,static,property,matches,for,property,string,property,name,class,bean,class,int,max,distance,return,new,property,matches,property,name,bean,class,max,distance
PropertyMatches -> public static PropertyMatches forProperty(String propertyName, Class<?> beanClass, int maxDistance);1405696918;Create PropertyMatches for the given bean property._@param propertyName the name of the property to find possible matches for_@param beanClass the bean class to search for matches_@param maxDistance the maximum property distance allowed for matches;public static PropertyMatches forProperty(String propertyName, Class<?> beanClass, int maxDistance) {_		return new PropertyMatches(propertyName, beanClass, maxDistance)__	};create,property,matches,for,the,given,bean,property,param,property,name,the,name,of,the,property,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches,param,max,distance,the,maximum,property,distance,allowed,for,matches;public,static,property,matches,for,property,string,property,name,class,bean,class,int,max,distance,return,new,property,matches,property,name,bean,class,max,distance
PropertyMatches -> public static PropertyMatches forProperty(String propertyName, Class<?> beanClass, int maxDistance);1432213851;Create PropertyMatches for the given bean property._@param propertyName the name of the property to find possible matches for_@param beanClass the bean class to search for matches_@param maxDistance the maximum property distance allowed for matches;public static PropertyMatches forProperty(String propertyName, Class<?> beanClass, int maxDistance) {_		return new BeanPropertyMatches(propertyName, beanClass, maxDistance)__	};create,property,matches,for,the,given,bean,property,param,property,name,the,name,of,the,property,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches,param,max,distance,the,maximum,property,distance,allowed,for,matches;public,static,property,matches,for,property,string,property,name,class,bean,class,int,max,distance,return,new,bean,property,matches,property,name,bean,class,max,distance
PropertyMatches -> public static PropertyMatches forProperty(String propertyName, Class<?> beanClass, int maxDistance);1432232180;Create PropertyMatches for the given bean property._@param propertyName the name of the property to find possible matches for_@param beanClass the bean class to search for matches_@param maxDistance the maximum property distance allowed for matches;public static PropertyMatches forProperty(String propertyName, Class<?> beanClass, int maxDistance) {_		return new BeanPropertyMatches(propertyName, beanClass, maxDistance)__	};create,property,matches,for,the,given,bean,property,param,property,name,the,name,of,the,property,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches,param,max,distance,the,maximum,property,distance,allowed,for,matches;public,static,property,matches,for,property,string,property,name,class,bean,class,int,max,distance,return,new,bean,property,matches,property,name,bean,class,max,distance
PropertyMatches -> public static PropertyMatches forProperty(String propertyName, Class<?> beanClass, int maxDistance);1467730834;Create PropertyMatches for the given bean property._@param propertyName the name of the property to find possible matches for_@param beanClass the bean class to search for matches_@param maxDistance the maximum property distance allowed for matches;public static PropertyMatches forProperty(String propertyName, Class<?> beanClass, int maxDistance) {_		return new BeanPropertyMatches(propertyName, beanClass, maxDistance)__	};create,property,matches,for,the,given,bean,property,param,property,name,the,name,of,the,property,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches,param,max,distance,the,maximum,property,distance,allowed,for,matches;public,static,property,matches,for,property,string,property,name,class,bean,class,int,max,distance,return,new,bean,property,matches,property,name,bean,class,max,distance
PropertyMatches -> public static PropertyMatches forProperty(String propertyName, Class<?> beanClass, int maxDistance);1479997926;Create PropertyMatches for the given bean property._@param propertyName the name of the property to find possible matches for_@param beanClass the bean class to search for matches_@param maxDistance the maximum property distance allowed for matches;public static PropertyMatches forProperty(String propertyName, Class<?> beanClass, int maxDistance) {_		return new BeanPropertyMatches(propertyName, beanClass, maxDistance)__	};create,property,matches,for,the,given,bean,property,param,property,name,the,name,of,the,property,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches,param,max,distance,the,maximum,property,distance,allowed,for,matches;public,static,property,matches,for,property,string,property,name,class,bean,class,int,max,distance,return,new,bean,property,matches,property,name,bean,class,max,distance
PropertyMatches -> public static PropertyMatches forProperty(String propertyName, Class<?> beanClass, int maxDistance);1487760984;Create PropertyMatches for the given bean property._@param propertyName the name of the property to find possible matches for_@param beanClass the bean class to search for matches_@param maxDistance the maximum property distance allowed for matches;public static PropertyMatches forProperty(String propertyName, Class<?> beanClass, int maxDistance) {_		return new BeanPropertyMatches(propertyName, beanClass, maxDistance)__	};create,property,matches,for,the,given,bean,property,param,property,name,the,name,of,the,property,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches,param,max,distance,the,maximum,property,distance,allowed,for,matches;public,static,property,matches,for,property,string,property,name,class,bean,class,int,max,distance,return,new,bean,property,matches,property,name,bean,class,max,distance
PropertyMatches -> public static PropertyMatches forProperty(String propertyName, Class<?> beanClass, int maxDistance);1497341397;Create PropertyMatches for the given bean property._@param propertyName the name of the property to find possible matches for_@param beanClass the bean class to search for matches_@param maxDistance the maximum property distance allowed for matches;public static PropertyMatches forProperty(String propertyName, Class<?> beanClass, int maxDistance) {_		return new BeanPropertyMatches(propertyName, beanClass, maxDistance)__	};create,property,matches,for,the,given,bean,property,param,property,name,the,name,of,the,property,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches,param,max,distance,the,maximum,property,distance,allowed,for,matches;public,static,property,matches,for,property,string,property,name,class,bean,class,int,max,distance,return,new,bean,property,matches,property,name,bean,class,max,distance
PropertyMatches -> public static PropertyMatches forProperty(String propertyName, Class<?> beanClass, int maxDistance);1497341594;Create PropertyMatches for the given bean property._@param propertyName the name of the property to find possible matches for_@param beanClass the bean class to search for matches_@param maxDistance the maximum property distance allowed for matches;public static PropertyMatches forProperty(String propertyName, Class<?> beanClass, int maxDistance) {_		return new BeanPropertyMatches(propertyName, beanClass, maxDistance)__	};create,property,matches,for,the,given,bean,property,param,property,name,the,name,of,the,property,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches,param,max,distance,the,maximum,property,distance,allowed,for,matches;public,static,property,matches,for,property,string,property,name,class,bean,class,int,max,distance,return,new,bean,property,matches,property,name,bean,class,max,distance
PropertyMatches -> public static PropertyMatches forProperty(String propertyName, Class<?> beanClass, int maxDistance);1519560860;Create PropertyMatches for the given bean property._@param propertyName the name of the property to find possible matches for_@param beanClass the bean class to search for matches_@param maxDistance the maximum property distance allowed for matches;public static PropertyMatches forProperty(String propertyName, Class<?> beanClass, int maxDistance) {_		return new BeanPropertyMatches(propertyName, beanClass, maxDistance)__	};create,property,matches,for,the,given,bean,property,param,property,name,the,name,of,the,property,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches,param,max,distance,the,maximum,property,distance,allowed,for,matches;public,static,property,matches,for,property,string,property,name,class,bean,class,int,max,distance,return,new,bean,property,matches,property,name,bean,class,max,distance
PropertyMatches -> public static PropertyMatches forProperty(String propertyName, Class<?> beanClass, int maxDistance);1520434198;Create PropertyMatches for the given bean property._@param propertyName the name of the property to find possible matches for_@param beanClass the bean class to search for matches_@param maxDistance the maximum property distance allowed for matches;public static PropertyMatches forProperty(String propertyName, Class<?> beanClass, int maxDistance) {_		return new BeanPropertyMatches(propertyName, beanClass, maxDistance)__	};create,property,matches,for,the,given,bean,property,param,property,name,the,name,of,the,property,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches,param,max,distance,the,maximum,property,distance,allowed,for,matches;public,static,property,matches,for,property,string,property,name,class,bean,class,int,max,distance,return,new,bean,property,matches,property,name,bean,class,max,distance
PropertyMatches -> public static PropertyMatches forProperty(String propertyName, Class<?> beanClass, int maxDistance);1530174524;Create PropertyMatches for the given bean property._@param propertyName the name of the property to find possible matches for_@param beanClass the bean class to search for matches_@param maxDistance the maximum property distance allowed for matches;public static PropertyMatches forProperty(String propertyName, Class<?> beanClass, int maxDistance) {_		return new BeanPropertyMatches(propertyName, beanClass, maxDistance)__	};create,property,matches,for,the,given,bean,property,param,property,name,the,name,of,the,property,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches,param,max,distance,the,maximum,property,distance,allowed,for,matches;public,static,property,matches,for,property,string,property,name,class,bean,class,int,max,distance,return,new,bean,property,matches,property,name,bean,class,max,distance
PropertyMatches -> public static PropertyMatches forField(String propertyName, Class<?> beanClass);1432213851;Create PropertyMatches for the given field property._@param propertyName the name of the field to find possible matches for_@param beanClass the bean class to search for matches;public static PropertyMatches forField(String propertyName, Class<?> beanClass) {_		return forField(propertyName, beanClass, DEFAULT_MAX_DISTANCE)__	};create,property,matches,for,the,given,field,property,param,property,name,the,name,of,the,field,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches;public,static,property,matches,for,field,string,property,name,class,bean,class,return,for,field,property,name,bean,class
PropertyMatches -> public static PropertyMatches forField(String propertyName, Class<?> beanClass);1432232180;Create PropertyMatches for the given field property._@param propertyName the name of the field to find possible matches for_@param beanClass the bean class to search for matches;public static PropertyMatches forField(String propertyName, Class<?> beanClass) {_		return forField(propertyName, beanClass, DEFAULT_MAX_DISTANCE)__	};create,property,matches,for,the,given,field,property,param,property,name,the,name,of,the,field,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches;public,static,property,matches,for,field,string,property,name,class,bean,class,return,for,field,property,name,bean,class
PropertyMatches -> public static PropertyMatches forField(String propertyName, Class<?> beanClass);1467730834;Create PropertyMatches for the given field property._@param propertyName the name of the field to find possible matches for_@param beanClass the bean class to search for matches;public static PropertyMatches forField(String propertyName, Class<?> beanClass) {_		return forField(propertyName, beanClass, DEFAULT_MAX_DISTANCE)__	};create,property,matches,for,the,given,field,property,param,property,name,the,name,of,the,field,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches;public,static,property,matches,for,field,string,property,name,class,bean,class,return,for,field,property,name,bean,class
PropertyMatches -> public static PropertyMatches forField(String propertyName, Class<?> beanClass);1479997926;Create PropertyMatches for the given field property._@param propertyName the name of the field to find possible matches for_@param beanClass the bean class to search for matches;public static PropertyMatches forField(String propertyName, Class<?> beanClass) {_		return forField(propertyName, beanClass, DEFAULT_MAX_DISTANCE)__	};create,property,matches,for,the,given,field,property,param,property,name,the,name,of,the,field,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches;public,static,property,matches,for,field,string,property,name,class,bean,class,return,for,field,property,name,bean,class
PropertyMatches -> public static PropertyMatches forField(String propertyName, Class<?> beanClass);1487760984;Create PropertyMatches for the given field property._@param propertyName the name of the field to find possible matches for_@param beanClass the bean class to search for matches;public static PropertyMatches forField(String propertyName, Class<?> beanClass) {_		return forField(propertyName, beanClass, DEFAULT_MAX_DISTANCE)__	};create,property,matches,for,the,given,field,property,param,property,name,the,name,of,the,field,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches;public,static,property,matches,for,field,string,property,name,class,bean,class,return,for,field,property,name,bean,class
PropertyMatches -> public static PropertyMatches forField(String propertyName, Class<?> beanClass);1497341397;Create PropertyMatches for the given field property._@param propertyName the name of the field to find possible matches for_@param beanClass the bean class to search for matches;public static PropertyMatches forField(String propertyName, Class<?> beanClass) {_		return forField(propertyName, beanClass, DEFAULT_MAX_DISTANCE)__	};create,property,matches,for,the,given,field,property,param,property,name,the,name,of,the,field,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches;public,static,property,matches,for,field,string,property,name,class,bean,class,return,for,field,property,name,bean,class
PropertyMatches -> public static PropertyMatches forField(String propertyName, Class<?> beanClass);1497341594;Create PropertyMatches for the given field property._@param propertyName the name of the field to find possible matches for_@param beanClass the bean class to search for matches;public static PropertyMatches forField(String propertyName, Class<?> beanClass) {_		return forField(propertyName, beanClass, DEFAULT_MAX_DISTANCE)__	};create,property,matches,for,the,given,field,property,param,property,name,the,name,of,the,field,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches;public,static,property,matches,for,field,string,property,name,class,bean,class,return,for,field,property,name,bean,class
PropertyMatches -> public static PropertyMatches forField(String propertyName, Class<?> beanClass);1519560860;Create PropertyMatches for the given field property._@param propertyName the name of the field to find possible matches for_@param beanClass the bean class to search for matches;public static PropertyMatches forField(String propertyName, Class<?> beanClass) {_		return forField(propertyName, beanClass, DEFAULT_MAX_DISTANCE)__	};create,property,matches,for,the,given,field,property,param,property,name,the,name,of,the,field,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches;public,static,property,matches,for,field,string,property,name,class,bean,class,return,for,field,property,name,bean,class
PropertyMatches -> public static PropertyMatches forField(String propertyName, Class<?> beanClass);1520434198;Create PropertyMatches for the given field property._@param propertyName the name of the field to find possible matches for_@param beanClass the bean class to search for matches;public static PropertyMatches forField(String propertyName, Class<?> beanClass) {_		return forField(propertyName, beanClass, DEFAULT_MAX_DISTANCE)__	};create,property,matches,for,the,given,field,property,param,property,name,the,name,of,the,field,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches;public,static,property,matches,for,field,string,property,name,class,bean,class,return,for,field,property,name,bean,class
PropertyMatches -> public static PropertyMatches forField(String propertyName, Class<?> beanClass);1530174524;Create PropertyMatches for the given field property._@param propertyName the name of the field to find possible matches for_@param beanClass the bean class to search for matches;public static PropertyMatches forField(String propertyName, Class<?> beanClass) {_		return forField(propertyName, beanClass, DEFAULT_MAX_DISTANCE)__	};create,property,matches,for,the,given,field,property,param,property,name,the,name,of,the,field,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches;public,static,property,matches,for,field,string,property,name,class,bean,class,return,for,field,property,name,bean,class
PropertyMatches -> private int calculateStringDistance(String s1, String s2);1328020251;Calculate the distance between the given two Strings_according to the Levenshtein algorithm._@param s1 the first String_@param s2 the second String_@return the distance value;private int calculateStringDistance(String s1, String s2) {_		if (s1.length() == 0) {_			return s2.length()__		}_		if (s2.length() == 0) {_			return s1.length()__		}_		int d[][] = new int[s1.length() + 1][s2.length() + 1]___		for (int i = 0_ i <= s1.length()_ i++) {_			d[i][0] = i__		}_		for (int j = 0_ j <= s2.length()_ j++) {_			d[0][j] = j__		}__		for (int i = 1_ i <= s1.length()_ i++) {_			char s_i = s1.charAt(i - 1)__			for (int j = 1_ j <= s2.length()_ j++) {_				int cost__				char t_j = s2.charAt(j - 1)__				if (s_i == t_j) {_					cost = 0__				} else {_					cost = 1__				}_				d[i][j] = Math.min(Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1),_						d[i - 1][j - 1] + cost)__			}_		}__		return d[s1.length()][s2.length()]__	};calculate,the,distance,between,the,given,two,strings,according,to,the,levenshtein,algorithm,param,s1,the,first,string,param,s2,the,second,string,return,the,distance,value;private,int,calculate,string,distance,string,s1,string,s2,if,s1,length,0,return,s2,length,if,s2,length,0,return,s1,length,int,d,new,int,s1,length,1,s2,length,1,for,int,i,0,i,s1,length,i,d,i,0,i,for,int,j,0,j,s2,length,j,d,0,j,j,for,int,i,1,i,s1,length,i,char,s1,char,at,i,1,for,int,j,1,j,s2,length,j,int,cost,char,s2,char,at,j,1,if,cost,0,else,cost,1,d,i,j,math,min,math,min,d,i,1,j,1,d,i,j,1,1,d,i,1,j,1,cost,return,d,s1,length,s2,length
PropertyMatches -> private int calculateStringDistance(String s1, String s2);1356735495;Calculate the distance between the given two Strings_according to the Levenshtein algorithm._@param s1 the first String_@param s2 the second String_@return the distance value;private int calculateStringDistance(String s1, String s2) {_		if (s1.length() == 0) {_			return s2.length()__		}_		if (s2.length() == 0) {_			return s1.length()__		}_		int d[][] = new int[s1.length() + 1][s2.length() + 1]___		for (int i = 0_ i <= s1.length()_ i++) {_			d[i][0] = i__		}_		for (int j = 0_ j <= s2.length()_ j++) {_			d[0][j] = j__		}__		for (int i = 1_ i <= s1.length()_ i++) {_			char s_i = s1.charAt(i - 1)__			for (int j = 1_ j <= s2.length()_ j++) {_				int cost__				char t_j = s2.charAt(j - 1)__				if (s_i == t_j) {_					cost = 0__				} else {_					cost = 1__				}_				d[i][j] = Math.min(Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1),_						d[i - 1][j - 1] + cost)__			}_		}__		return d[s1.length()][s2.length()]__	};calculate,the,distance,between,the,given,two,strings,according,to,the,levenshtein,algorithm,param,s1,the,first,string,param,s2,the,second,string,return,the,distance,value;private,int,calculate,string,distance,string,s1,string,s2,if,s1,length,0,return,s2,length,if,s2,length,0,return,s1,length,int,d,new,int,s1,length,1,s2,length,1,for,int,i,0,i,s1,length,i,d,i,0,i,for,int,j,0,j,s2,length,j,d,0,j,j,for,int,i,1,i,s1,length,i,char,s1,char,at,i,1,for,int,j,1,j,s2,length,j,int,cost,char,s2,char,at,j,1,if,cost,0,else,cost,1,d,i,j,math,min,math,min,d,i,1,j,1,d,i,j,1,1,d,i,1,j,1,cost,return,d,s1,length,s2,length
PropertyMatches -> private int calculateStringDistance(String s1, String s2);1385412762;Calculate the distance between the given two Strings_according to the Levenshtein algorithm._@param s1 the first String_@param s2 the second String_@return the distance value;private int calculateStringDistance(String s1, String s2) {_		if (s1.length() == 0) {_			return s2.length()__		}_		if (s2.length() == 0) {_			return s1.length()__		}_		int d[][] = new int[s1.length() + 1][s2.length() + 1]___		for (int i = 0_ i <= s1.length()_ i++) {_			d[i][0] = i__		}_		for (int j = 0_ j <= s2.length()_ j++) {_			d[0][j] = j__		}__		for (int i = 1_ i <= s1.length()_ i++) {_			char s_i = s1.charAt(i - 1)__			for (int j = 1_ j <= s2.length()_ j++) {_				int cost__				char t_j = s2.charAt(j - 1)__				if (s_i == t_j) {_					cost = 0__				} else {_					cost = 1__				}_				d[i][j] = Math.min(Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1),_						d[i - 1][j - 1] + cost)__			}_		}__		return d[s1.length()][s2.length()]__	};calculate,the,distance,between,the,given,two,strings,according,to,the,levenshtein,algorithm,param,s1,the,first,string,param,s2,the,second,string,return,the,distance,value;private,int,calculate,string,distance,string,s1,string,s2,if,s1,length,0,return,s2,length,if,s2,length,0,return,s1,length,int,d,new,int,s1,length,1,s2,length,1,for,int,i,0,i,s1,length,i,d,i,0,i,for,int,j,0,j,s2,length,j,d,0,j,j,for,int,i,1,i,s1,length,i,char,s1,char,at,i,1,for,int,j,1,j,s2,length,j,int,cost,char,s2,char,at,j,1,if,cost,0,else,cost,1,d,i,j,math,min,math,min,d,i,1,j,1,d,i,j,1,1,d,i,1,j,1,cost,return,d,s1,length,s2,length
PropertyMatches -> private int calculateStringDistance(String s1, String s2);1405696918;Calculate the distance between the given two Strings_according to the Levenshtein algorithm._@param s1 the first String_@param s2 the second String_@return the distance value;private int calculateStringDistance(String s1, String s2) {_		if (s1.length() == 0) {_			return s2.length()__		}_		if (s2.length() == 0) {_			return s1.length()__		}_		int d[][] = new int[s1.length() + 1][s2.length() + 1]___		for (int i = 0_ i <= s1.length()_ i++) {_			d[i][0] = i__		}_		for (int j = 0_ j <= s2.length()_ j++) {_			d[0][j] = j__		}__		for (int i = 1_ i <= s1.length()_ i++) {_			char s_i = s1.charAt(i - 1)__			for (int j = 1_ j <= s2.length()_ j++) {_				int cost__				char t_j = s2.charAt(j - 1)__				if (s_i == t_j) {_					cost = 0__				}_				else {_					cost = 1__				}_				d[i][j] = Math.min(Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1),_						d[i - 1][j - 1] + cost)__			}_		}__		return d[s1.length()][s2.length()]__	};calculate,the,distance,between,the,given,two,strings,according,to,the,levenshtein,algorithm,param,s1,the,first,string,param,s2,the,second,string,return,the,distance,value;private,int,calculate,string,distance,string,s1,string,s2,if,s1,length,0,return,s2,length,if,s2,length,0,return,s1,length,int,d,new,int,s1,length,1,s2,length,1,for,int,i,0,i,s1,length,i,d,i,0,i,for,int,j,0,j,s2,length,j,d,0,j,j,for,int,i,1,i,s1,length,i,char,s1,char,at,i,1,for,int,j,1,j,s2,length,j,int,cost,char,s2,char,at,j,1,if,cost,0,else,cost,1,d,i,j,math,min,math,min,d,i,1,j,1,d,i,j,1,1,d,i,1,j,1,cost,return,d,s1,length,s2,length
PropertyMatches -> public static PropertyMatches forProperty(String propertyName, Class beanClass);1328020251;Create PropertyMatches for the given bean property._@param propertyName the name of the property to find possible matches for_@param beanClass the bean class to search for matches;public static PropertyMatches forProperty(String propertyName, Class beanClass) {_		return forProperty(propertyName, beanClass, DEFAULT_MAX_DISTANCE)__	};create,property,matches,for,the,given,bean,property,param,property,name,the,name,of,the,property,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches;public,static,property,matches,for,property,string,property,name,class,bean,class,return,for,property,property,name,bean,class
PropertyMatches -> public static PropertyMatches forProperty(String propertyName, Class beanClass);1356735495;Create PropertyMatches for the given bean property._@param propertyName the name of the property to find possible matches for_@param beanClass the bean class to search for matches;public static PropertyMatches forProperty(String propertyName, Class beanClass) {_		return forProperty(propertyName, beanClass, DEFAULT_MAX_DISTANCE)__	};create,property,matches,for,the,given,bean,property,param,property,name,the,name,of,the,property,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches;public,static,property,matches,for,property,string,property,name,class,bean,class,return,for,property,property,name,bean,class
PropertyMatches -> private PropertyMatches(String propertyName, Class<?> beanClass, int maxDistance);1385412762;Create a new PropertyMatches instance for the given property.;private PropertyMatches(String propertyName, Class<?> beanClass, int maxDistance) {_		this.propertyName = propertyName__		this.possibleMatches = calculateMatches(BeanUtils.getPropertyDescriptors(beanClass), maxDistance)__	};create,a,new,property,matches,instance,for,the,given,property;private,property,matches,string,property,name,class,bean,class,int,max,distance,this,property,name,property,name,this,possible,matches,calculate,matches,bean,utils,get,property,descriptors,bean,class,max,distance
PropertyMatches -> private PropertyMatches(String propertyName, Class<?> beanClass, int maxDistance);1405696918;Create a new PropertyMatches instance for the given property.;private PropertyMatches(String propertyName, Class<?> beanClass, int maxDistance) {_		this.propertyName = propertyName__		this.possibleMatches = calculateMatches(BeanUtils.getPropertyDescriptors(beanClass), maxDistance)__	};create,a,new,property,matches,instance,for,the,given,property;private,property,matches,string,property,name,class,bean,class,int,max,distance,this,property,name,property,name,this,possible,matches,calculate,matches,bean,utils,get,property,descriptors,bean,class,max,distance
PropertyMatches -> BeanPropertyMatches -> private static String[] calculateMatches(String name, PropertyDescriptor[] descriptors, int maxDistance);1520434198;Generate possible property alternatives for the given property and class._Internally uses the {@code getStringDistance} method, which in turn uses_the Levenshtein algorithm to determine the distance between two Strings._@param descriptors the JavaBeans property descriptors to search_@param maxDistance the maximum distance to accept;private static String[] calculateMatches(String name, PropertyDescriptor[] descriptors, int maxDistance) {_			List<String> candidates = new ArrayList<>()__			for (PropertyDescriptor pd : descriptors) {_				if (pd.getWriteMethod() != null) {_					String possibleAlternative = pd.getName()__					if (calculateStringDistance(name, possibleAlternative) <= maxDistance) {_						candidates.add(possibleAlternative)__					}_				}_			}_			Collections.sort(candidates)__			return StringUtils.toStringArray(candidates)__		};generate,possible,property,alternatives,for,the,given,property,and,class,internally,uses,the,code,get,string,distance,method,which,in,turn,uses,the,levenshtein,algorithm,to,determine,the,distance,between,two,strings,param,descriptors,the,java,beans,property,descriptors,to,search,param,max,distance,the,maximum,distance,to,accept;private,static,string,calculate,matches,string,name,property,descriptor,descriptors,int,max,distance,list,string,candidates,new,array,list,for,property,descriptor,pd,descriptors,if,pd,get,write,method,null,string,possible,alternative,pd,get,name,if,calculate,string,distance,name,possible,alternative,max,distance,candidates,add,possible,alternative,collections,sort,candidates,return,string,utils,to,string,array,candidates
PropertyMatches -> BeanPropertyMatches -> private static String[] calculateMatches(String name, PropertyDescriptor[] descriptors, int maxDistance);1530174524;Generate possible property alternatives for the given property and class._Internally uses the {@code getStringDistance} method, which in turn uses_the Levenshtein algorithm to determine the distance between two Strings._@param descriptors the JavaBeans property descriptors to search_@param maxDistance the maximum distance to accept;private static String[] calculateMatches(String name, PropertyDescriptor[] descriptors, int maxDistance) {_			List<String> candidates = new ArrayList<>()__			for (PropertyDescriptor pd : descriptors) {_				if (pd.getWriteMethod() != null) {_					String possibleAlternative = pd.getName()__					if (calculateStringDistance(name, possibleAlternative) <= maxDistance) {_						candidates.add(possibleAlternative)__					}_				}_			}_			Collections.sort(candidates)__			return StringUtils.toStringArray(candidates)__		};generate,possible,property,alternatives,for,the,given,property,and,class,internally,uses,the,code,get,string,distance,method,which,in,turn,uses,the,levenshtein,algorithm,to,determine,the,distance,between,two,strings,param,descriptors,the,java,beans,property,descriptors,to,search,param,max,distance,the,maximum,distance,to,accept;private,static,string,calculate,matches,string,name,property,descriptor,descriptors,int,max,distance,list,string,candidates,new,array,list,for,property,descriptor,pd,descriptors,if,pd,get,write,method,null,string,possible,alternative,pd,get,name,if,calculate,string,distance,name,possible,alternative,max,distance,candidates,add,possible,alternative,collections,sort,candidates,return,string,utils,to,string,array,candidates
PropertyMatches -> public abstract String buildErrorMessage()_;1432213851;Build an error message for the given invalid property name,_indicating the possible property matches.;public abstract String buildErrorMessage()_;build,an,error,message,for,the,given,invalid,property,name,indicating,the,possible,property,matches;public,abstract,string,build,error,message
PropertyMatches -> public abstract String buildErrorMessage()_;1432232180;Build an error message for the given invalid property name,_indicating the possible property matches.;public abstract String buildErrorMessage()_;build,an,error,message,for,the,given,invalid,property,name,indicating,the,possible,property,matches;public,abstract,string,build,error,message
PropertyMatches -> public abstract String buildErrorMessage()_;1467730834;Build an error message for the given invalid property name,_indicating the possible property matches.;public abstract String buildErrorMessage()_;build,an,error,message,for,the,given,invalid,property,name,indicating,the,possible,property,matches;public,abstract,string,build,error,message
PropertyMatches -> public abstract String buildErrorMessage()_;1479997926;Build an error message for the given invalid property name,_indicating the possible property matches.;public abstract String buildErrorMessage()_;build,an,error,message,for,the,given,invalid,property,name,indicating,the,possible,property,matches;public,abstract,string,build,error,message
PropertyMatches -> public abstract String buildErrorMessage()_;1487760984;Build an error message for the given invalid property name,_indicating the possible property matches.;public abstract String buildErrorMessage()_;build,an,error,message,for,the,given,invalid,property,name,indicating,the,possible,property,matches;public,abstract,string,build,error,message
PropertyMatches -> public abstract String buildErrorMessage()_;1497341397;Build an error message for the given invalid property name,_indicating the possible property matches.;public abstract String buildErrorMessage()_;build,an,error,message,for,the,given,invalid,property,name,indicating,the,possible,property,matches;public,abstract,string,build,error,message
PropertyMatches -> public abstract String buildErrorMessage()_;1497341594;Build an error message for the given invalid property name,_indicating the possible property matches.;public abstract String buildErrorMessage()_;build,an,error,message,for,the,given,invalid,property,name,indicating,the,possible,property,matches;public,abstract,string,build,error,message
PropertyMatches -> public abstract String buildErrorMessage()_;1519560860;Build an error message for the given invalid property name,_indicating the possible property matches.;public abstract String buildErrorMessage()_;build,an,error,message,for,the,given,invalid,property,name,indicating,the,possible,property,matches;public,abstract,string,build,error,message
PropertyMatches -> public abstract String buildErrorMessage()_;1520434198;Build an error message for the given invalid property name,_indicating the possible property matches.;public abstract String buildErrorMessage()_;build,an,error,message,for,the,given,invalid,property,name,indicating,the,possible,property,matches;public,abstract,string,build,error,message
PropertyMatches -> public abstract String buildErrorMessage()_;1530174524;Build an error message for the given invalid property name,_indicating the possible property matches.;public abstract String buildErrorMessage()_;build,an,error,message,for,the,given,invalid,property,name,indicating,the,possible,property,matches;public,abstract,string,build,error,message
PropertyMatches -> public String[] getPossibleMatches();1328020251;Return the calculated possible matches.;public String[] getPossibleMatches() {_		return possibleMatches__	};return,the,calculated,possible,matches;public,string,get,possible,matches,return,possible,matches
PropertyMatches -> public String[] getPossibleMatches();1356735495;Return the calculated possible matches.;public String[] getPossibleMatches() {_		return possibleMatches__	};return,the,calculated,possible,matches;public,string,get,possible,matches,return,possible,matches
PropertyMatches -> public String[] getPossibleMatches();1385412762;Return the calculated possible matches.;public String[] getPossibleMatches() {_		return possibleMatches__	};return,the,calculated,possible,matches;public,string,get,possible,matches,return,possible,matches
PropertyMatches -> public String[] getPossibleMatches();1405696918;Return the calculated possible matches.;public String[] getPossibleMatches() {_		return possibleMatches__	};return,the,calculated,possible,matches;public,string,get,possible,matches,return,possible,matches
PropertyMatches -> public String[] getPossibleMatches();1432213851;Return the calculated possible matches.;public String[] getPossibleMatches() {_		return possibleMatches__	};return,the,calculated,possible,matches;public,string,get,possible,matches,return,possible,matches
PropertyMatches -> public String[] getPossibleMatches();1432232180;Return the calculated possible matches.;public String[] getPossibleMatches() {_		return possibleMatches__	};return,the,calculated,possible,matches;public,string,get,possible,matches,return,possible,matches
PropertyMatches -> public String[] getPossibleMatches();1467730834;Return the calculated possible matches.;public String[] getPossibleMatches() {_		return possibleMatches__	};return,the,calculated,possible,matches;public,string,get,possible,matches,return,possible,matches
PropertyMatches -> public String[] getPossibleMatches();1479997926;Return the calculated possible matches.;public String[] getPossibleMatches() {_		return this.possibleMatches__	};return,the,calculated,possible,matches;public,string,get,possible,matches,return,this,possible,matches
PropertyMatches -> public String[] getPossibleMatches();1487760984;Return the calculated possible matches.;public String[] getPossibleMatches() {_		return this.possibleMatches__	};return,the,calculated,possible,matches;public,string,get,possible,matches,return,this,possible,matches
PropertyMatches -> public String[] getPossibleMatches();1497341397;Return the calculated possible matches.;public String[] getPossibleMatches() {_		return this.possibleMatches__	};return,the,calculated,possible,matches;public,string,get,possible,matches,return,this,possible,matches
PropertyMatches -> public String[] getPossibleMatches();1497341594;Return the calculated possible matches.;public String[] getPossibleMatches() {_		return this.possibleMatches__	};return,the,calculated,possible,matches;public,string,get,possible,matches,return,this,possible,matches
PropertyMatches -> public String[] getPossibleMatches();1519560860;Return the calculated possible matches.;public String[] getPossibleMatches() {_		return this.possibleMatches__	};return,the,calculated,possible,matches;public,string,get,possible,matches,return,this,possible,matches
PropertyMatches -> public String[] getPossibleMatches();1520434198;Return the calculated possible matches.;public String[] getPossibleMatches() {_		return this.possibleMatches__	};return,the,calculated,possible,matches;public,string,get,possible,matches,return,this,possible,matches
PropertyMatches -> public String[] getPossibleMatches();1530174524;Return the calculated possible matches.;public String[] getPossibleMatches() {_		return this.possibleMatches__	};return,the,calculated,possible,matches;public,string,get,possible,matches,return,this,possible,matches
PropertyMatches -> public static PropertyMatches forField(String propertyName, Class<?> beanClass, int maxDistance);1432213851;Create PropertyMatches for the given field property._@param propertyName the name of the field to find possible matches for_@param beanClass the bean class to search for matches_@param maxDistance the maximum property distance allowed for matches;public static PropertyMatches forField(String propertyName, Class<?> beanClass, int maxDistance) {_		return new FieldPropertyMatches(propertyName, beanClass, maxDistance)__	};create,property,matches,for,the,given,field,property,param,property,name,the,name,of,the,field,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches,param,max,distance,the,maximum,property,distance,allowed,for,matches;public,static,property,matches,for,field,string,property,name,class,bean,class,int,max,distance,return,new,field,property,matches,property,name,bean,class,max,distance
PropertyMatches -> public static PropertyMatches forField(String propertyName, Class<?> beanClass, int maxDistance);1432232180;Create PropertyMatches for the given field property._@param propertyName the name of the field to find possible matches for_@param beanClass the bean class to search for matches_@param maxDistance the maximum property distance allowed for matches;public static PropertyMatches forField(String propertyName, Class<?> beanClass, int maxDistance) {_		return new FieldPropertyMatches(propertyName, beanClass, maxDistance)__	};create,property,matches,for,the,given,field,property,param,property,name,the,name,of,the,field,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches,param,max,distance,the,maximum,property,distance,allowed,for,matches;public,static,property,matches,for,field,string,property,name,class,bean,class,int,max,distance,return,new,field,property,matches,property,name,bean,class,max,distance
PropertyMatches -> public static PropertyMatches forField(String propertyName, Class<?> beanClass, int maxDistance);1467730834;Create PropertyMatches for the given field property._@param propertyName the name of the field to find possible matches for_@param beanClass the bean class to search for matches_@param maxDistance the maximum property distance allowed for matches;public static PropertyMatches forField(String propertyName, Class<?> beanClass, int maxDistance) {_		return new FieldPropertyMatches(propertyName, beanClass, maxDistance)__	};create,property,matches,for,the,given,field,property,param,property,name,the,name,of,the,field,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches,param,max,distance,the,maximum,property,distance,allowed,for,matches;public,static,property,matches,for,field,string,property,name,class,bean,class,int,max,distance,return,new,field,property,matches,property,name,bean,class,max,distance
PropertyMatches -> public static PropertyMatches forField(String propertyName, Class<?> beanClass, int maxDistance);1479997926;Create PropertyMatches for the given field property._@param propertyName the name of the field to find possible matches for_@param beanClass the bean class to search for matches_@param maxDistance the maximum property distance allowed for matches;public static PropertyMatches forField(String propertyName, Class<?> beanClass, int maxDistance) {_		return new FieldPropertyMatches(propertyName, beanClass, maxDistance)__	};create,property,matches,for,the,given,field,property,param,property,name,the,name,of,the,field,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches,param,max,distance,the,maximum,property,distance,allowed,for,matches;public,static,property,matches,for,field,string,property,name,class,bean,class,int,max,distance,return,new,field,property,matches,property,name,bean,class,max,distance
PropertyMatches -> public static PropertyMatches forField(String propertyName, Class<?> beanClass, int maxDistance);1487760984;Create PropertyMatches for the given field property._@param propertyName the name of the field to find possible matches for_@param beanClass the bean class to search for matches_@param maxDistance the maximum property distance allowed for matches;public static PropertyMatches forField(String propertyName, Class<?> beanClass, int maxDistance) {_		return new FieldPropertyMatches(propertyName, beanClass, maxDistance)__	};create,property,matches,for,the,given,field,property,param,property,name,the,name,of,the,field,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches,param,max,distance,the,maximum,property,distance,allowed,for,matches;public,static,property,matches,for,field,string,property,name,class,bean,class,int,max,distance,return,new,field,property,matches,property,name,bean,class,max,distance
PropertyMatches -> public static PropertyMatches forField(String propertyName, Class<?> beanClass, int maxDistance);1497341397;Create PropertyMatches for the given field property._@param propertyName the name of the field to find possible matches for_@param beanClass the bean class to search for matches_@param maxDistance the maximum property distance allowed for matches;public static PropertyMatches forField(String propertyName, Class<?> beanClass, int maxDistance) {_		return new FieldPropertyMatches(propertyName, beanClass, maxDistance)__	};create,property,matches,for,the,given,field,property,param,property,name,the,name,of,the,field,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches,param,max,distance,the,maximum,property,distance,allowed,for,matches;public,static,property,matches,for,field,string,property,name,class,bean,class,int,max,distance,return,new,field,property,matches,property,name,bean,class,max,distance
PropertyMatches -> public static PropertyMatches forField(String propertyName, Class<?> beanClass, int maxDistance);1497341594;Create PropertyMatches for the given field property._@param propertyName the name of the field to find possible matches for_@param beanClass the bean class to search for matches_@param maxDistance the maximum property distance allowed for matches;public static PropertyMatches forField(String propertyName, Class<?> beanClass, int maxDistance) {_		return new FieldPropertyMatches(propertyName, beanClass, maxDistance)__	};create,property,matches,for,the,given,field,property,param,property,name,the,name,of,the,field,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches,param,max,distance,the,maximum,property,distance,allowed,for,matches;public,static,property,matches,for,field,string,property,name,class,bean,class,int,max,distance,return,new,field,property,matches,property,name,bean,class,max,distance
PropertyMatches -> public static PropertyMatches forField(String propertyName, Class<?> beanClass, int maxDistance);1519560860;Create PropertyMatches for the given field property._@param propertyName the name of the field to find possible matches for_@param beanClass the bean class to search for matches_@param maxDistance the maximum property distance allowed for matches;public static PropertyMatches forField(String propertyName, Class<?> beanClass, int maxDistance) {_		return new FieldPropertyMatches(propertyName, beanClass, maxDistance)__	};create,property,matches,for,the,given,field,property,param,property,name,the,name,of,the,field,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches,param,max,distance,the,maximum,property,distance,allowed,for,matches;public,static,property,matches,for,field,string,property,name,class,bean,class,int,max,distance,return,new,field,property,matches,property,name,bean,class,max,distance
PropertyMatches -> public static PropertyMatches forField(String propertyName, Class<?> beanClass, int maxDistance);1520434198;Create PropertyMatches for the given field property._@param propertyName the name of the field to find possible matches for_@param beanClass the bean class to search for matches_@param maxDistance the maximum property distance allowed for matches;public static PropertyMatches forField(String propertyName, Class<?> beanClass, int maxDistance) {_		return new FieldPropertyMatches(propertyName, beanClass, maxDistance)__	};create,property,matches,for,the,given,field,property,param,property,name,the,name,of,the,field,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches,param,max,distance,the,maximum,property,distance,allowed,for,matches;public,static,property,matches,for,field,string,property,name,class,bean,class,int,max,distance,return,new,field,property,matches,property,name,bean,class,max,distance
PropertyMatches -> public static PropertyMatches forField(String propertyName, Class<?> beanClass, int maxDistance);1530174524;Create PropertyMatches for the given field property._@param propertyName the name of the field to find possible matches for_@param beanClass the bean class to search for matches_@param maxDistance the maximum property distance allowed for matches;public static PropertyMatches forField(String propertyName, Class<?> beanClass, int maxDistance) {_		return new FieldPropertyMatches(propertyName, beanClass, maxDistance)__	};create,property,matches,for,the,given,field,property,param,property,name,the,name,of,the,field,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches,param,max,distance,the,maximum,property,distance,allowed,for,matches;public,static,property,matches,for,field,string,property,name,class,bean,class,int,max,distance,return,new,field,property,matches,property,name,bean,class,max,distance
PropertyMatches -> private PropertyMatches(String propertyName, String[] possibleMatches);1432213851;Create a new PropertyMatches instance for the given property and possible matches.;private PropertyMatches(String propertyName, String[] possibleMatches) {_		this.propertyName = propertyName__		this.possibleMatches = possibleMatches__	};create,a,new,property,matches,instance,for,the,given,property,and,possible,matches;private,property,matches,string,property,name,string,possible,matches,this,property,name,property,name,this,possible,matches,possible,matches
PropertyMatches -> private PropertyMatches(String propertyName, String[] possibleMatches);1432232180;Create a new PropertyMatches instance for the given property and possible matches.;private PropertyMatches(String propertyName, String[] possibleMatches) {_		this.propertyName = propertyName__		this.possibleMatches = possibleMatches__	};create,a,new,property,matches,instance,for,the,given,property,and,possible,matches;private,property,matches,string,property,name,string,possible,matches,this,property,name,property,name,this,possible,matches,possible,matches
PropertyMatches -> private PropertyMatches(String propertyName, String[] possibleMatches);1467730834;Create a new PropertyMatches instance for the given property and possible matches.;private PropertyMatches(String propertyName, String[] possibleMatches) {_		this.propertyName = propertyName__		this.possibleMatches = possibleMatches__	};create,a,new,property,matches,instance,for,the,given,property,and,possible,matches;private,property,matches,string,property,name,string,possible,matches,this,property,name,property,name,this,possible,matches,possible,matches
PropertyMatches -> private PropertyMatches(String propertyName, String[] possibleMatches);1479997926;Create a new PropertyMatches instance for the given property and possible matches.;private PropertyMatches(String propertyName, String[] possibleMatches) {_		this.propertyName = propertyName__		this.possibleMatches = possibleMatches__	};create,a,new,property,matches,instance,for,the,given,property,and,possible,matches;private,property,matches,string,property,name,string,possible,matches,this,property,name,property,name,this,possible,matches,possible,matches
PropertyMatches -> private PropertyMatches(String propertyName, String[] possibleMatches);1487760984;Create a new PropertyMatches instance for the given property and possible matches.;private PropertyMatches(String propertyName, String[] possibleMatches) {_		this.propertyName = propertyName__		this.possibleMatches = possibleMatches__	};create,a,new,property,matches,instance,for,the,given,property,and,possible,matches;private,property,matches,string,property,name,string,possible,matches,this,property,name,property,name,this,possible,matches,possible,matches
PropertyMatches -> private PropertyMatches(String propertyName, String[] possibleMatches);1497341397;Create a new PropertyMatches instance for the given property and possible matches.;private PropertyMatches(String propertyName, String[] possibleMatches) {_		this.propertyName = propertyName__		this.possibleMatches = possibleMatches__	};create,a,new,property,matches,instance,for,the,given,property,and,possible,matches;private,property,matches,string,property,name,string,possible,matches,this,property,name,property,name,this,possible,matches,possible,matches
PropertyMatches -> private PropertyMatches(String propertyName, String[] possibleMatches);1497341594;Create a new PropertyMatches instance for the given property and possible matches.;private PropertyMatches(String propertyName, String[] possibleMatches) {_		this.propertyName = propertyName__		this.possibleMatches = possibleMatches__	};create,a,new,property,matches,instance,for,the,given,property,and,possible,matches;private,property,matches,string,property,name,string,possible,matches,this,property,name,property,name,this,possible,matches,possible,matches
PropertyMatches -> private PropertyMatches(String propertyName, String[] possibleMatches);1519560860;Create a new PropertyMatches instance for the given property and possible matches.;private PropertyMatches(String propertyName, String[] possibleMatches) {_		this.propertyName = propertyName__		this.possibleMatches = possibleMatches__	};create,a,new,property,matches,instance,for,the,given,property,and,possible,matches;private,property,matches,string,property,name,string,possible,matches,this,property,name,property,name,this,possible,matches,possible,matches
PropertyMatches -> private PropertyMatches(String propertyName, String[] possibleMatches);1520434198;Create a new PropertyMatches instance for the given property and possible matches.;private PropertyMatches(String propertyName, String[] possibleMatches) {_		this.propertyName = propertyName__		this.possibleMatches = possibleMatches__	};create,a,new,property,matches,instance,for,the,given,property,and,possible,matches;private,property,matches,string,property,name,string,possible,matches,this,property,name,property,name,this,possible,matches,possible,matches
PropertyMatches -> private PropertyMatches(String propertyName, String[] possibleMatches);1530174524;Create a new PropertyMatches instance for the given property and possible matches.;private PropertyMatches(String propertyName, String[] possibleMatches) {_		this.propertyName = propertyName__		this.possibleMatches = possibleMatches__	};create,a,new,property,matches,instance,for,the,given,property,and,possible,matches;private,property,matches,string,property,name,string,possible,matches,this,property,name,property,name,this,possible,matches,possible,matches
PropertyMatches -> private static int calculateStringDistance(String s1, String s2);1432213851;Calculate the distance between the given two Strings_according to the Levenshtein algorithm._@param s1 the first String_@param s2 the second String_@return the distance value;private static int calculateStringDistance(String s1, String s2) {_		if (s1.length() == 0) {_			return s2.length()__		}_		if (s2.length() == 0) {_			return s1.length()__		}_		int d[][] = new int[s1.length() + 1][s2.length() + 1]___		for (int i = 0_ i <= s1.length()_ i++) {_			d[i][0] = i__		}_		for (int j = 0_ j <= s2.length()_ j++) {_			d[0][j] = j__		}__		for (int i = 1_ i <= s1.length()_ i++) {_			char s_i = s1.charAt(i - 1)__			for (int j = 1_ j <= s2.length()_ j++) {_				int cost__				char t_j = s2.charAt(j - 1)__				if (s_i == t_j) {_					cost = 0__				}_				else {_					cost = 1__				}_				d[i][j] = Math.min(Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1),_						d[i - 1][j - 1] + cost)__			}_		}__		return d[s1.length()][s2.length()]__	};calculate,the,distance,between,the,given,two,strings,according,to,the,levenshtein,algorithm,param,s1,the,first,string,param,s2,the,second,string,return,the,distance,value;private,static,int,calculate,string,distance,string,s1,string,s2,if,s1,length,0,return,s2,length,if,s2,length,0,return,s1,length,int,d,new,int,s1,length,1,s2,length,1,for,int,i,0,i,s1,length,i,d,i,0,i,for,int,j,0,j,s2,length,j,d,0,j,j,for,int,i,1,i,s1,length,i,char,s1,char,at,i,1,for,int,j,1,j,s2,length,j,int,cost,char,s2,char,at,j,1,if,cost,0,else,cost,1,d,i,j,math,min,math,min,d,i,1,j,1,d,i,j,1,1,d,i,1,j,1,cost,return,d,s1,length,s2,length
PropertyMatches -> private static int calculateStringDistance(String s1, String s2);1432232180;Calculate the distance between the given two Strings_according to the Levenshtein algorithm._@param s1 the first String_@param s2 the second String_@return the distance value;private static int calculateStringDistance(String s1, String s2) {_		if (s1.length() == 0) {_			return s2.length()__		}_		if (s2.length() == 0) {_			return s1.length()__		}_		int d[][] = new int[s1.length() + 1][s2.length() + 1]___		for (int i = 0_ i <= s1.length()_ i++) {_			d[i][0] = i__		}_		for (int j = 0_ j <= s2.length()_ j++) {_			d[0][j] = j__		}__		for (int i = 1_ i <= s1.length()_ i++) {_			char s_i = s1.charAt(i - 1)__			for (int j = 1_ j <= s2.length()_ j++) {_				int cost__				char t_j = s2.charAt(j - 1)__				if (s_i == t_j) {_					cost = 0__				}_				else {_					cost = 1__				}_				d[i][j] = Math.min(Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1),_						d[i - 1][j - 1] + cost)__			}_		}__		return d[s1.length()][s2.length()]__	};calculate,the,distance,between,the,given,two,strings,according,to,the,levenshtein,algorithm,param,s1,the,first,string,param,s2,the,second,string,return,the,distance,value;private,static,int,calculate,string,distance,string,s1,string,s2,if,s1,length,0,return,s2,length,if,s2,length,0,return,s1,length,int,d,new,int,s1,length,1,s2,length,1,for,int,i,0,i,s1,length,i,d,i,0,i,for,int,j,0,j,s2,length,j,d,0,j,j,for,int,i,1,i,s1,length,i,char,s1,char,at,i,1,for,int,j,1,j,s2,length,j,int,cost,char,s2,char,at,j,1,if,cost,0,else,cost,1,d,i,j,math,min,math,min,d,i,1,j,1,d,i,j,1,1,d,i,1,j,1,cost,return,d,s1,length,s2,length
PropertyMatches -> private static int calculateStringDistance(String s1, String s2);1467730834;Calculate the distance between the given two Strings_according to the Levenshtein algorithm._@param s1 the first String_@param s2 the second String_@return the distance value;private static int calculateStringDistance(String s1, String s2) {_		if (s1.length() == 0) {_			return s2.length()__		}_		if (s2.length() == 0) {_			return s1.length()__		}_		int d[][] = new int[s1.length() + 1][s2.length() + 1]___		for (int i = 0_ i <= s1.length()_ i++) {_			d[i][0] = i__		}_		for (int j = 0_ j <= s2.length()_ j++) {_			d[0][j] = j__		}__		for (int i = 1_ i <= s1.length()_ i++) {_			char s_i = s1.charAt(i - 1)__			for (int j = 1_ j <= s2.length()_ j++) {_				int cost__				char t_j = s2.charAt(j - 1)__				if (s_i == t_j) {_					cost = 0__				}_				else {_					cost = 1__				}_				d[i][j] = Math.min(Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1),_						d[i - 1][j - 1] + cost)__			}_		}__		return d[s1.length()][s2.length()]__	};calculate,the,distance,between,the,given,two,strings,according,to,the,levenshtein,algorithm,param,s1,the,first,string,param,s2,the,second,string,return,the,distance,value;private,static,int,calculate,string,distance,string,s1,string,s2,if,s1,length,0,return,s2,length,if,s2,length,0,return,s1,length,int,d,new,int,s1,length,1,s2,length,1,for,int,i,0,i,s1,length,i,d,i,0,i,for,int,j,0,j,s2,length,j,d,0,j,j,for,int,i,1,i,s1,length,i,char,s1,char,at,i,1,for,int,j,1,j,s2,length,j,int,cost,char,s2,char,at,j,1,if,cost,0,else,cost,1,d,i,j,math,min,math,min,d,i,1,j,1,d,i,j,1,1,d,i,1,j,1,cost,return,d,s1,length,s2,length
PropertyMatches -> private static int calculateStringDistance(String s1, String s2);1479997926;Calculate the distance between the given two Strings_according to the Levenshtein algorithm._@param s1 the first String_@param s2 the second String_@return the distance value;private static int calculateStringDistance(String s1, String s2) {_		if (s1.length() == 0) {_			return s2.length()__		}_		if (s2.length() == 0) {_			return s1.length()__		}_		int d[][] = new int[s1.length() + 1][s2.length() + 1]___		for (int i = 0_ i <= s1.length()_ i++) {_			d[i][0] = i__		}_		for (int j = 0_ j <= s2.length()_ j++) {_			d[0][j] = j__		}__		for (int i = 1_ i <= s1.length()_ i++) {_			char s_i = s1.charAt(i - 1)__			for (int j = 1_ j <= s2.length()_ j++) {_				int cost__				char t_j = s2.charAt(j - 1)__				if (s_i == t_j) {_					cost = 0__				}_				else {_					cost = 1__				}_				d[i][j] = Math.min(Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1),_						d[i - 1][j - 1] + cost)__			}_		}__		return d[s1.length()][s2.length()]__	};calculate,the,distance,between,the,given,two,strings,according,to,the,levenshtein,algorithm,param,s1,the,first,string,param,s2,the,second,string,return,the,distance,value;private,static,int,calculate,string,distance,string,s1,string,s2,if,s1,length,0,return,s2,length,if,s2,length,0,return,s1,length,int,d,new,int,s1,length,1,s2,length,1,for,int,i,0,i,s1,length,i,d,i,0,i,for,int,j,0,j,s2,length,j,d,0,j,j,for,int,i,1,i,s1,length,i,char,s1,char,at,i,1,for,int,j,1,j,s2,length,j,int,cost,char,s2,char,at,j,1,if,cost,0,else,cost,1,d,i,j,math,min,math,min,d,i,1,j,1,d,i,j,1,1,d,i,1,j,1,cost,return,d,s1,length,s2,length
PropertyMatches -> private static int calculateStringDistance(String s1, String s2);1487760984;Calculate the distance between the given two Strings_according to the Levenshtein algorithm._@param s1 the first String_@param s2 the second String_@return the distance value;private static int calculateStringDistance(String s1, String s2) {_		if (s1.isEmpty()) {_			return s2.length()__		}_		if (s2.isEmpty()) {_			return s1.length()__		}_		int d[][] = new int[s1.length() + 1][s2.length() + 1]___		for (int i = 0_ i <= s1.length()_ i++) {_			d[i][0] = i__		}_		for (int j = 0_ j <= s2.length()_ j++) {_			d[0][j] = j__		}__		for (int i = 1_ i <= s1.length()_ i++) {_			char s_i = s1.charAt(i - 1)__			for (int j = 1_ j <= s2.length()_ j++) {_				int cost__				char t_j = s2.charAt(j - 1)__				if (s_i == t_j) {_					cost = 0__				}_				else {_					cost = 1__				}_				d[i][j] = Math.min(Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1),_						d[i - 1][j - 1] + cost)__			}_		}__		return d[s1.length()][s2.length()]__	};calculate,the,distance,between,the,given,two,strings,according,to,the,levenshtein,algorithm,param,s1,the,first,string,param,s2,the,second,string,return,the,distance,value;private,static,int,calculate,string,distance,string,s1,string,s2,if,s1,is,empty,return,s2,length,if,s2,is,empty,return,s1,length,int,d,new,int,s1,length,1,s2,length,1,for,int,i,0,i,s1,length,i,d,i,0,i,for,int,j,0,j,s2,length,j,d,0,j,j,for,int,i,1,i,s1,length,i,char,s1,char,at,i,1,for,int,j,1,j,s2,length,j,int,cost,char,s2,char,at,j,1,if,cost,0,else,cost,1,d,i,j,math,min,math,min,d,i,1,j,1,d,i,j,1,1,d,i,1,j,1,cost,return,d,s1,length,s2,length
PropertyMatches -> private static int calculateStringDistance(String s1, String s2);1497341397;Calculate the distance between the given two Strings_according to the Levenshtein algorithm._@param s1 the first String_@param s2 the second String_@return the distance value;private static int calculateStringDistance(String s1, String s2) {_		if (s1.isEmpty()) {_			return s2.length()__		}_		if (s2.isEmpty()) {_			return s1.length()__		}_		int d[][] = new int[s1.length() + 1][s2.length() + 1]___		for (int i = 0_ i <= s1.length()_ i++) {_			d[i][0] = i__		}_		for (int j = 0_ j <= s2.length()_ j++) {_			d[0][j] = j__		}__		for (int i = 1_ i <= s1.length()_ i++) {_			char s_i = s1.charAt(i - 1)__			for (int j = 1_ j <= s2.length()_ j++) {_				int cost__				char t_j = s2.charAt(j - 1)__				if (s_i == t_j) {_					cost = 0__				}_				else {_					cost = 1__				}_				d[i][j] = Math.min(Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1),_						d[i - 1][j - 1] + cost)__			}_		}__		return d[s1.length()][s2.length()]__	};calculate,the,distance,between,the,given,two,strings,according,to,the,levenshtein,algorithm,param,s1,the,first,string,param,s2,the,second,string,return,the,distance,value;private,static,int,calculate,string,distance,string,s1,string,s2,if,s1,is,empty,return,s2,length,if,s2,is,empty,return,s1,length,int,d,new,int,s1,length,1,s2,length,1,for,int,i,0,i,s1,length,i,d,i,0,i,for,int,j,0,j,s2,length,j,d,0,j,j,for,int,i,1,i,s1,length,i,char,s1,char,at,i,1,for,int,j,1,j,s2,length,j,int,cost,char,s2,char,at,j,1,if,cost,0,else,cost,1,d,i,j,math,min,math,min,d,i,1,j,1,d,i,j,1,1,d,i,1,j,1,cost,return,d,s1,length,s2,length
PropertyMatches -> private static int calculateStringDistance(String s1, String s2);1497341594;Calculate the distance between the given two Strings_according to the Levenshtein algorithm._@param s1 the first String_@param s2 the second String_@return the distance value;private static int calculateStringDistance(String s1, String s2) {_		if (s1.isEmpty()) {_			return s2.length()__		}_		if (s2.isEmpty()) {_			return s1.length()__		}_		int d[][] = new int[s1.length() + 1][s2.length() + 1]___		for (int i = 0_ i <= s1.length()_ i++) {_			d[i][0] = i__		}_		for (int j = 0_ j <= s2.length()_ j++) {_			d[0][j] = j__		}__		for (int i = 1_ i <= s1.length()_ i++) {_			char s_i = s1.charAt(i - 1)__			for (int j = 1_ j <= s2.length()_ j++) {_				int cost__				char t_j = s2.charAt(j - 1)__				if (s_i == t_j) {_					cost = 0__				}_				else {_					cost = 1__				}_				d[i][j] = Math.min(Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1),_						d[i - 1][j - 1] + cost)__			}_		}__		return d[s1.length()][s2.length()]__	};calculate,the,distance,between,the,given,two,strings,according,to,the,levenshtein,algorithm,param,s1,the,first,string,param,s2,the,second,string,return,the,distance,value;private,static,int,calculate,string,distance,string,s1,string,s2,if,s1,is,empty,return,s2,length,if,s2,is,empty,return,s1,length,int,d,new,int,s1,length,1,s2,length,1,for,int,i,0,i,s1,length,i,d,i,0,i,for,int,j,0,j,s2,length,j,d,0,j,j,for,int,i,1,i,s1,length,i,char,s1,char,at,i,1,for,int,j,1,j,s2,length,j,int,cost,char,s2,char,at,j,1,if,cost,0,else,cost,1,d,i,j,math,min,math,min,d,i,1,j,1,d,i,j,1,1,d,i,1,j,1,cost,return,d,s1,length,s2,length
PropertyMatches -> private static int calculateStringDistance(String s1, String s2);1519560860;Calculate the distance between the given two Strings_according to the Levenshtein algorithm._@param s1 the first String_@param s2 the second String_@return the distance value;private static int calculateStringDistance(String s1, String s2) {_		if (s1.isEmpty()) {_			return s2.length()__		}_		if (s2.isEmpty()) {_			return s1.length()__		}_		int[][] d = new int[s1.length() + 1][s2.length() + 1]___		for (int i = 0_ i <= s1.length()_ i++) {_			d[i][0] = i__		}_		for (int j = 0_ j <= s2.length()_ j++) {_			d[0][j] = j__		}__		for (int i = 1_ i <= s1.length()_ i++) {_			char s_i = s1.charAt(i - 1)__			for (int j = 1_ j <= s2.length()_ j++) {_				int cost__				char t_j = s2.charAt(j - 1)__				if (s_i == t_j) {_					cost = 0__				}_				else {_					cost = 1__				}_				d[i][j] = Math.min(Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1),_						d[i - 1][j - 1] + cost)__			}_		}__		return d[s1.length()][s2.length()]__	};calculate,the,distance,between,the,given,two,strings,according,to,the,levenshtein,algorithm,param,s1,the,first,string,param,s2,the,second,string,return,the,distance,value;private,static,int,calculate,string,distance,string,s1,string,s2,if,s1,is,empty,return,s2,length,if,s2,is,empty,return,s1,length,int,d,new,int,s1,length,1,s2,length,1,for,int,i,0,i,s1,length,i,d,i,0,i,for,int,j,0,j,s2,length,j,d,0,j,j,for,int,i,1,i,s1,length,i,char,s1,char,at,i,1,for,int,j,1,j,s2,length,j,int,cost,char,s2,char,at,j,1,if,cost,0,else,cost,1,d,i,j,math,min,math,min,d,i,1,j,1,d,i,j,1,1,d,i,1,j,1,cost,return,d,s1,length,s2,length
PropertyMatches -> private static int calculateStringDistance(String s1, String s2);1520434198;Calculate the distance between the given two Strings_according to the Levenshtein algorithm._@param s1 the first String_@param s2 the second String_@return the distance value;private static int calculateStringDistance(String s1, String s2) {_		if (s1.isEmpty()) {_			return s2.length()__		}_		if (s2.isEmpty()) {_			return s1.length()__		}__		int[][] d = new int[s1.length() + 1][s2.length() + 1]__		for (int i = 0_ i <= s1.length()_ i++) {_			d[i][0] = i__		}_		for (int j = 0_ j <= s2.length()_ j++) {_			d[0][j] = j__		}__		for (int i = 1_ i <= s1.length()_ i++) {_			char c1 = s1.charAt(i - 1)__			for (int j = 1_ j <= s2.length()_ j++) {_				int cost__				char c2 = s2.charAt(j - 1)__				if (c1 == c2) {_					cost = 0__				}_				else {_					cost = 1__				}_				d[i][j] = Math.min(Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1), d[i - 1][j - 1] + cost)__			}_		}__		return d[s1.length()][s2.length()]__	};calculate,the,distance,between,the,given,two,strings,according,to,the,levenshtein,algorithm,param,s1,the,first,string,param,s2,the,second,string,return,the,distance,value;private,static,int,calculate,string,distance,string,s1,string,s2,if,s1,is,empty,return,s2,length,if,s2,is,empty,return,s1,length,int,d,new,int,s1,length,1,s2,length,1,for,int,i,0,i,s1,length,i,d,i,0,i,for,int,j,0,j,s2,length,j,d,0,j,j,for,int,i,1,i,s1,length,i,char,c1,s1,char,at,i,1,for,int,j,1,j,s2,length,j,int,cost,char,c2,s2,char,at,j,1,if,c1,c2,cost,0,else,cost,1,d,i,j,math,min,math,min,d,i,1,j,1,d,i,j,1,1,d,i,1,j,1,cost,return,d,s1,length,s2,length
PropertyMatches -> private static int calculateStringDistance(String s1, String s2);1530174524;Calculate the distance between the given two Strings_according to the Levenshtein algorithm._@param s1 the first String_@param s2 the second String_@return the distance value;private static int calculateStringDistance(String s1, String s2) {_		if (s1.isEmpty()) {_			return s2.length()__		}_		if (s2.isEmpty()) {_			return s1.length()__		}__		int[][] d = new int[s1.length() + 1][s2.length() + 1]__		for (int i = 0_ i <= s1.length()_ i++) {_			d[i][0] = i__		}_		for (int j = 0_ j <= s2.length()_ j++) {_			d[0][j] = j__		}__		for (int i = 1_ i <= s1.length()_ i++) {_			char c1 = s1.charAt(i - 1)__			for (int j = 1_ j <= s2.length()_ j++) {_				int cost__				char c2 = s2.charAt(j - 1)__				if (c1 == c2) {_					cost = 0__				}_				else {_					cost = 1__				}_				d[i][j] = Math.min(Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1), d[i - 1][j - 1] + cost)__			}_		}__		return d[s1.length()][s2.length()]__	};calculate,the,distance,between,the,given,two,strings,according,to,the,levenshtein,algorithm,param,s1,the,first,string,param,s2,the,second,string,return,the,distance,value;private,static,int,calculate,string,distance,string,s1,string,s2,if,s1,is,empty,return,s2,length,if,s2,is,empty,return,s1,length,int,d,new,int,s1,length,1,s2,length,1,for,int,i,0,i,s1,length,i,d,i,0,i,for,int,j,0,j,s2,length,j,d,0,j,j,for,int,i,1,i,s1,length,i,char,c1,s1,char,at,i,1,for,int,j,1,j,s2,length,j,int,cost,char,c2,s2,char,at,j,1,if,c1,c2,cost,0,else,cost,1,d,i,j,math,min,math,min,d,i,1,j,1,d,i,j,1,1,d,i,1,j,1,cost,return,d,s1,length,s2,length
PropertyMatches -> BeanPropertyMatches -> private static String[] calculateMatches(String propertyName, PropertyDescriptor[] propertyDescriptors, int maxDistance);1432213851;Generate possible property alternatives for the given property and_class. Internally uses the {@code getStringDistance} method, which_in turn uses the Levenshtein algorithm to determine the distance between_two Strings._@param propertyDescriptors the JavaBeans property descriptors to search_@param maxDistance the maximum distance to accept;private static String[] calculateMatches(String propertyName, PropertyDescriptor[] propertyDescriptors, int maxDistance) {_			List<String> candidates = new ArrayList<String>()__			for (PropertyDescriptor pd : propertyDescriptors) {_				if (pd.getWriteMethod() != null) {_					String possibleAlternative = pd.getName()__					if (calculateStringDistance(propertyName, possibleAlternative) <= maxDistance) {_						candidates.add(possibleAlternative)__					}_				}_			}_			Collections.sort(candidates)__			return StringUtils.toStringArray(candidates)__		};generate,possible,property,alternatives,for,the,given,property,and,class,internally,uses,the,code,get,string,distance,method,which,in,turn,uses,the,levenshtein,algorithm,to,determine,the,distance,between,two,strings,param,property,descriptors,the,java,beans,property,descriptors,to,search,param,max,distance,the,maximum,distance,to,accept;private,static,string,calculate,matches,string,property,name,property,descriptor,property,descriptors,int,max,distance,list,string,candidates,new,array,list,string,for,property,descriptor,pd,property,descriptors,if,pd,get,write,method,null,string,possible,alternative,pd,get,name,if,calculate,string,distance,property,name,possible,alternative,max,distance,candidates,add,possible,alternative,collections,sort,candidates,return,string,utils,to,string,array,candidates
PropertyMatches -> BeanPropertyMatches -> private static String[] calculateMatches(String propertyName, PropertyDescriptor[] propertyDescriptors, int maxDistance);1432232180;Generate possible property alternatives for the given property and_class. Internally uses the {@code getStringDistance} method, which_in turn uses the Levenshtein algorithm to determine the distance between_two Strings._@param propertyDescriptors the JavaBeans property descriptors to search_@param maxDistance the maximum distance to accept;private static String[] calculateMatches(String propertyName, PropertyDescriptor[] propertyDescriptors, int maxDistance) {_			List<String> candidates = new ArrayList<String>()__			for (PropertyDescriptor pd : propertyDescriptors) {_				if (pd.getWriteMethod() != null) {_					String possibleAlternative = pd.getName()__					if (calculateStringDistance(propertyName, possibleAlternative) <= maxDistance) {_						candidates.add(possibleAlternative)__					}_				}_			}_			Collections.sort(candidates)__			return StringUtils.toStringArray(candidates)__		};generate,possible,property,alternatives,for,the,given,property,and,class,internally,uses,the,code,get,string,distance,method,which,in,turn,uses,the,levenshtein,algorithm,to,determine,the,distance,between,two,strings,param,property,descriptors,the,java,beans,property,descriptors,to,search,param,max,distance,the,maximum,distance,to,accept;private,static,string,calculate,matches,string,property,name,property,descriptor,property,descriptors,int,max,distance,list,string,candidates,new,array,list,string,for,property,descriptor,pd,property,descriptors,if,pd,get,write,method,null,string,possible,alternative,pd,get,name,if,calculate,string,distance,property,name,possible,alternative,max,distance,candidates,add,possible,alternative,collections,sort,candidates,return,string,utils,to,string,array,candidates
PropertyMatches -> BeanPropertyMatches -> private static String[] calculateMatches(String propertyName, PropertyDescriptor[] propertyDescriptors, int maxDistance);1467730834;Generate possible property alternatives for the given property and_class. Internally uses the {@code getStringDistance} method, which_in turn uses the Levenshtein algorithm to determine the distance between_two Strings._@param propertyDescriptors the JavaBeans property descriptors to search_@param maxDistance the maximum distance to accept;private static String[] calculateMatches(String propertyName, PropertyDescriptor[] propertyDescriptors, int maxDistance) {_			List<String> candidates = new ArrayList<>()__			for (PropertyDescriptor pd : propertyDescriptors) {_				if (pd.getWriteMethod() != null) {_					String possibleAlternative = pd.getName()__					if (calculateStringDistance(propertyName, possibleAlternative) <= maxDistance) {_						candidates.add(possibleAlternative)__					}_				}_			}_			Collections.sort(candidates)__			return StringUtils.toStringArray(candidates)__		};generate,possible,property,alternatives,for,the,given,property,and,class,internally,uses,the,code,get,string,distance,method,which,in,turn,uses,the,levenshtein,algorithm,to,determine,the,distance,between,two,strings,param,property,descriptors,the,java,beans,property,descriptors,to,search,param,max,distance,the,maximum,distance,to,accept;private,static,string,calculate,matches,string,property,name,property,descriptor,property,descriptors,int,max,distance,list,string,candidates,new,array,list,for,property,descriptor,pd,property,descriptors,if,pd,get,write,method,null,string,possible,alternative,pd,get,name,if,calculate,string,distance,property,name,possible,alternative,max,distance,candidates,add,possible,alternative,collections,sort,candidates,return,string,utils,to,string,array,candidates
PropertyMatches -> BeanPropertyMatches -> private static String[] calculateMatches(String propertyName, PropertyDescriptor[] propertyDescriptors, int maxDistance);1479997926;Generate possible property alternatives for the given property and_class. Internally uses the {@code getStringDistance} method, which_in turn uses the Levenshtein algorithm to determine the distance between_two Strings._@param propertyDescriptors the JavaBeans property descriptors to search_@param maxDistance the maximum distance to accept;private static String[] calculateMatches(String propertyName, PropertyDescriptor[] propertyDescriptors, int maxDistance) {_			List<String> candidates = new ArrayList<>()__			for (PropertyDescriptor pd : propertyDescriptors) {_				if (pd.getWriteMethod() != null) {_					String possibleAlternative = pd.getName()__					if (calculateStringDistance(propertyName, possibleAlternative) <= maxDistance) {_						candidates.add(possibleAlternative)__					}_				}_			}_			Collections.sort(candidates)__			return StringUtils.toStringArray(candidates)__		};generate,possible,property,alternatives,for,the,given,property,and,class,internally,uses,the,code,get,string,distance,method,which,in,turn,uses,the,levenshtein,algorithm,to,determine,the,distance,between,two,strings,param,property,descriptors,the,java,beans,property,descriptors,to,search,param,max,distance,the,maximum,distance,to,accept;private,static,string,calculate,matches,string,property,name,property,descriptor,property,descriptors,int,max,distance,list,string,candidates,new,array,list,for,property,descriptor,pd,property,descriptors,if,pd,get,write,method,null,string,possible,alternative,pd,get,name,if,calculate,string,distance,property,name,possible,alternative,max,distance,candidates,add,possible,alternative,collections,sort,candidates,return,string,utils,to,string,array,candidates
PropertyMatches -> BeanPropertyMatches -> private static String[] calculateMatches(String propertyName, PropertyDescriptor[] propertyDescriptors, int maxDistance);1487760984;Generate possible property alternatives for the given property and_class. Internally uses the {@code getStringDistance} method, which_in turn uses the Levenshtein algorithm to determine the distance between_two Strings._@param propertyDescriptors the JavaBeans property descriptors to search_@param maxDistance the maximum distance to accept;private static String[] calculateMatches(String propertyName, PropertyDescriptor[] propertyDescriptors, int maxDistance) {_			List<String> candidates = new ArrayList<>()__			for (PropertyDescriptor pd : propertyDescriptors) {_				if (pd.getWriteMethod() != null) {_					String possibleAlternative = pd.getName()__					if (calculateStringDistance(propertyName, possibleAlternative) <= maxDistance) {_						candidates.add(possibleAlternative)__					}_				}_			}_			Collections.sort(candidates)__			return StringUtils.toStringArray(candidates)__		};generate,possible,property,alternatives,for,the,given,property,and,class,internally,uses,the,code,get,string,distance,method,which,in,turn,uses,the,levenshtein,algorithm,to,determine,the,distance,between,two,strings,param,property,descriptors,the,java,beans,property,descriptors,to,search,param,max,distance,the,maximum,distance,to,accept;private,static,string,calculate,matches,string,property,name,property,descriptor,property,descriptors,int,max,distance,list,string,candidates,new,array,list,for,property,descriptor,pd,property,descriptors,if,pd,get,write,method,null,string,possible,alternative,pd,get,name,if,calculate,string,distance,property,name,possible,alternative,max,distance,candidates,add,possible,alternative,collections,sort,candidates,return,string,utils,to,string,array,candidates
PropertyMatches -> BeanPropertyMatches -> private static String[] calculateMatches(String propertyName, PropertyDescriptor[] propertyDescriptors, int maxDistance);1497341397;Generate possible property alternatives for the given property and_class. Internally uses the {@code getStringDistance} method, which_in turn uses the Levenshtein algorithm to determine the distance between_two Strings._@param propertyDescriptors the JavaBeans property descriptors to search_@param maxDistance the maximum distance to accept;private static String[] calculateMatches(String propertyName, PropertyDescriptor[] propertyDescriptors, int maxDistance) {_			List<String> candidates = new ArrayList<>()__			for (PropertyDescriptor pd : propertyDescriptors) {_				if (pd.getWriteMethod() != null) {_					String possibleAlternative = pd.getName()__					if (calculateStringDistance(propertyName, possibleAlternative) <= maxDistance) {_						candidates.add(possibleAlternative)__					}_				}_			}_			Collections.sort(candidates)__			return StringUtils.toStringArray(candidates)__		};generate,possible,property,alternatives,for,the,given,property,and,class,internally,uses,the,code,get,string,distance,method,which,in,turn,uses,the,levenshtein,algorithm,to,determine,the,distance,between,two,strings,param,property,descriptors,the,java,beans,property,descriptors,to,search,param,max,distance,the,maximum,distance,to,accept;private,static,string,calculate,matches,string,property,name,property,descriptor,property,descriptors,int,max,distance,list,string,candidates,new,array,list,for,property,descriptor,pd,property,descriptors,if,pd,get,write,method,null,string,possible,alternative,pd,get,name,if,calculate,string,distance,property,name,possible,alternative,max,distance,candidates,add,possible,alternative,collections,sort,candidates,return,string,utils,to,string,array,candidates
PropertyMatches -> BeanPropertyMatches -> private static String[] calculateMatches(String propertyName, PropertyDescriptor[] propertyDescriptors, int maxDistance);1497341594;Generate possible property alternatives for the given property and_class. Internally uses the {@code getStringDistance} method, which_in turn uses the Levenshtein algorithm to determine the distance between_two Strings._@param propertyDescriptors the JavaBeans property descriptors to search_@param maxDistance the maximum distance to accept;private static String[] calculateMatches(String propertyName, PropertyDescriptor[] propertyDescriptors, int maxDistance) {_			List<String> candidates = new ArrayList<>()__			for (PropertyDescriptor pd : propertyDescriptors) {_				if (pd.getWriteMethod() != null) {_					String possibleAlternative = pd.getName()__					if (calculateStringDistance(propertyName, possibleAlternative) <= maxDistance) {_						candidates.add(possibleAlternative)__					}_				}_			}_			Collections.sort(candidates)__			return StringUtils.toStringArray(candidates)__		};generate,possible,property,alternatives,for,the,given,property,and,class,internally,uses,the,code,get,string,distance,method,which,in,turn,uses,the,levenshtein,algorithm,to,determine,the,distance,between,two,strings,param,property,descriptors,the,java,beans,property,descriptors,to,search,param,max,distance,the,maximum,distance,to,accept;private,static,string,calculate,matches,string,property,name,property,descriptor,property,descriptors,int,max,distance,list,string,candidates,new,array,list,for,property,descriptor,pd,property,descriptors,if,pd,get,write,method,null,string,possible,alternative,pd,get,name,if,calculate,string,distance,property,name,possible,alternative,max,distance,candidates,add,possible,alternative,collections,sort,candidates,return,string,utils,to,string,array,candidates
PropertyMatches -> BeanPropertyMatches -> private static String[] calculateMatches(String propertyName, PropertyDescriptor[] propertyDescriptors, int maxDistance);1519560860;Generate possible property alternatives for the given property and_class. Internally uses the {@code getStringDistance} method, which_in turn uses the Levenshtein algorithm to determine the distance between_two Strings._@param propertyDescriptors the JavaBeans property descriptors to search_@param maxDistance the maximum distance to accept;private static String[] calculateMatches(String propertyName, PropertyDescriptor[] propertyDescriptors, int maxDistance) {_			List<String> candidates = new ArrayList<>()__			for (PropertyDescriptor pd : propertyDescriptors) {_				if (pd.getWriteMethod() != null) {_					String possibleAlternative = pd.getName()__					if (calculateStringDistance(propertyName, possibleAlternative) <= maxDistance) {_						candidates.add(possibleAlternative)__					}_				}_			}_			Collections.sort(candidates)__			return StringUtils.toStringArray(candidates)__		};generate,possible,property,alternatives,for,the,given,property,and,class,internally,uses,the,code,get,string,distance,method,which,in,turn,uses,the,levenshtein,algorithm,to,determine,the,distance,between,two,strings,param,property,descriptors,the,java,beans,property,descriptors,to,search,param,max,distance,the,maximum,distance,to,accept;private,static,string,calculate,matches,string,property,name,property,descriptor,property,descriptors,int,max,distance,list,string,candidates,new,array,list,for,property,descriptor,pd,property,descriptors,if,pd,get,write,method,null,string,possible,alternative,pd,get,name,if,calculate,string,distance,property,name,possible,alternative,max,distance,candidates,add,possible,alternative,collections,sort,candidates,return,string,utils,to,string,array,candidates
PropertyMatches -> public static PropertyMatches forProperty(String propertyName, Class beanClass, int maxDistance);1328020251;Create PropertyMatches for the given bean property._@param propertyName the name of the property to find possible matches for_@param beanClass the bean class to search for matches_@param maxDistance the maximum property distance allowed for matches;public static PropertyMatches forProperty(String propertyName, Class beanClass, int maxDistance) {_		return new PropertyMatches(propertyName, beanClass, maxDistance)__	};create,property,matches,for,the,given,bean,property,param,property,name,the,name,of,the,property,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches,param,max,distance,the,maximum,property,distance,allowed,for,matches;public,static,property,matches,for,property,string,property,name,class,bean,class,int,max,distance,return,new,property,matches,property,name,bean,class,max,distance
PropertyMatches -> public static PropertyMatches forProperty(String propertyName, Class beanClass, int maxDistance);1356735495;Create PropertyMatches for the given bean property._@param propertyName the name of the property to find possible matches for_@param beanClass the bean class to search for matches_@param maxDistance the maximum property distance allowed for matches;public static PropertyMatches forProperty(String propertyName, Class beanClass, int maxDistance) {_		return new PropertyMatches(propertyName, beanClass, maxDistance)__	};create,property,matches,for,the,given,bean,property,param,property,name,the,name,of,the,property,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches,param,max,distance,the,maximum,property,distance,allowed,for,matches;public,static,property,matches,for,property,string,property,name,class,bean,class,int,max,distance,return,new,property,matches,property,name,bean,class,max,distance
PropertyMatches -> public String buildErrorMessage();1328020251;Build an error message for the given invalid property name,_indicating the possible property matches.;public String buildErrorMessage() {_		StringBuilder msg = new StringBuilder()__		msg.append("Bean property '")__		msg.append(this.propertyName)__		msg.append("' is not writable or has an invalid setter method. ")___		if (ObjectUtils.isEmpty(this.possibleMatches)) {_			msg.append("Does the parameter type of the setter match the return type of the getter?")__		}_		else {_			msg.append("Did you mean ")__			for (int i = 0_ i < this.possibleMatches.length_ i++) {_				msg.append('\'')__				msg.append(this.possibleMatches[i])__				if (i < this.possibleMatches.length - 2) {_					msg.append("', ")__				}_				else if (i == this.possibleMatches.length - 2){_					msg.append("', or ")__				}_	 		}_			msg.append("'?")__		}_		return msg.toString()__	};build,an,error,message,for,the,given,invalid,property,name,indicating,the,possible,property,matches;public,string,build,error,message,string,builder,msg,new,string,builder,msg,append,bean,property,msg,append,this,property,name,msg,append,is,not,writable,or,has,an,invalid,setter,method,if,object,utils,is,empty,this,possible,matches,msg,append,does,the,parameter,type,of,the,setter,match,the,return,type,of,the,getter,else,msg,append,did,you,mean,for,int,i,0,i,this,possible,matches,length,i,msg,append,msg,append,this,possible,matches,i,if,i,this,possible,matches,length,2,msg,append,else,if,i,this,possible,matches,length,2,msg,append,or,msg,append,return,msg,to,string
PropertyMatches -> public String buildErrorMessage();1356735495;Build an error message for the given invalid property name,_indicating the possible property matches.;public String buildErrorMessage() {_		StringBuilder msg = new StringBuilder()__		msg.append("Bean property '")__		msg.append(this.propertyName)__		msg.append("' is not writable or has an invalid setter method. ")___		if (ObjectUtils.isEmpty(this.possibleMatches)) {_			msg.append("Does the parameter type of the setter match the return type of the getter?")__		}_		else {_			msg.append("Did you mean ")__			for (int i = 0_ i < this.possibleMatches.length_ i++) {_				msg.append('\'')__				msg.append(this.possibleMatches[i])__				if (i < this.possibleMatches.length - 2) {_					msg.append("', ")__				}_				else if (i == this.possibleMatches.length - 2){_					msg.append("', or ")__				}_	 		}_			msg.append("'?")__		}_		return msg.toString()__	};build,an,error,message,for,the,given,invalid,property,name,indicating,the,possible,property,matches;public,string,build,error,message,string,builder,msg,new,string,builder,msg,append,bean,property,msg,append,this,property,name,msg,append,is,not,writable,or,has,an,invalid,setter,method,if,object,utils,is,empty,this,possible,matches,msg,append,does,the,parameter,type,of,the,setter,match,the,return,type,of,the,getter,else,msg,append,did,you,mean,for,int,i,0,i,this,possible,matches,length,i,msg,append,msg,append,this,possible,matches,i,if,i,this,possible,matches,length,2,msg,append,else,if,i,this,possible,matches,length,2,msg,append,or,msg,append,return,msg,to,string
PropertyMatches -> public String buildErrorMessage();1385412762;Build an error message for the given invalid property name,_indicating the possible property matches.;public String buildErrorMessage() {_		StringBuilder msg = new StringBuilder()__		msg.append("Bean property '")__		msg.append(this.propertyName)__		msg.append("' is not writable or has an invalid setter method. ")___		if (ObjectUtils.isEmpty(this.possibleMatches)) {_			msg.append("Does the parameter type of the setter match the return type of the getter?")__		}_		else {_			msg.append("Did you mean ")__			for (int i = 0_ i < this.possibleMatches.length_ i++) {_				msg.append('\'')__				msg.append(this.possibleMatches[i])__				if (i < this.possibleMatches.length - 2) {_					msg.append("', ")__				}_				else if (i == this.possibleMatches.length - 2){_					msg.append("', or ")__				}_	 		}_			msg.append("'?")__		}_		return msg.toString()__	};build,an,error,message,for,the,given,invalid,property,name,indicating,the,possible,property,matches;public,string,build,error,message,string,builder,msg,new,string,builder,msg,append,bean,property,msg,append,this,property,name,msg,append,is,not,writable,or,has,an,invalid,setter,method,if,object,utils,is,empty,this,possible,matches,msg,append,does,the,parameter,type,of,the,setter,match,the,return,type,of,the,getter,else,msg,append,did,you,mean,for,int,i,0,i,this,possible,matches,length,i,msg,append,msg,append,this,possible,matches,i,if,i,this,possible,matches,length,2,msg,append,else,if,i,this,possible,matches,length,2,msg,append,or,msg,append,return,msg,to,string
PropertyMatches -> public String buildErrorMessage();1405696918;Build an error message for the given invalid property name,_indicating the possible property matches.;public String buildErrorMessage() {_		StringBuilder msg = new StringBuilder()__		msg.append("Bean property '")__		msg.append(this.propertyName)__		msg.append("' is not writable or has an invalid setter method. ")___		if (ObjectUtils.isEmpty(this.possibleMatches)) {_			msg.append("Does the parameter type of the setter match the return type of the getter?")__		}_		else {_			msg.append("Did you mean ")__			for (int i = 0_ i < this.possibleMatches.length_ i++) {_				msg.append('\'')__				msg.append(this.possibleMatches[i])__				if (i < this.possibleMatches.length - 2) {_					msg.append("', ")__				}_				else if (i == this.possibleMatches.length - 2){_					msg.append("', or ")__				}_	 		}_			msg.append("'?")__		}_		return msg.toString()__	};build,an,error,message,for,the,given,invalid,property,name,indicating,the,possible,property,matches;public,string,build,error,message,string,builder,msg,new,string,builder,msg,append,bean,property,msg,append,this,property,name,msg,append,is,not,writable,or,has,an,invalid,setter,method,if,object,utils,is,empty,this,possible,matches,msg,append,does,the,parameter,type,of,the,setter,match,the,return,type,of,the,getter,else,msg,append,did,you,mean,for,int,i,0,i,this,possible,matches,length,i,msg,append,msg,append,this,possible,matches,i,if,i,this,possible,matches,length,2,msg,append,else,if,i,this,possible,matches,length,2,msg,append,or,msg,append,return,msg,to,string
PropertyMatches -> public String getPropertyName();1432213851;Return the name of the requested property.;public String getPropertyName() {_		return propertyName__	};return,the,name,of,the,requested,property;public,string,get,property,name,return,property,name
PropertyMatches -> public String getPropertyName();1432232180;Return the name of the requested property.;public String getPropertyName() {_		return propertyName__	};return,the,name,of,the,requested,property;public,string,get,property,name,return,property,name
PropertyMatches -> public String getPropertyName();1467730834;Return the name of the requested property.;public String getPropertyName() {_		return propertyName__	};return,the,name,of,the,requested,property;public,string,get,property,name,return,property,name
PropertyMatches -> public String getPropertyName();1479997926;Return the name of the requested property.;public String getPropertyName() {_		return this.propertyName__	};return,the,name,of,the,requested,property;public,string,get,property,name,return,this,property,name
PropertyMatches -> public String getPropertyName();1487760984;Return the name of the requested property.;public String getPropertyName() {_		return this.propertyName__	};return,the,name,of,the,requested,property;public,string,get,property,name,return,this,property,name
PropertyMatches -> public String getPropertyName();1497341397;Return the name of the requested property.;public String getPropertyName() {_		return this.propertyName__	};return,the,name,of,the,requested,property;public,string,get,property,name,return,this,property,name
PropertyMatches -> public String getPropertyName();1497341594;Return the name of the requested property.;public String getPropertyName() {_		return this.propertyName__	};return,the,name,of,the,requested,property;public,string,get,property,name,return,this,property,name
PropertyMatches -> public String getPropertyName();1519560860;Return the name of the requested property.;public String getPropertyName() {_		return this.propertyName__	};return,the,name,of,the,requested,property;public,string,get,property,name,return,this,property,name
PropertyMatches -> public String getPropertyName();1520434198;Return the name of the requested property.;public String getPropertyName() {_		return this.propertyName__	};return,the,name,of,the,requested,property;public,string,get,property,name,return,this,property,name
PropertyMatches -> public String getPropertyName();1530174524;Return the name of the requested property.;public String getPropertyName() {_		return this.propertyName__	};return,the,name,of,the,requested,property;public,string,get,property,name,return,this,property,name
PropertyMatches -> public static PropertyMatches forProperty(String propertyName, Class<?> beanClass);1385412762;Create PropertyMatches for the given bean property._@param propertyName the name of the property to find possible matches for_@param beanClass the bean class to search for matches;public static PropertyMatches forProperty(String propertyName, Class<?> beanClass) {_		return forProperty(propertyName, beanClass, DEFAULT_MAX_DISTANCE)__	};create,property,matches,for,the,given,bean,property,param,property,name,the,name,of,the,property,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches;public,static,property,matches,for,property,string,property,name,class,bean,class,return,for,property,property,name,bean,class
PropertyMatches -> public static PropertyMatches forProperty(String propertyName, Class<?> beanClass);1405696918;Create PropertyMatches for the given bean property._@param propertyName the name of the property to find possible matches for_@param beanClass the bean class to search for matches;public static PropertyMatches forProperty(String propertyName, Class<?> beanClass) {_		return forProperty(propertyName, beanClass, DEFAULT_MAX_DISTANCE)__	};create,property,matches,for,the,given,bean,property,param,property,name,the,name,of,the,property,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches;public,static,property,matches,for,property,string,property,name,class,bean,class,return,for,property,property,name,bean,class
PropertyMatches -> public static PropertyMatches forProperty(String propertyName, Class<?> beanClass);1432213851;Create PropertyMatches for the given bean property._@param propertyName the name of the property to find possible matches for_@param beanClass the bean class to search for matches;public static PropertyMatches forProperty(String propertyName, Class<?> beanClass) {_		return forProperty(propertyName, beanClass, DEFAULT_MAX_DISTANCE)__	};create,property,matches,for,the,given,bean,property,param,property,name,the,name,of,the,property,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches;public,static,property,matches,for,property,string,property,name,class,bean,class,return,for,property,property,name,bean,class
PropertyMatches -> public static PropertyMatches forProperty(String propertyName, Class<?> beanClass);1432232180;Create PropertyMatches for the given bean property._@param propertyName the name of the property to find possible matches for_@param beanClass the bean class to search for matches;public static PropertyMatches forProperty(String propertyName, Class<?> beanClass) {_		return forProperty(propertyName, beanClass, DEFAULT_MAX_DISTANCE)__	};create,property,matches,for,the,given,bean,property,param,property,name,the,name,of,the,property,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches;public,static,property,matches,for,property,string,property,name,class,bean,class,return,for,property,property,name,bean,class
PropertyMatches -> public static PropertyMatches forProperty(String propertyName, Class<?> beanClass);1467730834;Create PropertyMatches for the given bean property._@param propertyName the name of the property to find possible matches for_@param beanClass the bean class to search for matches;public static PropertyMatches forProperty(String propertyName, Class<?> beanClass) {_		return forProperty(propertyName, beanClass, DEFAULT_MAX_DISTANCE)__	};create,property,matches,for,the,given,bean,property,param,property,name,the,name,of,the,property,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches;public,static,property,matches,for,property,string,property,name,class,bean,class,return,for,property,property,name,bean,class
PropertyMatches -> public static PropertyMatches forProperty(String propertyName, Class<?> beanClass);1479997926;Create PropertyMatches for the given bean property._@param propertyName the name of the property to find possible matches for_@param beanClass the bean class to search for matches;public static PropertyMatches forProperty(String propertyName, Class<?> beanClass) {_		return forProperty(propertyName, beanClass, DEFAULT_MAX_DISTANCE)__	};create,property,matches,for,the,given,bean,property,param,property,name,the,name,of,the,property,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches;public,static,property,matches,for,property,string,property,name,class,bean,class,return,for,property,property,name,bean,class
PropertyMatches -> public static PropertyMatches forProperty(String propertyName, Class<?> beanClass);1487760984;Create PropertyMatches for the given bean property._@param propertyName the name of the property to find possible matches for_@param beanClass the bean class to search for matches;public static PropertyMatches forProperty(String propertyName, Class<?> beanClass) {_		return forProperty(propertyName, beanClass, DEFAULT_MAX_DISTANCE)__	};create,property,matches,for,the,given,bean,property,param,property,name,the,name,of,the,property,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches;public,static,property,matches,for,property,string,property,name,class,bean,class,return,for,property,property,name,bean,class
PropertyMatches -> public static PropertyMatches forProperty(String propertyName, Class<?> beanClass);1497341397;Create PropertyMatches for the given bean property._@param propertyName the name of the property to find possible matches for_@param beanClass the bean class to search for matches;public static PropertyMatches forProperty(String propertyName, Class<?> beanClass) {_		return forProperty(propertyName, beanClass, DEFAULT_MAX_DISTANCE)__	};create,property,matches,for,the,given,bean,property,param,property,name,the,name,of,the,property,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches;public,static,property,matches,for,property,string,property,name,class,bean,class,return,for,property,property,name,bean,class
PropertyMatches -> public static PropertyMatches forProperty(String propertyName, Class<?> beanClass);1497341594;Create PropertyMatches for the given bean property._@param propertyName the name of the property to find possible matches for_@param beanClass the bean class to search for matches;public static PropertyMatches forProperty(String propertyName, Class<?> beanClass) {_		return forProperty(propertyName, beanClass, DEFAULT_MAX_DISTANCE)__	};create,property,matches,for,the,given,bean,property,param,property,name,the,name,of,the,property,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches;public,static,property,matches,for,property,string,property,name,class,bean,class,return,for,property,property,name,bean,class
PropertyMatches -> public static PropertyMatches forProperty(String propertyName, Class<?> beanClass);1519560860;Create PropertyMatches for the given bean property._@param propertyName the name of the property to find possible matches for_@param beanClass the bean class to search for matches;public static PropertyMatches forProperty(String propertyName, Class<?> beanClass) {_		return forProperty(propertyName, beanClass, DEFAULT_MAX_DISTANCE)__	};create,property,matches,for,the,given,bean,property,param,property,name,the,name,of,the,property,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches;public,static,property,matches,for,property,string,property,name,class,bean,class,return,for,property,property,name,bean,class
PropertyMatches -> public static PropertyMatches forProperty(String propertyName, Class<?> beanClass);1520434198;Create PropertyMatches for the given bean property._@param propertyName the name of the property to find possible matches for_@param beanClass the bean class to search for matches;public static PropertyMatches forProperty(String propertyName, Class<?> beanClass) {_		return forProperty(propertyName, beanClass, DEFAULT_MAX_DISTANCE)__	};create,property,matches,for,the,given,bean,property,param,property,name,the,name,of,the,property,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches;public,static,property,matches,for,property,string,property,name,class,bean,class,return,for,property,property,name,bean,class
PropertyMatches -> public static PropertyMatches forProperty(String propertyName, Class<?> beanClass);1530174524;Create PropertyMatches for the given bean property._@param propertyName the name of the property to find possible matches for_@param beanClass the bean class to search for matches;public static PropertyMatches forProperty(String propertyName, Class<?> beanClass) {_		return forProperty(propertyName, beanClass, DEFAULT_MAX_DISTANCE)__	};create,property,matches,for,the,given,bean,property,param,property,name,the,name,of,the,property,to,find,possible,matches,for,param,bean,class,the,bean,class,to,search,for,matches;public,static,property,matches,for,property,string,property,name,class,bean,class,return,for,property,property,name,bean,class
