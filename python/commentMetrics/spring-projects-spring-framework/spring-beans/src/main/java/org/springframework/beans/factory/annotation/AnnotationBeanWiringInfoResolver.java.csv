# id;timestamp;commentText;codeText;commentWords;codeWords
AnnotationBeanWiringInfoResolver -> protected BeanWiringInfo buildWiringInfo(Object beanInstance, Configurable annotation);1328020251;Build the BeanWiringInfo for the given Configurable annotation._@param beanInstance the bean instance_@param annotation the Configurable annotation found on the bean class_@return the resolved BeanWiringInfo;protected BeanWiringInfo buildWiringInfo(Object beanInstance, Configurable annotation) {_		if (!Autowire.NO.equals(annotation.autowire())) {_			return new BeanWiringInfo(annotation.autowire().value(), annotation.dependencyCheck())__		}_		else {_			if (!"".equals(annotation.value())) {_				_				return new BeanWiringInfo(annotation.value(), false)__			}_			else {_				_				return new BeanWiringInfo(getDefaultBeanName(beanInstance), true)__			}_		}_	};build,the,bean,wiring,info,for,the,given,configurable,annotation,param,bean,instance,the,bean,instance,param,annotation,the,configurable,annotation,found,on,the,bean,class,return,the,resolved,bean,wiring,info;protected,bean,wiring,info,build,wiring,info,object,bean,instance,configurable,annotation,if,autowire,no,equals,annotation,autowire,return,new,bean,wiring,info,annotation,autowire,value,annotation,dependency,check,else,if,equals,annotation,value,return,new,bean,wiring,info,annotation,value,false,else,return,new,bean,wiring,info,get,default,bean,name,bean,instance,true
AnnotationBeanWiringInfoResolver -> protected BeanWiringInfo buildWiringInfo(Object beanInstance, Configurable annotation);1356735495;Build the BeanWiringInfo for the given Configurable annotation._@param beanInstance the bean instance_@param annotation the Configurable annotation found on the bean class_@return the resolved BeanWiringInfo;protected BeanWiringInfo buildWiringInfo(Object beanInstance, Configurable annotation) {_		if (!Autowire.NO.equals(annotation.autowire())) {_			return new BeanWiringInfo(annotation.autowire().value(), annotation.dependencyCheck())__		}_		else {_			if (!"".equals(annotation.value())) {_				_				return new BeanWiringInfo(annotation.value(), false)__			}_			else {_				_				return new BeanWiringInfo(getDefaultBeanName(beanInstance), true)__			}_		}_	};build,the,bean,wiring,info,for,the,given,configurable,annotation,param,bean,instance,the,bean,instance,param,annotation,the,configurable,annotation,found,on,the,bean,class,return,the,resolved,bean,wiring,info;protected,bean,wiring,info,build,wiring,info,object,bean,instance,configurable,annotation,if,autowire,no,equals,annotation,autowire,return,new,bean,wiring,info,annotation,autowire,value,annotation,dependency,check,else,if,equals,annotation,value,return,new,bean,wiring,info,annotation,value,false,else,return,new,bean,wiring,info,get,default,bean,name,bean,instance,true
AnnotationBeanWiringInfoResolver -> protected BeanWiringInfo buildWiringInfo(Object beanInstance, Configurable annotation);1357119239;Build the BeanWiringInfo for the given Configurable annotation._@param beanInstance the bean instance_@param annotation the Configurable annotation found on the bean class_@return the resolved BeanWiringInfo;protected BeanWiringInfo buildWiringInfo(Object beanInstance, Configurable annotation) {_		if (!Autowire.NO.equals(annotation.autowire())) {_			return new BeanWiringInfo(annotation.autowire().value(), annotation.dependencyCheck())__		}_		else {_			if (!"".equals(annotation.value())) {_				_				return new BeanWiringInfo(annotation.value(), false)__			}_			else {_				_				return new BeanWiringInfo(getDefaultBeanName(beanInstance), true)__			}_		}_	};build,the,bean,wiring,info,for,the,given,configurable,annotation,param,bean,instance,the,bean,instance,param,annotation,the,configurable,annotation,found,on,the,bean,class,return,the,resolved,bean,wiring,info;protected,bean,wiring,info,build,wiring,info,object,bean,instance,configurable,annotation,if,autowire,no,equals,annotation,autowire,return,new,bean,wiring,info,annotation,autowire,value,annotation,dependency,check,else,if,equals,annotation,value,return,new,bean,wiring,info,annotation,value,false,else,return,new,bean,wiring,info,get,default,bean,name,bean,instance,true
AnnotationBeanWiringInfoResolver -> protected BeanWiringInfo buildWiringInfo(Object beanInstance, Configurable annotation);1368482696;Build the BeanWiringInfo for the given Configurable annotation._@param beanInstance the bean instance_@param annotation the Configurable annotation found on the bean class_@return the resolved BeanWiringInfo;protected BeanWiringInfo buildWiringInfo(Object beanInstance, Configurable annotation) {_		if (!Autowire.NO.equals(annotation.autowire())) {_			return new BeanWiringInfo(annotation.autowire().value(), annotation.dependencyCheck())__		}_		else {_			if (!"".equals(annotation.value())) {_				_				return new BeanWiringInfo(annotation.value(), false)__			}_			else {_				_				return new BeanWiringInfo(getDefaultBeanName(beanInstance), true)__			}_		}_	};build,the,bean,wiring,info,for,the,given,configurable,annotation,param,bean,instance,the,bean,instance,param,annotation,the,configurable,annotation,found,on,the,bean,class,return,the,resolved,bean,wiring,info;protected,bean,wiring,info,build,wiring,info,object,bean,instance,configurable,annotation,if,autowire,no,equals,annotation,autowire,return,new,bean,wiring,info,annotation,autowire,value,annotation,dependency,check,else,if,equals,annotation,value,return,new,bean,wiring,info,annotation,value,false,else,return,new,bean,wiring,info,get,default,bean,name,bean,instance,true
AnnotationBeanWiringInfoResolver -> protected BeanWiringInfo buildWiringInfo(Object beanInstance, Configurable annotation);1502974979;Build the BeanWiringInfo for the given Configurable annotation._@param beanInstance the bean instance_@param annotation the Configurable annotation found on the bean class_@return the resolved BeanWiringInfo;protected BeanWiringInfo buildWiringInfo(Object beanInstance, Configurable annotation) {_		if (!Autowire.NO.equals(annotation.autowire())) {_			return new BeanWiringInfo(annotation.autowire().value(), annotation.dependencyCheck())__		}_		else {_			if (!"".equals(annotation.value())) {_				_				return new BeanWiringInfo(annotation.value(), false)__			}_			else {_				_				return new BeanWiringInfo(getDefaultBeanName(beanInstance), true)__			}_		}_	};build,the,bean,wiring,info,for,the,given,configurable,annotation,param,bean,instance,the,bean,instance,param,annotation,the,configurable,annotation,found,on,the,bean,class,return,the,resolved,bean,wiring,info;protected,bean,wiring,info,build,wiring,info,object,bean,instance,configurable,annotation,if,autowire,no,equals,annotation,autowire,return,new,bean,wiring,info,annotation,autowire,value,annotation,dependency,check,else,if,equals,annotation,value,return,new,bean,wiring,info,annotation,value,false,else,return,new,bean,wiring,info,get,default,bean,name,bean,instance,true
AnnotationBeanWiringInfoResolver -> protected BeanWiringInfo buildWiringInfo(Object beanInstance, Configurable annotation);1540544849;Build the {@link BeanWiringInfo} for the given {@link Configurable} annotation._@param beanInstance the bean instance_@param annotation the Configurable annotation found on the bean class_@return the resolved BeanWiringInfo;protected BeanWiringInfo buildWiringInfo(Object beanInstance, Configurable annotation) {_		if (!Autowire.NO.equals(annotation.autowire())) {_			_			return new BeanWiringInfo(annotation.autowire().value(), annotation.dependencyCheck())__		}_		else if (!"".equals(annotation.value())) {_			_			return new BeanWiringInfo(annotation.value(), false)__		}_		else {_			_			return new BeanWiringInfo(getDefaultBeanName(beanInstance), true)__		}_	};build,the,link,bean,wiring,info,for,the,given,link,configurable,annotation,param,bean,instance,the,bean,instance,param,annotation,the,configurable,annotation,found,on,the,bean,class,return,the,resolved,bean,wiring,info;protected,bean,wiring,info,build,wiring,info,object,bean,instance,configurable,annotation,if,autowire,no,equals,annotation,autowire,return,new,bean,wiring,info,annotation,autowire,value,annotation,dependency,check,else,if,equals,annotation,value,return,new,bean,wiring,info,annotation,value,false,else,return,new,bean,wiring,info,get,default,bean,name,bean,instance,true
AnnotationBeanWiringInfoResolver -> protected String getDefaultBeanName(Object beanInstance);1328020251;Determine the default bean name for the specified bean instance._<p>The default implementation returns the superclass name for a CGLIB_proxy and the name of the plain bean class else._@param beanInstance the bean instance to build a default name for_@return the default bean name to use_@see org.springframework.util.ClassUtils#getUserClass(Class);protected String getDefaultBeanName(Object beanInstance) {_		return ClassUtils.getUserClass(beanInstance).getName()__	};determine,the,default,bean,name,for,the,specified,bean,instance,p,the,default,implementation,returns,the,superclass,name,for,a,cglib,proxy,and,the,name,of,the,plain,bean,class,else,param,bean,instance,the,bean,instance,to,build,a,default,name,for,return,the,default,bean,name,to,use,see,org,springframework,util,class,utils,get,user,class,class;protected,string,get,default,bean,name,object,bean,instance,return,class,utils,get,user,class,bean,instance,get,name
AnnotationBeanWiringInfoResolver -> protected String getDefaultBeanName(Object beanInstance);1356735495;Determine the default bean name for the specified bean instance._<p>The default implementation returns the superclass name for a CGLIB_proxy and the name of the plain bean class else._@param beanInstance the bean instance to build a default name for_@return the default bean name to use_@see org.springframework.util.ClassUtils#getUserClass(Class);protected String getDefaultBeanName(Object beanInstance) {_		return ClassUtils.getUserClass(beanInstance).getName()__	};determine,the,default,bean,name,for,the,specified,bean,instance,p,the,default,implementation,returns,the,superclass,name,for,a,cglib,proxy,and,the,name,of,the,plain,bean,class,else,param,bean,instance,the,bean,instance,to,build,a,default,name,for,return,the,default,bean,name,to,use,see,org,springframework,util,class,utils,get,user,class,class;protected,string,get,default,bean,name,object,bean,instance,return,class,utils,get,user,class,bean,instance,get,name
AnnotationBeanWiringInfoResolver -> protected String getDefaultBeanName(Object beanInstance);1357119239;Determine the default bean name for the specified bean instance._<p>The default implementation returns the superclass name for a CGLIB_proxy and the name of the plain bean class else._@param beanInstance the bean instance to build a default name for_@return the default bean name to use_@see org.springframework.util.ClassUtils#getUserClass(Class);protected String getDefaultBeanName(Object beanInstance) {_		return ClassUtils.getUserClass(beanInstance).getName()__	};determine,the,default,bean,name,for,the,specified,bean,instance,p,the,default,implementation,returns,the,superclass,name,for,a,cglib,proxy,and,the,name,of,the,plain,bean,class,else,param,bean,instance,the,bean,instance,to,build,a,default,name,for,return,the,default,bean,name,to,use,see,org,springframework,util,class,utils,get,user,class,class;protected,string,get,default,bean,name,object,bean,instance,return,class,utils,get,user,class,bean,instance,get,name
AnnotationBeanWiringInfoResolver -> protected String getDefaultBeanName(Object beanInstance);1368482696;Determine the default bean name for the specified bean instance._<p>The default implementation returns the superclass name for a CGLIB_proxy and the name of the plain bean class else._@param beanInstance the bean instance to build a default name for_@return the default bean name to use_@see org.springframework.util.ClassUtils#getUserClass(Class);protected String getDefaultBeanName(Object beanInstance) {_		return ClassUtils.getUserClass(beanInstance).getName()__	};determine,the,default,bean,name,for,the,specified,bean,instance,p,the,default,implementation,returns,the,superclass,name,for,a,cglib,proxy,and,the,name,of,the,plain,bean,class,else,param,bean,instance,the,bean,instance,to,build,a,default,name,for,return,the,default,bean,name,to,use,see,org,springframework,util,class,utils,get,user,class,class;protected,string,get,default,bean,name,object,bean,instance,return,class,utils,get,user,class,bean,instance,get,name
AnnotationBeanWiringInfoResolver -> protected String getDefaultBeanName(Object beanInstance);1502974979;Determine the default bean name for the specified bean instance._<p>The default implementation returns the superclass name for a CGLIB_proxy and the name of the plain bean class else._@param beanInstance the bean instance to build a default name for_@return the default bean name to use_@see org.springframework.util.ClassUtils#getUserClass(Class);protected String getDefaultBeanName(Object beanInstance) {_		return ClassUtils.getUserClass(beanInstance).getName()__	};determine,the,default,bean,name,for,the,specified,bean,instance,p,the,default,implementation,returns,the,superclass,name,for,a,cglib,proxy,and,the,name,of,the,plain,bean,class,else,param,bean,instance,the,bean,instance,to,build,a,default,name,for,return,the,default,bean,name,to,use,see,org,springframework,util,class,utils,get,user,class,class;protected,string,get,default,bean,name,object,bean,instance,return,class,utils,get,user,class,bean,instance,get,name
AnnotationBeanWiringInfoResolver -> protected String getDefaultBeanName(Object beanInstance);1540544849;Determine the default bean name for the specified bean instance._<p>The default implementation returns the superclass name for a CGLIB_proxy and the name of the plain bean class else._@param beanInstance the bean instance to build a default name for_@return the default bean name to use_@see org.springframework.util.ClassUtils#getUserClass(Class);protected String getDefaultBeanName(Object beanInstance) {_		return ClassUtils.getUserClass(beanInstance).getName()__	};determine,the,default,bean,name,for,the,specified,bean,instance,p,the,default,implementation,returns,the,superclass,name,for,a,cglib,proxy,and,the,name,of,the,plain,bean,class,else,param,bean,instance,the,bean,instance,to,build,a,default,name,for,return,the,default,bean,name,to,use,see,org,springframework,util,class,utils,get,user,class,class;protected,string,get,default,bean,name,object,bean,instance,return,class,utils,get,user,class,bean,instance,get,name
