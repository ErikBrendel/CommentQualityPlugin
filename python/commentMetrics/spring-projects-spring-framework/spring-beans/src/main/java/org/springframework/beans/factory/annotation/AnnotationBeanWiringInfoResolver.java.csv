commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;@Override @Nullable public BeanWiringInfo resolveWiringInfo(Object beanInstance) {     Assert.notNull(beanInstance, "Bean instance must not be null").     Configurable annotation = beanInstance.getClass().getAnnotation(Configurable.class).     return (annotation != null ? buildWiringInfo(beanInstance, annotation) : null). }
true;protected;2;14;/**  * Build the {@link BeanWiringInfo} for the given {@link Configurable} annotation.  * @param beanInstance the bean instance  * @param annotation the Configurable annotation found on the bean class  * @return the resolved BeanWiringInfo  */ ;/**  * Build the {@link BeanWiringInfo} for the given {@link Configurable} annotation.  * @param beanInstance the bean instance  * @param annotation the Configurable annotation found on the bean class  * @return the resolved BeanWiringInfo  */ protected BeanWiringInfo buildWiringInfo(Object beanInstance, Configurable annotation) {     if (!Autowire.NO.equals(annotation.autowire())) {         // Autowiring by name or by type         return new BeanWiringInfo(annotation.autowire().value(), annotation.dependencyCheck()).     } else if (!"".equals(annotation.value())) {         // Explicitly specified bean name for bean definition to take property values from         return new BeanWiringInfo(annotation.value(), false).     } else {         // Default bean name for bean definition to take property values from         return new BeanWiringInfo(getDefaultBeanName(beanInstance), true).     } }
true;protected;1;3;/**  * Determine the default bean name for the specified bean instance.  * <p>The default implementation returns the superclass name for a CGLIB  * proxy and the name of the plain bean class else.  * @param beanInstance the bean instance to build a default name for  * @return the default bean name to use  * @see org.springframework.util.ClassUtils#getUserClass(Class)  */ ;/**  * Determine the default bean name for the specified bean instance.  * <p>The default implementation returns the superclass name for a CGLIB  * proxy and the name of the plain bean class else.  * @param beanInstance the bean instance to build a default name for  * @return the default bean name to use  * @see org.springframework.util.ClassUtils#getUserClass(Class)  */ protected String getDefaultBeanName(Object beanInstance) {     return ClassUtils.getUserClass(beanInstance).getName(). }
