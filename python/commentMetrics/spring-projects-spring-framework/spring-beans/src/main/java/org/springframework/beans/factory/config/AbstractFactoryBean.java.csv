# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractFactoryBean -> protected TypeConverter getBeanTypeConverter();1328020251;Obtain a bean type converter from the BeanFactory that this bean_runs in. This is typically a fresh instance for each call,_since TypeConverters are usually <i>not</i> thread-safe._<p>Falls back to a SimpleTypeConverter when not running in a BeanFactory._@see ConfigurableBeanFactory#getTypeConverter()_@see org.springframework.beans.SimpleTypeConverter;protected TypeConverter getBeanTypeConverter() {_		BeanFactory beanFactory = getBeanFactory()__		if (beanFactory instanceof ConfigurableBeanFactory) {_			return ((ConfigurableBeanFactory) beanFactory).getTypeConverter()__		}_		else {_			return new SimpleTypeConverter()__		}_	};obtain,a,bean,type,converter,from,the,bean,factory,that,this,bean,runs,in,this,is,typically,a,fresh,instance,for,each,call,since,type,converters,are,usually,i,not,i,thread,safe,p,falls,back,to,a,simple,type,converter,when,not,running,in,a,bean,factory,see,configurable,bean,factory,get,type,converter,see,org,springframework,beans,simple,type,converter;protected,type,converter,get,bean,type,converter,bean,factory,bean,factory,get,bean,factory,if,bean,factory,instanceof,configurable,bean,factory,return,configurable,bean,factory,bean,factory,get,type,converter,else,return,new,simple,type,converter
AbstractFactoryBean -> protected TypeConverter getBeanTypeConverter();1356735495;Obtain a bean type converter from the BeanFactory that this bean_runs in. This is typically a fresh instance for each call,_since TypeConverters are usually <i>not</i> thread-safe._<p>Falls back to a SimpleTypeConverter when not running in a BeanFactory._@see ConfigurableBeanFactory#getTypeConverter()_@see org.springframework.beans.SimpleTypeConverter;protected TypeConverter getBeanTypeConverter() {_		BeanFactory beanFactory = getBeanFactory()__		if (beanFactory instanceof ConfigurableBeanFactory) {_			return ((ConfigurableBeanFactory) beanFactory).getTypeConverter()__		}_		else {_			return new SimpleTypeConverter()__		}_	};obtain,a,bean,type,converter,from,the,bean,factory,that,this,bean,runs,in,this,is,typically,a,fresh,instance,for,each,call,since,type,converters,are,usually,i,not,i,thread,safe,p,falls,back,to,a,simple,type,converter,when,not,running,in,a,bean,factory,see,configurable,bean,factory,get,type,converter,see,org,springframework,beans,simple,type,converter;protected,type,converter,get,bean,type,converter,bean,factory,bean,factory,get,bean,factory,if,bean,factory,instanceof,configurable,bean,factory,return,configurable,bean,factory,bean,factory,get,type,converter,else,return,new,simple,type,converter
AbstractFactoryBean -> protected TypeConverter getBeanTypeConverter();1357119239;Obtain a bean type converter from the BeanFactory that this bean_runs in. This is typically a fresh instance for each call,_since TypeConverters are usually <i>not</i> thread-safe._<p>Falls back to a SimpleTypeConverter when not running in a BeanFactory._@see ConfigurableBeanFactory#getTypeConverter()_@see org.springframework.beans.SimpleTypeConverter;protected TypeConverter getBeanTypeConverter() {_		BeanFactory beanFactory = getBeanFactory()__		if (beanFactory instanceof ConfigurableBeanFactory) {_			return ((ConfigurableBeanFactory) beanFactory).getTypeConverter()__		}_		else {_			return new SimpleTypeConverter()__		}_	};obtain,a,bean,type,converter,from,the,bean,factory,that,this,bean,runs,in,this,is,typically,a,fresh,instance,for,each,call,since,type,converters,are,usually,i,not,i,thread,safe,p,falls,back,to,a,simple,type,converter,when,not,running,in,a,bean,factory,see,configurable,bean,factory,get,type,converter,see,org,springframework,beans,simple,type,converter;protected,type,converter,get,bean,type,converter,bean,factory,bean,factory,get,bean,factory,if,bean,factory,instanceof,configurable,bean,factory,return,configurable,bean,factory,bean,factory,get,type,converter,else,return,new,simple,type,converter
AbstractFactoryBean -> protected TypeConverter getBeanTypeConverter();1368482696;Obtain a bean type converter from the BeanFactory that this bean_runs in. This is typically a fresh instance for each call,_since TypeConverters are usually <i>not</i> thread-safe._<p>Falls back to a SimpleTypeConverter when not running in a BeanFactory._@see ConfigurableBeanFactory#getTypeConverter()_@see org.springframework.beans.SimpleTypeConverter;protected TypeConverter getBeanTypeConverter() {_		BeanFactory beanFactory = getBeanFactory()__		if (beanFactory instanceof ConfigurableBeanFactory) {_			return ((ConfigurableBeanFactory) beanFactory).getTypeConverter()__		}_		else {_			return new SimpleTypeConverter()__		}_	};obtain,a,bean,type,converter,from,the,bean,factory,that,this,bean,runs,in,this,is,typically,a,fresh,instance,for,each,call,since,type,converters,are,usually,i,not,i,thread,safe,p,falls,back,to,a,simple,type,converter,when,not,running,in,a,bean,factory,see,configurable,bean,factory,get,type,converter,see,org,springframework,beans,simple,type,converter;protected,type,converter,get,bean,type,converter,bean,factory,bean,factory,get,bean,factory,if,bean,factory,instanceof,configurable,bean,factory,return,configurable,bean,factory,bean,factory,get,type,converter,else,return,new,simple,type,converter
AbstractFactoryBean -> protected TypeConverter getBeanTypeConverter();1385412762;Obtain a bean type converter from the BeanFactory that this bean_runs in. This is typically a fresh instance for each call,_since TypeConverters are usually <i>not</i> thread-safe._<p>Falls back to a SimpleTypeConverter when not running in a BeanFactory._@see ConfigurableBeanFactory#getTypeConverter()_@see org.springframework.beans.SimpleTypeConverter;protected TypeConverter getBeanTypeConverter() {_		BeanFactory beanFactory = getBeanFactory()__		if (beanFactory instanceof ConfigurableBeanFactory) {_			return ((ConfigurableBeanFactory) beanFactory).getTypeConverter()__		}_		else {_			return new SimpleTypeConverter()__		}_	};obtain,a,bean,type,converter,from,the,bean,factory,that,this,bean,runs,in,this,is,typically,a,fresh,instance,for,each,call,since,type,converters,are,usually,i,not,i,thread,safe,p,falls,back,to,a,simple,type,converter,when,not,running,in,a,bean,factory,see,configurable,bean,factory,get,type,converter,see,org,springframework,beans,simple,type,converter;protected,type,converter,get,bean,type,converter,bean,factory,bean,factory,get,bean,factory,if,bean,factory,instanceof,configurable,bean,factory,return,configurable,bean,factory,bean,factory,get,type,converter,else,return,new,simple,type,converter
AbstractFactoryBean -> protected TypeConverter getBeanTypeConverter();1467983536;Obtain a bean type converter from the BeanFactory that this bean_runs in. This is typically a fresh instance for each call,_since TypeConverters are usually <i>not</i> thread-safe._<p>Falls back to a SimpleTypeConverter when not running in a BeanFactory._@see ConfigurableBeanFactory#getTypeConverter()_@see org.springframework.beans.SimpleTypeConverter;protected TypeConverter getBeanTypeConverter() {_		BeanFactory beanFactory = getBeanFactory()__		if (beanFactory instanceof ConfigurableBeanFactory) {_			return ((ConfigurableBeanFactory) beanFactory).getTypeConverter()__		}_		else {_			return new SimpleTypeConverter()__		}_	};obtain,a,bean,type,converter,from,the,bean,factory,that,this,bean,runs,in,this,is,typically,a,fresh,instance,for,each,call,since,type,converters,are,usually,i,not,i,thread,safe,p,falls,back,to,a,simple,type,converter,when,not,running,in,a,bean,factory,see,configurable,bean,factory,get,type,converter,see,org,springframework,beans,simple,type,converter;protected,type,converter,get,bean,type,converter,bean,factory,bean,factory,get,bean,factory,if,bean,factory,instanceof,configurable,bean,factory,return,configurable,bean,factory,bean,factory,get,type,converter,else,return,new,simple,type,converter
AbstractFactoryBean -> protected TypeConverter getBeanTypeConverter();1495868221;Obtain a bean type converter from the BeanFactory that this bean_runs in. This is typically a fresh instance for each call,_since TypeConverters are usually <i>not</i> thread-safe._<p>Falls back to a SimpleTypeConverter when not running in a BeanFactory._@see ConfigurableBeanFactory#getTypeConverter()_@see org.springframework.beans.SimpleTypeConverter;protected TypeConverter getBeanTypeConverter() {_		BeanFactory beanFactory = getBeanFactory()__		if (beanFactory instanceof ConfigurableBeanFactory) {_			return ((ConfigurableBeanFactory) beanFactory).getTypeConverter()__		}_		else {_			return new SimpleTypeConverter()__		}_	};obtain,a,bean,type,converter,from,the,bean,factory,that,this,bean,runs,in,this,is,typically,a,fresh,instance,for,each,call,since,type,converters,are,usually,i,not,i,thread,safe,p,falls,back,to,a,simple,type,converter,when,not,running,in,a,bean,factory,see,configurable,bean,factory,get,type,converter,see,org,springframework,beans,simple,type,converter;protected,type,converter,get,bean,type,converter,bean,factory,bean,factory,get,bean,factory,if,bean,factory,instanceof,configurable,bean,factory,return,configurable,bean,factory,bean,factory,get,type,converter,else,return,new,simple,type,converter
AbstractFactoryBean -> protected TypeConverter getBeanTypeConverter();1496242568;Obtain a bean type converter from the BeanFactory that this bean_runs in. This is typically a fresh instance for each call,_since TypeConverters are usually <i>not</i> thread-safe._<p>Falls back to a SimpleTypeConverter when not running in a BeanFactory._@see ConfigurableBeanFactory#getTypeConverter()_@see org.springframework.beans.SimpleTypeConverter;protected TypeConverter getBeanTypeConverter() {_		BeanFactory beanFactory = getBeanFactory()__		if (beanFactory instanceof ConfigurableBeanFactory) {_			return ((ConfigurableBeanFactory) beanFactory).getTypeConverter()__		}_		else {_			return new SimpleTypeConverter()__		}_	};obtain,a,bean,type,converter,from,the,bean,factory,that,this,bean,runs,in,this,is,typically,a,fresh,instance,for,each,call,since,type,converters,are,usually,i,not,i,thread,safe,p,falls,back,to,a,simple,type,converter,when,not,running,in,a,bean,factory,see,configurable,bean,factory,get,type,converter,see,org,springframework,beans,simple,type,converter;protected,type,converter,get,bean,type,converter,bean,factory,bean,factory,get,bean,factory,if,bean,factory,instanceof,configurable,bean,factory,return,configurable,bean,factory,bean,factory,get,type,converter,else,return,new,simple,type,converter
AbstractFactoryBean -> protected TypeConverter getBeanTypeConverter();1496837955;Obtain a bean type converter from the BeanFactory that this bean_runs in. This is typically a fresh instance for each call,_since TypeConverters are usually <i>not</i> thread-safe._<p>Falls back to a SimpleTypeConverter when not running in a BeanFactory._@see ConfigurableBeanFactory#getTypeConverter()_@see org.springframework.beans.SimpleTypeConverter;protected TypeConverter getBeanTypeConverter() {_		BeanFactory beanFactory = getBeanFactory()__		if (beanFactory instanceof ConfigurableBeanFactory) {_			return ((ConfigurableBeanFactory) beanFactory).getTypeConverter()__		}_		else {_			return new SimpleTypeConverter()__		}_	};obtain,a,bean,type,converter,from,the,bean,factory,that,this,bean,runs,in,this,is,typically,a,fresh,instance,for,each,call,since,type,converters,are,usually,i,not,i,thread,safe,p,falls,back,to,a,simple,type,converter,when,not,running,in,a,bean,factory,see,configurable,bean,factory,get,type,converter,see,org,springframework,beans,simple,type,converter;protected,type,converter,get,bean,type,converter,bean,factory,bean,factory,get,bean,factory,if,bean,factory,instanceof,configurable,bean,factory,return,configurable,bean,factory,bean,factory,get,type,converter,else,return,new,simple,type,converter
AbstractFactoryBean -> protected TypeConverter getBeanTypeConverter();1498780456;Obtain a bean type converter from the BeanFactory that this bean_runs in. This is typically a fresh instance for each call,_since TypeConverters are usually <i>not</i> thread-safe._<p>Falls back to a SimpleTypeConverter when not running in a BeanFactory._@see ConfigurableBeanFactory#getTypeConverter()_@see org.springframework.beans.SimpleTypeConverter;protected TypeConverter getBeanTypeConverter() {_		BeanFactory beanFactory = getBeanFactory()__		if (beanFactory instanceof ConfigurableBeanFactory) {_			return ((ConfigurableBeanFactory) beanFactory).getTypeConverter()__		}_		else {_			return new SimpleTypeConverter()__		}_	};obtain,a,bean,type,converter,from,the,bean,factory,that,this,bean,runs,in,this,is,typically,a,fresh,instance,for,each,call,since,type,converters,are,usually,i,not,i,thread,safe,p,falls,back,to,a,simple,type,converter,when,not,running,in,a,bean,factory,see,configurable,bean,factory,get,type,converter,see,org,springframework,beans,simple,type,converter;protected,type,converter,get,bean,type,converter,bean,factory,bean,factory,get,bean,factory,if,bean,factory,instanceof,configurable,bean,factory,return,configurable,bean,factory,bean,factory,get,type,converter,else,return,new,simple,type,converter
AbstractFactoryBean -> protected TypeConverter getBeanTypeConverter();1500448076;Obtain a bean type converter from the BeanFactory that this bean_runs in. This is typically a fresh instance for each call,_since TypeConverters are usually <i>not</i> thread-safe._<p>Falls back to a SimpleTypeConverter when not running in a BeanFactory._@see ConfigurableBeanFactory#getTypeConverter()_@see org.springframework.beans.SimpleTypeConverter;protected TypeConverter getBeanTypeConverter() {_		BeanFactory beanFactory = getBeanFactory()__		if (beanFactory instanceof ConfigurableBeanFactory) {_			return ((ConfigurableBeanFactory) beanFactory).getTypeConverter()__		}_		else {_			return new SimpleTypeConverter()__		}_	};obtain,a,bean,type,converter,from,the,bean,factory,that,this,bean,runs,in,this,is,typically,a,fresh,instance,for,each,call,since,type,converters,are,usually,i,not,i,thread,safe,p,falls,back,to,a,simple,type,converter,when,not,running,in,a,bean,factory,see,configurable,bean,factory,get,type,converter,see,org,springframework,beans,simple,type,converter;protected,type,converter,get,bean,type,converter,bean,factory,bean,factory,get,bean,factory,if,bean,factory,instanceof,configurable,bean,factory,return,configurable,bean,factory,bean,factory,get,type,converter,else,return,new,simple,type,converter
AbstractFactoryBean -> protected TypeConverter getBeanTypeConverter();1502974979;Obtain a bean type converter from the BeanFactory that this bean_runs in. This is typically a fresh instance for each call,_since TypeConverters are usually <i>not</i> thread-safe._<p>Falls back to a SimpleTypeConverter when not running in a BeanFactory._@see ConfigurableBeanFactory#getTypeConverter()_@see org.springframework.beans.SimpleTypeConverter;protected TypeConverter getBeanTypeConverter() {_		BeanFactory beanFactory = getBeanFactory()__		if (beanFactory instanceof ConfigurableBeanFactory) {_			return ((ConfigurableBeanFactory) beanFactory).getTypeConverter()__		}_		else {_			return new SimpleTypeConverter()__		}_	};obtain,a,bean,type,converter,from,the,bean,factory,that,this,bean,runs,in,this,is,typically,a,fresh,instance,for,each,call,since,type,converters,are,usually,i,not,i,thread,safe,p,falls,back,to,a,simple,type,converter,when,not,running,in,a,bean,factory,see,configurable,bean,factory,get,type,converter,see,org,springframework,beans,simple,type,converter;protected,type,converter,get,bean,type,converter,bean,factory,bean,factory,get,bean,factory,if,bean,factory,instanceof,configurable,bean,factory,return,configurable,bean,factory,bean,factory,get,type,converter,else,return,new,simple,type,converter
AbstractFactoryBean -> protected TypeConverter getBeanTypeConverter();1528737477;Obtain a bean type converter from the BeanFactory that this bean_runs in. This is typically a fresh instance for each call,_since TypeConverters are usually <i>not</i> thread-safe._<p>Falls back to a SimpleTypeConverter when not running in a BeanFactory._@see ConfigurableBeanFactory#getTypeConverter()_@see org.springframework.beans.SimpleTypeConverter;protected TypeConverter getBeanTypeConverter() {_		BeanFactory beanFactory = getBeanFactory()__		if (beanFactory instanceof ConfigurableBeanFactory) {_			return ((ConfigurableBeanFactory) beanFactory).getTypeConverter()__		}_		else {_			return new SimpleTypeConverter()__		}_	};obtain,a,bean,type,converter,from,the,bean,factory,that,this,bean,runs,in,this,is,typically,a,fresh,instance,for,each,call,since,type,converters,are,usually,i,not,i,thread,safe,p,falls,back,to,a,simple,type,converter,when,not,running,in,a,bean,factory,see,configurable,bean,factory,get,type,converter,see,org,springframework,beans,simple,type,converter;protected,type,converter,get,bean,type,converter,bean,factory,bean,factory,get,bean,factory,if,bean,factory,instanceof,configurable,bean,factory,return,configurable,bean,factory,bean,factory,get,type,converter,else,return,new,simple,type,converter
AbstractFactoryBean -> protected TypeConverter getBeanTypeConverter();1530174524;Obtain a bean type converter from the BeanFactory that this bean_runs in. This is typically a fresh instance for each call,_since TypeConverters are usually <i>not</i> thread-safe._<p>Falls back to a SimpleTypeConverter when not running in a BeanFactory._@see ConfigurableBeanFactory#getTypeConverter()_@see org.springframework.beans.SimpleTypeConverter;protected TypeConverter getBeanTypeConverter() {_		BeanFactory beanFactory = getBeanFactory()__		if (beanFactory instanceof ConfigurableBeanFactory) {_			return ((ConfigurableBeanFactory) beanFactory).getTypeConverter()__		}_		else {_			return new SimpleTypeConverter()__		}_	};obtain,a,bean,type,converter,from,the,bean,factory,that,this,bean,runs,in,this,is,typically,a,fresh,instance,for,each,call,since,type,converters,are,usually,i,not,i,thread,safe,p,falls,back,to,a,simple,type,converter,when,not,running,in,a,bean,factory,see,configurable,bean,factory,get,type,converter,see,org,springframework,beans,simple,type,converter;protected,type,converter,get,bean,type,converter,bean,factory,bean,factory,get,bean,factory,if,bean,factory,instanceof,configurable,bean,factory,return,configurable,bean,factory,bean,factory,get,type,converter,else,return,new,simple,type,converter
AbstractFactoryBean -> protected TypeConverter getBeanTypeConverter();1532605718;Obtain a bean type converter from the BeanFactory that this bean_runs in. This is typically a fresh instance for each call,_since TypeConverters are usually <i>not</i> thread-safe._<p>Falls back to a SimpleTypeConverter when not running in a BeanFactory._@see ConfigurableBeanFactory#getTypeConverter()_@see org.springframework.beans.SimpleTypeConverter;protected TypeConverter getBeanTypeConverter() {_		BeanFactory beanFactory = getBeanFactory()__		if (beanFactory instanceof ConfigurableBeanFactory) {_			return ((ConfigurableBeanFactory) beanFactory).getTypeConverter()__		}_		else {_			return new SimpleTypeConverter()__		}_	};obtain,a,bean,type,converter,from,the,bean,factory,that,this,bean,runs,in,this,is,typically,a,fresh,instance,for,each,call,since,type,converters,are,usually,i,not,i,thread,safe,p,falls,back,to,a,simple,type,converter,when,not,running,in,a,bean,factory,see,configurable,bean,factory,get,type,converter,see,org,springframework,beans,simple,type,converter;protected,type,converter,get,bean,type,converter,bean,factory,bean,factory,get,bean,factory,if,bean,factory,instanceof,configurable,bean,factory,return,configurable,bean,factory,bean,factory,get,type,converter,else,return,new,simple,type,converter
AbstractFactoryBean -> public void afterPropertiesSet() throws Exception;1328020251;Eagerly create the singleton instance, if necessary.;public void afterPropertiesSet() throws Exception {_		if (isSingleton()) {_			this.initialized = true__			this.singletonInstance = createInstance()__			this.earlySingletonInstance = null__		}_	};eagerly,create,the,singleton,instance,if,necessary;public,void,after,properties,set,throws,exception,if,is,singleton,this,initialized,true,this,singleton,instance,create,instance,this,early,singleton,instance,null
AbstractFactoryBean -> public void afterPropertiesSet() throws Exception;1357119239;Eagerly create the singleton instance, if necessary.;public void afterPropertiesSet() throws Exception {_		if (isSingleton()) {_			this.initialized = true__			this.singletonInstance = createInstance()__			this.earlySingletonInstance = null__		}_	};eagerly,create,the,singleton,instance,if,necessary;public,void,after,properties,set,throws,exception,if,is,singleton,this,initialized,true,this,singleton,instance,create,instance,this,early,singleton,instance,null
AbstractFactoryBean -> @Override 	public void destroy() throws Exception;1356735495;Destroy the singleton instance, if any._@see #destroyInstance(Object);@Override_	public void destroy() throws Exception {_		if (isSingleton()) {_			destroyInstance(this.singletonInstance)__		}_	};destroy,the,singleton,instance,if,any,see,destroy,instance,object;override,public,void,destroy,throws,exception,if,is,singleton,destroy,instance,this,singleton,instance
AbstractFactoryBean -> @Override 	public void destroy() throws Exception;1368482696;Destroy the singleton instance, if any._@see #destroyInstance(Object);@Override_	public void destroy() throws Exception {_		if (isSingleton()) {_			destroyInstance(this.singletonInstance)__		}_	};destroy,the,singleton,instance,if,any,see,destroy,instance,object;override,public,void,destroy,throws,exception,if,is,singleton,destroy,instance,this,singleton,instance
AbstractFactoryBean -> @Override 	public void destroy() throws Exception;1385412762;Destroy the singleton instance, if any._@see #destroyInstance(Object);@Override_	public void destroy() throws Exception {_		if (isSingleton()) {_			destroyInstance(this.singletonInstance)__		}_	};destroy,the,singleton,instance,if,any,see,destroy,instance,object;override,public,void,destroy,throws,exception,if,is,singleton,destroy,instance,this,singleton,instance
AbstractFactoryBean -> @Override 	public void destroy() throws Exception;1467983536;Destroy the singleton instance, if any._@see #destroyInstance(Object);@Override_	public void destroy() throws Exception {_		if (isSingleton()) {_			destroyInstance(this.singletonInstance)__		}_	};destroy,the,singleton,instance,if,any,see,destroy,instance,object;override,public,void,destroy,throws,exception,if,is,singleton,destroy,instance,this,singleton,instance
AbstractFactoryBean -> @Override 	public void destroy() throws Exception;1495868221;Destroy the singleton instance, if any._@see #destroyInstance(Object);@Override_	public void destroy() throws Exception {_		if (isSingleton()) {_			destroyInstance(this.singletonInstance)__		}_	};destroy,the,singleton,instance,if,any,see,destroy,instance,object;override,public,void,destroy,throws,exception,if,is,singleton,destroy,instance,this,singleton,instance
AbstractFactoryBean -> @Override 	public void destroy() throws Exception;1496242568;Destroy the singleton instance, if any._@see #destroyInstance(Object);@Override_	public void destroy() throws Exception {_		if (isSingleton()) {_			destroyInstance(this.singletonInstance)__		}_	};destroy,the,singleton,instance,if,any,see,destroy,instance,object;override,public,void,destroy,throws,exception,if,is,singleton,destroy,instance,this,singleton,instance
AbstractFactoryBean -> @Override 	public void destroy() throws Exception;1496837955;Destroy the singleton instance, if any._@see #destroyInstance(Object);@Override_	public void destroy() throws Exception {_		if (isSingleton()) {_			destroyInstance(this.singletonInstance)__		}_	};destroy,the,singleton,instance,if,any,see,destroy,instance,object;override,public,void,destroy,throws,exception,if,is,singleton,destroy,instance,this,singleton,instance
AbstractFactoryBean -> @Override 	public void destroy() throws Exception;1498780456;Destroy the singleton instance, if any._@see #destroyInstance(Object);@Override_	public void destroy() throws Exception {_		if (isSingleton()) {_			destroyInstance(this.singletonInstance)__		}_	};destroy,the,singleton,instance,if,any,see,destroy,instance,object;override,public,void,destroy,throws,exception,if,is,singleton,destroy,instance,this,singleton,instance
AbstractFactoryBean -> @Override 	public void destroy() throws Exception;1500448076;Destroy the singleton instance, if any._@see #destroyInstance(Object);@Override_	public void destroy() throws Exception {_		if (isSingleton()) {_			destroyInstance(this.singletonInstance)__		}_	};destroy,the,singleton,instance,if,any,see,destroy,instance,object;override,public,void,destroy,throws,exception,if,is,singleton,destroy,instance,this,singleton,instance
AbstractFactoryBean -> @Override 	public void destroy() throws Exception;1502974979;Destroy the singleton instance, if any._@see #destroyInstance(Object);@Override_	public void destroy() throws Exception {_		if (isSingleton()) {_			destroyInstance(this.singletonInstance)__		}_	};destroy,the,singleton,instance,if,any,see,destroy,instance,object;override,public,void,destroy,throws,exception,if,is,singleton,destroy,instance,this,singleton,instance
AbstractFactoryBean -> @Override 	public void destroy() throws Exception;1528737477;Destroy the singleton instance, if any._@see #destroyInstance(Object);@Override_	public void destroy() throws Exception {_		if (isSingleton()) {_			destroyInstance(this.singletonInstance)__		}_	};destroy,the,singleton,instance,if,any,see,destroy,instance,object;override,public,void,destroy,throws,exception,if,is,singleton,destroy,instance,this,singleton,instance
AbstractFactoryBean -> @Override 	public void destroy() throws Exception;1530174524;Destroy the singleton instance, if any._@see #destroyInstance(Object);@Override_	public void destroy() throws Exception {_		if (isSingleton()) {_			destroyInstance(this.singletonInstance)__		}_	};destroy,the,singleton,instance,if,any,see,destroy,instance,object;override,public,void,destroy,throws,exception,if,is,singleton,destroy,instance,this,singleton,instance
AbstractFactoryBean -> @Override 	public void destroy() throws Exception;1532605718;Destroy the singleton instance, if any._@see #destroyInstance(Object);@Override_	public void destroy() throws Exception {_		if (isSingleton()) {_			destroyInstance(this.singletonInstance)__		}_	};destroy,the,singleton,instance,if,any,see,destroy,instance,object;override,public,void,destroy,throws,exception,if,is,singleton,destroy,instance,this,singleton,instance
AbstractFactoryBean -> protected void destroyInstance(@Nullable T instance) throws Exception;1498780456;Callback for destroying a singleton instance. Subclasses may_override this to destroy the previously created instance._<p>The default implementation is empty._@param instance the singleton instance, as returned by_{@link #createInstance()}_@throws Exception in case of shutdown errors_@see #createInstance();protected void destroyInstance(@Nullable T instance) throws Exception {_	};callback,for,destroying,a,singleton,instance,subclasses,may,override,this,to,destroy,the,previously,created,instance,p,the,default,implementation,is,empty,param,instance,the,singleton,instance,as,returned,by,link,create,instance,throws,exception,in,case,of,shutdown,errors,see,create,instance;protected,void,destroy,instance,nullable,t,instance,throws,exception
AbstractFactoryBean -> protected void destroyInstance(@Nullable T instance) throws Exception;1500448076;Callback for destroying a singleton instance. Subclasses may_override this to destroy the previously created instance._<p>The default implementation is empty._@param instance the singleton instance, as returned by_{@link #createInstance()}_@throws Exception in case of shutdown errors_@see #createInstance();protected void destroyInstance(@Nullable T instance) throws Exception {_	};callback,for,destroying,a,singleton,instance,subclasses,may,override,this,to,destroy,the,previously,created,instance,p,the,default,implementation,is,empty,param,instance,the,singleton,instance,as,returned,by,link,create,instance,throws,exception,in,case,of,shutdown,errors,see,create,instance;protected,void,destroy,instance,nullable,t,instance,throws,exception
AbstractFactoryBean -> protected void destroyInstance(@Nullable T instance) throws Exception;1502974979;Callback for destroying a singleton instance. Subclasses may_override this to destroy the previously created instance._<p>The default implementation is empty._@param instance the singleton instance, as returned by_{@link #createInstance()}_@throws Exception in case of shutdown errors_@see #createInstance();protected void destroyInstance(@Nullable T instance) throws Exception {_	};callback,for,destroying,a,singleton,instance,subclasses,may,override,this,to,destroy,the,previously,created,instance,p,the,default,implementation,is,empty,param,instance,the,singleton,instance,as,returned,by,link,create,instance,throws,exception,in,case,of,shutdown,errors,see,create,instance;protected,void,destroy,instance,nullable,t,instance,throws,exception
AbstractFactoryBean -> protected void destroyInstance(@Nullable T instance) throws Exception;1528737477;Callback for destroying a singleton instance. Subclasses may_override this to destroy the previously created instance._<p>The default implementation is empty._@param instance the singleton instance, as returned by_{@link #createInstance()}_@throws Exception in case of shutdown errors_@see #createInstance();protected void destroyInstance(@Nullable T instance) throws Exception {_	};callback,for,destroying,a,singleton,instance,subclasses,may,override,this,to,destroy,the,previously,created,instance,p,the,default,implementation,is,empty,param,instance,the,singleton,instance,as,returned,by,link,create,instance,throws,exception,in,case,of,shutdown,errors,see,create,instance;protected,void,destroy,instance,nullable,t,instance,throws,exception
AbstractFactoryBean -> protected void destroyInstance(@Nullable T instance) throws Exception;1530174524;Callback for destroying a singleton instance. Subclasses may_override this to destroy the previously created instance._<p>The default implementation is empty._@param instance the singleton instance, as returned by_{@link #createInstance()}_@throws Exception in case of shutdown errors_@see #createInstance();protected void destroyInstance(@Nullable T instance) throws Exception {_	};callback,for,destroying,a,singleton,instance,subclasses,may,override,this,to,destroy,the,previously,created,instance,p,the,default,implementation,is,empty,param,instance,the,singleton,instance,as,returned,by,link,create,instance,throws,exception,in,case,of,shutdown,errors,see,create,instance;protected,void,destroy,instance,nullable,t,instance,throws,exception
AbstractFactoryBean -> protected void destroyInstance(@Nullable T instance) throws Exception;1532605718;Callback for destroying a singleton instance. Subclasses may_override this to destroy the previously created instance._<p>The default implementation is empty._@param instance the singleton instance, as returned by_{@link #createInstance()}_@throws Exception in case of shutdown errors_@see #createInstance();protected void destroyInstance(@Nullable T instance) throws Exception {_	};callback,for,destroying,a,singleton,instance,subclasses,may,override,this,to,destroy,the,previously,created,instance,p,the,default,implementation,is,empty,param,instance,the,singleton,instance,as,returned,by,link,create,instance,throws,exception,in,case,of,shutdown,errors,see,create,instance;protected,void,destroy,instance,nullable,t,instance,throws,exception
AbstractFactoryBean -> @Override 	public void afterPropertiesSet() throws Exception;1356735495;Eagerly create the singleton instance, if necessary.;@Override_	public void afterPropertiesSet() throws Exception {_		if (isSingleton()) {_			this.initialized = true__			this.singletonInstance = createInstance()__			this.earlySingletonInstance = null__		}_	};eagerly,create,the,singleton,instance,if,necessary;override,public,void,after,properties,set,throws,exception,if,is,singleton,this,initialized,true,this,singleton,instance,create,instance,this,early,singleton,instance,null
AbstractFactoryBean -> @Override 	public void afterPropertiesSet() throws Exception;1368482696;Eagerly create the singleton instance, if necessary.;@Override_	public void afterPropertiesSet() throws Exception {_		if (isSingleton()) {_			this.initialized = true__			this.singletonInstance = createInstance()__			this.earlySingletonInstance = null__		}_	};eagerly,create,the,singleton,instance,if,necessary;override,public,void,after,properties,set,throws,exception,if,is,singleton,this,initialized,true,this,singleton,instance,create,instance,this,early,singleton,instance,null
AbstractFactoryBean -> @Override 	public void afterPropertiesSet() throws Exception;1385412762;Eagerly create the singleton instance, if necessary.;@Override_	public void afterPropertiesSet() throws Exception {_		if (isSingleton()) {_			this.initialized = true__			this.singletonInstance = createInstance()__			this.earlySingletonInstance = null__		}_	};eagerly,create,the,singleton,instance,if,necessary;override,public,void,after,properties,set,throws,exception,if,is,singleton,this,initialized,true,this,singleton,instance,create,instance,this,early,singleton,instance,null
AbstractFactoryBean -> @Override 	public void afterPropertiesSet() throws Exception;1467983536;Eagerly create the singleton instance, if necessary.;@Override_	public void afterPropertiesSet() throws Exception {_		if (isSingleton()) {_			this.initialized = true__			this.singletonInstance = createInstance()__			this.earlySingletonInstance = null__		}_	};eagerly,create,the,singleton,instance,if,necessary;override,public,void,after,properties,set,throws,exception,if,is,singleton,this,initialized,true,this,singleton,instance,create,instance,this,early,singleton,instance,null
AbstractFactoryBean -> @Override 	public void afterPropertiesSet() throws Exception;1495868221;Eagerly create the singleton instance, if necessary.;@Override_	public void afterPropertiesSet() throws Exception {_		if (isSingleton()) {_			this.initialized = true__			this.singletonInstance = createInstance()__			this.earlySingletonInstance = null__		}_	};eagerly,create,the,singleton,instance,if,necessary;override,public,void,after,properties,set,throws,exception,if,is,singleton,this,initialized,true,this,singleton,instance,create,instance,this,early,singleton,instance,null
AbstractFactoryBean -> @Override 	public void afterPropertiesSet() throws Exception;1496242568;Eagerly create the singleton instance, if necessary.;@Override_	public void afterPropertiesSet() throws Exception {_		if (isSingleton()) {_			this.initialized = true__			this.singletonInstance = createInstance()__			this.earlySingletonInstance = null__		}_	};eagerly,create,the,singleton,instance,if,necessary;override,public,void,after,properties,set,throws,exception,if,is,singleton,this,initialized,true,this,singleton,instance,create,instance,this,early,singleton,instance,null
AbstractFactoryBean -> @Override 	public void afterPropertiesSet() throws Exception;1496837955;Eagerly create the singleton instance, if necessary.;@Override_	public void afterPropertiesSet() throws Exception {_		if (isSingleton()) {_			this.initialized = true__			this.singletonInstance = createInstance()__			this.earlySingletonInstance = null__		}_	};eagerly,create,the,singleton,instance,if,necessary;override,public,void,after,properties,set,throws,exception,if,is,singleton,this,initialized,true,this,singleton,instance,create,instance,this,early,singleton,instance,null
AbstractFactoryBean -> @Override 	public void afterPropertiesSet() throws Exception;1498780456;Eagerly create the singleton instance, if necessary.;@Override_	public void afterPropertiesSet() throws Exception {_		if (isSingleton()) {_			this.initialized = true__			this.singletonInstance = createInstance()__			this.earlySingletonInstance = null__		}_	};eagerly,create,the,singleton,instance,if,necessary;override,public,void,after,properties,set,throws,exception,if,is,singleton,this,initialized,true,this,singleton,instance,create,instance,this,early,singleton,instance,null
AbstractFactoryBean -> @Override 	public void afterPropertiesSet() throws Exception;1500448076;Eagerly create the singleton instance, if necessary.;@Override_	public void afterPropertiesSet() throws Exception {_		if (isSingleton()) {_			this.initialized = true__			this.singletonInstance = createInstance()__			this.earlySingletonInstance = null__		}_	};eagerly,create,the,singleton,instance,if,necessary;override,public,void,after,properties,set,throws,exception,if,is,singleton,this,initialized,true,this,singleton,instance,create,instance,this,early,singleton,instance,null
AbstractFactoryBean -> @Override 	public void afterPropertiesSet() throws Exception;1502974979;Eagerly create the singleton instance, if necessary.;@Override_	public void afterPropertiesSet() throws Exception {_		if (isSingleton()) {_			this.initialized = true__			this.singletonInstance = createInstance()__			this.earlySingletonInstance = null__		}_	};eagerly,create,the,singleton,instance,if,necessary;override,public,void,after,properties,set,throws,exception,if,is,singleton,this,initialized,true,this,singleton,instance,create,instance,this,early,singleton,instance,null
AbstractFactoryBean -> @Override 	public void afterPropertiesSet() throws Exception;1528737477;Eagerly create the singleton instance, if necessary.;@Override_	public void afterPropertiesSet() throws Exception {_		if (isSingleton()) {_			this.initialized = true__			this.singletonInstance = createInstance()__			this.earlySingletonInstance = null__		}_	};eagerly,create,the,singleton,instance,if,necessary;override,public,void,after,properties,set,throws,exception,if,is,singleton,this,initialized,true,this,singleton,instance,create,instance,this,early,singleton,instance,null
AbstractFactoryBean -> @Override 	public void afterPropertiesSet() throws Exception;1530174524;Eagerly create the singleton instance, if necessary.;@Override_	public void afterPropertiesSet() throws Exception {_		if (isSingleton()) {_			this.initialized = true__			this.singletonInstance = createInstance()__			this.earlySingletonInstance = null__		}_	};eagerly,create,the,singleton,instance,if,necessary;override,public,void,after,properties,set,throws,exception,if,is,singleton,this,initialized,true,this,singleton,instance,create,instance,this,early,singleton,instance,null
AbstractFactoryBean -> @Override 	public void afterPropertiesSet() throws Exception;1532605718;Eagerly create the singleton instance, if necessary.;@Override_	public void afterPropertiesSet() throws Exception {_		if (isSingleton()) {_			this.initialized = true__			this.singletonInstance = createInstance()__			this.earlySingletonInstance = null__		}_	};eagerly,create,the,singleton,instance,if,necessary;override,public,void,after,properties,set,throws,exception,if,is,singleton,this,initialized,true,this,singleton,instance,create,instance,this,early,singleton,instance,null
AbstractFactoryBean -> @Nullable 	private T getSingletonInstance() throws IllegalStateException;1498780456;Expose the singleton instance (for access through the 'early singleton' proxy)._@return the singleton instance that this FactoryBean holds_@throws IllegalStateException if the singleton instance is not initialized;@Nullable_	private T getSingletonInstance() throws IllegalStateException {_		Assert.state(this.initialized, "Singleton instance not initialized yet")__		return this.singletonInstance__	};expose,the,singleton,instance,for,access,through,the,early,singleton,proxy,return,the,singleton,instance,that,this,factory,bean,holds,throws,illegal,state,exception,if,the,singleton,instance,is,not,initialized;nullable,private,t,get,singleton,instance,throws,illegal,state,exception,assert,state,this,initialized,singleton,instance,not,initialized,yet,return,this,singleton,instance
AbstractFactoryBean -> @Nullable 	private T getSingletonInstance() throws IllegalStateException;1500448076;Expose the singleton instance (for access through the 'early singleton' proxy)._@return the singleton instance that this FactoryBean holds_@throws IllegalStateException if the singleton instance is not initialized;@Nullable_	private T getSingletonInstance() throws IllegalStateException {_		Assert.state(this.initialized, "Singleton instance not initialized yet")__		return this.singletonInstance__	};expose,the,singleton,instance,for,access,through,the,early,singleton,proxy,return,the,singleton,instance,that,this,factory,bean,holds,throws,illegal,state,exception,if,the,singleton,instance,is,not,initialized;nullable,private,t,get,singleton,instance,throws,illegal,state,exception,assert,state,this,initialized,singleton,instance,not,initialized,yet,return,this,singleton,instance
AbstractFactoryBean -> @Nullable 	private T getSingletonInstance() throws IllegalStateException;1502974979;Expose the singleton instance (for access through the 'early singleton' proxy)._@return the singleton instance that this FactoryBean holds_@throws IllegalStateException if the singleton instance is not initialized;@Nullable_	private T getSingletonInstance() throws IllegalStateException {_		Assert.state(this.initialized, "Singleton instance not initialized yet")__		return this.singletonInstance__	};expose,the,singleton,instance,for,access,through,the,early,singleton,proxy,return,the,singleton,instance,that,this,factory,bean,holds,throws,illegal,state,exception,if,the,singleton,instance,is,not,initialized;nullable,private,t,get,singleton,instance,throws,illegal,state,exception,assert,state,this,initialized,singleton,instance,not,initialized,yet,return,this,singleton,instance
AbstractFactoryBean -> @Nullable 	private T getSingletonInstance() throws IllegalStateException;1528737477;Expose the singleton instance (for access through the 'early singleton' proxy)._@return the singleton instance that this FactoryBean holds_@throws IllegalStateException if the singleton instance is not initialized;@Nullable_	private T getSingletonInstance() throws IllegalStateException {_		Assert.state(this.initialized, "Singleton instance not initialized yet")__		return this.singletonInstance__	};expose,the,singleton,instance,for,access,through,the,early,singleton,proxy,return,the,singleton,instance,that,this,factory,bean,holds,throws,illegal,state,exception,if,the,singleton,instance,is,not,initialized;nullable,private,t,get,singleton,instance,throws,illegal,state,exception,assert,state,this,initialized,singleton,instance,not,initialized,yet,return,this,singleton,instance
AbstractFactoryBean -> @Nullable 	private T getSingletonInstance() throws IllegalStateException;1530174524;Expose the singleton instance (for access through the 'early singleton' proxy)._@return the singleton instance that this FactoryBean holds_@throws IllegalStateException if the singleton instance is not initialized;@Nullable_	private T getSingletonInstance() throws IllegalStateException {_		Assert.state(this.initialized, "Singleton instance not initialized yet")__		return this.singletonInstance__	};expose,the,singleton,instance,for,access,through,the,early,singleton,proxy,return,the,singleton,instance,that,this,factory,bean,holds,throws,illegal,state,exception,if,the,singleton,instance,is,not,initialized;nullable,private,t,get,singleton,instance,throws,illegal,state,exception,assert,state,this,initialized,singleton,instance,not,initialized,yet,return,this,singleton,instance
AbstractFactoryBean -> @Nullable 	private T getSingletonInstance() throws IllegalStateException;1532605718;Expose the singleton instance (for access through the 'early singleton' proxy)._@return the singleton instance that this FactoryBean holds_@throws IllegalStateException if the singleton instance is not initialized;@Nullable_	private T getSingletonInstance() throws IllegalStateException {_		Assert.state(this.initialized, "Singleton instance not initialized yet")__		return this.singletonInstance__	};expose,the,singleton,instance,for,access,through,the,early,singleton,proxy,return,the,singleton,instance,that,this,factory,bean,holds,throws,illegal,state,exception,if,the,singleton,instance,is,not,initialized;nullable,private,t,get,singleton,instance,throws,illegal,state,exception,assert,state,this,initialized,singleton,instance,not,initialized,yet,return,this,singleton,instance
AbstractFactoryBean -> @Override 	@Nullable 	public abstract Class<?> getObjectType()_;1502974979;This abstract method declaration mirrors the method in the FactoryBean_interface, for a consistent offering of abstract template methods._@see org.springframework.beans.factory.FactoryBean#getObjectType();@Override_	@Nullable_	public abstract Class<?> getObjectType()_;this,abstract,method,declaration,mirrors,the,method,in,the,factory,bean,interface,for,a,consistent,offering,of,abstract,template,methods,see,org,springframework,beans,factory,factory,bean,get,object,type;override,nullable,public,abstract,class,get,object,type
AbstractFactoryBean -> @Override 	@Nullable 	public abstract Class<?> getObjectType()_;1528737477;This abstract method declaration mirrors the method in the FactoryBean_interface, for a consistent offering of abstract template methods._@see org.springframework.beans.factory.FactoryBean#getObjectType();@Override_	@Nullable_	public abstract Class<?> getObjectType()_;this,abstract,method,declaration,mirrors,the,method,in,the,factory,bean,interface,for,a,consistent,offering,of,abstract,template,methods,see,org,springframework,beans,factory,factory,bean,get,object,type;override,nullable,public,abstract,class,get,object,type
AbstractFactoryBean -> @Override 	@Nullable 	public abstract Class<?> getObjectType()_;1530174524;This abstract method declaration mirrors the method in the FactoryBean_interface, for a consistent offering of abstract template methods._@see org.springframework.beans.factory.FactoryBean#getObjectType();@Override_	@Nullable_	public abstract Class<?> getObjectType()_;this,abstract,method,declaration,mirrors,the,method,in,the,factory,bean,interface,for,a,consistent,offering,of,abstract,template,methods,see,org,springframework,beans,factory,factory,bean,get,object,type;override,nullable,public,abstract,class,get,object,type
AbstractFactoryBean -> @Override 	@Nullable 	public abstract Class<?> getObjectType()_;1532605718;This abstract method declaration mirrors the method in the FactoryBean_interface, for a consistent offering of abstract template methods._@see org.springframework.beans.factory.FactoryBean#getObjectType();@Override_	@Nullable_	public abstract Class<?> getObjectType()_;this,abstract,method,declaration,mirrors,the,method,in,the,factory,bean,interface,for,a,consistent,offering,of,abstract,template,methods,see,org,springframework,beans,factory,factory,bean,get,object,type;override,nullable,public,abstract,class,get,object,type
AbstractFactoryBean -> protected abstract T createInstance() throws Exception_;1328020251;Template method that subclasses must override to construct_the object returned by this factory._<p>Invoked on initialization of this FactoryBean in case of_a singleton_ else, on each {@link #getObject()} call._@return the object returned by this factory_@throws Exception if an exception occured during object creation_@see #getObject();protected abstract T createInstance() throws Exception_;template,method,that,subclasses,must,override,to,construct,the,object,returned,by,this,factory,p,invoked,on,initialization,of,this,factory,bean,in,case,of,a,singleton,else,on,each,link,get,object,call,return,the,object,returned,by,this,factory,throws,exception,if,an,exception,occured,during,object,creation,see,get,object;protected,abstract,t,create,instance,throws,exception
AbstractFactoryBean -> protected abstract T createInstance() throws Exception_;1356735495;Template method that subclasses must override to construct_the object returned by this factory._<p>Invoked on initialization of this FactoryBean in case of_a singleton_ else, on each {@link #getObject()} call._@return the object returned by this factory_@throws Exception if an exception occured during object creation_@see #getObject();protected abstract T createInstance() throws Exception_;template,method,that,subclasses,must,override,to,construct,the,object,returned,by,this,factory,p,invoked,on,initialization,of,this,factory,bean,in,case,of,a,singleton,else,on,each,link,get,object,call,return,the,object,returned,by,this,factory,throws,exception,if,an,exception,occured,during,object,creation,see,get,object;protected,abstract,t,create,instance,throws,exception
AbstractFactoryBean -> protected abstract T createInstance() throws Exception_;1357119239;Template method that subclasses must override to construct_the object returned by this factory._<p>Invoked on initialization of this FactoryBean in case of_a singleton_ else, on each {@link #getObject()} call._@return the object returned by this factory_@throws Exception if an exception occured during object creation_@see #getObject();protected abstract T createInstance() throws Exception_;template,method,that,subclasses,must,override,to,construct,the,object,returned,by,this,factory,p,invoked,on,initialization,of,this,factory,bean,in,case,of,a,singleton,else,on,each,link,get,object,call,return,the,object,returned,by,this,factory,throws,exception,if,an,exception,occured,during,object,creation,see,get,object;protected,abstract,t,create,instance,throws,exception
AbstractFactoryBean -> protected abstract T createInstance() throws Exception_;1368482696;Template method that subclasses must override to construct_the object returned by this factory._<p>Invoked on initialization of this FactoryBean in case of_a singleton_ else, on each {@link #getObject()} call._@return the object returned by this factory_@throws Exception if an exception occured during object creation_@see #getObject();protected abstract T createInstance() throws Exception_;template,method,that,subclasses,must,override,to,construct,the,object,returned,by,this,factory,p,invoked,on,initialization,of,this,factory,bean,in,case,of,a,singleton,else,on,each,link,get,object,call,return,the,object,returned,by,this,factory,throws,exception,if,an,exception,occured,during,object,creation,see,get,object;protected,abstract,t,create,instance,throws,exception
AbstractFactoryBean -> protected abstract T createInstance() throws Exception_;1385412762;Template method that subclasses must override to construct_the object returned by this factory._<p>Invoked on initialization of this FactoryBean in case of_a singleton_ else, on each {@link #getObject()} call._@return the object returned by this factory_@throws Exception if an exception occured during object creation_@see #getObject();protected abstract T createInstance() throws Exception_;template,method,that,subclasses,must,override,to,construct,the,object,returned,by,this,factory,p,invoked,on,initialization,of,this,factory,bean,in,case,of,a,singleton,else,on,each,link,get,object,call,return,the,object,returned,by,this,factory,throws,exception,if,an,exception,occured,during,object,creation,see,get,object;protected,abstract,t,create,instance,throws,exception
AbstractFactoryBean -> protected abstract T createInstance() throws Exception_;1467983536;Template method that subclasses must override to construct_the object returned by this factory._<p>Invoked on initialization of this FactoryBean in case of_a singleton_ else, on each {@link #getObject()} call._@return the object returned by this factory_@throws Exception if an exception occurred during object creation_@see #getObject();protected abstract T createInstance() throws Exception_;template,method,that,subclasses,must,override,to,construct,the,object,returned,by,this,factory,p,invoked,on,initialization,of,this,factory,bean,in,case,of,a,singleton,else,on,each,link,get,object,call,return,the,object,returned,by,this,factory,throws,exception,if,an,exception,occurred,during,object,creation,see,get,object;protected,abstract,t,create,instance,throws,exception
AbstractFactoryBean -> protected abstract T createInstance() throws Exception_;1495868221;Template method that subclasses must override to construct_the object returned by this factory._<p>Invoked on initialization of this FactoryBean in case of_a singleton_ else, on each {@link #getObject()} call._@return the object returned by this factory_@throws Exception if an exception occurred during object creation_@see #getObject();protected abstract T createInstance() throws Exception_;template,method,that,subclasses,must,override,to,construct,the,object,returned,by,this,factory,p,invoked,on,initialization,of,this,factory,bean,in,case,of,a,singleton,else,on,each,link,get,object,call,return,the,object,returned,by,this,factory,throws,exception,if,an,exception,occurred,during,object,creation,see,get,object;protected,abstract,t,create,instance,throws,exception
AbstractFactoryBean -> protected abstract T createInstance() throws Exception_;1496242568;Template method that subclasses must override to construct_the object returned by this factory._<p>Invoked on initialization of this FactoryBean in case of_a singleton_ else, on each {@link #getObject()} call._@return the object returned by this factory_@throws Exception if an exception occurred during object creation_@see #getObject();protected abstract T createInstance() throws Exception_;template,method,that,subclasses,must,override,to,construct,the,object,returned,by,this,factory,p,invoked,on,initialization,of,this,factory,bean,in,case,of,a,singleton,else,on,each,link,get,object,call,return,the,object,returned,by,this,factory,throws,exception,if,an,exception,occurred,during,object,creation,see,get,object;protected,abstract,t,create,instance,throws,exception
AbstractFactoryBean -> protected abstract T createInstance() throws Exception_;1496837955;Template method that subclasses must override to construct_the object returned by this factory._<p>Invoked on initialization of this FactoryBean in case of_a singleton_ else, on each {@link #getObject()} call._@return the object returned by this factory_@throws Exception if an exception occurred during object creation_@see #getObject();protected abstract T createInstance() throws Exception_;template,method,that,subclasses,must,override,to,construct,the,object,returned,by,this,factory,p,invoked,on,initialization,of,this,factory,bean,in,case,of,a,singleton,else,on,each,link,get,object,call,return,the,object,returned,by,this,factory,throws,exception,if,an,exception,occurred,during,object,creation,see,get,object;protected,abstract,t,create,instance,throws,exception
AbstractFactoryBean -> protected abstract T createInstance() throws Exception_;1498780456;Template method that subclasses must override to construct_the object returned by this factory._<p>Invoked on initialization of this FactoryBean in case of_a singleton_ else, on each {@link #getObject()} call._@return the object returned by this factory_@throws Exception if an exception occurred during object creation_@see #getObject();protected abstract T createInstance() throws Exception_;template,method,that,subclasses,must,override,to,construct,the,object,returned,by,this,factory,p,invoked,on,initialization,of,this,factory,bean,in,case,of,a,singleton,else,on,each,link,get,object,call,return,the,object,returned,by,this,factory,throws,exception,if,an,exception,occurred,during,object,creation,see,get,object;protected,abstract,t,create,instance,throws,exception
AbstractFactoryBean -> protected abstract T createInstance() throws Exception_;1500448076;Template method that subclasses must override to construct_the object returned by this factory._<p>Invoked on initialization of this FactoryBean in case of_a singleton_ else, on each {@link #getObject()} call._@return the object returned by this factory_@throws Exception if an exception occurred during object creation_@see #getObject();protected abstract T createInstance() throws Exception_;template,method,that,subclasses,must,override,to,construct,the,object,returned,by,this,factory,p,invoked,on,initialization,of,this,factory,bean,in,case,of,a,singleton,else,on,each,link,get,object,call,return,the,object,returned,by,this,factory,throws,exception,if,an,exception,occurred,during,object,creation,see,get,object;protected,abstract,t,create,instance,throws,exception
AbstractFactoryBean -> protected abstract T createInstance() throws Exception_;1502974979;Template method that subclasses must override to construct_the object returned by this factory._<p>Invoked on initialization of this FactoryBean in case of_a singleton_ else, on each {@link #getObject()} call._@return the object returned by this factory_@throws Exception if an exception occurred during object creation_@see #getObject();protected abstract T createInstance() throws Exception_;template,method,that,subclasses,must,override,to,construct,the,object,returned,by,this,factory,p,invoked,on,initialization,of,this,factory,bean,in,case,of,a,singleton,else,on,each,link,get,object,call,return,the,object,returned,by,this,factory,throws,exception,if,an,exception,occurred,during,object,creation,see,get,object;protected,abstract,t,create,instance,throws,exception
AbstractFactoryBean -> protected abstract T createInstance() throws Exception_;1528737477;Template method that subclasses must override to construct_the object returned by this factory._<p>Invoked on initialization of this FactoryBean in case of_a singleton_ else, on each {@link #getObject()} call._@return the object returned by this factory_@throws Exception if an exception occurred during object creation_@see #getObject();protected abstract T createInstance() throws Exception_;template,method,that,subclasses,must,override,to,construct,the,object,returned,by,this,factory,p,invoked,on,initialization,of,this,factory,bean,in,case,of,a,singleton,else,on,each,link,get,object,call,return,the,object,returned,by,this,factory,throws,exception,if,an,exception,occurred,during,object,creation,see,get,object;protected,abstract,t,create,instance,throws,exception
AbstractFactoryBean -> protected abstract T createInstance() throws Exception_;1530174524;Template method that subclasses must override to construct_the object returned by this factory._<p>Invoked on initialization of this FactoryBean in case of_a singleton_ else, on each {@link #getObject()} call._@return the object returned by this factory_@throws Exception if an exception occurred during object creation_@see #getObject();protected abstract T createInstance() throws Exception_;template,method,that,subclasses,must,override,to,construct,the,object,returned,by,this,factory,p,invoked,on,initialization,of,this,factory,bean,in,case,of,a,singleton,else,on,each,link,get,object,call,return,the,object,returned,by,this,factory,throws,exception,if,an,exception,occurred,during,object,creation,see,get,object;protected,abstract,t,create,instance,throws,exception
AbstractFactoryBean -> protected abstract T createInstance() throws Exception_;1532605718;Template method that subclasses must override to construct_the object returned by this factory._<p>Invoked on initialization of this FactoryBean in case of_a singleton_ else, on each {@link #getObject()} call._@return the object returned by this factory_@throws Exception if an exception occurred during object creation_@see #getObject();protected abstract T createInstance() throws Exception_;template,method,that,subclasses,must,override,to,construct,the,object,returned,by,this,factory,p,invoked,on,initialization,of,this,factory,bean,in,case,of,a,singleton,else,on,each,link,get,object,call,return,the,object,returned,by,this,factory,throws,exception,if,an,exception,occurred,during,object,creation,see,get,object;protected,abstract,t,create,instance,throws,exception
AbstractFactoryBean -> @Override 	public final T getObject() throws Exception;1356735495;Expose the singleton instance or create a new prototype instance._@see #createInstance()_@see #getEarlySingletonInterfaces();@Override_	public final T getObject() throws Exception {_		if (isSingleton()) {_			return (this.initialized ? this.singletonInstance : getEarlySingletonInstance())__		}_		else {_			return createInstance()__		}_	};expose,the,singleton,instance,or,create,a,new,prototype,instance,see,create,instance,see,get,early,singleton,interfaces;override,public,final,t,get,object,throws,exception,if,is,singleton,return,this,initialized,this,singleton,instance,get,early,singleton,instance,else,return,create,instance
AbstractFactoryBean -> @Override 	public final T getObject() throws Exception;1368482696;Expose the singleton instance or create a new prototype instance._@see #createInstance()_@see #getEarlySingletonInterfaces();@Override_	public final T getObject() throws Exception {_		if (isSingleton()) {_			return (this.initialized ? this.singletonInstance : getEarlySingletonInstance())__		}_		else {_			return createInstance()__		}_	};expose,the,singleton,instance,or,create,a,new,prototype,instance,see,create,instance,see,get,early,singleton,interfaces;override,public,final,t,get,object,throws,exception,if,is,singleton,return,this,initialized,this,singleton,instance,get,early,singleton,instance,else,return,create,instance
AbstractFactoryBean -> @Override 	public final T getObject() throws Exception;1385412762;Expose the singleton instance or create a new prototype instance._@see #createInstance()_@see #getEarlySingletonInterfaces();@Override_	public final T getObject() throws Exception {_		if (isSingleton()) {_			return (this.initialized ? this.singletonInstance : getEarlySingletonInstance())__		}_		else {_			return createInstance()__		}_	};expose,the,singleton,instance,or,create,a,new,prototype,instance,see,create,instance,see,get,early,singleton,interfaces;override,public,final,t,get,object,throws,exception,if,is,singleton,return,this,initialized,this,singleton,instance,get,early,singleton,instance,else,return,create,instance
AbstractFactoryBean -> @Override 	public final T getObject() throws Exception;1467983536;Expose the singleton instance or create a new prototype instance._@see #createInstance()_@see #getEarlySingletonInterfaces();@Override_	public final T getObject() throws Exception {_		if (isSingleton()) {_			return (this.initialized ? this.singletonInstance : getEarlySingletonInstance())__		}_		else {_			return createInstance()__		}_	};expose,the,singleton,instance,or,create,a,new,prototype,instance,see,create,instance,see,get,early,singleton,interfaces;override,public,final,t,get,object,throws,exception,if,is,singleton,return,this,initialized,this,singleton,instance,get,early,singleton,instance,else,return,create,instance
AbstractFactoryBean -> @Override 	public final T getObject() throws Exception;1495868221;Expose the singleton instance or create a new prototype instance._@see #createInstance()_@see #getEarlySingletonInterfaces();@Override_	public final T getObject() throws Exception {_		if (isSingleton()) {_			return (this.initialized ? this.singletonInstance : getEarlySingletonInstance())__		}_		else {_			return createInstance()__		}_	};expose,the,singleton,instance,or,create,a,new,prototype,instance,see,create,instance,see,get,early,singleton,interfaces;override,public,final,t,get,object,throws,exception,if,is,singleton,return,this,initialized,this,singleton,instance,get,early,singleton,instance,else,return,create,instance
AbstractFactoryBean -> @Override 	public final T getObject() throws Exception;1496242568;Expose the singleton instance or create a new prototype instance._@see #createInstance()_@see #getEarlySingletonInterfaces();@Override_	public final T getObject() throws Exception {_		if (isSingleton()) {_			return (this.initialized ? this.singletonInstance : getEarlySingletonInstance())__		}_		else {_			return createInstance()__		}_	};expose,the,singleton,instance,or,create,a,new,prototype,instance,see,create,instance,see,get,early,singleton,interfaces;override,public,final,t,get,object,throws,exception,if,is,singleton,return,this,initialized,this,singleton,instance,get,early,singleton,instance,else,return,create,instance
AbstractFactoryBean -> @Override 	public final T getObject() throws Exception;1496837955;Expose the singleton instance or create a new prototype instance._@see #createInstance()_@see #getEarlySingletonInterfaces();@Override_	public final T getObject() throws Exception {_		if (isSingleton()) {_			return (this.initialized ? this.singletonInstance : getEarlySingletonInstance())__		}_		else {_			return createInstance()__		}_	};expose,the,singleton,instance,or,create,a,new,prototype,instance,see,create,instance,see,get,early,singleton,interfaces;override,public,final,t,get,object,throws,exception,if,is,singleton,return,this,initialized,this,singleton,instance,get,early,singleton,instance,else,return,create,instance
AbstractFactoryBean -> @Override 	public final T getObject() throws Exception;1498780456;Expose the singleton instance or create a new prototype instance._@see #createInstance()_@see #getEarlySingletonInterfaces();@Override_	public final T getObject() throws Exception {_		if (isSingleton()) {_			return (this.initialized ? this.singletonInstance : getEarlySingletonInstance())__		}_		else {_			return createInstance()__		}_	};expose,the,singleton,instance,or,create,a,new,prototype,instance,see,create,instance,see,get,early,singleton,interfaces;override,public,final,t,get,object,throws,exception,if,is,singleton,return,this,initialized,this,singleton,instance,get,early,singleton,instance,else,return,create,instance
AbstractFactoryBean -> @Override 	public final T getObject() throws Exception;1500448076;Expose the singleton instance or create a new prototype instance._@see #createInstance()_@see #getEarlySingletonInterfaces();@Override_	public final T getObject() throws Exception {_		if (isSingleton()) {_			return (this.initialized ? this.singletonInstance : getEarlySingletonInstance())__		}_		else {_			return createInstance()__		}_	};expose,the,singleton,instance,or,create,a,new,prototype,instance,see,create,instance,see,get,early,singleton,interfaces;override,public,final,t,get,object,throws,exception,if,is,singleton,return,this,initialized,this,singleton,instance,get,early,singleton,instance,else,return,create,instance
AbstractFactoryBean -> @Override 	public final T getObject() throws Exception;1502974979;Expose the singleton instance or create a new prototype instance._@see #createInstance()_@see #getEarlySingletonInterfaces();@Override_	public final T getObject() throws Exception {_		if (isSingleton()) {_			return (this.initialized ? this.singletonInstance : getEarlySingletonInstance())__		}_		else {_			return createInstance()__		}_	};expose,the,singleton,instance,or,create,a,new,prototype,instance,see,create,instance,see,get,early,singleton,interfaces;override,public,final,t,get,object,throws,exception,if,is,singleton,return,this,initialized,this,singleton,instance,get,early,singleton,instance,else,return,create,instance
AbstractFactoryBean -> @Override 	public final T getObject() throws Exception;1528737477;Expose the singleton instance or create a new prototype instance._@see #createInstance()_@see #getEarlySingletonInterfaces();@Override_	public final T getObject() throws Exception {_		if (isSingleton()) {_			return (this.initialized ? this.singletonInstance : getEarlySingletonInstance())__		}_		else {_			return createInstance()__		}_	};expose,the,singleton,instance,or,create,a,new,prototype,instance,see,create,instance,see,get,early,singleton,interfaces;override,public,final,t,get,object,throws,exception,if,is,singleton,return,this,initialized,this,singleton,instance,get,early,singleton,instance,else,return,create,instance
AbstractFactoryBean -> @Override 	public final T getObject() throws Exception;1530174524;Expose the singleton instance or create a new prototype instance._@see #createInstance()_@see #getEarlySingletonInterfaces();@Override_	public final T getObject() throws Exception {_		if (isSingleton()) {_			return (this.initialized ? this.singletonInstance : getEarlySingletonInstance())__		}_		else {_			return createInstance()__		}_	};expose,the,singleton,instance,or,create,a,new,prototype,instance,see,create,instance,see,get,early,singleton,interfaces;override,public,final,t,get,object,throws,exception,if,is,singleton,return,this,initialized,this,singleton,instance,get,early,singleton,instance,else,return,create,instance
AbstractFactoryBean -> @Override 	public final T getObject() throws Exception;1532605718;Expose the singleton instance or create a new prototype instance._@see #createInstance()_@see #getEarlySingletonInterfaces();@Override_	public final T getObject() throws Exception {_		if (isSingleton()) {_			return (this.initialized ? this.singletonInstance : getEarlySingletonInstance())__		}_		else {_			return createInstance()__		}_	};expose,the,singleton,instance,or,create,a,new,prototype,instance,see,create,instance,see,get,early,singleton,interfaces;override,public,final,t,get,object,throws,exception,if,is,singleton,return,this,initialized,this,singleton,instance,get,early,singleton,instance,else,return,create,instance
AbstractFactoryBean -> protected BeanFactory getBeanFactory();1328020251;Return the BeanFactory that this bean runs in.;protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,that,this,bean,runs,in;protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractFactoryBean -> protected BeanFactory getBeanFactory();1356735495;Return the BeanFactory that this bean runs in.;protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,that,this,bean,runs,in;protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractFactoryBean -> protected BeanFactory getBeanFactory();1357119239;Return the BeanFactory that this bean runs in.;protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,that,this,bean,runs,in;protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractFactoryBean -> protected BeanFactory getBeanFactory();1368482696;Return the BeanFactory that this bean runs in.;protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,that,this,bean,runs,in;protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractFactoryBean -> protected BeanFactory getBeanFactory();1385412762;Return the BeanFactory that this bean runs in.;protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,that,this,bean,runs,in;protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractFactoryBean -> protected BeanFactory getBeanFactory();1467983536;Return the BeanFactory that this bean runs in.;protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,that,this,bean,runs,in;protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractFactoryBean -> protected BeanFactory getBeanFactory();1495868221;Return the BeanFactory that this bean runs in.;protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,that,this,bean,runs,in;protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractFactoryBean -> protected BeanFactory getBeanFactory();1496242568;Return the BeanFactory that this bean runs in.;protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,that,this,bean,runs,in;protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractFactoryBean -> protected BeanFactory getBeanFactory();1496837955;Return the BeanFactory that this bean runs in.;protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,that,this,bean,runs,in;protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractFactoryBean -> protected void destroyInstance(T instance) throws Exception;1328020251;Callback for destroying a singleton instance. Subclasses may_override this to destroy the previously created instance._<p>The default implementation is empty._@param instance the singleton instance, as returned by_{@link #createInstance()}_@throws Exception in case of shutdown errors_@see #createInstance();protected void destroyInstance(T instance) throws Exception {_	};callback,for,destroying,a,singleton,instance,subclasses,may,override,this,to,destroy,the,previously,created,instance,p,the,default,implementation,is,empty,param,instance,the,singleton,instance,as,returned,by,link,create,instance,throws,exception,in,case,of,shutdown,errors,see,create,instance;protected,void,destroy,instance,t,instance,throws,exception
AbstractFactoryBean -> protected void destroyInstance(T instance) throws Exception;1356735495;Callback for destroying a singleton instance. Subclasses may_override this to destroy the previously created instance._<p>The default implementation is empty._@param instance the singleton instance, as returned by_{@link #createInstance()}_@throws Exception in case of shutdown errors_@see #createInstance();protected void destroyInstance(T instance) throws Exception {_	};callback,for,destroying,a,singleton,instance,subclasses,may,override,this,to,destroy,the,previously,created,instance,p,the,default,implementation,is,empty,param,instance,the,singleton,instance,as,returned,by,link,create,instance,throws,exception,in,case,of,shutdown,errors,see,create,instance;protected,void,destroy,instance,t,instance,throws,exception
AbstractFactoryBean -> protected void destroyInstance(T instance) throws Exception;1357119239;Callback for destroying a singleton instance. Subclasses may_override this to destroy the previously created instance._<p>The default implementation is empty._@param instance the singleton instance, as returned by_{@link #createInstance()}_@throws Exception in case of shutdown errors_@see #createInstance();protected void destroyInstance(T instance) throws Exception {_	};callback,for,destroying,a,singleton,instance,subclasses,may,override,this,to,destroy,the,previously,created,instance,p,the,default,implementation,is,empty,param,instance,the,singleton,instance,as,returned,by,link,create,instance,throws,exception,in,case,of,shutdown,errors,see,create,instance;protected,void,destroy,instance,t,instance,throws,exception
AbstractFactoryBean -> protected void destroyInstance(T instance) throws Exception;1368482696;Callback for destroying a singleton instance. Subclasses may_override this to destroy the previously created instance._<p>The default implementation is empty._@param instance the singleton instance, as returned by_{@link #createInstance()}_@throws Exception in case of shutdown errors_@see #createInstance();protected void destroyInstance(T instance) throws Exception {_	};callback,for,destroying,a,singleton,instance,subclasses,may,override,this,to,destroy,the,previously,created,instance,p,the,default,implementation,is,empty,param,instance,the,singleton,instance,as,returned,by,link,create,instance,throws,exception,in,case,of,shutdown,errors,see,create,instance;protected,void,destroy,instance,t,instance,throws,exception
AbstractFactoryBean -> protected void destroyInstance(T instance) throws Exception;1385412762;Callback for destroying a singleton instance. Subclasses may_override this to destroy the previously created instance._<p>The default implementation is empty._@param instance the singleton instance, as returned by_{@link #createInstance()}_@throws Exception in case of shutdown errors_@see #createInstance();protected void destroyInstance(T instance) throws Exception {_	};callback,for,destroying,a,singleton,instance,subclasses,may,override,this,to,destroy,the,previously,created,instance,p,the,default,implementation,is,empty,param,instance,the,singleton,instance,as,returned,by,link,create,instance,throws,exception,in,case,of,shutdown,errors,see,create,instance;protected,void,destroy,instance,t,instance,throws,exception
AbstractFactoryBean -> protected void destroyInstance(T instance) throws Exception;1467983536;Callback for destroying a singleton instance. Subclasses may_override this to destroy the previously created instance._<p>The default implementation is empty._@param instance the singleton instance, as returned by_{@link #createInstance()}_@throws Exception in case of shutdown errors_@see #createInstance();protected void destroyInstance(T instance) throws Exception {_	};callback,for,destroying,a,singleton,instance,subclasses,may,override,this,to,destroy,the,previously,created,instance,p,the,default,implementation,is,empty,param,instance,the,singleton,instance,as,returned,by,link,create,instance,throws,exception,in,case,of,shutdown,errors,see,create,instance;protected,void,destroy,instance,t,instance,throws,exception
AbstractFactoryBean -> protected void destroyInstance(T instance) throws Exception;1495868221;Callback for destroying a singleton instance. Subclasses may_override this to destroy the previously created instance._<p>The default implementation is empty._@param instance the singleton instance, as returned by_{@link #createInstance()}_@throws Exception in case of shutdown errors_@see #createInstance();protected void destroyInstance(T instance) throws Exception {_	};callback,for,destroying,a,singleton,instance,subclasses,may,override,this,to,destroy,the,previously,created,instance,p,the,default,implementation,is,empty,param,instance,the,singleton,instance,as,returned,by,link,create,instance,throws,exception,in,case,of,shutdown,errors,see,create,instance;protected,void,destroy,instance,t,instance,throws,exception
AbstractFactoryBean -> protected void destroyInstance(T instance) throws Exception;1496242568;Callback for destroying a singleton instance. Subclasses may_override this to destroy the previously created instance._<p>The default implementation is empty._@param instance the singleton instance, as returned by_{@link #createInstance()}_@throws Exception in case of shutdown errors_@see #createInstance();protected void destroyInstance(T instance) throws Exception {_	};callback,for,destroying,a,singleton,instance,subclasses,may,override,this,to,destroy,the,previously,created,instance,p,the,default,implementation,is,empty,param,instance,the,singleton,instance,as,returned,by,link,create,instance,throws,exception,in,case,of,shutdown,errors,see,create,instance;protected,void,destroy,instance,t,instance,throws,exception
AbstractFactoryBean -> protected void destroyInstance(T instance) throws Exception;1496837955;Callback for destroying a singleton instance. Subclasses may_override this to destroy the previously created instance._<p>The default implementation is empty._@param instance the singleton instance, as returned by_{@link #createInstance()}_@throws Exception in case of shutdown errors_@see #createInstance();protected void destroyInstance(T instance) throws Exception {_	};callback,for,destroying,a,singleton,instance,subclasses,may,override,this,to,destroy,the,previously,created,instance,p,the,default,implementation,is,empty,param,instance,the,singleton,instance,as,returned,by,link,create,instance,throws,exception,in,case,of,shutdown,errors,see,create,instance;protected,void,destroy,instance,t,instance,throws,exception
AbstractFactoryBean -> protected Class<?>[] getEarlySingletonInterfaces();1385412762;Return an array of interfaces that a singleton object exposed by this_FactoryBean is supposed to implement, for use with an 'early singleton_proxy' that will be exposed in case of a circular reference._<p>The default implementation returns this FactoryBean's object type,_provided that it is an interface, or {@code null} else. The latter_indicates that early singleton access is not supported by this FactoryBean._This will lead to a FactoryBeanNotInitializedException getting thrown._@return the interfaces to use for 'early singletons',_or {@code null} to indicate a FactoryBeanNotInitializedException_@see org.springframework.beans.factory.FactoryBeanNotInitializedException;protected Class<?>[] getEarlySingletonInterfaces() {_		Class<?> type = getObjectType()__		return (type != null && type.isInterface() ? new Class<?>[] {type} : null)__	};return,an,array,of,interfaces,that,a,singleton,object,exposed,by,this,factory,bean,is,supposed,to,implement,for,use,with,an,early,singleton,proxy,that,will,be,exposed,in,case,of,a,circular,reference,p,the,default,implementation,returns,this,factory,bean,s,object,type,provided,that,it,is,an,interface,or,code,null,else,the,latter,indicates,that,early,singleton,access,is,not,supported,by,this,factory,bean,this,will,lead,to,a,factory,bean,not,initialized,exception,getting,thrown,return,the,interfaces,to,use,for,early,singletons,or,code,null,to,indicate,a,factory,bean,not,initialized,exception,see,org,springframework,beans,factory,factory,bean,not,initialized,exception;protected,class,get,early,singleton,interfaces,class,type,get,object,type,return,type,null,type,is,interface,new,class,type,null
AbstractFactoryBean -> protected Class<?>[] getEarlySingletonInterfaces();1467983536;Return an array of interfaces that a singleton object exposed by this_FactoryBean is supposed to implement, for use with an 'early singleton_proxy' that will be exposed in case of a circular reference._<p>The default implementation returns this FactoryBean's object type,_provided that it is an interface, or {@code null} else. The latter_indicates that early singleton access is not supported by this FactoryBean._This will lead to a FactoryBeanNotInitializedException getting thrown._@return the interfaces to use for 'early singletons',_or {@code null} to indicate a FactoryBeanNotInitializedException_@see org.springframework.beans.factory.FactoryBeanNotInitializedException;protected Class<?>[] getEarlySingletonInterfaces() {_		Class<?> type = getObjectType()__		return (type != null && type.isInterface() ? new Class<?>[] {type} : null)__	};return,an,array,of,interfaces,that,a,singleton,object,exposed,by,this,factory,bean,is,supposed,to,implement,for,use,with,an,early,singleton,proxy,that,will,be,exposed,in,case,of,a,circular,reference,p,the,default,implementation,returns,this,factory,bean,s,object,type,provided,that,it,is,an,interface,or,code,null,else,the,latter,indicates,that,early,singleton,access,is,not,supported,by,this,factory,bean,this,will,lead,to,a,factory,bean,not,initialized,exception,getting,thrown,return,the,interfaces,to,use,for,early,singletons,or,code,null,to,indicate,a,factory,bean,not,initialized,exception,see,org,springframework,beans,factory,factory,bean,not,initialized,exception;protected,class,get,early,singleton,interfaces,class,type,get,object,type,return,type,null,type,is,interface,new,class,type,null
AbstractFactoryBean -> public final T getObject() throws Exception;1328020251;Expose the singleton instance or create a new prototype instance._@see #createInstance()_@see #getEarlySingletonInterfaces();public final T getObject() throws Exception {_		if (isSingleton()) {_			return (this.initialized ? this.singletonInstance : getEarlySingletonInstance())__		}_		else {_			return createInstance()__		}_	};expose,the,singleton,instance,or,create,a,new,prototype,instance,see,create,instance,see,get,early,singleton,interfaces;public,final,t,get,object,throws,exception,if,is,singleton,return,this,initialized,this,singleton,instance,get,early,singleton,instance,else,return,create,instance
AbstractFactoryBean -> public final T getObject() throws Exception;1357119239;Expose the singleton instance or create a new prototype instance._@see #createInstance()_@see #getEarlySingletonInterfaces();public final T getObject() throws Exception {_		if (isSingleton()) {_			return (this.initialized ? this.singletonInstance : getEarlySingletonInstance())__		}_		else {_			return createInstance()__		}_	};expose,the,singleton,instance,or,create,a,new,prototype,instance,see,create,instance,see,get,early,singleton,interfaces;public,final,t,get,object,throws,exception,if,is,singleton,return,this,initialized,this,singleton,instance,get,early,singleton,instance,else,return,create,instance
AbstractFactoryBean -> public void setSingleton(boolean singleton);1328020251;Set if a singleton should be created, or a new object on each request_otherwise. Default is <code>true</code> (a singleton).;public void setSingleton(boolean singleton) {_		this.singleton = singleton__	};set,if,a,singleton,should,be,created,or,a,new,object,on,each,request,otherwise,default,is,code,true,code,a,singleton;public,void,set,singleton,boolean,singleton,this,singleton,singleton
AbstractFactoryBean -> public void setSingleton(boolean singleton);1356735495;Set if a singleton should be created, or a new object on each request_otherwise. Default is {@code true} (a singleton).;public void setSingleton(boolean singleton) {_		this.singleton = singleton__	};set,if,a,singleton,should,be,created,or,a,new,object,on,each,request,otherwise,default,is,code,true,a,singleton;public,void,set,singleton,boolean,singleton,this,singleton,singleton
AbstractFactoryBean -> public void setSingleton(boolean singleton);1357119239;Set if a singleton should be created, or a new object on each request_otherwise. Default is {@code true} (a singleton).;public void setSingleton(boolean singleton) {_		this.singleton = singleton__	};set,if,a,singleton,should,be,created,or,a,new,object,on,each,request,otherwise,default,is,code,true,a,singleton;public,void,set,singleton,boolean,singleton,this,singleton,singleton
AbstractFactoryBean -> public void setSingleton(boolean singleton);1368482696;Set if a singleton should be created, or a new object on each request_otherwise. Default is {@code true} (a singleton).;public void setSingleton(boolean singleton) {_		this.singleton = singleton__	};set,if,a,singleton,should,be,created,or,a,new,object,on,each,request,otherwise,default,is,code,true,a,singleton;public,void,set,singleton,boolean,singleton,this,singleton,singleton
AbstractFactoryBean -> public void setSingleton(boolean singleton);1385412762;Set if a singleton should be created, or a new object on each request_otherwise. Default is {@code true} (a singleton).;public void setSingleton(boolean singleton) {_		this.singleton = singleton__	};set,if,a,singleton,should,be,created,or,a,new,object,on,each,request,otherwise,default,is,code,true,a,singleton;public,void,set,singleton,boolean,singleton,this,singleton,singleton
AbstractFactoryBean -> public void setSingleton(boolean singleton);1467983536;Set if a singleton should be created, or a new object on each request_otherwise. Default is {@code true} (a singleton).;public void setSingleton(boolean singleton) {_		this.singleton = singleton__	};set,if,a,singleton,should,be,created,or,a,new,object,on,each,request,otherwise,default,is,code,true,a,singleton;public,void,set,singleton,boolean,singleton,this,singleton,singleton
AbstractFactoryBean -> public void setSingleton(boolean singleton);1495868221;Set if a singleton should be created, or a new object on each request_otherwise. Default is {@code true} (a singleton).;public void setSingleton(boolean singleton) {_		this.singleton = singleton__	};set,if,a,singleton,should,be,created,or,a,new,object,on,each,request,otherwise,default,is,code,true,a,singleton;public,void,set,singleton,boolean,singleton,this,singleton,singleton
AbstractFactoryBean -> public void setSingleton(boolean singleton);1496242568;Set if a singleton should be created, or a new object on each request_otherwise. Default is {@code true} (a singleton).;public void setSingleton(boolean singleton) {_		this.singleton = singleton__	};set,if,a,singleton,should,be,created,or,a,new,object,on,each,request,otherwise,default,is,code,true,a,singleton;public,void,set,singleton,boolean,singleton,this,singleton,singleton
AbstractFactoryBean -> public void setSingleton(boolean singleton);1496837955;Set if a singleton should be created, or a new object on each request_otherwise. Default is {@code true} (a singleton).;public void setSingleton(boolean singleton) {_		this.singleton = singleton__	};set,if,a,singleton,should,be,created,or,a,new,object,on,each,request,otherwise,default,is,code,true,a,singleton;public,void,set,singleton,boolean,singleton,this,singleton,singleton
AbstractFactoryBean -> public void setSingleton(boolean singleton);1498780456;Set if a singleton should be created, or a new object on each request_otherwise. Default is {@code true} (a singleton).;public void setSingleton(boolean singleton) {_		this.singleton = singleton__	};set,if,a,singleton,should,be,created,or,a,new,object,on,each,request,otherwise,default,is,code,true,a,singleton;public,void,set,singleton,boolean,singleton,this,singleton,singleton
AbstractFactoryBean -> public void setSingleton(boolean singleton);1500448076;Set if a singleton should be created, or a new object on each request_otherwise. Default is {@code true} (a singleton).;public void setSingleton(boolean singleton) {_		this.singleton = singleton__	};set,if,a,singleton,should,be,created,or,a,new,object,on,each,request,otherwise,default,is,code,true,a,singleton;public,void,set,singleton,boolean,singleton,this,singleton,singleton
AbstractFactoryBean -> public void setSingleton(boolean singleton);1502974979;Set if a singleton should be created, or a new object on each request_otherwise. Default is {@code true} (a singleton).;public void setSingleton(boolean singleton) {_		this.singleton = singleton__	};set,if,a,singleton,should,be,created,or,a,new,object,on,each,request,otherwise,default,is,code,true,a,singleton;public,void,set,singleton,boolean,singleton,this,singleton,singleton
AbstractFactoryBean -> public void setSingleton(boolean singleton);1528737477;Set if a singleton should be created, or a new object on each request_otherwise. Default is {@code true} (a singleton).;public void setSingleton(boolean singleton) {_		this.singleton = singleton__	};set,if,a,singleton,should,be,created,or,a,new,object,on,each,request,otherwise,default,is,code,true,a,singleton;public,void,set,singleton,boolean,singleton,this,singleton,singleton
AbstractFactoryBean -> public void setSingleton(boolean singleton);1530174524;Set if a singleton should be created, or a new object on each request_otherwise. Default is {@code true} (a singleton).;public void setSingleton(boolean singleton) {_		this.singleton = singleton__	};set,if,a,singleton,should,be,created,or,a,new,object,on,each,request,otherwise,default,is,code,true,a,singleton;public,void,set,singleton,boolean,singleton,this,singleton,singleton
AbstractFactoryBean -> public void setSingleton(boolean singleton);1532605718;Set if a singleton should be created, or a new object on each request_otherwise. Default is {@code true} (a singleton).;public void setSingleton(boolean singleton) {_		this.singleton = singleton__	};set,if,a,singleton,should,be,created,or,a,new,object,on,each,request,otherwise,default,is,code,true,a,singleton;public,void,set,singleton,boolean,singleton,this,singleton,singleton
AbstractFactoryBean -> protected Class[] getEarlySingletonInterfaces();1328020251;Return an array of interfaces that a singleton object exposed by this_FactoryBean is supposed to implement, for use with an 'early singleton_proxy' that will be exposed in case of a circular reference._<p>The default implementation returns this FactoryBean's object type,_provided that it is an interface, or <code>null</code> else. The latter_indicates that early singleton access is not supported by this FactoryBean._This will lead to a FactoryBeanNotInitializedException getting thrown._@return the interfaces to use for 'early singletons',_or <code>null</code> to indicate a FactoryBeanNotInitializedException_@see org.springframework.beans.factory.FactoryBeanNotInitializedException;protected Class[] getEarlySingletonInterfaces() {_		Class type = getObjectType()__		return (type != null && type.isInterface() ? new Class[] {type} : null)__	};return,an,array,of,interfaces,that,a,singleton,object,exposed,by,this,factory,bean,is,supposed,to,implement,for,use,with,an,early,singleton,proxy,that,will,be,exposed,in,case,of,a,circular,reference,p,the,default,implementation,returns,this,factory,bean,s,object,type,provided,that,it,is,an,interface,or,code,null,code,else,the,latter,indicates,that,early,singleton,access,is,not,supported,by,this,factory,bean,this,will,lead,to,a,factory,bean,not,initialized,exception,getting,thrown,return,the,interfaces,to,use,for,early,singletons,or,code,null,code,to,indicate,a,factory,bean,not,initialized,exception,see,org,springframework,beans,factory,factory,bean,not,initialized,exception;protected,class,get,early,singleton,interfaces,class,type,get,object,type,return,type,null,type,is,interface,new,class,type,null
AbstractFactoryBean -> protected Class[] getEarlySingletonInterfaces();1356735495;Return an array of interfaces that a singleton object exposed by this_FactoryBean is supposed to implement, for use with an 'early singleton_proxy' that will be exposed in case of a circular reference._<p>The default implementation returns this FactoryBean's object type,_provided that it is an interface, or {@code null} else. The latter_indicates that early singleton access is not supported by this FactoryBean._This will lead to a FactoryBeanNotInitializedException getting thrown._@return the interfaces to use for 'early singletons',_or {@code null} to indicate a FactoryBeanNotInitializedException_@see org.springframework.beans.factory.FactoryBeanNotInitializedException;protected Class[] getEarlySingletonInterfaces() {_		Class type = getObjectType()__		return (type != null && type.isInterface() ? new Class[] {type} : null)__	};return,an,array,of,interfaces,that,a,singleton,object,exposed,by,this,factory,bean,is,supposed,to,implement,for,use,with,an,early,singleton,proxy,that,will,be,exposed,in,case,of,a,circular,reference,p,the,default,implementation,returns,this,factory,bean,s,object,type,provided,that,it,is,an,interface,or,code,null,else,the,latter,indicates,that,early,singleton,access,is,not,supported,by,this,factory,bean,this,will,lead,to,a,factory,bean,not,initialized,exception,getting,thrown,return,the,interfaces,to,use,for,early,singletons,or,code,null,to,indicate,a,factory,bean,not,initialized,exception,see,org,springframework,beans,factory,factory,bean,not,initialized,exception;protected,class,get,early,singleton,interfaces,class,type,get,object,type,return,type,null,type,is,interface,new,class,type,null
AbstractFactoryBean -> protected Class[] getEarlySingletonInterfaces();1357119239;Return an array of interfaces that a singleton object exposed by this_FactoryBean is supposed to implement, for use with an 'early singleton_proxy' that will be exposed in case of a circular reference._<p>The default implementation returns this FactoryBean's object type,_provided that it is an interface, or {@code null} else. The latter_indicates that early singleton access is not supported by this FactoryBean._This will lead to a FactoryBeanNotInitializedException getting thrown._@return the interfaces to use for 'early singletons',_or {@code null} to indicate a FactoryBeanNotInitializedException_@see org.springframework.beans.factory.FactoryBeanNotInitializedException;protected Class[] getEarlySingletonInterfaces() {_		Class type = getObjectType()__		return (type != null && type.isInterface() ? new Class[] {type} : null)__	};return,an,array,of,interfaces,that,a,singleton,object,exposed,by,this,factory,bean,is,supposed,to,implement,for,use,with,an,early,singleton,proxy,that,will,be,exposed,in,case,of,a,circular,reference,p,the,default,implementation,returns,this,factory,bean,s,object,type,provided,that,it,is,an,interface,or,code,null,else,the,latter,indicates,that,early,singleton,access,is,not,supported,by,this,factory,bean,this,will,lead,to,a,factory,bean,not,initialized,exception,getting,thrown,return,the,interfaces,to,use,for,early,singletons,or,code,null,to,indicate,a,factory,bean,not,initialized,exception,see,org,springframework,beans,factory,factory,bean,not,initialized,exception;protected,class,get,early,singleton,interfaces,class,type,get,object,type,return,type,null,type,is,interface,new,class,type,null
AbstractFactoryBean -> protected Class[] getEarlySingletonInterfaces();1368482696;Return an array of interfaces that a singleton object exposed by this_FactoryBean is supposed to implement, for use with an 'early singleton_proxy' that will be exposed in case of a circular reference._<p>The default implementation returns this FactoryBean's object type,_provided that it is an interface, or {@code null} else. The latter_indicates that early singleton access is not supported by this FactoryBean._This will lead to a FactoryBeanNotInitializedException getting thrown._@return the interfaces to use for 'early singletons',_or {@code null} to indicate a FactoryBeanNotInitializedException_@see org.springframework.beans.factory.FactoryBeanNotInitializedException;protected Class[] getEarlySingletonInterfaces() {_		Class type = getObjectType()__		return (type != null && type.isInterface() ? new Class[] {type} : null)__	};return,an,array,of,interfaces,that,a,singleton,object,exposed,by,this,factory,bean,is,supposed,to,implement,for,use,with,an,early,singleton,proxy,that,will,be,exposed,in,case,of,a,circular,reference,p,the,default,implementation,returns,this,factory,bean,s,object,type,provided,that,it,is,an,interface,or,code,null,else,the,latter,indicates,that,early,singleton,access,is,not,supported,by,this,factory,bean,this,will,lead,to,a,factory,bean,not,initialized,exception,getting,thrown,return,the,interfaces,to,use,for,early,singletons,or,code,null,to,indicate,a,factory,bean,not,initialized,exception,see,org,springframework,beans,factory,factory,bean,not,initialized,exception;protected,class,get,early,singleton,interfaces,class,type,get,object,type,return,type,null,type,is,interface,new,class,type,null
AbstractFactoryBean -> @Nullable 	protected BeanFactory getBeanFactory();1498780456;Return the BeanFactory that this bean runs in.;@Nullable_	protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,that,this,bean,runs,in;nullable,protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractFactoryBean -> @Nullable 	protected BeanFactory getBeanFactory();1500448076;Return the BeanFactory that this bean runs in.;@Nullable_	protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,that,this,bean,runs,in;nullable,protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractFactoryBean -> @Nullable 	protected BeanFactory getBeanFactory();1502974979;Return the BeanFactory that this bean runs in.;@Nullable_	protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,that,this,bean,runs,in;nullable,protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractFactoryBean -> @Nullable 	protected BeanFactory getBeanFactory();1528737477;Return the BeanFactory that this bean runs in.;@Nullable_	protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,that,this,bean,runs,in;nullable,protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractFactoryBean -> @Nullable 	protected BeanFactory getBeanFactory();1530174524;Return the BeanFactory that this bean runs in.;@Nullable_	protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,that,this,bean,runs,in;nullable,protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractFactoryBean -> @Nullable 	protected BeanFactory getBeanFactory();1532605718;Return the BeanFactory that this bean runs in.;@Nullable_	protected BeanFactory getBeanFactory() {_		return this.beanFactory__	};return,the,bean,factory,that,this,bean,runs,in;nullable,protected,bean,factory,get,bean,factory,return,this,bean,factory
AbstractFactoryBean -> @SuppressWarnings("unchecked") 	private T getEarlySingletonInstance() throws Exception;1328020251;Determine an 'eager singleton' instance, exposed in case of a_circular reference. Not called in a non-circular scenario.;@SuppressWarnings("unchecked")_	private T getEarlySingletonInstance() throws Exception {_		Class[] ifcs = getEarlySingletonInterfaces()__		if (ifcs == null) {_			throw new FactoryBeanNotInitializedException(_					getClass().getName() + " does not support circular references")__		}_		if (this.earlySingletonInstance == null) {_			this.earlySingletonInstance = (T) Proxy.newProxyInstance(_					this.beanClassLoader, ifcs, new EarlySingletonInvocationHandler())__		}_		return this.earlySingletonInstance__	};determine,an,eager,singleton,instance,exposed,in,case,of,a,circular,reference,not,called,in,a,non,circular,scenario;suppress,warnings,unchecked,private,t,get,early,singleton,instance,throws,exception,class,ifcs,get,early,singleton,interfaces,if,ifcs,null,throw,new,factory,bean,not,initialized,exception,get,class,get,name,does,not,support,circular,references,if,this,early,singleton,instance,null,this,early,singleton,instance,t,proxy,new,proxy,instance,this,bean,class,loader,ifcs,new,early,singleton,invocation,handler,return,this,early,singleton,instance
AbstractFactoryBean -> @SuppressWarnings("unchecked") 	private T getEarlySingletonInstance() throws Exception;1356735495;Determine an 'eager singleton' instance, exposed in case of a_circular reference. Not called in a non-circular scenario.;@SuppressWarnings("unchecked")_	private T getEarlySingletonInstance() throws Exception {_		Class[] ifcs = getEarlySingletonInterfaces()__		if (ifcs == null) {_			throw new FactoryBeanNotInitializedException(_					getClass().getName() + " does not support circular references")__		}_		if (this.earlySingletonInstance == null) {_			this.earlySingletonInstance = (T) Proxy.newProxyInstance(_					this.beanClassLoader, ifcs, new EarlySingletonInvocationHandler())__		}_		return this.earlySingletonInstance__	};determine,an,eager,singleton,instance,exposed,in,case,of,a,circular,reference,not,called,in,a,non,circular,scenario;suppress,warnings,unchecked,private,t,get,early,singleton,instance,throws,exception,class,ifcs,get,early,singleton,interfaces,if,ifcs,null,throw,new,factory,bean,not,initialized,exception,get,class,get,name,does,not,support,circular,references,if,this,early,singleton,instance,null,this,early,singleton,instance,t,proxy,new,proxy,instance,this,bean,class,loader,ifcs,new,early,singleton,invocation,handler,return,this,early,singleton,instance
AbstractFactoryBean -> @SuppressWarnings("unchecked") 	private T getEarlySingletonInstance() throws Exception;1357119239;Determine an 'eager singleton' instance, exposed in case of a_circular reference. Not called in a non-circular scenario.;@SuppressWarnings("unchecked")_	private T getEarlySingletonInstance() throws Exception {_		Class[] ifcs = getEarlySingletonInterfaces()__		if (ifcs == null) {_			throw new FactoryBeanNotInitializedException(_					getClass().getName() + " does not support circular references")__		}_		if (this.earlySingletonInstance == null) {_			this.earlySingletonInstance = (T) Proxy.newProxyInstance(_					this.beanClassLoader, ifcs, new EarlySingletonInvocationHandler())__		}_		return this.earlySingletonInstance__	};determine,an,eager,singleton,instance,exposed,in,case,of,a,circular,reference,not,called,in,a,non,circular,scenario;suppress,warnings,unchecked,private,t,get,early,singleton,instance,throws,exception,class,ifcs,get,early,singleton,interfaces,if,ifcs,null,throw,new,factory,bean,not,initialized,exception,get,class,get,name,does,not,support,circular,references,if,this,early,singleton,instance,null,this,early,singleton,instance,t,proxy,new,proxy,instance,this,bean,class,loader,ifcs,new,early,singleton,invocation,handler,return,this,early,singleton,instance
AbstractFactoryBean -> @SuppressWarnings("unchecked") 	private T getEarlySingletonInstance() throws Exception;1368482696;Determine an 'eager singleton' instance, exposed in case of a_circular reference. Not called in a non-circular scenario.;@SuppressWarnings("unchecked")_	private T getEarlySingletonInstance() throws Exception {_		Class[] ifcs = getEarlySingletonInterfaces()__		if (ifcs == null) {_			throw new FactoryBeanNotInitializedException(_					getClass().getName() + " does not support circular references")__		}_		if (this.earlySingletonInstance == null) {_			this.earlySingletonInstance = (T) Proxy.newProxyInstance(_					this.beanClassLoader, ifcs, new EarlySingletonInvocationHandler())__		}_		return this.earlySingletonInstance__	};determine,an,eager,singleton,instance,exposed,in,case,of,a,circular,reference,not,called,in,a,non,circular,scenario;suppress,warnings,unchecked,private,t,get,early,singleton,instance,throws,exception,class,ifcs,get,early,singleton,interfaces,if,ifcs,null,throw,new,factory,bean,not,initialized,exception,get,class,get,name,does,not,support,circular,references,if,this,early,singleton,instance,null,this,early,singleton,instance,t,proxy,new,proxy,instance,this,bean,class,loader,ifcs,new,early,singleton,invocation,handler,return,this,early,singleton,instance
AbstractFactoryBean -> @SuppressWarnings("unchecked") 	private T getEarlySingletonInstance() throws Exception;1385412762;Determine an 'eager singleton' instance, exposed in case of a_circular reference. Not called in a non-circular scenario.;@SuppressWarnings("unchecked")_	private T getEarlySingletonInstance() throws Exception {_		Class<?>[] ifcs = getEarlySingletonInterfaces()__		if (ifcs == null) {_			throw new FactoryBeanNotInitializedException(_					getClass().getName() + " does not support circular references")__		}_		if (this.earlySingletonInstance == null) {_			this.earlySingletonInstance = (T) Proxy.newProxyInstance(_					this.beanClassLoader, ifcs, new EarlySingletonInvocationHandler())__		}_		return this.earlySingletonInstance__	};determine,an,eager,singleton,instance,exposed,in,case,of,a,circular,reference,not,called,in,a,non,circular,scenario;suppress,warnings,unchecked,private,t,get,early,singleton,instance,throws,exception,class,ifcs,get,early,singleton,interfaces,if,ifcs,null,throw,new,factory,bean,not,initialized,exception,get,class,get,name,does,not,support,circular,references,if,this,early,singleton,instance,null,this,early,singleton,instance,t,proxy,new,proxy,instance,this,bean,class,loader,ifcs,new,early,singleton,invocation,handler,return,this,early,singleton,instance
AbstractFactoryBean -> @SuppressWarnings("unchecked") 	private T getEarlySingletonInstance() throws Exception;1467983536;Determine an 'eager singleton' instance, exposed in case of a_circular reference. Not called in a non-circular scenario.;@SuppressWarnings("unchecked")_	private T getEarlySingletonInstance() throws Exception {_		Class<?>[] ifcs = getEarlySingletonInterfaces()__		if (ifcs == null) {_			throw new FactoryBeanNotInitializedException(_					getClass().getName() + " does not support circular references")__		}_		if (this.earlySingletonInstance == null) {_			this.earlySingletonInstance = (T) Proxy.newProxyInstance(_					this.beanClassLoader, ifcs, new EarlySingletonInvocationHandler())__		}_		return this.earlySingletonInstance__	};determine,an,eager,singleton,instance,exposed,in,case,of,a,circular,reference,not,called,in,a,non,circular,scenario;suppress,warnings,unchecked,private,t,get,early,singleton,instance,throws,exception,class,ifcs,get,early,singleton,interfaces,if,ifcs,null,throw,new,factory,bean,not,initialized,exception,get,class,get,name,does,not,support,circular,references,if,this,early,singleton,instance,null,this,early,singleton,instance,t,proxy,new,proxy,instance,this,bean,class,loader,ifcs,new,early,singleton,invocation,handler,return,this,early,singleton,instance
AbstractFactoryBean -> @SuppressWarnings("unchecked") 	private T getEarlySingletonInstance() throws Exception;1495868221;Determine an 'eager singleton' instance, exposed in case of a_circular reference. Not called in a non-circular scenario.;@SuppressWarnings("unchecked")_	private T getEarlySingletonInstance() throws Exception {_		Class<?>[] ifcs = getEarlySingletonInterfaces()__		if (ifcs == null) {_			throw new FactoryBeanNotInitializedException(_					getClass().getName() + " does not support circular references")__		}_		if (this.earlySingletonInstance == null) {_			this.earlySingletonInstance = (T) Proxy.newProxyInstance(_					this.beanClassLoader, ifcs, new EarlySingletonInvocationHandler())__		}_		return this.earlySingletonInstance__	};determine,an,eager,singleton,instance,exposed,in,case,of,a,circular,reference,not,called,in,a,non,circular,scenario;suppress,warnings,unchecked,private,t,get,early,singleton,instance,throws,exception,class,ifcs,get,early,singleton,interfaces,if,ifcs,null,throw,new,factory,bean,not,initialized,exception,get,class,get,name,does,not,support,circular,references,if,this,early,singleton,instance,null,this,early,singleton,instance,t,proxy,new,proxy,instance,this,bean,class,loader,ifcs,new,early,singleton,invocation,handler,return,this,early,singleton,instance
AbstractFactoryBean -> @SuppressWarnings("unchecked") 	private T getEarlySingletonInstance() throws Exception;1496242568;Determine an 'eager singleton' instance, exposed in case of a_circular reference. Not called in a non-circular scenario.;@SuppressWarnings("unchecked")_	private T getEarlySingletonInstance() throws Exception {_		Class<?>[] ifcs = getEarlySingletonInterfaces()__		if (ifcs == null) {_			throw new FactoryBeanNotInitializedException(_					getClass().getName() + " does not support circular references")__		}_		if (this.earlySingletonInstance == null) {_			this.earlySingletonInstance = (T) Proxy.newProxyInstance(_					this.beanClassLoader, ifcs, new EarlySingletonInvocationHandler())__		}_		return this.earlySingletonInstance__	};determine,an,eager,singleton,instance,exposed,in,case,of,a,circular,reference,not,called,in,a,non,circular,scenario;suppress,warnings,unchecked,private,t,get,early,singleton,instance,throws,exception,class,ifcs,get,early,singleton,interfaces,if,ifcs,null,throw,new,factory,bean,not,initialized,exception,get,class,get,name,does,not,support,circular,references,if,this,early,singleton,instance,null,this,early,singleton,instance,t,proxy,new,proxy,instance,this,bean,class,loader,ifcs,new,early,singleton,invocation,handler,return,this,early,singleton,instance
AbstractFactoryBean -> @SuppressWarnings("unchecked") 	private T getEarlySingletonInstance() throws Exception;1496837955;Determine an 'eager singleton' instance, exposed in case of a_circular reference. Not called in a non-circular scenario.;@SuppressWarnings("unchecked")_	private T getEarlySingletonInstance() throws Exception {_		Class<?>[] ifcs = getEarlySingletonInterfaces()__		if (ifcs == null) {_			throw new FactoryBeanNotInitializedException(_					getClass().getName() + " does not support circular references")__		}_		if (this.earlySingletonInstance == null) {_			this.earlySingletonInstance = (T) Proxy.newProxyInstance(_					this.beanClassLoader, ifcs, new EarlySingletonInvocationHandler())__		}_		return this.earlySingletonInstance__	};determine,an,eager,singleton,instance,exposed,in,case,of,a,circular,reference,not,called,in,a,non,circular,scenario;suppress,warnings,unchecked,private,t,get,early,singleton,instance,throws,exception,class,ifcs,get,early,singleton,interfaces,if,ifcs,null,throw,new,factory,bean,not,initialized,exception,get,class,get,name,does,not,support,circular,references,if,this,early,singleton,instance,null,this,early,singleton,instance,t,proxy,new,proxy,instance,this,bean,class,loader,ifcs,new,early,singleton,invocation,handler,return,this,early,singleton,instance
AbstractFactoryBean -> @SuppressWarnings("unchecked") 	private T getEarlySingletonInstance() throws Exception;1498780456;Determine an 'eager singleton' instance, exposed in case of a_circular reference. Not called in a non-circular scenario.;@SuppressWarnings("unchecked")_	private T getEarlySingletonInstance() throws Exception {_		Class<?>[] ifcs = getEarlySingletonInterfaces()__		if (ifcs == null) {_			throw new FactoryBeanNotInitializedException(_					getClass().getName() + " does not support circular references")__		}_		if (this.earlySingletonInstance == null) {_			this.earlySingletonInstance = (T) Proxy.newProxyInstance(_					this.beanClassLoader, ifcs, new EarlySingletonInvocationHandler())__		}_		return this.earlySingletonInstance__	};determine,an,eager,singleton,instance,exposed,in,case,of,a,circular,reference,not,called,in,a,non,circular,scenario;suppress,warnings,unchecked,private,t,get,early,singleton,instance,throws,exception,class,ifcs,get,early,singleton,interfaces,if,ifcs,null,throw,new,factory,bean,not,initialized,exception,get,class,get,name,does,not,support,circular,references,if,this,early,singleton,instance,null,this,early,singleton,instance,t,proxy,new,proxy,instance,this,bean,class,loader,ifcs,new,early,singleton,invocation,handler,return,this,early,singleton,instance
AbstractFactoryBean -> @SuppressWarnings("unchecked") 	private T getEarlySingletonInstance() throws Exception;1500448076;Determine an 'eager singleton' instance, exposed in case of a_circular reference. Not called in a non-circular scenario.;@SuppressWarnings("unchecked")_	private T getEarlySingletonInstance() throws Exception {_		Class<?>[] ifcs = getEarlySingletonInterfaces()__		if (ifcs == null) {_			throw new FactoryBeanNotInitializedException(_					getClass().getName() + " does not support circular references")__		}_		if (this.earlySingletonInstance == null) {_			this.earlySingletonInstance = (T) Proxy.newProxyInstance(_					this.beanClassLoader, ifcs, new EarlySingletonInvocationHandler())__		}_		return this.earlySingletonInstance__	};determine,an,eager,singleton,instance,exposed,in,case,of,a,circular,reference,not,called,in,a,non,circular,scenario;suppress,warnings,unchecked,private,t,get,early,singleton,instance,throws,exception,class,ifcs,get,early,singleton,interfaces,if,ifcs,null,throw,new,factory,bean,not,initialized,exception,get,class,get,name,does,not,support,circular,references,if,this,early,singleton,instance,null,this,early,singleton,instance,t,proxy,new,proxy,instance,this,bean,class,loader,ifcs,new,early,singleton,invocation,handler,return,this,early,singleton,instance
AbstractFactoryBean -> @SuppressWarnings("unchecked") 	private T getEarlySingletonInstance() throws Exception;1502974979;Determine an 'eager singleton' instance, exposed in case of a_circular reference. Not called in a non-circular scenario.;@SuppressWarnings("unchecked")_	private T getEarlySingletonInstance() throws Exception {_		Class<?>[] ifcs = getEarlySingletonInterfaces()__		if (ifcs == null) {_			throw new FactoryBeanNotInitializedException(_					getClass().getName() + " does not support circular references")__		}_		if (this.earlySingletonInstance == null) {_			this.earlySingletonInstance = (T) Proxy.newProxyInstance(_					this.beanClassLoader, ifcs, new EarlySingletonInvocationHandler())__		}_		return this.earlySingletonInstance__	};determine,an,eager,singleton,instance,exposed,in,case,of,a,circular,reference,not,called,in,a,non,circular,scenario;suppress,warnings,unchecked,private,t,get,early,singleton,instance,throws,exception,class,ifcs,get,early,singleton,interfaces,if,ifcs,null,throw,new,factory,bean,not,initialized,exception,get,class,get,name,does,not,support,circular,references,if,this,early,singleton,instance,null,this,early,singleton,instance,t,proxy,new,proxy,instance,this,bean,class,loader,ifcs,new,early,singleton,invocation,handler,return,this,early,singleton,instance
AbstractFactoryBean -> @SuppressWarnings("unchecked") 	private T getEarlySingletonInstance() throws Exception;1528737477;Determine an 'eager singleton' instance, exposed in case of a_circular reference. Not called in a non-circular scenario.;@SuppressWarnings("unchecked")_	private T getEarlySingletonInstance() throws Exception {_		Class<?>[] ifcs = getEarlySingletonInterfaces()__		if (ifcs == null) {_			throw new FactoryBeanNotInitializedException(_					getClass().getName() + " does not support circular references")__		}_		if (this.earlySingletonInstance == null) {_			this.earlySingletonInstance = (T) Proxy.newProxyInstance(_					this.beanClassLoader, ifcs, new EarlySingletonInvocationHandler())__		}_		return this.earlySingletonInstance__	};determine,an,eager,singleton,instance,exposed,in,case,of,a,circular,reference,not,called,in,a,non,circular,scenario;suppress,warnings,unchecked,private,t,get,early,singleton,instance,throws,exception,class,ifcs,get,early,singleton,interfaces,if,ifcs,null,throw,new,factory,bean,not,initialized,exception,get,class,get,name,does,not,support,circular,references,if,this,early,singleton,instance,null,this,early,singleton,instance,t,proxy,new,proxy,instance,this,bean,class,loader,ifcs,new,early,singleton,invocation,handler,return,this,early,singleton,instance
AbstractFactoryBean -> @SuppressWarnings("unchecked") 	private T getEarlySingletonInstance() throws Exception;1530174524;Determine an 'eager singleton' instance, exposed in case of a_circular reference. Not called in a non-circular scenario.;@SuppressWarnings("unchecked")_	private T getEarlySingletonInstance() throws Exception {_		Class<?>[] ifcs = getEarlySingletonInterfaces()__		if (ifcs == null) {_			throw new FactoryBeanNotInitializedException(_					getClass().getName() + " does not support circular references")__		}_		if (this.earlySingletonInstance == null) {_			this.earlySingletonInstance = (T) Proxy.newProxyInstance(_					this.beanClassLoader, ifcs, new EarlySingletonInvocationHandler())__		}_		return this.earlySingletonInstance__	};determine,an,eager,singleton,instance,exposed,in,case,of,a,circular,reference,not,called,in,a,non,circular,scenario;suppress,warnings,unchecked,private,t,get,early,singleton,instance,throws,exception,class,ifcs,get,early,singleton,interfaces,if,ifcs,null,throw,new,factory,bean,not,initialized,exception,get,class,get,name,does,not,support,circular,references,if,this,early,singleton,instance,null,this,early,singleton,instance,t,proxy,new,proxy,instance,this,bean,class,loader,ifcs,new,early,singleton,invocation,handler,return,this,early,singleton,instance
AbstractFactoryBean -> @SuppressWarnings("unchecked") 	private T getEarlySingletonInstance() throws Exception;1532605718;Determine an 'early singleton' instance, exposed in case of a_circular reference. Not called in a non-circular scenario.;@SuppressWarnings("unchecked")_	private T getEarlySingletonInstance() throws Exception {_		Class<?>[] ifcs = getEarlySingletonInterfaces()__		if (ifcs == null) {_			throw new FactoryBeanNotInitializedException(_					getClass().getName() + " does not support circular references")__		}_		if (this.earlySingletonInstance == null) {_			this.earlySingletonInstance = (T) Proxy.newProxyInstance(_					this.beanClassLoader, ifcs, new EarlySingletonInvocationHandler())__		}_		return this.earlySingletonInstance__	};determine,an,early,singleton,instance,exposed,in,case,of,a,circular,reference,not,called,in,a,non,circular,scenario;suppress,warnings,unchecked,private,t,get,early,singleton,instance,throws,exception,class,ifcs,get,early,singleton,interfaces,if,ifcs,null,throw,new,factory,bean,not,initialized,exception,get,class,get,name,does,not,support,circular,references,if,this,early,singleton,instance,null,this,early,singleton,instance,t,proxy,new,proxy,instance,this,bean,class,loader,ifcs,new,early,singleton,invocation,handler,return,this,early,singleton,instance
AbstractFactoryBean -> public abstract Class<?> getObjectType()_;1328020251;This abstract method declaration mirrors the method in the FactoryBean_interface, for a consistent offering of abstract template methods._@see org.springframework.beans.factory.FactoryBean#getObjectType();public abstract Class<?> getObjectType()_;this,abstract,method,declaration,mirrors,the,method,in,the,factory,bean,interface,for,a,consistent,offering,of,abstract,template,methods,see,org,springframework,beans,factory,factory,bean,get,object,type;public,abstract,class,get,object,type
AbstractFactoryBean -> public abstract Class<?> getObjectType()_;1357119239;This abstract method declaration mirrors the method in the FactoryBean_interface, for a consistent offering of abstract template methods._@see org.springframework.beans.factory.FactoryBean#getObjectType();public abstract Class<?> getObjectType()_;this,abstract,method,declaration,mirrors,the,method,in,the,factory,bean,interface,for,a,consistent,offering,of,abstract,template,methods,see,org,springframework,beans,factory,factory,bean,get,object,type;public,abstract,class,get,object,type
AbstractFactoryBean -> private T getSingletonInstance() throws IllegalStateException;1328020251;Expose the singleton instance (for access through the 'early singleton' proxy)._@return the singleton instance that this FactoryBean holds_@throws IllegalStateException if the singleton instance is not initialized;private T getSingletonInstance() throws IllegalStateException {_		if (!this.initialized) {_			throw new IllegalStateException("Singleton instance not initialized yet")__		}_		return this.singletonInstance__	};expose,the,singleton,instance,for,access,through,the,early,singleton,proxy,return,the,singleton,instance,that,this,factory,bean,holds,throws,illegal,state,exception,if,the,singleton,instance,is,not,initialized;private,t,get,singleton,instance,throws,illegal,state,exception,if,this,initialized,throw,new,illegal,state,exception,singleton,instance,not,initialized,yet,return,this,singleton,instance
AbstractFactoryBean -> private T getSingletonInstance() throws IllegalStateException;1356735495;Expose the singleton instance (for access through the 'early singleton' proxy)._@return the singleton instance that this FactoryBean holds_@throws IllegalStateException if the singleton instance is not initialized;private T getSingletonInstance() throws IllegalStateException {_		if (!this.initialized) {_			throw new IllegalStateException("Singleton instance not initialized yet")__		}_		return this.singletonInstance__	};expose,the,singleton,instance,for,access,through,the,early,singleton,proxy,return,the,singleton,instance,that,this,factory,bean,holds,throws,illegal,state,exception,if,the,singleton,instance,is,not,initialized;private,t,get,singleton,instance,throws,illegal,state,exception,if,this,initialized,throw,new,illegal,state,exception,singleton,instance,not,initialized,yet,return,this,singleton,instance
AbstractFactoryBean -> private T getSingletonInstance() throws IllegalStateException;1357119239;Expose the singleton instance (for access through the 'early singleton' proxy)._@return the singleton instance that this FactoryBean holds_@throws IllegalStateException if the singleton instance is not initialized;private T getSingletonInstance() throws IllegalStateException {_		if (!this.initialized) {_			throw new IllegalStateException("Singleton instance not initialized yet")__		}_		return this.singletonInstance__	};expose,the,singleton,instance,for,access,through,the,early,singleton,proxy,return,the,singleton,instance,that,this,factory,bean,holds,throws,illegal,state,exception,if,the,singleton,instance,is,not,initialized;private,t,get,singleton,instance,throws,illegal,state,exception,if,this,initialized,throw,new,illegal,state,exception,singleton,instance,not,initialized,yet,return,this,singleton,instance
AbstractFactoryBean -> private T getSingletonInstance() throws IllegalStateException;1368482696;Expose the singleton instance (for access through the 'early singleton' proxy)._@return the singleton instance that this FactoryBean holds_@throws IllegalStateException if the singleton instance is not initialized;private T getSingletonInstance() throws IllegalStateException {_		if (!this.initialized) {_			throw new IllegalStateException("Singleton instance not initialized yet")__		}_		return this.singletonInstance__	};expose,the,singleton,instance,for,access,through,the,early,singleton,proxy,return,the,singleton,instance,that,this,factory,bean,holds,throws,illegal,state,exception,if,the,singleton,instance,is,not,initialized;private,t,get,singleton,instance,throws,illegal,state,exception,if,this,initialized,throw,new,illegal,state,exception,singleton,instance,not,initialized,yet,return,this,singleton,instance
AbstractFactoryBean -> private T getSingletonInstance() throws IllegalStateException;1385412762;Expose the singleton instance (for access through the 'early singleton' proxy)._@return the singleton instance that this FactoryBean holds_@throws IllegalStateException if the singleton instance is not initialized;private T getSingletonInstance() throws IllegalStateException {_		if (!this.initialized) {_			throw new IllegalStateException("Singleton instance not initialized yet")__		}_		return this.singletonInstance__	};expose,the,singleton,instance,for,access,through,the,early,singleton,proxy,return,the,singleton,instance,that,this,factory,bean,holds,throws,illegal,state,exception,if,the,singleton,instance,is,not,initialized;private,t,get,singleton,instance,throws,illegal,state,exception,if,this,initialized,throw,new,illegal,state,exception,singleton,instance,not,initialized,yet,return,this,singleton,instance
AbstractFactoryBean -> private T getSingletonInstance() throws IllegalStateException;1467983536;Expose the singleton instance (for access through the 'early singleton' proxy)._@return the singleton instance that this FactoryBean holds_@throws IllegalStateException if the singleton instance is not initialized;private T getSingletonInstance() throws IllegalStateException {_		if (!this.initialized) {_			throw new IllegalStateException("Singleton instance not initialized yet")__		}_		return this.singletonInstance__	};expose,the,singleton,instance,for,access,through,the,early,singleton,proxy,return,the,singleton,instance,that,this,factory,bean,holds,throws,illegal,state,exception,if,the,singleton,instance,is,not,initialized;private,t,get,singleton,instance,throws,illegal,state,exception,if,this,initialized,throw,new,illegal,state,exception,singleton,instance,not,initialized,yet,return,this,singleton,instance
AbstractFactoryBean -> private T getSingletonInstance() throws IllegalStateException;1495868221;Expose the singleton instance (for access through the 'early singleton' proxy)._@return the singleton instance that this FactoryBean holds_@throws IllegalStateException if the singleton instance is not initialized;private T getSingletonInstance() throws IllegalStateException {_		if (!this.initialized) {_			throw new IllegalStateException("Singleton instance not initialized yet")__		}_		return this.singletonInstance__	};expose,the,singleton,instance,for,access,through,the,early,singleton,proxy,return,the,singleton,instance,that,this,factory,bean,holds,throws,illegal,state,exception,if,the,singleton,instance,is,not,initialized;private,t,get,singleton,instance,throws,illegal,state,exception,if,this,initialized,throw,new,illegal,state,exception,singleton,instance,not,initialized,yet,return,this,singleton,instance
AbstractFactoryBean -> private T getSingletonInstance() throws IllegalStateException;1496242568;Expose the singleton instance (for access through the 'early singleton' proxy)._@return the singleton instance that this FactoryBean holds_@throws IllegalStateException if the singleton instance is not initialized;private T getSingletonInstance() throws IllegalStateException {_		if (!this.initialized) {_			throw new IllegalStateException("Singleton instance not initialized yet")__		}_		return this.singletonInstance__	};expose,the,singleton,instance,for,access,through,the,early,singleton,proxy,return,the,singleton,instance,that,this,factory,bean,holds,throws,illegal,state,exception,if,the,singleton,instance,is,not,initialized;private,t,get,singleton,instance,throws,illegal,state,exception,if,this,initialized,throw,new,illegal,state,exception,singleton,instance,not,initialized,yet,return,this,singleton,instance
AbstractFactoryBean -> private T getSingletonInstance() throws IllegalStateException;1496837955;Expose the singleton instance (for access through the 'early singleton' proxy)._@return the singleton instance that this FactoryBean holds_@throws IllegalStateException if the singleton instance is not initialized;private T getSingletonInstance() throws IllegalStateException {_		if (!this.initialized) {_			throw new IllegalStateException("Singleton instance not initialized yet")__		}_		return this.singletonInstance__	};expose,the,singleton,instance,for,access,through,the,early,singleton,proxy,return,the,singleton,instance,that,this,factory,bean,holds,throws,illegal,state,exception,if,the,singleton,instance,is,not,initialized;private,t,get,singleton,instance,throws,illegal,state,exception,if,this,initialized,throw,new,illegal,state,exception,singleton,instance,not,initialized,yet,return,this,singleton,instance
AbstractFactoryBean -> public void destroy() throws Exception;1328020251;Destroy the singleton instance, if any._@see #destroyInstance(Object);public void destroy() throws Exception {_		if (isSingleton()) {_			destroyInstance(this.singletonInstance)__		}_	};destroy,the,singleton,instance,if,any,see,destroy,instance,object;public,void,destroy,throws,exception,if,is,singleton,destroy,instance,this,singleton,instance
AbstractFactoryBean -> public void destroy() throws Exception;1357119239;Destroy the singleton instance, if any._@see #destroyInstance(Object);public void destroy() throws Exception {_		if (isSingleton()) {_			destroyInstance(this.singletonInstance)__		}_	};destroy,the,singleton,instance,if,any,see,destroy,instance,object;public,void,destroy,throws,exception,if,is,singleton,destroy,instance,this,singleton,instance
AbstractFactoryBean -> @Nullable 	protected Class<?>[] getEarlySingletonInterfaces();1495868221;Return an array of interfaces that a singleton object exposed by this_FactoryBean is supposed to implement, for use with an 'early singleton_proxy' that will be exposed in case of a circular reference._<p>The default implementation returns this FactoryBean's object type,_provided that it is an interface, or {@code null} else. The latter_indicates that early singleton access is not supported by this FactoryBean._This will lead to a FactoryBeanNotInitializedException getting thrown._@return the interfaces to use for 'early singletons',_or {@code null} to indicate a FactoryBeanNotInitializedException_@see org.springframework.beans.factory.FactoryBeanNotInitializedException;@Nullable_	protected Class<?>[] getEarlySingletonInterfaces() {_		Class<?> type = getObjectType()__		return (type != null && type.isInterface() ? new Class<?>[] {type} : null)__	};return,an,array,of,interfaces,that,a,singleton,object,exposed,by,this,factory,bean,is,supposed,to,implement,for,use,with,an,early,singleton,proxy,that,will,be,exposed,in,case,of,a,circular,reference,p,the,default,implementation,returns,this,factory,bean,s,object,type,provided,that,it,is,an,interface,or,code,null,else,the,latter,indicates,that,early,singleton,access,is,not,supported,by,this,factory,bean,this,will,lead,to,a,factory,bean,not,initialized,exception,getting,thrown,return,the,interfaces,to,use,for,early,singletons,or,code,null,to,indicate,a,factory,bean,not,initialized,exception,see,org,springframework,beans,factory,factory,bean,not,initialized,exception;nullable,protected,class,get,early,singleton,interfaces,class,type,get,object,type,return,type,null,type,is,interface,new,class,type,null
AbstractFactoryBean -> @Nullable 	protected Class<?>[] getEarlySingletonInterfaces();1496242568;Return an array of interfaces that a singleton object exposed by this_FactoryBean is supposed to implement, for use with an 'early singleton_proxy' that will be exposed in case of a circular reference._<p>The default implementation returns this FactoryBean's object type,_provided that it is an interface, or {@code null} else. The latter_indicates that early singleton access is not supported by this FactoryBean._This will lead to a FactoryBeanNotInitializedException getting thrown._@return the interfaces to use for 'early singletons',_or {@code null} to indicate a FactoryBeanNotInitializedException_@see org.springframework.beans.factory.FactoryBeanNotInitializedException;@Nullable_	protected Class<?>[] getEarlySingletonInterfaces() {_		Class<?> type = getObjectType()__		return (type != null && type.isInterface() ? new Class<?>[] {type} : null)__	};return,an,array,of,interfaces,that,a,singleton,object,exposed,by,this,factory,bean,is,supposed,to,implement,for,use,with,an,early,singleton,proxy,that,will,be,exposed,in,case,of,a,circular,reference,p,the,default,implementation,returns,this,factory,bean,s,object,type,provided,that,it,is,an,interface,or,code,null,else,the,latter,indicates,that,early,singleton,access,is,not,supported,by,this,factory,bean,this,will,lead,to,a,factory,bean,not,initialized,exception,getting,thrown,return,the,interfaces,to,use,for,early,singletons,or,code,null,to,indicate,a,factory,bean,not,initialized,exception,see,org,springframework,beans,factory,factory,bean,not,initialized,exception;nullable,protected,class,get,early,singleton,interfaces,class,type,get,object,type,return,type,null,type,is,interface,new,class,type,null
AbstractFactoryBean -> @Nullable 	protected Class<?>[] getEarlySingletonInterfaces();1496837955;Return an array of interfaces that a singleton object exposed by this_FactoryBean is supposed to implement, for use with an 'early singleton_proxy' that will be exposed in case of a circular reference._<p>The default implementation returns this FactoryBean's object type,_provided that it is an interface, or {@code null} else. The latter_indicates that early singleton access is not supported by this FactoryBean._This will lead to a FactoryBeanNotInitializedException getting thrown._@return the interfaces to use for 'early singletons',_or {@code null} to indicate a FactoryBeanNotInitializedException_@see org.springframework.beans.factory.FactoryBeanNotInitializedException;@Nullable_	protected Class<?>[] getEarlySingletonInterfaces() {_		Class<?> type = getObjectType()__		return (type != null && type.isInterface() ? new Class<?>[] {type} : null)__	};return,an,array,of,interfaces,that,a,singleton,object,exposed,by,this,factory,bean,is,supposed,to,implement,for,use,with,an,early,singleton,proxy,that,will,be,exposed,in,case,of,a,circular,reference,p,the,default,implementation,returns,this,factory,bean,s,object,type,provided,that,it,is,an,interface,or,code,null,else,the,latter,indicates,that,early,singleton,access,is,not,supported,by,this,factory,bean,this,will,lead,to,a,factory,bean,not,initialized,exception,getting,thrown,return,the,interfaces,to,use,for,early,singletons,or,code,null,to,indicate,a,factory,bean,not,initialized,exception,see,org,springframework,beans,factory,factory,bean,not,initialized,exception;nullable,protected,class,get,early,singleton,interfaces,class,type,get,object,type,return,type,null,type,is,interface,new,class,type,null
AbstractFactoryBean -> @Nullable 	protected Class<?>[] getEarlySingletonInterfaces();1498780456;Return an array of interfaces that a singleton object exposed by this_FactoryBean is supposed to implement, for use with an 'early singleton_proxy' that will be exposed in case of a circular reference._<p>The default implementation returns this FactoryBean's object type,_provided that it is an interface, or {@code null} else. The latter_indicates that early singleton access is not supported by this FactoryBean._This will lead to a FactoryBeanNotInitializedException getting thrown._@return the interfaces to use for 'early singletons',_or {@code null} to indicate a FactoryBeanNotInitializedException_@see org.springframework.beans.factory.FactoryBeanNotInitializedException;@Nullable_	protected Class<?>[] getEarlySingletonInterfaces() {_		Class<?> type = getObjectType()__		return (type != null && type.isInterface() ? new Class<?>[] {type} : null)__	};return,an,array,of,interfaces,that,a,singleton,object,exposed,by,this,factory,bean,is,supposed,to,implement,for,use,with,an,early,singleton,proxy,that,will,be,exposed,in,case,of,a,circular,reference,p,the,default,implementation,returns,this,factory,bean,s,object,type,provided,that,it,is,an,interface,or,code,null,else,the,latter,indicates,that,early,singleton,access,is,not,supported,by,this,factory,bean,this,will,lead,to,a,factory,bean,not,initialized,exception,getting,thrown,return,the,interfaces,to,use,for,early,singletons,or,code,null,to,indicate,a,factory,bean,not,initialized,exception,see,org,springframework,beans,factory,factory,bean,not,initialized,exception;nullable,protected,class,get,early,singleton,interfaces,class,type,get,object,type,return,type,null,type,is,interface,new,class,type,null
AbstractFactoryBean -> @Nullable 	protected Class<?>[] getEarlySingletonInterfaces();1500448076;Return an array of interfaces that a singleton object exposed by this_FactoryBean is supposed to implement, for use with an 'early singleton_proxy' that will be exposed in case of a circular reference._<p>The default implementation returns this FactoryBean's object type,_provided that it is an interface, or {@code null} else. The latter_indicates that early singleton access is not supported by this FactoryBean._This will lead to a FactoryBeanNotInitializedException getting thrown._@return the interfaces to use for 'early singletons',_or {@code null} to indicate a FactoryBeanNotInitializedException_@see org.springframework.beans.factory.FactoryBeanNotInitializedException;@Nullable_	protected Class<?>[] getEarlySingletonInterfaces() {_		Class<?> type = getObjectType()__		return (type != null && type.isInterface() ? new Class<?>[] {type} : null)__	};return,an,array,of,interfaces,that,a,singleton,object,exposed,by,this,factory,bean,is,supposed,to,implement,for,use,with,an,early,singleton,proxy,that,will,be,exposed,in,case,of,a,circular,reference,p,the,default,implementation,returns,this,factory,bean,s,object,type,provided,that,it,is,an,interface,or,code,null,else,the,latter,indicates,that,early,singleton,access,is,not,supported,by,this,factory,bean,this,will,lead,to,a,factory,bean,not,initialized,exception,getting,thrown,return,the,interfaces,to,use,for,early,singletons,or,code,null,to,indicate,a,factory,bean,not,initialized,exception,see,org,springframework,beans,factory,factory,bean,not,initialized,exception;nullable,protected,class,get,early,singleton,interfaces,class,type,get,object,type,return,type,null,type,is,interface,new,class,type,null
AbstractFactoryBean -> @Nullable 	protected Class<?>[] getEarlySingletonInterfaces();1502974979;Return an array of interfaces that a singleton object exposed by this_FactoryBean is supposed to implement, for use with an 'early singleton_proxy' that will be exposed in case of a circular reference._<p>The default implementation returns this FactoryBean's object type,_provided that it is an interface, or {@code null} else. The latter_indicates that early singleton access is not supported by this FactoryBean._This will lead to a FactoryBeanNotInitializedException getting thrown._@return the interfaces to use for 'early singletons',_or {@code null} to indicate a FactoryBeanNotInitializedException_@see org.springframework.beans.factory.FactoryBeanNotInitializedException;@Nullable_	protected Class<?>[] getEarlySingletonInterfaces() {_		Class<?> type = getObjectType()__		return (type != null && type.isInterface() ? new Class<?>[] {type} : null)__	};return,an,array,of,interfaces,that,a,singleton,object,exposed,by,this,factory,bean,is,supposed,to,implement,for,use,with,an,early,singleton,proxy,that,will,be,exposed,in,case,of,a,circular,reference,p,the,default,implementation,returns,this,factory,bean,s,object,type,provided,that,it,is,an,interface,or,code,null,else,the,latter,indicates,that,early,singleton,access,is,not,supported,by,this,factory,bean,this,will,lead,to,a,factory,bean,not,initialized,exception,getting,thrown,return,the,interfaces,to,use,for,early,singletons,or,code,null,to,indicate,a,factory,bean,not,initialized,exception,see,org,springframework,beans,factory,factory,bean,not,initialized,exception;nullable,protected,class,get,early,singleton,interfaces,class,type,get,object,type,return,type,null,type,is,interface,new,class,type,null
AbstractFactoryBean -> @Nullable 	protected Class<?>[] getEarlySingletonInterfaces();1528737477;Return an array of interfaces that a singleton object exposed by this_FactoryBean is supposed to implement, for use with an 'early singleton_proxy' that will be exposed in case of a circular reference._<p>The default implementation returns this FactoryBean's object type,_provided that it is an interface, or {@code null} otherwise. The latter_indicates that early singleton access is not supported by this FactoryBean._This will lead to a FactoryBeanNotInitializedException getting thrown._@return the interfaces to use for 'early singletons',_or {@code null} to indicate a FactoryBeanNotInitializedException_@see org.springframework.beans.factory.FactoryBeanNotInitializedException;@Nullable_	protected Class<?>[] getEarlySingletonInterfaces() {_		Class<?> type = getObjectType()__		return (type != null && type.isInterface() ? new Class<?>[] {type} : null)__	};return,an,array,of,interfaces,that,a,singleton,object,exposed,by,this,factory,bean,is,supposed,to,implement,for,use,with,an,early,singleton,proxy,that,will,be,exposed,in,case,of,a,circular,reference,p,the,default,implementation,returns,this,factory,bean,s,object,type,provided,that,it,is,an,interface,or,code,null,otherwise,the,latter,indicates,that,early,singleton,access,is,not,supported,by,this,factory,bean,this,will,lead,to,a,factory,bean,not,initialized,exception,getting,thrown,return,the,interfaces,to,use,for,early,singletons,or,code,null,to,indicate,a,factory,bean,not,initialized,exception,see,org,springframework,beans,factory,factory,bean,not,initialized,exception;nullable,protected,class,get,early,singleton,interfaces,class,type,get,object,type,return,type,null,type,is,interface,new,class,type,null
AbstractFactoryBean -> @Nullable 	protected Class<?>[] getEarlySingletonInterfaces();1530174524;Return an array of interfaces that a singleton object exposed by this_FactoryBean is supposed to implement, for use with an 'early singleton_proxy' that will be exposed in case of a circular reference._<p>The default implementation returns this FactoryBean's object type,_provided that it is an interface, or {@code null} otherwise. The latter_indicates that early singleton access is not supported by this FactoryBean._This will lead to a FactoryBeanNotInitializedException getting thrown._@return the interfaces to use for 'early singletons',_or {@code null} to indicate a FactoryBeanNotInitializedException_@see org.springframework.beans.factory.FactoryBeanNotInitializedException;@Nullable_	protected Class<?>[] getEarlySingletonInterfaces() {_		Class<?> type = getObjectType()__		return (type != null && type.isInterface() ? new Class<?>[] {type} : null)__	};return,an,array,of,interfaces,that,a,singleton,object,exposed,by,this,factory,bean,is,supposed,to,implement,for,use,with,an,early,singleton,proxy,that,will,be,exposed,in,case,of,a,circular,reference,p,the,default,implementation,returns,this,factory,bean,s,object,type,provided,that,it,is,an,interface,or,code,null,otherwise,the,latter,indicates,that,early,singleton,access,is,not,supported,by,this,factory,bean,this,will,lead,to,a,factory,bean,not,initialized,exception,getting,thrown,return,the,interfaces,to,use,for,early,singletons,or,code,null,to,indicate,a,factory,bean,not,initialized,exception,see,org,springframework,beans,factory,factory,bean,not,initialized,exception;nullable,protected,class,get,early,singleton,interfaces,class,type,get,object,type,return,type,null,type,is,interface,new,class,type,null
AbstractFactoryBean -> @Nullable 	protected Class<?>[] getEarlySingletonInterfaces();1532605718;Return an array of interfaces that a singleton object exposed by this_FactoryBean is supposed to implement, for use with an 'early singleton_proxy' that will be exposed in case of a circular reference._<p>The default implementation returns this FactoryBean's object type,_provided that it is an interface, or {@code null} otherwise. The latter_indicates that early singleton access is not supported by this FactoryBean._This will lead to a FactoryBeanNotInitializedException getting thrown._@return the interfaces to use for 'early singletons',_or {@code null} to indicate a FactoryBeanNotInitializedException_@see org.springframework.beans.factory.FactoryBeanNotInitializedException;@Nullable_	protected Class<?>[] getEarlySingletonInterfaces() {_		Class<?> type = getObjectType()__		return (type != null && type.isInterface() ? new Class<?>[] {type} : null)__	};return,an,array,of,interfaces,that,a,singleton,object,exposed,by,this,factory,bean,is,supposed,to,implement,for,use,with,an,early,singleton,proxy,that,will,be,exposed,in,case,of,a,circular,reference,p,the,default,implementation,returns,this,factory,bean,s,object,type,provided,that,it,is,an,interface,or,code,null,otherwise,the,latter,indicates,that,early,singleton,access,is,not,supported,by,this,factory,bean,this,will,lead,to,a,factory,bean,not,initialized,exception,getting,thrown,return,the,interfaces,to,use,for,early,singletons,or,code,null,to,indicate,a,factory,bean,not,initialized,exception,see,org,springframework,beans,factory,factory,bean,not,initialized,exception;nullable,protected,class,get,early,singleton,interfaces,class,type,get,object,type,return,type,null,type,is,interface,new,class,type,null
AbstractFactoryBean -> @Override 	public abstract Class<?> getObjectType()_;1356735495;This abstract method declaration mirrors the method in the FactoryBean_interface, for a consistent offering of abstract template methods._@see org.springframework.beans.factory.FactoryBean#getObjectType();@Override_	public abstract Class<?> getObjectType()_;this,abstract,method,declaration,mirrors,the,method,in,the,factory,bean,interface,for,a,consistent,offering,of,abstract,template,methods,see,org,springframework,beans,factory,factory,bean,get,object,type;override,public,abstract,class,get,object,type
AbstractFactoryBean -> @Override 	public abstract Class<?> getObjectType()_;1368482696;This abstract method declaration mirrors the method in the FactoryBean_interface, for a consistent offering of abstract template methods._@see org.springframework.beans.factory.FactoryBean#getObjectType();@Override_	public abstract Class<?> getObjectType()_;this,abstract,method,declaration,mirrors,the,method,in,the,factory,bean,interface,for,a,consistent,offering,of,abstract,template,methods,see,org,springframework,beans,factory,factory,bean,get,object,type;override,public,abstract,class,get,object,type
AbstractFactoryBean -> @Override 	public abstract Class<?> getObjectType()_;1385412762;This abstract method declaration mirrors the method in the FactoryBean_interface, for a consistent offering of abstract template methods._@see org.springframework.beans.factory.FactoryBean#getObjectType();@Override_	public abstract Class<?> getObjectType()_;this,abstract,method,declaration,mirrors,the,method,in,the,factory,bean,interface,for,a,consistent,offering,of,abstract,template,methods,see,org,springframework,beans,factory,factory,bean,get,object,type;override,public,abstract,class,get,object,type
AbstractFactoryBean -> @Override 	public abstract Class<?> getObjectType()_;1467983536;This abstract method declaration mirrors the method in the FactoryBean_interface, for a consistent offering of abstract template methods._@see org.springframework.beans.factory.FactoryBean#getObjectType();@Override_	public abstract Class<?> getObjectType()_;this,abstract,method,declaration,mirrors,the,method,in,the,factory,bean,interface,for,a,consistent,offering,of,abstract,template,methods,see,org,springframework,beans,factory,factory,bean,get,object,type;override,public,abstract,class,get,object,type
AbstractFactoryBean -> @Override 	public abstract Class<?> getObjectType()_;1495868221;This abstract method declaration mirrors the method in the FactoryBean_interface, for a consistent offering of abstract template methods._@see org.springframework.beans.factory.FactoryBean#getObjectType();@Override_	public abstract Class<?> getObjectType()_;this,abstract,method,declaration,mirrors,the,method,in,the,factory,bean,interface,for,a,consistent,offering,of,abstract,template,methods,see,org,springframework,beans,factory,factory,bean,get,object,type;override,public,abstract,class,get,object,type
AbstractFactoryBean -> @Override 	public abstract Class<?> getObjectType()_;1496242568;This abstract method declaration mirrors the method in the FactoryBean_interface, for a consistent offering of abstract template methods._@see org.springframework.beans.factory.FactoryBean#getObjectType();@Override_	public abstract Class<?> getObjectType()_;this,abstract,method,declaration,mirrors,the,method,in,the,factory,bean,interface,for,a,consistent,offering,of,abstract,template,methods,see,org,springframework,beans,factory,factory,bean,get,object,type;override,public,abstract,class,get,object,type
AbstractFactoryBean -> @Override 	public abstract Class<?> getObjectType()_;1496837955;This abstract method declaration mirrors the method in the FactoryBean_interface, for a consistent offering of abstract template methods._@see org.springframework.beans.factory.FactoryBean#getObjectType();@Override_	public abstract Class<?> getObjectType()_;this,abstract,method,declaration,mirrors,the,method,in,the,factory,bean,interface,for,a,consistent,offering,of,abstract,template,methods,see,org,springframework,beans,factory,factory,bean,get,object,type;override,public,abstract,class,get,object,type
AbstractFactoryBean -> @Override 	public abstract Class<?> getObjectType()_;1498780456;This abstract method declaration mirrors the method in the FactoryBean_interface, for a consistent offering of abstract template methods._@see org.springframework.beans.factory.FactoryBean#getObjectType();@Override_	public abstract Class<?> getObjectType()_;this,abstract,method,declaration,mirrors,the,method,in,the,factory,bean,interface,for,a,consistent,offering,of,abstract,template,methods,see,org,springframework,beans,factory,factory,bean,get,object,type;override,public,abstract,class,get,object,type
AbstractFactoryBean -> @Override 	public abstract Class<?> getObjectType()_;1500448076;This abstract method declaration mirrors the method in the FactoryBean_interface, for a consistent offering of abstract template methods._@see org.springframework.beans.factory.FactoryBean#getObjectType();@Override_	public abstract Class<?> getObjectType()_;this,abstract,method,declaration,mirrors,the,method,in,the,factory,bean,interface,for,a,consistent,offering,of,abstract,template,methods,see,org,springframework,beans,factory,factory,bean,get,object,type;override,public,abstract,class,get,object,type
