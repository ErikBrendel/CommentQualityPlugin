commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the target class on which the field is defined.  * Only necessary when the target field is static. else,  * a target object needs to be specified anyway.  * @see #setTargetObject  * @see #setTargetField  */ ;/**  * Set the target class on which the field is defined.  * Only necessary when the target field is static. else,  * a target object needs to be specified anyway.  * @see #setTargetObject  * @see #setTargetField  */ public void setTargetClass(@Nullable Class<?> targetClass) {     this.targetClass = targetClass. }
true;public;0;4;/**  * Return the target class on which the field is defined.  */ ;/**  * Return the target class on which the field is defined.  */ @Nullable public Class<?> getTargetClass() {     return this.targetClass. }
true;public;1;3;/**  * Set the target object on which the field is defined.  * Only necessary when the target field is not static.  * else, a target class is sufficient.  * @see #setTargetClass  * @see #setTargetField  */ ;/**  * Set the target object on which the field is defined.  * Only necessary when the target field is not static.  * else, a target class is sufficient.  * @see #setTargetClass  * @see #setTargetField  */ public void setTargetObject(@Nullable Object targetObject) {     this.targetObject = targetObject. }
true;public;0;4;/**  * Return the target object on which the field is defined.  */ ;/**  * Return the target object on which the field is defined.  */ @Nullable public Object getTargetObject() {     return this.targetObject. }
true;public;1;3;/**  * Set the name of the field to be retrieved.  * Refers to either a static field or a non-static field,  * depending on a target object being set.  * @see #setTargetClass  * @see #setTargetObject  */ ;/**  * Set the name of the field to be retrieved.  * Refers to either a static field or a non-static field,  * depending on a target object being set.  * @see #setTargetClass  * @see #setTargetObject  */ public void setTargetField(@Nullable String targetField) {     this.targetField = (targetField != null ? StringUtils.trimAllWhitespace(targetField) : null). }
true;public;0;4;/**  * Return the name of the field to be retrieved.  */ ;/**  * Return the name of the field to be retrieved.  */ @Nullable public String getTargetField() {     return this.targetField. }
true;public;1;3;/**  * Set a fully qualified static field name to retrieve,  * e.g. "example.MyExampleClass.MY_EXAMPLE_FIELD".  * Convenient alternative to specifying targetClass and targetField.  * @see #setTargetClass  * @see #setTargetField  */ ;/**  * Set a fully qualified static field name to retrieve,  * e.g. "example.MyExampleClass.MY_EXAMPLE_FIELD".  * Convenient alternative to specifying targetClass and targetField.  * @see #setTargetClass  * @see #setTargetField  */ public void setStaticField(String staticField) {     this.staticField = StringUtils.trimAllWhitespace(staticField). }
true;public;1;4;/**  * The bean name of this FieldRetrievingFactoryBean will be interpreted  * as "staticField" pattern, if neither "targetClass" nor "targetObject"  * nor "targetField" have been specified.  * This allows for concise bean definitions with just an id/name.  */ ;/**  * The bean name of this FieldRetrievingFactoryBean will be interpreted  * as "staticField" pattern, if neither "targetClass" nor "targetObject"  * nor "targetField" have been specified.  * This allows for concise bean definitions with just an id/name.  */ @Override public void setBeanName(String beanName) {     this.beanName = StringUtils.trimAllWhitespace(BeanFactoryUtils.originalBeanName(beanName)). }
false;public;1;4;;@Override public void setBeanClassLoader(ClassLoader classLoader) {     this.beanClassLoader = classLoader. }
false;public;0;40;;@Override public void afterPropertiesSet() throws ClassNotFoundException, NoSuchFieldException {     if (this.targetClass != null && this.targetObject != null) {         throw new IllegalArgumentException("Specify either targetClass or targetObject, not both").     }     if (this.targetClass == null && this.targetObject == null) {         if (this.targetField != null) {             throw new IllegalArgumentException("Specify targetClass or targetObject in combination with targetField").         }         // If no other property specified, consider bean name as static field expression.         if (this.staticField == null) {             this.staticField = this.beanName.             Assert.state(this.staticField != null, "No target field specified").         }         // Try to parse static field into class and field.         int lastDotIndex = this.staticField.lastIndexOf('.').         if (lastDotIndex == -1 || lastDotIndex == this.staticField.length()) {             throw new IllegalArgumentException("staticField must be a fully qualified class plus static field name: " + "e.g. 'example.MyExampleClass.MY_EXAMPLE_FIELD'").         }         String className = this.staticField.substring(0, lastDotIndex).         String fieldName = this.staticField.substring(lastDotIndex + 1).         this.targetClass = ClassUtils.forName(className, this.beanClassLoader).         this.targetField = fieldName.     } else if (this.targetField == null) {         // Either targetClass or targetObject specified.         throw new IllegalArgumentException("targetField is required").     }     // Try to get the exact method first.     Class<?> targetClass = (this.targetObject != null ? this.targetObject.getClass() : this.targetClass).     this.fieldObject = targetClass.getField(this.targetField). }
false;public;0;16;;@Override @Nullable public Object getObject() throws IllegalAccessException {     if (this.fieldObject == null) {         throw new FactoryBeanNotInitializedException().     }     ReflectionUtils.makeAccessible(this.fieldObject).     if (this.targetObject != null) {         // instance field         return this.fieldObject.get(this.targetObject).     } else {         // class field         return this.fieldObject.get(null).     } }
false;public;0;4;;@Override public Class<?> getObjectType() {     return (this.fieldObject != null ? this.fieldObject.getType() : null). }
false;public;0;4;;@Override public boolean isSingleton() {     return false. }
