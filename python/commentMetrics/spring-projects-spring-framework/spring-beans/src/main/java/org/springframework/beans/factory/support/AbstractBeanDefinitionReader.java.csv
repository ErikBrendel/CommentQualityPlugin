commented;modifiers;parameterAmount;loc;comment;code
false;public,final;0;3;;public final BeanDefinitionRegistry getBeanFactory() {     return this.registry. }
false;public,final;0;4;;@Override public final BeanDefinitionRegistry getRegistry() {     return this.registry. }
true;public;1;3;/**  * Set the ResourceLoader to use for resource locations.  * If specifying a ResourcePatternResolver, the bean definition reader  * will be capable of resolving resource patterns to Resource arrays.  * <p>Default is PathMatchingResourcePatternResolver, also capable of  * resource pattern resolving through the ResourcePatternResolver interface.  * <p>Setting this to {@code null} suggests that absolute resource loading  * is not available for this bean definition reader.  * @see org.springframework.core.io.support.ResourcePatternResolver  * @see org.springframework.core.io.support.PathMatchingResourcePatternResolver  */ ;/**  * Set the ResourceLoader to use for resource locations.  * If specifying a ResourcePatternResolver, the bean definition reader  * will be capable of resolving resource patterns to Resource arrays.  * <p>Default is PathMatchingResourcePatternResolver, also capable of  * resource pattern resolving through the ResourcePatternResolver interface.  * <p>Setting this to {@code null} suggests that absolute resource loading  * is not available for this bean definition reader.  * @see org.springframework.core.io.support.ResourcePatternResolver  * @see org.springframework.core.io.support.PathMatchingResourcePatternResolver  */ public void setResourceLoader(@Nullable ResourceLoader resourceLoader) {     this.resourceLoader = resourceLoader. }
false;public;0;5;;@Override @Nullable public ResourceLoader getResourceLoader() {     return this.resourceLoader. }
true;public;1;3;/**  * Set the ClassLoader to use for bean classes.  * <p>Default is {@code null}, which suggests to not load bean classes  * eagerly but rather to just register bean definitions with class names,  * with the corresponding Classes to be resolved later (or never).  * @see Thread#getContextClassLoader()  */ ;/**  * Set the ClassLoader to use for bean classes.  * <p>Default is {@code null}, which suggests to not load bean classes  * eagerly but rather to just register bean definitions with class names,  * with the corresponding Classes to be resolved later (or never).  * @see Thread#getContextClassLoader()  */ public void setBeanClassLoader(@Nullable ClassLoader beanClassLoader) {     this.beanClassLoader = beanClassLoader. }
false;public;0;5;;@Override @Nullable public ClassLoader getBeanClassLoader() {     return this.beanClassLoader. }
true;public;1;4;/**  * Set the Environment to use when reading bean definitions. Most often used  * for evaluating profile information to determine which bean definitions  * should be read and which should be omitted.  */ ;/**  * Set the Environment to use when reading bean definitions. Most often used  * for evaluating profile information to determine which bean definitions  * should be read and which should be omitted.  */ public void setEnvironment(Environment environment) {     Assert.notNull(environment, "Environment must not be null").     this.environment = environment. }
false;public;0;4;;@Override public Environment getEnvironment() {     return this.environment. }
true;public;1;3;/**  * Set the BeanNameGenerator to use for anonymous beans  * (without explicit bean name specified).  * <p>Default is a {@link DefaultBeanNameGenerator}.  */ ;/**  * Set the BeanNameGenerator to use for anonymous beans  * (without explicit bean name specified).  * <p>Default is a {@link DefaultBeanNameGenerator}.  */ public void setBeanNameGenerator(@Nullable BeanNameGenerator beanNameGenerator) {     this.beanNameGenerator = (beanNameGenerator != null ? beanNameGenerator : new DefaultBeanNameGenerator()). }
false;public;0;4;;@Override public BeanNameGenerator getBeanNameGenerator() {     return this.beanNameGenerator. }
false;public;1;9;;@Override public int loadBeanDefinitions(Resource... resources) throws BeanDefinitionStoreException {     Assert.notNull(resources, "Resource array must not be null").     int count = 0.     for (Resource resource : resources) {         count += loadBeanDefinitions(resource).     }     return count. }
false;public;1;4;;@Override public int loadBeanDefinitions(String location) throws BeanDefinitionStoreException {     return loadBeanDefinitions(location, null). }
true;public;2;38;/**  * Load bean definitions from the specified resource location.  * <p>The location can also be a location pattern, provided that the  * ResourceLoader of this bean definition reader is a ResourcePatternResolver.  * @param location the resource location, to be loaded with the ResourceLoader  * (or ResourcePatternResolver) of this bean definition reader  * @param actualResources a Set to be filled with the actual Resource objects  * that have been resolved during the loading process. May be {@code null}  * to indicate that the caller is not interested in those Resource objects.  * @return the number of bean definitions found  * @throws BeanDefinitionStoreException in case of loading or parsing errors  * @see #getResourceLoader()  * @see #loadBeanDefinitions(org.springframework.core.io.Resource)  * @see #loadBeanDefinitions(org.springframework.core.io.Resource[])  */ ;/**  * Load bean definitions from the specified resource location.  * <p>The location can also be a location pattern, provided that the  * ResourceLoader of this bean definition reader is a ResourcePatternResolver.  * @param location the resource location, to be loaded with the ResourceLoader  * (or ResourcePatternResolver) of this bean definition reader  * @param actualResources a Set to be filled with the actual Resource objects  * that have been resolved during the loading process. May be {@code null}  * to indicate that the caller is not interested in those Resource objects.  * @return the number of bean definitions found  * @throws BeanDefinitionStoreException in case of loading or parsing errors  * @see #getResourceLoader()  * @see #loadBeanDefinitions(org.springframework.core.io.Resource)  * @see #loadBeanDefinitions(org.springframework.core.io.Resource[])  */ public int loadBeanDefinitions(String location, @Nullable Set<Resource> actualResources) throws BeanDefinitionStoreException {     ResourceLoader resourceLoader = getResourceLoader().     if (resourceLoader == null) {         throw new BeanDefinitionStoreException("Cannot load bean definitions from location [" + location + "]: no ResourceLoader available").     }     if (resourceLoader instanceof ResourcePatternResolver) {         // Resource pattern matching available.         try {             Resource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location).             int count = loadBeanDefinitions(resources).             if (actualResources != null) {                 Collections.addAll(actualResources, resources).             }             if (logger.isTraceEnabled()) {                 logger.trace("Loaded " + count + " bean definitions from location pattern [" + location + "]").             }             return count.         } catch (IOException ex) {             throw new BeanDefinitionStoreException("Could not resolve bean definition resource pattern [" + location + "]", ex).         }     } else {         // Can only load single resources by absolute URL.         Resource resource = resourceLoader.getResource(location).         int count = loadBeanDefinitions(resource).         if (actualResources != null) {             actualResources.add(resource).         }         if (logger.isTraceEnabled()) {             logger.trace("Loaded " + count + " bean definitions from location [" + location + "]").         }         return count.     } }
false;public;1;9;;@Override public int loadBeanDefinitions(String... locations) throws BeanDefinitionStoreException {     Assert.notNull(locations, "Location array must not be null").     int count = 0.     for (String location : locations) {         count += loadBeanDefinitions(location).     }     return count. }
