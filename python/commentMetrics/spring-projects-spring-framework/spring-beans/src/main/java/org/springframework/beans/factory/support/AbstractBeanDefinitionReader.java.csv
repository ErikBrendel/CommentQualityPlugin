# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractBeanDefinitionReader -> public int loadBeanDefinitions(String location, @Nullable Set<Resource> actualResources) throws BeanDefinitionStoreException;1495868221;Load bean definitions from the specified resource location._<p>The location can also be a location pattern, provided that the_ResourceLoader of this bean definition reader is a ResourcePatternResolver._@param location the resource location, to be loaded with the ResourceLoader_(or ResourcePatternResolver) of this bean definition reader_@param actualResources a Set to be filled with the actual Resource objects_that have been resolved during the loading process. May be {@code null}_to indicate that the caller is not interested in those Resource objects._@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #getResourceLoader()_@see #loadBeanDefinitions(org.springframework.core.io.Resource)_@see #loadBeanDefinitions(org.springframework.core.io.Resource[]);public int loadBeanDefinitions(String location, @Nullable Set<Resource> actualResources) throws BeanDefinitionStoreException {_		ResourceLoader resourceLoader = getResourceLoader()__		if (resourceLoader == null) {_			throw new BeanDefinitionStoreException(_					"Cannot import bean definitions from location [" + location + "]: no ResourceLoader available")__		}__		if (resourceLoader instanceof ResourcePatternResolver) {_			_			try {_				Resource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location)__				int loadCount = loadBeanDefinitions(resources)__				if (actualResources != null) {_					for (Resource resource : resources) {_						actualResources.add(resource)__					}_				}_				if (logger.isDebugEnabled()) {_					logger.debug("Loaded " + loadCount + " bean definitions from location pattern [" + location + "]")__				}_				return loadCount__			}_			catch (IOException ex) {_				throw new BeanDefinitionStoreException(_						"Could not resolve bean definition resource pattern [" + location + "]", ex)__			}_		}_		else {_			_			Resource resource = resourceLoader.getResource(location)__			int loadCount = loadBeanDefinitions(resource)__			if (actualResources != null) {_				actualResources.add(resource)__			}_			if (logger.isDebugEnabled()) {_				logger.debug("Loaded " + loadCount + " bean definitions from location [" + location + "]")__			}_			return loadCount__		}_	};load,bean,definitions,from,the,specified,resource,location,p,the,location,can,also,be,a,location,pattern,provided,that,the,resource,loader,of,this,bean,definition,reader,is,a,resource,pattern,resolver,param,location,the,resource,location,to,be,loaded,with,the,resource,loader,or,resource,pattern,resolver,of,this,bean,definition,reader,param,actual,resources,a,set,to,be,filled,with,the,actual,resource,objects,that,have,been,resolved,during,the,loading,process,may,be,code,null,to,indicate,that,the,caller,is,not,interested,in,those,resource,objects,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,get,resource,loader,see,load,bean,definitions,org,springframework,core,io,resource,see,load,bean,definitions,org,springframework,core,io,resource;public,int,load,bean,definitions,string,location,nullable,set,resource,actual,resources,throws,bean,definition,store,exception,resource,loader,resource,loader,get,resource,loader,if,resource,loader,null,throw,new,bean,definition,store,exception,cannot,import,bean,definitions,from,location,location,no,resource,loader,available,if,resource,loader,instanceof,resource,pattern,resolver,try,resource,resources,resource,pattern,resolver,resource,loader,get,resources,location,int,load,count,load,bean,definitions,resources,if,actual,resources,null,for,resource,resource,resources,actual,resources,add,resource,if,logger,is,debug,enabled,logger,debug,loaded,load,count,bean,definitions,from,location,pattern,location,return,load,count,catch,ioexception,ex,throw,new,bean,definition,store,exception,could,not,resolve,bean,definition,resource,pattern,location,ex,else,resource,resource,resource,loader,get,resource,location,int,load,count,load,bean,definitions,resource,if,actual,resources,null,actual,resources,add,resource,if,logger,is,debug,enabled,logger,debug,loaded,load,count,bean,definitions,from,location,location,return,load,count
AbstractBeanDefinitionReader -> public int loadBeanDefinitions(String location, @Nullable Set<Resource> actualResources) throws BeanDefinitionStoreException;1496837955;Load bean definitions from the specified resource location._<p>The location can also be a location pattern, provided that the_ResourceLoader of this bean definition reader is a ResourcePatternResolver._@param location the resource location, to be loaded with the ResourceLoader_(or ResourcePatternResolver) of this bean definition reader_@param actualResources a Set to be filled with the actual Resource objects_that have been resolved during the loading process. May be {@code null}_to indicate that the caller is not interested in those Resource objects._@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #getResourceLoader()_@see #loadBeanDefinitions(org.springframework.core.io.Resource)_@see #loadBeanDefinitions(org.springframework.core.io.Resource[]);public int loadBeanDefinitions(String location, @Nullable Set<Resource> actualResources) throws BeanDefinitionStoreException {_		ResourceLoader resourceLoader = getResourceLoader()__		if (resourceLoader == null) {_			throw new BeanDefinitionStoreException(_					"Cannot import bean definitions from location [" + location + "]: no ResourceLoader available")__		}__		if (resourceLoader instanceof ResourcePatternResolver) {_			_			try {_				Resource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location)__				int loadCount = loadBeanDefinitions(resources)__				if (actualResources != null) {_					for (Resource resource : resources) {_						actualResources.add(resource)__					}_				}_				if (logger.isDebugEnabled()) {_					logger.debug("Loaded " + loadCount + " bean definitions from location pattern [" + location + "]")__				}_				return loadCount__			}_			catch (IOException ex) {_				throw new BeanDefinitionStoreException(_						"Could not resolve bean definition resource pattern [" + location + "]", ex)__			}_		}_		else {_			_			Resource resource = resourceLoader.getResource(location)__			int loadCount = loadBeanDefinitions(resource)__			if (actualResources != null) {_				actualResources.add(resource)__			}_			if (logger.isDebugEnabled()) {_				logger.debug("Loaded " + loadCount + " bean definitions from location [" + location + "]")__			}_			return loadCount__		}_	};load,bean,definitions,from,the,specified,resource,location,p,the,location,can,also,be,a,location,pattern,provided,that,the,resource,loader,of,this,bean,definition,reader,is,a,resource,pattern,resolver,param,location,the,resource,location,to,be,loaded,with,the,resource,loader,or,resource,pattern,resolver,of,this,bean,definition,reader,param,actual,resources,a,set,to,be,filled,with,the,actual,resource,objects,that,have,been,resolved,during,the,loading,process,may,be,code,null,to,indicate,that,the,caller,is,not,interested,in,those,resource,objects,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,get,resource,loader,see,load,bean,definitions,org,springframework,core,io,resource,see,load,bean,definitions,org,springframework,core,io,resource;public,int,load,bean,definitions,string,location,nullable,set,resource,actual,resources,throws,bean,definition,store,exception,resource,loader,resource,loader,get,resource,loader,if,resource,loader,null,throw,new,bean,definition,store,exception,cannot,import,bean,definitions,from,location,location,no,resource,loader,available,if,resource,loader,instanceof,resource,pattern,resolver,try,resource,resources,resource,pattern,resolver,resource,loader,get,resources,location,int,load,count,load,bean,definitions,resources,if,actual,resources,null,for,resource,resource,resources,actual,resources,add,resource,if,logger,is,debug,enabled,logger,debug,loaded,load,count,bean,definitions,from,location,pattern,location,return,load,count,catch,ioexception,ex,throw,new,bean,definition,store,exception,could,not,resolve,bean,definition,resource,pattern,location,ex,else,resource,resource,resource,loader,get,resource,location,int,load,count,load,bean,definitions,resource,if,actual,resources,null,actual,resources,add,resource,if,logger,is,debug,enabled,logger,debug,loaded,load,count,bean,definitions,from,location,location,return,load,count
AbstractBeanDefinitionReader -> public int loadBeanDefinitions(String location, @Nullable Set<Resource> actualResources) throws BeanDefinitionStoreException;1497033975;Load bean definitions from the specified resource location._<p>The location can also be a location pattern, provided that the_ResourceLoader of this bean definition reader is a ResourcePatternResolver._@param location the resource location, to be loaded with the ResourceLoader_(or ResourcePatternResolver) of this bean definition reader_@param actualResources a Set to be filled with the actual Resource objects_that have been resolved during the loading process. May be {@code null}_to indicate that the caller is not interested in those Resource objects._@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #getResourceLoader()_@see #loadBeanDefinitions(org.springframework.core.io.Resource)_@see #loadBeanDefinitions(org.springframework.core.io.Resource[]);public int loadBeanDefinitions(String location, @Nullable Set<Resource> actualResources) throws BeanDefinitionStoreException {_		ResourceLoader resourceLoader = getResourceLoader()__		if (resourceLoader == null) {_			throw new BeanDefinitionStoreException(_					"Cannot import bean definitions from location [" + location + "]: no ResourceLoader available")__		}__		if (resourceLoader instanceof ResourcePatternResolver) {_			_			try {_				Resource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location)__				int loadCount = loadBeanDefinitions(resources)__				if (actualResources != null) {_					for (Resource resource : resources) {_						actualResources.add(resource)__					}_				}_				if (logger.isDebugEnabled()) {_					logger.debug("Loaded " + loadCount + " bean definitions from location pattern [" + location + "]")__				}_				return loadCount__			}_			catch (IOException ex) {_				throw new BeanDefinitionStoreException(_						"Could not resolve bean definition resource pattern [" + location + "]", ex)__			}_		}_		else {_			_			Resource resource = resourceLoader.getResource(location)__			int loadCount = loadBeanDefinitions(resource)__			if (actualResources != null) {_				actualResources.add(resource)__			}_			if (logger.isDebugEnabled()) {_				logger.debug("Loaded " + loadCount + " bean definitions from location [" + location + "]")__			}_			return loadCount__		}_	};load,bean,definitions,from,the,specified,resource,location,p,the,location,can,also,be,a,location,pattern,provided,that,the,resource,loader,of,this,bean,definition,reader,is,a,resource,pattern,resolver,param,location,the,resource,location,to,be,loaded,with,the,resource,loader,or,resource,pattern,resolver,of,this,bean,definition,reader,param,actual,resources,a,set,to,be,filled,with,the,actual,resource,objects,that,have,been,resolved,during,the,loading,process,may,be,code,null,to,indicate,that,the,caller,is,not,interested,in,those,resource,objects,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,get,resource,loader,see,load,bean,definitions,org,springframework,core,io,resource,see,load,bean,definitions,org,springframework,core,io,resource;public,int,load,bean,definitions,string,location,nullable,set,resource,actual,resources,throws,bean,definition,store,exception,resource,loader,resource,loader,get,resource,loader,if,resource,loader,null,throw,new,bean,definition,store,exception,cannot,import,bean,definitions,from,location,location,no,resource,loader,available,if,resource,loader,instanceof,resource,pattern,resolver,try,resource,resources,resource,pattern,resolver,resource,loader,get,resources,location,int,load,count,load,bean,definitions,resources,if,actual,resources,null,for,resource,resource,resources,actual,resources,add,resource,if,logger,is,debug,enabled,logger,debug,loaded,load,count,bean,definitions,from,location,pattern,location,return,load,count,catch,ioexception,ex,throw,new,bean,definition,store,exception,could,not,resolve,bean,definition,resource,pattern,location,ex,else,resource,resource,resource,loader,get,resource,location,int,load,count,load,bean,definitions,resource,if,actual,resources,null,actual,resources,add,resource,if,logger,is,debug,enabled,logger,debug,loaded,load,count,bean,definitions,from,location,location,return,load,count
AbstractBeanDefinitionReader -> public int loadBeanDefinitions(String location, @Nullable Set<Resource> actualResources) throws BeanDefinitionStoreException;1498780456;Load bean definitions from the specified resource location._<p>The location can also be a location pattern, provided that the_ResourceLoader of this bean definition reader is a ResourcePatternResolver._@param location the resource location, to be loaded with the ResourceLoader_(or ResourcePatternResolver) of this bean definition reader_@param actualResources a Set to be filled with the actual Resource objects_that have been resolved during the loading process. May be {@code null}_to indicate that the caller is not interested in those Resource objects._@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #getResourceLoader()_@see #loadBeanDefinitions(org.springframework.core.io.Resource)_@see #loadBeanDefinitions(org.springframework.core.io.Resource[]);public int loadBeanDefinitions(String location, @Nullable Set<Resource> actualResources) throws BeanDefinitionStoreException {_		ResourceLoader resourceLoader = getResourceLoader()__		if (resourceLoader == null) {_			throw new BeanDefinitionStoreException(_					"Cannot import bean definitions from location [" + location + "]: no ResourceLoader available")__		}__		if (resourceLoader instanceof ResourcePatternResolver) {_			_			try {_				Resource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location)__				int loadCount = loadBeanDefinitions(resources)__				if (actualResources != null) {_					for (Resource resource : resources) {_						actualResources.add(resource)__					}_				}_				if (logger.isDebugEnabled()) {_					logger.debug("Loaded " + loadCount + " bean definitions from location pattern [" + location + "]")__				}_				return loadCount__			}_			catch (IOException ex) {_				throw new BeanDefinitionStoreException(_						"Could not resolve bean definition resource pattern [" + location + "]", ex)__			}_		}_		else {_			_			Resource resource = resourceLoader.getResource(location)__			int loadCount = loadBeanDefinitions(resource)__			if (actualResources != null) {_				actualResources.add(resource)__			}_			if (logger.isDebugEnabled()) {_				logger.debug("Loaded " + loadCount + " bean definitions from location [" + location + "]")__			}_			return loadCount__		}_	};load,bean,definitions,from,the,specified,resource,location,p,the,location,can,also,be,a,location,pattern,provided,that,the,resource,loader,of,this,bean,definition,reader,is,a,resource,pattern,resolver,param,location,the,resource,location,to,be,loaded,with,the,resource,loader,or,resource,pattern,resolver,of,this,bean,definition,reader,param,actual,resources,a,set,to,be,filled,with,the,actual,resource,objects,that,have,been,resolved,during,the,loading,process,may,be,code,null,to,indicate,that,the,caller,is,not,interested,in,those,resource,objects,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,get,resource,loader,see,load,bean,definitions,org,springframework,core,io,resource,see,load,bean,definitions,org,springframework,core,io,resource;public,int,load,bean,definitions,string,location,nullable,set,resource,actual,resources,throws,bean,definition,store,exception,resource,loader,resource,loader,get,resource,loader,if,resource,loader,null,throw,new,bean,definition,store,exception,cannot,import,bean,definitions,from,location,location,no,resource,loader,available,if,resource,loader,instanceof,resource,pattern,resolver,try,resource,resources,resource,pattern,resolver,resource,loader,get,resources,location,int,load,count,load,bean,definitions,resources,if,actual,resources,null,for,resource,resource,resources,actual,resources,add,resource,if,logger,is,debug,enabled,logger,debug,loaded,load,count,bean,definitions,from,location,pattern,location,return,load,count,catch,ioexception,ex,throw,new,bean,definition,store,exception,could,not,resolve,bean,definition,resource,pattern,location,ex,else,resource,resource,resource,loader,get,resource,location,int,load,count,load,bean,definitions,resource,if,actual,resources,null,actual,resources,add,resource,if,logger,is,debug,enabled,logger,debug,loaded,load,count,bean,definitions,from,location,location,return,load,count
AbstractBeanDefinitionReader -> public int loadBeanDefinitions(String location, @Nullable Set<Resource> actualResources) throws BeanDefinitionStoreException;1500448076;Load bean definitions from the specified resource location._<p>The location can also be a location pattern, provided that the_ResourceLoader of this bean definition reader is a ResourcePatternResolver._@param location the resource location, to be loaded with the ResourceLoader_(or ResourcePatternResolver) of this bean definition reader_@param actualResources a Set to be filled with the actual Resource objects_that have been resolved during the loading process. May be {@code null}_to indicate that the caller is not interested in those Resource objects._@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #getResourceLoader()_@see #loadBeanDefinitions(org.springframework.core.io.Resource)_@see #loadBeanDefinitions(org.springframework.core.io.Resource[]);public int loadBeanDefinitions(String location, @Nullable Set<Resource> actualResources) throws BeanDefinitionStoreException {_		ResourceLoader resourceLoader = getResourceLoader()__		if (resourceLoader == null) {_			throw new BeanDefinitionStoreException(_					"Cannot import bean definitions from location [" + location + "]: no ResourceLoader available")__		}__		if (resourceLoader instanceof ResourcePatternResolver) {_			_			try {_				Resource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location)__				int loadCount = loadBeanDefinitions(resources)__				if (actualResources != null) {_					for (Resource resource : resources) {_						actualResources.add(resource)__					}_				}_				if (logger.isDebugEnabled()) {_					logger.debug("Loaded " + loadCount + " bean definitions from location pattern [" + location + "]")__				}_				return loadCount__			}_			catch (IOException ex) {_				throw new BeanDefinitionStoreException(_						"Could not resolve bean definition resource pattern [" + location + "]", ex)__			}_		}_		else {_			_			Resource resource = resourceLoader.getResource(location)__			int loadCount = loadBeanDefinitions(resource)__			if (actualResources != null) {_				actualResources.add(resource)__			}_			if (logger.isDebugEnabled()) {_				logger.debug("Loaded " + loadCount + " bean definitions from location [" + location + "]")__			}_			return loadCount__		}_	};load,bean,definitions,from,the,specified,resource,location,p,the,location,can,also,be,a,location,pattern,provided,that,the,resource,loader,of,this,bean,definition,reader,is,a,resource,pattern,resolver,param,location,the,resource,location,to,be,loaded,with,the,resource,loader,or,resource,pattern,resolver,of,this,bean,definition,reader,param,actual,resources,a,set,to,be,filled,with,the,actual,resource,objects,that,have,been,resolved,during,the,loading,process,may,be,code,null,to,indicate,that,the,caller,is,not,interested,in,those,resource,objects,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,get,resource,loader,see,load,bean,definitions,org,springframework,core,io,resource,see,load,bean,definitions,org,springframework,core,io,resource;public,int,load,bean,definitions,string,location,nullable,set,resource,actual,resources,throws,bean,definition,store,exception,resource,loader,resource,loader,get,resource,loader,if,resource,loader,null,throw,new,bean,definition,store,exception,cannot,import,bean,definitions,from,location,location,no,resource,loader,available,if,resource,loader,instanceof,resource,pattern,resolver,try,resource,resources,resource,pattern,resolver,resource,loader,get,resources,location,int,load,count,load,bean,definitions,resources,if,actual,resources,null,for,resource,resource,resources,actual,resources,add,resource,if,logger,is,debug,enabled,logger,debug,loaded,load,count,bean,definitions,from,location,pattern,location,return,load,count,catch,ioexception,ex,throw,new,bean,definition,store,exception,could,not,resolve,bean,definition,resource,pattern,location,ex,else,resource,resource,resource,loader,get,resource,location,int,load,count,load,bean,definitions,resource,if,actual,resources,null,actual,resources,add,resource,if,logger,is,debug,enabled,logger,debug,loaded,load,count,bean,definitions,from,location,location,return,load,count
AbstractBeanDefinitionReader -> public int loadBeanDefinitions(String location, @Nullable Set<Resource> actualResources) throws BeanDefinitionStoreException;1530174524;Load bean definitions from the specified resource location._<p>The location can also be a location pattern, provided that the_ResourceLoader of this bean definition reader is a ResourcePatternResolver._@param location the resource location, to be loaded with the ResourceLoader_(or ResourcePatternResolver) of this bean definition reader_@param actualResources a Set to be filled with the actual Resource objects_that have been resolved during the loading process. May be {@code null}_to indicate that the caller is not interested in those Resource objects._@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #getResourceLoader()_@see #loadBeanDefinitions(org.springframework.core.io.Resource)_@see #loadBeanDefinitions(org.springframework.core.io.Resource[]);public int loadBeanDefinitions(String location, @Nullable Set<Resource> actualResources) throws BeanDefinitionStoreException {_		ResourceLoader resourceLoader = getResourceLoader()__		if (resourceLoader == null) {_			throw new BeanDefinitionStoreException(_					"Cannot import bean definitions from location [" + location + "]: no ResourceLoader available")__		}__		if (resourceLoader instanceof ResourcePatternResolver) {_			_			try {_				Resource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location)__				int loadCount = loadBeanDefinitions(resources)__				if (actualResources != null) {_					for (Resource resource : resources) {_						actualResources.add(resource)__					}_				}_				if (logger.isDebugEnabled()) {_					logger.debug("Loaded " + loadCount + " bean definitions from location pattern [" + location + "]")__				}_				return loadCount__			}_			catch (IOException ex) {_				throw new BeanDefinitionStoreException(_						"Could not resolve bean definition resource pattern [" + location + "]", ex)__			}_		}_		else {_			_			Resource resource = resourceLoader.getResource(location)__			int loadCount = loadBeanDefinitions(resource)__			if (actualResources != null) {_				actualResources.add(resource)__			}_			if (logger.isDebugEnabled()) {_				logger.debug("Loaded " + loadCount + " bean definitions from location [" + location + "]")__			}_			return loadCount__		}_	};load,bean,definitions,from,the,specified,resource,location,p,the,location,can,also,be,a,location,pattern,provided,that,the,resource,loader,of,this,bean,definition,reader,is,a,resource,pattern,resolver,param,location,the,resource,location,to,be,loaded,with,the,resource,loader,or,resource,pattern,resolver,of,this,bean,definition,reader,param,actual,resources,a,set,to,be,filled,with,the,actual,resource,objects,that,have,been,resolved,during,the,loading,process,may,be,code,null,to,indicate,that,the,caller,is,not,interested,in,those,resource,objects,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,get,resource,loader,see,load,bean,definitions,org,springframework,core,io,resource,see,load,bean,definitions,org,springframework,core,io,resource;public,int,load,bean,definitions,string,location,nullable,set,resource,actual,resources,throws,bean,definition,store,exception,resource,loader,resource,loader,get,resource,loader,if,resource,loader,null,throw,new,bean,definition,store,exception,cannot,import,bean,definitions,from,location,location,no,resource,loader,available,if,resource,loader,instanceof,resource,pattern,resolver,try,resource,resources,resource,pattern,resolver,resource,loader,get,resources,location,int,load,count,load,bean,definitions,resources,if,actual,resources,null,for,resource,resource,resources,actual,resources,add,resource,if,logger,is,debug,enabled,logger,debug,loaded,load,count,bean,definitions,from,location,pattern,location,return,load,count,catch,ioexception,ex,throw,new,bean,definition,store,exception,could,not,resolve,bean,definition,resource,pattern,location,ex,else,resource,resource,resource,loader,get,resource,location,int,load,count,load,bean,definitions,resource,if,actual,resources,null,actual,resources,add,resource,if,logger,is,debug,enabled,logger,debug,loaded,load,count,bean,definitions,from,location,location,return,load,count
AbstractBeanDefinitionReader -> public int loadBeanDefinitions(String location, @Nullable Set<Resource> actualResources) throws BeanDefinitionStoreException;1532706365;Load bean definitions from the specified resource location._<p>The location can also be a location pattern, provided that the_ResourceLoader of this bean definition reader is a ResourcePatternResolver._@param location the resource location, to be loaded with the ResourceLoader_(or ResourcePatternResolver) of this bean definition reader_@param actualResources a Set to be filled with the actual Resource objects_that have been resolved during the loading process. May be {@code null}_to indicate that the caller is not interested in those Resource objects._@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #getResourceLoader()_@see #loadBeanDefinitions(org.springframework.core.io.Resource)_@see #loadBeanDefinitions(org.springframework.core.io.Resource[]);public int loadBeanDefinitions(String location, @Nullable Set<Resource> actualResources) throws BeanDefinitionStoreException {_		ResourceLoader resourceLoader = getResourceLoader()__		if (resourceLoader == null) {_			throw new BeanDefinitionStoreException(_					"Cannot load bean definitions from location [" + location + "]: no ResourceLoader available")__		}__		if (resourceLoader instanceof ResourcePatternResolver) {_			_			try {_				Resource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location)__				int count = loadBeanDefinitions(resources)__				if (actualResources != null) {_					Collections.addAll(actualResources, resources)__				}_				if (logger.isTraceEnabled()) {_					logger.trace("Loaded " + count + " bean definitions from location pattern [" + location + "]")__				}_				return count__			}_			catch (IOException ex) {_				throw new BeanDefinitionStoreException(_						"Could not resolve bean definition resource pattern [" + location + "]", ex)__			}_		}_		else {_			_			Resource resource = resourceLoader.getResource(location)__			int count = loadBeanDefinitions(resource)__			if (actualResources != null) {_				actualResources.add(resource)__			}_			if (logger.isTraceEnabled()) {_				logger.trace("Loaded " + count + " bean definitions from location [" + location + "]")__			}_			return count__		}_	};load,bean,definitions,from,the,specified,resource,location,p,the,location,can,also,be,a,location,pattern,provided,that,the,resource,loader,of,this,bean,definition,reader,is,a,resource,pattern,resolver,param,location,the,resource,location,to,be,loaded,with,the,resource,loader,or,resource,pattern,resolver,of,this,bean,definition,reader,param,actual,resources,a,set,to,be,filled,with,the,actual,resource,objects,that,have,been,resolved,during,the,loading,process,may,be,code,null,to,indicate,that,the,caller,is,not,interested,in,those,resource,objects,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,get,resource,loader,see,load,bean,definitions,org,springframework,core,io,resource,see,load,bean,definitions,org,springframework,core,io,resource;public,int,load,bean,definitions,string,location,nullable,set,resource,actual,resources,throws,bean,definition,store,exception,resource,loader,resource,loader,get,resource,loader,if,resource,loader,null,throw,new,bean,definition,store,exception,cannot,load,bean,definitions,from,location,location,no,resource,loader,available,if,resource,loader,instanceof,resource,pattern,resolver,try,resource,resources,resource,pattern,resolver,resource,loader,get,resources,location,int,count,load,bean,definitions,resources,if,actual,resources,null,collections,add,all,actual,resources,resources,if,logger,is,trace,enabled,logger,trace,loaded,count,bean,definitions,from,location,pattern,location,return,count,catch,ioexception,ex,throw,new,bean,definition,store,exception,could,not,resolve,bean,definition,resource,pattern,location,ex,else,resource,resource,resource,loader,get,resource,location,int,count,load,bean,definitions,resource,if,actual,resources,null,actual,resources,add,resource,if,logger,is,trace,enabled,logger,trace,loaded,count,bean,definitions,from,location,location,return,count
AbstractBeanDefinitionReader -> public void setBeanClassLoader(ClassLoader beanClassLoader);1328020251;Set the ClassLoader to use for bean classes._<p>Default is <code>null</code>, which suggests to not load bean classes_eagerly but rather to just register bean definitions with class names,_with the corresponding Classes to be resolved later (or never)._@see java.lang.Thread#getContextClassLoader();public void setBeanClassLoader(ClassLoader beanClassLoader) {_		this.beanClassLoader = beanClassLoader__	};set,the,class,loader,to,use,for,bean,classes,p,default,is,code,null,code,which,suggests,to,not,load,bean,classes,eagerly,but,rather,to,just,register,bean,definitions,with,class,names,with,the,corresponding,classes,to,be,resolved,later,or,never,see,java,lang,thread,get,context,class,loader;public,void,set,bean,class,loader,class,loader,bean,class,loader,this,bean,class,loader,bean,class,loader
AbstractBeanDefinitionReader -> public void setBeanClassLoader(ClassLoader beanClassLoader);1356735495;Set the ClassLoader to use for bean classes._<p>Default is {@code null}, which suggests to not load bean classes_eagerly but rather to just register bean definitions with class names,_with the corresponding Classes to be resolved later (or never)._@see Thread#getContextClassLoader();public void setBeanClassLoader(ClassLoader beanClassLoader) {_		this.beanClassLoader = beanClassLoader__	};set,the,class,loader,to,use,for,bean,classes,p,default,is,code,null,which,suggests,to,not,load,bean,classes,eagerly,but,rather,to,just,register,bean,definitions,with,class,names,with,the,corresponding,classes,to,be,resolved,later,or,never,see,thread,get,context,class,loader;public,void,set,bean,class,loader,class,loader,bean,class,loader,this,bean,class,loader,bean,class,loader
AbstractBeanDefinitionReader -> public void setBeanClassLoader(ClassLoader beanClassLoader);1357119239;Set the ClassLoader to use for bean classes._<p>Default is {@code null}, which suggests to not load bean classes_eagerly but rather to just register bean definitions with class names,_with the corresponding Classes to be resolved later (or never)._@see Thread#getContextClassLoader();public void setBeanClassLoader(ClassLoader beanClassLoader) {_		this.beanClassLoader = beanClassLoader__	};set,the,class,loader,to,use,for,bean,classes,p,default,is,code,null,which,suggests,to,not,load,bean,classes,eagerly,but,rather,to,just,register,bean,definitions,with,class,names,with,the,corresponding,classes,to,be,resolved,later,or,never,see,thread,get,context,class,loader;public,void,set,bean,class,loader,class,loader,bean,class,loader,this,bean,class,loader,bean,class,loader
AbstractBeanDefinitionReader -> public void setBeanClassLoader(ClassLoader beanClassLoader);1368482696;Set the ClassLoader to use for bean classes._<p>Default is {@code null}, which suggests to not load bean classes_eagerly but rather to just register bean definitions with class names,_with the corresponding Classes to be resolved later (or never)._@see Thread#getContextClassLoader();public void setBeanClassLoader(ClassLoader beanClassLoader) {_		this.beanClassLoader = beanClassLoader__	};set,the,class,loader,to,use,for,bean,classes,p,default,is,code,null,which,suggests,to,not,load,bean,classes,eagerly,but,rather,to,just,register,bean,definitions,with,class,names,with,the,corresponding,classes,to,be,resolved,later,or,never,see,thread,get,context,class,loader;public,void,set,bean,class,loader,class,loader,bean,class,loader,this,bean,class,loader,bean,class,loader
AbstractBeanDefinitionReader -> public void setBeanClassLoader(ClassLoader beanClassLoader);1368654092;Set the ClassLoader to use for bean classes._<p>Default is {@code null}, which suggests to not load bean classes_eagerly but rather to just register bean definitions with class names,_with the corresponding Classes to be resolved later (or never)._@see Thread#getContextClassLoader();public void setBeanClassLoader(ClassLoader beanClassLoader) {_		this.beanClassLoader = beanClassLoader__	};set,the,class,loader,to,use,for,bean,classes,p,default,is,code,null,which,suggests,to,not,load,bean,classes,eagerly,but,rather,to,just,register,bean,definitions,with,class,names,with,the,corresponding,classes,to,be,resolved,later,or,never,see,thread,get,context,class,loader;public,void,set,bean,class,loader,class,loader,bean,class,loader,this,bean,class,loader,bean,class,loader
AbstractBeanDefinitionReader -> public void setBeanClassLoader(ClassLoader beanClassLoader);1413848647;Set the ClassLoader to use for bean classes._<p>Default is {@code null}, which suggests to not load bean classes_eagerly but rather to just register bean definitions with class names,_with the corresponding Classes to be resolved later (or never)._@see Thread#getContextClassLoader();public void setBeanClassLoader(ClassLoader beanClassLoader) {_		this.beanClassLoader = beanClassLoader__	};set,the,class,loader,to,use,for,bean,classes,p,default,is,code,null,which,suggests,to,not,load,bean,classes,eagerly,but,rather,to,just,register,bean,definitions,with,class,names,with,the,corresponding,classes,to,be,resolved,later,or,never,see,thread,get,context,class,loader;public,void,set,bean,class,loader,class,loader,bean,class,loader,this,bean,class,loader,bean,class,loader
AbstractBeanDefinitionReader -> public void setBeanClassLoader(ClassLoader beanClassLoader);1461047077;Set the ClassLoader to use for bean classes._<p>Default is {@code null}, which suggests to not load bean classes_eagerly but rather to just register bean definitions with class names,_with the corresponding Classes to be resolved later (or never)._@see Thread#getContextClassLoader();public void setBeanClassLoader(ClassLoader beanClassLoader) {_		this.beanClassLoader = beanClassLoader__	};set,the,class,loader,to,use,for,bean,classes,p,default,is,code,null,which,suggests,to,not,load,bean,classes,eagerly,but,rather,to,just,register,bean,definitions,with,class,names,with,the,corresponding,classes,to,be,resolved,later,or,never,see,thread,get,context,class,loader;public,void,set,bean,class,loader,class,loader,bean,class,loader,this,bean,class,loader,bean,class,loader
AbstractBeanDefinitionReader -> public void setBeanClassLoader(ClassLoader beanClassLoader);1495868221;Set the ClassLoader to use for bean classes._<p>Default is {@code null}, which suggests to not load bean classes_eagerly but rather to just register bean definitions with class names,_with the corresponding Classes to be resolved later (or never)._@see Thread#getContextClassLoader();public void setBeanClassLoader(ClassLoader beanClassLoader) {_		this.beanClassLoader = beanClassLoader__	};set,the,class,loader,to,use,for,bean,classes,p,default,is,code,null,which,suggests,to,not,load,bean,classes,eagerly,but,rather,to,just,register,bean,definitions,with,class,names,with,the,corresponding,classes,to,be,resolved,later,or,never,see,thread,get,context,class,loader;public,void,set,bean,class,loader,class,loader,bean,class,loader,this,bean,class,loader,bean,class,loader
AbstractBeanDefinitionReader -> public void setBeanClassLoader(ClassLoader beanClassLoader);1496837955;Set the ClassLoader to use for bean classes._<p>Default is {@code null}, which suggests to not load bean classes_eagerly but rather to just register bean definitions with class names,_with the corresponding Classes to be resolved later (or never)._@see Thread#getContextClassLoader();public void setBeanClassLoader(ClassLoader beanClassLoader) {_		this.beanClassLoader = beanClassLoader__	};set,the,class,loader,to,use,for,bean,classes,p,default,is,code,null,which,suggests,to,not,load,bean,classes,eagerly,but,rather,to,just,register,bean,definitions,with,class,names,with,the,corresponding,classes,to,be,resolved,later,or,never,see,thread,get,context,class,loader;public,void,set,bean,class,loader,class,loader,bean,class,loader,this,bean,class,loader,bean,class,loader
AbstractBeanDefinitionReader -> public void setEnvironment(Environment environment);1328020251;Set the Environment to use when reading bean definitions. Most often used_for evaluating profile information to determine which bean definitions_should be read and which should be omitted.;public void setEnvironment(Environment environment) {_		this.environment = environment__	};set,the,environment,to,use,when,reading,bean,definitions,most,often,used,for,evaluating,profile,information,to,determine,which,bean,definitions,should,be,read,and,which,should,be,omitted;public,void,set,environment,environment,environment,this,environment,environment
AbstractBeanDefinitionReader -> public void setEnvironment(Environment environment);1356735495;Set the Environment to use when reading bean definitions. Most often used_for evaluating profile information to determine which bean definitions_should be read and which should be omitted.;public void setEnvironment(Environment environment) {_		this.environment = environment__	};set,the,environment,to,use,when,reading,bean,definitions,most,often,used,for,evaluating,profile,information,to,determine,which,bean,definitions,should,be,read,and,which,should,be,omitted;public,void,set,environment,environment,environment,this,environment,environment
AbstractBeanDefinitionReader -> public void setEnvironment(Environment environment);1357119239;Set the Environment to use when reading bean definitions. Most often used_for evaluating profile information to determine which bean definitions_should be read and which should be omitted.;public void setEnvironment(Environment environment) {_		this.environment = environment__	};set,the,environment,to,use,when,reading,bean,definitions,most,often,used,for,evaluating,profile,information,to,determine,which,bean,definitions,should,be,read,and,which,should,be,omitted;public,void,set,environment,environment,environment,this,environment,environment
AbstractBeanDefinitionReader -> public void setEnvironment(Environment environment);1368482696;Set the Environment to use when reading bean definitions. Most often used_for evaluating profile information to determine which bean definitions_should be read and which should be omitted.;public void setEnvironment(Environment environment) {_		this.environment = environment__	};set,the,environment,to,use,when,reading,bean,definitions,most,often,used,for,evaluating,profile,information,to,determine,which,bean,definitions,should,be,read,and,which,should,be,omitted;public,void,set,environment,environment,environment,this,environment,environment
AbstractBeanDefinitionReader -> public void setEnvironment(Environment environment);1368654092;Set the Environment to use when reading bean definitions. Most often used_for evaluating profile information to determine which bean definitions_should be read and which should be omitted.;public void setEnvironment(Environment environment) {_		this.environment = environment__	};set,the,environment,to,use,when,reading,bean,definitions,most,often,used,for,evaluating,profile,information,to,determine,which,bean,definitions,should,be,read,and,which,should,be,omitted;public,void,set,environment,environment,environment,this,environment,environment
AbstractBeanDefinitionReader -> public void setEnvironment(Environment environment);1413848647;Set the Environment to use when reading bean definitions. Most often used_for evaluating profile information to determine which bean definitions_should be read and which should be omitted.;public void setEnvironment(Environment environment) {_		this.environment = environment__	};set,the,environment,to,use,when,reading,bean,definitions,most,often,used,for,evaluating,profile,information,to,determine,which,bean,definitions,should,be,read,and,which,should,be,omitted;public,void,set,environment,environment,environment,this,environment,environment
AbstractBeanDefinitionReader -> public void setEnvironment(Environment environment);1461047077;Set the Environment to use when reading bean definitions. Most often used_for evaluating profile information to determine which bean definitions_should be read and which should be omitted.;public void setEnvironment(Environment environment) {_		this.environment = environment__	};set,the,environment,to,use,when,reading,bean,definitions,most,often,used,for,evaluating,profile,information,to,determine,which,bean,definitions,should,be,read,and,which,should,be,omitted;public,void,set,environment,environment,environment,this,environment,environment
AbstractBeanDefinitionReader -> public void setEnvironment(Environment environment);1495868221;Set the Environment to use when reading bean definitions. Most often used_for evaluating profile information to determine which bean definitions_should be read and which should be omitted.;public void setEnvironment(Environment environment) {_		this.environment = environment__	};set,the,environment,to,use,when,reading,bean,definitions,most,often,used,for,evaluating,profile,information,to,determine,which,bean,definitions,should,be,read,and,which,should,be,omitted;public,void,set,environment,environment,environment,this,environment,environment
AbstractBeanDefinitionReader -> public void setEnvironment(Environment environment);1496837955;Set the Environment to use when reading bean definitions. Most often used_for evaluating profile information to determine which bean definitions_should be read and which should be omitted.;public void setEnvironment(Environment environment) {_		Assert.notNull(environment, "Environment must not be null")__		this.environment = environment__	};set,the,environment,to,use,when,reading,bean,definitions,most,often,used,for,evaluating,profile,information,to,determine,which,bean,definitions,should,be,read,and,which,should,be,omitted;public,void,set,environment,environment,environment,assert,not,null,environment,environment,must,not,be,null,this,environment,environment
AbstractBeanDefinitionReader -> public void setEnvironment(Environment environment);1497033975;Set the Environment to use when reading bean definitions. Most often used_for evaluating profile information to determine which bean definitions_should be read and which should be omitted.;public void setEnvironment(Environment environment) {_		Assert.notNull(environment, "Environment must not be null")__		this.environment = environment__	};set,the,environment,to,use,when,reading,bean,definitions,most,often,used,for,evaluating,profile,information,to,determine,which,bean,definitions,should,be,read,and,which,should,be,omitted;public,void,set,environment,environment,environment,assert,not,null,environment,environment,must,not,be,null,this,environment,environment
AbstractBeanDefinitionReader -> public void setEnvironment(Environment environment);1498780456;Set the Environment to use when reading bean definitions. Most often used_for evaluating profile information to determine which bean definitions_should be read and which should be omitted.;public void setEnvironment(Environment environment) {_		Assert.notNull(environment, "Environment must not be null")__		this.environment = environment__	};set,the,environment,to,use,when,reading,bean,definitions,most,often,used,for,evaluating,profile,information,to,determine,which,bean,definitions,should,be,read,and,which,should,be,omitted;public,void,set,environment,environment,environment,assert,not,null,environment,environment,must,not,be,null,this,environment,environment
AbstractBeanDefinitionReader -> public void setEnvironment(Environment environment);1500448076;Set the Environment to use when reading bean definitions. Most often used_for evaluating profile information to determine which bean definitions_should be read and which should be omitted.;public void setEnvironment(Environment environment) {_		Assert.notNull(environment, "Environment must not be null")__		this.environment = environment__	};set,the,environment,to,use,when,reading,bean,definitions,most,often,used,for,evaluating,profile,information,to,determine,which,bean,definitions,should,be,read,and,which,should,be,omitted;public,void,set,environment,environment,environment,assert,not,null,environment,environment,must,not,be,null,this,environment,environment
AbstractBeanDefinitionReader -> public void setEnvironment(Environment environment);1530174524;Set the Environment to use when reading bean definitions. Most often used_for evaluating profile information to determine which bean definitions_should be read and which should be omitted.;public void setEnvironment(Environment environment) {_		Assert.notNull(environment, "Environment must not be null")__		this.environment = environment__	};set,the,environment,to,use,when,reading,bean,definitions,most,often,used,for,evaluating,profile,information,to,determine,which,bean,definitions,should,be,read,and,which,should,be,omitted;public,void,set,environment,environment,environment,assert,not,null,environment,environment,must,not,be,null,this,environment,environment
AbstractBeanDefinitionReader -> public void setEnvironment(Environment environment);1532706365;Set the Environment to use when reading bean definitions. Most often used_for evaluating profile information to determine which bean definitions_should be read and which should be omitted.;public void setEnvironment(Environment environment) {_		Assert.notNull(environment, "Environment must not be null")__		this.environment = environment__	};set,the,environment,to,use,when,reading,bean,definitions,most,often,used,for,evaluating,profile,information,to,determine,which,bean,definitions,should,be,read,and,which,should,be,omitted;public,void,set,environment,environment,environment,assert,not,null,environment,environment,must,not,be,null,this,environment,environment
AbstractBeanDefinitionReader -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1328020251;Set the BeanNameGenerator to use for anonymous beans_(without explicit bean name specified)._<p>Default is a {@link DefaultBeanNameGenerator}.;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = (beanNameGenerator != null ? beanNameGenerator : new DefaultBeanNameGenerator())__	};set,the,bean,name,generator,to,use,for,anonymous,beans,without,explicit,bean,name,specified,p,default,is,a,link,default,bean,name,generator;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator,null,bean,name,generator,new,default,bean,name,generator
AbstractBeanDefinitionReader -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1356735495;Set the BeanNameGenerator to use for anonymous beans_(without explicit bean name specified)._<p>Default is a {@link DefaultBeanNameGenerator}.;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = (beanNameGenerator != null ? beanNameGenerator : new DefaultBeanNameGenerator())__	};set,the,bean,name,generator,to,use,for,anonymous,beans,without,explicit,bean,name,specified,p,default,is,a,link,default,bean,name,generator;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator,null,bean,name,generator,new,default,bean,name,generator
AbstractBeanDefinitionReader -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1357119239;Set the BeanNameGenerator to use for anonymous beans_(without explicit bean name specified)._<p>Default is a {@link DefaultBeanNameGenerator}.;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = (beanNameGenerator != null ? beanNameGenerator : new DefaultBeanNameGenerator())__	};set,the,bean,name,generator,to,use,for,anonymous,beans,without,explicit,bean,name,specified,p,default,is,a,link,default,bean,name,generator;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator,null,bean,name,generator,new,default,bean,name,generator
AbstractBeanDefinitionReader -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1368482696;Set the BeanNameGenerator to use for anonymous beans_(without explicit bean name specified)._<p>Default is a {@link DefaultBeanNameGenerator}.;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = (beanNameGenerator != null ? beanNameGenerator : new DefaultBeanNameGenerator())__	};set,the,bean,name,generator,to,use,for,anonymous,beans,without,explicit,bean,name,specified,p,default,is,a,link,default,bean,name,generator;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator,null,bean,name,generator,new,default,bean,name,generator
AbstractBeanDefinitionReader -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1368654092;Set the BeanNameGenerator to use for anonymous beans_(without explicit bean name specified)._<p>Default is a {@link DefaultBeanNameGenerator}.;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = (beanNameGenerator != null ? beanNameGenerator : new DefaultBeanNameGenerator())__	};set,the,bean,name,generator,to,use,for,anonymous,beans,without,explicit,bean,name,specified,p,default,is,a,link,default,bean,name,generator;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator,null,bean,name,generator,new,default,bean,name,generator
AbstractBeanDefinitionReader -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1413848647;Set the BeanNameGenerator to use for anonymous beans_(without explicit bean name specified)._<p>Default is a {@link DefaultBeanNameGenerator}.;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = (beanNameGenerator != null ? beanNameGenerator : new DefaultBeanNameGenerator())__	};set,the,bean,name,generator,to,use,for,anonymous,beans,without,explicit,bean,name,specified,p,default,is,a,link,default,bean,name,generator;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator,null,bean,name,generator,new,default,bean,name,generator
AbstractBeanDefinitionReader -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1461047077;Set the BeanNameGenerator to use for anonymous beans_(without explicit bean name specified)._<p>Default is a {@link DefaultBeanNameGenerator}.;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = (beanNameGenerator != null ? beanNameGenerator : new DefaultBeanNameGenerator())__	};set,the,bean,name,generator,to,use,for,anonymous,beans,without,explicit,bean,name,specified,p,default,is,a,link,default,bean,name,generator;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator,null,bean,name,generator,new,default,bean,name,generator
AbstractBeanDefinitionReader -> public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator);1495868221;Set the BeanNameGenerator to use for anonymous beans_(without explicit bean name specified)._<p>Default is a {@link DefaultBeanNameGenerator}.;public void setBeanNameGenerator(BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = (beanNameGenerator != null ? beanNameGenerator : new DefaultBeanNameGenerator())__	};set,the,bean,name,generator,to,use,for,anonymous,beans,without,explicit,bean,name,specified,p,default,is,a,link,default,bean,name,generator;public,void,set,bean,name,generator,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator,null,bean,name,generator,new,default,bean,name,generator
AbstractBeanDefinitionReader -> public int loadBeanDefinitions(String location, Set<Resource> actualResources) throws BeanDefinitionStoreException;1328020251;Load bean definitions from the specified resource location._<p>The location can also be a location pattern, provided that the_ResourceLoader of this bean definition reader is a ResourcePatternResolver._@param location the resource location, to be loaded with the ResourceLoader_(or ResourcePatternResolver) of this bean definition reader_@param actualResources a Set to be filled with the actual Resource objects_that have been resolved during the loading process. May be <code>null</code>_to indicate that the caller is not interested in those Resource objects._@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #getResourceLoader()_@see #loadBeanDefinitions(org.springframework.core.io.Resource)_@see #loadBeanDefinitions(org.springframework.core.io.Resource[]);public int loadBeanDefinitions(String location, Set<Resource> actualResources) throws BeanDefinitionStoreException {_		ResourceLoader resourceLoader = getResourceLoader()__		if (resourceLoader == null) {_			throw new BeanDefinitionStoreException(_					"Cannot import bean definitions from location [" + location + "]: no ResourceLoader available")__		}__		if (resourceLoader instanceof ResourcePatternResolver) {_			_			try {_				Resource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location)__				int loadCount = loadBeanDefinitions(resources)__				if (actualResources != null) {_					for (Resource resource : resources) {_						actualResources.add(resource)__					}_				}_				if (logger.isDebugEnabled()) {_					logger.debug("Loaded " + loadCount + " bean definitions from location pattern [" + location + "]")__				}_				return loadCount__			}_			catch (IOException ex) {_				throw new BeanDefinitionStoreException(_						"Could not resolve bean definition resource pattern [" + location + "]", ex)__			}_		}_		else {_			_			Resource resource = resourceLoader.getResource(location)__			int loadCount = loadBeanDefinitions(resource)__			if (actualResources != null) {_				actualResources.add(resource)__			}_			if (logger.isDebugEnabled()) {_				logger.debug("Loaded " + loadCount + " bean definitions from location [" + location + "]")__			}_			return loadCount__		}_	};load,bean,definitions,from,the,specified,resource,location,p,the,location,can,also,be,a,location,pattern,provided,that,the,resource,loader,of,this,bean,definition,reader,is,a,resource,pattern,resolver,param,location,the,resource,location,to,be,loaded,with,the,resource,loader,or,resource,pattern,resolver,of,this,bean,definition,reader,param,actual,resources,a,set,to,be,filled,with,the,actual,resource,objects,that,have,been,resolved,during,the,loading,process,may,be,code,null,code,to,indicate,that,the,caller,is,not,interested,in,those,resource,objects,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,get,resource,loader,see,load,bean,definitions,org,springframework,core,io,resource,see,load,bean,definitions,org,springframework,core,io,resource;public,int,load,bean,definitions,string,location,set,resource,actual,resources,throws,bean,definition,store,exception,resource,loader,resource,loader,get,resource,loader,if,resource,loader,null,throw,new,bean,definition,store,exception,cannot,import,bean,definitions,from,location,location,no,resource,loader,available,if,resource,loader,instanceof,resource,pattern,resolver,try,resource,resources,resource,pattern,resolver,resource,loader,get,resources,location,int,load,count,load,bean,definitions,resources,if,actual,resources,null,for,resource,resource,resources,actual,resources,add,resource,if,logger,is,debug,enabled,logger,debug,loaded,load,count,bean,definitions,from,location,pattern,location,return,load,count,catch,ioexception,ex,throw,new,bean,definition,store,exception,could,not,resolve,bean,definition,resource,pattern,location,ex,else,resource,resource,resource,loader,get,resource,location,int,load,count,load,bean,definitions,resource,if,actual,resources,null,actual,resources,add,resource,if,logger,is,debug,enabled,logger,debug,loaded,load,count,bean,definitions,from,location,location,return,load,count
AbstractBeanDefinitionReader -> public int loadBeanDefinitions(String location, Set<Resource> actualResources) throws BeanDefinitionStoreException;1356735495;Load bean definitions from the specified resource location._<p>The location can also be a location pattern, provided that the_ResourceLoader of this bean definition reader is a ResourcePatternResolver._@param location the resource location, to be loaded with the ResourceLoader_(or ResourcePatternResolver) of this bean definition reader_@param actualResources a Set to be filled with the actual Resource objects_that have been resolved during the loading process. May be {@code null}_to indicate that the caller is not interested in those Resource objects._@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #getResourceLoader()_@see #loadBeanDefinitions(org.springframework.core.io.Resource)_@see #loadBeanDefinitions(org.springframework.core.io.Resource[]);public int loadBeanDefinitions(String location, Set<Resource> actualResources) throws BeanDefinitionStoreException {_		ResourceLoader resourceLoader = getResourceLoader()__		if (resourceLoader == null) {_			throw new BeanDefinitionStoreException(_					"Cannot import bean definitions from location [" + location + "]: no ResourceLoader available")__		}__		if (resourceLoader instanceof ResourcePatternResolver) {_			_			try {_				Resource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location)__				int loadCount = loadBeanDefinitions(resources)__				if (actualResources != null) {_					for (Resource resource : resources) {_						actualResources.add(resource)__					}_				}_				if (logger.isDebugEnabled()) {_					logger.debug("Loaded " + loadCount + " bean definitions from location pattern [" + location + "]")__				}_				return loadCount__			}_			catch (IOException ex) {_				throw new BeanDefinitionStoreException(_						"Could not resolve bean definition resource pattern [" + location + "]", ex)__			}_		}_		else {_			_			Resource resource = resourceLoader.getResource(location)__			int loadCount = loadBeanDefinitions(resource)__			if (actualResources != null) {_				actualResources.add(resource)__			}_			if (logger.isDebugEnabled()) {_				logger.debug("Loaded " + loadCount + " bean definitions from location [" + location + "]")__			}_			return loadCount__		}_	};load,bean,definitions,from,the,specified,resource,location,p,the,location,can,also,be,a,location,pattern,provided,that,the,resource,loader,of,this,bean,definition,reader,is,a,resource,pattern,resolver,param,location,the,resource,location,to,be,loaded,with,the,resource,loader,or,resource,pattern,resolver,of,this,bean,definition,reader,param,actual,resources,a,set,to,be,filled,with,the,actual,resource,objects,that,have,been,resolved,during,the,loading,process,may,be,code,null,to,indicate,that,the,caller,is,not,interested,in,those,resource,objects,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,get,resource,loader,see,load,bean,definitions,org,springframework,core,io,resource,see,load,bean,definitions,org,springframework,core,io,resource;public,int,load,bean,definitions,string,location,set,resource,actual,resources,throws,bean,definition,store,exception,resource,loader,resource,loader,get,resource,loader,if,resource,loader,null,throw,new,bean,definition,store,exception,cannot,import,bean,definitions,from,location,location,no,resource,loader,available,if,resource,loader,instanceof,resource,pattern,resolver,try,resource,resources,resource,pattern,resolver,resource,loader,get,resources,location,int,load,count,load,bean,definitions,resources,if,actual,resources,null,for,resource,resource,resources,actual,resources,add,resource,if,logger,is,debug,enabled,logger,debug,loaded,load,count,bean,definitions,from,location,pattern,location,return,load,count,catch,ioexception,ex,throw,new,bean,definition,store,exception,could,not,resolve,bean,definition,resource,pattern,location,ex,else,resource,resource,resource,loader,get,resource,location,int,load,count,load,bean,definitions,resource,if,actual,resources,null,actual,resources,add,resource,if,logger,is,debug,enabled,logger,debug,loaded,load,count,bean,definitions,from,location,location,return,load,count
AbstractBeanDefinitionReader -> public int loadBeanDefinitions(String location, Set<Resource> actualResources) throws BeanDefinitionStoreException;1357119239;Load bean definitions from the specified resource location._<p>The location can also be a location pattern, provided that the_ResourceLoader of this bean definition reader is a ResourcePatternResolver._@param location the resource location, to be loaded with the ResourceLoader_(or ResourcePatternResolver) of this bean definition reader_@param actualResources a Set to be filled with the actual Resource objects_that have been resolved during the loading process. May be {@code null}_to indicate that the caller is not interested in those Resource objects._@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #getResourceLoader()_@see #loadBeanDefinitions(org.springframework.core.io.Resource)_@see #loadBeanDefinitions(org.springframework.core.io.Resource[]);public int loadBeanDefinitions(String location, Set<Resource> actualResources) throws BeanDefinitionStoreException {_		ResourceLoader resourceLoader = getResourceLoader()__		if (resourceLoader == null) {_			throw new BeanDefinitionStoreException(_					"Cannot import bean definitions from location [" + location + "]: no ResourceLoader available")__		}__		if (resourceLoader instanceof ResourcePatternResolver) {_			_			try {_				Resource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location)__				int loadCount = loadBeanDefinitions(resources)__				if (actualResources != null) {_					for (Resource resource : resources) {_						actualResources.add(resource)__					}_				}_				if (logger.isDebugEnabled()) {_					logger.debug("Loaded " + loadCount + " bean definitions from location pattern [" + location + "]")__				}_				return loadCount__			}_			catch (IOException ex) {_				throw new BeanDefinitionStoreException(_						"Could not resolve bean definition resource pattern [" + location + "]", ex)__			}_		}_		else {_			_			Resource resource = resourceLoader.getResource(location)__			int loadCount = loadBeanDefinitions(resource)__			if (actualResources != null) {_				actualResources.add(resource)__			}_			if (logger.isDebugEnabled()) {_				logger.debug("Loaded " + loadCount + " bean definitions from location [" + location + "]")__			}_			return loadCount__		}_	};load,bean,definitions,from,the,specified,resource,location,p,the,location,can,also,be,a,location,pattern,provided,that,the,resource,loader,of,this,bean,definition,reader,is,a,resource,pattern,resolver,param,location,the,resource,location,to,be,loaded,with,the,resource,loader,or,resource,pattern,resolver,of,this,bean,definition,reader,param,actual,resources,a,set,to,be,filled,with,the,actual,resource,objects,that,have,been,resolved,during,the,loading,process,may,be,code,null,to,indicate,that,the,caller,is,not,interested,in,those,resource,objects,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,get,resource,loader,see,load,bean,definitions,org,springframework,core,io,resource,see,load,bean,definitions,org,springframework,core,io,resource;public,int,load,bean,definitions,string,location,set,resource,actual,resources,throws,bean,definition,store,exception,resource,loader,resource,loader,get,resource,loader,if,resource,loader,null,throw,new,bean,definition,store,exception,cannot,import,bean,definitions,from,location,location,no,resource,loader,available,if,resource,loader,instanceof,resource,pattern,resolver,try,resource,resources,resource,pattern,resolver,resource,loader,get,resources,location,int,load,count,load,bean,definitions,resources,if,actual,resources,null,for,resource,resource,resources,actual,resources,add,resource,if,logger,is,debug,enabled,logger,debug,loaded,load,count,bean,definitions,from,location,pattern,location,return,load,count,catch,ioexception,ex,throw,new,bean,definition,store,exception,could,not,resolve,bean,definition,resource,pattern,location,ex,else,resource,resource,resource,loader,get,resource,location,int,load,count,load,bean,definitions,resource,if,actual,resources,null,actual,resources,add,resource,if,logger,is,debug,enabled,logger,debug,loaded,load,count,bean,definitions,from,location,location,return,load,count
AbstractBeanDefinitionReader -> public int loadBeanDefinitions(String location, Set<Resource> actualResources) throws BeanDefinitionStoreException;1368482696;Load bean definitions from the specified resource location._<p>The location can also be a location pattern, provided that the_ResourceLoader of this bean definition reader is a ResourcePatternResolver._@param location the resource location, to be loaded with the ResourceLoader_(or ResourcePatternResolver) of this bean definition reader_@param actualResources a Set to be filled with the actual Resource objects_that have been resolved during the loading process. May be {@code null}_to indicate that the caller is not interested in those Resource objects._@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #getResourceLoader()_@see #loadBeanDefinitions(org.springframework.core.io.Resource)_@see #loadBeanDefinitions(org.springframework.core.io.Resource[]);public int loadBeanDefinitions(String location, Set<Resource> actualResources) throws BeanDefinitionStoreException {_		ResourceLoader resourceLoader = getResourceLoader()__		if (resourceLoader == null) {_			throw new BeanDefinitionStoreException(_					"Cannot import bean definitions from location [" + location + "]: no ResourceLoader available")__		}__		if (resourceLoader instanceof ResourcePatternResolver) {_			_			try {_				Resource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location)__				int loadCount = loadBeanDefinitions(resources)__				if (actualResources != null) {_					for (Resource resource : resources) {_						actualResources.add(resource)__					}_				}_				if (logger.isDebugEnabled()) {_					logger.debug("Loaded " + loadCount + " bean definitions from location pattern [" + location + "]")__				}_				return loadCount__			}_			catch (IOException ex) {_				throw new BeanDefinitionStoreException(_						"Could not resolve bean definition resource pattern [" + location + "]", ex)__			}_		}_		else {_			_			Resource resource = resourceLoader.getResource(location)__			int loadCount = loadBeanDefinitions(resource)__			if (actualResources != null) {_				actualResources.add(resource)__			}_			if (logger.isDebugEnabled()) {_				logger.debug("Loaded " + loadCount + " bean definitions from location [" + location + "]")__			}_			return loadCount__		}_	};load,bean,definitions,from,the,specified,resource,location,p,the,location,can,also,be,a,location,pattern,provided,that,the,resource,loader,of,this,bean,definition,reader,is,a,resource,pattern,resolver,param,location,the,resource,location,to,be,loaded,with,the,resource,loader,or,resource,pattern,resolver,of,this,bean,definition,reader,param,actual,resources,a,set,to,be,filled,with,the,actual,resource,objects,that,have,been,resolved,during,the,loading,process,may,be,code,null,to,indicate,that,the,caller,is,not,interested,in,those,resource,objects,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,get,resource,loader,see,load,bean,definitions,org,springframework,core,io,resource,see,load,bean,definitions,org,springframework,core,io,resource;public,int,load,bean,definitions,string,location,set,resource,actual,resources,throws,bean,definition,store,exception,resource,loader,resource,loader,get,resource,loader,if,resource,loader,null,throw,new,bean,definition,store,exception,cannot,import,bean,definitions,from,location,location,no,resource,loader,available,if,resource,loader,instanceof,resource,pattern,resolver,try,resource,resources,resource,pattern,resolver,resource,loader,get,resources,location,int,load,count,load,bean,definitions,resources,if,actual,resources,null,for,resource,resource,resources,actual,resources,add,resource,if,logger,is,debug,enabled,logger,debug,loaded,load,count,bean,definitions,from,location,pattern,location,return,load,count,catch,ioexception,ex,throw,new,bean,definition,store,exception,could,not,resolve,bean,definition,resource,pattern,location,ex,else,resource,resource,resource,loader,get,resource,location,int,load,count,load,bean,definitions,resource,if,actual,resources,null,actual,resources,add,resource,if,logger,is,debug,enabled,logger,debug,loaded,load,count,bean,definitions,from,location,location,return,load,count
AbstractBeanDefinitionReader -> public int loadBeanDefinitions(String location, Set<Resource> actualResources) throws BeanDefinitionStoreException;1368654092;Load bean definitions from the specified resource location._<p>The location can also be a location pattern, provided that the_ResourceLoader of this bean definition reader is a ResourcePatternResolver._@param location the resource location, to be loaded with the ResourceLoader_(or ResourcePatternResolver) of this bean definition reader_@param actualResources a Set to be filled with the actual Resource objects_that have been resolved during the loading process. May be {@code null}_to indicate that the caller is not interested in those Resource objects._@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #getResourceLoader()_@see #loadBeanDefinitions(org.springframework.core.io.Resource)_@see #loadBeanDefinitions(org.springframework.core.io.Resource[]);public int loadBeanDefinitions(String location, Set<Resource> actualResources) throws BeanDefinitionStoreException {_		ResourceLoader resourceLoader = getResourceLoader()__		if (resourceLoader == null) {_			throw new BeanDefinitionStoreException(_					"Cannot import bean definitions from location [" + location + "]: no ResourceLoader available")__		}__		if (resourceLoader instanceof ResourcePatternResolver) {_			_			try {_				Resource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location)__				int loadCount = loadBeanDefinitions(resources)__				if (actualResources != null) {_					for (Resource resource : resources) {_						actualResources.add(resource)__					}_				}_				if (logger.isDebugEnabled()) {_					logger.debug("Loaded " + loadCount + " bean definitions from location pattern [" + location + "]")__				}_				return loadCount__			}_			catch (IOException ex) {_				throw new BeanDefinitionStoreException(_						"Could not resolve bean definition resource pattern [" + location + "]", ex)__			}_		}_		else {_			_			Resource resource = resourceLoader.getResource(location)__			int loadCount = loadBeanDefinitions(resource)__			if (actualResources != null) {_				actualResources.add(resource)__			}_			if (logger.isDebugEnabled()) {_				logger.debug("Loaded " + loadCount + " bean definitions from location [" + location + "]")__			}_			return loadCount__		}_	};load,bean,definitions,from,the,specified,resource,location,p,the,location,can,also,be,a,location,pattern,provided,that,the,resource,loader,of,this,bean,definition,reader,is,a,resource,pattern,resolver,param,location,the,resource,location,to,be,loaded,with,the,resource,loader,or,resource,pattern,resolver,of,this,bean,definition,reader,param,actual,resources,a,set,to,be,filled,with,the,actual,resource,objects,that,have,been,resolved,during,the,loading,process,may,be,code,null,to,indicate,that,the,caller,is,not,interested,in,those,resource,objects,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,get,resource,loader,see,load,bean,definitions,org,springframework,core,io,resource,see,load,bean,definitions,org,springframework,core,io,resource;public,int,load,bean,definitions,string,location,set,resource,actual,resources,throws,bean,definition,store,exception,resource,loader,resource,loader,get,resource,loader,if,resource,loader,null,throw,new,bean,definition,store,exception,cannot,import,bean,definitions,from,location,location,no,resource,loader,available,if,resource,loader,instanceof,resource,pattern,resolver,try,resource,resources,resource,pattern,resolver,resource,loader,get,resources,location,int,load,count,load,bean,definitions,resources,if,actual,resources,null,for,resource,resource,resources,actual,resources,add,resource,if,logger,is,debug,enabled,logger,debug,loaded,load,count,bean,definitions,from,location,pattern,location,return,load,count,catch,ioexception,ex,throw,new,bean,definition,store,exception,could,not,resolve,bean,definition,resource,pattern,location,ex,else,resource,resource,resource,loader,get,resource,location,int,load,count,load,bean,definitions,resource,if,actual,resources,null,actual,resources,add,resource,if,logger,is,debug,enabled,logger,debug,loaded,load,count,bean,definitions,from,location,location,return,load,count
AbstractBeanDefinitionReader -> public int loadBeanDefinitions(String location, Set<Resource> actualResources) throws BeanDefinitionStoreException;1413848647;Load bean definitions from the specified resource location._<p>The location can also be a location pattern, provided that the_ResourceLoader of this bean definition reader is a ResourcePatternResolver._@param location the resource location, to be loaded with the ResourceLoader_(or ResourcePatternResolver) of this bean definition reader_@param actualResources a Set to be filled with the actual Resource objects_that have been resolved during the loading process. May be {@code null}_to indicate that the caller is not interested in those Resource objects._@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #getResourceLoader()_@see #loadBeanDefinitions(org.springframework.core.io.Resource)_@see #loadBeanDefinitions(org.springframework.core.io.Resource[]);public int loadBeanDefinitions(String location, Set<Resource> actualResources) throws BeanDefinitionStoreException {_		ResourceLoader resourceLoader = getResourceLoader()__		if (resourceLoader == null) {_			throw new BeanDefinitionStoreException(_					"Cannot import bean definitions from location [" + location + "]: no ResourceLoader available")__		}__		if (resourceLoader instanceof ResourcePatternResolver) {_			_			try {_				Resource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location)__				int loadCount = loadBeanDefinitions(resources)__				if (actualResources != null) {_					for (Resource resource : resources) {_						actualResources.add(resource)__					}_				}_				if (logger.isDebugEnabled()) {_					logger.debug("Loaded " + loadCount + " bean definitions from location pattern [" + location + "]")__				}_				return loadCount__			}_			catch (IOException ex) {_				throw new BeanDefinitionStoreException(_						"Could not resolve bean definition resource pattern [" + location + "]", ex)__			}_		}_		else {_			_			Resource resource = resourceLoader.getResource(location)__			int loadCount = loadBeanDefinitions(resource)__			if (actualResources != null) {_				actualResources.add(resource)__			}_			if (logger.isDebugEnabled()) {_				logger.debug("Loaded " + loadCount + " bean definitions from location [" + location + "]")__			}_			return loadCount__		}_	};load,bean,definitions,from,the,specified,resource,location,p,the,location,can,also,be,a,location,pattern,provided,that,the,resource,loader,of,this,bean,definition,reader,is,a,resource,pattern,resolver,param,location,the,resource,location,to,be,loaded,with,the,resource,loader,or,resource,pattern,resolver,of,this,bean,definition,reader,param,actual,resources,a,set,to,be,filled,with,the,actual,resource,objects,that,have,been,resolved,during,the,loading,process,may,be,code,null,to,indicate,that,the,caller,is,not,interested,in,those,resource,objects,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,get,resource,loader,see,load,bean,definitions,org,springframework,core,io,resource,see,load,bean,definitions,org,springframework,core,io,resource;public,int,load,bean,definitions,string,location,set,resource,actual,resources,throws,bean,definition,store,exception,resource,loader,resource,loader,get,resource,loader,if,resource,loader,null,throw,new,bean,definition,store,exception,cannot,import,bean,definitions,from,location,location,no,resource,loader,available,if,resource,loader,instanceof,resource,pattern,resolver,try,resource,resources,resource,pattern,resolver,resource,loader,get,resources,location,int,load,count,load,bean,definitions,resources,if,actual,resources,null,for,resource,resource,resources,actual,resources,add,resource,if,logger,is,debug,enabled,logger,debug,loaded,load,count,bean,definitions,from,location,pattern,location,return,load,count,catch,ioexception,ex,throw,new,bean,definition,store,exception,could,not,resolve,bean,definition,resource,pattern,location,ex,else,resource,resource,resource,loader,get,resource,location,int,load,count,load,bean,definitions,resource,if,actual,resources,null,actual,resources,add,resource,if,logger,is,debug,enabled,logger,debug,loaded,load,count,bean,definitions,from,location,location,return,load,count
AbstractBeanDefinitionReader -> public int loadBeanDefinitions(String location, Set<Resource> actualResources) throws BeanDefinitionStoreException;1461047077;Load bean definitions from the specified resource location._<p>The location can also be a location pattern, provided that the_ResourceLoader of this bean definition reader is a ResourcePatternResolver._@param location the resource location, to be loaded with the ResourceLoader_(or ResourcePatternResolver) of this bean definition reader_@param actualResources a Set to be filled with the actual Resource objects_that have been resolved during the loading process. May be {@code null}_to indicate that the caller is not interested in those Resource objects._@return the number of bean definitions found_@throws BeanDefinitionStoreException in case of loading or parsing errors_@see #getResourceLoader()_@see #loadBeanDefinitions(org.springframework.core.io.Resource)_@see #loadBeanDefinitions(org.springframework.core.io.Resource[]);public int loadBeanDefinitions(String location, Set<Resource> actualResources) throws BeanDefinitionStoreException {_		ResourceLoader resourceLoader = getResourceLoader()__		if (resourceLoader == null) {_			throw new BeanDefinitionStoreException(_					"Cannot import bean definitions from location [" + location + "]: no ResourceLoader available")__		}__		if (resourceLoader instanceof ResourcePatternResolver) {_			_			try {_				Resource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location)__				int loadCount = loadBeanDefinitions(resources)__				if (actualResources != null) {_					for (Resource resource : resources) {_						actualResources.add(resource)__					}_				}_				if (logger.isDebugEnabled()) {_					logger.debug("Loaded " + loadCount + " bean definitions from location pattern [" + location + "]")__				}_				return loadCount__			}_			catch (IOException ex) {_				throw new BeanDefinitionStoreException(_						"Could not resolve bean definition resource pattern [" + location + "]", ex)__			}_		}_		else {_			_			Resource resource = resourceLoader.getResource(location)__			int loadCount = loadBeanDefinitions(resource)__			if (actualResources != null) {_				actualResources.add(resource)__			}_			if (logger.isDebugEnabled()) {_				logger.debug("Loaded " + loadCount + " bean definitions from location [" + location + "]")__			}_			return loadCount__		}_	};load,bean,definitions,from,the,specified,resource,location,p,the,location,can,also,be,a,location,pattern,provided,that,the,resource,loader,of,this,bean,definition,reader,is,a,resource,pattern,resolver,param,location,the,resource,location,to,be,loaded,with,the,resource,loader,or,resource,pattern,resolver,of,this,bean,definition,reader,param,actual,resources,a,set,to,be,filled,with,the,actual,resource,objects,that,have,been,resolved,during,the,loading,process,may,be,code,null,to,indicate,that,the,caller,is,not,interested,in,those,resource,objects,return,the,number,of,bean,definitions,found,throws,bean,definition,store,exception,in,case,of,loading,or,parsing,errors,see,get,resource,loader,see,load,bean,definitions,org,springframework,core,io,resource,see,load,bean,definitions,org,springframework,core,io,resource;public,int,load,bean,definitions,string,location,set,resource,actual,resources,throws,bean,definition,store,exception,resource,loader,resource,loader,get,resource,loader,if,resource,loader,null,throw,new,bean,definition,store,exception,cannot,import,bean,definitions,from,location,location,no,resource,loader,available,if,resource,loader,instanceof,resource,pattern,resolver,try,resource,resources,resource,pattern,resolver,resource,loader,get,resources,location,int,load,count,load,bean,definitions,resources,if,actual,resources,null,for,resource,resource,resources,actual,resources,add,resource,if,logger,is,debug,enabled,logger,debug,loaded,load,count,bean,definitions,from,location,pattern,location,return,load,count,catch,ioexception,ex,throw,new,bean,definition,store,exception,could,not,resolve,bean,definition,resource,pattern,location,ex,else,resource,resource,resource,loader,get,resource,location,int,load,count,load,bean,definitions,resource,if,actual,resources,null,actual,resources,add,resource,if,logger,is,debug,enabled,logger,debug,loaded,load,count,bean,definitions,from,location,location,return,load,count
AbstractBeanDefinitionReader -> public void setResourceLoader(@Nullable ResourceLoader resourceLoader);1495868221;Set the ResourceLoader to use for resource locations._If specifying a ResourcePatternResolver, the bean definition reader_will be capable of resolving resource patterns to Resource arrays._<p>Default is PathMatchingResourcePatternResolver, also capable of_resource pattern resolving through the ResourcePatternResolver interface._<p>Setting this to {@code null} suggests that absolute resource loading_is not available for this bean definition reader._@see org.springframework.core.io.support.ResourcePatternResolver_@see org.springframework.core.io.support.PathMatchingResourcePatternResolver;public void setResourceLoader(@Nullable ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,the,resource,loader,to,use,for,resource,locations,if,specifying,a,resource,pattern,resolver,the,bean,definition,reader,will,be,capable,of,resolving,resource,patterns,to,resource,arrays,p,default,is,path,matching,resource,pattern,resolver,also,capable,of,resource,pattern,resolving,through,the,resource,pattern,resolver,interface,p,setting,this,to,code,null,suggests,that,absolute,resource,loading,is,not,available,for,this,bean,definition,reader,see,org,springframework,core,io,support,resource,pattern,resolver,see,org,springframework,core,io,support,path,matching,resource,pattern,resolver;public,void,set,resource,loader,nullable,resource,loader,resource,loader,this,resource,loader,resource,loader
AbstractBeanDefinitionReader -> public void setResourceLoader(@Nullable ResourceLoader resourceLoader);1496837955;Set the ResourceLoader to use for resource locations._If specifying a ResourcePatternResolver, the bean definition reader_will be capable of resolving resource patterns to Resource arrays._<p>Default is PathMatchingResourcePatternResolver, also capable of_resource pattern resolving through the ResourcePatternResolver interface._<p>Setting this to {@code null} suggests that absolute resource loading_is not available for this bean definition reader._@see org.springframework.core.io.support.ResourcePatternResolver_@see org.springframework.core.io.support.PathMatchingResourcePatternResolver;public void setResourceLoader(@Nullable ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,the,resource,loader,to,use,for,resource,locations,if,specifying,a,resource,pattern,resolver,the,bean,definition,reader,will,be,capable,of,resolving,resource,patterns,to,resource,arrays,p,default,is,path,matching,resource,pattern,resolver,also,capable,of,resource,pattern,resolving,through,the,resource,pattern,resolver,interface,p,setting,this,to,code,null,suggests,that,absolute,resource,loading,is,not,available,for,this,bean,definition,reader,see,org,springframework,core,io,support,resource,pattern,resolver,see,org,springframework,core,io,support,path,matching,resource,pattern,resolver;public,void,set,resource,loader,nullable,resource,loader,resource,loader,this,resource,loader,resource,loader
AbstractBeanDefinitionReader -> public void setResourceLoader(@Nullable ResourceLoader resourceLoader);1497033975;Set the ResourceLoader to use for resource locations._If specifying a ResourcePatternResolver, the bean definition reader_will be capable of resolving resource patterns to Resource arrays._<p>Default is PathMatchingResourcePatternResolver, also capable of_resource pattern resolving through the ResourcePatternResolver interface._<p>Setting this to {@code null} suggests that absolute resource loading_is not available for this bean definition reader._@see org.springframework.core.io.support.ResourcePatternResolver_@see org.springframework.core.io.support.PathMatchingResourcePatternResolver;public void setResourceLoader(@Nullable ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,the,resource,loader,to,use,for,resource,locations,if,specifying,a,resource,pattern,resolver,the,bean,definition,reader,will,be,capable,of,resolving,resource,patterns,to,resource,arrays,p,default,is,path,matching,resource,pattern,resolver,also,capable,of,resource,pattern,resolving,through,the,resource,pattern,resolver,interface,p,setting,this,to,code,null,suggests,that,absolute,resource,loading,is,not,available,for,this,bean,definition,reader,see,org,springframework,core,io,support,resource,pattern,resolver,see,org,springframework,core,io,support,path,matching,resource,pattern,resolver;public,void,set,resource,loader,nullable,resource,loader,resource,loader,this,resource,loader,resource,loader
AbstractBeanDefinitionReader -> public void setResourceLoader(@Nullable ResourceLoader resourceLoader);1500448076;Set the ResourceLoader to use for resource locations._If specifying a ResourcePatternResolver, the bean definition reader_will be capable of resolving resource patterns to Resource arrays._<p>Default is PathMatchingResourcePatternResolver, also capable of_resource pattern resolving through the ResourcePatternResolver interface._<p>Setting this to {@code null} suggests that absolute resource loading_is not available for this bean definition reader._@see org.springframework.core.io.support.ResourcePatternResolver_@see org.springframework.core.io.support.PathMatchingResourcePatternResolver;public void setResourceLoader(@Nullable ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,the,resource,loader,to,use,for,resource,locations,if,specifying,a,resource,pattern,resolver,the,bean,definition,reader,will,be,capable,of,resolving,resource,patterns,to,resource,arrays,p,default,is,path,matching,resource,pattern,resolver,also,capable,of,resource,pattern,resolving,through,the,resource,pattern,resolver,interface,p,setting,this,to,code,null,suggests,that,absolute,resource,loading,is,not,available,for,this,bean,definition,reader,see,org,springframework,core,io,support,resource,pattern,resolver,see,org,springframework,core,io,support,path,matching,resource,pattern,resolver;public,void,set,resource,loader,nullable,resource,loader,resource,loader,this,resource,loader,resource,loader
AbstractBeanDefinitionReader -> public void setResourceLoader(@Nullable ResourceLoader resourceLoader);1530174524;Set the ResourceLoader to use for resource locations._If specifying a ResourcePatternResolver, the bean definition reader_will be capable of resolving resource patterns to Resource arrays._<p>Default is PathMatchingResourcePatternResolver, also capable of_resource pattern resolving through the ResourcePatternResolver interface._<p>Setting this to {@code null} suggests that absolute resource loading_is not available for this bean definition reader._@see org.springframework.core.io.support.ResourcePatternResolver_@see org.springframework.core.io.support.PathMatchingResourcePatternResolver;public void setResourceLoader(@Nullable ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,the,resource,loader,to,use,for,resource,locations,if,specifying,a,resource,pattern,resolver,the,bean,definition,reader,will,be,capable,of,resolving,resource,patterns,to,resource,arrays,p,default,is,path,matching,resource,pattern,resolver,also,capable,of,resource,pattern,resolving,through,the,resource,pattern,resolver,interface,p,setting,this,to,code,null,suggests,that,absolute,resource,loading,is,not,available,for,this,bean,definition,reader,see,org,springframework,core,io,support,resource,pattern,resolver,see,org,springframework,core,io,support,path,matching,resource,pattern,resolver;public,void,set,resource,loader,nullable,resource,loader,resource,loader,this,resource,loader,resource,loader
AbstractBeanDefinitionReader -> public void setResourceLoader(@Nullable ResourceLoader resourceLoader);1532706365;Set the ResourceLoader to use for resource locations._If specifying a ResourcePatternResolver, the bean definition reader_will be capable of resolving resource patterns to Resource arrays._<p>Default is PathMatchingResourcePatternResolver, also capable of_resource pattern resolving through the ResourcePatternResolver interface._<p>Setting this to {@code null} suggests that absolute resource loading_is not available for this bean definition reader._@see org.springframework.core.io.support.ResourcePatternResolver_@see org.springframework.core.io.support.PathMatchingResourcePatternResolver;public void setResourceLoader(@Nullable ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,the,resource,loader,to,use,for,resource,locations,if,specifying,a,resource,pattern,resolver,the,bean,definition,reader,will,be,capable,of,resolving,resource,patterns,to,resource,arrays,p,default,is,path,matching,resource,pattern,resolver,also,capable,of,resource,pattern,resolving,through,the,resource,pattern,resolver,interface,p,setting,this,to,code,null,suggests,that,absolute,resource,loading,is,not,available,for,this,bean,definition,reader,see,org,springframework,core,io,support,resource,pattern,resolver,see,org,springframework,core,io,support,path,matching,resource,pattern,resolver;public,void,set,resource,loader,nullable,resource,loader,resource,loader,this,resource,loader,resource,loader
AbstractBeanDefinitionReader -> public void setResourceLoader(ResourceLoader resourceLoader);1328020251;Set the ResourceLoader to use for resource locations._If specifying a ResourcePatternResolver, the bean definition reader_will be capable of resolving resource patterns to Resource arrays._<p>Default is PathMatchingResourcePatternResolver, also capable of_resource pattern resolving through the ResourcePatternResolver interface._<p>Setting this to <code>null</code> suggests that absolute resource loading_is not available for this bean definition reader._@see org.springframework.core.io.support.ResourcePatternResolver_@see org.springframework.core.io.support.PathMatchingResourcePatternResolver;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,the,resource,loader,to,use,for,resource,locations,if,specifying,a,resource,pattern,resolver,the,bean,definition,reader,will,be,capable,of,resolving,resource,patterns,to,resource,arrays,p,default,is,path,matching,resource,pattern,resolver,also,capable,of,resource,pattern,resolving,through,the,resource,pattern,resolver,interface,p,setting,this,to,code,null,code,suggests,that,absolute,resource,loading,is,not,available,for,this,bean,definition,reader,see,org,springframework,core,io,support,resource,pattern,resolver,see,org,springframework,core,io,support,path,matching,resource,pattern,resolver;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
AbstractBeanDefinitionReader -> public void setResourceLoader(ResourceLoader resourceLoader);1356735495;Set the ResourceLoader to use for resource locations._If specifying a ResourcePatternResolver, the bean definition reader_will be capable of resolving resource patterns to Resource arrays._<p>Default is PathMatchingResourcePatternResolver, also capable of_resource pattern resolving through the ResourcePatternResolver interface._<p>Setting this to {@code null} suggests that absolute resource loading_is not available for this bean definition reader._@see org.springframework.core.io.support.ResourcePatternResolver_@see org.springframework.core.io.support.PathMatchingResourcePatternResolver;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,the,resource,loader,to,use,for,resource,locations,if,specifying,a,resource,pattern,resolver,the,bean,definition,reader,will,be,capable,of,resolving,resource,patterns,to,resource,arrays,p,default,is,path,matching,resource,pattern,resolver,also,capable,of,resource,pattern,resolving,through,the,resource,pattern,resolver,interface,p,setting,this,to,code,null,suggests,that,absolute,resource,loading,is,not,available,for,this,bean,definition,reader,see,org,springframework,core,io,support,resource,pattern,resolver,see,org,springframework,core,io,support,path,matching,resource,pattern,resolver;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
AbstractBeanDefinitionReader -> public void setResourceLoader(ResourceLoader resourceLoader);1357119239;Set the ResourceLoader to use for resource locations._If specifying a ResourcePatternResolver, the bean definition reader_will be capable of resolving resource patterns to Resource arrays._<p>Default is PathMatchingResourcePatternResolver, also capable of_resource pattern resolving through the ResourcePatternResolver interface._<p>Setting this to {@code null} suggests that absolute resource loading_is not available for this bean definition reader._@see org.springframework.core.io.support.ResourcePatternResolver_@see org.springframework.core.io.support.PathMatchingResourcePatternResolver;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,the,resource,loader,to,use,for,resource,locations,if,specifying,a,resource,pattern,resolver,the,bean,definition,reader,will,be,capable,of,resolving,resource,patterns,to,resource,arrays,p,default,is,path,matching,resource,pattern,resolver,also,capable,of,resource,pattern,resolving,through,the,resource,pattern,resolver,interface,p,setting,this,to,code,null,suggests,that,absolute,resource,loading,is,not,available,for,this,bean,definition,reader,see,org,springframework,core,io,support,resource,pattern,resolver,see,org,springframework,core,io,support,path,matching,resource,pattern,resolver;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
AbstractBeanDefinitionReader -> public void setResourceLoader(ResourceLoader resourceLoader);1368482696;Set the ResourceLoader to use for resource locations._If specifying a ResourcePatternResolver, the bean definition reader_will be capable of resolving resource patterns to Resource arrays._<p>Default is PathMatchingResourcePatternResolver, also capable of_resource pattern resolving through the ResourcePatternResolver interface._<p>Setting this to {@code null} suggests that absolute resource loading_is not available for this bean definition reader._@see org.springframework.core.io.support.ResourcePatternResolver_@see org.springframework.core.io.support.PathMatchingResourcePatternResolver;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,the,resource,loader,to,use,for,resource,locations,if,specifying,a,resource,pattern,resolver,the,bean,definition,reader,will,be,capable,of,resolving,resource,patterns,to,resource,arrays,p,default,is,path,matching,resource,pattern,resolver,also,capable,of,resource,pattern,resolving,through,the,resource,pattern,resolver,interface,p,setting,this,to,code,null,suggests,that,absolute,resource,loading,is,not,available,for,this,bean,definition,reader,see,org,springframework,core,io,support,resource,pattern,resolver,see,org,springframework,core,io,support,path,matching,resource,pattern,resolver;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
AbstractBeanDefinitionReader -> public void setResourceLoader(ResourceLoader resourceLoader);1368654092;Set the ResourceLoader to use for resource locations._If specifying a ResourcePatternResolver, the bean definition reader_will be capable of resolving resource patterns to Resource arrays._<p>Default is PathMatchingResourcePatternResolver, also capable of_resource pattern resolving through the ResourcePatternResolver interface._<p>Setting this to {@code null} suggests that absolute resource loading_is not available for this bean definition reader._@see org.springframework.core.io.support.ResourcePatternResolver_@see org.springframework.core.io.support.PathMatchingResourcePatternResolver;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,the,resource,loader,to,use,for,resource,locations,if,specifying,a,resource,pattern,resolver,the,bean,definition,reader,will,be,capable,of,resolving,resource,patterns,to,resource,arrays,p,default,is,path,matching,resource,pattern,resolver,also,capable,of,resource,pattern,resolving,through,the,resource,pattern,resolver,interface,p,setting,this,to,code,null,suggests,that,absolute,resource,loading,is,not,available,for,this,bean,definition,reader,see,org,springframework,core,io,support,resource,pattern,resolver,see,org,springframework,core,io,support,path,matching,resource,pattern,resolver;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
AbstractBeanDefinitionReader -> public void setResourceLoader(ResourceLoader resourceLoader);1413848647;Set the ResourceLoader to use for resource locations._If specifying a ResourcePatternResolver, the bean definition reader_will be capable of resolving resource patterns to Resource arrays._<p>Default is PathMatchingResourcePatternResolver, also capable of_resource pattern resolving through the ResourcePatternResolver interface._<p>Setting this to {@code null} suggests that absolute resource loading_is not available for this bean definition reader._@see org.springframework.core.io.support.ResourcePatternResolver_@see org.springframework.core.io.support.PathMatchingResourcePatternResolver;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,the,resource,loader,to,use,for,resource,locations,if,specifying,a,resource,pattern,resolver,the,bean,definition,reader,will,be,capable,of,resolving,resource,patterns,to,resource,arrays,p,default,is,path,matching,resource,pattern,resolver,also,capable,of,resource,pattern,resolving,through,the,resource,pattern,resolver,interface,p,setting,this,to,code,null,suggests,that,absolute,resource,loading,is,not,available,for,this,bean,definition,reader,see,org,springframework,core,io,support,resource,pattern,resolver,see,org,springframework,core,io,support,path,matching,resource,pattern,resolver;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
AbstractBeanDefinitionReader -> public void setResourceLoader(ResourceLoader resourceLoader);1461047077;Set the ResourceLoader to use for resource locations._If specifying a ResourcePatternResolver, the bean definition reader_will be capable of resolving resource patterns to Resource arrays._<p>Default is PathMatchingResourcePatternResolver, also capable of_resource pattern resolving through the ResourcePatternResolver interface._<p>Setting this to {@code null} suggests that absolute resource loading_is not available for this bean definition reader._@see org.springframework.core.io.support.ResourcePatternResolver_@see org.springframework.core.io.support.PathMatchingResourcePatternResolver;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,the,resource,loader,to,use,for,resource,locations,if,specifying,a,resource,pattern,resolver,the,bean,definition,reader,will,be,capable,of,resolving,resource,patterns,to,resource,arrays,p,default,is,path,matching,resource,pattern,resolver,also,capable,of,resource,pattern,resolving,through,the,resource,pattern,resolver,interface,p,setting,this,to,code,null,suggests,that,absolute,resource,loading,is,not,available,for,this,bean,definition,reader,see,org,springframework,core,io,support,resource,pattern,resolver,see,org,springframework,core,io,support,path,matching,resource,pattern,resolver;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
AbstractBeanDefinitionReader -> public void setResourceLoader(ResourceLoader resourceLoader);1498780456;Set the ResourceLoader to use for resource locations._If specifying a ResourcePatternResolver, the bean definition reader_will be capable of resolving resource patterns to Resource arrays._<p>Default is PathMatchingResourcePatternResolver, also capable of_resource pattern resolving through the ResourcePatternResolver interface._<p>Setting this to {@code null} suggests that absolute resource loading_is not available for this bean definition reader._@see org.springframework.core.io.support.ResourcePatternResolver_@see org.springframework.core.io.support.PathMatchingResourcePatternResolver;public void setResourceLoader(ResourceLoader resourceLoader) {_		this.resourceLoader = resourceLoader__	};set,the,resource,loader,to,use,for,resource,locations,if,specifying,a,resource,pattern,resolver,the,bean,definition,reader,will,be,capable,of,resolving,resource,patterns,to,resource,arrays,p,default,is,path,matching,resource,pattern,resolver,also,capable,of,resource,pattern,resolving,through,the,resource,pattern,resolver,interface,p,setting,this,to,code,null,suggests,that,absolute,resource,loading,is,not,available,for,this,bean,definition,reader,see,org,springframework,core,io,support,resource,pattern,resolver,see,org,springframework,core,io,support,path,matching,resource,pattern,resolver;public,void,set,resource,loader,resource,loader,resource,loader,this,resource,loader,resource,loader
AbstractBeanDefinitionReader -> public void setBeanNameGenerator(@Nullable BeanNameGenerator beanNameGenerator);1496837955;Set the BeanNameGenerator to use for anonymous beans_(without explicit bean name specified)._<p>Default is a {@link DefaultBeanNameGenerator}.;public void setBeanNameGenerator(@Nullable BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = (beanNameGenerator != null ? beanNameGenerator : new DefaultBeanNameGenerator())__	};set,the,bean,name,generator,to,use,for,anonymous,beans,without,explicit,bean,name,specified,p,default,is,a,link,default,bean,name,generator;public,void,set,bean,name,generator,nullable,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator,null,bean,name,generator,new,default,bean,name,generator
AbstractBeanDefinitionReader -> public void setBeanNameGenerator(@Nullable BeanNameGenerator beanNameGenerator);1497033975;Set the BeanNameGenerator to use for anonymous beans_(without explicit bean name specified)._<p>Default is a {@link DefaultBeanNameGenerator}.;public void setBeanNameGenerator(@Nullable BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = (beanNameGenerator != null ? beanNameGenerator : new DefaultBeanNameGenerator())__	};set,the,bean,name,generator,to,use,for,anonymous,beans,without,explicit,bean,name,specified,p,default,is,a,link,default,bean,name,generator;public,void,set,bean,name,generator,nullable,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator,null,bean,name,generator,new,default,bean,name,generator
AbstractBeanDefinitionReader -> public void setBeanNameGenerator(@Nullable BeanNameGenerator beanNameGenerator);1498780456;Set the BeanNameGenerator to use for anonymous beans_(without explicit bean name specified)._<p>Default is a {@link DefaultBeanNameGenerator}.;public void setBeanNameGenerator(@Nullable BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = (beanNameGenerator != null ? beanNameGenerator : new DefaultBeanNameGenerator())__	};set,the,bean,name,generator,to,use,for,anonymous,beans,without,explicit,bean,name,specified,p,default,is,a,link,default,bean,name,generator;public,void,set,bean,name,generator,nullable,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator,null,bean,name,generator,new,default,bean,name,generator
AbstractBeanDefinitionReader -> public void setBeanNameGenerator(@Nullable BeanNameGenerator beanNameGenerator);1500448076;Set the BeanNameGenerator to use for anonymous beans_(without explicit bean name specified)._<p>Default is a {@link DefaultBeanNameGenerator}.;public void setBeanNameGenerator(@Nullable BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = (beanNameGenerator != null ? beanNameGenerator : new DefaultBeanNameGenerator())__	};set,the,bean,name,generator,to,use,for,anonymous,beans,without,explicit,bean,name,specified,p,default,is,a,link,default,bean,name,generator;public,void,set,bean,name,generator,nullable,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator,null,bean,name,generator,new,default,bean,name,generator
AbstractBeanDefinitionReader -> public void setBeanNameGenerator(@Nullable BeanNameGenerator beanNameGenerator);1530174524;Set the BeanNameGenerator to use for anonymous beans_(without explicit bean name specified)._<p>Default is a {@link DefaultBeanNameGenerator}.;public void setBeanNameGenerator(@Nullable BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = (beanNameGenerator != null ? beanNameGenerator : new DefaultBeanNameGenerator())__	};set,the,bean,name,generator,to,use,for,anonymous,beans,without,explicit,bean,name,specified,p,default,is,a,link,default,bean,name,generator;public,void,set,bean,name,generator,nullable,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator,null,bean,name,generator,new,default,bean,name,generator
AbstractBeanDefinitionReader -> public void setBeanNameGenerator(@Nullable BeanNameGenerator beanNameGenerator);1532706365;Set the BeanNameGenerator to use for anonymous beans_(without explicit bean name specified)._<p>Default is a {@link DefaultBeanNameGenerator}.;public void setBeanNameGenerator(@Nullable BeanNameGenerator beanNameGenerator) {_		this.beanNameGenerator = (beanNameGenerator != null ? beanNameGenerator : new DefaultBeanNameGenerator())__	};set,the,bean,name,generator,to,use,for,anonymous,beans,without,explicit,bean,name,specified,p,default,is,a,link,default,bean,name,generator;public,void,set,bean,name,generator,nullable,bean,name,generator,bean,name,generator,this,bean,name,generator,bean,name,generator,null,bean,name,generator,new,default,bean,name,generator
AbstractBeanDefinitionReader -> public void setBeanClassLoader(@Nullable ClassLoader beanClassLoader);1497033975;Set the ClassLoader to use for bean classes._<p>Default is {@code null}, which suggests to not load bean classes_eagerly but rather to just register bean definitions with class names,_with the corresponding Classes to be resolved later (or never)._@see Thread#getContextClassLoader();public void setBeanClassLoader(@Nullable ClassLoader beanClassLoader) {_		this.beanClassLoader = beanClassLoader__	};set,the,class,loader,to,use,for,bean,classes,p,default,is,code,null,which,suggests,to,not,load,bean,classes,eagerly,but,rather,to,just,register,bean,definitions,with,class,names,with,the,corresponding,classes,to,be,resolved,later,or,never,see,thread,get,context,class,loader;public,void,set,bean,class,loader,nullable,class,loader,bean,class,loader,this,bean,class,loader,bean,class,loader
AbstractBeanDefinitionReader -> public void setBeanClassLoader(@Nullable ClassLoader beanClassLoader);1498780456;Set the ClassLoader to use for bean classes._<p>Default is {@code null}, which suggests to not load bean classes_eagerly but rather to just register bean definitions with class names,_with the corresponding Classes to be resolved later (or never)._@see Thread#getContextClassLoader();public void setBeanClassLoader(@Nullable ClassLoader beanClassLoader) {_		this.beanClassLoader = beanClassLoader__	};set,the,class,loader,to,use,for,bean,classes,p,default,is,code,null,which,suggests,to,not,load,bean,classes,eagerly,but,rather,to,just,register,bean,definitions,with,class,names,with,the,corresponding,classes,to,be,resolved,later,or,never,see,thread,get,context,class,loader;public,void,set,bean,class,loader,nullable,class,loader,bean,class,loader,this,bean,class,loader,bean,class,loader
AbstractBeanDefinitionReader -> public void setBeanClassLoader(@Nullable ClassLoader beanClassLoader);1500448076;Set the ClassLoader to use for bean classes._<p>Default is {@code null}, which suggests to not load bean classes_eagerly but rather to just register bean definitions with class names,_with the corresponding Classes to be resolved later (or never)._@see Thread#getContextClassLoader();public void setBeanClassLoader(@Nullable ClassLoader beanClassLoader) {_		this.beanClassLoader = beanClassLoader__	};set,the,class,loader,to,use,for,bean,classes,p,default,is,code,null,which,suggests,to,not,load,bean,classes,eagerly,but,rather,to,just,register,bean,definitions,with,class,names,with,the,corresponding,classes,to,be,resolved,later,or,never,see,thread,get,context,class,loader;public,void,set,bean,class,loader,nullable,class,loader,bean,class,loader,this,bean,class,loader,bean,class,loader
AbstractBeanDefinitionReader -> public void setBeanClassLoader(@Nullable ClassLoader beanClassLoader);1530174524;Set the ClassLoader to use for bean classes._<p>Default is {@code null}, which suggests to not load bean classes_eagerly but rather to just register bean definitions with class names,_with the corresponding Classes to be resolved later (or never)._@see Thread#getContextClassLoader();public void setBeanClassLoader(@Nullable ClassLoader beanClassLoader) {_		this.beanClassLoader = beanClassLoader__	};set,the,class,loader,to,use,for,bean,classes,p,default,is,code,null,which,suggests,to,not,load,bean,classes,eagerly,but,rather,to,just,register,bean,definitions,with,class,names,with,the,corresponding,classes,to,be,resolved,later,or,never,see,thread,get,context,class,loader;public,void,set,bean,class,loader,nullable,class,loader,bean,class,loader,this,bean,class,loader,bean,class,loader
AbstractBeanDefinitionReader -> public void setBeanClassLoader(@Nullable ClassLoader beanClassLoader);1532706365;Set the ClassLoader to use for bean classes._<p>Default is {@code null}, which suggests to not load bean classes_eagerly but rather to just register bean definitions with class names,_with the corresponding Classes to be resolved later (or never)._@see Thread#getContextClassLoader();public void setBeanClassLoader(@Nullable ClassLoader beanClassLoader) {_		this.beanClassLoader = beanClassLoader__	};set,the,class,loader,to,use,for,bean,classes,p,default,is,code,null,which,suggests,to,not,load,bean,classes,eagerly,but,rather,to,just,register,bean,definitions,with,class,names,with,the,corresponding,classes,to,be,resolved,later,or,never,see,thread,get,context,class,loader;public,void,set,bean,class,loader,nullable,class,loader,bean,class,loader,this,bean,class,loader,bean,class,loader
AbstractBeanDefinitionReader -> protected AbstractBeanDefinitionReader(BeanDefinitionRegistry registry);1328020251;Create a new AbstractBeanDefinitionReader for the given bean factory._<p>If the passed-in bean factory does not only implement the BeanDefinitionRegistry_interface but also the ResourceLoader interface, it will be used as default_ResourceLoader as well. This will usually be the case for_{@link org.springframework.context.ApplicationContext} implementations._<p>If given a plain BeanDefinitionRegistry, the default ResourceLoader will be a_{@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._<p>If the the passed-in bean factory also implements {@link EnvironmentCapable} its_environment will be used by this reader.  Otherwise, the reader will initialize and_use a {@link StandardEnvironment}. All ApplicationContext implementations are_EnvironmentCapable, while normal BeanFactory implementations are not._@param registry the BeanFactory to load bean definitions into,_in the form of a BeanDefinitionRegistry_@see #setResourceLoader_@see #setEnvironment;protected AbstractBeanDefinitionReader(BeanDefinitionRegistry registry) {_		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		this.registry = registry___		_		if (this.registry instanceof ResourceLoader) {_			this.resourceLoader = (ResourceLoader) this.registry__		}_		else {_			this.resourceLoader = new PathMatchingResourcePatternResolver()__		}__		_		if (this.registry instanceof EnvironmentCapable) {_			this.environment = ((EnvironmentCapable)this.registry).getEnvironment()__		}_		else {_			this.environment = new StandardEnvironment()__		}_	};create,a,new,abstract,bean,definition,reader,for,the,given,bean,factory,p,if,the,passed,in,bean,factory,does,not,only,implement,the,bean,definition,registry,interface,but,also,the,resource,loader,interface,it,will,be,used,as,default,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,bean,definition,registry,the,default,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,p,if,the,the,passed,in,bean,factory,also,implements,link,environment,capable,its,environment,will,be,used,by,this,reader,otherwise,the,reader,will,initialize,and,use,a,link,standard,environment,all,application,context,implementations,are,environment,capable,while,normal,bean,factory,implementations,are,not,param,registry,the,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,bean,definition,registry,see,set,resource,loader,see,set,environment;protected,abstract,bean,definition,reader,bean,definition,registry,registry,assert,not,null,registry,bean,definition,registry,must,not,be,null,this,registry,registry,if,this,registry,instanceof,resource,loader,this,resource,loader,resource,loader,this,registry,else,this,resource,loader,new,path,matching,resource,pattern,resolver,if,this,registry,instanceof,environment,capable,this,environment,environment,capable,this,registry,get,environment,else,this,environment,new,standard,environment
AbstractBeanDefinitionReader -> protected AbstractBeanDefinitionReader(BeanDefinitionRegistry registry);1356735495;Create a new AbstractBeanDefinitionReader for the given bean factory._<p>If the passed-in bean factory does not only implement the BeanDefinitionRegistry_interface but also the ResourceLoader interface, it will be used as default_ResourceLoader as well. This will usually be the case for_{@link org.springframework.context.ApplicationContext} implementations._<p>If given a plain BeanDefinitionRegistry, the default ResourceLoader will be a_{@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._<p>If the the passed-in bean factory also implements {@link EnvironmentCapable} its_environment will be used by this reader.  Otherwise, the reader will initialize and_use a {@link StandardEnvironment}. All ApplicationContext implementations are_EnvironmentCapable, while normal BeanFactory implementations are not._@param registry the BeanFactory to load bean definitions into,_in the form of a BeanDefinitionRegistry_@see #setResourceLoader_@see #setEnvironment;protected AbstractBeanDefinitionReader(BeanDefinitionRegistry registry) {_		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		this.registry = registry___		_		if (this.registry instanceof ResourceLoader) {_			this.resourceLoader = (ResourceLoader) this.registry__		}_		else {_			this.resourceLoader = new PathMatchingResourcePatternResolver()__		}__		_		if (this.registry instanceof EnvironmentCapable) {_			this.environment = ((EnvironmentCapable)this.registry).getEnvironment()__		}_		else {_			this.environment = new StandardEnvironment()__		}_	};create,a,new,abstract,bean,definition,reader,for,the,given,bean,factory,p,if,the,passed,in,bean,factory,does,not,only,implement,the,bean,definition,registry,interface,but,also,the,resource,loader,interface,it,will,be,used,as,default,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,bean,definition,registry,the,default,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,p,if,the,the,passed,in,bean,factory,also,implements,link,environment,capable,its,environment,will,be,used,by,this,reader,otherwise,the,reader,will,initialize,and,use,a,link,standard,environment,all,application,context,implementations,are,environment,capable,while,normal,bean,factory,implementations,are,not,param,registry,the,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,bean,definition,registry,see,set,resource,loader,see,set,environment;protected,abstract,bean,definition,reader,bean,definition,registry,registry,assert,not,null,registry,bean,definition,registry,must,not,be,null,this,registry,registry,if,this,registry,instanceof,resource,loader,this,resource,loader,resource,loader,this,registry,else,this,resource,loader,new,path,matching,resource,pattern,resolver,if,this,registry,instanceof,environment,capable,this,environment,environment,capable,this,registry,get,environment,else,this,environment,new,standard,environment
AbstractBeanDefinitionReader -> protected AbstractBeanDefinitionReader(BeanDefinitionRegistry registry);1357119239;Create a new AbstractBeanDefinitionReader for the given bean factory._<p>If the passed-in bean factory does not only implement the BeanDefinitionRegistry_interface but also the ResourceLoader interface, it will be used as default_ResourceLoader as well. This will usually be the case for_{@link org.springframework.context.ApplicationContext} implementations._<p>If given a plain BeanDefinitionRegistry, the default ResourceLoader will be a_{@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._<p>If the the passed-in bean factory also implements {@link EnvironmentCapable} its_environment will be used by this reader.  Otherwise, the reader will initialize and_use a {@link StandardEnvironment}. All ApplicationContext implementations are_EnvironmentCapable, while normal BeanFactory implementations are not._@param registry the BeanFactory to load bean definitions into,_in the form of a BeanDefinitionRegistry_@see #setResourceLoader_@see #setEnvironment;protected AbstractBeanDefinitionReader(BeanDefinitionRegistry registry) {_		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		this.registry = registry___		_		if (this.registry instanceof ResourceLoader) {_			this.resourceLoader = (ResourceLoader) this.registry__		}_		else {_			this.resourceLoader = new PathMatchingResourcePatternResolver()__		}__		_		if (this.registry instanceof EnvironmentCapable) {_			this.environment = ((EnvironmentCapable)this.registry).getEnvironment()__		}_		else {_			this.environment = new StandardEnvironment()__		}_	};create,a,new,abstract,bean,definition,reader,for,the,given,bean,factory,p,if,the,passed,in,bean,factory,does,not,only,implement,the,bean,definition,registry,interface,but,also,the,resource,loader,interface,it,will,be,used,as,default,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,bean,definition,registry,the,default,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,p,if,the,the,passed,in,bean,factory,also,implements,link,environment,capable,its,environment,will,be,used,by,this,reader,otherwise,the,reader,will,initialize,and,use,a,link,standard,environment,all,application,context,implementations,are,environment,capable,while,normal,bean,factory,implementations,are,not,param,registry,the,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,bean,definition,registry,see,set,resource,loader,see,set,environment;protected,abstract,bean,definition,reader,bean,definition,registry,registry,assert,not,null,registry,bean,definition,registry,must,not,be,null,this,registry,registry,if,this,registry,instanceof,resource,loader,this,resource,loader,resource,loader,this,registry,else,this,resource,loader,new,path,matching,resource,pattern,resolver,if,this,registry,instanceof,environment,capable,this,environment,environment,capable,this,registry,get,environment,else,this,environment,new,standard,environment
AbstractBeanDefinitionReader -> protected AbstractBeanDefinitionReader(BeanDefinitionRegistry registry);1368482696;Create a new AbstractBeanDefinitionReader for the given bean factory._<p>If the passed-in bean factory does not only implement the BeanDefinitionRegistry_interface but also the ResourceLoader interface, it will be used as default_ResourceLoader as well. This will usually be the case for_{@link org.springframework.context.ApplicationContext} implementations._<p>If given a plain BeanDefinitionRegistry, the default ResourceLoader will be a_{@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._<p>If the the passed-in bean factory also implements {@link EnvironmentCapable} its_environment will be used by this reader.  Otherwise, the reader will initialize and_use a {@link StandardEnvironment}. All ApplicationContext implementations are_EnvironmentCapable, while normal BeanFactory implementations are not._@param registry the BeanFactory to load bean definitions into,_in the form of a BeanDefinitionRegistry_@see #setResourceLoader_@see #setEnvironment;protected AbstractBeanDefinitionReader(BeanDefinitionRegistry registry) {_		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		this.registry = registry___		_		if (this.registry instanceof ResourceLoader) {_			this.resourceLoader = (ResourceLoader) this.registry__		}_		else {_			this.resourceLoader = new PathMatchingResourcePatternResolver()__		}__		_		if (this.registry instanceof EnvironmentCapable) {_			this.environment = ((EnvironmentCapable)this.registry).getEnvironment()__		}_		else {_			this.environment = new StandardEnvironment()__		}_	};create,a,new,abstract,bean,definition,reader,for,the,given,bean,factory,p,if,the,passed,in,bean,factory,does,not,only,implement,the,bean,definition,registry,interface,but,also,the,resource,loader,interface,it,will,be,used,as,default,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,bean,definition,registry,the,default,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,p,if,the,the,passed,in,bean,factory,also,implements,link,environment,capable,its,environment,will,be,used,by,this,reader,otherwise,the,reader,will,initialize,and,use,a,link,standard,environment,all,application,context,implementations,are,environment,capable,while,normal,bean,factory,implementations,are,not,param,registry,the,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,bean,definition,registry,see,set,resource,loader,see,set,environment;protected,abstract,bean,definition,reader,bean,definition,registry,registry,assert,not,null,registry,bean,definition,registry,must,not,be,null,this,registry,registry,if,this,registry,instanceof,resource,loader,this,resource,loader,resource,loader,this,registry,else,this,resource,loader,new,path,matching,resource,pattern,resolver,if,this,registry,instanceof,environment,capable,this,environment,environment,capable,this,registry,get,environment,else,this,environment,new,standard,environment
AbstractBeanDefinitionReader -> protected AbstractBeanDefinitionReader(BeanDefinitionRegistry registry);1368654092;Create a new AbstractBeanDefinitionReader for the given bean factory._<p>If the passed-in bean factory does not only implement the BeanDefinitionRegistry_interface but also the ResourceLoader interface, it will be used as default_ResourceLoader as well. This will usually be the case for_{@link org.springframework.context.ApplicationContext} implementations._<p>If given a plain BeanDefinitionRegistry, the default ResourceLoader will be a_{@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._<p>If the the passed-in bean factory also implements {@link EnvironmentCapable} its_environment will be used by this reader.  Otherwise, the reader will initialize and_use a {@link StandardEnvironment}. All ApplicationContext implementations are_EnvironmentCapable, while normal BeanFactory implementations are not._@param registry the BeanFactory to load bean definitions into,_in the form of a BeanDefinitionRegistry_@see #setResourceLoader_@see #setEnvironment;protected AbstractBeanDefinitionReader(BeanDefinitionRegistry registry) {_		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		this.registry = registry___		_		if (this.registry instanceof ResourceLoader) {_			this.resourceLoader = (ResourceLoader) this.registry__		}_		else {_			this.resourceLoader = new PathMatchingResourcePatternResolver()__		}__		_		if (this.registry instanceof EnvironmentCapable) {_			this.environment = ((EnvironmentCapable) this.registry).getEnvironment()__		}_		else {_			this.environment = new StandardEnvironment()__		}_	};create,a,new,abstract,bean,definition,reader,for,the,given,bean,factory,p,if,the,passed,in,bean,factory,does,not,only,implement,the,bean,definition,registry,interface,but,also,the,resource,loader,interface,it,will,be,used,as,default,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,bean,definition,registry,the,default,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,p,if,the,the,passed,in,bean,factory,also,implements,link,environment,capable,its,environment,will,be,used,by,this,reader,otherwise,the,reader,will,initialize,and,use,a,link,standard,environment,all,application,context,implementations,are,environment,capable,while,normal,bean,factory,implementations,are,not,param,registry,the,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,bean,definition,registry,see,set,resource,loader,see,set,environment;protected,abstract,bean,definition,reader,bean,definition,registry,registry,assert,not,null,registry,bean,definition,registry,must,not,be,null,this,registry,registry,if,this,registry,instanceof,resource,loader,this,resource,loader,resource,loader,this,registry,else,this,resource,loader,new,path,matching,resource,pattern,resolver,if,this,registry,instanceof,environment,capable,this,environment,environment,capable,this,registry,get,environment,else,this,environment,new,standard,environment
AbstractBeanDefinitionReader -> protected AbstractBeanDefinitionReader(BeanDefinitionRegistry registry);1413848647;Create a new AbstractBeanDefinitionReader for the given bean factory._<p>If the passed-in bean factory does not only implement the BeanDefinitionRegistry_interface but also the ResourceLoader interface, it will be used as default_ResourceLoader as well. This will usually be the case for_{@link org.springframework.context.ApplicationContext} implementations._<p>If given a plain BeanDefinitionRegistry, the default ResourceLoader will be a_{@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._<p>If the the passed-in bean factory also implements {@link EnvironmentCapable} its_environment will be used by this reader.  Otherwise, the reader will initialize and_use a {@link StandardEnvironment}. All ApplicationContext implementations are_EnvironmentCapable, while normal BeanFactory implementations are not._@param registry the BeanFactory to load bean definitions into,_in the form of a BeanDefinitionRegistry_@see #setResourceLoader_@see #setEnvironment;protected AbstractBeanDefinitionReader(BeanDefinitionRegistry registry) {_		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		this.registry = registry___		_		if (this.registry instanceof ResourceLoader) {_			this.resourceLoader = (ResourceLoader) this.registry__		}_		else {_			this.resourceLoader = new PathMatchingResourcePatternResolver()__		}__		_		if (this.registry instanceof EnvironmentCapable) {_			this.environment = ((EnvironmentCapable) this.registry).getEnvironment()__		}_		else {_			this.environment = new StandardEnvironment()__		}_	};create,a,new,abstract,bean,definition,reader,for,the,given,bean,factory,p,if,the,passed,in,bean,factory,does,not,only,implement,the,bean,definition,registry,interface,but,also,the,resource,loader,interface,it,will,be,used,as,default,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,bean,definition,registry,the,default,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,p,if,the,the,passed,in,bean,factory,also,implements,link,environment,capable,its,environment,will,be,used,by,this,reader,otherwise,the,reader,will,initialize,and,use,a,link,standard,environment,all,application,context,implementations,are,environment,capable,while,normal,bean,factory,implementations,are,not,param,registry,the,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,bean,definition,registry,see,set,resource,loader,see,set,environment;protected,abstract,bean,definition,reader,bean,definition,registry,registry,assert,not,null,registry,bean,definition,registry,must,not,be,null,this,registry,registry,if,this,registry,instanceof,resource,loader,this,resource,loader,resource,loader,this,registry,else,this,resource,loader,new,path,matching,resource,pattern,resolver,if,this,registry,instanceof,environment,capable,this,environment,environment,capable,this,registry,get,environment,else,this,environment,new,standard,environment
AbstractBeanDefinitionReader -> protected AbstractBeanDefinitionReader(BeanDefinitionRegistry registry);1461047077;Create a new AbstractBeanDefinitionReader for the given bean factory._<p>If the passed-in bean factory does not only implement the BeanDefinitionRegistry_interface but also the ResourceLoader interface, it will be used as default_ResourceLoader as well. This will usually be the case for_{@link org.springframework.context.ApplicationContext} implementations._<p>If given a plain BeanDefinitionRegistry, the default ResourceLoader will be a_{@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._<p>If the passed-in bean factory also implements {@link EnvironmentCapable} its_environment will be used by this reader.  Otherwise, the reader will initialize and_use a {@link StandardEnvironment}. All ApplicationContext implementations are_EnvironmentCapable, while normal BeanFactory implementations are not._@param registry the BeanFactory to load bean definitions into,_in the form of a BeanDefinitionRegistry_@see #setResourceLoader_@see #setEnvironment;protected AbstractBeanDefinitionReader(BeanDefinitionRegistry registry) {_		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		this.registry = registry___		_		if (this.registry instanceof ResourceLoader) {_			this.resourceLoader = (ResourceLoader) this.registry__		}_		else {_			this.resourceLoader = new PathMatchingResourcePatternResolver()__		}__		_		if (this.registry instanceof EnvironmentCapable) {_			this.environment = ((EnvironmentCapable) this.registry).getEnvironment()__		}_		else {_			this.environment = new StandardEnvironment()__		}_	};create,a,new,abstract,bean,definition,reader,for,the,given,bean,factory,p,if,the,passed,in,bean,factory,does,not,only,implement,the,bean,definition,registry,interface,but,also,the,resource,loader,interface,it,will,be,used,as,default,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,bean,definition,registry,the,default,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,p,if,the,passed,in,bean,factory,also,implements,link,environment,capable,its,environment,will,be,used,by,this,reader,otherwise,the,reader,will,initialize,and,use,a,link,standard,environment,all,application,context,implementations,are,environment,capable,while,normal,bean,factory,implementations,are,not,param,registry,the,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,bean,definition,registry,see,set,resource,loader,see,set,environment;protected,abstract,bean,definition,reader,bean,definition,registry,registry,assert,not,null,registry,bean,definition,registry,must,not,be,null,this,registry,registry,if,this,registry,instanceof,resource,loader,this,resource,loader,resource,loader,this,registry,else,this,resource,loader,new,path,matching,resource,pattern,resolver,if,this,registry,instanceof,environment,capable,this,environment,environment,capable,this,registry,get,environment,else,this,environment,new,standard,environment
AbstractBeanDefinitionReader -> protected AbstractBeanDefinitionReader(BeanDefinitionRegistry registry);1495868221;Create a new AbstractBeanDefinitionReader for the given bean factory._<p>If the passed-in bean factory does not only implement the BeanDefinitionRegistry_interface but also the ResourceLoader interface, it will be used as default_ResourceLoader as well. This will usually be the case for_{@link org.springframework.context.ApplicationContext} implementations._<p>If given a plain BeanDefinitionRegistry, the default ResourceLoader will be a_{@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._<p>If the passed-in bean factory also implements {@link EnvironmentCapable} its_environment will be used by this reader.  Otherwise, the reader will initialize and_use a {@link StandardEnvironment}. All ApplicationContext implementations are_EnvironmentCapable, while normal BeanFactory implementations are not._@param registry the BeanFactory to load bean definitions into,_in the form of a BeanDefinitionRegistry_@see #setResourceLoader_@see #setEnvironment;protected AbstractBeanDefinitionReader(BeanDefinitionRegistry registry) {_		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		this.registry = registry___		_		if (this.registry instanceof ResourceLoader) {_			this.resourceLoader = (ResourceLoader) this.registry__		}_		else {_			this.resourceLoader = new PathMatchingResourcePatternResolver()__		}__		_		if (this.registry instanceof EnvironmentCapable) {_			this.environment = ((EnvironmentCapable) this.registry).getEnvironment()__		}_		else {_			this.environment = new StandardEnvironment()__		}_	};create,a,new,abstract,bean,definition,reader,for,the,given,bean,factory,p,if,the,passed,in,bean,factory,does,not,only,implement,the,bean,definition,registry,interface,but,also,the,resource,loader,interface,it,will,be,used,as,default,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,bean,definition,registry,the,default,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,p,if,the,passed,in,bean,factory,also,implements,link,environment,capable,its,environment,will,be,used,by,this,reader,otherwise,the,reader,will,initialize,and,use,a,link,standard,environment,all,application,context,implementations,are,environment,capable,while,normal,bean,factory,implementations,are,not,param,registry,the,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,bean,definition,registry,see,set,resource,loader,see,set,environment;protected,abstract,bean,definition,reader,bean,definition,registry,registry,assert,not,null,registry,bean,definition,registry,must,not,be,null,this,registry,registry,if,this,registry,instanceof,resource,loader,this,resource,loader,resource,loader,this,registry,else,this,resource,loader,new,path,matching,resource,pattern,resolver,if,this,registry,instanceof,environment,capable,this,environment,environment,capable,this,registry,get,environment,else,this,environment,new,standard,environment
AbstractBeanDefinitionReader -> protected AbstractBeanDefinitionReader(BeanDefinitionRegistry registry);1496837955;Create a new AbstractBeanDefinitionReader for the given bean factory._<p>If the passed-in bean factory does not only implement the BeanDefinitionRegistry_interface but also the ResourceLoader interface, it will be used as default_ResourceLoader as well. This will usually be the case for_{@link org.springframework.context.ApplicationContext} implementations._<p>If given a plain BeanDefinitionRegistry, the default ResourceLoader will be a_{@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._<p>If the passed-in bean factory also implements {@link EnvironmentCapable} its_environment will be used by this reader.  Otherwise, the reader will initialize and_use a {@link StandardEnvironment}. All ApplicationContext implementations are_EnvironmentCapable, while normal BeanFactory implementations are not._@param registry the BeanFactory to load bean definitions into,_in the form of a BeanDefinitionRegistry_@see #setResourceLoader_@see #setEnvironment;protected AbstractBeanDefinitionReader(BeanDefinitionRegistry registry) {_		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		this.registry = registry___		_		if (this.registry instanceof ResourceLoader) {_			this.resourceLoader = (ResourceLoader) this.registry__		}_		else {_			this.resourceLoader = new PathMatchingResourcePatternResolver()__		}__		_		if (this.registry instanceof EnvironmentCapable) {_			this.environment = ((EnvironmentCapable) this.registry).getEnvironment()__		}_		else {_			this.environment = new StandardEnvironment()__		}_	};create,a,new,abstract,bean,definition,reader,for,the,given,bean,factory,p,if,the,passed,in,bean,factory,does,not,only,implement,the,bean,definition,registry,interface,but,also,the,resource,loader,interface,it,will,be,used,as,default,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,bean,definition,registry,the,default,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,p,if,the,passed,in,bean,factory,also,implements,link,environment,capable,its,environment,will,be,used,by,this,reader,otherwise,the,reader,will,initialize,and,use,a,link,standard,environment,all,application,context,implementations,are,environment,capable,while,normal,bean,factory,implementations,are,not,param,registry,the,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,bean,definition,registry,see,set,resource,loader,see,set,environment;protected,abstract,bean,definition,reader,bean,definition,registry,registry,assert,not,null,registry,bean,definition,registry,must,not,be,null,this,registry,registry,if,this,registry,instanceof,resource,loader,this,resource,loader,resource,loader,this,registry,else,this,resource,loader,new,path,matching,resource,pattern,resolver,if,this,registry,instanceof,environment,capable,this,environment,environment,capable,this,registry,get,environment,else,this,environment,new,standard,environment
AbstractBeanDefinitionReader -> protected AbstractBeanDefinitionReader(BeanDefinitionRegistry registry);1497033975;Create a new AbstractBeanDefinitionReader for the given bean factory._<p>If the passed-in bean factory does not only implement the BeanDefinitionRegistry_interface but also the ResourceLoader interface, it will be used as default_ResourceLoader as well. This will usually be the case for_{@link org.springframework.context.ApplicationContext} implementations._<p>If given a plain BeanDefinitionRegistry, the default ResourceLoader will be a_{@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._<p>If the passed-in bean factory also implements {@link EnvironmentCapable} its_environment will be used by this reader.  Otherwise, the reader will initialize and_use a {@link StandardEnvironment}. All ApplicationContext implementations are_EnvironmentCapable, while normal BeanFactory implementations are not._@param registry the BeanFactory to load bean definitions into,_in the form of a BeanDefinitionRegistry_@see #setResourceLoader_@see #setEnvironment;protected AbstractBeanDefinitionReader(BeanDefinitionRegistry registry) {_		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		this.registry = registry___		_		if (this.registry instanceof ResourceLoader) {_			this.resourceLoader = (ResourceLoader) this.registry__		}_		else {_			this.resourceLoader = new PathMatchingResourcePatternResolver()__		}__		_		if (this.registry instanceof EnvironmentCapable) {_			this.environment = ((EnvironmentCapable) this.registry).getEnvironment()__		}_		else {_			this.environment = new StandardEnvironment()__		}_	};create,a,new,abstract,bean,definition,reader,for,the,given,bean,factory,p,if,the,passed,in,bean,factory,does,not,only,implement,the,bean,definition,registry,interface,but,also,the,resource,loader,interface,it,will,be,used,as,default,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,bean,definition,registry,the,default,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,p,if,the,passed,in,bean,factory,also,implements,link,environment,capable,its,environment,will,be,used,by,this,reader,otherwise,the,reader,will,initialize,and,use,a,link,standard,environment,all,application,context,implementations,are,environment,capable,while,normal,bean,factory,implementations,are,not,param,registry,the,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,bean,definition,registry,see,set,resource,loader,see,set,environment;protected,abstract,bean,definition,reader,bean,definition,registry,registry,assert,not,null,registry,bean,definition,registry,must,not,be,null,this,registry,registry,if,this,registry,instanceof,resource,loader,this,resource,loader,resource,loader,this,registry,else,this,resource,loader,new,path,matching,resource,pattern,resolver,if,this,registry,instanceof,environment,capable,this,environment,environment,capable,this,registry,get,environment,else,this,environment,new,standard,environment
AbstractBeanDefinitionReader -> protected AbstractBeanDefinitionReader(BeanDefinitionRegistry registry);1498780456;Create a new AbstractBeanDefinitionReader for the given bean factory._<p>If the passed-in bean factory does not only implement the BeanDefinitionRegistry_interface but also the ResourceLoader interface, it will be used as default_ResourceLoader as well. This will usually be the case for_{@link org.springframework.context.ApplicationContext} implementations._<p>If given a plain BeanDefinitionRegistry, the default ResourceLoader will be a_{@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._<p>If the passed-in bean factory also implements {@link EnvironmentCapable} its_environment will be used by this reader.  Otherwise, the reader will initialize and_use a {@link StandardEnvironment}. All ApplicationContext implementations are_EnvironmentCapable, while normal BeanFactory implementations are not._@param registry the BeanFactory to load bean definitions into,_in the form of a BeanDefinitionRegistry_@see #setResourceLoader_@see #setEnvironment;protected AbstractBeanDefinitionReader(BeanDefinitionRegistry registry) {_		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		this.registry = registry___		_		if (this.registry instanceof ResourceLoader) {_			this.resourceLoader = (ResourceLoader) this.registry__		}_		else {_			this.resourceLoader = new PathMatchingResourcePatternResolver()__		}__		_		if (this.registry instanceof EnvironmentCapable) {_			this.environment = ((EnvironmentCapable) this.registry).getEnvironment()__		}_		else {_			this.environment = new StandardEnvironment()__		}_	};create,a,new,abstract,bean,definition,reader,for,the,given,bean,factory,p,if,the,passed,in,bean,factory,does,not,only,implement,the,bean,definition,registry,interface,but,also,the,resource,loader,interface,it,will,be,used,as,default,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,bean,definition,registry,the,default,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,p,if,the,passed,in,bean,factory,also,implements,link,environment,capable,its,environment,will,be,used,by,this,reader,otherwise,the,reader,will,initialize,and,use,a,link,standard,environment,all,application,context,implementations,are,environment,capable,while,normal,bean,factory,implementations,are,not,param,registry,the,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,bean,definition,registry,see,set,resource,loader,see,set,environment;protected,abstract,bean,definition,reader,bean,definition,registry,registry,assert,not,null,registry,bean,definition,registry,must,not,be,null,this,registry,registry,if,this,registry,instanceof,resource,loader,this,resource,loader,resource,loader,this,registry,else,this,resource,loader,new,path,matching,resource,pattern,resolver,if,this,registry,instanceof,environment,capable,this,environment,environment,capable,this,registry,get,environment,else,this,environment,new,standard,environment
AbstractBeanDefinitionReader -> protected AbstractBeanDefinitionReader(BeanDefinitionRegistry registry);1500448076;Create a new AbstractBeanDefinitionReader for the given bean factory._<p>If the passed-in bean factory does not only implement the BeanDefinitionRegistry_interface but also the ResourceLoader interface, it will be used as default_ResourceLoader as well. This will usually be the case for_{@link org.springframework.context.ApplicationContext} implementations._<p>If given a plain BeanDefinitionRegistry, the default ResourceLoader will be a_{@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._<p>If the passed-in bean factory also implements {@link EnvironmentCapable} its_environment will be used by this reader.  Otherwise, the reader will initialize and_use a {@link StandardEnvironment}. All ApplicationContext implementations are_EnvironmentCapable, while normal BeanFactory implementations are not._@param registry the BeanFactory to load bean definitions into,_in the form of a BeanDefinitionRegistry_@see #setResourceLoader_@see #setEnvironment;protected AbstractBeanDefinitionReader(BeanDefinitionRegistry registry) {_		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		this.registry = registry___		_		if (this.registry instanceof ResourceLoader) {_			this.resourceLoader = (ResourceLoader) this.registry__		}_		else {_			this.resourceLoader = new PathMatchingResourcePatternResolver()__		}__		_		if (this.registry instanceof EnvironmentCapable) {_			this.environment = ((EnvironmentCapable) this.registry).getEnvironment()__		}_		else {_			this.environment = new StandardEnvironment()__		}_	};create,a,new,abstract,bean,definition,reader,for,the,given,bean,factory,p,if,the,passed,in,bean,factory,does,not,only,implement,the,bean,definition,registry,interface,but,also,the,resource,loader,interface,it,will,be,used,as,default,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,bean,definition,registry,the,default,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,p,if,the,passed,in,bean,factory,also,implements,link,environment,capable,its,environment,will,be,used,by,this,reader,otherwise,the,reader,will,initialize,and,use,a,link,standard,environment,all,application,context,implementations,are,environment,capable,while,normal,bean,factory,implementations,are,not,param,registry,the,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,bean,definition,registry,see,set,resource,loader,see,set,environment;protected,abstract,bean,definition,reader,bean,definition,registry,registry,assert,not,null,registry,bean,definition,registry,must,not,be,null,this,registry,registry,if,this,registry,instanceof,resource,loader,this,resource,loader,resource,loader,this,registry,else,this,resource,loader,new,path,matching,resource,pattern,resolver,if,this,registry,instanceof,environment,capable,this,environment,environment,capable,this,registry,get,environment,else,this,environment,new,standard,environment
AbstractBeanDefinitionReader -> protected AbstractBeanDefinitionReader(BeanDefinitionRegistry registry);1530174524;Create a new AbstractBeanDefinitionReader for the given bean factory._<p>If the passed-in bean factory does not only implement the BeanDefinitionRegistry_interface but also the ResourceLoader interface, it will be used as default_ResourceLoader as well. This will usually be the case for_{@link org.springframework.context.ApplicationContext} implementations._<p>If given a plain BeanDefinitionRegistry, the default ResourceLoader will be a_{@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._<p>If the passed-in bean factory also implements {@link EnvironmentCapable} its_environment will be used by this reader.  Otherwise, the reader will initialize and_use a {@link StandardEnvironment}. All ApplicationContext implementations are_EnvironmentCapable, while normal BeanFactory implementations are not._@param registry the BeanFactory to load bean definitions into,_in the form of a BeanDefinitionRegistry_@see #setResourceLoader_@see #setEnvironment;protected AbstractBeanDefinitionReader(BeanDefinitionRegistry registry) {_		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		this.registry = registry___		_		if (this.registry instanceof ResourceLoader) {_			this.resourceLoader = (ResourceLoader) this.registry__		}_		else {_			this.resourceLoader = new PathMatchingResourcePatternResolver()__		}__		_		if (this.registry instanceof EnvironmentCapable) {_			this.environment = ((EnvironmentCapable) this.registry).getEnvironment()__		}_		else {_			this.environment = new StandardEnvironment()__		}_	};create,a,new,abstract,bean,definition,reader,for,the,given,bean,factory,p,if,the,passed,in,bean,factory,does,not,only,implement,the,bean,definition,registry,interface,but,also,the,resource,loader,interface,it,will,be,used,as,default,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,bean,definition,registry,the,default,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,p,if,the,passed,in,bean,factory,also,implements,link,environment,capable,its,environment,will,be,used,by,this,reader,otherwise,the,reader,will,initialize,and,use,a,link,standard,environment,all,application,context,implementations,are,environment,capable,while,normal,bean,factory,implementations,are,not,param,registry,the,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,bean,definition,registry,see,set,resource,loader,see,set,environment;protected,abstract,bean,definition,reader,bean,definition,registry,registry,assert,not,null,registry,bean,definition,registry,must,not,be,null,this,registry,registry,if,this,registry,instanceof,resource,loader,this,resource,loader,resource,loader,this,registry,else,this,resource,loader,new,path,matching,resource,pattern,resolver,if,this,registry,instanceof,environment,capable,this,environment,environment,capable,this,registry,get,environment,else,this,environment,new,standard,environment
AbstractBeanDefinitionReader -> protected AbstractBeanDefinitionReader(BeanDefinitionRegistry registry);1532706365;Create a new AbstractBeanDefinitionReader for the given bean factory._<p>If the passed-in bean factory does not only implement the BeanDefinitionRegistry_interface but also the ResourceLoader interface, it will be used as default_ResourceLoader as well. This will usually be the case for_{@link org.springframework.context.ApplicationContext} implementations._<p>If given a plain BeanDefinitionRegistry, the default ResourceLoader will be a_{@link org.springframework.core.io.support.PathMatchingResourcePatternResolver}._<p>If the passed-in bean factory also implements {@link EnvironmentCapable} its_environment will be used by this reader.  Otherwise, the reader will initialize and_use a {@link StandardEnvironment}. All ApplicationContext implementations are_EnvironmentCapable, while normal BeanFactory implementations are not._@param registry the BeanFactory to load bean definitions into,_in the form of a BeanDefinitionRegistry_@see #setResourceLoader_@see #setEnvironment;protected AbstractBeanDefinitionReader(BeanDefinitionRegistry registry) {_		Assert.notNull(registry, "BeanDefinitionRegistry must not be null")__		this.registry = registry___		_		if (this.registry instanceof ResourceLoader) {_			this.resourceLoader = (ResourceLoader) this.registry__		}_		else {_			this.resourceLoader = new PathMatchingResourcePatternResolver()__		}__		_		if (this.registry instanceof EnvironmentCapable) {_			this.environment = ((EnvironmentCapable) this.registry).getEnvironment()__		}_		else {_			this.environment = new StandardEnvironment()__		}_	};create,a,new,abstract,bean,definition,reader,for,the,given,bean,factory,p,if,the,passed,in,bean,factory,does,not,only,implement,the,bean,definition,registry,interface,but,also,the,resource,loader,interface,it,will,be,used,as,default,resource,loader,as,well,this,will,usually,be,the,case,for,link,org,springframework,context,application,context,implementations,p,if,given,a,plain,bean,definition,registry,the,default,resource,loader,will,be,a,link,org,springframework,core,io,support,path,matching,resource,pattern,resolver,p,if,the,passed,in,bean,factory,also,implements,link,environment,capable,its,environment,will,be,used,by,this,reader,otherwise,the,reader,will,initialize,and,use,a,link,standard,environment,all,application,context,implementations,are,environment,capable,while,normal,bean,factory,implementations,are,not,param,registry,the,bean,factory,to,load,bean,definitions,into,in,the,form,of,a,bean,definition,registry,see,set,resource,loader,see,set,environment;protected,abstract,bean,definition,reader,bean,definition,registry,registry,assert,not,null,registry,bean,definition,registry,must,not,be,null,this,registry,registry,if,this,registry,instanceof,resource,loader,this,resource,loader,resource,loader,this,registry,else,this,resource,loader,new,path,matching,resource,pattern,resolver,if,this,registry,instanceof,environment,capable,this,environment,environment,capable,this,registry,get,environment,else,this,environment,new,standard,environment
