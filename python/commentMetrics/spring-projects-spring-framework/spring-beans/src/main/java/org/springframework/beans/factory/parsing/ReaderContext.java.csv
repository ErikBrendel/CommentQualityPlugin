commented;modifiers;parameterAmount;loc;comment;code
false;public,final;0;3;;public final Resource getResource() {     return this.resource. }
true;public;2;3;/**  * Raise a fatal error.  */ ;// Errors and warnings /**  * Raise a fatal error.  */ public void fatal(String message, @Nullable Object source) {     fatal(message, source, null, null). }
true;public;3;3;/**  * Raise a fatal error.  */ ;/**  * Raise a fatal error.  */ public void fatal(String message, @Nullable Object source, @Nullable Throwable cause) {     fatal(message, source, null, cause). }
true;public;3;3;/**  * Raise a fatal error.  */ ;/**  * Raise a fatal error.  */ public void fatal(String message, @Nullable Object source, @Nullable ParseState parseState) {     fatal(message, source, parseState, null). }
true;public;4;4;/**  * Raise a fatal error.  */ ;/**  * Raise a fatal error.  */ public void fatal(String message, @Nullable Object source, @Nullable ParseState parseState, @Nullable Throwable cause) {     Location location = new Location(getResource(), source).     this.problemReporter.fatal(new Problem(message, location, parseState, cause)). }
true;public;2;3;/**  * Raise a regular error.  */ ;/**  * Raise a regular error.  */ public void error(String message, @Nullable Object source) {     error(message, source, null, null). }
true;public;3;3;/**  * Raise a regular error.  */ ;/**  * Raise a regular error.  */ public void error(String message, @Nullable Object source, @Nullable Throwable cause) {     error(message, source, null, cause). }
true;public;3;3;/**  * Raise a regular error.  */ ;/**  * Raise a regular error.  */ public void error(String message, @Nullable Object source, @Nullable ParseState parseState) {     error(message, source, parseState, null). }
true;public;4;4;/**  * Raise a regular error.  */ ;/**  * Raise a regular error.  */ public void error(String message, @Nullable Object source, @Nullable ParseState parseState, @Nullable Throwable cause) {     Location location = new Location(getResource(), source).     this.problemReporter.error(new Problem(message, location, parseState, cause)). }
true;public;2;3;/**  * Raise a non-critical warning.  */ ;/**  * Raise a non-critical warning.  */ public void warning(String message, @Nullable Object source) {     warning(message, source, null, null). }
true;public;3;3;/**  * Raise a non-critical warning.  */ ;/**  * Raise a non-critical warning.  */ public void warning(String message, @Nullable Object source, @Nullable Throwable cause) {     warning(message, source, null, cause). }
true;public;3;3;/**  * Raise a non-critical warning.  */ ;/**  * Raise a non-critical warning.  */ public void warning(String message, @Nullable Object source, @Nullable ParseState parseState) {     warning(message, source, parseState, null). }
true;public;4;4;/**  * Raise a non-critical warning.  */ ;/**  * Raise a non-critical warning.  */ public void warning(String message, @Nullable Object source, @Nullable ParseState parseState, @Nullable Throwable cause) {     Location location = new Location(getResource(), source).     this.problemReporter.warning(new Problem(message, location, parseState, cause)). }
true;public;1;3;/**  * Fire an defaults-registered event.  */ ;// Explicit parse events /**  * Fire an defaults-registered event.  */ public void fireDefaultsRegistered(DefaultsDefinition defaultsDefinition) {     this.eventListener.defaultsRegistered(defaultsDefinition). }
true;public;1;3;/**  * Fire an component-registered event.  */ ;/**  * Fire an component-registered event.  */ public void fireComponentRegistered(ComponentDefinition componentDefinition) {     this.eventListener.componentRegistered(componentDefinition). }
true;public;3;3;/**  * Fire an alias-registered event.  */ ;/**  * Fire an alias-registered event.  */ public void fireAliasRegistered(String beanName, String alias, @Nullable Object source) {     this.eventListener.aliasRegistered(new AliasDefinition(beanName, alias, source)). }
true;public;2;3;/**  * Fire an import-processed event.  */ ;/**  * Fire an import-processed event.  */ public void fireImportProcessed(String importedResource, @Nullable Object source) {     this.eventListener.importProcessed(new ImportDefinition(importedResource, source)). }
true;public;3;3;/**  * Fire an import-processed event.  */ ;/**  * Fire an import-processed event.  */ public void fireImportProcessed(String importedResource, Resource[] actualResources, @Nullable Object source) {     this.eventListener.importProcessed(new ImportDefinition(importedResource, actualResources, source)). }
true;public;0;3;/**  * Return the source extractor in use.  */ ;// Source extraction /**  * Return the source extractor in use.  */ public SourceExtractor getSourceExtractor() {     return this.sourceExtractor. }
true;public;1;4;/**  * Call the source extractor for the given source object.  * @param sourceCandidate the original source object  * @return the source object to store, or {@code null} for none.  * @see #getSourceExtractor()  * @see SourceExtractor#extractSource  */ ;/**  * Call the source extractor for the given source object.  * @param sourceCandidate the original source object  * @return the source object to store, or {@code null} for none.  * @see #getSourceExtractor()  * @see SourceExtractor#extractSource  */ @Nullable public Object extractSource(Object sourceCandidate) {     return this.sourceExtractor.extractSource(sourceCandidate, this.resource). }
