commented;modifiers;parameterAmount;loc;comment;code
true;public;1;6;/**  * Copy all given method overrides into this object.  */ ;/**  * Copy all given method overrides into this object.  */ public void addOverrides(@Nullable MethodOverrides other) {     if (other != null) {         this.modified = true.         this.overrides.addAll(other.overrides).     } }
true;public;1;4;/**  * Add the given method override.  */ ;/**  * Add the given method override.  */ public void addOverride(MethodOverride override) {     this.modified = true.     this.overrides.add(override). }
true;public;0;4;/**  * Return all method overrides contained by this object.  * @return a Set of MethodOverride objects  * @see MethodOverride  */ ;/**  * Return all method overrides contained by this object.  * @return a Set of MethodOverride objects  * @see MethodOverride  */ public Set<MethodOverride> getOverrides() {     this.modified = true.     return this.overrides. }
true;public;0;3;/**  * Return whether the set of method overrides is empty.  */ ;/**  * Return whether the set of method overrides is empty.  */ public boolean isEmpty() {     return (!this.modified || this.overrides.isEmpty()). }
true;public;1;15;/**  * Return the override for the given method, if any.  * @param method method to check for overrides for  * @return the method override, or {@code null} if none  */ ;/**  * Return the override for the given method, if any.  * @param method method to check for overrides for  * @return the method override, or {@code null} if none  */ @Nullable public MethodOverride getOverride(Method method) {     if (!this.modified) {         return null.     }     synchronized (this.overrides) {         MethodOverride match = null.         for (MethodOverride candidate : this.overrides) {             if (candidate.matches(method)) {                 match = candidate.             }         }         return match.     } }
false;public;1;12;;@Override public boolean equals(Object other) {     if (this == other) {         return true.     }     if (!(other instanceof MethodOverrides)) {         return false.     }     MethodOverrides that = (MethodOverrides) other.     return this.overrides.equals(that.overrides). }
false;public;0;4;;@Override public int hashCode() {     return this.overrides.hashCode(). }
