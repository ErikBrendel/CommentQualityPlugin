# id;timestamp;commentText;codeText;commentWords;codeWords
TypeConverter -> @Nullable 	<T> T convertIfNecessary(@Nullable Object value, @Nullable Class<T> requiredType) throws TypeMismatchException_;1496837955;Convert the value to the required type (if necessary from a String)._<p>Conversions from String to any type will typically use the {@code setAsText}_method of the PropertyEditor class, or a Spring Converter in a ConversionService._@param value the value to convert_@param requiredType the type we must convert to_(or {@code null} if not known, for example in case of a collection element)_@return the new value, possibly the result of type conversion_@throws TypeMismatchException if type conversion failed_@see java.beans.PropertyEditor#setAsText(String)_@see java.beans.PropertyEditor#getValue()_@see org.springframework.core.convert.ConversionService_@see org.springframework.core.convert.converter.Converter;@Nullable_	<T> T convertIfNecessary(@Nullable Object value, @Nullable Class<T> requiredType) throws TypeMismatchException_;convert,the,value,to,the,required,type,if,necessary,from,a,string,p,conversions,from,string,to,any,type,will,typically,use,the,code,set,as,text,method,of,the,property,editor,class,or,a,spring,converter,in,a,conversion,service,param,value,the,value,to,convert,param,required,type,the,type,we,must,convert,to,or,code,null,if,not,known,for,example,in,case,of,a,collection,element,return,the,new,value,possibly,the,result,of,type,conversion,throws,type,mismatch,exception,if,type,conversion,failed,see,java,beans,property,editor,set,as,text,string,see,java,beans,property,editor,get,value,see,org,springframework,core,convert,conversion,service,see,org,springframework,core,convert,converter,converter;nullable,t,t,convert,if,necessary,nullable,object,value,nullable,class,t,required,type,throws,type,mismatch,exception
TypeConverter -> @Nullable 	<T> T convertIfNecessary(@Nullable Object value, @Nullable Class<T> requiredType) throws TypeMismatchException_;1546963887;Convert the value to the required type (if necessary from a String)._<p>Conversions from String to any type will typically use the {@code setAsText}_method of the PropertyEditor class, or a Spring Converter in a ConversionService._@param value the value to convert_@param requiredType the type we must convert to_(or {@code null} if not known, for example in case of a collection element)_@return the new value, possibly the result of type conversion_@throws TypeMismatchException if type conversion failed_@see java.beans.PropertyEditor#setAsText(String)_@see java.beans.PropertyEditor#getValue()_@see org.springframework.core.convert.ConversionService_@see org.springframework.core.convert.converter.Converter;@Nullable_	<T> T convertIfNecessary(@Nullable Object value, @Nullable Class<T> requiredType) throws TypeMismatchException_;convert,the,value,to,the,required,type,if,necessary,from,a,string,p,conversions,from,string,to,any,type,will,typically,use,the,code,set,as,text,method,of,the,property,editor,class,or,a,spring,converter,in,a,conversion,service,param,value,the,value,to,convert,param,required,type,the,type,we,must,convert,to,or,code,null,if,not,known,for,example,in,case,of,a,collection,element,return,the,new,value,possibly,the,result,of,type,conversion,throws,type,mismatch,exception,if,type,conversion,failed,see,java,beans,property,editor,set,as,text,string,see,java,beans,property,editor,get,value,see,org,springframework,core,convert,conversion,service,see,org,springframework,core,convert,converter,converter;nullable,t,t,convert,if,necessary,nullable,object,value,nullable,class,t,required,type,throws,type,mismatch,exception
TypeConverter -> @Nullable 	<T> T convertIfNecessary(@Nullable Object value, @Nullable Class<T> requiredType, 			@Nullable MethodParameter methodParam) throws TypeMismatchException_;1496837955;Convert the value to the required type (if necessary from a String)._<p>Conversions from String to any type will typically use the {@code setAsText}_method of the PropertyEditor class, or a Spring Converter in a ConversionService._@param value the value to convert_@param requiredType the type we must convert to_(or {@code null} if not known, for example in case of a collection element)_@param methodParam the method parameter that is the target of the conversion_(for analysis of generic types_ may be {@code null})_@return the new value, possibly the result of type conversion_@throws TypeMismatchException if type conversion failed_@see java.beans.PropertyEditor#setAsText(String)_@see java.beans.PropertyEditor#getValue()_@see org.springframework.core.convert.ConversionService_@see org.springframework.core.convert.converter.Converter;@Nullable_	<T> T convertIfNecessary(@Nullable Object value, @Nullable Class<T> requiredType,_			@Nullable MethodParameter methodParam) throws TypeMismatchException_;convert,the,value,to,the,required,type,if,necessary,from,a,string,p,conversions,from,string,to,any,type,will,typically,use,the,code,set,as,text,method,of,the,property,editor,class,or,a,spring,converter,in,a,conversion,service,param,value,the,value,to,convert,param,required,type,the,type,we,must,convert,to,or,code,null,if,not,known,for,example,in,case,of,a,collection,element,param,method,param,the,method,parameter,that,is,the,target,of,the,conversion,for,analysis,of,generic,types,may,be,code,null,return,the,new,value,possibly,the,result,of,type,conversion,throws,type,mismatch,exception,if,type,conversion,failed,see,java,beans,property,editor,set,as,text,string,see,java,beans,property,editor,get,value,see,org,springframework,core,convert,conversion,service,see,org,springframework,core,convert,converter,converter;nullable,t,t,convert,if,necessary,nullable,object,value,nullable,class,t,required,type,nullable,method,parameter,method,param,throws,type,mismatch,exception
TypeConverter -> @Nullable 	<T> T convertIfNecessary(@Nullable Object value, @Nullable Class<T> requiredType, 			@Nullable MethodParameter methodParam) throws TypeMismatchException_;1546963887;Convert the value to the required type (if necessary from a String)._<p>Conversions from String to any type will typically use the {@code setAsText}_method of the PropertyEditor class, or a Spring Converter in a ConversionService._@param value the value to convert_@param requiredType the type we must convert to_(or {@code null} if not known, for example in case of a collection element)_@param methodParam the method parameter that is the target of the conversion_(for analysis of generic types_ may be {@code null})_@return the new value, possibly the result of type conversion_@throws TypeMismatchException if type conversion failed_@see java.beans.PropertyEditor#setAsText(String)_@see java.beans.PropertyEditor#getValue()_@see org.springframework.core.convert.ConversionService_@see org.springframework.core.convert.converter.Converter;@Nullable_	<T> T convertIfNecessary(@Nullable Object value, @Nullable Class<T> requiredType,_			@Nullable MethodParameter methodParam) throws TypeMismatchException_;convert,the,value,to,the,required,type,if,necessary,from,a,string,p,conversions,from,string,to,any,type,will,typically,use,the,code,set,as,text,method,of,the,property,editor,class,or,a,spring,converter,in,a,conversion,service,param,value,the,value,to,convert,param,required,type,the,type,we,must,convert,to,or,code,null,if,not,known,for,example,in,case,of,a,collection,element,param,method,param,the,method,parameter,that,is,the,target,of,the,conversion,for,analysis,of,generic,types,may,be,code,null,return,the,new,value,possibly,the,result,of,type,conversion,throws,type,mismatch,exception,if,type,conversion,failed,see,java,beans,property,editor,set,as,text,string,see,java,beans,property,editor,get,value,see,org,springframework,core,convert,conversion,service,see,org,springframework,core,convert,converter,converter;nullable,t,t,convert,if,necessary,nullable,object,value,nullable,class,t,required,type,nullable,method,parameter,method,param,throws,type,mismatch,exception
TypeConverter -> @Nullable 	<T> T convertIfNecessary(@Nullable Object value, @Nullable Class<T> requiredType, @Nullable Field field) 			throws TypeMismatchException_;1496837955;Convert the value to the required type (if necessary from a String)._<p>Conversions from String to any type will typically use the {@code setAsText}_method of the PropertyEditor class, or a Spring Converter in a ConversionService._@param value the value to convert_@param requiredType the type we must convert to_(or {@code null} if not known, for example in case of a collection element)_@param field the reflective field that is the target of the conversion_(for analysis of generic types_ may be {@code null})_@return the new value, possibly the result of type conversion_@throws TypeMismatchException if type conversion failed_@see java.beans.PropertyEditor#setAsText(String)_@see java.beans.PropertyEditor#getValue()_@see org.springframework.core.convert.ConversionService_@see org.springframework.core.convert.converter.Converter;@Nullable_	<T> T convertIfNecessary(@Nullable Object value, @Nullable Class<T> requiredType, @Nullable Field field)_			throws TypeMismatchException_;convert,the,value,to,the,required,type,if,necessary,from,a,string,p,conversions,from,string,to,any,type,will,typically,use,the,code,set,as,text,method,of,the,property,editor,class,or,a,spring,converter,in,a,conversion,service,param,value,the,value,to,convert,param,required,type,the,type,we,must,convert,to,or,code,null,if,not,known,for,example,in,case,of,a,collection,element,param,field,the,reflective,field,that,is,the,target,of,the,conversion,for,analysis,of,generic,types,may,be,code,null,return,the,new,value,possibly,the,result,of,type,conversion,throws,type,mismatch,exception,if,type,conversion,failed,see,java,beans,property,editor,set,as,text,string,see,java,beans,property,editor,get,value,see,org,springframework,core,convert,conversion,service,see,org,springframework,core,convert,converter,converter;nullable,t,t,convert,if,necessary,nullable,object,value,nullable,class,t,required,type,nullable,field,field,throws,type,mismatch,exception
TypeConverter -> @Nullable 	<T> T convertIfNecessary(@Nullable Object value, @Nullable Class<T> requiredType, @Nullable Field field) 			throws TypeMismatchException_;1546963887;Convert the value to the required type (if necessary from a String)._<p>Conversions from String to any type will typically use the {@code setAsText}_method of the PropertyEditor class, or a Spring Converter in a ConversionService._@param value the value to convert_@param requiredType the type we must convert to_(or {@code null} if not known, for example in case of a collection element)_@param field the reflective field that is the target of the conversion_(for analysis of generic types_ may be {@code null})_@return the new value, possibly the result of type conversion_@throws TypeMismatchException if type conversion failed_@see java.beans.PropertyEditor#setAsText(String)_@see java.beans.PropertyEditor#getValue()_@see org.springframework.core.convert.ConversionService_@see org.springframework.core.convert.converter.Converter;@Nullable_	<T> T convertIfNecessary(@Nullable Object value, @Nullable Class<T> requiredType, @Nullable Field field)_			throws TypeMismatchException_;convert,the,value,to,the,required,type,if,necessary,from,a,string,p,conversions,from,string,to,any,type,will,typically,use,the,code,set,as,text,method,of,the,property,editor,class,or,a,spring,converter,in,a,conversion,service,param,value,the,value,to,convert,param,required,type,the,type,we,must,convert,to,or,code,null,if,not,known,for,example,in,case,of,a,collection,element,param,field,the,reflective,field,that,is,the,target,of,the,conversion,for,analysis,of,generic,types,may,be,code,null,return,the,new,value,possibly,the,result,of,type,conversion,throws,type,mismatch,exception,if,type,conversion,failed,see,java,beans,property,editor,set,as,text,string,see,java,beans,property,editor,get,value,see,org,springframework,core,convert,conversion,service,see,org,springframework,core,convert,converter,converter;nullable,t,t,convert,if,necessary,nullable,object,value,nullable,class,t,required,type,nullable,field,field,throws,type,mismatch,exception
TypeConverter -> <T> T convertIfNecessary(Object value, Class<T> requiredType) throws TypeMismatchException_;1328020251;Convert the value to the required type (if necessary from a String)._<p>Conversions from String to any type will typically use the <code>setAsText</code>_method of the PropertyEditor class. Note that a PropertyEditor must be registered_for the given class for this to work_ this is a standard JavaBeans API._A number of PropertyEditors are automatically registered._@param value the value to convert_@param requiredType the type we must convert to_(or <code>null</code> if not known, for example in case of a collection element)_@return the new value, possibly the result of type conversion_@throws TypeMismatchException if type conversion failed_@see java.beans.PropertyEditor#setAsText(String)_@see java.beans.PropertyEditor#getValue();<T> T convertIfNecessary(Object value, Class<T> requiredType) throws TypeMismatchException_;convert,the,value,to,the,required,type,if,necessary,from,a,string,p,conversions,from,string,to,any,type,will,typically,use,the,code,set,as,text,code,method,of,the,property,editor,class,note,that,a,property,editor,must,be,registered,for,the,given,class,for,this,to,work,this,is,a,standard,java,beans,api,a,number,of,property,editors,are,automatically,registered,param,value,the,value,to,convert,param,required,type,the,type,we,must,convert,to,or,code,null,code,if,not,known,for,example,in,case,of,a,collection,element,return,the,new,value,possibly,the,result,of,type,conversion,throws,type,mismatch,exception,if,type,conversion,failed,see,java,beans,property,editor,set,as,text,string,see,java,beans,property,editor,get,value;t,t,convert,if,necessary,object,value,class,t,required,type,throws,type,mismatch,exception
TypeConverter -> <T> T convertIfNecessary(Object value, Class<T> requiredType) throws TypeMismatchException_;1346790972;Convert the value to the required type (if necessary from a String)._<p>Conversions from String to any type will typically use the <code>setAsText</code>_method of the PropertyEditor class, or a Spring Converter in a ConversionService._@param value the value to convert_@param requiredType the type we must convert to_(or <code>null</code> if not known, for example in case of a collection element)_@return the new value, possibly the result of type conversion_@throws TypeMismatchException if type conversion failed_@see java.beans.PropertyEditor#setAsText(String)_@see java.beans.PropertyEditor#getValue()_@see org.springframework.core.convert.ConversionService_@see org.springframework.core.convert.converter.Converter;<T> T convertIfNecessary(Object value, Class<T> requiredType) throws TypeMismatchException_;convert,the,value,to,the,required,type,if,necessary,from,a,string,p,conversions,from,string,to,any,type,will,typically,use,the,code,set,as,text,code,method,of,the,property,editor,class,or,a,spring,converter,in,a,conversion,service,param,value,the,value,to,convert,param,required,type,the,type,we,must,convert,to,or,code,null,code,if,not,known,for,example,in,case,of,a,collection,element,return,the,new,value,possibly,the,result,of,type,conversion,throws,type,mismatch,exception,if,type,conversion,failed,see,java,beans,property,editor,set,as,text,string,see,java,beans,property,editor,get,value,see,org,springframework,core,convert,conversion,service,see,org,springframework,core,convert,converter,converter;t,t,convert,if,necessary,object,value,class,t,required,type,throws,type,mismatch,exception
TypeConverter -> <T> T convertIfNecessary(Object value, Class<T> requiredType) throws TypeMismatchException_;1356735495;Convert the value to the required type (if necessary from a String)._<p>Conversions from String to any type will typically use the {@code setAsText}_method of the PropertyEditor class, or a Spring Converter in a ConversionService._@param value the value to convert_@param requiredType the type we must convert to_(or {@code null} if not known, for example in case of a collection element)_@return the new value, possibly the result of type conversion_@throws TypeMismatchException if type conversion failed_@see java.beans.PropertyEditor#setAsText(String)_@see java.beans.PropertyEditor#getValue()_@see org.springframework.core.convert.ConversionService_@see org.springframework.core.convert.converter.Converter;<T> T convertIfNecessary(Object value, Class<T> requiredType) throws TypeMismatchException_;convert,the,value,to,the,required,type,if,necessary,from,a,string,p,conversions,from,string,to,any,type,will,typically,use,the,code,set,as,text,method,of,the,property,editor,class,or,a,spring,converter,in,a,conversion,service,param,value,the,value,to,convert,param,required,type,the,type,we,must,convert,to,or,code,null,if,not,known,for,example,in,case,of,a,collection,element,return,the,new,value,possibly,the,result,of,type,conversion,throws,type,mismatch,exception,if,type,conversion,failed,see,java,beans,property,editor,set,as,text,string,see,java,beans,property,editor,get,value,see,org,springframework,core,convert,conversion,service,see,org,springframework,core,convert,converter,converter;t,t,convert,if,necessary,object,value,class,t,required,type,throws,type,mismatch,exception
TypeConverter -> <T> T convertIfNecessary(Object value, Class<T> requiredType) throws TypeMismatchException_;1362408075;Convert the value to the required type (if necessary from a String)._<p>Conversions from String to any type will typically use the {@code setAsText}_method of the PropertyEditor class, or a Spring Converter in a ConversionService._@param value the value to convert_@param requiredType the type we must convert to_(or {@code null} if not known, for example in case of a collection element)_@return the new value, possibly the result of type conversion_@throws TypeMismatchException if type conversion failed_@see java.beans.PropertyEditor#setAsText(String)_@see java.beans.PropertyEditor#getValue()_@see org.springframework.core.convert.ConversionService_@see org.springframework.core.convert.converter.Converter;<T> T convertIfNecessary(Object value, Class<T> requiredType) throws TypeMismatchException_;convert,the,value,to,the,required,type,if,necessary,from,a,string,p,conversions,from,string,to,any,type,will,typically,use,the,code,set,as,text,method,of,the,property,editor,class,or,a,spring,converter,in,a,conversion,service,param,value,the,value,to,convert,param,required,type,the,type,we,must,convert,to,or,code,null,if,not,known,for,example,in,case,of,a,collection,element,return,the,new,value,possibly,the,result,of,type,conversion,throws,type,mismatch,exception,if,type,conversion,failed,see,java,beans,property,editor,set,as,text,string,see,java,beans,property,editor,get,value,see,org,springframework,core,convert,conversion,service,see,org,springframework,core,convert,converter,converter;t,t,convert,if,necessary,object,value,class,t,required,type,throws,type,mismatch,exception
TypeConverter -> <T> T convertIfNecessary(Object value, Class<T> requiredType, Field field) 			throws TypeMismatchException_;1346790972;Convert the value to the required type (if necessary from a String)._<p>Conversions from String to any type will typically use the <code>setAsText</code>_method of the PropertyEditor class, or a Spring Converter in a ConversionService._@param value the value to convert_@param requiredType the type we must convert to_(or <code>null</code> if not known, for example in case of a collection element)_@param field the reflective field that is the target of the conversion_(for analysis of generic types_ may be <code>null</code>)_@return the new value, possibly the result of type conversion_@throws TypeMismatchException if type conversion failed_@see java.beans.PropertyEditor#setAsText(String)_@see java.beans.PropertyEditor#getValue()_@see org.springframework.core.convert.ConversionService_@see org.springframework.core.convert.converter.Converter;<T> T convertIfNecessary(Object value, Class<T> requiredType, Field field)_			throws TypeMismatchException_;convert,the,value,to,the,required,type,if,necessary,from,a,string,p,conversions,from,string,to,any,type,will,typically,use,the,code,set,as,text,code,method,of,the,property,editor,class,or,a,spring,converter,in,a,conversion,service,param,value,the,value,to,convert,param,required,type,the,type,we,must,convert,to,or,code,null,code,if,not,known,for,example,in,case,of,a,collection,element,param,field,the,reflective,field,that,is,the,target,of,the,conversion,for,analysis,of,generic,types,may,be,code,null,code,return,the,new,value,possibly,the,result,of,type,conversion,throws,type,mismatch,exception,if,type,conversion,failed,see,java,beans,property,editor,set,as,text,string,see,java,beans,property,editor,get,value,see,org,springframework,core,convert,conversion,service,see,org,springframework,core,convert,converter,converter;t,t,convert,if,necessary,object,value,class,t,required,type,field,field,throws,type,mismatch,exception
TypeConverter -> <T> T convertIfNecessary(Object value, Class<T> requiredType, Field field) 			throws TypeMismatchException_;1356735495;Convert the value to the required type (if necessary from a String)._<p>Conversions from String to any type will typically use the {@code setAsText}_method of the PropertyEditor class, or a Spring Converter in a ConversionService._@param value the value to convert_@param requiredType the type we must convert to_(or {@code null} if not known, for example in case of a collection element)_@param field the reflective field that is the target of the conversion_(for analysis of generic types_ may be {@code null})_@return the new value, possibly the result of type conversion_@throws TypeMismatchException if type conversion failed_@see java.beans.PropertyEditor#setAsText(String)_@see java.beans.PropertyEditor#getValue()_@see org.springframework.core.convert.ConversionService_@see org.springframework.core.convert.converter.Converter;<T> T convertIfNecessary(Object value, Class<T> requiredType, Field field)_			throws TypeMismatchException_;convert,the,value,to,the,required,type,if,necessary,from,a,string,p,conversions,from,string,to,any,type,will,typically,use,the,code,set,as,text,method,of,the,property,editor,class,or,a,spring,converter,in,a,conversion,service,param,value,the,value,to,convert,param,required,type,the,type,we,must,convert,to,or,code,null,if,not,known,for,example,in,case,of,a,collection,element,param,field,the,reflective,field,that,is,the,target,of,the,conversion,for,analysis,of,generic,types,may,be,code,null,return,the,new,value,possibly,the,result,of,type,conversion,throws,type,mismatch,exception,if,type,conversion,failed,see,java,beans,property,editor,set,as,text,string,see,java,beans,property,editor,get,value,see,org,springframework,core,convert,conversion,service,see,org,springframework,core,convert,converter,converter;t,t,convert,if,necessary,object,value,class,t,required,type,field,field,throws,type,mismatch,exception
TypeConverter -> <T> T convertIfNecessary(Object value, Class<T> requiredType, Field field) 			throws TypeMismatchException_;1362408075;Convert the value to the required type (if necessary from a String)._<p>Conversions from String to any type will typically use the {@code setAsText}_method of the PropertyEditor class, or a Spring Converter in a ConversionService._@param value the value to convert_@param requiredType the type we must convert to_(or {@code null} if not known, for example in case of a collection element)_@param field the reflective field that is the target of the conversion_(for analysis of generic types_ may be {@code null})_@return the new value, possibly the result of type conversion_@throws TypeMismatchException if type conversion failed_@see java.beans.PropertyEditor#setAsText(String)_@see java.beans.PropertyEditor#getValue()_@see org.springframework.core.convert.ConversionService_@see org.springframework.core.convert.converter.Converter;<T> T convertIfNecessary(Object value, Class<T> requiredType, Field field)_			throws TypeMismatchException_;convert,the,value,to,the,required,type,if,necessary,from,a,string,p,conversions,from,string,to,any,type,will,typically,use,the,code,set,as,text,method,of,the,property,editor,class,or,a,spring,converter,in,a,conversion,service,param,value,the,value,to,convert,param,required,type,the,type,we,must,convert,to,or,code,null,if,not,known,for,example,in,case,of,a,collection,element,param,field,the,reflective,field,that,is,the,target,of,the,conversion,for,analysis,of,generic,types,may,be,code,null,return,the,new,value,possibly,the,result,of,type,conversion,throws,type,mismatch,exception,if,type,conversion,failed,see,java,beans,property,editor,set,as,text,string,see,java,beans,property,editor,get,value,see,org,springframework,core,convert,conversion,service,see,org,springframework,core,convert,converter,converter;t,t,convert,if,necessary,object,value,class,t,required,type,field,field,throws,type,mismatch,exception
TypeConverter -> <T> T convertIfNecessary(Object value, Class<T> requiredType, MethodParameter methodParam) 			throws TypeMismatchException_;1328020251;Convert the value to the required type (if necessary from a String)._<p>Conversions from String to any type will typically use the <code>setAsText</code>_method of the PropertyEditor class. Note that a PropertyEditor must be registered_for the given class for this to work_ this is a standard JavaBeans API._A number of PropertyEditors are automatically registered._@param value the value to convert_@param requiredType the type we must convert to_(or <code>null</code> if not known, for example in case of a collection element)_@param methodParam the method parameter that is the target of the conversion_(for analysis of generic types_ may be <code>null</code>)_@return the new value, possibly the result of type conversion_@throws TypeMismatchException if type conversion failed_@see java.beans.PropertyEditor#setAsText(String)_@see java.beans.PropertyEditor#getValue();<T> T convertIfNecessary(Object value, Class<T> requiredType, MethodParameter methodParam)_			throws TypeMismatchException_;convert,the,value,to,the,required,type,if,necessary,from,a,string,p,conversions,from,string,to,any,type,will,typically,use,the,code,set,as,text,code,method,of,the,property,editor,class,note,that,a,property,editor,must,be,registered,for,the,given,class,for,this,to,work,this,is,a,standard,java,beans,api,a,number,of,property,editors,are,automatically,registered,param,value,the,value,to,convert,param,required,type,the,type,we,must,convert,to,or,code,null,code,if,not,known,for,example,in,case,of,a,collection,element,param,method,param,the,method,parameter,that,is,the,target,of,the,conversion,for,analysis,of,generic,types,may,be,code,null,code,return,the,new,value,possibly,the,result,of,type,conversion,throws,type,mismatch,exception,if,type,conversion,failed,see,java,beans,property,editor,set,as,text,string,see,java,beans,property,editor,get,value;t,t,convert,if,necessary,object,value,class,t,required,type,method,parameter,method,param,throws,type,mismatch,exception
TypeConverter -> <T> T convertIfNecessary(Object value, Class<T> requiredType, MethodParameter methodParam) 			throws TypeMismatchException_;1346790972;Convert the value to the required type (if necessary from a String)._<p>Conversions from String to any type will typically use the <code>setAsText</code>_method of the PropertyEditor class, or a Spring Converter in a ConversionService._@param value the value to convert_@param requiredType the type we must convert to_(or <code>null</code> if not known, for example in case of a collection element)_@param methodParam the method parameter that is the target of the conversion_(for analysis of generic types_ may be <code>null</code>)_@return the new value, possibly the result of type conversion_@throws TypeMismatchException if type conversion failed_@see java.beans.PropertyEditor#setAsText(String)_@see java.beans.PropertyEditor#getValue()_@see org.springframework.core.convert.ConversionService_@see org.springframework.core.convert.converter.Converter;<T> T convertIfNecessary(Object value, Class<T> requiredType, MethodParameter methodParam)_			throws TypeMismatchException_;convert,the,value,to,the,required,type,if,necessary,from,a,string,p,conversions,from,string,to,any,type,will,typically,use,the,code,set,as,text,code,method,of,the,property,editor,class,or,a,spring,converter,in,a,conversion,service,param,value,the,value,to,convert,param,required,type,the,type,we,must,convert,to,or,code,null,code,if,not,known,for,example,in,case,of,a,collection,element,param,method,param,the,method,parameter,that,is,the,target,of,the,conversion,for,analysis,of,generic,types,may,be,code,null,code,return,the,new,value,possibly,the,result,of,type,conversion,throws,type,mismatch,exception,if,type,conversion,failed,see,java,beans,property,editor,set,as,text,string,see,java,beans,property,editor,get,value,see,org,springframework,core,convert,conversion,service,see,org,springframework,core,convert,converter,converter;t,t,convert,if,necessary,object,value,class,t,required,type,method,parameter,method,param,throws,type,mismatch,exception
TypeConverter -> <T> T convertIfNecessary(Object value, Class<T> requiredType, MethodParameter methodParam) 			throws TypeMismatchException_;1356735495;Convert the value to the required type (if necessary from a String)._<p>Conversions from String to any type will typically use the {@code setAsText}_method of the PropertyEditor class, or a Spring Converter in a ConversionService._@param value the value to convert_@param requiredType the type we must convert to_(or {@code null} if not known, for example in case of a collection element)_@param methodParam the method parameter that is the target of the conversion_(for analysis of generic types_ may be {@code null})_@return the new value, possibly the result of type conversion_@throws TypeMismatchException if type conversion failed_@see java.beans.PropertyEditor#setAsText(String)_@see java.beans.PropertyEditor#getValue()_@see org.springframework.core.convert.ConversionService_@see org.springframework.core.convert.converter.Converter;<T> T convertIfNecessary(Object value, Class<T> requiredType, MethodParameter methodParam)_			throws TypeMismatchException_;convert,the,value,to,the,required,type,if,necessary,from,a,string,p,conversions,from,string,to,any,type,will,typically,use,the,code,set,as,text,method,of,the,property,editor,class,or,a,spring,converter,in,a,conversion,service,param,value,the,value,to,convert,param,required,type,the,type,we,must,convert,to,or,code,null,if,not,known,for,example,in,case,of,a,collection,element,param,method,param,the,method,parameter,that,is,the,target,of,the,conversion,for,analysis,of,generic,types,may,be,code,null,return,the,new,value,possibly,the,result,of,type,conversion,throws,type,mismatch,exception,if,type,conversion,failed,see,java,beans,property,editor,set,as,text,string,see,java,beans,property,editor,get,value,see,org,springframework,core,convert,conversion,service,see,org,springframework,core,convert,converter,converter;t,t,convert,if,necessary,object,value,class,t,required,type,method,parameter,method,param,throws,type,mismatch,exception
TypeConverter -> <T> T convertIfNecessary(Object value, Class<T> requiredType, MethodParameter methodParam) 			throws TypeMismatchException_;1362408075;Convert the value to the required type (if necessary from a String)._<p>Conversions from String to any type will typically use the {@code setAsText}_method of the PropertyEditor class, or a Spring Converter in a ConversionService._@param value the value to convert_@param requiredType the type we must convert to_(or {@code null} if not known, for example in case of a collection element)_@param methodParam the method parameter that is the target of the conversion_(for analysis of generic types_ may be {@code null})_@return the new value, possibly the result of type conversion_@throws TypeMismatchException if type conversion failed_@see java.beans.PropertyEditor#setAsText(String)_@see java.beans.PropertyEditor#getValue()_@see org.springframework.core.convert.ConversionService_@see org.springframework.core.convert.converter.Converter;<T> T convertIfNecessary(Object value, Class<T> requiredType, MethodParameter methodParam)_			throws TypeMismatchException_;convert,the,value,to,the,required,type,if,necessary,from,a,string,p,conversions,from,string,to,any,type,will,typically,use,the,code,set,as,text,method,of,the,property,editor,class,or,a,spring,converter,in,a,conversion,service,param,value,the,value,to,convert,param,required,type,the,type,we,must,convert,to,or,code,null,if,not,known,for,example,in,case,of,a,collection,element,param,method,param,the,method,parameter,that,is,the,target,of,the,conversion,for,analysis,of,generic,types,may,be,code,null,return,the,new,value,possibly,the,result,of,type,conversion,throws,type,mismatch,exception,if,type,conversion,failed,see,java,beans,property,editor,set,as,text,string,see,java,beans,property,editor,get,value,see,org,springframework,core,convert,conversion,service,see,org,springframework,core,convert,converter,converter;t,t,convert,if,necessary,object,value,class,t,required,type,method,parameter,method,param,throws,type,mismatch,exception
