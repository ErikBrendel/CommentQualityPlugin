commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void setBeanClassLoader(ClassLoader classLoader) {     this.beanClassLoader = classLoader. }
false;protected;1;4;;@Override protected Class<?> resolveClassName(String className) throws ClassNotFoundException {     return ClassUtils.forName(className, this.beanClassLoader). }
false;public;1;6;;@Override public void setBeanFactory(BeanFactory beanFactory) {     if (beanFactory instanceof ConfigurableBeanFactory) {         this.beanFactory = (ConfigurableBeanFactory) beanFactory.     } }
true;protected;0;9;/**  * Obtain the TypeConverter from the BeanFactory that this bean runs in,  * if possible.  * @see ConfigurableBeanFactory#getTypeConverter()  */ ;/**  * Obtain the TypeConverter from the BeanFactory that this bean runs in,  * if possible.  * @see ConfigurableBeanFactory#getTypeConverter()  */ @Override protected TypeConverter getDefaultTypeConverter() {     if (this.beanFactory != null) {         return this.beanFactory.getTypeConverter().     } else {         return super.getDefaultTypeConverter().     } }
false;public;0;5;;@Override public void afterPropertiesSet() throws Exception {     prepare().     invokeWithTargetException(). }
true;protected;0;15;/**  * Perform the invocation and convert InvocationTargetException  * into the underlying target exception.  */ ;/**  * Perform the invocation and convert InvocationTargetException  * into the underlying target exception.  */ @Nullable protected Object invokeWithTargetException() throws Exception {     try {         return invoke().     } catch (InvocationTargetException ex) {         if (ex.getTargetException() instanceof Exception) {             throw (Exception) ex.getTargetException().         }         if (ex.getTargetException() instanceof Error) {             throw (Error) ex.getTargetException().         }         throw ex.     } }
