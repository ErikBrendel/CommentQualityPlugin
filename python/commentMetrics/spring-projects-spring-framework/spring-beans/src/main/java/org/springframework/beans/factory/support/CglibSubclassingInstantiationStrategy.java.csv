# id;timestamp;commentText;codeText;commentWords;codeWords
CglibSubclassingInstantiationStrategy -> CglibSubclassCreator -> CglibIdentitySupport -> protected RootBeanDefinition getBeanDefinition();1328020251;Exposed for equals method to allow access to enclosing class field;protected RootBeanDefinition getBeanDefinition() {_				return beanDefinition__			};exposed,for,equals,method,to,allow,access,to,enclosing,class,field;protected,root,bean,definition,get,bean,definition,return,bean,definition
CglibSubclassingInstantiationStrategy -> CglibSubclassCreator -> CglibIdentitySupport -> protected RootBeanDefinition getBeanDefinition();1344552803;Exposed for equals method to allow access to enclosing class field;protected RootBeanDefinition getBeanDefinition() {_				return beanDefinition__			};exposed,for,equals,method,to,allow,access,to,enclosing,class,field;protected,root,bean,definition,get,bean,definition,return,bean,definition
CglibSubclassingInstantiationStrategy -> CglibSubclassCreator -> CglibIdentitySupport -> protected RootBeanDefinition getBeanDefinition();1356735495;Exposed for equals method to allow access to enclosing class field;protected RootBeanDefinition getBeanDefinition() {_				return beanDefinition__			};exposed,for,equals,method,to,allow,access,to,enclosing,class,field;protected,root,bean,definition,get,bean,definition,return,bean,definition
CglibSubclassingInstantiationStrategy -> CglibSubclassCreator -> CglibIdentitySupport -> protected RootBeanDefinition getBeanDefinition();1357119239;Exposed for equals method to allow access to enclosing class field;protected RootBeanDefinition getBeanDefinition() {_				return beanDefinition__			};exposed,for,equals,method,to,allow,access,to,enclosing,class,field;protected,root,bean,definition,get,bean,definition,return,bean,definition
CglibSubclassingInstantiationStrategy -> CglibSubclassCreator -> CglibIdentitySupport -> protected RootBeanDefinition getBeanDefinition();1368482696;Exposed for equals method to allow access to enclosing class field;protected RootBeanDefinition getBeanDefinition() {_				return beanDefinition__			};exposed,for,equals,method,to,allow,access,to,enclosing,class,field;protected,root,bean,definition,get,bean,definition,return,bean,definition
CglibSubclassingInstantiationStrategy -> CglibSubclassCreator -> CglibIdentitySupport -> protected RootBeanDefinition getBeanDefinition();1385412762;Exposed for equals method to allow access to enclosing class field;protected RootBeanDefinition getBeanDefinition() {_				return beanDefinition__			};exposed,for,equals,method,to,allow,access,to,enclosing,class,field;protected,root,bean,definition,get,bean,definition,return,bean,definition
CglibSubclassingInstantiationStrategy -> CglibSubclassCreator -> CglibIdentitySupport -> protected RootBeanDefinition getBeanDefinition();1391714711;Exposed for equals method to allow access to enclosing class field;protected RootBeanDefinition getBeanDefinition() {_				return beanDefinition__			};exposed,for,equals,method,to,allow,access,to,enclosing,class,field;protected,root,bean,definition,get,bean,definition,return,bean,definition
CglibSubclassingInstantiationStrategy -> CglibSubclassCreator -> CglibIdentitySupport -> protected RootBeanDefinition getBeanDefinition();1391902244;Exposed for equals method to allow access to enclosing class field;protected RootBeanDefinition getBeanDefinition() {_				return beanDefinition__			};exposed,for,equals,method,to,allow,access,to,enclosing,class,field;protected,root,bean,definition,get,bean,definition,return,bean,definition
CglibSubclassingInstantiationStrategy -> CglibSubclassCreator -> public Object instantiate(@Nullable Constructor<?> ctor, Object... args);1495868221;Create a new instance of a dynamically generated subclass implementing the_required lookups._@param ctor constructor to use. If this is {@code null}, use the_no-arg constructor (no parameterization, or Setter Injection)_@param args arguments to use for the constructor._Ignored if the {@code ctor} parameter is {@code null}._@return new instance of the dynamically generated subclass;public Object instantiate(@Nullable Constructor<?> ctor, Object... args) {_			Class<?> subclass = createEnhancedSubclass(this.beanDefinition)__			Object instance__			if (ctor == null) {_				instance = BeanUtils.instantiateClass(subclass)__			}_			else {_				try {_					Constructor<?> enhancedSubclassConstructor = subclass.getConstructor(ctor.getParameterTypes())__					instance = enhancedSubclassConstructor.newInstance(args)__				}_				catch (Exception ex) {_					throw new BeanInstantiationException(this.beanDefinition.getBeanClass(),_							"Failed to invoke constructor for CGLIB enhanced subclass [" + subclass.getName() + "]", ex)__				}_			}_			_			_			Factory factory = (Factory) instance__			factory.setCallbacks(new Callback[] {NoOp.INSTANCE,_					new LookupOverrideMethodInterceptor(this.beanDefinition, this.owner),_					new ReplaceOverrideMethodInterceptor(this.beanDefinition, this.owner)})__			return instance__		};create,a,new,instance,of,a,dynamically,generated,subclass,implementing,the,required,lookups,param,ctor,constructor,to,use,if,this,is,code,null,use,the,no,arg,constructor,no,parameterization,or,setter,injection,param,args,arguments,to,use,for,the,constructor,ignored,if,the,code,ctor,parameter,is,code,null,return,new,instance,of,the,dynamically,generated,subclass;public,object,instantiate,nullable,constructor,ctor,object,args,class,subclass,create,enhanced,subclass,this,bean,definition,object,instance,if,ctor,null,instance,bean,utils,instantiate,class,subclass,else,try,constructor,enhanced,subclass,constructor,subclass,get,constructor,ctor,get,parameter,types,instance,enhanced,subclass,constructor,new,instance,args,catch,exception,ex,throw,new,bean,instantiation,exception,this,bean,definition,get,bean,class,failed,to,invoke,constructor,for,cglib,enhanced,subclass,subclass,get,name,ex,factory,factory,factory,instance,factory,set,callbacks,new,callback,no,op,instance,new,lookup,override,method,interceptor,this,bean,definition,this,owner,new,replace,override,method,interceptor,this,bean,definition,this,owner,return,instance
CglibSubclassingInstantiationStrategy -> CglibSubclassCreator -> public Object instantiate(@Nullable Constructor<?> ctor, Object... args);1496259743;Create a new instance of a dynamically generated subclass implementing the_required lookups._@param ctor constructor to use. If this is {@code null}, use the_no-arg constructor (no parameterization, or Setter Injection)_@param args arguments to use for the constructor._Ignored if the {@code ctor} parameter is {@code null}._@return new instance of the dynamically generated subclass;public Object instantiate(@Nullable Constructor<?> ctor, Object... args) {_			Class<?> subclass = createEnhancedSubclass(this.beanDefinition)__			Object instance__			if (ctor == null) {_				instance = BeanUtils.instantiateClass(subclass)__			}_			else {_				try {_					Constructor<?> enhancedSubclassConstructor = subclass.getConstructor(ctor.getParameterTypes())__					instance = enhancedSubclassConstructor.newInstance(args)__				}_				catch (Exception ex) {_					throw new BeanInstantiationException(this.beanDefinition.getBeanClass(),_							"Failed to invoke constructor for CGLIB enhanced subclass [" + subclass.getName() + "]", ex)__				}_			}_			_			_			Factory factory = (Factory) instance__			factory.setCallbacks(new Callback[] {NoOp.INSTANCE,_					new LookupOverrideMethodInterceptor(this.beanDefinition, this.owner),_					new ReplaceOverrideMethodInterceptor(this.beanDefinition, this.owner)})__			return instance__		};create,a,new,instance,of,a,dynamically,generated,subclass,implementing,the,required,lookups,param,ctor,constructor,to,use,if,this,is,code,null,use,the,no,arg,constructor,no,parameterization,or,setter,injection,param,args,arguments,to,use,for,the,constructor,ignored,if,the,code,ctor,parameter,is,code,null,return,new,instance,of,the,dynamically,generated,subclass;public,object,instantiate,nullable,constructor,ctor,object,args,class,subclass,create,enhanced,subclass,this,bean,definition,object,instance,if,ctor,null,instance,bean,utils,instantiate,class,subclass,else,try,constructor,enhanced,subclass,constructor,subclass,get,constructor,ctor,get,parameter,types,instance,enhanced,subclass,constructor,new,instance,args,catch,exception,ex,throw,new,bean,instantiation,exception,this,bean,definition,get,bean,class,failed,to,invoke,constructor,for,cglib,enhanced,subclass,subclass,get,name,ex,factory,factory,factory,instance,factory,set,callbacks,new,callback,no,op,instance,new,lookup,override,method,interceptor,this,bean,definition,this,owner,new,replace,override,method,interceptor,this,bean,definition,this,owner,return,instance
CglibSubclassingInstantiationStrategy -> CglibSubclassCreator -> public Object instantiate(@Nullable Constructor<?> ctor, Object... args);1534157021;Create a new instance of a dynamically generated subclass implementing the_required lookups._@param ctor constructor to use. If this is {@code null}, use the_no-arg constructor (no parameterization, or Setter Injection)_@param args arguments to use for the constructor._Ignored if the {@code ctor} parameter is {@code null}._@return new instance of the dynamically generated subclass;public Object instantiate(@Nullable Constructor<?> ctor, Object... args) {_			Class<?> subclass = createEnhancedSubclass(this.beanDefinition)__			Object instance__			if (ctor == null) {_				instance = BeanUtils.instantiateClass(subclass)__			}_			else {_				try {_					Constructor<?> enhancedSubclassConstructor = subclass.getConstructor(ctor.getParameterTypes())__					instance = enhancedSubclassConstructor.newInstance(args)__				}_				catch (Exception ex) {_					throw new BeanInstantiationException(this.beanDefinition.getBeanClass(),_							"Failed to invoke constructor for CGLIB enhanced subclass [" + subclass.getName() + "]", ex)__				}_			}_			_			_			Factory factory = (Factory) instance__			factory.setCallbacks(new Callback[] {NoOp.INSTANCE,_					new LookupOverrideMethodInterceptor(this.beanDefinition, this.owner),_					new ReplaceOverrideMethodInterceptor(this.beanDefinition, this.owner)})__			return instance__		};create,a,new,instance,of,a,dynamically,generated,subclass,implementing,the,required,lookups,param,ctor,constructor,to,use,if,this,is,code,null,use,the,no,arg,constructor,no,parameterization,or,setter,injection,param,args,arguments,to,use,for,the,constructor,ignored,if,the,code,ctor,parameter,is,code,null,return,new,instance,of,the,dynamically,generated,subclass;public,object,instantiate,nullable,constructor,ctor,object,args,class,subclass,create,enhanced,subclass,this,bean,definition,object,instance,if,ctor,null,instance,bean,utils,instantiate,class,subclass,else,try,constructor,enhanced,subclass,constructor,subclass,get,constructor,ctor,get,parameter,types,instance,enhanced,subclass,constructor,new,instance,args,catch,exception,ex,throw,new,bean,instantiation,exception,this,bean,definition,get,bean,class,failed,to,invoke,constructor,for,cglib,enhanced,subclass,subclass,get,name,ex,factory,factory,factory,instance,factory,set,callbacks,new,callback,no,op,instance,new,lookup,override,method,interceptor,this,bean,definition,this,owner,new,replace,override,method,interceptor,this,bean,definition,this,owner,return,instance
CglibSubclassingInstantiationStrategy -> CglibSubclassCreator -> public Object instantiate(Constructor<?> ctor, Object... args);1413920443;Create a new instance of a dynamically generated subclass implementing the_required lookups._@param ctor constructor to use. If this is {@code null}, use the_no-arg constructor (no parameterization, or Setter Injection)_@param args arguments to use for the constructor._Ignored if the {@code ctor} parameter is {@code null}._@return new instance of the dynamically generated subclass;public Object instantiate(Constructor<?> ctor, Object... args) {_			Class<?> subclass = createEnhancedSubclass(this.beanDefinition)__			Object instance__			if (ctor == null) {_				instance = BeanUtils.instantiate(subclass)__			}_			else {_				try {_					Constructor<?> enhancedSubclassConstructor = subclass.getConstructor(ctor.getParameterTypes())__					instance = enhancedSubclassConstructor.newInstance(args)__				}_				catch (Exception ex) {_					throw new BeanInstantiationException(this.beanDefinition.getBeanClass(),_							"Failed to invoke constructor for CGLIB enhanced subclass [" + subclass.getName() + "]", ex)__				}_			}_			_			_			Factory factory = (Factory) instance__			factory.setCallbacks(new Callback[] {NoOp.INSTANCE,_					new LookupOverrideMethodInterceptor(this.beanDefinition, this.owner),_					new ReplaceOverrideMethodInterceptor(this.beanDefinition, this.owner)})__			return instance__		};create,a,new,instance,of,a,dynamically,generated,subclass,implementing,the,required,lookups,param,ctor,constructor,to,use,if,this,is,code,null,use,the,no,arg,constructor,no,parameterization,or,setter,injection,param,args,arguments,to,use,for,the,constructor,ignored,if,the,code,ctor,parameter,is,code,null,return,new,instance,of,the,dynamically,generated,subclass;public,object,instantiate,constructor,ctor,object,args,class,subclass,create,enhanced,subclass,this,bean,definition,object,instance,if,ctor,null,instance,bean,utils,instantiate,subclass,else,try,constructor,enhanced,subclass,constructor,subclass,get,constructor,ctor,get,parameter,types,instance,enhanced,subclass,constructor,new,instance,args,catch,exception,ex,throw,new,bean,instantiation,exception,this,bean,definition,get,bean,class,failed,to,invoke,constructor,for,cglib,enhanced,subclass,subclass,get,name,ex,factory,factory,factory,instance,factory,set,callbacks,new,callback,no,op,instance,new,lookup,override,method,interceptor,this,bean,definition,this,owner,new,replace,override,method,interceptor,this,bean,definition,this,owner,return,instance
CglibSubclassingInstantiationStrategy -> CglibSubclassCreator -> public Object instantiate(Constructor<?> ctor, Object... args);1448383082;Create a new instance of a dynamically generated subclass implementing the_required lookups._@param ctor constructor to use. If this is {@code null}, use the_no-arg constructor (no parameterization, or Setter Injection)_@param args arguments to use for the constructor._Ignored if the {@code ctor} parameter is {@code null}._@return new instance of the dynamically generated subclass;public Object instantiate(Constructor<?> ctor, Object... args) {_			Class<?> subclass = createEnhancedSubclass(this.beanDefinition)__			Object instance__			if (ctor == null) {_				instance = BeanUtils.instantiate(subclass)__			}_			else {_				try {_					Constructor<?> enhancedSubclassConstructor = subclass.getConstructor(ctor.getParameterTypes())__					instance = enhancedSubclassConstructor.newInstance(args)__				}_				catch (Exception ex) {_					throw new BeanInstantiationException(this.beanDefinition.getBeanClass(),_							"Failed to invoke constructor for CGLIB enhanced subclass [" + subclass.getName() + "]", ex)__				}_			}_			_			_			Factory factory = (Factory) instance__			factory.setCallbacks(new Callback[] {NoOp.INSTANCE,_					new LookupOverrideMethodInterceptor(this.beanDefinition, this.owner),_					new ReplaceOverrideMethodInterceptor(this.beanDefinition, this.owner)})__			return instance__		};create,a,new,instance,of,a,dynamically,generated,subclass,implementing,the,required,lookups,param,ctor,constructor,to,use,if,this,is,code,null,use,the,no,arg,constructor,no,parameterization,or,setter,injection,param,args,arguments,to,use,for,the,constructor,ignored,if,the,code,ctor,parameter,is,code,null,return,new,instance,of,the,dynamically,generated,subclass;public,object,instantiate,constructor,ctor,object,args,class,subclass,create,enhanced,subclass,this,bean,definition,object,instance,if,ctor,null,instance,bean,utils,instantiate,subclass,else,try,constructor,enhanced,subclass,constructor,subclass,get,constructor,ctor,get,parameter,types,instance,enhanced,subclass,constructor,new,instance,args,catch,exception,ex,throw,new,bean,instantiation,exception,this,bean,definition,get,bean,class,failed,to,invoke,constructor,for,cglib,enhanced,subclass,subclass,get,name,ex,factory,factory,factory,instance,factory,set,callbacks,new,callback,no,op,instance,new,lookup,override,method,interceptor,this,bean,definition,this,owner,new,replace,override,method,interceptor,this,bean,definition,this,owner,return,instance
CglibSubclassingInstantiationStrategy -> CglibSubclassCreator -> public Object instantiate(Constructor<?> ctor, Object... args);1449660489;Create a new instance of a dynamically generated subclass implementing the_required lookups._@param ctor constructor to use. If this is {@code null}, use the_no-arg constructor (no parameterization, or Setter Injection)_@param args arguments to use for the constructor._Ignored if the {@code ctor} parameter is {@code null}._@return new instance of the dynamically generated subclass;public Object instantiate(Constructor<?> ctor, Object... args) {_			Class<?> subclass = createEnhancedSubclass(this.beanDefinition)__			Object instance__			if (ctor == null) {_				instance = BeanUtils.instantiate(subclass)__			}_			else {_				try {_					Constructor<?> enhancedSubclassConstructor = subclass.getConstructor(ctor.getParameterTypes())__					instance = enhancedSubclassConstructor.newInstance(args)__				}_				catch (Exception ex) {_					throw new BeanInstantiationException(this.beanDefinition.getBeanClass(),_							"Failed to invoke constructor for CGLIB enhanced subclass [" + subclass.getName() + "]", ex)__				}_			}_			_			_			Factory factory = (Factory) instance__			factory.setCallbacks(new Callback[] {NoOp.INSTANCE,_					new LookupOverrideMethodInterceptor(this.beanDefinition, this.owner),_					new ReplaceOverrideMethodInterceptor(this.beanDefinition, this.owner)})__			return instance__		};create,a,new,instance,of,a,dynamically,generated,subclass,implementing,the,required,lookups,param,ctor,constructor,to,use,if,this,is,code,null,use,the,no,arg,constructor,no,parameterization,or,setter,injection,param,args,arguments,to,use,for,the,constructor,ignored,if,the,code,ctor,parameter,is,code,null,return,new,instance,of,the,dynamically,generated,subclass;public,object,instantiate,constructor,ctor,object,args,class,subclass,create,enhanced,subclass,this,bean,definition,object,instance,if,ctor,null,instance,bean,utils,instantiate,subclass,else,try,constructor,enhanced,subclass,constructor,subclass,get,constructor,ctor,get,parameter,types,instance,enhanced,subclass,constructor,new,instance,args,catch,exception,ex,throw,new,bean,instantiation,exception,this,bean,definition,get,bean,class,failed,to,invoke,constructor,for,cglib,enhanced,subclass,subclass,get,name,ex,factory,factory,factory,instance,factory,set,callbacks,new,callback,no,op,instance,new,lookup,override,method,interceptor,this,bean,definition,this,owner,new,replace,override,method,interceptor,this,bean,definition,this,owner,return,instance
CglibSubclassingInstantiationStrategy -> CglibSubclassCreator -> public Object instantiate(Constructor<?> ctor, Object... args);1468948866;Create a new instance of a dynamically generated subclass implementing the_required lookups._@param ctor constructor to use. If this is {@code null}, use the_no-arg constructor (no parameterization, or Setter Injection)_@param args arguments to use for the constructor._Ignored if the {@code ctor} parameter is {@code null}._@return new instance of the dynamically generated subclass;public Object instantiate(Constructor<?> ctor, Object... args) {_			Class<?> subclass = createEnhancedSubclass(this.beanDefinition)__			Object instance__			if (ctor == null) {_				instance = BeanUtils.instantiateClass(subclass)__			}_			else {_				try {_					Constructor<?> enhancedSubclassConstructor = subclass.getConstructor(ctor.getParameterTypes())__					instance = enhancedSubclassConstructor.newInstance(args)__				}_				catch (Exception ex) {_					throw new BeanInstantiationException(this.beanDefinition.getBeanClass(),_							"Failed to invoke constructor for CGLIB enhanced subclass [" + subclass.getName() + "]", ex)__				}_			}_			_			_			Factory factory = (Factory) instance__			factory.setCallbacks(new Callback[] {NoOp.INSTANCE,_					new LookupOverrideMethodInterceptor(this.beanDefinition, this.owner),_					new ReplaceOverrideMethodInterceptor(this.beanDefinition, this.owner)})__			return instance__		};create,a,new,instance,of,a,dynamically,generated,subclass,implementing,the,required,lookups,param,ctor,constructor,to,use,if,this,is,code,null,use,the,no,arg,constructor,no,parameterization,or,setter,injection,param,args,arguments,to,use,for,the,constructor,ignored,if,the,code,ctor,parameter,is,code,null,return,new,instance,of,the,dynamically,generated,subclass;public,object,instantiate,constructor,ctor,object,args,class,subclass,create,enhanced,subclass,this,bean,definition,object,instance,if,ctor,null,instance,bean,utils,instantiate,class,subclass,else,try,constructor,enhanced,subclass,constructor,subclass,get,constructor,ctor,get,parameter,types,instance,enhanced,subclass,constructor,new,instance,args,catch,exception,ex,throw,new,bean,instantiation,exception,this,bean,definition,get,bean,class,failed,to,invoke,constructor,for,cglib,enhanced,subclass,subclass,get,name,ex,factory,factory,factory,instance,factory,set,callbacks,new,callback,no,op,instance,new,lookup,override,method,interceptor,this,bean,definition,this,owner,new,replace,override,method,interceptor,this,bean,definition,this,owner,return,instance
CglibSubclassingInstantiationStrategy -> CglibSubclassCreator -> public Object instantiate(Constructor<?> ctor, Object[] args);1385412762;Create a new instance of a dynamically generated subclasses implementing the_required lookups._@param ctor constructor to use. If this is {@code null}, use the_no-arg constructor (no parameterization, or Setter Injection)_@param args arguments to use for the constructor._Ignored if the ctor parameter is {@code null}._@return new instance of the dynamically generated class;public Object instantiate(Constructor<?> ctor, Object[] args) {_			Enhancer enhancer = new Enhancer()__			enhancer.setSuperclass(this.beanDefinition.getBeanClass())__			enhancer.setCallbackFilter(new CallbackFilterImpl())__			enhancer.setCallbacks(new Callback[] {_					NoOp.INSTANCE,_					new LookupOverrideMethodInterceptor(),_					new ReplaceOverrideMethodInterceptor()_			})___			return (ctor == null) ?_					enhancer.create() :_					enhancer.create(ctor.getParameterTypes(), args)__		};create,a,new,instance,of,a,dynamically,generated,subclasses,implementing,the,required,lookups,param,ctor,constructor,to,use,if,this,is,code,null,use,the,no,arg,constructor,no,parameterization,or,setter,injection,param,args,arguments,to,use,for,the,constructor,ignored,if,the,ctor,parameter,is,code,null,return,new,instance,of,the,dynamically,generated,class;public,object,instantiate,constructor,ctor,object,args,enhancer,enhancer,new,enhancer,enhancer,set,superclass,this,bean,definition,get,bean,class,enhancer,set,callback,filter,new,callback,filter,impl,enhancer,set,callbacks,new,callback,no,op,instance,new,lookup,override,method,interceptor,new,replace,override,method,interceptor,return,ctor,null,enhancer,create,enhancer,create,ctor,get,parameter,types,args
CglibSubclassingInstantiationStrategy -> CglibSubclassCreator -> public Object instantiate(Constructor<?> ctor, Object[] args);1391714711;Create a new instance of a dynamically generated subclasses implementing the_required lookups._@param ctor constructor to use. If this is {@code null}, use the_no-arg constructor (no parameterization, or Setter Injection)_@param args arguments to use for the constructor._Ignored if the ctor parameter is {@code null}._@return new instance of the dynamically generated class;public Object instantiate(Constructor<?> ctor, Object[] args) {_			Enhancer enhancer = new Enhancer()__			enhancer.setSuperclass(this.beanDefinition.getBeanClass())__			enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE)__			enhancer.setCallbackFilter(new CallbackFilterImpl())__			enhancer.setCallbacks(new Callback[] {_					NoOp.INSTANCE,_					new LookupOverrideMethodInterceptor(),_					new ReplaceOverrideMethodInterceptor()_			})___			return (ctor != null ? enhancer.create(ctor.getParameterTypes(), args) : enhancer.create())__		};create,a,new,instance,of,a,dynamically,generated,subclasses,implementing,the,required,lookups,param,ctor,constructor,to,use,if,this,is,code,null,use,the,no,arg,constructor,no,parameterization,or,setter,injection,param,args,arguments,to,use,for,the,constructor,ignored,if,the,ctor,parameter,is,code,null,return,new,instance,of,the,dynamically,generated,class;public,object,instantiate,constructor,ctor,object,args,enhancer,enhancer,new,enhancer,enhancer,set,superclass,this,bean,definition,get,bean,class,enhancer,set,naming,policy,spring,naming,policy,instance,enhancer,set,callback,filter,new,callback,filter,impl,enhancer,set,callbacks,new,callback,no,op,instance,new,lookup,override,method,interceptor,new,replace,override,method,interceptor,return,ctor,null,enhancer,create,ctor,get,parameter,types,args,enhancer,create
CglibSubclassingInstantiationStrategy -> CglibSubclassCreator -> public Object instantiate(Constructor<?> ctor, Object[] args);1391902244;Create a new instance of a dynamically generated subclass implementing the_required lookups._@param ctor constructor to use. If this is {@code null}, use the_no-arg constructor (no parameterization, or Setter Injection)_@param args arguments to use for the constructor._Ignored if the ctor parameter is {@code null}._@return new instance of the dynamically generated subclass;public Object instantiate(Constructor<?> ctor, Object[] args) {_			Enhancer enhancer = new Enhancer()__			enhancer.setSuperclass(this.beanDefinition.getBeanClass())__			enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE)__			enhancer.setCallbackFilter(new CallbackFilterImpl())__			enhancer.setCallbacks(new Callback[] {_					NoOp.INSTANCE,_					new LookupOverrideMethodInterceptor(),_					new ReplaceOverrideMethodInterceptor()_			})___			return (ctor != null ? enhancer.create(ctor.getParameterTypes(), args) : enhancer.create())__		};create,a,new,instance,of,a,dynamically,generated,subclass,implementing,the,required,lookups,param,ctor,constructor,to,use,if,this,is,code,null,use,the,no,arg,constructor,no,parameterization,or,setter,injection,param,args,arguments,to,use,for,the,constructor,ignored,if,the,ctor,parameter,is,code,null,return,new,instance,of,the,dynamically,generated,subclass;public,object,instantiate,constructor,ctor,object,args,enhancer,enhancer,new,enhancer,enhancer,set,superclass,this,bean,definition,get,bean,class,enhancer,set,naming,policy,spring,naming,policy,instance,enhancer,set,callback,filter,new,callback,filter,impl,enhancer,set,callbacks,new,callback,no,op,instance,new,lookup,override,method,interceptor,new,replace,override,method,interceptor,return,ctor,null,enhancer,create,ctor,get,parameter,types,args,enhancer,create
CglibSubclassingInstantiationStrategy -> CglibSubclassCreator -> Object instantiate(Constructor<?> ctor, Object[] args);1392253766;Create a new instance of a dynamically generated subclass implementing the_required lookups._@param ctor constructor to use. If this is {@code null}, use the_no-arg constructor (no parameterization, or Setter Injection)_@param args arguments to use for the constructor._Ignored if the {@code ctor} parameter is {@code null}._@return new instance of the dynamically generated subclass;Object instantiate(Constructor<?> ctor, Object[] args) {_			Class<?> subclass = createEnhancedSubclass(this.beanDefinition)___			Object instance__			if (ctor == null) {_				instance = BeanUtils.instantiate(subclass)__			}_			else {_				try {_					Constructor<?> enhancedSubclassConstructor = subclass.getConstructor(ctor.getParameterTypes())__					instance = enhancedSubclassConstructor.newInstance(args)__				}_				catch (Exception e) {_					throw new BeanInstantiationException(this.beanDefinition.getBeanClass(), String.format(_						"Failed to invoke construcor for CGLIB enhanced subclass [%s]", subclass.getName()), e)__				}_			}__			_			_			Factory factory = (Factory) instance__			factory.setCallbacks(new Callback[] { NoOp.INSTANCE,_				new LookupOverrideMethodInterceptor(beanDefinition, owner),_				new ReplaceOverrideMethodInterceptor(beanDefinition, owner) })___			return instance__		};create,a,new,instance,of,a,dynamically,generated,subclass,implementing,the,required,lookups,param,ctor,constructor,to,use,if,this,is,code,null,use,the,no,arg,constructor,no,parameterization,or,setter,injection,param,args,arguments,to,use,for,the,constructor,ignored,if,the,code,ctor,parameter,is,code,null,return,new,instance,of,the,dynamically,generated,subclass;object,instantiate,constructor,ctor,object,args,class,subclass,create,enhanced,subclass,this,bean,definition,object,instance,if,ctor,null,instance,bean,utils,instantiate,subclass,else,try,constructor,enhanced,subclass,constructor,subclass,get,constructor,ctor,get,parameter,types,instance,enhanced,subclass,constructor,new,instance,args,catch,exception,e,throw,new,bean,instantiation,exception,this,bean,definition,get,bean,class,string,format,failed,to,invoke,construcor,for,cglib,enhanced,subclass,s,subclass,get,name,e,factory,factory,factory,instance,factory,set,callbacks,new,callback,no,op,instance,new,lookup,override,method,interceptor,bean,definition,owner,new,replace,override,method,interceptor,bean,definition,owner,return,instance
CglibSubclassingInstantiationStrategy -> CglibSubclassCreator -> Object instantiate(Constructor<?> ctor, Object[] args);1392254721;Create a new instance of a dynamically generated subclass implementing the_required lookups._@param ctor constructor to use. If this is {@code null}, use the_no-arg constructor (no parameterization, or Setter Injection)_@param args arguments to use for the constructor._Ignored if the {@code ctor} parameter is {@code null}._@return new instance of the dynamically generated subclass;Object instantiate(Constructor<?> ctor, Object[] args) {_			Class<?> subclass = createEnhancedSubclass(this.beanDefinition)___			Object instance__			if (ctor == null) {_				instance = BeanUtils.instantiate(subclass)__			}_			else {_				try {_					Constructor<?> enhancedSubclassConstructor = subclass.getConstructor(ctor.getParameterTypes())__					instance = enhancedSubclassConstructor.newInstance(args)__				}_				catch (Exception e) {_					throw new BeanInstantiationException(this.beanDefinition.getBeanClass(), String.format(_						"Failed to invoke construcor for CGLIB enhanced subclass [%s]", subclass.getName()), e)__				}_			}__			_			_			Factory factory = (Factory) instance__			factory.setCallbacks(new Callback[] { NoOp.INSTANCE,_				new LookupOverrideMethodInterceptor(beanDefinition, owner),_				new ReplaceOverrideMethodInterceptor(beanDefinition, owner) })___			return instance__		};create,a,new,instance,of,a,dynamically,generated,subclass,implementing,the,required,lookups,param,ctor,constructor,to,use,if,this,is,code,null,use,the,no,arg,constructor,no,parameterization,or,setter,injection,param,args,arguments,to,use,for,the,constructor,ignored,if,the,code,ctor,parameter,is,code,null,return,new,instance,of,the,dynamically,generated,subclass;object,instantiate,constructor,ctor,object,args,class,subclass,create,enhanced,subclass,this,bean,definition,object,instance,if,ctor,null,instance,bean,utils,instantiate,subclass,else,try,constructor,enhanced,subclass,constructor,subclass,get,constructor,ctor,get,parameter,types,instance,enhanced,subclass,constructor,new,instance,args,catch,exception,e,throw,new,bean,instantiation,exception,this,bean,definition,get,bean,class,string,format,failed,to,invoke,construcor,for,cglib,enhanced,subclass,s,subclass,get,name,e,factory,factory,factory,instance,factory,set,callbacks,new,callback,no,op,instance,new,lookup,override,method,interceptor,bean,definition,owner,new,replace,override,method,interceptor,bean,definition,owner,return,instance
CglibSubclassingInstantiationStrategy -> CglibSubclassCreator -> Object instantiate(Constructor<?> ctor, Object[] args);1408052945;Create a new instance of a dynamically generated subclass implementing the_required lookups._@param ctor constructor to use. If this is {@code null}, use the_no-arg constructor (no parameterization, or Setter Injection)_@param args arguments to use for the constructor._Ignored if the {@code ctor} parameter is {@code null}._@return new instance of the dynamically generated subclass;Object instantiate(Constructor<?> ctor, Object[] args) {_			Class<?> subclass = createEnhancedSubclass(this.beanDefinition)__			Object instance__			if (ctor == null) {_				instance = BeanUtils.instantiate(subclass)__			}_			else {_				try {_					Constructor<?> enhancedSubclassConstructor = subclass.getConstructor(ctor.getParameterTypes())__					instance = enhancedSubclassConstructor.newInstance(args)__				}_				catch (Exception ex) {_					throw new BeanInstantiationException(this.beanDefinition.getBeanClass(), String.format(_							"Failed to invoke constructor for CGLIB enhanced subclass [%s]", subclass.getName()), ex)__				}_			}_			_			_			Factory factory = (Factory) instance__			factory.setCallbacks(new Callback[] {NoOp.INSTANCE,_					new LookupOverrideMethodInterceptor(this.beanDefinition, this.owner),_					new ReplaceOverrideMethodInterceptor(this.beanDefinition, this.owner)})__			return instance__		};create,a,new,instance,of,a,dynamically,generated,subclass,implementing,the,required,lookups,param,ctor,constructor,to,use,if,this,is,code,null,use,the,no,arg,constructor,no,parameterization,or,setter,injection,param,args,arguments,to,use,for,the,constructor,ignored,if,the,code,ctor,parameter,is,code,null,return,new,instance,of,the,dynamically,generated,subclass;object,instantiate,constructor,ctor,object,args,class,subclass,create,enhanced,subclass,this,bean,definition,object,instance,if,ctor,null,instance,bean,utils,instantiate,subclass,else,try,constructor,enhanced,subclass,constructor,subclass,get,constructor,ctor,get,parameter,types,instance,enhanced,subclass,constructor,new,instance,args,catch,exception,ex,throw,new,bean,instantiation,exception,this,bean,definition,get,bean,class,string,format,failed,to,invoke,constructor,for,cglib,enhanced,subclass,s,subclass,get,name,ex,factory,factory,factory,instance,factory,set,callbacks,new,callback,no,op,instance,new,lookup,override,method,interceptor,this,bean,definition,this,owner,new,replace,override,method,interceptor,this,bean,definition,this,owner,return,instance
CglibSubclassingInstantiationStrategy -> CglibSubclassCreator -> public Object instantiate(@Nullable Constructor<?> ctor, @Nullable Object... args);1496837955;Create a new instance of a dynamically generated subclass implementing the_required lookups._@param ctor constructor to use. If this is {@code null}, use the_no-arg constructor (no parameterization, or Setter Injection)_@param args arguments to use for the constructor._Ignored if the {@code ctor} parameter is {@code null}._@return new instance of the dynamically generated subclass;public Object instantiate(@Nullable Constructor<?> ctor, @Nullable Object... args) {_			Class<?> subclass = createEnhancedSubclass(this.beanDefinition)__			Object instance__			if (ctor == null) {_				instance = BeanUtils.instantiateClass(subclass)__			}_			else {_				try {_					Constructor<?> enhancedSubclassConstructor = subclass.getConstructor(ctor.getParameterTypes())__					instance = enhancedSubclassConstructor.newInstance(args)__				}_				catch (Exception ex) {_					throw new BeanInstantiationException(this.beanDefinition.getBeanClass(),_							"Failed to invoke constructor for CGLIB enhanced subclass [" + subclass.getName() + "]", ex)__				}_			}_			_			_			Factory factory = (Factory) instance__			factory.setCallbacks(new Callback[] {NoOp.INSTANCE,_					new LookupOverrideMethodInterceptor(this.beanDefinition, this.owner),_					new ReplaceOverrideMethodInterceptor(this.beanDefinition, this.owner)})__			return instance__		};create,a,new,instance,of,a,dynamically,generated,subclass,implementing,the,required,lookups,param,ctor,constructor,to,use,if,this,is,code,null,use,the,no,arg,constructor,no,parameterization,or,setter,injection,param,args,arguments,to,use,for,the,constructor,ignored,if,the,code,ctor,parameter,is,code,null,return,new,instance,of,the,dynamically,generated,subclass;public,object,instantiate,nullable,constructor,ctor,nullable,object,args,class,subclass,create,enhanced,subclass,this,bean,definition,object,instance,if,ctor,null,instance,bean,utils,instantiate,class,subclass,else,try,constructor,enhanced,subclass,constructor,subclass,get,constructor,ctor,get,parameter,types,instance,enhanced,subclass,constructor,new,instance,args,catch,exception,ex,throw,new,bean,instantiation,exception,this,bean,definition,get,bean,class,failed,to,invoke,constructor,for,cglib,enhanced,subclass,subclass,get,name,ex,factory,factory,factory,instance,factory,set,callbacks,new,callback,no,op,instance,new,lookup,override,method,interceptor,this,bean,definition,this,owner,new,replace,override,method,interceptor,this,bean,definition,this,owner,return,instance
CglibSubclassingInstantiationStrategy -> CglibSubclassCreator -> public Object instantiate(@Nullable Constructor<?> ctor, @Nullable Object... args);1498780456;Create a new instance of a dynamically generated subclass implementing the_required lookups._@param ctor constructor to use. If this is {@code null}, use the_no-arg constructor (no parameterization, or Setter Injection)_@param args arguments to use for the constructor._Ignored if the {@code ctor} parameter is {@code null}._@return new instance of the dynamically generated subclass;public Object instantiate(@Nullable Constructor<?> ctor, @Nullable Object... args) {_			Class<?> subclass = createEnhancedSubclass(this.beanDefinition)__			Object instance__			if (ctor == null) {_				instance = BeanUtils.instantiateClass(subclass)__			}_			else {_				try {_					Constructor<?> enhancedSubclassConstructor = subclass.getConstructor(ctor.getParameterTypes())__					instance = enhancedSubclassConstructor.newInstance(args)__				}_				catch (Exception ex) {_					throw new BeanInstantiationException(this.beanDefinition.getBeanClass(),_							"Failed to invoke constructor for CGLIB enhanced subclass [" + subclass.getName() + "]", ex)__				}_			}_			_			_			Factory factory = (Factory) instance__			factory.setCallbacks(new Callback[] {NoOp.INSTANCE,_					new LookupOverrideMethodInterceptor(this.beanDefinition, this.owner),_					new ReplaceOverrideMethodInterceptor(this.beanDefinition, this.owner)})__			return instance__		};create,a,new,instance,of,a,dynamically,generated,subclass,implementing,the,required,lookups,param,ctor,constructor,to,use,if,this,is,code,null,use,the,no,arg,constructor,no,parameterization,or,setter,injection,param,args,arguments,to,use,for,the,constructor,ignored,if,the,code,ctor,parameter,is,code,null,return,new,instance,of,the,dynamically,generated,subclass;public,object,instantiate,nullable,constructor,ctor,nullable,object,args,class,subclass,create,enhanced,subclass,this,bean,definition,object,instance,if,ctor,null,instance,bean,utils,instantiate,class,subclass,else,try,constructor,enhanced,subclass,constructor,subclass,get,constructor,ctor,get,parameter,types,instance,enhanced,subclass,constructor,new,instance,args,catch,exception,ex,throw,new,bean,instantiation,exception,this,bean,definition,get,bean,class,failed,to,invoke,constructor,for,cglib,enhanced,subclass,subclass,get,name,ex,factory,factory,factory,instance,factory,set,callbacks,new,callback,no,op,instance,new,lookup,override,method,interceptor,this,bean,definition,this,owner,new,replace,override,method,interceptor,this,bean,definition,this,owner,return,instance
CglibSubclassingInstantiationStrategy -> CglibSubclassCreator -> public Object instantiate(Constructor ctor, Object[] args);1328020251;Create a new instance of a dynamically generated subclasses implementing the_required lookups._@param ctor constructor to use. If this is <code>null</code>, use the_no-arg constructor (no parameterization, or Setter Injection)_@param args arguments to use for the constructor._Ignored if the ctor parameter is <code>null</code>._@return new instance of the dynamically generated class;public Object instantiate(Constructor ctor, Object[] args) {_			Enhancer enhancer = new Enhancer()__			enhancer.setSuperclass(this.beanDefinition.getBeanClass())__			enhancer.setCallbackFilter(new CallbackFilterImpl())__			enhancer.setCallbacks(new Callback[] {_					NoOp.INSTANCE,_					new LookupOverrideMethodInterceptor(),_					new ReplaceOverrideMethodInterceptor()_			})___			return (ctor == null) ? _					enhancer.create() : _					enhancer.create(ctor.getParameterTypes(), args)__		};create,a,new,instance,of,a,dynamically,generated,subclasses,implementing,the,required,lookups,param,ctor,constructor,to,use,if,this,is,code,null,code,use,the,no,arg,constructor,no,parameterization,or,setter,injection,param,args,arguments,to,use,for,the,constructor,ignored,if,the,ctor,parameter,is,code,null,code,return,new,instance,of,the,dynamically,generated,class;public,object,instantiate,constructor,ctor,object,args,enhancer,enhancer,new,enhancer,enhancer,set,superclass,this,bean,definition,get,bean,class,enhancer,set,callback,filter,new,callback,filter,impl,enhancer,set,callbacks,new,callback,no,op,instance,new,lookup,override,method,interceptor,new,replace,override,method,interceptor,return,ctor,null,enhancer,create,enhancer,create,ctor,get,parameter,types,args
CglibSubclassingInstantiationStrategy -> CglibSubclassCreator -> public Object instantiate(Constructor ctor, Object[] args);1344552803;Create a new instance of a dynamically generated subclasses implementing the_required lookups._@param ctor constructor to use. If this is <code>null</code>, use the_no-arg constructor (no parameterization, or Setter Injection)_@param args arguments to use for the constructor._Ignored if the ctor parameter is <code>null</code>._@return new instance of the dynamically generated class;public Object instantiate(Constructor ctor, Object[] args) {_			Enhancer enhancer = new Enhancer()__			enhancer.setSuperclass(this.beanDefinition.getBeanClass())__			enhancer.setCallbackFilter(new CallbackFilterImpl())__			enhancer.setCallbacks(new Callback[] {_					NoOp.INSTANCE,_					new LookupOverrideMethodInterceptor(),_					new ReplaceOverrideMethodInterceptor()_			})___			return (ctor == null) ? _					enhancer.create() : _					enhancer.create(ctor.getParameterTypes(), args)__		};create,a,new,instance,of,a,dynamically,generated,subclasses,implementing,the,required,lookups,param,ctor,constructor,to,use,if,this,is,code,null,code,use,the,no,arg,constructor,no,parameterization,or,setter,injection,param,args,arguments,to,use,for,the,constructor,ignored,if,the,ctor,parameter,is,code,null,code,return,new,instance,of,the,dynamically,generated,class;public,object,instantiate,constructor,ctor,object,args,enhancer,enhancer,new,enhancer,enhancer,set,superclass,this,bean,definition,get,bean,class,enhancer,set,callback,filter,new,callback,filter,impl,enhancer,set,callbacks,new,callback,no,op,instance,new,lookup,override,method,interceptor,new,replace,override,method,interceptor,return,ctor,null,enhancer,create,enhancer,create,ctor,get,parameter,types,args
CglibSubclassingInstantiationStrategy -> CglibSubclassCreator -> public Object instantiate(Constructor ctor, Object[] args);1356735495;Create a new instance of a dynamically generated subclasses implementing the_required lookups._@param ctor constructor to use. If this is {@code null}, use the_no-arg constructor (no parameterization, or Setter Injection)_@param args arguments to use for the constructor._Ignored if the ctor parameter is {@code null}._@return new instance of the dynamically generated class;public Object instantiate(Constructor ctor, Object[] args) {_			Enhancer enhancer = new Enhancer()__			enhancer.setSuperclass(this.beanDefinition.getBeanClass())__			enhancer.setCallbackFilter(new CallbackFilterImpl())__			enhancer.setCallbacks(new Callback[] {_					NoOp.INSTANCE,_					new LookupOverrideMethodInterceptor(),_					new ReplaceOverrideMethodInterceptor()_			})___			return (ctor == null) ?_					enhancer.create() :_					enhancer.create(ctor.getParameterTypes(), args)__		};create,a,new,instance,of,a,dynamically,generated,subclasses,implementing,the,required,lookups,param,ctor,constructor,to,use,if,this,is,code,null,use,the,no,arg,constructor,no,parameterization,or,setter,injection,param,args,arguments,to,use,for,the,constructor,ignored,if,the,ctor,parameter,is,code,null,return,new,instance,of,the,dynamically,generated,class;public,object,instantiate,constructor,ctor,object,args,enhancer,enhancer,new,enhancer,enhancer,set,superclass,this,bean,definition,get,bean,class,enhancer,set,callback,filter,new,callback,filter,impl,enhancer,set,callbacks,new,callback,no,op,instance,new,lookup,override,method,interceptor,new,replace,override,method,interceptor,return,ctor,null,enhancer,create,enhancer,create,ctor,get,parameter,types,args
CglibSubclassingInstantiationStrategy -> CglibSubclassCreator -> public Object instantiate(Constructor ctor, Object[] args);1357119239;Create a new instance of a dynamically generated subclasses implementing the_required lookups._@param ctor constructor to use. If this is {@code null}, use the_no-arg constructor (no parameterization, or Setter Injection)_@param args arguments to use for the constructor._Ignored if the ctor parameter is {@code null}._@return new instance of the dynamically generated class;public Object instantiate(Constructor ctor, Object[] args) {_			Enhancer enhancer = new Enhancer()__			enhancer.setSuperclass(this.beanDefinition.getBeanClass())__			enhancer.setCallbackFilter(new CallbackFilterImpl())__			enhancer.setCallbacks(new Callback[] {_					NoOp.INSTANCE,_					new LookupOverrideMethodInterceptor(),_					new ReplaceOverrideMethodInterceptor()_			})___			return (ctor == null) ?_					enhancer.create() :_					enhancer.create(ctor.getParameterTypes(), args)__		};create,a,new,instance,of,a,dynamically,generated,subclasses,implementing,the,required,lookups,param,ctor,constructor,to,use,if,this,is,code,null,use,the,no,arg,constructor,no,parameterization,or,setter,injection,param,args,arguments,to,use,for,the,constructor,ignored,if,the,ctor,parameter,is,code,null,return,new,instance,of,the,dynamically,generated,class;public,object,instantiate,constructor,ctor,object,args,enhancer,enhancer,new,enhancer,enhancer,set,superclass,this,bean,definition,get,bean,class,enhancer,set,callback,filter,new,callback,filter,impl,enhancer,set,callbacks,new,callback,no,op,instance,new,lookup,override,method,interceptor,new,replace,override,method,interceptor,return,ctor,null,enhancer,create,enhancer,create,ctor,get,parameter,types,args
CglibSubclassingInstantiationStrategy -> CglibSubclassCreator -> public Object instantiate(Constructor ctor, Object[] args);1368482696;Create a new instance of a dynamically generated subclasses implementing the_required lookups._@param ctor constructor to use. If this is {@code null}, use the_no-arg constructor (no parameterization, or Setter Injection)_@param args arguments to use for the constructor._Ignored if the ctor parameter is {@code null}._@return new instance of the dynamically generated class;public Object instantiate(Constructor ctor, Object[] args) {_			Enhancer enhancer = new Enhancer()__			enhancer.setSuperclass(this.beanDefinition.getBeanClass())__			enhancer.setCallbackFilter(new CallbackFilterImpl())__			enhancer.setCallbacks(new Callback[] {_					NoOp.INSTANCE,_					new LookupOverrideMethodInterceptor(),_					new ReplaceOverrideMethodInterceptor()_			})___			return (ctor == null) ?_					enhancer.create() :_					enhancer.create(ctor.getParameterTypes(), args)__		};create,a,new,instance,of,a,dynamically,generated,subclasses,implementing,the,required,lookups,param,ctor,constructor,to,use,if,this,is,code,null,use,the,no,arg,constructor,no,parameterization,or,setter,injection,param,args,arguments,to,use,for,the,constructor,ignored,if,the,ctor,parameter,is,code,null,return,new,instance,of,the,dynamically,generated,class;public,object,instantiate,constructor,ctor,object,args,enhancer,enhancer,new,enhancer,enhancer,set,superclass,this,bean,definition,get,bean,class,enhancer,set,callback,filter,new,callback,filter,impl,enhancer,set,callbacks,new,callback,no,op,instance,new,lookup,override,method,interceptor,new,replace,override,method,interceptor,return,ctor,null,enhancer,create,enhancer,create,ctor,get,parameter,types,args
CglibSubclassingInstantiationStrategy -> CglibSubclassCreator -> private Class<?> createEnhancedSubclass(RootBeanDefinition beanDefinition);1392253766;Create an enhanced subclass of the bean class for the provided bean_definition, using CGLIB.;private Class<?> createEnhancedSubclass(RootBeanDefinition beanDefinition) {_			Enhancer enhancer = new Enhancer()__			enhancer.setSuperclass(beanDefinition.getBeanClass())__			enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE)__			enhancer.setCallbackFilter(new CallbackFilterImpl(beanDefinition))__			enhancer.setCallbackTypes(CALLBACK_TYPES)__			return enhancer.createClass()__		};create,an,enhanced,subclass,of,the,bean,class,for,the,provided,bean,definition,using,cglib;private,class,create,enhanced,subclass,root,bean,definition,bean,definition,enhancer,enhancer,new,enhancer,enhancer,set,superclass,bean,definition,get,bean,class,enhancer,set,naming,policy,spring,naming,policy,instance,enhancer,set,callback,filter,new,callback,filter,impl,bean,definition,enhancer,set,callback,types,return,enhancer,create,class
CglibSubclassingInstantiationStrategy -> CglibSubclassCreator -> private Class<?> createEnhancedSubclass(RootBeanDefinition beanDefinition);1392254721;Create an enhanced subclass of the bean class for the provided bean_definition, using CGLIB.;private Class<?> createEnhancedSubclass(RootBeanDefinition beanDefinition) {_			Enhancer enhancer = new Enhancer()__			enhancer.setSuperclass(beanDefinition.getBeanClass())__			enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE)__			enhancer.setCallbackFilter(new MethodOverrideCallbackFilter(beanDefinition))__			enhancer.setCallbackTypes(CALLBACK_TYPES)__			return enhancer.createClass()__		};create,an,enhanced,subclass,of,the,bean,class,for,the,provided,bean,definition,using,cglib;private,class,create,enhanced,subclass,root,bean,definition,bean,definition,enhancer,enhancer,new,enhancer,enhancer,set,superclass,bean,definition,get,bean,class,enhancer,set,naming,policy,spring,naming,policy,instance,enhancer,set,callback,filter,new,method,override,callback,filter,bean,definition,enhancer,set,callback,types,return,enhancer,create,class
CglibSubclassingInstantiationStrategy -> CglibSubclassCreator -> private Class<?> createEnhancedSubclass(RootBeanDefinition beanDefinition);1408052945;Create an enhanced subclass of the bean class for the provided bean_definition, using CGLIB.;private Class<?> createEnhancedSubclass(RootBeanDefinition beanDefinition) {_			Enhancer enhancer = new Enhancer()__			enhancer.setSuperclass(beanDefinition.getBeanClass())__			enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE)__			enhancer.setCallbackFilter(new MethodOverrideCallbackFilter(beanDefinition))__			enhancer.setCallbackTypes(CALLBACK_TYPES)__			return enhancer.createClass()__		};create,an,enhanced,subclass,of,the,bean,class,for,the,provided,bean,definition,using,cglib;private,class,create,enhanced,subclass,root,bean,definition,bean,definition,enhancer,enhancer,new,enhancer,enhancer,set,superclass,bean,definition,get,bean,class,enhancer,set,naming,policy,spring,naming,policy,instance,enhancer,set,callback,filter,new,method,override,callback,filter,bean,definition,enhancer,set,callback,types,return,enhancer,create,class
CglibSubclassingInstantiationStrategy -> CglibSubclassCreator -> private Class<?> createEnhancedSubclass(RootBeanDefinition beanDefinition);1413920443;Create an enhanced subclass of the bean class for the provided bean_definition, using CGLIB.;private Class<?> createEnhancedSubclass(RootBeanDefinition beanDefinition) {_			Enhancer enhancer = new Enhancer()__			enhancer.setSuperclass(beanDefinition.getBeanClass())__			enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE)__			enhancer.setCallbackFilter(new MethodOverrideCallbackFilter(beanDefinition))__			enhancer.setCallbackTypes(CALLBACK_TYPES)__			return enhancer.createClass()__		};create,an,enhanced,subclass,of,the,bean,class,for,the,provided,bean,definition,using,cglib;private,class,create,enhanced,subclass,root,bean,definition,bean,definition,enhancer,enhancer,new,enhancer,enhancer,set,superclass,bean,definition,get,bean,class,enhancer,set,naming,policy,spring,naming,policy,instance,enhancer,set,callback,filter,new,method,override,callback,filter,bean,definition,enhancer,set,callback,types,return,enhancer,create,class
CglibSubclassingInstantiationStrategy -> CglibSubclassCreator -> private Class<?> createEnhancedSubclass(RootBeanDefinition beanDefinition);1448383082;Create an enhanced subclass of the bean class for the provided bean_definition, using CGLIB.;private Class<?> createEnhancedSubclass(RootBeanDefinition beanDefinition) {_			Enhancer enhancer = new Enhancer()__			enhancer.setSuperclass(beanDefinition.getBeanClass())__			enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE)__			if (this.owner instanceof ConfigurableBeanFactory) {_				ClassLoader cl = ((ConfigurableBeanFactory) this.owner).getBeanClassLoader()__				enhancer.setStrategy(new ClassLoaderAwareGeneratorStrategy(cl))__			}_			enhancer.setCallbackFilter(new MethodOverrideCallbackFilter(beanDefinition))__			enhancer.setCallbackTypes(CALLBACK_TYPES)__			return enhancer.createClass()__		};create,an,enhanced,subclass,of,the,bean,class,for,the,provided,bean,definition,using,cglib;private,class,create,enhanced,subclass,root,bean,definition,bean,definition,enhancer,enhancer,new,enhancer,enhancer,set,superclass,bean,definition,get,bean,class,enhancer,set,naming,policy,spring,naming,policy,instance,if,this,owner,instanceof,configurable,bean,factory,class,loader,cl,configurable,bean,factory,this,owner,get,bean,class,loader,enhancer,set,strategy,new,class,loader,aware,generator,strategy,cl,enhancer,set,callback,filter,new,method,override,callback,filter,bean,definition,enhancer,set,callback,types,return,enhancer,create,class
CglibSubclassingInstantiationStrategy -> CglibSubclassCreator -> private Class<?> createEnhancedSubclass(RootBeanDefinition beanDefinition);1449660489;Create an enhanced subclass of the bean class for the provided bean_definition, using CGLIB.;private Class<?> createEnhancedSubclass(RootBeanDefinition beanDefinition) {_			Enhancer enhancer = new Enhancer()__			enhancer.setSuperclass(beanDefinition.getBeanClass())__			enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE)__			if (this.owner instanceof ConfigurableBeanFactory) {_				ClassLoader cl = ((ConfigurableBeanFactory) this.owner).getBeanClassLoader()__				enhancer.setStrategy(new ClassLoaderAwareGeneratorStrategy(cl))__			}_			enhancer.setCallbackFilter(new MethodOverrideCallbackFilter(beanDefinition))__			enhancer.setCallbackTypes(CALLBACK_TYPES)__			return enhancer.createClass()__		};create,an,enhanced,subclass,of,the,bean,class,for,the,provided,bean,definition,using,cglib;private,class,create,enhanced,subclass,root,bean,definition,bean,definition,enhancer,enhancer,new,enhancer,enhancer,set,superclass,bean,definition,get,bean,class,enhancer,set,naming,policy,spring,naming,policy,instance,if,this,owner,instanceof,configurable,bean,factory,class,loader,cl,configurable,bean,factory,this,owner,get,bean,class,loader,enhancer,set,strategy,new,class,loader,aware,generator,strategy,cl,enhancer,set,callback,filter,new,method,override,callback,filter,bean,definition,enhancer,set,callback,types,return,enhancer,create,class
CglibSubclassingInstantiationStrategy -> CglibSubclassCreator -> private Class<?> createEnhancedSubclass(RootBeanDefinition beanDefinition);1468948866;Create an enhanced subclass of the bean class for the provided bean_definition, using CGLIB.;private Class<?> createEnhancedSubclass(RootBeanDefinition beanDefinition) {_			Enhancer enhancer = new Enhancer()__			enhancer.setSuperclass(beanDefinition.getBeanClass())__			enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE)__			if (this.owner instanceof ConfigurableBeanFactory) {_				ClassLoader cl = ((ConfigurableBeanFactory) this.owner).getBeanClassLoader()__				enhancer.setStrategy(new ClassLoaderAwareGeneratorStrategy(cl))__			}_			enhancer.setCallbackFilter(new MethodOverrideCallbackFilter(beanDefinition))__			enhancer.setCallbackTypes(CALLBACK_TYPES)__			return enhancer.createClass()__		};create,an,enhanced,subclass,of,the,bean,class,for,the,provided,bean,definition,using,cglib;private,class,create,enhanced,subclass,root,bean,definition,bean,definition,enhancer,enhancer,new,enhancer,enhancer,set,superclass,bean,definition,get,bean,class,enhancer,set,naming,policy,spring,naming,policy,instance,if,this,owner,instanceof,configurable,bean,factory,class,loader,cl,configurable,bean,factory,this,owner,get,bean,class,loader,enhancer,set,strategy,new,class,loader,aware,generator,strategy,cl,enhancer,set,callback,filter,new,method,override,callback,filter,bean,definition,enhancer,set,callback,types,return,enhancer,create,class
CglibSubclassingInstantiationStrategy -> CglibSubclassCreator -> private Class<?> createEnhancedSubclass(RootBeanDefinition beanDefinition);1495868221;Create an enhanced subclass of the bean class for the provided bean_definition, using CGLIB.;private Class<?> createEnhancedSubclass(RootBeanDefinition beanDefinition) {_			Enhancer enhancer = new Enhancer()__			enhancer.setSuperclass(beanDefinition.getBeanClass())__			enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE)__			if (this.owner instanceof ConfigurableBeanFactory) {_				ClassLoader cl = ((ConfigurableBeanFactory) this.owner).getBeanClassLoader()__				enhancer.setStrategy(new ClassLoaderAwareGeneratorStrategy(cl))__			}_			enhancer.setCallbackFilter(new MethodOverrideCallbackFilter(beanDefinition))__			enhancer.setCallbackTypes(CALLBACK_TYPES)__			return enhancer.createClass()__		};create,an,enhanced,subclass,of,the,bean,class,for,the,provided,bean,definition,using,cglib;private,class,create,enhanced,subclass,root,bean,definition,bean,definition,enhancer,enhancer,new,enhancer,enhancer,set,superclass,bean,definition,get,bean,class,enhancer,set,naming,policy,spring,naming,policy,instance,if,this,owner,instanceof,configurable,bean,factory,class,loader,cl,configurable,bean,factory,this,owner,get,bean,class,loader,enhancer,set,strategy,new,class,loader,aware,generator,strategy,cl,enhancer,set,callback,filter,new,method,override,callback,filter,bean,definition,enhancer,set,callback,types,return,enhancer,create,class
CglibSubclassingInstantiationStrategy -> CglibSubclassCreator -> private Class<?> createEnhancedSubclass(RootBeanDefinition beanDefinition);1496259743;Create an enhanced subclass of the bean class for the provided bean_definition, using CGLIB.;private Class<?> createEnhancedSubclass(RootBeanDefinition beanDefinition) {_			Enhancer enhancer = new Enhancer()__			enhancer.setSuperclass(beanDefinition.getBeanClass())__			enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE)__			if (this.owner instanceof ConfigurableBeanFactory) {_				ClassLoader cl = ((ConfigurableBeanFactory) this.owner).getBeanClassLoader()__				enhancer.setStrategy(new ClassLoaderAwareGeneratorStrategy(cl))__			}_			enhancer.setCallbackFilter(new MethodOverrideCallbackFilter(beanDefinition))__			enhancer.setCallbackTypes(CALLBACK_TYPES)__			return enhancer.createClass()__		};create,an,enhanced,subclass,of,the,bean,class,for,the,provided,bean,definition,using,cglib;private,class,create,enhanced,subclass,root,bean,definition,bean,definition,enhancer,enhancer,new,enhancer,enhancer,set,superclass,bean,definition,get,bean,class,enhancer,set,naming,policy,spring,naming,policy,instance,if,this,owner,instanceof,configurable,bean,factory,class,loader,cl,configurable,bean,factory,this,owner,get,bean,class,loader,enhancer,set,strategy,new,class,loader,aware,generator,strategy,cl,enhancer,set,callback,filter,new,method,override,callback,filter,bean,definition,enhancer,set,callback,types,return,enhancer,create,class
CglibSubclassingInstantiationStrategy -> CglibSubclassCreator -> private Class<?> createEnhancedSubclass(RootBeanDefinition beanDefinition);1496837955;Create an enhanced subclass of the bean class for the provided bean_definition, using CGLIB.;private Class<?> createEnhancedSubclass(RootBeanDefinition beanDefinition) {_			Enhancer enhancer = new Enhancer()__			enhancer.setSuperclass(beanDefinition.getBeanClass())__			enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE)__			if (this.owner instanceof ConfigurableBeanFactory) {_				ClassLoader cl = ((ConfigurableBeanFactory) this.owner).getBeanClassLoader()__				enhancer.setStrategy(new ClassLoaderAwareGeneratorStrategy(cl))__			}_			enhancer.setCallbackFilter(new MethodOverrideCallbackFilter(beanDefinition))__			enhancer.setCallbackTypes(CALLBACK_TYPES)__			return enhancer.createClass()__		};create,an,enhanced,subclass,of,the,bean,class,for,the,provided,bean,definition,using,cglib;private,class,create,enhanced,subclass,root,bean,definition,bean,definition,enhancer,enhancer,new,enhancer,enhancer,set,superclass,bean,definition,get,bean,class,enhancer,set,naming,policy,spring,naming,policy,instance,if,this,owner,instanceof,configurable,bean,factory,class,loader,cl,configurable,bean,factory,this,owner,get,bean,class,loader,enhancer,set,strategy,new,class,loader,aware,generator,strategy,cl,enhancer,set,callback,filter,new,method,override,callback,filter,bean,definition,enhancer,set,callback,types,return,enhancer,create,class
CglibSubclassingInstantiationStrategy -> CglibSubclassCreator -> private Class<?> createEnhancedSubclass(RootBeanDefinition beanDefinition);1498780456;Create an enhanced subclass of the bean class for the provided bean_definition, using CGLIB.;private Class<?> createEnhancedSubclass(RootBeanDefinition beanDefinition) {_			Enhancer enhancer = new Enhancer()__			enhancer.setSuperclass(beanDefinition.getBeanClass())__			enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE)__			if (this.owner instanceof ConfigurableBeanFactory) {_				ClassLoader cl = ((ConfigurableBeanFactory) this.owner).getBeanClassLoader()__				enhancer.setStrategy(new ClassLoaderAwareGeneratorStrategy(cl))__			}_			enhancer.setCallbackFilter(new MethodOverrideCallbackFilter(beanDefinition))__			enhancer.setCallbackTypes(CALLBACK_TYPES)__			return enhancer.createClass()__		};create,an,enhanced,subclass,of,the,bean,class,for,the,provided,bean,definition,using,cglib;private,class,create,enhanced,subclass,root,bean,definition,bean,definition,enhancer,enhancer,new,enhancer,enhancer,set,superclass,bean,definition,get,bean,class,enhancer,set,naming,policy,spring,naming,policy,instance,if,this,owner,instanceof,configurable,bean,factory,class,loader,cl,configurable,bean,factory,this,owner,get,bean,class,loader,enhancer,set,strategy,new,class,loader,aware,generator,strategy,cl,enhancer,set,callback,filter,new,method,override,callback,filter,bean,definition,enhancer,set,callback,types,return,enhancer,create,class
CglibSubclassingInstantiationStrategy -> CglibSubclassCreator -> private Class<?> createEnhancedSubclass(RootBeanDefinition beanDefinition);1534157021;Create an enhanced subclass of the bean class for the provided bean_definition, using CGLIB.;private Class<?> createEnhancedSubclass(RootBeanDefinition beanDefinition) {_			Enhancer enhancer = new Enhancer()__			enhancer.setSuperclass(beanDefinition.getBeanClass())__			enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE)__			if (this.owner instanceof ConfigurableBeanFactory) {_				ClassLoader cl = ((ConfigurableBeanFactory) this.owner).getBeanClassLoader()__				enhancer.setStrategy(new ClassLoaderAwareGeneratorStrategy(cl))__			}_			enhancer.setCallbackFilter(new MethodOverrideCallbackFilter(beanDefinition))__			enhancer.setCallbackTypes(CALLBACK_TYPES)__			return enhancer.createClass()__		};create,an,enhanced,subclass,of,the,bean,class,for,the,provided,bean,definition,using,cglib;private,class,create,enhanced,subclass,root,bean,definition,bean,definition,enhancer,enhancer,new,enhancer,enhancer,set,superclass,bean,definition,get,bean,class,enhancer,set,naming,policy,spring,naming,policy,instance,if,this,owner,instanceof,configurable,bean,factory,class,loader,cl,configurable,bean,factory,this,owner,get,bean,class,loader,enhancer,set,strategy,new,class,loader,aware,generator,strategy,cl,enhancer,set,callback,filter,new,method,override,callback,filter,bean,definition,enhancer,set,callback,types,return,enhancer,create,class
