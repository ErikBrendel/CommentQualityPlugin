# id;timestamp;commentText;codeText;commentWords;codeWords
SmartFactoryBean -> boolean isPrototype()_;1328020251;Is the object managed by this factory a prototype? That is,_will {@link #getObject()} always return an independent instance?_<p>The prototype status of the FactoryBean itself will generally_be provided by the owning {@link BeanFactory}_ usually, it has to be_defined as singleton there._<p>This method is supposed to strictly check for independent instances__it should not return <code>true</code> for scoped objects or other_kinds of non-singleton, non-independent objects. For this reason,_this is not simply the inverted form of {@link #isSingleton()}._@return whether the exposed object is a prototype_@see #getObject()_@see #isSingleton();boolean isPrototype()_;is,the,object,managed,by,this,factory,a,prototype,that,is,will,link,get,object,always,return,an,independent,instance,p,the,prototype,status,of,the,factory,bean,itself,will,generally,be,provided,by,the,owning,link,bean,factory,usually,it,has,to,be,defined,as,singleton,there,p,this,method,is,supposed,to,strictly,check,for,independent,instances,it,should,not,return,code,true,code,for,scoped,objects,or,other,kinds,of,non,singleton,non,independent,objects,for,this,reason,this,is,not,simply,the,inverted,form,of,link,is,singleton,return,whether,the,exposed,object,is,a,prototype,see,get,object,see,is,singleton;boolean,is,prototype
SmartFactoryBean -> boolean isPrototype()_;1356735495;Is the object managed by this factory a prototype? That is,_will {@link #getObject()} always return an independent instance?_<p>The prototype status of the FactoryBean itself will generally_be provided by the owning {@link BeanFactory}_ usually, it has to be_defined as singleton there._<p>This method is supposed to strictly check for independent instances__it should not return {@code true} for scoped objects or other_kinds of non-singleton, non-independent objects. For this reason,_this is not simply the inverted form of {@link #isSingleton()}._@return whether the exposed object is a prototype_@see #getObject()_@see #isSingleton();boolean isPrototype()_;is,the,object,managed,by,this,factory,a,prototype,that,is,will,link,get,object,always,return,an,independent,instance,p,the,prototype,status,of,the,factory,bean,itself,will,generally,be,provided,by,the,owning,link,bean,factory,usually,it,has,to,be,defined,as,singleton,there,p,this,method,is,supposed,to,strictly,check,for,independent,instances,it,should,not,return,code,true,for,scoped,objects,or,other,kinds,of,non,singleton,non,independent,objects,for,this,reason,this,is,not,simply,the,inverted,form,of,link,is,singleton,return,whether,the,exposed,object,is,a,prototype,see,get,object,see,is,singleton;boolean,is,prototype
SmartFactoryBean -> default boolean isPrototype();1467810608;Is the object managed by this factory a prototype? That is,_will {@link #getObject()} always return an independent instance?_<p>The prototype status of the FactoryBean itself will generally_be provided by the owning {@link BeanFactory}_ usually, it has to be_defined as singleton there._<p>This method is supposed to strictly check for independent instances__it should not return {@code true} for scoped objects or other_kinds of non-singleton, non-independent objects. For this reason,_this is not simply the inverted form of {@link #isSingleton()}._<p>The default implementation returns {@code false}._@return whether the exposed object is a prototype_@see #getObject()_@see #isSingleton();default boolean isPrototype() {_		return false__	};is,the,object,managed,by,this,factory,a,prototype,that,is,will,link,get,object,always,return,an,independent,instance,p,the,prototype,status,of,the,factory,bean,itself,will,generally,be,provided,by,the,owning,link,bean,factory,usually,it,has,to,be,defined,as,singleton,there,p,this,method,is,supposed,to,strictly,check,for,independent,instances,it,should,not,return,code,true,for,scoped,objects,or,other,kinds,of,non,singleton,non,independent,objects,for,this,reason,this,is,not,simply,the,inverted,form,of,link,is,singleton,p,the,default,implementation,returns,code,false,return,whether,the,exposed,object,is,a,prototype,see,get,object,see,is,singleton;default,boolean,is,prototype,return,false
SmartFactoryBean -> default boolean isPrototype();1530174524;Is the object managed by this factory a prototype? That is,_will {@link #getObject()} always return an independent instance?_<p>The prototype status of the FactoryBean itself will generally_be provided by the owning {@link BeanFactory}_ usually, it has to be_defined as singleton there._<p>This method is supposed to strictly check for independent instances__it should not return {@code true} for scoped objects or other_kinds of non-singleton, non-independent objects. For this reason,_this is not simply the inverted form of {@link #isSingleton()}._<p>The default implementation returns {@code false}._@return whether the exposed object is a prototype_@see #getObject()_@see #isSingleton();default boolean isPrototype() {_		return false__	};is,the,object,managed,by,this,factory,a,prototype,that,is,will,link,get,object,always,return,an,independent,instance,p,the,prototype,status,of,the,factory,bean,itself,will,generally,be,provided,by,the,owning,link,bean,factory,usually,it,has,to,be,defined,as,singleton,there,p,this,method,is,supposed,to,strictly,check,for,independent,instances,it,should,not,return,code,true,for,scoped,objects,or,other,kinds,of,non,singleton,non,independent,objects,for,this,reason,this,is,not,simply,the,inverted,form,of,link,is,singleton,p,the,default,implementation,returns,code,false,return,whether,the,exposed,object,is,a,prototype,see,get,object,see,is,singleton;default,boolean,is,prototype,return,false
SmartFactoryBean -> default boolean isEagerInit();1467810608;Does this FactoryBean expect eager initialization, that is,_eagerly initialize itself as well as expect eager initialization_of its singleton object (if any)?_<p>A standard FactoryBean is not expected to initialize eagerly:_Its {@link #getObject()} will only be called for actual access, even_in case of a singleton object. Returning {@code true} from this_method suggests that {@link #getObject()} should be called eagerly,_also applying post-processors eagerly. This may make sense in case_of a {@link #isSingleton() singleton} object, in particular if_post-processors expect to be applied on startup._<p>The default implementation returns {@code false}._@return whether eager initialization applies_@see org.springframework.beans.factory.config.ConfigurableListableBeanFactory#preInstantiateSingletons();default boolean isEagerInit() {_		return false__	};does,this,factory,bean,expect,eager,initialization,that,is,eagerly,initialize,itself,as,well,as,expect,eager,initialization,of,its,singleton,object,if,any,p,a,standard,factory,bean,is,not,expected,to,initialize,eagerly,its,link,get,object,will,only,be,called,for,actual,access,even,in,case,of,a,singleton,object,returning,code,true,from,this,method,suggests,that,link,get,object,should,be,called,eagerly,also,applying,post,processors,eagerly,this,may,make,sense,in,case,of,a,link,is,singleton,singleton,object,in,particular,if,post,processors,expect,to,be,applied,on,startup,p,the,default,implementation,returns,code,false,return,whether,eager,initialization,applies,see,org,springframework,beans,factory,config,configurable,listable,bean,factory,pre,instantiate,singletons;default,boolean,is,eager,init,return,false
SmartFactoryBean -> default boolean isEagerInit();1530174524;Does this FactoryBean expect eager initialization, that is,_eagerly initialize itself as well as expect eager initialization_of its singleton object (if any)?_<p>A standard FactoryBean is not expected to initialize eagerly:_Its {@link #getObject()} will only be called for actual access, even_in case of a singleton object. Returning {@code true} from this_method suggests that {@link #getObject()} should be called eagerly,_also applying post-processors eagerly. This may make sense in case_of a {@link #isSingleton() singleton} object, in particular if_post-processors expect to be applied on startup._<p>The default implementation returns {@code false}._@return whether eager initialization applies_@see org.springframework.beans.factory.config.ConfigurableListableBeanFactory#preInstantiateSingletons();default boolean isEagerInit() {_		return false__	};does,this,factory,bean,expect,eager,initialization,that,is,eagerly,initialize,itself,as,well,as,expect,eager,initialization,of,its,singleton,object,if,any,p,a,standard,factory,bean,is,not,expected,to,initialize,eagerly,its,link,get,object,will,only,be,called,for,actual,access,even,in,case,of,a,singleton,object,returning,code,true,from,this,method,suggests,that,link,get,object,should,be,called,eagerly,also,applying,post,processors,eagerly,this,may,make,sense,in,case,of,a,link,is,singleton,singleton,object,in,particular,if,post,processors,expect,to,be,applied,on,startup,p,the,default,implementation,returns,code,false,return,whether,eager,initialization,applies,see,org,springframework,beans,factory,config,configurable,listable,bean,factory,pre,instantiate,singletons;default,boolean,is,eager,init,return,false
SmartFactoryBean -> boolean isEagerInit()_;1328020251;Does this FactoryBean expect eager initialization, that is,_eagerly initialize itself as well as expect eager initialization_of its singleton object (if any)?_<p>A standard FactoryBean is not expected to initialize eagerly:_Its {@link #getObject()} will only be called for actual access, even_in case of a singleton object. Returning <code>true</code> from this_method suggests that {@link #getObject()} should be called eagerly,_also applying post-processors eagerly. This may make sense in case_of a {@link #isSingleton() singleton} object, in particular if_post-processors expect to be applied on startup._@return whether eager initialization applies_@see org.springframework.beans.factory.config.ConfigurableListableBeanFactory#preInstantiateSingletons();boolean isEagerInit()_;does,this,factory,bean,expect,eager,initialization,that,is,eagerly,initialize,itself,as,well,as,expect,eager,initialization,of,its,singleton,object,if,any,p,a,standard,factory,bean,is,not,expected,to,initialize,eagerly,its,link,get,object,will,only,be,called,for,actual,access,even,in,case,of,a,singleton,object,returning,code,true,code,from,this,method,suggests,that,link,get,object,should,be,called,eagerly,also,applying,post,processors,eagerly,this,may,make,sense,in,case,of,a,link,is,singleton,singleton,object,in,particular,if,post,processors,expect,to,be,applied,on,startup,return,whether,eager,initialization,applies,see,org,springframework,beans,factory,config,configurable,listable,bean,factory,pre,instantiate,singletons;boolean,is,eager,init
SmartFactoryBean -> boolean isEagerInit()_;1356735495;Does this FactoryBean expect eager initialization, that is,_eagerly initialize itself as well as expect eager initialization_of its singleton object (if any)?_<p>A standard FactoryBean is not expected to initialize eagerly:_Its {@link #getObject()} will only be called for actual access, even_in case of a singleton object. Returning {@code true} from this_method suggests that {@link #getObject()} should be called eagerly,_also applying post-processors eagerly. This may make sense in case_of a {@link #isSingleton() singleton} object, in particular if_post-processors expect to be applied on startup._@return whether eager initialization applies_@see org.springframework.beans.factory.config.ConfigurableListableBeanFactory#preInstantiateSingletons();boolean isEagerInit()_;does,this,factory,bean,expect,eager,initialization,that,is,eagerly,initialize,itself,as,well,as,expect,eager,initialization,of,its,singleton,object,if,any,p,a,standard,factory,bean,is,not,expected,to,initialize,eagerly,its,link,get,object,will,only,be,called,for,actual,access,even,in,case,of,a,singleton,object,returning,code,true,from,this,method,suggests,that,link,get,object,should,be,called,eagerly,also,applying,post,processors,eagerly,this,may,make,sense,in,case,of,a,link,is,singleton,singleton,object,in,particular,if,post,processors,expect,to,be,applied,on,startup,return,whether,eager,initialization,applies,see,org,springframework,beans,factory,config,configurable,listable,bean,factory,pre,instantiate,singletons;boolean,is,eager,init
