# id;timestamp;commentText;codeText;commentWords;codeWords
RequiredAnnotationBeanPostProcessor -> protected boolean shouldSkip(ConfigurableListableBeanFactory beanFactory, String beanName);1328020251;Check whether the given bean definition is not subject to the annotation-based_required property check as performed by this post-processor._<p>The default implementations check for the presence of the_{@link #SKIP_REQUIRED_CHECK_ATTRIBUTE} attribute in the bean definition, if any._@param beanFactory the BeanFactory to check against_@param beanName the name of the bean to check against_@return <code>true</code> to skip the bean_ <code>false</code> to process it;protected boolean shouldSkip(ConfigurableListableBeanFactory beanFactory, String beanName) {_		if (beanFactory == null || !beanFactory.containsBeanDefinition(beanName)) {_			return false__		}_		Object value = beanFactory.getBeanDefinition(beanName).getAttribute(SKIP_REQUIRED_CHECK_ATTRIBUTE)__		return (value != null && (Boolean.TRUE.equals(value) || Boolean.valueOf(value.toString())))__	};check,whether,the,given,bean,definition,is,not,subject,to,the,annotation,based,required,property,check,as,performed,by,this,post,processor,p,the,default,implementations,check,for,the,presence,of,the,link,attribute,in,the,bean,definition,if,any,param,bean,factory,the,bean,factory,to,check,against,param,bean,name,the,name,of,the,bean,to,check,against,return,code,true,code,to,skip,the,bean,code,false,code,to,process,it;protected,boolean,should,skip,configurable,listable,bean,factory,bean,factory,string,bean,name,if,bean,factory,null,bean,factory,contains,bean,definition,bean,name,return,false,object,value,bean,factory,get,bean,definition,bean,name,get,attribute,return,value,null,boolean,true,equals,value,boolean,value,of,value,to,string
RequiredAnnotationBeanPostProcessor -> protected boolean shouldSkip(ConfigurableListableBeanFactory beanFactory, String beanName);1355352386;Check whether the given bean definition is not subject to the annotation-based_required property check as performed by this post-processor._<p>The default implementations check for the presence of the_{@link #SKIP_REQUIRED_CHECK_ATTRIBUTE} attribute in the bean definition, if any._@param beanFactory the BeanFactory to check against_@param beanName the name of the bean to check against_@return <code>true</code> to skip the bean_ <code>false</code> to process it;protected boolean shouldSkip(ConfigurableListableBeanFactory beanFactory, String beanName) {_		if (beanFactory == null || !beanFactory.containsBeanDefinition(beanName)) {_			return false__		}_		Object value = beanFactory.getBeanDefinition(beanName).getAttribute(SKIP_REQUIRED_CHECK_ATTRIBUTE)__		return (value != null && (Boolean.TRUE.equals(value) || Boolean.valueOf(value.toString())))__	};check,whether,the,given,bean,definition,is,not,subject,to,the,annotation,based,required,property,check,as,performed,by,this,post,processor,p,the,default,implementations,check,for,the,presence,of,the,link,attribute,in,the,bean,definition,if,any,param,bean,factory,the,bean,factory,to,check,against,param,bean,name,the,name,of,the,bean,to,check,against,return,code,true,code,to,skip,the,bean,code,false,code,to,process,it;protected,boolean,should,skip,configurable,listable,bean,factory,bean,factory,string,bean,name,if,bean,factory,null,bean,factory,contains,bean,definition,bean,name,return,false,object,value,bean,factory,get,bean,definition,bean,name,get,attribute,return,value,null,boolean,true,equals,value,boolean,value,of,value,to,string
RequiredAnnotationBeanPostProcessor -> protected boolean shouldSkip(ConfigurableListableBeanFactory beanFactory, String beanName);1356735495;Check whether the given bean definition is not subject to the annotation-based_required property check as performed by this post-processor._<p>The default implementations check for the presence of the_{@link #SKIP_REQUIRED_CHECK_ATTRIBUTE} attribute in the bean definition, if any._@param beanFactory the BeanFactory to check against_@param beanName the name of the bean to check against_@return {@code true} to skip the bean_ {@code false} to process it;protected boolean shouldSkip(ConfigurableListableBeanFactory beanFactory, String beanName) {_		if (beanFactory == null || !beanFactory.containsBeanDefinition(beanName)) {_			return false__		}_		Object value = beanFactory.getBeanDefinition(beanName).getAttribute(SKIP_REQUIRED_CHECK_ATTRIBUTE)__		return (value != null && (Boolean.TRUE.equals(value) || Boolean.valueOf(value.toString())))__	};check,whether,the,given,bean,definition,is,not,subject,to,the,annotation,based,required,property,check,as,performed,by,this,post,processor,p,the,default,implementations,check,for,the,presence,of,the,link,attribute,in,the,bean,definition,if,any,param,bean,factory,the,bean,factory,to,check,against,param,bean,name,the,name,of,the,bean,to,check,against,return,code,true,to,skip,the,bean,code,false,to,process,it;protected,boolean,should,skip,configurable,listable,bean,factory,bean,factory,string,bean,name,if,bean,factory,null,bean,factory,contains,bean,definition,bean,name,return,false,object,value,bean,factory,get,bean,definition,bean,name,get,attribute,return,value,null,boolean,true,equals,value,boolean,value,of,value,to,string
RequiredAnnotationBeanPostProcessor -> protected boolean shouldSkip(ConfigurableListableBeanFactory beanFactory, String beanName);1357119239;Check whether the given bean definition is not subject to the annotation-based_required property check as performed by this post-processor._<p>The default implementations check for the presence of the_{@link #SKIP_REQUIRED_CHECK_ATTRIBUTE} attribute in the bean definition, if any._@param beanFactory the BeanFactory to check against_@param beanName the name of the bean to check against_@return {@code true} to skip the bean_ {@code false} to process it;protected boolean shouldSkip(ConfigurableListableBeanFactory beanFactory, String beanName) {_		if (beanFactory == null || !beanFactory.containsBeanDefinition(beanName)) {_			return false__		}_		Object value = beanFactory.getBeanDefinition(beanName).getAttribute(SKIP_REQUIRED_CHECK_ATTRIBUTE)__		return (value != null && (Boolean.TRUE.equals(value) || Boolean.valueOf(value.toString())))__	};check,whether,the,given,bean,definition,is,not,subject,to,the,annotation,based,required,property,check,as,performed,by,this,post,processor,p,the,default,implementations,check,for,the,presence,of,the,link,attribute,in,the,bean,definition,if,any,param,bean,factory,the,bean,factory,to,check,against,param,bean,name,the,name,of,the,bean,to,check,against,return,code,true,to,skip,the,bean,code,false,to,process,it;protected,boolean,should,skip,configurable,listable,bean,factory,bean,factory,string,bean,name,if,bean,factory,null,bean,factory,contains,bean,definition,bean,name,return,false,object,value,bean,factory,get,bean,definition,bean,name,get,attribute,return,value,null,boolean,true,equals,value,boolean,value,of,value,to,string
RequiredAnnotationBeanPostProcessor -> protected boolean shouldSkip(ConfigurableListableBeanFactory beanFactory, String beanName);1362408075;Check whether the given bean definition is not subject to the annotation-based_required property check as performed by this post-processor._<p>The default implementations check for the presence of the_{@link #SKIP_REQUIRED_CHECK_ATTRIBUTE} attribute in the bean definition, if any._@param beanFactory the BeanFactory to check against_@param beanName the name of the bean to check against_@return {@code true} to skip the bean_ {@code false} to process it;protected boolean shouldSkip(ConfigurableListableBeanFactory beanFactory, String beanName) {_		if (beanFactory == null || !beanFactory.containsBeanDefinition(beanName)) {_			return false__		}_		Object value = beanFactory.getBeanDefinition(beanName).getAttribute(SKIP_REQUIRED_CHECK_ATTRIBUTE)__		return (value != null && (Boolean.TRUE.equals(value) || Boolean.valueOf(value.toString())))__	};check,whether,the,given,bean,definition,is,not,subject,to,the,annotation,based,required,property,check,as,performed,by,this,post,processor,p,the,default,implementations,check,for,the,presence,of,the,link,attribute,in,the,bean,definition,if,any,param,bean,factory,the,bean,factory,to,check,against,param,bean,name,the,name,of,the,bean,to,check,against,return,code,true,to,skip,the,bean,code,false,to,process,it;protected,boolean,should,skip,configurable,listable,bean,factory,bean,factory,string,bean,name,if,bean,factory,null,bean,factory,contains,bean,definition,bean,name,return,false,object,value,bean,factory,get,bean,definition,bean,name,get,attribute,return,value,null,boolean,true,equals,value,boolean,value,of,value,to,string
RequiredAnnotationBeanPostProcessor -> protected boolean shouldSkip(ConfigurableListableBeanFactory beanFactory, String beanName);1364505266;Check whether the given bean definition is not subject to the annotation-based_required property check as performed by this post-processor._<p>The default implementations check for the presence of the_{@link #SKIP_REQUIRED_CHECK_ATTRIBUTE} attribute in the bean definition, if any._@param beanFactory the BeanFactory to check against_@param beanName the name of the bean to check against_@return {@code true} to skip the bean_ {@code false} to process it;protected boolean shouldSkip(ConfigurableListableBeanFactory beanFactory, String beanName) {_		if (beanFactory == null || !beanFactory.containsBeanDefinition(beanName)) {_			return false__		}_		Object value = beanFactory.getBeanDefinition(beanName).getAttribute(SKIP_REQUIRED_CHECK_ATTRIBUTE)__		return (value != null && (Boolean.TRUE.equals(value) || Boolean.valueOf(value.toString())))__	};check,whether,the,given,bean,definition,is,not,subject,to,the,annotation,based,required,property,check,as,performed,by,this,post,processor,p,the,default,implementations,check,for,the,presence,of,the,link,attribute,in,the,bean,definition,if,any,param,bean,factory,the,bean,factory,to,check,against,param,bean,name,the,name,of,the,bean,to,check,against,return,code,true,to,skip,the,bean,code,false,to,process,it;protected,boolean,should,skip,configurable,listable,bean,factory,bean,factory,string,bean,name,if,bean,factory,null,bean,factory,contains,bean,definition,bean,name,return,false,object,value,bean,factory,get,bean,definition,bean,name,get,attribute,return,value,null,boolean,true,equals,value,boolean,value,of,value,to,string
RequiredAnnotationBeanPostProcessor -> protected boolean shouldSkip(ConfigurableListableBeanFactory beanFactory, String beanName);1368482696;Check whether the given bean definition is not subject to the annotation-based_required property check as performed by this post-processor._<p>The default implementations check for the presence of the_{@link #SKIP_REQUIRED_CHECK_ATTRIBUTE} attribute in the bean definition, if any._@param beanFactory the BeanFactory to check against_@param beanName the name of the bean to check against_@return {@code true} to skip the bean_ {@code false} to process it;protected boolean shouldSkip(ConfigurableListableBeanFactory beanFactory, String beanName) {_		if (beanFactory == null || !beanFactory.containsBeanDefinition(beanName)) {_			return false__		}_		Object value = beanFactory.getBeanDefinition(beanName).getAttribute(SKIP_REQUIRED_CHECK_ATTRIBUTE)__		return (value != null && (Boolean.TRUE.equals(value) || Boolean.valueOf(value.toString())))__	};check,whether,the,given,bean,definition,is,not,subject,to,the,annotation,based,required,property,check,as,performed,by,this,post,processor,p,the,default,implementations,check,for,the,presence,of,the,link,attribute,in,the,bean,definition,if,any,param,bean,factory,the,bean,factory,to,check,against,param,bean,name,the,name,of,the,bean,to,check,against,return,code,true,to,skip,the,bean,code,false,to,process,it;protected,boolean,should,skip,configurable,listable,bean,factory,bean,factory,string,bean,name,if,bean,factory,null,bean,factory,contains,bean,definition,bean,name,return,false,object,value,bean,factory,get,bean,definition,bean,name,get,attribute,return,value,null,boolean,true,equals,value,boolean,value,of,value,to,string
RequiredAnnotationBeanPostProcessor -> protected boolean shouldSkip(ConfigurableListableBeanFactory beanFactory, String beanName);1386774676;Check whether the given bean definition is not subject to the annotation-based_required property check as performed by this post-processor._<p>The default implementations check for the presence of the_{@link #SKIP_REQUIRED_CHECK_ATTRIBUTE} attribute in the bean definition, if any._It also suggests skipping in case of a bean definition with a "factory-bean"_reference set, assuming that instance-based factories pre-populate the bean._@param beanFactory the BeanFactory to check against_@param beanName the name of the bean to check against_@return {@code true} to skip the bean_ {@code false} to process it;protected boolean shouldSkip(ConfigurableListableBeanFactory beanFactory, String beanName) {_		if (beanFactory == null || !beanFactory.containsBeanDefinition(beanName)) {_			return false__		}_		BeanDefinition beanDefinition = beanFactory.getBeanDefinition(beanName)__		if (beanDefinition.getFactoryBeanName() != null) {_			return true__		}_		Object value = beanDefinition.getAttribute(SKIP_REQUIRED_CHECK_ATTRIBUTE)__		return (value != null && (Boolean.TRUE.equals(value) || Boolean.valueOf(value.toString())))__	};check,whether,the,given,bean,definition,is,not,subject,to,the,annotation,based,required,property,check,as,performed,by,this,post,processor,p,the,default,implementations,check,for,the,presence,of,the,link,attribute,in,the,bean,definition,if,any,it,also,suggests,skipping,in,case,of,a,bean,definition,with,a,factory,bean,reference,set,assuming,that,instance,based,factories,pre,populate,the,bean,param,bean,factory,the,bean,factory,to,check,against,param,bean,name,the,name,of,the,bean,to,check,against,return,code,true,to,skip,the,bean,code,false,to,process,it;protected,boolean,should,skip,configurable,listable,bean,factory,bean,factory,string,bean,name,if,bean,factory,null,bean,factory,contains,bean,definition,bean,name,return,false,bean,definition,bean,definition,bean,factory,get,bean,definition,bean,name,if,bean,definition,get,factory,bean,name,null,return,true,object,value,bean,definition,get,attribute,return,value,null,boolean,true,equals,value,boolean,value,of,value,to,string
RequiredAnnotationBeanPostProcessor -> protected boolean shouldSkip(ConfigurableListableBeanFactory beanFactory, String beanName);1467730834;Check whether the given bean definition is not subject to the annotation-based_required property check as performed by this post-processor._<p>The default implementations check for the presence of the_{@link #SKIP_REQUIRED_CHECK_ATTRIBUTE} attribute in the bean definition, if any._It also suggests skipping in case of a bean definition with a "factory-bean"_reference set, assuming that instance-based factories pre-populate the bean._@param beanFactory the BeanFactory to check against_@param beanName the name of the bean to check against_@return {@code true} to skip the bean_ {@code false} to process it;protected boolean shouldSkip(ConfigurableListableBeanFactory beanFactory, String beanName) {_		if (beanFactory == null || !beanFactory.containsBeanDefinition(beanName)) {_			return false__		}_		BeanDefinition beanDefinition = beanFactory.getBeanDefinition(beanName)__		if (beanDefinition.getFactoryBeanName() != null) {_			return true__		}_		Object value = beanDefinition.getAttribute(SKIP_REQUIRED_CHECK_ATTRIBUTE)__		return (value != null && (Boolean.TRUE.equals(value) || Boolean.valueOf(value.toString())))__	};check,whether,the,given,bean,definition,is,not,subject,to,the,annotation,based,required,property,check,as,performed,by,this,post,processor,p,the,default,implementations,check,for,the,presence,of,the,link,attribute,in,the,bean,definition,if,any,it,also,suggests,skipping,in,case,of,a,bean,definition,with,a,factory,bean,reference,set,assuming,that,instance,based,factories,pre,populate,the,bean,param,bean,factory,the,bean,factory,to,check,against,param,bean,name,the,name,of,the,bean,to,check,against,return,code,true,to,skip,the,bean,code,false,to,process,it;protected,boolean,should,skip,configurable,listable,bean,factory,bean,factory,string,bean,name,if,bean,factory,null,bean,factory,contains,bean,definition,bean,name,return,false,bean,definition,bean,definition,bean,factory,get,bean,definition,bean,name,if,bean,definition,get,factory,bean,name,null,return,true,object,value,bean,definition,get,attribute,return,value,null,boolean,true,equals,value,boolean,value,of,value,to,string
RequiredAnnotationBeanPostProcessor -> protected boolean shouldSkip(ConfigurableListableBeanFactory beanFactory, String beanName);1469561191;Check whether the given bean definition is not subject to the annotation-based_required property check as performed by this post-processor._<p>The default implementations check for the presence of the_{@link #SKIP_REQUIRED_CHECK_ATTRIBUTE} attribute in the bean definition, if any._It also suggests skipping in case of a bean definition with a "factory-bean"_reference set, assuming that instance-based factories pre-populate the bean._@param beanFactory the BeanFactory to check against_@param beanName the name of the bean to check against_@return {@code true} to skip the bean_ {@code false} to process it;protected boolean shouldSkip(ConfigurableListableBeanFactory beanFactory, String beanName) {_		if (beanFactory == null || !beanFactory.containsBeanDefinition(beanName)) {_			return false__		}_		BeanDefinition beanDefinition = beanFactory.getBeanDefinition(beanName)__		if (beanDefinition.getFactoryBeanName() != null) {_			return true__		}_		Object value = beanDefinition.getAttribute(SKIP_REQUIRED_CHECK_ATTRIBUTE)__		return (value != null && (Boolean.TRUE.equals(value) || Boolean.valueOf(value.toString())))__	};check,whether,the,given,bean,definition,is,not,subject,to,the,annotation,based,required,property,check,as,performed,by,this,post,processor,p,the,default,implementations,check,for,the,presence,of,the,link,attribute,in,the,bean,definition,if,any,it,also,suggests,skipping,in,case,of,a,bean,definition,with,a,factory,bean,reference,set,assuming,that,instance,based,factories,pre,populate,the,bean,param,bean,factory,the,bean,factory,to,check,against,param,bean,name,the,name,of,the,bean,to,check,against,return,code,true,to,skip,the,bean,code,false,to,process,it;protected,boolean,should,skip,configurable,listable,bean,factory,bean,factory,string,bean,name,if,bean,factory,null,bean,factory,contains,bean,definition,bean,name,return,false,bean,definition,bean,definition,bean,factory,get,bean,definition,bean,name,if,bean,definition,get,factory,bean,name,null,return,true,object,value,bean,definition,get,attribute,return,value,null,boolean,true,equals,value,boolean,value,of,value,to,string
RequiredAnnotationBeanPostProcessor -> protected boolean shouldSkip(ConfigurableListableBeanFactory beanFactory, String beanName);1478538021;Check whether the given bean definition is not subject to the annotation-based_required property check as performed by this post-processor._<p>The default implementations check for the presence of the_{@link #SKIP_REQUIRED_CHECK_ATTRIBUTE} attribute in the bean definition, if any._It also suggests skipping in case of a bean definition with a "factory-bean"_reference set, assuming that instance-based factories pre-populate the bean._@param beanFactory the BeanFactory to check against_@param beanName the name of the bean to check against_@return {@code true} to skip the bean_ {@code false} to process it;protected boolean shouldSkip(ConfigurableListableBeanFactory beanFactory, String beanName) {_		if (beanFactory == null || !beanFactory.containsBeanDefinition(beanName)) {_			return false__		}_		BeanDefinition beanDefinition = beanFactory.getBeanDefinition(beanName)__		if (beanDefinition.getFactoryBeanName() != null) {_			return true__		}_		Object value = beanDefinition.getAttribute(SKIP_REQUIRED_CHECK_ATTRIBUTE)__		return (value != null && (Boolean.TRUE.equals(value) || Boolean.valueOf(value.toString())))__	};check,whether,the,given,bean,definition,is,not,subject,to,the,annotation,based,required,property,check,as,performed,by,this,post,processor,p,the,default,implementations,check,for,the,presence,of,the,link,attribute,in,the,bean,definition,if,any,it,also,suggests,skipping,in,case,of,a,bean,definition,with,a,factory,bean,reference,set,assuming,that,instance,based,factories,pre,populate,the,bean,param,bean,factory,the,bean,factory,to,check,against,param,bean,name,the,name,of,the,bean,to,check,against,return,code,true,to,skip,the,bean,code,false,to,process,it;protected,boolean,should,skip,configurable,listable,bean,factory,bean,factory,string,bean,name,if,bean,factory,null,bean,factory,contains,bean,definition,bean,name,return,false,bean,definition,bean,definition,bean,factory,get,bean,definition,bean,name,if,bean,definition,get,factory,bean,name,null,return,true,object,value,bean,definition,get,attribute,return,value,null,boolean,true,equals,value,boolean,value,of,value,to,string
RequiredAnnotationBeanPostProcessor -> protected boolean shouldSkip(@Nullable ConfigurableListableBeanFactory beanFactory, String beanName);1496837955;Check whether the given bean definition is not subject to the annotation-based_required property check as performed by this post-processor._<p>The default implementations check for the presence of the_{@link #SKIP_REQUIRED_CHECK_ATTRIBUTE} attribute in the bean definition, if any._It also suggests skipping in case of a bean definition with a "factory-bean"_reference set, assuming that instance-based factories pre-populate the bean._@param beanFactory the BeanFactory to check against_@param beanName the name of the bean to check against_@return {@code true} to skip the bean_ {@code false} to process it;protected boolean shouldSkip(@Nullable ConfigurableListableBeanFactory beanFactory, String beanName) {_		if (beanFactory == null || !beanFactory.containsBeanDefinition(beanName)) {_			return false__		}_		BeanDefinition beanDefinition = beanFactory.getBeanDefinition(beanName)__		if (beanDefinition.getFactoryBeanName() != null) {_			return true__		}_		Object value = beanDefinition.getAttribute(SKIP_REQUIRED_CHECK_ATTRIBUTE)__		return (value != null && (Boolean.TRUE.equals(value) || Boolean.valueOf(value.toString())))__	};check,whether,the,given,bean,definition,is,not,subject,to,the,annotation,based,required,property,check,as,performed,by,this,post,processor,p,the,default,implementations,check,for,the,presence,of,the,link,attribute,in,the,bean,definition,if,any,it,also,suggests,skipping,in,case,of,a,bean,definition,with,a,factory,bean,reference,set,assuming,that,instance,based,factories,pre,populate,the,bean,param,bean,factory,the,bean,factory,to,check,against,param,bean,name,the,name,of,the,bean,to,check,against,return,code,true,to,skip,the,bean,code,false,to,process,it;protected,boolean,should,skip,nullable,configurable,listable,bean,factory,bean,factory,string,bean,name,if,bean,factory,null,bean,factory,contains,bean,definition,bean,name,return,false,bean,definition,bean,definition,bean,factory,get,bean,definition,bean,name,if,bean,definition,get,factory,bean,name,null,return,true,object,value,bean,definition,get,attribute,return,value,null,boolean,true,equals,value,boolean,value,of,value,to,string
RequiredAnnotationBeanPostProcessor -> protected boolean shouldSkip(@Nullable ConfigurableListableBeanFactory beanFactory, String beanName);1500495740;Check whether the given bean definition is not subject to the annotation-based_required property check as performed by this post-processor._<p>The default implementations check for the presence of the_{@link #SKIP_REQUIRED_CHECK_ATTRIBUTE} attribute in the bean definition, if any._It also suggests skipping in case of a bean definition with a "factory-bean"_reference set, assuming that instance-based factories pre-populate the bean._@param beanFactory the BeanFactory to check against_@param beanName the name of the bean to check against_@return {@code true} to skip the bean_ {@code false} to process it;protected boolean shouldSkip(@Nullable ConfigurableListableBeanFactory beanFactory, String beanName) {_		if (beanFactory == null || !beanFactory.containsBeanDefinition(beanName)) {_			return false__		}_		BeanDefinition beanDefinition = beanFactory.getBeanDefinition(beanName)__		if (beanDefinition.getFactoryBeanName() != null) {_			return true__		}_		Object value = beanDefinition.getAttribute(SKIP_REQUIRED_CHECK_ATTRIBUTE)__		return (value != null && (Boolean.TRUE.equals(value) || Boolean.valueOf(value.toString())))__	};check,whether,the,given,bean,definition,is,not,subject,to,the,annotation,based,required,property,check,as,performed,by,this,post,processor,p,the,default,implementations,check,for,the,presence,of,the,link,attribute,in,the,bean,definition,if,any,it,also,suggests,skipping,in,case,of,a,bean,definition,with,a,factory,bean,reference,set,assuming,that,instance,based,factories,pre,populate,the,bean,param,bean,factory,the,bean,factory,to,check,against,param,bean,name,the,name,of,the,bean,to,check,against,return,code,true,to,skip,the,bean,code,false,to,process,it;protected,boolean,should,skip,nullable,configurable,listable,bean,factory,bean,factory,string,bean,name,if,bean,factory,null,bean,factory,contains,bean,definition,bean,name,return,false,bean,definition,bean,definition,bean,factory,get,bean,definition,bean,name,if,bean,definition,get,factory,bean,name,null,return,true,object,value,bean,definition,get,attribute,return,value,null,boolean,true,equals,value,boolean,value,of,value,to,string
RequiredAnnotationBeanPostProcessor -> protected boolean shouldSkip(@Nullable ConfigurableListableBeanFactory beanFactory, String beanName);1524327638;Check whether the given bean definition is not subject to the annotation-based_required property check as performed by this post-processor._<p>The default implementations check for the presence of the_{@link #SKIP_REQUIRED_CHECK_ATTRIBUTE} attribute in the bean definition, if any._It also suggests skipping in case of a bean definition with a "factory-bean"_reference set, assuming that instance-based factories pre-populate the bean._@param beanFactory the BeanFactory to check against_@param beanName the name of the bean to check against_@return {@code true} to skip the bean_ {@code false} to process it;protected boolean shouldSkip(@Nullable ConfigurableListableBeanFactory beanFactory, String beanName) {_		if (beanFactory == null || !beanFactory.containsBeanDefinition(beanName)) {_			return false__		}_		BeanDefinition beanDefinition = beanFactory.getBeanDefinition(beanName)__		if (beanDefinition.getFactoryBeanName() != null) {_			return true__		}_		Object value = beanDefinition.getAttribute(SKIP_REQUIRED_CHECK_ATTRIBUTE)__		return (value != null && (Boolean.TRUE.equals(value) || Boolean.valueOf(value.toString())))__	};check,whether,the,given,bean,definition,is,not,subject,to,the,annotation,based,required,property,check,as,performed,by,this,post,processor,p,the,default,implementations,check,for,the,presence,of,the,link,attribute,in,the,bean,definition,if,any,it,also,suggests,skipping,in,case,of,a,bean,definition,with,a,factory,bean,reference,set,assuming,that,instance,based,factories,pre,populate,the,bean,param,bean,factory,the,bean,factory,to,check,against,param,bean,name,the,name,of,the,bean,to,check,against,return,code,true,to,skip,the,bean,code,false,to,process,it;protected,boolean,should,skip,nullable,configurable,listable,bean,factory,bean,factory,string,bean,name,if,bean,factory,null,bean,factory,contains,bean,definition,bean,name,return,false,bean,definition,bean,definition,bean,factory,get,bean,definition,bean,name,if,bean,definition,get,factory,bean,name,null,return,true,object,value,bean,definition,get,attribute,return,value,null,boolean,true,equals,value,boolean,value,of,value,to,string
RequiredAnnotationBeanPostProcessor -> protected boolean shouldSkip(@Nullable ConfigurableListableBeanFactory beanFactory, String beanName);1530174524;Check whether the given bean definition is not subject to the annotation-based_required property check as performed by this post-processor._<p>The default implementations check for the presence of the_{@link #SKIP_REQUIRED_CHECK_ATTRIBUTE} attribute in the bean definition, if any._It also suggests skipping in case of a bean definition with a "factory-bean"_reference set, assuming that instance-based factories pre-populate the bean._@param beanFactory the BeanFactory to check against_@param beanName the name of the bean to check against_@return {@code true} to skip the bean_ {@code false} to process it;protected boolean shouldSkip(@Nullable ConfigurableListableBeanFactory beanFactory, String beanName) {_		if (beanFactory == null || !beanFactory.containsBeanDefinition(beanName)) {_			return false__		}_		BeanDefinition beanDefinition = beanFactory.getBeanDefinition(beanName)__		if (beanDefinition.getFactoryBeanName() != null) {_			return true__		}_		Object value = beanDefinition.getAttribute(SKIP_REQUIRED_CHECK_ATTRIBUTE)__		return (value != null && (Boolean.TRUE.equals(value) || Boolean.valueOf(value.toString())))__	};check,whether,the,given,bean,definition,is,not,subject,to,the,annotation,based,required,property,check,as,performed,by,this,post,processor,p,the,default,implementations,check,for,the,presence,of,the,link,attribute,in,the,bean,definition,if,any,it,also,suggests,skipping,in,case,of,a,bean,definition,with,a,factory,bean,reference,set,assuming,that,instance,based,factories,pre,populate,the,bean,param,bean,factory,the,bean,factory,to,check,against,param,bean,name,the,name,of,the,bean,to,check,against,return,code,true,to,skip,the,bean,code,false,to,process,it;protected,boolean,should,skip,nullable,configurable,listable,bean,factory,bean,factory,string,bean,name,if,bean,factory,null,bean,factory,contains,bean,definition,bean,name,return,false,bean,definition,bean,definition,bean,factory,get,bean,definition,bean,name,if,bean,definition,get,factory,bean,name,null,return,true,object,value,bean,definition,get,attribute,return,value,null,boolean,true,equals,value,boolean,value,of,value,to,string
RequiredAnnotationBeanPostProcessor -> protected boolean shouldSkip(@Nullable ConfigurableListableBeanFactory beanFactory, String beanName);1530188116;Check whether the given bean definition is not subject to the annotation-based_required property check as performed by this post-processor._<p>The default implementations check for the presence of the_{@link #SKIP_REQUIRED_CHECK_ATTRIBUTE} attribute in the bean definition, if any._It also suggests skipping in case of a bean definition with a "factory-bean"_reference set, assuming that instance-based factories pre-populate the bean._@param beanFactory the BeanFactory to check against_@param beanName the name of the bean to check against_@return {@code true} to skip the bean_ {@code false} to process it;protected boolean shouldSkip(@Nullable ConfigurableListableBeanFactory beanFactory, String beanName) {_		if (beanFactory == null || !beanFactory.containsBeanDefinition(beanName)) {_			return false__		}_		BeanDefinition beanDefinition = beanFactory.getBeanDefinition(beanName)__		if (beanDefinition.getFactoryBeanName() != null) {_			return true__		}_		Object value = beanDefinition.getAttribute(SKIP_REQUIRED_CHECK_ATTRIBUTE)__		return (value != null && (Boolean.TRUE.equals(value) || Boolean.valueOf(value.toString())))__	};check,whether,the,given,bean,definition,is,not,subject,to,the,annotation,based,required,property,check,as,performed,by,this,post,processor,p,the,default,implementations,check,for,the,presence,of,the,link,attribute,in,the,bean,definition,if,any,it,also,suggests,skipping,in,case,of,a,bean,definition,with,a,factory,bean,reference,set,assuming,that,instance,based,factories,pre,populate,the,bean,param,bean,factory,the,bean,factory,to,check,against,param,bean,name,the,name,of,the,bean,to,check,against,return,code,true,to,skip,the,bean,code,false,to,process,it;protected,boolean,should,skip,nullable,configurable,listable,bean,factory,bean,factory,string,bean,name,if,bean,factory,null,bean,factory,contains,bean,definition,bean,name,return,false,bean,definition,bean,definition,bean,factory,get,bean,definition,bean,name,if,bean,definition,get,factory,bean,name,null,return,true,object,value,bean,definition,get,attribute,return,value,null,boolean,true,equals,value,boolean,value,of,value,to,string
RequiredAnnotationBeanPostProcessor -> protected Class<? extends Annotation> getRequiredAnnotationType();1328020251;Return the 'required' annotation type.;protected Class<? extends Annotation> getRequiredAnnotationType() {_		return this.requiredAnnotationType__	};return,the,required,annotation,type;protected,class,extends,annotation,get,required,annotation,type,return,this,required,annotation,type
RequiredAnnotationBeanPostProcessor -> protected Class<? extends Annotation> getRequiredAnnotationType();1355352386;Return the 'required' annotation type.;protected Class<? extends Annotation> getRequiredAnnotationType() {_		return this.requiredAnnotationType__	};return,the,required,annotation,type;protected,class,extends,annotation,get,required,annotation,type,return,this,required,annotation,type
RequiredAnnotationBeanPostProcessor -> protected Class<? extends Annotation> getRequiredAnnotationType();1356735495;Return the 'required' annotation type.;protected Class<? extends Annotation> getRequiredAnnotationType() {_		return this.requiredAnnotationType__	};return,the,required,annotation,type;protected,class,extends,annotation,get,required,annotation,type,return,this,required,annotation,type
RequiredAnnotationBeanPostProcessor -> protected Class<? extends Annotation> getRequiredAnnotationType();1357119239;Return the 'required' annotation type.;protected Class<? extends Annotation> getRequiredAnnotationType() {_		return this.requiredAnnotationType__	};return,the,required,annotation,type;protected,class,extends,annotation,get,required,annotation,type,return,this,required,annotation,type
RequiredAnnotationBeanPostProcessor -> protected Class<? extends Annotation> getRequiredAnnotationType();1362408075;Return the 'required' annotation type.;protected Class<? extends Annotation> getRequiredAnnotationType() {_		return this.requiredAnnotationType__	};return,the,required,annotation,type;protected,class,extends,annotation,get,required,annotation,type,return,this,required,annotation,type
RequiredAnnotationBeanPostProcessor -> protected Class<? extends Annotation> getRequiredAnnotationType();1364505266;Return the 'required' annotation type.;protected Class<? extends Annotation> getRequiredAnnotationType() {_		return this.requiredAnnotationType__	};return,the,required,annotation,type;protected,class,extends,annotation,get,required,annotation,type,return,this,required,annotation,type
RequiredAnnotationBeanPostProcessor -> protected Class<? extends Annotation> getRequiredAnnotationType();1368482696;Return the 'required' annotation type.;protected Class<? extends Annotation> getRequiredAnnotationType() {_		return this.requiredAnnotationType__	};return,the,required,annotation,type;protected,class,extends,annotation,get,required,annotation,type,return,this,required,annotation,type
RequiredAnnotationBeanPostProcessor -> protected Class<? extends Annotation> getRequiredAnnotationType();1386774676;Return the 'required' annotation type.;protected Class<? extends Annotation> getRequiredAnnotationType() {_		return this.requiredAnnotationType__	};return,the,required,annotation,type;protected,class,extends,annotation,get,required,annotation,type,return,this,required,annotation,type
RequiredAnnotationBeanPostProcessor -> protected Class<? extends Annotation> getRequiredAnnotationType();1467730834;Return the 'required' annotation type.;protected Class<? extends Annotation> getRequiredAnnotationType() {_		return this.requiredAnnotationType__	};return,the,required,annotation,type;protected,class,extends,annotation,get,required,annotation,type,return,this,required,annotation,type
RequiredAnnotationBeanPostProcessor -> protected Class<? extends Annotation> getRequiredAnnotationType();1469561191;Return the 'required' annotation type.;protected Class<? extends Annotation> getRequiredAnnotationType() {_		return this.requiredAnnotationType__	};return,the,required,annotation,type;protected,class,extends,annotation,get,required,annotation,type,return,this,required,annotation,type
RequiredAnnotationBeanPostProcessor -> protected Class<? extends Annotation> getRequiredAnnotationType();1478538021;Return the 'required' annotation type.;protected Class<? extends Annotation> getRequiredAnnotationType() {_		return this.requiredAnnotationType__	};return,the,required,annotation,type;protected,class,extends,annotation,get,required,annotation,type,return,this,required,annotation,type
RequiredAnnotationBeanPostProcessor -> protected Class<? extends Annotation> getRequiredAnnotationType();1496837955;Return the 'required' annotation type.;protected Class<? extends Annotation> getRequiredAnnotationType() {_		return this.requiredAnnotationType__	};return,the,required,annotation,type;protected,class,extends,annotation,get,required,annotation,type,return,this,required,annotation,type
RequiredAnnotationBeanPostProcessor -> protected Class<? extends Annotation> getRequiredAnnotationType();1500495740;Return the 'required' annotation type.;protected Class<? extends Annotation> getRequiredAnnotationType() {_		return this.requiredAnnotationType__	};return,the,required,annotation,type;protected,class,extends,annotation,get,required,annotation,type,return,this,required,annotation,type
RequiredAnnotationBeanPostProcessor -> protected Class<? extends Annotation> getRequiredAnnotationType();1524327638;Return the 'required' annotation type.;protected Class<? extends Annotation> getRequiredAnnotationType() {_		return this.requiredAnnotationType__	};return,the,required,annotation,type;protected,class,extends,annotation,get,required,annotation,type,return,this,required,annotation,type
RequiredAnnotationBeanPostProcessor -> protected Class<? extends Annotation> getRequiredAnnotationType();1530174524;Return the 'required' annotation type.;protected Class<? extends Annotation> getRequiredAnnotationType() {_		return this.requiredAnnotationType__	};return,the,required,annotation,type;protected,class,extends,annotation,get,required,annotation,type,return,this,required,annotation,type
RequiredAnnotationBeanPostProcessor -> protected Class<? extends Annotation> getRequiredAnnotationType();1530188116;Return the 'required' annotation type.;protected Class<? extends Annotation> getRequiredAnnotationType() {_		return this.requiredAnnotationType__	};return,the,required,annotation,type;protected,class,extends,annotation,get,required,annotation,type,return,this,required,annotation,type
RequiredAnnotationBeanPostProcessor -> private String buildExceptionMessage(List<String> invalidProperties, String beanName);1328020251;Build an exception message for the given list of invalid properties._@param invalidProperties the list of names of invalid properties_@param beanName the name of the bean_@return the exception message;private String buildExceptionMessage(List<String> invalidProperties, String beanName) {_		int size = invalidProperties.size()__		StringBuilder sb = new StringBuilder()__		sb.append(size == 1 ? "Property" : "Properties")__		for (int i = 0_ i < size_ i++) {_			String propertyName = invalidProperties.get(i)__			if (i > 0) {_				if (i == (size - 1)) {_					sb.append(" and")__				}_				else {_					sb.append(",")__				}_			}_			sb.append(" '").append(propertyName).append("'")__		}_		sb.append(size == 1 ? " is" : " are")__		sb.append(" required for bean '").append(beanName).append("'")__		return sb.toString()__	};build,an,exception,message,for,the,given,list,of,invalid,properties,param,invalid,properties,the,list,of,names,of,invalid,properties,param,bean,name,the,name,of,the,bean,return,the,exception,message;private,string,build,exception,message,list,string,invalid,properties,string,bean,name,int,size,invalid,properties,size,string,builder,sb,new,string,builder,sb,append,size,1,property,properties,for,int,i,0,i,size,i,string,property,name,invalid,properties,get,i,if,i,0,if,i,size,1,sb,append,and,else,sb,append,sb,append,append,property,name,append,sb,append,size,1,is,are,sb,append,required,for,bean,append,bean,name,append,return,sb,to,string
RequiredAnnotationBeanPostProcessor -> private String buildExceptionMessage(List<String> invalidProperties, String beanName);1355352386;Build an exception message for the given list of invalid properties._@param invalidProperties the list of names of invalid properties_@param beanName the name of the bean_@return the exception message;private String buildExceptionMessage(List<String> invalidProperties, String beanName) {_		int size = invalidProperties.size()__		StringBuilder sb = new StringBuilder()__		sb.append(size == 1 ? "Property" : "Properties")__		for (int i = 0_ i < size_ i++) {_			String propertyName = invalidProperties.get(i)__			if (i > 0) {_				if (i == (size - 1)) {_					sb.append(" and")__				}_				else {_					sb.append(",")__				}_			}_			sb.append(" '").append(propertyName).append("'")__		}_		sb.append(size == 1 ? " is" : " are")__		sb.append(" required for bean '").append(beanName).append("'")__		return sb.toString()__	};build,an,exception,message,for,the,given,list,of,invalid,properties,param,invalid,properties,the,list,of,names,of,invalid,properties,param,bean,name,the,name,of,the,bean,return,the,exception,message;private,string,build,exception,message,list,string,invalid,properties,string,bean,name,int,size,invalid,properties,size,string,builder,sb,new,string,builder,sb,append,size,1,property,properties,for,int,i,0,i,size,i,string,property,name,invalid,properties,get,i,if,i,0,if,i,size,1,sb,append,and,else,sb,append,sb,append,append,property,name,append,sb,append,size,1,is,are,sb,append,required,for,bean,append,bean,name,append,return,sb,to,string
RequiredAnnotationBeanPostProcessor -> private String buildExceptionMessage(List<String> invalidProperties, String beanName);1356735495;Build an exception message for the given list of invalid properties._@param invalidProperties the list of names of invalid properties_@param beanName the name of the bean_@return the exception message;private String buildExceptionMessage(List<String> invalidProperties, String beanName) {_		int size = invalidProperties.size()__		StringBuilder sb = new StringBuilder()__		sb.append(size == 1 ? "Property" : "Properties")__		for (int i = 0_ i < size_ i++) {_			String propertyName = invalidProperties.get(i)__			if (i > 0) {_				if (i == (size - 1)) {_					sb.append(" and")__				}_				else {_					sb.append(",")__				}_			}_			sb.append(" '").append(propertyName).append("'")__		}_		sb.append(size == 1 ? " is" : " are")__		sb.append(" required for bean '").append(beanName).append("'")__		return sb.toString()__	};build,an,exception,message,for,the,given,list,of,invalid,properties,param,invalid,properties,the,list,of,names,of,invalid,properties,param,bean,name,the,name,of,the,bean,return,the,exception,message;private,string,build,exception,message,list,string,invalid,properties,string,bean,name,int,size,invalid,properties,size,string,builder,sb,new,string,builder,sb,append,size,1,property,properties,for,int,i,0,i,size,i,string,property,name,invalid,properties,get,i,if,i,0,if,i,size,1,sb,append,and,else,sb,append,sb,append,append,property,name,append,sb,append,size,1,is,are,sb,append,required,for,bean,append,bean,name,append,return,sb,to,string
RequiredAnnotationBeanPostProcessor -> private String buildExceptionMessage(List<String> invalidProperties, String beanName);1357119239;Build an exception message for the given list of invalid properties._@param invalidProperties the list of names of invalid properties_@param beanName the name of the bean_@return the exception message;private String buildExceptionMessage(List<String> invalidProperties, String beanName) {_		int size = invalidProperties.size()__		StringBuilder sb = new StringBuilder()__		sb.append(size == 1 ? "Property" : "Properties")__		for (int i = 0_ i < size_ i++) {_			String propertyName = invalidProperties.get(i)__			if (i > 0) {_				if (i == (size - 1)) {_					sb.append(" and")__				}_				else {_					sb.append(",")__				}_			}_			sb.append(" '").append(propertyName).append("'")__		}_		sb.append(size == 1 ? " is" : " are")__		sb.append(" required for bean '").append(beanName).append("'")__		return sb.toString()__	};build,an,exception,message,for,the,given,list,of,invalid,properties,param,invalid,properties,the,list,of,names,of,invalid,properties,param,bean,name,the,name,of,the,bean,return,the,exception,message;private,string,build,exception,message,list,string,invalid,properties,string,bean,name,int,size,invalid,properties,size,string,builder,sb,new,string,builder,sb,append,size,1,property,properties,for,int,i,0,i,size,i,string,property,name,invalid,properties,get,i,if,i,0,if,i,size,1,sb,append,and,else,sb,append,sb,append,append,property,name,append,sb,append,size,1,is,are,sb,append,required,for,bean,append,bean,name,append,return,sb,to,string
RequiredAnnotationBeanPostProcessor -> private String buildExceptionMessage(List<String> invalidProperties, String beanName);1362408075;Build an exception message for the given list of invalid properties._@param invalidProperties the list of names of invalid properties_@param beanName the name of the bean_@return the exception message;private String buildExceptionMessage(List<String> invalidProperties, String beanName) {_		int size = invalidProperties.size()__		StringBuilder sb = new StringBuilder()__		sb.append(size == 1 ? "Property" : "Properties")__		for (int i = 0_ i < size_ i++) {_			String propertyName = invalidProperties.get(i)__			if (i > 0) {_				if (i == (size - 1)) {_					sb.append(" and")__				}_				else {_					sb.append(",")__				}_			}_			sb.append(" '").append(propertyName).append("'")__		}_		sb.append(size == 1 ? " is" : " are")__		sb.append(" required for bean '").append(beanName).append("'")__		return sb.toString()__	};build,an,exception,message,for,the,given,list,of,invalid,properties,param,invalid,properties,the,list,of,names,of,invalid,properties,param,bean,name,the,name,of,the,bean,return,the,exception,message;private,string,build,exception,message,list,string,invalid,properties,string,bean,name,int,size,invalid,properties,size,string,builder,sb,new,string,builder,sb,append,size,1,property,properties,for,int,i,0,i,size,i,string,property,name,invalid,properties,get,i,if,i,0,if,i,size,1,sb,append,and,else,sb,append,sb,append,append,property,name,append,sb,append,size,1,is,are,sb,append,required,for,bean,append,bean,name,append,return,sb,to,string
RequiredAnnotationBeanPostProcessor -> private String buildExceptionMessage(List<String> invalidProperties, String beanName);1364505266;Build an exception message for the given list of invalid properties._@param invalidProperties the list of names of invalid properties_@param beanName the name of the bean_@return the exception message;private String buildExceptionMessage(List<String> invalidProperties, String beanName) {_		int size = invalidProperties.size()__		StringBuilder sb = new StringBuilder()__		sb.append(size == 1 ? "Property" : "Properties")__		for (int i = 0_ i < size_ i++) {_			String propertyName = invalidProperties.get(i)__			if (i > 0) {_				if (i == (size - 1)) {_					sb.append(" and")__				}_				else {_					sb.append(",")__				}_			}_			sb.append(" '").append(propertyName).append("'")__		}_		sb.append(size == 1 ? " is" : " are")__		sb.append(" required for bean '").append(beanName).append("'")__		return sb.toString()__	};build,an,exception,message,for,the,given,list,of,invalid,properties,param,invalid,properties,the,list,of,names,of,invalid,properties,param,bean,name,the,name,of,the,bean,return,the,exception,message;private,string,build,exception,message,list,string,invalid,properties,string,bean,name,int,size,invalid,properties,size,string,builder,sb,new,string,builder,sb,append,size,1,property,properties,for,int,i,0,i,size,i,string,property,name,invalid,properties,get,i,if,i,0,if,i,size,1,sb,append,and,else,sb,append,sb,append,append,property,name,append,sb,append,size,1,is,are,sb,append,required,for,bean,append,bean,name,append,return,sb,to,string
RequiredAnnotationBeanPostProcessor -> private String buildExceptionMessage(List<String> invalidProperties, String beanName);1368482696;Build an exception message for the given list of invalid properties._@param invalidProperties the list of names of invalid properties_@param beanName the name of the bean_@return the exception message;private String buildExceptionMessage(List<String> invalidProperties, String beanName) {_		int size = invalidProperties.size()__		StringBuilder sb = new StringBuilder()__		sb.append(size == 1 ? "Property" : "Properties")__		for (int i = 0_ i < size_ i++) {_			String propertyName = invalidProperties.get(i)__			if (i > 0) {_				if (i == (size - 1)) {_					sb.append(" and")__				}_				else {_					sb.append(",")__				}_			}_			sb.append(" '").append(propertyName).append("'")__		}_		sb.append(size == 1 ? " is" : " are")__		sb.append(" required for bean '").append(beanName).append("'")__		return sb.toString()__	};build,an,exception,message,for,the,given,list,of,invalid,properties,param,invalid,properties,the,list,of,names,of,invalid,properties,param,bean,name,the,name,of,the,bean,return,the,exception,message;private,string,build,exception,message,list,string,invalid,properties,string,bean,name,int,size,invalid,properties,size,string,builder,sb,new,string,builder,sb,append,size,1,property,properties,for,int,i,0,i,size,i,string,property,name,invalid,properties,get,i,if,i,0,if,i,size,1,sb,append,and,else,sb,append,sb,append,append,property,name,append,sb,append,size,1,is,are,sb,append,required,for,bean,append,bean,name,append,return,sb,to,string
RequiredAnnotationBeanPostProcessor -> private String buildExceptionMessage(List<String> invalidProperties, String beanName);1386774676;Build an exception message for the given list of invalid properties._@param invalidProperties the list of names of invalid properties_@param beanName the name of the bean_@return the exception message;private String buildExceptionMessage(List<String> invalidProperties, String beanName) {_		int size = invalidProperties.size()__		StringBuilder sb = new StringBuilder()__		sb.append(size == 1 ? "Property" : "Properties")__		for (int i = 0_ i < size_ i++) {_			String propertyName = invalidProperties.get(i)__			if (i > 0) {_				if (i == (size - 1)) {_					sb.append(" and")__				}_				else {_					sb.append(",")__				}_			}_			sb.append(" '").append(propertyName).append("'")__		}_		sb.append(size == 1 ? " is" : " are")__		sb.append(" required for bean '").append(beanName).append("'")__		return sb.toString()__	};build,an,exception,message,for,the,given,list,of,invalid,properties,param,invalid,properties,the,list,of,names,of,invalid,properties,param,bean,name,the,name,of,the,bean,return,the,exception,message;private,string,build,exception,message,list,string,invalid,properties,string,bean,name,int,size,invalid,properties,size,string,builder,sb,new,string,builder,sb,append,size,1,property,properties,for,int,i,0,i,size,i,string,property,name,invalid,properties,get,i,if,i,0,if,i,size,1,sb,append,and,else,sb,append,sb,append,append,property,name,append,sb,append,size,1,is,are,sb,append,required,for,bean,append,bean,name,append,return,sb,to,string
RequiredAnnotationBeanPostProcessor -> private String buildExceptionMessage(List<String> invalidProperties, String beanName);1467730834;Build an exception message for the given list of invalid properties._@param invalidProperties the list of names of invalid properties_@param beanName the name of the bean_@return the exception message;private String buildExceptionMessage(List<String> invalidProperties, String beanName) {_		int size = invalidProperties.size()__		StringBuilder sb = new StringBuilder()__		sb.append(size == 1 ? "Property" : "Properties")__		for (int i = 0_ i < size_ i++) {_			String propertyName = invalidProperties.get(i)__			if (i > 0) {_				if (i == (size - 1)) {_					sb.append(" and")__				}_				else {_					sb.append(",")__				}_			}_			sb.append(" '").append(propertyName).append("'")__		}_		sb.append(size == 1 ? " is" : " are")__		sb.append(" required for bean '").append(beanName).append("'")__		return sb.toString()__	};build,an,exception,message,for,the,given,list,of,invalid,properties,param,invalid,properties,the,list,of,names,of,invalid,properties,param,bean,name,the,name,of,the,bean,return,the,exception,message;private,string,build,exception,message,list,string,invalid,properties,string,bean,name,int,size,invalid,properties,size,string,builder,sb,new,string,builder,sb,append,size,1,property,properties,for,int,i,0,i,size,i,string,property,name,invalid,properties,get,i,if,i,0,if,i,size,1,sb,append,and,else,sb,append,sb,append,append,property,name,append,sb,append,size,1,is,are,sb,append,required,for,bean,append,bean,name,append,return,sb,to,string
RequiredAnnotationBeanPostProcessor -> private String buildExceptionMessage(List<String> invalidProperties, String beanName);1469561191;Build an exception message for the given list of invalid properties._@param invalidProperties the list of names of invalid properties_@param beanName the name of the bean_@return the exception message;private String buildExceptionMessage(List<String> invalidProperties, String beanName) {_		int size = invalidProperties.size()__		StringBuilder sb = new StringBuilder()__		sb.append(size == 1 ? "Property" : "Properties")__		for (int i = 0_ i < size_ i++) {_			String propertyName = invalidProperties.get(i)__			if (i > 0) {_				if (i == (size - 1)) {_					sb.append(" and")__				}_				else {_					sb.append(",")__				}_			}_			sb.append(" '").append(propertyName).append("'")__		}_		sb.append(size == 1 ? " is" : " are")__		sb.append(" required for bean '").append(beanName).append("'")__		return sb.toString()__	};build,an,exception,message,for,the,given,list,of,invalid,properties,param,invalid,properties,the,list,of,names,of,invalid,properties,param,bean,name,the,name,of,the,bean,return,the,exception,message;private,string,build,exception,message,list,string,invalid,properties,string,bean,name,int,size,invalid,properties,size,string,builder,sb,new,string,builder,sb,append,size,1,property,properties,for,int,i,0,i,size,i,string,property,name,invalid,properties,get,i,if,i,0,if,i,size,1,sb,append,and,else,sb,append,sb,append,append,property,name,append,sb,append,size,1,is,are,sb,append,required,for,bean,append,bean,name,append,return,sb,to,string
RequiredAnnotationBeanPostProcessor -> private String buildExceptionMessage(List<String> invalidProperties, String beanName);1478538021;Build an exception message for the given list of invalid properties._@param invalidProperties the list of names of invalid properties_@param beanName the name of the bean_@return the exception message;private String buildExceptionMessage(List<String> invalidProperties, String beanName) {_		int size = invalidProperties.size()__		StringBuilder sb = new StringBuilder()__		sb.append(size == 1 ? "Property" : "Properties")__		for (int i = 0_ i < size_ i++) {_			String propertyName = invalidProperties.get(i)__			if (i > 0) {_				if (i == (size - 1)) {_					sb.append(" and")__				}_				else {_					sb.append(",")__				}_			}_			sb.append(" '").append(propertyName).append("'")__		}_		sb.append(size == 1 ? " is" : " are")__		sb.append(" required for bean '").append(beanName).append("'")__		return sb.toString()__	};build,an,exception,message,for,the,given,list,of,invalid,properties,param,invalid,properties,the,list,of,names,of,invalid,properties,param,bean,name,the,name,of,the,bean,return,the,exception,message;private,string,build,exception,message,list,string,invalid,properties,string,bean,name,int,size,invalid,properties,size,string,builder,sb,new,string,builder,sb,append,size,1,property,properties,for,int,i,0,i,size,i,string,property,name,invalid,properties,get,i,if,i,0,if,i,size,1,sb,append,and,else,sb,append,sb,append,append,property,name,append,sb,append,size,1,is,are,sb,append,required,for,bean,append,bean,name,append,return,sb,to,string
RequiredAnnotationBeanPostProcessor -> private String buildExceptionMessage(List<String> invalidProperties, String beanName);1496837955;Build an exception message for the given list of invalid properties._@param invalidProperties the list of names of invalid properties_@param beanName the name of the bean_@return the exception message;private String buildExceptionMessage(List<String> invalidProperties, String beanName) {_		int size = invalidProperties.size()__		StringBuilder sb = new StringBuilder()__		sb.append(size == 1 ? "Property" : "Properties")__		for (int i = 0_ i < size_ i++) {_			String propertyName = invalidProperties.get(i)__			if (i > 0) {_				if (i == (size - 1)) {_					sb.append(" and")__				}_				else {_					sb.append(",")__				}_			}_			sb.append(" '").append(propertyName).append("'")__		}_		sb.append(size == 1 ? " is" : " are")__		sb.append(" required for bean '").append(beanName).append("'")__		return sb.toString()__	};build,an,exception,message,for,the,given,list,of,invalid,properties,param,invalid,properties,the,list,of,names,of,invalid,properties,param,bean,name,the,name,of,the,bean,return,the,exception,message;private,string,build,exception,message,list,string,invalid,properties,string,bean,name,int,size,invalid,properties,size,string,builder,sb,new,string,builder,sb,append,size,1,property,properties,for,int,i,0,i,size,i,string,property,name,invalid,properties,get,i,if,i,0,if,i,size,1,sb,append,and,else,sb,append,sb,append,append,property,name,append,sb,append,size,1,is,are,sb,append,required,for,bean,append,bean,name,append,return,sb,to,string
RequiredAnnotationBeanPostProcessor -> private String buildExceptionMessage(List<String> invalidProperties, String beanName);1500495740;Build an exception message for the given list of invalid properties._@param invalidProperties the list of names of invalid properties_@param beanName the name of the bean_@return the exception message;private String buildExceptionMessage(List<String> invalidProperties, String beanName) {_		int size = invalidProperties.size()__		StringBuilder sb = new StringBuilder()__		sb.append(size == 1 ? "Property" : "Properties")__		for (int i = 0_ i < size_ i++) {_			String propertyName = invalidProperties.get(i)__			if (i > 0) {_				if (i == (size - 1)) {_					sb.append(" and")__				}_				else {_					sb.append(",")__				}_			}_			sb.append(" '").append(propertyName).append("'")__		}_		sb.append(size == 1 ? " is" : " are")__		sb.append(" required for bean '").append(beanName).append("'")__		return sb.toString()__	};build,an,exception,message,for,the,given,list,of,invalid,properties,param,invalid,properties,the,list,of,names,of,invalid,properties,param,bean,name,the,name,of,the,bean,return,the,exception,message;private,string,build,exception,message,list,string,invalid,properties,string,bean,name,int,size,invalid,properties,size,string,builder,sb,new,string,builder,sb,append,size,1,property,properties,for,int,i,0,i,size,i,string,property,name,invalid,properties,get,i,if,i,0,if,i,size,1,sb,append,and,else,sb,append,sb,append,append,property,name,append,sb,append,size,1,is,are,sb,append,required,for,bean,append,bean,name,append,return,sb,to,string
RequiredAnnotationBeanPostProcessor -> private String buildExceptionMessage(List<String> invalidProperties, String beanName);1524327638;Build an exception message for the given list of invalid properties._@param invalidProperties the list of names of invalid properties_@param beanName the name of the bean_@return the exception message;private String buildExceptionMessage(List<String> invalidProperties, String beanName) {_		int size = invalidProperties.size()__		StringBuilder sb = new StringBuilder()__		sb.append(size == 1 ? "Property" : "Properties")__		for (int i = 0_ i < size_ i++) {_			String propertyName = invalidProperties.get(i)__			if (i > 0) {_				if (i == (size - 1)) {_					sb.append(" and")__				}_				else {_					sb.append(",")__				}_			}_			sb.append(" '").append(propertyName).append("'")__		}_		sb.append(size == 1 ? " is" : " are")__		sb.append(" required for bean '").append(beanName).append("'")__		return sb.toString()__	};build,an,exception,message,for,the,given,list,of,invalid,properties,param,invalid,properties,the,list,of,names,of,invalid,properties,param,bean,name,the,name,of,the,bean,return,the,exception,message;private,string,build,exception,message,list,string,invalid,properties,string,bean,name,int,size,invalid,properties,size,string,builder,sb,new,string,builder,sb,append,size,1,property,properties,for,int,i,0,i,size,i,string,property,name,invalid,properties,get,i,if,i,0,if,i,size,1,sb,append,and,else,sb,append,sb,append,append,property,name,append,sb,append,size,1,is,are,sb,append,required,for,bean,append,bean,name,append,return,sb,to,string
RequiredAnnotationBeanPostProcessor -> private String buildExceptionMessage(List<String> invalidProperties, String beanName);1530174524;Build an exception message for the given list of invalid properties._@param invalidProperties the list of names of invalid properties_@param beanName the name of the bean_@return the exception message;private String buildExceptionMessage(List<String> invalidProperties, String beanName) {_		int size = invalidProperties.size()__		StringBuilder sb = new StringBuilder()__		sb.append(size == 1 ? "Property" : "Properties")__		for (int i = 0_ i < size_ i++) {_			String propertyName = invalidProperties.get(i)__			if (i > 0) {_				if (i == (size - 1)) {_					sb.append(" and")__				}_				else {_					sb.append(",")__				}_			}_			sb.append(" '").append(propertyName).append("'")__		}_		sb.append(size == 1 ? " is" : " are")__		sb.append(" required for bean '").append(beanName).append("'")__		return sb.toString()__	};build,an,exception,message,for,the,given,list,of,invalid,properties,param,invalid,properties,the,list,of,names,of,invalid,properties,param,bean,name,the,name,of,the,bean,return,the,exception,message;private,string,build,exception,message,list,string,invalid,properties,string,bean,name,int,size,invalid,properties,size,string,builder,sb,new,string,builder,sb,append,size,1,property,properties,for,int,i,0,i,size,i,string,property,name,invalid,properties,get,i,if,i,0,if,i,size,1,sb,append,and,else,sb,append,sb,append,append,property,name,append,sb,append,size,1,is,are,sb,append,required,for,bean,append,bean,name,append,return,sb,to,string
RequiredAnnotationBeanPostProcessor -> private String buildExceptionMessage(List<String> invalidProperties, String beanName);1530188116;Build an exception message for the given list of invalid properties._@param invalidProperties the list of names of invalid properties_@param beanName the name of the bean_@return the exception message;private String buildExceptionMessage(List<String> invalidProperties, String beanName) {_		int size = invalidProperties.size()__		StringBuilder sb = new StringBuilder()__		sb.append(size == 1 ? "Property" : "Properties")__		for (int i = 0_ i < size_ i++) {_			String propertyName = invalidProperties.get(i)__			if (i > 0) {_				if (i == (size - 1)) {_					sb.append(" and")__				}_				else {_					sb.append(",")__				}_			}_			sb.append(" '").append(propertyName).append("'")__		}_		sb.append(size == 1 ? " is" : " are")__		sb.append(" required for bean '").append(beanName).append("'")__		return sb.toString()__	};build,an,exception,message,for,the,given,list,of,invalid,properties,param,invalid,properties,the,list,of,names,of,invalid,properties,param,bean,name,the,name,of,the,bean,return,the,exception,message;private,string,build,exception,message,list,string,invalid,properties,string,bean,name,int,size,invalid,properties,size,string,builder,sb,new,string,builder,sb,append,size,1,property,properties,for,int,i,0,i,size,i,string,property,name,invalid,properties,get,i,if,i,0,if,i,size,1,sb,append,and,else,sb,append,sb,append,append,property,name,append,sb,append,size,1,is,are,sb,append,required,for,bean,append,bean,name,append,return,sb,to,string
RequiredAnnotationBeanPostProcessor -> public void setRequiredAnnotationType(Class<? extends Annotation> requiredAnnotationType);1328020251;Set the 'required' annotation type, to be used on bean property_setter methods._<p>The default required annotation type is the Spring-provided_{@link Required} annotation._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a property value_is required.;public void setRequiredAnnotationType(Class<? extends Annotation> requiredAnnotationType) {_		Assert.notNull(requiredAnnotationType, "'requiredAnnotationType' must not be null")__		this.requiredAnnotationType = requiredAnnotationType__	};set,the,required,annotation,type,to,be,used,on,bean,property,setter,methods,p,the,default,required,annotation,type,is,the,spring,provided,link,required,annotation,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,property,value,is,required;public,void,set,required,annotation,type,class,extends,annotation,required,annotation,type,assert,not,null,required,annotation,type,required,annotation,type,must,not,be,null,this,required,annotation,type,required,annotation,type
RequiredAnnotationBeanPostProcessor -> public void setRequiredAnnotationType(Class<? extends Annotation> requiredAnnotationType);1355352386;Set the 'required' annotation type, to be used on bean property_setter methods._<p>The default required annotation type is the Spring-provided_{@link Required} annotation._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a property value_is required.;public void setRequiredAnnotationType(Class<? extends Annotation> requiredAnnotationType) {_		Assert.notNull(requiredAnnotationType, "'requiredAnnotationType' must not be null")__		this.requiredAnnotationType = requiredAnnotationType__	};set,the,required,annotation,type,to,be,used,on,bean,property,setter,methods,p,the,default,required,annotation,type,is,the,spring,provided,link,required,annotation,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,property,value,is,required;public,void,set,required,annotation,type,class,extends,annotation,required,annotation,type,assert,not,null,required,annotation,type,required,annotation,type,must,not,be,null,this,required,annotation,type,required,annotation,type
RequiredAnnotationBeanPostProcessor -> public void setRequiredAnnotationType(Class<? extends Annotation> requiredAnnotationType);1356735495;Set the 'required' annotation type, to be used on bean property_setter methods._<p>The default required annotation type is the Spring-provided_{@link Required} annotation._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a property value_is required.;public void setRequiredAnnotationType(Class<? extends Annotation> requiredAnnotationType) {_		Assert.notNull(requiredAnnotationType, "'requiredAnnotationType' must not be null")__		this.requiredAnnotationType = requiredAnnotationType__	};set,the,required,annotation,type,to,be,used,on,bean,property,setter,methods,p,the,default,required,annotation,type,is,the,spring,provided,link,required,annotation,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,property,value,is,required;public,void,set,required,annotation,type,class,extends,annotation,required,annotation,type,assert,not,null,required,annotation,type,required,annotation,type,must,not,be,null,this,required,annotation,type,required,annotation,type
RequiredAnnotationBeanPostProcessor -> public void setRequiredAnnotationType(Class<? extends Annotation> requiredAnnotationType);1357119239;Set the 'required' annotation type, to be used on bean property_setter methods._<p>The default required annotation type is the Spring-provided_{@link Required} annotation._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a property value_is required.;public void setRequiredAnnotationType(Class<? extends Annotation> requiredAnnotationType) {_		Assert.notNull(requiredAnnotationType, "'requiredAnnotationType' must not be null")__		this.requiredAnnotationType = requiredAnnotationType__	};set,the,required,annotation,type,to,be,used,on,bean,property,setter,methods,p,the,default,required,annotation,type,is,the,spring,provided,link,required,annotation,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,property,value,is,required;public,void,set,required,annotation,type,class,extends,annotation,required,annotation,type,assert,not,null,required,annotation,type,required,annotation,type,must,not,be,null,this,required,annotation,type,required,annotation,type
RequiredAnnotationBeanPostProcessor -> public void setRequiredAnnotationType(Class<? extends Annotation> requiredAnnotationType);1362408075;Set the 'required' annotation type, to be used on bean property_setter methods._<p>The default required annotation type is the Spring-provided_{@link Required} annotation._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a property value_is required.;public void setRequiredAnnotationType(Class<? extends Annotation> requiredAnnotationType) {_		Assert.notNull(requiredAnnotationType, "'requiredAnnotationType' must not be null")__		this.requiredAnnotationType = requiredAnnotationType__	};set,the,required,annotation,type,to,be,used,on,bean,property,setter,methods,p,the,default,required,annotation,type,is,the,spring,provided,link,required,annotation,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,property,value,is,required;public,void,set,required,annotation,type,class,extends,annotation,required,annotation,type,assert,not,null,required,annotation,type,required,annotation,type,must,not,be,null,this,required,annotation,type,required,annotation,type
RequiredAnnotationBeanPostProcessor -> public void setRequiredAnnotationType(Class<? extends Annotation> requiredAnnotationType);1364505266;Set the 'required' annotation type, to be used on bean property_setter methods._<p>The default required annotation type is the Spring-provided_{@link Required} annotation._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a property value_is required.;public void setRequiredAnnotationType(Class<? extends Annotation> requiredAnnotationType) {_		Assert.notNull(requiredAnnotationType, "'requiredAnnotationType' must not be null")__		this.requiredAnnotationType = requiredAnnotationType__	};set,the,required,annotation,type,to,be,used,on,bean,property,setter,methods,p,the,default,required,annotation,type,is,the,spring,provided,link,required,annotation,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,property,value,is,required;public,void,set,required,annotation,type,class,extends,annotation,required,annotation,type,assert,not,null,required,annotation,type,required,annotation,type,must,not,be,null,this,required,annotation,type,required,annotation,type
RequiredAnnotationBeanPostProcessor -> public void setRequiredAnnotationType(Class<? extends Annotation> requiredAnnotationType);1368482696;Set the 'required' annotation type, to be used on bean property_setter methods._<p>The default required annotation type is the Spring-provided_{@link Required} annotation._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a property value_is required.;public void setRequiredAnnotationType(Class<? extends Annotation> requiredAnnotationType) {_		Assert.notNull(requiredAnnotationType, "'requiredAnnotationType' must not be null")__		this.requiredAnnotationType = requiredAnnotationType__	};set,the,required,annotation,type,to,be,used,on,bean,property,setter,methods,p,the,default,required,annotation,type,is,the,spring,provided,link,required,annotation,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,property,value,is,required;public,void,set,required,annotation,type,class,extends,annotation,required,annotation,type,assert,not,null,required,annotation,type,required,annotation,type,must,not,be,null,this,required,annotation,type,required,annotation,type
RequiredAnnotationBeanPostProcessor -> public void setRequiredAnnotationType(Class<? extends Annotation> requiredAnnotationType);1386774676;Set the 'required' annotation type, to be used on bean property_setter methods._<p>The default required annotation type is the Spring-provided_{@link Required} annotation._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a property value_is required.;public void setRequiredAnnotationType(Class<? extends Annotation> requiredAnnotationType) {_		Assert.notNull(requiredAnnotationType, "'requiredAnnotationType' must not be null")__		this.requiredAnnotationType = requiredAnnotationType__	};set,the,required,annotation,type,to,be,used,on,bean,property,setter,methods,p,the,default,required,annotation,type,is,the,spring,provided,link,required,annotation,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,property,value,is,required;public,void,set,required,annotation,type,class,extends,annotation,required,annotation,type,assert,not,null,required,annotation,type,required,annotation,type,must,not,be,null,this,required,annotation,type,required,annotation,type
RequiredAnnotationBeanPostProcessor -> public void setRequiredAnnotationType(Class<? extends Annotation> requiredAnnotationType);1467730834;Set the 'required' annotation type, to be used on bean property_setter methods._<p>The default required annotation type is the Spring-provided_{@link Required} annotation._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a property value_is required.;public void setRequiredAnnotationType(Class<? extends Annotation> requiredAnnotationType) {_		Assert.notNull(requiredAnnotationType, "'requiredAnnotationType' must not be null")__		this.requiredAnnotationType = requiredAnnotationType__	};set,the,required,annotation,type,to,be,used,on,bean,property,setter,methods,p,the,default,required,annotation,type,is,the,spring,provided,link,required,annotation,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,property,value,is,required;public,void,set,required,annotation,type,class,extends,annotation,required,annotation,type,assert,not,null,required,annotation,type,required,annotation,type,must,not,be,null,this,required,annotation,type,required,annotation,type
RequiredAnnotationBeanPostProcessor -> public void setRequiredAnnotationType(Class<? extends Annotation> requiredAnnotationType);1469561191;Set the 'required' annotation type, to be used on bean property_setter methods._<p>The default required annotation type is the Spring-provided_{@link Required} annotation._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a property value_is required.;public void setRequiredAnnotationType(Class<? extends Annotation> requiredAnnotationType) {_		Assert.notNull(requiredAnnotationType, "'requiredAnnotationType' must not be null")__		this.requiredAnnotationType = requiredAnnotationType__	};set,the,required,annotation,type,to,be,used,on,bean,property,setter,methods,p,the,default,required,annotation,type,is,the,spring,provided,link,required,annotation,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,property,value,is,required;public,void,set,required,annotation,type,class,extends,annotation,required,annotation,type,assert,not,null,required,annotation,type,required,annotation,type,must,not,be,null,this,required,annotation,type,required,annotation,type
RequiredAnnotationBeanPostProcessor -> public void setRequiredAnnotationType(Class<? extends Annotation> requiredAnnotationType);1478538021;Set the 'required' annotation type, to be used on bean property_setter methods._<p>The default required annotation type is the Spring-provided_{@link Required} annotation._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a property value_is required.;public void setRequiredAnnotationType(Class<? extends Annotation> requiredAnnotationType) {_		Assert.notNull(requiredAnnotationType, "'requiredAnnotationType' must not be null")__		this.requiredAnnotationType = requiredAnnotationType__	};set,the,required,annotation,type,to,be,used,on,bean,property,setter,methods,p,the,default,required,annotation,type,is,the,spring,provided,link,required,annotation,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,property,value,is,required;public,void,set,required,annotation,type,class,extends,annotation,required,annotation,type,assert,not,null,required,annotation,type,required,annotation,type,must,not,be,null,this,required,annotation,type,required,annotation,type
RequiredAnnotationBeanPostProcessor -> public void setRequiredAnnotationType(Class<? extends Annotation> requiredAnnotationType);1496837955;Set the 'required' annotation type, to be used on bean property_setter methods._<p>The default required annotation type is the Spring-provided_{@link Required} annotation._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a property value_is required.;public void setRequiredAnnotationType(Class<? extends Annotation> requiredAnnotationType) {_		Assert.notNull(requiredAnnotationType, "'requiredAnnotationType' must not be null")__		this.requiredAnnotationType = requiredAnnotationType__	};set,the,required,annotation,type,to,be,used,on,bean,property,setter,methods,p,the,default,required,annotation,type,is,the,spring,provided,link,required,annotation,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,property,value,is,required;public,void,set,required,annotation,type,class,extends,annotation,required,annotation,type,assert,not,null,required,annotation,type,required,annotation,type,must,not,be,null,this,required,annotation,type,required,annotation,type
RequiredAnnotationBeanPostProcessor -> public void setRequiredAnnotationType(Class<? extends Annotation> requiredAnnotationType);1500495740;Set the 'required' annotation type, to be used on bean property_setter methods._<p>The default required annotation type is the Spring-provided_{@link Required} annotation._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a property value_is required.;public void setRequiredAnnotationType(Class<? extends Annotation> requiredAnnotationType) {_		Assert.notNull(requiredAnnotationType, "'requiredAnnotationType' must not be null")__		this.requiredAnnotationType = requiredAnnotationType__	};set,the,required,annotation,type,to,be,used,on,bean,property,setter,methods,p,the,default,required,annotation,type,is,the,spring,provided,link,required,annotation,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,property,value,is,required;public,void,set,required,annotation,type,class,extends,annotation,required,annotation,type,assert,not,null,required,annotation,type,required,annotation,type,must,not,be,null,this,required,annotation,type,required,annotation,type
RequiredAnnotationBeanPostProcessor -> public void setRequiredAnnotationType(Class<? extends Annotation> requiredAnnotationType);1524327638;Set the 'required' annotation type, to be used on bean property_setter methods._<p>The default required annotation type is the Spring-provided_{@link Required} annotation._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a property value_is required.;public void setRequiredAnnotationType(Class<? extends Annotation> requiredAnnotationType) {_		Assert.notNull(requiredAnnotationType, "'requiredAnnotationType' must not be null")__		this.requiredAnnotationType = requiredAnnotationType__	};set,the,required,annotation,type,to,be,used,on,bean,property,setter,methods,p,the,default,required,annotation,type,is,the,spring,provided,link,required,annotation,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,property,value,is,required;public,void,set,required,annotation,type,class,extends,annotation,required,annotation,type,assert,not,null,required,annotation,type,required,annotation,type,must,not,be,null,this,required,annotation,type,required,annotation,type
RequiredAnnotationBeanPostProcessor -> public void setRequiredAnnotationType(Class<? extends Annotation> requiredAnnotationType);1530174524;Set the 'required' annotation type, to be used on bean property_setter methods._<p>The default required annotation type is the Spring-provided_{@link Required} annotation._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a property value_is required.;public void setRequiredAnnotationType(Class<? extends Annotation> requiredAnnotationType) {_		Assert.notNull(requiredAnnotationType, "'requiredAnnotationType' must not be null")__		this.requiredAnnotationType = requiredAnnotationType__	};set,the,required,annotation,type,to,be,used,on,bean,property,setter,methods,p,the,default,required,annotation,type,is,the,spring,provided,link,required,annotation,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,property,value,is,required;public,void,set,required,annotation,type,class,extends,annotation,required,annotation,type,assert,not,null,required,annotation,type,required,annotation,type,must,not,be,null,this,required,annotation,type,required,annotation,type
RequiredAnnotationBeanPostProcessor -> public void setRequiredAnnotationType(Class<? extends Annotation> requiredAnnotationType);1530188116;Set the 'required' annotation type, to be used on bean property_setter methods._<p>The default required annotation type is the Spring-provided_{@link Required} annotation._<p>This setter property exists so that developers can provide their own_(non-Spring-specific) annotation type to indicate that a property value_is required.;public void setRequiredAnnotationType(Class<? extends Annotation> requiredAnnotationType) {_		Assert.notNull(requiredAnnotationType, "'requiredAnnotationType' must not be null")__		this.requiredAnnotationType = requiredAnnotationType__	};set,the,required,annotation,type,to,be,used,on,bean,property,setter,methods,p,the,default,required,annotation,type,is,the,spring,provided,link,required,annotation,p,this,setter,property,exists,so,that,developers,can,provide,their,own,non,spring,specific,annotation,type,to,indicate,that,a,property,value,is,required;public,void,set,required,annotation,type,class,extends,annotation,required,annotation,type,assert,not,null,required,annotation,type,required,annotation,type,must,not,be,null,this,required,annotation,type,required,annotation,type
RequiredAnnotationBeanPostProcessor -> protected boolean isRequiredProperty(PropertyDescriptor propertyDescriptor);1328020251;Is the supplied property required to have a value (that is, to be dependency-injected)?_<p>This implementation looks for the existence of a_{@link #setRequiredAnnotationType "required" annotation}_on the supplied {@link PropertyDescriptor property}._@param propertyDescriptor the target PropertyDescriptor (never <code>null</code>)_@return <code>true</code> if the supplied property has been marked as being required__<code>false</code> if not, or if the supplied property does not have a setter method;protected boolean isRequiredProperty(PropertyDescriptor propertyDescriptor) {_		Method setter = propertyDescriptor.getWriteMethod()__		return (setter != null && AnnotationUtils.getAnnotation(setter, getRequiredAnnotationType()) != null)__	};is,the,supplied,property,required,to,have,a,value,that,is,to,be,dependency,injected,p,this,implementation,looks,for,the,existence,of,a,link,set,required,annotation,type,required,annotation,on,the,supplied,link,property,descriptor,property,param,property,descriptor,the,target,property,descriptor,never,code,null,code,return,code,true,code,if,the,supplied,property,has,been,marked,as,being,required,code,false,code,if,not,or,if,the,supplied,property,does,not,have,a,setter,method;protected,boolean,is,required,property,property,descriptor,property,descriptor,method,setter,property,descriptor,get,write,method,return,setter,null,annotation,utils,get,annotation,setter,get,required,annotation,type,null
RequiredAnnotationBeanPostProcessor -> protected boolean isRequiredProperty(PropertyDescriptor propertyDescriptor);1355352386;Is the supplied property required to have a value (that is, to be dependency-injected)?_<p>This implementation looks for the existence of a_{@link #setRequiredAnnotationType "required" annotation}_on the supplied {@link PropertyDescriptor property}._@param propertyDescriptor the target PropertyDescriptor (never <code>null</code>)_@return <code>true</code> if the supplied property has been marked as being required__<code>false</code> if not, or if the supplied property does not have a setter method;protected boolean isRequiredProperty(PropertyDescriptor propertyDescriptor) {_		Method setter = propertyDescriptor.getWriteMethod()__		return (setter != null && AnnotationUtils.getAnnotation(setter, getRequiredAnnotationType()) != null)__	};is,the,supplied,property,required,to,have,a,value,that,is,to,be,dependency,injected,p,this,implementation,looks,for,the,existence,of,a,link,set,required,annotation,type,required,annotation,on,the,supplied,link,property,descriptor,property,param,property,descriptor,the,target,property,descriptor,never,code,null,code,return,code,true,code,if,the,supplied,property,has,been,marked,as,being,required,code,false,code,if,not,or,if,the,supplied,property,does,not,have,a,setter,method;protected,boolean,is,required,property,property,descriptor,property,descriptor,method,setter,property,descriptor,get,write,method,return,setter,null,annotation,utils,get,annotation,setter,get,required,annotation,type,null
RequiredAnnotationBeanPostProcessor -> protected boolean isRequiredProperty(PropertyDescriptor propertyDescriptor);1356735495;Is the supplied property required to have a value (that is, to be dependency-injected)?_<p>This implementation looks for the existence of a_{@link #setRequiredAnnotationType "required" annotation}_on the supplied {@link PropertyDescriptor property}._@param propertyDescriptor the target PropertyDescriptor (never {@code null})_@return {@code true} if the supplied property has been marked as being required__{@code false} if not, or if the supplied property does not have a setter method;protected boolean isRequiredProperty(PropertyDescriptor propertyDescriptor) {_		Method setter = propertyDescriptor.getWriteMethod()__		return (setter != null && AnnotationUtils.getAnnotation(setter, getRequiredAnnotationType()) != null)__	};is,the,supplied,property,required,to,have,a,value,that,is,to,be,dependency,injected,p,this,implementation,looks,for,the,existence,of,a,link,set,required,annotation,type,required,annotation,on,the,supplied,link,property,descriptor,property,param,property,descriptor,the,target,property,descriptor,never,code,null,return,code,true,if,the,supplied,property,has,been,marked,as,being,required,code,false,if,not,or,if,the,supplied,property,does,not,have,a,setter,method;protected,boolean,is,required,property,property,descriptor,property,descriptor,method,setter,property,descriptor,get,write,method,return,setter,null,annotation,utils,get,annotation,setter,get,required,annotation,type,null
RequiredAnnotationBeanPostProcessor -> protected boolean isRequiredProperty(PropertyDescriptor propertyDescriptor);1357119239;Is the supplied property required to have a value (that is, to be dependency-injected)?_<p>This implementation looks for the existence of a_{@link #setRequiredAnnotationType "required" annotation}_on the supplied {@link PropertyDescriptor property}._@param propertyDescriptor the target PropertyDescriptor (never {@code null})_@return {@code true} if the supplied property has been marked as being required__{@code false} if not, or if the supplied property does not have a setter method;protected boolean isRequiredProperty(PropertyDescriptor propertyDescriptor) {_		Method setter = propertyDescriptor.getWriteMethod()__		return (setter != null && AnnotationUtils.getAnnotation(setter, getRequiredAnnotationType()) != null)__	};is,the,supplied,property,required,to,have,a,value,that,is,to,be,dependency,injected,p,this,implementation,looks,for,the,existence,of,a,link,set,required,annotation,type,required,annotation,on,the,supplied,link,property,descriptor,property,param,property,descriptor,the,target,property,descriptor,never,code,null,return,code,true,if,the,supplied,property,has,been,marked,as,being,required,code,false,if,not,or,if,the,supplied,property,does,not,have,a,setter,method;protected,boolean,is,required,property,property,descriptor,property,descriptor,method,setter,property,descriptor,get,write,method,return,setter,null,annotation,utils,get,annotation,setter,get,required,annotation,type,null
RequiredAnnotationBeanPostProcessor -> protected boolean isRequiredProperty(PropertyDescriptor propertyDescriptor);1362408075;Is the supplied property required to have a value (that is, to be dependency-injected)?_<p>This implementation looks for the existence of a_{@link #setRequiredAnnotationType "required" annotation}_on the supplied {@link PropertyDescriptor property}._@param propertyDescriptor the target PropertyDescriptor (never {@code null})_@return {@code true} if the supplied property has been marked as being required__{@code false} if not, or if the supplied property does not have a setter method;protected boolean isRequiredProperty(PropertyDescriptor propertyDescriptor) {_		Method setter = propertyDescriptor.getWriteMethod()__		return (setter != null && AnnotationUtils.getAnnotation(setter, getRequiredAnnotationType()) != null)__	};is,the,supplied,property,required,to,have,a,value,that,is,to,be,dependency,injected,p,this,implementation,looks,for,the,existence,of,a,link,set,required,annotation,type,required,annotation,on,the,supplied,link,property,descriptor,property,param,property,descriptor,the,target,property,descriptor,never,code,null,return,code,true,if,the,supplied,property,has,been,marked,as,being,required,code,false,if,not,or,if,the,supplied,property,does,not,have,a,setter,method;protected,boolean,is,required,property,property,descriptor,property,descriptor,method,setter,property,descriptor,get,write,method,return,setter,null,annotation,utils,get,annotation,setter,get,required,annotation,type,null
RequiredAnnotationBeanPostProcessor -> protected boolean isRequiredProperty(PropertyDescriptor propertyDescriptor);1364505266;Is the supplied property required to have a value (that is, to be dependency-injected)?_<p>This implementation looks for the existence of a_{@link #setRequiredAnnotationType "required" annotation}_on the supplied {@link PropertyDescriptor property}._@param propertyDescriptor the target PropertyDescriptor (never {@code null})_@return {@code true} if the supplied property has been marked as being required__{@code false} if not, or if the supplied property does not have a setter method;protected boolean isRequiredProperty(PropertyDescriptor propertyDescriptor) {_		Method setter = propertyDescriptor.getWriteMethod()__		return (setter != null && AnnotationUtils.getAnnotation(setter, getRequiredAnnotationType()) != null)__	};is,the,supplied,property,required,to,have,a,value,that,is,to,be,dependency,injected,p,this,implementation,looks,for,the,existence,of,a,link,set,required,annotation,type,required,annotation,on,the,supplied,link,property,descriptor,property,param,property,descriptor,the,target,property,descriptor,never,code,null,return,code,true,if,the,supplied,property,has,been,marked,as,being,required,code,false,if,not,or,if,the,supplied,property,does,not,have,a,setter,method;protected,boolean,is,required,property,property,descriptor,property,descriptor,method,setter,property,descriptor,get,write,method,return,setter,null,annotation,utils,get,annotation,setter,get,required,annotation,type,null
RequiredAnnotationBeanPostProcessor -> protected boolean isRequiredProperty(PropertyDescriptor propertyDescriptor);1368482696;Is the supplied property required to have a value (that is, to be dependency-injected)?_<p>This implementation looks for the existence of a_{@link #setRequiredAnnotationType "required" annotation}_on the supplied {@link PropertyDescriptor property}._@param propertyDescriptor the target PropertyDescriptor (never {@code null})_@return {@code true} if the supplied property has been marked as being required__{@code false} if not, or if the supplied property does not have a setter method;protected boolean isRequiredProperty(PropertyDescriptor propertyDescriptor) {_		Method setter = propertyDescriptor.getWriteMethod()__		return (setter != null && AnnotationUtils.getAnnotation(setter, getRequiredAnnotationType()) != null)__	};is,the,supplied,property,required,to,have,a,value,that,is,to,be,dependency,injected,p,this,implementation,looks,for,the,existence,of,a,link,set,required,annotation,type,required,annotation,on,the,supplied,link,property,descriptor,property,param,property,descriptor,the,target,property,descriptor,never,code,null,return,code,true,if,the,supplied,property,has,been,marked,as,being,required,code,false,if,not,or,if,the,supplied,property,does,not,have,a,setter,method;protected,boolean,is,required,property,property,descriptor,property,descriptor,method,setter,property,descriptor,get,write,method,return,setter,null,annotation,utils,get,annotation,setter,get,required,annotation,type,null
RequiredAnnotationBeanPostProcessor -> protected boolean isRequiredProperty(PropertyDescriptor propertyDescriptor);1386774676;Is the supplied property required to have a value (that is, to be dependency-injected)?_<p>This implementation looks for the existence of a_{@link #setRequiredAnnotationType "required" annotation}_on the supplied {@link PropertyDescriptor property}._@param propertyDescriptor the target PropertyDescriptor (never {@code null})_@return {@code true} if the supplied property has been marked as being required__{@code false} if not, or if the supplied property does not have a setter method;protected boolean isRequiredProperty(PropertyDescriptor propertyDescriptor) {_		Method setter = propertyDescriptor.getWriteMethod()__		return (setter != null && AnnotationUtils.getAnnotation(setter, getRequiredAnnotationType()) != null)__	};is,the,supplied,property,required,to,have,a,value,that,is,to,be,dependency,injected,p,this,implementation,looks,for,the,existence,of,a,link,set,required,annotation,type,required,annotation,on,the,supplied,link,property,descriptor,property,param,property,descriptor,the,target,property,descriptor,never,code,null,return,code,true,if,the,supplied,property,has,been,marked,as,being,required,code,false,if,not,or,if,the,supplied,property,does,not,have,a,setter,method;protected,boolean,is,required,property,property,descriptor,property,descriptor,method,setter,property,descriptor,get,write,method,return,setter,null,annotation,utils,get,annotation,setter,get,required,annotation,type,null
RequiredAnnotationBeanPostProcessor -> protected boolean isRequiredProperty(PropertyDescriptor propertyDescriptor);1467730834;Is the supplied property required to have a value (that is, to be dependency-injected)?_<p>This implementation looks for the existence of a_{@link #setRequiredAnnotationType "required" annotation}_on the supplied {@link PropertyDescriptor property}._@param propertyDescriptor the target PropertyDescriptor (never {@code null})_@return {@code true} if the supplied property has been marked as being required__{@code false} if not, or if the supplied property does not have a setter method;protected boolean isRequiredProperty(PropertyDescriptor propertyDescriptor) {_		Method setter = propertyDescriptor.getWriteMethod()__		return (setter != null && AnnotationUtils.getAnnotation(setter, getRequiredAnnotationType()) != null)__	};is,the,supplied,property,required,to,have,a,value,that,is,to,be,dependency,injected,p,this,implementation,looks,for,the,existence,of,a,link,set,required,annotation,type,required,annotation,on,the,supplied,link,property,descriptor,property,param,property,descriptor,the,target,property,descriptor,never,code,null,return,code,true,if,the,supplied,property,has,been,marked,as,being,required,code,false,if,not,or,if,the,supplied,property,does,not,have,a,setter,method;protected,boolean,is,required,property,property,descriptor,property,descriptor,method,setter,property,descriptor,get,write,method,return,setter,null,annotation,utils,get,annotation,setter,get,required,annotation,type,null
RequiredAnnotationBeanPostProcessor -> protected boolean isRequiredProperty(PropertyDescriptor propertyDescriptor);1469561191;Is the supplied property required to have a value (that is, to be dependency-injected)?_<p>This implementation looks for the existence of a_{@link #setRequiredAnnotationType "required" annotation}_on the supplied {@link PropertyDescriptor property}._@param propertyDescriptor the target PropertyDescriptor (never {@code null})_@return {@code true} if the supplied property has been marked as being required__{@code false} if not, or if the supplied property does not have a setter method;protected boolean isRequiredProperty(PropertyDescriptor propertyDescriptor) {_		Method setter = propertyDescriptor.getWriteMethod()__		return (setter != null && AnnotationUtils.getAnnotation(setter, getRequiredAnnotationType()) != null)__	};is,the,supplied,property,required,to,have,a,value,that,is,to,be,dependency,injected,p,this,implementation,looks,for,the,existence,of,a,link,set,required,annotation,type,required,annotation,on,the,supplied,link,property,descriptor,property,param,property,descriptor,the,target,property,descriptor,never,code,null,return,code,true,if,the,supplied,property,has,been,marked,as,being,required,code,false,if,not,or,if,the,supplied,property,does,not,have,a,setter,method;protected,boolean,is,required,property,property,descriptor,property,descriptor,method,setter,property,descriptor,get,write,method,return,setter,null,annotation,utils,get,annotation,setter,get,required,annotation,type,null
RequiredAnnotationBeanPostProcessor -> protected boolean isRequiredProperty(PropertyDescriptor propertyDescriptor);1478538021;Is the supplied property required to have a value (that is, to be dependency-injected)?_<p>This implementation looks for the existence of a_{@link #setRequiredAnnotationType "required" annotation}_on the supplied {@link PropertyDescriptor property}._@param propertyDescriptor the target PropertyDescriptor (never {@code null})_@return {@code true} if the supplied property has been marked as being required__{@code false} if not, or if the supplied property does not have a setter method;protected boolean isRequiredProperty(PropertyDescriptor propertyDescriptor) {_		Method setter = propertyDescriptor.getWriteMethod()__		return (setter != null && AnnotationUtils.getAnnotation(setter, getRequiredAnnotationType()) != null)__	};is,the,supplied,property,required,to,have,a,value,that,is,to,be,dependency,injected,p,this,implementation,looks,for,the,existence,of,a,link,set,required,annotation,type,required,annotation,on,the,supplied,link,property,descriptor,property,param,property,descriptor,the,target,property,descriptor,never,code,null,return,code,true,if,the,supplied,property,has,been,marked,as,being,required,code,false,if,not,or,if,the,supplied,property,does,not,have,a,setter,method;protected,boolean,is,required,property,property,descriptor,property,descriptor,method,setter,property,descriptor,get,write,method,return,setter,null,annotation,utils,get,annotation,setter,get,required,annotation,type,null
RequiredAnnotationBeanPostProcessor -> protected boolean isRequiredProperty(PropertyDescriptor propertyDescriptor);1496837955;Is the supplied property required to have a value (that is, to be dependency-injected)?_<p>This implementation looks for the existence of a_{@link #setRequiredAnnotationType "required" annotation}_on the supplied {@link PropertyDescriptor property}._@param propertyDescriptor the target PropertyDescriptor (never {@code null})_@return {@code true} if the supplied property has been marked as being required__{@code false} if not, or if the supplied property does not have a setter method;protected boolean isRequiredProperty(PropertyDescriptor propertyDescriptor) {_		Method setter = propertyDescriptor.getWriteMethod()__		return (setter != null && AnnotationUtils.getAnnotation(setter, getRequiredAnnotationType()) != null)__	};is,the,supplied,property,required,to,have,a,value,that,is,to,be,dependency,injected,p,this,implementation,looks,for,the,existence,of,a,link,set,required,annotation,type,required,annotation,on,the,supplied,link,property,descriptor,property,param,property,descriptor,the,target,property,descriptor,never,code,null,return,code,true,if,the,supplied,property,has,been,marked,as,being,required,code,false,if,not,or,if,the,supplied,property,does,not,have,a,setter,method;protected,boolean,is,required,property,property,descriptor,property,descriptor,method,setter,property,descriptor,get,write,method,return,setter,null,annotation,utils,get,annotation,setter,get,required,annotation,type,null
RequiredAnnotationBeanPostProcessor -> protected boolean isRequiredProperty(PropertyDescriptor propertyDescriptor);1500495740;Is the supplied property required to have a value (that is, to be dependency-injected)?_<p>This implementation looks for the existence of a_{@link #setRequiredAnnotationType "required" annotation}_on the supplied {@link PropertyDescriptor property}._@param propertyDescriptor the target PropertyDescriptor (never {@code null})_@return {@code true} if the supplied property has been marked as being required__{@code false} if not, or if the supplied property does not have a setter method;protected boolean isRequiredProperty(PropertyDescriptor propertyDescriptor) {_		Method setter = propertyDescriptor.getWriteMethod()__		return (setter != null && AnnotationUtils.getAnnotation(setter, getRequiredAnnotationType()) != null)__	};is,the,supplied,property,required,to,have,a,value,that,is,to,be,dependency,injected,p,this,implementation,looks,for,the,existence,of,a,link,set,required,annotation,type,required,annotation,on,the,supplied,link,property,descriptor,property,param,property,descriptor,the,target,property,descriptor,never,code,null,return,code,true,if,the,supplied,property,has,been,marked,as,being,required,code,false,if,not,or,if,the,supplied,property,does,not,have,a,setter,method;protected,boolean,is,required,property,property,descriptor,property,descriptor,method,setter,property,descriptor,get,write,method,return,setter,null,annotation,utils,get,annotation,setter,get,required,annotation,type,null
RequiredAnnotationBeanPostProcessor -> protected boolean isRequiredProperty(PropertyDescriptor propertyDescriptor);1524327638;Is the supplied property required to have a value (that is, to be dependency-injected)?_<p>This implementation looks for the existence of a_{@link #setRequiredAnnotationType "required" annotation}_on the supplied {@link PropertyDescriptor property}._@param propertyDescriptor the target PropertyDescriptor (never {@code null})_@return {@code true} if the supplied property has been marked as being required__{@code false} if not, or if the supplied property does not have a setter method;protected boolean isRequiredProperty(PropertyDescriptor propertyDescriptor) {_		Method setter = propertyDescriptor.getWriteMethod()__		return (setter != null && AnnotationUtils.getAnnotation(setter, getRequiredAnnotationType()) != null)__	};is,the,supplied,property,required,to,have,a,value,that,is,to,be,dependency,injected,p,this,implementation,looks,for,the,existence,of,a,link,set,required,annotation,type,required,annotation,on,the,supplied,link,property,descriptor,property,param,property,descriptor,the,target,property,descriptor,never,code,null,return,code,true,if,the,supplied,property,has,been,marked,as,being,required,code,false,if,not,or,if,the,supplied,property,does,not,have,a,setter,method;protected,boolean,is,required,property,property,descriptor,property,descriptor,method,setter,property,descriptor,get,write,method,return,setter,null,annotation,utils,get,annotation,setter,get,required,annotation,type,null
RequiredAnnotationBeanPostProcessor -> protected boolean isRequiredProperty(PropertyDescriptor propertyDescriptor);1530174524;Is the supplied property required to have a value (that is, to be dependency-injected)?_<p>This implementation looks for the existence of a_{@link #setRequiredAnnotationType "required" annotation}_on the supplied {@link PropertyDescriptor property}._@param propertyDescriptor the target PropertyDescriptor (never {@code null})_@return {@code true} if the supplied property has been marked as being required__{@code false} if not, or if the supplied property does not have a setter method;protected boolean isRequiredProperty(PropertyDescriptor propertyDescriptor) {_		Method setter = propertyDescriptor.getWriteMethod()__		return (setter != null && AnnotationUtils.getAnnotation(setter, getRequiredAnnotationType()) != null)__	};is,the,supplied,property,required,to,have,a,value,that,is,to,be,dependency,injected,p,this,implementation,looks,for,the,existence,of,a,link,set,required,annotation,type,required,annotation,on,the,supplied,link,property,descriptor,property,param,property,descriptor,the,target,property,descriptor,never,code,null,return,code,true,if,the,supplied,property,has,been,marked,as,being,required,code,false,if,not,or,if,the,supplied,property,does,not,have,a,setter,method;protected,boolean,is,required,property,property,descriptor,property,descriptor,method,setter,property,descriptor,get,write,method,return,setter,null,annotation,utils,get,annotation,setter,get,required,annotation,type,null
RequiredAnnotationBeanPostProcessor -> protected boolean isRequiredProperty(PropertyDescriptor propertyDescriptor);1530188116;Is the supplied property required to have a value (that is, to be dependency-injected)?_<p>This implementation looks for the existence of a_{@link #setRequiredAnnotationType "required" annotation}_on the supplied {@link PropertyDescriptor property}._@param propertyDescriptor the target PropertyDescriptor (never {@code null})_@return {@code true} if the supplied property has been marked as being required__{@code false} if not, or if the supplied property does not have a setter method;protected boolean isRequiredProperty(PropertyDescriptor propertyDescriptor) {_		Method setter = propertyDescriptor.getWriteMethod()__		return (setter != null && AnnotationUtils.getAnnotation(setter, getRequiredAnnotationType()) != null)__	};is,the,supplied,property,required,to,have,a,value,that,is,to,be,dependency,injected,p,this,implementation,looks,for,the,existence,of,a,link,set,required,annotation,type,required,annotation,on,the,supplied,link,property,descriptor,property,param,property,descriptor,the,target,property,descriptor,never,code,null,return,code,true,if,the,supplied,property,has,been,marked,as,being,required,code,false,if,not,or,if,the,supplied,property,does,not,have,a,setter,method;protected,boolean,is,required,property,property,descriptor,property,descriptor,method,setter,property,descriptor,get,write,method,return,setter,null,annotation,utils,get,annotation,setter,get,required,annotation,type,null
