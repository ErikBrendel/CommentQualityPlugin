commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Specify the desired service type (typically the service's public API).  */ ;/**  * Specify the desired service type (typically the service's public API).  */ public void setServiceType(@Nullable Class<?> serviceType) {     this.serviceType = serviceType. }
true;public;0;4;/**  * Return the desired service type.  */ ;/**  * Return the desired service type.  */ @Nullable public Class<?> getServiceType() {     return this.serviceType. }
false;public;1;4;;@Override public void setBeanClassLoader(@Nullable ClassLoader beanClassLoader) {     this.beanClassLoader = beanClassLoader. }
true;protected;0;5;/**  * Delegates to {@link #getObjectToExpose(java.util.ServiceLoader)}.  * @return the object to expose  */ ;/**  * Delegates to {@link #getObjectToExpose(java.util.ServiceLoader)}.  * @return the object to expose  */ @Override protected Object createInstance() {     Assert.notNull(getServiceType(), "Property 'serviceType' is required").     return getObjectToExpose(ServiceLoader.load(getServiceType(), this.beanClassLoader)). }
true;protected,abstract;1;1;/**  * Determine the actual object to expose for the given ServiceLoader.  * <p>Left to concrete subclasses.  * @param serviceLoader the ServiceLoader for the configured service class  * @return the object to expose  */ ;/**  * Determine the actual object to expose for the given ServiceLoader.  * <p>Left to concrete subclasses.  * @param serviceLoader the ServiceLoader for the configured service class  * @return the object to expose  */ protected abstract Object getObjectToExpose(ServiceLoader<?> serviceLoader).
