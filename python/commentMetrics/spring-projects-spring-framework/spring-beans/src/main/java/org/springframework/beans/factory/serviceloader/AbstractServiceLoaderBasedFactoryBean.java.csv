# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractServiceLoaderBasedFactoryBean -> protected abstract Object getObjectToExpose(ServiceLoader<?> serviceLoader)_;1385412762;Determine the actual object to expose for the given ServiceLoader._<p>Left to concrete subclasses._@param serviceLoader the ServiceLoader for the configured service class_@return the object to expose;protected abstract Object getObjectToExpose(ServiceLoader<?> serviceLoader)_;determine,the,actual,object,to,expose,for,the,given,service,loader,p,left,to,concrete,subclasses,param,service,loader,the,service,loader,for,the,configured,service,class,return,the,object,to,expose;protected,abstract,object,get,object,to,expose,service,loader,service,loader
AbstractServiceLoaderBasedFactoryBean -> protected abstract Object getObjectToExpose(ServiceLoader<?> serviceLoader)_;1496242568;Determine the actual object to expose for the given ServiceLoader._<p>Left to concrete subclasses._@param serviceLoader the ServiceLoader for the configured service class_@return the object to expose;protected abstract Object getObjectToExpose(ServiceLoader<?> serviceLoader)_;determine,the,actual,object,to,expose,for,the,given,service,loader,p,left,to,concrete,subclasses,param,service,loader,the,service,loader,for,the,configured,service,class,return,the,object,to,expose;protected,abstract,object,get,object,to,expose,service,loader,service,loader
AbstractServiceLoaderBasedFactoryBean -> protected abstract Object getObjectToExpose(ServiceLoader<?> serviceLoader)_;1498780456;Determine the actual object to expose for the given ServiceLoader._<p>Left to concrete subclasses._@param serviceLoader the ServiceLoader for the configured service class_@return the object to expose;protected abstract Object getObjectToExpose(ServiceLoader<?> serviceLoader)_;determine,the,actual,object,to,expose,for,the,given,service,loader,p,left,to,concrete,subclasses,param,service,loader,the,service,loader,for,the,configured,service,class,return,the,object,to,expose;protected,abstract,object,get,object,to,expose,service,loader,service,loader
AbstractServiceLoaderBasedFactoryBean -> protected abstract Object getObjectToExpose(ServiceLoader<?> serviceLoader)_;1500448076;Determine the actual object to expose for the given ServiceLoader._<p>Left to concrete subclasses._@param serviceLoader the ServiceLoader for the configured service class_@return the object to expose;protected abstract Object getObjectToExpose(ServiceLoader<?> serviceLoader)_;determine,the,actual,object,to,expose,for,the,given,service,loader,p,left,to,concrete,subclasses,param,service,loader,the,service,loader,for,the,configured,service,class,return,the,object,to,expose;protected,abstract,object,get,object,to,expose,service,loader,service,loader
AbstractServiceLoaderBasedFactoryBean -> public Class<?> getServiceType();1385412762;Return the desired service type.;public Class<?> getServiceType() {_		return this.serviceType__	};return,the,desired,service,type;public,class,get,service,type,return,this,service,type
AbstractServiceLoaderBasedFactoryBean -> public Class<?> getServiceType();1496242568;Return the desired service type.;public Class<?> getServiceType() {_		return this.serviceType__	};return,the,desired,service,type;public,class,get,service,type,return,this,service,type
AbstractServiceLoaderBasedFactoryBean -> public void setServiceType(Class<?> serviceType);1385412762;Specify the desired service type (typically the service's public API).;public void setServiceType(Class<?> serviceType) {_		this.serviceType = serviceType__	};specify,the,desired,service,type,typically,the,service,s,public,api;public,void,set,service,type,class,service,type,this,service,type,service,type
AbstractServiceLoaderBasedFactoryBean -> public void setServiceType(Class<?> serviceType);1496242568;Specify the desired service type (typically the service's public API).;public void setServiceType(Class<?> serviceType) {_		this.serviceType = serviceType__	};specify,the,desired,service,type,typically,the,service,s,public,api;public,void,set,service,type,class,service,type,this,service,type,service,type
AbstractServiceLoaderBasedFactoryBean -> public void setServiceType(Class<?> serviceType);1498780456;Specify the desired service type (typically the service's public API).;public void setServiceType(Class<?> serviceType) {_		this.serviceType = serviceType__	};specify,the,desired,service,type,typically,the,service,s,public,api;public,void,set,service,type,class,service,type,this,service,type,service,type
AbstractServiceLoaderBasedFactoryBean -> @Nullable 	public Class<?> getServiceType();1498780456;Return the desired service type.;@Nullable_	public Class<?> getServiceType() {_		return this.serviceType__	};return,the,desired,service,type;nullable,public,class,get,service,type,return,this,service,type
AbstractServiceLoaderBasedFactoryBean -> @Nullable 	public Class<?> getServiceType();1500448076;Return the desired service type.;@Nullable_	public Class<?> getServiceType() {_		return this.serviceType__	};return,the,desired,service,type;nullable,public,class,get,service,type,return,this,service,type
AbstractServiceLoaderBasedFactoryBean -> @Override 	protected Object createInstance();1328020251;Delegates to {@link #getObjectToExpose(java.util.ServiceLoader)}._@return the object to expose;@Override_	protected Object createInstance() {_		Assert.notNull(getServiceType(), "Property 'serviceType' is required")__		return getObjectToExpose(ServiceLoader.load(getServiceType(), this.beanClassLoader))__	};delegates,to,link,get,object,to,expose,java,util,service,loader,return,the,object,to,expose;override,protected,object,create,instance,assert,not,null,get,service,type,property,service,type,is,required,return,get,object,to,expose,service,loader,load,get,service,type,this,bean,class,loader
AbstractServiceLoaderBasedFactoryBean -> @Override 	protected Object createInstance();1385412762;Delegates to {@link #getObjectToExpose(java.util.ServiceLoader)}._@return the object to expose;@Override_	protected Object createInstance() {_		Assert.notNull(getServiceType(), "Property 'serviceType' is required")__		return getObjectToExpose(ServiceLoader.load(getServiceType(), this.beanClassLoader))__	};delegates,to,link,get,object,to,expose,java,util,service,loader,return,the,object,to,expose;override,protected,object,create,instance,assert,not,null,get,service,type,property,service,type,is,required,return,get,object,to,expose,service,loader,load,get,service,type,this,bean,class,loader
AbstractServiceLoaderBasedFactoryBean -> @Override 	protected Object createInstance();1496242568;Delegates to {@link #getObjectToExpose(java.util.ServiceLoader)}._@return the object to expose;@Override_	protected Object createInstance() {_		Assert.notNull(getServiceType(), "Property 'serviceType' is required")__		return getObjectToExpose(ServiceLoader.load(getServiceType(), this.beanClassLoader))__	};delegates,to,link,get,object,to,expose,java,util,service,loader,return,the,object,to,expose;override,protected,object,create,instance,assert,not,null,get,service,type,property,service,type,is,required,return,get,object,to,expose,service,loader,load,get,service,type,this,bean,class,loader
AbstractServiceLoaderBasedFactoryBean -> @Override 	protected Object createInstance();1498780456;Delegates to {@link #getObjectToExpose(java.util.ServiceLoader)}._@return the object to expose;@Override_	protected Object createInstance() {_		Assert.notNull(getServiceType(), "Property 'serviceType' is required")__		return getObjectToExpose(ServiceLoader.load(getServiceType(), this.beanClassLoader))__	};delegates,to,link,get,object,to,expose,java,util,service,loader,return,the,object,to,expose;override,protected,object,create,instance,assert,not,null,get,service,type,property,service,type,is,required,return,get,object,to,expose,service,loader,load,get,service,type,this,bean,class,loader
AbstractServiceLoaderBasedFactoryBean -> @Override 	protected Object createInstance();1500448076;Delegates to {@link #getObjectToExpose(java.util.ServiceLoader)}._@return the object to expose;@Override_	protected Object createInstance() {_		Assert.notNull(getServiceType(), "Property 'serviceType' is required")__		return getObjectToExpose(ServiceLoader.load(getServiceType(), this.beanClassLoader))__	};delegates,to,link,get,object,to,expose,java,util,service,loader,return,the,object,to,expose;override,protected,object,create,instance,assert,not,null,get,service,type,property,service,type,is,required,return,get,object,to,expose,service,loader,load,get,service,type,this,bean,class,loader
