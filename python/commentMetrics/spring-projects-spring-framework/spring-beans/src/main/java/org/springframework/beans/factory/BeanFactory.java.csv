# id;timestamp;commentText;codeText;commentWords;codeWords
BeanFactory -> boolean containsBean(String name)_;1328020251;Does this bean factory contain a bean definition or externally registered singleton_instance with the given name?_<p>If the given name is an alias, it will be translated back to the corresponding_canonical bean name._<p>If this factory is hierarchical, will ask any parent factory if the bean cannot_be found in this factory instance._<p>If a bean definition or singleton instance matching the given name is found,_this method will return {@code true} whether the named bean definition is concrete_or abstract, lazy or eager, in scope or not. Therefore, note that a {@code true}_return value from this method does not necessarily indicate that {@link #getBean}_will be able to obtain an instance for the same name._@param name the name of the bean to query_@return whether a bean with the given name is present;boolean containsBean(String name)_;does,this,bean,factory,contain,a,bean,definition,or,externally,registered,singleton,instance,with,the,given,name,p,if,the,given,name,is,an,alias,it,will,be,translated,back,to,the,corresponding,canonical,bean,name,p,if,this,factory,is,hierarchical,will,ask,any,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,p,if,a,bean,definition,or,singleton,instance,matching,the,given,name,is,found,this,method,will,return,code,true,whether,the,named,bean,definition,is,concrete,or,abstract,lazy,or,eager,in,scope,or,not,therefore,note,that,a,code,true,return,value,from,this,method,does,not,necessarily,indicate,that,link,get,bean,will,be,able,to,obtain,an,instance,for,the,same,name,param,name,the,name,of,the,bean,to,query,return,whether,a,bean,with,the,given,name,is,present;boolean,contains,bean,string,name
BeanFactory -> boolean containsBean(String name)_;1356735495;Does this bean factory contain a bean definition or externally registered singleton_instance with the given name?_<p>If the given name is an alias, it will be translated back to the corresponding_canonical bean name._<p>If this factory is hierarchical, will ask any parent factory if the bean cannot_be found in this factory instance._<p>If a bean definition or singleton instance matching the given name is found,_this method will return {@code true} whether the named bean definition is concrete_or abstract, lazy or eager, in scope or not. Therefore, note that a {@code true}_return value from this method does not necessarily indicate that {@link #getBean}_will be able to obtain an instance for the same name._@param name the name of the bean to query_@return whether a bean with the given name is present;boolean containsBean(String name)_;does,this,bean,factory,contain,a,bean,definition,or,externally,registered,singleton,instance,with,the,given,name,p,if,the,given,name,is,an,alias,it,will,be,translated,back,to,the,corresponding,canonical,bean,name,p,if,this,factory,is,hierarchical,will,ask,any,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,p,if,a,bean,definition,or,singleton,instance,matching,the,given,name,is,found,this,method,will,return,code,true,whether,the,named,bean,definition,is,concrete,or,abstract,lazy,or,eager,in,scope,or,not,therefore,note,that,a,code,true,return,value,from,this,method,does,not,necessarily,indicate,that,link,get,bean,will,be,able,to,obtain,an,instance,for,the,same,name,param,name,the,name,of,the,bean,to,query,return,whether,a,bean,with,the,given,name,is,present;boolean,contains,bean,string,name
BeanFactory -> boolean containsBean(String name)_;1362408075;Does this bean factory contain a bean definition or externally registered singleton_instance with the given name?_<p>If the given name is an alias, it will be translated back to the corresponding_canonical bean name._<p>If this factory is hierarchical, will ask any parent factory if the bean cannot_be found in this factory instance._<p>If a bean definition or singleton instance matching the given name is found,_this method will return {@code true} whether the named bean definition is concrete_or abstract, lazy or eager, in scope or not. Therefore, note that a {@code true}_return value from this method does not necessarily indicate that {@link #getBean}_will be able to obtain an instance for the same name._@param name the name of the bean to query_@return whether a bean with the given name is present;boolean containsBean(String name)_;does,this,bean,factory,contain,a,bean,definition,or,externally,registered,singleton,instance,with,the,given,name,p,if,the,given,name,is,an,alias,it,will,be,translated,back,to,the,corresponding,canonical,bean,name,p,if,this,factory,is,hierarchical,will,ask,any,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,p,if,a,bean,definition,or,singleton,instance,matching,the,given,name,is,found,this,method,will,return,code,true,whether,the,named,bean,definition,is,concrete,or,abstract,lazy,or,eager,in,scope,or,not,therefore,note,that,a,code,true,return,value,from,this,method,does,not,necessarily,indicate,that,link,get,bean,will,be,able,to,obtain,an,instance,for,the,same,name,param,name,the,name,of,the,bean,to,query,return,whether,a,bean,with,the,given,name,is,present;boolean,contains,bean,string,name
BeanFactory -> boolean containsBean(String name)_;1407874032;Does this bean factory contain a bean definition or externally registered singleton_instance with the given name?_<p>If the given name is an alias, it will be translated back to the corresponding_canonical bean name._<p>If this factory is hierarchical, will ask any parent factory if the bean cannot_be found in this factory instance._<p>If a bean definition or singleton instance matching the given name is found,_this method will return {@code true} whether the named bean definition is concrete_or abstract, lazy or eager, in scope or not. Therefore, note that a {@code true}_return value from this method does not necessarily indicate that {@link #getBean}_will be able to obtain an instance for the same name._@param name the name of the bean to query_@return whether a bean with the given name is present;boolean containsBean(String name)_;does,this,bean,factory,contain,a,bean,definition,or,externally,registered,singleton,instance,with,the,given,name,p,if,the,given,name,is,an,alias,it,will,be,translated,back,to,the,corresponding,canonical,bean,name,p,if,this,factory,is,hierarchical,will,ask,any,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,p,if,a,bean,definition,or,singleton,instance,matching,the,given,name,is,found,this,method,will,return,code,true,whether,the,named,bean,definition,is,concrete,or,abstract,lazy,or,eager,in,scope,or,not,therefore,note,that,a,code,true,return,value,from,this,method,does,not,necessarily,indicate,that,link,get,bean,will,be,able,to,obtain,an,instance,for,the,same,name,param,name,the,name,of,the,bean,to,query,return,whether,a,bean,with,the,given,name,is,present;boolean,contains,bean,string,name
BeanFactory -> boolean containsBean(String name)_;1408052945;Does this bean factory contain a bean definition or externally registered singleton_instance with the given name?_<p>If the given name is an alias, it will be translated back to the corresponding_canonical bean name._<p>If this factory is hierarchical, will ask any parent factory if the bean cannot_be found in this factory instance._<p>If a bean definition or singleton instance matching the given name is found,_this method will return {@code true} whether the named bean definition is concrete_or abstract, lazy or eager, in scope or not. Therefore, note that a {@code true}_return value from this method does not necessarily indicate that {@link #getBean}_will be able to obtain an instance for the same name._@param name the name of the bean to query_@return whether a bean with the given name is present;boolean containsBean(String name)_;does,this,bean,factory,contain,a,bean,definition,or,externally,registered,singleton,instance,with,the,given,name,p,if,the,given,name,is,an,alias,it,will,be,translated,back,to,the,corresponding,canonical,bean,name,p,if,this,factory,is,hierarchical,will,ask,any,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,p,if,a,bean,definition,or,singleton,instance,matching,the,given,name,is,found,this,method,will,return,code,true,whether,the,named,bean,definition,is,concrete,or,abstract,lazy,or,eager,in,scope,or,not,therefore,note,that,a,code,true,return,value,from,this,method,does,not,necessarily,indicate,that,link,get,bean,will,be,able,to,obtain,an,instance,for,the,same,name,param,name,the,name,of,the,bean,to,query,return,whether,a,bean,with,the,given,name,is,present;boolean,contains,bean,string,name
BeanFactory -> boolean containsBean(String name)_;1417457126;Does this bean factory contain a bean definition or externally registered singleton_instance with the given name?_<p>If the given name is an alias, it will be translated back to the corresponding_canonical bean name._<p>If this factory is hierarchical, will ask any parent factory if the bean cannot_be found in this factory instance._<p>If a bean definition or singleton instance matching the given name is found,_this method will return {@code true} whether the named bean definition is concrete_or abstract, lazy or eager, in scope or not. Therefore, note that a {@code true}_return value from this method does not necessarily indicate that {@link #getBean}_will be able to obtain an instance for the same name._@param name the name of the bean to query_@return whether a bean with the given name is present;boolean containsBean(String name)_;does,this,bean,factory,contain,a,bean,definition,or,externally,registered,singleton,instance,with,the,given,name,p,if,the,given,name,is,an,alias,it,will,be,translated,back,to,the,corresponding,canonical,bean,name,p,if,this,factory,is,hierarchical,will,ask,any,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,p,if,a,bean,definition,or,singleton,instance,matching,the,given,name,is,found,this,method,will,return,code,true,whether,the,named,bean,definition,is,concrete,or,abstract,lazy,or,eager,in,scope,or,not,therefore,note,that,a,code,true,return,value,from,this,method,does,not,necessarily,indicate,that,link,get,bean,will,be,able,to,obtain,an,instance,for,the,same,name,param,name,the,name,of,the,bean,to,query,return,whether,a,bean,with,the,given,name,is,present;boolean,contains,bean,string,name
BeanFactory -> boolean containsBean(String name)_;1426716313;Does this bean factory contain a bean definition or externally registered singleton_instance with the given name?_<p>If the given name is an alias, it will be translated back to the corresponding_canonical bean name._<p>If this factory is hierarchical, will ask any parent factory if the bean cannot_be found in this factory instance._<p>If a bean definition or singleton instance matching the given name is found,_this method will return {@code true} whether the named bean definition is concrete_or abstract, lazy or eager, in scope or not. Therefore, note that a {@code true}_return value from this method does not necessarily indicate that {@link #getBean}_will be able to obtain an instance for the same name._@param name the name of the bean to query_@return whether a bean with the given name is present;boolean containsBean(String name)_;does,this,bean,factory,contain,a,bean,definition,or,externally,registered,singleton,instance,with,the,given,name,p,if,the,given,name,is,an,alias,it,will,be,translated,back,to,the,corresponding,canonical,bean,name,p,if,this,factory,is,hierarchical,will,ask,any,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,p,if,a,bean,definition,or,singleton,instance,matching,the,given,name,is,found,this,method,will,return,code,true,whether,the,named,bean,definition,is,concrete,or,abstract,lazy,or,eager,in,scope,or,not,therefore,note,that,a,code,true,return,value,from,this,method,does,not,necessarily,indicate,that,link,get,bean,will,be,able,to,obtain,an,instance,for,the,same,name,param,name,the,name,of,the,bean,to,query,return,whether,a,bean,with,the,given,name,is,present;boolean,contains,bean,string,name
BeanFactory -> boolean containsBean(String name)_;1427144223;Does this bean factory contain a bean definition or externally registered singleton_instance with the given name?_<p>If the given name is an alias, it will be translated back to the corresponding_canonical bean name._<p>If this factory is hierarchical, will ask any parent factory if the bean cannot_be found in this factory instance._<p>If a bean definition or singleton instance matching the given name is found,_this method will return {@code true} whether the named bean definition is concrete_or abstract, lazy or eager, in scope or not. Therefore, note that a {@code true}_return value from this method does not necessarily indicate that {@link #getBean}_will be able to obtain an instance for the same name._@param name the name of the bean to query_@return whether a bean with the given name is present;boolean containsBean(String name)_;does,this,bean,factory,contain,a,bean,definition,or,externally,registered,singleton,instance,with,the,given,name,p,if,the,given,name,is,an,alias,it,will,be,translated,back,to,the,corresponding,canonical,bean,name,p,if,this,factory,is,hierarchical,will,ask,any,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,p,if,a,bean,definition,or,singleton,instance,matching,the,given,name,is,found,this,method,will,return,code,true,whether,the,named,bean,definition,is,concrete,or,abstract,lazy,or,eager,in,scope,or,not,therefore,note,that,a,code,true,return,value,from,this,method,does,not,necessarily,indicate,that,link,get,bean,will,be,able,to,obtain,an,instance,for,the,same,name,param,name,the,name,of,the,bean,to,query,return,whether,a,bean,with,the,given,name,is,present;boolean,contains,bean,string,name
BeanFactory -> boolean containsBean(String name)_;1442313010;Does this bean factory contain a bean definition or externally registered singleton_instance with the given name?_<p>If the given name is an alias, it will be translated back to the corresponding_canonical bean name._<p>If this factory is hierarchical, will ask any parent factory if the bean cannot_be found in this factory instance._<p>If a bean definition or singleton instance matching the given name is found,_this method will return {@code true} whether the named bean definition is concrete_or abstract, lazy or eager, in scope or not. Therefore, note that a {@code true}_return value from this method does not necessarily indicate that {@link #getBean}_will be able to obtain an instance for the same name._@param name the name of the bean to query_@return whether a bean with the given name is present;boolean containsBean(String name)_;does,this,bean,factory,contain,a,bean,definition,or,externally,registered,singleton,instance,with,the,given,name,p,if,the,given,name,is,an,alias,it,will,be,translated,back,to,the,corresponding,canonical,bean,name,p,if,this,factory,is,hierarchical,will,ask,any,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,p,if,a,bean,definition,or,singleton,instance,matching,the,given,name,is,found,this,method,will,return,code,true,whether,the,named,bean,definition,is,concrete,or,abstract,lazy,or,eager,in,scope,or,not,therefore,note,that,a,code,true,return,value,from,this,method,does,not,necessarily,indicate,that,link,get,bean,will,be,able,to,obtain,an,instance,for,the,same,name,param,name,the,name,of,the,bean,to,query,return,whether,a,bean,with,the,given,name,is,present;boolean,contains,bean,string,name
BeanFactory -> boolean containsBean(String name)_;1454004037;Does this bean factory contain a bean definition or externally registered singleton_instance with the given name?_<p>If the given name is an alias, it will be translated back to the corresponding_canonical bean name._<p>If this factory is hierarchical, will ask any parent factory if the bean cannot_be found in this factory instance._<p>If a bean definition or singleton instance matching the given name is found,_this method will return {@code true} whether the named bean definition is concrete_or abstract, lazy or eager, in scope or not. Therefore, note that a {@code true}_return value from this method does not necessarily indicate that {@link #getBean}_will be able to obtain an instance for the same name._@param name the name of the bean to query_@return whether a bean with the given name is present;boolean containsBean(String name)_;does,this,bean,factory,contain,a,bean,definition,or,externally,registered,singleton,instance,with,the,given,name,p,if,the,given,name,is,an,alias,it,will,be,translated,back,to,the,corresponding,canonical,bean,name,p,if,this,factory,is,hierarchical,will,ask,any,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,p,if,a,bean,definition,or,singleton,instance,matching,the,given,name,is,found,this,method,will,return,code,true,whether,the,named,bean,definition,is,concrete,or,abstract,lazy,or,eager,in,scope,or,not,therefore,note,that,a,code,true,return,value,from,this,method,does,not,necessarily,indicate,that,link,get,bean,will,be,able,to,obtain,an,instance,for,the,same,name,param,name,the,name,of,the,bean,to,query,return,whether,a,bean,with,the,given,name,is,present;boolean,contains,bean,string,name
BeanFactory -> boolean containsBean(String name)_;1470948126;Does this bean factory contain a bean definition or externally registered singleton_instance with the given name?_<p>If the given name is an alias, it will be translated back to the corresponding_canonical bean name._<p>If this factory is hierarchical, will ask any parent factory if the bean cannot_be found in this factory instance._<p>If a bean definition or singleton instance matching the given name is found,_this method will return {@code true} whether the named bean definition is concrete_or abstract, lazy or eager, in scope or not. Therefore, note that a {@code true}_return value from this method does not necessarily indicate that {@link #getBean}_will be able to obtain an instance for the same name._@param name the name of the bean to query_@return whether a bean with the given name is present;boolean containsBean(String name)_;does,this,bean,factory,contain,a,bean,definition,or,externally,registered,singleton,instance,with,the,given,name,p,if,the,given,name,is,an,alias,it,will,be,translated,back,to,the,corresponding,canonical,bean,name,p,if,this,factory,is,hierarchical,will,ask,any,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,p,if,a,bean,definition,or,singleton,instance,matching,the,given,name,is,found,this,method,will,return,code,true,whether,the,named,bean,definition,is,concrete,or,abstract,lazy,or,eager,in,scope,or,not,therefore,note,that,a,code,true,return,value,from,this,method,does,not,necessarily,indicate,that,link,get,bean,will,be,able,to,obtain,an,instance,for,the,same,name,param,name,the,name,of,the,bean,to,query,return,whether,a,bean,with,the,given,name,is,present;boolean,contains,bean,string,name
BeanFactory -> boolean containsBean(String name)_;1473796164;Does this bean factory contain a bean definition or externally registered singleton_instance with the given name?_<p>If the given name is an alias, it will be translated back to the corresponding_canonical bean name._<p>If this factory is hierarchical, will ask any parent factory if the bean cannot_be found in this factory instance._<p>If a bean definition or singleton instance matching the given name is found,_this method will return {@code true} whether the named bean definition is concrete_or abstract, lazy or eager, in scope or not. Therefore, note that a {@code true}_return value from this method does not necessarily indicate that {@link #getBean}_will be able to obtain an instance for the same name._@param name the name of the bean to query_@return whether a bean with the given name is present;boolean containsBean(String name)_;does,this,bean,factory,contain,a,bean,definition,or,externally,registered,singleton,instance,with,the,given,name,p,if,the,given,name,is,an,alias,it,will,be,translated,back,to,the,corresponding,canonical,bean,name,p,if,this,factory,is,hierarchical,will,ask,any,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,p,if,a,bean,definition,or,singleton,instance,matching,the,given,name,is,found,this,method,will,return,code,true,whether,the,named,bean,definition,is,concrete,or,abstract,lazy,or,eager,in,scope,or,not,therefore,note,that,a,code,true,return,value,from,this,method,does,not,necessarily,indicate,that,link,get,bean,will,be,able,to,obtain,an,instance,for,the,same,name,param,name,the,name,of,the,bean,to,query,return,whether,a,bean,with,the,given,name,is,present;boolean,contains,bean,string,name
BeanFactory -> boolean containsBean(String name)_;1477468204;Does this bean factory contain a bean definition or externally registered singleton_instance with the given name?_<p>If the given name is an alias, it will be translated back to the corresponding_canonical bean name._<p>If this factory is hierarchical, will ask any parent factory if the bean cannot_be found in this factory instance._<p>If a bean definition or singleton instance matching the given name is found,_this method will return {@code true} whether the named bean definition is concrete_or abstract, lazy or eager, in scope or not. Therefore, note that a {@code true}_return value from this method does not necessarily indicate that {@link #getBean}_will be able to obtain an instance for the same name._@param name the name of the bean to query_@return whether a bean with the given name is present;boolean containsBean(String name)_;does,this,bean,factory,contain,a,bean,definition,or,externally,registered,singleton,instance,with,the,given,name,p,if,the,given,name,is,an,alias,it,will,be,translated,back,to,the,corresponding,canonical,bean,name,p,if,this,factory,is,hierarchical,will,ask,any,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,p,if,a,bean,definition,or,singleton,instance,matching,the,given,name,is,found,this,method,will,return,code,true,whether,the,named,bean,definition,is,concrete,or,abstract,lazy,or,eager,in,scope,or,not,therefore,note,that,a,code,true,return,value,from,this,method,does,not,necessarily,indicate,that,link,get,bean,will,be,able,to,obtain,an,instance,for,the,same,name,param,name,the,name,of,the,bean,to,query,return,whether,a,bean,with,the,given,name,is,present;boolean,contains,bean,string,name
BeanFactory -> boolean containsBean(String name)_;1495868221;Does this bean factory contain a bean definition or externally registered singleton_instance with the given name?_<p>If the given name is an alias, it will be translated back to the corresponding_canonical bean name._<p>If this factory is hierarchical, will ask any parent factory if the bean cannot_be found in this factory instance._<p>If a bean definition or singleton instance matching the given name is found,_this method will return {@code true} whether the named bean definition is concrete_or abstract, lazy or eager, in scope or not. Therefore, note that a {@code true}_return value from this method does not necessarily indicate that {@link #getBean}_will be able to obtain an instance for the same name._@param name the name of the bean to query_@return whether a bean with the given name is present;boolean containsBean(String name)_;does,this,bean,factory,contain,a,bean,definition,or,externally,registered,singleton,instance,with,the,given,name,p,if,the,given,name,is,an,alias,it,will,be,translated,back,to,the,corresponding,canonical,bean,name,p,if,this,factory,is,hierarchical,will,ask,any,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,p,if,a,bean,definition,or,singleton,instance,matching,the,given,name,is,found,this,method,will,return,code,true,whether,the,named,bean,definition,is,concrete,or,abstract,lazy,or,eager,in,scope,or,not,therefore,note,that,a,code,true,return,value,from,this,method,does,not,necessarily,indicate,that,link,get,bean,will,be,able,to,obtain,an,instance,for,the,same,name,param,name,the,name,of,the,bean,to,query,return,whether,a,bean,with,the,given,name,is,present;boolean,contains,bean,string,name
BeanFactory -> boolean containsBean(String name)_;1496837955;Does this bean factory contain a bean definition or externally registered singleton_instance with the given name?_<p>If the given name is an alias, it will be translated back to the corresponding_canonical bean name._<p>If this factory is hierarchical, will ask any parent factory if the bean cannot_be found in this factory instance._<p>If a bean definition or singleton instance matching the given name is found,_this method will return {@code true} whether the named bean definition is concrete_or abstract, lazy or eager, in scope or not. Therefore, note that a {@code true}_return value from this method does not necessarily indicate that {@link #getBean}_will be able to obtain an instance for the same name._@param name the name of the bean to query_@return whether a bean with the given name is present;boolean containsBean(String name)_;does,this,bean,factory,contain,a,bean,definition,or,externally,registered,singleton,instance,with,the,given,name,p,if,the,given,name,is,an,alias,it,will,be,translated,back,to,the,corresponding,canonical,bean,name,p,if,this,factory,is,hierarchical,will,ask,any,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,p,if,a,bean,definition,or,singleton,instance,matching,the,given,name,is,found,this,method,will,return,code,true,whether,the,named,bean,definition,is,concrete,or,abstract,lazy,or,eager,in,scope,or,not,therefore,note,that,a,code,true,return,value,from,this,method,does,not,necessarily,indicate,that,link,get,bean,will,be,able,to,obtain,an,instance,for,the,same,name,param,name,the,name,of,the,bean,to,query,return,whether,a,bean,with,the,given,name,is,present;boolean,contains,bean,string,name
BeanFactory -> boolean containsBean(String name)_;1532385723;Does this bean factory contain a bean definition or externally registered singleton_instance with the given name?_<p>If the given name is an alias, it will be translated back to the corresponding_canonical bean name._<p>If this factory is hierarchical, will ask any parent factory if the bean cannot_be found in this factory instance._<p>If a bean definition or singleton instance matching the given name is found,_this method will return {@code true} whether the named bean definition is concrete_or abstract, lazy or eager, in scope or not. Therefore, note that a {@code true}_return value from this method does not necessarily indicate that {@link #getBean}_will be able to obtain an instance for the same name._@param name the name of the bean to query_@return whether a bean with the given name is present;boolean containsBean(String name)_;does,this,bean,factory,contain,a,bean,definition,or,externally,registered,singleton,instance,with,the,given,name,p,if,the,given,name,is,an,alias,it,will,be,translated,back,to,the,corresponding,canonical,bean,name,p,if,this,factory,is,hierarchical,will,ask,any,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,p,if,a,bean,definition,or,singleton,instance,matching,the,given,name,is,found,this,method,will,return,code,true,whether,the,named,bean,definition,is,concrete,or,abstract,lazy,or,eager,in,scope,or,not,therefore,note,that,a,code,true,return,value,from,this,method,does,not,necessarily,indicate,that,link,get,bean,will,be,able,to,obtain,an,instance,for,the,same,name,param,name,the,name,of,the,bean,to,query,return,whether,a,bean,with,the,given,name,is,present;boolean,contains,bean,string,name
BeanFactory -> boolean containsBean(String name)_;1536855799;Does this bean factory contain a bean definition or externally registered singleton_instance with the given name?_<p>If the given name is an alias, it will be translated back to the corresponding_canonical bean name._<p>If this factory is hierarchical, will ask any parent factory if the bean cannot_be found in this factory instance._<p>If a bean definition or singleton instance matching the given name is found,_this method will return {@code true} whether the named bean definition is concrete_or abstract, lazy or eager, in scope or not. Therefore, note that a {@code true}_return value from this method does not necessarily indicate that {@link #getBean}_will be able to obtain an instance for the same name._@param name the name of the bean to query_@return whether a bean with the given name is present;boolean containsBean(String name)_;does,this,bean,factory,contain,a,bean,definition,or,externally,registered,singleton,instance,with,the,given,name,p,if,the,given,name,is,an,alias,it,will,be,translated,back,to,the,corresponding,canonical,bean,name,p,if,this,factory,is,hierarchical,will,ask,any,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,p,if,a,bean,definition,or,singleton,instance,matching,the,given,name,is,found,this,method,will,return,code,true,whether,the,named,bean,definition,is,concrete,or,abstract,lazy,or,eager,in,scope,or,not,therefore,note,that,a,code,true,return,value,from,this,method,does,not,necessarily,indicate,that,link,get,bean,will,be,able,to,obtain,an,instance,for,the,same,name,param,name,the,name,of,the,bean,to,query,return,whether,a,bean,with,the,given,name,is,present;boolean,contains,bean,string,name
BeanFactory -> boolean containsBean(String name)_;1539119659;Does this bean factory contain a bean definition or externally registered singleton_instance with the given name?_<p>If the given name is an alias, it will be translated back to the corresponding_canonical bean name._<p>If this factory is hierarchical, will ask any parent factory if the bean cannot_be found in this factory instance._<p>If a bean definition or singleton instance matching the given name is found,_this method will return {@code true} whether the named bean definition is concrete_or abstract, lazy or eager, in scope or not. Therefore, note that a {@code true}_return value from this method does not necessarily indicate that {@link #getBean}_will be able to obtain an instance for the same name._@param name the name of the bean to query_@return whether a bean with the given name is present;boolean containsBean(String name)_;does,this,bean,factory,contain,a,bean,definition,or,externally,registered,singleton,instance,with,the,given,name,p,if,the,given,name,is,an,alias,it,will,be,translated,back,to,the,corresponding,canonical,bean,name,p,if,this,factory,is,hierarchical,will,ask,any,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,p,if,a,bean,definition,or,singleton,instance,matching,the,given,name,is,found,this,method,will,return,code,true,whether,the,named,bean,definition,is,concrete,or,abstract,lazy,or,eager,in,scope,or,not,therefore,note,that,a,code,true,return,value,from,this,method,does,not,necessarily,indicate,that,link,get,bean,will,be,able,to,obtain,an,instance,for,the,same,name,param,name,the,name,of,the,bean,to,query,return,whether,a,bean,with,the,given,name,is,present;boolean,contains,bean,string,name
BeanFactory -> boolean containsBean(String name)_;1549551674;Does this bean factory contain a bean definition or externally registered singleton_instance with the given name?_<p>If the given name is an alias, it will be translated back to the corresponding_canonical bean name._<p>If this factory is hierarchical, will ask any parent factory if the bean cannot_be found in this factory instance._<p>If a bean definition or singleton instance matching the given name is found,_this method will return {@code true} whether the named bean definition is concrete_or abstract, lazy or eager, in scope or not. Therefore, note that a {@code true}_return value from this method does not necessarily indicate that {@link #getBean}_will be able to obtain an instance for the same name._@param name the name of the bean to query_@return whether a bean with the given name is present;boolean containsBean(String name)_;does,this,bean,factory,contain,a,bean,definition,or,externally,registered,singleton,instance,with,the,given,name,p,if,the,given,name,is,an,alias,it,will,be,translated,back,to,the,corresponding,canonical,bean,name,p,if,this,factory,is,hierarchical,will,ask,any,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,p,if,a,bean,definition,or,singleton,instance,matching,the,given,name,is,found,this,method,will,return,code,true,whether,the,named,bean,definition,is,concrete,or,abstract,lazy,or,eager,in,scope,or,not,therefore,note,that,a,code,true,return,value,from,this,method,does,not,necessarily,indicate,that,link,get,bean,will,be,able,to,obtain,an,instance,for,the,same,name,param,name,the,name,of,the,bean,to,query,return,whether,a,bean,with,the,given,name,is,present;boolean,contains,bean,string,name
BeanFactory -> <T> T getBean(String name, @Nullable Class<T> requiredType) throws BeansException_;1495868221;Return an instance, which may be shared or independent, of the specified bean._<p>Behaves the same as {@link #getBean(String)}, but provides a measure of type_safety by throwing a BeanNotOfRequiredTypeException if the bean is not of the_required type. This means that ClassCastException can't be thrown on casting_the result correctly, as can happen with {@link #getBean(String)}._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to retrieve_@param requiredType type the bean must match. Can be an interface or superclass_of the actual class, or {@code null} for any match. For example, if the value_is {@code Object.class}, this method will succeed whatever the class of the_returned instance._@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanNotOfRequiredTypeException if the bean is not of the required type_@throws BeansException if the bean could not be created;<T> T getBean(String name, @Nullable Class<T> requiredType) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,behaves,the,same,as,link,get,bean,string,but,provides,a,measure,of,type,safety,by,throwing,a,bean,not,of,required,type,exception,if,the,bean,is,not,of,the,required,type,this,means,that,class,cast,exception,can,t,be,thrown,on,casting,the,result,correctly,as,can,happen,with,link,get,bean,string,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,retrieve,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,of,the,actual,class,or,code,null,for,any,match,for,example,if,the,value,is,code,object,class,this,method,will,succeed,whatever,the,class,of,the,returned,instance,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,not,of,required,type,exception,if,the,bean,is,not,of,the,required,type,throws,beans,exception,if,the,bean,could,not,be,created;t,t,get,bean,string,name,nullable,class,t,required,type,throws,beans,exception
BeanFactory -> <T> T getBean(String name, @Nullable Class<T> requiredType) throws BeansException_;1496837955;Return an instance, which may be shared or independent, of the specified bean._<p>Behaves the same as {@link #getBean(String)}, but provides a measure of type_safety by throwing a BeanNotOfRequiredTypeException if the bean is not of the_required type. This means that ClassCastException can't be thrown on casting_the result correctly, as can happen with {@link #getBean(String)}._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to retrieve_@param requiredType type the bean must match. Can be an interface or superclass_of the actual class, or {@code null} for any match. For example, if the value_is {@code Object.class}, this method will succeed whatever the class of the_returned instance._@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanNotOfRequiredTypeException if the bean is not of the required type_@throws BeansException if the bean could not be created;<T> T getBean(String name, @Nullable Class<T> requiredType) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,behaves,the,same,as,link,get,bean,string,but,provides,a,measure,of,type,safety,by,throwing,a,bean,not,of,required,type,exception,if,the,bean,is,not,of,the,required,type,this,means,that,class,cast,exception,can,t,be,thrown,on,casting,the,result,correctly,as,can,happen,with,link,get,bean,string,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,retrieve,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,of,the,actual,class,or,code,null,for,any,match,for,example,if,the,value,is,code,object,class,this,method,will,succeed,whatever,the,class,of,the,returned,instance,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,not,of,required,type,exception,if,the,bean,is,not,of,the,required,type,throws,beans,exception,if,the,bean,could,not,be,created;t,t,get,bean,string,name,nullable,class,t,required,type,throws,beans,exception
BeanFactory -> <T> T getBean(Class<T> requiredType) throws BeansException_;1328020251;Return the bean instance that uniquely matches the given object type, if any._@param requiredType type the bean must match_ can be an interface or superclass._{@code null} is disallowed._<p>This method goes into {@link ListableBeanFactory} by-type lookup territory_but may also be translated into a conventional by-name lookup based on the name_of the given type. For more extensive retrieval operations across sets of beans,_use {@link ListableBeanFactory} and/or {@link BeanFactoryUtils}._@return an instance of the single bean matching the required type_@throws NoSuchBeanDefinitionException if there is not exactly one matching bean found_@since 3.0_@see ListableBeanFactory;<T> T getBean(Class<T> requiredType) throws BeansException_;return,the,bean,instance,that,uniquely,matches,the,given,object,type,if,any,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,code,null,is,disallowed,p,this,method,goes,into,link,listable,bean,factory,by,type,lookup,territory,but,may,also,be,translated,into,a,conventional,by,name,lookup,based,on,the,name,of,the,given,type,for,more,extensive,retrieval,operations,across,sets,of,beans,use,link,listable,bean,factory,and,or,link,bean,factory,utils,return,an,instance,of,the,single,bean,matching,the,required,type,throws,no,such,bean,definition,exception,if,there,is,not,exactly,one,matching,bean,found,since,3,0,see,listable,bean,factory;t,t,get,bean,class,t,required,type,throws,beans,exception
BeanFactory -> <T> T getBean(Class<T> requiredType) throws BeansException_;1356735495;Return the bean instance that uniquely matches the given object type, if any._@param requiredType type the bean must match_ can be an interface or superclass._{@code null} is disallowed._<p>This method goes into {@link ListableBeanFactory} by-type lookup territory_but may also be translated into a conventional by-name lookup based on the name_of the given type. For more extensive retrieval operations across sets of beans,_use {@link ListableBeanFactory} and/or {@link BeanFactoryUtils}._@return an instance of the single bean matching the required type_@throws NoSuchBeanDefinitionException if there is not exactly one matching bean found_@since 3.0_@see ListableBeanFactory;<T> T getBean(Class<T> requiredType) throws BeansException_;return,the,bean,instance,that,uniquely,matches,the,given,object,type,if,any,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,code,null,is,disallowed,p,this,method,goes,into,link,listable,bean,factory,by,type,lookup,territory,but,may,also,be,translated,into,a,conventional,by,name,lookup,based,on,the,name,of,the,given,type,for,more,extensive,retrieval,operations,across,sets,of,beans,use,link,listable,bean,factory,and,or,link,bean,factory,utils,return,an,instance,of,the,single,bean,matching,the,required,type,throws,no,such,bean,definition,exception,if,there,is,not,exactly,one,matching,bean,found,since,3,0,see,listable,bean,factory;t,t,get,bean,class,t,required,type,throws,beans,exception
BeanFactory -> <T> T getBean(Class<T> requiredType) throws BeansException_;1362408075;Return the bean instance that uniquely matches the given object type, if any._@param requiredType type the bean must match_ can be an interface or superclass._{@code null} is disallowed._<p>This method goes into {@link ListableBeanFactory} by-type lookup territory_but may also be translated into a conventional by-name lookup based on the name_of the given type. For more extensive retrieval operations across sets of beans,_use {@link ListableBeanFactory} and/or {@link BeanFactoryUtils}._@return an instance of the single bean matching the required type_@throws NoSuchBeanDefinitionException if no bean of the given type was found_@throws NoUniqueBeanDefinitionException if more than one bean of the given type was found_@since 3.0_@see ListableBeanFactory;<T> T getBean(Class<T> requiredType) throws BeansException_;return,the,bean,instance,that,uniquely,matches,the,given,object,type,if,any,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,code,null,is,disallowed,p,this,method,goes,into,link,listable,bean,factory,by,type,lookup,territory,but,may,also,be,translated,into,a,conventional,by,name,lookup,based,on,the,name,of,the,given,type,for,more,extensive,retrieval,operations,across,sets,of,beans,use,link,listable,bean,factory,and,or,link,bean,factory,utils,return,an,instance,of,the,single,bean,matching,the,required,type,throws,no,such,bean,definition,exception,if,no,bean,of,the,given,type,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,bean,of,the,given,type,was,found,since,3,0,see,listable,bean,factory;t,t,get,bean,class,t,required,type,throws,beans,exception
BeanFactory -> <T> T getBean(Class<T> requiredType) throws BeansException_;1407874032;Return the bean instance that uniquely matches the given object type, if any._@param requiredType type the bean must match_ can be an interface or superclass._{@code null} is disallowed._<p>This method goes into {@link ListableBeanFactory} by-type lookup territory_but may also be translated into a conventional by-name lookup based on the name_of the given type. For more extensive retrieval operations across sets of beans,_use {@link ListableBeanFactory} and/or {@link BeanFactoryUtils}._@return an instance of the single bean matching the required type_@throws NoSuchBeanDefinitionException if no bean of the given type was found_@throws NoUniqueBeanDefinitionException if more than one bean of the given type was found_@since 3.0_@see ListableBeanFactory;<T> T getBean(Class<T> requiredType) throws BeansException_;return,the,bean,instance,that,uniquely,matches,the,given,object,type,if,any,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,code,null,is,disallowed,p,this,method,goes,into,link,listable,bean,factory,by,type,lookup,territory,but,may,also,be,translated,into,a,conventional,by,name,lookup,based,on,the,name,of,the,given,type,for,more,extensive,retrieval,operations,across,sets,of,beans,use,link,listable,bean,factory,and,or,link,bean,factory,utils,return,an,instance,of,the,single,bean,matching,the,required,type,throws,no,such,bean,definition,exception,if,no,bean,of,the,given,type,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,bean,of,the,given,type,was,found,since,3,0,see,listable,bean,factory;t,t,get,bean,class,t,required,type,throws,beans,exception
BeanFactory -> <T> T getBean(Class<T> requiredType) throws BeansException_;1408052945;Return the bean instance that uniquely matches the given object type, if any._@param requiredType type the bean must match_ can be an interface or superclass._{@code null} is disallowed._<p>This method goes into {@link ListableBeanFactory} by-type lookup territory_but may also be translated into a conventional by-name lookup based on the name_of the given type. For more extensive retrieval operations across sets of beans,_use {@link ListableBeanFactory} and/or {@link BeanFactoryUtils}._@return an instance of the single bean matching the required type_@throws NoSuchBeanDefinitionException if no bean of the given type was found_@throws NoUniqueBeanDefinitionException if more than one bean of the given type was found_@since 3.0_@see ListableBeanFactory;<T> T getBean(Class<T> requiredType) throws BeansException_;return,the,bean,instance,that,uniquely,matches,the,given,object,type,if,any,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,code,null,is,disallowed,p,this,method,goes,into,link,listable,bean,factory,by,type,lookup,territory,but,may,also,be,translated,into,a,conventional,by,name,lookup,based,on,the,name,of,the,given,type,for,more,extensive,retrieval,operations,across,sets,of,beans,use,link,listable,bean,factory,and,or,link,bean,factory,utils,return,an,instance,of,the,single,bean,matching,the,required,type,throws,no,such,bean,definition,exception,if,no,bean,of,the,given,type,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,bean,of,the,given,type,was,found,since,3,0,see,listable,bean,factory;t,t,get,bean,class,t,required,type,throws,beans,exception
BeanFactory -> <T> T getBean(Class<T> requiredType) throws BeansException_;1417457126;Return the bean instance that uniquely matches the given object type, if any._@param requiredType type the bean must match_ can be an interface or superclass._{@code null} is disallowed._<p>This method goes into {@link ListableBeanFactory} by-type lookup territory_but may also be translated into a conventional by-name lookup based on the name_of the given type. For more extensive retrieval operations across sets of beans,_use {@link ListableBeanFactory} and/or {@link BeanFactoryUtils}._@return an instance of the single bean matching the required type_@throws NoSuchBeanDefinitionException if no bean of the given type was found_@throws NoUniqueBeanDefinitionException if more than one bean of the given type was found_@since 3.0_@see ListableBeanFactory;<T> T getBean(Class<T> requiredType) throws BeansException_;return,the,bean,instance,that,uniquely,matches,the,given,object,type,if,any,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,code,null,is,disallowed,p,this,method,goes,into,link,listable,bean,factory,by,type,lookup,territory,but,may,also,be,translated,into,a,conventional,by,name,lookup,based,on,the,name,of,the,given,type,for,more,extensive,retrieval,operations,across,sets,of,beans,use,link,listable,bean,factory,and,or,link,bean,factory,utils,return,an,instance,of,the,single,bean,matching,the,required,type,throws,no,such,bean,definition,exception,if,no,bean,of,the,given,type,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,bean,of,the,given,type,was,found,since,3,0,see,listable,bean,factory;t,t,get,bean,class,t,required,type,throws,beans,exception
BeanFactory -> <T> T getBean(Class<T> requiredType) throws BeansException_;1426716313;Return the bean instance that uniquely matches the given object type, if any._@param requiredType type the bean must match_ can be an interface or superclass._{@code null} is disallowed._<p>This method goes into {@link ListableBeanFactory} by-type lookup territory_but may also be translated into a conventional by-name lookup based on the name_of the given type. For more extensive retrieval operations across sets of beans,_use {@link ListableBeanFactory} and/or {@link BeanFactoryUtils}._@return an instance of the single bean matching the required type_@throws NoSuchBeanDefinitionException if no bean of the given type was found_@throws NoUniqueBeanDefinitionException if more than one bean of the given type was found_@since 3.0_@see ListableBeanFactory;<T> T getBean(Class<T> requiredType) throws BeansException_;return,the,bean,instance,that,uniquely,matches,the,given,object,type,if,any,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,code,null,is,disallowed,p,this,method,goes,into,link,listable,bean,factory,by,type,lookup,territory,but,may,also,be,translated,into,a,conventional,by,name,lookup,based,on,the,name,of,the,given,type,for,more,extensive,retrieval,operations,across,sets,of,beans,use,link,listable,bean,factory,and,or,link,bean,factory,utils,return,an,instance,of,the,single,bean,matching,the,required,type,throws,no,such,bean,definition,exception,if,no,bean,of,the,given,type,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,bean,of,the,given,type,was,found,since,3,0,see,listable,bean,factory;t,t,get,bean,class,t,required,type,throws,beans,exception
BeanFactory -> <T> T getBean(Class<T> requiredType) throws BeansException_;1427144223;Return the bean instance that uniquely matches the given object type, if any._@param requiredType type the bean must match_ can be an interface or superclass._{@code null} is disallowed._<p>This method goes into {@link ListableBeanFactory} by-type lookup territory_but may also be translated into a conventional by-name lookup based on the name_of the given type. For more extensive retrieval operations across sets of beans,_use {@link ListableBeanFactory} and/or {@link BeanFactoryUtils}._@return an instance of the single bean matching the required type_@throws NoSuchBeanDefinitionException if no bean of the given type was found_@throws NoUniqueBeanDefinitionException if more than one bean of the given type was found_@since 3.0_@see ListableBeanFactory;<T> T getBean(Class<T> requiredType) throws BeansException_;return,the,bean,instance,that,uniquely,matches,the,given,object,type,if,any,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,code,null,is,disallowed,p,this,method,goes,into,link,listable,bean,factory,by,type,lookup,territory,but,may,also,be,translated,into,a,conventional,by,name,lookup,based,on,the,name,of,the,given,type,for,more,extensive,retrieval,operations,across,sets,of,beans,use,link,listable,bean,factory,and,or,link,bean,factory,utils,return,an,instance,of,the,single,bean,matching,the,required,type,throws,no,such,bean,definition,exception,if,no,bean,of,the,given,type,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,bean,of,the,given,type,was,found,since,3,0,see,listable,bean,factory;t,t,get,bean,class,t,required,type,throws,beans,exception
BeanFactory -> <T> T getBean(Class<T> requiredType) throws BeansException_;1442313010;Return the bean instance that uniquely matches the given object type, if any._@param requiredType type the bean must match_ can be an interface or superclass._{@code null} is disallowed._<p>This method goes into {@link ListableBeanFactory} by-type lookup territory_but may also be translated into a conventional by-name lookup based on the name_of the given type. For more extensive retrieval operations across sets of beans,_use {@link ListableBeanFactory} and/or {@link BeanFactoryUtils}._@return an instance of the single bean matching the required type_@throws NoSuchBeanDefinitionException if no bean of the given type was found_@throws NoUniqueBeanDefinitionException if more than one bean of the given type was found_@throws BeansException if the bean could not be created_@since 3.0_@see ListableBeanFactory;<T> T getBean(Class<T> requiredType) throws BeansException_;return,the,bean,instance,that,uniquely,matches,the,given,object,type,if,any,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,code,null,is,disallowed,p,this,method,goes,into,link,listable,bean,factory,by,type,lookup,territory,but,may,also,be,translated,into,a,conventional,by,name,lookup,based,on,the,name,of,the,given,type,for,more,extensive,retrieval,operations,across,sets,of,beans,use,link,listable,bean,factory,and,or,link,bean,factory,utils,return,an,instance,of,the,single,bean,matching,the,required,type,throws,no,such,bean,definition,exception,if,no,bean,of,the,given,type,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,bean,of,the,given,type,was,found,throws,beans,exception,if,the,bean,could,not,be,created,since,3,0,see,listable,bean,factory;t,t,get,bean,class,t,required,type,throws,beans,exception
BeanFactory -> <T> T getBean(Class<T> requiredType) throws BeansException_;1454004037;Return the bean instance that uniquely matches the given object type, if any._@param requiredType type the bean must match_ can be an interface or superclass._{@code null} is disallowed._<p>This method goes into {@link ListableBeanFactory} by-type lookup territory_but may also be translated into a conventional by-name lookup based on the name_of the given type. For more extensive retrieval operations across sets of beans,_use {@link ListableBeanFactory} and/or {@link BeanFactoryUtils}._@return an instance of the single bean matching the required type_@throws NoSuchBeanDefinitionException if no bean of the given type was found_@throws NoUniqueBeanDefinitionException if more than one bean of the given type was found_@throws BeansException if the bean could not be created_@since 3.0_@see ListableBeanFactory;<T> T getBean(Class<T> requiredType) throws BeansException_;return,the,bean,instance,that,uniquely,matches,the,given,object,type,if,any,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,code,null,is,disallowed,p,this,method,goes,into,link,listable,bean,factory,by,type,lookup,territory,but,may,also,be,translated,into,a,conventional,by,name,lookup,based,on,the,name,of,the,given,type,for,more,extensive,retrieval,operations,across,sets,of,beans,use,link,listable,bean,factory,and,or,link,bean,factory,utils,return,an,instance,of,the,single,bean,matching,the,required,type,throws,no,such,bean,definition,exception,if,no,bean,of,the,given,type,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,bean,of,the,given,type,was,found,throws,beans,exception,if,the,bean,could,not,be,created,since,3,0,see,listable,bean,factory;t,t,get,bean,class,t,required,type,throws,beans,exception
BeanFactory -> <T> T getBean(Class<T> requiredType) throws BeansException_;1470948126;Return the bean instance that uniquely matches the given object type, if any._<p>This method goes into {@link ListableBeanFactory} by-type lookup territory_but may also be translated into a conventional by-name lookup based on the name_of the given type. For more extensive retrieval operations across sets of beans,_use {@link ListableBeanFactory} and/or {@link BeanFactoryUtils}._@param requiredType type the bean must match_ can be an interface or superclass._{@code null} is disallowed._@return an instance of the single bean matching the required type_@throws NoSuchBeanDefinitionException if no bean of the given type was found_@throws NoUniqueBeanDefinitionException if more than one bean of the given type was found_@throws BeansException if the bean could not be created_@since 3.0_@see ListableBeanFactory;<T> T getBean(Class<T> requiredType) throws BeansException_;return,the,bean,instance,that,uniquely,matches,the,given,object,type,if,any,p,this,method,goes,into,link,listable,bean,factory,by,type,lookup,territory,but,may,also,be,translated,into,a,conventional,by,name,lookup,based,on,the,name,of,the,given,type,for,more,extensive,retrieval,operations,across,sets,of,beans,use,link,listable,bean,factory,and,or,link,bean,factory,utils,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,code,null,is,disallowed,return,an,instance,of,the,single,bean,matching,the,required,type,throws,no,such,bean,definition,exception,if,no,bean,of,the,given,type,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,bean,of,the,given,type,was,found,throws,beans,exception,if,the,bean,could,not,be,created,since,3,0,see,listable,bean,factory;t,t,get,bean,class,t,required,type,throws,beans,exception
BeanFactory -> <T> T getBean(Class<T> requiredType) throws BeansException_;1473796164;Return the bean instance that uniquely matches the given object type, if any._<p>This method goes into {@link ListableBeanFactory} by-type lookup territory_but may also be translated into a conventional by-name lookup based on the name_of the given type. For more extensive retrieval operations across sets of beans,_use {@link ListableBeanFactory} and/or {@link BeanFactoryUtils}._@param requiredType type the bean must match_ can be an interface or superclass._{@code null} is disallowed._@return an instance of the single bean matching the required type_@throws NoSuchBeanDefinitionException if no bean of the given type was found_@throws NoUniqueBeanDefinitionException if more than one bean of the given type was found_@throws BeansException if the bean could not be created_@since 3.0_@see ListableBeanFactory;<T> T getBean(Class<T> requiredType) throws BeansException_;return,the,bean,instance,that,uniquely,matches,the,given,object,type,if,any,p,this,method,goes,into,link,listable,bean,factory,by,type,lookup,territory,but,may,also,be,translated,into,a,conventional,by,name,lookup,based,on,the,name,of,the,given,type,for,more,extensive,retrieval,operations,across,sets,of,beans,use,link,listable,bean,factory,and,or,link,bean,factory,utils,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,code,null,is,disallowed,return,an,instance,of,the,single,bean,matching,the,required,type,throws,no,such,bean,definition,exception,if,no,bean,of,the,given,type,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,bean,of,the,given,type,was,found,throws,beans,exception,if,the,bean,could,not,be,created,since,3,0,see,listable,bean,factory;t,t,get,bean,class,t,required,type,throws,beans,exception
BeanFactory -> <T> T getBean(Class<T> requiredType) throws BeansException_;1477468204;Return the bean instance that uniquely matches the given object type, if any._<p>This method goes into {@link ListableBeanFactory} by-type lookup territory_but may also be translated into a conventional by-name lookup based on the name_of the given type. For more extensive retrieval operations across sets of beans,_use {@link ListableBeanFactory} and/or {@link BeanFactoryUtils}._@param requiredType type the bean must match_ can be an interface or superclass._{@code null} is disallowed._@return an instance of the single bean matching the required type_@throws NoSuchBeanDefinitionException if no bean of the given type was found_@throws NoUniqueBeanDefinitionException if more than one bean of the given type was found_@throws BeansException if the bean could not be created_@since 3.0_@see ListableBeanFactory;<T> T getBean(Class<T> requiredType) throws BeansException_;return,the,bean,instance,that,uniquely,matches,the,given,object,type,if,any,p,this,method,goes,into,link,listable,bean,factory,by,type,lookup,territory,but,may,also,be,translated,into,a,conventional,by,name,lookup,based,on,the,name,of,the,given,type,for,more,extensive,retrieval,operations,across,sets,of,beans,use,link,listable,bean,factory,and,or,link,bean,factory,utils,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,code,null,is,disallowed,return,an,instance,of,the,single,bean,matching,the,required,type,throws,no,such,bean,definition,exception,if,no,bean,of,the,given,type,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,bean,of,the,given,type,was,found,throws,beans,exception,if,the,bean,could,not,be,created,since,3,0,see,listable,bean,factory;t,t,get,bean,class,t,required,type,throws,beans,exception
BeanFactory -> <T> T getBean(Class<T> requiredType) throws BeansException_;1495868221;Return the bean instance that uniquely matches the given object type, if any._<p>This method goes into {@link ListableBeanFactory} by-type lookup territory_but may also be translated into a conventional by-name lookup based on the name_of the given type. For more extensive retrieval operations across sets of beans,_use {@link ListableBeanFactory} and/or {@link BeanFactoryUtils}._@param requiredType type the bean must match_ can be an interface or superclass._{@code null} is disallowed._@return an instance of the single bean matching the required type_@throws NoSuchBeanDefinitionException if no bean of the given type was found_@throws NoUniqueBeanDefinitionException if more than one bean of the given type was found_@throws BeansException if the bean could not be created_@since 3.0_@see ListableBeanFactory;<T> T getBean(Class<T> requiredType) throws BeansException_;return,the,bean,instance,that,uniquely,matches,the,given,object,type,if,any,p,this,method,goes,into,link,listable,bean,factory,by,type,lookup,territory,but,may,also,be,translated,into,a,conventional,by,name,lookup,based,on,the,name,of,the,given,type,for,more,extensive,retrieval,operations,across,sets,of,beans,use,link,listable,bean,factory,and,or,link,bean,factory,utils,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,code,null,is,disallowed,return,an,instance,of,the,single,bean,matching,the,required,type,throws,no,such,bean,definition,exception,if,no,bean,of,the,given,type,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,bean,of,the,given,type,was,found,throws,beans,exception,if,the,bean,could,not,be,created,since,3,0,see,listable,bean,factory;t,t,get,bean,class,t,required,type,throws,beans,exception
BeanFactory -> <T> T getBean(Class<T> requiredType) throws BeansException_;1496837955;Return the bean instance that uniquely matches the given object type, if any._<p>This method goes into {@link ListableBeanFactory} by-type lookup territory_but may also be translated into a conventional by-name lookup based on the name_of the given type. For more extensive retrieval operations across sets of beans,_use {@link ListableBeanFactory} and/or {@link BeanFactoryUtils}._@param requiredType type the bean must match_ can be an interface or superclass._{@code null} is disallowed._@return an instance of the single bean matching the required type_@throws NoSuchBeanDefinitionException if no bean of the given type was found_@throws NoUniqueBeanDefinitionException if more than one bean of the given type was found_@throws BeansException if the bean could not be created_@since 3.0_@see ListableBeanFactory;<T> T getBean(Class<T> requiredType) throws BeansException_;return,the,bean,instance,that,uniquely,matches,the,given,object,type,if,any,p,this,method,goes,into,link,listable,bean,factory,by,type,lookup,territory,but,may,also,be,translated,into,a,conventional,by,name,lookup,based,on,the,name,of,the,given,type,for,more,extensive,retrieval,operations,across,sets,of,beans,use,link,listable,bean,factory,and,or,link,bean,factory,utils,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,code,null,is,disallowed,return,an,instance,of,the,single,bean,matching,the,required,type,throws,no,such,bean,definition,exception,if,no,bean,of,the,given,type,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,bean,of,the,given,type,was,found,throws,beans,exception,if,the,bean,could,not,be,created,since,3,0,see,listable,bean,factory;t,t,get,bean,class,t,required,type,throws,beans,exception
BeanFactory -> <T> T getBean(Class<T> requiredType) throws BeansException_;1532385723;Return the bean instance that uniquely matches the given object type, if any._<p>This method goes into {@link ListableBeanFactory} by-type lookup territory_but may also be translated into a conventional by-name lookup based on the name_of the given type. For more extensive retrieval operations across sets of beans,_use {@link ListableBeanFactory} and/or {@link BeanFactoryUtils}._@param requiredType type the bean must match_ can be an interface or superclass_@return an instance of the single bean matching the required type_@throws NoSuchBeanDefinitionException if no bean of the given type was found_@throws NoUniqueBeanDefinitionException if more than one bean of the given type was found_@throws BeansException if the bean could not be created_@since 3.0_@see ListableBeanFactory;<T> T getBean(Class<T> requiredType) throws BeansException_;return,the,bean,instance,that,uniquely,matches,the,given,object,type,if,any,p,this,method,goes,into,link,listable,bean,factory,by,type,lookup,territory,but,may,also,be,translated,into,a,conventional,by,name,lookup,based,on,the,name,of,the,given,type,for,more,extensive,retrieval,operations,across,sets,of,beans,use,link,listable,bean,factory,and,or,link,bean,factory,utils,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,return,an,instance,of,the,single,bean,matching,the,required,type,throws,no,such,bean,definition,exception,if,no,bean,of,the,given,type,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,bean,of,the,given,type,was,found,throws,beans,exception,if,the,bean,could,not,be,created,since,3,0,see,listable,bean,factory;t,t,get,bean,class,t,required,type,throws,beans,exception
BeanFactory -> <T> T getBean(Class<T> requiredType) throws BeansException_;1536855799;Return the bean instance that uniquely matches the given object type, if any._<p>This method goes into {@link ListableBeanFactory} by-type lookup territory_but may also be translated into a conventional by-name lookup based on the name_of the given type. For more extensive retrieval operations across sets of beans,_use {@link ListableBeanFactory} and/or {@link BeanFactoryUtils}._@param requiredType type the bean must match_ can be an interface or superclass_@return an instance of the single bean matching the required type_@throws NoSuchBeanDefinitionException if no bean of the given type was found_@throws NoUniqueBeanDefinitionException if more than one bean of the given type was found_@throws BeansException if the bean could not be created_@since 3.0_@see ListableBeanFactory;<T> T getBean(Class<T> requiredType) throws BeansException_;return,the,bean,instance,that,uniquely,matches,the,given,object,type,if,any,p,this,method,goes,into,link,listable,bean,factory,by,type,lookup,territory,but,may,also,be,translated,into,a,conventional,by,name,lookup,based,on,the,name,of,the,given,type,for,more,extensive,retrieval,operations,across,sets,of,beans,use,link,listable,bean,factory,and,or,link,bean,factory,utils,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,return,an,instance,of,the,single,bean,matching,the,required,type,throws,no,such,bean,definition,exception,if,no,bean,of,the,given,type,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,bean,of,the,given,type,was,found,throws,beans,exception,if,the,bean,could,not,be,created,since,3,0,see,listable,bean,factory;t,t,get,bean,class,t,required,type,throws,beans,exception
BeanFactory -> <T> T getBean(Class<T> requiredType) throws BeansException_;1539119659;Return the bean instance that uniquely matches the given object type, if any._<p>This method goes into {@link ListableBeanFactory} by-type lookup territory_but may also be translated into a conventional by-name lookup based on the name_of the given type. For more extensive retrieval operations across sets of beans,_use {@link ListableBeanFactory} and/or {@link BeanFactoryUtils}._@param requiredType type the bean must match_ can be an interface or superclass_@return an instance of the single bean matching the required type_@throws NoSuchBeanDefinitionException if no bean of the given type was found_@throws NoUniqueBeanDefinitionException if more than one bean of the given type was found_@throws BeansException if the bean could not be created_@since 3.0_@see ListableBeanFactory;<T> T getBean(Class<T> requiredType) throws BeansException_;return,the,bean,instance,that,uniquely,matches,the,given,object,type,if,any,p,this,method,goes,into,link,listable,bean,factory,by,type,lookup,territory,but,may,also,be,translated,into,a,conventional,by,name,lookup,based,on,the,name,of,the,given,type,for,more,extensive,retrieval,operations,across,sets,of,beans,use,link,listable,bean,factory,and,or,link,bean,factory,utils,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,return,an,instance,of,the,single,bean,matching,the,required,type,throws,no,such,bean,definition,exception,if,no,bean,of,the,given,type,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,bean,of,the,given,type,was,found,throws,beans,exception,if,the,bean,could,not,be,created,since,3,0,see,listable,bean,factory;t,t,get,bean,class,t,required,type,throws,beans,exception
BeanFactory -> <T> T getBean(Class<T> requiredType) throws BeansException_;1549551674;Return the bean instance that uniquely matches the given object type, if any._<p>This method goes into {@link ListableBeanFactory} by-type lookup territory_but may also be translated into a conventional by-name lookup based on the name_of the given type. For more extensive retrieval operations across sets of beans,_use {@link ListableBeanFactory} and/or {@link BeanFactoryUtils}._@param requiredType type the bean must match_ can be an interface or superclass_@return an instance of the single bean matching the required type_@throws NoSuchBeanDefinitionException if no bean of the given type was found_@throws NoUniqueBeanDefinitionException if more than one bean of the given type was found_@throws BeansException if the bean could not be created_@since 3.0_@see ListableBeanFactory;<T> T getBean(Class<T> requiredType) throws BeansException_;return,the,bean,instance,that,uniquely,matches,the,given,object,type,if,any,p,this,method,goes,into,link,listable,bean,factory,by,type,lookup,territory,but,may,also,be,translated,into,a,conventional,by,name,lookup,based,on,the,name,of,the,given,type,for,more,extensive,retrieval,operations,across,sets,of,beans,use,link,listable,bean,factory,and,or,link,bean,factory,utils,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,return,an,instance,of,the,single,bean,matching,the,required,type,throws,no,such,bean,definition,exception,if,no,bean,of,the,given,type,was,found,throws,no,unique,bean,definition,exception,if,more,than,one,bean,of,the,given,type,was,found,throws,beans,exception,if,the,bean,could,not,be,created,since,3,0,see,listable,bean,factory;t,t,get,bean,class,t,required,type,throws,beans,exception
BeanFactory -> <T> T getBean(Class<T> requiredType, Object... args) throws BeansException_;1407874032;Return an instance, which may be shared or independent, of the specified bean._<p>Allows for specifying explicit constructor arguments / factory method arguments,_overriding the specified default arguments (if any) in the bean definition._@param requiredType type the bean must match_ can be an interface or superclass._{@code null} is disallowed._<p>This method goes into {@link ListableBeanFactory} by-type lookup territory_but may also be translated into a conventional by-name lookup based on the name_of the given type. For more extensive retrieval operations across sets of beans,_use {@link ListableBeanFactory} and/or {@link BeanFactoryUtils}._@param args arguments to use if creating a prototype using explicit arguments to a_static factory method. It is invalid to use a non-null args value in any other case._@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanDefinitionStoreException if arguments have been given but_the affected bean isn't a prototype_@throws BeansException if the bean could not be created_@since 4.1;<T> T getBean(Class<T> requiredType, Object... args) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,allows,for,specifying,explicit,constructor,arguments,factory,method,arguments,overriding,the,specified,default,arguments,if,any,in,the,bean,definition,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,code,null,is,disallowed,p,this,method,goes,into,link,listable,bean,factory,by,type,lookup,territory,but,may,also,be,translated,into,a,conventional,by,name,lookup,based,on,the,name,of,the,given,type,for,more,extensive,retrieval,operations,across,sets,of,beans,use,link,listable,bean,factory,and,or,link,bean,factory,utils,param,args,arguments,to,use,if,creating,a,prototype,using,explicit,arguments,to,a,static,factory,method,it,is,invalid,to,use,a,non,null,args,value,in,any,other,case,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,definition,store,exception,if,arguments,have,been,given,but,the,affected,bean,isn,t,a,prototype,throws,beans,exception,if,the,bean,could,not,be,created,since,4,1;t,t,get,bean,class,t,required,type,object,args,throws,beans,exception
BeanFactory -> <T> T getBean(Class<T> requiredType, Object... args) throws BeansException_;1408052945;Return an instance, which may be shared or independent, of the specified bean._<p>Allows for specifying explicit constructor arguments / factory method arguments,_overriding the specified default arguments (if any) in the bean definition._@param requiredType type the bean must match_ can be an interface or superclass._{@code null} is disallowed._<p>This method goes into {@link ListableBeanFactory} by-type lookup territory_but may also be translated into a conventional by-name lookup based on the name_of the given type. For more extensive retrieval operations across sets of beans,_use {@link ListableBeanFactory} and/or {@link BeanFactoryUtils}._@param args arguments to use if creating a prototype using explicit arguments to a_static factory method. It is invalid to use a non-null args value in any other case._@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanDefinitionStoreException if arguments have been given but_the affected bean isn't a prototype_@throws BeansException if the bean could not be created_@since 4.1;<T> T getBean(Class<T> requiredType, Object... args) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,allows,for,specifying,explicit,constructor,arguments,factory,method,arguments,overriding,the,specified,default,arguments,if,any,in,the,bean,definition,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,code,null,is,disallowed,p,this,method,goes,into,link,listable,bean,factory,by,type,lookup,territory,but,may,also,be,translated,into,a,conventional,by,name,lookup,based,on,the,name,of,the,given,type,for,more,extensive,retrieval,operations,across,sets,of,beans,use,link,listable,bean,factory,and,or,link,bean,factory,utils,param,args,arguments,to,use,if,creating,a,prototype,using,explicit,arguments,to,a,static,factory,method,it,is,invalid,to,use,a,non,null,args,value,in,any,other,case,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,definition,store,exception,if,arguments,have,been,given,but,the,affected,bean,isn,t,a,prototype,throws,beans,exception,if,the,bean,could,not,be,created,since,4,1;t,t,get,bean,class,t,required,type,object,args,throws,beans,exception
BeanFactory -> <T> T getBean(Class<T> requiredType, Object... args) throws BeansException_;1417457126;Return an instance, which may be shared or independent, of the specified bean._<p>Allows for specifying explicit constructor arguments / factory method arguments,_overriding the specified default arguments (if any) in the bean definition._@param requiredType type the bean must match_ can be an interface or superclass._{@code null} is disallowed._<p>This method goes into {@link ListableBeanFactory} by-type lookup territory_but may also be translated into a conventional by-name lookup based on the name_of the given type. For more extensive retrieval operations across sets of beans,_use {@link ListableBeanFactory} and/or {@link BeanFactoryUtils}._@param args arguments to use when creating a bean instance using explicit arguments_(only applied when creating a new instance as opposed to retrieving an existing one)_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanDefinitionStoreException if arguments have been given but_the affected bean isn't a prototype_@throws BeansException if the bean could not be created_@since 4.1;<T> T getBean(Class<T> requiredType, Object... args) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,allows,for,specifying,explicit,constructor,arguments,factory,method,arguments,overriding,the,specified,default,arguments,if,any,in,the,bean,definition,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,code,null,is,disallowed,p,this,method,goes,into,link,listable,bean,factory,by,type,lookup,territory,but,may,also,be,translated,into,a,conventional,by,name,lookup,based,on,the,name,of,the,given,type,for,more,extensive,retrieval,operations,across,sets,of,beans,use,link,listable,bean,factory,and,or,link,bean,factory,utils,param,args,arguments,to,use,when,creating,a,bean,instance,using,explicit,arguments,only,applied,when,creating,a,new,instance,as,opposed,to,retrieving,an,existing,one,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,definition,store,exception,if,arguments,have,been,given,but,the,affected,bean,isn,t,a,prototype,throws,beans,exception,if,the,bean,could,not,be,created,since,4,1;t,t,get,bean,class,t,required,type,object,args,throws,beans,exception
BeanFactory -> <T> T getBean(Class<T> requiredType, Object... args) throws BeansException_;1426716313;Return an instance, which may be shared or independent, of the specified bean._<p>Allows for specifying explicit constructor arguments / factory method arguments,_overriding the specified default arguments (if any) in the bean definition._@param requiredType type the bean must match_ can be an interface or superclass._{@code null} is disallowed._<p>This method goes into {@link ListableBeanFactory} by-type lookup territory_but may also be translated into a conventional by-name lookup based on the name_of the given type. For more extensive retrieval operations across sets of beans,_use {@link ListableBeanFactory} and/or {@link BeanFactoryUtils}._@param args arguments to use when creating a bean instance using explicit arguments_(only applied when creating a new instance as opposed to retrieving an existing one)_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanDefinitionStoreException if arguments have been given but_the affected bean isn't a prototype_@throws BeansException if the bean could not be created_@since 4.1;<T> T getBean(Class<T> requiredType, Object... args) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,allows,for,specifying,explicit,constructor,arguments,factory,method,arguments,overriding,the,specified,default,arguments,if,any,in,the,bean,definition,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,code,null,is,disallowed,p,this,method,goes,into,link,listable,bean,factory,by,type,lookup,territory,but,may,also,be,translated,into,a,conventional,by,name,lookup,based,on,the,name,of,the,given,type,for,more,extensive,retrieval,operations,across,sets,of,beans,use,link,listable,bean,factory,and,or,link,bean,factory,utils,param,args,arguments,to,use,when,creating,a,bean,instance,using,explicit,arguments,only,applied,when,creating,a,new,instance,as,opposed,to,retrieving,an,existing,one,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,definition,store,exception,if,arguments,have,been,given,but,the,affected,bean,isn,t,a,prototype,throws,beans,exception,if,the,bean,could,not,be,created,since,4,1;t,t,get,bean,class,t,required,type,object,args,throws,beans,exception
BeanFactory -> <T> T getBean(Class<T> requiredType, Object... args) throws BeansException_;1427144223;Return an instance, which may be shared or independent, of the specified bean._<p>Allows for specifying explicit constructor arguments / factory method arguments,_overriding the specified default arguments (if any) in the bean definition._@param requiredType type the bean must match_ can be an interface or superclass._{@code null} is disallowed._<p>This method goes into {@link ListableBeanFactory} by-type lookup territory_but may also be translated into a conventional by-name lookup based on the name_of the given type. For more extensive retrieval operations across sets of beans,_use {@link ListableBeanFactory} and/or {@link BeanFactoryUtils}._@param args arguments to use when creating a bean instance using explicit arguments_(only applied when creating a new instance as opposed to retrieving an existing one)_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanDefinitionStoreException if arguments have been given but_the affected bean isn't a prototype_@throws BeansException if the bean could not be created_@since 4.1;<T> T getBean(Class<T> requiredType, Object... args) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,allows,for,specifying,explicit,constructor,arguments,factory,method,arguments,overriding,the,specified,default,arguments,if,any,in,the,bean,definition,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,code,null,is,disallowed,p,this,method,goes,into,link,listable,bean,factory,by,type,lookup,territory,but,may,also,be,translated,into,a,conventional,by,name,lookup,based,on,the,name,of,the,given,type,for,more,extensive,retrieval,operations,across,sets,of,beans,use,link,listable,bean,factory,and,or,link,bean,factory,utils,param,args,arguments,to,use,when,creating,a,bean,instance,using,explicit,arguments,only,applied,when,creating,a,new,instance,as,opposed,to,retrieving,an,existing,one,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,definition,store,exception,if,arguments,have,been,given,but,the,affected,bean,isn,t,a,prototype,throws,beans,exception,if,the,bean,could,not,be,created,since,4,1;t,t,get,bean,class,t,required,type,object,args,throws,beans,exception
BeanFactory -> <T> T getBean(Class<T> requiredType, Object... args) throws BeansException_;1442313010;Return an instance, which may be shared or independent, of the specified bean._<p>Allows for specifying explicit constructor arguments / factory method arguments,_overriding the specified default arguments (if any) in the bean definition._@param requiredType type the bean must match_ can be an interface or superclass._{@code null} is disallowed._<p>This method goes into {@link ListableBeanFactory} by-type lookup territory_but may also be translated into a conventional by-name lookup based on the name_of the given type. For more extensive retrieval operations across sets of beans,_use {@link ListableBeanFactory} and/or {@link BeanFactoryUtils}._@param args arguments to use when creating a bean instance using explicit arguments_(only applied when creating a new instance as opposed to retrieving an existing one)_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanDefinitionStoreException if arguments have been given but_the affected bean isn't a prototype_@throws BeansException if the bean could not be created_@since 4.1;<T> T getBean(Class<T> requiredType, Object... args) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,allows,for,specifying,explicit,constructor,arguments,factory,method,arguments,overriding,the,specified,default,arguments,if,any,in,the,bean,definition,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,code,null,is,disallowed,p,this,method,goes,into,link,listable,bean,factory,by,type,lookup,territory,but,may,also,be,translated,into,a,conventional,by,name,lookup,based,on,the,name,of,the,given,type,for,more,extensive,retrieval,operations,across,sets,of,beans,use,link,listable,bean,factory,and,or,link,bean,factory,utils,param,args,arguments,to,use,when,creating,a,bean,instance,using,explicit,arguments,only,applied,when,creating,a,new,instance,as,opposed,to,retrieving,an,existing,one,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,definition,store,exception,if,arguments,have,been,given,but,the,affected,bean,isn,t,a,prototype,throws,beans,exception,if,the,bean,could,not,be,created,since,4,1;t,t,get,bean,class,t,required,type,object,args,throws,beans,exception
BeanFactory -> <T> T getBean(Class<T> requiredType, Object... args) throws BeansException_;1454004037;Return an instance, which may be shared or independent, of the specified bean._<p>Allows for specifying explicit constructor arguments / factory method arguments,_overriding the specified default arguments (if any) in the bean definition._<p>This method goes into {@link ListableBeanFactory} by-type lookup territory_but may also be translated into a conventional by-name lookup based on the name_of the given type. For more extensive retrieval operations across sets of beans,_use {@link ListableBeanFactory} and/or {@link BeanFactoryUtils}._@param requiredType type the bean must match_ can be an interface or superclass._{@code null} is disallowed._@param args arguments to use when creating a bean instance using explicit arguments_(only applied when creating a new instance as opposed to retrieving an existing one)_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanDefinitionStoreException if arguments have been given but_the affected bean isn't a prototype_@throws BeansException if the bean could not be created_@since 4.1;<T> T getBean(Class<T> requiredType, Object... args) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,allows,for,specifying,explicit,constructor,arguments,factory,method,arguments,overriding,the,specified,default,arguments,if,any,in,the,bean,definition,p,this,method,goes,into,link,listable,bean,factory,by,type,lookup,territory,but,may,also,be,translated,into,a,conventional,by,name,lookup,based,on,the,name,of,the,given,type,for,more,extensive,retrieval,operations,across,sets,of,beans,use,link,listable,bean,factory,and,or,link,bean,factory,utils,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,code,null,is,disallowed,param,args,arguments,to,use,when,creating,a,bean,instance,using,explicit,arguments,only,applied,when,creating,a,new,instance,as,opposed,to,retrieving,an,existing,one,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,definition,store,exception,if,arguments,have,been,given,but,the,affected,bean,isn,t,a,prototype,throws,beans,exception,if,the,bean,could,not,be,created,since,4,1;t,t,get,bean,class,t,required,type,object,args,throws,beans,exception
BeanFactory -> <T> T getBean(Class<T> requiredType, Object... args) throws BeansException_;1470948126;Return an instance, which may be shared or independent, of the specified bean._<p>Allows for specifying explicit constructor arguments / factory method arguments,_overriding the specified default arguments (if any) in the bean definition._<p>This method goes into {@link ListableBeanFactory} by-type lookup territory_but may also be translated into a conventional by-name lookup based on the name_of the given type. For more extensive retrieval operations across sets of beans,_use {@link ListableBeanFactory} and/or {@link BeanFactoryUtils}._@param requiredType type the bean must match_ can be an interface or superclass._{@code null} is disallowed._@param args arguments to use when creating a bean instance using explicit arguments_(only applied when creating a new instance as opposed to retrieving an existing one)_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanDefinitionStoreException if arguments have been given but_the affected bean isn't a prototype_@throws BeansException if the bean could not be created_@since 4.1;<T> T getBean(Class<T> requiredType, Object... args) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,allows,for,specifying,explicit,constructor,arguments,factory,method,arguments,overriding,the,specified,default,arguments,if,any,in,the,bean,definition,p,this,method,goes,into,link,listable,bean,factory,by,type,lookup,territory,but,may,also,be,translated,into,a,conventional,by,name,lookup,based,on,the,name,of,the,given,type,for,more,extensive,retrieval,operations,across,sets,of,beans,use,link,listable,bean,factory,and,or,link,bean,factory,utils,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,code,null,is,disallowed,param,args,arguments,to,use,when,creating,a,bean,instance,using,explicit,arguments,only,applied,when,creating,a,new,instance,as,opposed,to,retrieving,an,existing,one,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,definition,store,exception,if,arguments,have,been,given,but,the,affected,bean,isn,t,a,prototype,throws,beans,exception,if,the,bean,could,not,be,created,since,4,1;t,t,get,bean,class,t,required,type,object,args,throws,beans,exception
BeanFactory -> <T> T getBean(Class<T> requiredType, Object... args) throws BeansException_;1473796164;Return an instance, which may be shared or independent, of the specified bean._<p>Allows for specifying explicit constructor arguments / factory method arguments,_overriding the specified default arguments (if any) in the bean definition._<p>This method goes into {@link ListableBeanFactory} by-type lookup territory_but may also be translated into a conventional by-name lookup based on the name_of the given type. For more extensive retrieval operations across sets of beans,_use {@link ListableBeanFactory} and/or {@link BeanFactoryUtils}._@param requiredType type the bean must match_ can be an interface or superclass._{@code null} is disallowed._@param args arguments to use when creating a bean instance using explicit arguments_(only applied when creating a new instance as opposed to retrieving an existing one)_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanDefinitionStoreException if arguments have been given but_the affected bean isn't a prototype_@throws BeansException if the bean could not be created_@since 4.1;<T> T getBean(Class<T> requiredType, Object... args) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,allows,for,specifying,explicit,constructor,arguments,factory,method,arguments,overriding,the,specified,default,arguments,if,any,in,the,bean,definition,p,this,method,goes,into,link,listable,bean,factory,by,type,lookup,territory,but,may,also,be,translated,into,a,conventional,by,name,lookup,based,on,the,name,of,the,given,type,for,more,extensive,retrieval,operations,across,sets,of,beans,use,link,listable,bean,factory,and,or,link,bean,factory,utils,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,code,null,is,disallowed,param,args,arguments,to,use,when,creating,a,bean,instance,using,explicit,arguments,only,applied,when,creating,a,new,instance,as,opposed,to,retrieving,an,existing,one,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,definition,store,exception,if,arguments,have,been,given,but,the,affected,bean,isn,t,a,prototype,throws,beans,exception,if,the,bean,could,not,be,created,since,4,1;t,t,get,bean,class,t,required,type,object,args,throws,beans,exception
BeanFactory -> <T> T getBean(Class<T> requiredType, Object... args) throws BeansException_;1477468204;Return an instance, which may be shared or independent, of the specified bean._<p>Allows for specifying explicit constructor arguments / factory method arguments,_overriding the specified default arguments (if any) in the bean definition._<p>This method goes into {@link ListableBeanFactory} by-type lookup territory_but may also be translated into a conventional by-name lookup based on the name_of the given type. For more extensive retrieval operations across sets of beans,_use {@link ListableBeanFactory} and/or {@link BeanFactoryUtils}._@param requiredType type the bean must match_ can be an interface or superclass._{@code null} is disallowed._@param args arguments to use when creating a bean instance using explicit arguments_(only applied when creating a new instance as opposed to retrieving an existing one)_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanDefinitionStoreException if arguments have been given but_the affected bean isn't a prototype_@throws BeansException if the bean could not be created_@since 4.1;<T> T getBean(Class<T> requiredType, Object... args) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,allows,for,specifying,explicit,constructor,arguments,factory,method,arguments,overriding,the,specified,default,arguments,if,any,in,the,bean,definition,p,this,method,goes,into,link,listable,bean,factory,by,type,lookup,territory,but,may,also,be,translated,into,a,conventional,by,name,lookup,based,on,the,name,of,the,given,type,for,more,extensive,retrieval,operations,across,sets,of,beans,use,link,listable,bean,factory,and,or,link,bean,factory,utils,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,code,null,is,disallowed,param,args,arguments,to,use,when,creating,a,bean,instance,using,explicit,arguments,only,applied,when,creating,a,new,instance,as,opposed,to,retrieving,an,existing,one,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,definition,store,exception,if,arguments,have,been,given,but,the,affected,bean,isn,t,a,prototype,throws,beans,exception,if,the,bean,could,not,be,created,since,4,1;t,t,get,bean,class,t,required,type,object,args,throws,beans,exception
BeanFactory -> <T> T getBean(Class<T> requiredType, Object... args) throws BeansException_;1495868221;Return an instance, which may be shared or independent, of the specified bean._<p>Allows for specifying explicit constructor arguments / factory method arguments,_overriding the specified default arguments (if any) in the bean definition._<p>This method goes into {@link ListableBeanFactory} by-type lookup territory_but may also be translated into a conventional by-name lookup based on the name_of the given type. For more extensive retrieval operations across sets of beans,_use {@link ListableBeanFactory} and/or {@link BeanFactoryUtils}._@param requiredType type the bean must match_ can be an interface or superclass._{@code null} is disallowed._@param args arguments to use when creating a bean instance using explicit arguments_(only applied when creating a new instance as opposed to retrieving an existing one)_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanDefinitionStoreException if arguments have been given but_the affected bean isn't a prototype_@throws BeansException if the bean could not be created_@since 4.1;<T> T getBean(Class<T> requiredType, Object... args) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,allows,for,specifying,explicit,constructor,arguments,factory,method,arguments,overriding,the,specified,default,arguments,if,any,in,the,bean,definition,p,this,method,goes,into,link,listable,bean,factory,by,type,lookup,territory,but,may,also,be,translated,into,a,conventional,by,name,lookup,based,on,the,name,of,the,given,type,for,more,extensive,retrieval,operations,across,sets,of,beans,use,link,listable,bean,factory,and,or,link,bean,factory,utils,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,code,null,is,disallowed,param,args,arguments,to,use,when,creating,a,bean,instance,using,explicit,arguments,only,applied,when,creating,a,new,instance,as,opposed,to,retrieving,an,existing,one,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,definition,store,exception,if,arguments,have,been,given,but,the,affected,bean,isn,t,a,prototype,throws,beans,exception,if,the,bean,could,not,be,created,since,4,1;t,t,get,bean,class,t,required,type,object,args,throws,beans,exception
BeanFactory -> <T> T getBean(Class<T> requiredType, Object... args) throws BeansException_;1496837955;Return an instance, which may be shared or independent, of the specified bean._<p>Allows for specifying explicit constructor arguments / factory method arguments,_overriding the specified default arguments (if any) in the bean definition._<p>This method goes into {@link ListableBeanFactory} by-type lookup territory_but may also be translated into a conventional by-name lookup based on the name_of the given type. For more extensive retrieval operations across sets of beans,_use {@link ListableBeanFactory} and/or {@link BeanFactoryUtils}._@param requiredType type the bean must match_ can be an interface or superclass._{@code null} is disallowed._@param args arguments to use when creating a bean instance using explicit arguments_(only applied when creating a new instance as opposed to retrieving an existing one)_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanDefinitionStoreException if arguments have been given but_the affected bean isn't a prototype_@throws BeansException if the bean could not be created_@since 4.1;<T> T getBean(Class<T> requiredType, Object... args) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,allows,for,specifying,explicit,constructor,arguments,factory,method,arguments,overriding,the,specified,default,arguments,if,any,in,the,bean,definition,p,this,method,goes,into,link,listable,bean,factory,by,type,lookup,territory,but,may,also,be,translated,into,a,conventional,by,name,lookup,based,on,the,name,of,the,given,type,for,more,extensive,retrieval,operations,across,sets,of,beans,use,link,listable,bean,factory,and,or,link,bean,factory,utils,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,code,null,is,disallowed,param,args,arguments,to,use,when,creating,a,bean,instance,using,explicit,arguments,only,applied,when,creating,a,new,instance,as,opposed,to,retrieving,an,existing,one,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,definition,store,exception,if,arguments,have,been,given,but,the,affected,bean,isn,t,a,prototype,throws,beans,exception,if,the,bean,could,not,be,created,since,4,1;t,t,get,bean,class,t,required,type,object,args,throws,beans,exception
BeanFactory -> <T> T getBean(Class<T> requiredType, Object... args) throws BeansException_;1532385723;Return an instance, which may be shared or independent, of the specified bean._<p>Allows for specifying explicit constructor arguments / factory method arguments,_overriding the specified default arguments (if any) in the bean definition._<p>This method goes into {@link ListableBeanFactory} by-type lookup territory_but may also be translated into a conventional by-name lookup based on the name_of the given type. For more extensive retrieval operations across sets of beans,_use {@link ListableBeanFactory} and/or {@link BeanFactoryUtils}._@param requiredType type the bean must match_ can be an interface or superclass_@param args arguments to use when creating a bean instance using explicit arguments_(only applied when creating a new instance as opposed to retrieving an existing one)_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanDefinitionStoreException if arguments have been given but_the affected bean isn't a prototype_@throws BeansException if the bean could not be created_@since 4.1;<T> T getBean(Class<T> requiredType, Object... args) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,allows,for,specifying,explicit,constructor,arguments,factory,method,arguments,overriding,the,specified,default,arguments,if,any,in,the,bean,definition,p,this,method,goes,into,link,listable,bean,factory,by,type,lookup,territory,but,may,also,be,translated,into,a,conventional,by,name,lookup,based,on,the,name,of,the,given,type,for,more,extensive,retrieval,operations,across,sets,of,beans,use,link,listable,bean,factory,and,or,link,bean,factory,utils,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,param,args,arguments,to,use,when,creating,a,bean,instance,using,explicit,arguments,only,applied,when,creating,a,new,instance,as,opposed,to,retrieving,an,existing,one,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,definition,store,exception,if,arguments,have,been,given,but,the,affected,bean,isn,t,a,prototype,throws,beans,exception,if,the,bean,could,not,be,created,since,4,1;t,t,get,bean,class,t,required,type,object,args,throws,beans,exception
BeanFactory -> <T> T getBean(Class<T> requiredType, Object... args) throws BeansException_;1536855799;Return an instance, which may be shared or independent, of the specified bean._<p>Allows for specifying explicit constructor arguments / factory method arguments,_overriding the specified default arguments (if any) in the bean definition._<p>This method goes into {@link ListableBeanFactory} by-type lookup territory_but may also be translated into a conventional by-name lookup based on the name_of the given type. For more extensive retrieval operations across sets of beans,_use {@link ListableBeanFactory} and/or {@link BeanFactoryUtils}._@param requiredType type the bean must match_ can be an interface or superclass_@param args arguments to use when creating a bean instance using explicit arguments_(only applied when creating a new instance as opposed to retrieving an existing one)_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanDefinitionStoreException if arguments have been given but_the affected bean isn't a prototype_@throws BeansException if the bean could not be created_@since 4.1;<T> T getBean(Class<T> requiredType, Object... args) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,allows,for,specifying,explicit,constructor,arguments,factory,method,arguments,overriding,the,specified,default,arguments,if,any,in,the,bean,definition,p,this,method,goes,into,link,listable,bean,factory,by,type,lookup,territory,but,may,also,be,translated,into,a,conventional,by,name,lookup,based,on,the,name,of,the,given,type,for,more,extensive,retrieval,operations,across,sets,of,beans,use,link,listable,bean,factory,and,or,link,bean,factory,utils,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,param,args,arguments,to,use,when,creating,a,bean,instance,using,explicit,arguments,only,applied,when,creating,a,new,instance,as,opposed,to,retrieving,an,existing,one,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,definition,store,exception,if,arguments,have,been,given,but,the,affected,bean,isn,t,a,prototype,throws,beans,exception,if,the,bean,could,not,be,created,since,4,1;t,t,get,bean,class,t,required,type,object,args,throws,beans,exception
BeanFactory -> <T> T getBean(Class<T> requiredType, Object... args) throws BeansException_;1539119659;Return an instance, which may be shared or independent, of the specified bean._<p>Allows for specifying explicit constructor arguments / factory method arguments,_overriding the specified default arguments (if any) in the bean definition._<p>This method goes into {@link ListableBeanFactory} by-type lookup territory_but may also be translated into a conventional by-name lookup based on the name_of the given type. For more extensive retrieval operations across sets of beans,_use {@link ListableBeanFactory} and/or {@link BeanFactoryUtils}._@param requiredType type the bean must match_ can be an interface or superclass_@param args arguments to use when creating a bean instance using explicit arguments_(only applied when creating a new instance as opposed to retrieving an existing one)_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanDefinitionStoreException if arguments have been given but_the affected bean isn't a prototype_@throws BeansException if the bean could not be created_@since 4.1;<T> T getBean(Class<T> requiredType, Object... args) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,allows,for,specifying,explicit,constructor,arguments,factory,method,arguments,overriding,the,specified,default,arguments,if,any,in,the,bean,definition,p,this,method,goes,into,link,listable,bean,factory,by,type,lookup,territory,but,may,also,be,translated,into,a,conventional,by,name,lookup,based,on,the,name,of,the,given,type,for,more,extensive,retrieval,operations,across,sets,of,beans,use,link,listable,bean,factory,and,or,link,bean,factory,utils,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,param,args,arguments,to,use,when,creating,a,bean,instance,using,explicit,arguments,only,applied,when,creating,a,new,instance,as,opposed,to,retrieving,an,existing,one,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,definition,store,exception,if,arguments,have,been,given,but,the,affected,bean,isn,t,a,prototype,throws,beans,exception,if,the,bean,could,not,be,created,since,4,1;t,t,get,bean,class,t,required,type,object,args,throws,beans,exception
BeanFactory -> <T> T getBean(Class<T> requiredType, Object... args) throws BeansException_;1549551674;Return an instance, which may be shared or independent, of the specified bean._<p>Allows for specifying explicit constructor arguments / factory method arguments,_overriding the specified default arguments (if any) in the bean definition._<p>This method goes into {@link ListableBeanFactory} by-type lookup territory_but may also be translated into a conventional by-name lookup based on the name_of the given type. For more extensive retrieval operations across sets of beans,_use {@link ListableBeanFactory} and/or {@link BeanFactoryUtils}._@param requiredType type the bean must match_ can be an interface or superclass_@param args arguments to use when creating a bean instance using explicit arguments_(only applied when creating a new instance as opposed to retrieving an existing one)_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanDefinitionStoreException if arguments have been given but_the affected bean isn't a prototype_@throws BeansException if the bean could not be created_@since 4.1;<T> T getBean(Class<T> requiredType, Object... args) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,allows,for,specifying,explicit,constructor,arguments,factory,method,arguments,overriding,the,specified,default,arguments,if,any,in,the,bean,definition,p,this,method,goes,into,link,listable,bean,factory,by,type,lookup,territory,but,may,also,be,translated,into,a,conventional,by,name,lookup,based,on,the,name,of,the,given,type,for,more,extensive,retrieval,operations,across,sets,of,beans,use,link,listable,bean,factory,and,or,link,bean,factory,utils,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,param,args,arguments,to,use,when,creating,a,bean,instance,using,explicit,arguments,only,applied,when,creating,a,new,instance,as,opposed,to,retrieving,an,existing,one,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,definition,store,exception,if,arguments,have,been,given,but,the,affected,bean,isn,t,a,prototype,throws,beans,exception,if,the,bean,could,not,be,created,since,4,1;t,t,get,bean,class,t,required,type,object,args,throws,beans,exception
BeanFactory -> String[] getAliases(String name)_;1328020251;Return the aliases for the given bean name, if any._All of those aliases point to the same bean when used in a {@link #getBean} call._<p>If the given name is an alias, the corresponding original bean name_and other aliases (if any) will be returned, with the original bean name_being the first element in the array._<p>Will ask the parent factory if the bean cannot be found in this factory instance._@param name the bean name to check for aliases_@return the aliases, or an empty array if none_@see #getBean;String[] getAliases(String name)_;return,the,aliases,for,the,given,bean,name,if,any,all,of,those,aliases,point,to,the,same,bean,when,used,in,a,link,get,bean,call,p,if,the,given,name,is,an,alias,the,corresponding,original,bean,name,and,other,aliases,if,any,will,be,returned,with,the,original,bean,name,being,the,first,element,in,the,array,p,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,bean,name,to,check,for,aliases,return,the,aliases,or,an,empty,array,if,none,see,get,bean;string,get,aliases,string,name
BeanFactory -> String[] getAliases(String name)_;1356735495;Return the aliases for the given bean name, if any._All of those aliases point to the same bean when used in a {@link #getBean} call._<p>If the given name is an alias, the corresponding original bean name_and other aliases (if any) will be returned, with the original bean name_being the first element in the array._<p>Will ask the parent factory if the bean cannot be found in this factory instance._@param name the bean name to check for aliases_@return the aliases, or an empty array if none_@see #getBean;String[] getAliases(String name)_;return,the,aliases,for,the,given,bean,name,if,any,all,of,those,aliases,point,to,the,same,bean,when,used,in,a,link,get,bean,call,p,if,the,given,name,is,an,alias,the,corresponding,original,bean,name,and,other,aliases,if,any,will,be,returned,with,the,original,bean,name,being,the,first,element,in,the,array,p,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,bean,name,to,check,for,aliases,return,the,aliases,or,an,empty,array,if,none,see,get,bean;string,get,aliases,string,name
BeanFactory -> String[] getAliases(String name)_;1362408075;Return the aliases for the given bean name, if any._All of those aliases point to the same bean when used in a {@link #getBean} call._<p>If the given name is an alias, the corresponding original bean name_and other aliases (if any) will be returned, with the original bean name_being the first element in the array._<p>Will ask the parent factory if the bean cannot be found in this factory instance._@param name the bean name to check for aliases_@return the aliases, or an empty array if none_@see #getBean;String[] getAliases(String name)_;return,the,aliases,for,the,given,bean,name,if,any,all,of,those,aliases,point,to,the,same,bean,when,used,in,a,link,get,bean,call,p,if,the,given,name,is,an,alias,the,corresponding,original,bean,name,and,other,aliases,if,any,will,be,returned,with,the,original,bean,name,being,the,first,element,in,the,array,p,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,bean,name,to,check,for,aliases,return,the,aliases,or,an,empty,array,if,none,see,get,bean;string,get,aliases,string,name
BeanFactory -> String[] getAliases(String name)_;1407874032;Return the aliases for the given bean name, if any._All of those aliases point to the same bean when used in a {@link #getBean} call._<p>If the given name is an alias, the corresponding original bean name_and other aliases (if any) will be returned, with the original bean name_being the first element in the array._<p>Will ask the parent factory if the bean cannot be found in this factory instance._@param name the bean name to check for aliases_@return the aliases, or an empty array if none_@see #getBean;String[] getAliases(String name)_;return,the,aliases,for,the,given,bean,name,if,any,all,of,those,aliases,point,to,the,same,bean,when,used,in,a,link,get,bean,call,p,if,the,given,name,is,an,alias,the,corresponding,original,bean,name,and,other,aliases,if,any,will,be,returned,with,the,original,bean,name,being,the,first,element,in,the,array,p,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,bean,name,to,check,for,aliases,return,the,aliases,or,an,empty,array,if,none,see,get,bean;string,get,aliases,string,name
BeanFactory -> String[] getAliases(String name)_;1408052945;Return the aliases for the given bean name, if any._All of those aliases point to the same bean when used in a {@link #getBean} call._<p>If the given name is an alias, the corresponding original bean name_and other aliases (if any) will be returned, with the original bean name_being the first element in the array._<p>Will ask the parent factory if the bean cannot be found in this factory instance._@param name the bean name to check for aliases_@return the aliases, or an empty array if none_@see #getBean;String[] getAliases(String name)_;return,the,aliases,for,the,given,bean,name,if,any,all,of,those,aliases,point,to,the,same,bean,when,used,in,a,link,get,bean,call,p,if,the,given,name,is,an,alias,the,corresponding,original,bean,name,and,other,aliases,if,any,will,be,returned,with,the,original,bean,name,being,the,first,element,in,the,array,p,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,bean,name,to,check,for,aliases,return,the,aliases,or,an,empty,array,if,none,see,get,bean;string,get,aliases,string,name
BeanFactory -> String[] getAliases(String name)_;1417457126;Return the aliases for the given bean name, if any._All of those aliases point to the same bean when used in a {@link #getBean} call._<p>If the given name is an alias, the corresponding original bean name_and other aliases (if any) will be returned, with the original bean name_being the first element in the array._<p>Will ask the parent factory if the bean cannot be found in this factory instance._@param name the bean name to check for aliases_@return the aliases, or an empty array if none_@see #getBean;String[] getAliases(String name)_;return,the,aliases,for,the,given,bean,name,if,any,all,of,those,aliases,point,to,the,same,bean,when,used,in,a,link,get,bean,call,p,if,the,given,name,is,an,alias,the,corresponding,original,bean,name,and,other,aliases,if,any,will,be,returned,with,the,original,bean,name,being,the,first,element,in,the,array,p,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,bean,name,to,check,for,aliases,return,the,aliases,or,an,empty,array,if,none,see,get,bean;string,get,aliases,string,name
BeanFactory -> String[] getAliases(String name)_;1426716313;Return the aliases for the given bean name, if any._All of those aliases point to the same bean when used in a {@link #getBean} call._<p>If the given name is an alias, the corresponding original bean name_and other aliases (if any) will be returned, with the original bean name_being the first element in the array._<p>Will ask the parent factory if the bean cannot be found in this factory instance._@param name the bean name to check for aliases_@return the aliases, or an empty array if none_@see #getBean;String[] getAliases(String name)_;return,the,aliases,for,the,given,bean,name,if,any,all,of,those,aliases,point,to,the,same,bean,when,used,in,a,link,get,bean,call,p,if,the,given,name,is,an,alias,the,corresponding,original,bean,name,and,other,aliases,if,any,will,be,returned,with,the,original,bean,name,being,the,first,element,in,the,array,p,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,bean,name,to,check,for,aliases,return,the,aliases,or,an,empty,array,if,none,see,get,bean;string,get,aliases,string,name
BeanFactory -> String[] getAliases(String name)_;1427144223;Return the aliases for the given bean name, if any._All of those aliases point to the same bean when used in a {@link #getBean} call._<p>If the given name is an alias, the corresponding original bean name_and other aliases (if any) will be returned, with the original bean name_being the first element in the array._<p>Will ask the parent factory if the bean cannot be found in this factory instance._@param name the bean name to check for aliases_@return the aliases, or an empty array if none_@see #getBean;String[] getAliases(String name)_;return,the,aliases,for,the,given,bean,name,if,any,all,of,those,aliases,point,to,the,same,bean,when,used,in,a,link,get,bean,call,p,if,the,given,name,is,an,alias,the,corresponding,original,bean,name,and,other,aliases,if,any,will,be,returned,with,the,original,bean,name,being,the,first,element,in,the,array,p,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,bean,name,to,check,for,aliases,return,the,aliases,or,an,empty,array,if,none,see,get,bean;string,get,aliases,string,name
BeanFactory -> String[] getAliases(String name)_;1442313010;Return the aliases for the given bean name, if any._All of those aliases point to the same bean when used in a {@link #getBean} call._<p>If the given name is an alias, the corresponding original bean name_and other aliases (if any) will be returned, with the original bean name_being the first element in the array._<p>Will ask the parent factory if the bean cannot be found in this factory instance._@param name the bean name to check for aliases_@return the aliases, or an empty array if none_@see #getBean;String[] getAliases(String name)_;return,the,aliases,for,the,given,bean,name,if,any,all,of,those,aliases,point,to,the,same,bean,when,used,in,a,link,get,bean,call,p,if,the,given,name,is,an,alias,the,corresponding,original,bean,name,and,other,aliases,if,any,will,be,returned,with,the,original,bean,name,being,the,first,element,in,the,array,p,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,bean,name,to,check,for,aliases,return,the,aliases,or,an,empty,array,if,none,see,get,bean;string,get,aliases,string,name
BeanFactory -> String[] getAliases(String name)_;1454004037;Return the aliases for the given bean name, if any._All of those aliases point to the same bean when used in a {@link #getBean} call._<p>If the given name is an alias, the corresponding original bean name_and other aliases (if any) will be returned, with the original bean name_being the first element in the array._<p>Will ask the parent factory if the bean cannot be found in this factory instance._@param name the bean name to check for aliases_@return the aliases, or an empty array if none_@see #getBean;String[] getAliases(String name)_;return,the,aliases,for,the,given,bean,name,if,any,all,of,those,aliases,point,to,the,same,bean,when,used,in,a,link,get,bean,call,p,if,the,given,name,is,an,alias,the,corresponding,original,bean,name,and,other,aliases,if,any,will,be,returned,with,the,original,bean,name,being,the,first,element,in,the,array,p,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,bean,name,to,check,for,aliases,return,the,aliases,or,an,empty,array,if,none,see,get,bean;string,get,aliases,string,name
BeanFactory -> String[] getAliases(String name)_;1470948126;Return the aliases for the given bean name, if any._All of those aliases point to the same bean when used in a {@link #getBean} call._<p>If the given name is an alias, the corresponding original bean name_and other aliases (if any) will be returned, with the original bean name_being the first element in the array._<p>Will ask the parent factory if the bean cannot be found in this factory instance._@param name the bean name to check for aliases_@return the aliases, or an empty array if none_@see #getBean;String[] getAliases(String name)_;return,the,aliases,for,the,given,bean,name,if,any,all,of,those,aliases,point,to,the,same,bean,when,used,in,a,link,get,bean,call,p,if,the,given,name,is,an,alias,the,corresponding,original,bean,name,and,other,aliases,if,any,will,be,returned,with,the,original,bean,name,being,the,first,element,in,the,array,p,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,bean,name,to,check,for,aliases,return,the,aliases,or,an,empty,array,if,none,see,get,bean;string,get,aliases,string,name
BeanFactory -> String[] getAliases(String name)_;1473796164;Return the aliases for the given bean name, if any._All of those aliases point to the same bean when used in a {@link #getBean} call._<p>If the given name is an alias, the corresponding original bean name_and other aliases (if any) will be returned, with the original bean name_being the first element in the array._<p>Will ask the parent factory if the bean cannot be found in this factory instance._@param name the bean name to check for aliases_@return the aliases, or an empty array if none_@see #getBean;String[] getAliases(String name)_;return,the,aliases,for,the,given,bean,name,if,any,all,of,those,aliases,point,to,the,same,bean,when,used,in,a,link,get,bean,call,p,if,the,given,name,is,an,alias,the,corresponding,original,bean,name,and,other,aliases,if,any,will,be,returned,with,the,original,bean,name,being,the,first,element,in,the,array,p,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,bean,name,to,check,for,aliases,return,the,aliases,or,an,empty,array,if,none,see,get,bean;string,get,aliases,string,name
BeanFactory -> String[] getAliases(String name)_;1477468204;Return the aliases for the given bean name, if any._All of those aliases point to the same bean when used in a {@link #getBean} call._<p>If the given name is an alias, the corresponding original bean name_and other aliases (if any) will be returned, with the original bean name_being the first element in the array._<p>Will ask the parent factory if the bean cannot be found in this factory instance._@param name the bean name to check for aliases_@return the aliases, or an empty array if none_@see #getBean;String[] getAliases(String name)_;return,the,aliases,for,the,given,bean,name,if,any,all,of,those,aliases,point,to,the,same,bean,when,used,in,a,link,get,bean,call,p,if,the,given,name,is,an,alias,the,corresponding,original,bean,name,and,other,aliases,if,any,will,be,returned,with,the,original,bean,name,being,the,first,element,in,the,array,p,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,bean,name,to,check,for,aliases,return,the,aliases,or,an,empty,array,if,none,see,get,bean;string,get,aliases,string,name
BeanFactory -> String[] getAliases(String name)_;1495868221;Return the aliases for the given bean name, if any._All of those aliases point to the same bean when used in a {@link #getBean} call._<p>If the given name is an alias, the corresponding original bean name_and other aliases (if any) will be returned, with the original bean name_being the first element in the array._<p>Will ask the parent factory if the bean cannot be found in this factory instance._@param name the bean name to check for aliases_@return the aliases, or an empty array if none_@see #getBean;String[] getAliases(String name)_;return,the,aliases,for,the,given,bean,name,if,any,all,of,those,aliases,point,to,the,same,bean,when,used,in,a,link,get,bean,call,p,if,the,given,name,is,an,alias,the,corresponding,original,bean,name,and,other,aliases,if,any,will,be,returned,with,the,original,bean,name,being,the,first,element,in,the,array,p,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,bean,name,to,check,for,aliases,return,the,aliases,or,an,empty,array,if,none,see,get,bean;string,get,aliases,string,name
BeanFactory -> String[] getAliases(String name)_;1496837955;Return the aliases for the given bean name, if any._All of those aliases point to the same bean when used in a {@link #getBean} call._<p>If the given name is an alias, the corresponding original bean name_and other aliases (if any) will be returned, with the original bean name_being the first element in the array._<p>Will ask the parent factory if the bean cannot be found in this factory instance._@param name the bean name to check for aliases_@return the aliases, or an empty array if none_@see #getBean;String[] getAliases(String name)_;return,the,aliases,for,the,given,bean,name,if,any,all,of,those,aliases,point,to,the,same,bean,when,used,in,a,link,get,bean,call,p,if,the,given,name,is,an,alias,the,corresponding,original,bean,name,and,other,aliases,if,any,will,be,returned,with,the,original,bean,name,being,the,first,element,in,the,array,p,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,bean,name,to,check,for,aliases,return,the,aliases,or,an,empty,array,if,none,see,get,bean;string,get,aliases,string,name
BeanFactory -> String[] getAliases(String name)_;1532385723;Return the aliases for the given bean name, if any._All of those aliases point to the same bean when used in a {@link #getBean} call._<p>If the given name is an alias, the corresponding original bean name_and other aliases (if any) will be returned, with the original bean name_being the first element in the array._<p>Will ask the parent factory if the bean cannot be found in this factory instance._@param name the bean name to check for aliases_@return the aliases, or an empty array if none_@see #getBean;String[] getAliases(String name)_;return,the,aliases,for,the,given,bean,name,if,any,all,of,those,aliases,point,to,the,same,bean,when,used,in,a,link,get,bean,call,p,if,the,given,name,is,an,alias,the,corresponding,original,bean,name,and,other,aliases,if,any,will,be,returned,with,the,original,bean,name,being,the,first,element,in,the,array,p,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,bean,name,to,check,for,aliases,return,the,aliases,or,an,empty,array,if,none,see,get,bean;string,get,aliases,string,name
BeanFactory -> String[] getAliases(String name)_;1536855799;Return the aliases for the given bean name, if any._All of those aliases point to the same bean when used in a {@link #getBean} call._<p>If the given name is an alias, the corresponding original bean name_and other aliases (if any) will be returned, with the original bean name_being the first element in the array._<p>Will ask the parent factory if the bean cannot be found in this factory instance._@param name the bean name to check for aliases_@return the aliases, or an empty array if none_@see #getBean;String[] getAliases(String name)_;return,the,aliases,for,the,given,bean,name,if,any,all,of,those,aliases,point,to,the,same,bean,when,used,in,a,link,get,bean,call,p,if,the,given,name,is,an,alias,the,corresponding,original,bean,name,and,other,aliases,if,any,will,be,returned,with,the,original,bean,name,being,the,first,element,in,the,array,p,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,bean,name,to,check,for,aliases,return,the,aliases,or,an,empty,array,if,none,see,get,bean;string,get,aliases,string,name
BeanFactory -> String[] getAliases(String name)_;1539119659;Return the aliases for the given bean name, if any._All of those aliases point to the same bean when used in a {@link #getBean} call._<p>If the given name is an alias, the corresponding original bean name_and other aliases (if any) will be returned, with the original bean name_being the first element in the array._<p>Will ask the parent factory if the bean cannot be found in this factory instance._@param name the bean name to check for aliases_@return the aliases, or an empty array if none_@see #getBean;String[] getAliases(String name)_;return,the,aliases,for,the,given,bean,name,if,any,all,of,those,aliases,point,to,the,same,bean,when,used,in,a,link,get,bean,call,p,if,the,given,name,is,an,alias,the,corresponding,original,bean,name,and,other,aliases,if,any,will,be,returned,with,the,original,bean,name,being,the,first,element,in,the,array,p,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,bean,name,to,check,for,aliases,return,the,aliases,or,an,empty,array,if,none,see,get,bean;string,get,aliases,string,name
BeanFactory -> String[] getAliases(String name)_;1549551674;Return the aliases for the given bean name, if any._All of those aliases point to the same bean when used in a {@link #getBean} call._<p>If the given name is an alias, the corresponding original bean name_and other aliases (if any) will be returned, with the original bean name_being the first element in the array._<p>Will ask the parent factory if the bean cannot be found in this factory instance._@param name the bean name to check for aliases_@return the aliases, or an empty array if none_@see #getBean;String[] getAliases(String name)_;return,the,aliases,for,the,given,bean,name,if,any,all,of,those,aliases,point,to,the,same,bean,when,used,in,a,link,get,bean,call,p,if,the,given,name,is,an,alias,the,corresponding,original,bean,name,and,other,aliases,if,any,will,be,returned,with,the,original,bean,name,being,the,first,element,in,the,array,p,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,bean,name,to,check,for,aliases,return,the,aliases,or,an,empty,array,if,none,see,get,bean;string,get,aliases,string,name
BeanFactory -> <T> ObjectProvider<T> getBeanProvider(Class<T> requiredType)_;1532385723;Return an provider for the specified bean, allowing for lazy on-demand retrieval_of instances, including availability and uniqueness options._@param requiredType type the bean must match_ can be an interface or superclass_@return a corresponding provider handle_@since 5.1;<T> ObjectProvider<T> getBeanProvider(Class<T> requiredType)_;return,an,provider,for,the,specified,bean,allowing,for,lazy,on,demand,retrieval,of,instances,including,availability,and,uniqueness,options,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,return,a,corresponding,provider,handle,since,5,1;t,object,provider,t,get,bean,provider,class,t,required,type
BeanFactory -> <T> ObjectProvider<T> getBeanProvider(Class<T> requiredType)_;1536855799;Return an provider for the specified bean, allowing for lazy on-demand retrieval_of instances, including availability and uniqueness options._@param requiredType type the bean must match_ can be an interface or superclass_@return a corresponding provider handle_@since 5.1_@see #getBeanProvider(ResolvableType);<T> ObjectProvider<T> getBeanProvider(Class<T> requiredType)_;return,an,provider,for,the,specified,bean,allowing,for,lazy,on,demand,retrieval,of,instances,including,availability,and,uniqueness,options,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,return,a,corresponding,provider,handle,since,5,1,see,get,bean,provider,resolvable,type;t,object,provider,t,get,bean,provider,class,t,required,type
BeanFactory -> <T> ObjectProvider<T> getBeanProvider(Class<T> requiredType)_;1539119659;Return an provider for the specified bean, allowing for lazy on-demand retrieval_of instances, including availability and uniqueness options._@param requiredType type the bean must match_ can be an interface or superclass_@return a corresponding provider handle_@since 5.1_@see #getBeanProvider(ResolvableType);<T> ObjectProvider<T> getBeanProvider(Class<T> requiredType)_;return,an,provider,for,the,specified,bean,allowing,for,lazy,on,demand,retrieval,of,instances,including,availability,and,uniqueness,options,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,return,a,corresponding,provider,handle,since,5,1,see,get,bean,provider,resolvable,type;t,object,provider,t,get,bean,provider,class,t,required,type
BeanFactory -> <T> ObjectProvider<T> getBeanProvider(Class<T> requiredType)_;1549551674;Return an provider for the specified bean, allowing for lazy on-demand retrieval_of instances, including availability and uniqueness options._@param requiredType type the bean must match_ can be an interface or superclass_@return a corresponding provider handle_@since 5.1_@see #getBeanProvider(ResolvableType);<T> ObjectProvider<T> getBeanProvider(Class<T> requiredType)_;return,an,provider,for,the,specified,bean,allowing,for,lazy,on,demand,retrieval,of,instances,including,availability,and,uniqueness,options,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,return,a,corresponding,provider,handle,since,5,1,see,get,bean,provider,resolvable,type;t,object,provider,t,get,bean,provider,class,t,required,type
BeanFactory -> <T> T getBean(String name, Class<T> requiredType) throws BeansException_;1328020251;Return an instance, which may be shared or independent, of the specified bean._<p>Behaves the same as {@link #getBean(String)}, but provides a measure of type_safety by throwing a BeanNotOfRequiredTypeException if the bean is not of the_required type. This means that ClassCastException can't be thrown on casting_the result correctly, as can happen with {@link #getBean(String)}._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to retrieve_@param requiredType type the bean must match. Can be an interface or superclass_of the actual class, or <code>null</code> for any match. For example, if the value_is <code>Object.class</code>, this method will succeed whatever the class of the_returned instance._@return an instance of the bean_@throws NoSuchBeanDefinitionException if there's no such bean definition_@throws BeanNotOfRequiredTypeException if the bean is not of the required type_@throws BeansException if the bean could not be created;<T> T getBean(String name, Class<T> requiredType) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,behaves,the,same,as,link,get,bean,string,but,provides,a,measure,of,type,safety,by,throwing,a,bean,not,of,required,type,exception,if,the,bean,is,not,of,the,required,type,this,means,that,class,cast,exception,can,t,be,thrown,on,casting,the,result,correctly,as,can,happen,with,link,get,bean,string,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,retrieve,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,of,the,actual,class,or,code,null,code,for,any,match,for,example,if,the,value,is,code,object,class,code,this,method,will,succeed,whatever,the,class,of,the,returned,instance,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,s,no,such,bean,definition,throws,bean,not,of,required,type,exception,if,the,bean,is,not,of,the,required,type,throws,beans,exception,if,the,bean,could,not,be,created;t,t,get,bean,string,name,class,t,required,type,throws,beans,exception
BeanFactory -> <T> T getBean(String name, Class<T> requiredType) throws BeansException_;1356735495;Return an instance, which may be shared or independent, of the specified bean._<p>Behaves the same as {@link #getBean(String)}, but provides a measure of type_safety by throwing a BeanNotOfRequiredTypeException if the bean is not of the_required type. This means that ClassCastException can't be thrown on casting_the result correctly, as can happen with {@link #getBean(String)}._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to retrieve_@param requiredType type the bean must match. Can be an interface or superclass_of the actual class, or {@code null} for any match. For example, if the value_is {@code Object.class}, this method will succeed whatever the class of the_returned instance._@return an instance of the bean_@throws NoSuchBeanDefinitionException if there's no such bean definition_@throws BeanNotOfRequiredTypeException if the bean is not of the required type_@throws BeansException if the bean could not be created;<T> T getBean(String name, Class<T> requiredType) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,behaves,the,same,as,link,get,bean,string,but,provides,a,measure,of,type,safety,by,throwing,a,bean,not,of,required,type,exception,if,the,bean,is,not,of,the,required,type,this,means,that,class,cast,exception,can,t,be,thrown,on,casting,the,result,correctly,as,can,happen,with,link,get,bean,string,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,retrieve,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,of,the,actual,class,or,code,null,for,any,match,for,example,if,the,value,is,code,object,class,this,method,will,succeed,whatever,the,class,of,the,returned,instance,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,s,no,such,bean,definition,throws,bean,not,of,required,type,exception,if,the,bean,is,not,of,the,required,type,throws,beans,exception,if,the,bean,could,not,be,created;t,t,get,bean,string,name,class,t,required,type,throws,beans,exception
BeanFactory -> <T> T getBean(String name, Class<T> requiredType) throws BeansException_;1362408075;Return an instance, which may be shared or independent, of the specified bean._<p>Behaves the same as {@link #getBean(String)}, but provides a measure of type_safety by throwing a BeanNotOfRequiredTypeException if the bean is not of the_required type. This means that ClassCastException can't be thrown on casting_the result correctly, as can happen with {@link #getBean(String)}._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to retrieve_@param requiredType type the bean must match. Can be an interface or superclass_of the actual class, or {@code null} for any match. For example, if the value_is {@code Object.class}, this method will succeed whatever the class of the_returned instance._@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanNotOfRequiredTypeException if the bean is not of the required type_@throws BeansException if the bean could not be created;<T> T getBean(String name, Class<T> requiredType) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,behaves,the,same,as,link,get,bean,string,but,provides,a,measure,of,type,safety,by,throwing,a,bean,not,of,required,type,exception,if,the,bean,is,not,of,the,required,type,this,means,that,class,cast,exception,can,t,be,thrown,on,casting,the,result,correctly,as,can,happen,with,link,get,bean,string,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,retrieve,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,of,the,actual,class,or,code,null,for,any,match,for,example,if,the,value,is,code,object,class,this,method,will,succeed,whatever,the,class,of,the,returned,instance,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,not,of,required,type,exception,if,the,bean,is,not,of,the,required,type,throws,beans,exception,if,the,bean,could,not,be,created;t,t,get,bean,string,name,class,t,required,type,throws,beans,exception
BeanFactory -> <T> T getBean(String name, Class<T> requiredType) throws BeansException_;1407874032;Return an instance, which may be shared or independent, of the specified bean._<p>Behaves the same as {@link #getBean(String)}, but provides a measure of type_safety by throwing a BeanNotOfRequiredTypeException if the bean is not of the_required type. This means that ClassCastException can't be thrown on casting_the result correctly, as can happen with {@link #getBean(String)}._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to retrieve_@param requiredType type the bean must match. Can be an interface or superclass_of the actual class, or {@code null} for any match. For example, if the value_is {@code Object.class}, this method will succeed whatever the class of the_returned instance._@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanNotOfRequiredTypeException if the bean is not of the required type_@throws BeansException if the bean could not be created;<T> T getBean(String name, Class<T> requiredType) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,behaves,the,same,as,link,get,bean,string,but,provides,a,measure,of,type,safety,by,throwing,a,bean,not,of,required,type,exception,if,the,bean,is,not,of,the,required,type,this,means,that,class,cast,exception,can,t,be,thrown,on,casting,the,result,correctly,as,can,happen,with,link,get,bean,string,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,retrieve,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,of,the,actual,class,or,code,null,for,any,match,for,example,if,the,value,is,code,object,class,this,method,will,succeed,whatever,the,class,of,the,returned,instance,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,not,of,required,type,exception,if,the,bean,is,not,of,the,required,type,throws,beans,exception,if,the,bean,could,not,be,created;t,t,get,bean,string,name,class,t,required,type,throws,beans,exception
BeanFactory -> <T> T getBean(String name, Class<T> requiredType) throws BeansException_;1408052945;Return an instance, which may be shared or independent, of the specified bean._<p>Behaves the same as {@link #getBean(String)}, but provides a measure of type_safety by throwing a BeanNotOfRequiredTypeException if the bean is not of the_required type. This means that ClassCastException can't be thrown on casting_the result correctly, as can happen with {@link #getBean(String)}._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to retrieve_@param requiredType type the bean must match. Can be an interface or superclass_of the actual class, or {@code null} for any match. For example, if the value_is {@code Object.class}, this method will succeed whatever the class of the_returned instance._@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanNotOfRequiredTypeException if the bean is not of the required type_@throws BeansException if the bean could not be created;<T> T getBean(String name, Class<T> requiredType) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,behaves,the,same,as,link,get,bean,string,but,provides,a,measure,of,type,safety,by,throwing,a,bean,not,of,required,type,exception,if,the,bean,is,not,of,the,required,type,this,means,that,class,cast,exception,can,t,be,thrown,on,casting,the,result,correctly,as,can,happen,with,link,get,bean,string,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,retrieve,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,of,the,actual,class,or,code,null,for,any,match,for,example,if,the,value,is,code,object,class,this,method,will,succeed,whatever,the,class,of,the,returned,instance,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,not,of,required,type,exception,if,the,bean,is,not,of,the,required,type,throws,beans,exception,if,the,bean,could,not,be,created;t,t,get,bean,string,name,class,t,required,type,throws,beans,exception
BeanFactory -> <T> T getBean(String name, Class<T> requiredType) throws BeansException_;1417457126;Return an instance, which may be shared or independent, of the specified bean._<p>Behaves the same as {@link #getBean(String)}, but provides a measure of type_safety by throwing a BeanNotOfRequiredTypeException if the bean is not of the_required type. This means that ClassCastException can't be thrown on casting_the result correctly, as can happen with {@link #getBean(String)}._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to retrieve_@param requiredType type the bean must match. Can be an interface or superclass_of the actual class, or {@code null} for any match. For example, if the value_is {@code Object.class}, this method will succeed whatever the class of the_returned instance._@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanNotOfRequiredTypeException if the bean is not of the required type_@throws BeansException if the bean could not be created;<T> T getBean(String name, Class<T> requiredType) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,behaves,the,same,as,link,get,bean,string,but,provides,a,measure,of,type,safety,by,throwing,a,bean,not,of,required,type,exception,if,the,bean,is,not,of,the,required,type,this,means,that,class,cast,exception,can,t,be,thrown,on,casting,the,result,correctly,as,can,happen,with,link,get,bean,string,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,retrieve,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,of,the,actual,class,or,code,null,for,any,match,for,example,if,the,value,is,code,object,class,this,method,will,succeed,whatever,the,class,of,the,returned,instance,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,not,of,required,type,exception,if,the,bean,is,not,of,the,required,type,throws,beans,exception,if,the,bean,could,not,be,created;t,t,get,bean,string,name,class,t,required,type,throws,beans,exception
BeanFactory -> <T> T getBean(String name, Class<T> requiredType) throws BeansException_;1426716313;Return an instance, which may be shared or independent, of the specified bean._<p>Behaves the same as {@link #getBean(String)}, but provides a measure of type_safety by throwing a BeanNotOfRequiredTypeException if the bean is not of the_required type. This means that ClassCastException can't be thrown on casting_the result correctly, as can happen with {@link #getBean(String)}._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to retrieve_@param requiredType type the bean must match. Can be an interface or superclass_of the actual class, or {@code null} for any match. For example, if the value_is {@code Object.class}, this method will succeed whatever the class of the_returned instance._@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanNotOfRequiredTypeException if the bean is not of the required type_@throws BeansException if the bean could not be created;<T> T getBean(String name, Class<T> requiredType) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,behaves,the,same,as,link,get,bean,string,but,provides,a,measure,of,type,safety,by,throwing,a,bean,not,of,required,type,exception,if,the,bean,is,not,of,the,required,type,this,means,that,class,cast,exception,can,t,be,thrown,on,casting,the,result,correctly,as,can,happen,with,link,get,bean,string,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,retrieve,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,of,the,actual,class,or,code,null,for,any,match,for,example,if,the,value,is,code,object,class,this,method,will,succeed,whatever,the,class,of,the,returned,instance,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,not,of,required,type,exception,if,the,bean,is,not,of,the,required,type,throws,beans,exception,if,the,bean,could,not,be,created;t,t,get,bean,string,name,class,t,required,type,throws,beans,exception
BeanFactory -> <T> T getBean(String name, Class<T> requiredType) throws BeansException_;1427144223;Return an instance, which may be shared or independent, of the specified bean._<p>Behaves the same as {@link #getBean(String)}, but provides a measure of type_safety by throwing a BeanNotOfRequiredTypeException if the bean is not of the_required type. This means that ClassCastException can't be thrown on casting_the result correctly, as can happen with {@link #getBean(String)}._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to retrieve_@param requiredType type the bean must match. Can be an interface or superclass_of the actual class, or {@code null} for any match. For example, if the value_is {@code Object.class}, this method will succeed whatever the class of the_returned instance._@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanNotOfRequiredTypeException if the bean is not of the required type_@throws BeansException if the bean could not be created;<T> T getBean(String name, Class<T> requiredType) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,behaves,the,same,as,link,get,bean,string,but,provides,a,measure,of,type,safety,by,throwing,a,bean,not,of,required,type,exception,if,the,bean,is,not,of,the,required,type,this,means,that,class,cast,exception,can,t,be,thrown,on,casting,the,result,correctly,as,can,happen,with,link,get,bean,string,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,retrieve,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,of,the,actual,class,or,code,null,for,any,match,for,example,if,the,value,is,code,object,class,this,method,will,succeed,whatever,the,class,of,the,returned,instance,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,not,of,required,type,exception,if,the,bean,is,not,of,the,required,type,throws,beans,exception,if,the,bean,could,not,be,created;t,t,get,bean,string,name,class,t,required,type,throws,beans,exception
BeanFactory -> <T> T getBean(String name, Class<T> requiredType) throws BeansException_;1442313010;Return an instance, which may be shared or independent, of the specified bean._<p>Behaves the same as {@link #getBean(String)}, but provides a measure of type_safety by throwing a BeanNotOfRequiredTypeException if the bean is not of the_required type. This means that ClassCastException can't be thrown on casting_the result correctly, as can happen with {@link #getBean(String)}._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to retrieve_@param requiredType type the bean must match. Can be an interface or superclass_of the actual class, or {@code null} for any match. For example, if the value_is {@code Object.class}, this method will succeed whatever the class of the_returned instance._@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanNotOfRequiredTypeException if the bean is not of the required type_@throws BeansException if the bean could not be created;<T> T getBean(String name, Class<T> requiredType) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,behaves,the,same,as,link,get,bean,string,but,provides,a,measure,of,type,safety,by,throwing,a,bean,not,of,required,type,exception,if,the,bean,is,not,of,the,required,type,this,means,that,class,cast,exception,can,t,be,thrown,on,casting,the,result,correctly,as,can,happen,with,link,get,bean,string,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,retrieve,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,of,the,actual,class,or,code,null,for,any,match,for,example,if,the,value,is,code,object,class,this,method,will,succeed,whatever,the,class,of,the,returned,instance,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,not,of,required,type,exception,if,the,bean,is,not,of,the,required,type,throws,beans,exception,if,the,bean,could,not,be,created;t,t,get,bean,string,name,class,t,required,type,throws,beans,exception
BeanFactory -> <T> T getBean(String name, Class<T> requiredType) throws BeansException_;1454004037;Return an instance, which may be shared or independent, of the specified bean._<p>Behaves the same as {@link #getBean(String)}, but provides a measure of type_safety by throwing a BeanNotOfRequiredTypeException if the bean is not of the_required type. This means that ClassCastException can't be thrown on casting_the result correctly, as can happen with {@link #getBean(String)}._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to retrieve_@param requiredType type the bean must match. Can be an interface or superclass_of the actual class, or {@code null} for any match. For example, if the value_is {@code Object.class}, this method will succeed whatever the class of the_returned instance._@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanNotOfRequiredTypeException if the bean is not of the required type_@throws BeansException if the bean could not be created;<T> T getBean(String name, Class<T> requiredType) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,behaves,the,same,as,link,get,bean,string,but,provides,a,measure,of,type,safety,by,throwing,a,bean,not,of,required,type,exception,if,the,bean,is,not,of,the,required,type,this,means,that,class,cast,exception,can,t,be,thrown,on,casting,the,result,correctly,as,can,happen,with,link,get,bean,string,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,retrieve,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,of,the,actual,class,or,code,null,for,any,match,for,example,if,the,value,is,code,object,class,this,method,will,succeed,whatever,the,class,of,the,returned,instance,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,not,of,required,type,exception,if,the,bean,is,not,of,the,required,type,throws,beans,exception,if,the,bean,could,not,be,created;t,t,get,bean,string,name,class,t,required,type,throws,beans,exception
BeanFactory -> <T> T getBean(String name, Class<T> requiredType) throws BeansException_;1470948126;Return an instance, which may be shared or independent, of the specified bean._<p>Behaves the same as {@link #getBean(String)}, but provides a measure of type_safety by throwing a BeanNotOfRequiredTypeException if the bean is not of the_required type. This means that ClassCastException can't be thrown on casting_the result correctly, as can happen with {@link #getBean(String)}._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to retrieve_@param requiredType type the bean must match. Can be an interface or superclass_of the actual class, or {@code null} for any match. For example, if the value_is {@code Object.class}, this method will succeed whatever the class of the_returned instance._@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanNotOfRequiredTypeException if the bean is not of the required type_@throws BeansException if the bean could not be created;<T> T getBean(String name, Class<T> requiredType) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,behaves,the,same,as,link,get,bean,string,but,provides,a,measure,of,type,safety,by,throwing,a,bean,not,of,required,type,exception,if,the,bean,is,not,of,the,required,type,this,means,that,class,cast,exception,can,t,be,thrown,on,casting,the,result,correctly,as,can,happen,with,link,get,bean,string,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,retrieve,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,of,the,actual,class,or,code,null,for,any,match,for,example,if,the,value,is,code,object,class,this,method,will,succeed,whatever,the,class,of,the,returned,instance,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,not,of,required,type,exception,if,the,bean,is,not,of,the,required,type,throws,beans,exception,if,the,bean,could,not,be,created;t,t,get,bean,string,name,class,t,required,type,throws,beans,exception
BeanFactory -> <T> T getBean(String name, Class<T> requiredType) throws BeansException_;1473796164;Return an instance, which may be shared or independent, of the specified bean._<p>Behaves the same as {@link #getBean(String)}, but provides a measure of type_safety by throwing a BeanNotOfRequiredTypeException if the bean is not of the_required type. This means that ClassCastException can't be thrown on casting_the result correctly, as can happen with {@link #getBean(String)}._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to retrieve_@param requiredType type the bean must match. Can be an interface or superclass_of the actual class, or {@code null} for any match. For example, if the value_is {@code Object.class}, this method will succeed whatever the class of the_returned instance._@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanNotOfRequiredTypeException if the bean is not of the required type_@throws BeansException if the bean could not be created;<T> T getBean(String name, Class<T> requiredType) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,behaves,the,same,as,link,get,bean,string,but,provides,a,measure,of,type,safety,by,throwing,a,bean,not,of,required,type,exception,if,the,bean,is,not,of,the,required,type,this,means,that,class,cast,exception,can,t,be,thrown,on,casting,the,result,correctly,as,can,happen,with,link,get,bean,string,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,retrieve,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,of,the,actual,class,or,code,null,for,any,match,for,example,if,the,value,is,code,object,class,this,method,will,succeed,whatever,the,class,of,the,returned,instance,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,not,of,required,type,exception,if,the,bean,is,not,of,the,required,type,throws,beans,exception,if,the,bean,could,not,be,created;t,t,get,bean,string,name,class,t,required,type,throws,beans,exception
BeanFactory -> <T> T getBean(String name, Class<T> requiredType) throws BeansException_;1477468204;Return an instance, which may be shared or independent, of the specified bean._<p>Behaves the same as {@link #getBean(String)}, but provides a measure of type_safety by throwing a BeanNotOfRequiredTypeException if the bean is not of the_required type. This means that ClassCastException can't be thrown on casting_the result correctly, as can happen with {@link #getBean(String)}._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to retrieve_@param requiredType type the bean must match. Can be an interface or superclass_of the actual class, or {@code null} for any match. For example, if the value_is {@code Object.class}, this method will succeed whatever the class of the_returned instance._@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanNotOfRequiredTypeException if the bean is not of the required type_@throws BeansException if the bean could not be created;<T> T getBean(String name, Class<T> requiredType) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,behaves,the,same,as,link,get,bean,string,but,provides,a,measure,of,type,safety,by,throwing,a,bean,not,of,required,type,exception,if,the,bean,is,not,of,the,required,type,this,means,that,class,cast,exception,can,t,be,thrown,on,casting,the,result,correctly,as,can,happen,with,link,get,bean,string,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,retrieve,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,of,the,actual,class,or,code,null,for,any,match,for,example,if,the,value,is,code,object,class,this,method,will,succeed,whatever,the,class,of,the,returned,instance,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,not,of,required,type,exception,if,the,bean,is,not,of,the,required,type,throws,beans,exception,if,the,bean,could,not,be,created;t,t,get,bean,string,name,class,t,required,type,throws,beans,exception
BeanFactory -> <T> T getBean(String name, Class<T> requiredType) throws BeansException_;1532385723;Return an instance, which may be shared or independent, of the specified bean._<p>Behaves the same as {@link #getBean(String)}, but provides a measure of type_safety by throwing a BeanNotOfRequiredTypeException if the bean is not of the_required type. This means that ClassCastException can't be thrown on casting_the result correctly, as can happen with {@link #getBean(String)}._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to retrieve_@param requiredType type the bean must match_ can be an interface or superclass_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanNotOfRequiredTypeException if the bean is not of the required type_@throws BeansException if the bean could not be created;<T> T getBean(String name, Class<T> requiredType) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,behaves,the,same,as,link,get,bean,string,but,provides,a,measure,of,type,safety,by,throwing,a,bean,not,of,required,type,exception,if,the,bean,is,not,of,the,required,type,this,means,that,class,cast,exception,can,t,be,thrown,on,casting,the,result,correctly,as,can,happen,with,link,get,bean,string,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,retrieve,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,not,of,required,type,exception,if,the,bean,is,not,of,the,required,type,throws,beans,exception,if,the,bean,could,not,be,created;t,t,get,bean,string,name,class,t,required,type,throws,beans,exception
BeanFactory -> <T> T getBean(String name, Class<T> requiredType) throws BeansException_;1536855799;Return an instance, which may be shared or independent, of the specified bean._<p>Behaves the same as {@link #getBean(String)}, but provides a measure of type_safety by throwing a BeanNotOfRequiredTypeException if the bean is not of the_required type. This means that ClassCastException can't be thrown on casting_the result correctly, as can happen with {@link #getBean(String)}._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to retrieve_@param requiredType type the bean must match_ can be an interface or superclass_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanNotOfRequiredTypeException if the bean is not of the required type_@throws BeansException if the bean could not be created;<T> T getBean(String name, Class<T> requiredType) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,behaves,the,same,as,link,get,bean,string,but,provides,a,measure,of,type,safety,by,throwing,a,bean,not,of,required,type,exception,if,the,bean,is,not,of,the,required,type,this,means,that,class,cast,exception,can,t,be,thrown,on,casting,the,result,correctly,as,can,happen,with,link,get,bean,string,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,retrieve,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,not,of,required,type,exception,if,the,bean,is,not,of,the,required,type,throws,beans,exception,if,the,bean,could,not,be,created;t,t,get,bean,string,name,class,t,required,type,throws,beans,exception
BeanFactory -> <T> T getBean(String name, Class<T> requiredType) throws BeansException_;1539119659;Return an instance, which may be shared or independent, of the specified bean._<p>Behaves the same as {@link #getBean(String)}, but provides a measure of type_safety by throwing a BeanNotOfRequiredTypeException if the bean is not of the_required type. This means that ClassCastException can't be thrown on casting_the result correctly, as can happen with {@link #getBean(String)}._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to retrieve_@param requiredType type the bean must match_ can be an interface or superclass_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanNotOfRequiredTypeException if the bean is not of the required type_@throws BeansException if the bean could not be created;<T> T getBean(String name, Class<T> requiredType) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,behaves,the,same,as,link,get,bean,string,but,provides,a,measure,of,type,safety,by,throwing,a,bean,not,of,required,type,exception,if,the,bean,is,not,of,the,required,type,this,means,that,class,cast,exception,can,t,be,thrown,on,casting,the,result,correctly,as,can,happen,with,link,get,bean,string,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,retrieve,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,not,of,required,type,exception,if,the,bean,is,not,of,the,required,type,throws,beans,exception,if,the,bean,could,not,be,created;t,t,get,bean,string,name,class,t,required,type,throws,beans,exception
BeanFactory -> <T> T getBean(String name, Class<T> requiredType) throws BeansException_;1549551674;Return an instance, which may be shared or independent, of the specified bean._<p>Behaves the same as {@link #getBean(String)}, but provides a measure of type_safety by throwing a BeanNotOfRequiredTypeException if the bean is not of the_required type. This means that ClassCastException can't be thrown on casting_the result correctly, as can happen with {@link #getBean(String)}._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to retrieve_@param requiredType type the bean must match_ can be an interface or superclass_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanNotOfRequiredTypeException if the bean is not of the required type_@throws BeansException if the bean could not be created;<T> T getBean(String name, Class<T> requiredType) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,behaves,the,same,as,link,get,bean,string,but,provides,a,measure,of,type,safety,by,throwing,a,bean,not,of,required,type,exception,if,the,bean,is,not,of,the,required,type,this,means,that,class,cast,exception,can,t,be,thrown,on,casting,the,result,correctly,as,can,happen,with,link,get,bean,string,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,retrieve,param,required,type,type,the,bean,must,match,can,be,an,interface,or,superclass,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,not,of,required,type,exception,if,the,bean,is,not,of,the,required,type,throws,beans,exception,if,the,bean,could,not,be,created;t,t,get,bean,string,name,class,t,required,type,throws,beans,exception
BeanFactory -> boolean isPrototype(String name) throws NoSuchBeanDefinitionException_;1328020251;Is this bean a prototype? That is, will {@link #getBean} always return_independent instances?_<p>Note: This method returning <code>false</code> does not clearly indicate_a singleton object. It indicates non-independent instances, which may correspond_to a scoped bean as well. Use the {@link #isSingleton} operation to explicitly_check for a shared singleton instance._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return whether this bean will always deliver independent instances_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.0.3_@see #getBean_@see #isSingleton;boolean isPrototype(String name) throws NoSuchBeanDefinitionException_;is,this,bean,a,prototype,that,is,will,link,get,bean,always,return,independent,instances,p,note,this,method,returning,code,false,code,does,not,clearly,indicate,a,singleton,object,it,indicates,non,independent,instances,which,may,correspond,to,a,scoped,bean,as,well,use,the,link,is,singleton,operation,to,explicitly,check,for,a,shared,singleton,instance,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,whether,this,bean,will,always,deliver,independent,instances,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,0,3,see,get,bean,see,is,singleton;boolean,is,prototype,string,name,throws,no,such,bean,definition,exception
BeanFactory -> boolean isPrototype(String name) throws NoSuchBeanDefinitionException_;1356735495;Is this bean a prototype? That is, will {@link #getBean} always return_independent instances?_<p>Note: This method returning {@code false} does not clearly indicate_a singleton object. It indicates non-independent instances, which may correspond_to a scoped bean as well. Use the {@link #isSingleton} operation to explicitly_check for a shared singleton instance._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return whether this bean will always deliver independent instances_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.0.3_@see #getBean_@see #isSingleton;boolean isPrototype(String name) throws NoSuchBeanDefinitionException_;is,this,bean,a,prototype,that,is,will,link,get,bean,always,return,independent,instances,p,note,this,method,returning,code,false,does,not,clearly,indicate,a,singleton,object,it,indicates,non,independent,instances,which,may,correspond,to,a,scoped,bean,as,well,use,the,link,is,singleton,operation,to,explicitly,check,for,a,shared,singleton,instance,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,whether,this,bean,will,always,deliver,independent,instances,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,0,3,see,get,bean,see,is,singleton;boolean,is,prototype,string,name,throws,no,such,bean,definition,exception
BeanFactory -> boolean isPrototype(String name) throws NoSuchBeanDefinitionException_;1362408075;Is this bean a prototype? That is, will {@link #getBean} always return_independent instances?_<p>Note: This method returning {@code false} does not clearly indicate_a singleton object. It indicates non-independent instances, which may correspond_to a scoped bean as well. Use the {@link #isSingleton} operation to explicitly_check for a shared singleton instance._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return whether this bean will always deliver independent instances_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.0.3_@see #getBean_@see #isSingleton;boolean isPrototype(String name) throws NoSuchBeanDefinitionException_;is,this,bean,a,prototype,that,is,will,link,get,bean,always,return,independent,instances,p,note,this,method,returning,code,false,does,not,clearly,indicate,a,singleton,object,it,indicates,non,independent,instances,which,may,correspond,to,a,scoped,bean,as,well,use,the,link,is,singleton,operation,to,explicitly,check,for,a,shared,singleton,instance,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,whether,this,bean,will,always,deliver,independent,instances,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,0,3,see,get,bean,see,is,singleton;boolean,is,prototype,string,name,throws,no,such,bean,definition,exception
BeanFactory -> boolean isPrototype(String name) throws NoSuchBeanDefinitionException_;1407874032;Is this bean a prototype? That is, will {@link #getBean} always return_independent instances?_<p>Note: This method returning {@code false} does not clearly indicate_a singleton object. It indicates non-independent instances, which may correspond_to a scoped bean as well. Use the {@link #isSingleton} operation to explicitly_check for a shared singleton instance._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return whether this bean will always deliver independent instances_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.0.3_@see #getBean_@see #isSingleton;boolean isPrototype(String name) throws NoSuchBeanDefinitionException_;is,this,bean,a,prototype,that,is,will,link,get,bean,always,return,independent,instances,p,note,this,method,returning,code,false,does,not,clearly,indicate,a,singleton,object,it,indicates,non,independent,instances,which,may,correspond,to,a,scoped,bean,as,well,use,the,link,is,singleton,operation,to,explicitly,check,for,a,shared,singleton,instance,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,whether,this,bean,will,always,deliver,independent,instances,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,0,3,see,get,bean,see,is,singleton;boolean,is,prototype,string,name,throws,no,such,bean,definition,exception
BeanFactory -> boolean isPrototype(String name) throws NoSuchBeanDefinitionException_;1408052945;Is this bean a prototype? That is, will {@link #getBean} always return_independent instances?_<p>Note: This method returning {@code false} does not clearly indicate_a singleton object. It indicates non-independent instances, which may correspond_to a scoped bean as well. Use the {@link #isSingleton} operation to explicitly_check for a shared singleton instance._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return whether this bean will always deliver independent instances_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.0.3_@see #getBean_@see #isSingleton;boolean isPrototype(String name) throws NoSuchBeanDefinitionException_;is,this,bean,a,prototype,that,is,will,link,get,bean,always,return,independent,instances,p,note,this,method,returning,code,false,does,not,clearly,indicate,a,singleton,object,it,indicates,non,independent,instances,which,may,correspond,to,a,scoped,bean,as,well,use,the,link,is,singleton,operation,to,explicitly,check,for,a,shared,singleton,instance,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,whether,this,bean,will,always,deliver,independent,instances,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,0,3,see,get,bean,see,is,singleton;boolean,is,prototype,string,name,throws,no,such,bean,definition,exception
BeanFactory -> boolean isPrototype(String name) throws NoSuchBeanDefinitionException_;1417457126;Is this bean a prototype? That is, will {@link #getBean} always return_independent instances?_<p>Note: This method returning {@code false} does not clearly indicate_a singleton object. It indicates non-independent instances, which may correspond_to a scoped bean as well. Use the {@link #isSingleton} operation to explicitly_check for a shared singleton instance._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return whether this bean will always deliver independent instances_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.0.3_@see #getBean_@see #isSingleton;boolean isPrototype(String name) throws NoSuchBeanDefinitionException_;is,this,bean,a,prototype,that,is,will,link,get,bean,always,return,independent,instances,p,note,this,method,returning,code,false,does,not,clearly,indicate,a,singleton,object,it,indicates,non,independent,instances,which,may,correspond,to,a,scoped,bean,as,well,use,the,link,is,singleton,operation,to,explicitly,check,for,a,shared,singleton,instance,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,whether,this,bean,will,always,deliver,independent,instances,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,0,3,see,get,bean,see,is,singleton;boolean,is,prototype,string,name,throws,no,such,bean,definition,exception
BeanFactory -> boolean isPrototype(String name) throws NoSuchBeanDefinitionException_;1426716313;Is this bean a prototype? That is, will {@link #getBean} always return_independent instances?_<p>Note: This method returning {@code false} does not clearly indicate_a singleton object. It indicates non-independent instances, which may correspond_to a scoped bean as well. Use the {@link #isSingleton} operation to explicitly_check for a shared singleton instance._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return whether this bean will always deliver independent instances_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.0.3_@see #getBean_@see #isSingleton;boolean isPrototype(String name) throws NoSuchBeanDefinitionException_;is,this,bean,a,prototype,that,is,will,link,get,bean,always,return,independent,instances,p,note,this,method,returning,code,false,does,not,clearly,indicate,a,singleton,object,it,indicates,non,independent,instances,which,may,correspond,to,a,scoped,bean,as,well,use,the,link,is,singleton,operation,to,explicitly,check,for,a,shared,singleton,instance,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,whether,this,bean,will,always,deliver,independent,instances,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,0,3,see,get,bean,see,is,singleton;boolean,is,prototype,string,name,throws,no,such,bean,definition,exception
BeanFactory -> boolean isPrototype(String name) throws NoSuchBeanDefinitionException_;1427144223;Is this bean a prototype? That is, will {@link #getBean} always return_independent instances?_<p>Note: This method returning {@code false} does not clearly indicate_a singleton object. It indicates non-independent instances, which may correspond_to a scoped bean as well. Use the {@link #isSingleton} operation to explicitly_check for a shared singleton instance._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return whether this bean will always deliver independent instances_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.0.3_@see #getBean_@see #isSingleton;boolean isPrototype(String name) throws NoSuchBeanDefinitionException_;is,this,bean,a,prototype,that,is,will,link,get,bean,always,return,independent,instances,p,note,this,method,returning,code,false,does,not,clearly,indicate,a,singleton,object,it,indicates,non,independent,instances,which,may,correspond,to,a,scoped,bean,as,well,use,the,link,is,singleton,operation,to,explicitly,check,for,a,shared,singleton,instance,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,whether,this,bean,will,always,deliver,independent,instances,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,0,3,see,get,bean,see,is,singleton;boolean,is,prototype,string,name,throws,no,such,bean,definition,exception
BeanFactory -> boolean isPrototype(String name) throws NoSuchBeanDefinitionException_;1442313010;Is this bean a prototype? That is, will {@link #getBean} always return_independent instances?_<p>Note: This method returning {@code false} does not clearly indicate_a singleton object. It indicates non-independent instances, which may correspond_to a scoped bean as well. Use the {@link #isSingleton} operation to explicitly_check for a shared singleton instance._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return whether this bean will always deliver independent instances_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.0.3_@see #getBean_@see #isSingleton;boolean isPrototype(String name) throws NoSuchBeanDefinitionException_;is,this,bean,a,prototype,that,is,will,link,get,bean,always,return,independent,instances,p,note,this,method,returning,code,false,does,not,clearly,indicate,a,singleton,object,it,indicates,non,independent,instances,which,may,correspond,to,a,scoped,bean,as,well,use,the,link,is,singleton,operation,to,explicitly,check,for,a,shared,singleton,instance,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,whether,this,bean,will,always,deliver,independent,instances,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,0,3,see,get,bean,see,is,singleton;boolean,is,prototype,string,name,throws,no,such,bean,definition,exception
BeanFactory -> boolean isPrototype(String name) throws NoSuchBeanDefinitionException_;1454004037;Is this bean a prototype? That is, will {@link #getBean} always return_independent instances?_<p>Note: This method returning {@code false} does not clearly indicate_a singleton object. It indicates non-independent instances, which may correspond_to a scoped bean as well. Use the {@link #isSingleton} operation to explicitly_check for a shared singleton instance._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return whether this bean will always deliver independent instances_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.0.3_@see #getBean_@see #isSingleton;boolean isPrototype(String name) throws NoSuchBeanDefinitionException_;is,this,bean,a,prototype,that,is,will,link,get,bean,always,return,independent,instances,p,note,this,method,returning,code,false,does,not,clearly,indicate,a,singleton,object,it,indicates,non,independent,instances,which,may,correspond,to,a,scoped,bean,as,well,use,the,link,is,singleton,operation,to,explicitly,check,for,a,shared,singleton,instance,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,whether,this,bean,will,always,deliver,independent,instances,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,0,3,see,get,bean,see,is,singleton;boolean,is,prototype,string,name,throws,no,such,bean,definition,exception
BeanFactory -> boolean isPrototype(String name) throws NoSuchBeanDefinitionException_;1470948126;Is this bean a prototype? That is, will {@link #getBean} always return_independent instances?_<p>Note: This method returning {@code false} does not clearly indicate_a singleton object. It indicates non-independent instances, which may correspond_to a scoped bean as well. Use the {@link #isSingleton} operation to explicitly_check for a shared singleton instance._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return whether this bean will always deliver independent instances_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.0.3_@see #getBean_@see #isSingleton;boolean isPrototype(String name) throws NoSuchBeanDefinitionException_;is,this,bean,a,prototype,that,is,will,link,get,bean,always,return,independent,instances,p,note,this,method,returning,code,false,does,not,clearly,indicate,a,singleton,object,it,indicates,non,independent,instances,which,may,correspond,to,a,scoped,bean,as,well,use,the,link,is,singleton,operation,to,explicitly,check,for,a,shared,singleton,instance,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,whether,this,bean,will,always,deliver,independent,instances,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,0,3,see,get,bean,see,is,singleton;boolean,is,prototype,string,name,throws,no,such,bean,definition,exception
BeanFactory -> boolean isPrototype(String name) throws NoSuchBeanDefinitionException_;1473796164;Is this bean a prototype? That is, will {@link #getBean} always return_independent instances?_<p>Note: This method returning {@code false} does not clearly indicate_a singleton object. It indicates non-independent instances, which may correspond_to a scoped bean as well. Use the {@link #isSingleton} operation to explicitly_check for a shared singleton instance._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return whether this bean will always deliver independent instances_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.0.3_@see #getBean_@see #isSingleton;boolean isPrototype(String name) throws NoSuchBeanDefinitionException_;is,this,bean,a,prototype,that,is,will,link,get,bean,always,return,independent,instances,p,note,this,method,returning,code,false,does,not,clearly,indicate,a,singleton,object,it,indicates,non,independent,instances,which,may,correspond,to,a,scoped,bean,as,well,use,the,link,is,singleton,operation,to,explicitly,check,for,a,shared,singleton,instance,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,whether,this,bean,will,always,deliver,independent,instances,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,0,3,see,get,bean,see,is,singleton;boolean,is,prototype,string,name,throws,no,such,bean,definition,exception
BeanFactory -> boolean isPrototype(String name) throws NoSuchBeanDefinitionException_;1477468204;Is this bean a prototype? That is, will {@link #getBean} always return_independent instances?_<p>Note: This method returning {@code false} does not clearly indicate_a singleton object. It indicates non-independent instances, which may correspond_to a scoped bean as well. Use the {@link #isSingleton} operation to explicitly_check for a shared singleton instance._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return whether this bean will always deliver independent instances_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.0.3_@see #getBean_@see #isSingleton;boolean isPrototype(String name) throws NoSuchBeanDefinitionException_;is,this,bean,a,prototype,that,is,will,link,get,bean,always,return,independent,instances,p,note,this,method,returning,code,false,does,not,clearly,indicate,a,singleton,object,it,indicates,non,independent,instances,which,may,correspond,to,a,scoped,bean,as,well,use,the,link,is,singleton,operation,to,explicitly,check,for,a,shared,singleton,instance,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,whether,this,bean,will,always,deliver,independent,instances,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,0,3,see,get,bean,see,is,singleton;boolean,is,prototype,string,name,throws,no,such,bean,definition,exception
BeanFactory -> boolean isPrototype(String name) throws NoSuchBeanDefinitionException_;1495868221;Is this bean a prototype? That is, will {@link #getBean} always return_independent instances?_<p>Note: This method returning {@code false} does not clearly indicate_a singleton object. It indicates non-independent instances, which may correspond_to a scoped bean as well. Use the {@link #isSingleton} operation to explicitly_check for a shared singleton instance._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return whether this bean will always deliver independent instances_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.0.3_@see #getBean_@see #isSingleton;boolean isPrototype(String name) throws NoSuchBeanDefinitionException_;is,this,bean,a,prototype,that,is,will,link,get,bean,always,return,independent,instances,p,note,this,method,returning,code,false,does,not,clearly,indicate,a,singleton,object,it,indicates,non,independent,instances,which,may,correspond,to,a,scoped,bean,as,well,use,the,link,is,singleton,operation,to,explicitly,check,for,a,shared,singleton,instance,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,whether,this,bean,will,always,deliver,independent,instances,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,0,3,see,get,bean,see,is,singleton;boolean,is,prototype,string,name,throws,no,such,bean,definition,exception
BeanFactory -> boolean isPrototype(String name) throws NoSuchBeanDefinitionException_;1496837955;Is this bean a prototype? That is, will {@link #getBean} always return_independent instances?_<p>Note: This method returning {@code false} does not clearly indicate_a singleton object. It indicates non-independent instances, which may correspond_to a scoped bean as well. Use the {@link #isSingleton} operation to explicitly_check for a shared singleton instance._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return whether this bean will always deliver independent instances_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.0.3_@see #getBean_@see #isSingleton;boolean isPrototype(String name) throws NoSuchBeanDefinitionException_;is,this,bean,a,prototype,that,is,will,link,get,bean,always,return,independent,instances,p,note,this,method,returning,code,false,does,not,clearly,indicate,a,singleton,object,it,indicates,non,independent,instances,which,may,correspond,to,a,scoped,bean,as,well,use,the,link,is,singleton,operation,to,explicitly,check,for,a,shared,singleton,instance,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,whether,this,bean,will,always,deliver,independent,instances,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,0,3,see,get,bean,see,is,singleton;boolean,is,prototype,string,name,throws,no,such,bean,definition,exception
BeanFactory -> boolean isPrototype(String name) throws NoSuchBeanDefinitionException_;1532385723;Is this bean a prototype? That is, will {@link #getBean} always return_independent instances?_<p>Note: This method returning {@code false} does not clearly indicate_a singleton object. It indicates non-independent instances, which may correspond_to a scoped bean as well. Use the {@link #isSingleton} operation to explicitly_check for a shared singleton instance._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return whether this bean will always deliver independent instances_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.0.3_@see #getBean_@see #isSingleton;boolean isPrototype(String name) throws NoSuchBeanDefinitionException_;is,this,bean,a,prototype,that,is,will,link,get,bean,always,return,independent,instances,p,note,this,method,returning,code,false,does,not,clearly,indicate,a,singleton,object,it,indicates,non,independent,instances,which,may,correspond,to,a,scoped,bean,as,well,use,the,link,is,singleton,operation,to,explicitly,check,for,a,shared,singleton,instance,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,whether,this,bean,will,always,deliver,independent,instances,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,0,3,see,get,bean,see,is,singleton;boolean,is,prototype,string,name,throws,no,such,bean,definition,exception
BeanFactory -> boolean isPrototype(String name) throws NoSuchBeanDefinitionException_;1536855799;Is this bean a prototype? That is, will {@link #getBean} always return_independent instances?_<p>Note: This method returning {@code false} does not clearly indicate_a singleton object. It indicates non-independent instances, which may correspond_to a scoped bean as well. Use the {@link #isSingleton} operation to explicitly_check for a shared singleton instance._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return whether this bean will always deliver independent instances_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.0.3_@see #getBean_@see #isSingleton;boolean isPrototype(String name) throws NoSuchBeanDefinitionException_;is,this,bean,a,prototype,that,is,will,link,get,bean,always,return,independent,instances,p,note,this,method,returning,code,false,does,not,clearly,indicate,a,singleton,object,it,indicates,non,independent,instances,which,may,correspond,to,a,scoped,bean,as,well,use,the,link,is,singleton,operation,to,explicitly,check,for,a,shared,singleton,instance,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,whether,this,bean,will,always,deliver,independent,instances,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,0,3,see,get,bean,see,is,singleton;boolean,is,prototype,string,name,throws,no,such,bean,definition,exception
BeanFactory -> boolean isPrototype(String name) throws NoSuchBeanDefinitionException_;1539119659;Is this bean a prototype? That is, will {@link #getBean} always return_independent instances?_<p>Note: This method returning {@code false} does not clearly indicate_a singleton object. It indicates non-independent instances, which may correspond_to a scoped bean as well. Use the {@link #isSingleton} operation to explicitly_check for a shared singleton instance._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return whether this bean will always deliver independent instances_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.0.3_@see #getBean_@see #isSingleton;boolean isPrototype(String name) throws NoSuchBeanDefinitionException_;is,this,bean,a,prototype,that,is,will,link,get,bean,always,return,independent,instances,p,note,this,method,returning,code,false,does,not,clearly,indicate,a,singleton,object,it,indicates,non,independent,instances,which,may,correspond,to,a,scoped,bean,as,well,use,the,link,is,singleton,operation,to,explicitly,check,for,a,shared,singleton,instance,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,whether,this,bean,will,always,deliver,independent,instances,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,0,3,see,get,bean,see,is,singleton;boolean,is,prototype,string,name,throws,no,such,bean,definition,exception
BeanFactory -> boolean isPrototype(String name) throws NoSuchBeanDefinitionException_;1549551674;Is this bean a prototype? That is, will {@link #getBean} always return_independent instances?_<p>Note: This method returning {@code false} does not clearly indicate_a singleton object. It indicates non-independent instances, which may correspond_to a scoped bean as well. Use the {@link #isSingleton} operation to explicitly_check for a shared singleton instance._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return whether this bean will always deliver independent instances_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.0.3_@see #getBean_@see #isSingleton;boolean isPrototype(String name) throws NoSuchBeanDefinitionException_;is,this,bean,a,prototype,that,is,will,link,get,bean,always,return,independent,instances,p,note,this,method,returning,code,false,does,not,clearly,indicate,a,singleton,object,it,indicates,non,independent,instances,which,may,correspond,to,a,scoped,bean,as,well,use,the,link,is,singleton,operation,to,explicitly,check,for,a,shared,singleton,instance,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,whether,this,bean,will,always,deliver,independent,instances,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,0,3,see,get,bean,see,is,singleton;boolean,is,prototype,string,name,throws,no,such,bean,definition,exception
BeanFactory -> <T> ObjectProvider<T> getBeanProvider(ResolvableType requiredType)_;1532385723;Return an provider for the specified bean, allowing for lazy on-demand retrieval_of instances, including availability and uniqueness options._@param requiredType type the bean must match_ can be a generic type declaration_@return a corresponding provider handle_@since 5.1;<T> ObjectProvider<T> getBeanProvider(ResolvableType requiredType)_;return,an,provider,for,the,specified,bean,allowing,for,lazy,on,demand,retrieval,of,instances,including,availability,and,uniqueness,options,param,required,type,type,the,bean,must,match,can,be,a,generic,type,declaration,return,a,corresponding,provider,handle,since,5,1;t,object,provider,t,get,bean,provider,resolvable,type,required,type
BeanFactory -> <T> ObjectProvider<T> getBeanProvider(ResolvableType requiredType)_;1536855799;Return an provider for the specified bean, allowing for lazy on-demand retrieval_of instances, including availability and uniqueness options._@param requiredType type the bean must match_ can be a generic type declaration._Note that collection types are not supported here, in contrast to reflective_injection points. For programmatically retrieving a list of beans matching a_specific type, specify the actual bean type as an argument here and subsequently_use {@link ObjectProvider#toList()} or its lazy streaming/iteration options._@return a corresponding provider handle_@since 5.1_@see ObjectProvider#stream()_@see ObjectProvider#iterator()_@see ObjectProvider#toList();<T> ObjectProvider<T> getBeanProvider(ResolvableType requiredType)_;return,an,provider,for,the,specified,bean,allowing,for,lazy,on,demand,retrieval,of,instances,including,availability,and,uniqueness,options,param,required,type,type,the,bean,must,match,can,be,a,generic,type,declaration,note,that,collection,types,are,not,supported,here,in,contrast,to,reflective,injection,points,for,programmatically,retrieving,a,list,of,beans,matching,a,specific,type,specify,the,actual,bean,type,as,an,argument,here,and,subsequently,use,link,object,provider,to,list,or,its,lazy,streaming,iteration,options,return,a,corresponding,provider,handle,since,5,1,see,object,provider,stream,see,object,provider,iterator,see,object,provider,to,list;t,object,provider,t,get,bean,provider,resolvable,type,required,type
BeanFactory -> <T> ObjectProvider<T> getBeanProvider(ResolvableType requiredType)_;1539119659;Return an provider for the specified bean, allowing for lazy on-demand retrieval_of instances, including availability and uniqueness options._@param requiredType type the bean must match_ can be a generic type declaration._Note that collection types are not supported here, in contrast to reflective_injection points. For programmatically retrieving a list of beans matching a_specific type, specify the actual bean type as an argument here and subsequently_use {@link ObjectProvider#orderedStream()} or its lazy streaming/iteration options._@return a corresponding provider handle_@since 5.1_@see ObjectProvider#iterator()_@see ObjectProvider#stream()_@see ObjectProvider#orderedStream();<T> ObjectProvider<T> getBeanProvider(ResolvableType requiredType)_;return,an,provider,for,the,specified,bean,allowing,for,lazy,on,demand,retrieval,of,instances,including,availability,and,uniqueness,options,param,required,type,type,the,bean,must,match,can,be,a,generic,type,declaration,note,that,collection,types,are,not,supported,here,in,contrast,to,reflective,injection,points,for,programmatically,retrieving,a,list,of,beans,matching,a,specific,type,specify,the,actual,bean,type,as,an,argument,here,and,subsequently,use,link,object,provider,ordered,stream,or,its,lazy,streaming,iteration,options,return,a,corresponding,provider,handle,since,5,1,see,object,provider,iterator,see,object,provider,stream,see,object,provider,ordered,stream;t,object,provider,t,get,bean,provider,resolvable,type,required,type
BeanFactory -> <T> ObjectProvider<T> getBeanProvider(ResolvableType requiredType)_;1549551674;Return an provider for the specified bean, allowing for lazy on-demand retrieval_of instances, including availability and uniqueness options._@param requiredType type the bean must match_ can be a generic type declaration._Note that collection types are not supported here, in contrast to reflective_injection points. For programmatically retrieving a list of beans matching a_specific type, specify the actual bean type as an argument here and subsequently_use {@link ObjectProvider#orderedStream()} or its lazy streaming/iteration options._@return a corresponding provider handle_@since 5.1_@see ObjectProvider#iterator()_@see ObjectProvider#stream()_@see ObjectProvider#orderedStream();<T> ObjectProvider<T> getBeanProvider(ResolvableType requiredType)_;return,an,provider,for,the,specified,bean,allowing,for,lazy,on,demand,retrieval,of,instances,including,availability,and,uniqueness,options,param,required,type,type,the,bean,must,match,can,be,a,generic,type,declaration,note,that,collection,types,are,not,supported,here,in,contrast,to,reflective,injection,points,for,programmatically,retrieving,a,list,of,beans,matching,a,specific,type,specify,the,actual,bean,type,as,an,argument,here,and,subsequently,use,link,object,provider,ordered,stream,or,its,lazy,streaming,iteration,options,return,a,corresponding,provider,handle,since,5,1,see,object,provider,iterator,see,object,provider,stream,see,object,provider,ordered,stream;t,object,provider,t,get,bean,provider,resolvable,type,required,type
BeanFactory -> Object getBean(String name) throws BeansException_;1328020251;Return an instance, which may be shared or independent, of the specified bean._<p>This method allows a Spring BeanFactory to be used as a replacement for the_Singleton or Prototype design pattern. Callers may retain references to_returned objects in the case of Singleton beans._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to retrieve_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no bean definition_with the specified name_@throws BeansException if the bean could not be obtained;Object getBean(String name) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,this,method,allows,a,spring,bean,factory,to,be,used,as,a,replacement,for,the,singleton,or,prototype,design,pattern,callers,may,retain,references,to,returned,objects,in,the,case,of,singleton,beans,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,retrieve,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,specified,name,throws,beans,exception,if,the,bean,could,not,be,obtained;object,get,bean,string,name,throws,beans,exception
BeanFactory -> Object getBean(String name) throws BeansException_;1356735495;Return an instance, which may be shared or independent, of the specified bean._<p>This method allows a Spring BeanFactory to be used as a replacement for the_Singleton or Prototype design pattern. Callers may retain references to_returned objects in the case of Singleton beans._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to retrieve_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no bean definition_with the specified name_@throws BeansException if the bean could not be obtained;Object getBean(String name) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,this,method,allows,a,spring,bean,factory,to,be,used,as,a,replacement,for,the,singleton,or,prototype,design,pattern,callers,may,retain,references,to,returned,objects,in,the,case,of,singleton,beans,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,retrieve,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,specified,name,throws,beans,exception,if,the,bean,could,not,be,obtained;object,get,bean,string,name,throws,beans,exception
BeanFactory -> Object getBean(String name) throws BeansException_;1362408075;Return an instance, which may be shared or independent, of the specified bean._<p>This method allows a Spring BeanFactory to be used as a replacement for the_Singleton or Prototype design pattern. Callers may retain references to_returned objects in the case of Singleton beans._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to retrieve_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no bean definition_with the specified name_@throws BeansException if the bean could not be obtained;Object getBean(String name) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,this,method,allows,a,spring,bean,factory,to,be,used,as,a,replacement,for,the,singleton,or,prototype,design,pattern,callers,may,retain,references,to,returned,objects,in,the,case,of,singleton,beans,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,retrieve,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,specified,name,throws,beans,exception,if,the,bean,could,not,be,obtained;object,get,bean,string,name,throws,beans,exception
BeanFactory -> Object getBean(String name) throws BeansException_;1407874032;Return an instance, which may be shared or independent, of the specified bean._<p>This method allows a Spring BeanFactory to be used as a replacement for the_Singleton or Prototype design pattern. Callers may retain references to_returned objects in the case of Singleton beans._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to retrieve_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no bean definition_with the specified name_@throws BeansException if the bean could not be obtained;Object getBean(String name) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,this,method,allows,a,spring,bean,factory,to,be,used,as,a,replacement,for,the,singleton,or,prototype,design,pattern,callers,may,retain,references,to,returned,objects,in,the,case,of,singleton,beans,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,retrieve,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,specified,name,throws,beans,exception,if,the,bean,could,not,be,obtained;object,get,bean,string,name,throws,beans,exception
BeanFactory -> Object getBean(String name) throws BeansException_;1408052945;Return an instance, which may be shared or independent, of the specified bean._<p>This method allows a Spring BeanFactory to be used as a replacement for the_Singleton or Prototype design pattern. Callers may retain references to_returned objects in the case of Singleton beans._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to retrieve_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no bean definition_with the specified name_@throws BeansException if the bean could not be obtained;Object getBean(String name) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,this,method,allows,a,spring,bean,factory,to,be,used,as,a,replacement,for,the,singleton,or,prototype,design,pattern,callers,may,retain,references,to,returned,objects,in,the,case,of,singleton,beans,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,retrieve,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,specified,name,throws,beans,exception,if,the,bean,could,not,be,obtained;object,get,bean,string,name,throws,beans,exception
BeanFactory -> Object getBean(String name) throws BeansException_;1417457126;Return an instance, which may be shared or independent, of the specified bean._<p>This method allows a Spring BeanFactory to be used as a replacement for the_Singleton or Prototype design pattern. Callers may retain references to_returned objects in the case of Singleton beans._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to retrieve_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no bean definition_with the specified name_@throws BeansException if the bean could not be obtained;Object getBean(String name) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,this,method,allows,a,spring,bean,factory,to,be,used,as,a,replacement,for,the,singleton,or,prototype,design,pattern,callers,may,retain,references,to,returned,objects,in,the,case,of,singleton,beans,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,retrieve,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,specified,name,throws,beans,exception,if,the,bean,could,not,be,obtained;object,get,bean,string,name,throws,beans,exception
BeanFactory -> Object getBean(String name) throws BeansException_;1426716313;Return an instance, which may be shared or independent, of the specified bean._<p>This method allows a Spring BeanFactory to be used as a replacement for the_Singleton or Prototype design pattern. Callers may retain references to_returned objects in the case of Singleton beans._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to retrieve_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no bean definition_with the specified name_@throws BeansException if the bean could not be obtained;Object getBean(String name) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,this,method,allows,a,spring,bean,factory,to,be,used,as,a,replacement,for,the,singleton,or,prototype,design,pattern,callers,may,retain,references,to,returned,objects,in,the,case,of,singleton,beans,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,retrieve,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,specified,name,throws,beans,exception,if,the,bean,could,not,be,obtained;object,get,bean,string,name,throws,beans,exception
BeanFactory -> Object getBean(String name) throws BeansException_;1427144223;Return an instance, which may be shared or independent, of the specified bean._<p>This method allows a Spring BeanFactory to be used as a replacement for the_Singleton or Prototype design pattern. Callers may retain references to_returned objects in the case of Singleton beans._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to retrieve_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no bean definition_with the specified name_@throws BeansException if the bean could not be obtained;Object getBean(String name) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,this,method,allows,a,spring,bean,factory,to,be,used,as,a,replacement,for,the,singleton,or,prototype,design,pattern,callers,may,retain,references,to,returned,objects,in,the,case,of,singleton,beans,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,retrieve,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,specified,name,throws,beans,exception,if,the,bean,could,not,be,obtained;object,get,bean,string,name,throws,beans,exception
BeanFactory -> Object getBean(String name) throws BeansException_;1442313010;Return an instance, which may be shared or independent, of the specified bean._<p>This method allows a Spring BeanFactory to be used as a replacement for the_Singleton or Prototype design pattern. Callers may retain references to_returned objects in the case of Singleton beans._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to retrieve_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no bean definition_with the specified name_@throws BeansException if the bean could not be obtained;Object getBean(String name) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,this,method,allows,a,spring,bean,factory,to,be,used,as,a,replacement,for,the,singleton,or,prototype,design,pattern,callers,may,retain,references,to,returned,objects,in,the,case,of,singleton,beans,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,retrieve,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,specified,name,throws,beans,exception,if,the,bean,could,not,be,obtained;object,get,bean,string,name,throws,beans,exception
BeanFactory -> Object getBean(String name) throws BeansException_;1454004037;Return an instance, which may be shared or independent, of the specified bean._<p>This method allows a Spring BeanFactory to be used as a replacement for the_Singleton or Prototype design pattern. Callers may retain references to_returned objects in the case of Singleton beans._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to retrieve_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no bean definition_with the specified name_@throws BeansException if the bean could not be obtained;Object getBean(String name) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,this,method,allows,a,spring,bean,factory,to,be,used,as,a,replacement,for,the,singleton,or,prototype,design,pattern,callers,may,retain,references,to,returned,objects,in,the,case,of,singleton,beans,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,retrieve,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,specified,name,throws,beans,exception,if,the,bean,could,not,be,obtained;object,get,bean,string,name,throws,beans,exception
BeanFactory -> Object getBean(String name) throws BeansException_;1470948126;Return an instance, which may be shared or independent, of the specified bean._<p>This method allows a Spring BeanFactory to be used as a replacement for the_Singleton or Prototype design pattern. Callers may retain references to_returned objects in the case of Singleton beans._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to retrieve_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no bean definition_with the specified name_@throws BeansException if the bean could not be obtained;Object getBean(String name) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,this,method,allows,a,spring,bean,factory,to,be,used,as,a,replacement,for,the,singleton,or,prototype,design,pattern,callers,may,retain,references,to,returned,objects,in,the,case,of,singleton,beans,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,retrieve,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,specified,name,throws,beans,exception,if,the,bean,could,not,be,obtained;object,get,bean,string,name,throws,beans,exception
BeanFactory -> Object getBean(String name) throws BeansException_;1473796164;Return an instance, which may be shared or independent, of the specified bean._<p>This method allows a Spring BeanFactory to be used as a replacement for the_Singleton or Prototype design pattern. Callers may retain references to_returned objects in the case of Singleton beans._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to retrieve_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no bean definition_with the specified name_@throws BeansException if the bean could not be obtained;Object getBean(String name) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,this,method,allows,a,spring,bean,factory,to,be,used,as,a,replacement,for,the,singleton,or,prototype,design,pattern,callers,may,retain,references,to,returned,objects,in,the,case,of,singleton,beans,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,retrieve,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,specified,name,throws,beans,exception,if,the,bean,could,not,be,obtained;object,get,bean,string,name,throws,beans,exception
BeanFactory -> Object getBean(String name) throws BeansException_;1477468204;Return an instance, which may be shared or independent, of the specified bean._<p>This method allows a Spring BeanFactory to be used as a replacement for the_Singleton or Prototype design pattern. Callers may retain references to_returned objects in the case of Singleton beans._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to retrieve_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no bean definition_with the specified name_@throws BeansException if the bean could not be obtained;Object getBean(String name) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,this,method,allows,a,spring,bean,factory,to,be,used,as,a,replacement,for,the,singleton,or,prototype,design,pattern,callers,may,retain,references,to,returned,objects,in,the,case,of,singleton,beans,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,retrieve,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,specified,name,throws,beans,exception,if,the,bean,could,not,be,obtained;object,get,bean,string,name,throws,beans,exception
BeanFactory -> Object getBean(String name) throws BeansException_;1495868221;Return an instance, which may be shared or independent, of the specified bean._<p>This method allows a Spring BeanFactory to be used as a replacement for the_Singleton or Prototype design pattern. Callers may retain references to_returned objects in the case of Singleton beans._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to retrieve_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no bean definition_with the specified name_@throws BeansException if the bean could not be obtained;Object getBean(String name) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,this,method,allows,a,spring,bean,factory,to,be,used,as,a,replacement,for,the,singleton,or,prototype,design,pattern,callers,may,retain,references,to,returned,objects,in,the,case,of,singleton,beans,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,retrieve,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,specified,name,throws,beans,exception,if,the,bean,could,not,be,obtained;object,get,bean,string,name,throws,beans,exception
BeanFactory -> Object getBean(String name) throws BeansException_;1496837955;Return an instance, which may be shared or independent, of the specified bean._<p>This method allows a Spring BeanFactory to be used as a replacement for the_Singleton or Prototype design pattern. Callers may retain references to_returned objects in the case of Singleton beans._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to retrieve_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no bean definition_with the specified name_@throws BeansException if the bean could not be obtained;Object getBean(String name) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,this,method,allows,a,spring,bean,factory,to,be,used,as,a,replacement,for,the,singleton,or,prototype,design,pattern,callers,may,retain,references,to,returned,objects,in,the,case,of,singleton,beans,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,retrieve,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,specified,name,throws,beans,exception,if,the,bean,could,not,be,obtained;object,get,bean,string,name,throws,beans,exception
BeanFactory -> Object getBean(String name) throws BeansException_;1532385723;Return an instance, which may be shared or independent, of the specified bean._<p>This method allows a Spring BeanFactory to be used as a replacement for the_Singleton or Prototype design pattern. Callers may retain references to_returned objects in the case of Singleton beans._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to retrieve_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no bean definition_with the specified name_@throws BeansException if the bean could not be obtained;Object getBean(String name) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,this,method,allows,a,spring,bean,factory,to,be,used,as,a,replacement,for,the,singleton,or,prototype,design,pattern,callers,may,retain,references,to,returned,objects,in,the,case,of,singleton,beans,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,retrieve,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,specified,name,throws,beans,exception,if,the,bean,could,not,be,obtained;object,get,bean,string,name,throws,beans,exception
BeanFactory -> Object getBean(String name) throws BeansException_;1536855799;Return an instance, which may be shared or independent, of the specified bean._<p>This method allows a Spring BeanFactory to be used as a replacement for the_Singleton or Prototype design pattern. Callers may retain references to_returned objects in the case of Singleton beans._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to retrieve_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no bean definition_with the specified name_@throws BeansException if the bean could not be obtained;Object getBean(String name) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,this,method,allows,a,spring,bean,factory,to,be,used,as,a,replacement,for,the,singleton,or,prototype,design,pattern,callers,may,retain,references,to,returned,objects,in,the,case,of,singleton,beans,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,retrieve,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,specified,name,throws,beans,exception,if,the,bean,could,not,be,obtained;object,get,bean,string,name,throws,beans,exception
BeanFactory -> Object getBean(String name) throws BeansException_;1539119659;Return an instance, which may be shared or independent, of the specified bean._<p>This method allows a Spring BeanFactory to be used as a replacement for the_Singleton or Prototype design pattern. Callers may retain references to_returned objects in the case of Singleton beans._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to retrieve_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no bean definition_with the specified name_@throws BeansException if the bean could not be obtained;Object getBean(String name) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,this,method,allows,a,spring,bean,factory,to,be,used,as,a,replacement,for,the,singleton,or,prototype,design,pattern,callers,may,retain,references,to,returned,objects,in,the,case,of,singleton,beans,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,retrieve,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,bean,definition,with,the,specified,name,throws,beans,exception,if,the,bean,could,not,be,obtained;object,get,bean,string,name,throws,beans,exception
BeanFactory -> Object getBean(String name) throws BeansException_;1549551674;Return an instance, which may be shared or independent, of the specified bean._<p>This method allows a Spring BeanFactory to be used as a replacement for the_Singleton or Prototype design pattern. Callers may retain references to_returned objects in the case of Singleton beans._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to retrieve_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no bean with the specified name_@throws BeansException if the bean could not be obtained;Object getBean(String name) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,this,method,allows,a,spring,bean,factory,to,be,used,as,a,replacement,for,the,singleton,or,prototype,design,pattern,callers,may,retain,references,to,returned,objects,in,the,case,of,singleton,beans,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,retrieve,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,specified,name,throws,beans,exception,if,the,bean,could,not,be,obtained;object,get,bean,string,name,throws,beans,exception
BeanFactory -> boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException_;1427144223;Check whether the bean with the given name matches the specified type._More specifically, check whether a {@link #getBean} call for the given name_would return an object that is assignable to the specified target type._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@param typeToMatch the type to match against (as a {@code Class})_@return {@code true} if the bean type matches,_{@code false} if it doesn't match or cannot be determined yet_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.0.1_@see #getBean_@see #getType;boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException_;check,whether,the,bean,with,the,given,name,matches,the,specified,type,more,specifically,check,whether,a,link,get,bean,call,for,the,given,name,would,return,an,object,that,is,assignable,to,the,specified,target,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,param,type,to,match,the,type,to,match,against,as,a,code,class,return,code,true,if,the,bean,type,matches,code,false,if,it,doesn,t,match,or,cannot,be,determined,yet,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,0,1,see,get,bean,see,get,type;boolean,is,type,match,string,name,class,type,to,match,throws,no,such,bean,definition,exception
BeanFactory -> boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException_;1442313010;Check whether the bean with the given name matches the specified type._More specifically, check whether a {@link #getBean} call for the given name_would return an object that is assignable to the specified target type._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@param typeToMatch the type to match against (as a {@code Class})_@return {@code true} if the bean type matches,_{@code false} if it doesn't match or cannot be determined yet_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.0.1_@see #getBean_@see #getType;boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException_;check,whether,the,bean,with,the,given,name,matches,the,specified,type,more,specifically,check,whether,a,link,get,bean,call,for,the,given,name,would,return,an,object,that,is,assignable,to,the,specified,target,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,param,type,to,match,the,type,to,match,against,as,a,code,class,return,code,true,if,the,bean,type,matches,code,false,if,it,doesn,t,match,or,cannot,be,determined,yet,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,0,1,see,get,bean,see,get,type;boolean,is,type,match,string,name,class,type,to,match,throws,no,such,bean,definition,exception
BeanFactory -> boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException_;1454004037;Check whether the bean with the given name matches the specified type._More specifically, check whether a {@link #getBean} call for the given name_would return an object that is assignable to the specified target type._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@param typeToMatch the type to match against (as a {@code Class})_@return {@code true} if the bean type matches,_{@code false} if it doesn't match or cannot be determined yet_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.0.1_@see #getBean_@see #getType;boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException_;check,whether,the,bean,with,the,given,name,matches,the,specified,type,more,specifically,check,whether,a,link,get,bean,call,for,the,given,name,would,return,an,object,that,is,assignable,to,the,specified,target,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,param,type,to,match,the,type,to,match,against,as,a,code,class,return,code,true,if,the,bean,type,matches,code,false,if,it,doesn,t,match,or,cannot,be,determined,yet,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,0,1,see,get,bean,see,get,type;boolean,is,type,match,string,name,class,type,to,match,throws,no,such,bean,definition,exception
BeanFactory -> boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException_;1470948126;Check whether the bean with the given name matches the specified type._More specifically, check whether a {@link #getBean} call for the given name_would return an object that is assignable to the specified target type._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@param typeToMatch the type to match against (as a {@code Class})_@return {@code true} if the bean type matches,_{@code false} if it doesn't match or cannot be determined yet_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.0.1_@see #getBean_@see #getType;boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException_;check,whether,the,bean,with,the,given,name,matches,the,specified,type,more,specifically,check,whether,a,link,get,bean,call,for,the,given,name,would,return,an,object,that,is,assignable,to,the,specified,target,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,param,type,to,match,the,type,to,match,against,as,a,code,class,return,code,true,if,the,bean,type,matches,code,false,if,it,doesn,t,match,or,cannot,be,determined,yet,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,0,1,see,get,bean,see,get,type;boolean,is,type,match,string,name,class,type,to,match,throws,no,such,bean,definition,exception
BeanFactory -> boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException_;1473796164;Check whether the bean with the given name matches the specified type._More specifically, check whether a {@link #getBean} call for the given name_would return an object that is assignable to the specified target type._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@param typeToMatch the type to match against (as a {@code Class})_@return {@code true} if the bean type matches,_{@code false} if it doesn't match or cannot be determined yet_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.0.1_@see #getBean_@see #getType;boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException_;check,whether,the,bean,with,the,given,name,matches,the,specified,type,more,specifically,check,whether,a,link,get,bean,call,for,the,given,name,would,return,an,object,that,is,assignable,to,the,specified,target,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,param,type,to,match,the,type,to,match,against,as,a,code,class,return,code,true,if,the,bean,type,matches,code,false,if,it,doesn,t,match,or,cannot,be,determined,yet,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,0,1,see,get,bean,see,get,type;boolean,is,type,match,string,name,class,type,to,match,throws,no,such,bean,definition,exception
BeanFactory -> boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException_;1477468204;Check whether the bean with the given name matches the specified type._More specifically, check whether a {@link #getBean} call for the given name_would return an object that is assignable to the specified target type._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@param typeToMatch the type to match against (as a {@code Class})_@return {@code true} if the bean type matches,_{@code false} if it doesn't match or cannot be determined yet_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.0.1_@see #getBean_@see #getType;boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException_;check,whether,the,bean,with,the,given,name,matches,the,specified,type,more,specifically,check,whether,a,link,get,bean,call,for,the,given,name,would,return,an,object,that,is,assignable,to,the,specified,target,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,param,type,to,match,the,type,to,match,against,as,a,code,class,return,code,true,if,the,bean,type,matches,code,false,if,it,doesn,t,match,or,cannot,be,determined,yet,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,0,1,see,get,bean,see,get,type;boolean,is,type,match,string,name,class,type,to,match,throws,no,such,bean,definition,exception
BeanFactory -> boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException_;1495868221;Check whether the bean with the given name matches the specified type._More specifically, check whether a {@link #getBean} call for the given name_would return an object that is assignable to the specified target type._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@param typeToMatch the type to match against (as a {@code Class})_@return {@code true} if the bean type matches,_{@code false} if it doesn't match or cannot be determined yet_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.0.1_@see #getBean_@see #getType;boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException_;check,whether,the,bean,with,the,given,name,matches,the,specified,type,more,specifically,check,whether,a,link,get,bean,call,for,the,given,name,would,return,an,object,that,is,assignable,to,the,specified,target,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,param,type,to,match,the,type,to,match,against,as,a,code,class,return,code,true,if,the,bean,type,matches,code,false,if,it,doesn,t,match,or,cannot,be,determined,yet,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,0,1,see,get,bean,see,get,type;boolean,is,type,match,string,name,class,type,to,match,throws,no,such,bean,definition,exception
BeanFactory -> boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException_;1532385723;Check whether the bean with the given name matches the specified type._More specifically, check whether a {@link #getBean} call for the given name_would return an object that is assignable to the specified target type._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@param typeToMatch the type to match against (as a {@code Class})_@return {@code true} if the bean type matches,_{@code false} if it doesn't match or cannot be determined yet_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.0.1_@see #getBean_@see #getType;boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException_;check,whether,the,bean,with,the,given,name,matches,the,specified,type,more,specifically,check,whether,a,link,get,bean,call,for,the,given,name,would,return,an,object,that,is,assignable,to,the,specified,target,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,param,type,to,match,the,type,to,match,against,as,a,code,class,return,code,true,if,the,bean,type,matches,code,false,if,it,doesn,t,match,or,cannot,be,determined,yet,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,0,1,see,get,bean,see,get,type;boolean,is,type,match,string,name,class,type,to,match,throws,no,such,bean,definition,exception
BeanFactory -> boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException_;1536855799;Check whether the bean with the given name matches the specified type._More specifically, check whether a {@link #getBean} call for the given name_would return an object that is assignable to the specified target type._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@param typeToMatch the type to match against (as a {@code Class})_@return {@code true} if the bean type matches,_{@code false} if it doesn't match or cannot be determined yet_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.0.1_@see #getBean_@see #getType;boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException_;check,whether,the,bean,with,the,given,name,matches,the,specified,type,more,specifically,check,whether,a,link,get,bean,call,for,the,given,name,would,return,an,object,that,is,assignable,to,the,specified,target,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,param,type,to,match,the,type,to,match,against,as,a,code,class,return,code,true,if,the,bean,type,matches,code,false,if,it,doesn,t,match,or,cannot,be,determined,yet,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,0,1,see,get,bean,see,get,type;boolean,is,type,match,string,name,class,type,to,match,throws,no,such,bean,definition,exception
BeanFactory -> boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException_;1539119659;Check whether the bean with the given name matches the specified type._More specifically, check whether a {@link #getBean} call for the given name_would return an object that is assignable to the specified target type._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@param typeToMatch the type to match against (as a {@code Class})_@return {@code true} if the bean type matches,_{@code false} if it doesn't match or cannot be determined yet_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.0.1_@see #getBean_@see #getType;boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException_;check,whether,the,bean,with,the,given,name,matches,the,specified,type,more,specifically,check,whether,a,link,get,bean,call,for,the,given,name,would,return,an,object,that,is,assignable,to,the,specified,target,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,param,type,to,match,the,type,to,match,against,as,a,code,class,return,code,true,if,the,bean,type,matches,code,false,if,it,doesn,t,match,or,cannot,be,determined,yet,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,0,1,see,get,bean,see,get,type;boolean,is,type,match,string,name,class,type,to,match,throws,no,such,bean,definition,exception
BeanFactory -> boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException_;1549551674;Check whether the bean with the given name matches the specified type._More specifically, check whether a {@link #getBean} call for the given name_would return an object that is assignable to the specified target type._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@param typeToMatch the type to match against (as a {@code Class})_@return {@code true} if the bean type matches,_{@code false} if it doesn't match or cannot be determined yet_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.0.1_@see #getBean_@see #getType;boolean isTypeMatch(String name, Class<?> typeToMatch) throws NoSuchBeanDefinitionException_;check,whether,the,bean,with,the,given,name,matches,the,specified,type,more,specifically,check,whether,a,link,get,bean,call,for,the,given,name,would,return,an,object,that,is,assignable,to,the,specified,target,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,param,type,to,match,the,type,to,match,against,as,a,code,class,return,code,true,if,the,bean,type,matches,code,false,if,it,doesn,t,match,or,cannot,be,determined,yet,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,0,1,see,get,bean,see,get,type;boolean,is,type,match,string,name,class,type,to,match,throws,no,such,bean,definition,exception
BeanFactory -> boolean isTypeMatch(String name, Class<?> targetType) throws NoSuchBeanDefinitionException_;1328020251;Check whether the bean with the given name matches the specified type._More specifically, check whether a {@link #getBean} call for the given name_would return an object that is assignable to the specified target type._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@param targetType the type to match against_@return <code>true</code> if the bean type matches,_<code>false</code> if it doesn't match or cannot be determined yet_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.0.1_@see #getBean_@see #getType;boolean isTypeMatch(String name, Class<?> targetType) throws NoSuchBeanDefinitionException_;check,whether,the,bean,with,the,given,name,matches,the,specified,type,more,specifically,check,whether,a,link,get,bean,call,for,the,given,name,would,return,an,object,that,is,assignable,to,the,specified,target,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,param,target,type,the,type,to,match,against,return,code,true,code,if,the,bean,type,matches,code,false,code,if,it,doesn,t,match,or,cannot,be,determined,yet,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,0,1,see,get,bean,see,get,type;boolean,is,type,match,string,name,class,target,type,throws,no,such,bean,definition,exception
BeanFactory -> boolean isTypeMatch(String name, Class<?> targetType) throws NoSuchBeanDefinitionException_;1356735495;Check whether the bean with the given name matches the specified type._More specifically, check whether a {@link #getBean} call for the given name_would return an object that is assignable to the specified target type._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@param targetType the type to match against_@return {@code true} if the bean type matches,_{@code false} if it doesn't match or cannot be determined yet_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.0.1_@see #getBean_@see #getType;boolean isTypeMatch(String name, Class<?> targetType) throws NoSuchBeanDefinitionException_;check,whether,the,bean,with,the,given,name,matches,the,specified,type,more,specifically,check,whether,a,link,get,bean,call,for,the,given,name,would,return,an,object,that,is,assignable,to,the,specified,target,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,param,target,type,the,type,to,match,against,return,code,true,if,the,bean,type,matches,code,false,if,it,doesn,t,match,or,cannot,be,determined,yet,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,0,1,see,get,bean,see,get,type;boolean,is,type,match,string,name,class,target,type,throws,no,such,bean,definition,exception
BeanFactory -> boolean isTypeMatch(String name, Class<?> targetType) throws NoSuchBeanDefinitionException_;1362408075;Check whether the bean with the given name matches the specified type._More specifically, check whether a {@link #getBean} call for the given name_would return an object that is assignable to the specified target type._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@param targetType the type to match against_@return {@code true} if the bean type matches,_{@code false} if it doesn't match or cannot be determined yet_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.0.1_@see #getBean_@see #getType;boolean isTypeMatch(String name, Class<?> targetType) throws NoSuchBeanDefinitionException_;check,whether,the,bean,with,the,given,name,matches,the,specified,type,more,specifically,check,whether,a,link,get,bean,call,for,the,given,name,would,return,an,object,that,is,assignable,to,the,specified,target,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,param,target,type,the,type,to,match,against,return,code,true,if,the,bean,type,matches,code,false,if,it,doesn,t,match,or,cannot,be,determined,yet,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,0,1,see,get,bean,see,get,type;boolean,is,type,match,string,name,class,target,type,throws,no,such,bean,definition,exception
BeanFactory -> boolean isTypeMatch(String name, Class<?> targetType) throws NoSuchBeanDefinitionException_;1407874032;Check whether the bean with the given name matches the specified type._More specifically, check whether a {@link #getBean} call for the given name_would return an object that is assignable to the specified target type._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@param targetType the type to match against_@return {@code true} if the bean type matches,_{@code false} if it doesn't match or cannot be determined yet_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.0.1_@see #getBean_@see #getType;boolean isTypeMatch(String name, Class<?> targetType) throws NoSuchBeanDefinitionException_;check,whether,the,bean,with,the,given,name,matches,the,specified,type,more,specifically,check,whether,a,link,get,bean,call,for,the,given,name,would,return,an,object,that,is,assignable,to,the,specified,target,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,param,target,type,the,type,to,match,against,return,code,true,if,the,bean,type,matches,code,false,if,it,doesn,t,match,or,cannot,be,determined,yet,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,0,1,see,get,bean,see,get,type;boolean,is,type,match,string,name,class,target,type,throws,no,such,bean,definition,exception
BeanFactory -> boolean isTypeMatch(String name, Class<?> targetType) throws NoSuchBeanDefinitionException_;1408052945;Check whether the bean with the given name matches the specified type._More specifically, check whether a {@link #getBean} call for the given name_would return an object that is assignable to the specified target type._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@param targetType the type to match against_@return {@code true} if the bean type matches,_{@code false} if it doesn't match or cannot be determined yet_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.0.1_@see #getBean_@see #getType;boolean isTypeMatch(String name, Class<?> targetType) throws NoSuchBeanDefinitionException_;check,whether,the,bean,with,the,given,name,matches,the,specified,type,more,specifically,check,whether,a,link,get,bean,call,for,the,given,name,would,return,an,object,that,is,assignable,to,the,specified,target,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,param,target,type,the,type,to,match,against,return,code,true,if,the,bean,type,matches,code,false,if,it,doesn,t,match,or,cannot,be,determined,yet,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,0,1,see,get,bean,see,get,type;boolean,is,type,match,string,name,class,target,type,throws,no,such,bean,definition,exception
BeanFactory -> boolean isTypeMatch(String name, Class<?> targetType) throws NoSuchBeanDefinitionException_;1417457126;Check whether the bean with the given name matches the specified type._More specifically, check whether a {@link #getBean} call for the given name_would return an object that is assignable to the specified target type._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@param targetType the type to match against_@return {@code true} if the bean type matches,_{@code false} if it doesn't match or cannot be determined yet_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.0.1_@see #getBean_@see #getType;boolean isTypeMatch(String name, Class<?> targetType) throws NoSuchBeanDefinitionException_;check,whether,the,bean,with,the,given,name,matches,the,specified,type,more,specifically,check,whether,a,link,get,bean,call,for,the,given,name,would,return,an,object,that,is,assignable,to,the,specified,target,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,param,target,type,the,type,to,match,against,return,code,true,if,the,bean,type,matches,code,false,if,it,doesn,t,match,or,cannot,be,determined,yet,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,0,1,see,get,bean,see,get,type;boolean,is,type,match,string,name,class,target,type,throws,no,such,bean,definition,exception
BeanFactory -> boolean isTypeMatch(String name, Class<?> targetType) throws NoSuchBeanDefinitionException_;1426716313;Check whether the bean with the given name matches the specified type._More specifically, check whether a {@link #getBean} call for the given name_would return an object that is assignable to the specified target type._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@param targetType the type to match against (as a {@code Class})_@return {@code true} if the bean type matches,_{@code false} if it doesn't match or cannot be determined yet_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 2.0.1_@see #getBean_@see #getType;boolean isTypeMatch(String name, Class<?> targetType) throws NoSuchBeanDefinitionException_;check,whether,the,bean,with,the,given,name,matches,the,specified,type,more,specifically,check,whether,a,link,get,bean,call,for,the,given,name,would,return,an,object,that,is,assignable,to,the,specified,target,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,param,target,type,the,type,to,match,against,as,a,code,class,return,code,true,if,the,bean,type,matches,code,false,if,it,doesn,t,match,or,cannot,be,determined,yet,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,2,0,1,see,get,bean,see,get,type;boolean,is,type,match,string,name,class,target,type,throws,no,such,bean,definition,exception
BeanFactory -> boolean isSingleton(String name) throws NoSuchBeanDefinitionException_;1328020251;Is this bean a shared singleton? That is, will {@link #getBean} always_return the same instance?_<p>Note: This method returning <code>false</code> does not clearly indicate_independent instances. It indicates non-singleton instances, which may correspond_to a scoped bean as well. Use the {@link #isPrototype} operation to explicitly_check for independent instances._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return whether this bean corresponds to a singleton instance_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@see #getBean_@see #isPrototype;boolean isSingleton(String name) throws NoSuchBeanDefinitionException_;is,this,bean,a,shared,singleton,that,is,will,link,get,bean,always,return,the,same,instance,p,note,this,method,returning,code,false,code,does,not,clearly,indicate,independent,instances,it,indicates,non,singleton,instances,which,may,correspond,to,a,scoped,bean,as,well,use,the,link,is,prototype,operation,to,explicitly,check,for,independent,instances,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,whether,this,bean,corresponds,to,a,singleton,instance,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,see,get,bean,see,is,prototype;boolean,is,singleton,string,name,throws,no,such,bean,definition,exception
BeanFactory -> boolean isSingleton(String name) throws NoSuchBeanDefinitionException_;1356735495;Is this bean a shared singleton? That is, will {@link #getBean} always_return the same instance?_<p>Note: This method returning {@code false} does not clearly indicate_independent instances. It indicates non-singleton instances, which may correspond_to a scoped bean as well. Use the {@link #isPrototype} operation to explicitly_check for independent instances._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return whether this bean corresponds to a singleton instance_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@see #getBean_@see #isPrototype;boolean isSingleton(String name) throws NoSuchBeanDefinitionException_;is,this,bean,a,shared,singleton,that,is,will,link,get,bean,always,return,the,same,instance,p,note,this,method,returning,code,false,does,not,clearly,indicate,independent,instances,it,indicates,non,singleton,instances,which,may,correspond,to,a,scoped,bean,as,well,use,the,link,is,prototype,operation,to,explicitly,check,for,independent,instances,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,whether,this,bean,corresponds,to,a,singleton,instance,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,see,get,bean,see,is,prototype;boolean,is,singleton,string,name,throws,no,such,bean,definition,exception
BeanFactory -> boolean isSingleton(String name) throws NoSuchBeanDefinitionException_;1362408075;Is this bean a shared singleton? That is, will {@link #getBean} always_return the same instance?_<p>Note: This method returning {@code false} does not clearly indicate_independent instances. It indicates non-singleton instances, which may correspond_to a scoped bean as well. Use the {@link #isPrototype} operation to explicitly_check for independent instances._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return whether this bean corresponds to a singleton instance_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@see #getBean_@see #isPrototype;boolean isSingleton(String name) throws NoSuchBeanDefinitionException_;is,this,bean,a,shared,singleton,that,is,will,link,get,bean,always,return,the,same,instance,p,note,this,method,returning,code,false,does,not,clearly,indicate,independent,instances,it,indicates,non,singleton,instances,which,may,correspond,to,a,scoped,bean,as,well,use,the,link,is,prototype,operation,to,explicitly,check,for,independent,instances,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,whether,this,bean,corresponds,to,a,singleton,instance,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,see,get,bean,see,is,prototype;boolean,is,singleton,string,name,throws,no,such,bean,definition,exception
BeanFactory -> boolean isSingleton(String name) throws NoSuchBeanDefinitionException_;1407874032;Is this bean a shared singleton? That is, will {@link #getBean} always_return the same instance?_<p>Note: This method returning {@code false} does not clearly indicate_independent instances. It indicates non-singleton instances, which may correspond_to a scoped bean as well. Use the {@link #isPrototype} operation to explicitly_check for independent instances._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return whether this bean corresponds to a singleton instance_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@see #getBean_@see #isPrototype;boolean isSingleton(String name) throws NoSuchBeanDefinitionException_;is,this,bean,a,shared,singleton,that,is,will,link,get,bean,always,return,the,same,instance,p,note,this,method,returning,code,false,does,not,clearly,indicate,independent,instances,it,indicates,non,singleton,instances,which,may,correspond,to,a,scoped,bean,as,well,use,the,link,is,prototype,operation,to,explicitly,check,for,independent,instances,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,whether,this,bean,corresponds,to,a,singleton,instance,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,see,get,bean,see,is,prototype;boolean,is,singleton,string,name,throws,no,such,bean,definition,exception
BeanFactory -> boolean isSingleton(String name) throws NoSuchBeanDefinitionException_;1408052945;Is this bean a shared singleton? That is, will {@link #getBean} always_return the same instance?_<p>Note: This method returning {@code false} does not clearly indicate_independent instances. It indicates non-singleton instances, which may correspond_to a scoped bean as well. Use the {@link #isPrototype} operation to explicitly_check for independent instances._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return whether this bean corresponds to a singleton instance_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@see #getBean_@see #isPrototype;boolean isSingleton(String name) throws NoSuchBeanDefinitionException_;is,this,bean,a,shared,singleton,that,is,will,link,get,bean,always,return,the,same,instance,p,note,this,method,returning,code,false,does,not,clearly,indicate,independent,instances,it,indicates,non,singleton,instances,which,may,correspond,to,a,scoped,bean,as,well,use,the,link,is,prototype,operation,to,explicitly,check,for,independent,instances,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,whether,this,bean,corresponds,to,a,singleton,instance,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,see,get,bean,see,is,prototype;boolean,is,singleton,string,name,throws,no,such,bean,definition,exception
BeanFactory -> boolean isSingleton(String name) throws NoSuchBeanDefinitionException_;1417457126;Is this bean a shared singleton? That is, will {@link #getBean} always_return the same instance?_<p>Note: This method returning {@code false} does not clearly indicate_independent instances. It indicates non-singleton instances, which may correspond_to a scoped bean as well. Use the {@link #isPrototype} operation to explicitly_check for independent instances._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return whether this bean corresponds to a singleton instance_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@see #getBean_@see #isPrototype;boolean isSingleton(String name) throws NoSuchBeanDefinitionException_;is,this,bean,a,shared,singleton,that,is,will,link,get,bean,always,return,the,same,instance,p,note,this,method,returning,code,false,does,not,clearly,indicate,independent,instances,it,indicates,non,singleton,instances,which,may,correspond,to,a,scoped,bean,as,well,use,the,link,is,prototype,operation,to,explicitly,check,for,independent,instances,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,whether,this,bean,corresponds,to,a,singleton,instance,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,see,get,bean,see,is,prototype;boolean,is,singleton,string,name,throws,no,such,bean,definition,exception
BeanFactory -> boolean isSingleton(String name) throws NoSuchBeanDefinitionException_;1426716313;Is this bean a shared singleton? That is, will {@link #getBean} always_return the same instance?_<p>Note: This method returning {@code false} does not clearly indicate_independent instances. It indicates non-singleton instances, which may correspond_to a scoped bean as well. Use the {@link #isPrototype} operation to explicitly_check for independent instances._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return whether this bean corresponds to a singleton instance_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@see #getBean_@see #isPrototype;boolean isSingleton(String name) throws NoSuchBeanDefinitionException_;is,this,bean,a,shared,singleton,that,is,will,link,get,bean,always,return,the,same,instance,p,note,this,method,returning,code,false,does,not,clearly,indicate,independent,instances,it,indicates,non,singleton,instances,which,may,correspond,to,a,scoped,bean,as,well,use,the,link,is,prototype,operation,to,explicitly,check,for,independent,instances,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,whether,this,bean,corresponds,to,a,singleton,instance,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,see,get,bean,see,is,prototype;boolean,is,singleton,string,name,throws,no,such,bean,definition,exception
BeanFactory -> boolean isSingleton(String name) throws NoSuchBeanDefinitionException_;1427144223;Is this bean a shared singleton? That is, will {@link #getBean} always_return the same instance?_<p>Note: This method returning {@code false} does not clearly indicate_independent instances. It indicates non-singleton instances, which may correspond_to a scoped bean as well. Use the {@link #isPrototype} operation to explicitly_check for independent instances._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return whether this bean corresponds to a singleton instance_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@see #getBean_@see #isPrototype;boolean isSingleton(String name) throws NoSuchBeanDefinitionException_;is,this,bean,a,shared,singleton,that,is,will,link,get,bean,always,return,the,same,instance,p,note,this,method,returning,code,false,does,not,clearly,indicate,independent,instances,it,indicates,non,singleton,instances,which,may,correspond,to,a,scoped,bean,as,well,use,the,link,is,prototype,operation,to,explicitly,check,for,independent,instances,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,whether,this,bean,corresponds,to,a,singleton,instance,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,see,get,bean,see,is,prototype;boolean,is,singleton,string,name,throws,no,such,bean,definition,exception
BeanFactory -> boolean isSingleton(String name) throws NoSuchBeanDefinitionException_;1442313010;Is this bean a shared singleton? That is, will {@link #getBean} always_return the same instance?_<p>Note: This method returning {@code false} does not clearly indicate_independent instances. It indicates non-singleton instances, which may correspond_to a scoped bean as well. Use the {@link #isPrototype} operation to explicitly_check for independent instances._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return whether this bean corresponds to a singleton instance_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@see #getBean_@see #isPrototype;boolean isSingleton(String name) throws NoSuchBeanDefinitionException_;is,this,bean,a,shared,singleton,that,is,will,link,get,bean,always,return,the,same,instance,p,note,this,method,returning,code,false,does,not,clearly,indicate,independent,instances,it,indicates,non,singleton,instances,which,may,correspond,to,a,scoped,bean,as,well,use,the,link,is,prototype,operation,to,explicitly,check,for,independent,instances,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,whether,this,bean,corresponds,to,a,singleton,instance,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,see,get,bean,see,is,prototype;boolean,is,singleton,string,name,throws,no,such,bean,definition,exception
BeanFactory -> boolean isSingleton(String name) throws NoSuchBeanDefinitionException_;1454004037;Is this bean a shared singleton? That is, will {@link #getBean} always_return the same instance?_<p>Note: This method returning {@code false} does not clearly indicate_independent instances. It indicates non-singleton instances, which may correspond_to a scoped bean as well. Use the {@link #isPrototype} operation to explicitly_check for independent instances._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return whether this bean corresponds to a singleton instance_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@see #getBean_@see #isPrototype;boolean isSingleton(String name) throws NoSuchBeanDefinitionException_;is,this,bean,a,shared,singleton,that,is,will,link,get,bean,always,return,the,same,instance,p,note,this,method,returning,code,false,does,not,clearly,indicate,independent,instances,it,indicates,non,singleton,instances,which,may,correspond,to,a,scoped,bean,as,well,use,the,link,is,prototype,operation,to,explicitly,check,for,independent,instances,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,whether,this,bean,corresponds,to,a,singleton,instance,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,see,get,bean,see,is,prototype;boolean,is,singleton,string,name,throws,no,such,bean,definition,exception
BeanFactory -> boolean isSingleton(String name) throws NoSuchBeanDefinitionException_;1470948126;Is this bean a shared singleton? That is, will {@link #getBean} always_return the same instance?_<p>Note: This method returning {@code false} does not clearly indicate_independent instances. It indicates non-singleton instances, which may correspond_to a scoped bean as well. Use the {@link #isPrototype} operation to explicitly_check for independent instances._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return whether this bean corresponds to a singleton instance_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@see #getBean_@see #isPrototype;boolean isSingleton(String name) throws NoSuchBeanDefinitionException_;is,this,bean,a,shared,singleton,that,is,will,link,get,bean,always,return,the,same,instance,p,note,this,method,returning,code,false,does,not,clearly,indicate,independent,instances,it,indicates,non,singleton,instances,which,may,correspond,to,a,scoped,bean,as,well,use,the,link,is,prototype,operation,to,explicitly,check,for,independent,instances,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,whether,this,bean,corresponds,to,a,singleton,instance,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,see,get,bean,see,is,prototype;boolean,is,singleton,string,name,throws,no,such,bean,definition,exception
BeanFactory -> boolean isSingleton(String name) throws NoSuchBeanDefinitionException_;1473796164;Is this bean a shared singleton? That is, will {@link #getBean} always_return the same instance?_<p>Note: This method returning {@code false} does not clearly indicate_independent instances. It indicates non-singleton instances, which may correspond_to a scoped bean as well. Use the {@link #isPrototype} operation to explicitly_check for independent instances._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return whether this bean corresponds to a singleton instance_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@see #getBean_@see #isPrototype;boolean isSingleton(String name) throws NoSuchBeanDefinitionException_;is,this,bean,a,shared,singleton,that,is,will,link,get,bean,always,return,the,same,instance,p,note,this,method,returning,code,false,does,not,clearly,indicate,independent,instances,it,indicates,non,singleton,instances,which,may,correspond,to,a,scoped,bean,as,well,use,the,link,is,prototype,operation,to,explicitly,check,for,independent,instances,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,whether,this,bean,corresponds,to,a,singleton,instance,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,see,get,bean,see,is,prototype;boolean,is,singleton,string,name,throws,no,such,bean,definition,exception
BeanFactory -> boolean isSingleton(String name) throws NoSuchBeanDefinitionException_;1477468204;Is this bean a shared singleton? That is, will {@link #getBean} always_return the same instance?_<p>Note: This method returning {@code false} does not clearly indicate_independent instances. It indicates non-singleton instances, which may correspond_to a scoped bean as well. Use the {@link #isPrototype} operation to explicitly_check for independent instances._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return whether this bean corresponds to a singleton instance_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@see #getBean_@see #isPrototype;boolean isSingleton(String name) throws NoSuchBeanDefinitionException_;is,this,bean,a,shared,singleton,that,is,will,link,get,bean,always,return,the,same,instance,p,note,this,method,returning,code,false,does,not,clearly,indicate,independent,instances,it,indicates,non,singleton,instances,which,may,correspond,to,a,scoped,bean,as,well,use,the,link,is,prototype,operation,to,explicitly,check,for,independent,instances,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,whether,this,bean,corresponds,to,a,singleton,instance,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,see,get,bean,see,is,prototype;boolean,is,singleton,string,name,throws,no,such,bean,definition,exception
BeanFactory -> boolean isSingleton(String name) throws NoSuchBeanDefinitionException_;1495868221;Is this bean a shared singleton? That is, will {@link #getBean} always_return the same instance?_<p>Note: This method returning {@code false} does not clearly indicate_independent instances. It indicates non-singleton instances, which may correspond_to a scoped bean as well. Use the {@link #isPrototype} operation to explicitly_check for independent instances._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return whether this bean corresponds to a singleton instance_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@see #getBean_@see #isPrototype;boolean isSingleton(String name) throws NoSuchBeanDefinitionException_;is,this,bean,a,shared,singleton,that,is,will,link,get,bean,always,return,the,same,instance,p,note,this,method,returning,code,false,does,not,clearly,indicate,independent,instances,it,indicates,non,singleton,instances,which,may,correspond,to,a,scoped,bean,as,well,use,the,link,is,prototype,operation,to,explicitly,check,for,independent,instances,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,whether,this,bean,corresponds,to,a,singleton,instance,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,see,get,bean,see,is,prototype;boolean,is,singleton,string,name,throws,no,such,bean,definition,exception
BeanFactory -> boolean isSingleton(String name) throws NoSuchBeanDefinitionException_;1496837955;Is this bean a shared singleton? That is, will {@link #getBean} always_return the same instance?_<p>Note: This method returning {@code false} does not clearly indicate_independent instances. It indicates non-singleton instances, which may correspond_to a scoped bean as well. Use the {@link #isPrototype} operation to explicitly_check for independent instances._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return whether this bean corresponds to a singleton instance_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@see #getBean_@see #isPrototype;boolean isSingleton(String name) throws NoSuchBeanDefinitionException_;is,this,bean,a,shared,singleton,that,is,will,link,get,bean,always,return,the,same,instance,p,note,this,method,returning,code,false,does,not,clearly,indicate,independent,instances,it,indicates,non,singleton,instances,which,may,correspond,to,a,scoped,bean,as,well,use,the,link,is,prototype,operation,to,explicitly,check,for,independent,instances,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,whether,this,bean,corresponds,to,a,singleton,instance,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,see,get,bean,see,is,prototype;boolean,is,singleton,string,name,throws,no,such,bean,definition,exception
BeanFactory -> boolean isSingleton(String name) throws NoSuchBeanDefinitionException_;1532385723;Is this bean a shared singleton? That is, will {@link #getBean} always_return the same instance?_<p>Note: This method returning {@code false} does not clearly indicate_independent instances. It indicates non-singleton instances, which may correspond_to a scoped bean as well. Use the {@link #isPrototype} operation to explicitly_check for independent instances._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return whether this bean corresponds to a singleton instance_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@see #getBean_@see #isPrototype;boolean isSingleton(String name) throws NoSuchBeanDefinitionException_;is,this,bean,a,shared,singleton,that,is,will,link,get,bean,always,return,the,same,instance,p,note,this,method,returning,code,false,does,not,clearly,indicate,independent,instances,it,indicates,non,singleton,instances,which,may,correspond,to,a,scoped,bean,as,well,use,the,link,is,prototype,operation,to,explicitly,check,for,independent,instances,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,whether,this,bean,corresponds,to,a,singleton,instance,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,see,get,bean,see,is,prototype;boolean,is,singleton,string,name,throws,no,such,bean,definition,exception
BeanFactory -> boolean isSingleton(String name) throws NoSuchBeanDefinitionException_;1536855799;Is this bean a shared singleton? That is, will {@link #getBean} always_return the same instance?_<p>Note: This method returning {@code false} does not clearly indicate_independent instances. It indicates non-singleton instances, which may correspond_to a scoped bean as well. Use the {@link #isPrototype} operation to explicitly_check for independent instances._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return whether this bean corresponds to a singleton instance_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@see #getBean_@see #isPrototype;boolean isSingleton(String name) throws NoSuchBeanDefinitionException_;is,this,bean,a,shared,singleton,that,is,will,link,get,bean,always,return,the,same,instance,p,note,this,method,returning,code,false,does,not,clearly,indicate,independent,instances,it,indicates,non,singleton,instances,which,may,correspond,to,a,scoped,bean,as,well,use,the,link,is,prototype,operation,to,explicitly,check,for,independent,instances,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,whether,this,bean,corresponds,to,a,singleton,instance,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,see,get,bean,see,is,prototype;boolean,is,singleton,string,name,throws,no,such,bean,definition,exception
BeanFactory -> boolean isSingleton(String name) throws NoSuchBeanDefinitionException_;1539119659;Is this bean a shared singleton? That is, will {@link #getBean} always_return the same instance?_<p>Note: This method returning {@code false} does not clearly indicate_independent instances. It indicates non-singleton instances, which may correspond_to a scoped bean as well. Use the {@link #isPrototype} operation to explicitly_check for independent instances._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return whether this bean corresponds to a singleton instance_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@see #getBean_@see #isPrototype;boolean isSingleton(String name) throws NoSuchBeanDefinitionException_;is,this,bean,a,shared,singleton,that,is,will,link,get,bean,always,return,the,same,instance,p,note,this,method,returning,code,false,does,not,clearly,indicate,independent,instances,it,indicates,non,singleton,instances,which,may,correspond,to,a,scoped,bean,as,well,use,the,link,is,prototype,operation,to,explicitly,check,for,independent,instances,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,whether,this,bean,corresponds,to,a,singleton,instance,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,see,get,bean,see,is,prototype;boolean,is,singleton,string,name,throws,no,such,bean,definition,exception
BeanFactory -> boolean isSingleton(String name) throws NoSuchBeanDefinitionException_;1549551674;Is this bean a shared singleton? That is, will {@link #getBean} always_return the same instance?_<p>Note: This method returning {@code false} does not clearly indicate_independent instances. It indicates non-singleton instances, which may correspond_to a scoped bean as well. Use the {@link #isPrototype} operation to explicitly_check for independent instances._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return whether this bean corresponds to a singleton instance_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@see #getBean_@see #isPrototype;boolean isSingleton(String name) throws NoSuchBeanDefinitionException_;is,this,bean,a,shared,singleton,that,is,will,link,get,bean,always,return,the,same,instance,p,note,this,method,returning,code,false,does,not,clearly,indicate,independent,instances,it,indicates,non,singleton,instances,which,may,correspond,to,a,scoped,bean,as,well,use,the,link,is,prototype,operation,to,explicitly,check,for,independent,instances,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,whether,this,bean,corresponds,to,a,singleton,instance,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,see,get,bean,see,is,prototype;boolean,is,singleton,string,name,throws,no,such,bean,definition,exception
BeanFactory -> @Nullable 	Class<?> getType(String name) throws NoSuchBeanDefinitionException_;1495868221;Determine the type of the bean with the given name. More specifically,_determine the type of object that {@link #getBean} would return for the given name._<p>For a {@link FactoryBean}, return the type of object that the FactoryBean creates,_as exposed by {@link FactoryBean#getObjectType()}._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return the type of the bean, or {@code null} if not determinable_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 1.1.2_@see #getBean_@see #isTypeMatch;@Nullable_	Class<?> getType(String name) throws NoSuchBeanDefinitionException_;determine,the,type,of,the,bean,with,the,given,name,more,specifically,determine,the,type,of,object,that,link,get,bean,would,return,for,the,given,name,p,for,a,link,factory,bean,return,the,type,of,object,that,the,factory,bean,creates,as,exposed,by,link,factory,bean,get,object,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,the,type,of,the,bean,or,code,null,if,not,determinable,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,1,1,2,see,get,bean,see,is,type,match;nullable,class,get,type,string,name,throws,no,such,bean,definition,exception
BeanFactory -> @Nullable 	Class<?> getType(String name) throws NoSuchBeanDefinitionException_;1496837955;Determine the type of the bean with the given name. More specifically,_determine the type of object that {@link #getBean} would return for the given name._<p>For a {@link FactoryBean}, return the type of object that the FactoryBean creates,_as exposed by {@link FactoryBean#getObjectType()}._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return the type of the bean, or {@code null} if not determinable_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 1.1.2_@see #getBean_@see #isTypeMatch;@Nullable_	Class<?> getType(String name) throws NoSuchBeanDefinitionException_;determine,the,type,of,the,bean,with,the,given,name,more,specifically,determine,the,type,of,object,that,link,get,bean,would,return,for,the,given,name,p,for,a,link,factory,bean,return,the,type,of,object,that,the,factory,bean,creates,as,exposed,by,link,factory,bean,get,object,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,the,type,of,the,bean,or,code,null,if,not,determinable,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,1,1,2,see,get,bean,see,is,type,match;nullable,class,get,type,string,name,throws,no,such,bean,definition,exception
BeanFactory -> @Nullable 	Class<?> getType(String name) throws NoSuchBeanDefinitionException_;1532385723;Determine the type of the bean with the given name. More specifically,_determine the type of object that {@link #getBean} would return for the given name._<p>For a {@link FactoryBean}, return the type of object that the FactoryBean creates,_as exposed by {@link FactoryBean#getObjectType()}._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return the type of the bean, or {@code null} if not determinable_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 1.1.2_@see #getBean_@see #isTypeMatch;@Nullable_	Class<?> getType(String name) throws NoSuchBeanDefinitionException_;determine,the,type,of,the,bean,with,the,given,name,more,specifically,determine,the,type,of,object,that,link,get,bean,would,return,for,the,given,name,p,for,a,link,factory,bean,return,the,type,of,object,that,the,factory,bean,creates,as,exposed,by,link,factory,bean,get,object,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,the,type,of,the,bean,or,code,null,if,not,determinable,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,1,1,2,see,get,bean,see,is,type,match;nullable,class,get,type,string,name,throws,no,such,bean,definition,exception
BeanFactory -> @Nullable 	Class<?> getType(String name) throws NoSuchBeanDefinitionException_;1536855799;Determine the type of the bean with the given name. More specifically,_determine the type of object that {@link #getBean} would return for the given name._<p>For a {@link FactoryBean}, return the type of object that the FactoryBean creates,_as exposed by {@link FactoryBean#getObjectType()}._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return the type of the bean, or {@code null} if not determinable_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 1.1.2_@see #getBean_@see #isTypeMatch;@Nullable_	Class<?> getType(String name) throws NoSuchBeanDefinitionException_;determine,the,type,of,the,bean,with,the,given,name,more,specifically,determine,the,type,of,object,that,link,get,bean,would,return,for,the,given,name,p,for,a,link,factory,bean,return,the,type,of,object,that,the,factory,bean,creates,as,exposed,by,link,factory,bean,get,object,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,the,type,of,the,bean,or,code,null,if,not,determinable,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,1,1,2,see,get,bean,see,is,type,match;nullable,class,get,type,string,name,throws,no,such,bean,definition,exception
BeanFactory -> @Nullable 	Class<?> getType(String name) throws NoSuchBeanDefinitionException_;1539119659;Determine the type of the bean with the given name. More specifically,_determine the type of object that {@link #getBean} would return for the given name._<p>For a {@link FactoryBean}, return the type of object that the FactoryBean creates,_as exposed by {@link FactoryBean#getObjectType()}._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return the type of the bean, or {@code null} if not determinable_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 1.1.2_@see #getBean_@see #isTypeMatch;@Nullable_	Class<?> getType(String name) throws NoSuchBeanDefinitionException_;determine,the,type,of,the,bean,with,the,given,name,more,specifically,determine,the,type,of,object,that,link,get,bean,would,return,for,the,given,name,p,for,a,link,factory,bean,return,the,type,of,object,that,the,factory,bean,creates,as,exposed,by,link,factory,bean,get,object,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,the,type,of,the,bean,or,code,null,if,not,determinable,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,1,1,2,see,get,bean,see,is,type,match;nullable,class,get,type,string,name,throws,no,such,bean,definition,exception
BeanFactory -> @Nullable 	Class<?> getType(String name) throws NoSuchBeanDefinitionException_;1549551674;Determine the type of the bean with the given name. More specifically,_determine the type of object that {@link #getBean} would return for the given name._<p>For a {@link FactoryBean}, return the type of object that the FactoryBean creates,_as exposed by {@link FactoryBean#getObjectType()}._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return the type of the bean, or {@code null} if not determinable_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 1.1.2_@see #getBean_@see #isTypeMatch;@Nullable_	Class<?> getType(String name) throws NoSuchBeanDefinitionException_;determine,the,type,of,the,bean,with,the,given,name,more,specifically,determine,the,type,of,object,that,link,get,bean,would,return,for,the,given,name,p,for,a,link,factory,bean,return,the,type,of,object,that,the,factory,bean,creates,as,exposed,by,link,factory,bean,get,object,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,the,type,of,the,bean,or,code,null,if,not,determinable,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,1,1,2,see,get,bean,see,is,type,match;nullable,class,get,type,string,name,throws,no,such,bean,definition,exception
BeanFactory -> boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException_;1427144223;Check whether the bean with the given name matches the specified type._More specifically, check whether a {@link #getBean} call for the given name_would return an object that is assignable to the specified target type._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@param typeToMatch the type to match against (as a {@code ResolvableType})_@return {@code true} if the bean type matches,_{@code false} if it doesn't match or cannot be determined yet_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 4.2_@see #getBean_@see #getType;boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException_;check,whether,the,bean,with,the,given,name,matches,the,specified,type,more,specifically,check,whether,a,link,get,bean,call,for,the,given,name,would,return,an,object,that,is,assignable,to,the,specified,target,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,param,type,to,match,the,type,to,match,against,as,a,code,resolvable,type,return,code,true,if,the,bean,type,matches,code,false,if,it,doesn,t,match,or,cannot,be,determined,yet,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,4,2,see,get,bean,see,get,type;boolean,is,type,match,string,name,resolvable,type,type,to,match,throws,no,such,bean,definition,exception
BeanFactory -> boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException_;1442313010;Check whether the bean with the given name matches the specified type._More specifically, check whether a {@link #getBean} call for the given name_would return an object that is assignable to the specified target type._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@param typeToMatch the type to match against (as a {@code ResolvableType})_@return {@code true} if the bean type matches,_{@code false} if it doesn't match or cannot be determined yet_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 4.2_@see #getBean_@see #getType;boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException_;check,whether,the,bean,with,the,given,name,matches,the,specified,type,more,specifically,check,whether,a,link,get,bean,call,for,the,given,name,would,return,an,object,that,is,assignable,to,the,specified,target,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,param,type,to,match,the,type,to,match,against,as,a,code,resolvable,type,return,code,true,if,the,bean,type,matches,code,false,if,it,doesn,t,match,or,cannot,be,determined,yet,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,4,2,see,get,bean,see,get,type;boolean,is,type,match,string,name,resolvable,type,type,to,match,throws,no,such,bean,definition,exception
BeanFactory -> boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException_;1454004037;Check whether the bean with the given name matches the specified type._More specifically, check whether a {@link #getBean} call for the given name_would return an object that is assignable to the specified target type._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@param typeToMatch the type to match against (as a {@code ResolvableType})_@return {@code true} if the bean type matches,_{@code false} if it doesn't match or cannot be determined yet_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 4.2_@see #getBean_@see #getType;boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException_;check,whether,the,bean,with,the,given,name,matches,the,specified,type,more,specifically,check,whether,a,link,get,bean,call,for,the,given,name,would,return,an,object,that,is,assignable,to,the,specified,target,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,param,type,to,match,the,type,to,match,against,as,a,code,resolvable,type,return,code,true,if,the,bean,type,matches,code,false,if,it,doesn,t,match,or,cannot,be,determined,yet,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,4,2,see,get,bean,see,get,type;boolean,is,type,match,string,name,resolvable,type,type,to,match,throws,no,such,bean,definition,exception
BeanFactory -> boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException_;1470948126;Check whether the bean with the given name matches the specified type._More specifically, check whether a {@link #getBean} call for the given name_would return an object that is assignable to the specified target type._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@param typeToMatch the type to match against (as a {@code ResolvableType})_@return {@code true} if the bean type matches,_{@code false} if it doesn't match or cannot be determined yet_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 4.2_@see #getBean_@see #getType;boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException_;check,whether,the,bean,with,the,given,name,matches,the,specified,type,more,specifically,check,whether,a,link,get,bean,call,for,the,given,name,would,return,an,object,that,is,assignable,to,the,specified,target,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,param,type,to,match,the,type,to,match,against,as,a,code,resolvable,type,return,code,true,if,the,bean,type,matches,code,false,if,it,doesn,t,match,or,cannot,be,determined,yet,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,4,2,see,get,bean,see,get,type;boolean,is,type,match,string,name,resolvable,type,type,to,match,throws,no,such,bean,definition,exception
BeanFactory -> boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException_;1473796164;Check whether the bean with the given name matches the specified type._More specifically, check whether a {@link #getBean} call for the given name_would return an object that is assignable to the specified target type._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@param typeToMatch the type to match against (as a {@code ResolvableType})_@return {@code true} if the bean type matches,_{@code false} if it doesn't match or cannot be determined yet_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 4.2_@see #getBean_@see #getType;boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException_;check,whether,the,bean,with,the,given,name,matches,the,specified,type,more,specifically,check,whether,a,link,get,bean,call,for,the,given,name,would,return,an,object,that,is,assignable,to,the,specified,target,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,param,type,to,match,the,type,to,match,against,as,a,code,resolvable,type,return,code,true,if,the,bean,type,matches,code,false,if,it,doesn,t,match,or,cannot,be,determined,yet,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,4,2,see,get,bean,see,get,type;boolean,is,type,match,string,name,resolvable,type,type,to,match,throws,no,such,bean,definition,exception
BeanFactory -> boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException_;1477468204;Check whether the bean with the given name matches the specified type._More specifically, check whether a {@link #getBean} call for the given name_would return an object that is assignable to the specified target type._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@param typeToMatch the type to match against (as a {@code ResolvableType})_@return {@code true} if the bean type matches,_{@code false} if it doesn't match or cannot be determined yet_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 4.2_@see #getBean_@see #getType;boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException_;check,whether,the,bean,with,the,given,name,matches,the,specified,type,more,specifically,check,whether,a,link,get,bean,call,for,the,given,name,would,return,an,object,that,is,assignable,to,the,specified,target,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,param,type,to,match,the,type,to,match,against,as,a,code,resolvable,type,return,code,true,if,the,bean,type,matches,code,false,if,it,doesn,t,match,or,cannot,be,determined,yet,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,4,2,see,get,bean,see,get,type;boolean,is,type,match,string,name,resolvable,type,type,to,match,throws,no,such,bean,definition,exception
BeanFactory -> boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException_;1495868221;Check whether the bean with the given name matches the specified type._More specifically, check whether a {@link #getBean} call for the given name_would return an object that is assignable to the specified target type._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@param typeToMatch the type to match against (as a {@code ResolvableType})_@return {@code true} if the bean type matches,_{@code false} if it doesn't match or cannot be determined yet_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 4.2_@see #getBean_@see #getType;boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException_;check,whether,the,bean,with,the,given,name,matches,the,specified,type,more,specifically,check,whether,a,link,get,bean,call,for,the,given,name,would,return,an,object,that,is,assignable,to,the,specified,target,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,param,type,to,match,the,type,to,match,against,as,a,code,resolvable,type,return,code,true,if,the,bean,type,matches,code,false,if,it,doesn,t,match,or,cannot,be,determined,yet,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,4,2,see,get,bean,see,get,type;boolean,is,type,match,string,name,resolvable,type,type,to,match,throws,no,such,bean,definition,exception
BeanFactory -> boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException_;1496837955;Check whether the bean with the given name matches the specified type._More specifically, check whether a {@link #getBean} call for the given name_would return an object that is assignable to the specified target type._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@param typeToMatch the type to match against (as a {@code ResolvableType})_@return {@code true} if the bean type matches,_{@code false} if it doesn't match or cannot be determined yet_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 4.2_@see #getBean_@see #getType;boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException_;check,whether,the,bean,with,the,given,name,matches,the,specified,type,more,specifically,check,whether,a,link,get,bean,call,for,the,given,name,would,return,an,object,that,is,assignable,to,the,specified,target,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,param,type,to,match,the,type,to,match,against,as,a,code,resolvable,type,return,code,true,if,the,bean,type,matches,code,false,if,it,doesn,t,match,or,cannot,be,determined,yet,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,4,2,see,get,bean,see,get,type;boolean,is,type,match,string,name,resolvable,type,type,to,match,throws,no,such,bean,definition,exception
BeanFactory -> boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException_;1532385723;Check whether the bean with the given name matches the specified type._More specifically, check whether a {@link #getBean} call for the given name_would return an object that is assignable to the specified target type._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@param typeToMatch the type to match against (as a {@code ResolvableType})_@return {@code true} if the bean type matches,_{@code false} if it doesn't match or cannot be determined yet_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 4.2_@see #getBean_@see #getType;boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException_;check,whether,the,bean,with,the,given,name,matches,the,specified,type,more,specifically,check,whether,a,link,get,bean,call,for,the,given,name,would,return,an,object,that,is,assignable,to,the,specified,target,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,param,type,to,match,the,type,to,match,against,as,a,code,resolvable,type,return,code,true,if,the,bean,type,matches,code,false,if,it,doesn,t,match,or,cannot,be,determined,yet,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,4,2,see,get,bean,see,get,type;boolean,is,type,match,string,name,resolvable,type,type,to,match,throws,no,such,bean,definition,exception
BeanFactory -> boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException_;1536855799;Check whether the bean with the given name matches the specified type._More specifically, check whether a {@link #getBean} call for the given name_would return an object that is assignable to the specified target type._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@param typeToMatch the type to match against (as a {@code ResolvableType})_@return {@code true} if the bean type matches,_{@code false} if it doesn't match or cannot be determined yet_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 4.2_@see #getBean_@see #getType;boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException_;check,whether,the,bean,with,the,given,name,matches,the,specified,type,more,specifically,check,whether,a,link,get,bean,call,for,the,given,name,would,return,an,object,that,is,assignable,to,the,specified,target,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,param,type,to,match,the,type,to,match,against,as,a,code,resolvable,type,return,code,true,if,the,bean,type,matches,code,false,if,it,doesn,t,match,or,cannot,be,determined,yet,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,4,2,see,get,bean,see,get,type;boolean,is,type,match,string,name,resolvable,type,type,to,match,throws,no,such,bean,definition,exception
BeanFactory -> boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException_;1539119659;Check whether the bean with the given name matches the specified type._More specifically, check whether a {@link #getBean} call for the given name_would return an object that is assignable to the specified target type._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@param typeToMatch the type to match against (as a {@code ResolvableType})_@return {@code true} if the bean type matches,_{@code false} if it doesn't match or cannot be determined yet_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 4.2_@see #getBean_@see #getType;boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException_;check,whether,the,bean,with,the,given,name,matches,the,specified,type,more,specifically,check,whether,a,link,get,bean,call,for,the,given,name,would,return,an,object,that,is,assignable,to,the,specified,target,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,param,type,to,match,the,type,to,match,against,as,a,code,resolvable,type,return,code,true,if,the,bean,type,matches,code,false,if,it,doesn,t,match,or,cannot,be,determined,yet,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,4,2,see,get,bean,see,get,type;boolean,is,type,match,string,name,resolvable,type,type,to,match,throws,no,such,bean,definition,exception
BeanFactory -> boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException_;1549551674;Check whether the bean with the given name matches the specified type._More specifically, check whether a {@link #getBean} call for the given name_would return an object that is assignable to the specified target type._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@param typeToMatch the type to match against (as a {@code ResolvableType})_@return {@code true} if the bean type matches,_{@code false} if it doesn't match or cannot be determined yet_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 4.2_@see #getBean_@see #getType;boolean isTypeMatch(String name, ResolvableType typeToMatch) throws NoSuchBeanDefinitionException_;check,whether,the,bean,with,the,given,name,matches,the,specified,type,more,specifically,check,whether,a,link,get,bean,call,for,the,given,name,would,return,an,object,that,is,assignable,to,the,specified,target,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,param,type,to,match,the,type,to,match,against,as,a,code,resolvable,type,return,code,true,if,the,bean,type,matches,code,false,if,it,doesn,t,match,or,cannot,be,determined,yet,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,4,2,see,get,bean,see,get,type;boolean,is,type,match,string,name,resolvable,type,type,to,match,throws,no,such,bean,definition,exception
BeanFactory -> Object getBean(String name, Object... args) throws BeansException_;1328020251;Return an instance, which may be shared or independent, of the specified bean._<p>Allows for specifying explicit constructor arguments / factory method arguments,_overriding the specified default arguments (if any) in the bean definition._@param name the name of the bean to retrieve_@param args arguments to use if creating a prototype using explicit arguments to a_static factory method. It is invalid to use a non-null args value in any other case._@return an instance of the bean_@throws NoSuchBeanDefinitionException if there's no such bean definition_@throws BeanDefinitionStoreException if arguments have been given but_the affected bean isn't a prototype_@throws BeansException if the bean could not be created_@since 2.5;Object getBean(String name, Object... args) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,allows,for,specifying,explicit,constructor,arguments,factory,method,arguments,overriding,the,specified,default,arguments,if,any,in,the,bean,definition,param,name,the,name,of,the,bean,to,retrieve,param,args,arguments,to,use,if,creating,a,prototype,using,explicit,arguments,to,a,static,factory,method,it,is,invalid,to,use,a,non,null,args,value,in,any,other,case,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,s,no,such,bean,definition,throws,bean,definition,store,exception,if,arguments,have,been,given,but,the,affected,bean,isn,t,a,prototype,throws,beans,exception,if,the,bean,could,not,be,created,since,2,5;object,get,bean,string,name,object,args,throws,beans,exception
BeanFactory -> Object getBean(String name, Object... args) throws BeansException_;1356735495;Return an instance, which may be shared or independent, of the specified bean._<p>Allows for specifying explicit constructor arguments / factory method arguments,_overriding the specified default arguments (if any) in the bean definition._@param name the name of the bean to retrieve_@param args arguments to use if creating a prototype using explicit arguments to a_static factory method. It is invalid to use a non-null args value in any other case._@return an instance of the bean_@throws NoSuchBeanDefinitionException if there's no such bean definition_@throws BeanDefinitionStoreException if arguments have been given but_the affected bean isn't a prototype_@throws BeansException if the bean could not be created_@since 2.5;Object getBean(String name, Object... args) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,allows,for,specifying,explicit,constructor,arguments,factory,method,arguments,overriding,the,specified,default,arguments,if,any,in,the,bean,definition,param,name,the,name,of,the,bean,to,retrieve,param,args,arguments,to,use,if,creating,a,prototype,using,explicit,arguments,to,a,static,factory,method,it,is,invalid,to,use,a,non,null,args,value,in,any,other,case,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,s,no,such,bean,definition,throws,bean,definition,store,exception,if,arguments,have,been,given,but,the,affected,bean,isn,t,a,prototype,throws,beans,exception,if,the,bean,could,not,be,created,since,2,5;object,get,bean,string,name,object,args,throws,beans,exception
BeanFactory -> Object getBean(String name, Object... args) throws BeansException_;1362408075;Return an instance, which may be shared or independent, of the specified bean._<p>Allows for specifying explicit constructor arguments / factory method arguments,_overriding the specified default arguments (if any) in the bean definition._@param name the name of the bean to retrieve_@param args arguments to use if creating a prototype using explicit arguments to a_static factory method. It is invalid to use a non-null args value in any other case._@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanDefinitionStoreException if arguments have been given but_the affected bean isn't a prototype_@throws BeansException if the bean could not be created_@since 2.5;Object getBean(String name, Object... args) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,allows,for,specifying,explicit,constructor,arguments,factory,method,arguments,overriding,the,specified,default,arguments,if,any,in,the,bean,definition,param,name,the,name,of,the,bean,to,retrieve,param,args,arguments,to,use,if,creating,a,prototype,using,explicit,arguments,to,a,static,factory,method,it,is,invalid,to,use,a,non,null,args,value,in,any,other,case,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,definition,store,exception,if,arguments,have,been,given,but,the,affected,bean,isn,t,a,prototype,throws,beans,exception,if,the,bean,could,not,be,created,since,2,5;object,get,bean,string,name,object,args,throws,beans,exception
BeanFactory -> Object getBean(String name, Object... args) throws BeansException_;1407874032;Return an instance, which may be shared or independent, of the specified bean._<p>Allows for specifying explicit constructor arguments / factory method arguments,_overriding the specified default arguments (if any) in the bean definition._@param name the name of the bean to retrieve_@param args arguments to use if creating a prototype using explicit arguments to a_static factory method. It is invalid to use a non-null args value in any other case._@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanDefinitionStoreException if arguments have been given but_the affected bean isn't a prototype_@throws BeansException if the bean could not be created_@since 2.5;Object getBean(String name, Object... args) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,allows,for,specifying,explicit,constructor,arguments,factory,method,arguments,overriding,the,specified,default,arguments,if,any,in,the,bean,definition,param,name,the,name,of,the,bean,to,retrieve,param,args,arguments,to,use,if,creating,a,prototype,using,explicit,arguments,to,a,static,factory,method,it,is,invalid,to,use,a,non,null,args,value,in,any,other,case,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,definition,store,exception,if,arguments,have,been,given,but,the,affected,bean,isn,t,a,prototype,throws,beans,exception,if,the,bean,could,not,be,created,since,2,5;object,get,bean,string,name,object,args,throws,beans,exception
BeanFactory -> Object getBean(String name, Object... args) throws BeansException_;1408052945;Return an instance, which may be shared or independent, of the specified bean._<p>Allows for specifying explicit constructor arguments / factory method arguments,_overriding the specified default arguments (if any) in the bean definition._@param name the name of the bean to retrieve_@param args arguments to use if creating a prototype using explicit arguments_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanDefinitionStoreException if arguments have been given but_the affected bean isn't a prototype_@throws BeansException if the bean could not be created_@since 2.5;Object getBean(String name, Object... args) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,allows,for,specifying,explicit,constructor,arguments,factory,method,arguments,overriding,the,specified,default,arguments,if,any,in,the,bean,definition,param,name,the,name,of,the,bean,to,retrieve,param,args,arguments,to,use,if,creating,a,prototype,using,explicit,arguments,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,definition,store,exception,if,arguments,have,been,given,but,the,affected,bean,isn,t,a,prototype,throws,beans,exception,if,the,bean,could,not,be,created,since,2,5;object,get,bean,string,name,object,args,throws,beans,exception
BeanFactory -> Object getBean(String name, Object... args) throws BeansException_;1417457126;Return an instance, which may be shared or independent, of the specified bean._<p>Allows for specifying explicit constructor arguments / factory method arguments,_overriding the specified default arguments (if any) in the bean definition._@param name the name of the bean to retrieve_@param args arguments to use when creating a bean instance using explicit arguments_(only applied when creating a new instance as opposed to retrieving an existing one)_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanDefinitionStoreException if arguments have been given but_the affected bean isn't a prototype_@throws BeansException if the bean could not be created_@since 2.5;Object getBean(String name, Object... args) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,allows,for,specifying,explicit,constructor,arguments,factory,method,arguments,overriding,the,specified,default,arguments,if,any,in,the,bean,definition,param,name,the,name,of,the,bean,to,retrieve,param,args,arguments,to,use,when,creating,a,bean,instance,using,explicit,arguments,only,applied,when,creating,a,new,instance,as,opposed,to,retrieving,an,existing,one,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,definition,store,exception,if,arguments,have,been,given,but,the,affected,bean,isn,t,a,prototype,throws,beans,exception,if,the,bean,could,not,be,created,since,2,5;object,get,bean,string,name,object,args,throws,beans,exception
BeanFactory -> Object getBean(String name, Object... args) throws BeansException_;1426716313;Return an instance, which may be shared or independent, of the specified bean._<p>Allows for specifying explicit constructor arguments / factory method arguments,_overriding the specified default arguments (if any) in the bean definition._@param name the name of the bean to retrieve_@param args arguments to use when creating a bean instance using explicit arguments_(only applied when creating a new instance as opposed to retrieving an existing one)_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanDefinitionStoreException if arguments have been given but_the affected bean isn't a prototype_@throws BeansException if the bean could not be created_@since 2.5;Object getBean(String name, Object... args) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,allows,for,specifying,explicit,constructor,arguments,factory,method,arguments,overriding,the,specified,default,arguments,if,any,in,the,bean,definition,param,name,the,name,of,the,bean,to,retrieve,param,args,arguments,to,use,when,creating,a,bean,instance,using,explicit,arguments,only,applied,when,creating,a,new,instance,as,opposed,to,retrieving,an,existing,one,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,definition,store,exception,if,arguments,have,been,given,but,the,affected,bean,isn,t,a,prototype,throws,beans,exception,if,the,bean,could,not,be,created,since,2,5;object,get,bean,string,name,object,args,throws,beans,exception
BeanFactory -> Object getBean(String name, Object... args) throws BeansException_;1427144223;Return an instance, which may be shared or independent, of the specified bean._<p>Allows for specifying explicit constructor arguments / factory method arguments,_overriding the specified default arguments (if any) in the bean definition._@param name the name of the bean to retrieve_@param args arguments to use when creating a bean instance using explicit arguments_(only applied when creating a new instance as opposed to retrieving an existing one)_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanDefinitionStoreException if arguments have been given but_the affected bean isn't a prototype_@throws BeansException if the bean could not be created_@since 2.5;Object getBean(String name, Object... args) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,allows,for,specifying,explicit,constructor,arguments,factory,method,arguments,overriding,the,specified,default,arguments,if,any,in,the,bean,definition,param,name,the,name,of,the,bean,to,retrieve,param,args,arguments,to,use,when,creating,a,bean,instance,using,explicit,arguments,only,applied,when,creating,a,new,instance,as,opposed,to,retrieving,an,existing,one,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,definition,store,exception,if,arguments,have,been,given,but,the,affected,bean,isn,t,a,prototype,throws,beans,exception,if,the,bean,could,not,be,created,since,2,5;object,get,bean,string,name,object,args,throws,beans,exception
BeanFactory -> Object getBean(String name, Object... args) throws BeansException_;1442313010;Return an instance, which may be shared or independent, of the specified bean._<p>Allows for specifying explicit constructor arguments / factory method arguments,_overriding the specified default arguments (if any) in the bean definition._@param name the name of the bean to retrieve_@param args arguments to use when creating a bean instance using explicit arguments_(only applied when creating a new instance as opposed to retrieving an existing one)_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanDefinitionStoreException if arguments have been given but_the affected bean isn't a prototype_@throws BeansException if the bean could not be created_@since 2.5;Object getBean(String name, Object... args) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,allows,for,specifying,explicit,constructor,arguments,factory,method,arguments,overriding,the,specified,default,arguments,if,any,in,the,bean,definition,param,name,the,name,of,the,bean,to,retrieve,param,args,arguments,to,use,when,creating,a,bean,instance,using,explicit,arguments,only,applied,when,creating,a,new,instance,as,opposed,to,retrieving,an,existing,one,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,definition,store,exception,if,arguments,have,been,given,but,the,affected,bean,isn,t,a,prototype,throws,beans,exception,if,the,bean,could,not,be,created,since,2,5;object,get,bean,string,name,object,args,throws,beans,exception
BeanFactory -> Object getBean(String name, Object... args) throws BeansException_;1454004037;Return an instance, which may be shared or independent, of the specified bean._<p>Allows for specifying explicit constructor arguments / factory method arguments,_overriding the specified default arguments (if any) in the bean definition._@param name the name of the bean to retrieve_@param args arguments to use when creating a bean instance using explicit arguments_(only applied when creating a new instance as opposed to retrieving an existing one)_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanDefinitionStoreException if arguments have been given but_the affected bean isn't a prototype_@throws BeansException if the bean could not be created_@since 2.5;Object getBean(String name, Object... args) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,allows,for,specifying,explicit,constructor,arguments,factory,method,arguments,overriding,the,specified,default,arguments,if,any,in,the,bean,definition,param,name,the,name,of,the,bean,to,retrieve,param,args,arguments,to,use,when,creating,a,bean,instance,using,explicit,arguments,only,applied,when,creating,a,new,instance,as,opposed,to,retrieving,an,existing,one,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,definition,store,exception,if,arguments,have,been,given,but,the,affected,bean,isn,t,a,prototype,throws,beans,exception,if,the,bean,could,not,be,created,since,2,5;object,get,bean,string,name,object,args,throws,beans,exception
BeanFactory -> Object getBean(String name, Object... args) throws BeansException_;1470948126;Return an instance, which may be shared or independent, of the specified bean._<p>Allows for specifying explicit constructor arguments / factory method arguments,_overriding the specified default arguments (if any) in the bean definition._@param name the name of the bean to retrieve_@param args arguments to use when creating a bean instance using explicit arguments_(only applied when creating a new instance as opposed to retrieving an existing one)_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanDefinitionStoreException if arguments have been given but_the affected bean isn't a prototype_@throws BeansException if the bean could not be created_@since 2.5;Object getBean(String name, Object... args) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,allows,for,specifying,explicit,constructor,arguments,factory,method,arguments,overriding,the,specified,default,arguments,if,any,in,the,bean,definition,param,name,the,name,of,the,bean,to,retrieve,param,args,arguments,to,use,when,creating,a,bean,instance,using,explicit,arguments,only,applied,when,creating,a,new,instance,as,opposed,to,retrieving,an,existing,one,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,definition,store,exception,if,arguments,have,been,given,but,the,affected,bean,isn,t,a,prototype,throws,beans,exception,if,the,bean,could,not,be,created,since,2,5;object,get,bean,string,name,object,args,throws,beans,exception
BeanFactory -> Object getBean(String name, Object... args) throws BeansException_;1473796164;Return an instance, which may be shared or independent, of the specified bean._<p>Allows for specifying explicit constructor arguments / factory method arguments,_overriding the specified default arguments (if any) in the bean definition._@param name the name of the bean to retrieve_@param args arguments to use when creating a bean instance using explicit arguments_(only applied when creating a new instance as opposed to retrieving an existing one)_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanDefinitionStoreException if arguments have been given but_the affected bean isn't a prototype_@throws BeansException if the bean could not be created_@since 2.5;Object getBean(String name, Object... args) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,allows,for,specifying,explicit,constructor,arguments,factory,method,arguments,overriding,the,specified,default,arguments,if,any,in,the,bean,definition,param,name,the,name,of,the,bean,to,retrieve,param,args,arguments,to,use,when,creating,a,bean,instance,using,explicit,arguments,only,applied,when,creating,a,new,instance,as,opposed,to,retrieving,an,existing,one,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,definition,store,exception,if,arguments,have,been,given,but,the,affected,bean,isn,t,a,prototype,throws,beans,exception,if,the,bean,could,not,be,created,since,2,5;object,get,bean,string,name,object,args,throws,beans,exception
BeanFactory -> Object getBean(String name, Object... args) throws BeansException_;1477468204;Return an instance, which may be shared or independent, of the specified bean._<p>Allows for specifying explicit constructor arguments / factory method arguments,_overriding the specified default arguments (if any) in the bean definition._@param name the name of the bean to retrieve_@param args arguments to use when creating a bean instance using explicit arguments_(only applied when creating a new instance as opposed to retrieving an existing one)_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanDefinitionStoreException if arguments have been given but_the affected bean isn't a prototype_@throws BeansException if the bean could not be created_@since 2.5;Object getBean(String name, Object... args) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,allows,for,specifying,explicit,constructor,arguments,factory,method,arguments,overriding,the,specified,default,arguments,if,any,in,the,bean,definition,param,name,the,name,of,the,bean,to,retrieve,param,args,arguments,to,use,when,creating,a,bean,instance,using,explicit,arguments,only,applied,when,creating,a,new,instance,as,opposed,to,retrieving,an,existing,one,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,definition,store,exception,if,arguments,have,been,given,but,the,affected,bean,isn,t,a,prototype,throws,beans,exception,if,the,bean,could,not,be,created,since,2,5;object,get,bean,string,name,object,args,throws,beans,exception
BeanFactory -> Object getBean(String name, Object... args) throws BeansException_;1495868221;Return an instance, which may be shared or independent, of the specified bean._<p>Allows for specifying explicit constructor arguments / factory method arguments,_overriding the specified default arguments (if any) in the bean definition._@param name the name of the bean to retrieve_@param args arguments to use when creating a bean instance using explicit arguments_(only applied when creating a new instance as opposed to retrieving an existing one)_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanDefinitionStoreException if arguments have been given but_the affected bean isn't a prototype_@throws BeansException if the bean could not be created_@since 2.5;Object getBean(String name, Object... args) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,allows,for,specifying,explicit,constructor,arguments,factory,method,arguments,overriding,the,specified,default,arguments,if,any,in,the,bean,definition,param,name,the,name,of,the,bean,to,retrieve,param,args,arguments,to,use,when,creating,a,bean,instance,using,explicit,arguments,only,applied,when,creating,a,new,instance,as,opposed,to,retrieving,an,existing,one,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,definition,store,exception,if,arguments,have,been,given,but,the,affected,bean,isn,t,a,prototype,throws,beans,exception,if,the,bean,could,not,be,created,since,2,5;object,get,bean,string,name,object,args,throws,beans,exception
BeanFactory -> Object getBean(String name, Object... args) throws BeansException_;1496837955;Return an instance, which may be shared or independent, of the specified bean._<p>Allows for specifying explicit constructor arguments / factory method arguments,_overriding the specified default arguments (if any) in the bean definition._@param name the name of the bean to retrieve_@param args arguments to use when creating a bean instance using explicit arguments_(only applied when creating a new instance as opposed to retrieving an existing one)_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanDefinitionStoreException if arguments have been given but_the affected bean isn't a prototype_@throws BeansException if the bean could not be created_@since 2.5;Object getBean(String name, Object... args) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,allows,for,specifying,explicit,constructor,arguments,factory,method,arguments,overriding,the,specified,default,arguments,if,any,in,the,bean,definition,param,name,the,name,of,the,bean,to,retrieve,param,args,arguments,to,use,when,creating,a,bean,instance,using,explicit,arguments,only,applied,when,creating,a,new,instance,as,opposed,to,retrieving,an,existing,one,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,definition,store,exception,if,arguments,have,been,given,but,the,affected,bean,isn,t,a,prototype,throws,beans,exception,if,the,bean,could,not,be,created,since,2,5;object,get,bean,string,name,object,args,throws,beans,exception
BeanFactory -> Object getBean(String name, Object... args) throws BeansException_;1532385723;Return an instance, which may be shared or independent, of the specified bean._<p>Allows for specifying explicit constructor arguments / factory method arguments,_overriding the specified default arguments (if any) in the bean definition._@param name the name of the bean to retrieve_@param args arguments to use when creating a bean instance using explicit arguments_(only applied when creating a new instance as opposed to retrieving an existing one)_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanDefinitionStoreException if arguments have been given but_the affected bean isn't a prototype_@throws BeansException if the bean could not be created_@since 2.5;Object getBean(String name, Object... args) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,allows,for,specifying,explicit,constructor,arguments,factory,method,arguments,overriding,the,specified,default,arguments,if,any,in,the,bean,definition,param,name,the,name,of,the,bean,to,retrieve,param,args,arguments,to,use,when,creating,a,bean,instance,using,explicit,arguments,only,applied,when,creating,a,new,instance,as,opposed,to,retrieving,an,existing,one,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,definition,store,exception,if,arguments,have,been,given,but,the,affected,bean,isn,t,a,prototype,throws,beans,exception,if,the,bean,could,not,be,created,since,2,5;object,get,bean,string,name,object,args,throws,beans,exception
BeanFactory -> Object getBean(String name, Object... args) throws BeansException_;1536855799;Return an instance, which may be shared or independent, of the specified bean._<p>Allows for specifying explicit constructor arguments / factory method arguments,_overriding the specified default arguments (if any) in the bean definition._@param name the name of the bean to retrieve_@param args arguments to use when creating a bean instance using explicit arguments_(only applied when creating a new instance as opposed to retrieving an existing one)_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanDefinitionStoreException if arguments have been given but_the affected bean isn't a prototype_@throws BeansException if the bean could not be created_@since 2.5;Object getBean(String name, Object... args) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,allows,for,specifying,explicit,constructor,arguments,factory,method,arguments,overriding,the,specified,default,arguments,if,any,in,the,bean,definition,param,name,the,name,of,the,bean,to,retrieve,param,args,arguments,to,use,when,creating,a,bean,instance,using,explicit,arguments,only,applied,when,creating,a,new,instance,as,opposed,to,retrieving,an,existing,one,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,definition,store,exception,if,arguments,have,been,given,but,the,affected,bean,isn,t,a,prototype,throws,beans,exception,if,the,bean,could,not,be,created,since,2,5;object,get,bean,string,name,object,args,throws,beans,exception
BeanFactory -> Object getBean(String name, Object... args) throws BeansException_;1539119659;Return an instance, which may be shared or independent, of the specified bean._<p>Allows for specifying explicit constructor arguments / factory method arguments,_overriding the specified default arguments (if any) in the bean definition._@param name the name of the bean to retrieve_@param args arguments to use when creating a bean instance using explicit arguments_(only applied when creating a new instance as opposed to retrieving an existing one)_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanDefinitionStoreException if arguments have been given but_the affected bean isn't a prototype_@throws BeansException if the bean could not be created_@since 2.5;Object getBean(String name, Object... args) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,allows,for,specifying,explicit,constructor,arguments,factory,method,arguments,overriding,the,specified,default,arguments,if,any,in,the,bean,definition,param,name,the,name,of,the,bean,to,retrieve,param,args,arguments,to,use,when,creating,a,bean,instance,using,explicit,arguments,only,applied,when,creating,a,new,instance,as,opposed,to,retrieving,an,existing,one,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,definition,store,exception,if,arguments,have,been,given,but,the,affected,bean,isn,t,a,prototype,throws,beans,exception,if,the,bean,could,not,be,created,since,2,5;object,get,bean,string,name,object,args,throws,beans,exception
BeanFactory -> Object getBean(String name, Object... args) throws BeansException_;1549551674;Return an instance, which may be shared or independent, of the specified bean._<p>Allows for specifying explicit constructor arguments / factory method arguments,_overriding the specified default arguments (if any) in the bean definition._@param name the name of the bean to retrieve_@param args arguments to use when creating a bean instance using explicit arguments_(only applied when creating a new instance as opposed to retrieving an existing one)_@return an instance of the bean_@throws NoSuchBeanDefinitionException if there is no such bean definition_@throws BeanDefinitionStoreException if arguments have been given but_the affected bean isn't a prototype_@throws BeansException if the bean could not be created_@since 2.5;Object getBean(String name, Object... args) throws BeansException_;return,an,instance,which,may,be,shared,or,independent,of,the,specified,bean,p,allows,for,specifying,explicit,constructor,arguments,factory,method,arguments,overriding,the,specified,default,arguments,if,any,in,the,bean,definition,param,name,the,name,of,the,bean,to,retrieve,param,args,arguments,to,use,when,creating,a,bean,instance,using,explicit,arguments,only,applied,when,creating,a,new,instance,as,opposed,to,retrieving,an,existing,one,return,an,instance,of,the,bean,throws,no,such,bean,definition,exception,if,there,is,no,such,bean,definition,throws,bean,definition,store,exception,if,arguments,have,been,given,but,the,affected,bean,isn,t,a,prototype,throws,beans,exception,if,the,bean,could,not,be,created,since,2,5;object,get,bean,string,name,object,args,throws,beans,exception
BeanFactory -> Class<?> getType(String name) throws NoSuchBeanDefinitionException_;1328020251;Determine the type of the bean with the given name. More specifically,_determine the type of object that {@link #getBean} would return for the given name._<p>For a {@link FactoryBean}, return the type of object that the FactoryBean creates,_as exposed by {@link FactoryBean#getObjectType()}._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return the type of the bean, or <code>null</code> if not determinable_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 1.1.2_@see #getBean_@see #isTypeMatch;Class<?> getType(String name) throws NoSuchBeanDefinitionException_;determine,the,type,of,the,bean,with,the,given,name,more,specifically,determine,the,type,of,object,that,link,get,bean,would,return,for,the,given,name,p,for,a,link,factory,bean,return,the,type,of,object,that,the,factory,bean,creates,as,exposed,by,link,factory,bean,get,object,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,the,type,of,the,bean,or,code,null,code,if,not,determinable,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,1,1,2,see,get,bean,see,is,type,match;class,get,type,string,name,throws,no,such,bean,definition,exception
BeanFactory -> Class<?> getType(String name) throws NoSuchBeanDefinitionException_;1356735495;Determine the type of the bean with the given name. More specifically,_determine the type of object that {@link #getBean} would return for the given name._<p>For a {@link FactoryBean}, return the type of object that the FactoryBean creates,_as exposed by {@link FactoryBean#getObjectType()}._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return the type of the bean, or {@code null} if not determinable_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 1.1.2_@see #getBean_@see #isTypeMatch;Class<?> getType(String name) throws NoSuchBeanDefinitionException_;determine,the,type,of,the,bean,with,the,given,name,more,specifically,determine,the,type,of,object,that,link,get,bean,would,return,for,the,given,name,p,for,a,link,factory,bean,return,the,type,of,object,that,the,factory,bean,creates,as,exposed,by,link,factory,bean,get,object,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,the,type,of,the,bean,or,code,null,if,not,determinable,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,1,1,2,see,get,bean,see,is,type,match;class,get,type,string,name,throws,no,such,bean,definition,exception
BeanFactory -> Class<?> getType(String name) throws NoSuchBeanDefinitionException_;1362408075;Determine the type of the bean with the given name. More specifically,_determine the type of object that {@link #getBean} would return for the given name._<p>For a {@link FactoryBean}, return the type of object that the FactoryBean creates,_as exposed by {@link FactoryBean#getObjectType()}._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return the type of the bean, or {@code null} if not determinable_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 1.1.2_@see #getBean_@see #isTypeMatch;Class<?> getType(String name) throws NoSuchBeanDefinitionException_;determine,the,type,of,the,bean,with,the,given,name,more,specifically,determine,the,type,of,object,that,link,get,bean,would,return,for,the,given,name,p,for,a,link,factory,bean,return,the,type,of,object,that,the,factory,bean,creates,as,exposed,by,link,factory,bean,get,object,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,the,type,of,the,bean,or,code,null,if,not,determinable,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,1,1,2,see,get,bean,see,is,type,match;class,get,type,string,name,throws,no,such,bean,definition,exception
BeanFactory -> Class<?> getType(String name) throws NoSuchBeanDefinitionException_;1407874032;Determine the type of the bean with the given name. More specifically,_determine the type of object that {@link #getBean} would return for the given name._<p>For a {@link FactoryBean}, return the type of object that the FactoryBean creates,_as exposed by {@link FactoryBean#getObjectType()}._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return the type of the bean, or {@code null} if not determinable_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 1.1.2_@see #getBean_@see #isTypeMatch;Class<?> getType(String name) throws NoSuchBeanDefinitionException_;determine,the,type,of,the,bean,with,the,given,name,more,specifically,determine,the,type,of,object,that,link,get,bean,would,return,for,the,given,name,p,for,a,link,factory,bean,return,the,type,of,object,that,the,factory,bean,creates,as,exposed,by,link,factory,bean,get,object,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,the,type,of,the,bean,or,code,null,if,not,determinable,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,1,1,2,see,get,bean,see,is,type,match;class,get,type,string,name,throws,no,such,bean,definition,exception
BeanFactory -> Class<?> getType(String name) throws NoSuchBeanDefinitionException_;1408052945;Determine the type of the bean with the given name. More specifically,_determine the type of object that {@link #getBean} would return for the given name._<p>For a {@link FactoryBean}, return the type of object that the FactoryBean creates,_as exposed by {@link FactoryBean#getObjectType()}._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return the type of the bean, or {@code null} if not determinable_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 1.1.2_@see #getBean_@see #isTypeMatch;Class<?> getType(String name) throws NoSuchBeanDefinitionException_;determine,the,type,of,the,bean,with,the,given,name,more,specifically,determine,the,type,of,object,that,link,get,bean,would,return,for,the,given,name,p,for,a,link,factory,bean,return,the,type,of,object,that,the,factory,bean,creates,as,exposed,by,link,factory,bean,get,object,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,the,type,of,the,bean,or,code,null,if,not,determinable,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,1,1,2,see,get,bean,see,is,type,match;class,get,type,string,name,throws,no,such,bean,definition,exception
BeanFactory -> Class<?> getType(String name) throws NoSuchBeanDefinitionException_;1417457126;Determine the type of the bean with the given name. More specifically,_determine the type of object that {@link #getBean} would return for the given name._<p>For a {@link FactoryBean}, return the type of object that the FactoryBean creates,_as exposed by {@link FactoryBean#getObjectType()}._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return the type of the bean, or {@code null} if not determinable_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 1.1.2_@see #getBean_@see #isTypeMatch;Class<?> getType(String name) throws NoSuchBeanDefinitionException_;determine,the,type,of,the,bean,with,the,given,name,more,specifically,determine,the,type,of,object,that,link,get,bean,would,return,for,the,given,name,p,for,a,link,factory,bean,return,the,type,of,object,that,the,factory,bean,creates,as,exposed,by,link,factory,bean,get,object,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,the,type,of,the,bean,or,code,null,if,not,determinable,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,1,1,2,see,get,bean,see,is,type,match;class,get,type,string,name,throws,no,such,bean,definition,exception
BeanFactory -> Class<?> getType(String name) throws NoSuchBeanDefinitionException_;1426716313;Determine the type of the bean with the given name. More specifically,_determine the type of object that {@link #getBean} would return for the given name._<p>For a {@link FactoryBean}, return the type of object that the FactoryBean creates,_as exposed by {@link FactoryBean#getObjectType()}._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return the type of the bean, or {@code null} if not determinable_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 1.1.2_@see #getBean_@see #isTypeMatch;Class<?> getType(String name) throws NoSuchBeanDefinitionException_;determine,the,type,of,the,bean,with,the,given,name,more,specifically,determine,the,type,of,object,that,link,get,bean,would,return,for,the,given,name,p,for,a,link,factory,bean,return,the,type,of,object,that,the,factory,bean,creates,as,exposed,by,link,factory,bean,get,object,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,the,type,of,the,bean,or,code,null,if,not,determinable,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,1,1,2,see,get,bean,see,is,type,match;class,get,type,string,name,throws,no,such,bean,definition,exception
BeanFactory -> Class<?> getType(String name) throws NoSuchBeanDefinitionException_;1427144223;Determine the type of the bean with the given name. More specifically,_determine the type of object that {@link #getBean} would return for the given name._<p>For a {@link FactoryBean}, return the type of object that the FactoryBean creates,_as exposed by {@link FactoryBean#getObjectType()}._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return the type of the bean, or {@code null} if not determinable_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 1.1.2_@see #getBean_@see #isTypeMatch;Class<?> getType(String name) throws NoSuchBeanDefinitionException_;determine,the,type,of,the,bean,with,the,given,name,more,specifically,determine,the,type,of,object,that,link,get,bean,would,return,for,the,given,name,p,for,a,link,factory,bean,return,the,type,of,object,that,the,factory,bean,creates,as,exposed,by,link,factory,bean,get,object,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,the,type,of,the,bean,or,code,null,if,not,determinable,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,1,1,2,see,get,bean,see,is,type,match;class,get,type,string,name,throws,no,such,bean,definition,exception
BeanFactory -> Class<?> getType(String name) throws NoSuchBeanDefinitionException_;1442313010;Determine the type of the bean with the given name. More specifically,_determine the type of object that {@link #getBean} would return for the given name._<p>For a {@link FactoryBean}, return the type of object that the FactoryBean creates,_as exposed by {@link FactoryBean#getObjectType()}._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return the type of the bean, or {@code null} if not determinable_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 1.1.2_@see #getBean_@see #isTypeMatch;Class<?> getType(String name) throws NoSuchBeanDefinitionException_;determine,the,type,of,the,bean,with,the,given,name,more,specifically,determine,the,type,of,object,that,link,get,bean,would,return,for,the,given,name,p,for,a,link,factory,bean,return,the,type,of,object,that,the,factory,bean,creates,as,exposed,by,link,factory,bean,get,object,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,the,type,of,the,bean,or,code,null,if,not,determinable,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,1,1,2,see,get,bean,see,is,type,match;class,get,type,string,name,throws,no,such,bean,definition,exception
BeanFactory -> Class<?> getType(String name) throws NoSuchBeanDefinitionException_;1454004037;Determine the type of the bean with the given name. More specifically,_determine the type of object that {@link #getBean} would return for the given name._<p>For a {@link FactoryBean}, return the type of object that the FactoryBean creates,_as exposed by {@link FactoryBean#getObjectType()}._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return the type of the bean, or {@code null} if not determinable_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 1.1.2_@see #getBean_@see #isTypeMatch;Class<?> getType(String name) throws NoSuchBeanDefinitionException_;determine,the,type,of,the,bean,with,the,given,name,more,specifically,determine,the,type,of,object,that,link,get,bean,would,return,for,the,given,name,p,for,a,link,factory,bean,return,the,type,of,object,that,the,factory,bean,creates,as,exposed,by,link,factory,bean,get,object,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,the,type,of,the,bean,or,code,null,if,not,determinable,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,1,1,2,see,get,bean,see,is,type,match;class,get,type,string,name,throws,no,such,bean,definition,exception
BeanFactory -> Class<?> getType(String name) throws NoSuchBeanDefinitionException_;1470948126;Determine the type of the bean with the given name. More specifically,_determine the type of object that {@link #getBean} would return for the given name._<p>For a {@link FactoryBean}, return the type of object that the FactoryBean creates,_as exposed by {@link FactoryBean#getObjectType()}._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return the type of the bean, or {@code null} if not determinable_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 1.1.2_@see #getBean_@see #isTypeMatch;Class<?> getType(String name) throws NoSuchBeanDefinitionException_;determine,the,type,of,the,bean,with,the,given,name,more,specifically,determine,the,type,of,object,that,link,get,bean,would,return,for,the,given,name,p,for,a,link,factory,bean,return,the,type,of,object,that,the,factory,bean,creates,as,exposed,by,link,factory,bean,get,object,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,the,type,of,the,bean,or,code,null,if,not,determinable,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,1,1,2,see,get,bean,see,is,type,match;class,get,type,string,name,throws,no,such,bean,definition,exception
BeanFactory -> Class<?> getType(String name) throws NoSuchBeanDefinitionException_;1473796164;Determine the type of the bean with the given name. More specifically,_determine the type of object that {@link #getBean} would return for the given name._<p>For a {@link FactoryBean}, return the type of object that the FactoryBean creates,_as exposed by {@link FactoryBean#getObjectType()}._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return the type of the bean, or {@code null} if not determinable_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 1.1.2_@see #getBean_@see #isTypeMatch;Class<?> getType(String name) throws NoSuchBeanDefinitionException_;determine,the,type,of,the,bean,with,the,given,name,more,specifically,determine,the,type,of,object,that,link,get,bean,would,return,for,the,given,name,p,for,a,link,factory,bean,return,the,type,of,object,that,the,factory,bean,creates,as,exposed,by,link,factory,bean,get,object,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,the,type,of,the,bean,or,code,null,if,not,determinable,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,1,1,2,see,get,bean,see,is,type,match;class,get,type,string,name,throws,no,such,bean,definition,exception
BeanFactory -> Class<?> getType(String name) throws NoSuchBeanDefinitionException_;1477468204;Determine the type of the bean with the given name. More specifically,_determine the type of object that {@link #getBean} would return for the given name._<p>For a {@link FactoryBean}, return the type of object that the FactoryBean creates,_as exposed by {@link FactoryBean#getObjectType()}._<p>Translates aliases back to the corresponding canonical bean name._Will ask the parent factory if the bean cannot be found in this factory instance._@param name the name of the bean to query_@return the type of the bean, or {@code null} if not determinable_@throws NoSuchBeanDefinitionException if there is no bean with the given name_@since 1.1.2_@see #getBean_@see #isTypeMatch;Class<?> getType(String name) throws NoSuchBeanDefinitionException_;determine,the,type,of,the,bean,with,the,given,name,more,specifically,determine,the,type,of,object,that,link,get,bean,would,return,for,the,given,name,p,for,a,link,factory,bean,return,the,type,of,object,that,the,factory,bean,creates,as,exposed,by,link,factory,bean,get,object,type,p,translates,aliases,back,to,the,corresponding,canonical,bean,name,will,ask,the,parent,factory,if,the,bean,cannot,be,found,in,this,factory,instance,param,name,the,name,of,the,bean,to,query,return,the,type,of,the,bean,or,code,null,if,not,determinable,throws,no,such,bean,definition,exception,if,there,is,no,bean,with,the,given,name,since,1,1,2,see,get,bean,see,is,type,match;class,get,type,string,name,throws,no,such,bean,definition,exception
