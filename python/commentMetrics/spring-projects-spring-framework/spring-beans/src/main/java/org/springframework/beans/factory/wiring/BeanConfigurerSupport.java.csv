# id;timestamp;commentText;codeText;commentWords;codeWords
BeanConfigurerSupport -> public void destroy();1328020251;Release references to the {@link BeanFactory} and_{@link BeanWiringInfoResolver} when the container is destroyed.;public void destroy() {_		this.beanFactory = null__		this.beanWiringInfoResolver = null__	};release,references,to,the,link,bean,factory,and,link,bean,wiring,info,resolver,when,the,container,is,destroyed;public,void,destroy,this,bean,factory,null,this,bean,wiring,info,resolver,null
BeanConfigurerSupport -> public void destroy();1357119239;Release references to the {@link BeanFactory} and_{@link BeanWiringInfoResolver} when the container is destroyed.;public void destroy() {_		this.beanFactory = null__		this.beanWiringInfoResolver = null__	};release,references,to,the,link,bean,factory,and,link,bean,wiring,info,resolver,when,the,container,is,destroyed;public,void,destroy,this,bean,factory,null,this,bean,wiring,info,resolver,null
BeanConfigurerSupport -> public void destroy();1362408075;Release references to the {@link BeanFactory} and_{@link BeanWiringInfoResolver} when the container is destroyed.;public void destroy() {_		this.beanFactory = null__		this.beanWiringInfoResolver = null__	};release,references,to,the,link,bean,factory,and,link,bean,wiring,info,resolver,when,the,container,is,destroyed;public,void,destroy,this,bean,factory,null,this,bean,wiring,info,resolver,null
BeanConfigurerSupport -> @Override 	public void afterPropertiesSet();1356735495;Check that a {@link BeanFactory} has been set.;@Override_	public void afterPropertiesSet() {_		Assert.notNull(this.beanFactory, "BeanFactory must be set")__	};check,that,a,link,bean,factory,has,been,set;override,public,void,after,properties,set,assert,not,null,this,bean,factory,bean,factory,must,be,set
BeanConfigurerSupport -> @Override 	public void afterPropertiesSet();1368482696;Check that a {@link BeanFactory} has been set.;@Override_	public void afterPropertiesSet() {_		Assert.notNull(this.beanFactory, "BeanFactory must be set")__	};check,that,a,link,bean,factory,has,been,set;override,public,void,after,properties,set,assert,not,null,this,bean,factory,bean,factory,must,be,set
BeanConfigurerSupport -> @Override 	public void afterPropertiesSet();1495868221;Check that a {@link BeanFactory} has been set.;@Override_	public void afterPropertiesSet() {_		Assert.notNull(this.beanFactory, "BeanFactory must be set")__	};check,that,a,link,bean,factory,has,been,set;override,public,void,after,properties,set,assert,not,null,this,bean,factory,bean,factory,must,be,set
BeanConfigurerSupport -> @Override 	public void afterPropertiesSet();1496837955;Check that a {@link BeanFactory} has been set.;@Override_	public void afterPropertiesSet() {_		Assert.notNull(this.beanFactory, "BeanFactory must be set")__	};check,that,a,link,bean,factory,has,been,set;override,public,void,after,properties,set,assert,not,null,this,bean,factory,bean,factory,must,be,set
BeanConfigurerSupport -> @Override 	public void afterPropertiesSet();1496955179;Check that a {@link BeanFactory} has been set.;@Override_	public void afterPropertiesSet() {_		Assert.notNull(this.beanFactory, "BeanFactory must be set")__	};check,that,a,link,bean,factory,has,been,set;override,public,void,after,properties,set,assert,not,null,this,bean,factory,bean,factory,must,be,set
BeanConfigurerSupport -> @Override 	public void afterPropertiesSet();1498780456;Check that a {@link BeanFactory} has been set.;@Override_	public void afterPropertiesSet() {_		Assert.notNull(this.beanFactory, "BeanFactory must be set")__	};check,that,a,link,bean,factory,has,been,set;override,public,void,after,properties,set,assert,not,null,this,bean,factory,bean,factory,must,be,set
BeanConfigurerSupport -> @Override 	public void afterPropertiesSet();1522360217;Check that a {@link BeanFactory} has been set.;@Override_	public void afterPropertiesSet() {_		Assert.notNull(this.beanFactory, "BeanFactory must be set")__	};check,that,a,link,bean,factory,has,been,set;override,public,void,after,properties,set,assert,not,null,this,bean,factory,bean,factory,must,be,set
BeanConfigurerSupport -> @Override 	public void afterPropertiesSet();1530174524;Check that a {@link BeanFactory} has been set.;@Override_	public void afterPropertiesSet() {_		Assert.notNull(this.beanFactory, "BeanFactory must be set")__	};check,that,a,link,bean,factory,has,been,set;override,public,void,after,properties,set,assert,not,null,this,bean,factory,bean,factory,must,be,set
BeanConfigurerSupport -> @Override 	public void afterPropertiesSet();1530174524;Check that a {@link BeanFactory} has been set.;@Override_	public void afterPropertiesSet() {_		Assert.notNull(this.beanFactory, "BeanFactory must be set")__	};check,that,a,link,bean,factory,has,been,set;override,public,void,after,properties,set,assert,not,null,this,bean,factory,bean,factory,must,be,set
BeanConfigurerSupport -> @Nullable 	protected BeanWiringInfoResolver createDefaultBeanWiringInfoResolver();1495868221;Create the default BeanWiringInfoResolver to be used if none was_specified explicitly._<p>The default implementation builds a {@link ClassNameBeanWiringInfoResolver}._@return the default BeanWiringInfoResolver (never {@code null});@Nullable_	protected BeanWiringInfoResolver createDefaultBeanWiringInfoResolver() {_		return new ClassNameBeanWiringInfoResolver()__	};create,the,default,bean,wiring,info,resolver,to,be,used,if,none,was,specified,explicitly,p,the,default,implementation,builds,a,link,class,name,bean,wiring,info,resolver,return,the,default,bean,wiring,info,resolver,never,code,null;nullable,protected,bean,wiring,info,resolver,create,default,bean,wiring,info,resolver,return,new,class,name,bean,wiring,info,resolver
BeanConfigurerSupport -> @Nullable 	protected BeanWiringInfoResolver createDefaultBeanWiringInfoResolver();1496837955;Create the default BeanWiringInfoResolver to be used if none was_specified explicitly._<p>The default implementation builds a {@link ClassNameBeanWiringInfoResolver}._@return the default BeanWiringInfoResolver (never {@code null});@Nullable_	protected BeanWiringInfoResolver createDefaultBeanWiringInfoResolver() {_		return new ClassNameBeanWiringInfoResolver()__	};create,the,default,bean,wiring,info,resolver,to,be,used,if,none,was,specified,explicitly,p,the,default,implementation,builds,a,link,class,name,bean,wiring,info,resolver,return,the,default,bean,wiring,info,resolver,never,code,null;nullable,protected,bean,wiring,info,resolver,create,default,bean,wiring,info,resolver,return,new,class,name,bean,wiring,info,resolver
BeanConfigurerSupport -> @Nullable 	protected BeanWiringInfoResolver createDefaultBeanWiringInfoResolver();1496955179;Create the default BeanWiringInfoResolver to be used if none was_specified explicitly._<p>The default implementation builds a {@link ClassNameBeanWiringInfoResolver}._@return the default BeanWiringInfoResolver (never {@code null});@Nullable_	protected BeanWiringInfoResolver createDefaultBeanWiringInfoResolver() {_		return new ClassNameBeanWiringInfoResolver()__	};create,the,default,bean,wiring,info,resolver,to,be,used,if,none,was,specified,explicitly,p,the,default,implementation,builds,a,link,class,name,bean,wiring,info,resolver,return,the,default,bean,wiring,info,resolver,never,code,null;nullable,protected,bean,wiring,info,resolver,create,default,bean,wiring,info,resolver,return,new,class,name,bean,wiring,info,resolver
BeanConfigurerSupport -> @Nullable 	protected BeanWiringInfoResolver createDefaultBeanWiringInfoResolver();1498780456;Create the default BeanWiringInfoResolver to be used if none was_specified explicitly._<p>The default implementation builds a {@link ClassNameBeanWiringInfoResolver}._@return the default BeanWiringInfoResolver (never {@code null});@Nullable_	protected BeanWiringInfoResolver createDefaultBeanWiringInfoResolver() {_		return new ClassNameBeanWiringInfoResolver()__	};create,the,default,bean,wiring,info,resolver,to,be,used,if,none,was,specified,explicitly,p,the,default,implementation,builds,a,link,class,name,bean,wiring,info,resolver,return,the,default,bean,wiring,info,resolver,never,code,null;nullable,protected,bean,wiring,info,resolver,create,default,bean,wiring,info,resolver,return,new,class,name,bean,wiring,info,resolver
BeanConfigurerSupport -> @Nullable 	protected BeanWiringInfoResolver createDefaultBeanWiringInfoResolver();1522360217;Create the default BeanWiringInfoResolver to be used if none was_specified explicitly._<p>The default implementation builds a {@link ClassNameBeanWiringInfoResolver}._@return the default BeanWiringInfoResolver (never {@code null});@Nullable_	protected BeanWiringInfoResolver createDefaultBeanWiringInfoResolver() {_		return new ClassNameBeanWiringInfoResolver()__	};create,the,default,bean,wiring,info,resolver,to,be,used,if,none,was,specified,explicitly,p,the,default,implementation,builds,a,link,class,name,bean,wiring,info,resolver,return,the,default,bean,wiring,info,resolver,never,code,null;nullable,protected,bean,wiring,info,resolver,create,default,bean,wiring,info,resolver,return,new,class,name,bean,wiring,info,resolver
BeanConfigurerSupport -> @Nullable 	protected BeanWiringInfoResolver createDefaultBeanWiringInfoResolver();1530174524;Create the default BeanWiringInfoResolver to be used if none was_specified explicitly._<p>The default implementation builds a {@link ClassNameBeanWiringInfoResolver}._@return the default BeanWiringInfoResolver (never {@code null});@Nullable_	protected BeanWiringInfoResolver createDefaultBeanWiringInfoResolver() {_		return new ClassNameBeanWiringInfoResolver()__	};create,the,default,bean,wiring,info,resolver,to,be,used,if,none,was,specified,explicitly,p,the,default,implementation,builds,a,link,class,name,bean,wiring,info,resolver,return,the,default,bean,wiring,info,resolver,never,code,null;nullable,protected,bean,wiring,info,resolver,create,default,bean,wiring,info,resolver,return,new,class,name,bean,wiring,info,resolver
BeanConfigurerSupport -> @Nullable 	protected BeanWiringInfoResolver createDefaultBeanWiringInfoResolver();1530174524;Create the default BeanWiringInfoResolver to be used if none was_specified explicitly._<p>The default implementation builds a {@link ClassNameBeanWiringInfoResolver}._@return the default BeanWiringInfoResolver (never {@code null});@Nullable_	protected BeanWiringInfoResolver createDefaultBeanWiringInfoResolver() {_		return new ClassNameBeanWiringInfoResolver()__	};create,the,default,bean,wiring,info,resolver,to,be,used,if,none,was,specified,explicitly,p,the,default,implementation,builds,a,link,class,name,bean,wiring,info,resolver,return,the,default,bean,wiring,info,resolver,never,code,null;nullable,protected,bean,wiring,info,resolver,create,default,bean,wiring,info,resolver,return,new,class,name,bean,wiring,info,resolver
BeanConfigurerSupport -> public void configureBean(Object beanInstance);1328020251;Configure the bean instance._<p>Subclasses can override this to provide custom configuration logic._Typically called by an aspect, for all bean instances matched by a_pointcut._@param beanInstance the bean instance to configure (must <b>not</b> be <code>null</code>);public void configureBean(Object beanInstance) {_		if (this.beanFactory == null) {_			if (logger.isDebugEnabled()) {_				logger.debug("BeanFactory has not been set on " + ClassUtils.getShortName(getClass()) + ": " +_						"Make sure this configurer runs in a Spring container. Unable to configure bean of type [" +_						ClassUtils.getDescriptiveType(beanInstance) + "]. Proceeding without injection.")__			}_			return__		}__		BeanWiringInfo bwi = this.beanWiringInfoResolver.resolveWiringInfo(beanInstance)__		if (bwi == null) {_			_			return__		}__		try {_			if (bwi.indicatesAutowiring() ||_					(bwi.isDefaultBeanName() && !this.beanFactory.containsBean(bwi.getBeanName()))) {_				_				this.beanFactory.autowireBeanProperties(beanInstance, bwi.getAutowireMode(), bwi.getDependencyCheck())__				Object result = this.beanFactory.initializeBean(beanInstance, bwi.getBeanName())__				checkExposedObject(result, beanInstance)__			}_			else {_				_				Object result = this.beanFactory.configureBean(beanInstance, bwi.getBeanName())__				checkExposedObject(result, beanInstance)__			}_		}_		catch (BeanCreationException ex) {_			Throwable rootCause = ex.getMostSpecificCause()__			if (rootCause instanceof BeanCurrentlyInCreationException) {_				BeanCreationException bce = (BeanCreationException) rootCause__				if (this.beanFactory.isCurrentlyInCreation(bce.getBeanName())) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failed to create target bean '" + bce.getBeanName() +_								"' while configuring object of type [" + beanInstance.getClass().getName() +_								"] - probably due to a circular reference. This is a common startup situation " +_								"and usually not fatal. Proceeding without injection. Original exception: " + ex)__					}_					return__				}_			}_			throw ex__		}_	};configure,the,bean,instance,p,subclasses,can,override,this,to,provide,custom,configuration,logic,typically,called,by,an,aspect,for,all,bean,instances,matched,by,a,pointcut,param,bean,instance,the,bean,instance,to,configure,must,b,not,b,be,code,null,code;public,void,configure,bean,object,bean,instance,if,this,bean,factory,null,if,logger,is,debug,enabled,logger,debug,bean,factory,has,not,been,set,on,class,utils,get,short,name,get,class,make,sure,this,configurer,runs,in,a,spring,container,unable,to,configure,bean,of,type,class,utils,get,descriptive,type,bean,instance,proceeding,without,injection,return,bean,wiring,info,bwi,this,bean,wiring,info,resolver,resolve,wiring,info,bean,instance,if,bwi,null,return,try,if,bwi,indicates,autowiring,bwi,is,default,bean,name,this,bean,factory,contains,bean,bwi,get,bean,name,this,bean,factory,autowire,bean,properties,bean,instance,bwi,get,autowire,mode,bwi,get,dependency,check,object,result,this,bean,factory,initialize,bean,bean,instance,bwi,get,bean,name,check,exposed,object,result,bean,instance,else,object,result,this,bean,factory,configure,bean,bean,instance,bwi,get,bean,name,check,exposed,object,result,bean,instance,catch,bean,creation,exception,ex,throwable,root,cause,ex,get,most,specific,cause,if,root,cause,instanceof,bean,currently,in,creation,exception,bean,creation,exception,bce,bean,creation,exception,root,cause,if,this,bean,factory,is,currently,in,creation,bce,get,bean,name,if,logger,is,debug,enabled,logger,debug,failed,to,create,target,bean,bce,get,bean,name,while,configuring,object,of,type,bean,instance,get,class,get,name,probably,due,to,a,circular,reference,this,is,a,common,startup,situation,and,usually,not,fatal,proceeding,without,injection,original,exception,ex,return,throw,ex
BeanConfigurerSupport -> public void configureBean(Object beanInstance);1356735495;Configure the bean instance._<p>Subclasses can override this to provide custom configuration logic._Typically called by an aspect, for all bean instances matched by a_pointcut._@param beanInstance the bean instance to configure (must <b>not</b> be {@code null});public void configureBean(Object beanInstance) {_		if (this.beanFactory == null) {_			if (logger.isDebugEnabled()) {_				logger.debug("BeanFactory has not been set on " + ClassUtils.getShortName(getClass()) + ": " +_						"Make sure this configurer runs in a Spring container. Unable to configure bean of type [" +_						ClassUtils.getDescriptiveType(beanInstance) + "]. Proceeding without injection.")__			}_			return__		}__		BeanWiringInfo bwi = this.beanWiringInfoResolver.resolveWiringInfo(beanInstance)__		if (bwi == null) {_			_			return__		}__		try {_			if (bwi.indicatesAutowiring() ||_					(bwi.isDefaultBeanName() && !this.beanFactory.containsBean(bwi.getBeanName()))) {_				_				this.beanFactory.autowireBeanProperties(beanInstance, bwi.getAutowireMode(), bwi.getDependencyCheck())__				Object result = this.beanFactory.initializeBean(beanInstance, bwi.getBeanName())__				checkExposedObject(result, beanInstance)__			}_			else {_				_				Object result = this.beanFactory.configureBean(beanInstance, bwi.getBeanName())__				checkExposedObject(result, beanInstance)__			}_		}_		catch (BeanCreationException ex) {_			Throwable rootCause = ex.getMostSpecificCause()__			if (rootCause instanceof BeanCurrentlyInCreationException) {_				BeanCreationException bce = (BeanCreationException) rootCause__				if (this.beanFactory.isCurrentlyInCreation(bce.getBeanName())) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failed to create target bean '" + bce.getBeanName() +_								"' while configuring object of type [" + beanInstance.getClass().getName() +_								"] - probably due to a circular reference. This is a common startup situation " +_								"and usually not fatal. Proceeding without injection. Original exception: " + ex)__					}_					return__				}_			}_			throw ex__		}_	};configure,the,bean,instance,p,subclasses,can,override,this,to,provide,custom,configuration,logic,typically,called,by,an,aspect,for,all,bean,instances,matched,by,a,pointcut,param,bean,instance,the,bean,instance,to,configure,must,b,not,b,be,code,null;public,void,configure,bean,object,bean,instance,if,this,bean,factory,null,if,logger,is,debug,enabled,logger,debug,bean,factory,has,not,been,set,on,class,utils,get,short,name,get,class,make,sure,this,configurer,runs,in,a,spring,container,unable,to,configure,bean,of,type,class,utils,get,descriptive,type,bean,instance,proceeding,without,injection,return,bean,wiring,info,bwi,this,bean,wiring,info,resolver,resolve,wiring,info,bean,instance,if,bwi,null,return,try,if,bwi,indicates,autowiring,bwi,is,default,bean,name,this,bean,factory,contains,bean,bwi,get,bean,name,this,bean,factory,autowire,bean,properties,bean,instance,bwi,get,autowire,mode,bwi,get,dependency,check,object,result,this,bean,factory,initialize,bean,bean,instance,bwi,get,bean,name,check,exposed,object,result,bean,instance,else,object,result,this,bean,factory,configure,bean,bean,instance,bwi,get,bean,name,check,exposed,object,result,bean,instance,catch,bean,creation,exception,ex,throwable,root,cause,ex,get,most,specific,cause,if,root,cause,instanceof,bean,currently,in,creation,exception,bean,creation,exception,bce,bean,creation,exception,root,cause,if,this,bean,factory,is,currently,in,creation,bce,get,bean,name,if,logger,is,debug,enabled,logger,debug,failed,to,create,target,bean,bce,get,bean,name,while,configuring,object,of,type,bean,instance,get,class,get,name,probably,due,to,a,circular,reference,this,is,a,common,startup,situation,and,usually,not,fatal,proceeding,without,injection,original,exception,ex,return,throw,ex
BeanConfigurerSupport -> public void configureBean(Object beanInstance);1357119239;Configure the bean instance._<p>Subclasses can override this to provide custom configuration logic._Typically called by an aspect, for all bean instances matched by a_pointcut._@param beanInstance the bean instance to configure (must <b>not</b> be {@code null});public void configureBean(Object beanInstance) {_		if (this.beanFactory == null) {_			if (logger.isDebugEnabled()) {_				logger.debug("BeanFactory has not been set on " + ClassUtils.getShortName(getClass()) + ": " +_						"Make sure this configurer runs in a Spring container. Unable to configure bean of type [" +_						ClassUtils.getDescriptiveType(beanInstance) + "]. Proceeding without injection.")__			}_			return__		}__		BeanWiringInfo bwi = this.beanWiringInfoResolver.resolveWiringInfo(beanInstance)__		if (bwi == null) {_			_			return__		}__		try {_			if (bwi.indicatesAutowiring() ||_					(bwi.isDefaultBeanName() && !this.beanFactory.containsBean(bwi.getBeanName()))) {_				_				this.beanFactory.autowireBeanProperties(beanInstance, bwi.getAutowireMode(), bwi.getDependencyCheck())__				Object result = this.beanFactory.initializeBean(beanInstance, bwi.getBeanName())__				checkExposedObject(result, beanInstance)__			}_			else {_				_				Object result = this.beanFactory.configureBean(beanInstance, bwi.getBeanName())__				checkExposedObject(result, beanInstance)__			}_		}_		catch (BeanCreationException ex) {_			Throwable rootCause = ex.getMostSpecificCause()__			if (rootCause instanceof BeanCurrentlyInCreationException) {_				BeanCreationException bce = (BeanCreationException) rootCause__				if (this.beanFactory.isCurrentlyInCreation(bce.getBeanName())) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failed to create target bean '" + bce.getBeanName() +_								"' while configuring object of type [" + beanInstance.getClass().getName() +_								"] - probably due to a circular reference. This is a common startup situation " +_								"and usually not fatal. Proceeding without injection. Original exception: " + ex)__					}_					return__				}_			}_			throw ex__		}_	};configure,the,bean,instance,p,subclasses,can,override,this,to,provide,custom,configuration,logic,typically,called,by,an,aspect,for,all,bean,instances,matched,by,a,pointcut,param,bean,instance,the,bean,instance,to,configure,must,b,not,b,be,code,null;public,void,configure,bean,object,bean,instance,if,this,bean,factory,null,if,logger,is,debug,enabled,logger,debug,bean,factory,has,not,been,set,on,class,utils,get,short,name,get,class,make,sure,this,configurer,runs,in,a,spring,container,unable,to,configure,bean,of,type,class,utils,get,descriptive,type,bean,instance,proceeding,without,injection,return,bean,wiring,info,bwi,this,bean,wiring,info,resolver,resolve,wiring,info,bean,instance,if,bwi,null,return,try,if,bwi,indicates,autowiring,bwi,is,default,bean,name,this,bean,factory,contains,bean,bwi,get,bean,name,this,bean,factory,autowire,bean,properties,bean,instance,bwi,get,autowire,mode,bwi,get,dependency,check,object,result,this,bean,factory,initialize,bean,bean,instance,bwi,get,bean,name,check,exposed,object,result,bean,instance,else,object,result,this,bean,factory,configure,bean,bean,instance,bwi,get,bean,name,check,exposed,object,result,bean,instance,catch,bean,creation,exception,ex,throwable,root,cause,ex,get,most,specific,cause,if,root,cause,instanceof,bean,currently,in,creation,exception,bean,creation,exception,bce,bean,creation,exception,root,cause,if,this,bean,factory,is,currently,in,creation,bce,get,bean,name,if,logger,is,debug,enabled,logger,debug,failed,to,create,target,bean,bce,get,bean,name,while,configuring,object,of,type,bean,instance,get,class,get,name,probably,due,to,a,circular,reference,this,is,a,common,startup,situation,and,usually,not,fatal,proceeding,without,injection,original,exception,ex,return,throw,ex
BeanConfigurerSupport -> public void configureBean(Object beanInstance);1362408075;Configure the bean instance._<p>Subclasses can override this to provide custom configuration logic._Typically called by an aspect, for all bean instances matched by a pointcut._@param beanInstance the bean instance to configure (must <b>not</b> be {@code null});public void configureBean(Object beanInstance) {_		if (this.beanFactory == null) {_			if (logger.isDebugEnabled()) {_				logger.debug("BeanFactory has not been set on " + ClassUtils.getShortName(getClass()) + ": " +_						"Make sure this configurer runs in a Spring container. Unable to configure bean of type [" +_						ClassUtils.getDescriptiveType(beanInstance) + "]. Proceeding without injection.")__			}_			return__		}__		BeanWiringInfo bwi = this.beanWiringInfoResolver.resolveWiringInfo(beanInstance)__		if (bwi == null) {_			_			return__		}__		try {_			if (bwi.indicatesAutowiring() ||_					(bwi.isDefaultBeanName() && !this.beanFactory.containsBean(bwi.getBeanName()))) {_				_				this.beanFactory.autowireBeanProperties(beanInstance, bwi.getAutowireMode(), bwi.getDependencyCheck())__				Object result = this.beanFactory.initializeBean(beanInstance, bwi.getBeanName())__				checkExposedObject(result, beanInstance)__			}_			else {_				_				Object result = this.beanFactory.configureBean(beanInstance, bwi.getBeanName())__				checkExposedObject(result, beanInstance)__			}_		}_		catch (BeanCreationException ex) {_			Throwable rootCause = ex.getMostSpecificCause()__			if (rootCause instanceof BeanCurrentlyInCreationException) {_				BeanCreationException bce = (BeanCreationException) rootCause__				if (this.beanFactory.isCurrentlyInCreation(bce.getBeanName())) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failed to create target bean '" + bce.getBeanName() +_								"' while configuring object of type [" + beanInstance.getClass().getName() +_								"] - probably due to a circular reference. This is a common startup situation " +_								"and usually not fatal. Proceeding without injection. Original exception: " + ex)__					}_					return__				}_			}_			throw ex__		}_	};configure,the,bean,instance,p,subclasses,can,override,this,to,provide,custom,configuration,logic,typically,called,by,an,aspect,for,all,bean,instances,matched,by,a,pointcut,param,bean,instance,the,bean,instance,to,configure,must,b,not,b,be,code,null;public,void,configure,bean,object,bean,instance,if,this,bean,factory,null,if,logger,is,debug,enabled,logger,debug,bean,factory,has,not,been,set,on,class,utils,get,short,name,get,class,make,sure,this,configurer,runs,in,a,spring,container,unable,to,configure,bean,of,type,class,utils,get,descriptive,type,bean,instance,proceeding,without,injection,return,bean,wiring,info,bwi,this,bean,wiring,info,resolver,resolve,wiring,info,bean,instance,if,bwi,null,return,try,if,bwi,indicates,autowiring,bwi,is,default,bean,name,this,bean,factory,contains,bean,bwi,get,bean,name,this,bean,factory,autowire,bean,properties,bean,instance,bwi,get,autowire,mode,bwi,get,dependency,check,object,result,this,bean,factory,initialize,bean,bean,instance,bwi,get,bean,name,check,exposed,object,result,bean,instance,else,object,result,this,bean,factory,configure,bean,bean,instance,bwi,get,bean,name,check,exposed,object,result,bean,instance,catch,bean,creation,exception,ex,throwable,root,cause,ex,get,most,specific,cause,if,root,cause,instanceof,bean,currently,in,creation,exception,bean,creation,exception,bce,bean,creation,exception,root,cause,if,this,bean,factory,is,currently,in,creation,bce,get,bean,name,if,logger,is,debug,enabled,logger,debug,failed,to,create,target,bean,bce,get,bean,name,while,configuring,object,of,type,bean,instance,get,class,get,name,probably,due,to,a,circular,reference,this,is,a,common,startup,situation,and,usually,not,fatal,proceeding,without,injection,original,exception,ex,return,throw,ex
BeanConfigurerSupport -> public void configureBean(Object beanInstance);1368482696;Configure the bean instance._<p>Subclasses can override this to provide custom configuration logic._Typically called by an aspect, for all bean instances matched by a pointcut._@param beanInstance the bean instance to configure (must <b>not</b> be {@code null});public void configureBean(Object beanInstance) {_		if (this.beanFactory == null) {_			if (logger.isDebugEnabled()) {_				logger.debug("BeanFactory has not been set on " + ClassUtils.getShortName(getClass()) + ": " +_						"Make sure this configurer runs in a Spring container. Unable to configure bean of type [" +_						ClassUtils.getDescriptiveType(beanInstance) + "]. Proceeding without injection.")__			}_			return__		}__		BeanWiringInfo bwi = this.beanWiringInfoResolver.resolveWiringInfo(beanInstance)__		if (bwi == null) {_			_			return__		}__		try {_			if (bwi.indicatesAutowiring() ||_					(bwi.isDefaultBeanName() && !this.beanFactory.containsBean(bwi.getBeanName()))) {_				_				this.beanFactory.autowireBeanProperties(beanInstance, bwi.getAutowireMode(), bwi.getDependencyCheck())__				Object result = this.beanFactory.initializeBean(beanInstance, bwi.getBeanName())__				checkExposedObject(result, beanInstance)__			}_			else {_				_				Object result = this.beanFactory.configureBean(beanInstance, bwi.getBeanName())__				checkExposedObject(result, beanInstance)__			}_		}_		catch (BeanCreationException ex) {_			Throwable rootCause = ex.getMostSpecificCause()__			if (rootCause instanceof BeanCurrentlyInCreationException) {_				BeanCreationException bce = (BeanCreationException) rootCause__				if (this.beanFactory.isCurrentlyInCreation(bce.getBeanName())) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failed to create target bean '" + bce.getBeanName() +_								"' while configuring object of type [" + beanInstance.getClass().getName() +_								"] - probably due to a circular reference. This is a common startup situation " +_								"and usually not fatal. Proceeding without injection. Original exception: " + ex)__					}_					return__				}_			}_			throw ex__		}_	};configure,the,bean,instance,p,subclasses,can,override,this,to,provide,custom,configuration,logic,typically,called,by,an,aspect,for,all,bean,instances,matched,by,a,pointcut,param,bean,instance,the,bean,instance,to,configure,must,b,not,b,be,code,null;public,void,configure,bean,object,bean,instance,if,this,bean,factory,null,if,logger,is,debug,enabled,logger,debug,bean,factory,has,not,been,set,on,class,utils,get,short,name,get,class,make,sure,this,configurer,runs,in,a,spring,container,unable,to,configure,bean,of,type,class,utils,get,descriptive,type,bean,instance,proceeding,without,injection,return,bean,wiring,info,bwi,this,bean,wiring,info,resolver,resolve,wiring,info,bean,instance,if,bwi,null,return,try,if,bwi,indicates,autowiring,bwi,is,default,bean,name,this,bean,factory,contains,bean,bwi,get,bean,name,this,bean,factory,autowire,bean,properties,bean,instance,bwi,get,autowire,mode,bwi,get,dependency,check,object,result,this,bean,factory,initialize,bean,bean,instance,bwi,get,bean,name,check,exposed,object,result,bean,instance,else,object,result,this,bean,factory,configure,bean,bean,instance,bwi,get,bean,name,check,exposed,object,result,bean,instance,catch,bean,creation,exception,ex,throwable,root,cause,ex,get,most,specific,cause,if,root,cause,instanceof,bean,currently,in,creation,exception,bean,creation,exception,bce,bean,creation,exception,root,cause,if,this,bean,factory,is,currently,in,creation,bce,get,bean,name,if,logger,is,debug,enabled,logger,debug,failed,to,create,target,bean,bce,get,bean,name,while,configuring,object,of,type,bean,instance,get,class,get,name,probably,due,to,a,circular,reference,this,is,a,common,startup,situation,and,usually,not,fatal,proceeding,without,injection,original,exception,ex,return,throw,ex
BeanConfigurerSupport -> public void configureBean(Object beanInstance);1496837955;Configure the bean instance._<p>Subclasses can override this to provide custom configuration logic._Typically called by an aspect, for all bean instances matched by a pointcut._@param beanInstance the bean instance to configure (must <b>not</b> be {@code null});public void configureBean(Object beanInstance) {_		if (this.beanFactory == null) {_			if (logger.isDebugEnabled()) {_				logger.debug("BeanFactory has not been set on " + ClassUtils.getShortName(getClass()) + ": " +_						"Make sure this configurer runs in a Spring container. Unable to configure bean of type [" +_						ClassUtils.getDescriptiveType(beanInstance) + "]. Proceeding without injection.")__			}_			return__		}__		BeanWiringInfo bwi = this.beanWiringInfoResolver.resolveWiringInfo(beanInstance)__		if (bwi == null) {_			_			return__		}__		try {_			if (bwi.indicatesAutowiring() || (bwi.isDefaultBeanName() && bwi.getBeanName() != null &&_					!this.beanFactory.containsBean(bwi.getBeanName()))) {_				_				this.beanFactory.autowireBeanProperties(beanInstance, bwi.getAutowireMode(), bwi.getDependencyCheck())__				Object result = this.beanFactory.initializeBean(beanInstance, bwi.getBeanName())__				checkExposedObject(result, beanInstance)__			}_			else {_				_				Object result = this.beanFactory.configureBean(beanInstance, bwi.getBeanName())__				checkExposedObject(result, beanInstance)__			}_		}_		catch (BeanCreationException ex) {_			Throwable rootCause = ex.getMostSpecificCause()__			if (rootCause instanceof BeanCurrentlyInCreationException) {_				BeanCreationException bce = (BeanCreationException) rootCause__				if (this.beanFactory.isCurrentlyInCreation(bce.getBeanName())) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failed to create target bean '" + bce.getBeanName() +_								"' while configuring object of type [" + beanInstance.getClass().getName() +_								"] - probably due to a circular reference. This is a common startup situation " +_								"and usually not fatal. Proceeding without injection. Original exception: " + ex)__					}_					return__				}_			}_			throw ex__		}_	};configure,the,bean,instance,p,subclasses,can,override,this,to,provide,custom,configuration,logic,typically,called,by,an,aspect,for,all,bean,instances,matched,by,a,pointcut,param,bean,instance,the,bean,instance,to,configure,must,b,not,b,be,code,null;public,void,configure,bean,object,bean,instance,if,this,bean,factory,null,if,logger,is,debug,enabled,logger,debug,bean,factory,has,not,been,set,on,class,utils,get,short,name,get,class,make,sure,this,configurer,runs,in,a,spring,container,unable,to,configure,bean,of,type,class,utils,get,descriptive,type,bean,instance,proceeding,without,injection,return,bean,wiring,info,bwi,this,bean,wiring,info,resolver,resolve,wiring,info,bean,instance,if,bwi,null,return,try,if,bwi,indicates,autowiring,bwi,is,default,bean,name,bwi,get,bean,name,null,this,bean,factory,contains,bean,bwi,get,bean,name,this,bean,factory,autowire,bean,properties,bean,instance,bwi,get,autowire,mode,bwi,get,dependency,check,object,result,this,bean,factory,initialize,bean,bean,instance,bwi,get,bean,name,check,exposed,object,result,bean,instance,else,object,result,this,bean,factory,configure,bean,bean,instance,bwi,get,bean,name,check,exposed,object,result,bean,instance,catch,bean,creation,exception,ex,throwable,root,cause,ex,get,most,specific,cause,if,root,cause,instanceof,bean,currently,in,creation,exception,bean,creation,exception,bce,bean,creation,exception,root,cause,if,this,bean,factory,is,currently,in,creation,bce,get,bean,name,if,logger,is,debug,enabled,logger,debug,failed,to,create,target,bean,bce,get,bean,name,while,configuring,object,of,type,bean,instance,get,class,get,name,probably,due,to,a,circular,reference,this,is,a,common,startup,situation,and,usually,not,fatal,proceeding,without,injection,original,exception,ex,return,throw,ex
BeanConfigurerSupport -> public void configureBean(Object beanInstance);1496955179;Configure the bean instance._<p>Subclasses can override this to provide custom configuration logic._Typically called by an aspect, for all bean instances matched by a pointcut._@param beanInstance the bean instance to configure (must <b>not</b> be {@code null});public void configureBean(Object beanInstance) {_		if (this.beanFactory == null) {_			if (logger.isDebugEnabled()) {_				logger.debug("BeanFactory has not been set on " + ClassUtils.getShortName(getClass()) + ": " +_						"Make sure this configurer runs in a Spring container. Unable to configure bean of type [" +_						ClassUtils.getDescriptiveType(beanInstance) + "]. Proceeding without injection.")__			}_			return__		}__		BeanWiringInfo bwi = this.beanWiringInfoResolver.resolveWiringInfo(beanInstance)__		if (bwi == null) {_			_			return__		}__		try {_			if (bwi.indicatesAutowiring() || (bwi.isDefaultBeanName() && bwi.getBeanName() != null &&_					!this.beanFactory.containsBean(bwi.getBeanName()))) {_				_				this.beanFactory.autowireBeanProperties(beanInstance, bwi.getAutowireMode(), bwi.getDependencyCheck())__				this.beanFactory.initializeBean(beanInstance, bwi.getBeanName())__			}_			else {_				_				this.beanFactory.configureBean(beanInstance, bwi.getBeanName())__			}_		}_		catch (BeanCreationException ex) {_			Throwable rootCause = ex.getMostSpecificCause()__			if (rootCause instanceof BeanCurrentlyInCreationException) {_				BeanCreationException bce = (BeanCreationException) rootCause__				if (this.beanFactory.isCurrentlyInCreation(bce.getBeanName())) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failed to create target bean '" + bce.getBeanName() +_								"' while configuring object of type [" + beanInstance.getClass().getName() +_								"] - probably due to a circular reference. This is a common startup situation " +_								"and usually not fatal. Proceeding without injection. Original exception: " + ex)__					}_					return__				}_			}_			throw ex__		}_	};configure,the,bean,instance,p,subclasses,can,override,this,to,provide,custom,configuration,logic,typically,called,by,an,aspect,for,all,bean,instances,matched,by,a,pointcut,param,bean,instance,the,bean,instance,to,configure,must,b,not,b,be,code,null;public,void,configure,bean,object,bean,instance,if,this,bean,factory,null,if,logger,is,debug,enabled,logger,debug,bean,factory,has,not,been,set,on,class,utils,get,short,name,get,class,make,sure,this,configurer,runs,in,a,spring,container,unable,to,configure,bean,of,type,class,utils,get,descriptive,type,bean,instance,proceeding,without,injection,return,bean,wiring,info,bwi,this,bean,wiring,info,resolver,resolve,wiring,info,bean,instance,if,bwi,null,return,try,if,bwi,indicates,autowiring,bwi,is,default,bean,name,bwi,get,bean,name,null,this,bean,factory,contains,bean,bwi,get,bean,name,this,bean,factory,autowire,bean,properties,bean,instance,bwi,get,autowire,mode,bwi,get,dependency,check,this,bean,factory,initialize,bean,bean,instance,bwi,get,bean,name,else,this,bean,factory,configure,bean,bean,instance,bwi,get,bean,name,catch,bean,creation,exception,ex,throwable,root,cause,ex,get,most,specific,cause,if,root,cause,instanceof,bean,currently,in,creation,exception,bean,creation,exception,bce,bean,creation,exception,root,cause,if,this,bean,factory,is,currently,in,creation,bce,get,bean,name,if,logger,is,debug,enabled,logger,debug,failed,to,create,target,bean,bce,get,bean,name,while,configuring,object,of,type,bean,instance,get,class,get,name,probably,due,to,a,circular,reference,this,is,a,common,startup,situation,and,usually,not,fatal,proceeding,without,injection,original,exception,ex,return,throw,ex
BeanConfigurerSupport -> public void configureBean(Object beanInstance);1498780456;Configure the bean instance._<p>Subclasses can override this to provide custom configuration logic._Typically called by an aspect, for all bean instances matched by a pointcut._@param beanInstance the bean instance to configure (must <b>not</b> be {@code null});public void configureBean(Object beanInstance) {_		if (this.beanFactory == null) {_			if (logger.isDebugEnabled()) {_				logger.debug("BeanFactory has not been set on " + ClassUtils.getShortName(getClass()) + ": " +_						"Make sure this configurer runs in a Spring container. Unable to configure bean of type [" +_						ClassUtils.getDescriptiveType(beanInstance) + "]. Proceeding without injection.")__			}_			return__		}__		BeanWiringInfoResolver bwiResolver = this.beanWiringInfoResolver__		Assert.state(bwiResolver != null, "No BeanWiringInfoResolver available")__		BeanWiringInfo bwi = bwiResolver.resolveWiringInfo(beanInstance)__		if (bwi == null) {_			_			return__		}___		ConfigurableListableBeanFactory beanFactory = this.beanFactory__		Assert.state(beanFactory != null, "No BeanFactory available")__		try {_			if (bwi.indicatesAutowiring() || (bwi.isDefaultBeanName() && bwi.getBeanName() != null &&_					!beanFactory.containsBean(bwi.getBeanName()))) {_				_				beanFactory.autowireBeanProperties(beanInstance, bwi.getAutowireMode(), bwi.getDependencyCheck())__				beanFactory.initializeBean(beanInstance, bwi.getBeanName())__			}_			else {_				_				beanFactory.configureBean(beanInstance, bwi.getBeanName())__			}_		}_		catch (BeanCreationException ex) {_			Throwable rootCause = ex.getMostSpecificCause()__			if (rootCause instanceof BeanCurrentlyInCreationException) {_				BeanCreationException bce = (BeanCreationException) rootCause__				String bceBeanName = bce.getBeanName()__				if (bceBeanName != null && beanFactory.isCurrentlyInCreation(bceBeanName)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failed to create target bean '" + bce.getBeanName() +_								"' while configuring object of type [" + beanInstance.getClass().getName() +_								"] - probably due to a circular reference. This is a common startup situation " +_								"and usually not fatal. Proceeding without injection. Original exception: " + ex)__					}_					return__				}_			}_			throw ex__		}_	};configure,the,bean,instance,p,subclasses,can,override,this,to,provide,custom,configuration,logic,typically,called,by,an,aspect,for,all,bean,instances,matched,by,a,pointcut,param,bean,instance,the,bean,instance,to,configure,must,b,not,b,be,code,null;public,void,configure,bean,object,bean,instance,if,this,bean,factory,null,if,logger,is,debug,enabled,logger,debug,bean,factory,has,not,been,set,on,class,utils,get,short,name,get,class,make,sure,this,configurer,runs,in,a,spring,container,unable,to,configure,bean,of,type,class,utils,get,descriptive,type,bean,instance,proceeding,without,injection,return,bean,wiring,info,resolver,bwi,resolver,this,bean,wiring,info,resolver,assert,state,bwi,resolver,null,no,bean,wiring,info,resolver,available,bean,wiring,info,bwi,bwi,resolver,resolve,wiring,info,bean,instance,if,bwi,null,return,configurable,listable,bean,factory,bean,factory,this,bean,factory,assert,state,bean,factory,null,no,bean,factory,available,try,if,bwi,indicates,autowiring,bwi,is,default,bean,name,bwi,get,bean,name,null,bean,factory,contains,bean,bwi,get,bean,name,bean,factory,autowire,bean,properties,bean,instance,bwi,get,autowire,mode,bwi,get,dependency,check,bean,factory,initialize,bean,bean,instance,bwi,get,bean,name,else,bean,factory,configure,bean,bean,instance,bwi,get,bean,name,catch,bean,creation,exception,ex,throwable,root,cause,ex,get,most,specific,cause,if,root,cause,instanceof,bean,currently,in,creation,exception,bean,creation,exception,bce,bean,creation,exception,root,cause,string,bce,bean,name,bce,get,bean,name,if,bce,bean,name,null,bean,factory,is,currently,in,creation,bce,bean,name,if,logger,is,debug,enabled,logger,debug,failed,to,create,target,bean,bce,get,bean,name,while,configuring,object,of,type,bean,instance,get,class,get,name,probably,due,to,a,circular,reference,this,is,a,common,startup,situation,and,usually,not,fatal,proceeding,without,injection,original,exception,ex,return,throw,ex
BeanConfigurerSupport -> public void configureBean(Object beanInstance);1522360217;Configure the bean instance._<p>Subclasses can override this to provide custom configuration logic._Typically called by an aspect, for all bean instances matched by a pointcut._@param beanInstance the bean instance to configure (must <b>not</b> be {@code null});public void configureBean(Object beanInstance) {_		if (this.beanFactory == null) {_			if (logger.isDebugEnabled()) {_				logger.debug("BeanFactory has not been set on " + ClassUtils.getShortName(getClass()) + ": " +_						"Make sure this configurer runs in a Spring container. Unable to configure bean of type [" +_						ClassUtils.getDescriptiveType(beanInstance) + "]. Proceeding without injection.")__			}_			return__		}__		BeanWiringInfoResolver bwiResolver = this.beanWiringInfoResolver__		Assert.state(bwiResolver != null, "No BeanWiringInfoResolver available")__		BeanWiringInfo bwi = bwiResolver.resolveWiringInfo(beanInstance)__		if (bwi == null) {_			_			return__		}___		ConfigurableListableBeanFactory beanFactory = this.beanFactory__		Assert.state(beanFactory != null, "No BeanFactory available")__		try {_			String beanName = bwi.getBeanName()__			if (bwi.indicatesAutowiring() || (bwi.isDefaultBeanName() && beanName != null &&_					!beanFactory.containsBean(beanName))) {_				_				beanFactory.autowireBeanProperties(beanInstance, bwi.getAutowireMode(), bwi.getDependencyCheck())__				beanFactory.initializeBean(beanInstance, (beanName != null ? beanName : ""))__			}_			else {_				_				beanFactory.configureBean(beanInstance, (beanName != null ? beanName : ""))__			}_		}_		catch (BeanCreationException ex) {_			Throwable rootCause = ex.getMostSpecificCause()__			if (rootCause instanceof BeanCurrentlyInCreationException) {_				BeanCreationException bce = (BeanCreationException) rootCause__				String bceBeanName = bce.getBeanName()__				if (bceBeanName != null && beanFactory.isCurrentlyInCreation(bceBeanName)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failed to create target bean '" + bce.getBeanName() +_								"' while configuring object of type [" + beanInstance.getClass().getName() +_								"] - probably due to a circular reference. This is a common startup situation " +_								"and usually not fatal. Proceeding without injection. Original exception: " + ex)__					}_					return__				}_			}_			throw ex__		}_	};configure,the,bean,instance,p,subclasses,can,override,this,to,provide,custom,configuration,logic,typically,called,by,an,aspect,for,all,bean,instances,matched,by,a,pointcut,param,bean,instance,the,bean,instance,to,configure,must,b,not,b,be,code,null;public,void,configure,bean,object,bean,instance,if,this,bean,factory,null,if,logger,is,debug,enabled,logger,debug,bean,factory,has,not,been,set,on,class,utils,get,short,name,get,class,make,sure,this,configurer,runs,in,a,spring,container,unable,to,configure,bean,of,type,class,utils,get,descriptive,type,bean,instance,proceeding,without,injection,return,bean,wiring,info,resolver,bwi,resolver,this,bean,wiring,info,resolver,assert,state,bwi,resolver,null,no,bean,wiring,info,resolver,available,bean,wiring,info,bwi,bwi,resolver,resolve,wiring,info,bean,instance,if,bwi,null,return,configurable,listable,bean,factory,bean,factory,this,bean,factory,assert,state,bean,factory,null,no,bean,factory,available,try,string,bean,name,bwi,get,bean,name,if,bwi,indicates,autowiring,bwi,is,default,bean,name,bean,name,null,bean,factory,contains,bean,bean,name,bean,factory,autowire,bean,properties,bean,instance,bwi,get,autowire,mode,bwi,get,dependency,check,bean,factory,initialize,bean,bean,instance,bean,name,null,bean,name,else,bean,factory,configure,bean,bean,instance,bean,name,null,bean,name,catch,bean,creation,exception,ex,throwable,root,cause,ex,get,most,specific,cause,if,root,cause,instanceof,bean,currently,in,creation,exception,bean,creation,exception,bce,bean,creation,exception,root,cause,string,bce,bean,name,bce,get,bean,name,if,bce,bean,name,null,bean,factory,is,currently,in,creation,bce,bean,name,if,logger,is,debug,enabled,logger,debug,failed,to,create,target,bean,bce,get,bean,name,while,configuring,object,of,type,bean,instance,get,class,get,name,probably,due,to,a,circular,reference,this,is,a,common,startup,situation,and,usually,not,fatal,proceeding,without,injection,original,exception,ex,return,throw,ex
BeanConfigurerSupport -> public void configureBean(Object beanInstance);1530174524;Configure the bean instance._<p>Subclasses can override this to provide custom configuration logic._Typically called by an aspect, for all bean instances matched by a pointcut._@param beanInstance the bean instance to configure (must <b>not</b> be {@code null});public void configureBean(Object beanInstance) {_		if (this.beanFactory == null) {_			if (logger.isDebugEnabled()) {_				logger.debug("BeanFactory has not been set on " + ClassUtils.getShortName(getClass()) + ": " +_						"Make sure this configurer runs in a Spring container. Unable to configure bean of type [" +_						ClassUtils.getDescriptiveType(beanInstance) + "]. Proceeding without injection.")__			}_			return__		}__		BeanWiringInfoResolver bwiResolver = this.beanWiringInfoResolver__		Assert.state(bwiResolver != null, "No BeanWiringInfoResolver available")__		BeanWiringInfo bwi = bwiResolver.resolveWiringInfo(beanInstance)__		if (bwi == null) {_			_			return__		}___		ConfigurableListableBeanFactory beanFactory = this.beanFactory__		Assert.state(beanFactory != null, "No BeanFactory available")__		try {_			String beanName = bwi.getBeanName()__			if (bwi.indicatesAutowiring() || (bwi.isDefaultBeanName() && beanName != null &&_					!beanFactory.containsBean(beanName))) {_				_				beanFactory.autowireBeanProperties(beanInstance, bwi.getAutowireMode(), bwi.getDependencyCheck())__				beanFactory.initializeBean(beanInstance, (beanName != null ? beanName : ""))__			}_			else {_				_				beanFactory.configureBean(beanInstance, (beanName != null ? beanName : ""))__			}_		}_		catch (BeanCreationException ex) {_			Throwable rootCause = ex.getMostSpecificCause()__			if (rootCause instanceof BeanCurrentlyInCreationException) {_				BeanCreationException bce = (BeanCreationException) rootCause__				String bceBeanName = bce.getBeanName()__				if (bceBeanName != null && beanFactory.isCurrentlyInCreation(bceBeanName)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failed to create target bean '" + bce.getBeanName() +_								"' while configuring object of type [" + beanInstance.getClass().getName() +_								"] - probably due to a circular reference. This is a common startup situation " +_								"and usually not fatal. Proceeding without injection. Original exception: " + ex)__					}_					return__				}_			}_			throw ex__		}_	};configure,the,bean,instance,p,subclasses,can,override,this,to,provide,custom,configuration,logic,typically,called,by,an,aspect,for,all,bean,instances,matched,by,a,pointcut,param,bean,instance,the,bean,instance,to,configure,must,b,not,b,be,code,null;public,void,configure,bean,object,bean,instance,if,this,bean,factory,null,if,logger,is,debug,enabled,logger,debug,bean,factory,has,not,been,set,on,class,utils,get,short,name,get,class,make,sure,this,configurer,runs,in,a,spring,container,unable,to,configure,bean,of,type,class,utils,get,descriptive,type,bean,instance,proceeding,without,injection,return,bean,wiring,info,resolver,bwi,resolver,this,bean,wiring,info,resolver,assert,state,bwi,resolver,null,no,bean,wiring,info,resolver,available,bean,wiring,info,bwi,bwi,resolver,resolve,wiring,info,bean,instance,if,bwi,null,return,configurable,listable,bean,factory,bean,factory,this,bean,factory,assert,state,bean,factory,null,no,bean,factory,available,try,string,bean,name,bwi,get,bean,name,if,bwi,indicates,autowiring,bwi,is,default,bean,name,bean,name,null,bean,factory,contains,bean,bean,name,bean,factory,autowire,bean,properties,bean,instance,bwi,get,autowire,mode,bwi,get,dependency,check,bean,factory,initialize,bean,bean,instance,bean,name,null,bean,name,else,bean,factory,configure,bean,bean,instance,bean,name,null,bean,name,catch,bean,creation,exception,ex,throwable,root,cause,ex,get,most,specific,cause,if,root,cause,instanceof,bean,currently,in,creation,exception,bean,creation,exception,bce,bean,creation,exception,root,cause,string,bce,bean,name,bce,get,bean,name,if,bce,bean,name,null,bean,factory,is,currently,in,creation,bce,bean,name,if,logger,is,debug,enabled,logger,debug,failed,to,create,target,bean,bce,get,bean,name,while,configuring,object,of,type,bean,instance,get,class,get,name,probably,due,to,a,circular,reference,this,is,a,common,startup,situation,and,usually,not,fatal,proceeding,without,injection,original,exception,ex,return,throw,ex
BeanConfigurerSupport -> public void configureBean(Object beanInstance);1530174524;Configure the bean instance._<p>Subclasses can override this to provide custom configuration logic._Typically called by an aspect, for all bean instances matched by a pointcut._@param beanInstance the bean instance to configure (must <b>not</b> be {@code null});public void configureBean(Object beanInstance) {_		if (this.beanFactory == null) {_			if (logger.isDebugEnabled()) {_				logger.debug("BeanFactory has not been set on " + ClassUtils.getShortName(getClass()) + ": " +_						"Make sure this configurer runs in a Spring container. Unable to configure bean of type [" +_						ClassUtils.getDescriptiveType(beanInstance) + "]. Proceeding without injection.")__			}_			return__		}__		BeanWiringInfoResolver bwiResolver = this.beanWiringInfoResolver__		Assert.state(bwiResolver != null, "No BeanWiringInfoResolver available")__		BeanWiringInfo bwi = bwiResolver.resolveWiringInfo(beanInstance)__		if (bwi == null) {_			_			return__		}___		ConfigurableListableBeanFactory beanFactory = this.beanFactory__		Assert.state(beanFactory != null, "No BeanFactory available")__		try {_			String beanName = bwi.getBeanName()__			if (bwi.indicatesAutowiring() || (bwi.isDefaultBeanName() && beanName != null &&_					!beanFactory.containsBean(beanName))) {_				_				beanFactory.autowireBeanProperties(beanInstance, bwi.getAutowireMode(), bwi.getDependencyCheck())__				beanFactory.initializeBean(beanInstance, (beanName != null ? beanName : ""))__			}_			else {_				_				beanFactory.configureBean(beanInstance, (beanName != null ? beanName : ""))__			}_		}_		catch (BeanCreationException ex) {_			Throwable rootCause = ex.getMostSpecificCause()__			if (rootCause instanceof BeanCurrentlyInCreationException) {_				BeanCreationException bce = (BeanCreationException) rootCause__				String bceBeanName = bce.getBeanName()__				if (bceBeanName != null && beanFactory.isCurrentlyInCreation(bceBeanName)) {_					if (logger.isDebugEnabled()) {_						logger.debug("Failed to create target bean '" + bce.getBeanName() +_								"' while configuring object of type [" + beanInstance.getClass().getName() +_								"] - probably due to a circular reference. This is a common startup situation " +_								"and usually not fatal. Proceeding without injection. Original exception: " + ex)__					}_					return__				}_			}_			throw ex__		}_	};configure,the,bean,instance,p,subclasses,can,override,this,to,provide,custom,configuration,logic,typically,called,by,an,aspect,for,all,bean,instances,matched,by,a,pointcut,param,bean,instance,the,bean,instance,to,configure,must,b,not,b,be,code,null;public,void,configure,bean,object,bean,instance,if,this,bean,factory,null,if,logger,is,debug,enabled,logger,debug,bean,factory,has,not,been,set,on,class,utils,get,short,name,get,class,make,sure,this,configurer,runs,in,a,spring,container,unable,to,configure,bean,of,type,class,utils,get,descriptive,type,bean,instance,proceeding,without,injection,return,bean,wiring,info,resolver,bwi,resolver,this,bean,wiring,info,resolver,assert,state,bwi,resolver,null,no,bean,wiring,info,resolver,available,bean,wiring,info,bwi,bwi,resolver,resolve,wiring,info,bean,instance,if,bwi,null,return,configurable,listable,bean,factory,bean,factory,this,bean,factory,assert,state,bean,factory,null,no,bean,factory,available,try,string,bean,name,bwi,get,bean,name,if,bwi,indicates,autowiring,bwi,is,default,bean,name,bean,name,null,bean,factory,contains,bean,bean,name,bean,factory,autowire,bean,properties,bean,instance,bwi,get,autowire,mode,bwi,get,dependency,check,bean,factory,initialize,bean,bean,instance,bean,name,null,bean,name,else,bean,factory,configure,bean,bean,instance,bean,name,null,bean,name,catch,bean,creation,exception,ex,throwable,root,cause,ex,get,most,specific,cause,if,root,cause,instanceof,bean,currently,in,creation,exception,bean,creation,exception,bce,bean,creation,exception,root,cause,string,bce,bean,name,bce,get,bean,name,if,bce,bean,name,null,bean,factory,is,currently,in,creation,bce,bean,name,if,logger,is,debug,enabled,logger,debug,failed,to,create,target,bean,bce,get,bean,name,while,configuring,object,of,type,bean,instance,get,class,get,name,probably,due,to,a,circular,reference,this,is,a,common,startup,situation,and,usually,not,fatal,proceeding,without,injection,original,exception,ex,return,throw,ex
BeanConfigurerSupport -> @Override 	public void destroy();1356735495;Release references to the {@link BeanFactory} and_{@link BeanWiringInfoResolver} when the container is destroyed.;@Override_	public void destroy() {_		this.beanFactory = null__		this.beanWiringInfoResolver = null__	};release,references,to,the,link,bean,factory,and,link,bean,wiring,info,resolver,when,the,container,is,destroyed;override,public,void,destroy,this,bean,factory,null,this,bean,wiring,info,resolver,null
BeanConfigurerSupport -> @Override 	public void destroy();1368482696;Release references to the {@link BeanFactory} and_{@link BeanWiringInfoResolver} when the container is destroyed.;@Override_	public void destroy() {_		this.beanFactory = null__		this.beanWiringInfoResolver = null__	};release,references,to,the,link,bean,factory,and,link,bean,wiring,info,resolver,when,the,container,is,destroyed;override,public,void,destroy,this,bean,factory,null,this,bean,wiring,info,resolver,null
BeanConfigurerSupport -> @Override 	public void destroy();1495868221;Release references to the {@link BeanFactory} and_{@link BeanWiringInfoResolver} when the container is destroyed.;@Override_	public void destroy() {_		this.beanFactory = null__		this.beanWiringInfoResolver = null__	};release,references,to,the,link,bean,factory,and,link,bean,wiring,info,resolver,when,the,container,is,destroyed;override,public,void,destroy,this,bean,factory,null,this,bean,wiring,info,resolver,null
BeanConfigurerSupport -> @Override 	public void destroy();1496837955;Release references to the {@link BeanFactory} and_{@link BeanWiringInfoResolver} when the container is destroyed.;@Override_	public void destroy() {_		this.beanFactory = null__		this.beanWiringInfoResolver = null__	};release,references,to,the,link,bean,factory,and,link,bean,wiring,info,resolver,when,the,container,is,destroyed;override,public,void,destroy,this,bean,factory,null,this,bean,wiring,info,resolver,null
BeanConfigurerSupport -> @Override 	public void destroy();1496955179;Release references to the {@link BeanFactory} and_{@link BeanWiringInfoResolver} when the container is destroyed.;@Override_	public void destroy() {_		this.beanFactory = null__		this.beanWiringInfoResolver = null__	};release,references,to,the,link,bean,factory,and,link,bean,wiring,info,resolver,when,the,container,is,destroyed;override,public,void,destroy,this,bean,factory,null,this,bean,wiring,info,resolver,null
BeanConfigurerSupport -> @Override 	public void destroy();1498780456;Release references to the {@link BeanFactory} and_{@link BeanWiringInfoResolver} when the container is destroyed.;@Override_	public void destroy() {_		this.beanFactory = null__		this.beanWiringInfoResolver = null__	};release,references,to,the,link,bean,factory,and,link,bean,wiring,info,resolver,when,the,container,is,destroyed;override,public,void,destroy,this,bean,factory,null,this,bean,wiring,info,resolver,null
BeanConfigurerSupport -> @Override 	public void destroy();1522360217;Release references to the {@link BeanFactory} and_{@link BeanWiringInfoResolver} when the container is destroyed.;@Override_	public void destroy() {_		this.beanFactory = null__		this.beanWiringInfoResolver = null__	};release,references,to,the,link,bean,factory,and,link,bean,wiring,info,resolver,when,the,container,is,destroyed;override,public,void,destroy,this,bean,factory,null,this,bean,wiring,info,resolver,null
BeanConfigurerSupport -> @Override 	public void destroy();1530174524;Release references to the {@link BeanFactory} and_{@link BeanWiringInfoResolver} when the container is destroyed.;@Override_	public void destroy() {_		this.beanFactory = null__		this.beanWiringInfoResolver = null__	};release,references,to,the,link,bean,factory,and,link,bean,wiring,info,resolver,when,the,container,is,destroyed;override,public,void,destroy,this,bean,factory,null,this,bean,wiring,info,resolver,null
BeanConfigurerSupport -> @Override 	public void destroy();1530174524;Release references to the {@link BeanFactory} and_{@link BeanWiringInfoResolver} when the container is destroyed.;@Override_	public void destroy() {_		this.beanFactory = null__		this.beanWiringInfoResolver = null__	};release,references,to,the,link,bean,factory,and,link,bean,wiring,info,resolver,when,the,container,is,destroyed;override,public,void,destroy,this,bean,factory,null,this,bean,wiring,info,resolver,null
BeanConfigurerSupport -> public void setBeanWiringInfoResolver(BeanWiringInfoResolver beanWiringInfoResolver);1328020251;Set the {@link BeanWiringInfoResolver} to use._<p>The default behavior is to look for a bean with the same name as the class._As an alternative, consider using annotation-driven bean wiring._@see ClassNameBeanWiringInfoResolver_@see org.springframework.beans.factory.annotation.AnnotationBeanWiringInfoResolver;public void setBeanWiringInfoResolver(BeanWiringInfoResolver beanWiringInfoResolver) {_		Assert.notNull(beanWiringInfoResolver, "BeanWiringInfoResolver must not be null")__		this.beanWiringInfoResolver = beanWiringInfoResolver__	};set,the,link,bean,wiring,info,resolver,to,use,p,the,default,behavior,is,to,look,for,a,bean,with,the,same,name,as,the,class,as,an,alternative,consider,using,annotation,driven,bean,wiring,see,class,name,bean,wiring,info,resolver,see,org,springframework,beans,factory,annotation,annotation,bean,wiring,info,resolver;public,void,set,bean,wiring,info,resolver,bean,wiring,info,resolver,bean,wiring,info,resolver,assert,not,null,bean,wiring,info,resolver,bean,wiring,info,resolver,must,not,be,null,this,bean,wiring,info,resolver,bean,wiring,info,resolver
BeanConfigurerSupport -> public void setBeanWiringInfoResolver(BeanWiringInfoResolver beanWiringInfoResolver);1356735495;Set the {@link BeanWiringInfoResolver} to use._<p>The default behavior is to look for a bean with the same name as the class._As an alternative, consider using annotation-driven bean wiring._@see ClassNameBeanWiringInfoResolver_@see org.springframework.beans.factory.annotation.AnnotationBeanWiringInfoResolver;public void setBeanWiringInfoResolver(BeanWiringInfoResolver beanWiringInfoResolver) {_		Assert.notNull(beanWiringInfoResolver, "BeanWiringInfoResolver must not be null")__		this.beanWiringInfoResolver = beanWiringInfoResolver__	};set,the,link,bean,wiring,info,resolver,to,use,p,the,default,behavior,is,to,look,for,a,bean,with,the,same,name,as,the,class,as,an,alternative,consider,using,annotation,driven,bean,wiring,see,class,name,bean,wiring,info,resolver,see,org,springframework,beans,factory,annotation,annotation,bean,wiring,info,resolver;public,void,set,bean,wiring,info,resolver,bean,wiring,info,resolver,bean,wiring,info,resolver,assert,not,null,bean,wiring,info,resolver,bean,wiring,info,resolver,must,not,be,null,this,bean,wiring,info,resolver,bean,wiring,info,resolver
BeanConfigurerSupport -> public void setBeanWiringInfoResolver(BeanWiringInfoResolver beanWiringInfoResolver);1357119239;Set the {@link BeanWiringInfoResolver} to use._<p>The default behavior is to look for a bean with the same name as the class._As an alternative, consider using annotation-driven bean wiring._@see ClassNameBeanWiringInfoResolver_@see org.springframework.beans.factory.annotation.AnnotationBeanWiringInfoResolver;public void setBeanWiringInfoResolver(BeanWiringInfoResolver beanWiringInfoResolver) {_		Assert.notNull(beanWiringInfoResolver, "BeanWiringInfoResolver must not be null")__		this.beanWiringInfoResolver = beanWiringInfoResolver__	};set,the,link,bean,wiring,info,resolver,to,use,p,the,default,behavior,is,to,look,for,a,bean,with,the,same,name,as,the,class,as,an,alternative,consider,using,annotation,driven,bean,wiring,see,class,name,bean,wiring,info,resolver,see,org,springframework,beans,factory,annotation,annotation,bean,wiring,info,resolver;public,void,set,bean,wiring,info,resolver,bean,wiring,info,resolver,bean,wiring,info,resolver,assert,not,null,bean,wiring,info,resolver,bean,wiring,info,resolver,must,not,be,null,this,bean,wiring,info,resolver,bean,wiring,info,resolver
BeanConfigurerSupport -> public void setBeanWiringInfoResolver(BeanWiringInfoResolver beanWiringInfoResolver);1362408075;Set the {@link BeanWiringInfoResolver} to use._<p>The default behavior is to look for a bean with the same name as the class._As an alternative, consider using annotation-driven bean wiring._@see ClassNameBeanWiringInfoResolver_@see org.springframework.beans.factory.annotation.AnnotationBeanWiringInfoResolver;public void setBeanWiringInfoResolver(BeanWiringInfoResolver beanWiringInfoResolver) {_		Assert.notNull(beanWiringInfoResolver, "BeanWiringInfoResolver must not be null")__		this.beanWiringInfoResolver = beanWiringInfoResolver__	};set,the,link,bean,wiring,info,resolver,to,use,p,the,default,behavior,is,to,look,for,a,bean,with,the,same,name,as,the,class,as,an,alternative,consider,using,annotation,driven,bean,wiring,see,class,name,bean,wiring,info,resolver,see,org,springframework,beans,factory,annotation,annotation,bean,wiring,info,resolver;public,void,set,bean,wiring,info,resolver,bean,wiring,info,resolver,bean,wiring,info,resolver,assert,not,null,bean,wiring,info,resolver,bean,wiring,info,resolver,must,not,be,null,this,bean,wiring,info,resolver,bean,wiring,info,resolver
BeanConfigurerSupport -> public void setBeanWiringInfoResolver(BeanWiringInfoResolver beanWiringInfoResolver);1368482696;Set the {@link BeanWiringInfoResolver} to use._<p>The default behavior is to look for a bean with the same name as the class._As an alternative, consider using annotation-driven bean wiring._@see ClassNameBeanWiringInfoResolver_@see org.springframework.beans.factory.annotation.AnnotationBeanWiringInfoResolver;public void setBeanWiringInfoResolver(BeanWiringInfoResolver beanWiringInfoResolver) {_		Assert.notNull(beanWiringInfoResolver, "BeanWiringInfoResolver must not be null")__		this.beanWiringInfoResolver = beanWiringInfoResolver__	};set,the,link,bean,wiring,info,resolver,to,use,p,the,default,behavior,is,to,look,for,a,bean,with,the,same,name,as,the,class,as,an,alternative,consider,using,annotation,driven,bean,wiring,see,class,name,bean,wiring,info,resolver,see,org,springframework,beans,factory,annotation,annotation,bean,wiring,info,resolver;public,void,set,bean,wiring,info,resolver,bean,wiring,info,resolver,bean,wiring,info,resolver,assert,not,null,bean,wiring,info,resolver,bean,wiring,info,resolver,must,not,be,null,this,bean,wiring,info,resolver,bean,wiring,info,resolver
BeanConfigurerSupport -> public void setBeanWiringInfoResolver(BeanWiringInfoResolver beanWiringInfoResolver);1495868221;Set the {@link BeanWiringInfoResolver} to use._<p>The default behavior is to look for a bean with the same name as the class._As an alternative, consider using annotation-driven bean wiring._@see ClassNameBeanWiringInfoResolver_@see org.springframework.beans.factory.annotation.AnnotationBeanWiringInfoResolver;public void setBeanWiringInfoResolver(BeanWiringInfoResolver beanWiringInfoResolver) {_		Assert.notNull(beanWiringInfoResolver, "BeanWiringInfoResolver must not be null")__		this.beanWiringInfoResolver = beanWiringInfoResolver__	};set,the,link,bean,wiring,info,resolver,to,use,p,the,default,behavior,is,to,look,for,a,bean,with,the,same,name,as,the,class,as,an,alternative,consider,using,annotation,driven,bean,wiring,see,class,name,bean,wiring,info,resolver,see,org,springframework,beans,factory,annotation,annotation,bean,wiring,info,resolver;public,void,set,bean,wiring,info,resolver,bean,wiring,info,resolver,bean,wiring,info,resolver,assert,not,null,bean,wiring,info,resolver,bean,wiring,info,resolver,must,not,be,null,this,bean,wiring,info,resolver,bean,wiring,info,resolver
BeanConfigurerSupport -> public void setBeanWiringInfoResolver(BeanWiringInfoResolver beanWiringInfoResolver);1496837955;Set the {@link BeanWiringInfoResolver} to use._<p>The default behavior is to look for a bean with the same name as the class._As an alternative, consider using annotation-driven bean wiring._@see ClassNameBeanWiringInfoResolver_@see org.springframework.beans.factory.annotation.AnnotationBeanWiringInfoResolver;public void setBeanWiringInfoResolver(BeanWiringInfoResolver beanWiringInfoResolver) {_		Assert.notNull(beanWiringInfoResolver, "BeanWiringInfoResolver must not be null")__		this.beanWiringInfoResolver = beanWiringInfoResolver__	};set,the,link,bean,wiring,info,resolver,to,use,p,the,default,behavior,is,to,look,for,a,bean,with,the,same,name,as,the,class,as,an,alternative,consider,using,annotation,driven,bean,wiring,see,class,name,bean,wiring,info,resolver,see,org,springframework,beans,factory,annotation,annotation,bean,wiring,info,resolver;public,void,set,bean,wiring,info,resolver,bean,wiring,info,resolver,bean,wiring,info,resolver,assert,not,null,bean,wiring,info,resolver,bean,wiring,info,resolver,must,not,be,null,this,bean,wiring,info,resolver,bean,wiring,info,resolver
BeanConfigurerSupport -> public void setBeanWiringInfoResolver(BeanWiringInfoResolver beanWiringInfoResolver);1496955179;Set the {@link BeanWiringInfoResolver} to use._<p>The default behavior is to look for a bean with the same name as the class._As an alternative, consider using annotation-driven bean wiring._@see ClassNameBeanWiringInfoResolver_@see org.springframework.beans.factory.annotation.AnnotationBeanWiringInfoResolver;public void setBeanWiringInfoResolver(BeanWiringInfoResolver beanWiringInfoResolver) {_		Assert.notNull(beanWiringInfoResolver, "BeanWiringInfoResolver must not be null")__		this.beanWiringInfoResolver = beanWiringInfoResolver__	};set,the,link,bean,wiring,info,resolver,to,use,p,the,default,behavior,is,to,look,for,a,bean,with,the,same,name,as,the,class,as,an,alternative,consider,using,annotation,driven,bean,wiring,see,class,name,bean,wiring,info,resolver,see,org,springframework,beans,factory,annotation,annotation,bean,wiring,info,resolver;public,void,set,bean,wiring,info,resolver,bean,wiring,info,resolver,bean,wiring,info,resolver,assert,not,null,bean,wiring,info,resolver,bean,wiring,info,resolver,must,not,be,null,this,bean,wiring,info,resolver,bean,wiring,info,resolver
BeanConfigurerSupport -> public void setBeanWiringInfoResolver(BeanWiringInfoResolver beanWiringInfoResolver);1498780456;Set the {@link BeanWiringInfoResolver} to use._<p>The default behavior is to look for a bean with the same name as the class._As an alternative, consider using annotation-driven bean wiring._@see ClassNameBeanWiringInfoResolver_@see org.springframework.beans.factory.annotation.AnnotationBeanWiringInfoResolver;public void setBeanWiringInfoResolver(BeanWiringInfoResolver beanWiringInfoResolver) {_		Assert.notNull(beanWiringInfoResolver, "BeanWiringInfoResolver must not be null")__		this.beanWiringInfoResolver = beanWiringInfoResolver__	};set,the,link,bean,wiring,info,resolver,to,use,p,the,default,behavior,is,to,look,for,a,bean,with,the,same,name,as,the,class,as,an,alternative,consider,using,annotation,driven,bean,wiring,see,class,name,bean,wiring,info,resolver,see,org,springframework,beans,factory,annotation,annotation,bean,wiring,info,resolver;public,void,set,bean,wiring,info,resolver,bean,wiring,info,resolver,bean,wiring,info,resolver,assert,not,null,bean,wiring,info,resolver,bean,wiring,info,resolver,must,not,be,null,this,bean,wiring,info,resolver,bean,wiring,info,resolver
BeanConfigurerSupport -> public void setBeanWiringInfoResolver(BeanWiringInfoResolver beanWiringInfoResolver);1522360217;Set the {@link BeanWiringInfoResolver} to use._<p>The default behavior is to look for a bean with the same name as the class._As an alternative, consider using annotation-driven bean wiring._@see ClassNameBeanWiringInfoResolver_@see org.springframework.beans.factory.annotation.AnnotationBeanWiringInfoResolver;public void setBeanWiringInfoResolver(BeanWiringInfoResolver beanWiringInfoResolver) {_		Assert.notNull(beanWiringInfoResolver, "BeanWiringInfoResolver must not be null")__		this.beanWiringInfoResolver = beanWiringInfoResolver__	};set,the,link,bean,wiring,info,resolver,to,use,p,the,default,behavior,is,to,look,for,a,bean,with,the,same,name,as,the,class,as,an,alternative,consider,using,annotation,driven,bean,wiring,see,class,name,bean,wiring,info,resolver,see,org,springframework,beans,factory,annotation,annotation,bean,wiring,info,resolver;public,void,set,bean,wiring,info,resolver,bean,wiring,info,resolver,bean,wiring,info,resolver,assert,not,null,bean,wiring,info,resolver,bean,wiring,info,resolver,must,not,be,null,this,bean,wiring,info,resolver,bean,wiring,info,resolver
BeanConfigurerSupport -> public void setBeanWiringInfoResolver(BeanWiringInfoResolver beanWiringInfoResolver);1530174524;Set the {@link BeanWiringInfoResolver} to use._<p>The default behavior is to look for a bean with the same name as the class._As an alternative, consider using annotation-driven bean wiring._@see ClassNameBeanWiringInfoResolver_@see org.springframework.beans.factory.annotation.AnnotationBeanWiringInfoResolver;public void setBeanWiringInfoResolver(BeanWiringInfoResolver beanWiringInfoResolver) {_		Assert.notNull(beanWiringInfoResolver, "BeanWiringInfoResolver must not be null")__		this.beanWiringInfoResolver = beanWiringInfoResolver__	};set,the,link,bean,wiring,info,resolver,to,use,p,the,default,behavior,is,to,look,for,a,bean,with,the,same,name,as,the,class,as,an,alternative,consider,using,annotation,driven,bean,wiring,see,class,name,bean,wiring,info,resolver,see,org,springframework,beans,factory,annotation,annotation,bean,wiring,info,resolver;public,void,set,bean,wiring,info,resolver,bean,wiring,info,resolver,bean,wiring,info,resolver,assert,not,null,bean,wiring,info,resolver,bean,wiring,info,resolver,must,not,be,null,this,bean,wiring,info,resolver,bean,wiring,info,resolver
BeanConfigurerSupport -> public void setBeanWiringInfoResolver(BeanWiringInfoResolver beanWiringInfoResolver);1530174524;Set the {@link BeanWiringInfoResolver} to use._<p>The default behavior is to look for a bean with the same name as the class._As an alternative, consider using annotation-driven bean wiring._@see ClassNameBeanWiringInfoResolver_@see org.springframework.beans.factory.annotation.AnnotationBeanWiringInfoResolver;public void setBeanWiringInfoResolver(BeanWiringInfoResolver beanWiringInfoResolver) {_		Assert.notNull(beanWiringInfoResolver, "BeanWiringInfoResolver must not be null")__		this.beanWiringInfoResolver = beanWiringInfoResolver__	};set,the,link,bean,wiring,info,resolver,to,use,p,the,default,behavior,is,to,look,for,a,bean,with,the,same,name,as,the,class,as,an,alternative,consider,using,annotation,driven,bean,wiring,see,class,name,bean,wiring,info,resolver,see,org,springframework,beans,factory,annotation,annotation,bean,wiring,info,resolver;public,void,set,bean,wiring,info,resolver,bean,wiring,info,resolver,bean,wiring,info,resolver,assert,not,null,bean,wiring,info,resolver,bean,wiring,info,resolver,must,not,be,null,this,bean,wiring,info,resolver,bean,wiring,info,resolver
BeanConfigurerSupport -> protected BeanWiringInfoResolver createDefaultBeanWiringInfoResolver();1328020251;Create the default BeanWiringInfoResolver to be used if none was_specified explicitly._<p>The default implementation builds a {@link ClassNameBeanWiringInfoResolver}._@return the default BeanWiringInfoResolver (never <code>null</code>);protected BeanWiringInfoResolver createDefaultBeanWiringInfoResolver() {_		return new ClassNameBeanWiringInfoResolver()__	};create,the,default,bean,wiring,info,resolver,to,be,used,if,none,was,specified,explicitly,p,the,default,implementation,builds,a,link,class,name,bean,wiring,info,resolver,return,the,default,bean,wiring,info,resolver,never,code,null,code;protected,bean,wiring,info,resolver,create,default,bean,wiring,info,resolver,return,new,class,name,bean,wiring,info,resolver
BeanConfigurerSupport -> protected BeanWiringInfoResolver createDefaultBeanWiringInfoResolver();1356735495;Create the default BeanWiringInfoResolver to be used if none was_specified explicitly._<p>The default implementation builds a {@link ClassNameBeanWiringInfoResolver}._@return the default BeanWiringInfoResolver (never {@code null});protected BeanWiringInfoResolver createDefaultBeanWiringInfoResolver() {_		return new ClassNameBeanWiringInfoResolver()__	};create,the,default,bean,wiring,info,resolver,to,be,used,if,none,was,specified,explicitly,p,the,default,implementation,builds,a,link,class,name,bean,wiring,info,resolver,return,the,default,bean,wiring,info,resolver,never,code,null;protected,bean,wiring,info,resolver,create,default,bean,wiring,info,resolver,return,new,class,name,bean,wiring,info,resolver
BeanConfigurerSupport -> protected BeanWiringInfoResolver createDefaultBeanWiringInfoResolver();1357119239;Create the default BeanWiringInfoResolver to be used if none was_specified explicitly._<p>The default implementation builds a {@link ClassNameBeanWiringInfoResolver}._@return the default BeanWiringInfoResolver (never {@code null});protected BeanWiringInfoResolver createDefaultBeanWiringInfoResolver() {_		return new ClassNameBeanWiringInfoResolver()__	};create,the,default,bean,wiring,info,resolver,to,be,used,if,none,was,specified,explicitly,p,the,default,implementation,builds,a,link,class,name,bean,wiring,info,resolver,return,the,default,bean,wiring,info,resolver,never,code,null;protected,bean,wiring,info,resolver,create,default,bean,wiring,info,resolver,return,new,class,name,bean,wiring,info,resolver
BeanConfigurerSupport -> protected BeanWiringInfoResolver createDefaultBeanWiringInfoResolver();1362408075;Create the default BeanWiringInfoResolver to be used if none was_specified explicitly._<p>The default implementation builds a {@link ClassNameBeanWiringInfoResolver}._@return the default BeanWiringInfoResolver (never {@code null});protected BeanWiringInfoResolver createDefaultBeanWiringInfoResolver() {_		return new ClassNameBeanWiringInfoResolver()__	};create,the,default,bean,wiring,info,resolver,to,be,used,if,none,was,specified,explicitly,p,the,default,implementation,builds,a,link,class,name,bean,wiring,info,resolver,return,the,default,bean,wiring,info,resolver,never,code,null;protected,bean,wiring,info,resolver,create,default,bean,wiring,info,resolver,return,new,class,name,bean,wiring,info,resolver
BeanConfigurerSupport -> protected BeanWiringInfoResolver createDefaultBeanWiringInfoResolver();1368482696;Create the default BeanWiringInfoResolver to be used if none was_specified explicitly._<p>The default implementation builds a {@link ClassNameBeanWiringInfoResolver}._@return the default BeanWiringInfoResolver (never {@code null});protected BeanWiringInfoResolver createDefaultBeanWiringInfoResolver() {_		return new ClassNameBeanWiringInfoResolver()__	};create,the,default,bean,wiring,info,resolver,to,be,used,if,none,was,specified,explicitly,p,the,default,implementation,builds,a,link,class,name,bean,wiring,info,resolver,return,the,default,bean,wiring,info,resolver,never,code,null;protected,bean,wiring,info,resolver,create,default,bean,wiring,info,resolver,return,new,class,name,bean,wiring,info,resolver
BeanConfigurerSupport -> public void setBeanFactory(BeanFactory beanFactory);1328020251;Set the {@link BeanFactory} in which this aspect must configure beans.;public void setBeanFactory(BeanFactory beanFactory) {_		if (!(beanFactory instanceof ConfigurableListableBeanFactory)) {_			throw new IllegalArgumentException(_				 "Bean configurer aspect needs to run in a ConfigurableListableBeanFactory: " + beanFactory)__		}_		this.beanFactory = (ConfigurableListableBeanFactory) beanFactory__		if (this.beanWiringInfoResolver == null) {_			this.beanWiringInfoResolver = createDefaultBeanWiringInfoResolver()__		}_	};set,the,link,bean,factory,in,which,this,aspect,must,configure,beans;public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,configurable,listable,bean,factory,throw,new,illegal,argument,exception,bean,configurer,aspect,needs,to,run,in,a,configurable,listable,bean,factory,bean,factory,this,bean,factory,configurable,listable,bean,factory,bean,factory,if,this,bean,wiring,info,resolver,null,this,bean,wiring,info,resolver,create,default,bean,wiring,info,resolver
BeanConfigurerSupport -> public void setBeanFactory(BeanFactory beanFactory);1357119239;Set the {@link BeanFactory} in which this aspect must configure beans.;public void setBeanFactory(BeanFactory beanFactory) {_		if (!(beanFactory instanceof ConfigurableListableBeanFactory)) {_			throw new IllegalArgumentException(_				 "Bean configurer aspect needs to run in a ConfigurableListableBeanFactory: " + beanFactory)__		}_		this.beanFactory = (ConfigurableListableBeanFactory) beanFactory__		if (this.beanWiringInfoResolver == null) {_			this.beanWiringInfoResolver = createDefaultBeanWiringInfoResolver()__		}_	};set,the,link,bean,factory,in,which,this,aspect,must,configure,beans;public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,configurable,listable,bean,factory,throw,new,illegal,argument,exception,bean,configurer,aspect,needs,to,run,in,a,configurable,listable,bean,factory,bean,factory,this,bean,factory,configurable,listable,bean,factory,bean,factory,if,this,bean,wiring,info,resolver,null,this,bean,wiring,info,resolver,create,default,bean,wiring,info,resolver
BeanConfigurerSupport -> public void setBeanFactory(BeanFactory beanFactory);1362408075;Set the {@link BeanFactory} in which this aspect must configure beans.;public void setBeanFactory(BeanFactory beanFactory) {_		if (!(beanFactory instanceof ConfigurableListableBeanFactory)) {_			throw new IllegalArgumentException(_				 "Bean configurer aspect needs to run in a ConfigurableListableBeanFactory: " + beanFactory)__		}_		this.beanFactory = (ConfigurableListableBeanFactory) beanFactory__		if (this.beanWiringInfoResolver == null) {_			this.beanWiringInfoResolver = createDefaultBeanWiringInfoResolver()__		}_	};set,the,link,bean,factory,in,which,this,aspect,must,configure,beans;public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,configurable,listable,bean,factory,throw,new,illegal,argument,exception,bean,configurer,aspect,needs,to,run,in,a,configurable,listable,bean,factory,bean,factory,this,bean,factory,configurable,listable,bean,factory,bean,factory,if,this,bean,wiring,info,resolver,null,this,bean,wiring,info,resolver,create,default,bean,wiring,info,resolver
BeanConfigurerSupport -> public void afterPropertiesSet();1328020251;Check that a {@link BeanFactory} has been set.;public void afterPropertiesSet() {_		Assert.notNull(this.beanFactory, "BeanFactory must be set")__	};check,that,a,link,bean,factory,has,been,set;public,void,after,properties,set,assert,not,null,this,bean,factory,bean,factory,must,be,set
BeanConfigurerSupport -> public void afterPropertiesSet();1357119239;Check that a {@link BeanFactory} has been set.;public void afterPropertiesSet() {_		Assert.notNull(this.beanFactory, "BeanFactory must be set")__	};check,that,a,link,bean,factory,has,been,set;public,void,after,properties,set,assert,not,null,this,bean,factory,bean,factory,must,be,set
BeanConfigurerSupport -> public void afterPropertiesSet();1362408075;Check that a {@link BeanFactory} has been set.;public void afterPropertiesSet() {_		Assert.notNull(this.beanFactory, "BeanFactory must be set")__	};check,that,a,link,bean,factory,has,been,set;public,void,after,properties,set,assert,not,null,this,bean,factory,bean,factory,must,be,set
BeanConfigurerSupport -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1356735495;Set the {@link BeanFactory} in which this aspect must configure beans.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (!(beanFactory instanceof ConfigurableListableBeanFactory)) {_			throw new IllegalArgumentException(_				 "Bean configurer aspect needs to run in a ConfigurableListableBeanFactory: " + beanFactory)__		}_		this.beanFactory = (ConfigurableListableBeanFactory) beanFactory__		if (this.beanWiringInfoResolver == null) {_			this.beanWiringInfoResolver = createDefaultBeanWiringInfoResolver()__		}_	};set,the,link,bean,factory,in,which,this,aspect,must,configure,beans;override,public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,configurable,listable,bean,factory,throw,new,illegal,argument,exception,bean,configurer,aspect,needs,to,run,in,a,configurable,listable,bean,factory,bean,factory,this,bean,factory,configurable,listable,bean,factory,bean,factory,if,this,bean,wiring,info,resolver,null,this,bean,wiring,info,resolver,create,default,bean,wiring,info,resolver
BeanConfigurerSupport -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1368482696;Set the {@link BeanFactory} in which this aspect must configure beans.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (!(beanFactory instanceof ConfigurableListableBeanFactory)) {_			throw new IllegalArgumentException(_				 "Bean configurer aspect needs to run in a ConfigurableListableBeanFactory: " + beanFactory)__		}_		this.beanFactory = (ConfigurableListableBeanFactory) beanFactory__		if (this.beanWiringInfoResolver == null) {_			this.beanWiringInfoResolver = createDefaultBeanWiringInfoResolver()__		}_	};set,the,link,bean,factory,in,which,this,aspect,must,configure,beans;override,public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,configurable,listable,bean,factory,throw,new,illegal,argument,exception,bean,configurer,aspect,needs,to,run,in,a,configurable,listable,bean,factory,bean,factory,this,bean,factory,configurable,listable,bean,factory,bean,factory,if,this,bean,wiring,info,resolver,null,this,bean,wiring,info,resolver,create,default,bean,wiring,info,resolver
BeanConfigurerSupport -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1495868221;Set the {@link BeanFactory} in which this aspect must configure beans.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (!(beanFactory instanceof ConfigurableListableBeanFactory)) {_			throw new IllegalArgumentException(_				 "Bean configurer aspect needs to run in a ConfigurableListableBeanFactory: " + beanFactory)__		}_		this.beanFactory = (ConfigurableListableBeanFactory) beanFactory__		if (this.beanWiringInfoResolver == null) {_			this.beanWiringInfoResolver = createDefaultBeanWiringInfoResolver()__		}_	};set,the,link,bean,factory,in,which,this,aspect,must,configure,beans;override,public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,configurable,listable,bean,factory,throw,new,illegal,argument,exception,bean,configurer,aspect,needs,to,run,in,a,configurable,listable,bean,factory,bean,factory,this,bean,factory,configurable,listable,bean,factory,bean,factory,if,this,bean,wiring,info,resolver,null,this,bean,wiring,info,resolver,create,default,bean,wiring,info,resolver
BeanConfigurerSupport -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1496837955;Set the {@link BeanFactory} in which this aspect must configure beans.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (!(beanFactory instanceof ConfigurableListableBeanFactory)) {_			throw new IllegalArgumentException(_				 "Bean configurer aspect needs to run in a ConfigurableListableBeanFactory: " + beanFactory)__		}_		this.beanFactory = (ConfigurableListableBeanFactory) beanFactory__		if (this.beanWiringInfoResolver == null) {_			this.beanWiringInfoResolver = createDefaultBeanWiringInfoResolver()__		}_	};set,the,link,bean,factory,in,which,this,aspect,must,configure,beans;override,public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,configurable,listable,bean,factory,throw,new,illegal,argument,exception,bean,configurer,aspect,needs,to,run,in,a,configurable,listable,bean,factory,bean,factory,this,bean,factory,configurable,listable,bean,factory,bean,factory,if,this,bean,wiring,info,resolver,null,this,bean,wiring,info,resolver,create,default,bean,wiring,info,resolver
BeanConfigurerSupport -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1496955179;Set the {@link BeanFactory} in which this aspect must configure beans.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (!(beanFactory instanceof ConfigurableListableBeanFactory)) {_			throw new IllegalArgumentException(_				 "Bean configurer aspect needs to run in a ConfigurableListableBeanFactory: " + beanFactory)__		}_		this.beanFactory = (ConfigurableListableBeanFactory) beanFactory__		if (this.beanWiringInfoResolver == null) {_			this.beanWiringInfoResolver = createDefaultBeanWiringInfoResolver()__		}_	};set,the,link,bean,factory,in,which,this,aspect,must,configure,beans;override,public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,configurable,listable,bean,factory,throw,new,illegal,argument,exception,bean,configurer,aspect,needs,to,run,in,a,configurable,listable,bean,factory,bean,factory,this,bean,factory,configurable,listable,bean,factory,bean,factory,if,this,bean,wiring,info,resolver,null,this,bean,wiring,info,resolver,create,default,bean,wiring,info,resolver
BeanConfigurerSupport -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1498780456;Set the {@link BeanFactory} in which this aspect must configure beans.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (!(beanFactory instanceof ConfigurableListableBeanFactory)) {_			throw new IllegalArgumentException(_				 "Bean configurer aspect needs to run in a ConfigurableListableBeanFactory: " + beanFactory)__		}_		this.beanFactory = (ConfigurableListableBeanFactory) beanFactory__		if (this.beanWiringInfoResolver == null) {_			this.beanWiringInfoResolver = createDefaultBeanWiringInfoResolver()__		}_	};set,the,link,bean,factory,in,which,this,aspect,must,configure,beans;override,public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,configurable,listable,bean,factory,throw,new,illegal,argument,exception,bean,configurer,aspect,needs,to,run,in,a,configurable,listable,bean,factory,bean,factory,this,bean,factory,configurable,listable,bean,factory,bean,factory,if,this,bean,wiring,info,resolver,null,this,bean,wiring,info,resolver,create,default,bean,wiring,info,resolver
BeanConfigurerSupport -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1522360217;Set the {@link BeanFactory} in which this aspect must configure beans.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (!(beanFactory instanceof ConfigurableListableBeanFactory)) {_			throw new IllegalArgumentException(_				 "Bean configurer aspect needs to run in a ConfigurableListableBeanFactory: " + beanFactory)__		}_		this.beanFactory = (ConfigurableListableBeanFactory) beanFactory__		if (this.beanWiringInfoResolver == null) {_			this.beanWiringInfoResolver = createDefaultBeanWiringInfoResolver()__		}_	};set,the,link,bean,factory,in,which,this,aspect,must,configure,beans;override,public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,configurable,listable,bean,factory,throw,new,illegal,argument,exception,bean,configurer,aspect,needs,to,run,in,a,configurable,listable,bean,factory,bean,factory,this,bean,factory,configurable,listable,bean,factory,bean,factory,if,this,bean,wiring,info,resolver,null,this,bean,wiring,info,resolver,create,default,bean,wiring,info,resolver
BeanConfigurerSupport -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1530174524;Set the {@link BeanFactory} in which this aspect must configure beans.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (!(beanFactory instanceof ConfigurableListableBeanFactory)) {_			throw new IllegalArgumentException(_				 "Bean configurer aspect needs to run in a ConfigurableListableBeanFactory: " + beanFactory)__		}_		this.beanFactory = (ConfigurableListableBeanFactory) beanFactory__		if (this.beanWiringInfoResolver == null) {_			this.beanWiringInfoResolver = createDefaultBeanWiringInfoResolver()__		}_	};set,the,link,bean,factory,in,which,this,aspect,must,configure,beans;override,public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,configurable,listable,bean,factory,throw,new,illegal,argument,exception,bean,configurer,aspect,needs,to,run,in,a,configurable,listable,bean,factory,bean,factory,this,bean,factory,configurable,listable,bean,factory,bean,factory,if,this,bean,wiring,info,resolver,null,this,bean,wiring,info,resolver,create,default,bean,wiring,info,resolver
BeanConfigurerSupport -> @Override 	public void setBeanFactory(BeanFactory beanFactory);1530174524;Set the {@link BeanFactory} in which this aspect must configure beans.;@Override_	public void setBeanFactory(BeanFactory beanFactory) {_		if (!(beanFactory instanceof ConfigurableListableBeanFactory)) {_			throw new IllegalArgumentException(_				"Bean configurer aspect needs to run in a ConfigurableListableBeanFactory: " + beanFactory)__		}_		this.beanFactory = (ConfigurableListableBeanFactory) beanFactory__		if (this.beanWiringInfoResolver == null) {_			this.beanWiringInfoResolver = createDefaultBeanWiringInfoResolver()__		}_	};set,the,link,bean,factory,in,which,this,aspect,must,configure,beans;override,public,void,set,bean,factory,bean,factory,bean,factory,if,bean,factory,instanceof,configurable,listable,bean,factory,throw,new,illegal,argument,exception,bean,configurer,aspect,needs,to,run,in,a,configurable,listable,bean,factory,bean,factory,this,bean,factory,configurable,listable,bean,factory,bean,factory,if,this,bean,wiring,info,resolver,null,this,bean,wiring,info,resolver,create,default,bean,wiring,info,resolver
