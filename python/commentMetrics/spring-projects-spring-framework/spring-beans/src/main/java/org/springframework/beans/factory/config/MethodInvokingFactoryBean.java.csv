commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set if a singleton should be created, or a new object on each  * {@link #getObject()} request otherwise. Default is "true".  */ ;/**  * Set if a singleton should be created, or a new object on each  * {@link #getObject()} request otherwise. Default is "true".  */ public void setSingleton(boolean singleton) {     this.singleton = singleton. }
false;public;0;8;;@Override public void afterPropertiesSet() throws Exception {     prepare().     if (this.singleton) {         this.initialized = true.         this.singletonObject = invokeWithTargetException().     } }
true;public;0;15;/**  * Returns the same value each time if the singleton property is set  * to "true", otherwise returns the value returned from invoking the  * specified method on the fly.  */ ;/**  * Returns the same value each time if the singleton property is set  * to "true", otherwise returns the value returned from invoking the  * specified method on the fly.  */ @Override @Nullable public Object getObject() throws Exception {     if (this.singleton) {         if (!this.initialized) {             throw new FactoryBeanNotInitializedException().         }         // Singleton: return shared object.         return this.singletonObject.     } else {         // Prototype: new object on each call.         return invokeWithTargetException().     } }
true;public;0;8;/**  * Return the type of object that this FactoryBean creates,  * or {@code null} if not known in advance.  */ ;/**  * Return the type of object that this FactoryBean creates,  * or {@code null} if not known in advance.  */ @Override public Class<?> getObjectType() {     if (!isPrepared()) {         // Not fully initialized yet -> return null to indicate "not known yet".         return null.     }     return getPreparedMethod().getReturnType(). }
false;public;0;4;;@Override public boolean isSingleton() {     return this.singleton. }
